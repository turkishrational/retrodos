     1                                  ; ****************************************************************************
     2                                  ; COMMAND.COM (PCDOS 7.1 Command Interpreter) - RETRO DOS v5.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 06/08/2024
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 18/07/2024 (v7.1) - ((Previous: 19/06/2023 COMMAND.COM v6.22))
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm command7.s -l command7.txt -o COMMAND.COM)) 	
    11                                  ; ****************************************************************************
    12                                  ; Modified from 'command6.s' 
    13                                  ;		(Retro DOS 4.2 - MSDOS 6.22 COMMAND.COM) source code
    14                                  ; 		in NASM syntax (by Erdogan Tan), 19/06/2023
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Labels and comments etc. are based on MSDOS 6.0 COMMAND.COM source code.
    17                                  ; However, this source code is mainly developed from the source code of
    18                                  ; Retro DOS v4.2 COMMAND.COM and PCDOS 7.1 COMMAND.COM disassembly.
    19                                  ; ----------------------------------------------------------------------------
    20                                  ; MSDOS 6.0 source files:
    21                                  ;;============================================================================
    22                                  ;; This PCDOS source code is verified & modified by using IDA Pro Disassembler
    23                                  ;;============================================================================
    24                                  ;
    25                                  ; COMMAND.COM v6.0 source files:
    26                                  ;      command1.asm, command2.asm, rucode.asm, stub.asm, rdata.asm, init.asm,
    27                                  ;      iparse.asm, uinit.asm, tcode.asm, tbatch.asm, tbatch2.asm, tfor.asm,
    28                                  ;      dir.asm, cratio.asm, tcmd1b.asm, tcmd2a.asm, tcmd2b.asm, tenv.asm,
    29                                  ;      tenv2.asm, tmisc1.asm, tmisc2.asm, tpipe.asm, parse2.asm, path1.asm,
    30                                  ;      path2.asm, tucode.asm, copy.asm, copypr1.asm, copypr2.asm, cparse.asm,
    31                                  ;      tparse.asm, tprintf.asm, loadhi.asm, tdata.asm, tspc.asm
    32                                  ;
    33                                  ; COMMAND.COM v2.11 source files:
    34                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    35                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    36                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    37                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    38                                  ;
    39                                  ; ----------------------------------------------------------------------------
    40                                  ; 09/01/2023 - COMMAND.COM v5.0 (Multi Section Binary File Format)
    41                                  
    42                                  ;============================================================================
    43                                  ; MSDOS 6.22 COMMAND.COM, DISASSEMBLED by Erdogan Tan, 17/05/2023-05/06/2023
    44                                  ;============================================================================
    45                                  
    46                                  ; -=========================================================================¬
    47                                  ; ¦     This file is generated by The Interactive Disassembler (IDA)        ¦
    48                                  ; ¦     Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>           ¦
    49                                  ; ¦                      Licensed to: Freeware version                      ¦
    50                                  ; L=========================================================================-
    51                                  ;
    52                                  ; Input MD5   : FAF051453F215165981F10BD73071D88
    53                                  ;
    54                                  ; File Name   : C:\Users\Erdo­an\Desktop\COMMAND.COM
    55                                  ; Format      : MS-DOS COM-file
    56                                  ; Base Address: 0h Range: 100h-D675h Loaded length: D575h
    57                                  
    58                                  ;============================================================================
    59                                  ; SYSCALL.INC, MSDOS 6.0, 1991
    60                                  ;============================================================================
    61                                  ; 21/09/2018 - Retro DOS v3.0
    62                                  
    63                                  ;	SCCSID = @(#)syscall.asm	1.1 85/04/10
    64                                  ;BREAK <system call definitions>
    65                                  
    66                                  ;
    67                                  ;	Microsoft Confidential
    68                                  ;	Copyright (C) Microsoft Corporation 1991
    69                                  ;	All Rights Reserved.
    70                                  ;
    71                                  
    72                                  ;SUBTTL	system call definitions
    73                                  ;PAGE
    74                                  
    75                                  Abort				EQU 0	;  0	  0
    76                                  STD_CON_INPUT			EQU 1	;  1	  1
    77                                  Std_Con_Output			EQU 2	;  2	  2
    78                                  Std_Aux_Input			EQU 3	;  3	  3
    79                                  Std_Aux_Output			EQU 4	;  4	  4
    80                                  Std_Printer_Output		EQU 5	;  5	  5
    81                                  Raw_Con_IO			EQU 6	;  6	  6
    82                                  RAW_CON_INPUT			EQU 7	;  7	  7
    83                                  Std_Con_Input_No_Echo		EQU 8	;  8	  8
    84                                  STD_CON_STRING_OUTPUT		EQU 9	;  9	  9
    85                                  Std_Con_String_Input		EQU 10	; 10	  A
    86                                  Std_Con_Input_Status		EQU 11	; 11	  B
    87                                  STD_CON_INPUT_FLUSH		EQU 12	; 12	  C
    88                                  DISK_RESET			EQU 13	; 13	  D
    89                                  Set_Default_Drive		EQU 14	; 14	  E
    90                                  FCB_Open			EQU 15	; 15	  F
    91                                  FCB_Close			EQU 16	; 16	 10
    92                                  Dir_Search_First		EQU 17	; 17	 11
    93                                  Dir_Search_Next 		EQU 18	; 18	 12
    94                                  FCB_Delete			EQU 19	; 19	 13
    95                                  FCB_Seq_Read			EQU 20	; 20	 14
    96                                  FCB_Seq_Write			EQU 21	; 21	 15
    97                                  FCB_Create			EQU 22	; 22	 16
    98                                  FCB_Rename			EQU 23	; 23	 17
    99                                  GET_DEFAULT_DRIVE		EQU 25	; 25	 19
   100                                  Set_DMA 			EQU 26	; 26	 1A
   101                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   102                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   103                                  ;									   ;
   104                                  Get_Default_DPB 		EQU 31	; 31	 1F
   105                                  ;									   ;
   106                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   107                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   108                                  FCB_Random_Read 		EQU 33	; 33	 21
   109                                  FCB_Random_Write		EQU 34	; 34	 22
   110                                  Get_FCB_File_Length		EQU 35	; 35	 23
   111                                  Get_FCB_Position		EQU 36	; 36	 24
   112                                  SET_INTERRUPT_VECTOR		EQU 37	; 37	 25
   113                                  Create_Process_Data_Block	EQU 38	; 38	 26
   114                                  FCB_Random_Read_Block		EQU 39	; 39	 27
   115                                  FCB_Random_Write_Block		EQU 40	; 40	 28
   116                                  Parse_File_Descriptor		EQU 41	; 41	 29
   117                                  Get_Date			EQU 42	; 42	 2A
   118                                  Set_Date			EQU 43	; 43	 2B
   119                                  Get_Time			EQU 44	; 44	 2C
   120                                  Set_Time			EQU 45	; 45	 2D
   121                                  SET_VERIFY_ON_WRITE		EQU 46	; 46	 2E
   122                                  ; Extended functionality group
   123                                  Get_DMA 			EQU 47	; 47	 2F
   124                                  GET_VERSION			EQU 48	; 48	 30
   125                                  Keep_Process			EQU 49	; 49	 31
   126                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   127                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   128                                  ;									   ;
   129                                  Get_DPB 			EQU 50	; 50	 32
   130                                  ;									   ;
   131                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   132                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   133                                  Set_CTRL_C_Trapping		EQU 51	; 51	 33
   134                                  Get_InDOS_Flag			EQU 52	; 52	 34
   135                                  Get_Interrupt_Vector		EQU 53	; 53	 35
   136                                  Get_Drive_Freespace		EQU 54	; 54	 36
   137                                  CHAR_OPER			EQU 55	; 55	 37
   138                                  International			EQU 56	; 56	 38
   139                                  ;   Directory Group
   140                                  MKDir				EQU 57	; 57	 39
   141                                  RMDir				EQU 58	; 58	 3A
   142                                  CHDir				EQU 59	; 59	 3B
   143                                  ;   File Group
   144                                  Creat				EQU 60	; 60	 3C
   145                                  OPEN				EQU 61	; 61	 3D
   146                                  CLOSE				EQU 62	; 62	 3E
   147                                  READ				EQU 63	; 63	 3F
   148                                  Write				EQU 64	; 64	 40
   149                                  Unlink				EQU 65	; 65	 41
   150                                  LSEEK				EQU 66	; 66	 42
   151                                  CHMod				EQU 67	; 67	 43
   152                                  IOCTL				EQU 68	; 68	 44
   153                                  XDUP				EQU 69	; 69	 45
   154                                  XDup2				EQU 70	; 70	 46
   155                                  Current_Dir			EQU 71	; 71	 47
   156                                  ;    Memory Group
   157                                  ALLOC				EQU 72	; 72	 48
   158                                  DEALLOC				EQU 73	; 73	 49
   159                                  SETBLOCK			EQU 74	; 74	 4A
   160                                  ;    Process Group
   161                                  Exec				EQU 75	; 75	 4B
   162                                  EXIT				EQU 76	; 76	 4C
   163                                  WAITPROCESS			EQU 77	; 77	 4D
   164                                  Find_First			EQU 78	; 78	 4E
   165                                  ;   Special Group
   166                                  Find_Next			EQU 79	; 79	 4F
   167                                  ; SPECIAL SYSTEM GROUP
   168                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   169                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   170                                  ;									   ;
   171                                  SET_CURRENT_PDB 		EQU 80	; 80	 50
   172                                  GET_CURRENT_PDB 		EQU 81	; 81	 51
   173                                  Get_In_Vars			EQU 82	; 82	 52
   174                                  SetDPB				EQU 83	; 83	 53
   175                                  ;									   ;
   176                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   177                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   178                                  Get_Verify_On_Write		EQU 84	; 84	 54
   179                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   180                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   181                                  ;									   ;
   182                                  Dup_PDB 			EQU 85	; 85	 55
   183                                  ;									   ;
   184                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   185                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   186                                  Rename				EQU 86	; 86	 56
   187                                  File_Times			EQU 87	; 87	 57
   188                                  AllocOper			EQU 88	; 88	 58
   189                                  ; Network extention system calls
   190                                  GetExtendedError		EQU 89	; 89	 59
   191                                  CreateTempFile			EQU 90	; 90	 5A
   192                                  CreateNewFile			EQU 91	; 91	 5B
   193                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
   194                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   195                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   196                                  ;									   ;
   197                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
   198                                  					;	    CloseByName, CloseUser,
   199                                  					;	    CloseUserProcess,
   200                                  					;	    GetOpenFileList
   201                                  ;									   ;
   202                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   203                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   204                                  UserOper			EQU 94	; 94	 5E Get and Set
   205                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
   206                                  xNameTrans			EQU 96	; 96	 60
   207                                  PathParse			EQU 97	; 97	 61
   208                                  GetCurrentPSP			EQU 98	; 98	 62
   209                                  Hongeul 			EQU 99	; 99	 63
   210                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
   211                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   212                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   213                                  ;									   ;
   214                                  Set_Printer_Flag		EQU 100 ; 100	 64
   215                                  ;									   ;
   216                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   217                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   218                                  GetExtCntry			EQU 101 ; 101	 65
   219                                  GetSetCdPg			EQU 102 ; 102	 66
   220                                  ExtHandle			EQU 103 ; 103	 67
   221                                  Commit				EQU 104 ; 104	 68
   222                                  GetSetMediaID			EQU 105 ; 105	 69
   223                                  IFS_IOCTL			EQU 107 ; 107	 6B
   224                                  ExtOpen 			EQU 108 ; 108	 6C
   225                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   226                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   227                                  ;                                                                          ;
   228                                  ;ifdef ROMEXEC
   229                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
   230                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
   231                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
   232                                  ;endif
   233                                  ;                                                                          ;
   234                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   235                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   236                                  ;
   237                                  ;
   238                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
   239                                  OEM_C1				EQU 249 ; 249	 F9
   240                                  OEM_C2				EQU 250 ; 250	 FA
   241                                  OEM_C3				EQU 251 ; 251	 FB
   242                                  OEM_C4				EQU 252 ; 252	 FC
   243                                  OEM_C5				EQU 253 ; 253	 FD
   244                                  OEM_C6				EQU 254 ; 254	 FE
   245                                  OEM_C7				EQU 255 ; 255	 FF
   246                                  
   247                                  ;============================================================================
   248                                  ; DOSSYM.INC, MSDOS 6.0, 1991
   249                                  ;============================================================================
   250                                  ; 21/09/2018 - Retro DOS v3.0
   251                                  
   252                                  ;BREAK <Control character definitions>
   253                                  
   254                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   255                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   256                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   257                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   258                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   259                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   260                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   261                                  c_HT	    EQU     09h 	; ^I ASCII tab
   262                                  
   263                                  ;============================================================================
   264                                  ; DIRENT.INC, MSDOS 6.0, 1991
   265                                  ;============================================================================
   266                                  ; 21/09/2018 - Retro DOS v3.0
   267                                  
   268                                  ;Break <Directory entry>
   269                                  
   270                                  ;	NOTE:  These offsets are also used in the DTA for
   271                                  ;	extended FCB SearchFirst/Next. DIR_NAME lines up
   272                                  ;	with the FCB filename field, and the rest of the
   273                                  ;	DIR_ENTRY fields follow. -DavidOls
   274                                  
   275                                  ;**	DIRENT.INC - FAT Directory Entry Definition
   276                                  ;
   277                                  ;	+---------------------------+
   278                                  ;	|  (12 BYTE) filename/ext   |	    0	    0
   279                                  ;	+---------------------------+
   280                                  ;	|     (BYTE) attributes     |	    11	    B
   281                                  ;	+---------------------------+
   282                                  ;	|    (10 BYTE) reserved     |	    12	    C
   283                                  ;	+---------------------------+
   284                                  ;	| (WORD) time of last write |	    22	    16
   285                                  ;	+---------------------------+
   286                                  ;	| (WORD) date of last write |	    24	    18
   287                                  ;	+---------------------------+
   288                                  ;	|   (WORD) First cluster    |	    26	    1A
   289                                  ;	+---------------------------+
   290                                  ;	|     (DWORD) file size     |	    28	    1C
   291                                  ;	+---------------------------+
   292                                  ;
   293                                  ;   First byte of filename  = E5 -> free directory entry
   294                                  ;			    = 00 -> end of allocated directory
   295                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   296                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   297                                  ;
   298                                  
   299                                  STRUC DIR_ENTRY
   300 00000000 <res Bh>                .DIR_NAME:	RESB  11	; file name
   301 0000000B ??                      .DIR_ATTR:	RESB  1		; attribute bits
   302 0000000C ????                    .DIR_CODEPG:	RESW  1		; code page DOS 4.00
   303 0000000E ????                    .DIR_EXTCLUSTER: RESW 1		; extended attribute starting cluster
   304 00000010 ??                      .DIR_ATTR2:	RESB  1		; reserved
   305 00000011 ??????????              .DIR_PAD:	RESB  5		; reserved for expansion
   306 00000016 ????                    .DIR_TIME:	RESW  1		; time of last write
   307 00000018 ????                    .DIR_DATE:	RESW  1		; date of last write
   308 0000001A ????                    .DIR_FIRST:	RESW  1		; first allocation unit of file
   309 0000001C ????                    .DIR_SIZE_L:	RESW  1		; low 16 bits of file size
   310 0000001E ????                    .DIR_SIZE_H:	RESW  1		; high 16 bits of file size
   311                                  .size:
   312                                  
   313                                  ;	    Caution: An extended FCB SearchFirst/Next on a network
   314                                  ;	    drive under Novell Netware 286 or 386 returns the time/date
   315                                  ;	    in the SIZE fields for subdirectory files. Ordinarily,
   316                                  ;	    this field is zero for subdirectory files.
   317                                  
   318                                  ENDSTRUC
   319                                  
   320                                  ATTR_READ_ONLY	equ	 1h
   321                                  ATTR_HIDDEN	equ	 2h
   322                                  ATTR_SYSTEM	equ	 4h
   323                                  ATTR_VOLUME_ID	equ	 8h
   324                                  ATTR_DIRECTORY	equ	10h
   325                                  ATTR_ARCHIVE	equ	20h
   326                                  ATTR_DEVICE	equ	40h	; This is a VERY special bit.
   327                                  				;   NO directory entry on a disk EVER
   328                                  				;   has this bit set. It is set non-zero
   329                                  				;   when a device is found by GETPATH
   330                                  
   331                                  ATTR_ALL	equ	ATTR_HIDDEN+ATTR_SYSTEM+ATTR_DIRECTORY
   332                                  				; OR of hard attributes for FINDENTRY
   333                                  
   334                                  ATTR_IGNORE	equ	ATTR_READ_ONLY+ATTR_ARCHIVE+ATTR_DEVICE
   335                                  				; ignore this(ese) attribute(s) during
   336                                  				; search first/next
   337                                  
   338                                  ATTR_CHANGEABLE equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_SYSTEM+ATTR_ARCHIVE
   339                                  				; changeable via CHMOD
   340                                  
   341                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   342                                  
   343                                  ;============================================================================
   344                                  ; ERROR.INC, MSDOS 6.0, 1991
   345                                  ;============================================================================
   346                                  ; 21/09/2018 - Retro DOS v3.0
   347                                  
   348                                  ;**	ERROR.INC - DOS Error Codes
   349                                  ;
   350                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
   351                                  ;    return error codes through AX.	If an error occurred then
   352                                  ;    the carry bit will be set and the error code is in AX.	If no error
   353                                  ;    occurred then the carry bit is reset and AX contains returned info.
   354                                  ;
   355                                  ;    Since the set of error codes is being extended as we extend the operating
   356                                  ;    system, we have provided a means for applications to ask the system for a
   357                                  ;    recommended course of action when they receive an error.
   358                                  ;
   359                                  ;    The GetExtendedError system call returns a universal error, an error
   360                                  ;    location and a recommended course of action.	The universal error code is
   361                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
   362                                  ;    is issued.
   363                                  
   364                                  
   365                                  ;	2.0 error codes
   366                                  
   367                                  error_invalid_function		EQU	1
   368                                  ERROR_FILE_NOT_FOUND		EQU	2
   369                                  ERROR_PATH_NOT_FOUND		EQU	3
   370                                  ERROR_TOO_MANY_OPEN_FILES	EQU	4
   371                                  ERROR_ACCESS_DENIED		EQU	5
   372                                  error_invalid_handle		EQU	6
   373                                  error_arena_trashed		EQU	7
   374                                  ERROR_NOT_ENOUGH_MEMORY 	EQU	8
   375                                  error_invalid_block		EQU	9
   376                                  error_bad_environment		EQU	10
   377                                  ERROR_BAD_FORMAT		EQU	11
   378                                  error_invalid_access		EQU	12
   379                                  ERROR_INVALID_DATA		EQU	13
   380                                  ;**** reserved			EQU	14	; *****
   381                                  error_invalid_drive		EQU	15
   382                                  error_current_directory 	EQU	16
   383                                  error_not_same_device		EQU	17
   384                                  ERROR_NO_MORE_FILES		EQU	18
   385                                  
   386                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
   387                                  
   388                                  ERROR_WRITE_PROTECT		EQU	19
   389                                  error_bad_unit			EQU	20
   390                                  error_not_ready 		EQU	21
   391                                  error_bad_command		EQU	22
   392                                  error_CRC			EQU	23
   393                                  error_bad_length		EQU	24
   394                                  error_Seek			EQU	25
   395                                  error_not_DOS_disk		EQU	26
   396                                  error_sector_not_found		EQU	27
   397                                  error_out_of_paper		EQU	28
   398                                  error_write_fault		EQU	29
   399                                  error_read_fault		EQU	30
   400                                  ERROR_GEN_FAILURE		EQU	31
   401                                  
   402                                  ;	the new 3.0 error codes reported through INT 24
   403                                  
   404                                  error_sharing_violation 	EQU	32
   405                                  error_lock_violation		EQU	33
   406                                  error_wrong_disk		EQU	34
   407                                  ERROR_FCB_UNAVAILABLE		EQU	35
   408                                  ERROR_SHARING_BUFFER_EXCEEDED	EQU	36
   409                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00	;AN000;
   410                                  error_handle_EOF		EQU	38    ; DOS 4.00	;AN000;
   411                                  ERROR_HANDLE_DISK_FULL		EQU	39    ; DOS 4.00	;AN000;
   412                                  
   413                                  ;	New OEM network-related errors are 50-79
   414                                  
   415                                  error_not_supported		EQU	50
   416                                  
   417                                  error_net_access_denied		EQU	65	;M028
   418                                  
   419                                  ;	End of INT 24 reportable errors
   420                                  
   421                                  error_file_exists		EQU	80
   422                                  error_DUP_FCB			EQU	81	; *****
   423                                  error_cannot_make		EQU	82
   424                                  error_FAIL_I24			EQU	83
   425                                  
   426                                  ;	New 3.0 network related error codes
   427                                  
   428                                  error_out_of_structures 	EQU	84
   429                                  error_Already_assigned		EQU	85
   430                                  error_invalid_password		EQU	86
   431                                  error_invalid_parameter 	EQU	87
   432                                  error_NET_write_fault		EQU	88
   433                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00	;AN000;
   434                                  
   435                                  ;============================================================================
   436                                  ; DEVSYM.INC, MSDOS 6.0, 1991
   437                                  ;============================================================================
   438                                  ; 22/09/2018 - Retro DOS v3.0
   439                                  
   440                                  ;**	DevSym.inc - Device Symbols
   441                                  
   442                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   443                                  
   444                                  STRUC SYSDEV
   445 00000000 ????????                .NEXT:	RESD 1			;POINTER TO NEXT DEVICE HEADER
   446 00000004 ????                    .ATT:	RESW 1			;ATTRIBUTES OF THE DEVICE
   447 00000006 ????                    .STRAT:	RESW 1			;STRATEGY ENTRY POINT
   448 00000008 ????                    .INT:	RESW 1			;INTERRUPT ENTRY POINT
   449 0000000A ????????????????        .NAME:	RESB 8			;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   450                                  .size:
   451                                  ENDSTRUC
   452                                  
   453                                  ; 24/09/2018
   454                                  DEVTYP	EQU   8000H	; BIT 15 - 1  IF CHAR, 0 IF BLOCK
   455                                  
   456                                  ;============================================================================
   457                                  ; CURDIR.INC, MSDOS 6.0, 1991
   458                                  ;============================================================================
   459                                  ; 21/09/2018 - Retro DOS v3.0
   460                                  
   461                                  DIRSTRLEN	EQU	64+3	; Max length in bytes of directory strings
   462                                  
   463                                  ;============================================================================
   464                                  ; COMEQU.ASM, MSDOS 6.0, 1991
   465                                  ;============================================================================
   466                                  ; 21/09/2018 - Retro DOS v3.0
   467                                  
   468                                  ;/*
   469                                  ; *                      Microsoft Confidential
   470                                  ; *                      Copyright (C) Microsoft Corporation 1991
   471                                  ; *                      All Rights Reserved.
   472                                  ; */
   473                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   474                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   475                                  ;*************************************
   476                                  ; COMMAND EQUs which are not switch dependant
   477                                  
   478                                  ;		include	curdir.inc	; to get DIRSTRLEN
   479                                  ;		Note dossym.inc must already have been included!
   480                                  
   481                                  GET_COMMAND_STATE	equ	5500h	; check for existing COMMAND
   482                                  GET_ROMCOMMAND_STATE	equ	5501h	; check for existing ROM COMMAND
   483                                  
   484                                  SYM		EQU	">"
   485                                  
   486                                  LINESPERPAGE	EQU	25		;AC000; default lines per page
   487                                  
   488                                  NORMPERLIN	EQU	1
   489                                  WIDEPERLIN	EQU	5
   490                                  COMBUFLEN	EQU	128		; Length of commmand buffer
   491                                  BatLen		EQU	32		; buffer for batch files
   492                                  YES_ECHO	EQU	1		; echo line
   493                                  NO_ECHO 	EQU	0		; don't echo line
   494                                  No_Echo_Char	EQU	"@"             ; don't echo line if this is first char
   495                                  call_in_progress EQU	1		; indicate we're in the CALL command
   496                                  length_call	EQU	4		; length of CALL
   497                                  max_nest	EQU    10		; max # levels of batch nesting allowed
   498                                  FAIL_ALLOWED	EQU    00001000b	; critical error
   499                                  RETRY_ALLOWED	EQU    00010000b	; critical error
   500                                  IGNORE_ALLOWED	EQU    00100000b	; critical error
   501                                  nullcommand	EQU     1		; no command on command line
   502                                  END_OF_LINE	EQU    -1		;AN000; end of line return from parser
   503                                  END_OF_LINE_OUT EQU	0		;AN000; end of line for output
   504                                  END_OF_LINE_IN	EQU	0Dh		;AN000; end of line for input
   505                                  result_number	EQU	1		;AN000; number returned from parser
   506                                  result_string	EQU	3		;AN000; string returned from parser
   507                                  RESULT_FILESPEC EQU	5		;AN000; filespec returned from parser
   508                                  result_drive	EQU	6		;AN000; drive returned from parser
   509                                  result_date	EQU	7		;AN000; date returned from parser
   510                                  result_time	EQU	8		;AN000; time returned from parser
   511                                  RESULT_NO_ERROR EQU	0		;AN000; no error returned from parser
   512                                  no_cont_flag	EQU	0		;AN000; no control flags for message
   513                                  util_msg_class	EQU	-1		;AN000; message class for utility
   514                                  ext_msg_class	EQU	1		;AN000; message class for extended error
   515                                  parse_msg_class EQU	2		;AN000; message class for parse error
   516                                  crit_msg_class	EQU	3		;AN000; message class for critical error
   517                                  ext_crlf_class	EQU	081h		;AN054; message class for extended error with no CRLF
   518                                  colon_char	EQU	":"             ;AN000; colon character
   519                                  crt_ioctl_ln	EQU	14		;AN000; default length of data for display ioctl
   520                                  text_mode	EQU	1		;AN000; text mode return from ioctl
   521                                  get_generic	EQU	07Fh		;AN000; generic ioctl - get device info
   522                                  set_crit_dev	EQU	0100H		;AN000; device attribute for critical error on I/0
   523                                  mult_ansi	EQU	01Ah		;AC064; multiplex for ansi.sys
   524                                  mult_shell_get	EQU	01902h		;AC065; multiplex for Shell - get next command
   525                                  mult_shell_brk	EQU	01903h		;AN000; multiplex for Shell - ^C batch check
   526                                  shell_action	equ	0FFh		;AN000; SHELL - return for taking SHELL specific action
   527                                  bat_not_open	EQU	-1		;AN000; batch handle will be set to this if not open
   528                                  bat_open_handle EQU	19		;AN000; handle will be in this position in JFN table
   529                                  Ptr_seg_pos	equ	7		;AN000; Offset from start of message block for subst segment
   530                                  Ptr_off_pos	equ	5		;AN000; Offset from start of message block for subst offset
   531                                  %define Parm_off_pos	word [2]	;AN000; Offset from start of subst list for subst offset
   532                                  parm_block_size equ	11		;AN000; size of message subst block
   533                                  blank		equ	" "             ;AN000; blank character
   534                                  no_subst	equ	0		;AN000; no substitutions for messages
   535                                  one_subst	equ	1		;AN000; one substitution for messages
   536                                  no_handle_out	equ	-1		;AN000; use function 1 thru 12 for message retriever
   537                                  res_subst	equ	2		;AN000; offset from start of message definition to number of subst
   538                                  read_open_mode	equ   0000000000000000b ;AN024; extended open mode for read
   539                                  deny_write	equ   0000000000100000b	; deny write sharing mode ;M031
   540                                  deny_none	equ   0000000001000000b	; deny none sharing mode ;Myyy	
   541                                  read_open_flag	equ   0000000100000001b ;AN000; extended open flags for read
   542                                  write_open_mode equ   0000000000000001b ;AN024; extended open mode for read
   543                                  write_open_flag equ   0000000100000001b ;AN000; extended open flags for read
   544                                  creat_open_flag equ   0000000100010010b ;AN000; extended open flags for read
   545                                  capital_A	equ	'A'             ;AC000;
   546                                  vbar		equ	'|'             ;AC000;
   547                                  labracket	equ	'<'             ;AC000;
   548                                  rabracket	equ	'>'             ;AC000;
   549                                  dollar		equ	'$'             ;AC000;
   550                                  lparen		equ	'('             ;AC000;
   551                                  rparen		equ	')'             ;AC000;
   552                                  nullrparen	equ	29h		;AC000;
   553                                  in_word 	equ	4E49h		;AC000; 'NI'  ('IN' backwards)
   554                                  do_word 	equ	4F44h		;AC000; 'OD'  ('DO' backwards)
   555                                  star		equ	'*'             ;AC000;
   556                                  plus_chr	equ	'+'             ;AC000;
   557                                  small_a 	equ	'a'             ;AC000;
   558                                  small_z 	equ	'z'             ;AC000;
   559                                  dot_chr 	equ	'.'             ;AC000;
   560                                  tab_chr 	equ	9		;AN032;
   561                                  equal_chr	equ	'='             ;AN032;
   562                                  semicolon	equ	';'             ;AN049;
   563                                  dot_qmark	equ	2e3fh		;AC000; '.?'
   564                                  dot_colon	equ	2e3ah		;AC000; '.:'
   565                                  capital_n	equ	0		;AC000; result from Y/N call if N entered
   566                                  capital_y	equ	1		;AC000; result from Y/N call if Y entered
   567                                  AppendInstall	equ	0B700H		;AN020; append install check
   568                                  AppendDOS	equ	0B702H		;AN020; append DOS version check
   569                                  AppendGetState	equ	0B706H		;AN020; append get current state
   570                                  AppendSetState	equ	0B707H		;AN020; append set current state
   571                                  AppendTruename	equ	0B711H		;AN042; Get file's real location for Batch
   572                                  search_attr	equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_DIRECTORY  ;AC042;
   573                                  
   574                                  ;*************************************
   575                                  ;* PARSE ERROR MESSAGES
   576                                  ;*************************************
   577                                  
   578                                  MoreArgs_Ptr	equ	1		;AN000;"Too many parameters" message number
   579                                  LessArgs_Ptr	equ	2		;AN000;"Required parameter missing" message number
   580                                  BadSwt_Ptr	equ	3		;AN000;"Invalid switch" message number
   581                                  BadParm_Ptr	equ	10		;AN000;"Invalid parameter" message number
   582                                  
   583                                  ;*************************************
   584                                  ;* EQUATES FOR MESSAGE RETRIEVER
   585                                  ;*************************************
   586                                  
   587                                  GET_EXTENDED_MSG	EQU	0	;AN000;  get extended message address
   588                                  SET_EXTENDED_MSG	EQU	1	;AN000;  set extended message address
   589                                  GET_PARSE_MSG		EQU	2	;AN000;  get parse message address
   590                                  SET_PARSE_MSG		EQU	3	;AN000;  set parse message address
   591                                  GET_CRITICAL_MSG	EQU	4	;AN000;  get critical message address
   592                                  SET_CRITICAL_MSG	EQU	5	;AN000;  set critical message address
   593                                  MESSAGE_2F		EQU	46	;AN000;  minor code for message retriever
   594                                  
   595                                  ;*********************************
   596                                  ;* EQUATES FOR INT 10H
   597                                  ;*********************************
   598                                  
   599                                  VIDEO_IO_INT		EQU	10H	;AN000;  equate for int 10h
   600                                  SET_VIDEO_MODE		EQU	0	;AN000;  set video mode
   601                                  SET_CURSOR_POSITION	EQU	2	;AN000;  set new cursor position
   602                                  SCROLL_VIDEO_PAGE	EQU	6	;AN000;  scroll active page up
   603                                  VIDEO_ATTRIBUTE 	EQU	7	;AN000;  attribute to be used on blank line
   604                                  SET_COLOR_PALETTE	EQU	11	;AN000;  set color for video
   605                                  GET_VIDEO_STATE 	EQU	15	;AN000;  get current video state
   606                                  VIDEO_ALPHA		EQU	3	;AN000;  alpha video is 3 or below
   607                                  VIDEO_BW		EQU	7	;AN000;  mode for 80X25 black & white
   608                                  
   609                                  AltPipeChr	equ	"|"             ; alternate pipe character
   610                                  
   611                                  FCB		equ	5Ch
   612                                  
   613                                  STRUC VARSTRUC
   614 00000000 ??                      .ISDIR:		RESB	1
   615 00000001 ??                      .SIZ:		RESB	1
   616 00000002 ????                    .TTAIL:		RESW	1
   617 00000004 ??                      .INFO:		RESB	1
   618 00000005 <res 57h>               .BUF:		RESB	DIRSTRLEN + 20
   619                                  .size:
   620                                  ENDSTRUC
   621                                  ;
   622                                  ; Flags for internal command parsing
   623                                  ;
   624                                  fCheckDrive	equ	00000001b	; validate drive letter
   625                                  fSwitchAllowed	equ	00000010b	; switches allowed
   626                                  fLimitHelp	equ	00000100b	; /? must appear alone
   627                                  
   628                                  ;
   629                                  ; Test switches
   630                                  ;
   631                                  fParse		EQU	0001h		; display results of parseline
   632                                  
   633                                  ;
   634                                  ; Batch segment structure
   635                                  ;
   636                                  ;   BYTE    type of segment
   637                                  ;   BYTE    echo state of parent on entry to batch file
   638                                  ;   WORD    segment of last batch file
   639                                  ;   WORD    segment for FOR command
   640                                  ;   BYTE    FOR flag state on entry to batch file
   641                                  ;   DWORD   offset for next line
   642                                  ;   10 WORD pointers to parameters. -1 is empty parameter
   643                                  ;   ASCIZ   file name (with . and ..)
   644                                  ;   BYTES   CR-terminated parameters
   645                                  ;   BYTE    0 flag to indicate end of parameters
   646                                  ;
   647                                  
   648                                  BATCHTYPE   equ 0
   649                                  
   650                                  STRUC BATCHSEGMENT
   651 00000000 ??                      .BatType:	RESB	1		; signature
   652 00000001 ??                      .BatEchoFlag:	RESB	1		; G state of echo
   653                                  ; MSDOS 5.0 (& 6.0) - 11/01/2023
   654 00000002 ??                      .BatchEOF:	RESB	1		; records if EOF reached on file
   655 00000003 ????                    .BatLast: 	RESW	1		; G segment of last batch file
   656 00000005 ????                    .BatForPtr:	RESW	1		; G segment for FOR command
   657 00000007 ??                      .BatForFlag:	RESB	1		; G state of FOR
   658 00000008 ????????                .BatSeek:	RESD	1		; lseek position of next char
   659 0000000C <res 14h>               .BatParm:	RESW	10		; pointers to parameters
   660 00000020 ??                      .BatFile:	RESB	1		; beginning of batch file name
   661                                  .SIZE:
   662                                  ENDSTRUC
   663                                  
   664                                  ANULL		equ	0		; terminates an argv string
   665                                  ARGMAX		equ	64		; max args on a command line
   666                                  ;ARGBLEN 	equ	2*128		; 1char each plus term NUL
   667                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM ;*
   668                                  ARGBLEN 	equ	2*64
   669                                  tplen		equ	64		; max size of one argument
   670                                  arg_cnt_error	equ	1		; number of args > MAXARG
   671                                  arg_buf_ovflow	equ	2		; overflowed argbuffer
   672                                  
   673                                  STRUC ARGV_ELE				; elements in the argv array
   674 00000000 ????                    .argpointer:	RESW	1		; pointer to the argstring
   675 00000002 ??                      .argflags:	RESB	1		; cparse flags for this argstring
   676 00000003 ????                    .argstartel:	RESW	1		; the result of cparse's [STARTEL]
   677 00000005 ????                    .arglen:	RESW	1		; cparse's char count + one (for null)
   678 00000007 ????                    .argsw_word:	RESW	1		; any switches after this? what kinds?
   679 00000009 ????                    .arg_ocomptr:	RESW	1		; pointer into original command string
   680                                  .SIZE:	; 11 ; 27/07/2024
   681                                  ENDSTRUC
   682                                  
   683                                  STRUC ARG_UNIT
   684 00000000 <res 2C0h>              .argv:		RESB	ARGMAX * ARGV_ELE.SIZE ; 704 ; 27/07/2024
   685 000002C0 ????                    .argvcnt:	RESW	1		; number of arguments
   686 000002C2 ????                    .argswinfo:	RESW	1		; Switch information for entire line
   687 000002C4 <res 100h>              .argbuf:	RESW	ARGBLEN		; storage for argv strings
   688 000003C4 <res 80h>               .argforcombuf:	RESB	COMBUFLEN	; Original for loop command string
   689                                  .SIZE:	; 1092 ; 27/07/2024 ; (it was 1348 in MSDOS 5.0-6.22 COMMAND.COM) ;*
   690                                  ENDSTRUC
   691                                  
   692                                  ; Equates for initialization
   693                                  ;
   694                                  INITINIT	equ	01h		; initialization in progress
   695                                  INITSPECIAL	equ	02h		; in initialization time/date routine
   696                                  INITCTRLC	equ	04h		; already in ^C handler
   697                                  
   698                                  ;============================================================================
   699                                  ;  INTNAT.INC, MSDOS 6.0, 1991
   700                                  ;============================================================================
   701                                  ; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   702                                  
   703                                  ; Current structure of the data returned by the international call
   704                                  
   705                                  struc INTERNAT_BLOCK
   706 00000000 ????                    .date_tim_format: resw 1		; 0-USA, 1-EUR, 2-JAP
   707 00000002 ??????????              .currency_sym:	resb 5			; Currency Symbol 5 bytes
   708 00000007 ????                    .thous_sep:	resb 2			; Thousands separator 2 bytes
   709 00000009 ????                    .decimal_sep:	resb 2			; Decimal separator 2 bytes
   710 0000000B ????                    .date_sep:	resb 2			; Date separator 2 bytes
   711 0000000D ????                    .time_sep:	resb 2			; Decimal separator 2 bytes
   712 0000000F ??                      .bit_field:	resb 1			; Bit values
   713                                  					;   Bit 0 = 0 if currency symbol first
   714                                  					;	  = 1 if currency symbol last
   715                                  					;   Bit 1 = 0 if No space after currency symbol
   716                                  					;	  = 1 if space after currency symbol
   717                                  .currency_cents:
   718 00000010 ??                      		resb 1			; Number of places after currency dec point
   719 00000011 ??                      .time_24:	resb 1			; 1 if 24 hour time, 0 if 12 hour time
   720 00000012 ????????                .map_call:	resw 2			; Address of case mapping call (DWORD)
   721                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
   722                                  					;  in pieces.
   723 00000016 ??                      .data_sep:	resb 1			; Data list separator character
   724 00000017 ??                      		resb 1
   725                                  endstruc
   726                                  
   727                                  ; Max size of the block returned by the INTERNATIONAL call
   728                                  
   729                                  internat_block_max equ 32
   730                                  
   731                                  ;============================================================================
   732                                  ; FIND.INC (MSDOS 3.3, 1987) - REDIRSYM.INC (MSDOS 6.0, 1991) 
   733                                  ;============================================================================
   734                                  ; 13/10/2018 - Retro DOS v3.0
   735                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   736                                  
   737                                  ;Break	<find first/next buffer>
   738                                  
   739                                  	; MSDOS 3.3 & MSDOS 6.0
   740                                  
   741                                  struc FIND_BUF
   742 00000000 ??                      .DRIVE:	    resb 1	; drive of search
   743 00000001 <res Bh>                .NAME:	    resb 11	; formatted name
   744 0000000C ??                      .SATTR:	    resb 1	; attribute of search
   745 0000000D ????                    .LASTENT:   resw 1	; LastEnt
   746 0000000F ????                    .DIRSTART:  resw 1	; DirStart
   747 00000011 ????????                .NETID:	    resb 4	; Reserved for NET
   748 00000015 ??                      .ATTR:	    resb 1	; attribute found
   749 00000016 ????                    .TIMR:	    resw 1	; time
   750 00000018 ????                    .DATE:	    resw 1	; date
   751 0000001A ????                    .SIZE_L:    resw 1	; low(size)
   752 0000001C ????                    .SIZE_H:    resw 1	; high(size)
   753 0000001E <res Dh>                .PNAME:	    resb 13	; packed name
   754                                  .size:
   755                                  endstruc
   756                                  
   757                                  ;=============================================================================
   758                                  ; PDB.INC, MSDOS 6.0, 1991
   759                                  ;=============================================================================
   760                                  ; 24/09/2018 - Retro DOS v3.0 (08/07/2018, 'msdos3.s')
   761                                  
   762                                  ;**	Process data block (otherwise known as program header)
   763                                  
   764                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   765                                  ;	can be rearranged here, ever. Reserved areas are probably safe
   766                                  ;	for use.
   767                                  
   768                                  FILPERPROC	EQU     20
   769                                  
   770                                  struc PDB	; Process_data_block
   771 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   772 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   773 00000004 ??                                      resb 1
   774 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   775 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   776 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   777 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   778 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   779 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   780 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   781 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   782 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   783 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   784 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   785 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   786 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   787 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   788 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   789 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   790 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   791 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   792                                  				;  an extended FCB
   793                                  ;endstruc 	; MSDOS 3.3
   794                                  	  	; MSDOS 6.0
   795 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   796 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   797 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   798 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   799                                  endstruc
   800                                  
   801                                  ;=============================================================================
   802                                  ; VERSIONA.INC, MSDOS 6.0, 1991
   803                                  ;=============================================================================
   804                                  ; 24/09/2018 - Retro DOS v3.0
   805                                  
   806                                  ;major_version	equ 6		; Major DOS version
   807                                  ;minor_version	equ 0		; Minor DOS Version
   808                                  
   809                                  ;expected_version    equ     (MINOR_VERSION SHL 8)+MAJOR_VERSION
   810                                  
   811                                  ; MSDOS 3.3 COMMAND.COM
   812                                  ;MAJOR_VERSION	EQU 3
   813                                  ;MINOR_VERSION	EQU 30
   814                                  
   815                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
   816                                  ;MAJOR_VERSION	EQU 5
   817                                  ;MINOR_VERSION	EQU 0
   818                                  
   819                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
   820                                  ;MAJOR_VERSION	EQU 6		; Major DOS version
   821                                  ;MINOR_VERSION	EQU 22		; Minor DOS version
   822                                  
   823                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
   824                                  MAJOR_VERSION	EQU 7		; Major DOS version
   825                                  MINOR_VERSION	EQU 10		; Minor DOS version
   826                                  
   827                                  EXPECTED_VERSION EQU (MINOR_VERSION<<8)+MAJOR_VERSION	
   828                                  
   829                                  ;-----------------------------------------------------------------------------
   830                                  ; 21/09/2018
   831                                  ;-----------------------------------------------------------------------------
   832                                  ; Retro DOS v3.0 NOTE:  
   833                                  ;	Following source code is as disassembled code of MSDOS 3.3 COMMAND.COM
   834                                  ;	with minor modifications which are done by me (Erdogan Tan).
   835                                  ;	.. but comments and descriptions are from MSDOS 6.0 COMMAND.COM
   836                                  ;	source code files (written by using MASM syntax).
   837                                  ;-----------------------------------------------------------------------------
   838                                  ; All of this Retro DOS 3.0 (2018) source code has been written by using
   839                                  ; NASM (2.11) x86 assembly language/compiler syntax.	
   840                                  ;----------------------------------------------------------------------------- 	
   841                                  
   842                                  ;=============================================================================
   843                                  ; COMMAND1.ASM, MSDOS 6.0, 1991
   844                                  ;=============================================================================
   845                                  ; 21/09/2018 - Retro DOS v3.0
   846                                  
   847                                  ;	page ,132
   848                                  ;	title	COMMAND - resident code for COMMAND.COM
   849                                  ;	name	COMMAND
   850                                  
   851                                  ;/*
   852                                  ; *                      Microsoft Confidential
   853                                  ; *                      Copyright (C) Microsoft Corporation 1991
   854                                  ; *                      All Rights Reserved.
   855                                  ; */
   856                                  
   857                                  ;*****************************************************************************
   858                                  ;
   859                                  ; MODULE:	       COMMAND.COM
   860                                  ;
   861                                  ; DESCRIPTIVE NAME:    Default DOS command interpreter
   862                                  ;
   863                                  ; FUNCTION:	       This version of COMMAND is divided into three distinct
   864                                  ;		       parts.  First is the resident portion, which includes
   865                                  ;		       handlers for interrupts	23H (Cntrl-C), 24H (fatal
   866                                  ;		       error), and 2EH (command line execute); it also has
   867                                  ;		       code to test and, if necessary, reload the transient
   868                                  ;		       portion. Following the resident is the init code, which
   869                                  ;		       is overwritten after use.  Then comes the transient
   870                                  ;		       portion, which includes all command processing (whether
   871                                  ;		       internal or external).  The transient portion loads at
   872                                  ;		       the end of physical memory, and it may be overlayed by
   873                                  ;		       programs that need as much memory as possible. When the
   874                                  ;		       resident portion of command regains control from a user
   875                                  ;		       program, a check sum is performed on the transient
   876                                  ;		       portion to see if it must be reloaded.  Thus programs
   877                                  ;		       which do not need maximum memory will save the time
   878                                  ;		       required to reload COMMAND when they terminate.
   879                                  ;
   880                                  ; ENTRY POINT:	       PROGSTART
   881                                  ;
   882                                  ; INPUT:	       command line at offset 81H
   883                                  ;
   884                                  ; EXIT_NORMAL:	       No exit from root level command processor.  Can exit
   885                                  ;		       from a secondary command processor via the EXIT
   886                                  ;		       internal command.
   887                                  ;
   888                                  ; EXIT_ERROR:	       Exit to prior command processor if possible, otherwise
   889                                  ;		       hang the system.
   890                                  ;
   891                                  ; INTERNAL REFERENCES:
   892                                  ;
   893                                  ;     ROUTINES:        See the COMMAND Subroutine Description Document
   894                                  ;		       (COMMAND.DOC)
   895                                  ;
   896                                  ;     DATA AREAS:      See the COMMAND Subroutine Description Document
   897                                  ;		       (COMMAND.DOC)
   898                                  ;
   899                                  ; EXTERNAL REFERENCES:
   900                                  ;
   901                                  ;      ROUTINES:       none
   902                                  ;
   903                                  ;      DATA AREAS:     none
   904                                  ;
   905                                  ;*****************************************************************************
   906                                  ;
   907                                  ;			      REVISION HISTORY
   908                                  ;			      ----------------
   909                                  ;
   910                                  ; DOS 1.00 to DOS 3.30
   911                                  ; --------------------------
   912                                  ; SEE REVISION LOG IN COPY.ASM ALSO
   913                                  ;
   914                                  ; REV 1.17
   915                                  ;    05/19/82  Fixed bug in BADEXE error (relocation error must return to
   916                                  ;	       resident since the EXELOAD may have overwritten the transient.
   917                                  ;
   918                                  ; REV 1.18
   919                                  ;    05/21/82  IBM version always looks on drive A
   920                                  ;	       MSVER always looks on default drive
   921                                  ;
   922                                  ; REV 1.19
   923                                  ;    06/03/82  Drive spec now entered in command line
   924                                  ;    06/07/82  Added VER command (print DOS version number) and VOL command
   925                                  ;	       (print volume label)
   926                                  ;
   927                                  ; REV 1.20
   928                                  ;    06/09/82  Prints "directory" after directories
   929                                  ;    06/13/82  MKDIR, CHDIR, PWD, RMDIR added
   930                                  ;
   931                                  ; REV 1.50
   932                                  ;	       Some code for new 2.0 DOS, sort of HACKey.  Not enough time to
   933                                  ;	       do it right.
   934                                  ;
   935                                  ; REV 1.70
   936                                  ;	       EXEC used to fork off new processes
   937                                  ;
   938                                  ; REV 1.80
   939                                  ;	       C switch for single command execution
   940                                  ;
   941                                  ; REV 1.90
   942                                  ;	       Batch uses XENIX
   943                                  ;
   944                                  ; Rev 2.00
   945                                  ;	       Lots of neato stuff
   946                                  ;	       IBM 2.00 level
   947                                  ;
   948                                  ; Rev 2.01
   949                                  ;	       'D' switch for date time suppression
   950                                  ;
   951                                  ; Rev 2.02
   952                                  ;	       Default userpath is NUL rather than BIN
   953                                  ;		       same as IBM
   954                                  ;	       COMMAND split into pieces
   955                                  ;
   956                                  ; Rev 2.10
   957                                  ;	       INTERNATIONAL SUPPORT
   958                                  ;
   959                                  ; Rev 2.50
   960                                  ;	       all the 2.x new stuff -MU
   961                                  ;
   962                                  ; Rev 3.30     (Ellen G)
   963                                  ;	       CALL internal command (TBATCH2.ASM)
   964                                  ;	       CHCP internal command (TCMD2B.ASM)
   965                                  ;	       INT 24H support of abort, retry, ignore, and fail prompt
   966                                  ;	       @ sign suppression of batch file line
   967                                  ;	       Replaceable environment value support in batch files
   968                                  ;	       INT 2FH calls for APPEND
   969                                  ;	       Lots of PTR fixes!
   970                                  ;
   971                                  ; Beyond 3.30 to forever  (Ellen G)
   972                                  ; ----------------------
   973                                  ;
   974                                  ; A000 DOS 4.00  -	Use SYSPARSE for internal commands
   975                                  ;			Use Message Retriever services
   976                                  ;			/MSG switch for resident extended error msg
   977                                  ;			Convert to new capitalization support
   978                                  ;			Better error recovery on CHCP command
   979                                  ;			Code page file tag support
   980                                  ;			TRUENAME internal command
   981                                  ;			Extended screen line support
   982                                  ;			/P switch on DEL/ERASE command
   983                                  ;			Improved file redirection error recovery
   984                                  ;	(removed)	Improved batch file performance
   985                                  ;			Unconditional DBCS support
   986                                  ;			Volume serial number support
   987                                  ;	(removed)	COMMENT=?? support
   988                                  ;
   989                                  ; A001	PTM P20 	Move system_cpage from TDATA to TSPC
   990                                  ;
   991                                  ; A002	PTM P74 	Fix PRESCAN so that redirection symbols do not
   992                                  ;			require delimiters.
   993                                  ;
   994                                  ; A003	PTM P5,P9,P111	Included in A000 development
   995                                  ;
   996                                  ; A004	PTM P86 	Fix IF command to turn off piping before
   997                                  ;			executing
   998                                  ;
   999                                  ; A005	DCR D17 	If user specifies an extension on the command
  1000                                  ;			line search for that extension only.
  1001                                  ;
  1002                                  ; A006	DCR D15 	New message for MkDir - "Directory already
  1003                                  ;			exists"
  1004                                  ;
  1005                                  ; A007	DCR D2		Change CTTY so that a write is done before XDUP
  1006                                  ;
  1007                                  ; A008	PTM P182	Change COPY to set default if invalid function
  1008                                  ;			returned from code page call.
  1009                                  ;
  1010                                  ; A009	PTM P179	Add CRLF to invalid disk change message
  1011                                  ;
  1012                                  ; A010	DCR D43 	Allow APPEND to do a far call to SYSPARSE in
  1013                                  ;			transient COMMAND.
  1014                                  ;
  1015                                  ; A011	DCR D130	Change redirection to overwrite an EOF mark
  1016                                  ;			before appending to a file.
  1017                                  ;
  1018                                  ; A012	PTM P189	Fix redirection error recovery.
  1019                                  ;
  1020                                  ; A013	PTM P330	Change date format
  1021                                  ;
  1022                                  ; A014	PTM P455	Fix echo parsing
  1023                                  ;
  1024                                  ; A015	PTM P517	Fix DIR problem with * vs *.
  1025                                  ;
  1026                                  ; A016	PTM P354	Fix extended error message addressing
  1027                                  ;
  1028                                  ; A017	PTM P448	Fix appending to 0 length files
  1029                                  ;
  1030                                  ; A018	PTM P566,P3903	Fix parse error messages to print out parameter
  1031                                  ;			the parser fails on. Fail on duplicate switches.
  1032                                  ;
  1033                                  ; A019	PTM P542	Fix device name to be printed correctly during
  1034                                  ;			critical error
  1035                                  ;
  1036                                  ; A020	DCR D43 	Set append state off while in DIR
  1037                                  ;
  1038                                  ; A021	PTM P709	Fix CTTY printing ascii characters.
  1039                                  ;
  1040                                  ; A022	DCR D209	Enhanced error recovery
  1041                                  ;
  1042                                  ; A023	PTM P911	Fix ANSI.SYS IOCTL structure.
  1043                                  ;
  1044                                  ; A024	PTM P899	Fix EXTOPEN open modes.
  1045                                  ;
  1046                                  ; A025	PTM P922	Fix messages and optimize PARSE switches
  1047                                  ;
  1048                                  ; A026	DCR D191	Change redirection error recovery support.
  1049                                  ;
  1050                                  ; A027	PTM P991	Fix so that KAUTOBAT & AUTOEXEC are terminated
  1051                                  ;			with a carriage return.
  1052                                  ;
  1053                                  ; A028	PTM P1076	Print a blank line before printing invalid
  1054                                  ;			date and invalid time messages.
  1055                                  ;
  1056                                  ; A029	PTM P1084	Eliminate calls to parse_check_eol in DATE
  1057                                  ;			and TIME.
  1058                                  ;
  1059                                  ; A030	DCR D201	New extended attribute format.
  1060                                  ;
  1061                                  ; A031	PTM P1149	Fix DATE/TIME add blank before prompt.
  1062                                  ;
  1063                                  ; A032	PTM P931	Fix =ON, =OFF for BREAK, VERIFY, ECHO
  1064                                  ;
  1065                                  ; A033	PTM P1298	Fix problem with system crashes on ECHO >""
  1066                                  ;
  1067                                  ; A034	PTM P1387	Fix COPY D:fname+,, to work
  1068                                  ;
  1069                                  ; A035	PTM P1407	Fix so that >> (appending) to a device does
  1070                                  ;			do a read to determine eof.
  1071                                  ;
  1072                                  ; A036	PTM P1406	Use 69h instead of 44h to get volume serial
  1073                                  ;			so that ASSIGN works correctly.
  1074                                  ;
  1075                                  ; A037	PTM P1335	Fix COMMAND /C with FOR
  1076                                  ;
  1077                                  ; A038	PTM P1635	Fix COPY so that it doesn't accept /V /V
  1078                                  ;
  1079                                  ; A039	DCR D284	Change invalid code page tag from -1 to 0.
  1080                                  ;
  1081                                  ; A040	PTM P1787	Fix redirection to cause error when no file is
  1082                                  ;			specified.
  1083                                  ;
  1084                                  ; A041	PTM P1705	Close redirected files after internal APPEND
  1085                                  ;			executes.
  1086                                  ;
  1087                                  ; A042	PTM P1276	Fix problem of APPEND paths changes in batch
  1088                                  ;			files causing loss of batch file.
  1089                                  ;
  1090                                  ; A043	PTM P2208	Make sure redirection is not set up twice for
  1091                                  ;			CALL'ed batch files.
  1092                                  ;
  1093                                  ; A044	PTM P2315	Set switch on PARSE so that 0ah is not used
  1094                                  ;			as an end of line character
  1095                                  ;
  1096                                  ; A045	PTM P2560	Make sure we don't lose parse, critical error,
  1097                                  ;			and extended message pointers when we EXIT if
  1098                                  ;			COMMAND /P is the top level process.
  1099                                  ;
  1100                                  ; A046	PTM P2690	Change COPY message "fn File not found" to
  1101                                  ;			"File not found - fn"
  1102                                  ;
  1103                                  ; A047	PTM P2819	Fix transient reload prompt message
  1104                                  ;
  1105                                  ; A048	PTM P2824	Fix COPY path to be upper cased.  This was broken
  1106                                  ;			when DBCS code was added.
  1107                                  ;
  1108                                  ; A049	PTM P2891	Fix PATH so that it doesn't accept extra characters
  1109                                  ;			on line.
  1110                                  ;
  1111                                  ; A050	PTM P3030	Fix TYPE to work properly on files > 64K
  1112                                  ;
  1113                                  ; A051	PTM P3011	Fix DIR header to be compatible with prior releases.
  1114                                  ;
  1115                                  ; A052	PTM P3063,P3228 Fix COPY message for invalid filename on target.
  1116                                  ;
  1117                                  ; A053	PTM P2865	Fix DIR to work in 40 column mode.
  1118                                  ;
  1119                                  ; A054	PTM P3407	Code reduction and critical error on single line
  1120                                  ;	PTM P3672	(Change to single parser exported under P3407)
  1121                                  ;
  1122                                  ; A055	PTM P3282	Reset message service variables in INT 23h to fix
  1123                                  ;			problems with breaking out of INT 24h
  1124                                  ;
  1125                                  ; A056	PTM P3389	Fix problem of environment overlaying transient.
  1126                                  ;
  1127                                  ; A057	PTM P3384	Fix COMMAND /C so that it works if there is no space
  1128                                  ;			before the "string".  EX: COMMAND /CDIR
  1129                                  ;
  1130                                  ; A058	PTM P3493	Fix DBCS so that CPARSE eats second character of
  1131                                  ;			DBCS switch.
  1132                                  ;
  1133                                  ; A059	PTM P3394	Change the TIME command to right align the display of
  1134                                  ;			the time.
  1135                                  ;
  1136                                  ; A060	PTM P3672	Code reduction - change PARSE and EXTENDED ERROR
  1137                                  ;			messages to be disk based.  Only keep them if /MSG
  1138                                  ;			is used.
  1139                                  ;
  1140                                  ; A061	PTM P3928	Fix so that transient doesn't reload when breaking
  1141                                  ;			out of internal commands, due to substitution blocks
  1142                                  ;			not being reset.
  1143                                  ;
  1144                                  ; A062	PTM P4079	Fix segment override for fetching address of environment
  1145                                  ;			of parent copy of COMMAND when no COMSPEC exists in
  1146                                  ;			secondary copy of environment.	Change default slash in
  1147                                  ;			default comspec string to backslash.
  1148                                  ;
  1149                                  ; A063	PTM P4140	REDIRECTOR and IFSFUNC changed interface for getting
  1150                                  ;			text for critical error messages.
  1151                                  ;
  1152                                  ; A064	PTM P4934	Multiplex number for ANSI.SYS changed due to conflict
  1153                                  ;	5/20/88 	with Microsoft product already shipped.
  1154                                  ;
  1155                                  ; A065	PTM P4935	Multiplex number for SHELL changed due to conflict
  1156                                  ;	 5/20/88	with Microsoft product already shipped.
  1157                                  ;
  1158                                  ; A066	PTM P4961	DIR /W /P scrolled first line off the screen in some
  1159                                  ;	 5/24/88	cases; where the listing would barely fit without the
  1160                                  ;			header and space remaining.
  1161                                  ;
  1162                                  ; A067	PTM P5011	For /E: values of 993 to 1024 the COMSPEC was getting
  1163                                  ;	 6/6/88 	trashed.  Turns out that the SETBLOCK for the new
  1164                                  ;			environment was putting a "Z block" marker in the old
  1165                                  ;			environment.  The fix is to move to the old environment
  1166                                  ;			to the new environment before doing the SETBLOCK.
  1167                                  ;
  1168                                  ; A068  PTM P5568       IR79754 APPEND /x:on not working properly with DIR/VOL
  1169                                  ;        09/19/88       because the check for APPEND needed to be performed
  1170                                  ;                       before the DIR's findfirst.
  1171                                  ;
  1172                                  ; A069  PTM P5726       IR80540 COMSPEC_flag not properly initialized and
  1173                                  ;        10/30/88       executed.  Causing AUSTIN problem testing LAN/DW4 re-
  1174                                  ;                       loading trans w/new comspec with no user change comspec.
  1175                                  ;
  1176                                  ; A070  PTM P5734       IR80484 Batch file causes sys workspace to be corrupted.
  1177                                  ;        11/05/88       Expansion of environment variables into batch line of
  1178                                  ;                       128 chars was not being counted and "%" which should be
  1179                                  ;                       ignored were being counted.
  1180                                  ;
  1181                                  ; A071  PTM P5854       IR82061 Invalid COMMAND.COM when Word Perfect, Prompt
  1182                                  ;        03/02/89       used.  Comspec_flag was not in protected data file be-
  1183                                  ;                       ing included in checksum and was being overwritten by
  1184                                  ;                       WP.  Moved var from Tspc to Tdata so Trans would reload.
  1185                                  ;                       Also removed fix A069 (because flag now protected).
  1186                                  ;
  1187                                  ; C001  VERSION 4.1     Add new internal command - SERVICE - to display the DOS
  1188                                  ;        07/25/89       version and CSD version in U.S. date format.  Files
  1189                                  ;                       changed - TRANMSG,.SKL,COMMAND1,TDATA,TCMD2A,USA.MSG
  1190                                  ;
  1191                                  ;***********************************************************************************
  1192                                  
  1193                                  ;
  1194                                  ;	Revision History
  1195                                  ;	================
  1196                                  ;
  1197                                  ;	M021	SR	08/23/90	Fixed Ctrl-C handler to handle Ctrl-C
  1198                                  ;					at init time (date/time prompt)
  1199                                  ;
  1200                                  
  1201                                  ;
  1202                                  ;.xcref
  1203                                  ;.xlist
  1204                                  ;	include dossym.inc		; basic DOS symbol set
  1205                                  ;	include syscall.inc		; DOS function names
  1206                                  ;	include comsw.asm		; build version info
  1207                                  ;	include comequ.asm		; common command.com symbols
  1208                                  ;	include resmsg.equ		; resident message names
  1209                                  ;
  1210                                  ;	include comseg.asm		;segment ordering
  1211                                  ;.list
  1212                                  ;.cref
  1213                                  
  1214                                  ;CODERES segment public byte
  1215                                  ;CODERES ends
  1216                                  ;
  1217                                  ;DATARES 	segment public byte
  1218                                  ;		extrn	AccDen:byte
  1219                                  ;		extrn	Batch:word
  1220                                  ;		extrn	EchoFlag:byte
  1221                                  ;		extrn	ExeBad:byte
  1222                                  ;		extrn	ExecEMes:byte
  1223                                  ;		extrn	ExecErrSubst:byte
  1224                                  ;		extrn	ExtCom:byte
  1225                                  ;		extrn	ForFlag:byte
  1226                                  ;		extrn	IfFlag:byte
  1227                                  ;		extrn	InitFlag:BYTE
  1228                                  ;		extrn	Nest:word
  1229                                  ;		extrn	PipeFlag:byte
  1230                                  ;		extrn	RBadNam:byte
  1231                                  ;		extrn	RetCode:word
  1232                                  ;		extrn	SingleCom:word
  1233                                  ;		extrn	TooBig:byte
  1234                                  ;
  1235                                  ;		extrn	OldDS:word
  1236                                  ;
  1237                                  ;DATARES 	ends
  1238                                  ;
  1239                                  ;
  1240                                  ;INIT		segment public para
  1241                                  ;		extrn	ConProc:near
  1242                                  ;		extrn	Init_Contc_SpecialCase:near
  1243                                  ;INIT		ends
  1244                                  
  1245                                  ; 09/01/2023 - Erdogan Tan - Istanbul
  1246                                  ; --------------------------------------
  1247                                  ; 'command5.s' source code reference(s):
  1248                                  
  1249                                  ;	1) MSDOS 6.0 COMMAND.COM source files
  1250                                  ;	2) Disassembled MSDOS 5.0 COMMAND.COM - 11/11/1991 - 47845 bytes  
  1251                                  ;	   (Disassembler: HEX-RAYS IDA Pro Freeware Version 5.0)
  1252                                  ; ----------------------------------------------------------------------				 	 	
  1253                                  
  1254                                  ; -----------------------------------------------------------------------------
  1255                                  ; START OF RESIDENT PORTION
  1256                                  ; -----------------------------------------------------------------------------
  1257                                  ; SEGMENT - DATARES
  1258                                  ; -----------------------------------------------------------------------------
  1259                                  
  1260                                  section .RESGROUP ; vstart=100h  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) 
  1261                                  
  1262                                  ; 09/01/2023 - Retro DOS v4.0 (Modified COMMAND.COM v5.0)
  1263                                  
  1264                                  ;==============================================================================
  1265                                  ; STUB.ASM - MSDOS 6.0 - 1991
  1266                                  ;==============================================================================
  1267                                  
  1268                                  ;This file contains the low memory stub for command.com which hooks all the
  1269                                  ;entry points into the resident command.com and directs the calls to the
  1270                                  ;appropriate routines in the resident code which may be located in HIMEM. 
  1271                                  ;
  1272                                  ;The stub has been made part of the resident data and will always
  1273                                  ;be duplicated on every invocation of command.com. However, the only stubs
  1274                                  ;that actually hook the interrupt vectors belong to either the first 
  1275                                  ;command.com or to any other command.com executed with the /p switch. 
  1276                                  ;
  1277                                  ;The stub also keeps track of the current active data segment. The 
  1278                                  ;INIT code of each command.com updates this variable via an int 2fh mechanism
  1279                                  ;with its own data segment. The INIT code also updates a pointer in its data
  1280                                  ;segment to the previous resident data segment. Whenever a command.com exits,
  1281                                  ;the exit code picks up the previous data segment pointer from the current
  1282                                  ;data segment and patches it into the CurResDataSeg variable in the stub.
  1283                                  ;
  1284                                  ;Right now the stub does not bother about A20 switching. We assume
  1285                                  ;A20 is always on. It just does a far jump to the resident code with the 
  1286                                  ;value of the current data segment in one of the registers. A20 toggle 
  1287                                  ;support maybe added as a future enhancement, if the need is felt.
  1288                                  
  1289                                  	; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1290                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1291                                  
  1292                                  	; 18/07/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM
  1293                                  
  1294                                  	[ORG 100H]
  1295                                  
  1296                                  	; 21/09/2018 - Retro DOS v3.0
  1297                                  StartCode:
  1298 00000000 E98D15                  	jmp	ConProc	; 10/01/2023 
  1299                                  
  1300                                  	; 09/01/2023
  1301                                  
  1302                                  ; Make following table word-aligned, and at the same time, provide a
  1303                                  ; signature that sysinit can use to (attempt to) validate the interpreter
  1304                                  
  1305                                  	;db	0	; MSDOS 5.0 COMMAND.COM - DATARES:0103h
  1306                                  	;db	7Ah	; PCDOS 7.10 (7.1) COMMAND.COM ; 18/07/2024
  1307 00000003 7A                      	db      ((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
  1308                                  
  1309                                  word_104:
  1310 00000004 0000                    	dw	0	; PCDOS 7.1 COMMAND.COM - DATARES:0104h
  1311                                  ;RESGROUP:0106h
  1312 00000006 000000000000000000-     	db	0Ch dup(0), 0Dh
  1312 0000000F 0000000D           
  1313                                  ;RESGROUP:0113h
  1314                                  a@Ibm12_01_2003:
  1315 00000013 402349424D3A31322E-     	db '@#IBM:12.01.2003.build_1.32#@ COMMAND.COM(USA)',0
  1315 0000001C 30312E323030332E62-
  1315 00000025 75696C645F312E3332-
  1315 0000002E 234020434F4D4D414E-
  1315 00000037 442E434F4D28555341-
  1315 00000040 2900               
  1316                                  ;RESGROUP:0142h:
  1317 00000042 000000000000000000-     	db 22h dup(0), 1Ah, 0
  1317 0000004B 000000000000000000-
  1317 00000054 000000000000000000-
  1317 0000005D 000000000000001A00 
  1318                                  
  1319                                  ;All the entry points declared below are patched in at INIT time with the
  1320                                  ;proper segment and offset values after the resident code segment has been
  1321                                  ;moved to its final location
  1322                                  
  1323                                  ;!!!WARNING!!!
  1324                                  ; All the dword ptrs from Int2f_Entry till MsgRetrv_Entry should be contiguous
  1325                                  ;because the init routine 'Patch_stub' (in init.asm) relies on this to patch
  1326                                  ;in the correct segments and offsets
  1327                                  
  1328                                  Int2f_Entry:
  1329 00000066 [A014]                  	dw	MsgInt2fHandler		; Address of int 2fh handler
  1330 00000068 0000                    	dw	0
  1331                                  Int2e_Entry:
  1332 0000006A [860E]                  	dw	Int_2e			; Address of int 2eh handler
  1333 0000006C 0000                    	dw	0
  1334                                  Ctrlc_Entry:
  1335 0000006E [430D]                  	dw	ContC			; Address of Ctrl-C handler
  1336 00000070 0000                    	dw	0
  1337                                  CritErr_Entry:
  1338 00000072 [8B11]                  	dw	DSKERR			; Address of critical error handler
  1339 00000074 0000                    	dw	0
  1340                                  
  1341                                  Exec_Entry:
  1342 00000076 00000000                	dd	0			; Entry from transient to Ext_Exec
  1343                                  RemCheck_Entry:
  1344 0000007A 00000000                	dd	0			; Entry from transient to TRemCheck
  1345                                  TrnLodCom1_Entry:
  1346 0000007E 00000000                	dd	0			; Entry from transient to LodCom1
  1347                                  LodCom_Entry:
  1348 00000082 00000000                	dd	0			; Entry after exit from command.com
  1349                                  MsgRetrv_Entry:
  1350 00000086 00000000                	dd	0			; Entry from external to MsgRetriever
  1351                                  HeadFix_Entry:
  1352 0000008A 00000000                	dd	0			; Entry from trans to HeadFix
  1353                                  UMBOff_Entry:
  1354 0000008E 00000000                	dd	0			; Entry from here to UMBOff routine; M003
  1355                                  XMMCallAddr:
  1356 00000092 00000000                	dd	0			; Call address for XMM functions
  1357                                  ComInHMA:
  1358 00000096 00                      	db	0			; Flags if command.com in HMA
  1359                                  
  1360                                  ; 18/07/2024 (PCDOS 7.1 COMMAND.COM - RESGROUP:0197h)
  1361                                  
  1362                                  Int2f_Trap:
  1363                                  	;sti	; 19/04/2023 (MSDOS 5.0 COMMAND.COM - RESGROUP:0135h)
  1364 00000097 E86400                  	call	CheckA20
  1365 0000009A 1E                      	push	ds			; push current ds value
  1366 0000009B 0E                      	push	cs			; push resident data segment value
  1367                                  	;jmp	cs:Int2f_Entry
  1368 0000009C 2EFF2E[6600]            	jmp	far [cs:Int2f_Entry]
  1369                                  
  1370                                  Int2e_Trap:
  1371 000000A1 FB                      	sti
  1372 000000A2 E85900                  	call	CheckA20
  1373 000000A5 1E                      	push	ds			; push current ds value
  1374 000000A6 0E                      	push	cs			; push resident data segment value
  1375                                  	;jmp	cs:Int2e_Entry
  1376 000000A7 2EFF2E[6A00]            	jmp	far [cs:Int2e_Entry]
  1377                                  
  1378                                  Ctrlc_Trap:
  1379 000000AC FB                      	sti
  1380 000000AD E84E00                  	call	CheckA20
  1381 000000B0 1E                      	push	ds			; push current ds value
  1382 000000B1 0E                      	push	cs			; push resident data segment value
  1383                                  	;jmp	cs:Ctrlc_Entry
  1384 000000B2 2EFF2E[6E00]            	jmp	far [cs:Ctrlc_Entry]
  1385                                  
  1386                                  CritErr_Trap:
  1387 000000B7 FB                      	sti
  1388 000000B8 E84300                  	call	CheckA20
  1389 000000BB 1E                      	push	ds			; push current ds value
  1390 000000BC 0E                      	push	cs			; push resident data segment value
  1391                                  	;jmp	cs:CritErr_Entry
  1392 000000BD 2EFF2E[7200]            	jmp	far [cs:CritErr_Entry]
  1393                                  
  1394                                  Exec_Trap:
  1395 000000C2 E83900                  	call	CheckA20
  1396 000000C5 1E                      	push	ds			; push current ds value
  1397 000000C6 0E                      	push	cs			; push resident data segment value
  1398                                  	;jmp	cs:Exec_Entry
  1399 000000C7 2EFF2E[7600]            	jmp	far [cs:Exec_Entry]
  1400                                  
  1401                                  RemCheck_Trap:
  1402 000000CC E82F00                  	call	CheckA20
  1403 000000CF 1E                      	push	ds			; push current ds value
  1404 000000D0 0E                      	push	cs			; push resident data segment value
  1405                                  	;jmp	cs:RemCheck_Entry
  1406 000000D1 2EFF2E[7A00]            	jmp	far [cs:RemCheck_Entry]
  1407                                  
  1408                                  TrnLodCom1_Trap:
  1409 000000D6 E82500                  	call	CheckA20
  1410 000000D9 1E                      	push	ds			; push current ds value
  1411 000000DA 0E                      	push	cs			; push resident data segment value
  1412                                  	;jmp	cs:TrnLodCom1_Entry
  1413 000000DB 2EFF2E[7E00]            	jmp	far [cs:TrnLodCom1_Entry]
  1414                                  
  1415                                  LodCom_Trap:
  1416 000000E0 E81B00                  	call	CheckA20
  1417 000000E3 1E                      	push	ds			; push current ds value
  1418 000000E4 0E                      	push	cs			; push resident data segment value
  1419                                  	;jmp	cs:LodCom_Entry
  1420 000000E5 2EFF2E[8200]            	jmp	far [cs:LodCom_Entry]
  1421                                  
  1422                                  MsgRetrv_Trap:
  1423 000000EA E81100                  	call	CheckA20
  1424 000000ED 1E                      	push	ds			; push current ds value
  1425 000000EE 0E                      	push	cs			; push resident data segment value
  1426                                  	;jmp	cs:MsgRetrv_Entry
  1427 000000EF 2EFF2E[8600]            	jmp	far [cs:MsgRetrv_Entry]
  1428                                  
  1429                                  HeadFix_Trap:
  1430 000000F4 E80700                  	call	CheckA20
  1431 000000F7 1E                      	push	ds			; push current ds value
  1432 000000F8 0E                      	push	cs			; push resident data segment value
  1433                                  	;jmp	cs:HeadFix_Entry
  1434 000000F9 2EFF2E[8A00]            	jmp	far [cs:HeadFix_Entry]
  1435                                  
  1436                                  ; ----------------------------------------------------------------------------
  1437                                  
  1438                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1439                                  %if 0
  1440                                  	; 09/01/2023
  1441                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:019Dh
  1442                                  
  1443                                  	; 05/06/2023
  1444                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:019Ch
  1445                                  CheckA20:
  1446                                  	pushf				; save current flags
  1447                                  	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1448                                  	jz	short A20_on		; no, jump to resident
  1449                                  
  1450                                  	call	QueryA20
  1451                                  	jnc	short A20_on		; A20 is on, jump to resident
  1452                                  
  1453                                  	call	EnableA20		; turn A20 on
  1454                                  A20_on:
  1455                                  	popf				; flags have to be unchanged
  1456                                  	retn
  1457                                  %else
  1458                                  	; 18/07/2024
  1459                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1460                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1461                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:01FFh
  1462                                  CheckA20:
  1463 000000FE 9C                      	pushf				; save current flags
  1464 000000FF 2E803E[9600]00          	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1465 00000105 741A                    	jz	short A20_on		; no, jump to resident
  1466                                  	; 18/07/2024
  1467 00000107 50                      	push	ax
  1468 00000108 53                      	push	bx
  1469                                  QueryA20:
  1470                                  	;mov	ah,7
  1471 00000109 B407                    	mov	ah,XMM_QUERY_A20
  1472                                  	;call	cs:XMMCallAddr
  1473 0000010B 2EFF1E[9200]            	call	far [cs:XMMCallAddr]
  1474 00000110 09C0                    	or	ax,ax
  1475                                  	; 16/04/2023
  1476 00000112 750B                    	jnz	short QA20_ON		; A20 is on, jump to resident
  1477                                  	; 18/07/2024
  1478                                  EnableA20:
  1479                                  	;mov	ah,5
  1480 00000114 B405                    	mov	ah,XMM_LOCAL_ENABLE_A20	; turn A20 on
  1481                                  	;call	cs:XMMCallAddr
  1482 00000116 2EFF1E[9200]            	call	far [cs:XMMCallAddr]
  1483 0000011B 09C0                    	or	ax,ax
  1484 0000011D 7404                    	jz	short XMMerror		; AX = 0 fatal error
  1485                                  QA20_ON:
  1486 0000011F 5B                      	pop	bx
  1487 00000120 58                      	pop	ax
  1488                                  A20_on:
  1489 00000121 9D                      	popf				; flags have to be unchanged
  1490 00000122 C3                      	retn
  1491                                  ;If we get an error, we just loop forever
  1492                                  XMMerror:
  1493 00000123 EBFE                    	jmp	short XMMerror
  1494                                  %endif
  1495                                  
  1496                                  ; ----------------------------------------------------------------------------
  1497                                  
  1498                                  ; M005; This is a far jump to the actual int 2fh entry point. The renormalized
  1499                                  ; M005; int 2fh cs:ip points here. We hardcode a far jump here to the int 2fh
  1500                                  ; M005; handler. Note that we have to hardcode a jump and we cannot use any
  1501                                  ; M005; pointers because our cs is going to be different. The segment to
  1502                                  ; M005; jump to is patched in at init time. (in init.asm)
  1503                                  
  1504                                  Carousel_i2f_Hook:			; M005
  1505 00000125 EA                      	db	0EAh			; far jump opcode; M005
  1506 00000126 [9700]                  	dw	Int2f_Trap ; DATARES	; int 2fh offset ; M005
  1507                                  int2fh_segm:	; 22/07/2024
  1508 00000128 0000                    	dw	0			; int 2fh segment; M005
  1509                                  
  1510                                  ; ----------------------------------------------------------------------------
  1511                                  
  1512                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1513                                  %if 0
  1514                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1515                                  QueryA20:
  1516                                  	push	bx
  1517                                  	push	ax
  1518                                  	;mov	ah,7
  1519                                  	mov	ah,XMM_QUERY_A20
  1520                                  	;call	cs:XMMCallAddr
  1521                                  	call	far [cs:XMMCallAddr]
  1522                                  	or	ax,ax
  1523                                  	pop	ax
  1524                                  	pop	bx
  1525                                  	; 16/04/2023
  1526                                  	jnz	short QA20_ON	; cf = 0	; AX = 1 => ON
  1527                                  	stc					; OFF
  1528                                  	;retn
  1529                                  QA20_ON:
  1530                                  	;clc					; ON
  1531                                  	retn
  1532                                  %endif
  1533                                  
  1534                                  ; ----------------------------------------------------------------------------
  1535                                  
  1536                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1537                                  %if 0
  1538                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1539                                  EnableA20:
  1540                                  	push	bx
  1541                                  	push	ax
  1542                                  	;mov	ah,5
  1543                                  	mov	ah,XMM_LOCAL_ENABLE_A20
  1544                                  	;call	cs:XMMCallAddr
  1545                                  	call	far [cs:XMMCallAddr]
  1546                                  	or	ax,ax
  1547                                  	jz	short XMMerror			; AX = 0 fatal error
  1548                                  	pop	ax
  1549                                  	pop	bx
  1550                                  	retn
  1551                                  ;If we get an error, we just loop forever
  1552                                  XMMerror:
  1553                                  	jmp	short XMMerror
  1554                                  %endif
  1555                                  
  1556                                  ; -----------------------------------------------------------------------------
  1557                                  
  1558                                  ; 05/06/2023
  1559                                  ;HV_Extern	equ	1
  1560                                  ;HV_LoadHigh	equ	1
  1561                                  ;HV_Stub	equ	1
  1562                                  ;	include	highvar.inc	; Make high-memory variables external here
  1563                                  ;	include	highexit.inc	; And add code for UnHideUMBs
  1564                                  
  1565                                  ;==============================================================================
  1566                                  ; HIGHEXIT.INC, MSDOS 6.0, 1992
  1567                                  ;==============================================================================
  1568                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1569                                  
  1570                                  DOS_STRATEGY_GET equ  5800h	; Int 21h, Func 58h, Svc 0 = get alloc strategy
  1571                                  DOS_STRATEGY_SET equ  5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
  1572                                  DOS_UMBLINK_GET	equ   5802h	; Int 21h, Func 58h, Svc 2 = get link state
  1573                                  DOS_UMBLINK_SET	equ   5803h	; Int 21h, Func 58h, Svc 3 = set link state
  1574                                  DOS_GET_LISTS	equ     52h	; Int 21h, Func 52h = get list of lists
  1575                                  
  1576                                  UMB_HeadIdx	equ     8Ch	; Offset from ES (after func52h) to get UMBHead
  1577                                  
  1578                                  	; 05/06/2023
  1579                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:01D9h
  1580                                  
  1581                                  ; -----------------------------------------------------------------------------
  1582                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
  1583                                  ; -----------------------------------------------------------------------------
  1584                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
  1585                                  ;               very little to do, as no elelments will be marked as HIDDEN.
  1586                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
  1587                                  ; ERROR:  None
  1588                                  ; USES:   fInHigh (from highvar.inc), carry flag
  1589                                  ; -----------------------------------------------------------------------------
  1590                                  
  1591                                  UnHideUMBs:
  1592 0000012A 50                      	push	ax		; Save ax for what we're about to do
  1593                                  
  1594                                  ; -----------------------------------------------------------------------------
  1595                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
  1596                                  ;    length of time. Those six constitute a check of whether or not we should
  1597                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
  1598                                  ;    will destroy the current link-state and memory-allocation strategy after
  1599                                  ;    every command execution.
  1600                                  ; -----------------------------------------------------------------------------
  1601                                  
  1602                                  	; 05/06/2023
  1603                                  	;getdata al,fInHigh	; Get InHigh from data segment
  1604                                  	;
  1605                                  	;push	ds
  1606 0000012B A0[3005]                	mov	al,[fInHigh]
  1607                                  	;pop	ds
  1608                                  
  1609                                  	;or	al, al
  1610                                  	;jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
  1611                                  
  1612                                  	;pop	ax		; then there's nothing to do here... so
  1613                                  	;stc			; restore everything and return.  Just like
  1614                                  	;retn			; that.
  1615                                  
  1616                                  	; 05/06/2023
  1617 0000012E 3C01                    	cmp	al,1
  1618 00000130 720F                    	jb	short uhu20	; cf=1
  1619                                  uhu10:	
  1620 00000132 E8A000                  	call	linkumb		; Make sure UMBs are linked in.
  1621 00000135 E82000                  	call	FreeUMBs
  1622                                  
  1623                                  	;putdata fInHigh, 0	; We're leaving, so update fInHigh.
  1624                                  	;
  1625                                  	;push	es
  1626                                  	;mov	byte [es:fInHigh],0
  1627                                  	;pop	es
  1628                                  	; 05/06/2023
  1629 00000138 C606[3005]00            	mov	byte [fInHigh],0
  1630                                  
  1631 0000013D E80300                  	call	he_unlink	; Unlink UMBs
  1632                                  
  1633                                  	;pop	ax
  1634                                  	;clc
  1635                                  	;retn
  1636                                  
  1637 00000140 F8                      	clc
  1638                                  uhu20:
  1639 00000141 58                      	pop	ax
  1640 00000142 C3                      	retn
  1641                                  
  1642                                  ; -----------------------------------------------------------------------------
  1643                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
  1644                                  ; -----------------------------------------------------------------------------
  1645                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
  1646                                  ; EXIT:     None
  1647                                  ; ERROR:    None
  1648                                  ; USES:     AX, BX
  1649                                  ; -----------------------------------------------------------------------------
  1650                                  
  1651                                  	; 05/06/2023
  1652                                  he_unlink:
  1653 00000143 30FF                    	xor	bh, bh
  1654                                  	
  1655                                  	;getdata bl,fm_umb		; Restore original link-state
  1656                                  	;
  1657                                  	;push	ds
  1658 00000145 8A1E[3505]              	mov     bl,[fm_umb]
  1659                                  	;pop	ds
  1660                                  
  1661 00000149 B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1662 0000014C CD21                    	int	21h
  1663                                  
  1664                                  	;xor	bh, bh
  1665                                  	
  1666                                  	;getdata bl,fm_strat		; Restore original mem-alloc strategy
  1667                                  	;push	ds
  1668 0000014E 8A1E[3605]              	mov     bl,[fm_strat]
  1669                                  	;pop	ds
  1670                                  
  1671 00000152 B80158                  	mov	ax,DOS_STRATEGY_SET ; 5801h
  1672 00000155 CD21                    	int	21h
  1673                                  
  1674 00000157 C3                      	retn
  1675                                  
  1676                                  ; -----------------------------------------------------------------------------
  1677                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
  1678                                  ; -----------------------------------------------------------------------------
  1679                                  ; ENTRY:    None
  1680                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
  1681                                  ; ERROR:    None (ignore CF)
  1682                                  ; USES:     Flags
  1683                                  ; -----------------------------------------------------------------------------
  1684                                  
  1685                                  	; 05/06/2023
  1686                                  arena_signature_end equ 5Ah ; 'Z'
  1687                                  arena_signature equ 0
  1688                                  arena_size equ 3
  1689                                  
  1690                                  FreeUMBs:
  1691 00000158 50                      	push	ax
  1692 00000159 06                      	push	es
  1693                                  
  1694 0000015A E86900                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
  1695 0000015D 721C                    	jc	short fusX
  1696                                  fus10:
  1697 0000015F 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
  1698 00000161 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
  1699 00000164 7503                    	jnz	short fus20
  1700 00000166 E84200                  	call	freeMCB
  1701                                  fus20:	
  1702 00000169 26A00000                	mov	al,[es:arena_signature] ; mov al,[es:0]
  1703 0000016D 3C5A                    	cmp	al,arena_signature_end ; 'Z' ; 5Ah
  1704 0000016F 740A                    	jz	short fusX	; That means this was the last MCB--that's it.
  1705                                  
  1706 00000171 8CC0                    	mov	ax,es
  1707 00000173 2603060300              	add	ax,[es:arena_size] ; add ax,[es:3]
  1708 00000178 40                      	inc	ax
  1709                                  	;mov	es,ax		; Go on forward.
  1710                                  	;jmp	short fus10
  1711                                  	; 18/07/2024
  1712 00000179 EBE4                    	jmp	short fus10
  1713                                  fusX:
  1714 0000017B 07                      	pop	es
  1715 0000017C 58                      	pop	ax
  1716 0000017D C3                      	retn
  1717                                  
  1718                                  ; -----------------------------------------------------------------------------
  1719                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
  1720                                  ; -----------------------------------------------------------------------------
  1721                                  ; ENTRY:    ES:0 should point to an MCB
  1722                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
  1723                                  ; ERROR:    None
  1724                                  ; USES:     Flags
  1725                                  ; -----------------------------------------------------------------------------
  1726                                  
  1727                                  	; 05/06/2023
  1728                                  SystemPSPOwner	equ 8
  1729                                  arena_owner	equ 1
  1730                                  arena_name	equ 8
  1731                                  
  1732                                  isHideMCB:
  1733 0000017E 50                      	push	ax
  1734                                  
  1735 0000017F 26833E010008            	cmp	word [es:arena_owner],SystemPSPOwner ; If the owner's SYSTEM
  1736 00000185 7522                    	jne	short ihm_x			     ; then check for HIDDEN
  1737                                  
  1738 00000187 26A10800                	mov	ax,[es:arena_name]   ; [es:8]
  1739 0000018B 3D4849                  	cmp	ax,'HI' ; 4948h
  1740 0000018E 7519                    	jne	short ihm_x
  1741 00000190 26A10A00                	mov	ax,[es:arena_name+2] ; [es:10]
  1742 00000194 3D4444                  	cmp	ax,'DD' ; 4444h
  1743 00000197 7510                    	jne	short ihm_x
  1744 00000199 26A10C00                	mov	ax,[es:arena_name+4] ; [es:12]
  1745 0000019D 3D454E                  	cmp	ax,'EN' ; 4E45h
  1746 000001A0 7507                    	jne	short ihm_x
  1747 000001A2 26A10E00                	mov	ax,[es:arena_name+6] ; [es:14]
  1748 000001A6 3D2020                  	cmp	ax,'  ' ; 2020h
  1749                                  ihm_x:
  1750 000001A9 58                      	pop	ax
  1751 000001AA C3                      	retn
  1752                                  
  1753                                  ; -----------------------------------------------------------------------------
  1754                                  ;*** freeMCB - marks as free the MCB at ES:0
  1755                                  ; -----------------------------------------------------------------------------
  1756                                  ; ENTRY:    ES:0 should point to an MCB
  1757                                  ; EXIT:     None; MCB free'd
  1758                                  ; ERROR:    None
  1759                                  ; USES:     AX
  1760                                  ; -----------------------------------------------------------------------------
  1761                                  
  1762                                  	; 05/06/2023
  1763                                  freeMCB:
  1764 000001AB 26C70601000000          	mov	word [es:arena_owner],0	; [es:1]
  1765 000001B2 B82020                  	mov	ax,'  '
  1766 000001B5 26A30800                	mov	[es:arena_name+0],ax	; [es:8]
  1767 000001B9 26A30A00                	mov	[es:arena_name+2],ax
  1768 000001BD 26A30C00                	mov	[es:arena_name+4],ax
  1769 000001C1 26A30E00                	mov	[es:arena_name+6],ax	; [es:14]
  1770 000001C5 C3                      	retn
  1771                                  
  1772                                  ; -----------------------------------------------------------------------------
  1773                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
  1774                                  ; -----------------------------------------------------------------------------
  1775                                  ; ENTRY:  Nothing
  1776                                  ; EXIT:   AX contains 0x9FFF for most systems
  1777                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
  1778                                  ; USES:   Flags, AX
  1779                                  ; -----------------------------------------------------------------------------
  1780                                  
  1781                                  	; 05/06/2023
  1782                                  HeadUmb:
  1783                                  	; 18/07/2024 - PCDOS 7.1 - RESGROUP:02CDh
  1784                                  	;push	si
  1785                                  	;push	ds
  1786 000001C6 06                      	push	es
  1787                                  
  1788 000001C7 B452                    	mov	ah,DOS_GET_LISTS	; Call int 21h, function 52h...
  1789 000001C9 CD21                    	int	21h	; DOS - 2+ internal - GET LIST OF LISTS
  1790                                  			; Return: ES:BX -> DOS list of lists
  1791                                  
  1792 000001CB 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008Ch
  1793 000001CF 83F8FF                  	cmp	ax,0FFFFh
  1794                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
  1795                                  	;clc				; Else, it isn't.
  1796                                  	;jmp	short xhu_x
  1797                                  ;xhu_e:
  1798                                  	;stc
  1799                                  	; 05/06/2023
  1800 000001D2 F5                      	cmc	; cf=0 -> cf=1
  1801                                  ;xhu_x:
  1802 000001D3 07                      	pop	es
  1803                                  	; 18/07/2024
  1804                                  	;pop	ds
  1805                                  	;pop	si
  1806 000001D4 C3                      	retn
  1807                                  
  1808                                  ; -----------------------------------------------------------------------------
  1809                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
  1810                                  ; -----------------------------------------------------------------------------
  1811                                  ; ENTRY:    None
  1812                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
  1813                                  ; ERROR:    None
  1814                                  ; USES:     AX, BX, fm_umb
  1815                                  ; -----------------------------------------------------------------------------
  1816                                  
  1817                                  	; 05/06/2023
  1818                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:029Dh
  1819                                  linkumb:
  1820 000001D5 B80258                  	mov	ax,DOS_UMBLINK_GET ; 5802h
  1821 000001D8 CD21                    	int	21h			; Current link-state is now in al
  1822                                  
  1823 000001DA 08C0                    	or	al,al			; BUGBUG: proper check?
  1824 000001DC 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
  1825                                  
  1826 000001DE B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1827 000001E1 BB0100                  	mov	bx,1
  1828 000001E4 CD21                    	int	21h
  1829                                  lumbX:
  1830 000001E6 C3                      	retn
  1831                                  
  1832                                  ;==============================================================================
  1833                                  ; STUB.ASM, MSDOS 6.0, 1991
  1834                                  ;==============================================================================
  1835                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1836                                  
  1837                                  	; 09/01/2023 - Retro DOS v4.0 (& 4.1)
  1838                                  	; 05/06/2023 - Retro DOS 4.2
  1839                                  
  1840                                  ;The Exec call has to be issued from the data segment. The reason for this 
  1841                                  ;is TSRs. When a TSR does a call to terminate and stay resident, the call
  1842                                  ;returns with all registers preserved and so all our segment registers are
  1843                                  ;still set up. However, if the TSR unloads itself later on, it still 
  1844                                  ;comes back here. In this case the segment registers and the stack are
  1845                                  ;not set up and random things can happen. The only way to setup all the 
  1846                                  ;registers is to use the cs value and this can only be done when we are in
  1847                                  ;the data segment ourselves. So, this piece of code had to be moved from
  1848                                  ;the code segment to the data segment.
  1849                                  
  1850                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02AFh
  1851                                  Issue_Exec_Call:
  1852 000001E7 CD21                    	int 	21h
  1853                                  
  1854                                  ;We disable interrupts while changing the stack because there is a bug in 
  1855                                  ;some old 8088 processors where interrupts are let through while ss & sp
  1856                                  ;are being changed.
  1857                                  
  1858 000001E9 FA                      	cli
  1859 000001EA 0E                      	push	cs
  1860 000001EB 17                      	pop	ss
  1861                                  
  1862                                  	;;;mov	sp,53Eh ; MSDOS 5.0 COMMAND.COM RESGROUP:01DFh
  1863                                  	;;mov	sp,60Ah	; MSDOS 6.22 COMMAND.COM RESGROUP:02B4h
  1864                                  	;mov	sp,637h ; PCDOS 7.1 COMMAND.COM RESGROUP:02F8h
  1865                                  	;mov	sp,offset DATARES:RStack ; stack is set up
  1866 000001EC BC[2E05]                	mov	sp,RStack		; stack is set up
  1867                                  
  1868                                  ; 05/06/2023	
  1869                                  %if 0	
  1870                                  	; 20/04/2023
  1871                                  	;sti
  1872                                  	;push	cs
  1873                                  	;pop	ds			; ds = DATARES
  1874                                  
  1875                                  ; M009; Restore UMB state to that before Exec
  1876                                  
  1877                                  	;pushf				;    This call frees HIDDEN umb's,
  1878                                  	;call	UnHideUMBs		; <- restores the memory-allocation
  1879                                  	;popf				;    strategy and link state, as app.
  1880                                  
  1881                                  	; 09/01/2023 - Retro DOS v4.0
  1882                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:01E2h
  1883                                  	; ----------------------
  1884                                  	sti
  1885                                  	push    cs
  1886                                  	pop     ds
  1887                                  	pushf
  1888                                  	;mov	al,[cs:fInHigh]
  1889                                  	; 18/04/2023
  1890                                  	mov	al,[fInHigh]
  1891                                  	test	al,80h
  1892                                  	jz      short uhu10
  1893                                  	and     al,7Fh
  1894                                  	;;call	cs:UMBOff_Entry
  1895                                  	;call	far [cs:UMBOff_Entry]
  1896                                  	call	far [UMBOff_Entry]
  1897                                  uhu10:
  1898                                  	;and	byte [cs:fInHigh],7Fh
  1899                                  	; 18/04/2023
  1900                                  	and	byte [fInHigh],7Fh
  1901                                  	popf
  1902                                  	; ----------------------
  1903                                  
  1904                                  %endif
  1905                                  	; 05/06/2023 - Retro DOS 4.2
  1906                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02B7h
  1907 000001EF FB                      	sti
  1908 000001F0 0E                      	push	cs
  1909 000001F1 1F                      	pop	ds			; ds = DATARES
  1910                                  
  1911                                  ; M009; Restore UMB state to that before Exec
  1912                                  
  1913 000001F2 9C                      	pushf				;    This call frees HIDDEN umb's,
  1914 000001F3 E834FF                  	call	UnHideUMBs		; <- restores the memory-allocation
  1915 000001F6 9D                      	popf				;    strategy and link state, as app
  1916                                  
  1917                                  ;We now jump to the stub trap which returns us to the resident code. All
  1918                                  ;flags are preserved by the stub code.
  1919                                  
  1920 000001F7 E9C8FE                  	jmp	Exec_Trap
  1921                                  
  1922                                  ;==============================================================================
  1923                                  ; RDATA.ASM, MSDOS 6.0, 1992
  1924                                  ;==============================================================================
  1925                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1926                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1927                                  
  1928                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:02C2h (DATARES:02C2h) (*)
  1929                                  ; -----------------------------------------------------------------------------
  1930 000001FA 636F78                  cox_location:	db 'cox' ; (*)	
  1931 000001FD 0000                    cox_Y_option:	dw 0     ; (*)
  1932                                  ; -----------------------------------------------------------------------------
  1933                                  
  1934                                  ;***	Message substitution blocks
  1935                                  
  1936                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:01FFh (DATARES:01FFh)
  1937                                  
  1938                                  ;BlkDevErrSubst	label	byte
  1939                                  ;BlkDevErrRw	subst	<STRING,>		; "reading" or "writing"
  1940                                  ;		subst	<CHAR,DATARES:DrvLet>	; block device drive letter
  1941                                  
  1942 000001FF 02                      BlkDevErrSubst: db	2
  1943 00000200 0000                    BlkDevErrRw:	dw	0
  1944 00000202 01                      		db	1
  1945 00000203 [0502]                  		dw	DrvLet
  1946                                  
  1947 00000205 41                      DrvLet:		db	'A'			; drive letter
  1948                                  
  1949                                  
  1950                                  ;CharDevErrSubst label	byte
  1951                                  ;CharDevErrRw	subst	<STRING,>		 ; "reading" or "writing"
  1952                                  ;CharDevErrDev	subst	<STRING,DATARES:DevName> ; character device name
  1953                                  
  1954 00000206 02                      CharDevErrSubst: db	2
  1955 00000207 0000                    CharDevErrRw:	dw	0
  1956 00000209 02                      		db	2
  1957 0000020A [1802]                  		dw	DevName
  1958                                  
  1959                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0318h
  1960                                  ;DevName:	times 8 db 0  ; db 8 dup (?),0	; device name, asciiz
  1961                                  ;		db	0
  1962                                  
  1963                                  ;NeedVolSubst	label	byte
  1964                                  ;		subst	<STRING,DATARES:VolName> ; volume name
  1965                                  ;		subst	<HEX,DATARES:VolSer+2>	 ; hi word of serial #
  1966                                  ;		subst	<HEX,DATARES:VolSer>	 ; lo word of serial #
  1967                                  
  1968 0000020C 02                      NeedVolSubst:	db	2
  1969 0000020D [1502]                  		dw	VolName
  1970 0000020F 03                      		db	3
  1971 00000210 [2302]                  		dw	VolSer+2
  1972 00000212 03                      		db	3
  1973 00000213 [2102]                  		dw	VolSer
  1974                                  
  1975                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0321h
  1976                                  	; NOTE:	VolName and VolSer must be adjacent
  1977                                  ;VolName:	times 11 db 0 ; db 11 dup (?),0	; volume name
  1978                                  		; 18/07/2024
  1979 00000215 000000                  VolName:	db	3 dup(0)
  1980 00000218 0000000000000000        DevName:	db	8 dup(0)
  1981                                  	
  1982 00000220 00                      		db	0
  1983 00000221 00000000                VolSer:		dd	0			; volume serial #
  1984                                  
  1985 00000225 00                      CDevAt:		db	0
  1986                                  
  1987                                  ;BadFatSubst	label	byte
  1988                                  ;		subst	<CHAR,DATARES:DrvLet>	; drive letter
  1989                                  
  1990 00000226 01                      BadFatSubst:	db	1
  1991 00000227 [0502]                  		dw	DrvLet
  1992                                  
  1993                                  ;PutBackSubst	label	byte
  1994                                  ;PutBackComSpec	subst	<STRING,>		  ; comspec string
  1995                                  ;		subst	<CHAR,DATARES:PutBackDrv> ; drive to put it in
  1996                                  
  1997 00000229 02                      PutBackSubst:	db	2
  1998 0000022A 0000                    PutBackComSpec:	dw	0
  1999 0000022C 01                      		db	1
  2000 0000022D [2F02]                  		dw	PutBackDrv
  2001                                  
  2002 0000022F 20                      PutBackDrv:	db	' '	; db 20h	; drive letter
  2003                                  
  2004                                  ;ExecErrSubst	subst	<STRING,DATARES:SafePathBuffer>
  2005                                  
  2006 00000230 02                      ExecErrSubst:	db	2
  2007 00000231 [5E04]                  		dw	SafePathBuffer
  2008                                  
  2009 00000233 00000000                NeedVol:	dd	0	; ptr to volume name from get ext err
  2010 00000237 00                      ErrType: 	db	0	; critical error message style, 0=old, 1=new
  2011                                  
  2012 00000238 00000000                Int_2e_Ret:	dd	0	; magic command executer return address
  2013 0000023C 0000                    Save_Pdb:	dw	0
  2014 0000023E 0000                    Parent:		dw	0
  2015 00000240 00000000                OldTerm:	dd	0
  2016 00000244 0000                    ErrCd_24:	dw	0
  2017 00000246 0000                    Handle01:	dw	0
  2018 00000248 00                      Loading:	db	0
  2019 00000249 0000                    Batch:		dw	0	; assume no batch mode initially
  2020                                  
  2021                                  ;;;;SR;
  2022                                  ;;;; This flag has been added for a gross hack introduced in batch processing. 
  2023                                  ;;;;We use it to indicate that this batch file has no CR-LF before EOF and that
  2024                                  ;;;;we need to fake the CR-LF for the line to be properly processed
  2025                                  ;;;;
  2026                                  ;;;BatchEOF:	db	0
  2027                                  
  2028                                  	; Bugbug: ComSpec should be 64+3+12+1?
  2029                                  	; What's this comspec_end about?
  2030                                  ; 21/07/2024
  2031                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:0364h
  2032 0000024B 00<rep 40h>             ComSpec:	times 64 db 0 ; db 64 dup (0)
  2033 0000028B 0000                    ComSpec_End:	dw	0
  2034                                  
  2035                                  ;Trans		label	dword
  2036                                  ;		dw	TRANGROUP:Command
  2037                                  
  2038                                  Trans:		;dw	12Ch
  2039                                  		; MSDOS 5.0 COMMAND.COM RESGROUP:0296h (DATARES:0296h)
  2040 0000028D [2E01]                  		dw	COMMAND ; 16/04/2023
  2041 0000028F 0000                    TrnSeg:		dw	0
  2042                                  
  2043 00000291 00                      TrnMvFlg:	db	0	; set if transient portion has been moved
  2044                                  
  2045 00000292 00                      In_Batch:	db	0	; set if we are in batch processing mode
  2046 00000293 00                      Batch_Abort:	db	0	; set if user wants to abort from batch mode
  2047                                  
  2048 00000294 00                      ComDrv:		db	0	; drive spec to load autoexec and command
  2049 00000295 0000                    MemSiz:		dw	0
  2050 00000297 0000                    Sum:		dw	0
  2051 00000299 01                      ExtCom:		db	1	; for init, pretend just did an external
  2052 0000029A 0000                    RetCode: 	dw	0
  2053 0000029C 00                      Crit_Err_Info:	db	0	; hold critical error flags for r,i,f
  2054                                  
  2055                                  
  2056                                  ; The echo flag needs to be pushed and popped around pipes and batch files.
  2057                                  ; We implement this as a bit queue that is shr/shl for push and pop.
  2058                                  
  2059 0000029D 01                      EchoFlag:	db	00000001b ; low bit true => echo commands
  2060 0000029E 01                      Suppress:	db	1	; used for echo, 1=echo line
  2061 0000029F 0000                    Io_Save: 	dw	0
  2062 000002A1 00                      RestDir: 	db	0
  2063 000002A2 00                      PermCom: 	db	0	; true => permanent command
  2064                                  ; 05/06/2023
  2065 000002A3 FFFF                    SemiPermCom:	dw      -1	; MSDOS 6.0 COMMAND.COM 
  2066                                  				; true => semi-permanent command (/K)
  2067 000002A5 0000                    SingleCom:	dw	0	; true => single command version
  2068 000002A7 FFFF                    VerVal:		dw	-1
  2069 000002A9 00                      fFail:		db	0	; true => fail all int 24s
  2070 000002AA 00                      IfFlag:		db	0	; true => IF statement in progress
  2071                                  
  2072 000002AB 00                      ForFlag: 	db	0	; true => FOR statement in progress
  2073 000002AC 0000                    ForPtr:		dw	0
  2074                                  
  2075 000002AE 0000                    Nest:		dw	0	; nested batch file counter
  2076 000002B0 00                      Call_Flag:	db	0	; no CALL (batch command) in progress
  2077 000002B1 00                      Call_Batch_Flag: db	0
  2078 000002B2 0000                    Next_Batch:	dw	0	; address of next batch segment
  2079 000002B4 00                      NullFlag:	db	0	; flag if no command on command line
  2080 000002B5 00<rep 5h>              FUCase_Addr:	times 5 db 0 ; db 5 dup (0)
  2081                                  				; buffer for file ucase address
  2082                                  ; Bugbug: don't need crit_msg_ anymore?
  2083                                  
  2084                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
  2085                                  %if 0
  2086                                  Crit_Msg_Off:	dw	0	; saved critical error message offset
  2087                                  Crit_Msg_Seg:	dw	0	; saved critical error message segment
  2088                                  %endif
  2089                                  
  2090 000002BA 0000                    Dbcs_Vector_Addr: dw	0	; DBCS vector offset
  2091 000002BC 0000                    		 dw	0	; DBCS vector segment
  2092 000002BE 0000                    Append_State:	dw	0	; current state of append
  2093                                  				;  (if Append_Flag is set)
  2094 000002C0 00                      Append_Flag:	db	0	; set if append state is valid
  2095 000002C1 00                      Re_Out_App:	db	0
  2096 000002C2 00<rep 50h>             Re_OutStr:	times 64+3+13 db 0 ; db 64+3+13 dup (?)
  2097                                  
  2098                                  ; We flag the state of COMMAND in order to correctly handle the ^Cs at
  2099                                  ; various times. Here is the breakdown:
  2100                                  ;
  2101                                  ;   INITINIT	We are in the init code.
  2102                                  ;   INITSPECIAL We are in the date/time prompt
  2103                                  ;   INITCTRLC	We are handling a ^C already.
  2104                                  ;
  2105                                  ; If we get a ^C in the initialization but not in the date/time prompt, we
  2106                                  ; ignore the ^C. This is so the system calls work on nested commands.
  2107                                  ;
  2108                                  ; If we are in the date/time prompt at initialization, we stuff the user's
  2109                                  ; input buffer with a CR to pretend an empty response.
  2110                                  ;
  2111                                  ; If we are already handling a ^C, we set the carry bit and return to the user
  2112                                  ; (ourselves). We can then detect the carry set and properly retry the
  2113                                  ; operation.
  2114                                  
  2115                                  InitFlag:	;db	1
  2116 00000312 01                      		db	INITINIT
  2117                                  
  2118                                  ; Note: these two bytes are referenced as a word
  2119 00000313 00                      PipeFlag:	db	0
  2120 00000314 00                      PipeFiles:	db	0
  2121                                  
  2122                                  ; (rdata.asm, msdos 6.0, 1992)
  2123                                  ; ----------------------------------------------------------------------------
  2124                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:0320h (DATARES:0320h)
  2125                                  
  2126                                  ;;SR
  2127                                  ;; Pipe1 & Pipe2 now need to store full-fledged pathnames
  2128                                  ;;
  2129                                  ;
  2130                                  ;; Bugbug: can we find any way around maintaining these
  2131                                  ;; large buffers?
  2132                                  ;
  2133                                  ;Pipe1		db	67+12 dup (?)
  2134                                  ;Pipe2		db	67+12 dup (?)
  2135                                  ;
  2136                                  ;PipePtr 	dw	?
  2137                                  ;
  2138                                  ;PipeStr 	db	129 dup (?)
  2139                                  ;
  2140                                  ;EndPipe	label	byte	; marks end of buffers; M004
  2141                                  ;
  2142                                  ;;SR;
  2143                                  ;; We can move our EndInit code into above buffers. This way, the code will
  2144                                  ;;automatically be discarded after init.
  2145                                  ;;
  2146                                  ;; M004; We overlap our code with the Pipe buffers located above by changing
  2147                                  ;; M004; the origin.
  2148                                  ;;
  2149                                  ;	ORG	Pipe1	; M004
  2150                                  ;
  2151                                  ;; Bugbug: really need a procedure header for EndInit, describing
  2152                                  ;; what it expects, what it does.
  2153                                  ;
  2154                                  
  2155                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2156                                  
  2157                                  Pipe1	equ	EndInit
  2158                                  Pipe2	equ	Pipe1+67+12
  2159                                  PipePtr	equ	Pipe2+67+12
  2160                                  PipeStr	equ	PipePtr+2
  2161                                  EndPipe	equ	PipeStr+129	; EndInit+289
  2162                                  
  2163                                  ; Bugbug: really need a procedure header for EndInit, describing
  2164                                  ; what it expects, what it does.
  2165                                  
  2166                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0320h
  2167                                  
  2168                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (compatible with MSDOS 6.22)
  2169                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:03EAh 
  2170                                  
  2171                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  2172                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:041Eh
  2173                                  
  2174                                  EndInit:
  2175 00000315 1E                      	push	ds
  2176 00000316 06                      	push	es		; save segments
  2177                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM (ds=cs=RESGROUP)
  2178                                  	;push	cs
  2179                                  	;pop	ds		
  2180                                  	;assume	ds:RESGROUP
  2181                                  
  2182                                  ; M004; Save size of transient here before INIT segment is deallocated
  2183                                  
  2184 00000317 8B16[9720]              	mov	dx,[TrnSize]		; M004
  2185                                  ;M027
  2186                                  ; These variables are also defined in the INIT segment and need to be saved
  2187                                  ;before we resize
  2188                                  ;
  2189 0000031B A1[8B20]                	mov	ax,[OldEnv]	; Old Environment seg ;M027
  2190 0000031E 8B1E[8720]              	mov	bx,[EnvSiz]	; Size of new environment ;M027
  2191 00000322 8B0E[8D20]              	mov	cx,[UsedEnv]	; Size of old environment ;M027
  2192 00000326 50                      	push	ax		; Save all these values ;M027
  2193 00000327 53                      	push	bx		; M027
  2194 00000328 51                      	push	cx		; M027
  2195                                  
  2196                                  
  2197                                  ; Bugbug: push ds, pop es here.
  2198                                  	;mov	bx,ds
  2199                                  	;mov	es,bx		; es = RESGROUP
  2200                                  	; 09/01/2023
  2201 00000329 1E                      	push	ds
  2202 0000032A 07                      	pop	es
  2203                                  
  2204                                  ;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  2205                                  ; code + data for low COMMAND
  2206                                  
  2207 0000032B 8B1E[B404]              	mov	bx,[ResSize]	; Total size of resident
  2208 0000032F B44A                    	mov	ah,4Ah	; SETBLOCK
  2209                                  
  2210                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2211                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:043Ah
  2212                                  %if 1
  2213 00000331 803E[0E04]02            	cmp	byte [COMMAND_HIGH],2
  2214 00000336 7517                    	jne	short set_block
  2215                                  
  2216 00000338 31DB                    	xor	bx,bx		; low memory first
  2217 0000033A B80158                  	mov	ax,5801h	; set allocation strategy
  2218 0000033D CD21                    	int     21h     ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  2219                                  			; AL = function code: set allocation strategy
  2220 0000033F 8B0E7E00                	mov	cx,[7Eh]	; environment segment
  2221 00000343 E308                    	jcxz	skip_dealloc_env_seg
  2222 00000345 06                      	push	es
  2223 00000346 8EC1                    	mov	es,cx
  2224 00000348 B449                    	mov	ah,49h
  2225 0000034A CD21                    	int	21h 	; DOS - 2+ - FREE MEMORY
  2226                                  			; ES = segment address of area to be freed
  2227 0000034C 07                      	pop     es
  2228                                  skip_dealloc_env_seg:
  2229 0000034D B449                    	mov	ah,49h	; DEALLOC
  2230                                  set_block:	
  2231                                  %endif
  2232                                  	;mov	ah,SETBLOCK
  2233 0000034F CD21                    	int	21h		; Set block to resident size
  2234                                  
  2235                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  2236                                  		; ES = segment address of block to change
  2237                                  		; BX = new size in paragraphs
  2238                                  
  2239                                  ;We check if this is for autoexec.bat (PermCom = 1). If so, we then
  2240                                  ;allocate a new batch segment, copy the old one into new batchseg and free
  2241                                  ;the old batchseg. Remember that the old batchseg was allocated on top of the
  2242                                  ;transient and we will leave a big hole if TSRs are loaded by autoexec.bat
  2243                                  ;
  2244                                  ; Bugbug: also describe why we alloc & copy batch seg BEFORE environment.
  2245                                  	
  2246 00000351 803E[A202]01            	cmp	byte [PermCom],1 ; permanent command.com?
  2247 00000356 7530                    	jne	short adjust_env ; no, do not free batchseg
  2248                                  
  2249 00000358 833E[4902]00            	cmp	word [Batch],0	 ; was there a valid batchseg?
  2250 0000035D 7429                    	je	short adjust_env ; no, dont juggle
  2251                                  
  2252                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0Fh)/16 ; batchseg size
  2253                                  	; 21/01/2023
  2254 0000035F BB0400                  	mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  2255                                  	;mov	bx,4	; 09/01/2023
  2256                                  			; (MSDOS 5.0 COMMAND COM RESGROUP:0350h)
  2257 00000362 B448                    	mov	ah,48h
  2258                                  	;mov	ah,ALLOC
  2259 00000364 CD21                    	int	21h
  2260                                  
  2261                                  		; DOS - 2+ - ALLOCATE MEMORY
  2262                                  		; BX = number of 16-byte paragraphs desired
  2263                                  
  2264                                  ; Bugbug: I just had a thought. If DOS or SHARE or somebody leaves
  2265                                  ; a hole, the batch segment COULD already be in the ideal place. We
  2266                                  ; could be making it worse! We're second-guessing where memory
  2267                                  ; allocations go, which might not be such a great idea. Is there
  2268                                  ; a strategy, short of doing something even worse like diddling
  2269                                  ; arena headers, where we can minimize the possibility of fragmentation
  2270                                  ; under all cases? Hmm..
  2271                                  	
  2272 00000366 7220                    	jc	short adjust_env ; no memory, use old batchseg
  2273                                  
  2274 00000368 8EC0                    	mov	es,ax		 ; es = New batch segment
  2275 0000036A 31FF                    	xor	di,di
  2276 0000036C 31F6                    	xor	si,si
  2277                                  
  2278 0000036E 1E                      	push	ds
  2279 0000036F 8E1E[4902]              	mov	ds,[Batch]	 ; ds = Old Batch Segment
  2280                                  	;assume	ds:nothing
  2281                                  	;mov	cx,SIZE BatchSegment
  2282                                  	; 23/01/2023
  2283                                  	;mov	cx,BATCHSEGMENT.SIZE
  2284                                  	;;mov	cx,33	; 09/01/2023
  2285                                  	;		; (MSDOS 5.0 COMMAND COM RESGROUP:0364h)
  2286                                  	;
  2287                                  	;add	cx,16		 ; for the filename
  2288                                  	; 20/04/2023
  2289 00000373 B93100                  	mov	cx,BATCHSEGMENT.SIZE+16
  2290                                  
  2291                                  	; Bugbug: 16? Shouldn't this be a common equate or something?
  2292                                  	; It's sure be bad if we copied more bytes than the batch segment
  2293                                  	; holds!
  2294                                  	
  2295 00000376 FC                      	cld
  2296 00000377 F3A4                    	rep	movsb
  2297 00000379 1F                      	pop	ds
  2298                                  	;assume	ds:RESGROUP
  2299                                  
  2300 0000037A 8CC1                    	mov	cx,es		; save new batch segment 
  2301 0000037C 8E06[4902]              	mov	es,[Batch]
  2302 00000380 B449                    	mov	ah,49h
  2303                                  	;mov	ah,DEALLOC
  2304 00000382 CD21                    	int	21h		; free the old batch segment
  2305                                  
  2306                                  	; Bugbug: should we check for error?
  2307                                  
  2308 00000384 890E[4902]              	mov	[Batch],cx	; store new batch segment address
  2309                                  
  2310                                  adjust_env:
  2311                                  
  2312                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2313                                  ; PCDOS 7.1 COMMAND.COM
  2314                                  %if 1
  2315 00000388 BB8000                  	mov     bx,80h		; first fit, try high then low memory
  2316 0000038B B80158                  	mov     ax,5801h
  2317 0000038E CD21                    	int     21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  2318                                  			; AL = function code: set allocation strategy
  2319                                  %endif
  2320 00000390 59                      	pop	cx		; cx = size of old env ;M027
  2321 00000391 5B                      	pop	bx		; bx = size of new env needed ;M027
  2322 00000392 5D                      	pop	bp		; bp = old env seg ;M027
  2323                                  
  2324                                  ;Allocate the correct size for the environment
  2325                                  
  2326 00000393 B448                    	mov	ah,48h
  2327                                  	;mov	ah,ALLOC
  2328 00000395 CD21                    	int	21h		; get memory
  2329 00000397 7272                    	jc	short nomem_err	; out of memory,signal error
  2330                                  	
  2331                                  	; Bugbug: why not continue, leaving environment where it is?
  2332                                  
  2333 00000399 A3[3A04]                	mov	[EnvirSeg],ax	; Store new environment segment
  2334                                  	;;mov	[ds:2Ch],ax
  2335                                  	;mov	[2Ch],ax
  2336                                  	;mov	[PDB_Environ],ax ; Put new env seg in PSP
  2337 0000039C A32C00                  	mov	[PDB.ENVIRON],ax
  2338 0000039F 8EC0                    	mov	es,ax		; es = address of allocated memory
  2339                                  	;assume	es:nothing
  2340                                  
  2341                                  ;Copy the environment to the newly allocated segment
  2342                                  
  2343 000003A1 1E                      	push	ds
  2344 000003A2 8EDD                    	mov	ds,bp		; ds = Old environment segment
  2345                                  	;assume	ds:nothing
  2346                                  
  2347 000003A4 31F6                    	xor	si,si
  2348 000003A6 89F7                    	mov	di,si		; Start transfer from 0
  2349                                  
  2350 000003A8 FC                      	cld
  2351 000003A9 F3A4                    	rep	movsb		; Do the copy
  2352                                  
  2353 000003AB 1F                      	pop	ds		; ds = RESGROUP
  2354                                  	;assume	ds:RESGROUP
  2355                                  
  2356                                  ; We have to free the old environment block if it was allocated by INIT
  2357                                  
  2358                                  ; Bugbug: is this only for the case when we were NOT passed an environment,
  2359                                  ; or does it also apply to passed environments?
  2360                                  
  2361                                  ;M036
  2362                                  ; Free up old env segment always because this is a copy passed by Exec and
  2363                                  ; takes up memory that is never used
  2364                                  
  2365                                  ;M044
  2366                                  ; Go back to the old strategy of not freeing the environment. Freeing it leaves
  2367                                  ; a hole behind that Ventura does not like. Basically, Ventura gives strange
  2368                                  ; errors if it gets a memory alloc that it is below its load segment. The
  2369                                  ; freed environment creates a large enough hole for some of its allocs to fit
  2370                                  ; in
  2371                                  
  2372                                  	;cmp	byte [AllocedEnv],0 ; has env been allocated by INIT?
  2373                                          ;je	short no_free	    ; no, do not free it
  2374                                  	; 21/01/2023
  2375                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0398h
  2376 000003AC 803E[5920]00            	cmp	byte [AllocedEnv],0 ; flag - old environment segment
  2377 000003B1 7506                    	jne	short no_free
  2378                                  
  2379 000003B3 8EC5                    	mov	es,bp
  2380 000003B5 B449                    	mov	ah,49h
  2381                                  	;mov	ah,DEALLOC
  2382 000003B7 CD21                    	int	21h		    ; Free it
  2383                                  no_free:
  2384                                  
  2385                                  ; M004; Start of changes
  2386                                  
  2387                                  ; Move the transient now. We will allocate the biggest block available
  2388                                  ; now and move the transient to the top of the block. We will then
  2389                                  ; deallocate this block. When the resident starts executing, it will
  2390                                  ; hopefully allocate this block again and find the transient intact.
  2391                                  
  2392                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2393                                  ; PCDOS 7.1 COMMAND.COM
  2394                                  %if 1
  2395 000003B9 31DB                    	xor	bx,bx	; low memory first fit
  2396 000003BB B80158                  	mov	ax,5801h
  2397 000003BE CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  2398                                  			; AL = function code: set allocation strategy
  2399 000003C0 31DB                    	xor	bx,bx	; remove UMBs from DOS memory chain
  2400 000003C2 B80358                  	mov	ax,5803h ; set UMB link state
  2401 000003C5 CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  2402                                  			; AL = function code: (DOS 5beta) set UMB link state
  2403                                  %endif
  2404 000003C7 C606[9102]01            	mov	byte [TrnMvFlg],1 ; Indicate that transient has been moved
  2405 000003CC 06                      	push	es
  2406                                  	;;mov	si,offset ResGroup:TranStart
  2407                                  	; 09/01/2023
  2408                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM RESGROUP:03ABh
  2409                                  	; 05/06/2023
  2410                                  	;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM RESGROUP:0475h
  2411                                  	; 19/07/2024
  2412                                  	;mov	si,2890h	; PCDOS 7.1 COMMAND.COM RESGROUP:04DDh
  2413 000003CD BEE027                  	mov	si,TRANSTART	; (End of the resident portion)
  2414                                  	;mov	di,0
  2415 000003D0 31FF                    	xor	di,di ; 0
  2416                                  	;;mov	cx,offset TranGroup:TranSpaceEnd ; size to move
  2417                                  	;mov	cx,98C5h
  2418                                  	; 05/06/2023 - MSDOS 6.22 COMMAND.COM RESGROUP:047Bh
  2419                                  	;mov	cx,0AF95h	; TRANSIENT portion size
  2420                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  2421                                  	;mov	cx,0AA9Ah
  2422 000003D2 B9E9A5                  	mov	cx,TRANSPACEEND
  2423                                  	
  2424                                  ; Find the largest block available
  2425                                  
  2426 000003D5 BBFFFF                  	mov	bx,0FFFFh
  2427 000003D8 B448                    	mov	ah,48h
  2428                                  	;mov	ah,ALLOC
  2429 000003DA CD21                    	int	21h
  2430                                  
  2431                                  ; dx = size of transient saved previously 
  2432                                  
  2433 000003DC 39D3                    	cmp	bx,dx		; enough memory?
  2434 000003DE 722B                    	jb	short nomem_err	; not enough memory for transient
  2435                                  
  2436 000003E0 B448                    	mov	ah,48h
  2437                                  	;mov	ah,ALLOC
  2438 000003E2 CD21                    	int	21h		; get the largest block
  2439 000003E4 7225                    	jc	short nomem_err	; something is really screwed up
  2440                                  
  2441 000003E6 50                      	push	ax		; save memory address
  2442 000003E7 01D8                    	add	ax,bx		; ax = top of my memory block
  2443 000003E9 29D0                    	sub	ax,dx		; less size of transient
  2444 000003EB A3[8F02]                	mov	[TrnSeg],ax	; save transient segment
  2445 000003EE 8EC0                    	mov	es,ax		;
  2446 000003F0 58                      	pop	ax		; restore our seg addr
  2447                                  
  2448                                  ; Everything is set for a move. We need to move in the reverse direction to
  2449                                  ; make sure we dont overwrite ourselves while copying
  2450                                  
  2451 000003F1 01CE                    	add	si,cx
  2452 000003F3 4E                      	dec	si
  2453 000003F4 01CF                    	add	di,cx
  2454 000003F6 4F                      	dec	di
  2455 000003F7 FD                      	std
  2456 000003F8 F3A4                    	rep	movsb
  2457 000003FA FC                      	cld
  2458                                  
  2459                                  ; Now we have to free up this block so that resident can get hold of it
  2460                                  
  2461 000003FB 8EC0                    	mov	es,ax
  2462 000003FD B449                    	mov	ah,49h
  2463                                  	;mov	ah,DEALLOC
  2464 000003FF CD21                    	int	21h		; release the memory block
  2465                                  
  2466                                  ; M004; End of changes
  2467                                  
  2468                                  	;mov	InitFlag,FALSE	; indicate INIT is done
  2469                                  	; 09/01/2023
  2470 00000401 C606[1203]00            	mov	byte [InitFlag],0	
  2471                                  
  2472 00000406 07                      	pop	es
  2473 00000407 1F                      	pop	ds
  2474                                  	;assume	ds:nothing
  2475                                  	
  2476                                  	; Bugbug: did we need to save & restore seg reg's during EndInit?
  2477                                  	
  2478 00000408 E9D5FC                  	jmp	LodCom_Trap	; allocate transient
  2479                                  
  2480                                  nomem_err:
  2481                                  
  2482                                  ;We call the error routine which will never return. It will either exit
  2483                                  ;with an error ( if not the first COMMAND ) or just hang after an error 
  2484                                  ;message ( if first COMMAND )
  2485                                  
  2486 0000040B E9B71B                  	jmp	Alloc_error
  2487                                  
  2488                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2489                                  ; ---------------------------------------
  2490                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:0520h
  2491                                  %if 1
  2492                                  COMMAND_HIGH:
  2493 0000040E 00                      	db	0	; load high status of COMMAND.COM (/H switch)
  2494                                  %endif
  2495                                  ; ---------------------------------------
  2496                                  
  2497                                  ;EndCodeInit:	; label	byte		; M004
  2498                                  
  2499                                  	; 16/04/2023
  2500                                  	EndCodeInit equ $
  2501                                  
  2502                                  ;; M004; Check if the EndInit code will fit into the Pipe buffers above.
  2503                                  ;; M004; If not, we signal an assembly error
  2504                                  ;
  2505                                  ;IF2
  2506                                  ;	IF ($ GT EndPipe)
  2507                                  ;		.err
  2508                                  ;		%out	"ENDINIT CODE TOO BIG"
  2509                                  ;	ENDIF
  2510                                  ;ENDIF
  2511                                  
  2512                                  ;; M004; Set the origin back to what it was at the end of the buffers
  2513                                  ;;
  2514                                  ;		ORG	EndPipe		; M004
  2515                                  
  2516                                  ; 09/01/2023
  2517                                  ; MSDOS 5.0 COMMAND.COM - CODERES:03EDh
  2518                                  ; 05/06/2023
  2519                                  ; MSDOS 6.22 COMMAND.COM - CODERES:04B7h
  2520                                  ;	times 84 db 0	; db (EndPipe-EndCodeInit) dup(0)
  2521                                  
  2522                                  ; 16/04/2023
  2523                                  	FillBytes equ EndPipe - EndCodeInit
  2524                                  
  2525                                  ;%if EndCodeInit<EndPipe ; if (EndCodeInit < (EndInit+289))
  2526                                  ; 16/04/2023
  2527                                  %if FillBytes>0
  2528                                  	;times EndPipe - EndCodeInit db 0
  2529 0000040F 00<rep 27h>             	times FillBytes db 0   
  2530                                  %endif
  2531                                  
  2532                                  ; 09/01/2023 - Retrodos v4.0 (& v4.1)
  2533                                  ; MSDOS 5.0 COMMAND.COM - CODERES:0441h ; EndInit+289 
  2534                                  
  2535                                  ; 05/06/2023 - Retrodos v4.2
  2536                                  ; MSDOS 6.22 COMMAND.COM - CODERES:050Bh ; EndInit+289
  2537                                  
  2538                                  ; 19/07/2024 - Retrodos v5.0 COMMAND.COM
  2539                                  ; PCDOS 7.1 COMMAND.COM - CODERES:053Fh ; EndInit+289
  2540                                  
  2541                                  ;InPipePtr	dw	offset DATARES:Pipe1	; 320h
  2542                                  ;OutPipePtr	dw	offset DATARES:Pipe2	; 36Fh
  2543                                  
  2544 00000436 [1503]                  InPipePtr:	dw	Pipe1 ;; 320h for MSDOS 5.0 COMMAND.COM
  2545                                  			      ; 3EAh for MSDOS 6.22 COMMAND.COM
  2546                                  		 ; 19/07/2024 ; 41Eh for PCDOS 7.1 COMMAND.COM
  2547 00000438 [6403]                  OutPipePtr:	dw	Pipe2 ;; 36Fh for MSDOS 5.0 COMMAND.COM
  2548                                  			      ; 439h for MSDOS 6.22 COMMAND.COM
  2549                                  		 ; 19/07/2024 ; 46Dh for PCDOS 7.1 COMMAND.COM
  2550                                  
  2551                                  Exec_Block:	; label	byte	; the data block for exec calls
  2552 0000043A 0000                    EnvirSeg:	dw	0
  2553                                  Com_Ptr:	; label	dword
  2554 0000043C 8000                    		dw	80h	; point at unformatted parameters
  2555 0000043E 0000                    		dw	0
  2556                                  Com_Fcb1:	; label	dword
  2557 00000440 5C00                    		dw	5Ch
  2558 00000442 0000                    		dw	0
  2559                                  Com_Fcb2:	; label	dword
  2560 00000444 6C00                    		dw	6Ch
  2561 00000446 0000                    		dw	0
  2562                                  
  2563                                  ; variables passed to transient
  2564                                  TranVars:	; label	byte
  2565                                  		;dw	offset DATARES:HeadFix_Trap
  2566 00000448 [F400]                  		dw	HeadFix_Trap
  2567 0000044A 0000                    MySeg:		dw	0	; put our own segment here
  2568 0000044C 0000                    LTpa:		dw	0	; will store tpa segment here
  2569 0000044E 2F                      RSwitChar:	db	"/"
  2570 0000044F 5C                      RDirChar:	db	"\"
  2571                                  		;dw	offset DATARES:Issue_Exec_Call
  2572 00000450 [E701]                  		dw	Issue_Exec_Call
  2573 00000452 0000                    MySeg1:		dw	0
  2574                                  		;dw	offset DATARES:RemCheck_Trap
  2575 00000454 [CC00]                  		dw	RemCheck_Trap
  2576 00000456 0000                    MySeg2:		dw	0
  2577                                  
  2578                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2579                                  ; PCDOS 7.1 COMMAND.COM
  2580                                  %if 0
  2581                                  ResTest: 	dw	0
  2582                                  %endif
  2583                                  
  2584                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:0561h
  2585                                  
  2586 00000458 0000                    Res_Tpa:	dw	0	; original tpa (not rounded to 64k)
  2587                                  
  2588                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  2589 0000045A 0000                    Y_Flag:		dw	0
  2590                                  
  2591                                  TranVarEnd:	; label	byte
  2592                                  
  2593 0000045C 0000                    OldErrNo:	dw	0
  2594                                  
  2595                                  ;* NOTE: MsgBuffer and SafePathBuffer use the same memory.
  2596                                  ;  MsgBuffer is only used while a command is being executed.
  2597                                  ;  SafePathBuffer is no longer needed, since it is used for
  2598                                  ;  unsuccessful program launches.
  2599                                  
  2600                                  MsgBuffer:	; label	byte	; buffer for messages from disk
  2601                                  SafePathBuffer: ; label	byte	; resident pathname for EXEC
  2602                                  	;Bugbug: Why so big a buffer?
  2603                                  		;db	64+3+13 dup (0)	; path + 'd:\' 'file.ext' + null
  2604 0000045E 00<rep 50h>             		times	64+3+13 db 0		
  2605                                  
  2606                                  LENMSGORPATHBUF	equ $ - MsgBuffer
  2607                                  
  2608 000004AE 00000000                Int2fHandler:	dd	0	; address of next int 2f handler
  2609 000004B2 0000                    ResMsgEnd:	dw	0	; holds offset of msg end (end of resident)
  2610                                  
  2611                                  ;SR;
  2612                                  ; The three vars below have been added for a pure COMMAND.COM
  2613                                  
  2614 000004B4 0000                    ResSize:	dw	0
  2615                                  
  2616                                  ;SR;
  2617                                  ; Moved the stack here from the code segment
  2618                                  ;
  2619                                  ; bugbug: Why this odd stack size? And what should stack size be?
  2620                                  	
  2621                                  		;db	(80h - 3) dup (?)
  2622                                  ;align 2
  2623                                  		;times	124 db 0
  2624                                  		; 19/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:05BFh
  2625 000004B6 00<rep 78h>             		times	120 db 0
  2626                                  
  2627                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2628                                  align 2	
  2629                                  		
  2630                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:053Eh (offset RStack)
  2631                                  ; 05/06/2023
  2632                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:060Ah (offset RStack)
  2633                                  ; 19/07/2024
  2634                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:0637h (offset RStack)
  2635                                  
  2636                                  RStack:		; label	word
  2637 0000052E 0000                    OldDS:		dw	0	; keeps old ds value when jumping to
  2638                                  				; resident code segments
  2639                                  ;LoadHiFlg	db	0	; Flag set to 1 if UMB loading enabled ; M003
  2640                                  
  2641                                  ; include highvar.inc		; Add variables for 6.0 loadhigh functionality
  2642                                  ; -------------------------------
  2643                                  
  2644                                  ; fInHigh  - Is set to 1 during HideUMBs(), and back to zero in UnHideUMBs().
  2645                                  ; fUmbTiny - Is set to 1 if the user has specified /S on the command line.
  2646                                  ; SegLoad  - Segment address for first UMB specified; set automatically.
  2647                                  ; UmbLoad  - The load UMB number; for example, this is 3 if the user has
  2648                                  ;            given a command-line like "/L:3,500;4"
  2649                                  ; UmbUsed  - An array of characters, each of which is 1 iff the UMB
  2650                                  ;            matching its index number was specified on the command-line;
  2651                                  ;            for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
  2652                                  ;            will be set to 1. All others will be set to 0.
  2653                                  ; UmbSize  - An array of words, each of which is interpereted as a size
  2654                                  ;            specified by the user for a UMB (in the above example, all
  2655                                  ;            elements would be zero save UmbSize[3], which would be 500.
  2656                                  ; fm_umb   - Set to the old UMB link-state (0x80 or 0x00)
  2657                                  ; fm_strat - Set to the old memory-allocation strategy (0$00000???)
  2658                                  ; fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
  2659                                  ;            for details).
  2660                                  
  2661                                  ; - MSDOS 6.0 COMMAND.COM -
  2662                                  ;; To keep track of which UMBs were specified on the DH/LH command lines, and
  2663                                  ;; to keep track of the minimum sizes given for each, there're two arrays kept
  2664                                  ;; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
  2665                                  ;; big. 16 should be around 14 too many for most users, so there's no expected
  2666                                  ;; space problem (it's just such a nice round number, eh?).
  2667                                  
  2668                                  ; 05/06/2023
  2669                                  MAXUMB	equ	16
  2670                                  
  2671                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2672                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0540h (DATARES:0540h)
  2673                                  
  2674 00000530 00                      fInHigh:	db	0
  2675                                  
  2676                                  ; MSDOS 6.0 COMMAND.COM
  2677                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2678                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:060Dh (DATARES:060Dh)
  2679                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2680                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:063Ah (DATARES:063Ah)
  2681                                  
  2682 00000531 00                      fUmbTiny:	db	0
  2683 00000532 0000                    SegLoad:	dw	0
  2684 00000534 00                      UmbLoad:	db	0
  2685                                  
  2686                                  ; 19/07/2024
  2687                                  ; PCDOS 7.1 COMMAND.COM
  2688                                  %if 0
  2689                                  UmbUsed:	times MAXUMB db 0 ; db MAXUMB dup (?)
  2690                                  UmbSize:	times MAXUMB dw 0 ; dw MAXUMB dup (?)
  2691                                  %else
  2692                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2693                                  	UmbUsed equ MsgBuffer	; 16 bytes
  2694                                  	UmbSize equ UmbUsed+MAXUMB ; UmbUsed+16; 16 words
  2695                                  %endif
  2696                                  
  2697 00000535 00                      fm_umb:		db	0
  2698 00000536 00                      fm_strat:	db	0
  2699 00000537 00                      fm_argc:	db	0
  2700                                  
  2701                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
  2702                                  ; UmbLoad is set to the UMB number given.
  2703                                  
  2704                                  ;*** MESSAGES
  2705                                  ;    and other translatable text
  2706                                  
  2707                                  ; include comrmsg.inc	; M00
  2708                                  ; ------------------------------
  2709                                  
  2710                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2711                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0541h (DATARES:0541h)
  2712                                  
  2713                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2714                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0644h (DATARES:0644h)
  2715                                  
  2716                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2717                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0641h (DATARES:0641h)
  2718                                  
  2719 00000538 41                      ABORT_CHAR:	db 'A'
  2720 00000539 52                      RETRY_CHAR:	db 'R'
  2721 0000053A 49                      IGNORE_CHAR:	db 'I'
  2722 0000053B 46                      FAIL_CHAR:	db 'F'
  2723 0000053C 59                      YES_CHAR:	db 'Y'
  2724 0000053D 4E                      NO_CHAR:	db 'N'
  2725 0000053E 05                      REQ_ABORT:	db 5
  2726 0000053F 41626F7274              		db 'Abort'
  2727 00000544 07                      REQ_RETRY:	db 7
  2728 00000545 2C205265747279          		db ', Retry'
  2729 0000054C 08                      REQ_IGNORE:	db 8
  2730 0000054D 2C2049676E6F7265        		db ', Ignore'
  2731 00000555 06                      REQ_FAIL:	db 6
  2732 00000556 2C204661696C            		db ', Fail'
  2733 0000055C 01                      REQ_END:	db 1
  2734 0000055D 3F                      		db '?'
  2735 0000055E 08                      MREAD:		db 8
  2736 0000055F 72656164696E6700        		db 'reading', 0
  2737 00000567 08                      MWRITE:		db 8
  2738 00000568 77726974696E6700        		db 'writing', 0
  2739 00000570 0E                      MDRIVE:		db 14
  2740 00000571 202531206472697665-     		db ' %1 drive %2',0Dh,0Ah
  2740 0000057A 2025320D0A         
  2741 0000057F 0F                      MDEVICE:	db 15
  2742 00000580 202531206465766963-     		db ' %1 device %2',0Dh,0Ah
  2742 00000589 652025320D0A       
  2743 0000058F 26                      MVOLSERIAL:	db 38
  2744 00000590 506C6561736520696E-     		db 'Please insert volume %1 serial %2-%3',0Dh,0Ah
  2744 00000599 7365727420766F6C75-
  2744 000005A2 6D6520253120736572-
  2744 000005AB 69616C2025322D2533-
  2744 000005B4 0D0A               
  2745 000005B6 25                      BADFATMSG:	db 37
  2746 000005B7 46696C6520616C6C6F-     		db 'File allocation table bad, drive %1',0Dh,0Ah
  2746 000005C0 636174696F6E207461-
  2746 000005C9 626C65206261642C20-
  2746 000005D2 64726976652025310D-
  2746 000005DB 0A                 
  2747 000005DC 15                      COMBAD:		db 21
  2748 000005DD 496E76616C69642043-     		db 'Invalid COMMAND.COM',0Dh,0Ah
  2748 000005E6 4F4D4D414E442E434F-
  2748 000005EF 4D0D0A             
  2749 000005F2 21                      PUTBACKMSG:	db 33
  2750 000005F3 496E73657274206469-     		db 'Insert disk with %1 in drive %2',0Dh,0Ah
  2750 000005FC 736B20776974682025-
  2750 00000605 3120696E2064726976-
  2750 0000060E 652025320D0A       
  2751 00000614 21                      PROMPT:		db 33
  2752 00000615 507265737320616E79-     		db 'Press any key to continue . . .',0Dh,0Ah
  2752 0000061E 206B657920746F2063-
  2752 00000627 6F6E74696E7565202E-
  2752 00000630 202E202E0D0A       
  2753 00000636 1C                      ENDBATMES:	db 28
  2754 00000637 0D0A                    		db 0Dh,0Ah
  2755 00000639 5465726D696E617465-     		db 'Terminate batch job (Y/N)?'
  2755 00000642 206261746368206A6F-
  2755 0000064B 622028592F4E293F   
  2756 00000653 13                      EXECEMES:	db 19
  2757 00000654 43616E6E6F74206578-     		db 'Cannot execute %1',0Dh,0Ah
  2757 0000065D 65637574652025310D-
  2757 00000666 0A                 
  2758 00000667 13                      EXEBAD:		db 19
  2759 00000668 4572726F7220696E20-     		db 'Error in EXE file',0Dh,0Ah
  2759 00000671 4558452066696C650D-
  2759 0000067A 0A                 
  2760 0000067B 22                      TOOBIG:		db 34
  2761 0000067C 50726F6772616D2074-     		db 'Program too big to fit in memory',0Dh,0Ah
  2761 00000685 6F6F2062696720746F-
  2761 0000068E 2066697420696E206D-
  2761 00000697 656D6F72790D0A     
  2762 0000069E 16                      NOHANDMES:	db 22
  2763 0000069F 0D0A                    		db 0Dh,0Ah
  2764 000006A1 4E6F20667265652066-     		db 'No free file handles'
  2764 000006AA 696C652068616E646C-
  2764 000006B3 6573               
  2765 000006B5 1A                      RBADNAM:	db 26
  2766 000006B6 42616420436F6D6D61-     		db 'Bad Command or file name',0Dh,0Ah
  2766 000006BF 6E64206F722066696C-
  2766 000006C8 65206E616D650D0A   
  2767                                  ACCDENIED:	; 14/01/2023
  2768                                  		; 10/01/2023
  2769                                  ACCDEN:		;db 14
  2770                                  		;db 'Access denied '
  2771                                  		; 19/07/2024 - PCDOS 7.1
  2772 000006D0 0D                      		db 13
  2773 000006D1 416363657373206465-     		db 'Access denied'
  2773 000006DA 6E696564           
  2774 000006DE 19                      BMEMMES:	db 25
  2775 000006DF 0D0A4D656D6F727920-     		db 0Dh,0Ah,'Memory allocation error'
  2775 000006E8 616C6C6F636174696F-
  2775 000006F1 6E206572726F72     
  2776 000006F8 26                      HALTMES:	db 38
  2777 000006F9 0D0A                    		db 0Dh,0Ah
  2778 000006FB 43616E6E6F74206C6F-     		db 'Cannot load COMMAND, system halted',0Dh,0Ah
  2778 00000704 616420434F4D4D414E-
  2778 0000070D 442C2073797374656D-
  2778 00000716 2068616C7465640D0A 
  2779 0000071F 21                      FRETMES:	db 33
  2780 00000720 0D0A                    		db 0Dh,0Ah,
  2781 00000722 43616E6E6F74207374-     		db 'Cannot start COMMAND, exiting',0Dh,0Ah
  2781 0000072B 61727420434F4D4D41-
  2781 00000734 4E442C206578697469-
  2781 0000073D 6E670D0A           
  2782                                  ; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  2783                                  %if 0
  2784                                  ;%if 1  ; 20/07/2024 - Retro DOS v5.1 COMMAND.COM
  2785                                  PATRICIDE:	db 46
  2786                                  		db 0Dh,0Ah
  2787                                  		db 'Top level process aborted, cannot continue'
  2788                                  		db 0Dh,0Ah
  2789                                  %endif
  2790 00000741 02                      NEWLINE:	db 2
  2791 00000742 0D0A                    		db 0Dh, 0Ah
  2792                                  
  2793                                  ; 10/01/2023
  2794                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:077Dh
  2795                                  ; 05/06/2023
  2796                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0880h
  2797                                  
  2798                                  ; 19/07/2024
  2799                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0832h
  2800                                  
  2801 00000744 [280C]                  MsgPtrLists:	dw EXTMSGPTRS		; extended error messages
  2802 00000746 0100                    		dw 1
  2803 00000748 [E309]                  		dw PARSMSGPTRS		; parse	error messages
  2804 0000074A 0100                    		dw 1
  2805 0000074C [280C]                  		dw EXTMSGPTRS		; critical error messages
  2806 0000074E 0100                    		dw 1
  2807 00000750 0000                    		dw 0			; File system error messages
  2808 00000752 0000                    		dw 0			; are not supported.
  2809 00000754 [EA00]                  		dw MsgRetrv_Trap	; disk retriever routine
  2810 00000756 0000                    MySeg3:		dw 0			; segment of retriever routine
  2811                                  
  2812                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0791h
  2813                                  ; 05/06/2023
  2814                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0894h
  2815                                  
  2816                                  ; 19/07/2024
  2817                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0846h
  2818                                  
  2819 00000758 13                      CRMSG0:		db 19
  2820 00000759 57726974652070726F-     		db 'Write protect error'
  2820 00000762 74656374206572726F-
  2820 0000076B 72                 
  2821 0000076C 0C                      CRMSG1:		db 12
  2822 0000076D 496E76616C69642075-     		db 'Invalid unit'
  2822 00000776 6E6974             
  2823 00000779 09                      CRMSG2:		db 9
  2824 0000077A 4E6F74207265616479      		db 'Not ready'
  2825 00000783 16                      CRMSG3:		db 22
  2826 00000784 496E76616C69642064-     		db 'Invalid device request'
  2826 0000078D 657669636520726571-
  2826 00000796 75657374           
  2827 0000079A 0A                      CRMSG4:		db 10
  2828 0000079B 44617461206572726F-     		db 'Data error'
  2828 000007A4 72                 
  2829 000007A5 21                      CRMSG5:		db 33
  2830 000007A6 496E76616C69642064-     		db 'Invalid device request parameters'
  2830 000007AF 657669636520726571-
  2830 000007B8 756573742070617261-
  2830 000007C1 6D6574657273       
  2831 000007C7 0A                      CRMSG6:		db 10
  2832 000007C8 5365656B206572726F-     		db 'Seek error'
  2832 000007D1 72                 
  2833 000007D2 12                      CRMSG7:		db 18
  2834 000007D3 496E76616C6964206D-     		db 'Invalid media type'
  2834 000007DC 656469612074797065 
  2835 000007E5 10                      CRMSG8:		db 16
  2836 000007E6 536563746F72206E6F-     		db 'Sector not found'
  2836 000007EF 7420666F756E64     
  2837 000007F6 1A                      CRMSG9:		db 26
  2838 000007F7 5072696E746572206F-     		db 'Printer out of paper error'
  2838 00000800 7574206F6620706170-
  2838 00000809 6572206572726F72   
  2839 00000811 11                      CRMSG10:	db 17
  2840 00000812 577269746520666175-     		db 'Write fault error'
  2840 0000081B 6C74206572726F72   
  2841 00000823 10                      CRMSG11:	db 16
  2842 00000824 52656164206661756C-     		db 'Read fault error'
  2842 0000082D 74206572726F72     
  2843 00000834 0F                      CRMSG12:	db 15
  2844 00000835 47656E6572616C2066-     		db 'General failure'
  2844 0000083E 61696C757265       
  2845 00000844 11                      CRMSG13:	db 17
  2846 00000845 53686172696E672076-     		db 'Sharing violation'
  2846 0000084E 696F6C6174696F6E   
  2847 00000856 0E                      CRMSG14:	db 14
  2848 00000857 4C6F636B2076696F6C-     		db 'Lock violation'
  2848 00000860 6174696F6E         
  2849 00000865 13                      CRMSG15:	db 19
  2850 00000866 496E76616C69642064-     		db 'Invalid disk change'
  2850 0000086F 69736B206368616E67-
  2850 00000878 65                 
  2851 00000879 0F                      CRMSG16:	db 15
  2852 0000087A 46434220756E617661-     		db 'FCB unavailable'
  2852 00000883 696C61626C65       
  2853 00000889 19                      CRMSG17:	db 25
  2854 0000088A 53797374656D207265-     		db 'System resource exhausted'
  2854 00000893 736F75726365206578-
  2854 0000089C 68617573746564     
  2855 000008A3 12                      CRMSG18:	db 18
  2856 000008A4 436F64652070616765-     		db 'Code page mismatch'
  2856 000008AD 206D69736D61746368 
  2857 000008B6 0C                      CRMSG19:	db 12
  2858 000008B7 4F7574206F6620696E-     		db 'Out of input'
  2858 000008C0 707574             
  2859 000008C3 17                      CRMSG20:	db 23
  2860 000008C4 496E73756666696369-     		db 'Insufficient disk space'
  2860 000008CD 656E74206469736B20-
  2860 000008D6 7370616365         
  2861                                  
  2862                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0914h
  2863                                  ; 05/06/2023
  2864                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0A17h
  2865                                  
  2866                                  ; 19/07/2024
  2867                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:09C9h
  2868                                  
  2869 000008DB [5807]                  CRITMSGPTRS:	dw CRMSG0
  2870 000008DD [6C07]                  		dw CRMSG1
  2871 000008DF [7907]                  		dw CRMSG2
  2872 000008E1 [8307]                  		dw CRMSG3
  2873 000008E3 [9A07]                  		dw CRMSG4
  2874 000008E5 [A507]                  		dw CRMSG5
  2875 000008E7 [C707]                  		dw CRMSG6
  2876 000008E9 [D207]                  		dw CRMSG7
  2877 000008EB [E507]                  		dw CRMSG8
  2878 000008ED [F607]                  		dw CRMSG9
  2879 000008EF [1108]                  		dw CRMSG10
  2880 000008F1 [2308]                  		dw CRMSG11
  2881 000008F3 [3408]                  		dw CRMSG12
  2882 000008F5 [4408]                  		dw CRMSG13
  2883 000008F7 [5608]                  		dw CRMSG14
  2884 000008F9 [6508]                  		dw CRMSG15
  2885 000008FB [7908]                  		dw CRMSG16
  2886 000008FD [8908]                  		dw CRMSG17
  2887 000008FF [A308]                  		dw CRMSG18
  2888 00000901 [B608]                  		dw CRMSG19
  2889 00000903 [C308]                  		dw CRMSG20
  2890                                  
  2891                                  		; 14/01/2023
  2892                                  ;DataresEnd:	;; MSDOS 5.0 COMMAND.COM - DATARES:093Eh (RESGROUP:093Eh)
  2893                                  		; 05/06/2023
  2894                                  DataresEnd:	; MSDOS 6.22 COMMAND.COM - DATARES:0A41h (RESGROUP:0A41h)
  2895                                  
  2896 00000905 13                      PAERRMSG0:	db 19
  2897 00000906 546F6F206D616E7920-     		db 'Too many parameters'
  2897 0000090F 706172616D65746572-
  2897 00000918 73                 
  2898 00000919 1A                      PAERRMSG1:	db 26
  2899 0000091A 526571756972656420-     		db 'Required parameter missing'
  2899 00000923 706172616D65746572-
  2899 0000092C 206D697373696E67   
  2900 00000934 0E                      PAERRMSG2:	db 14
  2901 00000935 496E76616C69642073-     		db 'Invalid switch'
  2901 0000093E 7769746368         
  2902 00000943 0F                      PAERRMSG3:	db 15
  2903 00000944 496E76616C6964206B-     		db 'Invalid keyword'
  2903 0000094D 6579776F7264       
  2904 00000953 01                      PAERRMSG4:	db 1
  2905 00000954 20                      		db 20h
  2906 00000955 24                      PAERRMSG5:	db 36
  2907 00000956 506172616D65746572-     		db 'Parameter value not in allowed range'
  2907 0000095F 2076616C7565206E6F-
  2907 00000968 7420696E20616C6C6F-
  2907 00000971 7765642072616E6765 
  2908                                  PAERRMSG6:	; 10/01/2023
  2909 0000097A 1B                      PAERRMSG7:	db 27
  2910 0000097B 506172616D65746572-     		db 'Parameter value not allowed'
  2910 00000984 2076616C7565206E6F-
  2910 0000098D 7420616C6C6F776564 
  2911                                  ;PAERRMSG7:	db 27
  2912                                  ;		db 'Parameter value not allowed'
  2913 00000996 1C                      PAERRMSG8:	db 28
  2914 00000997 506172616D65746572-     		db 'Parameter format not correct'
  2914 000009A0 20666F726D6174206E-
  2914 000009A9 6F7420636F72726563-
  2914 000009B2 74                 
  2915 000009B3 11                      PAERRMSG9:	db 17
  2916 000009B4 496E76616C69642070-     		db 'Invalid parameter'
  2916 000009BD 6172616D65746572   
  2917 000009C5 1D                      PAERRMSG10:	db 29
  2918 000009C6 496E76616C69642070-     		db 'Invalid parameter combination'
  2918 000009CF 6172616D6574657220-
  2918 000009D8 636F6D62696E617469-
  2918 000009E1 6F6E               
  2919                                  
  2920                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0A38h
  2921                                  ; 05/06/2023
  2922                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0B3Bh
  2923                                  
  2924                                  ; 19/07/2024
  2925                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0AD1h
  2926                                  
  2927 000009E3 [0509]                  PARSMSGPTRS:	dw PAERRMSG0
  2928 000009E5 [1909]                  		dw PAERRMSG1
  2929 000009E7 [3409]                  		dw PAERRMSG2
  2930 000009E9 [4309]                  		dw PAERRMSG3
  2931 000009EB [5309]                  		dw PAERRMSG4
  2932 000009ED [5509]                  		dw PAERRMSG5
  2933 000009EF [7A09]                  		dw PAERRMSG6
  2934 000009F1 [7A09]                  		dw PAERRMSG7
  2935 000009F3 [9609]                  		dw PAERRMSG8
  2936 000009F5 [B309]                  		dw PAERRMSG9
  2937 000009F7 [C509]                  		dw PAERRMSG10
  2938                                  ; 21/04/2023
  2939                                  NUMPARSMSGS equ ($-PARSMSGPTRS)>>1 ; 14/01/2023
  2940                                  
  2941 000009F9 10                      INVLFUNCT:	db 16
  2942 000009FA 496E76616C69642066-     		db 'Invalid function'
  2942 00000A03 756E6374696F6E     
  2943 00000A0A 0E                      FNOTFOUND:	db 14
  2944 00000A0B 46696C65206E6F7420-     		db 'File not found'
  2944 00000A14 666F756E64         
  2945 00000A19 0E                      PNOTFOUND:	db 14
  2946 00000A1A 50617468206E6F7420-     		db 'Path not found'
  2946 00000A23 666F756E64         
  2947 00000A28 13                      TOOMANYOF:	db 19
  2948 00000A29 546F6F206D616E7920-     		db 'Too many open files'
  2948 00000A32 6F70656E2066696C65-
  2948 00000A3B 73                 
  2949                                  ; 14/01/2023
  2950                                  ;ACCDEN:	; 10/01/2023
  2951                                  ;ACCDENIED:	db 14
  2952                                  ;		db 'Access denied '
  2953 00000A3C 0E                      INVHANDLE:	db 14
  2954 00000A3D 496E76616C69642068-     		db 'Invalid handle'
  2954 00000A46 616E646C65         
  2955 00000A4B 1F                      MEMCBDEST:	db 31
  2956 00000A4C 4D656D6F727920636F-     		db 'Memory control blocks destroyed'
  2956 00000A55 6E74726F6C20626C6F-
  2956 00000A5E 636B73206465737472-
  2956 00000A67 6F796564           
  2957 00000A6B 13                      INSUFFMEM:	db 19
  2958 00000A6C 496E73756666696369-     		db 'Insufficient memory'
  2958 00000A75 656E74206D656D6F72-
  2958 00000A7E 79                 
  2959 00000A7F 1C                      INVMEMBLA:	db 28
  2960 00000A80 496E76616C6964206D-     		db 'Invalid memory block address'
  2960 00000A89 656D6F727920626C6F-
  2960 00000A92 636B20616464726573-
  2960 00000A9B 73                 
  2961 00000A9C 13                      INVENVIRO:	db 19
  2962 00000A9D 496E76616C69642045-     		db 'Invalid Environment'
  2962 00000AA6 6E7669726F6E6D656E-
  2962 00000AAF 74                 
  2963 00000AB0 0E                      INVFORMAT:	db 14
  2964 00000AB1 496E76616C69642066-     		db 'Invalid format'
  2964 00000ABA 6F726D6174         
  2965 00000ABF 1A                      INVFNPARM:	db 26
  2966 00000AC0 496E76616C69642066-     		db 'Invalid function parameter'
  2966 00000AC9 756E6374696F6E2070-
  2966 00000AD2 6172616D65746572   
  2967 00000ADA 0C                      INVLDDATA:	db 12
  2968 00000ADB 496E76616C69642064-     		db 'Invalid data'
  2968 00000AE4 617461             
  2969 00000AE7 1B                      INVDRVSPC:	db 27
  2970 00000AE8 496E76616C69642064-     		db 'Invalid drive specification'
  2970 00000AF1 726976652073706563-
  2970 00000AFA 696669636174696F6E 
  2971 00000B03 23                      ATRCURDIR:	db 35
  2972 00000B04 417474656D70742074-     		db 'Attempt to remove current directory'
  2972 00000B0D 6F2072656D6F766520-
  2972 00000B16 63757272656E742064-
  2972 00000B1F 69726563746F7279   
  2973 00000B27 0F                      NOTSAMDEV:	db 15
  2974 00000B28 4E6F742073616D6520-     		db 'Not same device'
  2974 00000B31 646576696365       
  2975 00000B37 0D                      NOMOREFIL:	db 13
  2976 00000B38 4E6F206D6F72652066-     		db 'No more files'
  2976 00000B41 696C6573           
  2977 00000B45 0B                      FILEXISTS:	db 11
  2978 00000B46 46696C652065786973-     		db 'File exists'
  2978 00000B4F 7473               
  2979 00000B51 1B                      CANTMKDIR:	db 27
  2980 00000B52 43616E6E6F74206D61-     		db 'Cannot make directory entry'
  2980 00000B5B 6B6520646972656374-
  2980 00000B64 6F727920656E747279 
  2981 00000B6D 0E                      FAILINT24:	db 14
  2982 00000B6E 4661696C206F6E2049-     		db 'Fail on INT 24'
  2982 00000B77 4E54203234         
  2983 00000B7C 15                      TOOMANYRD:	db 21
  2984 00000B7D 546F6F206D616E7920-     		db 'Too many redirections'
  2984 00000B86 726564697265637469-
  2984 00000B8F 6F6E73             
  2985 00000B92 15                      DUPLREDIR:	db 21
  2986 00000B93 4475706C6963617465-     		db 'Duplicate redirection'
  2986 00000B9C 207265646972656374-
  2986 00000BA5 696F6E             
  2987 00000BA8 10                      INVPASSWD:	db 16
  2988 00000BA9 496E76616C69642070-     		db 'Invalid password'
  2988 00000BB2 617373776F7264     
  2989 00000BB9 11                      INVLDPARM:	db 17
  2990 00000BBA 496E76616C69642070-     		db 'Invalid parameter'
  2990 00000BC3 6172616D65746572   
  2991 00000BCB 12                      NETDATFAU:	db 18
  2992 00000BCC 4E6574776F726B2064-     		db 'Network data fault'
  2992 00000BD5 617461206661756C74 
  2993 00000BDE 21                      FNOSUPNET:	db 33
  2994 00000BDF 46756E6374696F6E20-     		db 'Function not supported by network'
  2994 00000BE8 6E6F7420737570706F-
  2994 00000BF1 72746564206279206E-
  2994 00000BFA 6574776F726B       
  2995 00000C00 27                      RSCNOTINS:	db 39
  2996 00000C01 526571756972656420-     		db 'Required system component not installed'
  2996 00000C0A 73797374656D20636F-
  2996 00000C13 6D706F6E656E74206E-
  2996 00000C1C 6F7420696E7374616C-
  2996 00000C25 6C6564             
  2997                                  
  2998                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0C8Ch
  2999                                  ; 05/06/2023
  3000                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0D8Fh
  3001                                  
  3002                                  ; 19/07/2024
  3003                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0D24h
  3004                                  
  3005 00000C28 [F909]                  EXTMSGPTRS:	dw INVLFUNCT
  3006 00000C2A [0A0A]                  		dw FNOTFOUND
  3007 00000C2C [190A]                  		dw PNOTFOUND
  3008 00000C2E [280A]                  		dw TOOMANYOF
  3009 00000C30 [D006]                  		dw ACCDENIED
  3010 00000C32 [3C0A]                  		dw INVHANDLE
  3011 00000C34 [4B0A]                  		dw MEMCBDEST
  3012 00000C36 [6B0A]                  		dw INSUFFMEM
  3013 00000C38 [7F0A]                  		dw INVMEMBLA
  3014 00000C3A [9C0A]                  		dw INVENVIRO
  3015 00000C3C [B00A]                  		dw INVFORMAT
  3016 00000C3E [BF0A]                  		dw INVFNPARM
  3017 00000C40 [DA0A]                  		dw INVLDDATA
  3018 00000C42 0000                    		dw 0
  3019 00000C44 [E70A]                  		dw INVDRVSPC
  3020 00000C46 [030B]                  		dw ATRCURDIR
  3021 00000C48 [270B]                  		dw NOTSAMDEV
  3022 00000C4A [370B]                  		dw NOMOREFIL
  3023 00000C4C [5807]                  		dw CRMSG0
  3024 00000C4E [6C07]                  		dw CRMSG1
  3025 00000C50 [7907]                  		dw CRMSG2
  3026 00000C52 [8307]                  		dw CRMSG3
  3027 00000C54 [9A07]                  		dw CRMSG4
  3028 00000C56 [A507]                  		dw CRMSG5
  3029 00000C58 [C707]                  		dw CRMSG6
  3030 00000C5A [D207]                  		dw CRMSG7
  3031 00000C5C [E507]                  		dw CRMSG8
  3032 00000C5E [F607]                  		dw CRMSG9
  3033 00000C60 [1108]                  		dw CRMSG10
  3034 00000C62 [2308]                  		dw CRMSG11
  3035 00000C64 [3408]                  		dw CRMSG12
  3036 00000C66 [4408]                  		dw CRMSG13
  3037 00000C68 [5608]                  		dw CRMSG14
  3038 00000C6A [6508]                  		dw CRMSG15
  3039 00000C6C [7908]                  		dw CRMSG16
  3040 00000C6E [8908]                  		dw CRMSG17
  3041 00000C70 [A308]                  		dw CRMSG18
  3042 00000C72 [B608]                  		dw CRMSG19
  3043 00000C74 [C308]                  		dw CRMSG20
  3044 00000C76 0000<rep 28h>           		times 40 dw 0	; db 80 dup(0)
  3045 00000CC6 [450B]                  		dw FILEXISTS
  3046 00000CC8 0000                    		dw 0
  3047 00000CCA [510B]                  		dw CANTMKDIR
  3048 00000CCC [6D0B]                  		dw FAILINT24
  3049 00000CCE [7C0B]                  		dw TOOMANYRD
  3050 00000CD0 [920B]                  		dw DUPLREDIR
  3051 00000CD2 [A80B]                  		dw INVPASSWD
  3052 00000CD4 [B90B]                  		dw INVLDPARM
  3053 00000CD6 [CB0B]                  		dw NETDATFAU
  3054 00000CD8 [DE0B]                  		dw FNOSUPNET
  3055 00000CDA [000C]                  		dw RSCNOTINS
  3056                                  ; ----------------------------------------------------------------------------
  3057                                  	; 17/04/2023
  3058                                  ExtMsgEnd:
  3059                                  
  3060                                  ; 21/04/2023
  3061                                  NUMEXTMSGS equ ($-EXTMSGPTRS)>>1 ; 14/01/2023
  3062                                  
  3063                                  ; ----------------------------------------------------------------------------
  3064                                  ; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  3065                                  %if 1	;  20/07/2024
  3066 00000CDC 2E                      PATRICIDE:	db 46
  3067 00000CDD 0D0A                    		db 0Dh,0Ah
  3068 00000CDF 546F70206C6576656C-     		db 'Top level process aborted, cannot continue'
  3068 00000CE8 2070726F6365737320-
  3068 00000CF1 61626F727465642C20-
  3068 00000CFA 63616E6E6F7420636F-
  3068 00000D03 6E74696E7565       
  3069 00000D09 0D0A                    		db 0Dh,0Ah
  3070                                  %endif
  3071                                  
  3072                                  ; ----------------------------------------------------------------------------
  3073                                  
  3074                                  ; 20/04/2023
  3075                                  
  3076 00000D0B 90<rep 5h>              align 16
  3077                                  
  3078                                  ; ----------------------------------------------------------------------------
  3079                                  
  3080                                  ; 10/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3081                                  ;; MSDOS 5.0 COMMAND.COM - RESGROUP:0D40h (CODERES:0000h)
  3082                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  3083                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:0E50h (CODERES:0000h)
  3084                                  
  3085                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3086                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0E10h (CODERES:0000h)
  3087                                  
  3088                                  ; ----------------------------------------------------------------------------
  3089                                  ; SEGMENT - CODERES
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  
  3092                                  ; 11/01/2023
  3093                                  RCODE_START:	
  3094                                  
  3095                                  ; ----------------------------------------------------------------------------
  3096                                  ;***	EXEC error handling
  3097                                  ;
  3098                                  ;	COMMAND has issued an EXEC system call and it has returned an error.
  3099                                  ;	We examine the error code and select an appropriate message.
  3100                                  ; --------------------------
  3101                                  ;	Bugbug:	optimize reg usage in following code? Careful of DX!
  3102                                  ;	Condense the error scan?
  3103                                  ;	RBADNAM is checked by transient, no need here?
  3104                                  ;	Move below Ext_Exec.
  3105                                  ; ----------------------------------------------------------------------------
  3106                                  
  3107                                  Exec_Err:
  3108                                  ;SR;
  3109                                  ; ds,es are setup when the transient jumps to Ext_Exec. So segment regs are
  3110                                  ; in order here
  3111                                  
  3112                                  ;	Bugbug:	can we use byte compares here?
  3113                                  ;	Might be able to use byte msg#s, too.
  3114                                  
  3115                                  ;	Store errors in a 3 or 4 byte table. Msg #s in another.
  3116                                  ;	Speed not high priority here.
  3117                                  
  3118                                  ;	Move this to transient.
  3119                                  
  3120                                  	; 10/01/2023
  3121                                  
  3122                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3123                                  ;if 0	; PCDOS 7.1 COMMAND.COM doesn't use 'RBADNAM' error msg here 
  3124                                  %if 1	; Retro DOS v5.0 COMMAND.COM (and MSDOS 6.22 COMMAND.COM)
  3125                                  	;mov	bx,RBADNAM	; offset DATARES:RBadNam
  3126 00000D10 BA[B506]                	mov	dx,RBADNAM
  3127 00000D13 3C02                    	cmp	al,ERROR_FILE_NOT_FOUND ; 2
  3128 00000D15 741B                    	je	short GotExecEMes		; bad command
  3129                                  %endif
  3130                                  	;mov	bx,TOOBIG	; offset DATARES:TooBig
  3131 00000D17 BA[7B06]                	mov	dx,TOOBIG
  3132 00000D1A 3C08                    	cmp	al,ERROR_NOT_ENOUGH_MEMORY ; 8
  3133 00000D1C 7414                    	je	short GotExecEMes		; file not found
  3134                                  	;mov	bx,EXEBAD	; offset DATARES:ExeBad
  3135 00000D1E BA[6706]                	mov	dx,EXEBAD
  3136 00000D21 3C0B                    	cmp	al,ERROR_BAD_FORMAT ; 11 ; 0Bh
  3137 00000D23 740D                    	je	short GotExecEMes		; bad exe file
  3138                                  	;mov	bx,ACCDEN	; offset DATARES:AccDen
  3139 00000D25 BA[D006]                	mov	dx,ACCDEN
  3140 00000D28 3C05                    	cmp	al,ERROR_ACCESS_DENIED ; 5
  3141 00000D2A 7406                    	je	short GotExecEMes		; access denied
  3142                                  
  3143                                  Default_Message:
  3144                                  	;mov	bx,EXECEMES	; offset DATARES:ExecEMes
  3145 00000D2C BA[5306]                	mov	dx,EXECEMES
  3146                                  						; default message
  3147 00000D2F BE[3002]                	mov	si,ExecErrSubst ; offset DATARES:ExecErrSubst
  3148                                  						; get address of subst block
  3149                                  GotExecEMes:
  3150                                  	;mov	dx,bx				; DX = ptr to msg
  3151 00000D32 E8A606                  	call	RPrint ; invoke	RPrint
  3152 00000D35 EB09                    	jmp	short NoExec
  3153                                  
  3154                                  ; ----------------------------------------------------------------------------
  3155                                  ;***	EXEC call
  3156                                  ;
  3157                                  ;	The transient has set up everything for an EXEC system call.
  3158                                  ;	For cleanliness, we issue the EXEC here in the resident 
  3159                                  ;	so that we may be able to recover cleanly upon success.
  3160                                  ;
  3161                                  ;	CS,DS,ES,SS = DATARES seg addr
  3162                                  ; ----------------------------------------------------------------------------
  3163                                  
  3164                                  Ext_Exec:
  3165                                  ;SR;
  3166                                  ; The words put on the stack by the stub will be popped off when we finally
  3167                                  ;jump to LodCom (by LodCom).
  3168                                  
  3169                                  	; 10/01/2023
  3170                                  	;int	21h			; do the exec
  3171                                  	; 10/01/2023 - MSDOS 5.0 COMMAND.COM - RESGROUP:0D69h (CODERES:0029h)
  3172                                  Exec_Ret:
  3173 00000D37 72D7                    	jc	short Exec_Err		; exec failed
  3174                                  
  3175                                  ;	The exec has completed. Retrieve the exit code.
  3176                                  
  3177                                  Exec_Wait:
  3178 00000D39 B44D                    	mov	ah,4Dh
  3179                                  	;mov	ah,WAITPROCESS ; 4Dh	; get errorlevel
  3180 00000D3B CD21                    	int	21h			; get the return code
  3181                                  	;mov	[cs:RetCode],ax
  3182                                  	; 11/01/2023
  3183 00000D3D A3[9A02]                	mov	[RetCode],ax
  3184                                  
  3185                                  ;	See if we can reload the transient. The external command
  3186                                  ;	may have overwritten part of the transient.
  3187                                  
  3188                                  NoExec:
  3189                                  ;SR;
  3190                                  ; ds = es = ss = DATARES when we jump to LodCom
  3191                                  ;
  3192 00000D40 E97A01                  	jmp	LodCom
  3193                                  
  3194                                  ; ----------------------------------------------------------------------------
  3195                                  ;***	Int 23 (ctrl-c) handler
  3196                                  ;
  3197                                  ;	This is the default system INT 23 handler. All processes
  3198                                  ;	(including COMMAND) get it by default. There are some
  3199                                  ;	games that are played: We ignore ^C during most of the
  3200                                  ;	INIT code. This is because we may perform an ALLOC and
  3201                                  ;	diddle the header! Also, if we are prompting for date/time
  3202                                  ;	in the init code, we are to treat ^C as empty responses.
  3203                                  ; ---------------------------
  3204                                  ;	Bugbug:	put init ctrl-c handling in init module.
  3205                                  ; ----------------------------------------------------------------------------
  3206                                  
  3207                                  ;SR;
  3208                                  ;The stub has pushed the previous ds and DATARES onto the stack. We get
  3209                                  ;both these values off the stack now
  3210                                  ;
  3211                                  ;ContC	proc	far
  3212                                  
  3213                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  3214                                  
  3215                                  	; 11/01/2023 - Retro DOS v5.40 COMMAND.COM
  3216                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:0D75h (CODERES:0035h)
  3217                                  ContC:
  3218 00000D43 1F                      	pop	ds			; ds = DATARES
  3219                                  ;	assume	ds:DATARES
  3220                                  ;;	pop	word [OldDS]		; OldDS = old ds
  3221                                  
  3222 00000D44 F606[1203]01            	test	byte [InitFlag],INITINIT ; 1
  3223                                  	;test	byte [cs:INITFLAG],INITINIT ; 1	; in initialization?
  3224 00000D49 740D                    	jz	short NotAtInit		; no
  3225 00000D4B F606[1203]02            	test	byte [InitFlag],INITSPECIAL ; 2 
  3226                                  	;test	byte [cs:INITFLAG],INITSPECIAL ; 2 ; doing special stuff?
  3227 00000D50 7404                    	jz	short CmdIret		; no, ignore ^C
  3228 00000D52 1F                      	pop	ds			; restore before jumping; M021
  3229                                  	;jmp	RESGROUP:Init_ContC_SpecialCase ; Yes, go handle it
  3230 00000D53 E9E90F                  	jmp	init_contc_specialcase
  3231                                  CmdIret:
  3232                                  ;SR;
  3233                                  ; Restore ds to its previous value
  3234                                  ;
  3235                                  
  3236                                  ;;	mov	ds,[OLdDS]		;
  3237 00000D56 1F                      	pop	ds
  3238 00000D57 CF                      	iret				; yes, ignore the ^C
  3239                                  
  3240                                  NotAtInit:
  3241 00000D58 F606[1203]04            	test	byte [InitFlag],INITCTRLC ; 4
  3242                                  	;test	byte [cs:INITFLAG],INITCTRLC ; 4 ; are we already in a ^C?
  3243 00000D5D 7411                    	jz	short NotInit 		; nope too.
  3244                                  
  3245                                  ;*	We are interrupting ourselves in this ^C handler. We need
  3246                                  ;	to set carry and return to the user sans flags only if the
  3247                                  ;	system call was a 1-12 one. Otherwise, we ignore the ^C.
  3248                                  
  3249                                  	;cmp	ah,1
  3250                                  	;jb	short CmdIret
  3251                                  	; 19/07/2024
  3252 00000D5F 84E4                    	test	ah,ah
  3253 00000D61 74F3                    	jz	short CmdIret
  3254                                  
  3255 00000D63 80FC0C                  	cmp	ah,12
  3256 00000D66 77EE                    	ja	short CmdIret
  3257                                  
  3258 00000D68 1F                      	pop	ds			;restore ds to old value
  3259 00000D69 83C406                  	add	sp,6			; remove int frame
  3260 00000D6C F9                      	stc
  3261                                  
  3262                                  ;;	mov	ds,[OldDS]		;restore ds to its old value
  3263 00000D6D CA0200                  	retf	2			; remove those flags...
  3264                                  
  3265                                  NotInit:
  3266                                  
  3267                                  ;*	We have now received a ^C for some process (maybe ourselves
  3268                                  ;	but not at INIT).
  3269                                  ;	
  3270                                  ;	Note that we are running on the user's stack!!! Bad news if
  3271                                  ;	any of the system calls below go and issue another INT
  3272                                  ;	24... Massive stack overflow! Another bad point is that
  3273                                  ;	SavHand will save an already saved handle, thus losing a
  3274                                  ;	possible redirection...
  3275                                  ;	
  3276                                  ;	All we need to do is set the flag to indicate nested ^C. 
  3277                                  ;	The above code will correctly flag the ^C diring the
  3278                                  ;	message output and prompting while ignoring the ^C the rest
  3279                                  ;	of the time.
  3280                                  ;	
  3281                                  ;	Clean up: flush disk. If we are in the middle of a batch
  3282                                  ;	file, we ask if he wants to terminate it. If he does, then
  3283                                  ;	we turn off all internal flags and let the DOS abort.
  3284                                  
  3285 00000D70 800E[1203]04            	or	byte [InitFlag],INITCTRLC ; 4
  3286                                  	;or	byte [cs:INITFLAG],INITCTRLC ; 4 ; nested ^c is on
  3287 00000D75 FB                      	sti
  3288                                  
  3289                                  ;	push	cs			; el yucko! change the user's ds!!
  3290                                  ;	pop	ds
  3291                                  
  3292                                  ;	assume	ds:RESGROUP
  3293                                  
  3294 00000D76 58                      	pop	ax			; discard the old ds value
  3295                                  
  3296 00000D77 A1[A502]                	mov	ax,[SingleCom]
  3297 00000D7A 09C0                    	or	ax,ax
  3298 00000D7C 7506                    	jnz	short NoReset
  3299 00000D7E 50                      	push	ax
  3300 00000D7F B40D                    	mov	ah,DISK_RESET ; 0Dh
  3301 00000D81 CD21                    	int	21h			; reset disks in case files were open
  3302 00000D83 58                      	pop	ax
  3303                                  
  3304                                  NoReset:
  3305                                  
  3306                                  ;	In the generalized version of FOR, PIPE and BATCH, we would
  3307                                  ;	walk the entire active list and free each segment. Here,
  3308                                  ;	we just free the single batch segment.
  3309                                  
  3310 00000D84 F706[4902]FFFF          	test	word [Batch],-1 ; 0FFFFh
  3311 00000D8A 7452                    	jz	short ContCTerm
  3312 00000D8C 09C0                    	or	ax,ax
  3313 00000D8E 754E                    	jnz	short ContCTerm
  3314 00000D90 E89402                  	call	SavHand
  3315 00000D93 E8D903                  	call	AskEnd			; ask if user wants to end batch
  3316                                  
  3317                                  ;	If the carry flag is clear, we do NOT free up the batch file
  3318                                  
  3319 00000D96 7340                    	jnc	short ContBatch
  3320 00000D98 8A0E[9D02]              	mov	cl,[EchoFlag]		; get current echo flag
  3321 00000D9C 53                      	push	bx
  3322                                  
  3323                                  ClearBatch:
  3324 00000D9D 8E06[4902]              	mov	es,[Batch]		; get batch segment
  3325                                  	;mov	di,20h
  3326 00000DA1 8B3E2000                	mov	di,[BATCHSEGMENT.BatFile] ; get offset of batch file name
  3327                                  	; MSDOS 5.0 & MSDOS 6.0 (ES:5)
  3328                                  	;mov	bx,es:BatForPtr		; get old FOR segment
  3329 00000DA5 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
  3330                                  	; MSDOS 3.3 ([ES:4])
  3331                                  	;mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:4] ; get old FOR segment
  3332                                  	;
  3333                                  	; 19/07/2024
  3334                                  	;cmp	bx,0			; is a FOR in progress
  3335                                  	;je	short No_Bat_For	; no - don't deallocate
  3336 00000DAA 85DB                    	test	bx,bx
  3337 00000DAC 7408                    	jz	short No_Bat_For
  3338                                  
  3339 00000DAE 06                      	push	es			;
  3340 00000DAF 8EC3                    	mov	es,bx			; yes - free it up...
  3341 00000DB1 B449                    	mov	ah,49h
  3342                                  	;mov	ah,DEALLOC ; 49h	;
  3343 00000DB3 CD21                    	int	21h			;
  3344 00000DB5 07                      	pop	es			; restore to batch segment
  3345                                  
  3346                                  No_Bat_For:
  3347                                  	;mov	cl,[es:1]
  3348 00000DB6 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag] ; get old echo flag
  3349                                  	;mov	bx,[es:3]
  3350 00000DBB 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast] ; get old batch segment
  3351 00000DC0 B449                    	mov	ah,49h
  3352                                  	;mov	ah,DEALLOC ; 49h	; free it up...
  3353 00000DC2 CD21                    	int	21h
  3354 00000DC4 891E[4902]              	mov	[Batch],bx		; get ready to deallocate next batch
  3355 00000DC8 FF0E[AE02]              	dec	word [Nest]		; is there another batch file?
  3356 00000DCC 75CF                    	jnz	short ClearBatch	; keep going until no batch file
  3357                                  
  3358                                  ;	We are terminating a batch file; restore the echo status
  3359                                  
  3360                                  ;Shell_Bat_Cont: 			; continue batch for SHELL
  3361 00000DCE 5B                      	pop	bx
  3362 00000DCF 880E[9D02]              	mov	[EchoFlag],cl		; reset echo status
  3363                                  	; 29/05/2018
  3364 00000DD3 C606[1303]00            	mov	byte [PipeFlag],0	; turn off pipeflag
  3365                                  
  3366                                  ContBatch:
  3367 00000DD8 E8FD05                  	call	crlf			; print out crlf before returning
  3368 00000DDB E87302                  	call	RestHand
  3369                                  
  3370                                  ;	Yes, we are terminating. Turn off flags and allow the DOS to abort.
  3371                                  
  3372                                  ContCTerm:
  3373 00000DDE 31C0                    	xor	ax,ax			; indicate no read
  3374 00000DE0 89C5                    	mov	bp,ax
  3375                                  
  3376                                  ;	The following resetting of the state flags is good for the
  3377                                  ;	generalized batch processing.
  3378                                  
  3379 00000DE2 A2[AA02]                	mov	[IfFlag],al		; turn off iffing
  3380 00000DE5 A2[AB02]                	mov	[ForFlag],al		; turn off for processing
  3381 00000DE8 E81C00                  	call	ResPipeOff
  3382 00000DEB 3906[A502]              	cmp	[SingleCom],ax		; see if we need to set SingleCom
  3383 00000DEF 7406                    	jz	short NoSetSing
  3384 00000DF1 C706[A502]FFFF          	mov	word [SingleCom],-1	; cause termination on 
  3385                                  					;  pipe, batch, for
  3386                                  NoSetSing:
  3387                                  
  3388                                  ;	If we are doing an internal command, go through the reload process.
  3389                                  ;	If we are doing an external, let DOS abort the process.
  3390                                  ;	In both cases, we are now done with the ^C processing.
  3391                                  
  3392 00000DF7 8026[1203]FB            	and	byte [InitFlag],~INITCTRLC ; 0FBh
  3393 00000DFC 3806[9902]              	cmp	[ExtCom],al
  3394 00000E00 7503                    	jnz	short DoDAb		; internal ^c
  3395 00000E02 E94701                  	jmp	LodCom1
  3396                                  DoDAb:
  3397 00000E05 F9                      	stc				; tell dos to abort
  3398                                  
  3399                                  ;SR;
  3400                                  ;We dont need to restore ds here because we are forcing DOS to do an abort
  3401                                  ;by setting carry and leaving flags on the stack
  3402                                  
  3403 00000E06 CB                      	retf				; Leave flags on stack
  3404                                  
  3405                                  ;ContC	endp
  3406                                  
  3407                                  ;SR;
  3408                                  ;ds = DATARES on entry. This routine is called from DskErr and LodCom1 and
  3409                                  ;both have ds = DATARES
  3410                                  
  3411                                  	; 11/01/2023
  3412                                  ResPipeOff:
  3413 00000E07 50                      	push	ax
  3414 00000E08 31C0                    	xor	ax,ax
  3415                                  	;xchg	al,[cs:PIPEFLAG]
  3416 00000E0A 8606[1303]              	xchg	al,[PipeFlag]
  3417 00000E0E 08C0                    	or	al,al
  3418 00000E10 7404                    	jz	short NoPipePop
  3419                                  	;shr	byte [cs:ECHOFLAG],1
  3420 00000E12 D02E[9D02]              	shr	byte [EchoFlag],1
  3421                                  NoPipePop:
  3422 00000E16 58                      	pop	ax
  3423 00000E17 C3                      	retn
  3424                                  
  3425                                  ;CODERES ends
  3426                                  
  3427                                  ;=============================================================================
  3428                                  ; COMMAND2.ASM, MSDOS 6.0, 1991
  3429                                  ;=============================================================================
  3430                                  ; 21/09/2018 - Retro DOS v3.0
  3431                                  
  3432                                  ;	title	COMMAND2 - resident code for COMMAND.COM part II
  3433                                  ;	name	COMMAND2
  3434                                  
  3435                                  ;/*
  3436                                  ; *                      Microsoft Confidential
  3437                                  ; *                      Copyright (C) Microsoft Corporation 1991
  3438                                  ; *                      All Rights Reserved.
  3439                                  ; */
  3440                                  
  3441                                  ;
  3442                                  ;	Revision History
  3443                                  ;	================
  3444                                  ;
  3445                                  ; M038	SR  11/5/90	Changed stuff for Novell RPL. These guys cannot
  3446                                  ;			reserve memory by changing int 12h and then give it
  3447                                  ;			back to DOS by changing arenas in autoexec.bat.
  3448                                  ;			This makes command.com reload transient and this
  3449                                  ;			cannot be done at this stage.
  3450                                  ;
  3451                                  
  3452                                  ;CODERES segment public byte
  3453                                  
  3454                                  ;*	If we cannot allocate enough memory for the transient or there
  3455                                  ;	was some other allocation error, we display a message and
  3456                                  ;	then die.
  3457                                  
  3458                                  ;SR;
  3459                                  ; We will have to make sure that at this entry point and at FatalC, 
  3460                                  ;ds = DATARES. All jumps to these points are made from only within this file
  3461                                  ;and so we should be able to do this
  3462                                  
  3463                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3464                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0E4Bh (CODERES:010Bh)
  3465                                  
  3466                                  	;assume	ds:DATARES
  3467                                  BadMemErr:
  3468 00000E18 BA[DE06]                	mov	dx,BMEMMES			; DX = ptr to msg
  3469                                  FatalC:
  3470                                  	; 12/01/2023
  3471                                  ;;	push	cs
  3472                                  ;;	pop	ds
  3473                                  ;;	assume	ds:ResGroup
  3474                                  ;	invoke	RPrint
  3475                                  
  3476                                  	; 12/01/2023
  3477                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3478 00000E1B E8BD05                  	call	RPrint
  3479                                  
  3480                                  	; MSDOS 3.3
  3481                                  	;call	RDISPMSG
  3482                                  
  3483                                  ;	If this is NOT a permanent (top-level) COMMAND, then we exit;
  3484                                  ;	we can't do anything else!
  3485                                  
  3486 00000E1E 803E[A202]00            	cmp	byte [PermCom],0
  3487 00000E23 7410                    	je	short FatalRet
  3488                                  
  3489                                  ;	We are a permanent command. If we are in the process of the
  3490                                  ;	magic interrupt (Singlecom) then exit too.
  3491                                  
  3492 00000E25 833E[A502]00            	cmp	word [SingleCom],0		; if PermCom and SingleCom
  3493 00000E2A 7509                    	jne	short FatalRet			; must take int_2e exit
  3494                                  
  3495                                  ;	Permanent command. We can't do ANYthing except halt.
  3496                                  
  3497 00000E2C BA[F806]                	mov	dx,HALTMES			; DX = ptr to msg
  3498                                  	;invoke	RPrint
  3499                                  	; 12/01/2023	
  3500                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3501 00000E2F E8A905                  	call	RPrint	
  3502                                  	; MSDOS 3.3
  3503                                  	;call	RDISPMSG
  3504 00000E32 FB                      	sti
  3505                                  Stall:
  3506 00000E33 EBFE                    	jmp	short Stall			; crash the system nicely
  3507                                  
  3508                                  FatalRet:
  3509 00000E35 BA[1F07]                	mov	dx,FRETMES			; DX = ptr to msg
  3510                                  	;call	RDISPMSG
  3511                                  	; 12/01/2023	
  3512 00000E38 E8A005                  	call	RPrint	
  3513                                  FatalRet2:
  3514 00000E3B 803E[A202]00            	cmp	byte [PermCom],0		; if we get here and PermCom,
  3515 00000E40 7519                    	jne	short Ret_2e			; must be int_2e
  3516                                  
  3517                                  ;	Bugbug:	this is where we'd want to unhook int 2F, *if* we
  3518                                  ;	were a non-permanent COMMAND that had hooked it! (Just in 
  3519                                  ;	case we decide to do that.)
  3520                                  
  3521 00000E42 A1[3E02]                	mov	ax,[Parent]
  3522                                  	;mov	[16h],ax
  3523 00000E45 A31600                  	mov	[PDB.PARENT_PID],ax	; mov [cs:16h],ax
  3524 00000E48 A1[4002]                	mov	ax,[OldTerm]
  3525                                  	;mov	[0Ah],ax
  3526 00000E4B A30A00                  	mov	[PDB.EXIT],ax		; mov [cs:0Ah],ax
  3527 00000E4E A1[4202]                	mov	ax,[OldTerm+2]
  3528                                  	;mov	[0Ch],ax
  3529 00000E51 A30C00                  	mov	[PDB.EXIT+2],ax 	; mov [cs:0Ch],ax
  3530                                  	;mov	ax,4C00h
  3531                                  	;;mov	ax,(EXIT<<8) ; 4C00h	; return to lower level
  3532                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  3533 00000E54 B44C                    	mov	ah,4Ch ; EXIT
  3534 00000E56 A0[9A02]                	mov	al,[RetCode] 
  3535 00000E59 CD21                    	int	21h
  3536                                  Ret_2e:
  3537                                  ;SR;
  3538                                  ; We will ensure that ds = DATARES for all entries to this place
  3539                                  ;
  3540                                  
  3541                                  ;;	push	cs
  3542                                  ;;	pop	ds
  3543                                  ;;	assume	ds:resgroup,es:nothing,ss:nothing
  3544                                    	
  3545                                  ;	assume	ds:DATARES
  3546                                  
  3547                                  	;PUSH	CS
  3548                                  	;POP	DS
  3549                                  
  3550 00000E5B C706[A502]0000          	mov	word [SingleCom],0	; turn off SingleCom
  3551 00000E61 8E06[5804]              	mov	es,[Res_Tpa]
  3552                                  	;mov	ah,49h	; 12/01/2023
  3553 00000E65 B449                    	mov	ah,DEALLOC
  3554 00000E67 CD21                    	int	21h			; free up space used by transient
  3555 00000E69 8B1E[3C02]              	mov	bx,[Save_Pdb]
  3556 00000E6D B450                    	mov	ah,50h
  3557                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3558 00000E6F CD21                    	int	21h			; current process is user
  3559 00000E71 A1[9A02]                	mov	ax,[RetCode]
  3560 00000E74 803E[9902]00            	cmp	byte [ExtCom],0
  3561 00000E79 7502                    	jne	short GotECode
  3562 00000E7B 31C0                    	xor	ax,ax			; internals always return 0
  3563                                  GotECode:
  3564 00000E7D C606[9902]01            	mov	byte [ExtCom],1		; force external
  3565                                  
  3566                                  ;SR; This is actually returning to the caller. However, the old code had
  3567                                  ;ds = RESGROUP so I guess we can keep ds = DATARES for us.
  3568                                  ;Yes, int 2eh can corrupt all registers so we are ok.
  3569                                  
  3570                                  	; 12/01/2023
  3571 00000E82 FF2E[3802]              	jmp	far [Int_2e_Ret]	; "iret"
  3572                                  
  3573                                  ;***	Int_2e, magic command executer
  3574                                  
  3575                                  Int_2e:
  3576                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  3577                                  ;SR;
  3578                                  ;We are going to come here from the stub with the old ds and DATARES value
  3579                                  ;pushed on the stack in that order. Pick up this stuff off the stack
  3580                                  
  3581                                  	; 12/01/2023 - Retro DOS v4.0 COMMAND.COM
  3582                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0EB7h (CODERES:0177h)
  3583                                  
  3584 00000E86 1F                      	pop	ds			; ds = DATARES
  3585                                  	;assume	ds:DATARES
  3586 00000E87 58                      	pop	ax
  3587                                  ;	;pop	ds:OldDS 		; Save old value of ds
  3588                                  
  3589                                  	;pop	word [cs:Int_2e_Ret]
  3590                                  	;pop	word [cs:Int_2e_Ret+2]	; store return address
  3591                                  	;pop	ax			; chuck flags
  3592 00000E88 8F06[3802]              	pop	word [Int_2e_Ret]
  3593 00000E8C 8F06[3A02]              	pop	word [Int_2e_Ret+2]
  3594                                  	
  3595 00000E90 83C402                  	add	sp,2
  3596                                  
  3597                                  ;;	push	cs
  3598                                  ;;	pop	es
  3599                                  
  3600 00000E93 1E                      	push	ds
  3601 00000E94 07                      	pop	es			; es = DATARES
  3602                                  ;	;mov	ds,OldDS
  3603 00000E95 8ED8                    	mov	ds,ax
  3604                                  	;assume	ds:nothing		; ds = old value
  3605                                  
  3606 00000E97 BF8000                  	mov	di,80h
  3607 00000E9A B94000                  	mov	cx,64
  3608                                  ;	Bugbug:	cld
  3609 00000E9D F3A5                    	rep	movsw
  3610 00000E9F B451                    	mov	ah,51h
  3611                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3612 00000EA1 CD21                    	int	21h			; get user's header
  3613                                  	; 12/01/2023
  3614 00000EA3 26891E[3C02]            	mov	[es:Save_Pdb],bx
  3615                                  	;mov	[cs:Save_Pdb],bx
  3616 00000EA8 B450                    	mov	ah,50h
  3617                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3618                                  
  3619                                  ;;	mov	bx,cs
  3620                                  ;SR;
  3621                                  ;Set ds = DATARES because BadMemErr expects this
  3622                                  
  3623                                  	; 12/01/2023
  3624 00000EAA 06                      	push	es
  3625 00000EAB 1F                      	pop	ds
  3626                                  	;assume	ds:DATARES
  3627                                  
  3628 00000EAC 8CDB                    	mov	bx,ds			; es = our PSP now
  3629                                  	;mov	bx,cs
  3630                                  
  3631 00000EAE CD21                    	int	21h			; current process is me
  3632                                  	;mov	word [cs:SingleCom],81h
  3633                                  	;mov	byte [cs:ExtCom],1	; make sure this case forced
  3634                                  	; 12/01/2023
  3635 00000EB0 C706[A502]8100          	mov	word [SingleCom],81h
  3636 00000EB6 C606[9902]01            	mov	byte [ExtCom],1		; make sure this case forced
  3637                                  
  3638                                  ;SR;
  3639                                  ;We can enter LodCom directly after a command shell is terminated or we
  3640                                  ;can fall thru from above. When we enter directly from the stub, the stack
  3641                                  ;has the old ds value and the data seg value on the stack, so that ds can
  3642                                  ;be properly set. To fake this, we push dummy values here.
  3643                                  
  3644                                  	; 12/01/2023
  3645 00000EBB 1E                      	push	ds			; old value of ds
  3646 00000EBC 1E                      	push	ds			; data seg value, ds = DATARES
  3647                                  LodCom: 				; termination handler
  3648 00000EBD 1F                      	pop	ds			; ds = DATARES
  3649                                  	;assume	ds:DATARES
  3650 00000EBE 83C402                  	add	sp,2
  3651                                  ;	;pop	OldDS			; store old ds
  3652                                  	;cmp	ExtCom,0
  3653 00000EC1 803E[9902]00            	cmp	byte [ExtCom],0
  3654                                  	;cmp	byte [cs:ExtCom],0
  3655                                  	;jne	short @f	 	; internal cmd - memory allocated
  3656                                  	; 16/04/2023
  3657 00000EC6 7503                    	jne	short LodCom0 ; 24/09/2018
  3658 00000EC8 E98100                  	jmp	LodCom1
  3659                                  	;je	short LodCom1 ; 25/09/2018	
  3660                                  ;@@:
  3661                                  LodCom0: ; 24/09/2018
  3662 00000ECB BBFFFF                  	mov	bx,0FFFFh
  3663 00000ECE B448                    	mov	ah,48h	; 12/01/2023
  3664                                  	;mov	ah,ALLOC ; 48h	
  3665 00000ED0 CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  3666                                  				; BX = number of 16-byte paragraphs desired
  3667 00000ED2 E80A00                  	call	SetSize
  3668 00000ED5 83C020                  	add	ax,20h
  3669 00000ED8 39C3                    	cmp	bx,ax
  3670 00000EDA 730B                    	jnb	short MemOk		; > 512 byte buffer - good enough
  3671                                  BadMemErrJ:
  3672 00000EDC E939FF                  	jmp	BadMemErr		; not enough memory
  3673                                  
  3674                                  ;***	SetSize - get transient size in paragraphs
  3675                                  
  3676                                  SetSize:
  3677                                  	; 12/01/2023
  3678                                  	;;;mov	ax,offset TRANGROUP:TranSpaceEnd + 15
  3679                                  	;;mov	ax,98D4h		; MSDOS 5.0 COMMAND.COM
  3680                                  	; 05/06/2023
  3681                                  	;mov	ax,0AFA4h		; MSDOS 6.22 COMMAND.COM
  3682 00000EDF B8F8A5                  	mov	ax,TRANSPACEEND+15	; mov AX,4D6Bh ; MSDOS 3.3
  3683 00000EE2 B104                    	mov	cl,4
  3684 00000EE4 D3E8                    	shr	ax,cl
  3685 00000EE6 C3                      	retn
  3686                                  
  3687                                  MemOk:
  3688                                  	;assume	ds:DATARES		;we have set ds = DATARES 
  3689                                  
  3690 00000EE7 B448                    	mov	ah,48h
  3691                                  	;mov	ah,ALLOC  ; 48h
  3692 00000EE9 CD21                    	int	21h
  3693 00000EEB 72EF                    	jc	short BadMemErrJ	; memory arenas probably trashed
  3694                                  	;mov	byte [cs:ExtCom],0
  3695                                  	;mov	[cs:Res_Tpa],ax
  3696                                  	; 12/01/2023
  3697 00000EED C606[9902]00            	mov	byte [ExtCom],0		; flag not to alloc again
  3698 00000EF2 A3[5804]                	mov	[Res_Tpa],ax		; save current tpa segment
  3699                                  
  3700 00000EF5 2500F0                  	and	ax,0F000h
  3701 00000EF8 050010                  	add	ax,1000h		; round up to next 64k boundary
  3702 00000EFB 7212                    	jc	short Bad_Tpa		; memory wrap if carry set
  3703                                  
  3704                                  ;	Make sure that new boundary is within allocated range
  3705                                  
  3706                                  	;mov	dx,[cs:Res_Tpa]
  3707                                  	; 12/01/2023
  3708 00000EFD 8B16[5804]              	mov	dx,[Res_Tpa]
  3709 00000F01 01DA                    	add	dx,bx			; compute maximum address
  3710 00000F03 39C2                    	cmp	dx,ax			; is 64k address out of range?
  3711 00000F05 7608                    	jbe	short Bad_Tpa
  3712                                  
  3713                                  ;	Must have 64K of usable space.
  3714                                  
  3715 00000F07 29C2                    	sub	dx,ax			; compute the usable space
  3716 00000F09 81FA0010                	cmp	dx,1000h		; is space >= 64k ?
  3717 00000F0D 7303                    	jae	short LTpaSet
  3718                                  Bad_Tpa:
  3719                                  	;mov	ax,[cs:Res_Tpa]
  3720                                  	; 12/01/2023
  3721 00000F0F A1[5804]                	mov	ax,[Res_Tpa]
  3722                                  LTpaSet:
  3723                                  	;mov	[cs:LTPA],ax
  3724                                  	;mov	ax,[cs:Res_Tpa]
  3725                                  	; 12/01/2023
  3726 00000F12 A3[4C04]                	mov	[LTpa],ax		; usable tpa is 64k buffer aligned
  3727 00000F15 A1[5804]                	mov	ax,[Res_Tpa]		; actual tpa is buffer allocated
  3728 00000F18 01C3                    	add	bx,ax
  3729                                  	;mov	[cs:MemSiz],bx
  3730 00000F1A 891E[9502]              	mov	[MemSiz],bx
  3731 00000F1E E8BEFF                  	call	SetSize
  3732 00000F21 29C3                    	sub	bx,ax
  3733                                  
  3734                                  	; MSDOS 6.0
  3735                                  
  3736                                  ;M038; Start of changes
  3737                                  ;Changes for Novell RPL. These guys reserve memory for themselves by
  3738                                  ;reducing int 12h size and add this memory to the system at autoexec time by
  3739                                  ;running a program that changes arenas. This changes the largest block that
  3740                                  ;command.com gets and so changes the transient segment. So, command.com does
  3741                                  ;a checksum at the wrong address and thinks that the transient is destroyed
  3742                                  ;and tries to reload it. At this point, no Comspec is defined and so the
  3743                                  ;reload fails, hanging the system. To get around this we just copy the
  3744                                  ;transient from the previous address to the new address(if changed) and
  3745                                  ;then let command.com do the checksum. So, if the transient area is not
  3746                                  ;corrupted, there will not be any reload. In Novell's case, the transient
  3747                                  ;is not really corrupted and so this should work.
  3748                                  
  3749                                  	; 12/01/2023
  3750                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0F5Ah (CODERES:021Ah)
  3751                                  
  3752 00000F23 3B1E[8F02]              	cmp	bx,[TrnSeg]		; Segment still the same?
  3753 00000F27 7423                    	je	short LodCom1		; yes, dont copy
  3754                                  
  3755                                  ;Check if the new segment is above or below the current move. If the new
  3756                                  ;segment is above (i.e new block is larger than previous block), then we
  3757                                  ;have to move in the reverse direction
  3758                                  
  3759                                  	;;mov	cx,98C5h
  3760                                  	; 05/06/2023
  3761                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:106Ah (CODERES:021Ah)
  3762                                  	;mov	cx,0AF95h
  3763                                  	;;mov	cx,0AA9Ah ; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  3764 00000F29 B9E9A5                  	mov	cx,TRANSPACEEND		; cx = length to move
  3765 00000F2C 7707                    	ja	short mov_down		; new seg > old seg, reverse move
  3766 00000F2E 31F6                    	xor	si,si			; normal move
  3767 00000F30 89F7                    	mov	di,si
  3768 00000F32 FC                      	cld
  3769 00000F33 EB06                    	jmp	short copy_trans
  3770                                  mov_down:
  3771 00000F35 89CE                    	mov	si,cx			; reverse move, start from end
  3772 00000F37 4E                      	dec	si
  3773 00000F38 89F7                    	mov	di,si
  3774 00000F3A FD                      	std
  3775                                  copy_trans:
  3776 00000F3B 1E                      	push	ds
  3777 00000F3C 06                      	push	es
  3778 00000F3D 8EC3                    	mov	es,bx			; dest segment
  3779 00000F3F 8E1E[8F02]              	mov	ds,[TrnSeg]		; source segment
  3780                                  	;assume	ds:nothing
  3781                                  
  3782 00000F43 F3A4                    	rep	movsb			; copy transient
  3783 00000F45 FC                      	cld
  3784 00000F46 07                      	pop	es
  3785 00000F47 1F                      	pop	ds
  3786                                  	;assume	ds:DATARES
  3787                                  
  3788                                  ;M038; End of changes
  3789                                  
  3790                                  	;mov	[cs:TrnSeg],bx		; new location of transient
  3791                                  	; 12/01/2023
  3792 00000F48 891E[8F02]              	mov	[TrnSeg],bx
  3793                                  
  3794                                  LodCom1:
  3795                                  ;;	mov	ax,cs
  3796                                  ;;	mov	ss,ax
  3797                                  ;SR; At this point ds = DATARES which is where the stack is located
  3798                                  
  3799                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3800                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3801 00000F4C 8CD8                    	mov	ax,ds
  3802 00000F4E 8ED0                    	mov	ss,ax
  3803                                  	;assume	ss:DATARES
  3804                                  	;;;mov	sp,offset DATARES:RStack
  3805                                  	;;mov	sp,53Eh
  3806                                  	; 05/06/2023
  3807                                  	;;mov	sp,60Ah ; MSDOS 6.22 COMMAND.COM
  3808                                  	;mov	sp,637h ; PCDOS 7.1 COMMAND.COM ; 19/07/2024
  3809 00000F50 BC[2E05]                	mov	sp,RStack
  3810                                  
  3811                                  ;;	mov	ds,ax
  3812                                  
  3813                                  	;assume	ds:DATARES
  3814                                  	
  3815                                  	; MSDOS 3.3
  3816                                  	;mov	ax,cs
  3817                                  	;mov	ss,ax
  3818                                  	;mov	sp,RSTACK
  3819                                  	;mov	ds,ax
  3820                                  
  3821 00000F53 E88500                  	call	HeadFix			; close files, restore stdin, stdout
  3822 00000F56 31ED                    	xor	bp,bp			; flag command ok
  3823 00000F58 B8FFFF                  	mov	ax,-1
  3824 00000F5B 8706[A702]              	xchg	ax,[VerVal]
  3825 00000F5F 83F8FF                  	cmp	ax,-1
  3826 00000F62 7404                    	je	short NoSetVer
  3827 00000F64 B42E                    	mov	ah,2Eh
  3828                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh ; AL has correct value
  3829 00000F66 CD21                    	int	21h 		; DOS - SET VERIFY FLAG
  3830                                  				; DL = 00h, AL = 01h VERIFY on / 00h VERIFY off
  3831                                  NoSetVer:
  3832 00000F68 833E[A502]FF            	cmp	word [SingleCom],-1
  3833 00000F6D 7503                    	jne	short NoSng
  3834 00000F6F E9C9FE                  	jmp	FatalRet2		; we have finished the single command
  3835                                  NoSng:
  3836 00000F72 E88101                  	call	ChkSum			; check the transient
  3837                                  	;cmp	dx,[Sum]
  3838                                  	;je	short HavCom		; transient ok
  3839                                  
  3840                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3841                                  %if 0
  3842                                  	; 12/01/2023
  3843                                  	jz	short HavCom
  3844                                  
  3845                                  %else	; PCDOS 7.1 COMMAND.COM
  3846 00000F75 7505                    	jnz	short Bogus_Com
  3847 00000F77 E8A701                  	call	chk_transient
  3848 00000F7A 7417                    	jz	short HavCom
  3849                                  %endif
  3850                                  
  3851                                  Bogus_Com:
  3852 00000F7C C606[4802]01            	mov	byte [Loading],1	; flag DskErr routine
  3853 00000F81 E82801                  	call	LoadCom
  3854                                  ChkSame:
  3855 00000F84 E86F01                  	call	ChkSum
  3856                                  	;cmp	dx,[Sum]
  3857                                  	;je	short HavCom		; same command
  3858                                  
  3859                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3860                                  %if 0
  3861                                  	; 12/01/2023
  3862                                  	jz	short HavCom
  3863                                  
  3864                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3865                                  %else	; PCDOS 7.1 COMMAND.COM
  3866 00000F87 7505                    	jnz	short Also_Bogus
  3867 00000F89 E89501                  	call	chk_transient
  3868 00000F8C 7405                    	jz	short HavCom
  3869                                  %endif
  3870                                  Also_Bogus:
  3871 00000F8E E85D01                  	call	WrongCom
  3872 00000F91 EBF1                    	jmp	short ChkSame
  3873                                  
  3874                                  	; 12/01/2023
  3875                                  ;HavCom:
  3876                                  ;	; 25/09/2018
  3877                                  ;	mov     ax,(CHAR_OPER*256) ; 3700h
  3878                                  ;	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  3879                                  ;			; Return: AL = FFh unsupported subfunction
  3880                                  ;			; DL = current switch character
  3881                                  ;	mov     [RSWITCHAR],dl
  3882                                  ;	cmp     dl,'/'
  3883                                  ;	jnz     short USESLASH
  3884                                  ;	;mov	cl,'\'
  3885                                  ;	;mov	[RDIRCHAR],cl
  3886                                  ;	mov	byte [RDIRCHAR],'\'
  3887                                  ;USESLASH:
  3888                                  
  3889                                  HavCom:
  3890                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3891 00000F93 C606[4802]00            	mov	byte [Loading],0		; flag to DskErr
  3892                                  	;;;mov	si,offset DATARES:TranVars
  3893                                  	;;mov	si,453h		; MSDOS 5.0 COMMAND.COM
  3894                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  3895                                  	;mov	si,51Dh		; MSDOS 6.22 COMMAND.COM
  3896                                  	; 19/07/2024
  3897                                  	;mov	si,551h		; PCDOS 7.1 COMMAND.COM
  3898 00000F98 BE[4804]                	mov	si,TranVars
  3899                                  	;;;mov	di,offset TRANGROUP:HeadCall
  3900                                  	;;mov	di,8D75h	; MSDOS 5.0 COMMAND.COM
  3901                                  	; 05/06/2023
  3902                                  	;mov	di,0A303h	; MSDOS 6.22 COMMAND.COM
  3903                                  	; 19/07/2024
  3904                                  	;mov	di,0A082h	; PCDOS 7.1 COMMAND.COM
  3905 00000F9B BF[CF9B]                	mov	di,HEADCALL
  3906 00000F9E 8E06[8F02]              	mov	es,[TrnSeg]
  3907 00000FA2 FC                      	cld
  3908                                  	;;;mov	cx,467h		; MSDOS 5.0 COMMAND.COM	
  3909                                  	;;mov	cx,533h		; MSDOS 6.22 COMMAND.COM	
  3910                                  	;mov	cx,565h		; PCDOS 7.1 COMMAND.COM
  3911 00000FA3 B9[5C04]                	mov	cx,TranVarEnd
  3912 00000FA6 29F1                    	sub	cx,si
  3913 00000FA8 F3A4                    	rep	movsb			; transfer info to transient
  3914 00000FAA A1[9502]                	mov	ax,[MemSiz]
  3915 00000FAD A30200                  	mov	[PDB.BLOCK_LEN],ax ; mov [ds:2],ax ; adjust my own header
  3916                                  
  3917                                  ;***	TJmp - jump-off to transient
  3918                                  ;
  3919                                  ;	Public label so debugger can find this spot.
  3920                                  
  3921                                  TJmp:	; 12/01/2023
  3922 00000FB0 FF2E[8D02]              	jmp	far [Trans]		; jmp dword ptr Trans
  3923                                  
  3924                                  ;***	TRemCheck - far version of RemCheck for transient
  3925                                  
  3926                                  TRemCheck:
  3927                                  	; 12/01/2023
  3928 00000FB4 1F                      	pop	ds			; ds = DATARES
  3929 00000FB5 83C402                  	add	sp,2			; discard old value of ds
  3930                                  
  3931 00000FB8 E80100                  	call	RemCheck
  3932 00000FBB CB                      	retf
  3933                                  
  3934                                  ;***	RemCheck
  3935                                  ;
  3936                                  ;	ENTRY	AL = drive (0=default, 1=A, ...)
  3937                                  ;
  3938                                  ;	EXIT	ZR set if removeable media
  3939                                  ;		ZR clear if fixed media
  3940                                  ;
  3941                                  ;	USED	none
  3942                                  
  3943                                  	; 12/01/2023
  3944                                  RemCheck:
  3945 00000FBC 50                      	push	ax
  3946 00000FBD 53                      	push	bx
  3947 00000FBE 89C3                    	mov	bx,ax
  3948 00000FC0 B80844                  	mov	ax,4408h
  3949                                  	;mov	ax,(IOCTL<<8)+8 ; 4408h
  3950 00000FC3 CD21                    	int	21h		; DOS - 2+ - IOCTL -
  3951 00000FC5 7304                    	jnc	short rcCont		
  3952                                  
  3953                                  ;	If an error occurred, assume the media is non-removable.
  3954                                  ;	AX contains the non-zero error code from the int 21, so
  3955                                  ;	'or ax,ax; sets non-zero. This behavior makes network drives
  3956                                  ;	appear to be non-removable.				
  3957                                  					
  3958 00000FC7 09C0                    	or	ax,ax			
  3959 00000FC9 EB05                    	jmp	short ResRegs
  3960                                  rcCont:
  3961 00000FCB 83E001                  	and	ax,1
  3962 00000FCE F7D0                    	not	ax
  3963                                  ResRegs:
  3964 00000FD0 5B                      	pop	bx
  3965 00000FD1 58                      	pop	ax
  3966 00000FD2 C3                      	retn
  3967                                  
  3968                                  ;***	THeadFix
  3969                                  ;
  3970                                  ;	Far version of HeadFix, called from transient.
  3971                                  
  3972                                  THeadFix:
  3973                                  	; 12/01/2023
  3974 00000FD3 1F                      	pop	ds			; ds = DATARES
  3975 00000FD4 83C402                  	add	sp,2			; discard old ds value on stack
  3976                                  
  3977 00000FD7 E80100                  	call	HeadFix
  3978 00000FDA CB                      	retf
  3979                                  
  3980                                  ;***	HeadFix
  3981                                  
  3982                                  	; 12/01/2023
  3983                                  HeadFix:
  3984 00000FDB E85001                  	call	SetVect			; set vectors to our values
  3985                                  
  3986                                  ;	Clean up header
  3987                                  
  3988                                  ;	Bugbug:	optimize:
  3989                                  ;	mov	word ptr ds:Pdb_Jfn_Table,cx  instead of separate bytes
  3990                                  
  3991 00000FDE 31DB                    	xor	bx,bx			; BX = handle = 0
  3992 00000FE0 8B0E[9F02]              	mov	cx,[Io_Save]		; CX = original stdin, stdout
  3993                                  	;mov	dx,[18h] 
  3994 00000FE4 8B161800                	mov	dx,[PDB.JFN_TABLE]	; DX = current stdin, stdout
  3995 00000FE8 38D1                    	cmp	cl,dl
  3996 00000FEA 7407                    	je	short Chk1		; stdin matches
  3997                                  
  3998                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  3999                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4000                                  	mov	ah,3Eh
  4001                                  	;mov	ah,CLOSE  ; 3Eh
  4002                                  	int	21h			; close stdin
  4003                                  %else
  4004                                  	;mov	ah,3Eh
  4005                                  	;call	int21h
  4006                                  	; 19/07/2024
  4007 00000FEC E86E01                  	call	int21h_close
  4008                                  %endif
  4009                                  	;mov	[18h],cl
  4010 00000FEF 880E1800                	mov	[PDB.JFN_TABLE],cl	; restore stdin
  4011                                  Chk1:
  4012 00000FF3 43                      	inc	bx			; BX = handle = 1
  4013 00000FF4 38F5                    	cmp	ch,dh			
  4014 00000FF6 7407                    	je	short ChkOtherHand	; stdout matches
  4015                                  
  4016                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  4017                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4018                                  	mov	ah,3Eh
  4019                                  	;mov	ah,CLOSE  ; 3Eh
  4020                                  	int	21h			; close stdout
  4021                                  %else
  4022                                  	;mov	ah,3Eh
  4023                                  	;call	int21h
  4024                                  	; 19/07/2024
  4025 00000FF8 E86201                  	call	int21h_close
  4026                                  %endif
  4027                                  	;mov	[19h],ch
  4028 00000FFB 882E1900                	mov	[PDB.JFN_TABLE+1],ch	; restore stdout
  4029                                  ChkOtherHand:
  4030 00000FFF 83C304                  	add	bx,4			; skip handles 2,3,4
  4031 00001002 B90F00                  	mov	cx,FILPERPROC-5	; 15	; CX = # handles to close
  4032                                  					; (handles 0-4 already done)
  4033                                  CloseLoop:
  4034                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  4035                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4036                                  	mov	ah,3Eh
  4037                                  	;mov	ah,CLOSE  ; 3Eh
  4038                                  	int	21h			; close file
  4039                                  %else
  4040                                  	;cmp	byte [bx+18h],0FFh
  4041 00001005 807F18FF                	cmp	byte [bx+PDB.JFN_TABLE],0FFh
  4042 00001009 7403                    	je	short CloseLoopNxt
  4043                                  
  4044                                  	;mov	ah,3Eh
  4045                                  	;call	int21h
  4046                                  	; 19/07/2024
  4047 0000100B E84F01                  	call	int21h_close
  4048                                  CloseLoopNxt:
  4049                                  %endif
  4050 0000100E 43                      	inc	bx			; BX = next handle
  4051 0000100F E2F4                    	loop	CloseLoop
  4052                                  
  4053                                  	; MSDOS 6.0
  4054                                  ;	Bugbug:	since this is for transient code, move it there
  4055                                  	
  4056                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4057                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:103Dh)
  4058                                  	; 19/07/2024
  4059                                  	; (PCDOS 7.1 COMMAND.COM - RESGROUP:1119h)
  4060                                  
  4061                                  ;	M012: remove this CS -> DS. Must've been missed during
  4062                                  ;	purification.
  4063                                  ;;	push	ds			; save data segment
  4064                                  ;;	push	cs			; get local segment into DS
  4065                                  ;;	pop	ds			;
  4066 00001011 803E[C002]FF            	cmp	byte [Append_Flag],-1	; do we need to reset APPEND?
  4067 00001016 750E                    	jne	short Append_Fix_End	; no - just exit
  4068 00001018 B807B7                  	mov	ax,0B707h
  4069                                  	;mov	ax,AppendSetState	; set the state of Append
  4070 0000101B 8B1E[BE02]              	mov	bx,[Append_State] 	; back to the original state
  4071 0000101F CD2F                    	int	2Fh			;
  4072 00001021 C606[C002]00            	mov	byte [Append_Flag],0	; set append flag to invalid
  4073                                  Append_Fix_End: 			;
  4074                                  ;;	pop	ds			; get data segment back
  4075 00001026 C3                      	retn
  4076                                  
  4077                                  	; MSDOS 3.3
  4078                                  	;retn
  4079                                  
  4080                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4081                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:112Fh
  4082                                  
  4083                                  ;***	SavHand - save current program's stdin/out & set to our stderr
  4084                                  ;
  4085                                  ;	ENTRY	nothing
  4086                                  ;
  4087                                  ;	EXIT	nothing
  4088                                  ;
  4089                                  ;	USED	flags
  4090                                  ;
  4091                                  ;	EFFECTS
  4092                                  ;	  Handle01 = current program's stdin,stdout JFN entries
  4093                                  ;	  current program's stdin,stdout set to our stderr
  4094                                  ;
  4095                                  
  4096                                  ;SR;
  4097                                  ; Changed ds = DATARES. We need it to access our JFN_Table
  4098                                  ; Called from ContC ( ds = DATARES ) and DskErr ( ds = DATARES ).
  4099                                  
  4100                                  SavHand:
  4101                                  	;assume	ds:DATARES,es:NOTHING,ss:NOTHING
  4102                                  
  4103                                  	; 12/01/2023
  4104                                  	;push	ds ; MSDOS 3.3
  4105                                  
  4106 00001027 53                      	push	bx			;preserve registers
  4107 00001028 50                      	push	ax
  4108                                  	; 12/01/2023
  4109 00001029 06                      	push	es
  4110 0000102A 1E                      	push	ds			; save DATARES value
  4111                                  
  4112 0000102B B451                    	mov	ah,51h
  4113                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  4114                                  
  4115                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  4116                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4117                                  	int	21h			; BX = user's header seg addr
  4118                                  %else
  4119 0000102D E82F01                  	call	int21h
  4120                                  %endif
  4121 00001030 8EDB                    	mov	ds,bx			; DS = user's header seg addr
  4122                                  	;lds	bx,[34h]	
  4123 00001032 C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to JFN table
  4124 00001036 8B07                    	mov	ax,[bx]			; AX = stdin,stdout JFN's
  4125                                  	; 12/01/2023
  4126 00001038 07                      	pop	es			; es = DATARES
  4127 00001039 06                      	push	es			; save it back on stack
  4128 0000103A 26A3[4602]              	mov	[es:Handle01],ax	; save user's stdin, stdout
  4129                                  	;mov	[cs:HANDLE01],ax
  4130                                  
  4131                                  ;SR;
  4132                                  ; Use es to address Handle01 & our JFN_Table
  4133                                  
  4134                                  	; 12/01/2023
  4135                                  	;mov	al,[es:1Ah]
  4136 0000103E 26A01A00                	mov	al,[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr
  4137                                  	;mov	al,[cs:PDB.JFN_TABLE+2] ; mov al,[cs:1Ah]
  4138 00001042 88C4                    	mov	ah,al			; AH = COMMAND stderr
  4139 00001044 8907                    	mov	[bx],ax			; set user's stdin/out to our stderr
  4140                                  	; 12/01/2023
  4141 00001046 1F                      	pop	ds			; restore registers
  4142 00001047 07                      	pop	es
  4143 00001048 58                      	pop	ax
  4144 00001049 5B                      	pop	bx
  4145                                  	;pop	ds ; MSDOS 3.3
  4146 0000104A C3                      	retn
  4147                                  
  4148                                  	;assume	ds:DATARES
  4149                                  GetComDsk2:
  4150 0000104B E81F00                  	call	GetComDsk
  4151 0000104E E9FBFE                  	jmp	LodCom1			; memory already allocated
  4152                                  
  4153                                  RestHand:
  4154 00001051 1E                      	push	ds
  4155 00001052 53                      	push	bx			; restore stdin, stdout to user
  4156 00001053 50                      	push	ax
  4157                                  	; 12/01/2023
  4158 00001054 B451                    	mov	ah,51h
  4159                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  4160 00001056 CD21                    	int	21h			; point to user's header
  4161 00001058 A1[4602]                	mov	ax,[Handle01]
  4162 0000105B 8EDB                    	mov	ds,bx
  4163                                  	;assume ds:NOTHING
  4164                                  	;lds	bx,[34h] 
  4165 0000105D C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to jfn table
  4166 00001061 8907                    	mov	[bx],ax			; stuff his old 0 and 1
  4167 00001063 58                      	pop	ax
  4168 00001064 5B                      	pop	bx
  4169 00001065 1F                      	pop	ds
  4170 00001066 C3                      	retn
  4171                                  
  4172                                  	;assume ds:DATARES,ss:DATARES
  4173                                  Hopeless:
  4174 00001067 BA[DC05]                	mov	dx,COMBAD
  4175 0000106A E9AEFD                  	jmp	FatalC
  4176                                  
  4177                                  GetComDsk:
  4178 0000106D A0[9402]                	mov	al,[ComDrv]
  4179 00001070 E849FF                  	call	RemCheck
  4180 00001073 75F2                    	jnz	short Hopeless		; non-removable media
  4181                                  GetComDsk3:
  4182 00001075 81FA[DC05]              	cmp	dx,COMBAD		; cmp dx,offset DATARES:ComBad
  4183 00001079 7503                    	jne	short GetComDsk4
  4184                                  	;;mov	dx,offset DATARES:ComBad ; DX = ptr to msg
  4185                                  	; 12/01/2023
  4186                                  	;;mov	dx,COMBAD ; (MSDOS 5.0 COMMAND.COM - RESGROUP:10A6h)
  4187                                  	; 05/06/2023
  4188                                  	;mov	dx,COMBAD ; (MSDOS 6.22 COMMAND.COM - RESGROUP:11B6h)
  4189                                  	;invoke	RPrint			; say COMMAND is invalid
  4190 0000107B E85D03                  	call	RPrint
  4191                                  	;call	RDISPMSG
  4192                                  
  4193                                  GetComDsk4:
  4194                                  
  4195                                  ;	Bugbug:	there's always a drive here? No need to check?
  4196                                  
  4197 0000107E 803E[2F02]00            	cmp	byte [PutBackDrv],0	; is there a drive in the comspec?
  4198 00001083 750A                    	jne	short Users_Drive	; yes - use it
  4199 00001085 B419                    	mov	ah,19h
  4200                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h ; use default drive
  4201                                  
  4202                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  4203                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4204                                  	int	21h			; BX = user's header seg addr
  4205                                  %else
  4206 00001087 E8D500                  	call	int21h
  4207                                  %endif
  4208 0000108A 0441                    	add	al,"A"                  ; convert to ascii
  4209 0000108C A2[2F02]                	mov	[PutBackDrv],al		; put in message to print out
  4210                                  
  4211                                  Users_Drive:
  4212                                  	; 12/01/2023
  4213                                  	; MSDOS 6.0
  4214 0000108F BA[F205]                	mov	dx,PUTBACKMSG		; prompt for diskette
  4215                                  	;mov	si,offset DATARES:PutBackSubst
  4216                                  	;invoke	RPrint
  4217 00001092 BE[2902]                	mov	si,PutBackSubst		; containing COMMAND
  4218 00001095 E84303                  	call	RPrint
  4219                                  	;mov	dx,offset DATARES:Prompt
  4220                                  	;invoke	RPrint
  4221 00001098 BA[1406]                	mov	dx,PROMPT		; "Press any key"
  4222 0000109B E83D03                  	call	RPrint
  4223                                  
  4224                                  	; MSDOS 3.3
  4225                                  	;mov	dx,PUTBACKMSG		; prompt for diskette
  4226                                  	;call	RDISPMSG
  4227                                  	;mov	dx,[PUTBACKSUBSTPTR]
  4228                                  	;mov	si,[COMSPEC_END]
  4229                                  	;mov	byte [si+1],'$'
  4230                                  	;call	RDISPMSG
  4231                                  	;mov	byte [si+1],0
  4232                                  	;mov	dx,PROMPT
  4233                                  	;call	RDISPMSG
  4234                                  
  4235                                  	;call	GetRawFlushedByte
  4236                                  	;retn
  4237                                  	; 12/01/2023
  4238                                  	;jmp	short GetRawFlushedByte
  4239                                  
  4240                                  ;***	GetRawFlushedByte - flush world and get raw input
  4241                                  
  4242                                  GetRawFlushedByte:
  4243                                  	; 12/01/2023
  4244 0000109E B8070C                  	mov	ax,0C07h
  4245                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT ; 0C07h
  4246 000010A1 CD21                    	int	21h			; get char without testing or echo
  4247 000010A3 B8000C                  	mov	ax,0C00h
  4248                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + 0 ; 0C00h
  4249 000010A6 CD21                    	int	21h
  4250                                  
  4251                                  ;	Bugbug:	get rid of this return and the following retz.
  4252                                  
  4253                                  LoadCom_retn:
  4254 000010A8 C3                      	retn
  4255                                  
  4256                                  	; 21/04/2023
  4257                                  TryDoOpen:
  4258 000010A9 E8C1FF                  	call	GetComDsk
  4259                                  	;jmp	short LoadCom
  4260                                  
  4261                                  ;***	LoadCom - load in transient
  4262                                  
  4263                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4264                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:10DAh - CODERES:039Ah)
  4265                                  
  4266                                  LoadCom:
  4267                                  	;assume	ds:DATARES
  4268                                  	
  4269 000010AC 45                      	inc	bp				; flag command read
  4270                                  
  4271 000010AD BA[4B02]                	mov	dx,ComSpec
  4272 000010B0 B8003D                  	mov	ax,3D00h
  4273                                  	;mov	ax,OPEN<<8	; 3D00h
  4274 000010B3 CD21                    	int	21h				; open command.com
  4275 000010B5 730B                    	jnc	short ReadCom
  4276                                  	;cmp	ax,4
  4277 000010B7 83F804                  	cmp	ax,ERROR_TOO_MANY_OPEN_FILES
  4278 000010BA 75ED                    	jnz	short TryDoOpen
  4279 000010BC BA[9E06]                	mov	dx,NOHANDMES
  4280 000010BF E959FD                  	jmp	FatalC				; will never find a handle
  4281                                  
  4282                                  	; 21/04/2023
  4283                                  ;TryDoOpen:
  4284                                  	;call	GetComDsk
  4285                                  	;jmp	short LoadCom
  4286                                  
  4287                                  ReadCom:
  4288 000010C2 89C3                    	mov	bx,ax				; BX = handle
  4289                                  	;mov	dx,offset RESGROUP:TranStart
  4290                                  	; 05/06/2023
  4291                                  	;mov	dx,26E0h ; MSDOS 6.22 COMMAND.COM
  4292                                  	; 19/07/2024
  4293                                  	;mov	dx,2980h ; PCDOS 7.1 COMMAND.COM
  4294 000010C4 BAE027                  	mov	dx,TRANSTART
  4295 000010C7 31C9                    	xor	cx,cx				; CX:DX = seek loc
  4296 000010C9 B80042                  	mov	ax,4200h
  4297                                  	;mov	ax,LSEEK<<8	; 4200h
  4298 000010CC CD21                    	int	21h
  4299 000010CE 7210                    	jc	short WrongCom1
  4300                                  	; 12/01/2023
  4301                                  	;;mov	cx,offset TRANGROUP:TranSpaceEnd - 100h
  4302                                  	;mov	cx,97C5h		 ; MSDOS 5.0 COMMAND.COM
  4303                                  	; 05/06/2023
  4304                                  	;mov	cx,0AE95h		 ; MSDOS 6.22 COMMAND.COM
  4305                                  	; 19/07/2024
  4306                                  	;mov	cx,0A99Ah ; PCDOS 7.1 COMMAND.COM
  4307 000010D0 B9E9A4                  	mov	cx,TRANSPACEEND-100h ; 4C5Ch (for original MSDOS 3.3!)
  4308 000010D3 1E                      	push	ds
  4309 000010D4 8E1E[8F02]              	mov	ds,[TrnSeg]
  4310                                  	;assume	ds:NOTHING
  4311 000010D8 BA0001                  	mov	dx,100h
  4312 000010DB B43F                    	mov	ah,3Fh
  4313                                  	;mov	ah,READ	; 3Fh
  4314 000010DD CD21                    	int     21h	; DOS - 2+ - READ FROM FILE WITH HANDLE
  4315                                  			; BX = file handle, CX = number of bytes to read
  4316                                  			; DS:DX -> buffer
  4317 000010DF 1F                      	pop	ds
  4318                                  	;assume	ds:DATARES
  4319                                  WrongCom1:
  4320 000010E0 9C                      	pushf
  4321 000010E1 50                      	push	ax
  4322 000010E2 B43E                    	mov	ah,3Eh
  4323                                  	;mov	ah,CLOSE ; 3Eh
  4324 000010E4 CD21                    	int	21h			; close command.com
  4325 000010E6 58                      	pop	ax
  4326 000010E7 9D                      	popf
  4327 000010E8 7204                    	jc	short WrongCom		; error on read
  4328 000010EA 39C8                    	cmp	ax,cx
  4329                                  	;retz				; size matched
  4330 000010EC 74BA                    	jz	short LoadCom_retn
  4331                                  WrongCom:
  4332 000010EE BA[DC05]                	mov	dx,COMBAD
  4333 000010F1 E879FF                  	call	GetComDsk
  4334 000010F4 EBB6                    	jmp	short LoadCom		; try again
  4335                                  
  4336                                  ;***	ChkSum - compute transient checksum
  4337                                  
  4338                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4339                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1129h
  4340                                  	
  4341                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4342                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1239h
  4343                                  
  4344                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4345                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1207h
  4346                                  ChkSum:
  4347 000010F6 1E                      	push	ds
  4348 000010F7 8E1E[8F02]              	mov	ds,[TrnSeg]
  4349 000010FB BE0001                  	mov	si,100h
  4350                                  	;;;mov	cx,offset TRANGROUP:TranDataEnd - 100h
  4351                                  	;;mov	cx,87C2h ; MSDOS 5.0
  4352                                  	; 05/06/2023
  4353                                  	;mov	cx,9D53h ; MSDOS 6.22
  4354                                  	; 19/07/2024
  4355                                  	;mov	cx,9B47h ; PCDOS 7.1 COMMAND.COM
  4356 000010FE B9[1F96]                	mov	cx,TRANDATAEND-100h ; 3E44h (for original MSDOS 3.3!)
  4357                                  Check_Sum:
  4358 00001101 FC                      	cld
  4359 00001102 D1E9                    	shr	cx,1
  4360 00001104 31D2                    	xor	dx,dx
  4361                                  
  4362                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4363                                  %if 1  ; PCDOS 7.1 COMMAND.COM
  4364 00001106 C606[428F]FF            	mov	byte [msg_disp_class],0FFh
  4365 0000110B 8916[448F]              	mov     [extend_buf_ptr],dx ; 0
  4366 0000110F 8816[468F]              	mov     [extend_buf_sub],dl ; 0
  4367                                  %endif	
  4368                                  
  4369                                  Chk:
  4370 00001113 AD                      	lodsw
  4371 00001114 01C2                    	add	dx,ax
  4372 00001116 83D200                  	adc	dx,0
  4373 00001119 E2F8                    	loop	Chk
  4374                                  
  4375                                  	; 04/05/2023
  4376 0000111B 1F                      	pop	ds
  4377                                  
  4378                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4379 0000111C 3B16[9702]              	cmp	dx,[Sum]
  4380                                  
  4381                                  	;pop	ds ; 04/05/2023
  4382 00001120 C3                      	retn
  4383                                  
  4384                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4385                                  ; ---------------------------------------
  4386                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:122Eh
  4387                                  %if 1
  4388                                  chk_transient:	; check transient portion is valid or not
  4389 00001121 1E                      	push    ds
  4390 00001122 8E1E[8F02]              	mov     ds,[TrnSeg]
  4391 00001126 813E[0401]9090          	cmp	word [TCOMMAND],9090h ; nop, nop
  4392 0000112C 1F                      	pop     ds
  4393 0000112D C3                      	retn
  4394                                  %endif
  4395                                  ; ---------------------------------------
  4396                                  
  4397                                  ;***	SetVect - set interrupt vectors
  4398                                  
  4399                                  SetVect:
  4400                                  
  4401                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4402                                  ; PCDOS 7.1 COMMAND.COM
  4403                                  %if 0
  4404                                  	;mov	dx,offset DATARES:LodCom_Trap 
  4405                                  	; 12/01/2023
  4406                                  	mov	dx,LodCom_Trap
  4407                                  	;mov	dx,LODCOM ; MSDOS 3.3
  4408                                  	mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  4409                                  	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4410                                  
  4411                                  	mov	ax,2522h
  4412                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8) | 22h  ; 2522h
  4413                                  	int	21h
  4414                                  	;mov	dx,offset DATARES:Ctrlc_Trap
  4415                                  	mov	dx,Ctrlc_Trap
  4416                                  	;mov	dx,CONTC ; MSDOS 3.3
  4417                                  	inc	al	; 23h
  4418                                  	int	21h
  4419                                  	;mov	dx,offset DATARES:CritErr_Trap
  4420                                  	mov	dx,CritErr_Trap
  4421                                  	;mov	dx,CRITERR ; MSDOS 3.3
  4422                                  	inc	al	; 24h
  4423                                  	int	21h
  4424                                  	retn
  4425                                  %else
  4426                                  	; PCDOS 7.1 COMMAND.COM
  4427                                  	;mov	dx,LodCom_Trap
  4428                                  	;mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  4429                                  	;mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4430                                  
  4431                                  	;push	es
  4432                                  	;push	bx
  4433                                  	;xor	bx,bx
  4434                                  	;mov	es,bx
  4435                                  	;mov 	bl,88h		; INT 22h vector
  4436                                  	;cli
  4437                                  	;mov	[es:bx],dx
  4438                                  	;mov	[es:bx+2],ds
  4439                                  	;mov	dx,Ctrlc_Trap
  4440                                  	;mov	bl,8Ch		; INT 23h vector
  4441                                  	;mov	[es:bx],dx
  4442                                  	;mov	[es:bx+2],ds
  4443                                  	;mov	dx,CritErr_Trap
  4444                                  	;mov	bl,90h		; INT 24h vector
  4445                                  	;mov 	[es:bx],dx
  4446                                  	;mov	[es:bx+2],ds
  4447                                  	;sti
  4448                                  	;pop	bx
  4449                                  	;pop	es
  4450                                  	;retn
  4451                                  
  4452                                  	; 19/07/2024
  4453                                  	; Retro DOS v5.0 COMMAND.COM
  4454                                  
  4455 0000112E 06                      	push	es
  4456                                  	;push	di
  4457 0000112F 31FF                    	xor	di,di
  4458 00001131 8EC7                    	mov	es,di
  4459 00001133 BF8800                  	mov	di,88h
  4460 00001136 1E                      	push	ds
  4461 00001137 1E                      	push	ds
  4462 00001138 1E                      	push	ds
  4463 00001139 B8[E000]                	mov	ax,LodCom_Trap
  4464 0000113C A30A00                  	mov	[PDB.EXIT],ax	; mov ds:0Ah,ax
  4465 0000113F 8C1E0C00                	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4466 00001143 FA                      	cli	
  4467 00001144 AB                      	stosw
  4468 00001145 58                      	pop	ax	; segment (ds)
  4469 00001146 AB                      	stosw
  4470 00001147 B8[AC00]                	mov	ax,Ctrlc_Trap
  4471 0000114A AB                      	stosw
  4472 0000114B 58                      	pop	ax	; segment (ds)
  4473 0000114C AB                      	stosw
  4474 0000114D B8[B700]                	mov	ax,CritErr_Trap
  4475 00001150 AB                      	stosw
  4476 00001151 58                      	pop	ax	; segment (ds)
  4477 00001152 AB                      	stosw
  4478 00001153 FB                      	sti
  4479                                  	;pop	di
  4480 00001154 07                      	pop	es
  4481 00001155 C3                      	retn
  4482                                  %endif
  4483                                  
  4484                                  ; ----------------------
  4485                                  	; MSDOS 6.0
  4486                                  ;;SR;
  4487                                  ;We have this to take care of the extra values pushed on the stack by
  4488                                  ;the stub before jumping to LodCom1. We set up ds here and then jump to
  4489                                  ;Lodcom1
  4490                                  
  4491                                  ;public	TrnLodCom1
  4492                                  	; 12/01/2023
  4493                                  TrnLodCom1:
  4494 00001156 1F                      	pop	ds			; ds = DATARES
  4495 00001157 83C402                  	add	sp,2
  4496                                  ;	pop	ds:OldDS
  4497 0000115A E9EFFD                  	jmp	LodCom1
  4498                                  ; ----------------------
  4499                                  
  4500                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4501                                  ; ---------------------------------------
  4502                                  %if 1	; PCDOS 7.1 COMMAND.COM
  4503                                  int21h_close:
  4504 0000115D B43E                    	mov	ah,3Eh ; CLOSE file
  4505                                  int21h:
  4506                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1272h
  4507 0000115F 06                      	push	es
  4508 00001160 53                      	push	bx
  4509 00001161 31DB                    	xor	bx,bx
  4510 00001163 8EC3                    	mov	es,bx ; 0
  4511 00001165 5B                      	pop	bx
  4512 00001166 9C                      	pushf			; Int 21h simulation (ES=0)
  4513 00001167 FA                      	cli
  4514                                  	;call	dword ptr es:84h
  4515 00001168 26FF1E8400              	call	far [es:84h]	; INT 21h handler
  4516 0000116D 07                      	pop	es
  4517 0000116E C3                      	retn
  4518                                  %endif
  4519                                  ; ---------------------------------------
  4520                                  
  4521                                  ;=============================================================================
  4522                                  ; RUCODE.ASM, MSDOS 6.0, 1991
  4523                                  ;=============================================================================
  4524                                  ; 22/09/2018 - Retro DOS v3.0
  4525                                  
  4526                                  ;	title	Localizable code for resident COMMAND
  4527                                  
  4528                                  	;assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  4529                                  
  4530                                  ; ----------------------------------------------------------------------------
  4531                                  ;***	AskEnd - ask user to confirm batch file termination
  4532                                  ;
  4533                                  ;	Confirm with user before freeing batch ...
  4534                                  ;
  4535                                  ;	ENTRY	nothing
  4536                                  ;
  4537                                  ;	EXIT	CY = set if batch termination is confirmed
  4538                                  ;
  4539                                  ;		CY = clear if batch should continue
  4540                                  ;
  4541                                  ;	USED	AX,DX,...
  4542                                  ;
  4543                                  ;	Bugbug:	move this to transient, copy to batch segment.
  4544                                  ;	Bugbug:	or move it to command1 1st.
  4545                                  ;
  4546                                  ;	Bugbug: No_Char and Yes_Char should be constants.
  4547                                  ; ----------------------------------------------------------------------------
  4548                                  
  4549                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4550                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1169h (CODERES:0429h)
  4551                                  
  4552                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4553                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1279h (CODERES:0429h)
  4554                                  
  4555                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4556                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1289h
  4557                                  AskEnd:
  4558                                  	;assume	ds:DATARES
  4559                                  
  4560 0000116F BA[3606]                	mov	dx,ENDBATMES			; DX = message #
  4561 00001172 E86602                  	call	RPrint
  4562                                  	;call	RDISPMSG  ; MSDOS 3.3
  4563 00001175 B8010C                  	mov	ax,0C01h
  4564                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT  ;0C01h
  4565 00001178 CD21                    	int     21h             ; DOS - CLEAR KEYBOARD BUFFER
  4566                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
  4567 0000117A E8F702                  	call	CharToUpper			; change to upper case
  4568 0000117D 3A06[3D05]              	cmp	al,[NO_CHAR]
  4569 00001181 7407                    	je	short aeRet			; answer is no (CY is clear)
  4570 00001183 3A06[3C05]              	cmp	al,[YES_CHAR]
  4571 00001187 75E6                    	jne	short AskEnd			; invalid response, try again
  4572 00001189 F9                      	stc					; answer is yes
  4573                                  aeRet:	
  4574 0000118A C3                      	retn
  4575                                  
  4576                                  ; ----------------------------------------------------------------------------
  4577                                  ;***	DskErr - critical error handler
  4578                                  ;
  4579                                  ;	Default critical error handler unless user intercepts int 24h.
  4580                                  ;
  4581                                  ;	ENTRY	int 24h
  4582                                  ;
  4583                                  ;	EXIT
  4584                                  ;
  4585                                  ;	USED
  4586                                  ;
  4587                                  ;	EFFECTS
  4588                                  ; ----------------------------------------------------------------------------
  4589                                  
  4590                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4591                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1185h (CODERES:0445h)
  4592                                  
  4593                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4594                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:12A5h
  4595                                  
  4596                                  ;SR; 
  4597                                  ;The stub is going to push the old ds value and the resident data segment
  4598                                  ;onto the stack in that order. Get it off the stack
  4599                                  
  4600                                  ;DskErr	proc	far
  4601                                  DSKERR:
  4602                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  4603                                  	; 12/01/2023
  4604 0000118B 1F                      	pop	ds			; ds = DATARES
  4605                                  	;assume ds:DATARES
  4606 0000118C 8F06[2E05]              	pop	word [OldDS]		; save old ds value
  4607                                  
  4608                                  ;CRITERR: ; MSDOS 3.3
  4609 00001190 FB                      	sti
  4610                                  	; 12/01/2023
  4611                                  	;push	ds ; 25/09/2018
  4612 00001191 06                      	push	es
  4613 00001192 56                      	push	si
  4614 00001193 51                      	push	cx
  4615 00001194 57                      	push	di
  4616 00001195 51                      	push	cx
  4617 00001196 50                      	push	ax
  4618                                  
  4619 00001197 1E                      	push	ds			;save our data segment
  4620                                  	;push	cs ; 25/09/2018
  4621 00001198 07                      	pop	es			;es = DATARES
  4622                                  
  4623 00001199 8EDD                    	mov	ds,bp
  4624                                  	;assume	ds:nothing
  4625                                  
  4626                                  	;mov	ax,[si].SDEVATT
  4627 0000119B 8B4404                  	mov	ax,[si+SYSDEV.ATT] ; mov ax,[si+4]	
  4628 0000119E 268826[2502]            	mov	[es:CDevAt],ah
  4629                                  
  4630                                  	;push	cs
  4631                                  	;pop	es
  4632                                  
  4633 000011A3 BF[1802]                	mov	di,DevName
  4634 000011A6 B90800                  	mov	cx,8
  4635                                  	;add	si,SDEVNAME  ; add si,10
  4636 000011A9 83C60A                  	add	si,SYSDEV.NAME	; save device name (even for block device)
  4637                                  				
  4638 000011AC FC                      	cld
  4639 000011AD F3A4                    	rep	movsb
  4640 000011AF 58                      	pop	ax
  4641 000011B0 59                      	pop	cx
  4642 000011B1 5F                      	pop	di
  4643                                  
  4644                                  ;	Stack still contains DS and ES.
  4645                                  
  4646                                  ;SR;
  4647                                  ;We need ds = DATARES for SavHand
  4648                                  
  4649                                  	 ;12/01/2023
  4650 000011B2 06                      	push	es
  4651 000011B3 1F                      	pop	ds
  4652                                  	;assume	ds:DATARES
  4653                                  
  4654                                  	;invoke	SavHand		; save user's stdin/out, set to our stderr
  4655 000011B4 E870FE                  	call	SavHand
  4656                                  
  4657                                  	; 12/01/2023
  4658                                  	; 25/09/2018
  4659                                  	;;push	cs
  4660                                  	;push	es
  4661                                  	;pop	ds		; set up local data segment
  4662                                  	;assume	ds:resgroup
  4663                                  
  4664 000011B7 52                      	push	dx
  4665 000011B8 E81D02                  	call	crlf
  4666 000011BB 5A                      	pop	dx
  4667                                  
  4668                                  ;	Bugbug:	rename Crit_Err_Info to CritErrAH?
  4669                                  
  4670 000011BC 8826[9C02]              	mov	[Crit_Err_Info],ah	; save critical error flags
  4671                                  
  4672                                  ;	Compute and save ASCII drive letter (nonsense for char devices)
  4673                                  
  4674 000011C0 0441                    	add	al,'A'
  4675 000011C2 A2[0502]                	mov	[DrvLet],al
  4676                                  
  4677                                  ;	Bugbug:	These labels are awful. Change, especially 'NoHardE'.
  4678                                  
  4679 000011C5 F6C480                  	test	ah,80h
  4680 000011C8 740A                    	jz	short NoHardE		; it's a disk-device error
  4681 000011CA F606[2502]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4682 000011CF 7503                    	jnz	short NoHardE		; it's a character device
  4683 000011D1 E9F701                  	jmp	FatErr			; it's a FAT error
  4684                                  
  4685                                  NoHardE:
  4686 000011D4 BE[5E05]                	mov	si,MREAD		; SI = "read" msg #
  4687 000011D7 F6C401                  	test	ah,1
  4688 000011DA 7403                    	jz	short SavMes		; it's a read error
  4689 000011DC BE[6705]                	mov	si,MWRITE		; SI = "write" msg #
  4690                                  SavMes:
  4691 000011DF 893E[5C04]              	mov	[OldErrNo],di		; save critical error code
  4692                                  
  4693                                  ;	Bugbug:	don't need to save/restore all here?
  4694                                  
  4695 000011E3 06                      	push	es
  4696                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4697                                  	;push	ds			; GetExtendedError likes to STOMP
  4698                                  	; 12/01/2023
  4699                                  	; (all registers are changed -in dos service- except bp) *
  4700                                  	;push	bp
  4701                                  	; 19/07/2024
  4702                                  	;push	si
  4703                                  	;push	dx
  4704 000011E4 51                      	push	cx
  4705 000011E5 53                      	push	bx
  4706                                  	; 05/06/2023
  4707 000011E6 B459                    	mov	ah,59h ; *
  4708                                  	;mov	ah,GetExtendedError ; 59h ; get extended error info
  4709 000011E8 CD21                    	int	21h
  4710 000011EA 5B                      	pop	bx
  4711 000011EB 59                      	pop	cx
  4712                                  	; 19/07/2024
  4713                                  	;pop	dx
  4714                                  	;pop	si
  4715                                  	; 12/01/2023
  4716                                  	;pop	bp
  4717                                  	; 19/07/2024
  4718                                  	;pop	ds
  4719 000011EC 893E[3302]              	mov	[NeedVol],di		; save possible ptr to volume label
  4720 000011F0 8C06[3502]              	mov	[NeedVol+2],es
  4721 000011F4 07                      	pop	es
  4722                                  
  4723                                  ;	Bugbug:	AX has extended error code, so no need to zero AH?
  4724                                  
  4725                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4726                                  	;xor	ah,ah
  4727 000011F5 89C7                    	mov	di,ax			; DI = error code
  4728                                  
  4729                                  ; Bugbug: somewhat obsolete documentation?
  4730                                  ;
  4731                                  ; DI is now the correct error code. Classify things to see what we are
  4732                                  ; allowed to report. We convert DI into a 0-based index into a message table.
  4733                                  ; This presumes that the int 24 errors (oldstyle) and new errors (sharing and
  4734                                  ; the like) are contiguous.
  4735                                  
  4736                                  ;	Bugbug:	simplify following code by cmp'ing instead of sub'ing.
  4737                                  ;	Check use of ErrCd_24, though.
  4738                                  
  4739 000011F7 83EF13                  	sub	di,ERROR_WRITE_PROTECT ; 13h
  4740 000011FA 7303                    	jae	short HavCod
  4741                                  
  4742                                  ;	Bugbug:	wouldn't it be better to display the original error msg,
  4743                                  ;	even though it's not a critical error?
  4744                                  
  4745 000011FC BF0C00                  	mov	di,ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT ; mov di,0Ch
  4746                                  
  4747                                  ; DI now has the mapped error code. Old style errors are:
  4748                                  ;   FOOBAR <read|writ>ing drive ZZ.
  4749                                  ; New style errors are:
  4750                                  ;   FOOBAR
  4751                                  ; We need to figure out which the particular error belongs to.
  4752                                  
  4753                                  HavCod:
  4754 000011FF C606[3702]00            	mov	byte [ErrType],0	; assume old style
  4755 00001204 83FF10                  	cmp	di,ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT  ; cmp di,10h
  4756 00001207 7405                    	je	short SetStyle
  4757 00001209 83FF11                  	cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4758 0000120C 7504                    	jne	short GotStyle
  4759                                  
  4760                                  SetStyle:
  4761                                  ;	Bugbug:	use INC
  4762                                  	;mov	byte [ErrType],1		; must be new type
  4763 0000120E FE06[3702]              	inc	byte [ErrType] ; Retro DOS v3.0 COMMAND.COM - 22/09/2018
  4764                                  
  4765                                  GotStyle:
  4766 00001212 893E[4402]              	mov	[ErrCd_24],di
  4767                                  	; 12/01/2023
  4768                                  	; 25/09/2018
  4769                                  	; MSDOS 6.0
  4770 00001216 83FF14                  	cmp	di,ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT ; cmp di,14h
  4771                                  	; MSDOS 3.3
  4772                                  	;cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4773                                  
  4774                                  						; If the error message is unknown
  4775 00001219 7641                    	jbe	short NormalError		;  redirector, continue. Otherwise,
  4776                                  
  4777                                  ; We do not know how to handle this error. Ask IFSFUNC if she knows
  4778                                  ; how to handle things
  4779                                  
  4780                                  ;input to IFSFUNC:    AL=1
  4781                                  ;		      BX=extended error number
  4782                                  ;
  4783                                  ;output from IFSFUNC: AL=error type (0 or 1)
  4784                                  ;			 0=<message> error (read/writ)ing (drive/device) xxx
  4785                                  ;			   Abort, Retry, Ignore
  4786                                  ;			 1=<message>
  4787                                  ;			   Abort, Retry, Ignore
  4788                                  ;		      ES:DI=pointer to message text
  4789                                  ;		      carry set=>no message
  4790                                  
  4791 0000121B 89C7                    	mov	di,ax			; retrieve correct extended error...
  4792 0000121D B80005                  	mov	ax,0500h		; is the redir there?
  4793 00001220 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
  4794                                  			; Return: AL = 00h not installed, OK to install
  4795                                  			; 01h not installed, can't install
  4796                                  			; FFh installed
  4797 00001222 3CFF                    	cmp	al,0FFh
  4798 00001224 7529                    	jne	short NoHandler		; no, go to NoHandler
  4799                                  
  4800                                  	; 12/01/2023
  4801                                  	; MSDOS 6.0
  4802 00001226 53                      	push	bx
  4803 00001227 89FB                    	mov	bx,di			; get ErrType and ptr to error msg
  4804 00001229 B80105                  	mov	ax,0501h
  4805 0000122C CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4806 0000122E 5B                      	pop	bx 
  4807 0000122F 721E                    	jc	short NoHandler
  4808                                  	
  4809                                  	; MSDOS 3.3
  4810                                  	;mov     ax,di
  4811                                  	;mov     ah,5
  4812                                  	;int     2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4813                                  	;jc      short NOHANDLER
  4814                                  
  4815                                  ;	Bugbug:	need to record error type?
  4816                                  
  4817 00001231 A2[3702]                	mov	[ErrType],al
  4818                                  
  4819 00001234 1E                      	push	ds
  4820 00001235 06                      	push	es
  4821 00001236 1F                      	pop	ds
  4822 00001237 89FA                    	mov	dx,di
  4823 00001239 B9FFFF                  	mov	cx,-1			; find end of msg
  4824 0000123C 30C0                    	xor	al,al
  4825                                  
  4826 0000123E FC                      	cld
  4827 0000123F F2AE                    	repnz	scasb
  4828                                  
  4829                                  ;	Bugbug:	we can do better than this.
  4830                                  
  4831                                  	;mov	byte [di-1],'$'
  4832                                  	; 19/07/2024
  4833 00001241 4F                      	dec	di
  4834 00001242 C60524                  	mov	byte [di],'$'
  4835                                  
  4836                                  	;CALL	RDISPMSG ; MSDOS 3.3
  4837                                  	
  4838 00001245 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9	; print the message
  4839 00001247 CD21                    	int	21h
  4840                                  
  4841                                  	;mov	byte [di-1],0			; restore terminal byte
  4842                                  	; 19/07/2024
  4843 00001249 C60500                  	mov	byte [di],0
  4844                                  
  4845 0000124C 1F                      	pop	ds				; clean up and continue
  4846 0000124D EB15                    	jmp	short CheckErrType
  4847                                  
  4848                                  ;*	Redir isn't available or doesn't recognize the error.
  4849                                  ;	Restore regs to unextended error.
  4850                                  
  4851                                  NoHandler:
  4852 0000124F C606[3702]00            	mov	byte [ErrType],0
  4853                                  ;	Bugbug:	won't this break, since we add error_write_protect back in?
  4854 00001254 8B3E[5C04]              	mov	di,[OldErrNo]
  4855 00001258 893E[4402]              	mov	[ErrCd_24],di
  4856                                  
  4857                                  NormalError:
  4858                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4859                                  	; MSDOS 6.0
  4860 0000125C 83C713                  	add	di,ERROR_WRITE_PROTECT
  4861 0000125F 87FA                    	xchg	di,dx			; may need dx later
  4862 00001261 E89001                  	call	RPrintCrit		; print error type
  4863                                  
  4864                                  	; MSDOS 3.3
  4865                                  	;shl     di,1
  4866                                  	;mov     di,[CRMSGTBL+di]
  4867                                  	;xchg    di,dx
  4868                                  	;call    RDISPMSG
  4869                                  
  4870                                  CheckErrType:
  4871 00001264 803E[3702]00            	cmp	byte [ErrType],0	; Check error style...
  4872 00001269 7405                    	je	short ContOld
  4873 0000126B E86A01                  	call	crlf			; if new style then done printing
  4874 0000126E EB31                    	jmp	short Ask
  4875                                  
  4876                                  ContOld:
  4877                                  	; 12/01/2023
  4878                                  	; MSDOS 6.0
  4879 00001270 46                      	inc	si			; DS:SI = ptr to asciiz string
  4880                                  
  4881                                  ;	Bugbug:	combine some of the following two sections?
  4882                                  
  4883                                  	; 12/01/2023
  4884 00001271 F606[2502]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4885                                  	;test	byte [CDevAt],DEVTYP shr 8 ; 80h
  4886 00001276 740F                    	jz	short BlkErr
  4887                                  	;;mov	dx,offset DATARES:CharDevErr	; DX = ptr to device message
  4888                                  	;mov	dx,ChardevErr
  4889 00001278 BA[7F05]                	mov	dx,MDEVICE
  4890                                  	;mov	[CharDevErrRw.SubstPtr],si	; point to read/write string
  4891 0000127B 8936[0702]              	mov	[CharDevErrRw],si
  4892                                  	;mov	si,offset DATARES:CharDevErrSubst; SI = ptr to subst block
  4893 0000127F BE[0602]                	mov	si,CharDevErrSubst
  4894                                  
  4895 00001282 E85601                  	call	RPrint				; print the message
  4896 00001285 EB1A                    	jmp	short Ask			; don't ralph on command
  4897                                  
  4898                                  	; 12/01/2023
  4899                                  	; MSDOS 3.3
  4900                                  	;mov	dx,ERRMES
  4901                                  	;call	RDISPMSG
  4902                                  	;mov	dx,si
  4903                                  	;call	RDISPMSG
  4904                                  	;
  4905                                  	;test	byte [CDevAt],80h
  4906                                  	;jz	short BLKERR
  4907                                  	;mov	dx,CHARDEVERR	; " device "
  4908                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4909                                  	;int	21h		; DOS - PRINT STRING
  4910                                  	;			; DS:DX -> string terminated by "$"
  4911                                  	;jmp	short ASK
  4912                                  
  4913                                  BlkErr:
  4914                                  	; 12/01/2023
  4915                                  	; MSDOS 6.0
  4916                                  	;;mov	dx,offset DATARES:BlkDevErr	; DX = error msg #
  4917                                  	;mov	dx,BlkDevErr
  4918 00001287 BA[7005]                	mov	dx,MDRIVE
  4919                                  	;mov	[BlkDevErrRw.SubstPtr],si	; "reading","writing" ptr
  4920 0000128A 8936[0002]              	mov	[BlkDevErrRw],si
  4921                                  	;mov	si,offset DATARES:BlkDevErrSubst ; SI = ptr to subst block
  4922 0000128E BE[FF01]                	mov	si,BlkDevErrSubst
  4923 00001291 E84701                  	call	RPrint
  4924                                  
  4925                                  	; MSDOS 3.3
  4926                                  	;mov	dx,BLKDEVERR
  4927                                  	;call	RDISPMSG
  4928                                  
  4929 00001294 803E[4802]00            	cmp	byte [Loading],0
  4930 00001299 7406                    	jz	short Ask
  4931 0000129B E8B3FD                  	call	RestHand
  4932 0000129E E9AAFD                  	jmp	GetComDsk2		; if error loading COMMAND, re-prompt
  4933                                  Ask:
  4934 000012A1 833E[4402]0F            	cmp	word [ErrCd_24],15	; error 15 has an extra message
  4935 000012A6 751E                    	jne	short Not15		; not error 15
  4936                                  
  4937                                  ;*	For error 15, tell the user which volume/serial # are needed.
  4938                                  
  4939 000012A8 51                      	push	cx
  4940                                  
  4941                                  ;	Bugbug:	does this push/pop need to be done?
  4942                                  
  4943 000012A9 1E                      	push	ds
  4944 000012AA 07                      	pop	es
  4945 000012AB C536[3302]              	lds	si,[NeedVol]
  4946                                  	;assume	ds:NOTHING
  4947 000012AF 57                      	push	di
  4948 000012B0 BF[1502]                	mov	di,VolName
  4949                                  	; 12/01/2023
  4950                                  	; MSDOS 6.0
  4951 000012B3 B91000                  	mov	cx,16			; copy volume name & serial #
  4952                                  	; MSDOS 3.3
  4953                                  	;mov	cx,11			; copy volume name
  4954 000012B6 FC                      	cld
  4955 000012B7 F3A4                    	rep	movsb
  4956 000012B9 5F                      	pop	di
  4957 000012BA 06                      	push	es
  4958 000012BB 1F                      	pop	ds
  4959 000012BC 59                      	pop	cx
  4960                                  	;assume	ds:DATARES
  4961                                  	; 12/01/2023
  4962                                  	; MSDOS 6.0
  4963                                  	;mov	dx,offset DATARES:NeedVolMsg	; DX = ptr to msg
  4964                                  	;mov	si,offset DATARES:NeedVolSubst	; DS:SI = ptr to subst block
  4965                                  	;mov	dx,NeedVolMsg
  4966 000012BD BA[8F05]                	mov	dx,MVOLSERIAL
  4967 000012C0 BE[0C02]                	mov	si,NeedVolSubst
  4968 000012C3 E81501                  	call	RPrint
  4969                                  
  4970                                  	; MSDOS 3.3
  4971                                  	;mov	dx,NEEDVOLMSG
  4972                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4973                                  	;int	21h		; DOS - PRINT STRING
  4974                                  	;			; DS:DX -> string terminated by "$"
  4975                                  Not15:
  4976                                  ;*	Print abort, retry, ignore, fail message.
  4977                                  ;	Print only options that are valid.
  4978                                  
  4979                                  ;	Bugbug:	sizzle this.
  4980                                  
  4981                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4982 000012C6 BA[3E05]                	mov	dx,REQ_ABORT
  4983 000012C9 E80F01                  	call	RPrint
  4984                                  	;call	RDISPMSG
  4985 000012CC F606[9C02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED  ; 10h
  4986 000012D1 7406                    	jz	short Try_Ignore
  4987 000012D3 BA[4405]                	mov	dx,REQ_RETRY
  4988 000012D6 E80201                  	call	RPrint
  4989                                  	;call	RDISPMSG
  4990                                  Try_Ignore:
  4991 000012D9 F606[9C02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h
  4992 000012DE 7406                    	jz	short Try_Fail
  4993 000012E0 BA[4C05]                	mov	dx,REQ_IGNORE
  4994 000012E3 E8F500                  	call	RPrint
  4995                                  	;call	RDISPMSG
  4996                                  Try_Fail:
  4997 000012E6 F606[9C02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED   ; 08h
  4998 000012EB 7406                    	jz	short Term_Question
  4999 000012ED BA[5505]                	mov	dx,REQ_FAIL
  5000 000012F0 E8E800                  	call	RPrint
  5001                                  	;call	RDISPMSG
  5002                                  Term_Question:
  5003 000012F3 BA[5C05]                	mov	dx,REQ_END
  5004 000012F6 E8E200                  	call	RPrint
  5005                                  	;call	RDISPMSG
  5006                                  
  5007                                  ;	If the /f switch was given, we fail all requests.
  5008                                  
  5009 000012F9 F606[A902]FF            	test	byte [fFail],-1
  5010 000012FE 741B                    	jz	short DoPrompt
  5011 00001300 B403                    	mov	ah,3				; signal fail
  5012 00001302 E9B700                  	jmp	EExit
  5013                                  
  5014                                  	; 16/04/2023
  5015                                  Abort_Process:
  5016 00001305 F606[1203]01            	test	byte [InitFlag],INITINIT ; 1	; COMMAND init interrupted?
  5017 0000130A 746C                    	jz	short AbortCont			; no, handle it normally
  5018 0000130C 803E[A202]00            	cmp	byte [PermCom],0		; are we top level process?
  5019 00001311 745A                    	jz	short JustExit			; yes, just exit
  5020                                  
  5021 00001313 BA[DC0C]                	mov	dx,PATRICIDE			; no, load ptr to error msg
  5022                                  	; 12/01/2023
  5023 00001316 E8C200                  	call	RPrint				; print it
  5024                                  	;call	RDISPMSG
  5025                                  DeadInTheWater:
  5026 00001319 EBFE                    	jmp	short DeadInTheWater		; loop until the user reboots
  5027                                  
  5028                                  DoPrompt:
  5029                                  	; 12/01/2023
  5030 0000131B B8010C                  	mov	ax,0C01h
  5031                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT ; 0C01h
  5032 0000131E CD21                    	int	21h				; get response
  5033                                  
  5034                                  ; 21/07/2024 - PCDOS 7.1 COMMAND.COM
  5035                                  %if 1
  5036                                  ;ifdef DBCS
  5037                                  	;invoke	TestKanjR			; 3/3/KK
  5038 00001320 E85A01                  	call	ITestKanj
  5039 00001323 740A                    	jz	short NotKanj			; 3/3/KK
  5040                                   
  5041                                  	;mov	ax,(STD_CON_INPUT shl 8) ; eat the 2nd byte of ECS code  3/3/KK
  5042 00001325 B80001                  	mov	ax,0100h
  5043 00001328 CD21                    	int	21h				; 3/3/KK
  5044 0000132A E8AB00                  	call	crlf				; 3/3/KK
  5045                                  	;jmp	short Ask			; 3/3/KK
  5046                                  	; 22/07/2024
  5047 0000132D EB3B                    	jmp	short AskJ
  5048                                  NotKanj:
  5049                                  ;endif
  5050                                  %endif
  5051 0000132F E8A600                  	call	crlf
  5052 00001332 E83F01                  	call	CharToUpper			; convert to upper case
  5053 00001335 B400                    	mov	ah,0				; return code for ignore
  5054 00001337 F606[9C02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h ; is ignore allowed?
  5055 0000133C 7406                    	jz	short User_Retry
  5056 0000133E 3A06[3A05]              	cmp	al,[IGNORE_CHAR]		; ignore?
  5057                                  	;jz	short EExitJ
  5058                                  	; 16/04/2023
  5059 00001342 7478                    	jz	short EExit
  5060                                  
  5061                                  ;	Bugbug:	optimize following code.
  5062                                  
  5063                                  User_Retry:
  5064 00001344 FEC4                    	inc	ah				; return code for retry
  5065 00001346 F606[9C02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED ; 10h ; is retry allowed?
  5066 0000134B 7406                    	jz	short User_Abort
  5067 0000134D 3A06[3905]              	cmp	al,[RETRY_CHAR]			; retry?
  5068                                  	;jz	short EExitJ
  5069                                  	; 16/04/2023
  5070 00001351 7469                    	jz	short EExit
  5071                                  User_Abort:
  5072 00001353 FEC4                    	inc	ah				; return code for abort
  5073                                  						;  (abort always allowed)
  5074 00001355 3A06[3805]              	cmp	al,[ABORT_CHAR]			; abort?
  5075 00001359 74AA                    	jz	short Abort_Process		; exit user program
  5076 0000135B FEC4                    	inc	ah				; return code for fail
  5077 0000135D F606[9C02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED ; 08h ; is fail allowed?
  5078 00001362 7406                    	jz	short AskJ
  5079 00001364 3A06[3B05]              	cmp	al,[FAIL_CHAR]			; fail?
  5080                                  	;jz	short EExitJ
  5081                                  	; 16/04/2023
  5082 00001368 7452                    	jz	short EExit
  5083                                  AskJ:
  5084 0000136A E934FF                  	jmp	Ask
  5085                                  
  5086                                  	; 12/01/2023
  5087                                  ;EExitJ:
  5088                                  	;jmp	short EExit
  5089                                  
  5090                                  JustExit:
  5091                                  	;assume	ds:DATARES
  5092                                  	; 12/01/2023
  5093 0000136D A1[3E02]                	mov	ax,[Parent]			; load real parent pid
  5094                                  	;mov	[16h],ax
  5095 00001370 A31600                  	mov	[PDB.PARENT_PID],ax		; put it back where it belongs
  5096 00001373 B8FF4C                  	mov	ax,4CFFh
  5097                                  	;mov	ax,(EXIT<<8) | 255 ; 4CFFh
  5098 00001376 CD21                    	int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
  5099                                  				; AL = exit code
  5100                                  AbortCont:
  5101 00001378 F606[9202]FF            	test	byte [In_Batch],-1		; Are we accessing a batch file?
  5102 0000137D 7405                    	jz	short Not_Batch_Abort
  5103 0000137F C606[9302]01            	mov	byte [Batch_Abort],1		; set flag for abort
  5104                                  
  5105                                  Not_Batch_Abort:
  5106 00001384 8A16[1303]              	mov	dl,[PipeFlag]
  5107 00001388 E87CFA                  	call	ResPipeOff
  5108 0000138B 08D2                    	or	dl,dl
  5109 0000138D 740D                    	je	short CheckForA
  5110 0000138F 833E[A502]00            	cmp	word [SingleCom],0
  5111 00001394 7406                    	je	short CheckForA
  5112 00001396 C706[A502]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  5113                                  
  5114                                  CheckForA:
  5115 0000139C 833E[4402]00            	cmp	word [ErrCd_24],0		; write protect?
  5116 000013A1 7407                    	je	short abortfor
  5117 000013A3 833E[4402]02            	cmp	word [ErrCd_24],2		; drive not ready?
  5118 000013A8 7512                    	jne	short EExit			; don't abort the FOR
  5119                                  
  5120                                  abortfor:
  5121 000013AA C606[AB02]00            	mov	byte [ForFlag],0		; abort a FOR in progress
  5122 000013AF 833E[A502]00            	cmp	word [SingleCom],0
  5123 000013B4 7406                    	je	short EExit
  5124 000013B6 C706[A502]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  5125                                  
  5126                                  EExit:
  5127 000013BC 88E0                    	mov	al,ah
  5128 000013BE 89FA                    	mov	dx,di
  5129                                  RestHd:
  5130 000013C0 E88EFC                  	call    RestHand
  5131 000013C3 59                      	pop	cx
  5132 000013C4 5E                      	pop	si				; restore registers
  5133 000013C5 07                      	pop	es
  5134                                  
  5135                                  	; 12/01/2023	
  5136                                  	; MSDOS 6.0
  5137                                  ;;	pop	ds
  5138                                  ;SR;
  5139                                  ;ds has to be got from the variable we saved it in
  5140                                  
  5141 000013C6 8E1E[2E05]               	mov	ds,[OldDS]			; restore old value of ds
  5142                                  
  5143                                  ;	pop	ds
  5144                                  ;	assume	ds:nothing
  5145                                  
  5146                                  	; MSDOS 3.3
  5147                                  	;pop	ds
  5148                                  
  5149 000013CA CF                      	iret
  5150                                  
  5151                                  FatErr:
  5152                                  	; 12/01/2023
  5153                                  	; MSDOS 6.0
  5154                                  	;mov	dx,offset DATARES:BadFatMsg
  5155                                  	;mov	si,offset DATARES:BadFatSubst
  5156 000013CB BA[B605]                	mov	dx,BADFATMSG
  5157 000013CE BE[2602]                	mov	si,BadFatSubst
  5158 000013D1 E80700                  	call	RPrint
  5159                                  
  5160                                  	; MSDOS 3.3
  5161                                  	;mov	dx,BADFATMSG
  5162                                  	;call	RDISPMSG
  5163                                  	;mov	dx,BLKDEVERR
  5164                                  	;call	RDISPMSG
  5165                                  
  5166 000013D4 B002                    	mov	al,2				; abort
  5167 000013D6 EBE8                    	jmp	short RestHd
  5168                                  
  5169                                  ;DskErr	endp
  5170                                  
  5171                                  	; MSDOS 6.0
  5172                                  ; ----------------------------------------------------------------------------
  5173                                  ;***	RPrint - print message
  5174                                  ;***	Crlf - display cr/lf
  5175                                  ;
  5176                                  ;	ENTRY	DS:DX = ptr to count byte, followed by message text
  5177                                  ;		DS:SI = ptr to 1st substitution block for this msg, if any
  5178                                  ;		variable fields related to substitution blocks are set
  5179                                  ;
  5180                                  ;	EXIT	nothing
  5181                                  ;
  5182                                  ;	USED	flags
  5183                                  ;
  5184                                  ;	EFFECTS
  5185                                  ;	  Message is displayed on stdout.
  5186                                  ;
  5187                                  ;	NOTE
  5188                                  ;	  Number of substitutions (%1, %2,...) in message text must not
  5189                                  ;	  be greater than number of substition blocks present.
  5190                                  ; ----------------------------------------------------------------------------
  5191                                  
  5192                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5193                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:13D1h (CODERES:0691h)
  5194                                  
  5195                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
  5196                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:14F6h
  5197                                  crlf: 
  5198                                  	;mov	dx,offset DATARES:Newlin ; cheap newline
  5199                                  	; 14/01/2023
  5200 000013D8 BA[4107]                	mov	dx,NEWLINE
  5201                                  
  5202                                  ;RPrint	proc
  5203                                  ;
  5204                                  ;	assume	ds:DATARES,ss:DATARES
  5205                                  ;
  5206                                  	; 14/01/2023
  5207                                  RPrint:
  5208                                  
  5209                                  ;	Bugbug:	do we need to save all reg's?
  5210                                  
  5211 000013DB 56                      	push	si			; preserve registers
  5212 000013DC 50                      	push	ax
  5213 000013DD 53                      	push	bx
  5214 000013DE 51                      	push	cx
  5215 000013DF 52                      	push	dx
  5216                                  
  5217 000013E0 89F3                    	mov	bx,si			; DS:BX = ptr to subst block
  5218 000013E2 89D6                    	mov	si,dx			; DS:SI = ptr to count byte
  5219 000013E4 AC                      	lodsb				; AL = message length
  5220                                  					; DS:SI = ptr to message text
  5221 000013E5 31C9                    	xor	cx,cx
  5222 000013E7 88C1                    	mov	cl,al			; CX = message length
  5223 000013E9 E303                    	jcxz	rpRet
  5224                                  
  5225 000013EB E81900                  	call	RDispMsg
  5226                                  
  5227 000013EE 5A                      rpRet:	pop	dx
  5228 000013EF 59                      	pop	cx
  5229 000013F0 5B                      	pop	bx
  5230 000013F1 58                      	pop	ax
  5231 000013F2 5E                      	pop	si
  5232 000013F3 C3                      	retn
  5233                                  
  5234                                  ;RPrint	endp
  5235                                  
  5236                                  	; 14/01/2023
  5237                                  ;	; MSDOS 3.3
  5238                                  ;CRLF:
  5239                                  ;	mov     dx,NEWLIN
  5240                                  ;
  5241                                  ;RDISPMSG: ; Display message/text
  5242                                  ;	; DS:DX = ($ terminated) Message/Text address 
  5243                                  ;	push    ax
  5244                                  ;	mov     ah,STD_CON_STRING_OUTPUT ; 9
  5245                                  ;	clc
  5246                                  ;	int     21h             ; DOS - PRINT STRING
  5247                                  ;				; DS:DX -> string terminated by "$"
  5248                                  ;	pop     ax
  5249                                  ;	retn
  5250                                  
  5251                                  
  5252                                  	; MSDOS 6.0
  5253                                  ; ----------------------------------------------------------------------------
  5254                                  ;***	RPrintCrit - print critical error message
  5255                                  ;
  5256                                  ;	ENTRY	DX = extended error # (19-39)
  5257                                  ;
  5258                                  ;	EXIT	nothing
  5259                                  ;
  5260                                  ;	USED	flags
  5261                                  ;
  5262                                  ;	EFFECTS
  5263                                  ;	  Message is displayed on stdout
  5264                                  ; ----------------------------------------------------------------------------
  5265                                  
  5266                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5267                                  
  5268                                  ;RPrintCrit	proc
  5269                                  ;	assume	ds:DATARES,ss:DATARES
  5270                                  
  5271                                  	; 14/01/2023
  5272                                  RPrintCrit:
  5273 000013F4 52                      	push	dx			; preserve DX
  5274 000013F5 87DA                    	xchg	bx,dx			; BX = extended error #
  5275                                  					; DX = saved BX
  5276 000013F7 83EB13                  	sub	bx,19			; BX = critical error index, from 0
  5277 000013FA D1E3                    	shl	bx,1			; BX = offset in word table
  5278 000013FC 8B9F[DB08]              	mov	bx,[bx+CRITMSGPTRS]	; BX = ptr to error msg
  5279 00001400 87DA                    	xchg	bx,dx			; DX = ptr to error msg
  5280                                  					; BX = restored
  5281 00001402 E8D6FF                  	call	RPrint			; print the message
  5282 00001405 5A                      	pop	dx			; restore DX
  5283 00001406 C3                      	retn
  5284                                  
  5285                                  ;RPrintCrit	endp
  5286                                  
  5287                                  ; ----------------------------------------------------------------------------
  5288                                  ;***	RDispMsg - display message
  5289                                  ;
  5290                                  ;	Display message, with substitutions, for RPrint.
  5291                                  ;
  5292                                  ;	ENTRY	DS:SI = ptr to message text
  5293                                  ;		CX = message length
  5294                                  ;		DS:BX = ptr to substitution block, if any
  5295                                  ;
  5296                                  ;	EXIT	nothing
  5297                                  ;
  5298                                  ;	USED	AX,CX,DX,SI
  5299                                  ; ----------------------------------------------------------------------------
  5300                                  
  5301                                  ;RDispMsg	proc
  5302                                  ;	assume	ds:DATARES,ss:DATARES
  5303                                  
  5304                                  RDispMsg:
  5305                                  	; 14/01/2023
  5306                                  rdNextChar:
  5307 00001407 AC                      	lodsb				; AL = next char
  5308 00001408 3C25                    	cmp	al,'%'
  5309 0000140A 7511                    	jne	short rdOutChar		; not a substitution
  5310 0000140C 8A14                    	mov	dl,[si]			; DL = possible '1' - '9'
  5311 0000140E 80EA31                  	sub	dl,'1'			; DL = 0 - 8 = '1' - '9'
  5312 00001411 80FA09                  	cmp	dl,9
  5313 00001414 7307                    	jae	short rdOutChar		; not a substitution
  5314                                  
  5315                                  ;*	A substitution code %1 - %9 has been encountered.
  5316                                  ;	DL = 0-8, indicating %1-%9
  5317                                  ;	DS:BX = ptr to substitution block
  5318                                  
  5319 00001416 E80D00                  	call	SubstMsg		; display the substitution
  5320 00001419 46                      	inc	si			; SI = ptr past %n
  5321 0000141A 49                      	dec	cx			; count extra character in %n
  5322 0000141B EB06                    	jmp	short rdCharDone
  5323                                  
  5324                                  ;*	Normal character output.
  5325                                  
  5326                                  rdOutChar:
  5327 0000141D 88C2                    	mov	dl,al			; DL = char
  5328 0000141F B402                    	mov	ah,2			; AH = DOS Character Output code
  5329 00001421 CD21                    	int	21h			; call DOS
  5330                                  rdCharDone:
  5331 00001423 E2E2                    	loop	rdNextChar
  5332 00001425 C3                      	retn
  5333                                  
  5334                                  ;RDispMsg	endp
  5335                                  
  5336                                  ; ----------------------------------------------------------------------------
  5337                                  ;***	SubstMsg - display message substitution
  5338                                  ;
  5339                                  ;	Display a substitution string within a message.
  5340                                  ;	Substitution can be a char, an ASCIIZ string, or
  5341                                  ;	a word to be displayed as hex digits.
  5342                                  ;
  5343                                  ;	ENTRY	DL = substitution index 0-8 (for codes %1-%9)
  5344                                  ;		DS:BX = ptr to substitution block
  5345                                  ;
  5346                                  ;	EXIT	nothing
  5347                                  ;
  5348                                  ;	USED	AX,DX
  5349                                  ; ----------------------------------------------------------------------------
  5350                                  
  5351                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5352                                  
  5353                                  ;SubstMsg	proc
  5354                                  ;	assume	ds:DATARES,ss:DATARES
  5355                                  	
  5356                                  	; 14/01/2023
  5357                                  SubstMsg:
  5358 00001426 53                      	push	bx			; preserve BX
  5359 00001427 51                      	push	cx			; preserve CX
  5360                                  
  5361                                  	;mov	al,size SUBST		; AL = size of substitution block
  5362 00001428 B003                    	mov	al,3
  5363 0000142A F6E2                    	mul	dl			; AX = offset of desired subst block
  5364 0000142C 01C3                    	add	bx,ax			; DS:BX = ptr to desired subst block
  5365                                  
  5366                                  	;mov	al,[bx].SubstType	; AX = substitution type flag
  5367 0000142E 8A07                    	mov	al,[bx]
  5368                                  	;mov	bx,[bx].SubstPtr	; BX = ptr to char, str, or hex value
  5369 00001430 8B5F01                  	mov	bx,[bx+1]
  5370                                  
  5371                                  ;	AL = 1, 2, or 3 for char, string, or hex type
  5372                                  
  5373 00001433 FEC8                    	dec	al
  5374 00001435 7428                    	jz	short smChar
  5375 00001437 FEC8                    	dec	al
  5376 00001439 742C                    	jz	short smStr
  5377                                  
  5378                                  ;*	Hex number substitution.
  5379                                  
  5380                                  	;mov	ax,ds:[bx]		; AX = word value
  5381 0000143B 8B07                    	mov	ax,[bx]
  5382 0000143D B90400                  	mov	cx,4			; CX = # digits to display
  5383                                  smDigit:
  5384 00001440 D1C0                    	rol	ax,1
  5385 00001442 D1C0                    	rol	ax,1
  5386 00001444 D1C0                    	rol	ax,1
  5387 00001446 D1C0                    	rol	ax,1			; AL<3:0> = next digit
  5388                                  
  5389 00001448 50                      	push	ax			; save other digits
  5390 00001449 240F                    	and	al,0Fh			; AL = binary digit
  5391 0000144B 0430                    	add	al,'0'			; AL = ascii digit if 0-9
  5392 0000144D 3C39                    	cmp	al,'9'
  5393 0000144F 7602                    	jbe	short smDigit09		; it's 0-9
  5394                                  	;add	al,7
  5395 00001451 0407                    	add	al,('A' - '0') - 10	; AL = ascii digit A-F
  5396                                  smDigit09:
  5397 00001453 88C2                    	mov	dl,al			; DL = ascii digit
  5398 00001455 B402                    	mov	ah,2
  5399 00001457 CD21                    	int	21h			; output the ascii digit
  5400 00001459 58                      	pop	ax			; restore all digits
  5401                                  
  5402 0000145A E2E4                    	loop	smDigit
  5403                                  	;jmp	short smRet
  5404                                  	; 14/01/2023
  5405                                  smRet:	
  5406 0000145C 59                      	pop	cx
  5407 0000145D 5B                      	pop	bx
  5408 0000145E C3                      	retn
  5409                                  
  5410                                  ;*	Char substitution.
  5411                                  
  5412                                  smChar:
  5413                                  	;mov	dl,ds:[bx]		; DL = char to output
  5414 0000145F 8A17                    	mov	dl,[bx]
  5415 00001461 B402                    	mov	ah,2
  5416 00001463 CD21                    	int	21h
  5417 00001465 EBF5                    	jmp	short smRet
  5418                                  
  5419                                  ;*	String substitution.
  5420                                  
  5421                                  smStr:
  5422                                  	;mov	dl,ds:[bx]		; DL = next char
  5423 00001467 8A17                    	mov	dl,[bx]
  5424 00001469 08D2                    	or	dl,dl
  5425 0000146B 74EF                    	jz	short smRet		; null char - we're done
  5426 0000146D B402                    	mov	ah,2
  5427 0000146F CD21                    	int	21h			; display char
  5428 00001471 43                      	inc	bx			; DS:BX = ptr to next char
  5429 00001472 EBF3                    	jmp	short smStr
  5430                                  
  5431                                  ;smRet:	pop	cx
  5432                                  ;	pop	bx
  5433                                  ;	retn
  5434                                  
  5435                                  ;SubstMsg	endp
  5436                                  
  5437                                  	; MSDOS 6.0
  5438                                  ; ----------------------------------------------------------------------------
  5439                                  ;***	CharToUpper - convert character to uppercase
  5440                                  ;
  5441                                  ;	ENTRY	AL = char
  5442                                  ;
  5443                                  ;	EXIT	AL = uppercase char
  5444                                  ;
  5445                                  ;	USED	AX
  5446                                  ; ----------------------------------------------------------------------------
  5447                                  
  5448                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5449                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  5450                                  
  5451                                  ;CharToUpper	proc
  5452                                  ;	assume	ds:DATARES
  5453                                  CharToUpper:
  5454 00001474 50                      	push	ax		; put char on stack as arg to int 2F
  5455 00001475 B81312                  	mov	ax,1213h	; AX = DOS int 2F 'Convert Char to Uppercase'
  5456 00001478 CD2F                    	int	2Fh
  5457 0000147A 44                      	inc	sp		; throw away old char on stack
  5458 0000147B 44                      	inc	sp
  5459 0000147C C3                      	retn
  5460                                  
  5461                                  ;CharToUpper	endp
  5462                                  
  5463                                  	; 14/01/2023
  5464                                  ;	; MSDOS 3.3
  5465                                  ;CHARTOUPPER:
  5466                                  ;	cmp	al,80h
  5467                                  ;	jb	short CHARTOUPPER1
  5468                                  ;	sub	al,80h
  5469                                  ;	push	ds
  5470                                  ;	push	bx
  5471                                  ;	lds	bx,[UPPERCASETBL]
  5472                                  ;	add	bx,2
  5473                                  ;	xlat
  5474                                  ;	pop	bx
  5475                                  ;	pop	ds
  5476                                  ;	jmp	short CHARTOUPPER_RETN
  5477                                  ;CHARTOUPPER1:
  5478                                  ;	cmp	al,'a'
  5479                                  ;	jb	short CHARTOUPPER_RETN
  5480                                  ;	cmp	al,'z'
  5481                                  ;	ja	short CHARTOUPPER_RETN
  5482                                  ;	sub	al,20h
  5483                                  ;CHARTOUPPER_RETN:
  5484                                  ;	retn
  5485                                  
  5486                                  ; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
  5487                                  ; ----------------------------------------------------------------------------
  5488                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:159Dh
  5489                                  
  5490                                  ;ifdef	DBCS
  5491                                  %if 1
  5492                                  
  5493                                  ;***	ITestKanj - DBCS lead byte check
  5494                                  
  5495                                  ITestKanj:
  5496                                  TestKanjR:				; 3/3/KK
  5497 0000147D 1E                      	push	ds
  5498 0000147E 56                      	push	si
  5499 0000147F 50                      	push	ax
  5500 00001480 C536[BA02]              	lds	si,[Dbcs_Vector_Addr]
  5501                                  ktLop:
  5502 00001484 833C00                  	cmp	word [si],0		; end of Lead Byte Table
  5503 00001487 740C                    	je	short NotLead
  5504                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
  5505                                  	;pop	ax
  5506                                  	;push	ax
  5507 00001489 3A04                    	cmp	al,[si]
  5508 0000148B 7208                    	jb	short NotLead
  5509 0000148D 46                      	inc	si
  5510 0000148E 3A04                    	cmp	al,[si]
  5511 00001490 7607                    	jbe	short IsLead
  5512 00001492 46                      	inc	si
  5513 00001493 EBEF                    	jmp	short ktLop		; try another range
  5514                                  NotLead:
  5515 00001495 31C0                    	xor	ax,ax			; set zero
  5516 00001497 EB03                    	jmp	short ktRet
  5517                                  IsLead:
  5518 00001499 31C0                    	xor	ax,ax			; reset zero
  5519 0000149B 40                      	inc	ax
  5520                                  ktRet:
  5521 0000149C 58                      	pop	ax
  5522 0000149D 5E                      	pop	si
  5523 0000149E 1F                      	pop	ds
  5524 0000149F C3                      	retn
  5525                                  
  5526                                  %endif
  5527                                  ;endif
  5528                                  
  5529                                  ; ----------------------------------------------------------------------------
  5530                                  
  5531                                  ;public	EndCode
  5532                                  ;EndCode label byte
  5533                                  
  5534                                  	; MSDOS 6.0
  5535                                  ; ----------------------------------------------------------------------------
  5536                                  ;***	MsgInt2fHandler - int 2f handler for message retrieval
  5537                                  ;
  5538                                  ;	ENTRY	If we handle it -
  5539                                  ;		  AX = ((MULTDOS shl 8) or MESSAGE_2F) = 122Eh
  5540                                  ;		  DL = operation =
  5541                                  ;		     0 = get extended error messages
  5542                                  ;		     1 = set extended error messages
  5543                                  ;		     2 = get parse error messages
  5544                                  ;		     3 = set parse error messages
  5545                                  ;		     4 = get critical error messages
  5546                                  ;		     5 = set critical error messages
  5547                                  ;		     6 = get file system error messages
  5548                                  ;		     7 = set file system error messages
  5549                                  ;		     8 = get disk retriever routine
  5550                                  ;		     9 = set disk retriever routine
  5551                                  ;		  ES:DI = address for 'set' operations
  5552                                  ;
  5553                                  ;	EXIT	ES:DI = ptr to list of message ptrs, for 'get' operations
  5554                                  ;
  5555                                  ;	NOTE
  5556                                  ;	  This handler replaces the one that used to reside in DOS.
  5557                                  ;	  'Set' operations are ignored.
  5558                                  ;	  'File system error messages' are not supported.
  5559                                  ; ----------------------------------------------------------------------------
  5560                                  
  5561                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5562                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1478h (CODERES:0738h)
  5563                                  
  5564                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  5565                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1588h (CODERES:0738h)
  5566                                  
  5567                                  ;SR;
  5568                                  ;At the int 2fh entry point we push the old ds value and the resident data
  5569                                  ;segment address. Get them off the stack
  5570                                  
  5571                                  ;MsgInt2fHandler proc	far
  5572                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5573                                  
  5574                                  	; 14/01/2023
  5575                                  MsgInt2fHandler:
  5576 000014A0 1F                      	pop	ds			; ds = DATARES
  5577                                  	;assume	ds:DATARES
  5578                                  ;	pop	word [OldDS]		; save old value of ds
  5579                                  
  5580 000014A1 3D2E12                  	cmp	ax,122Eh
  5581                                  	;cmp	ax,(MULTDOS<<8)|MESSAGE_2F
  5582                                  	;;cmp	ax,(MULTDOS shl 8) or MESSAGE_2F
  5583 000014A4 742A                    	je	short miOurs		; it's ours
  5584                                  
  5585                                  ;ifndef ROMDOS
  5586                                  	;cmp	ax,5500h
  5587 000014A6 3D0055                  	cmp	ax,GET_COMMAND_STATE	; is it first COMMAND query?
  5588                                  ;else
  5589                                  ;	cmp	ax,GET_ROMCOMMAND_STATE	; is it first ROM COMMAND query?
  5590                                  ;endif	;ROMDOS
  5591 000014A9 741C                    	je	short fcOurs
  5592                                  
  5593                                  ;SR;
  5594                                  ;We cannot do a far jump any more because cs cannot be used. Push the cs:ip
  5595                                  ;onto the stack and do a far return to jump to the next 2fh handler. 
  5596                                  ;Our old ds is on the stack. We need to restore it but we cannot lose the
  5597                                  ;current value of ds as it points at the data segment. So we do some kinky
  5598                                  ;stack manipulations.
  5599                                  
  5600 000014AB 50                      	push	ax
  5601 000014AC 50                      	push	ax			; create 2 words on stack for retf
  5602                                  
  5603 000014AD 55                      	push	bp
  5604 000014AE 50                      	push	ax
  5605                                  
  5606 000014AF 89E5                    	mov	bp,sp			; bp can be used to address stack
  5607                                  
  5608                                  ;Swap the old ds value with the second dummy word on the stack. Now, we can
  5609                                  ;do a 'pop ds' at the end to restore our ds
  5610                                  
  5611 000014B1 8B4608                  	mov	ax,[bp+8]		; ax = old ds value
  5612 000014B4 894604                  	mov	[bp+4],ax
  5613                                  	
  5614                                  	;mov	ax,word ptr ds:Int2fHandler+2
  5615 000014B7 A1[B004]                	mov	ax,[Int2fHandler+2]
  5616 000014BA 894608                  	mov	[bp+8],ax		; put segment address
  5617                                  	;mov	ax,word ptr ds:Int2fHandler
  5618 000014BD A1[AE04]                	mov	ax,[Int2fHandler]
  5619 000014C0 894606                  	mov	[bp+6],ax		; put offset address
  5620                                  
  5621 000014C3 58                      	pop	ax
  5622 000014C4 5D                      	pop	bp
  5623 000014C5 1F                      	pop	ds
  5624                                  
  5625 000014C6 CB                      	retf				; chain on to next handler
  5626                                  
  5627                                  ;;	jmp	Int2fHandler		; hand off to next 2f handler
  5628                                  
  5629                                  fcOurs:
  5630                                  
  5631                                  ;We have to clear ax, and return in ds:si a pointer to the stub jump table
  5632                                  
  5633 000014C7 58                      	pop	ax			; discard ds currently on stack
  5634 000014C8 1E                      	push	ds			; store our data segment
  5635                                  
  5636                                  	;mov	si,offset DATARES:Int2f_Entry ; start of table
  5637 000014C9 BE[6600]                	mov	si,Int2f_Entry
  5638                                  
  5639 000014CC 31C0                    	xor	ax,ax			; indicate COMMAND present
  5640 000014CE EB11                    	jmp	short miRet		; return to caller
  5641                                  
  5642                                  miOurs:
  5643 000014D0 F6C201                  	test	dl,1
  5644 000014D3 750C                    	jnz	short miRet		; ignore 'set' operations
  5645                                  
  5646 000014D5 53                      	push	bx			; preserve BX
  5647 000014D6 89D3                    	mov	bx,dx
  5648 000014D8 30FF                    	xor	bh,bh			; BX = index in word table
  5649 000014DA D1E3                    	shl	bx,1			; BX = index in dword table
  5650                                  	;les	di,MsgPtrLists[bx]	; ES:DI = ptr to msg ptr list
  5651 000014DC C4BF[4407]              	les	di,[bx+MsgPtrLists]
  5652 000014E0 5B                      	pop	bx			; restore BX
  5653                                  miRet:
  5654                                  ;	mov	ds,[OldDS]		; restore ds
  5655 000014E1 1F                      	pop	ds
  5656                                  	;assume	ds:nothing
  5657                                  
  5658 000014E2 CF                      	iret
  5659                                  
  5660                                  ;MsgInt2fHandler endp
  5661                                  
  5662                                  	; MSDOS 6.0
  5663                                  ; ----------------------------------------------------------------------------
  5664                                  ;***	MsgRetriever - message retrieval routine for utilities
  5665                                  ;
  5666                                  ;	Address of this routine is passed to utility programs via 
  5667                                  ;	message services int 2f. We try to find the desired message
  5668                                  ;	in memory or in our disk image.
  5669                                  ;
  5670                                  ;	ENTRY	AX = message #
  5671                                  ;		DI = offset in RESGROUP of msg ptr list
  5672                                  ;		ComSpec = asciiz pathname to our disk image
  5673                                  ;
  5674                                  ;	EXIT	CY clear for success
  5675                                  ;		ES:DI = ptr to count byte, followed by message text
  5676                                  ;
  5677                                  ;		CY set for failure
  5678                                  ;		ES,DI undefined
  5679                                  ;
  5680                                  ;	USED	flags
  5681                                  ;
  5682                                  ;	NOTE
  5683                                  ;	  The message # in AX is used to compute an offset into
  5684                                  ;	  the message ptr list pointed to by DI. The lists must
  5685                                  ;	  start with message # 1 and proceed through consecutive
  5686                                  ;	  message #'s.  
  5687                                  ;
  5688                                  ;	  It is assumed that the msg ptr list is either ParsMsgPtrs or
  5689                                  ;	  ExtMsgPtrs. We use NUMPARSEMSGS and NUMEXTMSGS to check for
  5690                                  ;	  valid message #.  ;M033
  5691                                  ;
  5692                                  ;	  List positions with no corresponding message text are
  5693                                  ;	  indicated by null pointers, which this routine detects.
  5694                                  ; ----------------------------------------------------------------------------
  5695                                  
  5696                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5697                                  
  5698                                  ;SR; This routine will be called directly by the utilities. So, we have
  5699                                  ; trap for it in the stub. The stub pushes the old value of ds and the 
  5700                                  ; DATARES value on the stack. We get them off the stack to setup ds here
  5701                                  
  5702                                  ;MsgRetriever	proc	far
  5703                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5704                                  
  5705                                  	; 14/01/2023
  5706                                  MsgRetriever:
  5707 000014E3 1F                      	pop	ds			; ds = DATARES
  5708                                  	;assume	ds:DATARES
  5709                                  ;	pop	word [OldDS]		; save old ds
  5710                                  
  5711 000014E4 50                      	push	ax			; preserve registers
  5712 000014E5 53                      	push	bx
  5713 000014E6 51                      	push	cx
  5714 000014E7 52                      	push	dx
  5715 000014E8 56                      	push	si
  5716                                  
  5717                                  ;;	push	ds
  5718                                  ;;	push	cs
  5719                                  ;;	pop	ds			; DS = DATARES seg addr
  5720                                  ;;	assume	ds:RESGROUP
  5721                                  ;;	push	cs
  5722                                  
  5723 000014E9 1E                      	push	ds			; get es from ds
  5724 000014EA 07                      	pop	es			; ES = DATARES seg addr
  5725                                  
  5726                                  ;	Begin modification M033.
  5727                                  
  5728                                  ;	Make sure msg # is valid.
  5729                                  ;	Assume msg ptr list is either ParsMsgPtrs or ExtMsgPtrs.
  5730                                  
  5731                                  	;mov	bx,11
  5732 000014EB BB0B00                  	mov	bx,NUMPARSMSGS		; BX = # parse error msgs in list
  5733                                  	;cmp	di,offset DATARES:ParsMsgPtrs
  5734 000014EE 81FF[E309]              	cmp	di,PARSMSGPTRS
  5735 000014F2 7403                    	je	short chkmsgnum		; it's ParsMsgPtrs
  5736                                  	;mov	bx,90
  5737 000014F4 BB5A00                  	mov	bx,NUMEXTMSGS		; BX = # extended error msgs in list
  5738                                  chkmsgnum:
  5739 000014F7 39C3                    	cmp	bx,ax
  5740 000014F9 725A                    	jc	short mrRet		; msg # too high, return carry
  5741                                  
  5742                                  ;	Msg # is valid.
  5743                                  
  5744                                  ;	End modification M033.
  5745                                  
  5746 000014FB 48                      	dec	ax
  5747 000014FC D1E0                    	shl	ax,1			; AX = offset into msg ptr list
  5748 000014FE 01C7                    	add	di,ax			; DI = ptr to msg ptr
  5749                                  
  5750 00001500 81FF[B204]              	cmp	di,ResMsgEnd
  5751 00001504 7247                    	jb	short mrInMem		; ptr (and message) in memory
  5752                                  
  5753                                  ;*	Retrieve message from disk (or ROM) image.
  5754                                  ;	Read once to get the ptr to the message, then again for the message.
  5755                                  
  5756                                  ;ifndef	ROMDOS
  5757                                  	; 14/01/2023
  5758                                  	;mov	si,offset DATARES:ComSpec	; DS:SI = ptr to pathname
  5759 00001506 BE[4B02]                	mov	si,ComSpec
  5760 00001509 BA0100                  	mov	dx,1 ; EXT_EXISTS_OPEN		; DX = 'open existing file'
  5761 0000150C BB0020                  	mov	bx,2000h ; INT_24_ERROR		; BX = 'fail on crit error'
  5762 0000150F B8006C                  	mov	ax,6C00h
  5763                                  	;mov	ax,ExtOpen shl 8		; AX = 'Extended Open File'
  5764 00001512 CD21                    	int	21h				; call DOS
  5765 00001514 723F                    	jc	short mrRet			; return failure
  5766                                  
  5767 00001516 89C3                    	mov	bx,ax				; BX = file handle
  5768 00001518 89FA                    	mov	dx,di				; DX = ptr to msg ptr
  5769 0000151A 31F6                    	xor	si,si				; SI = read count
  5770                                  mrRead:
  5771 0000151C 81EA0001                	sub	dx,100h				; DX = LSW of file offset
  5772 00001520 31C9                    	xor	cx,cx				; CX = MSW of file offset
  5773 00001522 B80042                  	mov	ax,4200h
  5774                                  	;mov	ax,LSEEK shl 8			; AX = 'Set File Pointer'
  5775 00001525 CD21                    	int	21h				; call DOS
  5776 00001527 721A                    	jc	short mrCloseFile		; handle error
  5777                                  
  5778                                  	;mov	dx,offset DATARES:MsgBuffer	; DS:DX = input buffer
  5779 00001529 BA[5E04]                	mov	dx,MsgBuffer
  5780 0000152C B94000                  	mov	cx,64				; CX = # bytes to read
  5781 0000152F B43F                    	mov	ah,3Fh
  5782                                  	;mov	ah,READ				; AH = 'Read File'
  5783 00001531 CD21                    	int	21h				; call DOS
  5784 00001533 720E                    	jc	short mrCloseFile		; handle error
  5785                                  
  5786 00001535 09F6                    	or	si,si				; (CY cleared)
  5787 00001537 750A                    	jnz	short mrCloseFile		; 2nd time thru - we're done
  5788 00001539 46                      	inc	si				; mark one read done
  5789 0000153A 8B16[5E04]              	mov	dx,[MsgBuffer]			; DX = ptr to message
  5790 0000153E 09D2                    	or	dx,dx
  5791 00001540 75DA                    	jnz	short mrRead			; go read the message
  5792 00001542 F9                      	stc					; null ptr found- no msg
  5793                                  
  5794                                  mrCloseFile:
  5795 00001543 9C                      	pushf				; save success/failure (CY)
  5796 00001544 B43E                    	mov	ah,3Eh
  5797                                  	;mov	ah,CLOSE		; AH = 'Close File'
  5798 00001546 CD21                    	int	21h			; call DOS
  5799                                  ;	Bugbug: should we avoid this popf?
  5800 00001548 9D                      	popf				; CY = success/failure
  5801 00001549 89D7                    	mov	di,dx			; ES:DI = ptr to msg, if successful
  5802 0000154B EB08                    	jmp	short mrRet		; we're done
  5803                                  
  5804                                  ;else	;ROMDOS
  5805                                  ;
  5806                                  ;;	DI = ptr to msg ptr
  5807                                  ;
  5808                                  ;	mov	si,di			; SI = ptr to msg ptr
  5809                                  ;	sub	si,100h			; SI = offset into image of msg ptr
  5810                                  ;	mov	cx,2			; CX = # bytes to copy from image
  5811                                  ;
  5812                                  ;;	ASSUME ES:NOTHING is still in effect.
  5813                                  ;
  5814                                  ;	push	ds
  5815                                  ;	pop	es				; ES = DATARES seg addr
  5816                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to buffer
  5817                                  ;	invoke	LoadFromROM			; copy msg ptr from ROM
  5818                                  ;	mov	si,word ptr MsgBuffer		; SI = ptr to message
  5819                                  ;	or	si,si
  5820                                  ;	jz	mrNoMsg			; null ptr- no message text
  5821                                  ;
  5822                                  ;	sub	si,100h			; SI = offset into image of msg
  5823                                  ;	mov	cx,64			; CX = # bytes to copy from image
  5824                                  ;	mov	di,offset DATARES:MsgBuffer
  5825                                  ;	invoke	LoadFromROM
  5826                                  ;	clc					; success
  5827                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to msg
  5828                                  ;	jmp	short mrRet
  5829                                  ;
  5830                                  ;mrNoMsg:
  5831                                  ;	stc
  5832                                  ;	jmp	short mrRet
  5833                                  ;
  5834                                  ;;;	mov	ax,COMMAND_SEG-10h	; AX = seg addr of COMMAND image
  5835                                  ;;;	mov	es,ax			; ES:DI = ptr to msg ptr in image
  5836                                  ;	assume	es:NOTHING
  5837                                  ;
  5838                                  ;endif	;ROMDOS
  5839                                  
  5840                                  ;*	Message ptr is in memory.
  5841                                  ;	If ptr is in memory, assume message is in memory (/msg).
  5842                                  
  5843                                  mrInMem:
  5844                                  	; 14/01/2023
  5845 0000154D 268B3D                  	mov	di,[es:di]		; ES:DI = ptr to msg
  5846 00001550 09FF                    	or	di,di			; (CY cleared)
  5847 00001552 7501                    	jnz	short mrRet		; found message
  5848 00001554 F9                      	stc				; null ptr found - no message
  5849                                  mrRet:	
  5850 00001555 5E                      	pop	si			; restore all registers
  5851 00001556 5A                      	pop	dx
  5852 00001557 59                      	pop	cx
  5853 00001558 5B                      	pop	bx
  5854 00001559 58                      	pop	ax
  5855                                  
  5856                                  ;	mov	ds,[OldDS]		; restore ds
  5857 0000155A 1F                      	pop	ds
  5858                                  	;assume	ds:nothing
  5859                                  
  5860 0000155B CB                      	retf	; 21/04/2023
  5861                                  
  5862                                  ;MsgRetriever endp
  5863                                  
  5864                                  ; M003; Start of changes for UMB support
  5865                                  
  5866                                  ; ----------------------------------------------------------------------------
  5867                                  ;***	Lh_OffUnlink -- Restore allocation strat and link state
  5868                                  ;
  5869                                  ;	ENTRY	al = Saved alloc strat and link state
  5870                                  ;			b0 = 1 if alloc strat to restore is HighFirst
  5871                                  ;			b1 = 1 if link state to restore is Linked
  5872                                  ;
  5873                                  ;	EXIT	None
  5874                                  ;
  5875                                  ;	USED	ax, bx, cx
  5876                                  ; ----------------------------------------------------------------------------
  5877                                  
  5878                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5879                                  
  5880                                  ;public	Lh_OffUnlink
  5881                                  Lh_OffUnlink:	; proc	far
  5882                                  	; 14/01/2023
  5883 0000155C 88C5                    	mov	ch,al
  5884 0000155E 88C1                    	mov	cl,al
  5885                                  	;;mov	ax,(ALLOCOPER shl 8) OR 0
  5886                                  	;mov	ax,(ALLOCOPER<<8)
  5887 00001560 B80058                  	mov	ax,5800h
  5888 00001563 CD21                    	int	21h
  5889 00001565 89C3                    	mov	bx,ax
  5890 00001567 D0C9                    	ror	cl,1				; b7 = HighFirst bit
  5891 00001569 80E180                  	and	cl,80h				; mask off b6-b0
  5892 0000156C 80E37F                  	and	bl,7fh				; mask off HighFirst bit
  5893 0000156F 08CB                    	or	bl,cl				; set HighFirst bit state
  5894                                  	;;mov	ax,(ALLOCOPER shl 8) OR 1
  5895                                  	;mov	ax,(ALLOCOPER<<8)|1
  5896 00001571 B80158                  	mov	ax,5801h
  5897 00001574 CD21                    	int	21h				; set alloc strat
  5898                                  
  5899 00001576 88EB                    	mov	bl,ch
  5900 00001578 D0EB                    	shr	bl,1
  5901 0000157A 30FF                    	xor	bh,bh				; bx = linkstate
  5902                                  	;mov	ax,(ALLOCOPER shl 8) OR 3
  5903                                  	;mov	ax,(ALLOCOPER<<8)|3
  5904 0000157C B80358                  	mov	ax,5803h
  5905 0000157F CD21                    	int	21h				; set linkstate
  5906                                  
  5907 00001581 CB                      	retf
  5908                                  
  5909                                  ;Lh_OffUnlink endp
  5910                                  
  5911                                  ; M003; End of changes for UMB support
  5912                                  ;public	EndCode
  5913                                  ; 14/01/2023
  5914                                  ;EndCode: ; label byte
  5915                                  ; 06/06/2023
  5916                                  ; 16/04/2023
  5917                                  EndCode equ ($-StartCode)+100h
  5918                                  ; 06/06/2023
  5919                                  ;EndCode equ $-StartCode
  5920                                  
  5921                                  ;CODERES ends
  5922                                  ;	end
  5923                                  
  5924                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5925                                  
  5926 00001582 00<rep Eh>              	times	(((EndCode+15)>>4)<<4)-EndCode db 0
  5927                                  
  5928                                  ;align 16
  5929                                  
  5930                                  ;=============================================================================
  5931                                  ; INIT.ASM, MSDOS 6.0 (COMMAND.COM), 1991
  5932                                  ;=============================================================================
  5933                                  ; 22/09/2018 - Retro DOS v3.0 ('command3.s')
  5934                                  
  5935                                  ; INIT.ASM (MSDOS 2.11 COMMAND.COM, Retro DOS v2.0, 30/04/2018)
  5936                                  
  5937                                  ;TITLE   COMMAND Initialization
  5938                                  
  5939                                  ;ENVIRONSIZ EQU  0A0H		; Must agree with values in ENVIRONMENT segment
  5940                                  ;ENVIRONSIZ2 EQU 092H
  5941                                  ;MAX_COMSPEC EQU ENVIRONSIZ2 ; = 146  ; 22/09/2018
  5942                                  
  5943                                  ; UINIT.ASM, MSDOS 6.0, 1991
  5944                                  ; 23/09/2018
  5945                                  ENVBIG	EQU 32768		;AN000; maximum environment size
  5946                                  ; 14/01/2023
  5947                                  ;ENVSML	EQU 160			;AN000; minimum environment size
  5948                                  
  5949                                  ; ----------------------------------------------------------------------------
  5950                                  
  5951                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5952                                  
  5953                                  ; 06/06/2023
  5954                                  ; (MSDOS 5.0 COMMAND.COM -initial- Environment Structure size)
  5955                                  ;ENVIRONSIZ equ 160
  5956                                  
  5957                                  ENVSML	equ 256	; minimum environment size
  5958                                  ;MAX_COMSPEC equ ENVIRONSIZ - Env_ComSpec
  5959                                  MAX_COMSPEC equ 146
  5960                                  ECOMSPEC equ 14
  5961                                  
  5962                                  ; 14/01/2023
  5963                                  TAB_CHAR equ 09h
  5964                                  SPACE_CHAR equ 20h	
  5965                                  
  5966                                  ; 06/06/2023
  5967                                  ; (MSDOS 6.22 COMMAND.COM -initial- Environment Structure size)
  5968                                  ;ENVIRONSIZ equ 180	; SIZE Environment
  5969                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  5970                                  ; (PCDOS 7.1 COMMAND.COM -initial- Environment Structure size)
  5971                                  ENVIRONSIZ equ 166	; SIZE Environment 
  5972                                  
  5973                                  ;----------------------------------------------------
  5974                                  ; MSDOS 6.0 - ENVDATA.ASM - 1991
  5975                                  ;----------------------------------------------------
  5976                                  ;Environment Struc	; Default COMMAND environment
  5977                                  ;
  5978                                  ;Env_PathString  db	"path="
  5979                                  ;Env_PathSpec	 db	"c:\msdos"
  5980                                  ;                db	0
  5981                                  ;Env_PrmptString db	"prompt="
  5982                                  ;Env_PrmptSpec   db	"$p$g"
  5983                                  ;                db	0
  5984                                  ;Env_ComString   db	"comspec="
  5985                                  ;Env_ComSpec     db	"\command.com"
  5986                                  ;		 db	134 dup (0)
  5987                                  ;
  5988                                  ;Environment ends
  5989                                  ;----------------------------------------------------
  5990                                  
  5991                                  ;-----------------------------------------------------------------------------
  5992                                  
  5993                                  ;-----------------------------------------------------------------------------
  5994                                  ; START OF INIT PORTION
  5995                                  ; This code is deallocated after initialization.
  5996                                  ;-----------------------------------------------------------------------------
  5997                                  
  5998                                  ;INIT	SEGMENT PUBLIC PARA
  5999                                  
  6000                                  ; 	EXTRN   HEADER:BYTE
  6001                                  ;	EXTRN   BADCOMLKMES:BYTE
  6002                                  
  6003                                  ;	PUBLIC  CONPROC
  6004                                  
  6005                                  ;ASSUME  CS:RESGROUP,DS:RESGROUP,ES:RESGROUP,SS:RESGROUP
  6006                                  
  6007                                          ;ORG 0
  6008                                  ;ZERO = $
  6009                                  	; 23/09/2018
  6010                                  ZERO equ $	; Offset 0E30h for original MSDOS 3.3 COMMAND.COM
  6011                                  
  6012                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6013                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1560h (CODERES:0820h)
  6014                                  
  6015                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6016                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1670h (CODERES:0820h)
  6017                                  ConProc:
  6018                                  	;mov	sp,offset ResGroup:RStack	; must be first instruction
  6019 00001590 BC[2E05]                	mov	sp,RStack
  6020                                  
  6021                                  ; We need to set the PSP to us right at start because Carousel needs
  6022                                  ; to be lied to and it does not set PSP when it transfers control to
  6023                                  ; us after loading us as an overlay. By setting PSP, we ensure that
  6024                                  ; command.com is also not lied to.
  6025                                  
  6026                                  	; 14/01/2023
  6027                                  	; MSDOS 6.0
  6028 00001593 B450                            mov	ah,50h
  6029                                  	;mov	ah,SET_CURRENT_PDB
  6030 00001595 8CC3                            mov	bx,es
  6031 00001597 CD21                            int	21h
  6032                                  
  6033                                  	; 14/01/2023
  6034                                  	;mov	ah,30h 
  6035                                  	;;mov	ax,GET_VERSION<<8 ; 3000h
  6036                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6037 00001599 B80030                  	mov	ax,3000h
  6038 0000159C CD21                    	int	21h
  6039                                  	;;;cmp	ax,EXPECTED_VERSION ; 1E03h
  6040                                  	;;cmp	ax,5
  6041                                  	;cmp	ax,EXPECTED_VERSION ; 0005h
  6042                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6043 0000159E 3D070A                  	cmp	ax,EXPECTED_VERSION ; 1606h
  6044                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  6045                                  	;cmp	ax,0A07h
  6046 000015A1 7411                    	je	short okdos			; DOS version is ok
  6047                                  
  6048 000015A3 BA[6821]                	mov	dx,BADVERMSG			; DX = ptr to msg
  6049 000015A6 E832FE                  	call	RPrint
  6050                                  
  6051                                  	; MSDOS 3.3
  6052                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  6053                                  	;int	21h             ; DOS - PRINT STRING
  6054                                  				; DS:DX -> string terminated by "$"
  6055 000015A9 8CC0                    	mov	ax,es
  6056 000015AB 2639061600              	cmp	[es:PDB.PARENT_PID],ax
  6057                                  	;cmp	[es:16h],ax			; if COMMAND is own parent,
  6058                                  Here:	
  6059 000015B0 74FE                    	jz	short Here			;  loop forever
  6060                                  	
  6061 000015B2 CD20                    	int	20h				; otherwise, exit
  6062                                  okdos:
  6063                                  	; 23/09/2018
  6064                                  
  6065                                  ;  Calculate and save the end of the INIT segment (which is also
  6066                                  ;  the beginning of TRANGROUP).
  6067                                  
  6068                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6069                                  	; MSDOS 3.3
  6070                                  	;mov	ah,65h
  6071                                  	;mov	al,2
  6072                                  	;mov	dx,-1
  6073                                  	;mov	bx,-1
  6074                                  	;mov	cx,5
  6075                                  	;mov	di,UCASE_ADDR
  6076                                  	;int	21h	; AH = 65h : GET EXTENDED COUNTRY INFORMATION (DOS 3.3+)
  6077                                  	;		; AL = 02h : Get pointer to character translation table
  6078                                  	;		; BX = code page (-1 = current global code page)
  6079                                  	;		; DX = country ID (-1 = current country)
  6080                                  	;		; CX = amount of data to return
  6081                                  	;; ES:DI = pointer to output buffer
  6082                                  	;; Buffer offset :
  6083                                  	;;	00h -  byte,  country Id
  6084                                  	;;  	01h -  dword, pointer to uppercase table	
  6085                                  
  6086                                  	; 14/01/2023
  6087                                  	; MSDOS 6.0 (& MSDOS 3.3)
  6088                                    	;mov	dx,232Fh     ; MSDOS 5.0 COMMAND.COM
  6089                                  	; 06/06/2023
  6090                                  	;mov	dx,26EFh     ; MSDOS 6.22 COMMAND.COM
  6091                                  	; 18/07/2024
  6092                                  	;mov	dx,289Fh     ; PCDOS 7.1 COMMAND.COM
  6093 000015B4 BAEF27                  	mov	dx,TRANSTART+15			; get end of init code
  6094                                  	; 27/09/2018
  6095                                  	;mov	dx,TRANSTART ; (paragraph aligned address)
  6096 000015B7 B104                    	mov	cl,4				; change to paragraphs
  6097 000015B9 D3EA                            shr	dx,cl				;
  6098 000015BB 8CC8                            mov     ax,cs                           ; get current segment
  6099 000015BD 01D0                            add     ax,dx                           ; calculate segment of end of init
  6100 000015BF A3[9520]                        mov     [initend],ax			; save this
  6101                                  
  6102                                  	; 14/01/2023
  6103                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1591h 
  6104                                  
  6105                                  ;  Check for /? on the command line. If found, display help text and exit.
  6106                                  ;  NOTE: this routine may terminate the program, never returning.
  6107                                  
  6108 000015C2 E8EA07                  	call	CheckHelp
  6109                                  
  6110                                  ; We have to patch the segment values for the various interrupt entry points.
  6111                                  ; This is because we need to have the default addresses of the handlers in our
  6112                                  ; stub before the relocation is done. These values will then be changed once
  6113                                  ; the resident is relocated
  6114                                  
  6115 000015C5 E81B0A                  	call	patch_segs
  6116                                  
  6117                                  ;  Turn APPEND off during initialization processing
  6118                                  
  6119                                  	; 14/01/2023
  6120 000015C8 B800B7                  	mov     ax,0B700h
  6121                                  	;mov	ax,APPENDINSTALL                ; see if append installed
  6122 000015CB CD2F                    	int	2Fh				;
  6123                                  	;cmp	al,0				; append installed?
  6124 000015CD 08C0                    	or	al,al
  6125 000015CF 7418                    	jz	short set_msg_addr		; no - continue
  6126                                  	
  6127 000015D1 B802B7                  	mov	ax,0B702h
  6128                                  	;mov	ax,APPENDDOS			; see if append DOS version right
  6129 000015D4 CD2F                    	int	2Fh				;
  6130                                  	;cmp	ax,-1				; append version correct?
  6131                                  	;jne	short set_msg_addr		; no - continue
  6132 000015D6 40                      	inc	ax ; -1 -> 0
  6133 000015D7 7510                    	jnz	short set_msg_addr        
  6134                                  	
  6135 000015D9 B806B7                  	mov     ax,0B706h
  6136                                  	;mov	ax,APPENDGETSTATE               ; Get the state of Append
  6137 000015DC CD2F                    	int	2Fh				;
  6138 000015DE 891E[BE02]                      mov     [Append_State],bx		; save append state
  6139                                         
  6140 000015E2 31DB                    	xor	bx,bx                           ; clear out state
  6141 000015E4 B807B7                  	mov	ax,0B707h
  6142                                  	;mov	ax,APPENDSETSTATE               ; Set the state of Append
  6143 000015E7 CD2F                    	int	2Fh				; set everything off
  6144                                  
  6145                                  set_msg_addr:
  6146                                  	; 14/01/2023
  6147                                  	;;mov	di,offset resgroup:DataresEnd 	; get address of resident end
  6148                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:15BAh) 
  6149                                  	;mov	di,093Eh  ; mov di,PAERRMSG0 ; MSDOS 5.0 COMMAND.COM
  6150                                  	; 06/06/2023
  6151                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:16CBh) 
  6152                                  	;mov	di,0A41h  ; mov di,PAERRMSG0 ; MSDOS 6.22 COMMAND.COM
  6153                                  	; 18/07/2024
  6154                                  	;mov	di,9F3h   ; mov di,PAERRMSG0 ; PCDOS 7.1 COMMAND.COM	
  6155 000015E9 BF[0509]                	mov	di,DataresEnd
  6156 000015EC 893E[B204]              	mov	[ResMsgEnd],di			; save it
  6157                                  
  6158 000015F0 E8020A                          call    get_XMMAddr                     ; get XMM call address
  6159                                  
  6160                                  ; Check if this is the first instance of command.com. If not, we just exit
  6161                                  ; this routine without moving any code.
  6162                                  ; After the int 2fh, ds:si points at the resident jump table in the previous
  6163                                  ; stub. We just have to copy this over
  6164                                  	
  6165                                  ;ifndef ROMDOS
  6166 000015F3 B80055                  	mov	ax,5500h
  6167                                  	;mov	ax,GET_COMMAND_STATE	
  6168                                  ;else
  6169                                  ;	mov	ax,GET_ROMCOMMAND_STATE	
  6170                                  ;endif ; ROMDOS
  6171                                  
  6172 000015F6 CD2F                    	int	2Fh	;  (Int 2Fh/AX=5500h - DOS 5+ - COMMAND.COM INTERFACE)
  6173                                  	;assume	ds:nothing
  6174                                  
  6175                                  	; 03/05/2023
  6176                                  	; Return:
  6177                                  	;   AX = 0000h if an instance of COMMAND.COM is already running
  6178                                  	;   DS:SI -> entry point table
  6179                                  
  6180                                  	; (si = offset Int2f_Entry)  ; (('MsgInt2fHandler:', 'fcOurs:'))
  6181                                  
  6182 000015F8 09C0                    	or	ax,ax
  6183 000015FA 750C                    	jnz	short first_com			; this is the first instance
  6184                                  
  6185                                  	; 14/01/2023
  6186 000015FC 268936[9A26]            	mov	[es:ResJmpTable],si		; save old stub jump table
  6187 00001601 268C1E[9C26]            	mov	[es:ResJmpTable+2],ds
  6188 00001606 EB06                    	jmp	short init_cntry
  6189                                  
  6190                                  first_com:
  6191 00001608 26C606[9E26]01          	mov	byte [es:FirstCom],1		; indicate first command.com
  6192                                  
  6193                                  init_cntry:
  6194                                  	; 14/01/2023
  6195 0000160E 06                      	push	es
  6196 0000160F 1F                      	pop	ds
  6197                                  	;assume	ds:RESGROUP
  6198                                  
  6199 00001610 B465                    	mov	ah,65h
  6200                                  	;mov	ah,GETEXTCNTRY			; get extended country info
  6201 00001612 B004                    	mov	al,4				; get file ucase table
  6202 00001614 BAFFFF                  	mov	dx,-1				;
  6203                                  	;mov	bx,-1				;
  6204 00001617 89D3                    	mov	bx,dx
  6205 00001619 B90500                  	mov	cx,5				; number of bytes we want
  6206                                  	;mov	di,offset resgroup:FUCase_Addr	; buffer for address
  6207 0000161C BF[B502]                	mov	di,FUCase_Addr
  6208 0000161F CD21                    	int	21h
  6209                                  		; DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
  6210                                  		; AL = function -
  6211                                  
  6212                                  ;	Bugbug:	conditionalize dbcs_vector stuff?
  6213                                  
  6214 00001621 1E                      	push	ds				;
  6215 00001622 B80063                  	mov	ax,6300h
  6216                                  	;mov	ax,(ECS_CALL shl 8) or GETLEADBTBL ;
  6217 00001625 CD21                    	int	21h				;
  6218                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
  6219                                  			
  6220 00001627 8CDB                    	mov	bx,ds				; get segment to bx
  6221 00001629 1F                      	pop	ds				;
  6222 0000162A 8936[BA02]              	mov	[Dbcs_Vector_Addr],si		; save address of
  6223 0000162E 891E[BC02]              	mov	[Dbcs_Vector_Addr+2],bx		; dbcs vector
  6224                                  
  6225                                  	;mov	ax,[16h]
  6226 00001632 A11600                  	mov	ax,[PDB.PARENT_PID]
  6227                                  				; mov ax,ds:16h	; Init PARENT so we can exit
  6228 00001635 A3[3E02]                	mov	[Parent],ax			;  correctly.
  6229 00001638 A10A00                  	mov	ax,[PDB.EXIT]   ; mov ax,ds:0Ah
  6230 0000163B A3[4002]                	mov	[OldTerm],ax
  6231 0000163E A10C00                  	mov	ax,[PDB.EXIT+2] ; mov ax,ds:0Ch
  6232 00001641 A3[4202]                	mov	[OldTerm+2],ax
  6233                                  
  6234                                  	; 14/01/2023
  6235                                  	;;;mov	ax,offset ResGroup:EndCode + 15
  6236                                  	;;mov	ax,1569h	; MSDOS 5.0 COMMAND.COM
  6237                                  	; 06/06/2023
  6238                                  	;mov	ax,1679h	; MSDOS 6.22 COMMAND.COM
  6239                                  	; 18/07/2024
  6240                                  	;mov	ax,16B3h	; PCDOS 7.1 COMMAND.COM
  6241                                  	
  6242                                  	;mov	ax,EndCode+15
  6243                                  	;;mov	ax,INITSTART+15 ; 24/09/2018
  6244                                  	; 14/01/2023
  6245                                  	;mov	cl,4				; ax = size of resident part of
  6246                                  	;shr	ax,cl				;  command in paragraphs. Add
  6247                                  	;mov	cx,cs				;  this to CS and you get the
  6248                                  	;add	ax,cx				;  segment of the TPA.
  6249                                  
  6250 00001644 8CC8                    	mov	ax,cs
  6251 00001646 056901                  	add	ax,(EndCode+15)>>4
  6252                                  	
  6253 00001649 A3[5804]                	mov	[Res_Tpa],ax			; Temporarily save the TPA segment
  6254 0000164C 2500F0                  	and	ax,0F000h
  6255 0000164F 050010                  	add	ax,1000h			; Round up to next 64K boundary
  6256 00001652 7303                    	jnc	short TpaSet			; Memory wrap if carry set
  6257 00001654 A1[5804]                	mov	ax,[Res_Tpa]
  6258                                  TpaSet:
  6259 00001657 A3[4C04]                	mov	[LTpa],ax			; Good enough for the moment
  6260                                  	;mov	ax,[2]
  6261 0000165A A10200                  	mov	ax,[PDB.BLOCK_LEN]		; ax = # of paras given to command
  6262                                  
  6263 0000165D 8C1E[5204]              	mov	[MySeg1],ds			; These 3 variables are used as part of
  6264 00001661 8C1E[5604]              	mov	[MySeg2],ds			;  3 long ptrs that the transient will
  6265 00001665 8C1E[4A04]              	mov	[MySeg],ds			;  use to call resident routines.
  6266                                  	; 19/04/2023
  6267                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1641h
  6268 00001669 8C1E[5607]              	mov	[MySeg3],ds			; segment of msg retriever routine 
  6269                                  
  6270 0000166D A3[9502]                	mov	[MemSiz],ax			; Needed for execing other programs
  6271                                  
  6272                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  6273                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1648h
  6274                                  
  6275                                  ; First reallocate the COMMAND size to its memory image
  6276                                  	
  6277 00001670 50                      	push	ax    
  6278                                    	;;;mov	bx,2320h  ; MSDOS 5.0 COMMAND.COM
  6279                                  	;;mov	bx,offset RESGROUP:TranStart    ;
  6280                                  	;mov	bx,TRANSTART
  6281                                  	;;add	bx,98C5h  ; MSDOS 5.0 COMMAND.COM
  6282                                          ;add	bx,offset TRANGROUP:TranSpaceEnd;
  6283                                  	;add	bx,15 ; *			; round up the size
  6284                                  	; 06/06/2023
  6285                                  	;mov	bx,26E0h  ; MSDOS 6.22 COMMAND.COM ; mov bx,offset RESGROUP:TranStart
  6286                                  	;add	bx,0AF95h ; MSDOS 6.22 COMMAND.COM ; add bx,offset TRANGROUP:TranSpaceEnd
  6287                                  	;add	bx,15 ; *			; round up the size
  6288                                  
  6289                                  	; 03/05/2023
  6290                                  	;mov	bx,TRANSTART+15 ; * ; 14/01/2023
  6291                                  	;add	bx,TRANSPACEEND
  6292                                  	; 06/06/2023
  6293                                  	;mov	bx,TRANSTART+TRANSPACEEND+15 
  6294                                          ;mov	cl,4				;
  6295                                          ;shr	bx,cl				; size of command.com
  6296 00001671 BBDD0C                  	mov	bx,(TRANSTART+TRANSPACEEND+15)>>4
  6297                                  
  6298 00001674 B44A                    	mov	ah,4Ah
  6299                                  	;mov	ah,SETBLOCK			; free all memory above pgm
  6300 00001676 CD21                            int     21h				;
  6301 00001678 58                              pop     ax				;
  6302                                  	
  6303                                  ; Compute maximum size of environment
  6304                                  
  6305                                  	;;mov	word [ENVMAX],69 ; = (160/16)+(973/16)-1 ; (11EEh-0E30h+0Fh/10h) = 3Ch
  6306                                          ;mov	word [ENVMAX],((ENVIRONSIZ+15)/16) + ((ENVMAXIMUM-ZERO+15)/16) - 1
  6307                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  6308                                  	;mov	word [EnvMax],81	; 10+72-1  ; MSDOS 5.0 COMMAND.COM
  6309                                  	;mov	word [EndMax],90	; 12+79-1  ; MSDOS 6.22 COMMAND.COM	
  6310                                  	; 22/07/2024
  6311                                  	;mov	word [EndMax],95	; 
  6312 00001679 C706[8920]5800          	mov	word [EnvMax],((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1
  6313                                  			; MSDOS 6.22	; 12+(((1B53h-1670h)+15)/16)-1 = 90
  6314                                  			; PCDOS 7.1	; ((166+15+)/16)+(1BF5h-16B0h+15)/16)-1 = 95
  6315                                  ;
  6316                                  ; Compute minimum size of environment
  6317                                  ;
  6318                                  	;;mov	word [EnvSiz],10 ; = 160/16	; MSDOS 3.3 COMMAND.COM
  6319                                  	;mov	word [EnvSiz],16 ; = 256/16	; MSDOS 5.0 COMMAND.COM
  6320 0000167F C706[8720]1000          	mov	word [EnvSiz],ENVSML/16 ; 256/16
  6321                                  
  6322                                  	;;;mov	dx,offset TranGroup:Transpaceend + 15 ; dx = size of transient
  6323                                  	;;mov	dx,98D4h	; MSDOS 5.0 COMMAND.COM
  6324                                  	; 06/06/2023
  6325                                  	;;mov	dx,0AFA4h	; MSDOS 6.22 COMMAND.COM
  6326                                  	;mov	dx,TRANSPACEEND+15 ; 4D5Ch+0Fh (for MSDOS 3.3 COMMAND.COM)
  6327                                  	; 22/07/2024
  6328                                  	;mov	dx,0AAA9h	; PCDOS 7.1 COMMAND.COM (0AA9Ah+0Fh)
  6329                                  	;mov	cl,4				;  in paragraphs.
  6330                                  	;shr	dx,cl
  6331 00001685 BA5F0A                  	mov	dx,(TRANSPACEEND+15)>>4
  6332                                  
  6333 00001688 8916[9720]                      mov     [TrnSize],dx			; save size of transient in paragraphs
  6334                                  
  6335 0000168C 29D0                    	sub	ax,dx				; max seg addr - # para's needed for transient
  6336 0000168E A3[8F02]                	mov	[TrnSeg],ax			;  = seg addr to load the transient at.
  6337                                  	;mov	ax,[2Ch]
  6338 00001691 A12C00                  	mov	ax,[PDB.ENVIRON]		; ax = environment segment
  6339                                  
  6340                                  	; 14/01/2023
  6341                                          ; MSDOS 6.0
  6342                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6343 00001694 A3[3A04]                	mov	[EnvirSeg],ax
  6344                                          
  6345                                  	; 21/01/2023
  6346 00001697 09C0                    	or	ax,ax				; if there is no environment segment,
  6347 00001699 7407                    	jz	short buildenv			; make one
  6348                                    
  6349                                  	; 21/01/2023
  6350                                  	; MSDOS 3.3 & MSDOS 5.0
  6351                                  	;;inc	byte [CHUCKENV]
  6352                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6353                                  	;inc	byte [AllocedEnv]		; Flag - old environment segment
  6354                                  	
  6355                                  	; MSDOS 3.3 & MSDOS 5.0
  6356                                  	; 06/06/2023
  6357                                  	;jmp	short environpassed
  6358                                  	
  6359                                  	; MSDOS 6.0
  6360                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM	
  6361 0000169B 803E[9E26]00            	cmp	byte [FirstCom],0		; if this is the first command.com,
  6362 000016A0 7403                    	je	short environpassed		; do a merge job (make sure COMSPEC exists)
  6363                                  
  6364                                  	; MSDOS 6.0
  6365                                  
  6366                                  ; We allocate a buffer here just large enough to hold the 'PATH=' and
  6367                                  ; the COMSPEC. After parsing, we will allocate an environment of the right
  6368                                  ; size and free this buffer. We need this buffer because we no longer have an
  6369                                  ; ENVIRONMENT segment but need a place to store the COMSPEC which can be
  6370                                  ; given on the command line before we know the environment size. This routine
  6371                                  ; will not return in case of an allocation error. It will either exit or hang
  6372                                  ; depending on whether or not this is the first COMMAND.COM or not.
  6373                                  
  6374                                  	; 14/01/2023
  6375                                  buildenv:
  6376 000016A2 E8E607                  	call	alloc_env                       ; try to allocate buffer
  6377                                  environpassed:
  6378                                  	; 14/01/2023 - MSDOS 5.0 COMMAND.COM
  6379                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6380                                  	;mov	[EnvirSeg],ax
  6381                                  	;
  6382 000016A5 8EC0                    	mov	es,ax                           ; and it load into es.
  6383                                  	;assume	es:nothing
  6384                                  
  6385                                  gottheenvir:
  6386                                  
  6387                                  ; Initialize the command drive
  6388                                  
  6389                                  	; 14/01/2023
  6390                                  	; MSDOS 3.3 & MSDOS 6.0
  6391 000016A7 B419                    	mov	ah,19h
  6392                                  	;mov	ah,GET_DEFAULT_DRIVE	; 19h
  6393 000016A9 CD21                    	int	21h
  6394 000016AB FEC0                    	inc	al
  6395 000016AD A2[9402]                	mov	[ComDrv],al
  6396                                  
  6397                                          ;mov	al,byte ptr ds:[FCB]	; al = default drive number for command
  6398 000016B0 A05C00                          mov	al,[FCB] ; [5Ch]
  6399 000016B3 08C0                    	or	al,al
  6400 000016B5 7433                    	jz	short nocomdrv		; no drive specified
  6401                                  
  6402 000016B7 B43A                    	mov	ah,':'
  6403 000016B9 A2[9402]                	mov	[ComDrv],al
  6404 000016BC 0440                    	add	al,40h			; convert number to uppercase character
  6405                                  
  6406 000016BE FD                      	std
  6407                                  
  6408                                  	; MSDOS 6.0
  6409                                  	; 06/06/2023
  6410                                  	; MSDOS 6.22 - COMMAND.COM - RESGROUP:17B7h
  6411 000016BF 803E[5920]00            	cmp	byte [AllocedEnv],0	; if a new environment is being built,
  6412 000016C4 7420                    	je	short notwidenv		;  move the default comspec string in it
  6413                                  	; 14/01/2023
  6414                                  	; MSDOS 5.0 COMMAND.COM
  6415 000016C6 8B3E[7020]              	mov	di,[ComspOffset]
  6416 000016CA 26807D013A                      cmp	byte [es:di+1],':'	; drive specifier already exist?
  6417 000016CF 7415                            je	short notwidenv		; yes, must have been inherited that way
  6418                                  
  6419                                  	; 06/06/2023
  6420                                  	; MSDOS 3.3
  6421                                  	;;cmp	byte [CHUCKENV],0
  6422                                  	;;jne	short NOTWIDENV
  6423                                  	; 21/01/2021
  6424                                  	; MSDOS 5.0 - COMMAND.COM - RESGROUP:16A5h
  6425                                   	;cmp	byte [AllocedEnv],0
  6426                                  	;ja	short notwidenv
  6427                                  
  6428 000016D1 1E                        	push	ds			;  2 bytes to make room for a drivespec.
  6429 000016D2 06                      	push	es			;  the drivespec is in ax and is copied
  6430 000016D3 1F                      	pop	ds			;  on to the front of the string.
  6431                                  
  6432                                  ; 06/06/2023
  6433                                  %if 0
  6434                                  	; 21/01/2023
  6435                                  	; 14/01/2023
  6436                                  	; MSDOS 5.0 COMMAND.COM
  6437                                  	; MSDOS 3.3
  6438                                  	; 23/09/2018
  6439                                  	; 30/04/2018
  6440                                  	;mov	di,159
  6441                                  	;;MOV	DI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-1-10H
  6442                                  	;mov	di,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-1 ; mov di,9Fh
  6443                                  	mov	di,ENVIRONSIZ-1 ; 21/01/2023
  6444                                  	;mov	si,157
  6445                                  	;;MOV	SI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-3-10H
  6446                                          ;mov	si,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-3 ; mov si,9Dh 
  6447                                  	mov	si,ENVIRONSIZ-3 ; 21/01/2023 	
  6448                                  	;MOV	CX,ENVIRONSIZ2-2 ; mov cx,90h
  6449                                  	mov	cx,MAX_COMSPEC-2 ; 144
  6450                                  %endif
  6451                                  	; MSDOS 6.0
  6452                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM - RESGROUP:17CCh
  6453 000016D4 8DB58F00                        lea	si,[di+MAX_COMSPEC-3]	; lea si,[di+143]
  6454 000016D8 8DBD9100                        lea	di,[di+MAX_COMSPEC-1]	; lea di,[di+145]
  6455                                  
  6456 000016DC B99000                          mov	cx,MAX_COMSPEC-2 ; 144
  6457                                  
  6458 000016DF F3A4                    	rep	movsb
  6459 000016E1 1F                      	pop	ds
  6460                                  
  6461                                  	; MSDOS 6.0
  6462                                  	; 06/06/2023
  6463 000016E2 268945FF                	mov	[es:di-1],ax
  6464                                  
  6465                                  	; MSDOS 3.3
  6466                                  	;mov	[es:0Eh],ax
  6467                                  	;;;MOV	WORD PTR ES:[ECOMSPEC-10H],AX
  6468                                  	;;MOV	[es:(ECOMSPEC-ENVIRONMENT)],ax	; mov [es:0Eh],ax
  6469                                  	; 14/01/2023
  6470                                  	; 06/06/2023
  6471                                  	;mov	[es:ECOMSPEC],ax ; mov [es:0Eh],ax
  6472                                  
  6473                                  	; MSDOS 3.3 & MSDOS 6.0
  6474                                  notwidenv:
  6475 000016E6 FC                      	cld
  6476 000016E7 A3[3B20]                	mov	[AUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6477                                  
  6478                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  6479                                  %if 0
  6480                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6481                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C3h)
  6482                                  	; 06/06/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6483                                  	mov	[KAUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6484                                  %endif
  6485                                  
  6486                                  nocomdrv:
  6487 000016EA E841FA                  	call	SetVect        ; Set the vectors
  6488                                  
  6489                                  ; parsing starts here
  6490                                  
  6491                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6492                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:16C9h - CODERES:0989h)
  6493                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6494                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:17E8h - CODERES:0998h)
  6495                                  	; MSDOS 6.0
  6496 000016ED 0E                      	push	cs
  6497 000016EE 0E                      	push	cs
  6498 000016EF 1F                      	pop	ds
  6499 000016F0 07                      	pop	es
  6500                                  	;assume ds:ResGroup,es:ResGroup
  6501                                  
  6502 000016F1 BE8000                  	mov	si,80h				; get command line
  6503 000016F4 AC                      	lodsb					; get length of line
  6504 000016F5 89F7                    	mov	di,si				; get line position in di
  6505 000016F7 30E4                    	xor	ah,ah				; ax = length of command line
  6506                                  
  6507                                  ; insure that the command line correctly ends with a cr
  6508                                  
  6509 000016F9 01C7                    	add	di,ax				; go to end of command line
  6510 000016FB C6050D                          mov	byte [di],0Dh			; insert a carriage return
  6511 000016FE 31C9                    	xor	cx,cx				; clear cx
  6512 00001700 890E[6421]                      mov	[num_positionals],cx		; initialize positionals
  6513                                  
  6514                                  ; Scan the command line looking for the parameters
  6515                                  
  6516                                  Parse_command_line:
  6517                                  	;mov	di,offset ResGroup:Parse_Command; Get address of parse_command
  6518 00001704 BF[9E20]                	mov	di,PARSE_COMMAND
  6519 00001707 8B0E[6421]              	mov	cx,[num_positionals]		; Get number of positionals
  6520 0000170B 31D2                    	xor	dx,dx				; clear dx
  6521 0000170D 8936[6621]                      mov	[old_parse_ptr],si		; save position before calling parser
  6522                                  	;call	dword ptr Init_Parse
  6523 00001711 FF1E[9320]              	call	far [Init_Parse]		; call parser
  6524 00001715 890E[6421]                      mov     [num_positionals],cx		; Save number of positionals
  6525                                  	; 29/01/2023
  6526                                  	;;cmp	ax,END_OF_LINE ; 0FFFFh ; -1 	; are we at end of line?
  6527                                          ;cmp	ax,-1
  6528                                  	;jne	short t1
  6529                                  	; 10/06/2023
  6530 00001719 40                      	inc	ax	 ; cmp ax,-1
  6531 0000171A 7503                    	jnz	short t1 ; 0FFFFh -> 0
  6532                                  	; ax = 0
  6533 0000171C E99502                  	jmp     ArgsDone                        ; yes - exit
  6534                                  t1:	
  6535                                  	;;cmp	ax,RESULT_NO_ERROR ; 0		; did an error occur
  6536                                  	;;cmp	ax,0
  6537                                  	;and	ax,ax
  6538                                  	; 10/06/2023
  6539 0000171F 48                      	dec	ax  ; cmp ax,0
  6540 00001720 7468                    	jz	short parse_cont  ; 1 -> 0	; no - continue
  6541                                  
  6542                                  ; Before issuing error message - make sure switch is not /C
  6543                                  
  6544                                  parse_line_error:
  6545                                  	; 14/01/2023
  6546                                  	;push	si				; save line position
  6547                                  	;push	ax				; save error number
  6548                                  	;cmp	ax,3
  6549 00001722 83F803                  	cmp	ax,BadSwt_Ptr ; 3		; Was error invalid switch?
  6550                                          ;jnz	short parse_line_error_disp	; No - just issue message
  6551 00001725 7538                    	jne	short parse_line_error_disp2
  6552 00001727 56                      	push	si ; **				; save line position
  6553 00001728 50                      	push	ax ; *				; save error number
  6554 00001729 89F7                    	mov	di,si				; Get terminating pointer in DI
  6555 0000172B 8B36[6621]                      mov     si,[old_parse_ptr]		; Get starting pointer in SI
  6556                                  
  6557                                  init_chk_delim:
  6558 0000172F 39FE                    	cmp	si,di				; at end of parsed parameter?
  6559 00001731 742A                            je	short parse_line_error_disp	; Yes - just display message
  6560 00001733 AC                      	lodsb					;
  6561 00001734 3C20                    	cmp	al,20h ; ' ' ; 16/04/2023
  6562                                  	;cmp	al,space_chr ; 14/01/2023
  6563                                  	;;cmp	al,[space]			; Skip blank spaces
  6564 00001736 74F7                    	je	short init_chk_delim		;
  6565                                  	;cmp	al,9
  6566 00001738 3C09                    	cmp	al,tab_chr ; 9			; Skip tab characters
  6567 0000173A 74F3                    	je	short init_chk_delim		;
  6568                                  
  6569 0000173C 3A06[4E04]              	cmp	al,[RSwitChar]	; '/'		; Switch?
  6570 00001740 751B                            jne	short parse_line_error_disp	; No - just issue message
  6571 00001742 AC                      	lodsb					; Get the char after the switch
  6572                                  
  6573                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  6574                                  ;ifdef	DBCS
  6575                                  %if 1
  6576 00001743 E837FD                  	call	ITestKanj			; Is it DBCS?
  6577 00001746 7515                    	jnz	short parse_line_error_disp	; Yes - can't be /C or /K
  6578                                  %endif
  6579                                  ;endif
  6580 00001748 E8D505                  	call	iupconv 			; upper case it
  6581                                  
  6582                                  	;cmp	al,[scswitch]	; 'C'		; it is /C?
  6583                                          ;jne	short check_k_too ; MSDOS 6.0	;
  6584                                  	; 16/04/2023
  6585 0000174B 3C43                    	cmp	al,'C' ; scswitch
  6586                                  	;jne	short parse_line_error_disp  ; MSDOS 5.0 COMMAND.COM
  6587                                  	; 06/06/2023
  6588                                  	; MSDOS 6.22 COMMAND.COM
  6589 0000174D 7505                    	jne	short check_k_too
  6590 0000174F 5A                      	pop	dx ; *				; even up stack
  6591 00001750 5A                      	pop	dx ; **				; even up stack
  6592 00001751 E9D100                  	jmp	SetSSwitch			; Yes - go set COMMAND /C
  6593                                  
  6594                                  	; MSDOS 6.0
  6595                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6596                                  check_k_too:
  6597                                  	;cmp	al,[skswitch]	; 'K'		; it is /K?
  6598                                          ;jne	short parse_line_error_disp	;
  6599                                  	; 06/06/2023
  6600 00001754 3C4B                    	cmp	al,'K'
  6601 00001756 7505                    	jne	short parse_line_error_disp
  6602 00001758 5A                      	pop	dx ; *				; even up stack
  6603 00001759 5A                      	pop	dx ; **				; even up stack
  6604 0000175A E9C100                          jmp	SetKSwitch			; Yes - go set COMMAND /K
  6605                                  
  6606                                  parse_line_error_disp:
  6607                                  	; 14/01/2023
  6608 0000175D 58                      	pop	ax ; *				; restore error number
  6609 0000175E 5E                      	pop	si ; **				; restore line position
  6610                                  parse_line_error_disp2:
  6611 0000175F 89C2                    	mov	dx,ax				; get message number
  6612 00001761 E84C05                  	call	RPrintParse
  6613 00001764 E871FC                  	call	crlf
  6614 00001767 EB9B                            jmp     short Parse_command_line        ; continue parsing
  6615                                  
  6616                                  ; 22/07/2024
  6617                                  
  6618                                  ;CHECKDSWITCH:
  6619                                  	;;cmp	al,'d'
  6620                                          ;cmp	al,[letter_d]
  6621                                  	;jnz	short CHECKCSWITCH
  6622                                  
  6623                                  ; 16/04/2023
  6624                                  %if 1
  6625                                  SetMSwitch:
  6626                                          ;cmp	byte [ext_msg],1
  6627 00001769 803E[9920]01            	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6628                                  	; 16/04/2023
  6629                                  	;jnz	short setMswitchok		; no - set it
  6630                                  	;;mov	ax,1
  6631                                  	;mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6632                                  	;jmp	parse_line_error                ; go issue error message
  6633                                  	; 16/04/2023
  6634 0000176E 747C                    	je	short parse_line_error_j
  6635                                  setMswitchok:
  6636                                          ;mov	byte [ext_msg],1
  6637 00001770 C606[9920]01            	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6638                                  	; 06/06/2023
  6639 00001775 EB8D                    	jmp	short Parse_command_line	; keep parsing
  6640                                  %endif
  6641                                  
  6642                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6643                                  
  6644                                  SetDSwitch:
  6645                                  
  6646                                  ; Flag no date/time prompting.
  6647                                  
  6648                                  	; MSDOS 6.0
  6649 00001777 803E[9B20]00            	cmp	byte [dswitch],0	; has /D switch been set?
  6650                                  	; 16/04/2023
  6651                                  	;jz	short setdateok		; no - set it
  6652                                          ;;mov	ax,1
  6653                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6654                                          ;jmp	parse_line_error	; go issue error message
  6655                                  	; 16/04/2023
  6656 0000177C 756E                    	jnz	short parse_line_error_j
  6657                                  setdateok:
  6658 0000177E FE06[9B20]              	inc	byte  [dswitch]		; indicate /D entered
  6659                                  
  6660                                  	; MSDOS 3.3 & MSDOS 6.0
  6661 00001782 C606[4C20]01                    mov	byte [PRDATTM],1	; User explicitly says no date time
  6662                                  	; MSDOS 3.3
  6663                                  	;jmp	short CHKARG
  6664                                  	; MSDOS 6.0
  6665 00001787 E97AFF                  	jmp     Parse_command_line	; continue parsing
  6666                                  
  6667                                  parse_cont:
  6668                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6669                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:173Ch - CODERES:09FCh)
  6670                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6671                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:1869h - CODERES:0A19h)
  6672                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6673                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:18AEh
  6674                                  
  6675                                  	; MSDOS 6.0
  6676                                  
  6677                                  ; See if a switch was entered
  6678                                  ;
  6679                                  ; Bugbug: See if Comnd1_Syn can be moved into a reg. before the compare
  6680                                  
  6681 0000178A 813E[5D21][DD20]        	cmp	word [COMND1_SYN],COMMAND_F_SYN ; was /F entered?
  6682 00001790 7460                    	je	short SetFSwitch		; yes go set fail switch
  6683 00001792 813E[5D21][D120]        	cmp	word [COMND1_SYN],COMMAND_P_SYN ; was /P entered?
  6684 00001798 744B                    	je	short SetPSwitch		; yes go set up PERMCOM
  6685 0000179A 813E[5D21][E920]        	cmp	word [COMND1_SYN],COMMAND_D_SYN ; was /D entered?
  6686 000017A0 74D5                    	je	short SetDSwitch		; yes go set date switch
  6687 000017A2 813E[5D21][0E21]        	cmp	word [COMND1_SYN],COMMAND_C_SYN ; was /C entered?
  6688 000017A8 747B                    	je	short SetSSwitch		; yes go set up SINGLECOM
  6689                                  	; 06/06/2023
  6690                                  	; MSDOS 6.0 only!
  6691 000017AA 813E[5D21][3421]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; was /K entered?
  6692 000017B0 746C                            je	short SetKSwitch		; yes go set up SINGLECOM
  6693                                  	;
  6694 000017B2 813E[5D21][F520]        	cmp	word [COMND1_SYN],COMMAND_E_SYN ; was /E entered?
  6695 000017B8 747C                    	je	short SetESwitch		; yes go set up environment
  6696                                  
  6697                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6698                                  ; PCDOS 7.1 COMMAND.COM
  6699                                  %if 1
  6700 000017BA 813E[5D21][4021]        	cmp	word [COMND1_SYN],COMMAND_Y_SYN ; was /Y entered?
  6701                                  	;je	short SetYSwitch		; yes (step switch)
  6702                                  	; 22/07/2024
  6703 000017C0 7508                    	jne	short parse_cont_@
  6704                                  
  6705                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:19C3h
  6706                                  SetYSwitch:
  6707 000017C2 800E[5A04]10            	or      byte [Y_Flag], 10h
  6708 000017C7 E93AFF                  	jmp     Parse_command_line
  6709                                  
  6710                                  parse_cont_@:
  6711                                  %endif
  6712 000017CA 813E[5D21][1A21]        	cmp	word [COMND1_SYN],COMMAND_M_SYN	; was /MSG entered?
  6713                                  	;je	short SetMSwitchjmp		; yes go set up message flag
  6714                                  	; 15/01/2023
  6715 000017D0 7497                    	je	short SetMSwitch 
  6716                                  
  6717                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6718                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:18FDh
  6719                                  %if 1
  6720 000017D2 813E[5D21][4C21]        	cmp	word [COMND1_SYN],COMMAND_H_SYN	; was /H entered?
  6721 000017D8 747A                    	je	short SetHSwitch		; yes (load into UMB switch)
  6722 000017DA 813E[5D21][5821]        	cmp	word [COMND1_SYN],COMMAND_O_SYN	; was /O entered?
  6723 000017E0 747F                    	je	short SetOSwitch		; yes (disable overwrite prompt)
  6724                                  %endif
  6725 000017E2 E99800                  	jmp	ChkOtherArgs		; Must be something else
  6726                                  
  6727                                  	; MSDOS 6.0
  6728                                  ;SetMSwitchjmp:
  6729                                  	;jmp	SetMSwitch
  6730                                  
  6731                                  ; 22/07/2024
  6732                                  %if 1
  6733                                  SetPSwitch:
  6734                                  
  6735                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6736                                  ; termination address.
  6737                                  
  6738                                  	; MSDOS 6.0
  6739 000017E5 803E[A202]00            	cmp	byte [PermCom],0	; has /p switch been set?
  6740 000017EA 7415                    	jz	short permcomok		; no - set it
  6741                                  	; 16/04/2023
  6742                                  parse_line_error_j:
  6743                                          ;mov	ax,1
  6744 000017EC B80100                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6745 000017EF E930FF                          jmp	parse_line_error	; go issue error
  6746                                  %endif
  6747                                  	
  6748                                  	; MSDOS 6.0
  6749                                  SetFSwitch:
  6750 000017F2 803E[A902]FF            	cmp	byte [fFail],-1		; has fail switch been set?
  6751                                  	; 16/04/2023
  6752                                  	;jne	short failok		; no - set it
  6753                                  	;;mov	ax,1
  6754                                  	;mov	ax,MoreArgs_Ptr         ; set up too many arguments
  6755                                          ;jmp	parse_line_error        ; go issue error 
  6756                                  	; 16/04/2023
  6757 000017F7 74F3                    	je	short parse_line_error_j
  6758                                  
  6759                                  	; MSDOS 3.3 & MSDOS 6.0
  6760                                  failok:
  6761 000017F9 C606[A902]FF            	mov	byte [fFail],-1		; fail all INT 24s.
  6762                                  	; MSDOS 3.3
  6763                                  	;jmp	short CHKARG
  6764                                  	; MSDOS 6.0
  6765 000017FE E903FF                  	jmp	Parse_command_line
  6766                                  
  6767                                  ;CHECKPSWITCH:
  6768                                  	;;cmp	al,'p'			; Permanent COMMAND switch
  6769                                  	;cmp	al,[letter_p]
  6770                                          ;jnz	short CHECKDSWITCH
  6771                                  
  6772                                  ; 22/07/2024
  6773                                  %if 0
  6774                                  SetPSwitch:
  6775                                  
  6776                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6777                                  ; termination address.
  6778                                  
  6779                                  	; MSDOS 6.0
  6780                                  	cmp	byte [PermCom],0	; has /p switch been set?
  6781                                  	jz	short permcomok		; no - set it
  6782                                  	; 16/04/2023
  6783                                  parse_line_error_j:
  6784                                          ;mov	ax,1
  6785                                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6786                                          jmp	parse_line_error	; go issue error
  6787                                  %endif
  6788                                  
  6789                                  permcomok:
  6790                                  	; MSDOS 3.3 & MSDOS 6.0
  6791 00001801 FE06[A202]              	inc	byte [PermCom]
  6792                                  	;mov	word [OLDTERM],LODCOM
  6793 00001805 C706[4002][E000]        	mov	word [OldTerm],LodCom_Trap
  6794                                  	;mov	[OLDTERM+2],ds
  6795 0000180B 8C1E[4202]              	mov	[OldTerm+2],ds
  6796                                  
  6797                                  ; make sure that we display the date and time. if the flag was not
  6798                                  ; initialized, set it to indicate yes, do prompt.
  6799                                  
  6800                                  	; MSDOS 3.3
  6801                                  	;cmp	byte [PRDATTM],-1
  6802                                  	;jnz	short CHKARG
  6803                                  	;mov	byte [PRDATTM],0
  6804                                  	;jmp	short CHKARG
  6805                                  
  6806                                  	; MSDOS 6.0
  6807 0000180F 803E[4C20]FF            	cmp	byte [PRDATTM],-1
  6808 00001814 7505                    	jne	short Parse_command_line_jmp
  6809 00001816 C606[4C20]00            	mov	byte [PRDATTM],0
  6810                                  Parse_command_line_jmp:
  6811 0000181B E9E6FE                  	jmp     Parse_command_line	; keep parsing
  6812                                  
  6813                                  ;COMRETURNSJ:
  6814                                  ;	; MSDOS 3.3
  6815                                  ;	JMP	ARGSDONE
  6816                                  
  6817                                  	; 15/01/2023
  6818                                  	; MSDOS 6.0 
  6819                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6820                                  SetKSwitch:
  6821 0000181E C606[A302]00            	mov	byte [SemiPermCom],0
  6822 00001823 EB05                    	jmp	short SetSorKSwitch
  6823                                  
  6824                                  ;CHECKCSWITCH:
  6825                                  	;;cmp	al,'c'
  6826                                  	;cmp	al,[letter_c]
  6827                                          ;jnz	short CHECKESWITCH
  6828                                  
  6829                                  SetSSwitch:
  6830                                  ;SETCSWITCH:
  6831                                  
  6832                                  ; Set up pointer to command line, flag no date/time and turn off SingleCom.
  6833                                  
  6834 00001825 C606[A202]00            	mov	byte [PermCom],0	; A SingleCom must not be a PermCom
  6835                                  SetSorKSwitch:	; 06/06/2023
  6836 0000182A 8936[A502]              	mov	[SingleCom],si		; Point to the rest of the command line
  6837 0000182E C606[4C20]01            	mov	byte [PRDATTM],1	; no date or time either, explicit
  6838                                  ;COMRETURNSJ: ; 24/09/2018
  6839 00001833 E97E01                  	jmp     ArgsDone
  6840                                  
  6841                                  ;CHECKESWITCH:
  6842                                  	;cmp	al,'e'
  6843                                  	;jnz	short CHKARG
  6844                                  
  6845                                  ; Look for environment-size setting switch
  6846                                  
  6847                                  ; The environment size is represented in decimal bytes and is
  6848                                  ; converted into paragraphs (rounded up to the next paragraph).
  6849                                  
  6850                                  SetESwitch:
  6851                                  	; MSDOS 6.0
  6852 00001836 803E[9A20]00            	cmp	byte [eswitch],0	; has environment size switch been set?
  6853                                  	; 16/04/2023
  6854                                  	;jz	short eswitchok		; no - set it
  6855                                  	;;mov	ax,1
  6856                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6857                                          ;jmp	parse_line_error	; go issue error message
  6858                                  	; 16/04/2023
  6859 0000183B 75AF                    	jnz	short parse_line_error_j
  6860                                  eswitchok:
  6861 0000183D FE06[9A20]              	inc	byte [eswitch]		; indicate /E entered 	
  6862                                  
  6863                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6864                                  	; 15/01/2023 - Retro DOS v4.1 (& v4.1) - MSDOS 5.0 COMMAND.COM
  6865                                  	; MSDOS 6.0
  6866                                  	;mov	di,offset ResGroup:Comnd1_Addr	; get number returned
  6867 00001841 BF[5F21]                        mov	di,COMND1_ADDR
  6868 00001844 8B1D                    	mov     bx,[di]				; into bx
  6869                                  
  6870 00001846 83C30F                  	add	bx,0Fh				; Round up to next paragraph
  6871 00001849 B104                    	mov	cl,4				; convert to pargraphs
  6872 0000184B D3EB                    	shr	bx,cl				; by right 4
  6873                                  
  6874 0000184D 891E[8720]              	mov	[EnvSiz],bx			; EnvSiz is in paragraphs
  6875 00001851 E9B0FE                  	jmp	Parse_command_line		; continue parsing command line
  6876                                  
  6877                                  ; 16/04/2023
  6878                                  %if 0
  6879                                  SetMSwitch:
  6880                                          ;cmp	byte [ext_msg],1
  6881                                  	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6882                                  	jnz	short setMswitchok		; no - set it
  6883                                  	;mov	ax,1
  6884                                  	mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6885                                  	jmp	parse_line_error                ; go issue error message
  6886                                  setMswitchok:
  6887                                          ;mov	byte [ext_msg],1
  6888                                  	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6889                                  	jmp	Parse_command_line              ; keep parsing
  6890                                  %endif
  6891                                  
  6892                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6893                                  %if 1
  6894                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:1913h
  6895                                  SetHSwitch:
  6896                                  	;jmp	short load_to_hma_umb	; load COMMAND.COM into HMA/UMB
  6897                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:19CBh
  6898                                  load_to_hma_umb:
  6899                                  	;cmp	byte [520h],0
  6900 00001854 803E[0E04]00            	cmp	byte [COMMAND_HIGH],0
  6901 00001859 741B                    	jz	short set_command_high_flag
  6902                                  parse_line_error_j2: ; 22/07/2024
  6903 0000185B B80100                  	mov	ax,1			; too many parameters
  6904 0000185E E9C1FE                  	jmp	parse_line_error
  6905                                  
  6906                                  ;set_command_high_flag:
  6907                                  ;	inc	byte [COMMAND_HIGH]
  6908                                  ;	jmp     Parse_command_line
  6909                                  
  6910                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:1916h
  6911                                  SetOSwitch:
  6912                                  	;jmp	short disable_overwrite_msg
  6913                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:19DFh
  6914                                  disable_overwrite_msg:
  6915 00001861 803E[FA01]63            	cmp	byte [cox_location],'c' ; "cox"
  6916                                  	;jz	short change_cox_to_VCB
  6917                                  	;mov	ax, 1 ; MoreArgs_Ptr
  6918                                  	;jmp	parse_line_error
  6919                                  	; 22/07/2024
  6920 00001866 75F3                    	jnz	short parse_line_error_j2
  6921                                  change_cox_to_VCB:
  6922 00001868 C606[FA01]56            	mov     byte [cox_location],56h ; 'V' ; "VCB"
  6923 0000186D C706[FB01]4342          	mov     word [cox_location+1],4243h ; 'CB'
  6924 00001873 E98EFE                  	jmp     Parse_command_line
  6925                                  
  6926                                  set_command_high_flag:
  6927 00001876 FE06[0E04]              	inc	byte [COMMAND_HIGH]
  6928 0000187A E987FE                  	jmp     Parse_command_line
  6929                                  %endif
  6930                                  
  6931                                  ;ArgsDoneJ:
  6932                                  	;jmp	ArgsDone
  6933                                  
  6934                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6935                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:181Dh - CODERES:0ADDh)
  6936                                  
  6937                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6938                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:196Dh - CODERES:0B1Dh)
  6939                                  
  6940                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6941                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:19FAh
  6942                                  
  6943                                  ChkOtherArgs:
  6944                                  
  6945                                  ; We have a non-switch character here.
  6946                                  
  6947                                  	; MSDOS 6.0
  6948 0000187D 1E                      	push	ds ; ****			;
  6949 0000187E 56                      	push	si ; *** 			; save place in command line
  6950 0000187F C536[5F21]              	lds	si,[COMND1_ADDR]		; get address of filespec
  6951                                  	;assume	ds:nothing			;
  6952                                  
  6953 00001883 89F2                    	mov	dx,si				; put in dx also
  6954 00001885 B8023D                  	mov	ax,3D02h
  6955                                  	;mov	ax,(OPEN shl 8) or 2            ; Read and write
  6956 00001888 CD21                    	int	21h
  6957 0000188A 7260                    	jc	short ChkSrchSpec		; Wasn't a file
  6958 0000188C 89C3                    	mov	bx,ax
  6959 0000188E B80044                  	mov	ax,4400h
  6960                                  	;mov	ax,IOCTL shl 8
  6961 00001891 CD21                    	int	21h
  6962 00001893 F6C280                  	test	dl,80h
  6963 00001896 7506                    	jnz	short IsaDevice
  6964                                  BadSetCon:
  6965 00001898 B43E                    	mov	ah,3Eh
  6966                                  	;mov	ah,CLOSE		; Close initial handle, wasn't a device
  6967 0000189A CD21                    	int	21h
  6968 0000189C EB4E                    	jmp	short ChkSrchSpec
  6969                                  
  6970                                  	; 15/01/2023
  6971                                  IsaDevice:
  6972                                  	; MSDOS 3.3 & MSDOS 6.0
  6973 0000189E 30F6                    	xor	dh,dh
  6974 000018A0 80CA03                  	or	dl,3				; Make sure has CON attributes
  6975                                  	;mov	ax,(IOCTL shl 8) or 1
  6976 000018A3 B80144                  	mov	ax,(IOCTL*256)|1 ; 4401h
  6977 000018A6 CD21                    	int	21h
  6978                                  	;
  6979                                  	; 15/01/2023
  6980 000018A8 72EE                    	jc	short BadSetCon	; MSDOS 6.0 (& 5.0)
  6981                                  	; 25/09/2018
  6982                                  	;pop	dx ; *
  6983                                  	;pop	dx ; **
  6984                                  	;
  6985                                  	;jc	short BADSETCON	; MSDOS 6.0	; Can't set attributes - quit
  6986                                  	
  6987 000018AA 89DA                    	mov	dx,bx				; Save new handle
  6988                                  
  6989                                  	; MSDOS 6.0
  6990 000018AC 26803E[9F26]01          	cmp	byte [es:DevFlag],1
  6991 000018B2 742A                    	jz	short DevErr
  6992                                  
  6993                                  	; MSDOS 3.3
  6994                                          ;pop	bx ; *				; Throw away saved SI
  6995                                          ;pop	bx ; **				; Throw away saved CX
  6996                                  
  6997                                  	; MSDOS 3.3 & MSDOS 6.0
  6998 000018B4 51                      	push	cx ; **
  6999 000018B5 B90300                  	mov	cx,3
  7000 000018B8 31DB                    	xor	bx,bx
  7001                                  
  7002                                  	; 15/01/2023
  7003                                  rcclloop:
  7004 000018BA B43E                    	mov	ah,3Eh
  7005                                  	;mov	ah,CLOSE ; 3Eh
  7006 000018BC CD21                    	int	21h
  7007 000018BE 43                      	inc	bx
  7008 000018BF E2F9                    	loop	rcclloop
  7009                                  
  7010 000018C1 89D3                    	mov	bx,dx				; New device handle
  7011 000018C3 B445                    	mov	ah,45h
  7012                                  	;mov	ah,XDUP ; 45h
  7013 000018C5 CD21                    	int	21h				; Dup to 0
  7014 000018C7 B445                    	mov	ah,45h
  7015                                  	;mov	ah,XDUP
  7016 000018C9 CD21                    	int	21h				; Dup to 1
  7017 000018CB B445                    	mov	ah,45h
  7018                                  	;mov	ah,XDUP
  7019 000018CD CD21                    	int	21h				; Dup to 2
  7020 000018CF B43E                    	mov	ah,3Eh
  7021                                  	;mov	ah,CLOSE
  7022 000018D1 CD21                    	int	21h				; Close initial handle
  7023                                  	
  7024 000018D3 59                      	pop	cx ; **
  7025                                  	
  7026                                  	; MSDOS 6.0
  7027 000018D4 5E                      	pop	si ; ***			; restore position of command line
  7028 000018D5 1F                      	pop	ds ; ****			;
  7029                                  
  7030                                  ; Register the fact that we already have redirected the output
  7031                                  ; and can not do it again
  7032                                  
  7033 000018D6 26FE06[9F26]            	inc	byte [es:DevFlag]		
  7034 000018DB E926FE                  	jmp	Parse_command_line		; continue parsing
  7035                                  
  7036                                  	; MSDOS 3.3
  7037                                  	;jcxz	ARGSDONEJ2
  7038                                  	;jmp	CHKARG
  7039                                  
  7040                                  	; MSDOS 6.0
  7041                                  DevErr:
  7042 000018DE 5E                      	pop	si ; ***
  7043 000018DF 1F                      	pop	ds ; ****
  7044 000018E0 BA0100                  	mov	dx,1
  7045 000018E3 E8CA03                          call	RPrintParse                     ; "Too many parameters"
  7046 000018E6 E8EFFA                          call	crlf
  7047 000018E9 E918FE                  	jmp	Parse_command_line
  7048                                  
  7049                                  ChkSrchSpec:				; Not a device, so must be directory spec
  7050                                  	; MSDOS 6.0
  7051 000018EC 26803E[A026]01                  cmp	byte [es:PathFlag],1		; already set COMSPEC?
  7052 000018F2 74EA                            jz	short DevErr			; yes, error
  7053                                  	
  7054 000018F4 26FE06[A026]                    inc	byte [es:PathFlag]		; mark that we have a path
  7055                                  
  7056                                  ; We have to override the passed environment. Allocate a buffer for use now.
  7057                                  ; This buffer will later be replaced by a proper environment
  7058                                  
  7059                                  	; 15/01/2023 - Retro DOS v4.0 COMMAND.COM
  7060                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1899h
  7061                                  	; 06/06/2023
  7062                                  	;mov	ax,[ss:EnvirSeg]
  7063                                  	
  7064                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7065                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19E9h
  7066                                  	;
  7067                                  	; MSDOS 6.0
  7068 000018F9 E88F05                  	call	alloc_env                       ; environment buffer
  7069                                  
  7070                                  ; 06/06/2023
  7071                                  %if 0
  7072                                  	; 15/01/2023
  7073                                  	; MSDOS 5.0
  7074                                  	cmp	byte [ss:AllocedEnv],1
  7075                                  	mov	byte [ss:AllocedEnv],0
  7076                                  	jne     short env_alloced
  7077                                  	call	alloc_env
  7078                                  	mov	[ss:EnvirSeg],ax
  7079                                  %endif
  7080                                  
  7081                                  env_alloced:
  7082                                  	; MSDOS 5.0 & MSDOS 6.0
  7083 000018FC 8EC0                    	mov	es,ax
  7084                                  	;assume	es:nothing
  7085 000018FE 56                      	push	si ; **				; remember location of file
  7086 000018FF 31C9                    	xor	cx,cx				; clear cx for counting
  7087                                  	
  7088                                  	; 15/01/2023
  7089                                  countloop:
  7090 00001901 AC                      	lodsb					; get a character
  7091 00001902 41                      	inc	cx				; increment counter
  7092                                          ;;cmp	al,0
  7093                                  	;cmp	al,END_OF_LINE_OUT              ; are we at end of line?
  7094                                  	;jne	short countloop			; no - keep counting
  7095 00001903 08C0                    	or	al,al	
  7096 00001905 75FA                    	jnz	short countloop
  7097                                  	; 06/03/2023
  7098                                  	; al = 0 ; (*) 
  7099                                  
  7100                                  	;;;;mov	al,[Space]
  7101                                  	;;;mov	al,[ss:Space] ; 15/01/2023 - MSDOS 5.0 COMMAND.COM
  7102                                  	;;mov	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  7103                                  	; 16/04/2023
  7104                                  	;mov	al,20h ; ' ' 
  7105 00001907 4E                      	dec	si				; move back one
  7106                                          ;mov	[si],al				; put a space at end of line
  7107 00001908 C60420                  	mov	byte [si],20h ; ' ' ; space_chr
  7108                                  
  7109                                  ; We now know how long the new pathspec for command.com is. Time to
  7110                                  ; figure out how long the current COMSPEC setting is, and then to move
  7111                                  ; all the environment data up, throwing that COMSPEC setting away, and
  7112                                  ; preparing to append the new COMSPEC. ComspOffset (the offset of
  7113                                  ; where the filespec exists in the environment) is updated as well.
  7114                                  
  7115                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7116                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19FEh
  7117                                  
  7118                                  	; MSDOS 6.0
  7119 0000190B 51                      	push	cx ; * 				;
  7120 0000190C B90080                          mov	cx,ENVBIG ; 32768		;
  7121 0000190F 368B3E[7020]                    mov	di,[ss:ComspOffset]		; get location of COMSPEC
  7122                                          ;mov	al,0                            ;
  7123                                  	; 06/06/2023
  7124                                  	; al = 0 ; (*)
  7125 00001914 F2AE                    	repne	scasb                           ; find the end of COMSPEC
  7126 00001916 89FE                            mov	si,di                           ;
  7127                                  comp_endenv:					;
  7128 00001918 AE                      	scasb					; end of env?
  7129 00001919 7404                    	je	short got_endenv		; yes
  7130 0000191B F2AE                    	repne	scasb				;
  7131 0000191D EBF9                    	jmp	short comp_endenv		;
  7132                                  got_endenv:					;
  7133 0000191F 89F9                    	mov	cx,di				;
  7134 00001921 29F1                    	sub	cx,si				;
  7135 00001923 368B3E[7020]            	mov	di,[ss:ComspOffset]		;
  7136 00001928 83EF08                  	sub	di,ComspStrLen	; sub di,8	;
  7137 0000192B 1E                      	push	ds ; +				;
  7138 0000192C 06                      	push	es				;
  7139 0000192D 1F                      	pop	ds				;
  7140 0000192E F3A4                    	rep	movsb				;
  7141 00001930 4F                      	dec	di				; copy in new COMSPEC=
  7142 00001931 0E                      	push	cs				;
  7143 00001932 1F                      	pop	ds				;
  7144                                          ;assume ds:RESGROUP			;
  7145                                  	;mov    si,offset RESGROUP:ComspString	;
  7146 00001933 BE[7220]                	mov	si,ComspString			; "COMSPEC=\COMMAND.COM"
  7147                                  	;mov	cx,ComspStrLen	; mov cx,8	;
  7148 00001936 B108                            mov	cl,ComspStrLen	; mov cl,8
  7149 00001938 F3A4                    	rep	movsb				;
  7150 0000193A 893E[7020]              	mov	[ComspOffset],di		;
  7151 0000193E 1F                      	pop	ds ; + 				;
  7152                                          ;assume ds:nothing			;
  7153 0000193F 59                      	pop	cx ; *				;
  7154                                  	;
  7155 00001940 5E                      	pop	si ; **				; get new comspec location back
  7156                                  
  7157                                  	;; MSDOS 3.3 COMMAND.COM
  7158                                  	;;mov	byte [CHUCKENV],0		; If search specified -- no inheritance
  7159                                  	;;mov	ax,PATHSTRING	; "PATH="	; Figure environment pointer
  7160                                  	;;mov	cl,4
  7161                                  	;;shr	ax,cl
  7162                                  	;;mov	dx,ds
  7163                                  	;;add	ax,dx
  7164                                  	;;mov	[ENVIRSEG],ax
  7165                                  	;;mov	es,ax
  7166                                  	;;;mov	al,' '
  7167                                  	;;mov	al,[SPACE_CHR]
  7168                                  	;;mov	[si-1],al
  7169                                  	;;pop	si ; **				; Remember location
  7170                                  	;;pop	cx ; *				; and count
  7171                                  	;;;mov	di,[ECOMLOC]
  7172                                  	;;mov	di,[COMSPOFFSET]
  7173                                  
  7174                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7175                                  	;; 15/01/2023
  7176                                  	;; MSDOS 5.0 COMMAND.COM
  7177                                  	;pop	si ; **
  7178                                  	;;mov	di,14
  7179                                  	;mov	di,ECOMSPEC ; mov di,0Eh
  7180                                  
  7181                                  ComtrLoop:
  7182                                  	; MSDOS 3.3 & MSDOS 6.0
  7183 00001941 AC                      	lodsb
  7184 00001942 49                      	dec	cx
  7185                                  	;;;;cmp	al,' '
  7186                                  	;;;cmp	al,[space_chr]
  7187                                  	;;cmp	al,[ss:Space] ;  MSDOS 5.0 COMMAND.COM
  7188                                  	;cmp	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  7189                                  	; 16/04/2023
  7190 00001943 3C20                    	cmp	al,20h ; ' ' ; space_chr
  7191 00001945 7416                    	je	short SetComsr
  7192                                  	; MSDOS 3.3
  7193                                  	;cmp	al,9
  7194                                  	;je	short SetComsr
  7195                                  	; MSDOS 3.3 & MSDOS 6.0
  7196 00001947 AA                      	stosb
  7197                                  
  7198                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7199                                  %if 1
  7200                                  ;ifdef	DBCS
  7201 00001948 30E4                    	xor	ah,ah
  7202                                  ;endif
  7203                                  %endif
  7204 0000194A E311                    	jcxz	SetComsr
  7205                                  
  7206                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7207                                  %if 1
  7208                                  ;ifdef DBCS
  7209 0000194C 1E                      	push	ds				; Make sure we have
  7210 0000194D 0E                      	push	cs				;  local DS for
  7211 0000194E 1F                      	pop	ds				;  ItestKanj
  7212 0000194F E82BFB                  	call	ITestKanj
  7213 00001952 1F                      	pop	ds				; restore parser ds
  7214 00001953 74EC                    	jz	short ComtrLoop
  7215 00001955 49                      	dec	cx
  7216 00001956 A4                      	movsb
  7217 00001957 FEC4                    	inc	ah
  7218 00001959 E302                    	jcxz	SetComsr
  7219                                  ;endif
  7220                                  %endif
  7221 0000195B EBE4                    	jmp	short ComtrLoop
  7222                                  
  7223                                  SetComsr:
  7224                                  	; 15/01/2023
  7225                                  	; MSDOS 6.0
  7226 0000195D 51                      	push	cx ; **
  7227 0000195E 0E                      	push	cs				; Get local segment
  7228 0000195F 1F                      	pop	ds				;
  7229                                  	;assume	ds:ResGroup			;
  7230 00001960 1E                      	push	ds ; *
  7231                                  	;mov	si,offset ResGroup:ComSpect
  7232 00001961 BE[2D20]                	mov	si,COMSPECT ; "\COMMAND.COM"
  7233 00001964 B90E00                  	mov	cx,14
  7234 00001967 268A45FF                	mov	al,[es:di-1]
  7235                                  
  7236                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7237                                  %if 1
  7238                                  ;ifdef DBCS
  7239 0000196B 08E4                    	or	ah,ah
  7240 0000196D 7508                    	jnz	short iNotRoot			; Last char was KANJI second byte, might be '\'
  7241                                  ;endif
  7242                                  %endif
  7243 0000196F 3A06[4F04]              	cmp	al,[RDirChar]
  7244 00001973 7502                    	jne	short iNotRoot
  7245 00001975 46                      	inc	si				; Don't make a double /
  7246 00001976 49                      	dec	cx
  7247                                  	
  7248                                  	; MSDOS 3.37
  7249                                  	;push	si
  7250                                  	;push	cx
  7251                                  	;push	ds
  7252                                  	;mov	si,COMSPECT ; "/COMMAND.COM"
  7253                                  	;mov	cx,14
  7254                                  	;mov	al,[es:di-1]
  7255                                  	;call	PATHCHRCMPR
  7256                                  	;jnz	short INOTROOT			
  7257                                  	;inc	si				; Don't make a double /
  7258                                  	;dec	cx
  7259                                  
  7260                                  iNotRoot:
  7261                                  	; MSDOS 3.3 & MSDOS 6.0
  7262 00001977 F3A4                    	rep	movsb
  7263                                  
  7264                                  	;;mov	dx,[ECOMLOC]			; Now lets make sure its good!
  7265                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7266                                  	; MSDOS 6.0 
  7267 00001979 8B16[7020]              	mov	dx,[ComspOffset] ; [COMSPOFFSET]
  7268                                  	; 15/01/2023
  7269                                  	;;mov	dx,14
  7270                                  	;mov	dx,ECOMSPEC ; mov dx,0Eh ; MSDOS 5.0 COMMAND.COM
  7271                                  
  7272 0000197D 06                      	push	es
  7273 0000197E 1F                      	pop	ds
  7274                                  	;;mov	ax,OPEN shl 8
  7275                                  	;mov	ax,OPEN*256 ; 3D00h
  7276 0000197F B8003D                  	mov	ax,3D00h ; 15/01/2023
  7277 00001982 CD21                    	int	21h				; Open COMMAND.COM
  7278 00001984 1F                      	pop	ds ; *
  7279 00001985 720E                    	jc	short SetComsrBad		; No COMMAND.COM here
  7280 00001987 89C3                    	mov	bx,ax				; Handle
  7281 00001989 B43E                    	mov	ah,3Eh ; 15/01/2023
  7282                                  	;mov	ah,CLOSE ; 3Eh
  7283 0000198B CD21                    	int	21h				; Close COMMAND.COM
  7284                                  SetComsrRet:
  7285                                  	; 15/01/2023
  7286 0000198D 59                      	pop	cx ; **
  7287 0000198E 5E                      	pop	si ; ***
  7288                                  
  7289                                  	; MSDOS 6.0
  7290 0000198F 1F                      	pop	ds ; ****			;
  7291                                  	;assume	ds:ResGroup			;
  7292                                  	;
  7293 00001990 0E                      	push	cs				; Make sure local ES is
  7294 00001991 07                      	pop	es				;  restored
  7295 00001992 E96FFD                  	jmp	Parse_command_line		; continue parsing command line
  7296                                  
  7297                                  	; MSDOS 3.3
  7298                                  ;ARGSDONEJ2:
  7299                                  	;jcxz	ARGSDONE
  7300                                  	;jmp	CHKARG
  7301                                  
  7302                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7303                                  SetComsrBad:
  7304                                  	; MSDOS 3.3 & MSDOS 6.0
  7305                                  	;mov	dx,offset ResGroup:BadComlkMsg	; dx = ptr to msg
  7306 00001995 BA[0022]                	mov	dx,BADCOMLKMES
  7307                                  
  7308                                  ;	Note: we're about to make a near call to TriageError, which
  7309                                  ;	lives in a different segment and group. Some linkers will
  7310                                  ;	generate a warning like "Possible fix-up overflow". We're
  7311                                  ;	ok, though, because we all fit in 64 KB and, at init time,
  7312                                  ;	we're still all together.
  7313                                  
  7314                                  	; 16/01/2023
  7315                                  	;TRIAGEERROR equ TRANSTART+TriageError
  7316                                  	;(MSDOS 5.0 COMMAND.COM, 2320h+2D92h)
  7317                                  
  7318                                  	; 06/06/2023
  7319                                  	TRIAGEERROR equ TRANSTART+TriageError
  7320                                  	;(MSDOS 6.22 COMMAND.COM, 26E0h+333Ch)
  7321                                  
  7322                                  	;;;call	50B2h ; MSDOS 5.0 COMMAND.COM
  7323                                  	;;call	5A1Ch ; MSDOS 6.22 COMMAND.COM
  7324                                  	; 18/07/2024
  7325                                  	;call	5A6Ch ; PCDOS 7.1 COMMAND.COM	
  7326 00001998 E8(5458)                	call	TRIAGEERROR	; TRIAGEERROR procedure is at offset 354Eh
  7327                                  				; in original MSDOS 3.3 COMMAND.COM
  7328                                  
  7329                                  			; TriageError procedure is at offset 50B2h
  7330                                  			; in original MSDOS 5.0 COMMAND.COM	
  7331 0000199B 83F841                  	cmp	ax,65
  7332 0000199E 7503                    	jne	short doprt
  7333                                  	;mov	dx,offset ResGroup:BadComaccMsg	; dx = ptr to msg
  7334 000019A0 BA[2922]                	mov	dx,BADCOMACCMSG
  7335                                  doprt:
  7336 000019A3 E835FA                  	call	RPrint
  7337                                  	;mov	si,offset ResGroup:ComSpect
  7338 000019A6 BE[2D20]                	mov     si,COMSPECT ; "\COMMAND.COM"
  7339                                  	;;mov	di,[ECOMLOC]
  7340                                  	; 06/06/2023
  7341 000019A9 8B3E[7020]              	mov	di,[ComspOffset] ; MSDOS 6.22 COMMAND.COM
  7342                                  	; 16/01/2023
  7343                                  	;mov	di,ECOMSPEC ; mov di,0Eh ; MSDOS 5.0 COMMAND.COM
  7344 000019AD B90E00                  	mov	cx,14
  7345 000019B0 F3A4                    	rep	movsb				; get my default back
  7346                                  
  7347 000019B2 EBD9                    	jmp	short SetComsrRet
  7348                                  
  7349                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7350                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1927h (CODERES:0BE7h)
  7351                                  
  7352                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7353                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1A99h (CODERES:0C49h)
  7354                                  ArgsDone:
  7355                                  	; MSDOS 6.0
  7356 000019B4 8E06[3A04]              	mov	es,[EnvirSeg]			; get environment back
  7357                                  	;assume	es:nothing			;
  7358                                  
  7359                                  	; MSDOS 3.3 & MSDOS 6.0
  7360 000019B8 803E[A202]00                    cmp	byte [PermCom],0
  7361 000019BD 742E                            jz	short ComReturns
  7362                                  
  7363 000019BF 06                      	push	es				; Save environment pointer
  7364 000019C0 B450                    	mov	ah,50h
  7365                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  7366 000019C2 8CDB                    	mov	bx,ds
  7367 000019C4 8EC3                    	mov	es,bx
  7368 000019C6 CD21                    	int	21h				; current process is me
  7369 000019C8 BF0A00                  	mov	di,PDB.EXIT ; mov di,0Ah	; Diddle the addresses in my header
  7370                                  	;;mov	ax,offset RESGROUP:LODCOM
  7371                                  	;mov	ax,LODCOM
  7372                                  	; 16/01/2023
  7373 000019CB B8[E000]                	mov	ax,LodCom_Trap
  7374 000019CE AB                              stosw
  7375 000019CF 8CD8                            mov	ax,ds
  7376 000019D1 AB                              stosw
  7377                                  	;;mov	ax,offset RESGROUP:CONTC
  7378                                  	;mov	ax,CONTC
  7379                                  	; 16/01/2023
  7380 000019D2 B8[AC00]                	mov	ax,Ctrlc_Trap
  7381 000019D5 AB                              stosw
  7382 000019D6 8CD8                            mov	ax,ds
  7383 000019D8 AB                              stosw
  7384                                  	;;mov	ax,offset DATARES:CritErr_Trap  ; MSDOS 6.0
  7385                                  	;mov	ax,CRITERR
  7386                                  	; 16/01/2023
  7387 000019D9 B8[B700]                	mov	ax,CritErr_Trap
  7388 000019DC AB                      	stosw
  7389 000019DD 8CD8                    	mov     ax,ds
  7390 000019DF AB                      	stosw
  7391                                  	;;mov	word ptr ds:16h,ds
  7392                                  	;mov	word ptr ds:[Pdb_Parent_Pid],ds ; Parent is me forever
  7393 000019E0 8C1E1600                	mov	[PDB.PARENT_PID],ds
  7394                                          ;;mov	dx,offset RESGROUP:Int_2e
  7395                                  	;mov	dx,Int_2e
  7396                                          ; 16/01/2023
  7397 000019E4 BA[A100]                	mov	dx,Int2e_Trap
  7398 000019E7 B82E25                  	mov	ax,252Eh
  7399                                  	;;mov	ax,(SET_INTERRUPT_VECTOR SHL 8) OR 2Eh
  7400                                  	;mov	ax,(SET_INTERRUPT_VECTOR*256) | 2Eh ; 252Eh
  7401 000019EA CD21                    	int     21h	; DOS - SET INTERRUPT VECTOR
  7402                                  			; AL = interrupt number
  7403                                  			; DS:DX = new vector to be used for specified interrupt
  7404 000019EC 07                              pop	es				; Remember environment
  7405                                  	
  7406                                  ComReturns:
  7407                                          ;mov	ax,word ptr ds:Pdb_Parent_Pid
  7408 000019ED A11600                  	mov	ax,[PDB.PARENT_PID] ; mov ax,ds:16h
  7409                                  	; 16/01/2023
  7410 000019F0 A3[3E02]                	mov	[Parent],ax			; Save parent
  7411                                          ;mov	word ptr ds:Pdb_Parent_Pid,ds 	; Parent is me
  7412 000019F3 8C1E1600                        mov	[PDB.PARENT_PID],ds ; mov word ptr ds:16h,ds
  7413                                          ;mov	ax,word ptr ds:PDB_Jfn_Table
  7414 000019F7 A11800                          mov	ax,[PDB.JFN_TABLE] ; mov ax,ds:18h
  7415 000019FA A3[9F02]                        mov	[Io_Save],ax		; Get the default stdin and out
  7416 000019FD 8C1E[3E04]                      mov	[Com_Ptr+2],ds		; Set all these to resident
  7417 00001A01 8C1E[4204]                      mov	[Com_Fcb1+2],ds
  7418 00001A05 8C1E[4604]              	mov	[Com_Fcb2+2],ds
  7419                                          ;mov	di,offset ResGroup:ComSpec
  7420 00001A09 BF[4B02]                        mov	di,ComSpec
  7421                                  
  7422                                  	;;mov	si,[ECOMLOC]
  7423                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  7424 00001A0C 8B36[7020]              	mov	si,[ComspOffset]
  7425                                  	; 16/01/2023 - MSDOS 5.0 COMMAND.COM
  7426                                  	;mov	si,ECOMSPEC ; mov si,0Eh
  7427                                  
  7428 00001A10 803E[5920]00            	cmp	byte [AllocedEnv],0 ; MSDOS 6.0
  7429                                          ;cmp	byte [CHUCKENV],0 ; MSDOS 3.3
  7430                                  	
  7431 00001A15 8CD8                    	mov	ax,ds				; Xchg es,ds
  7432 00001A17 06                      	push	es
  7433 00001A18 1F                      	pop	ds
  7434 00001A19 8EC0                    	mov	es,ax
  7435                                  
  7436                                  	; 06/06/2023
  7437 00001A1B 7517                    	jne	short CopyComsp ; MSDOS 6.0
  7438                                  	; 16/01/2023	
  7439                                  	;je	short CopyComsp ; MSDOS 5.0
  7440                                  	;;je	short COPYCOMSP	; MSDOS 3.3	; All set up for copy
  7441                                  
  7442 00001A1D 0E                              push	cs
  7443 00001A1E 1F                              pop	ds
  7444                                  
  7445                                          ;mov	si,offset ResGroup:ComspString
  7446 00001A1F BE[7220]                	mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  7447 00001A22 06                      	push	es
  7448 00001A23 57                      	push	di
  7449 00001A24 E89A02                  	call	IfindE
  7450 00001A27 89FE                    	mov	si,di
  7451 00001A29 06                      	push	es
  7452 00001A2A 1F                      	pop	ds
  7453 00001A2B 5F                      	pop	di
  7454 00001A2C 07                      	pop	es
  7455 00001A2D 7305                            jnc	short CopyComsp
  7456                                  
  7457                                  	; 06/06/2023
  7458                                  	; MSDOS 6.0
  7459                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1B04h
  7460                                  ComSpecNofnd:
  7461                                  	;;mov	si,offset ResGroup:ComspString
  7462                                  	;mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  7463                                  	;add	si,ComspStrLen ; add si,8
  7464 00001A2F BE[7A20]                	mov	si,ComspString+ComspStrLen
  7465                                  	
  7466                                  	;; 21/01/2023
  7467                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:19A1h
  7468                                  	;;mov	si,0Eh
  7469                                  	;mov	si,ECOMSPEC
  7470                                  	
  7471 00001A32 0E                      	push	cs
  7472 00001A33 1F                      	pop	ds	
  7473                                  
  7474                                  	; 21/01/2023
  7475                                  ;COMSPECNOFND:
  7476                                  	; MSDOS 3.3
  7477                                          ;;mov	si,[es:ECOMLOC]
  7478                                          ;mov	si,[es:COMSPOFFSET]
  7479                                  	;;add	si,offset RESGROUP:PATHSTRING
  7480                                          ;add	si,PATHSTRING ; "PATH="
  7481                                  	;push	cs
  7482                                  	;pop	ds
  7483                                  
  7484                                  CopyComsp:
  7485                                  	; 21/01/2023
  7486                                  ;COPYCOMSP:
  7487                                  	; MSDOS 3.3 & MSDOS 6.0
  7488                                  	;;mov	es:PutBackComSpec.SubstPtr,di
  7489                                  	;mov	[es:PUTBACKSUBSTPTR],di		; Save ptr to beginning of comspec path
  7490 00001A34 26893E[2A02]            	mov	[es:PutBackComSpec],di
  7491 00001A39 807C013A                	cmp	byte [si+1],':'			; Is there a drive specifier in comspec
  7492 00001A3D 7506                    	jne	short CopyComspLoop		; If not, do not skip over first 2 bytes
  7493                                  	;;add	es:PutBackComSpec.SubstPtr,2
  7494                                  	;add	word [es:PUTBACKSUBSTPTR],2
  7495 00001A3F 268306[2A02]02          	add	word [es:PutBackComSpec],2
  7496                                  CopyComspLoop:
  7497 00001A45 AC                      	lodsb
  7498 00001A46 AA                      	stosb
  7499 00001A47 08C0                    	or	al,al
  7500 00001A49 75FA                    	jnz	short CopyComspLoop
  7501                                  
  7502 00001A4B 26893E[8B02]            	mov	[es:ComSpec_End],di		; Save ptr to end of comspec path
  7503 00001A50 26FF0E[8B02]            	dec	word [es:ComSpec_End]
  7504 00001A55 268A26[9402]            	mov	ah,[es:ComDrv]
  7505 00001A5A 80C440                  	add	ah,'A'-1 ; 40h
  7506 00001A5D 268826[2F02]            	mov	[es:PutBackDrv],ah		; save drive letter
  7507                                  
  7508                                  	; 21/01/2023 - Retrro DOS v4.0 (& v4.1) COMMAND.COM
  7509                                  	
  7510                                  	; MSDOS 6.0
  7511 00001A62 E8E702                  	call	setup_for_messages		; set up parse and extended error messages
  7512                                  
  7513                                  ; The routine below sets up the exact resident size of COMMAND. If this is not
  7514                                  ; the first COMMAND, then the resident code is not duplicated and the resident
  7515                                  ; size is just the data. If we are the first COMMAND, it checks if we are to
  7516                                  ; be loaded into HIMEM. If not, then the resident size includes the code and
  7517                                  ; the data otherwise it is just the data.
  7518                                   
  7519 00001A65 E88603                  	call	Setup_res_end			; put resident size in ResSize
  7520                                  
  7521 00001A68 0E                      	push	cs
  7522 00001A69 1F                      	pop	ds
  7523                                  	;assume	ds:RESGROUP
  7524                                  
  7525                                  ;Public EnvMaximum
  7526                                          ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7527                                  EnvMaximum:	; MSDOS 5.0 COMMAND.COM - RESGROUP:19DCh
  7528                                          ; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7529                                  		; MSDOS 6.22 COMMAND.COM - RESGROUP:1B53h
  7530                                          ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  7531                                  		; PCDOS 7.1 COMMAND.COM - RESGROUP:1B53h
  7532                                  
  7533                                  	; 21/01/2023
  7534                                  	; MSDOS 6.0
  7535                                  	;;mov	si,offset RESGROUP:TranStart
  7536                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM
  7537                                  	; 06/06/2023
  7538                                  	;;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM
  7539                                  	;mov	si,TRANSTART
  7540                                  	;add	si,100h
  7541                                  	; 23/04/2023
  7542 00001A6A BEE028                  	mov	si,TRANSTART+100h
  7543                                  
  7544                                  	;;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  7545                                  	;;mov	cx,87C2h	; MSDOS 5.0 COMMAND.COM
  7546                                  	; 06/06/2023
  7547                                  	;;mov	cx,9D53h	; MSDOS 6.22 COMMAND.COM
  7548                                  	; 18/07/2024
  7549                                  	;mov	cx,9B47h	; PCDOS 7.1 COMMAND.COM	
  7550 00001A6D B9[1F96]                	mov	cx,TRANDATAEND-100h
  7551                                  
  7552 00001A70 FC                      	cld
  7553 00001A71 D1E9                    	shr	cx,1
  7554 00001A73 31D2                    	xor	dx,dx
  7555                                  Ichksum:
  7556 00001A75 AD                      	lodsw
  7557 00001A76 01C2                    	add	dx,ax
  7558 00001A78 83D200                  	adc	dx,0
  7559 00001A7B E2F8                    	loop	Ichksum
  7560                                  
  7561 00001A7D 8916[9702]                      mov	[Sum],dx			; store checksum
  7562                                  
  7563 00001A81 803E[4C20]00                    cmp     byte [PRDATTM],0
  7564 00001A86 750C                            jne	short NoBatchSeg		; don't do autoexec or date time
  7565                                  	
  7566                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  7567                                  
  7568                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0fh)/16
  7569                                  	; 21/01/2023
  7570                                  	;mov	bx,4
  7571 00001A88 BB0400                          mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  7572 00001A8B B448                    	mov	ah,48h
  7573                                  	;mov	ah,ALLOC                        ;
  7574 00001A8D CD21                            int	21h                             ;
  7575 00001A8F 7203                    	jc	short NoBatchSeg		; didn't allocate - pretend no batch
  7576 00001A91 A3[4902]                        mov	[Batch],ax			; save batch segment
  7577                                  
  7578                                  NoBatchSeg:
  7579                                  	; 21/01/2023
  7580                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7581 00001A94 8B1E[3A04]              	mov	bx,[EnvirSeg]			; get old environment segment
  7582 00001A98 891E[8B20]              	mov	[OldEnv],bx			; save it
  7583 00001A9C C706[8D20]0000          	mov	word [UsedEnv],0		; initialize env size counter
  7584 00001AA2 8EDB                    	mov	ds,bx
  7585                                  	;assume	ds:nothing
  7586                                  	
  7587 00001AA4 31F6                    	xor	si,si
  7588 00001AA6 89F7                    	mov	di,si
  7589                                  
  7590                                  ; This is the maximum allowed size for the environment
  7591                                  
  7592                                  	; 21/01/2023
  7593                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1A1Eh
  7594                                  	;mov	bx,4096 - 1 ; 0FFFh		; max. allowed env. size
  7595                                  	;;mov	[ss:EnvMax],bx
  7596                                  	;shl	bx,1
  7597                                  	;shl	bx,1
  7598                                  	;shl	bx,1
  7599                                  	;shl	bx,1
  7600 00001AA8 BBF0FF                  	mov	bx,(4096-1)<<4 ; mov bx,0FFF0h
  7601 00001AAB 36891E[8920]            	mov	[ss:EnvMax], bx			; convert envmax to bytes
  7602 00001AB0 4B                      	dec	bx				; dec by one to leave room for double 0
  7603 00001AB1 31D2                    	xor	dx,dx				; use dx to indicate that there was
  7604                                  						; no environment size error.
  7605                                  ;public NxtStr
  7606                                  NxtStr:
  7607 00001AB3 E8E101                  	call	GetStrLen			; get the size of the current env string
  7608                                  
  7609                                  ;Bugbug: Can use ss here to address UsedEnv
  7610                                  
  7611 00001AB6 1E                      	push	ds                              ; get addressability to environment
  7612 00001AB7 0E                              push	cs                              ;                       counter
  7613 00001AB8 1F                              pop	ds                              ;
  7614                                  	;assume	ds:ResGroup
  7615 00001AB9 010E[8D20]                      add	[UsedEnv],cx			; add the string length to env size
  7616 00001ABD 1F                      	pop	ds                              ;
  7617                                  	;assume	ds:nothing
  7618                                  	
  7619 00001ABE 83F901                  	cmp	cx,1				; end of environment was encountered.
  7620 00001AC1 7405                    	je	short EnvExit
  7621 00001AC3 29CB                    	sub	bx,cx
  7622                                  	;jae	short OkCpyStr			; can't fit in all of enviroment.
  7623                                  	; 21/01/2023
  7624 00001AC5 73EC                    	jae	short NxtStr
  7625 00001AC7 42                      	inc	dx				; out of env space msg must be displayed
  7626                                  	;jmp	short EnvExit
  7627                                  
  7628                                  ;OkCpyStr:
  7629                                  	;jmp	short NxtStr
  7630                                  
  7631                                  EnvExit:
  7632 00001AC8 0E                      	push	cs
  7633 00001AC9 1F                      	pop	ds
  7634                                  	;assume	ds:ResGroup
  7635 00001ACA 09D2                    	or	dx,dx				; dx will be non-zero if error
  7636 00001ACC 7406                    	jz	short EnvNoErr
  7637                                  	;mov	dx,offset ResGroup:OutEnvMsg	; dx = ptr to msg
  7638 00001ACE BA[8021]                	mov	dx,OUTENVMSG
  7639 00001AD1 E807F9                  	call 	RPrint
  7640                                  EnvNoErr:
  7641 00001AD4 A1[8720]                	mov	ax,[EnvSiz]			; env size previously set
  7642 00001AD7 B104                    	mov	cl,4
  7643 00001AD9 D3E0                    	shl	ax,cl				; get size in bytes
  7644 00001ADB 3B06[8D20]              	cmp	ax,[UsedEnv]			; is it a new env?
  7645 00001ADF 7706                    	ja	short st_envsize		; yes, store the size
  7646 00001AE1 A1[8D20]                	mov	ax,[UsedEnv]
  7647 00001AE4 83C00F                  	add	ax,15				; round up
  7648                                  st_envsize:	
  7649 00001AE7 D3E8                    	shr	ax,cl
  7650 00001AE9 A3[8720]                	mov	[EnvSiz],ax			; store env size needed(paras)
  7651                                  
  7652                                  ;if MSVER
  7653                                  	;cmp	SingleCom,0
  7654                                  	;jnz	nophead 			; don't print header if SingleCom
  7655                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7656                                  	;call	RPrint
  7657                                  ;nophead:
  7658                                  ;endif
  7659                                  	; 21/01/2023
  7660                                  
  7661                                  	; MSDOS 3.3 & 6.0
  7662 00001AEC 833E[4902]00            	cmp     word [Batch],0		; did we set up a batch segment?
  7663 00001AF1 7503                    	jnz     short DoDate		; yes - go initialize it
  7664 00001AF3 E99300                  	jmp     NoDttm			; don't do autoexec or date time
  7665                                  
  7666                                  DoDate:
  7667                                  
  7668                                  ; allocate batch segment for d:/autoexec.bat + no arguments
  7669                                  
  7670 00001AF6 A1[4902]                	mov	ax,[Batch]		; get batch segment
  7671 00001AF9 C606[9D02]03            	mov	byte [EchoFlag],3	; set batch echo
  7672 00001AFE C706[AE02]0100          	mov	word [Nest],1		; set nest flag to 1 batch
  7673 00001B04 8EC0                    	mov	es,ax
  7674                                  
  7675                                  ; initialize the segment
  7676                                  
  7677 00001B06 31FF                    	xor	di,di
  7678                                  	;;mov	al,0
  7679                                  	;mov	al,BATCHTYPE ; 0
  7680                                  	; 06/06/2023
  7681 00001B08 31C0                    	xor	ax,ax
  7682 00001B0A AA                      	stosb
  7683                                  	;mov	al,1			; initialize echo for batch exit
  7684                                  	;inc	al
  7685                                  	; 22/07/2024
  7686 00001B0B 40                      	inc	ax
  7687 00001B0C AA                      	stosb
  7688                                  
  7689                                  ; Hosebag! This guy does not use the struct fields to init the BatchSegment
  7690                                  
  7691                                  	;xor	ax,ax			; initialize to zero
  7692                                  	; 06/06/2023
  7693                                  	;dec	al ; ax = 0
  7694                                  	; 22/07/2024
  7695 00001B0D 48                      	dec	ax
  7696                                  
  7697                                  	; 21/01/2023
  7698 00001B0E AA                      	stosb	; MSDOS 6.0 		; clear out BatchEOF
  7699                                  
  7700 00001B0F AB                      	stosw				; batch segment of last job - batlast
  7701 00001B10 AB                      	stosw				; segment for FOR
  7702 00001B11 AA                      	stosb				; FOR flag
  7703 00001B12 AB                      	stosw				; position in file - batseek
  7704 00001B13 AB                      	stosw
  7705                                  
  7706                                  ; clean out the parameters
  7707                                  
  7708                                  	;mov	ax,-1			; initialize to no parameters
  7709                                  	; 06/06/2023
  7710 00001B14 48                      	dec	ax ; ax = -1
  7711                                  
  7712 00001B15 B90A00                  	mov	cx,10
  7713 00001B18 F3AB                    	rep	stosw
  7714                                  
  7715                                  ; decide whether we should grab the default drive
  7716                                  
  7717 00001B1A 803E[3B20]00            	cmp	byte [AUTOBAT],0 ; ":\AUTOEXEC.BAT"
  7718 00001B1F 7509                    	jne	short NoAutSet
  7719 00001B21 B419                    	mov	ah,19h	; 21/01/2023
  7720                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  7721 00001B23 CD21                    	int	21h
  7722                                  	;;add	al,'A'
  7723                                  	;add	al,[letter_A] ; Ucasea
  7724                                  	;add	al,[ucasea] ; 21/01/2023
  7725                                  	; 21/01/2023
  7726 00001B25 0441                    	add	al,'A'
  7727 00001B27 A2[3B20]                	mov	[AUTOBAT],al
  7728                                  
  7729                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7730                                  %if 0
  7731                                  	; 21/01/2023
  7732                                  	; 06/06/2023
  7733                                  	mov	[KAUTOBAT],al
  7734                                  %endif
  7735                                  
  7736                                  NoAutSet:
  7737                                  
  7738                                  ; copy in the batch file name (including nul)
  7739                                  
  7740                                  	;mov	si,offset ResGroup:AutoBat
  7741 00001B2A BE[3B20]                	mov	si,AUTOBAT
  7742 00001B2D B90800                  	mov	cx,8
  7743 00001B30 F3A5                    	rep	movsw
  7744                                  	; 23/04/2023
  7745 00001B32 A4                      	movsb	; MSDOS 6.0		; move in carriage return to terminate string
  7746                                  
  7747                                  	;mov	dx,offset ResGroup:AutoBat
  7748 00001B33 BA[3B20]                	mov     dx,AUTOBAT ; ":\AUTOEXEC.BAT"
  7749                                  
  7750                                  	;;mov	ax,OPEN shl 8
  7751 00001B36 B8003D                  	mov	ax,3D00h ; 21/01/2023
  7752                                  	;mov	ax,OPEN*256 ; 3D00h	; open for read
  7753 00001B39 CD21                    	int	21h			; see if autoexec.bat exists
  7754 00001B3B 7208                    	jc	short noabat
  7755 00001B3D 89C3                    	mov	bx,ax
  7756 00001B3F B43E                    	mov	ah,3Eh ; 21/01/2023
  7757                                  	;mov	ah,CLOSE  ; 3Eh
  7758 00001B41 CD21                    	int	21h
  7759                                  	;jmp	Drv0			; go process autoexec
  7760                                  	; 22/07/2024
  7761 00001B43 EB51                    	jmp	short Drv0
  7762                                  
  7763                                  noabat:
  7764 00001B45 50                      	push	ax
  7765 00001B46 E85701                  	call	Setup_Seg
  7766 00001B49 A3[5720]                	mov	[triage_add+2],ax
  7767 00001B4C 58                      	pop	ax
  7768 00001B4D FF1E[5520]              	call	far [triage_add]	; get extended error
  7769 00001B51 83F841                  	cmp	ax,65			; network access denied?
  7770                                  	;jne	short OPENERR		; no - go deallocate batch
  7771                                  	; 21/01/2023
  7772                                  	;;je	short AccDenErr
  7773                                  	; 22/07/2024
  7774 00001B54 7506                    	jne	short OpenErr
  7775                                  	; 06/06/2023
  7776                                  	;je	short AccDenErr
  7777                                  
  7778                                  	; 21/01/2023
  7779                                  ;_ACCDENERROR:					; yes - put out message
  7780                                  ;	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7781                                  ;	mov	dx,ACCDENERR
  7782                                  ;	call	RPRINT
  7783                                  
  7784                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7785                                  
  7786                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7787                                  
  7788                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7789                                  ; 06/06/2023
  7790                                  ; 21/01/2023
  7791                                  %if 0
  7792                                  
  7793                                  ; If AUTOEXEC.BAT is not found, then check for KAUTOEXE.BAT. Changed
  7794                                  ; by Ellen to check only when in Korea. The country information
  7795                                  ; returned will overlay the old parse data area, but we don't care
  7796                                  ; since we won't need the parse information or country information.
  7797                                  ; We only care about the country code returned in BX.
  7798                                  
  7799                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1AE7h
  7800                                  	; 06/06/2023
  7801                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1C5Eh
  7802                                  
  7803                                  	;mov	dx,offset ResGroup:Internat_Info ; set up internat vars
  7804                                  	mov	dx,INTERNAT_INFO
  7805                                  	mov	ax,3800h
  7806                                  	;mov	ax,INTERNATIONAL<<8
  7807                                  	;;mov	ax,INTERNATIONAL shl 8		; get country dependent info
  7808                                  	int	21h				;
  7809                                  	jc	short NoKabat 			; error - don't bother with it
  7810                                  	cmp	bx,52h
  7811                                  	;cmp	bx,KOREA_COUNTRY_CODE		; are we speaking korean?
  7812                                  	jne	short OpenErr 			; no, don't check for kautoexe
  7813                                  
  7814                                  	;mov	di,BatFile			; 3/3/kk
  7815                                  	mov	di,20h
  7816                                  	;mov	si,offset ResGroup:KautoBat	; another trial to do	3/3/kk
  7817                                  	mov	si,KAUTOBAT
  7818                                  	mov	cx,8				; auto execution for the 3/3/kk
  7819                                  	rep	movsw				; non-english country	3/3/kk
  7820                                  	movsb					; move in carraige return to terminate string
  7821                                  	;mov	dx,offset ResGroup:KautoBat	; 3/3/kk
  7822                                  	mov	dx,KAUTOBAT
  7823                                  	mov	ax,3D00h
  7824                                  	;mov	ax,OPEN<<8
  7825                                  	;;mov	ax,OPEN shl 8			; 3/3/kk
  7826                                  	int	21h				; see if kautoexe.bat exists  3/3/kk
  7827                                  	jc	short NoKabat 			; 3/3/kk
  7828                                  	mov	bx,ax				; 3/3/kk
  7829                                  	mov	ah,3Eh
  7830                                  	;mov	ah,CLOSE			; 3/3/kk
  7831                                  	int	21h				; 3/3/kk
  7832                                  	jmp	short Drv0			; 3/3/kk
  7833                                  
  7834                                  NoKabat:					; 3/3/kk
  7835                                  	call	far [triage_add]		; get extended error
  7836                                  	cmp	ax,65				; network access denied?
  7837                                  	jnz	short OpenErr 			; no - go deallocate batch
  7838                                  
  7839                                  %endif	
  7840                                  	; 06/06/2023 - Retro DOS 4.2 COMMAND.COM
  7841                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7842                                  
  7843                                  AccDenErr:					; yes - put out message
  7844                                  	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7845 00001B56 BA[D006]                	mov	dx,ACCDEN
  7846 00001B59 E87FF8                  	call	RPrint
  7847                                  OpenErr:
  7848                                  ;OPENERR:
  7849 00001B5C 8E06[4902]              	mov	es,[Batch]		; not found--turn off batch job
  7850 00001B60 B449                    	mov	ah,49h
  7851                                  	;mov	ah,DEALLOC ; 49h
  7852 00001B62 CD21                    	int	21h
  7853 00001B64 C706[4902]0000          	mov	word [Batch],0		; after dealloc in case of ^c
  7854 00001B6A C606[9D02]01            	mov	byte [EchoFlag],1
  7855 00001B6F C706[AE02]0000          	mov	word [Nest],0		; indicate no batch in progress
  7856                                  ;DoDttm:
  7857                                  	;mov	ax,offset TranGroup:Datinit
  7858 00001B75 B8[5B32]                	mov	ax,DATINIT
  7859 00001B78 A3[4D20]                	mov	[INITADD],ax
  7860                                  
  7861                                  	; MSDOS 6.0
  7862                                  ;;M004;;mov	ax,TrnSeg	
  7863                                  ;
  7864                                  ; M004; We cant use TrnSeg now because it is not initialized. We now that
  7865                                  ; M004; the transient starts on a para boundary at the label TranStart.
  7866                                  ; M004; We use TranStart to get the start of the transient segment.
  7867                                  
  7868                                  	; 21/01/2023
  7869                                  	;mov	ax,offset RESGROUP:TranStart	; M004
  7870                                  	;;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7871                                  	; 06/06/2023
  7872                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7873                                  	;
  7874                                  	;mov	ax,TRANSTART
  7875                                  	;mov	cl,4				; M004
  7876                                  	;shr	ax,cl				; get relative seg ; M004
  7877                                  	; 06/06/2023
  7878 00001B7B B87E02                  	mov	ax,TRANSTART>>4	
  7879                                  
  7880 00001B7E 8CC9                    	mov	cx,cs
  7881 00001B80 01C8                    	add	ax,cx				; ax = transient seg ; M004
  7882                                  
  7883                                  	; 21/01/2023
  7884                                  	; MSDOS 3.3
  7885                                  	; 25/09/2018
  7886                                  	;mov     ax,[TrnSeg]	; COMMAND.COM (MSDOS 3.3) - Offset 1387h
  7887                                  
  7888                                  	; MSDOS 3.3 & MSDOS 6.0
  7889 00001B82 A3[4F20]                	mov	[INITADD+2],ax
  7890                                  	;call	dword ptr InitAdd
  7891 00001B85 FF1E[4D20]              	call	far [INITADD]
  7892                                  
  7893                                  NoDttm:
  7894                                  	; MSDOS 6.0
  7895                                  	; 21/01/2023
  7896                                  ;Copyright:
  7897                                  	;public	Copyright
  7898                                  ;	Bugbug:	remove Copyright label.
  7899                                  
  7900                                  ;if IBMVER
  7901 00001B89 833E[A502]00            	cmp	word [SingleCom],0
  7902 00001B8E 7506                    	jnz	short Drv0			; don't print header if SingleCom
  7903                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7904 00001B90 BA[9B21]                	mov	dx,COPYRIGHTMSG
  7905 00001B93 E845F8                  	call	RPrint
  7906                                  ;endif
  7907                                  	; 21/01/2023
  7908                                  	; MSDOS 3.3
  7909                                  	;cmp	word [SingleCom],0	; don't print header if SingleCom
  7910                                  	;jnz	short DRV0
  7911                                  	;mov	dx,HEADERPTR	; dx = ptr to msg
  7912                                  	;call	RPRINT
  7913                                  ;DRV0:
  7914                                  	; MSDOS 3.3
  7915                                  	;mov	byte [INITFLAG],0
  7916                                  	;jmp	ENDINIT
  7917                                  
  7918                                  	; 21/01/2023
  7919                                  	; MSDOS 6.0
  7920                                  Drv0:						; Reset APPEND state
  7921 00001B96 1E                      	push	ds				; save data segment
  7922 00001B97 0E                      	push	cs				; Get local segment into DS
  7923 00001B98 1F                      	pop	ds				;
  7924 00001B99 B807B7                  	mov	ax,0B707h ; 21/01/2023
  7925                                  	;mov	ax,APPENDSETSTATE		; Set the state of Append
  7926 00001B9C 8B1E[BE02]              	mov	bx,[Append_State] 		;  back to the original state
  7927 00001BA0 CD2F                    	int	2Fh				;
  7928 00001BA2 1F                      	pop	ds				; get data segment back
  7929                                  
  7930                                  ;Check FirstCom set previously to see if this is the first instance of
  7931                                  ;command.com. If not, we do not move command.com. Instead, we copy over the
  7932                                  ;jump table from the previous stub to the current stub.
  7933                                  
  7934 00001BA3 803E[9E26]01            	cmp	byte [FirstCom],1		; first command.com?
  7935 00001BA8 7431                    	jz	short move_code			; yes, move it
  7936                                  
  7937 00001BAA 06                      	push	es
  7938 00001BAB 1E                      	push	ds
  7939                                  
  7940 00001BAC 1E                      	push	ds
  7941 00001BAD 07                      	pop	es
  7942                                  	;mov	di,offset DATARES:Int2f_Entry
  7943 00001BAE BF[6600]                	mov	di,Int2f_Entry	
  7944                                  
  7945                                  	;mov	ds,[es:ResJmpTable+2]		; get segment address
  7946                                  	;mov	si,[es:ResJmpTable]		; get offset address
  7947                                  	; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7948 00001BB1 26C536[9A26]            	lds	si,[es:ResJmpTable]
  7949                                  
  7950                                  	;mov	cx,11
  7951                                  	;;mov 	cx,NUM_RELOC_ENTRIES 		; number of dword ptrs
  7952                                  	;shl	cx,1
  7953                                  	;shl	cx,1				; size of table in bytes
  7954                                  	; 21/01/2023
  7955 00001BB6 B92C00                  	mov	cx,44				; size of table in bytes
  7956                                  
  7957 00001BB9 FC                      	cld
  7958 00001BBA F3A4                    	rep	movsb				; copy the jump table
  7959                                  
  7960                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  7961                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:1D6Ch
  7962                                  %if 1
  7963 00001BBC A0[FA01]                	mov     al,[cox_location] ; "cox"
  7964 00001BBF 26A2[FA01]              	mov     [es:cox_location],al ; "cox"
  7965 00001BC3 A1[FB01]                	mov     ax,[cox_location+1]
  7966 00001BC6 A3[FB01]                	mov     [cox_location+1],ax
  7967                                  %endif
  7968                                  
  7969                                  ;Check if the resident code is in HMA. We assume that it is in HMA if its 
  7970                                  ;code segment > 0f000h. If in HMA, we set the ComInHMA flag
  7971                                  
  7972 00001BC9 26817DFE00F0            	cmp	word [es:di-2],0F000h		; is resident code in HMA?
  7973 00001BCF 7206                    	jb	short res_low			; no, dont set flag
  7974                                  
  7975 00001BD1 26C606[9600]01          	mov	byte [es:ComInHMA],1		; indicate code in HMA
  7976                                  res_low:
  7977 00001BD7 1F                      	pop	ds
  7978 00001BD8 07                      	pop	es
  7979 00001BD9 EB03                    	jmp	short finish_init
  7980                                  
  7981                                  ;Now, we can move the resident code to its final location, either to HIMEM
  7982                                  ;or to overlay the messages in the data segment if the user has not used the
  7983                                  ;/msg switch.
  7984                                  
  7985                                  move_code:
  7986 00001BDB E85702                  	call	Move_res_code			; move the code
  7987                                  
  7988                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  7989                                  ; PCDOS 7.1 COMMAND.COM
  7990                                  %if 0
  7991                                  finish_init:
  7992                                  	;jmp	RESGROUP:EndInit 		; finish initializing
  7993                                  	jmp	EndInit
  7994                                  %else
  7995                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:1D8Fh
  7996                                  finish_init:
  7997 00001BDE 803E[A202]01            	cmp	byte [PermCom],1
  7998 00001BE3 7523                    	jne	short finish_init_@
  7999 00001BE5 803E[0E04]01            	cmp	byte [COMMAND_HIGH],1	; COMMAND.COM will be moved to HMA/UMB
  8000 00001BEA 751C                    	jne	short finish_init_@
  8001 00001BEC BB4000                  	mov	bx,40h			; high memory first fit
  8002 00001BEF B80158                  	mov	ax,5801h		; set allocation strategy
  8003 00001BF2 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  8004                                  				; AL = function code: set allocation strategy
  8005 00001BF4 BB0100                  	mov	bx,1			; add UMBs to DOS memory chain
  8006 00001BF7 B80358                  	mov	ax,5803h		; set UMB link state
  8007 00001BFA CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  8008                                  				; AL = function code: (DOS 5beta) set UMB link state
  8009 00001BFC 720A                    	jb	short finish_init_@
  8010 00001BFE 8B1E[B404]              	mov	bx,[ResSize]
  8011 00001C02 B448                    	mov	ah,48h
  8012 00001C04 CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  8013                                  				; BX = number of 16-byte paragraphs desired
  8014 00001C06 7303                    	jnb	short patch_segments_hma
  8015                                  finish_init_@:
  8016 00001C08 E90AE7                  	jmp	EndInit
  8017                                  
  8018                                  patch_segments_hma:
  8019                                  	;mov	[ds:0Ch],ax
  8020 00001C0B A30C00                  	mov	[PDB.EXIT+2],ax
  8021                                  	;mov	[ds:10h],ax
  8022 00001C0E A31000                  	mov	[PDB.CTRL_C+2],ax
  8023                                  	;mov	[ds:14h],ax
  8024 00001C11 A31400                  	mov	[PDB.FATAL_ABORT+2],ax
  8025                                  	;mov	[ds:16h],ax
  8026 00001C14 A31600                  	mov	[PDB.PARENT_PID],ax
  8027                                  	;mov	[ds:36h],ax
  8028 00001C17 A33600                  	mov	[PDB.JFN_Pointer+2],ax
  8029 00001C1A A3[3E02]                	mov	[Parent],ax
  8030 00001C1D A3[4202]                	mov	[OldTerm+2],ax
  8031 00001C20 A3[3E04]                	mov	[Com_Ptr+2],ax
  8032 00001C23 A3[4204]                	mov	[Com_Fcb1+2],ax
  8033 00001C26 A3[4604]                	mov	[Com_Fcb2+2],ax
  8034 00001C29 A3[4A04]                	mov	[MySeg],ax
  8035 00001C2C A3[5204]                	mov	[MySeg1],ax
  8036 00001C2F A3[5604]                	mov	[MySeg2],ax
  8037 00001C32 A3[5607]                	mov	[MySeg3],ax
  8038 00001C35 A3[2801]                	mov	[int2fh_segm],ax ; [Carousel_i2f_Hook+3] ; 23/07/2024
  8039                                  	;mov	di,(offset Int2f_Entry+2)
  8040 00001C38 BF[6800]                	mov	di,Int2f_Entry+2
  8041 00001C3B 833DFF                  	cmp	word [di],0FFFFh
  8042 00001C3E 7409                    	jz	short already_hma
  8043 00001C40 B10B                    	mov	cl,11		; NUM_RELOC_ENTRIES
  8044                                  patch_entry_seg:
  8045 00001C42 8905                    	mov	[di],ax
  8046 00001C44 83C704                  	add	di,4
  8047 00001C47 E2F9                    	loop	patch_entry_seg
  8048                                  already_hma:
  8049 00001C49 8EC0                    	mov	es,ax
  8050 00001C4B 31F6                    	xor	si,si
  8051 00001C4D 31FF                    	xor	di,di
  8052 00001C4F B103                    	mov	cl,3			; BX = resident part size in paragraphs
  8053                                  					; after shifting: resident part size in words
  8054 00001C51 D3E3                    	shl	bx,cl			; move resident part of COMMAND.COM to HMA (UMB)
  8055 00001C53 89D9                    	mov	cx,bx			; number of words
  8056 00001C55 F3A5                    	rep movsw
  8057 00001C57 1E                      	push	ds
  8058 00001C58 8ED9                    	mov	ds,cx	; 0
  8059                                  	;mov	[ds:0BAh],ax	; INT 2Eh segment
  8060 00001C5A A3BA00                  	mov	[(2Eh*4)+2],ax
  8061 00001C5D 40                      	inc	ax
  8062                                  	;mov	[ds:0BEh],ax	; INT 2Fh segment
  8063 00001C5E A3BE00                  	mov	[(2Fh*4)+2],ax
  8064 00001C61 1F                      	pop	ds
  8065 00001C62 8CC3                    	mov	bx,es
  8066 00001C64 B450                    	mov	ah,50h
  8067 00001C66 CD21                    	int	21h		; DOS - 2+ internal - SET PSP SEGMENT
  8068                                  				; BX = segment address of new PSP
  8069 00001C68 4B                      	dec	bx
  8070 00001C69 8EC3                    	mov	es,bx			; memory arena header (segment)
  8071 00001C6B 43                      	inc	bx			; PSP (program) address/segment
  8072                                  	;mov	[es:1],bx
  8073                                  	;mov	[es:ARENA.owner],bx
  8074 00001C6C 26891E0100              	mov	[es:arena_owner],bx
  8075                                  	;mov	word [es:8],4F43h	; 'CO' ; [es:arena_name]
  8076 00001C71 26C7060800434F          	mov	word [es:arena_name],4F43h
  8077                                  	;mov	word [es:0Ah],4D4Dh	; 'MM'
  8078 00001C78 26C7060A004D4D          	mov	word [es:arena_name+2],4D4Dh
  8079                                  	;mov	word [es:0Ch],4E41h	; 'AN'
  8080 00001C7F 26C7060C00414E          	mov	word [es:arena_name+4],4E41h
  8081                                  	;mov	word [es:0Eh],44h	; 'D'
  8082 00001C86 26C7060E004400          	mov	word [es:arena_name+6],44h
  8083 00001C8D FE06[0E04]              	inc	byte [COMMAND_HIGH]	; = 2
  8084                                  					; Resident portion of COMMAND.COM is
  8085                                  					; in HMA/UMB flag (=2)
  8086 00001C91 53                      	push	bx
  8087                                  	;mov	ax,offset EndInit
  8088 00001C92 B8[1503]                	mov	ax,EndInit
  8089 00001C95 50                      	push	ax
  8090 00001C96 CB                      	retf	
  8091                                  %endif
  8092                                  
  8093                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8094                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1BA8h (CODERES:0E68h)
  8095                                  
  8096                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  8097                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1E48h
  8098                                  
  8099                                  GetStrLen:
  8100                                  ;	Get length of string pointed to by DS:SI. Length includes NULL.
  8101                                  ;	Length is returned in CX
  8102                                  
  8103                                  	; MSDOS 3.3 & MSDOS 6.0
  8104 00001C97 31C9                    	xor	cx,cx
  8105                                  NxtChar:
  8106 00001C99 AC                      	lodsb
  8107 00001C9A 41                      	inc	cx
  8108 00001C9B 08C0                    	or	al,al
  8109 00001C9D 75FA                    	jnz	short NxtChar
  8110 00001C9F C3                      	retn
  8111                                  
  8112                                  	; 29/01/2023
  8113                                  Setup_Seg:
  8114                                  
  8115                                  ; If the transient has been loaded in TranSeg, then we need to use that
  8116                                  ; segment for calls to routines in the transient area. Otherwise, the current
  8117                                  ; code segment is used
  8118                                  ; Segment returned in AX.
  8119                                  
  8120                                  	; MSDOS 3.3 & MSDOS 6.0
  8121 00001CA0 A1[8F02]                	mov	ax,[TrnSeg]
  8122 00001CA3 803E[9102]01            	cmp	byte [TrnMvFlg],1	; Has transient portion been moved
  8123 00001CA8 7405                    	je	short setup_end
  8124                                  
  8125                                  ;06/06/2023
  8126                                  %if 0
  8127                                  	push	bx
  8128                                  	mov	bx,cs
  8129                                  	;mov	ax,offset ResGroup:TranStart
  8130                                  	;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  8131                                  	; 06/06/2023
  8132                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  8133                                  	;mov	ax,TRANSTART
  8134                                  	;shr	ax,1
  8135                                  	;shr	ax,1
  8136                                  	;shr	ax,1
  8137                                  	;shr	ax,1
  8138                                  	; 29/01/2023
  8139                                  	mov	ax,TRANSTART>>4
  8140                                  	add	ax,bx
  8141                                  	pop	bx
  8142                                  %endif
  8143                                  	; 06/06/2023
  8144 00001CAA 8CC8                    	mov	ax,cs
  8145 00001CAC 057E02                  	add	ax,TRANSTART>>4
  8146                                  
  8147                                  setup_end:
  8148 00001CAF C3                      	retn
  8149                                  
  8150                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8151                                  ;RPRINT:
  8152                                  	; MSDOS 3.3
  8153                                  	;push	ax
  8154                                  	;call	SETUP_SEG
  8155                                  	;mov	[PRINTADD+2], ax
  8156                                  	;;call	dword ptr PRINTADD
  8157                                  	;call	far [PRINTADD]
  8158                                  	;pop	ax
  8159                                  	;retn
  8160                                  
  8161                                  	; 29/01/2023
  8162                                  	; MSDOS 6.0
  8163                                  ;***	RPrintParse - display parse error message
  8164                                  ;
  8165                                  ;	ENTRY	DX = parse error #
  8166                                  ;
  8167                                  ;	EXIT	nothing
  8168                                  ;
  8169                                  ;	USED	flags
  8170                                  ;
  8171                                  ;	EFFECTS
  8172                                  ;	  Message is displayed on stdout.
  8173                                  
  8174                                  RPrintParse:	;proc
  8175                                  	;assume	ds:ResGroup,ss:ResGroup
  8176                                  
  8177 00001CB0 52                      	push	dx				; preserve DX
  8178 00001CB1 87DA                    	xchg	bx,dx				; bx = parse error #
  8179                                  						; dx = saved BX
  8180 00001CB3 4B                      	dec	bx				; bx = parse error index, from 0
  8181 00001CB4 D1E3                    	shl	bx,1				; bx = offset in word table
  8182                                  	;mov	bx,ParsMsgPtrs[bx]		; bx = ptr to error msg
  8183 00001CB6 8B9F[E309]              	mov	bx,[bx+PARSMSGPTRS]
  8184 00001CBA 87DA                    	xchg	bx,dx				; dx = ptr to error msg
  8185                                  						; bx = restored
  8186 00001CBC E81CF7                  	call	RPrint				; print the message
  8187 00001CBF 5A                      	pop	dx				; restore DX
  8188 00001CC0 C3                      	retn
  8189                                  
  8190                                  ;RPrintParse	endp
  8191                                  
  8192                                  	; 29/01/2023
  8193                                  ;PATHCHRCMPR:
  8194                                  	; MSDOS 3.3
  8195                                  	;push	dx
  8196                                  	;mov	dl,[slash_chr]
  8197                                  	;;cmp	byte [RSWITCHAR],'/'
  8198                                          ;cmp	[RSWITCHAR],dl
  8199                                  	;je	short RNOSLASHT
  8200                                  	;;cmp	al,'/'
  8201                                  	;cmp	al,dl
  8202                                  	;je	short RET41 ; zf = 1 
  8203                                  ;RNOSLASHT:
  8204                                          ;;cmp	al,'\'
  8205                                  	;cmp	al,[bslash_chr]
  8206                                  ;RET41:
  8207                                  	;pop	dx
  8208                                  	;retn
  8209                                  
  8210                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8211                                  IfindE:
  8212                                  	; MSDOS 3.3 & MSDOS 6.0
  8213 00001CC1 E80300                  	call	ifind				; find the name
  8214                                  	;jc	short ifind2			; carry means not found
  8215                                  	;jmp	short Iscasb1 			; scan for = sign
  8216                                  	; 29/01/2023
  8217 00001CC4 734E                    	jnc	short Iscasb1
  8218                                  ifind2:
  8219 00001CC6 C3                      	retn
  8220                                  
  8221                                  	; 29/01/2023
  8222                                  
  8223                                  ; on return of find1, es:di points to beginning of name
  8224                                  
  8225                                  ifind:
  8226 00001CC7 FC                      	cld
  8227 00001CC8 E83B00                  	call	Icount0				; cx = length of name
  8228 00001CCB 8E06[3A04]              	mov	es,[EnvirSeg]
  8229 00001CCF 31FF                    	xor	di,di
  8230                                  ifind1:
  8231 00001CD1 51                      	push	cx
  8232 00001CD2 56                      	push	si
  8233 00001CD3 57                      	push	di
  8234                                  ifind11:
  8235 00001CD4 AC                      	lodsb
  8236                                  
  8237                                  ; 23/07/2024 - Retro DOS v5.0 COMMAND.COM
  8238                                  ; PCDOS 7.1 COMMAND.COM
  8239                                  %if 1
  8240                                  ;ifdef DBCS
  8241 00001CD5 E8A5F7                  	call	ITestKanj
  8242 00001CD8 740F                    	jz	short _NotKanj4
  8243 00001CDA 4E                      	dec	si
  8244 00001CDB AD                      	lodsw
  8245 00001CDC 47                      	inc	di
  8246 00001CDD 47                      	inc	di
  8247 00001CDE 263B45FE                	cmp	ax,[es:di-2]
  8248 00001CE2 7511                    	jne	short ifind12
  8249 00001CE4 49                      	dec	cx
  8250 00001CE5 E2ED                    	loop	ifind11
  8251 00001CE7 EB0C                    	jmp	short ifind12
  8252                                  _NotKanj4:
  8253                                  ;endif
  8254                                  %endif
  8255 00001CE9 E83400                  	call	iupconv
  8256 00001CEC 47                      	inc	di
  8257 00001CED 263A45FF                	cmp	al,[es:di-1]
  8258 00001CF1 7502                    	jnz	short ifind12
  8259 00001CF3 E2DF                    	loop	ifind11
  8260                                  ifind12:
  8261 00001CF5 5F                      	pop	di
  8262 00001CF6 5E                      	pop	si
  8263 00001CF7 59                      	pop	cx
  8264 00001CF8 74CC                    	jz	short ifind2
  8265 00001CFA 51                      	push	cx
  8266 00001CFB E81A00                  	call	Iscasb2 			; scan for a nul
  8267 00001CFE 59                      	pop	cx
  8268                                  	;cmp	byte [es:di],0
  8269                                  	;jnz	short ifind1
  8270                                  	;stc					; indicate not found
  8271 00001CFF 26803D01                	cmp	byte [es:di],1
  8272 00001D03 73CC                    	jnb	short ifind1
  8273                                  	; cf=1					; indicate not found
  8274                                  ;ifind2:
  8275 00001D05 C3                      	retn
  8276                                  
  8277                                  	; 29/01/2023
  8278                                  Icount0:
  8279 00001D06 1E                      	push	ds
  8280 00001D07 07                      	pop	es
  8281 00001D08 89F7                    	mov	di,si
  8282                                  
  8283 00001D0A 57                      	push	di				; count number of chars until "="
  8284 00001D0B E80600                  	call	Iscasb1
  8285                                  	; 25/09/2018
  8286                                  	;jmp	short Icountx
  8287                                  	;push	di				; count number of chars until nul
  8288                                  	;call	Iscasb2
  8289                                  ;Icountx:
  8290 00001D0E 59                      	pop	cx
  8291 00001D0F 29CF                    	sub	di,cx
  8292 00001D11 87F9                    	xchg	di,cx
  8293 00001D13 C3                      	retn
  8294                                  
  8295                                  Iscasb1:
  8296                                  	; 29/01/2023
  8297 00001D14 B03D                    	mov	al,"="
  8298                                  	;mov	al,[equalsign] ; [equal_sign]	; scan for an =
  8299 00001D16 EB02                    	jmp	short Iscasbx
  8300                                  Iscasb2:
  8301 00001D18 30C0                    	xor	al,al				; scan for a nul
  8302                                  Iscasbx:
  8303 00001D1A B90001                  	mov	cx,256 ; 100h
  8304 00001D1D F2AE                    	repnz	scasb
  8305 00001D1F C3                      	retn
  8306                                  
  8307                                  	; 29/01/2023
  8308                                  ;IUPCONV:
  8309                                  	; MSDOS 3.3
  8310                                          ;;cmp	al,"a"
  8311                                  	;cmp	al,[letter_a]
  8312                                          ;jb	short IRET22
  8313                                          ;;cmp	al,"z"
  8314                                          ;cmp	al,[letter_z]
  8315                                  	;ja	short IRET22
  8316                                          ;sub	al,20h			; Lower-case changed to upper-case
  8317                                  ;IRET22:
  8318                                  	;retn
  8319                                  
  8320                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8321                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C32h
  8322                                  
  8323                                  	; MSDOS 6.0
  8324                                  ; *****************************************************************
  8325                                  ; *
  8326                                  ; * ROUTINE:	 IUPCONV    (ADDED BY EMG 4.00)
  8327                                  ; *
  8328                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
  8329                                  ; *		 the character in AL from the file upper case table
  8330                                  ; *		 in DOS if character if above ascii 128, else
  8331                                  ; *		 subtracts 20H if between "a" and "z".
  8332                                  ; *
  8333                                  ; * INPUT:	 DS	      set to resident
  8334                                  ; *		 AL	      char to be upper cased
  8335                                  ; *		 FUCASE_ADDR  set to the file upper case table
  8336                                  ; *
  8337                                  ; * OUTPUT:	 AL	      upper cased character
  8338                                  ; *
  8339                                  ; *****************************************************************
  8340                                  
  8341                                  iupconv:	;proc	near				
  8342                                  	;assume	ds:ResGroup			;
  8343                                  
  8344 00001D20 3C80                    	cmp	al,80h				; see if char is > ascii 128
  8345 00001D22 7210                    	jb	short other_fucase		; no - upper case math
  8346 00001D24 2C80                    	sub	al,80h				; only upper 128 chars in table
  8347 00001D26 1E                      	push	ds				;
  8348 00001D27 53                      	push	bx				;
  8349                                  	;lds	bx,dword ptr FUCase_Addr+1	; get table address
  8350 00001D28 C51E[B602]              	lds     bx,[FUCase_Addr+1]
  8351 00001D2C 83C302                  	add	bx,2				; skip over first word
  8352                                  	;xlat	ds:byte ptr [bx]		; convert to upper case
  8353 00001D2F D7                      	xlat
  8354 00001D30 5B                      	pop	bx				;
  8355 00001D31 1F                      	pop	ds				;
  8356 00001D32 EB0A                    	jmp	short iupconv_end		; we finished - exit
  8357                                  
  8358                                  other_fucase:					;
  8359                                  	;cmp	al,[lcasea] ; [letter_a]	; if between "a" and "z",
  8360 00001D34 3C61                    	cmp	al,'a'
  8361 00001D36 7206                    	jb	short iupconv_end		;     subtract 20h to get
  8362                                  	;cmp	al,[lcasez] ; [letter_z]	; upper case equivalent.
  8363 00001D38 3C7A                    	cmp	al,'z'
  8364 00001D3A 7702                    	ja	short iupconv_end		;
  8365 00001D3C 2C20                    	sub	al,20h				; Change lower-case to upper
  8366                                  iupconv_end:					;
  8367 00001D3E C3                      	retn
  8368                                  
  8369                                  ;iupConv endp
  8370                                  
  8371                                  	; 29/01/2023
  8372                                  init_contc_specialcase:
  8373                                  	; MSDOS 3.3 & MSDOS 6.0
  8374                                  						; This routine is called if control-C
  8375 00001D3F 83C406                  	add	sp,6				;  is type during the date/time prompt
  8376 00001D42 56                      	push	si				;  at initialization time.  The desired
  8377 00001D43 89D6                    	mov	si,dx				;  response is to make it look like the
  8378 00001D45 C74401000D              	mov	word [si+1],0D00h		;  user typed <CR> by "popping" the
  8379 00001D4A 5E                      	pop	si				;  INT 21h stuff off the stack, putting
  8380 00001D4B CF                      	iret					;  a <CR> in the user's buffer, and
  8381                                  						;  returning directly to the user.
  8382                                  						; In this case the user is TCODE.
  8383                                  
  8384                                  ; ----------------------------------------------------------------------------
  8385                                  
  8386                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8387                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C62h (CODERES:0F22h)
  8388                                  
  8389                                  	; MSDOS 6.0
  8390                                  ; ****************************************************************
  8391                                  ; *
  8392                                  ; * ROUTINE:	 Setup_for_messages
  8393                                  ; *
  8394                                  ; * FUNCTION:	 Sets up system for PARSE and EXTENDED ERROR
  8395                                  ; *		 messages as follows:
  8396                                  ; *
  8397                                  ; *		 IF /P and /MSG are entered
  8398                                  ; *		    keep PARSE and EXTENDED ERRORS in memory
  8399                                  ; *		 ELSE IF /P is entered
  8400                                  ; *		    use PARSE and EXTENDED ERRORS on disk
  8401                                  ; *		    remove PARSE ERRORS from memory
  8402                                  ; *		 ELSE
  8403                                  ; *		    remove PARSE ERRORS from memory
  8404                                  ; *		 ENDIF
  8405                                  ; *
  8406                                  ; * INPUT:	 PERMCOM	Set up with user input
  8407                                  ; *		 EXT_MSG	Set up with user input
  8408                                  ; *		 System set up to retain PARSE ERRORS
  8409                                  ; *
  8410                                  ; * OUTPUT:	 registers unchanged
  8411                                  ; *
  8412                                  ; ****************************************************************
  8413                                  
  8414                                  setup_for_messages: ;proc near		
  8415                                  
  8416 00001D4C 53                      	push	bx
  8417 00001D4D 1E                      	push	ds				; save data segment
  8418 00001D4E 06                      	push	es				; save environment segment
  8419 00001D4F 50                      	push	ax				;
  8420 00001D50 52                      	push	dx				;
  8421 00001D51 57                      	push	di				;
  8422 00001D52 8CC8                    	mov	ax,cs				; get local segment to ES and DS
  8423 00001D54 8ED8                    	mov	ds,ax				;
  8424 00001D56 8EC0                    	mov	es,ax				;
  8425                                  
  8426 00001D58 803E[A202]00            	cmp	byte [PermCom],0		; was permcom set?
  8427 00001D5D 743C                    	jz	short no_permcom		; No - don't worry about messages
  8428                                  
  8429                                  ;*	We're permanent. Install our message services int 2f handler.
  8430                                  
  8431 00001D5F 06                      	push	es
  8432                                  	;mov	ax,(GET_INTERRUPT_VECTOR shl 8) or 2Fh
  8433 00001D60 B82F35                  	mov	ax,352Fh
  8434 00001D63 CD21                    	int	21h
  8435                                  			; DOS - 2+ - GET INTERRUPT VECTOR
  8436                                  			; AL = interrupt number
  8437                                  			; Return: ES:BX = value of interrupt vector
  8438 00001D65 891E[AE04]              	mov	[Int2fHandler],bx
  8439 00001D69 8C06[B004]              	mov	[Int2fHandler+2],es
  8440 00001D6D 07                      	pop	es
  8441                                  
  8442                                  ;	DS = RESGROUP seg addr
  8443                                  
  8444                                  ; M005; We will not hook int 2fh on any command.com other than the first.
  8445                                  ; M005; Carousel loads as a permanent command.com and when we exit Carousel,
  8446                                  ; M005; it just wipes our arena out. So, int 2fh is still hooked and the
  8447                                  ; M005; first int 2fh call after exit from Carousel (from the DOS terminate
  8448                                  ; M005; call) goes off into space.
  8449                                  
  8450 00001D6E 803E[9E26]00            	cmp	byte [FirstCom],0		; M005
  8451 00001D73 7416                    	je	short no_msg_hook		; M005
  8452                                  ;
  8453                                  ; M005; !!!SLIMIEST CAROUSEL HACK OFF ALL!!!
  8454                                  ; M005; Carousel plays around with the interrupt vector tables. He saves it
  8455                                  ; M005; before loading a new command.com. Then, it takes hold of the current
  8456                                  ; M005; command.com's PSP and then looks at all interrupt vectors whose
  8457                                  ; M005; segment matches the command.com PSP and then updates these segments
  8458                                  ; M005; to the new command.com's PSP in his saved vector table. Whenever we
  8459                                  ; M005; we pop into his menu, he puts this saved table into the vector table.
  8460                                  ; M005; If we now quit, Carousel just wipes out command.com's arena and then
  8461                                  ; M005; issues a terminate. Unfortunately, the int 2fh vector is pointing at
  8462                                  ; M005; the command.com that was wiped out and so the next int 2fh call will
  8463                                  ; M005; bomb. To prevent Carousel from doing this clever(1**$$#) patching, we
  8464                                  ; M005; renormalize our int 2fh pointer so that its cs is not the same as the
  8465                                  ; M005; command.com PSP. Now, he does no such patching and our int 2fh vector
  8466                                  ; M005; remains nice and happy. The renormalized pointer points at a far 
  8467                                  ; M005; jump to the actual int 2fh entry point.
  8468                                  ;
  8469 00001D75 1E                      	push	ds				; M005
  8470                                  	;mov	dx,offset DATARES:Carousel_i2f_Hook ; M005
  8471 00001D76 BA[2501]                	mov     dx,Carousel_i2f_Hook
  8472 00001D79 83EA10                  	sub	dx,10h				; renormalize offset; M005
  8473 00001D7C 8CD8                    	mov	ax,ds				; M005
  8474 00001D7E 40                      	inc	ax				; Relocated cs ; M005
  8475 00001D7F 8ED8                    	mov	ds,ax				; M005
  8476                                  	;mov	ax,(SET_INTERRUPT_VECTOR shl 8) or 2Fh
  8477 00001D81 B82F25                  	mov	ax,252Fh
  8478 00001D84 CD21                    	int	21h
  8479                                  			; DOS - SET INTERRUPT VECTOR
  8480                                  			; AL = interrupt number
  8481                                  			; DS:DX = new vector to be used for specified interrupt
  8482 00001D86 1F                      	pop	ds				; M005
  8483                                  	;mov	word ptr Carousel_i2f_Hook+3,ds	; M005
  8484 00001D87 8C1E[2801]              	mov	[Carousel_i2f_Hook+3],ds  ; mov [int2fh_segm], ds ; 23/07/2024
  8485                                  						; patch in the cs for jump
  8486                                  no_msg_hook:					; M005
  8487 00001D8B 803E[9920]01            	cmp	byte [ext_msg],1 ; SET_EXTENDED_MSG
  8488 00001D90 7516                    	jne	short permcom_end		; no /msg - exit
  8489                                  
  8490                                  permcom_slash_msg:				; Keep messages in memory
  8491                                  	;mov	di,offset ResGroup:ExtMsgEnd 	; get address of resident end
  8492                                  	;mov	di,0DD8h ; PCDOS 7.1 COMMAND.COM (*)
  8493 00001D92 BF[DC0C]                	mov     di,ExtMsgEnd ; = offset PATRICIDE ; 23/07/2024 (*)
  8494 00001D95 893E[B204]              	mov	[ResMsgEnd],di			; save it
  8495 00001D99 EB0D                    	jmp	short permcom_end		; exit
  8496                                  
  8497                                  no_permcom:					
  8498                                  	;cmp	byte [ext_msg],SET_EXTENDED_MSG	; was /msg specified?
  8499 00001D9B 803E[9920]01            	cmp	byte [ext_msg],1
  8500 00001DA0 7506                    	jne	short permcom_end		; no - no error
  8501                                  	;mov	dx,LessArgs_Ptr			; get message number for "Required parameter missing"
  8502 00001DA2 BA0200                  	mov	dx,2
  8503 00001DA5 E808FF                  	call	RPrintParse
  8504                                  
  8505                                  permcom_end:
  8506 00001DA8 5F                      	pop	di				;
  8507 00001DA9 5A                      	pop	dx				;
  8508 00001DAA 58                      	pop	ax				;
  8509 00001DAB 07                      	pop	es				; get environment back
  8510 00001DAC 1F                      	pop	ds				;
  8511 00001DAD 5B                      	pop	bx
  8512                                  
  8513 00001DAE C3                      	retn					;
  8514                                  
  8515                                  ;setup_for_messages	endp
  8516                                  
  8517                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8518                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1CC5h
  8519                                  
  8520                                  	; MSDOS 6.0
  8521                                  
  8522                                  ;***	CheckHelp - print help text and exit if /? is on command line
  8523                                  ;
  8524                                  ;	ENTRY	command-line tail at 81h
  8525                                  ;
  8526                                  ;	EXIT	return if /? not found
  8527                                  ;		terminate if /? found
  8528                                  ;
  8529                                  ;	USED	AX,BX,CX,DX,SI,DI
  8530                                  ;
  8531                                  ;	EFFECTS	Help text displayed if /? found on command line
  8532                                  
  8533                                  CheckHelp:	; proc
  8534                                  	;assume	cs:RESGROUP,ds:RESGROUP,es:RESGROUP,ss:RESGROUP
  8535                                  
  8536 00001DAF BE8100                  	mov	si,81h			; DS:SI = ptr to command-line tail
  8537                                  	;mov	di,offset RESGROUP:Parse_Command
  8538 00001DB2 BF[9E20]                	mov	di,PARSE_COMMAND
  8539                                  					; ES:DI = ptr to primary parse block
  8540 00001DB5 31C9                    	xor	cx,cx			; CX = # positional param's found
  8541 00001DB7 31D2                    	xor	dx,dx			; DX will be ptr to result buffer
  8542                                  chParse:
  8543                                  	;call	dword ptr Init_Parse
  8544 00001DB9 FF1E[9320]              	call	far [Init_Parse]	; call system parser
  8545                                  
  8546                                  	;;cmp	ax,END_OF_LINE
  8547                                  	;cmp	ax,-1 ; 0FFFFh	
  8548                                  	;je	short chRet		; end of command line, no /? found
  8549                                  	;;cmp	ax,RESULT_NO_ERROR
  8550                                  	;;cmp	ax,0
  8551                                  	;;je	short chWhich		; valid syntax element found
  8552                                  	;;jmp	short chParse		; go parse more
  8553                                  	;and	ax,ax ; cmp ax,0
  8554                                  	;jnz	short chParse ; jne
  8555                                  	; 10/06/2023
  8556 00001DBD 40                      	inc	ax	; cmp ax,-1
  8557 00001DBE 741B                    	jz	short chRet   ; 0FFFFh -> 0
  8558 00001DC0 48                      	dec	ax	; cmp ax,0
  8559 00001DC1 75F6                    	jnz	short chParse ; 1 -> 0
  8560                                  	; ax = 0
  8561                                  chWhich:
  8562                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_?_Syn
  8563 00001DC3 813E[5D21][2821]        	cmp     word [COMND1_SYN],COMMAND_?_SYN ; "/?"
  8564 00001DC9 7411                    	je	short chHelp		; /? found - display help & exit
  8565                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_C_Syn
  8566 00001DCB 813E[5D21][0E21]        	cmp     word [COMND1_SYN],COMMAND_C_SYN ; "/C"
  8567                                  	; 06/06/2023
  8568 00001DD1 7408                    	je	short chRet		; /c found - ignore rest of line
  8569                                  	; 29/01/2023
  8570                                  	;jne	short chParse
  8571                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  8572                                  	; MSDOS 6.0
  8573                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_K_Syn
  8574 00001DD3 813E[5D21][3421]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; "/K"
  8575                                  	;je	short chRet		; /k found - ignore rest of line
  8576                                  	;jmp	short chParse		; anything else - ignore, keep looking
  8577                                  	; 06/06/2023
  8578 00001DD9 75DE                    	jne	short chParse
  8579                                  chRet:
  8580 00001DDB C3                      	retn
  8581                                  chHelp:
  8582                                  	;mov	si,offset RESGROUP:HelpMsgs	; SI = ptr to msg ptr list
  8583 00001DDC BE[6426]                	mov	si,HelpMsgs
  8584                                  chHelpNext:
  8585 00001DDF AD                      	lodsw					; AX = ptr to msg
  8586 00001DE0 09C0                    	or	ax,ax
  8587 00001DE2 7407                    	jz	short chHelpDone		; end of list - all done
  8588 00001DE4 89C2                    	mov	dx,ax				; DX = ptr to msg
  8589 00001DE6 E8F2F5                  	call	RPrint				; display msg
  8590 00001DE9 EBF4                    	jmp	short chHelpNext		; go do next msg
  8591                                  
  8592                                  chHelpDone:
  8593 00001DEB CD20                    	int	20h				; terminate program
  8594                                  ;chRet:
  8595 00001DED C3                      	retn
  8596                                  
  8597                                  ;CheckHelp	endp
  8598                                  
  8599                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8600                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D03h
  8601                                  
  8602                                  	; MSDOS 6.0
  8603                                  
  8604                                  ;***** Setup_res_end -- This routine determines the resident size of COMMAND.
  8605                                  ;
  8606                                  ; It determines based on 2 factors:
  8607                                  ;	1. Is this is the first COMMAND?
  8608                                  ;	2. Is COMMAND to be loaded into HIMEM?
  8609                                  ;   The strategy works as follows:
  8610                                  ;
  8611                                  ;	if (First COMMAND)
  8612                                  ;	then if (COMMAND in HIMEM)
  8613                                  ;		ResSize = resident_data;
  8614                                  ;	     else
  8615                                  ;		ResSize = resident_data + resident_code;
  8616                                  ;	else
  8617                                  ;	   ResSize = resident_data;
  8618                                  ;
  8619                                  ; Int 2fh calls have been added to determine whether or not we are the first
  8620                                  ; COMMAND and whether DOS is in HIMEM.
  8621                                  ;
  8622                                  ;	ENTRY: ResMsgEnd = resident size of data in paras
  8623                                  ;
  8624                                  ;	EXIT:  ResSize = resident size in low memory
  8625                                  ;
  8626                                  ;	REGISTERS AFFECTED: ax,cx,dx
  8627                                  ;
  8628                                  
  8629                                  GET_HMA_ADDR	equ	4A02h
  8630                                  
  8631                                  	; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8632                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1FBFh
  8633                                  
  8634                                  Setup_res_end:	;proc near
  8635                                  	
  8636 00001DEE 1E                      	push	ds
  8637 00001DEF 8CC8                    	mov	ax,cs
  8638 00001DF1 8ED8                    	mov	ds,ax				;ds = RESGROUP
  8639                                  	;assume	ds:RESGROUP
  8640                                  
  8641 00001DF3 8B0E[B204]              	mov	cx,[ResMsgEnd]			;set resident size = data
  8642                                  
  8643                                  ;ifndef	ROMDOS
  8644                                  
  8645                                  ;M042 -- Begin changes
  8646                                  ;If messages are to be kept behind, we need to round up the messages to
  8647                                  ;the next para boundary. This is because we have a dummy segment between the
  8648                                  ;data and the resident code segment so that the code segment starts on a
  8649                                  ;para boundary
  8650                                  
  8651                                  	;cmp	cx,offset RESGROUP:ExtMsgEnd	;messages to be resident?
  8652                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  8653                                  	;cmp	cx,0DD8h
  8654 00001DF7 81F9[DC0C]              	cmp	cx,ExtMsgEnd
  8655 00001DFB 7506                    	jne	short calc_res			;no, continue
  8656 00001DFD 83C10F                  	add	cx,15				;round up
  8657 00001E00 83E1F0                  	and	cx,0FFF0h
  8658                                  calc_res:
  8659                                  
  8660                                  ;M042 -- End changes
  8661                                  
  8662                                  	; 18/07/2024
  8663                                  	;xor	ax,ax
  8664                                         	
  8665 00001E03 803E[9E26]01            	cmp	byte [FirstCom],1		;is it first command.com?
  8666                                  	;jne	short not_first			;no, do not keep code
  8667                                  	; 06/06/2023
  8668 00001E08 751A                    	jne	short not_first2
  8669                                  
  8670                                  ;We issue a version check call with al=01 to detect if DOS is in HMA. If so,
  8671                                  ;bit 4 of dh is set
  8672                                  
  8673 00001E0A 53                      	push	bx
  8674 00001E0B 51                      	push	cx
  8675                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ;is DOS in HIMEM? ;M013
  8676 00001E0C B80633                  	mov	ax,3306h
  8677 00001E0F CD21                    	int	21h
  8678                                  		; DOS - 5+ Get TRUE Version Number
  8679                                  		; (BL major, BH minor, DL revision, DH flags)
  8680 00001E11 59                      	pop	cx
  8681                                  
  8682                                  ;bugbug: remove version check after testing
  8683                                  
  8684 00001E12 80FB05                  	cmp	bl,5				;bl has true version ; M013
  8685 00001E15 7207                    	jb	short oldver
  8686                                  
  8687 00001E17 31C0                    	xor	ax,ax
  8688 00001E19 80E610                  	and	dh,10h				;is DOS in HMA ; M013
  8689                                  	;pop	bx
  8690                                  	;jnz	short not_first			;DOS in HIMEM, code not
  8691                                  						;	resident
  8692                                  	; 29/01/2023
  8693 00001E1C 7503                    	jnz	short not_first_pop
  8694                                  oldver:
  8695                                  	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8696                                  	; 06/06/2023
  8697                                  	;;mov	ax,81Ah ; MSDOS 5.0 and MSDOS 6.22 COMMAND.COM
  8698                                  	; 06/06/2023
  8699                                  	; 29/01/2023
  8700                                  	;mov	ax,EndCode-(RCODE_START+100h) ; 23/04/2023
  8701                                  	; 03/05/2023
  8702 00001E1E B8(7209)                	mov	ax,EndCode-RCODE_START	; 06/06/2023
  8703                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  8704                                  	;mov	ax,894h ; EndCode-RCODE_START
  8705                                  
  8706                                  not_first_pop:
  8707                                  	; 29/01/2023
  8708 00001E21 5B                      	pop	bx
  8709                                  
  8710                                  not_first:
  8711                                  
  8712                                  ;Note that ax = 0 (side effect of int 2fh), if the code is not to be retained
  8713                                  
  8714 00001E22 01C1                    	add	cx,ax
  8715                                  
  8716                                  not_first2:	; 06/06/2023
  8717                                  
  8718                                  ;endif	;not ROMDOS
  8719                                  
  8720 00001E24 83C10F                  	add	cx,15				;round up to next para
  8721 00001E27 D1E9                    	shr	cx,1
  8722 00001E29 D1E9                    	shr	cx,1
  8723 00001E2B D1E9                    	shr	cx,1
  8724 00001E2D D1E9                    	shr	cx,1				;ax = para size of res code
  8725 00001E2F 890E[B404]              	mov	[ResSize],cx			;store resident size
  8726                                  
  8727 00001E33 1F                      	pop	ds
  8728                                  	;assume	ds:nothing
  8729 00001E34 C3                      	retn
  8730                                  
  8731                                  ;ifndef	ROMDOS
  8732                                  
  8733                                  ;bugbug: remove this code (for version independent COMMAND) after testing
  8734                                  
  8735                                  	; 29/01/2023
  8736                                  ;oldver:
  8737                                  ;	pop	bx
  8738                                  ;	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8739                                  ;	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8740                                  ;	; 29/01/2023
  8741                                  ;	mov	ax,EndCode-RCODE_START
  8742                                  ;	jmp	short not_first
  8743                                  
  8744                                  ;endif	;not ROMDOS
  8745                                  
  8746                                  ;setup_res_end	endp
  8747                                  
  8748                                  ;ifndef	ROMDOS
  8749                                  
  8750                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8751                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8752                                  
  8753                                  	; MSDOS 6.0
  8754                                  ;*** Move_res_code -- This routine moves the resident code to its final 
  8755                                  ; location. We check if DOS is in HIMEM. If so, we try to load ourselves
  8756                                  ; in HIMEM. If we fail, then we remain low and update ResSize to reflect
  8757                                  ; the correct resident size. When remaining low, we have to check if we 
  8758                                  ; need to overlay the messages part of the data segment which is determined
  8759                                  ; by the /msg switch.
  8760                                  ;
  8761                                  ;	ENTRY: ResMsgEnd = end of resident data
  8762                                  ;
  8763                                  ;	EXIT:  The resident code is either up high or in its final location
  8764                                  ;		down low.
  8765                                  ;
  8766                                  ;	REGISTERS AFFECTED: ax,bx,cx,dx,si,di
  8767                                  
  8768                                  	; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8769                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:200Eh
  8770                                  	
  8771                                  Move_res_code:	;proc near
  8772                                  
  8773 00001E35 1E                      	push	ds
  8774 00001E36 06                      	push	es
  8775                                  
  8776 00001E37 8CC8                    	mov	ax,cs
  8777 00001E39 8ED8                    	mov	ds,ax
  8778                                  	;assume	ds:RESGROUP
  8779                                  
  8780                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ; M013
  8781 00001E3B B80633                  	mov	ax,3306h
  8782 00001E3E CD21                    	int	21h				;DOS in HIMEM?
  8783                                  		; DOS - 5+ Get TRUE Version Number
  8784                                  		; (BL major, BH minor, DL revision, DH flags)
  8785                                  
  8786 00001E40 80E610                  	and	dh,10h				; M013
  8787 00001E43 7517                    	jnz	short move_high			;yes, move code high
  8788                                  
  8789                                  ;Check if messages have been discarded or not
  8790                                  
  8791                                  load_low:
  8792 00001E45 1E                      	push	ds
  8793 00001E46 07                      	pop	es				;es = RESGROUP
  8794 00001E47 8B3E[B204]              	mov	di,[ResMsgEnd]			;end offset in DATARES
  8795                                  	;;mov	bx,offset RESGROUP:ExtMsgEnd	;end offset of messages
  8796                                  	;mov	bx,ExtMsgEnd
  8797                                  
  8798                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8799                                  %if 0	 ; PCDOS 7.1 COMMAND.COM
  8800                                  
  8801                                  	; 29/01/2023
  8802                                  	cmp	di,ExtMsgEnd
  8803                                  	;cmp	di,bx				;are messages to be kept?
  8804                                  	je	short no_move			;yes, dont move code
  8805                                  ;%else
  8806                                  	; Erdogan Tan - 18/07/2024
  8807                                  	;mov	bx,ExtMsgEnd ; (this bx is not used after here!)
  8808                                  %endif
  8809                                  
  8810                                  ; 18/07/2024
  8811                                  %if 0
  8812                                  	jmp	short setup_move		;es:di points at dest.
  8813                                  %else
  8814                                  	; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8815                                  setup_move:
  8816                                  	;mov	si,offset RESGROUP:StartCode
  8817                                  	; 03/05/2023
  8818 00001E4B BE[100D]                	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8819                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8820                                  				; 0E10h for PCDOS 7.1 COMMAND.COM ; 18/07/2024
  8821                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8822                                  	;mov	cx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8823                                  	; 06/06/2023
  8824                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8825                                  	; 03/05/2023
  8826 00001E4E B9(7209)                	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8827                                  	;mov	cx,894h ; PCDOS 7.1 COMMAND.COM ; 18/07/2024
  8828                                  
  8829 00001E51 FC                      	cld
  8830 00001E52 57                      	push	di				;need di for patching offset
  8831 00001E53 F3A4                    	rep	movsb
  8832 00001E55 5F                      	pop	di
  8833                                  patch_up:
  8834 00001E56 E86F01                  	call	patch_stub
  8835 00001E59 07                      	pop	es
  8836 00001E5A 1F                      	pop	ds
  8837                                  	;assume	ds:nothing
  8838 00001E5B C3                      	retn
  8839                                  %endif
  8840                                  
  8841                                  move_high:
  8842                                  
  8843                                  ;We have to call DOS to get the load address in HIMEM for COMMAND
  8844                                  ;We pass in bx the number of bytes we need
  8845                                  
  8846                                  	;mov	bx,offset CODERES:EndCode
  8847                                  	; 29/01/2023
  8848                                  	;;mov	bx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8849                                  	; 06/06/2023
  8850                                  	;mov	bx,EndCode-(RCODE_START+100h) ; 23/04/2023 ; 06/06/2023
  8851                                  	; 03/05/2023
  8852 00001E5C BB(7209)                	mov	bx,EndCode-RCODE_START ; 06/06/2023
  8853                                  	; 18/07/2024
  8854                                  	;mov	bx,894h	 ; PCDOS 7.1 COMMAND.COM
  8855                                  
  8856                                  ;M030;
  8857                                  ; Set di=0ffffh so that we load low in case no one answers this int 2fh
  8858                                  
  8859 00001E5F BFFFFF                  	mov	di,0FFFFh			;DT - in case no-one handles
  8860                                  						;this ; M030
  8861 00001E62 B8024A                  	mov	ax,GET_HMA_ADDR ; 4A02h
  8862 00001E65 CD2F                    	int	2Fh
  8863                                  
  8864                                  ;If the offset = 0xffff, then no HMA available
  8865                                  
  8866 00001E67 83FFFF                  	cmp	di,0FFFFh			;HMA available?
  8867 00001E6A C606[9600]01            	mov	byte [ComInHMA],1		;assume command.com in HMA
  8868 00001E6F 75DA                    	jne	short setup_move		;no error, es:di = memory
  8869                                  
  8870                                  	;mov	byte [ComInHMA],0		;could not load in HMA
  8871                                  	; 29/01/2023	
  8872 00001E71 FE0E[9600]              	dec	byte [ComInHMA] ; 1 -> 0
  8873                                  
  8874                                  ;Zero means that we do not have enough HIMEM. Remain low and update
  8875                                  ;ResSize to reflect this
  8876                                  
  8877 00001E75 8B0E[B204]              	mov	cx,[ResMsgEnd]			;size of data in bytes
  8878                                  	;;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8879                                  	;;mov	ax,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8880                                  	;mov	ax,EndCode-RCODE_START
  8881                                  	;add	cx,ax
  8882                                  	; 06/06/2023
  8883                                  	; 29/01/2023
  8884                                  	;add	cx,(EndCode-(RCODE_START+100h))+15 ; 23/04/2023 ; 06/06/2023
  8885                                  	;add	cx,15				;round up to next para
  8886                                  	; 03/05/2023
  8887 00001E79 81C1(8109)              	add	cx,(EndCode-RCODE_START)+15 ; 06/06/2023
  8888 00001E7D D1E9                    	shr	cx,1
  8889 00001E7F D1E9                    	shr	cx,1
  8890 00001E81 D1E9                    	shr	cx,1
  8891 00001E83 D1E9                    	shr	cx,1				;ax = para size of res code
  8892 00001E85 890E[B404]              	mov	[ResSize],cx			;store resident size
  8893 00001E89 EBBA                    	jmp	short load_low			;let code remain low
  8894                                  
  8895                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8896                                  %if 0	 ; PCDOS 7.1 COMMAND.COM
  8897                                  no_move:
  8898                                  	; 05/05/2023
  8899                                  	;mov	cl,4
  8900                                  	add	di,0Fh
  8901                                  	and	di,0FFF0h			;round it to a para offset
  8902                                  	jmp	short patch_up
  8903                                  
  8904                                  setup_move:
  8905                                  	;mov	si,offset RESGROUP:StartCode
  8906                                  	; 03/05/2023
  8907                                  	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8908                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8909                                  				; 0E10h for PCDOS 7.1 COMMAND.COM ; 18/07/2024
  8910                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8911                                  	;mov	cx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8912                                  	; 06/06/2023
  8913                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8914                                  	; 03/05/2023
  8915                                  	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8916                                  	;mov	cx,894h ; PCDOS 7.1 COMMAND.COM ; 18/07/2024
  8917                                  
  8918                                  	cld
  8919                                  	push	di				;need di for patching offset
  8920                                  	rep	movsb
  8921                                  	pop	di
  8922                                  
  8923                                  patch_up:
  8924                                  	call	patch_stub
  8925                                  	pop	es
  8926                                  	pop	ds
  8927                                  	;assume	ds:nothing
  8928                                  	retn
  8929                                  %endif
  8930                                  
  8931                                  ;Move_res_code endp
  8932                                  
  8933                                  ;else	;ROMDOS
  8934                                  ;
  8935                                  ;;***	Move_res_code - ROMDOS version - locate ROM resident
  8936                                  ;
  8937                                  ;Move_res_code	proc
  8938                                  ;
  8939                                  ;	push	es
  8940                                  ;
  8941                                  ;	invoke	FindROMRes		; ES:DI = ptr to ROM resident code
  8942                                  ;	call	patch_stub
  8943                                  ;
  8944                                  ;	pop	es
  8945                                  ;	ret
  8946                                  ;
  8947                                  ;Move_res_code	endp
  8948                                  ;
  8949                                  ;	assume	ds:NOTHING		; to match ending assume above
  8950                                  ;
  8951                                  ;endif	;ROMDOS
  8952                                  
  8953                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8954                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8955                                  
  8956                                  	; MSDOS 6.0
  8957                                  ;*** Alloc_env -- This routine allocates the temporary environment for the
  8958                                  ; Init code to initialize the COMSPEC. This is not a complete environment. 
  8959                                  ; Later on, at EndInit time, a proper sized environment is allocated and
  8960                                  ; the contents of this temporary environment are copied to it. This routine
  8961                                  ; will not be called in case a valid environment is passed to command.com
  8962                                  ;
  8963                                  ;       ENTRY:  FirstCom and initial EnvirSeg set
  8964                                  ;
  8965                                  ;       EXIT:   ax = EnvirSeg = segment of newly allocated environment segment
  8966                                  ;
  8967                                  ;       REGISTERS AFFECTED: ax,bx,cx,dx
  8968                                  
  8969                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8970                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1F3Fh
  8971                                  
  8972                                  	; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8973                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:206Eh
  8974                                  
  8975                                  alloc_env:	;proc near
  8976                                  	;assume ds:nothing
  8977                                  	
  8978 00001E8B 1E                              push    ds
  8979 00001E8C 06                      	push	es
  8980 00001E8D 56                      	push	si
  8981 00001E8E 57                      	push	di
  8982                                  
  8983                                  ; 07/06/2023
  8984                                  ; 29/01/2023 - MSDOS 6.0 COMMAND.COM
  8985                                  ;%if 0
  8986                                  %if 1 
  8987 00001E8F 16                              push    ss
  8988 00001E90 1F                              pop     ds
  8989                                  	;assume ds:RESGROUP
  8990                                  
  8991 00001E91 A1[3A04]                        mov     ax,[EnvirSeg]
  8992                                  
  8993 00001E94 803E[5920]00                    cmp	byte [AllocedEnv],0
  8994 00001E99 7403                            je	short alloc_cont
  8995 00001E9B E91F01                          jmp     alloc_done
  8996                                  
  8997                                  alloc_cont:
  8998 00001E9E 29FF                            sub     di,di                           ; default start
  8999                                          ;mov	bx,SIZE Environment             ; default size needed
  9000                                  	; 29/01/2023
  9001 00001EA0 BBA600                  	mov	bx,ENVIRONSIZ	; mov bx,180 ; 07/06/2023
  9002                                  				; mov bx,166 ; 18/07/2024 ; PCDOS 7.1
  9003 00001EA3 803E[9E26]00                    cmp	byte [FirstCom],0		; first COMMAND.COM?
  9004 00001EA8 7462                            je	short alloc_seg			; no
  9005                                  
  9006                                  ;   Check EnvirSeg; if non-zero, then scan it for PATH and COMSPEC;
  9007                                  ;   Record their respective locations and do not add the default vars.
  9008                                  
  9009 00001EAA 09C0                    	or      ax,ax
  9010 00001EAC 745A                    	jz	short alloc_new			; no previous environment
  9011                                  
  9012 00001EAE 8EC0                            mov     es,ax
  9013                                  	;assume es:nothing
  9014                                  
  9015                                  _find_path:
  9016 00001EB0 B000                            mov     al,0
  9017 00001EB2 29FF                            sub     di,di
  9018                                  comp_path:
  9019 00001EB4 AE                              scasb                                   ; end of env?
  9020 00001EB5 7417                    	je	short _find_prompt		; yes
  9021                                  	;je	short find_comspec ; 18/07/2024 ; PCDOS 7.1 COMMAND.COM
  9022 00001EB7 4F                              dec     di
  9023 00001EB8 B90500                          mov     cx,PathStrLen ; mov cx,5 ; "PATH="
  9024                                          ;mov	si,offset RESGROUP:PathString
  9025 00001EBB BE[5A20]                	mov	si,PathString	; "PATH="
  9026 00001EBE F3A6                            repe    cmpsb
  9027 00001EC0 7407                            je	short got_path
  9028 00001EC2 B90001                          mov	cx,256
  9029 00001EC5 F2AE                            repne   scasb                           ; find next NULL
  9030 00001EC7 EBEB                            jmp     short comp_path
  9031                                  
  9032                                  got_path:
  9033 00001EC9 C606[5A20]00                    mov	byte [PathString],0		; don't add it
  9034                                  
  9035                                  _find_prompt:
  9036                                  
  9037                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  9038                                  ;%if 0 ;  PCDOS 7.1 COMMAND.COM
  9039                                  ;	sub     di,di
  9040                                  ;comp_prompt:
  9041                                  ;	scasb                                   ; end of env?
  9042                                  ;	je	short find_comspec		; yes
  9043                                  ;	dec     di
  9044                                  ;	mov     cx,PrmptStrLen2	; mov cx,7
  9045                                  ;	;mov	si,offset RESGROUP:PrmptString
  9046                                  ;	mov	si,PrmptString	; "PROMPT=$P$G"
  9047                                  ;	repe	cmpsb
  9048                                  ;	je	short got_prompt
  9049                                  ;	mov	cx,256
  9050                                  ;	repne	scasb                           ; find next NULL
  9051                                  ;	jmp	short comp_prompt
  9052                                  ;
  9053                                  ;got_prompt:
  9054                                  ;	mov	byte [PrmptString],0		; don't add it
  9055                                  ;%endif
  9056                                  
  9057                                  find_comspec:
  9058 00001ECE 29FF                            sub     di,di
  9059                                  comp_comspec:
  9060 00001ED0 AE                              scasb                                   ; end of env?
  9061 00001ED1 7423                            je	short got_envend		; yes
  9062 00001ED3 4F                              dec     di
  9063 00001ED4 B90800                          mov	cx,ComspStrLen	; mov cx,8
  9064                                  	;mov	si,offset RESGROUP:ComspString
  9065 00001ED7 BE[7220]                	mov	si,ComspString	; "COMSPEC=\COMMAND.COM"
  9066 00001EDA F3A6                            repe    cmpsb
  9067 00001EDC 7407                            je	short got_comspec
  9068 00001EDE B90001                          mov     cx,256
  9069 00001EE1 F2AE                            repne   scasb                           ; find next NULL
  9070 00001EE3 EBEB                            jmp	short comp_comspec
  9071                                  
  9072                                  got_comspec:
  9073 00001EE5 893E[7020]                      mov     [ComspOffset],di
  9074                                  
  9075                                  find_envend:
  9076 00001EE9 29FF                            sub     di,di
  9077 00001EEB B90080                          mov     cx,ENVBIG	; 32768		; max env size
  9078                                  comp_envend:
  9079 00001EEE 49                              dec     cx                              ;
  9080 00001EEF AE                              scasb                                   ; end of env?
  9081 00001EF0 7404                            je	short got_envend		; yes
  9082 00001EF2 F2AE                            repne   scasb
  9083 00001EF4 EBF8                            jmp	short comp_envend
  9084                                  
  9085                                  got_envend:
  9086 00001EF6 4F                              dec     di
  9087                                  	; 07/06/2023
  9088 00001EF7 8D9DA600                	lea     bx,[di+ENVIRONSIZ]		; add room for the basics
  9089                                  	; 18/07/2024
  9090                                  	;lea     bx,[di+166] ; PCDOS 7.1 COMMAND.COM - ENVIRONSIZ = 166
  9091                                  
  9092                                  ;   We want to fall through to alloc_new and set up default
  9093                                  ;   path and prompt ONLY IF this is the first process;  in all other
  9094                                  ;   cases, we assume it is a bad idea to try editing the user's environment
  9095                                  
  9096 00001EFB 1E                              push    ds
  9097                                          ;mov	ds,ds:[PDB_Parent_Pid]
  9098 00001EFC 8E1E1600                        mov	ds,[PDB.PARENT_PID]
  9099                                  	;cmp	ds:[PDB_Parent_Pid],0           ; is parent's parent pid field 0?
  9100 00001F00 833E160000              	cmp	word [PDB.PARENT_PID],0
  9101 00001F05 1F                      	pop     ds
  9102 00001F06 7504                            jne	short alloc_seg			; no, we're not the first process
  9103                                                                                  ; so don't muck with the env.
  9104                                  alloc_new:
  9105 00001F08 FE06[5920]              	inc	byte [AllocedEnv]		; note we have virgin env.
  9106                                  
  9107                                  alloc_seg:
  9108                                  
  9109                                  ; Allocate default environment size
  9110                                  
  9111 00001F0C 89D9                            mov     cx,bx                           ; save byte-granular size in CX
  9112 00001F0E 83C30F                          add     bx,15
  9113 00001F11 D1EB                            shr     bx,1
  9114 00001F13 D1EB                            shr     bx,1
  9115 00001F15 D1EB                            shr     bx,1
  9116 00001F17 D1EB                            shr     bx,1                            ; BX = # paras
  9117 00001F19 B448                    	mov	ah,ALLOC ; 48h
  9118 00001F1B CD21                    	int	21h
  9119 00001F1D 7303                            jnc	short init_ok
  9120 00001F1F E9A000                          jmp     init_nomem                      ; insufficient memory, error
  9121                                  
  9122                                  ; If a previous environment existed (ie, DI != 0), then copy it into
  9123                                  ; the new buffer
  9124                                  
  9125                                  init_ok:
  9126 00001F22 8EC0                    	mov	es,ax
  9127                                  	;assume	es:nothing                      ; es = temp env segment
  9128                                  
  9129 00001F24 09FF                    	or      di,di
  9130 00001F26 7412                            jz	short copy_path
  9131                                  
  9132 00001F28 51                              push    cx
  9133 00001F29 1E                              push    ds
  9134 00001F2A 8E1E[3A04]                      mov     ds,[EnvirSeg]
  9135                                          ;assume ds:nothing
  9136 00001F2E 29F6                            sub     si,si
  9137 00001F30 89F9                            mov     cx,di
  9138 00001F32 29FF                            sub     di,di
  9139 00001F34 F3A4                            rep     movsb
  9140 00001F36 1F                              pop     ds
  9141                                          ;assume ds:RESGROUP
  9142 00001F37 59                              pop     cx
  9143 00001F38 29F9                            sub     cx,di
  9144                                  
  9145                                  copy_path:
  9146                                  
  9147                                  ; First clear out (the rest of) the buffer
  9148                                  
  9149 00001F3A 57                              push    di
  9150 00001F3B 29C0                            sub     ax,ax
  9151 00001F3D F3AA                            rep     stosb
  9152 00001F3F 5F                              pop     di
  9153                                  
  9154                                  ; Initialize the path string (PATH=) first
  9155                                  
  9156                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  9157 00001F40 BE[5A20]                	mov	si,PathString
  9158 00001F43 3804                            cmp     byte [si],al			; add it?
  9159 00001F45 7450                            je	short init_prompt		; no
  9160                                  	;mov	cx,PathStrLen+1                 ;
  9161 00001F47 B90600                  	mov	cx,6 ; db "PATH=",0
  9162 00001F4A F3A4                            rep     movsb                           ;
  9163 00001F4C 3806[5920]                      cmp     [AllocedEnv],al			; virgin env?
  9164 00001F50 7445                            je	short init_prompt		; no
  9165                                  
  9166                                  ; Establish a more reasonable default for the PATH
  9167                                  
  9168                                  	;mov	ah,GET_DEFAULT_DRIVE
  9169 00001F52 B419                    	mov	ah,19h
  9170 00001F54 CD21                    	int	21h
  9171 00001F56 0441                            add     al,'A'                          ; convert to letter
  9172 00001F58 A2[6020]                        mov     [DefPathString],al              ;
  9173 00001F5B A2[6720]                        mov     [DefPath2String],al             ; now our default paths are complete
  9174                                  
  9175 00001F5E B200                            mov     dl,0                            ; get dir for default drive
  9176 00001F60 1E                              push    ds                              ;
  9177 00001F61 06                              push    es                              ;
  9178 00001F62 1F                              pop     ds                              ;
  9179 00001F63 C6055C                          mov     byte [di],'\'			;
  9180 00001F66 8D7501                          lea     si,[di+1]                       ; set DS:SI -> available space
  9181                                  	;mov	ah,Current_Dir                  ;
  9182 00001F69 B447                            mov	ah,47h
  9183 00001F6B CD21                    	int     21h                             ;
  9184 00001F6D 1F                              pop     ds                              ;
  9185                                  
  9186                                  	;mov	cx,9 ; db "C:\MSDOS",0
  9187                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  9188                                  	;mov	cx,7 ; db "C:\DOS",0
  9189 00001F6E B90700                  	mov	cx,DefPathStrLen+1 ; 7
  9190                                  	
  9191                                  	;mov	dx,offset RESGROUP:DefPathString
  9192 00001F71 BA[6020]                	mov	dx,DefPathString	; "C:\MSDOS"
  9193                                  			; 18/07/2024	; "C:\DOS" for PCDOS 7.1 COMMAND.COM
  9194 00001F74 89D6                    	mov	si,dx                           ;
  9195                                          ;mov	ah,CHDir                        ;
  9196 00001F76 B43B                            mov	ah,3Bh
  9197 00001F78 CD21                    	int     21h                             ;
  9198 00001F7A 730E                            jnc	short init_setpath		; DefPathString exists!
  9199                                  
  9200                                          ;mov	cx,7 ; db "C:\DOS",0
  9201                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  9202                                  	;mov	cx,9 ; db "C:\MSDOS",0
  9203 00001F7C B90900                  	mov	cx,DefPath2StrLen+1 ; 9
  9204                                  
  9205                                  	;mov	dx,offset RESGROUP:DefPath2String
  9206 00001F7F BA[6720]                	mov	dx,DefPath2String	; "C:\DOS"
  9207                                  			; 18/07/2024	; "C:\MSDOS" for PCDOS 7.1 COMMAND.COM
  9208 00001F82 89D6                            mov     si,dx                           ;
  9209                                          ;mov	ah,CHDir                        ;
  9210 00001F84 B43B                            mov	ah,3Bh
  9211 00001F86 CD21                            int     21h                             ;
  9212 00001F88 720D                            jc	short init_prompt		; DefPath2String doesn't exist
  9213                                  
  9214                                  init_setpath:
  9215 00001F8A 89FA                            mov     dx,di                           ; success
  9216 00001F8C 1E                              push    ds                              ; so restore prev dir
  9217 00001F8D 06                              push    es                              ;
  9218 00001F8E 1F                              pop     ds                              ; DS:DX -> prev dir
  9219                                          ;mov	ah,CHDir                        ;
  9220 00001F8F B43B                            mov	ah,3Bh			
  9221 00001F91 CD21                            int     21h                             ;
  9222 00001F93 1F                              pop     ds                              ;
  9223                                  
  9224 00001F94 4F                              dec     di                              ; then copy in DefPathString
  9225 00001F95 F3A4                            rep     movsb                           ; DS:SI -> "C:\\DOS\0"
  9226                                  
  9227                                  ; Initialize the default prompt
  9228                                  
  9229                                  init_prompt:
  9230                                  ;init_compec:	; 18/07/2024 (PCDOS 7.1 COMMAND.COM - RESGROUP:217Ah)	
  9231                                  
  9232 00001F97 57                              push    di                              ;
  9233 00001F98 29C0                            sub     ax,ax                           ;
  9234 00001F9A B94000                          mov     cx,64                           ; insure any data read in
  9235 00001F9D F3AA                            rep     stosb                           ; from Current_Dir is zapped
  9236 00001F9F 5F                              pop     di                              ;
  9237                                  
  9238                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  9239                                  ;%if 0 	; PCDOS 7.1 COMMAND.COM
  9240                                  ;	cmp	[AllocedEnv],al			; virgin env?
  9241                                  ;	je	short init_comspec		; no
  9242                                  ;	;mov	si,offset RESGROUP:PrmptString  ; DS:SI -> "PROMPT=$P$G\0"
  9243                                  ;	mov	si,PrmptString
  9244                                  ;	cmp     [si],al				; add it?
  9245                                  ;	je      short init_comspec		; no
  9246                                  ;	;mov	cx,PrmptStrLen+1                ;
  9247                                  ;	mov	cl,12  ; db "PROMPT=$P$G",0
  9248                                  ;	rep     movsb                           ;
  9249                                  ;%endif
  9250                                  
  9251                                  ; Initialize the Comspec string
  9252                                  
  9253                                  init_comspec:
  9254                                  	; 18/07/2024 (PCDOS 7.1 COMMAND.COM - RESGROUP:2183h)
  9255                                  
  9256 00001FA0 3906[7020]                      cmp	[ComspOffset],ax		; add it?
  9257 00001FA4 750E                            jne	short init_done			; no
  9258                                          ;lea	ax,[di+8]
  9259 00001FA6 8D4508                  	lea     ax,[di+ComspStrLen]             ;
  9260 00001FA9 A3[7020]                        mov	[ComspOffset],ax		;
  9261                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  9262 00001FAC BE[7220]                        mov	si,ComspString
  9263                                  	; 23/07/2024
  9264 00001FAF B91500                  	mov	cx,ComspStrLen2+1               ;
  9265                                          ;mov	cx,21 ; db "COMSPEC=\COMMAND.COM",0
  9266 00001FB2 F3A4                    	rep     movsb                           ;
  9267                                  
  9268                                  init_done:
  9269 00001FB4 8CC0                            mov     ax,es                           ; return env seg in ax
  9270 00001FB6 A3[3A04]                        mov     [EnvirSeg],ax			; save env seg
  9271 00001FB9 FE06[5920]                      inc	byte [AllocedEnv]		; remember that *we* alloced it
  9272                                  %endif
  9273                                  
  9274                                  ; 07/06/2023
  9275                                  ; 29/01/2023 - MSDOS 5.0 COMMAND.COM (RESGROUP:1DC4h)
  9276                                  ;%if 1
  9277                                  %if 0
  9278                                  	;mov	bx,10
  9279                                  	mov	bx,ENVIRONSIZ>>4 ; 160/16
  9280                                  	mov	ah,48h
  9281                                  	int	21h    	; DOS - 2+ - ALLOCATE MEMORY
  9282                                  			; BX = number of 16-byte paragraphs desired
  9283                                  	jc	short init_nomem
  9284                                  
  9285                                  init_ok:
  9286                                  	mov	es,ax
  9287                                  	;assume	es:nothing                      ; es = temp env segment
  9288                                  
  9289                                  	xor	di,di
  9290                                  	mov	ax,di
  9291                                  	;mov	cx,160	
  9292                                          mov     cx,ENVIRONSIZ
  9293                                          rep	stosb
  9294                                  
  9295                                  init_pathstr:
  9296                                  
  9297                                  ; Initialize the path string (PATH=) first
  9298                                  
  9299                                  	push	ss
  9300                                  	pop	ds
  9301                                  
  9302                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  9303                                  	mov	si,PathString
  9304                                  	mov	di,0
  9305                                  init_cp_pathstr:
  9306                                  	lodsb
  9307                                  	stosb
  9308                                  	or	al,al
  9309                                  	jnz	short init_cp_pathstr
  9310                                  
  9311                                  ; Initialize the Comspec string
  9312                                  
  9313                                  init_comspec:
  9314                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  9315                                          mov	si,ComspString
  9316                                  	; 05/05/2023
  9317                                  	mov	di,6
  9318                                  init_cp_compstr:
  9319                                  	lodsb
  9320                                  	stosb
  9321                                  	or	al,al
  9322                                  	jnz	short init_cp_compstr
  9323                                  
  9324                                  init_done:
  9325                                          mov     ax,es                           ; return env seg in ax
  9326                                          ;mov	[EnvirSeg],ax			; save env seg
  9327                                          ;inc	byte [AllocedEnv]		; remember that *we* alloced it
  9328                                  %endif	
  9329                                  
  9330                                  	; 29/01/2023
  9331                                  alloc_done:
  9332 00001FBD 5F                      	pop	di
  9333 00001FBE 5E                      	pop	si
  9334 00001FBF 07                      	pop	es
  9335 00001FC0 1F                              pop     ds
  9336                                  	;assume	ds:nothing
  9337 00001FC1 C3                      	retn
  9338                                  
  9339                                  	; 29/01/2023
  9340                                  init_nomem:
  9341                                  
  9342                                  ;We call the error routine from here. This routine never returns. It either
  9343                                  ;terminates COMMAND with error( if it is not the first invocation ) or hangs
  9344                                  ;the system ( if it is the first COMMAND.COM ).
  9345                                  
  9346 00001FC2 E80000                  	call	Alloc_error
  9347                                  
  9348                                  ;Alloc_env	endp
  9349                                  
  9350                                  ;*** Alloc_error: This routine just jumps to the actual label where we 
  9351                                  ; check if this is a permanent or secondary command.com and take the 
  9352                                  ; appropriate action.
  9353                                  ;
  9354                                  ;	ENTRY:	ds = RESGROUP = DATARES
  9355                                  ;
  9356                                  ;	EXIT:	None - does not return
  9357                                  ;
  9358                                  ;	REGISTERS AFFECTED: Does not matter
  9359                                  ;
  9360                                  
  9361                                  ;public Alloc_error
  9362                                  Alloc_error:	;proc	near
  9363                                  
  9364                                  	;jmp	RESGROUP:BadMemErr
  9365                                  	; 29/01/2023
  9366 00001FC5 E950EE                  	jmp	BadMemErr	
  9367                                  	
  9368                                  ;Alloc_error	endp
  9369                                  
  9370                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9371                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1DFFh
  9372                                  
  9373                                  	; MSDOS 6.0
  9374                                  ;*** Patch_stub -- This routine patches in the segment and offset values in
  9375                                  ; the stub table of the various entry points in the resident code segment.
  9376                                  ; Some of them are interrupt entry points and some of them are entries from
  9377                                  ; the transient to the resident code segment.
  9378                                  ;
  9379                                  ;	ENTRY:	ds = RESGROUP
  9380                                  ;		es:di = segment:offset of final location of resident code
  9381                                  ;
  9382                                  ;	EXIT:	All segments and offsets patched into the stub table
  9383                                  ;
  9384                                  ;	REGISTERS AFFECTED: ax, bx, cx, dx, si, di
  9385                                  
  9386                                  patch_stub:	;proc near
  9387                                  	;assume	ds:RESGROUP
  9388                                  	
  9389 00001FC8 06                      	push	es
  9390                                  
  9391 00001FC9 8CC3                    	mov	bx,es			;bx = resident code segment
  9392 00001FCB 89FA                    	mov	dx,di
  9393                                  	;mov	di,offset DATARES:Int2f_Entry
  9394 00001FCD BF[6600]                	mov	di,Int2f_Entry
  9395                                  	;mov	si,offset RESGROUP:Reloc_Table
  9396 00001FD0 BE[8426]                	mov	si,Reloc_Table
  9397 00001FD3 1E                      	push	ds
  9398 00001FD4 07                      	pop	es			;es = RESGROUP = DATARES
  9399                                  
  9400                                  ;bx:dx = segment:offset of resident code segment
  9401                                  ;es:di = entry point table in stub
  9402                                  ;ds:si = offset table in INIT segment -- offsets of code entry points now
  9403                                  
  9404                                  	;mov	cx,NUM_RELOC_ENTRIES	;number of entry points
  9405 00001FD5 B90B00                  	mov	cx,11 ; MSDOS 5.0 COMMAND.COM
  9406                                  patchlp:
  9407 00001FD8 AD                      	lodsw				;get current offset
  9408 00001FD9 01D0                    	add	ax,dx			;offset it by code seg location 
  9409 00001FDB AB                      	stosw				;store offset
  9410 00001FDC 89D8                    	mov	ax,bx			
  9411 00001FDE AB                      	stosw				;store segment 
  9412 00001FDF E2F7                    	loop	patchlp
  9413                                  
  9414 00001FE1 07                      	pop	es
  9415 00001FE2 C3                      	retn
  9416                                  
  9417                                  ;Patch_stub	endp
  9418                                  
  9419                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9420                                  
  9421                                  	; MSDOS 6.0
  9422                                  ;*** Patch_segs -- This routine patches the segment values in the dword 
  9423                                  ; pointers that the stub uses to jump to the actual handler. These values 
  9424                                  ; are temporarily needed to handle these interrupts if they occur before
  9425                                  ; the resident is relocated to its final position and all the addresses of
  9426                                  ; the handlers have been updated.
  9427                                  ;
  9428                                  ;	ENTRY:	es = PSP segment = code segment
  9429                                  ;
  9430                                  ;	EXIT:	Current segment values patched into the jump table in the
  9431                                  ;		stub.
  9432                                  ;
  9433                                  ;	REGISTERS AFFECTED: ax, cx, di
  9434                                  
  9435                                  patch_segs:	;proc near
  9436                                  
  9437                                  	;mov	di,offset RESGROUP:Int2f_Entry
  9438 00001FE3 BF[6600]                	mov	di,Int2f_Entry 
  9439 00001FE6 B90400                  	mov	cx,4			;we have to patch 4 handlers
  9440 00001FE9 83C702                  	add	di,2
  9441 00001FEC 8CC0                    	mov	ax,es
  9442                                  pseglp:
  9443 00001FEE AB                      	stosw				;store the segment value
  9444 00001FEF 83C702                  	add	di,2			;skip the next offset value
  9445 00001FF2 E2FA                    	loop	pseglp
  9446                                  
  9447 00001FF4 C3                      	retn
  9448                                  
  9449                                  ;Patch_segs	endp
  9450                                  
  9451                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9452                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E2Ch
  9453                                  
  9454                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9455                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:20D8h
  9456                                  
  9457                                  	; MSDOS 6.0
  9458                                  ;*** get_XMMAddr -- This routine gets the call address for the XMM driver
  9459                                  ; by issuing the appropriate int 2fh. This is stored in a stub variable 
  9460                                  ; and is used by the stub when we have to jump to the resident in HMA
  9461                                  ;
  9462                                  ;	ENTRY:	ds = RESGROUP
  9463                                  ;
  9464                                  ;	EXIT:	XMMCallAddr = XMM driver far call address
  9465                                  ;
  9466                                  ;	REGISTERS AFFECTED:
  9467                                  ;
  9468                                  
  9469                                  get_XMMAddr:	;proc near
  9470                                  	;assume	ds:RESGROUP
  9471                                  
  9472 00001FF5 06                      	push	es
  9473                                  
  9474                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK
  9475 00001FF6 B80043                  	mov	ax,4300h
  9476 00001FF9 CD2F                    	int	2Fh
  9477                                  		; - Multiplex - XMS - INSTALLATION CHECK
  9478                                  		; Return: AL = 80h XMS driver installed
  9479                                  		; AL <> 80h no driver
  9480 00001FFB 3C80                    	cmp	al,80h			; Q: installed
  9481 00001FFD 750D                    	jne	short cXMMexit		; N: set error, quit
  9482                                  ;
  9483                                  ; get the XMM control functions entry point, save it, we
  9484                                  ; need to call it later.
  9485                                  ;
  9486                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR
  9487 00001FFF B81043                  	mov	ax,4310h
  9488 00002002 CD2F                    	int	2Fh
  9489                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
  9490                                  		; Return: ES:BX -> driver entry point
  9491                                  
  9492 00002004 891E[9200]              	mov	[XMMCallAddr], bx
  9493 00002008 8C06[9400]              	mov	[XMMCallAddr+2],es
  9494                                  cXMMexit:
  9495 0000200C 07                      	pop	es
  9496 0000200D C3                      	retn				; done
  9497                                  
  9498                                  ;get_XMMAddr	endp
  9499                                  
  9500                                  ;=============================================================================
  9501                                  ; UNINIT.ASM, MSDOS 6.0, 1991
  9502                                  ;=============================================================================
  9503                                  ; 24/09/2018 - Retro DOS v3.0
  9504                                  
  9505                                  ; (30/04/2018 - Retro DOS v2.0, MSDOS 2.11 COMMAND.COM)
  9506                                  
  9507                                  ; TITLE	COMMAND Initialization messages
  9508                                  
  9509                                  ;INIT	SEGMENT PUBLIC PARA
  9510                                  
  9511                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9512                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9513                                  
  9514                                  	; 25/09/2018
  9515                                  	; (15 bytes filler)
  9516 0000200E 00                      	db 0
  9517                                  	;db "25/9/2018 ETAN"
  9518                                  	; 30/01/2023
  9519                                  	;db "30/1/2023 ETAN"	
  9520                                  	; 19/06/2023
  9521                                  	;db "19/6/2023 ETAN"
  9522                                  	; 31/07/2024
  9523 0000200F 33312F372F32303234-     	db "31/7/2024 ETAN"	
  9523 00002018 204554414E         
  9524 0000201D 00                      	db 0
  9525                                  
  9526                                  ; 30/01/2023
  9527                                  %if 0
  9528                                  	; MSDOS 3.3 COMMAND.COM - offset 145Eh
  9529                                  	;dw 0
  9530                                  COPYRIGHTMSG:	; MSDOS 3.3 COMMAND.COM - offset 1460h
  9531                                  	db 0Dh,0Ah
  9532                                  	db 0Dh,0Ah
  9533                                  	db 'Microsoft(R) MS-DOS(R)  Version 3.30'
  9534                                  	db 0Dh,0Ah
  9535                                  	db '             (C)Copyright Microsoft Corp 1981-1987               '
  9536                                  	db ' ',0Dh,0Ah
  9537                                  	db '                                                   ',
  9538                                  	db 0Dh,0Ah,0
  9539                                  
  9540                                  	times	43 db 20h
  9541                                  
  9542                                  _152Fh:	db 'Specified COMMAND search directory bad',0Dh,0Ah,0
  9543                                  BADCOMLKMES:
  9544                                  	dw _152Fh
  9545                                  
  9546                                  _155Ah:	db 'Specified COMMAND search directory bad access denied',0Dh,0Ah,0
  9547                                  BADCOMACCMSG:
  9548                                  	dw _155Ah
  9549                                  
  9550                                  _1593h:	db 'Access denied',0Dh,0Ah,0
  9551                                  ACCDENERR:
  9552                                  	dw _1593h
  9553                                  
  9554                                  _15A5h:	db 'Out of environment space',0Dh,0Ah,0
  9555                                  OUTENVMSG:
  9556                                  	dw _15A5h
  9557                                  
  9558                                  BADVERMSG:
  9559                                  	db 'Incorrect DOS version',0Dh,0Ah,'$'
  9560                                  
  9561                                  BADENVSIZMSG:
  9562                                  	db 'Invalid environment size specified',0Dh,0Ah,'$'
  9563                                  
  9564                                  HEADERPTR:
  9565                                  	dw COPYRIGHTMSG
  9566                                  %endif
  9567                                  
  9568                                  ; 30/01/2023
  9569                                  ;align 16
  9570                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9571                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E50h 
  9572                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9573                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:2100h
  9574                                  
  9575                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  9576                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:2200h 
  9577                                  ICONDEV:
  9578 0000201E 2F4445562F                      db '/DEV/'
  9579 00002023 434F4E000000000000      	db 'CON',0,0,0,0,0,0	; Room for 8 char device	
  9580                                  BADCSPFL:
  9581 0000202C 00                      	db 0
  9582                                  COMSPECT:
  9583 0000202D 5C434F4D4D414E442E-     	db '\COMMAND.COM',0
  9583 00002036 434F4D00           
  9584 0000203A 00                      	db 0
  9585                                  AUTOBAT:
  9586 0000203B 003A5C4155544F4558-     	db 0,':\AUTOEXEC.BAT',0,0Dh
  9586 00002044 45432E424154000D   
  9587                                  
  9588                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  9589                                  %if 0
  9590                                  ; 07/06/2023
  9591                                  KAUTOBAT:
  9592                                  	db 0,':\KAUTOEXEC.BAT',0,0Dh
  9593                                  %endif
  9594                                   
  9595                                  PRDATTM:
  9596 0000204C FF                      	db -1 ; 0FFh		; Init not to prompt for date time
  9597                                  INITADD:
  9598 0000204D 00000000                	dd 0
  9599                                  print_add:
  9600 00002051 [CB53]                  	dw Printf_Init
  9601 00002053 0000                    	dw 0
  9602                                  triage_add:
  9603 00002055 [9B30]                  	dw Triage_Init
  9604 00002057 0000                    	dw 0
  9605                                  ;CHUCKENV:
  9606                                  AllocedEnv:
  9607 00002059 00                      	db 0
  9608                                  
  9609                                  ; 30/01/2023 - MSDOS 3.3
  9610                                  ;COMSPOFFSET:
  9611                                  ;ECOMLOC:
  9612                                  ;	;dw 0Eh
  9613                                  ;	;dw offset ENVIRONMENT:ECOMSPEC-10h
  9614                                  ;	dw ECOMSPEC-ENVIRONMENT ; 30/04/2018	
  9615                                  ;COMSPSTRING:
  9616                                  ;	db 'COMSPEC='
  9617                                  
  9618                                  ; 18/07/2024
  9619                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:223Ch
  9620                                  
  9621                                  ; 30/01/2023 - MSDOS 5.0 & MSDOS 6.0
  9622                                  PathString:
  9623 0000205A 504154483D00            	db 'PATH=',0
  9624                                  PathStrLen equ ($-PathString)-1
  9625                                  ;;;
  9626                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9627                                  ; MSDOS 6.0
  9628                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  9629                                  ; PCDOS 7.1
  9630                                  DefPathString:
  9631                                  	;db 'C:\MSDOS',0
  9632 00002060 433A5C444F5300          	db 'C:\DOS',0	; 18/07/2024
  9633                                  DefPathStrLen equ ($-DefPathString)-1
  9634                                  DefPath2String:
  9635                                  	;db 'C:\DOS',0
  9636 00002067 433A5C4D53444F5300      	db 'C:\MSDOS',0	; 18/07/2024
  9637                                  DefPath2StrLen equ ($-DefPath2String)-1
  9638                                  
  9639                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  9640                                  ; PCDOS 7.1 COMMAND.COM
  9641                                  %if 0
  9642                                  PrmptString:
  9643                                  	db 'PROMPT=$P$G',0
  9644                                  PrmptStrLen equ ($-PrmptString)-1
  9645                                  PrmptStrLen2 equ 7	; length of PROMPT=
  9646                                  %endif
  9647                                  
  9648                                  ; 18/07/2024
  9649                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:2252h
  9650                                  
  9651                                  ComspOffset:
  9652 00002070 0000                    	dw 0
  9653                                  ;;;
  9654                                  ComspString:
  9655 00002072 434F4D535045433D5C-     	db 'COMSPEC=\COMMAND.COM',0
  9655 0000207B 434F4D4D414E442E43-
  9655 00002084 4F4D00             
  9656                                  ComspStrLen equ 8		; length of COMSPEC=
  9657                                  ComspStrLen2 equ ($-ComspString)-1
  9658                                  				; length of full COMSPEC
  9659                                  	; 29/01/2023
  9660                                  ;equal_sign:
  9661                                  ;equalsign:
  9662                                  ;	db '='
  9663                                  ;letter_a:
  9664                                  ;lcasea:
  9665                                  ;	db 'a'
  9666                                  ;letter_z:
  9667                                  ;lcasez:
  9668                                  ;	db 'z'
  9669                                  	; 30/01/2023
  9670                                  ;;slash_chr:
  9671                                  ;;	db '/'
  9672                                  ;;bslash_chr:
  9673                                  ;;	db '\'
  9674                                  ;space_chr:
  9675                                  ;;space:
  9676                                  ;	db 20h
  9677                                  ;;letter_p:
  9678                                  ;;	db 'p'
  9679                                  ;;letter_d:
  9680                                  ;;	db 'd'
  9681                                  ;;letter_c:
  9682                                  ;;	db 'c'
  9683                                  	; 16/04/2023
  9684                                  ; MSDOS 5.0 & MSDOS 6.0
  9685                                  ;scswitch:
  9686                                  ;	db 'C'		; Single command
  9687                                  ;;skswitch:
  9688                                  ;	db 'K' ; MSDOS 6.0
  9689                                  ;;letter_A:
  9690                                  ;ucasea: ; 21/01/2023 
  9691                                  ;	db 'A'
  9692                                  
  9693                                  	; 30/01/2023
  9694                                  EnvSiz:
  9695 00002087 0000                    	dw 0		; size user wants to allocate
  9696                                  EnvMax:
  9697 00002089 0000                    	dw 0		; maximum size allowed
  9698                                  OldEnv:
  9699 0000208B 0000                    	dw 0		; envirseg at initialization
  9700                                  UsedEnv:
  9701 0000208D 0000                    	dw 0		; amount of envirseg used
  9702                                  	; MSDOS 5.0 & MSDOS 6.0
  9703                                  PARS_MSG_OFF:
  9704 0000208F 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE OFFSET
  9705                                  PARS_MSG_SEG:
  9706 00002091 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE SEGMENT
  9707                                  
  9708                                  ;Do not separate the following two words. Used to call transient PARSE routine
  9709                                  
  9710                                  Init_Parse:
  9711                                  	;dw 4FFBh	; MSDOS 5.0 COMMAND.COM (TRANGROUP:APPEND_PARSE)
  9712                                  init_p:
  9713 00002093 [C753]                  	dw append_parse ; dw 564Bh ; PCDOS 7.1 COMMAND.COM ; 18/07/2024 
  9714                                  initend:
  9715 00002095 0000                    	dw 0		; segment address of end of init
  9716                                  TrnSize:
  9717 00002097 0000                    	dw 0		; size of transient in paragraphs
  9718                                  
  9719                                  ; 23/07/2024 - Retro DOS v5.0 COMMAND.COM
  9720                                  %if 0
  9721                                  resetenv:
  9722                                  	;dw 0		; set if we need to setblck env at endinit
  9723                                  	; 23/07/2024
  9724                                  	db 0
  9725                                  %endif
  9726                                  
  9727                                  ext_msg:
  9728 00002099 00                      	db 0		; set if /MSG switch entered
  9729                                  eswitch:
  9730 0000209A 00                      	db 0		; set if /e was entered
  9731                                  dswitch:
  9732 0000209B 00                      	db 0		; set if /d was entered
  9733                                  parsemes_ptr:
  9734 0000209C 0000                    	dw 0		; word to store parse error number
  9735                                  
  9736                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9737                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1ED6h
  9738                                  
  9739                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9740                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:21A5h
  9741                                  
  9742                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  9743                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:2288h
  9744                                  
  9745                                  	; MSDOS 6.0 (UINIT.ASM, 1991)
  9746                                  ;  The following parse control block is used for COMMAND. This block is
  9747                                  ;  used for parsing during initialization. The syntax for COMMAND is:
  9748                                  ;  COMMAND [/?] [d:][path][/P][/F][/D][/E:xxxxx][/MSG][/C executable]
  9749                                  ;
  9750                                  ;  Anything on the command line after the /C switch will be passed to the
  9751                                  ;  executable command, so if /C is used, it must be specified last. The
  9752                                  ;  /MSG switch can only be specified if the /P switch is specified.
  9753                                  ;
  9754                                  ;  The /? switch causes help text to be displayed. Any other options
  9755                                  ;  on the command line are ignored. Command.com will not load if /?
  9756                                  ;  is specified.
  9757                                  
  9758                                  INTERNAT_INFO:		; used for country info after parsing is completed
  9759                                  PARSE_COMMAND:
  9760 0000209E [A120]                  	dw COMMAND_PARMS
  9761 000020A0 00                      	db 0			; no extra delimiter
  9762                                  COMMAND_PARMS:
  9763 000020A1 0002                    	db 0,2			; 1 positional parm
  9764 000020A3 [BF20]                  	dw COMMAND_FILE
  9765 000020A5 [BF20]                  	dw COMMAND_FILE
  9766                                          ; MSDOS 5.0
  9767                                  	;db 7			; 7 switches
  9768                                  	; MSDOS 6.0
  9769                                  	;db 8 			; 8 switches
  9770                                  	; 07/06/2023
  9771                                  	; MSDOS 6.22
  9772                                  	;db 9			; 9 switches
  9773                                  	; 22/07/2024
  9774                                  	; PCDOS 7.1
  9775 000020A7 0B                      	db 11			; 11 switches
  9776 000020A8 [C820]                  	dw COMMAND_SWITCH1
  9777 000020AA [D420]                  	dw COMMAND_SWITCH2
  9778 000020AC [E020]                  	dw COMMAND_SWITCH3
  9779 000020AE [EC20]                  	dw COMMAND_SWITCH4
  9780 000020B0 [0521]                  	dw COMMAND_SWITCH5
  9781 000020B2 [1121]                  	dw COMMAND_SWITCH6
  9782 000020B4 [1F21]                  	dw COMMAND_SWITCH7
  9783                                  	; 07/06/2023
  9784 000020B6 [2B21]                  	dw COMMAND_SWITCH8 ; MSDOS 6.0
  9785 000020B8 [3721]                  	dw COMMAND_SWITCH9 ; MSDOS 6.22
  9786                                  	; 22/07/2024
  9787 000020BA [4321]                  	dw COMMAND_SWITCH10 ; PCDOS 7.1
  9788 000020BC [4F21]                  	dw COMMAND_SWITCH11 ; PCDOS 7.1
  9789 000020BE 00                      	db 0			; no keywords
  9790                                  
  9791                                  COMMAND_FILE:
  9792 000020BF 0102                    	dw 0201h		; filespec - optional
  9793 000020C1 0100                    	dw 1			; capitalize - file table
  9794 000020C3 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9795 000020C5 [6321]                  	dw NO_VAL 		;
  9796 000020C7 00                      	db 0			; no keywords
  9797                                  
  9798                                  COMMAND_SWITCH1:
  9799 000020C8 0000                    	dw 0			; no match flags
  9800 000020CA 0200                    	dw 2			; capitalize by char table
  9801 000020CC [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9802 000020CE [6321]                  	dw NO_VAL 		;
  9803 000020D0 01                      	db 1			; 1 keyword
  9804                                  COMMAND_P_SYN:
  9805 000020D1 2F5000                  	db '/P',0		; /P switch
  9806                                  
  9807                                  COMMAND_SWITCH2:
  9808 000020D4 0000                    	dw 0			; no match flags
  9809 000020D6 0200                    	dw 2			; capitalize by char table
  9810 000020D8 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9811 000020DA [6321]                  	dw NO_VAL 		;
  9812 000020DC 01                      	db 1			; 1 keyword
  9813                                  COMMAND_F_SYN:
  9814 000020DD 2F4600                  	db '/F',0		; /F switch
  9815                                  
  9816                                  COMMAND_SWITCH3:
  9817 000020E0 0000                    	dw 0			; no match flags
  9818 000020E2 0200                    	dw 2			; capitalize by char table
  9819 000020E4 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9820 000020E6 [6321]                  	dw NO_VAL 		;
  9821 000020E8 01                      	db 1			; 1 keyword
  9822                                  COMMAND_D_SYN:
  9823 000020E9 2F4400                  	db '/D',0		; /D switch
  9824                                  
  9825                                  COMMAND_SWITCH4:
  9826 000020EC 0080                    	dw 8000h		; numeric value - required
  9827 000020EE 0000                    	dw 0			; no function flags
  9828 000020F0 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9829 000020F2 [F820]                  	dw COMMAND_E_VAL	; pointer to value list
  9830 000020F4 01                      	db 1			; 1 keyword
  9831                                  COMMAND_E_SYN:
  9832 000020F5 2F4500                  	db '/E',0		; /E switch
  9833                                  
  9834                                  COMMAND_E_VAL:
  9835 000020F8 01                      	db 1			;
  9836 000020F9 01                      	db 1			; 1 range
  9837 000020FA 01                      	db 1			; returned if result
  9838                                  	;dd ENVSML,ENVBIG	; minimum & maximum value
  9839                                  	; MSDOS 5.0 COMMAND.COM (RESGROUP:1F2Bh)
  9840                                  	; PCDOS 7.1 COMMAND.COM (RESGROUP:22E5h)
  9841 000020FB A0000000                	dd 160	 ; ENVSML	 
  9842 000020FF 00800000                	dd 32768 ; ENVBIG
  9843 00002103 00                      	db 0			; no numeric values
  9844 00002104 00                      	db 0			; no string values
  9845                                  
  9846                                  COMMAND_SWITCH5:
  9847 00002105 0000                    	dw 0			; no match flags
  9848 00002107 0200                    	dw 2			; capitalize by char table
  9849 00002109 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9850 0000210B [6321]                  	dw NO_VAL 		;
  9851 0000210D 01                      	db 1			; 1 keyword
  9852                                  COMMAND_C_SYN:
  9853 0000210E 2F4300                  	db '/C',0		; /C switch
  9854                                  
  9855                                  COMMAND_SWITCH6:
  9856 00002111 0000                    	dw 0			; no match flags
  9857 00002113 0200                    	dw 2			; capitalize by char table
  9858 00002115 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9859 00002117 [6321]                  	dw NO_VAL 		;
  9860 00002119 01                      	db 1			; 1 keyword
  9861                                  COMMAND_M_SYN:
  9862 0000211A 2F4D534700              	db '/MSG',0		; /MSG switch
  9863                                  
  9864                                  COMMAND_SWITCH7:
  9865 0000211F 0000                    	dw 0			; no match flags
  9866 00002121 0200                    	dw 2			; capitalize by char table
  9867 00002123 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9868 00002125 [6321]                  	dw NO_VAL 		;
  9869 00002127 01                      	db 1			; 1 keyword
  9870                                  COMMAND_?_SYN:
  9871 00002128 2F3F00                  	db '/?',0 		; /? switch
  9872                                  
  9873                                  	; 07/06/2023
  9874                                  	; MSDOS 6.0
  9875                                  COMMAND_SWITCH8:
  9876 0000212B 0000                    	dw 0			; no match flags
  9877 0000212D 0200                    	dw 2			; capitalize by char table
  9878 0000212F [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9879 00002131 [6321]                  	dw NO_VAL 		;
  9880 00002133 01                      	db 1			; 1 keyword
  9881                                  COMMAND_K_SYN:
  9882 00002134 2F4B00                  	db '/K',0		; /K switch
  9883                                  
  9884                                  	; 07/06/2023
  9885                                  	; MSDOS 6.22
  9886                                  COMMAND_SWITCH9:
  9887 00002137 0000                    	dw 0			; no match flags
  9888 00002139 0200                    	dw 2			; capitalize by char table
  9889 0000213B [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9890 0000213D [6321]                  	dw NO_VAL 		;
  9891 0000213F 01                      	db 1			; 1 keyword
  9892                                  COMMAND_Y_SYN:
  9893 00002140 2F5900                  	db '/Y',0		; /Y switch
  9894                                  
  9895                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  9896                                  %if 1
  9897                                  	; PCDOS 7.1 COMMAND.COM  - RESGROUP:2336h
  9898                                  COMMAND_SWITCH10:
  9899 00002143 0000                    	dw 0			; no match flags
  9900 00002145 0200                    	dw 2			; capitalize by char table
  9901 00002147 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9902 00002149 [6321]                  	dw NO_VAL 		;
  9903 0000214B 01                      	db 1			; 1 keyword
  9904                                  COMMAND_H_SYN:
  9905 0000214C 2F4800                  	db '/H',0		; /H switch
  9906                                  
  9907                                  COMMAND_SWITCH11:
  9908 0000214F 0000                    	dw 0			; no match flags
  9909 00002151 0200                    	dw 2			; capitalize by char table
  9910 00002153 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9911 00002155 [6321]                  	dw NO_VAL 		;
  9912 00002157 01                      	db 1			; 1 keyword
  9913                                  COMMAND_O_SYN:
  9914 00002158 2F4F00                  	db '/O',0		; /O switch
  9915                                  %endif
  9916                                  
  9917                                  COMND1_OUTPUT:
  9918                                  COMND1_TYPE:
  9919 0000215B 00                      	db 0			; type
  9920                                  COMND1_CODE:
  9921 0000215C 00                      	db 0			; return value
  9922                                  COMND1_SYN:
  9923 0000215D 0000                    	dw 0			; synonym pointer
  9924                                  COMND1_ADDR:
  9925 0000215F 00000000                	dd 0			; numeric value / address
  9926                                  				; of string value
  9927                                  NO_VAL:
  9928 00002163 00                      	db 0			; no values
  9929                                  num_positionals:
  9930 00002164 0000                    	dw 0			; counter for positionals
  9931                                  old_parse_ptr:
  9932 00002166 0000                    	dw 0			; SI position before calling parser
  9933                                  
  9934                                  	; 30/01/2023
  9935                                  ;***	INITIALIZATION MESSAGES
  9936                                  ;	-------------------------
  9937                                  ;	include	comimsg.inc	;M00
  9938                                  ;-----------------------------------------------------------------------------	
  9939                                  
  9940                                  BADVERMSG:
  9941 00002168 17                      	db 23
  9942 00002169 496E636F7272656374-     	db 'Incorrect DOS version',0Dh,0Ah
  9942 00002172 20444F532076657273-
  9942 0000217B 696F6E0D0A         
  9943                                  OUTENVMSG:
  9944 00002180 1A                      	db 26
  9945 00002181 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
  9945 0000218A 7669726F6E6D656E74-
  9945 00002193 2073706163650D0A   
  9946                                  
  9947                                  ; 07/06/2023
  9948                                  ;COPYRIGHTMSG:
  9949                                  ;	db 94
  9950                                  ;	db 0Dh,0Ah
  9951                                  ;	db 0Dh,0Ah
  9952                                  ;	db 'Microsoft(R) MS-DOS(R) Version 5.00',0Dh,0Ah
  9953                                  ;	db '             (C)Copyright Microsoft Corp 1981-1991.',0Dh,0Ah
  9954                                  
  9955                                  ; 23/07/2024
  9956                                  %if 0
  9957                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9958                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:2286h
  9959                                  COPYRIGHTMSG:
  9960                                  	db 94
  9961                                  	db 0Dh,0Ah
  9962                                  	db 0Dh,0Ah
  9963                                  	db 'Microsoft(R) MS-DOS(R) Version 6.22',0Dh,0Ah
  9964                                  	db '             (C)Copyright Microsoft Corp 1981-1994.',0Dh,0Ah
  9965                                  %else
  9966                                  ; 23/07/2024 - Retro DOS v5.0 COMMAND.COM
  9967                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:2385h
  9968                                  COPYRIGHTMSG:
  9969 0000219B 64                      	db 100
  9970 0000219C 0D0A                    	db 0Dh,0Ah
  9971 0000219E 0D0A                    	db 0Dh,0Ah
  9972 000021A0 504320444F53205665-     	db 'PC DOS Version 7.10',0Dh,0Ah
  9972 000021A9 7273696F6E20372E31-
  9972 000021B2 300D0A             
  9973 000021B5 202020202020202020-     	db '             (C)Copyright International Business Machines Corp '
  9973 000021BE 20202020284329436F-
  9973 000021C7 707972696768742049-
  9973 000021D0 6E7465726E6174696F-
  9973 000021D9 6E616C20427573696E-
  9973 000021E2 657373204D61636869-
  9973 000021EB 6E657320436F727020 
  9974 000021F4 313938312D32303032-     	db '1981-2002.',0Dh,0Ah
  9974 000021FD 2E0D0A             
  9975                                  %endif
  9976                                  
  9977                                  BADCOMLKMES:
  9978 00002200 28                      	db 40
  9979 00002201 537065636966696564-     	db 'Specified COMMAND search directory bad',0Dh,0Ah
  9979 0000220A 20434F4D4D414E4420-
  9979 00002213 736561726368206469-
  9979 0000221C 726563746F72792062-
  9979 00002225 61640D0A           
  9980                                  	; 07/06/2023
  9981                                  BADCOMACCMSG:
  9982 00002229 37                      	db 55
  9983 0000222A 537065636966696564-     	db 'Specified COMMAND search directory bad, access denied',0Dh,0Ah
  9983 00002233 20434F4D4D414E4420-
  9983 0000223C 736561726368206469-
  9983 00002245 726563746F72792062-
  9983 0000224E 61642C206163636573-
  9983 00002257 732064656E6965640D-
  9983 00002260 0A                 
  9984                                  HELPMSG1:
  9985 00002261 38                      	db 56
  9986                                  	;db 'Starts a new copy of the MS-DOS command interpreter.',0Dh,0Ah
  9987                                  	; 23/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
  9988 00002262 537461727473206120-     	db 'Starts a new copy of the PC DOS command interpreter.',0Dh,0Ah
  9988 0000226B 6E657720636F707920-
  9988 00002274 6F6620746865205043-
  9988 0000227D 20444F5320636F6D6D-
  9988 00002286 616E6420696E746572-
  9988 0000228F 7072657465722E0D0A 
  9989 00002298 0D0A                    	db 0Dh,0Ah
  9990                                  ;HELPMSG2:
  9991                                  ;	db 70
  9992                                  ;	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P] [/C string] [/MSG]'
  9993                                  ;	db 0Dh,0Ah
  9994                                  ;	db 0Dh,0Ah
  9995                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9996                                  HELPMSG2:
  9997 0000229A 38                      	db 56
  9998 0000229B 434F4D4D414E44205B-     	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P [/MSG]]',0Dh,0Ah
  9998 000022A4 5B64726976653A5D70-
  9998 000022AD 6174685D205B646576-
  9998 000022B6 6963655D205B2F453A-
  9998 000022BF 6E6E6E6E6E5D205B2F-
  9998 000022C8 50205B2F4D53475D5D-
  9998 000022D1 0D0A               
  9999                                  HELPMSG3:
 10000                                  	;db 42
 10001                                  	;db '        [/Y [/C command | /K command]]',0Dh,0Ah
 10002                                  	;db 0Dh,0Ah
 10003                                  	; 23/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 10004 000022D3 34                      	db 52
 10005 000022D4 20202020202020205B-     	db '        [/H] [/O] [/Y [/C command | /K command]]',0Dh,0Ah
 10005 000022DD 2F485D205B2F4F5D20-
 10005 000022E6 5B2F59205B2F432063-
 10005 000022EF 6F6D6D616E64207C20-
 10005 000022F8 2F4B20636F6D6D616E-
 10005 00002301 645D5D0D0A         
 10006 00002306 0D0A                    	db 0Dh,0Ah
 10007                                  ;HELPMSG3:
 10008                                  HELPMSG4:
 10009 00002308 48                              db 72
 10010 00002309 20205B64726976653A-     	db '  [drive:]path    Specifies the directory containing COMMAND.COM '
 10010 00002312 5D7061746820202020-
 10010 0000231B 537065636966696573-
 10010 00002324 207468652064697265-
 10010 0000232D 63746F727920636F6E-
 10010 00002336 7461696E696E672043-
 10010 0000233F 4F4D4D414E442E434F-
 10010 00002348 4D20               
 10011 0000234A 66696C652E0D0A          	db 'file.',0Dh,0Ah
 10012                                  ;HELPMSG4:
 10013                                  HELPMSG5:
 10014 00002351 4D                      	db 77
 10015 00002352 202064657669636520-     	db '  device          Specifies the device to use for command input and '
 10015 0000235B 202020202020202020-
 10015 00002364 537065636966696573-
 10015 0000236D 207468652064657669-
 10015 00002376 636520746F20757365-
 10015 0000237F 20666F7220636F6D6D-
 10015 00002388 616E6420696E707574-
 10015 00002391 20616E6420         
 10016 00002396 6F75747075742E0D0A      	db 'output.',0Dh,0Ah
 10017                                  ;HELPMSG5:
 10018                                  HELPMSG6:
 10019 0000239F 45                      	db 69
 10020 000023A0 20202F453A6E6E6E6E-     	db '  /E:nnnnn        Sets the initial environment size to nnnnn bytes.'
 10020 000023A9 6E2020202020202020-
 10020 000023B2 536574732074686520-
 10020 000023BB 696E697469616C2065-
 10020 000023C4 6E7669726F6E6D656E-
 10020 000023CD 742073697A6520746F-
 10020 000023D6 206E6E6E6E6E206279-
 10020 000023DF 7465732E           
 10021 000023E3 0D0A                    	db 0Dh,0Ah
 10022                                  ;HELPMSG6:
 10023                                  HELPMSG7:
 10024 000023E5 4D                      	db 77
 10025 000023E6 20202F502020202020-     	db '  /P              Makes the new Command Interpreter permanent '
 10025 000023EF 202020202020202020-
 10025 000023F8 4D616B657320746865-
 10025 00002401 206E657720436F6D6D-
 10025 0000240A 616E6420496E746572-
 10025 00002413 707265746572207065-
 10025 0000241C 726D616E656E7420   
 10026 00002424 2863616E2774206578-     	db '(can',27h,'t exit).',0Dh,0Ah
 10026 0000242D 6974292E0D0A       
 10027                                  ;HELPMSG7:
 10028                                  HELPMSG8:
 10029                                  	;db 80
 10030                                  	;db '  /C string       Carries out the command specified by string, and '
 10031                                  	;db 'then stops.',0Dh,0Ah
 10032                                  	; 07/06/2023
 10033 00002433 46                      	db 70
 10034 00002434 20202F4D5347202020-     	db '  /MSG            Stores all error messages in memory (requires /P).'
 10034 0000243D 202020202020202020-
 10034 00002446 53746F72657320616C-
 10034 0000244F 6C206572726F72206D-
 10034 00002458 657373616765732069-
 10034 00002461 6E206D656D6F727920-
 10034 0000246A 287265717569726573-
 10034 00002473 202F50292E         
 10035 00002478 0D0A                    	db 0Dh,0Ah
 10036                                  
 10037                                  ; 23/07/2024 - Retro DOS v5.0 COMMAND.COM
 10038                                  ; PCDOS 7.1 COMMAND.COM
 10039                                  ;***
 10040                                  HELPMSG9:
 10041 0000247A 4A                      	db 74
 10042 0000247B 20202F482020202020-     	db '  /H              Loads the Command Interpreter into a UMB '
 10042 00002484 202020202020202020-
 10042 0000248D 4C6F61647320746865-
 10042 00002496 20436F6D6D616E6420-
 10042 0000249F 496E74657270726574-
 10042 000024A8 657220696E746F2061-
 10042 000024B1 20554D4220         
 10043 000024B6 696620617661696C61-     	db 'if available.',0Dh,0Ah
 10043 000024BF 626C652E0D0A       
 10044                                  HELPMSG10:
 10045 000024C5 4E                      	db 78
 10046 000024C6 20202F4F2020202020-     	db '  /O              Disables overwrite prompt on COPY,XCOPY,and MOVE '
 10046 000024CF 202020202020202020-
 10046 000024D8 44697361626C657320-
 10046 000024E1 6F7665727772697465-
 10046 000024EA 2070726F6D7074206F-
 10046 000024F3 6E20434F50592C5843-
 10046 000024FC 4F50592C616E64204D-
 10046 00002505 4F564520           
 10047 00002509 636F6D6D616E64732E-     	db 'commands.',0Dh,0Ah
 10047 00002512 0D0A               
 10048                                  ;***
 10049                                  
 10050                                  ;HELPMSG8:
 10051                                  ; 23/07/2024 - PCDOS 7.1 COMMAND.COM
 10052                                  ;HELPMSG9:
 10053                                  HELPMSG11:
 10054                                  	;db 78
 10055                                  	;db '  /MSG            Specifies that all error messages be stored in '
 10056                                  	;db 'memory. You',0Dh,0Ah
 10057                                  ;HELPMSG9:
 10058                                  	;db 56
 10059                                  	;db '                  need to specify /P with this switch.',0Dh,0Ah
 10060 00002514 4A                      	db 74
 10061 00002515 20202F592020202020-     	db '  /Y              Steps through the batch program specified by /C'
 10061 0000251E 202020202020202020-
 10061 00002527 537465707320746872-
 10061 00002530 6F7567682074686520-
 10061 00002539 62617463682070726F-
 10061 00002542 6772616D2073706563-
 10061 0000254B 696669656420627920-
 10061 00002554 2F43               
 10062 00002556 206F72202F4B2E0D0A      	db ' or /K.',0Dh,0Ah
 10063                                  
 10064                                  	; 07/06/2023
 10065                                  ; 23/07/2024
 10066                                  ;HELPMSG10:
 10067                                  HELPMSG12:
 10068 0000255F 3F                      	db 63
 10069 00002560 20202F4320636F6D6D-     	db '  /C command      Executes the specified command and returns.',0Dh,0Ah
 10069 00002569 616E64202020202020-
 10069 00002572 457865637574657320-
 10069 0000257B 746865207370656369-
 10069 00002584 6669656420636F6D6D-
 10069 0000258D 616E6420616E642072-
 10069 00002596 657475726E732E0D0A 
 10070                                  ; 23/07/2024
 10071                                  ;HELPMSG11:
 10072                                  HELPMSG13:
 10073 0000259F 4B                      	db 75
 10074 000025A0 20202F4B20636F6D6D-     	db '  /K command      Executes the specified command and continues running.'
 10074 000025A9 616E64202020202020-
 10074 000025B2 457865637574657320-
 10074 000025BB 746865207370656369-
 10074 000025C4 6669656420636F6D6D-
 10074 000025CD 616E6420616E642063-
 10074 000025D6 6F6E74696E75657320-
 10074 000025DF 72756E6E696E672E   
 10075 000025E7 0D0A                    	db 0Dh,0Ah
 10076 000025E9 0D0A                    	db 0Dh,0Ah
 10077                                  ;HELPMSG12:
 10078                                  ; 23/07/2024
 10079                                  HELPMSG14:
 10080 000025EB 4C                      	db 76
 10081 000025EC 546865202F5020616E-     	db 'The /P and /MSG switches may be used only when COMMAND is started'
 10081 000025F5 64202F4D5347207377-
 10081 000025FE 697463686573206D61-
 10081 00002607 792062652075736564-
 10081 00002610 206F6E6C7920776865-
 10081 00002619 6E20434F4D4D414E44-
 10081 00002622 206973207374617274-
 10081 0000262B 6564               
 10082 0000262D 206279207573696E67-     	db ' by using',0Dh,0Ah
 10082 00002636 0D0A               
 10083                                  ;HELPMSG13:
 10084                                  ; 23/07/2024
 10085                                  HELPMSG15:
 10086 00002638 2B                      	db 43
 10087 00002639 746865205348454C4C-     	db 'the SHELL command in the CONFIG.SYS file.',0Dh,0Ah
 10087 00002642 20636F6D6D616E6420-
 10087 0000264B 696E2074686520434F-
 10087 00002654 4E4649472E53595320-
 10087 0000265D 66696C652E0D0A     
 10088                                  
 10089                                  HelpMsgs:
 10090 00002664 [6122]                          dw HELPMSG1
 10091 00002666 [9A22]                  	dw HELPMSG2
 10092 00002668 [D322]                  	dw HELPMSG3
 10093 0000266A [0823]                  	dw HELPMSG4
 10094 0000266C [5123]                  	dw HELPMSG5
 10095 0000266E [9F23]                  	dw HELPMSG6
 10096 00002670 [E523]                  	dw HELPMSG7
 10097 00002672 [3324]                  	dw HELPMSG8
 10098 00002674 [7A24]                  	dw HELPMSG9
 10099                                  
 10100                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 10101 00002676 [C524]                  	dw HELPMSG10
 10102 00002678 [1425]                  	dw HELPMSG11
 10103 0000267A [5F25]                  	dw HELPMSG12
 10104 0000267C [9F25]                  	dw HELPMSG13
 10105                                  
 10106                                  	; 23/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 10107 0000267E [EB25]                  	dw HELPMSG14
 10108 00002680 [3826]                  	dw HELPMSG15
 10109                                  
 10110                                  	; 23/04/2023
 10111 00002682 0000                    	dw 0
 10112                                  
 10113                                  ;-----------------------------------------------------------------------------
 10114                                  
 10115                                  ;SR;
 10116                                  ; This table of offsets is used by the init code to calculate the new offsets
 10117                                  ;for these labels after the resident code has been relocated
 10118                                  
 10119                                  ;Reloc_Table:
 10120                                  	;dw offset CODERES:MsgInt2fHandler
 10121                                  	;dw offset CODERES:Int_2e
 10122                                  	;dw offset CODERES:ContC
 10123                                  	;dw offset CODERES:DskErr
 10124                                  	;dw offset CODERES:Exec_Ret
 10125                                  	;dw offset CODERES:TRemCheck
 10126                                  	;dw offset CODERES:TrnLodCom1
 10127                                  	;dw offset CODERES:LodCom
 10128                                  	;dw offset CODERES:MsgRetriever
 10129                                  	;dw offset CODERES:THeadFix
 10130                                  	;dw offset CODERES:Lh_OffUnlink	; M003
 10131                                  
 10132                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10133                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:22F6h
 10134                                  
 10135                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10136                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26C1h
 10137                                  
 10138                                  Reloc_Table:	; 23/07/2024 ; PCDOS 7.1 COMMAND.COM CODERES addresses
 10139 00002684 9007                    	dw MsgInt2fHandler - RCODE_START  ; 7B2h (RESGROUP:7B2h+X) *
 10140 00002686 7601                    	dw Int_2e - RCODE_START		  ; 170h (RESGROUP:170h+X) *	
 10141 00002688 3300                    	dw ContC - RCODE_START		  ; 02Eh (RESGROUP:02Eh+X) *
 10142 0000268A 7B04                    	dw DSKERR - RCODE_START		  ; 495h (RESGROUP:495h+X) *
 10143 0000268C 2700                    	dw Exec_Ret - RCODE_START	  ; 022h (RESGROUP:022h+X) *
 10144 0000268E A402                    	dw TRemCheck - RCODE_START	  ; 2A6h (RESGROUP:2A6h+X) *
 10145 00002690 4604                    	dw TrnLodCom1 - RCODE_START	  ; 472h (RESGROUP:472h+X) *
 10146 00002692 AD01                    	dw LodCom - RCODE_START		  ; 1A7h (RESGROUP:1A7h+X) *
 10147 00002694 D307                    	dw MsgRetriever - RCODE_START	  ; 7F5h (RESGROUP:7F5h+X) *
 10148 00002696 C302                    	dw THeadFix - RCODE_START	  ; 2C5h (RESGROUP:2C5h+X) *
 10149 00002698 4C08                    	dw Lh_OffUnlink - RCODE_START	  ; 86Eh (RESGROUP:86Eh+X) *
 10150                                  
 10151                                  	; MSDOS 6.22 COMMAND.COM Reloc_Table CODERES addresses:
 10152                                  	; 738h,177h,035h,445h,029h,2A3h,422h,1AEh,77Bh,2C2h,7F4h
 10153                                  
 10154                                  	; 07/06/2023
 10155                                  	; X = 0D40h for MSDOS 5.0 COMMAND.COM
 10156                                  	; X = 0E50h for MSDOS 6.22 COMMAND.COM
 10157                                  	; 23/07/2024
 10158                                  	; X = 0E10h for PCDOS 7.1 COMMAND.COM
 10159                                  	;; example:
 10160                                  	;;	MsgIn2FHandler is at RESGROUP:15C2h or at CODERES:07B2h
 10161                                  	;;				(in PCDOS 7.1 COMMAND.COM)
 10162                                  
 10163                                  NUM_RELOC_ENTRIES equ ($-Reloc_Table)/2
 10164                                  
 10165                                  ResJmpTable:
 10166 0000269A 00000000                	dd 0			; stores prev stub jump table addr
 10167                                  FirstCom:
 10168 0000269E 00                      	db 0			; flag set if first command.com
 10169                                  DevFlag:
 10170 0000269F 00                      	db 0
 10171                                  PathFlag:
 10172 000026A0 00                      	db 0
 10173                                  
 10174                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:2313h
 10175                                  	;;times 13 db 0
 10176                                  
 10177                                  	; 07/06/2023
 10178                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26DEh
 10179                                  	;times 2 db 0
 10180                                  
 10181                                  ; 30/01/2023
 10182                                  coderes_end equ $
 10183                                  
 10184                                  ;INIT	ENDS
 10185                                  
 10186                                  ;	END
 10187                                  
 10188                                  ;-----------------------------------------------------------------------------
 10189                                  ; 14/10/2018 (Retro DOS v3.0 COMMAND.COM Signature)
 10190                                  ;-----------------------------------------------------------------------------
 10191                                  
 10192                                  ;db	"Retro DOS v3.0 COMMAND.COM by Erdogan Tan [2018]"
 10193                                  	; 30/01/2023
 10194 000026A1 00                      db	0
 10195                                  ;db	"Retro DOS v4.0 COMMAND.COM by Erdogan Tan [2023]"		
 10196                                  	; 07/06/2023
 10197                                  ;db	"Retro DOS v4.2 COMMAND.COM by Erdogan Tan [2023]"
 10198                                  	; 21/07/2024
 10199 000026A2 526574726F20444F53-     db	"Retro DOS v5.0 COMMAND.COM by Erdogan Tan [2024]"
 10199 000026AB 2076352E3020434F4D-
 10199 000026B4 4D414E442E434F4D20-
 10199 000026BD 6279204572646F6761-
 10199 000026C6 6E2054616E205B3230-
 10199 000026CF 32345D             
 10200 000026D2 00                      db	0
 10201                                  
 10202                                  ;-----------------------------------------------------------------------------
 10203                                  ; 24/09/2018 (Retro DOS v3.0 COMMAND)
 10204                                  ;-----------------------------------------------------------------------------
 10205                                  
 10206                                  ;TAIL    SEGMENT PUBLIC PARA
 10207                                  ;        ORG     0
 10208                                  ;TRANSTART LABEL WORD
 10209                                  ;TAIL    ENDS
 10210                                  
 10211                                  ;ALIGN 16  ; 25/09/2018
 10212                                  
 10213                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10214                                  
 10215                                  numbertodiv equ ($-StartCode)+100h ; 16/04/2023
 10216                                  numbertomod equ (numbertodiv % 16)
 10217                                  
 10218                                  %if numbertomod>0 & numbertomod<16
 10219 000026D3 00<rep Dh>              	times (16-numbertomod) db 0
 10220                                  %endif
 10221                                  
 10222                                  ; 30/01/2023
 10223                                  ;TRANSTART:
 10224                                  
 10225                                  ; 21/04/2018 (Retro DOS v2.0 COMMAND)
 10226                                  ;	times	128 db 0	
 10227                                  
 10228                                  ;-----------------------------------------------------------------------------
 10229                                  ; SEGMENT - TRANSCODE
 10230                                  ;-----------------------------------------------------------------------------
 10231                                  
 10232                                  ;TRANGROUP: ; 21/04/2018
 10233                                  
 10234                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10235                                  ;-----------------------------------------------------------------------------
 10236                                  
 10237                                  ; MSDOS 3.3 COMMAND.COM Transient Portion Addresses
 10238                                  
 10239                                  ; 21/04/2018 - Retro DOS v2.0
 10240                                  ; transcom.s (COMMAND.COM source file 2 of 2) code/data addresses 
 10241                                  ; (these values must be changed when transcom.s source code is changed
 10242                                  ; and data offsets are changed)
 10243                                  ;
 10244                                  ; 30/04/2018
 10245                                  ; 29/04/2018
 10246                                  
 10247                                  ; 24/09/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
 10248                                  ;COMMAND      EQU  012CH
 10249                                  ;DATINIT      EQU  2091H
 10250                                  ;HEADCALL     EQU  428FH
 10251                                  ;TRANSPACEEND EQU  4D5CH
 10252                                  ;TRANDATAEND  EQU  3F44H
 10253                                  
 10254                                  ; 29/04/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
 10255                                  ;TRIAGE_INIT  EQU  1F15H
 10256                                  ;PRINTF_INIT  EQU  34E0H 
 10257                                  
 10258                                  ;GETEXTERRNUM EQU  1EEEH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr	
 10259                                  
 10260                                  ;TPA	EQU  4293H
 10261                                  ;TRNLEN	EQU  04D6H
 10262                                  
 10263                                  ; 20/10/2018 - Retro DOS v3.0 COMMAND.COM transient portion addresses
 10264                                  ;COMMAND      EQU  012CH
 10265                                  ;DATINIT      EQU  206FH
 10266                                  ;HEADCALL     EQU  426FH
 10267                                  ; 09/01/2023
 10268                                  ;TRANSPACEEND EQU  4D3CH
 10269                                  ;TRANDATAEND  EQU  3F24H
 10270                                  ;TRIAGE_INIT  EQU  1EF3H
 10271                                  ;PRINTF_INIT  EQU  34BFH 
 10272                                  ;
 10273                                  ;GETEXTERRNUM EQU  1ECCH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr
 10274                                  
 10275                                  ;-----------------------------------------------------------------------------
 10276                                  ; ARENA.INC, MSDOS 6.0, 1991
 10277                                  ;-----------------------------------------------------------------------------
 10278                                  ; 13/10/2018 - Retro DOS 3.0
 10279                                  ; 17/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10280                                  
 10281                                  ;BREAK <Memory arena structure>
 10282                                  
 10283                                  ; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
 10284                                  
 10285                                  ; arena item
 10286                                  
 10287                                  struc ARENA
 10288 00000000 ??                        .signature:	resb 1		; 4D for valid item, 5A for last item
 10289 00000001 ????                      .owner:	resw 1		; owner of arena item
 10290 00000003 ????                      .size:	resw 1		; size in paragraphs of item
 10291                                  endstruc
 10292                                  
 10293                                  ;-----------------------------------------------------------------------------
 10294                                  ;START OF TRANSIENT PORTION
 10295                                  ;This code is loaded at the end of memory and may be overwritten by
 10296                                  ;memory-intensive user programs.
 10297                                  ;-----------------------------------------------------------------------------
 10298                                  
 10299                                  ; 16/04/2023
 10300                                  TRANSTART EQU ($-StartCode)+100h ; 18/04/2023
 10301                                  ; 29/09/2018
 10302                                  ; 31/01/2023 
 10303                                  ;TRANSTART:	; Offset 1660h in original MSDOS 3.3 COMMAND.COM
 10304                                  			
 10305                                  		; 09/01/2023
 10306                                  		; Offset 2320h in original MSDOS 5.0 COMMAND.COM
 10307                                  			
 10308                                  		; 07/06/2023
 10309                                  		; Offset 26E0h in original MSDOS 6.22 COMMAND.COM
 10310                                  
 10311                                  ; 25/09/2018
 10312                                  ; (original MSDOS 3.3 COMMAND.COM TRIAGEERROR offset address)
 10313                                  ;
 10314                                  ; 'GET_EXT_ERR_NUMBER' ('TRIAGEERROR') procedure is at offset 354Eh 
 10315                                  ; in MSDOS 3.3 COMMAND.COM (It is at offset 1EEEh in transient porsion).	 	
 10316                                  ;
 10317                                  ;TRIAGEERROR EQU TRANSTART+GETEXTERRNUM-100H
 10318                                  ;
 10319                                  ;
 10320                                  ;COMTRANS:
 10321                                  ;
 10322                                  ; 20/10/2018 - Retro DOS v3.0	
 10323                                  ;INCBIN	"TRANCOM3.BIN"
 10324                                  ;
 10325                                  ;COMLEN	EQU $-COMTRANS ; End of COMMAND load.
 10326                                  ;
 10327                                  ; 29/04/2018
 10328                                  ;BSS_SIZE EQU TRANSPACEEND-TRANDATAEND	
 10329                                  ;
 10330                                  ;TIMES BSS_SIZE db 0
 10331                                  ;
 10332                                  ;COMLEN	EQU $-COMTRANS ; 30/04/2018
 10333                                  
 10334                                  ;COMMANDCOMSIZE equ $ - 100h
 10335                                  
 10336                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10337                                  ; ============================================================================
 10338                                  ; --- ('trancom5.s', 31/01/2023 - modified from 'trancom3.s', 20/10/2018) ----
 10339                                  ; ============================================================================
 10340                                  
 10341                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22 COMMAND.COM)
 10342                                  
 10343                                  ; ----------------------------------------------------------------------------
 10344                                  ; START OF TRANSIENT PORTION
 10345                                  ; ----------------------------------------------------------------------------
 10346                                  ; SEGMENT - TRANSCODE
 10347                                  ; ----------------------------------------------------------------------------
 10348                                  
 10349                                  ; 18/04/2023
 10350                                  section .TRANGROUP  vstart=0  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) 
 10351                                  
 10352                                  ; 18/04/2023
 10353                                  ;-----------------------------------------------------------------------------
 10354                                  ; TRANSCODE segment offset 0
 10355                                  TRANSIENTSTART:
 10356                                  
 10357                                  	; 31/01/2023
 10358 00000000 00<rep 100h>            	times 256 db 0		; Allow for 100H parameter area
 10359                                  
 10360                                  ;============================================================================
 10361                                  ; TCODE.ASM, MSDOS 6.0, 1991
 10362                                  ;============================================================================
 10363                                  ; 12/10/2018 - Retro DOS v3.0
 10364                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1)
 10365                                  
 10366                                  ;[ORG 100h]
 10367                                  
 10368                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0100h
 10369                                  
 10370                                  ; ---------------------------------------------------------------------------
 10371                                  		
 10372                                  	; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10373                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:0100h)
 10374                                  
 10375                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10376                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0100h)
 10377                                  SETDRV:
 10378 00000100 B40E                    	mov	ah,0Eh
 10379                                  	;mov	ah,SET_DEFAULT_DRIVE ; 0Eh
 10380 00000102 CD21                    	int	21h	; DOS -	SELECT DISK
 10381                                  			; DL = new default drive number
 10382                                  			;		(0 = A, 1 = B, ..)
 10383                                  			; Return: AL = number of logical drives
 10384                                  
 10385                                  ; ---------------------------------------------------------------------------
 10386                                  
 10387                                  ; TCOMMAND is the recycle point in COMMAND. Nothing is known here.
 10388                                  ; No registers (CS:IP) no flags, nothing.
 10389                                  
 10390                                  TCOMMAND:
 10391                                  ; 21/07/2024 - PCDOS 7.1 COMMAND.COM - TRANGROUP:0104h
 10392                                  ; Retro DOS v5.0 COMMAND.COM
 10393                                  %if 1
 10394 00000104 90                      	nop
 10395 00000105 90                      	nop
 10396                                  %endif
 10397 00000106 2E8E1E[D19B]            	mov	ds,[cs:RESSEG]
 10398 0000010B B8FFFF                  	mov	ax,-1
 10399 0000010E 8706[A702]              	xchg	ax,[VerVal]
 10400 00000112 83F8FF                  	cmp	ax,-1
 10401 00000115 7404                    	je	short NOSETVER2
 10402 00000117 B42E                    	mov	ah,2Eh
 10403                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh
 10404 00000119 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 10405                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 10406                                  NOSETVER2:
 10407 0000011B 2EFF1E[CF9B]            	call	far [cs:HEADCALL]   ; Make sure header fixed
 10408 00000120 31ED                    	xor	bp,bp		    ; Flag transient not read
 10409 00000122 833E[A502]FF            	cmp	word [SingleCom],-1
 10410 00000127 7505                    	jne	short COMMAND
 10411                                  _$EXITPREP:
 10412 00000129 0E                      	push	cs
 10413 0000012A 1F                      	pop	ds
 10414 0000012B E99623                  	jmp	_$EXIT		; Have finished the single command
 10415                                  
 10416                                  ; ---------------------------------------------------------------------------
 10417                                  ;
 10418                                  ; Main entry point from resident portion.
 10419                                  ;
 10420                                  ;   If BP <> 0, then we have just loaded transient portion otherwise we are
 10421                                  ;   just beginning the processing of another command.
 10422                                  ;
 10423                                  ; ---------------------------------------------------------------------------
 10424                                  
 10425                                  ; We are not always sure of the state of the world at this time. We presume
 10426                                  ; worst case and initialize the relevant registers: segments and stack.
 10427                                  
 10428                                  COMMAND:
 10429 0000012E FC                      	cld
 10430 0000012F 8CC8                    	mov	ax,cs
 10431 00000131 FA                      	cli
 10432 00000132 8ED0                    	mov	ss,ax
 10433                                  	;mov	sp,offset TRANGROUP:STACK
 10434                                  				; 07/06/2023
 10435 00000134 BC[7CA5]                	mov	sp,STACK	; 0AF24h for MSDOS 6.22 COMMAND.COM
 10436                                  				; 09854h for MSDOS 5.0 COMMAND.COM
 10437                                  				; 25/07/2024
 10438                                  				; 0AA2Dh for PCDOS 7.1 COMMAND.COM
 10439 00000137 FB                      	sti
 10440                                  		
 10441 00000138 8EC0                    	mov	es,ax
 10442                                  		
 10443                                  	; MSDOS 6.0
 10444 0000013A 8ED8                    	mov	ds,ax		;AN000; set DS to transient
 10445                                  	;ASSUME	ES:TRANGROUP,DS:TRANGROUP ;AC000;
 10446                                  	;invoke	TSYSLOADMSG	;AN000; preload messages
 10447                                  	; 31/01/2023
 10448 0000013C E87D53                  	call	TSYSLOADMSG
 10449 0000013F C606[139F]00            	mov	byte [append_exec],0 ;AN041; set internal append state off
 10450                                  
 10451                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10452                                  	;mov	ds,[ss:RESSEG]
 10453                                  	; 31/01/2023
 10454 00000144 8E1E[D19B]              	mov	ds,[RESSEG]
 10455 00000148 36C606[AD99]80          	mov	byte [ss:UCOMBUF],128 ; Init UCOMBUF	
 10456 0000014E 36C606[309A]80          	mov	byte [ss:COMBUF],128  ; Init COMBUF (Autoexec doing DATE)
 10457                                  
 10458                                  ; If we have just loaded the transient, then we do NOT need to initialize the
 10459                                  ; command buffer. ????  DO WE NEED TO RESTORE THE USERS DIRECTORY ????
 10460                                  ; I guess not: the only circumstances in which we reload the command processor
 10461                                  ; is after a transient program execution. In this case, we let the current
 10462                                  ; directory lie where it may.
 10463                                  
 10464 00000154 09ED                    	or	bp,bp		; See if just read
 10465 00000156 7409                    	jz	short TESTRDIR	; Not read, check user directory
 10466 00000158 36C706[AE99]010D        	mov	word [ss:UCOMBUF+1],0D01h ; Reset buffer
 10467 0000015F EB17                    	jmp	short NOSETBUF
 10468                                  TESTRDIR:
 10469 00000161 803E[A102]00            	cmp	byte [RestDir],0
 10470 00000166 7410                    	jz	short NOSETBUF	; User directory OK
 10471 00000168 1E                      	push	ds
 10472                                  
 10473                                  ; We have an unusual situation to handle. The user *may* have changed his
 10474                                  ; directory as a result of an internal command that got aborted. Restoring it
 10475                                  ; twice may not help us: the problem may never go away. We just attempt it
 10476                                  ; once and give up.
 10477                                  
 10478 00000169 C606[A102]00            	mov	byte [RestDir],0 ; Flag users dirs OK
 10479                                  
 10480                                  	; Restore users directory
 10481 0000016E 0E                      	push	cs
 10482 0000016F 1F                      	pop	ds
 10483 00000170 BA[B39A]                	mov	dx,USERDIR1
 10484 00000173 B43B                    	mov	ah,3Bh
 10485                                  	;mov	ah,CHDir ; 3Bh
 10486 00000175 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 10487                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 10488 00000177 1F                      	pop	ds
 10489                                  NOSETBUF:
 10490 00000178 803E[1403]00            	cmp	byte [PipeFiles],0
 10491 0000017D 740A                    	jz	short NOPCLOSE	; Don't bother if they don't exist
 10492 0000017F 803E[1303]00            	cmp	byte [PipeFlag],0
 10493 00000184 7503                    	jnz	short NOPCLOSE	; Don't del if still piping
 10494 00000186 E85E2F                  	call	PIPEDEL
 10495                                  NOPCLOSE:
 10496                                  	;mov	byte [0BE9h],0	; MSDOS 3.3
 10497                                  	; 31/01/2023
 10498 00000189 C606[9902]00            	mov	byte [ExtCom],0 ; Flag internal command
 10499 0000018E 8CC8                    	mov	ax,cs		; Get segment we're in
 10500 00000190 8ED8                    	mov	ds,ax
 10501 00000192 50                      	push	ax
 10502                                  			; 07/06/2023 (INTERNATVARS addr = STACK addr)
 10503 00000193 BA[7CA5]                	mov	dx,INTERNATVARS ; 0AF24h for MSDOS 6.22 COMMAND.COM
 10504                                  				; 09854h for MSDOS 5.0 COMMAND.COM
 10505                                  			; 25/07/2024
 10506                                  				; 0AA2Dh for PCDOS 7.1 COMMAND.COM
 10507 00000196 B80038                  	mov	ax,3800h
 10508                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 10509 00000199 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 10510                                  			; get current-country info
 10511                                  			; DS:DX	-> buffer for returned info
 10512 0000019B 58                      	pop	ax
 10513 0000019C 2B06[D39B]              	sub	ax,[TPA]	; AX=size of TPA in paragraphs
 10514 000001A0 53                      	push	bx
 10515 000001A1 BB1000                  	mov	bx,16
 10516 000001A4 F7E3                    	mul	bx		; DX:AX=size of TPA in bytes
 10517 000001A6 5B                      	pop	bx
 10518 000001A7 09D2                    	or	dx,dx		; See if over 64K
 10519 000001A9 7403                    	jz	short SAVSIZ	; OK if not
 10520 000001AB B8FFFF                  	mov	ax,-1		; If so, limit to 65535 bytes
 10521                                  SAVSIZ:
 10522                                  
 10523                                  ; AX is the number of bytes free in the buffer between the resident and the
 10524                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 10525                                  
 10526 000001AE 3D0002                  	cmp	ax,512
 10527 000001B1 7603                    	jbe	short GOTSIZE
 10528                                  	;and	ax,~1FFh
 10529 000001B3 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FF
 10530                                  GOTSIZE:
 10531 000001B6 A3[F29B]                	mov	[BYTCNT],ax	; Max no. of bytes that can be buffered
 10532 000001B9 8E1E[D19B]              	mov	ds,[RESSEG]	; All batch work must use resident seg.
 10533                                  
 10534 000001BD F606[9D02]01            	test	byte [EchoFlag],1 
 10535 000001C2 741E                    	jz	short GETCOM	; Don't do the CRLF
 10536 000001C4 E8FF2E                  	call	SINGLETEST
 10537 000001C7 7219                    	jb	short GETCOM
 10538 000001C9 F606[1303]FF            	test	byte [PipeFlag],0FFh ; -1
 10539 000001CE 7512                    	jnz	short GETCOM
 10540                                  				; G  Don't print prompt in FOR
 10541 000001D0 F606[AB02]FF            	test	byte [ForFlag],0FFh ; -1
 10542 000001D5 750B                    	jnz	short GETCOM
 10543                                  				; G  Don't print prompt if in batch
 10544 000001D7 F706[4902]FFFF          	test	word [Batch],0FFFFh ; -1
 10545 000001DD 7503                    	jnz	short GETCOM
 10546 000001DF E85E27                  	call	CRLF2
 10547                                  
 10548                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10549                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:01E0h
 10550                                  GETCOM:
 10551 000001E2 833E[A502]00            	cmp     word [SingleCom],0
 10552 000001E7 750D                    	jnz     short GETCOM2
 10553 000001E9 F706[4902]FFFF          	test    word [Batch],0FFFFh
 10554 000001EF 7505                    	jnz     short GETCOM2
 10555 000001F1 8026[5A04]EF            	and     byte [Y_Flag],0EFh ; Y/N question overwrite flag ; ~10h
 10556                                  
 10557                                  ;GETCOM:	; MSDOS 5.0 COMMAND.COM
 10558                                  GETCOM2:
 10559 000001F6 C606[B002]00            	mov	byte [Call_Flag],0 ; G Reset call flags
 10560 000001FB C606[B102]00            	mov	byte [Call_Batch_Flag],0
 10561 00000200 B419                    	mov	ah,19h
 10562                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 10563 00000202 CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 10564 00000204 36A2[E59B]              	mov	[ss:CURDRV],al
 10565 00000208 F606[1303]FF            	test	byte [PipeFlag],0FFh ; -1 ; Pipe has highest presedence
 10566 0000020D 7403                    	jz	short NOPIPE
 10567 0000020F E9A02F                  	jmp	PIPEPROC	; Continue the pipeline
 10568                                  NOPIPE:
 10569 00000212 F606[9D02]01            	test	byte [EchoFlag],1
 10570 00000217 7417                    	jz	short NOPDRV	; No prompt if echo off
 10571 00000219 E8AA2E                  	call	SINGLETEST
 10572 0000021C 7212                    	jb	short NOPDRV
 10573 0000021E F606[AB02]FF            	test	byte [ForFlag],0FFh ; G  Don't print prompt in FOR	
 10574 00000223 750B                    	jnz	short NOPDRV
 10575 00000225 F706[4902]FFFF          	test	word [Batch],0FFFFh ; G  Don't print prompt if in batch
 10576 0000022B 750D                    	jnz	short TESTFORBAT
 10577 0000022D E8BE1E                  	call	PRINT_PROMPT	; Prompt the user
 10578                                  NOPDRV:
 10579 00000230 F606[AB02]FF            	test	byte [ForFlag],0FFh ; FOR has next highest precedence
 10580 00000235 7403                    	jz	short TESTFORBAT
 10581 00000237 E9BD0C                  	jmp	FORPROC		; Continue the FOR
 10582                                  
 10583                                  TESTFORBAT:
 10584 0000023A 36C606[7C9B]00          	mov	byte [ss:RE_INSTR],0 ; Turn redirection back off	
 10585 00000240 C606[C202]00            	mov	byte [Re_OutStr],0  ; [0C09h] for MSDOS 3.3 
 10586 00000245 C606[C102]00            	mov	byte [Re_Out_App],0 ; [0C08h] for MSDOS 3.3
 10587 0000024A C606[AA02]00            	mov	byte [IfFlag],0	; no more ifs...
 10588 0000024F F706[4902]FFFF          	test	word [Batch],0FFFFh ; Batch has lowest precedence
 10589 00000255 7441                    	jz	short ISNOBAT
 10590                                  
 10591                                  	; 31/01/2023
 10592                                  
 10593                                  	; MSDOS 6.0
 10594                                  
 10595                                  ;	Bugbug:	MULT_SHELL_GET no longer used?
 10596                                  
 10597 00000257 06                      	push	es			;AN000; save ES
 10598 00000258 1E                      	push	ds			;AN000; save DS
 10599                                  	;mov	ax,mult_shell_get	;AN000; check to see if SHELL has command
 10600                                  	; 05/02/2023
 10601 00000259 B80219                  	mov	ax,1902h
 10602 0000025C 8E06[4902]              	mov	es,[Batch]		;AN000; get batch segment
 10603                                  	;mov	di,20h
 10604 00000260 BF2000                  	mov	di,BATCHSEGMENT.BatFile	;AN000; get batch file name
 10605 00000263 0E                      	push	cs			;AN000; get local segment to DS
 10606 00000264 1F                      	pop	ds			;AN000;
 10607                                  	;mov	dx,offset trangroup:combuf ;AN000; pass communications buffer
 10608 00000265 BA[309A]                	mov	dx,COMBUF
 10609 00000268 CD2F                    	int	2Fh			;AN000; call the shell
 10610                                  		; - Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE
 10611                                  		; ES:DI -> ASCIZ full filename of current batch file, with at least the
 10612                                  		; final filename element uppercased
 10613                                  		; DS:DX -> buffer for results
 10614                                  	;cmp	al,0FFh
 10615 0000026A 3CFF                    	cmp	al,shell_action		;AN000; does shell have a commmand?
 10616 0000026C 1F                      	pop	ds			;AN000; restore DS
 10617 0000026D 07                      	pop	es			;AN000; restore ES
 10618 0000026E 7424                    	jz	short JDOCOM1		;AN000; yes - go process command
 10619                                  
 10620                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10621 00000270 1E                      	push	ds
 10622 00000271 E80E04                  	call	READBAT			; Continue BATCH
 10623 00000274 1F                      	pop	ds
 10624 00000275 C606[B402]00            	mov	byte [NullFlag],0	;G reset no command flag
 10625 0000027A F706[4902]FFFF          	test	word [Batch],0FFFFh
 10626 00000280 7512                    	jnz	short JDOCOM1		;G if batch still in progress continue
 10627 00000282 8B1E[B202]              	mov	bx,[Next_Batch]
 10628                                  	; 31/01/2023
 10629 00000286 09DB                    	or	bx,bx
 10630                                  	;cmp	bx,0			;G see if there is a new batch file
 10631 00000288 740A                    	jz	short JDOCOM1		;G no - go do command
 10632 0000028A 891E[4902]              	mov	[Batch],bx		;G get segment of next batch file
 10633 0000028E C706[B202]0000          	mov	word [Next_Batch],0	;G reset next batch
 10634                                  JDOCOM1:
 10635 00000294 0E                      	push	cs
 10636 00000295 1F                      	pop	ds
 10637                                  	;jmp	short DOCOM1
 10638                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 10639 00000296 EB5D                    	jmp	short DOCOM0
 10640                                  ISNOBAT:
 10641 00000298 833E[A502]00            	cmp	word [SingleCom],0
 10642 0000029D 741D                    	jz	short REGCOM
 10643                                  	; 07/06/2023 - MSDOS 6.22 COMMAND.COM
 10644 0000029F 8B36[A302]              	mov	si,[SemiPermCom] ;  MSDOS 6.0
 10645                                  	;mov	si,0FFFFh 	 ;  MSDOS 3.3 & MSDOS 5.0
 10646 000002A3 8736[A502]              	xchg	si,[SingleCom]
 10647 000002A7 BF[329A]                	mov	di,COMBUF+2
 10648 000002AA 31C9                    	xor	cx,cx
 10649                                  SINGLELOOP:
 10650 000002AC AC                      	lodsb
 10651 000002AD AA                      	stosb
 10652 000002AE 41                      	inc	cx
 10653 000002AF 3C0D                    	cmp	al,0Dh
 10654 000002B1 75F9                    	jnz	short SINGLELOOP
 10655 000002B3 49                      	dec	cx
 10656 000002B4 0E                      	push	cs
 10657 000002B5 1F                      	pop	ds
 10658 000002B6 880E[319A]              	mov	[COMBUF+1],cl
 10659                                  
 10660                                  ; do NOT issue a trailing CRLF...
 10661                                  
 10662                                  	;jmp	short DOCOM1
 10663                                  	; 07/06/2023
 10664                                  	; MSDOS 6.22 COMMAND.COM
 10665 000002BA EB39                    	jmp	short DOCOM0
 10666                                  
 10667                                  	;nop
 10668                                  
 10669                                  	; 31/01/2023 - Retro DOS v4.0 COMMAND.COM
 10670                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:02A6h
 10671                                  
 10672                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10673                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02BBh
 10674                                  
 10675                                  ; We have a normal command.  
 10676                                  ; Printers are a bizarre quantity. Sometimes they are a stream and
 10677                                  ; sometimes they aren't. At this point, we automatically close all spool
 10678                                  ; files and turn on truncation mode.
 10679                                  
 10680                                  REGCOM:
 10681                                  	;mov	ax,(ServerCall shl 8) + 9
 10682                                  	; 31/01/2023
 10683 000002BC B8095D                  	mov	ax,5D09h
 10684                                  	;mov	ax,(SERVERCALL<<8)+9
 10685 000002BF CD21                    	int	21h	; DOS -	3.1+ internal -	FLUSH REDIRECTED PRINTER OUTPUT
 10686                                  	;mov	ax,(ServerCall shl 8) + 8
 10687 000002C1 B8085D                  	mov	ax,5D08h
 10688                                  	;mov	ax,(SERVERCALL<<8)+8
 10689 000002C4 B201                    	mov	dl,1
 10690 000002C6 CD21                    	int	21h	; DOS -	3.1+ internal -	SET REDIRECTED PRINTER MODE
 10691                                  			; DL = 00h redirected output is	combined
 10692                                  			;      01h redirected output placed in separate	jobs
 10693                                  			; start	new print job now
 10694 000002C8 0E                      	push	cs
 10695 000002C9 1F                      	pop	ds	; Need local segment to point to buffer
 10696 000002CA BA[AD99]                	mov	dx,UCOMBUF
 10697                                  
 10698                                  	; MSDOS 6.0
 10699                                  ;	Try to read interactive command line via DOSKey.
 10700                                  ;	If that fails, use DOS Buffered Keyboard Input.
 10701                                  
 10702                                  	; 31/01/2023
 10703 000002CD B81048                  	mov	ax,4810h	; AX = DOSKey Read Line function
 10704 000002D0 CD2F                    	int	2Fh
 10705 000002D2 09C0                    	or	ax,ax
 10706 000002D4 7404                    	jz	short GOTCOM	; DOSKey gave us a command line
 10707                                  
 10708 000002D6 B40A                    	mov	ah,0Ah
 10709                                  	;mov	ah,Std_Con_String_Input	; AH = DOS Buffered Keyboard Input
 10710 000002D8 CD21                    	int	21h	; DOS -	BUFFERED KEYBOARD INPUT
 10711                                  			; DS:DX	-> buffer
 10712                                  GOTCOM:
 10713 000002DA 8A0E[AD99]              	mov	cl,[UCOMBUF]
 10714 000002DE 30ED                    	xor	ch,ch
 10715 000002E0 83C103                  	add	cx,3
 10716 000002E3 BE[AD99]                	mov	si,UCOMBUF
 10717 000002E6 BF[309A]                	mov	di,COMBUF
 10718 000002E9 F3A4                    	rep	movsb		; Transfer it to the cooked buffer
 10719                                  
 10720                                  	; -------------
 10721                                  
 10722                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10723                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02EDh
 10724                                  
 10725 000002EB E85226                  	call	CRLF2
 10726 000002EE 31C0                    	xor	ax,ax
 10727 000002F0 EB06                    	jmp	short DOCOM2
 10728                                  	; -------------
 10729                                  
 10730                                  DOCOM:
 10731 000002F2 E84B26                  	call	CRLF2
 10732                                  
 10733                                  	; -------------
 10734                                  
 10735                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10736                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02F4h
 10737                                  
 10738                                  
 10739                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 10740                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:02F6h
 10741                                  DOCOM0:
 10742 000002F5 B80100                  	mov	ax,1
 10743                                  DOCOM2:
 10744 000002F8 1E                      	push	ds
 10745 000002F9 8E1E[D19B]              	mov     ds,[RESSEG]
 10746 000002FD A3[FD01]                	mov	[cox_Y_option],ax
 10747 00000300 1F                      	pop	ds
 10748 00000301 BE[309A]                	mov	si,COMBUF
 10749 00000304 8A4C01                  	mov	cl,[si+1]
 10750 00000307 30ED                    	xor	ch,ch
 10751 00000309 83C602                  	add	si,2
 10752 0000030C E82501                  	call	get_cox_y_n_opt
 10753 0000030F 7303                    	jnc	short DOCOM1    ; YES answer
 10754                                  	; 07/06/2023
 10755                                  NULLCOMJ:
 10756 00000311 E90201                  	jmp	NULLCOM         ; NO answer
 10757                                  	; -------------
 10758                                  
 10759                                  	; MSDOS 5.0 & MSDOS 6.0 COMMAND.COM
 10760                                  DOCOM1:
 10761 00000314 E82D2A                  	call	PRESCAN		; Cook the input buffer
 10762 00000317 7403                    	jz	short NOPIPEPROC
 10763 00000319 E9152E                  	jmp	PIPEPROCSTRT	; Fire up the pipe
 10764                                  
 10765                                  	; 07/06/2023
 10766                                  ;NULLCOMJ:
 10767                                  	;jmp	NULLCOM
 10768                                  
 10769                                  NOPIPEPROC:
 10770 0000031C E81031                  	call	PARSELINE
 10771 0000031F 730B                    	jnb	short OKPARSE	; user error? or maybe we goofed?
 10772                                  BADPARSE:
 10773 00000321 0E                      	push	cs
 10774 00000322 1F                      	pop	ds
 10775 00000323 BA[678F]                	mov	dx,BADNAM_PTR	; 31/01/2023
 10776 00000326 E8AC50                  	call	std_eprintf
 10777 00000329 E9D8FD                  	jmp	TCOMMAND
 10778                                  
 10779                                  OKPARSE:
 10780                                  	;test	byte [ARGV0_ARG_FLAGS],2
 10781                                  	;test	byte [ARG+ARGV_ELE.argflags],2 ; wildcard
 10782                                  	; 01/02/2023
 10783 0000032C F606[2F9F]02            	test	byte [ARG+ARGV_ELE.argflags],2
 10784 00000331 75EE                    	jnz	short BADPARSE	; ambiguous commands not allowed
 10785                                  	;cmp	word [ARG_ARGVCNT],0  ; there WAS a command, wasn't there?
 10786 00000333 833E[EDA1]00            	cmp	word [ARG+ARG_UNIT.argvcnt],0
 10787 00000338 74D7                    	jz	short NULLCOMJ
 10788                                  	;cmp	word [ARGV0_ARGLEN],0 ; probably an unnecessary check...
 10789 0000033A 833E[329F]00            	cmp	word [ARG+ARGV_ELE.arglen],0
 10790 0000033F 74D0                    	jz	short NULLCOMJ	; guarantees argv[0] at least x<NULL>
 10791                                  
 10792 00000341 BE[329A]                	mov	si,COMBUF+2
 10793 00000344 BF[999C]                	mov	di,IDLEN
 10794                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10795                                  				; Make FCB with blank scan-off
 10796                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10797 00000347 B80129                  	mov	ax,2901h
 10798 0000034A CD21                    	int	21h	; DOS -	PARSE FILENAME
 10799                                  			; DS:SI	-> string to parse
 10800                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10801                                  			; AL = bit mask	to control parsing
 10802                                  	;mov	bx,[ARG_ARGV]
 10803 0000034C 8B1E[2D9F]              	mov	bx,[ARG+ARG_UNIT.argv] ; mov bx,[ARG]
 10804 00000350 807F013A                	cmp	byte [bx+1],':'	; was a drive specified?
 10805 00000354 751B                    	jne	short DRVGD	; no, use default of zero...
 10806 00000356 8A17                    	mov	dl,[bx]		; pick-up drive letter
 10807                                  	;mov	dl,[bx+ARGV_ELE.argpointer] ; mov dl,[bx+0]
 10808                                  	;and	dl,~20h
 10809 00000358 80E2DF                  	and	dl,0DFh		; uppercase the sucker
 10810                                  	;sub	dl,[CAPITAL_A]	; convert it to a drive number, A=0
 10811                                  	; 31/01/2023
 10812 0000035B 80EA41                  	sub	dl,'A'
 10813 0000035E 3CFF                    	cmp	al,-1		; See what PARSE said about our drive letter.
 10814 00000360 740C                    	je	short DRVBADJ	; It was invalid.
 10815                                  	;mov	di,[ARGV0_ARGSTARTEL]
 10816 00000362 8B3E[309F]              	mov	di,[ARG+ARGV_ELE.argstartel]
 10817 00000366 803D00                  	cmp	byte [di],0	; is there actually a command there?
 10818 00000369 7506                    	jne	short DRVGD	; if not, we have:  "d:", "d:\", "d:/"
 10819 0000036B E992FD                  	jmp	SETDRV		; and set drive to new drive spec
 10820                                  DRVBADJ:
 10821 0000036E E97828                  	jmp	DRVBAD
 10822                                  DRVGD:
 10823 00000371 8A05                    	mov	al,[di]
 10824 00000373 A2[F19B]                	mov	[SPECDRV],al
 10825 00000376 B020                    	mov	al,' '
 10826 00000378 B90900                  	mov	cx,9
 10827 0000037B 47                      	inc	di
 10828 0000037C F2AE                    	repne	scasb		; Count number of letters in command name
 10829 0000037E B008                    	mov	al,8
 10830 00000380 28C8                    	sub	al,cl
 10831 00000382 A2[999C]                	mov	[IDLEN],al	; IDLEN is truly the length
 10832 00000385 BF8100                  	mov	di,81h
 10833 00000388 56                      	push	si
 10834 00000389 BE[329A]                	mov	si,COMBUF+2	; Skip over all leading delims
 10835 0000038C E8BE25                  	call	scanoff
 10836                                  
 10837                                  	; 01/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10838                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0356h
 10839                                  
 10840                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10841                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0391h
 10842                                  
 10843                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 10844                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:0393h
 10845                                  
 10846                                  	; MSDOS 6.0
 10847                                  ;SR;
 10848                                  ; We are going to skip over the first char always. The logic is that the
 10849                                  ;command tail can never start from the first character. The code below is 
 10850                                  ;trying to figure out the command tail and copy it to the command line 
 10851                                  ;buffer in the PSP. However, if the first character happens to be a switch
 10852                                  ;character and the user given command line is a full 128 bytes, we try to
 10853                                  ;copy 128 bytes to the PSP while it can take only 127 chars. This extra
 10854                                  ;char overwrites the code and leads to a crash on future commands.
 10855                                  
 10856 0000038F 46                      	inc	si ;  MSDOS 6.0
 10857                                  
 10858                                  DO_SKIPCOM:
 10859 00000390 AC                      	lodsb			; move command line pointer over
 10860 00000391 E8C125                  	call	DELIM		; pathname -- have to do it ourselves
 10861 00000394 740A                    	jz	short DO_SKIPPED ; 'cause parse_file_descriptor is dumb
 10862 00000396 3C0D                    	cmp	al,0Dh		; can't always depend on argv[0].arglen
 10863 00000398 7406                    	jz	short DO_SKIPPED ; to be the same length as the user-
 10864 0000039A 3A06[D59B]              	cmp	al,[SWITCHAR]	; specified command string
 10865 0000039E 75F0                    	jnz	short DO_SKIPCOM 
 10866                                  DO_SKIPPED:
 10867 000003A0 4E                      	dec	si
 10868 000003A1 31C9                    	xor	cx,cx
 10869                                  COMTAIL:
 10870 000003A3 AC                      	lodsb
 10871 000003A4 AA                      	stosb			; Move command tail to 80h
 10872 000003A5 3C0D                    	cmp	al,0Dh
 10873 000003A7 E0FA                    	loopne	COMTAIL
 10874 000003A9 4F                      	dec	di
 10875 000003AA 89FD                    	mov	bp,di
 10876 000003AC F6D1                    	not	cl
 10877 000003AE 880E8000                	mov	[80h],cl
 10878 000003B2 5E                      	pop	si
 10879                                  ;-----
 10880                                  ; Some of these comments are sadly at odds with this brave new code.
 10881                                  ;-----
 10882                                  ; If the command has 0 parameters must check here for
 10883                                  ; any switches that might be present.
 10884                                  ; SI -> first character after the command.
 10885                                  
 10886                                  	;mov	di,arg.argv[0].argsw_word
 10887                                  	;mov	di,[ARGV0_ARGSW_WORD]
 10888 000003B3 8B3E[349F]              	mov	di,[ARG+ARGV_ELE.argsw_word]
 10889 000003B7 893E[E89B]              	mov	[COMSW],di	; ah yes, the old addressing mode problem...
 10890                                  	;mov	SI,arg.argv[1 * SIZE argv_ele].argpointer  
 10891                                  				; s = argv[1];
 10892                                  	;mov	si,[ARGV1_ARGPOINTER]
 10893 000003BB 8B36[389F]              	mov	si,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]
 10894 000003BF 09F6                    	or	si,si		;   if (s == NULL)
 10895 000003C1 7502                    	jnz	short DOPARSE	;	s = bp; (buffer end)
 10896 000003C3 89EE                    	mov	si,bp
 10897                                  DOPARSE:
 10898 000003C5 BF5C00                  	mov	di,FCB ; 5Ch
 10899                                  	;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10900                                  	; 01/02/2023
 10901 000003C8 B80129                  	mov	ax,2901h
 10902                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10903 000003CB CD21                    	int	21h	; DOS -	PARSE FILENAME
 10904                                  			; DS:SI	-> string to parse
 10905                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10906                                  			; AL = bit mask	to control parsing
 10907 000003CD A2[E69B]                	mov	[PARM1],al	; Save result of parse
 10908                                  	;mov	di,arg.argv[1*SIZE argv_ele].argsw_word
 10909                                  	;mov	di,[ARGV1_ARGSW_WORD]
 10910 000003D0 8B3E[3F9F]              	mov	di,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]
 10911 000003D4 893E[EA9B]              	mov	[ARG1S],di
 10912                                  	;mov	si,arg.argv[2*SIZE argv_ele].argpointer    
 10913                                  				; s = argv[2];
 10914                                  	;mov	si,[ARGV2_ARGPOINTER]
 10915 000003D8 8B36[439F]              	mov	si,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argpointer]
 10916 000003DC 09F6                    	or	si,si		; if (s == NULL)
 10917 000003DE 7502                    	jnz	short DOPARSE2
 10918 000003E0 89EE                    	mov	si,bp		;     s = bp; (buffer end)
 10919                                  DOPARSE2:			
 10920 000003E2 BF6C00                  	mov	di,FCB+10h ; 6Ch
 10921                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10922 000003E5 B80129                  	mov	ax,2901h
 10923                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10924 000003E8 CD21                    	int	21h	; DOS -	PARSE FILENAME
 10925                                  			; DS:SI	-> string to parse
 10926                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10927                                  			; AL = bit mask	to control parsing
 10928 000003EA A2[E79B]                	mov	[PARM2],al	; Save result
 10929                                  	;mov	di,[ARGV2_ARGSW_WORD]
 10930                                  	;mov	di,arg.argv[2*SIZE argv_ele].argsw_word
 10931 000003ED 8B3E[4A9F]              	mov	di,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]
 10932 000003F1 893E[EC9B]              	mov	[ARG2S],di
 10933                                  	;mov	di,[ARGV0_ARGSW_WORD]
 10934                                  	;mov	di,arg.argv[0].argsw_word
 10935 000003F5 8B3E[349F]              	mov	di,[ARG+ARGV_ELE.argsw_word]
 10936 000003F9 F7D7                    	not	di		; ARGTS doesn't include the flags
 10937                                  	;and	di,[ARG_ARGSWINFO] ; from COMSW...
 10938                                  	;and	di,arg.argswinfo	
 10939 000003FB 233E[EFA1]              	and	di,[ARG+ARG_UNIT.argswinfo]
 10940 000003FF 893E[EE9B]              	mov	[ARGTS],di
 10941                                  
 10942 00000403 A0[999C]                	mov	al,[IDLEN]
 10943 00000406 8A16[F19B]              	mov	dl,[SPECDRV]
 10944 0000040A 08D2                    	or	dl,dl		; if a drive was specified...
 10945 0000040C 7505                    	jnz	short EXTERNALJ1 ; it MUST be external, by this time
 10946 0000040E FEC8                    	dec	al		; (I don't know why -- old code did it)
 10947 00000410 E92927                  	jmp	FNDCOM		; otherwise, check internal com table
 10948                                  EXTERNALJ1:
 10949 00000413 E92B28                  	jmp	EXTERNAL
 10950                                  NULLCOM:
 10951 00000416 8E1E[D19B]              	mov	ds,[RESSEG]
 10952 0000041A F706[4902]FFFF          	test	word [Batch],0FFFFh ; -1 ;G Are we in a batch file?
 10953 00000420 7405                    	jz	short NOSETFLAG	  ;G only set flag if in batch
 10954 00000422 C606[B402]01            	mov	byte [NullFlag],1 ;G set flag to indicate no command
 10955                                  	;mov	byte [NullFlag],nullcommand ; 1
 10956                                  NOSETFLAG:
 10957 00000427 833E[A502]FF            	cmp	word [SingleCom],0FFFFh ; -1
 10958 0000042C 7403                    	je	short EXITJ
 10959 0000042E E9B1FD                  	jmp	GETCOM
 10960                                  EXITJ:
 10961 00000431 E9F5FC                  	jmp	_$EXITPREP
 10962                                  
 10963                                  ; 07/06/2023
 10964                                  ; ---------------------------------------------------------------------------
 10965                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 10966                                  ; -----------------------------------------
 10967                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 10968                                  ; ---------------------------------------------------------------------------
 10969                                  
 10970                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10971                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0436h
 10972                                  
 10973                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 10974                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:0438h
 10975                                  get_cox_y_n_opt:
 10976 00000434 E339                    	jcxz	ccydp4		; empty	input buffer
 10977                                  ccydp0:
 10978 00000436 803C0D                  	cmp	byte [si],0Dh
 10979 00000439 7434                    	je	short ccydp4
 10980 0000043B 803C0A                  	cmp	byte [si],0Ah
 10981 0000043E 742F                    	je	short ccydp4
 10982 00000440 06                      	push	es
 10983 00000441 8E06[D19B]              	mov	es,[RESSEG]
 10984 00000445 26A0[5A04]              	mov	al,[es:Y_Flag]
 10985 00000449 A810                    	test	al,10h		; bit 1	= 1 -> Y/N answer is needed
 10986 0000044B 7421                    	jz	short ccydp3 ; cf=0 ; 07/06/2023
 10987 0000044D 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],1 ; (in) Batch file ?
 10988 00000453 7419                    	je	short ccydp3	; yes, don't check for ESCAPE
 10989 00000455 A840                    	test	al,40h		; ESCAPE status
 10990                                  				; (bit 4 is zero if Y/N	is escaped)
 10991 00000457 7417                    	jz	short ccydp5
 10992                                  ccydp1:
 10993 00000459 26F706[4902]FFFF        	test	word [es:Batch],0FFFFh
 10994 00000460 740B                    	jz	short ccydp2
 10995 00000462 268E06[4902]            	mov	es,[es:Batch]
 10996                                  	;mov	byte [es:2],1 ; [es:BATCHSEGMENT.BatchEOF]
 10997 00000467 26C606020001            	mov	byte [es:BATCHSEGMENT.BatchEOF],1
 10998                                  ccydp2:
 10999 0000046D F9                      	stc
 11000                                  ccydp3:		; 07/06/2023 ; cf = 0
 11001 0000046E 07                      	pop	es
 11002                                  ccydp4:		; 07/06/2023 ; cf = 0
 11003 0000046F C3                      	retn
 11004                                  
 11005                                  ;ccydp3:
 11006                                  ;	pop	es
 11007                                  ;ccydp4:
 11008                                  ;	clc
 11009                                  ;	retn
 11010                                  
 11011                                  ccydp5:
 11012 00000470 89F2                    	mov	dx,si
 11013 00000472 BB0200                  	mov	bx,2
 11014 00000475 B440                    	mov	ah,40h
 11015 00000477 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 11016                                  			; BX = file handle, CX = number	of bytes to write
 11017                                  			; DS:DX -> buffer
 11018 00000479 BA[0292]                	mov	dx,cox_Y_quest_ptr ; msg number	pointer	of ' [Y/N]?'
 11019                                  				   ; (is 1082)
 11020 0000047C E8564F                  	call	std_eprintf
 11021 0000047F 1E                      	push	ds
 11022 00000480 B83B04                  	mov	ax,1083	; cox_Y_answer number (overwrite Y/N answer letter)
 11023 00000483 B6FF                    	mov	dh,0FFh		; utility_msg_class
 11024 00000485 E83A50                  	call	TSYSGETMSG
 11025                                  	;mov	cx,'NY' ; MASM word format
 11026                                  	; NASM word format
 11027 00000488 B9594E                  	mov	cx,'YN'        ; 'YN' Yes/No (CL=Y)
 11028 0000048B 7202                    	jc	short ccydp6
 11029 0000048D 8B0C                    	mov	cx,[si]
 11030                                  ccydp6:
 11031 0000048F 1F                      	pop	ds
 11032                                  ccydp7:
 11033 00000490 B408                    	mov	ah,8
 11034 00000492 CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 11035                                  			; Return: AL = character
 11036 00000494 84C0                    	test	al,al
 11037 00000496 7510                    	jnz	short ccydp8
 11038 00000498 B408                    	mov	ah,8
 11039 0000049A CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 11040                                  			; Return: AL = character
 11041 0000049C 3C3F                    	cmp	al,'?'
 11042 0000049E 75F0                    	jne	short ccydp7
 11043 000004A0 26800E[5A04]40          	or	byte [es:Y_Flag],40h ; bit 4, question flag
 11044 000004A6 EBB1                    	jmp	short ccydp1
 11045                                  ccydp8:
 11046 000004A8 3C1B                    	cmp	al,1Bh		; ESCAPE ?
 11047 000004AA 7509                    	jne	short ccydp9
 11048 000004AC 268026[5A04]EF          	and	byte [es:Y_Flag],0EFh ; (ESCAPE) Clear bit 4 ; ~10h
 11049                                  	;jmp	short ccydp12
 11050                                  	; 07/06/2023
 11051 000004B2 9C                      	pushf
 11052 000004B3 EB18                    	jmp	short ccydp12
 11053                                  ccydp9:
 11054                                  	; 25/07/2024 - PCDOS 7.1 COMMAND.COM
 11055 000004B5 3C41                    	cmp     al,41h ; 'A'
 11056 000004B7 7202                    	jb      short ccydp13
 11057                                  	;
 11058 000004B9 24DF                    	and	al,0DFh		; uppercase
 11059                                  ccydp13:	; 25/07/2024
 11060 000004BB 38E8                    	cmp	al,ch		; NO character (N)
 11061 000004BD 7503                    	jne	short ccydp10
 11062 000004BF F9                      	stc
 11063 000004C0 EB04                    	jmp	short ccydp11	; cf = 1 -> overwrite NO answer
 11064                                  ccydp10:
 11065 000004C2 38C8                    	cmp	al,cl		; YES character	(Y)
 11066 000004C4 75CA                    	jne	short ccydp7
 11067                                  ccydp11:
 11068 000004C6 9C                      	pushf			; cf = 0 -> overwrite YES answer
 11069 000004C7 88C2                    	mov	dl,al
 11070 000004C9 B402                    	mov	ah,2
 11071 000004CB CD21                    	int	21h	; DOS -	DISPLAY	OUTPUT
 11072                                  			; DL = character to send to standard output
 11073                                  	; 07/06/2023
 11074                                  	;popf
 11075                                  ccydp12:
 11076                                  	;pushf
 11077 000004CD E87024                  	call	CRLF2
 11078 000004D0 9D                      	popf
 11079 000004D1 07                      	pop	es
 11080 000004D2 C3                      	retn
 11081                                  
 11082                                  ;============================================================================
 11083                                  ; MSHALO.ASM, MSDOS 6.0, 1991
 11084                                  ;============================================================================
 11085                                  ; 12/10/2018 - Retro DOS v3.0
 11086                                  
 11087                                  ; 05/02/2023 - Retro DOS v5.0 (& v4.1) COMMAND.COM
 11088                                  
 11089                                  ;	SCCSID = @(#)ibmhalo.asm	1.1 85/04/10
 11090                                  ;   On 2K (800h) boundaries beginning at address C0000h and ending at EF800h
 11091                                  ;   there is a header that describes a block of rom program.  This header
 11092                                  ;   contains information needed to initialize a module and to provide PCDOS
 11093                                  ;   with a set of reserved names for execution.
 11094                                  ;
 11095                                  ;   This header has the following format:
 11096                                  ;
 11097                                  ;   rom_header	STRUC
 11098                                  ;	Signature1  DB	55h
 11099                                  ;	Signature2  DB	AAh
 11100                                  ;	rom_length  DB	?		; number of 512 byte pieces
 11101                                  ;	init_jmp    DB	3 dup (?)
 11102                                  ;	name_list   name_struc <>
 11103                                  ;   rom_header	ENDS
 11104                                  ;
 11105                                  ;   name_struc	STRUC
 11106                                  ;	name_len    DB	?
 11107                                  ;	name_text   DB	? DUP (?)
 11108                                  ;	name_jmp    DB	3 DUP (?)
 11109                                  ;   name_struc	ENDS
 11110                                  ;
 11111                                  ;   The name list is a list of names that are reserved by a particular section
 11112                                  ;   of a module.  This list of names is terminated by a null name (length
 11113                                  ;   is zero).
 11114                                  ;
 11115                                  ;   Consider now, the PCDOS action when a user enters a command:
 11116                                  ;
 11117                                  ;	COMMAND.COM has control.
 11118                                  ;	o   If location FFFFEh has FDh then
 11119                                  ;	o	Start scanning at C0000h, every 800h for a byte 55h followed
 11120                                  ;		    by AAh, stop scan if we get above or = F0000H
 11121                                  ;	o	When we've found one, compare the name entered by the user
 11122                                  ;		    with the one found in the rom.  If we have a match, then
 11123                                  ;		    set up the environment for execution and do a long jump
 11124                                  ;		    to the near jump after the found name.
 11125                                  ;	o	If no more names in the list, then continue scanning the module
 11126                                  ;		    for more 55h followed by AAh.
 11127                                  ;	o   We get to this point only if there is no matching name in the
 11128                                  ;		rom.  We now look on disk for the command.
 11129                                  ;
 11130                                  ;   This gives us the flexibility to execute any rom cartridge without having
 11131                                  ;   to 'hard-code' the name of the cartridge into PCDOS.  Rom modules that
 11132                                  ;   want to be invisible to the DOS should not have any names in their lists
 11133                                  ;   (i.e. they have a single null name).
 11134                                  ;
 11135                                  ;   Consider a new release of BASIC, say, that patches bugs in the ROM version.
 11136                                  ;   Clearly this version will be available on disk.  How does a user actually
 11137                                  ;   invoke this new BASIC??  He cannot call it BASIC on the disk because the
 11138                                  ;   EXEC loader will execute the ROM before it even looks at the disk!	Only
 11139                                  ;   solution:
 11140                                  ;
 11141                                  ;   o	Keep things consistent and force the user to have his software named
 11142                                  ;	differently from the ROM names (BASIC1, BASIC2, etc).
 11143                                  
 11144                                  struc ROM_HEADER
 11145 00000000 ??                          .signature1: resb 1
 11146 00000001 ??                          .signature2: resb 1
 11147 00000002 ??                          .rom_length: resb 1
 11148 00000003 ??????                      .init_jmp:	 resb 3
 11149 00000006 ??                          .name_list:	 resb 1
 11150                                      .size:
 11151                                  endstruc
 11152                                  
 11153                                  struc NAME_STRUC
 11154 00000000 ??                          .name_len:	resb 1
 11155 00000001 ??                          .name_text:	resb 1
 11156 00000002 ??????                      .name_jmp:	resb 3
 11157                                      .size:	
 11158                                  endstruc
 11159                                  
 11160                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 03D1h
 11161                                  
 11162                                  ; =============== S U B	R O U T	I N E =======================================
 11163                                  
 11164                                  ;ASSUME	CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
 11165                                  
 11166                                  ; 05/02/2023
 11167                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:03FBh
 11168                                  
 11169                                  ; 07/06/2023
 11170                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:04D5h
 11171                                  
 11172                                  ; 25/07/2024
 11173                                  ; PCDOS 7.1 COMMAND.COM - TRANGROUP:04DBh
 11174                                  
 11175                                  ; Check for IBM PC Jr rom cartrides. DS:DX is a pointer to name
 11176                                  
 11177                                  ROM_SCAN:
 11178 000004D3 06                      	push	es
 11179 000004D4 56                      	push	si
 11180 000004D5 57                      	push	di
 11181 000004D6 51                      	push	cx
 11182 000004D7 50                      	push	ax
 11183 000004D8 53                      	push	bx
 11184                                  
 11185                                  	; check for PC Jr signature in rom
 11186                                  
 11187 000004D9 B800F0                  	mov	ax,0F000h
 11188 000004DC 8EC0                    	mov	es,ax
 11189 000004DE 26803EFEFFFD            	cmp	byte [es:0FFFEh],0FDh
 11190 000004E4 7408                    	je	short SCAN_IT
 11191                                  NO_ROM:
 11192 000004E6 F8                      	clc
 11193                                  ROM_RET:
 11194 000004E7 5B                      	pop	bx
 11195 000004E8 58                      	pop	ax
 11196 000004E9 59                      	pop	cx
 11197 000004EA 5F                      	pop	di
 11198 000004EB 5E                      	pop	si
 11199 000004EC 07                      	pop	es
 11200 000004ED C3                      	retn
 11201                                  
 11202                                  	; start scanning at C000h
 11203                                  SCAN_IT:
 11204 000004EE B800C0                  	mov	ax,0C000h
 11205                                  SCAN_ONE:
 11206 000004F1 8EC0                    	mov	es,ax
 11207 000004F3 31FF                    	xor	di,di
 11208                                  
 11209                                  	; check for a valid header
 11210                                  SCAN_MODULE:
 11211 000004F5 26813D55AA              	cmp	word [es:di],0AA55h
 11212 000004FA 740A                    	je	short SCAN_LIST
 11213 000004FC 058000                  	add	ax,80h
 11214                                  SCAN_END:
 11215 000004FF 3D00F0                  	cmp	ax,0F000h
 11216 00000502 72ED                    	jb	short SCAN_ONE
 11217 00000504 EBE0                    	jmp	short NO_ROM
 11218                                  
 11219                                  	; trundle down list of names
 11220                                  SCAN_LIST:
 11221                                  	;mov	bl,[es:di+2]	; number of 512-byte jobbers
 11222 00000506 268A5D02                	mov	bl,[es:di+ROM_HEADER.rom_length]
 11223 0000050A 30FF                    	xor	bh,bh		; nothing in the high byte
 11224 0000050C D1E3                    	shl	bx,1
 11225 0000050E D1E3                    	shl	bx,1		; number of paragraphs
 11226 00000510 83C37F                  	add	bx,7Fh
 11227 00000513 83E380                  	and	bx,0FF80h	; round to 2k
 11228                                  	;mov	di,6
 11229                                  	; 05/05/2023
 11230 00000516 BF0600                  	mov	di,ROM_HEADER.name_list
 11231                                  	;nop
 11232                                  SCAN_NAME:
 11233 00000519 268A0D                  	mov	cl,[es:di]	; length of name
 11234 0000051C 47                      	inc	di		; point to name
 11235 0000051D 30ED                    	xor	ch,ch
 11236 0000051F 09C9                    	or	cx,cx		; zero length name
 11237 00000521 7504                    	jnz	short SCAN_TEST	; nope... compare
 11238 00000523 01D8                    	add	ax,bx		; yep, skip to next block
 11239 00000525 EBD8                    	jmp	short SCAN_END
 11240                                  
 11241                                  	; compare a single name
 11242                                  SCAN_TEST:
 11243 00000527 89D6                    	mov	si,dx
 11244 00000529 46                      	inc	si
 11245 0000052A F3A6                    	repe	cmpsb		 ; compare name
 11246 0000052C 7407                    	jz	short SCAN_FOUND ; success!
 11247                                  SCAN_NEXT:
 11248 0000052E 01CF                    	add	di,cx		; failure, next name piece
 11249 00000530 83C703                  	add	di,3
 11250 00000533 EBE4                    	jmp	short SCAN_NAME
 11251                                  
 11252                                  	; found a name. save entry location
 11253                                  SCAN_FOUND:	
 11254 00000535 803C3F                  	cmp	byte [si],'?'
 11255 00000538 7405                    	je	short SCAN_SAVE
 11256 0000053A 803C20                  	cmp	byte [si],' '
 11257 0000053D 75EF                    	jne	short SCAN_NEXT
 11258                                  SCAN_SAVE:
 11259 0000053F 2E8C06[949D]            	mov	[cs:ROM_CS],es
 11260 00000544 2E893E[929D]            	mov	[cs:ROM_IP],di
 11261 00000549 F9                      	stc
 11262 0000054A EB9B                    	jmp	short ROM_RET
 11263                                  
 11264                                  ; ---------------------------------------------------------------------------
 11265                                  
 11266                                  ; execute a rom-placed body of code. allocate largest block
 11267                                  
 11268                                  ROM_EXEC:
 11269 0000054C BBFFFF                  	mov	bx,0FFFFh
 11270                                  	; 05/02/2023
 11271 0000054F B448                    	mov	ah,48h
 11272                                  	;mov	ah,ALLOC ; 48h
 11273 00000551 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11274                                  			; BX = number of 16-byte paragraphs desired
 11275 00000553 B448                    	mov	ah,48h
 11276                                  	;mov	ah,ALLOC ; 48h
 11277 00000555 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11278                                  			; BX = number of 16-byte paragraphs desired
 11279 00000557 53                      	push	bx
 11280 00000558 50                      	push	ax
 11281                                  
 11282                                  	; set terminate addresses
 11283                                  
 11284 00000559 B82225                  	mov	ax,2522h
 11285                                  	;;mov	ax,(set_interrupt_vector SHL 8) + int_terminate
 11286                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE
 11287 0000055C 1E                      	push	ds
 11288 0000055D 2E8E1E[D19B]            	mov	ds,[cs:RESSEG]
 11289                                  	;mov	dx,offset RESGROUP:EXEC_WAIT
 11290                                  	;mov	dx,131h ; MSDOS 3.3
 11291                                  	; 05/02/2023
 11292                                  	;mov	dx,0D6Bh ; MSDOS 5.0
 11293 00000562 BA[390D]                	mov	dx,Exec_Wait
 11294 00000565 CD21                    	int	21h	; DOS -	SET INTERRUPT VECTOR
 11295                                  			; AL = interrupt number
 11296                                  			; DS:DX	= new vector to	be used	for specified interrupt
 11297 00000567 8CDA                    	mov	dx,ds
 11298 00000569 8EC2                    	mov	es,dx
 11299 0000056B 1F                      	pop	ds
 11300                                  		
 11301                                  	; and create program header and dup all jfn's
 11302                                  
 11303 0000056C 5A                      	pop	dx
 11304 0000056D B455                    	mov	ah,55h
 11305                                  	;mov	ah,DUP_PDB ; 55h
 11306 0000056F CD21                    	int	21h	; DOS -	2+ internal - CREATE PSP
 11307                                  			; DX = segment number at which to set up PSP
 11308                                  			; SI = (DOS 3+)	value to place in memory size field at DX:[0002h]
 11309                                  		
 11310                                  	; set up dma address
 11311                                  
 11312 00000571 8EDA                    	mov	ds,dx
 11313 00000573 BA8000                  	mov	dx,80h
 11314 00000576 B41A                    	mov	ah,1Ah
 11315                                  	;mov	ah,Set_DMA ; 1Ah
 11316 00000578 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 11317                                  			; DS:DX	-> disk	transfer buffer
 11318                                  
 11319                                  	; copy in environment info
 11320                                  
 11321 0000057A 26A1[3A04]              	mov	ax,[es:EnvirSeg]
 11322                                  	;mov	[2Ch],ax
 11323 0000057E A32C00                  	mov	[PDB.ENVIRON],ax
 11324                                  
 11325                                  	; set up correct size of block
 11326                                  
 11327 00000581 5B                      	pop	bx		; BX has size, DS has segment
 11328 00000582 8CDA                    	mov	dx,ds
 11329 00000584 01DA                    	add	dx,bx
 11330                                  	;mov	[2],dx
 11331 00000586 89160200                	mov	[PDB.BLOCK_LEN],dx
 11332                                  
 11333                                  	; change ownership of block
 11334                                  
 11335 0000058A 8CDA                    	mov	dx,ds
 11336 0000058C 4A                      	dec	dx
 11337 0000058D 8EDA                    	mov	ds,dx
 11338 0000058F 42                      	inc	dx	
 11339                                  	;mov	[1],dx
 11340 00000590 89160100                	mov	[ARENA.owner],dx
 11341 00000594 8EDA                    	mov	ds,dx
 11342                                  
 11343                                  	; set up correct stack
 11344                                  
 11345 00000596 81FB0010                	cmp	bx,1000h
 11346 0000059A 7202                    	jb	short GOT_STACK
 11347 0000059C 31DB                    	xor	bx,bx
 11348                                  GOT_STACK:
 11349 0000059E B104                    	mov	cl,4
 11350 000005A0 D3E3                    	shl	bx,cl
 11351 000005A2 8CDA                    	mov	dx,ds
 11352 000005A4 8ED2                    	mov	ss,dx
 11353 000005A6 89DC                    	mov	sp,bx
 11354 000005A8 31C0                    	xor	ax,ax
 11355 000005AA 50                      	push	ax
 11356                                  
 11357                                  	; set up initial registers and go to the guy
 11358                                  
 11359 000005AB F7D0                    	not	ax
 11360 000005AD 2EFF36[949D]            	push	word [cs:ROM_CS]
 11361 000005B2 2EFF36[929D]            	push	word [cs:ROM_IP]
 11362 000005B7 8EC2                    	mov	es,dx
 11363 000005B9 CB                      	retf	; far return
 11364                                  
 11365                                  ; 25/07/2024 - Retro DOS v5.0
 11366                                  ; ---------------------------------------------------------------------------
 11367                                  ; PCDOS 7.1 COMMAND.COM - TRANGROUP:05C2h
 11368                                  
 11369                                  ; =============== S U B	R O U T	I N E =======================================
 11370                                  
 11371                                  int_21h_indirect:
 11372 000005BA 1E                      	push	ds		; (*)
 11373 000005BB 9C                      	pushf			; (**)
 11374 000005BC 53                      	push	bx
 11375 000005BD 31DB                    	xor	bx, bx
 11376 000005BF 8EDB                    	mov	ds, bx		; 0
 11377 000005C1 5B                      	pop	bx
 11378 000005C2 0E                      	push	cs		; simulate INT 21h
 11379                                  				; stack: ip, cs, flags (**)
 11380 000005C3 E80300                  	call	INT21h_fcall
 11381 000005C6 C20200                  	retn	2		; discard ds (*) on top	of stack
 11382                                  
 11383                                  ; =============== S U B	R O U T	I N E =======================================
 11384                                  
 11385                                  INT21h_fcall:
 11386                                  	;push	word ptr ds:86h
 11387 000005C9 FF368600                	push	word [(4*21h)+2] ; INT 21h segment
 11388                                  	;push	word ptr ds:84h
 11389 000005CD FF368400                	push	word [4*21h]	; INT 21h offset
 11390 000005D1 55                      	push	bp
 11391 000005D2 89E5                    	mov	bp,sp
 11392 000005D4 8E5E0C                  	mov	ds,[bp+12]	; DS (*) in stack
 11393 000005D7 FF760E                  	push	word [bp+14]	; return addr of the caller of INT21h_fcall
 11394 000005DA 8F460C                  	pop	word [bp+12]	; return address from INT 21h
 11395 000005DD 5D                      	pop	bp
 11396 000005DE FA                      	cli
 11397 000005DF CB                      	retf
 11398                                  
 11399                                  ; =============== S U B	R O U T	I N E =======================================
 11400                                  
 11401                                  int_2Fh_indirect:
 11402 000005E0 1E                      	push	ds
 11403 000005E1 53                      	push	bx
 11404 000005E2 31DB                    	xor	bx,bx
 11405 000005E4 8EDB                    	mov	ds,bx
 11406 000005E6 5B                      	pop	bx
 11407 000005E7 9C                      	pushf
 11408 000005E8 FA                      	cli
 11409                                  	;call	dword ptr ds:0BCh
 11410 000005E9 FF1EBC00                	call	far [4*2Fh]	;  INT 2Fh handler
 11411 000005ED 1F                      	pop	ds
 11412 000005EE C3                      	retn
 11413                                  
 11414                                  ; ---------------------------------------------------------------------------
 11415                                  
 11416                                  ;============================================================================
 11417                                  ; TBATCH.ASM, MSDOS 6.0, 1991
 11418                                  ;============================================================================
 11419                                  ; 12/10/2018 - Retro DOS v3.0
 11420                                  
 11421                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 04B9h
 11422                                  
 11423                                  ; =============== S U B	R O U T	I N E =======================================
 11424                                  
 11425                                  ;Break	<PromptBat - Open or wait for batch file>
 11426                                  
 11427                                  ; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11428                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:04E2h
 11429                                  
 11430                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11431                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:05BCh
 11432                                  
 11433                                  ; Open the batch file. If we cannot find the batch file. If the media is
 11434                                  ; changeable, we prompt for the change. Otherwise, we terminate the batch
 11435                                  ; file. Leave segment registers alone.
 11436                                  
 11437                                  PROMPTBAT:
 11438 000005EF E85308                  	call	BATOPEN
 11439 000005F2 7201                    	jc	short PROMPTBAT1
 11440 000005F4 C3                      	retn
 11441                                  PROMPTBAT1:
 11442                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11443                                  	; MSDOS 6.0 COMMAND.COM
 11444 000005F5 83FA02                  	cmp	dx,ERROR_FILE_NOT_FOUND ;AN022; Ask for diskette if file not found
 11445 000005F8 740A                    	je	short BAT_REMCHECK	;AN022;
 11446 000005FA 83FA03                  	cmp	dx,ERROR_PATH_NOT_FOUND ;AN022; Ask for diskette if path not found
 11447 000005FD 7405                    	je	short BAT_REMCHECK	;AN022; Otherwise, issue message and exit
 11448                                  	;invoke	output_batch_name	;AN022; set up batch name in bwdbuf
 11449 000005FF E83500                  	call	output_batch_name
 11450 00000602 EB13                    	jmp	short BATDIE		;AN022;
 11451                                  
 11452                                  	; 05/02/2023
 11453                                  	; MSDOS 3.3 COMMAND.COM
 11454                                  	;cmp	dx,ACCDENPTR
 11455                                  	;jz	short BATDIE
 11456                                  
 11457                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11458                                  BAT_REMCHECK:				;AN022; Go see if media is removable
 11459 00000604 2EFF1E[DB9B]            	call	far [cs:RCH_ADDR]	; DX has error number
 11460 00000609 7417                    	jz	short ASKFORBAT		; Media is removable
 11461                                  
 11462                                  ; The media is not changeable. Turn everything off.
 11463                                  
 11464 0000060B E84B0B                  	call	FOROFF
 11465 0000060E E8512D                  	call	PipeOff
 11466 00000611 A2[AA02]                	mov	[IfFlag],al	; No If in progress.	
 11467 00000614 BA[618F]                	mov	dx,BADBAT_PTR
 11468                                  BATDIE:
 11469 00000617 E8F803                  	call	BATCHOFF
 11470 0000061A 0E                      	push	cs
 11471 0000061B 1F                      	pop	ds
 11472                                  	;invoke	std_eprintf	;AC022; display message ;  MSDOS 6.0
 11473                                  	; 05/02/2023
 11474 0000061C E8B64D                  	call	std_eprintf	; MSDOS 6.0
 11475                                  	;call	STD_PRINTF	; MSDOS 3.3
 11476                                  
 11477                                  ; TCOMMAND resets the stack. This is the equivalent of a non-local goto.
 11478                                  
 11479 0000061F E9E2FA                  	jmp	TCOMMAND
 11480                                  
 11481                                  ; Ask the user to reinsert the batch file
 11482                                  
 11483                                  ASKFORBAT:
 11484 00000622 1E                      	push	ds
 11485 00000623 0E                      	push	cs
 11486 00000624 1F                      	pop	ds
 11487                                  
 11488                                  	; MSDOS 6.0
 11489                                  	;mov	dx,offset TRANGROUP:NEEDBAT_ptr  ;AN022;
 11490 00000625 BA[648F]                	mov	dx,NEEDBAT_PTR
 11491                                  	;invoke	std_eprintf	 	;Prompt for batch file on stderr
 11492                                  	; 05/02/2023
 11493 00000628 E8AA4D                  	call	std_eprintf
 11494                                  	;mov	dx,offset trangroup:pausemes_ptr
 11495 0000062B BA[1190]                	mov	dx,PAUSEMES_PTR
 11496                                  	;invoke std_eprintf		;AN000; get second part of message
 11497 0000062E E8A44D                  	call	std_eprintf
 11498                                  					;AN000; print it to stderr
 11499                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11500                                  	;call	STD_EPRINTF
 11501 00000631 E82E00                  	call	GETKEYSTROKE
 11502 00000634 1F                      	pop	ds
 11503 00000635 EBB8                    	jmp	short PROMPTBAT
 11504                                  
 11505                                  
 11506                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11507                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:052Ah
 11508                                  
 11509                                  	; MSDOS 6.0
 11510                                  ;****************************************************************
 11511                                  ;*
 11512                                  ;* ROUTINE:	Output_batch_name
 11513                                  ;*
 11514                                  ;* FUNCTION:	Sets up batch name to be printed on extended error
 11515                                  ;*
 11516                                  ;* INPUT:	DX - extended error number
 11517                                  ;*
 11518                                  ;* OUTPUT:	Ready to call print routine
 11519                                  ;*
 11520                                  ;****************************************************************
 11521                                  ;
 11522                                  ;public	output_batch_name		;AN022;
 11523                                  
 11524                                  output_batch_name:	;proc near	;AN022;
 11525                                  
 11526 00000637 1E                      	push	ds			;AN022; save resident segment
 11527 00000638 8E1E[4902]              	mov	ds,[Batch]		;AN022; get batch file segment
 11528                                  	;assume	DS:nothing		;AN022;
 11529                                  	;;mov	SI,BatFile		;AN022; get offset of batch file
 11530                                  	; 05/02/2023
 11531                                  	;mov	si,20h
 11532                                  	; 24/04/2023
 11533 0000063C BE2000                  	mov	si,BATCHSEGMENT.BatFile
 11534                                  	;invoke	dstrlen 		;AN022; get length of string
 11535 0000063F E8242A                  	call	dstrlen
 11536                                  	;mov	di,offset Trangroup:bwdbuf
 11537                                  					;AN022; target for batch name
 11538 00000642 BF[189D]                	mov	di,BWDBUF
 11539 00000645 F3A4                    	rep	movsb			;AN022; move the name
 11540                                  
 11541 00000647 0E                      	push	cs			;AN022; get local segment
 11542 00000648 1F                      	pop	ds			;AN022;
 11543                                  	;assume	DS:trangroup		;AN022;
 11544                                  	; 05/02/2023
 11545 00000649 8916[448F]              	mov	[extend_buf_ptr],dx	;AN022; put message number in block
 11546                                  	;mov	byte [msg_disp_class],1
 11547 0000064D C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class
 11548                                  					;AN022; set up extended error msg class
 11549                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 11550 00000652 BA[448F]                	mov	dx,extend_buf_ptr	
 11551                                  					;AN022; get extended message pointer
 11552                                  	;mov	string_ptr_2,offset trangroup:bwdbuf 
 11553 00000655 C706[7F9D][189D]        	mov	word [string_ptr_2],BWDBUF	
 11554                                  					;AN022; point to substitution
 11555                                  	;mov	byte [extend_buf_sub],1
 11556 0000065B C606[468F]01            	mov	byte [extend_buf_sub],one_subst
 11557                                  					;AN022; set up for one subst
 11558 00000660 1F                      	pop	ds			;AN022; restore data segment
 11559 00000661 C3                      	retn				;AN022; return
 11560                                  
 11561                                  ;output_batch_name    endp		;AN022;
 11562                                  
 11563                                  
 11564                                  ; =============== S U B	R O U T	I N E =======================================
 11565                                  
 11566                                  ;Break	<GetKeystroke - get a keystroke and flush queue>
 11567                                  
 11568                                  ; Read the next keystroke. Since there may be several characters in the queue
 11569                                  ; after the one we ask for (function keys/Kanji), we need to flush the queue
 11570                                  ; AFTER waiting.
 11571                                  
 11572                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11573                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0555h
 11574                                  
 11575                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11576                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:062Fh
 11577                                  
 11578                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 11579                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:066Ah
 11580                                  
 11581                                  GETKEYSTROKE:
 11582                                  	; 05/02/2023
 11583                                  	; MSDOS 3.3
 11584                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_NO_ECHO
 11585                                  	;;mov	ax,0C08h
 11586                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT_NO_ECHO
 11587                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 11588                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 11589                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 11590                                  	;;mov	ax,0C00h
 11591                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)+0
 11592                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 11593                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 11594                                  	;retn
 11595                                  
 11596                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11597                                  	; MSDOS 6.0
 11598 00000662 52                      	push	dx			;AN000;  3/3/KK
 11599                                  	;mov	ax,(ECS_call SHL 8) OR GetInterimMode
 11600                                  					;AN000;  3/3/KK
 11601 00000663 B80263                  	mov	ax,6302h
 11602 00000666 CD21                    	int	21h			;AN000;  3/3/KK
 11603                                  		; DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE
 11604                                  	
 11605 00000668 52                      	push	dx			;AN000;  save interim state 3/3/KK
 11606                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 11607                                  					;AN000;  3/3/KK
 11608 00000669 B80163                  	mov	ax,6301h
 11609 0000066C B201                    	mov	dl,1
 11610                                  	;mov	dl,InterimMode		;AN000;  3/3/KK
 11611 0000066E CD21                    	int	21h			;AN000;  3/3/KK
 11612                                  		; DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE
 11613                                  		; DL = new mode
 11614                                  		; 00h return only full characters on DOS keyboard input functions
 11615                                  		; 01h return partially-formed characters also
 11616                                  	
 11617                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo
 11618 00000670 B8080C                  	mov	ax,0C08h
 11619 00000673 CD21                    	int	21h			; Get character with KB buffer flush
 11620                                  		; DOS - CLEAR KEYBOARD BUFFER
 11621                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 11622                                  
 11623                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 11624 00000675 B8000C                  	mov	ax,0C00h
 11625 00000678 CD21                    	int	21h
 11626                                  		; DOS - CLEAR KEYBOARD BUFFER
 11627                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 11628                                  
 11629                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 11630                                  					;AN000;  3/3/KK
 11631 0000067A B80163                  	mov	ax,6301h
 11632 0000067D 5A                      	pop	dx			;AN000;  restore interim state 3/3/KK
 11633 0000067E CD21                    	int	21h			;AN000;  3/3/KK
 11634 00000680 5A                      	pop	dx			;AN000;  3/3/KK
 11635                                  	
 11636 00000681 C3                      	retn
 11637                                  
 11638                                  ; =============== S U B	R O U T	I N E =======================================
 11639                                  
 11640                                  ; Break	<ReadBat - read 1 line from batch file>
 11641                                  
 11642                                  ; ReadBat - read a single line from the batch file. 
 11643                                  ; Perform all substitutions as appropriate.
 11644                                  
 11645                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11646                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0575h
 11647                                  
 11648                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 11649                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:068Ah
 11650                                  
 11651                                  READBAT:
 11652                                  	;ASSUME	DS:ResGroup,ES:TranGroup
 11653                                  		
 11654                                  	;mov	byte [Suppress],1
 11655                                  				; initialize line suppress status
 11656 00000682 C606[9E02]01            	mov	byte [Suppress],YES_ECHO
 11657 00000687 F606[9302]FF            	test	byte [Batch_Abort],-1 ; 0FFh
 11658 0000068C 751F                    	jnz	short TRYING_TO_ABORT
 11659 0000068E C606[9202]01            	mov	byte [In_Batch],1 ; set flag to indicate batch job
 11660                                  
 11661                                  	; MSDOS 6.0
 11662                                  
 11663                                  ;M037; Start of changes
 11664                                  ; We check here if we have set the flag indicating that the batchfile is at
 11665                                  ;EOF. In this case, we do not want to continue with the normal processing.
 11666                                  ;We call GetBatByt once more so that the batch segment gets freed up, the
 11667                                  ;batch file gets closed etc. and then return as if everything is done.
 11668                                  
 11669                                  	; 05/02/2023
 11670 00000693 1E                      	push	ds
 11671 00000694 8E1E[4902]              	mov	ds,[Batch]
 11672                                  	;cmp	byte [2],0
 11673 00000698 803E020000              	cmp	byte [BATCHSEGMENT.BatchEOF],0
 11674                                  				; are we at EOF in batchfile
 11675 0000069D 1F                      	pop	ds
 11676 0000069E 740A                    	jz	short CONTBAT	; no, continue normal processing
 11677                                  	;invoke	GetBatByt	; frees up batchseg
 11678 000006A0 E8DC03                  	call	GETBATBYT
 11679 000006A3 26A2[329A]              	mov	[es:COMBUF+2],al
 11680                                  				; stuff CR into command buffer
 11681                                  				; as a dummy command
 11682                                  	;;invoke CrLf2		; print a CR-LF
 11683                                  	;call	CRLF2
 11684                                  	;;return		; done batch processing
 11685                                  	;retn
 11686                                  	; 24/04/2023
 11687 000006A7 E99622                  	jmp	CRLF2
 11688                                  
 11689                                  ;M037; End of changes
 11690                                  		
 11691                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11692                                  CONTBAT:
 11693 000006AA E842FF                  	call	PROMPTBAT
 11694                                  
 11695                                  TRYING_TO_ABORT:
 11696 000006AD BF[329A]                	mov	di,COMBUF+2
 11697                                  
 11698                                  ; Save position and try to scan for first non delimiter.
 11699                                  
 11700                                  TESTNOP:
 11701 000006B0 8CD8                    	mov	ax,ds
 11702 000006B2 8E1E[4902]              	mov	ds,[Batch]
 11703 000006B6 FF360800                	push	word [BATCHSEGMENT.BatSeek]
 11704 000006BA FF360A00                	push	word [BATCHSEGMENT.BatSeek+2]
 11705                                  				; save current location.
 11706 000006BE 8ED8                    	mov	ds,ax
 11707 000006C0 E85506                  	call	SKIPDELIM	; skip to first non-delim
 11708                                  
 11709                                  ; If the first non-delimiter is not a : (label), we reseek back to the
 11710                                  ; beginning and read the line.
 11711                                  
 11712 000006C3 3C3A                    	cmp	al,':'		; is it a label?
 11713 000006C5 59                      	pop	cx
 11714 000006C6 5A                      	pop	dx		; restore position in bat file
 11715 000006C7 7432                    	jz	short NOPLINE	; yes, resync everything.
 11716 000006C9 F706[4902]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 11717 000006CF 7439                    	jz	short RDBAT	; no, go read batch file
 11718                                  
 11719                                  	;cmp	al,'@'
 11720 000006D1 3C40                    	cmp	al,No_Echo_Char	; see if user wants to suppress line
 11721 000006D3 7507                    	jne	short SET_BAT_POS ; no - go and set batch file position
 11722                                  	;mov	byte [Suppress],0
 11723 000006D5 C606[9E02]00            	mov	byte [Suppress],NO_ECHO ; yes set flag to indicate
 11724 000006DA EB2E                    	jmp	short RDBAT	; go read batch file
 11725                                  	;nop
 11726                                  SET_BAT_POS:
 11727 000006DC 1E                      	push	ds
 11728 000006DD 8E1E[4902]              	mov	ds,[Batch]
 11729                                  	;mov	[8],dx
 11730 000006E1 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; reseek back to beginning
 11731                                  	;mov	[10],cx
 11732 000006E5 890E0A00                	mov	[BATCHSEGMENT.BatSeek+2],cx
 11733 000006E9 1F                      	pop	ds
 11734                                  	;;mov	ax,(LSEEK SHL 8) + 0
 11735                                  	; 05/02/2023
 11736 000006EA B80042                  	mov	ax,4200h
 11737                                  	;mov	ax,(LSEEK*256) ; 4200h ; seek back
 11738                                  
 11739                                  ; 25/07/2024
 11740                                  ; PCDOS 7.1 COMMAND.COM
 11741                                  %if 0
 11742                                  	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 11743                                  			; AL = method: offset from beginning of	file
 11744                                  %else
 11745 000006ED E8CAFE                  	call	int_21h_indirect
 11746                                  %endif
 11747                                  	;mov	word [cs:BATBUFPOS],0FFFFh
 11748                                  	; 24/04/2023
 11749                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:05E3h
 11750 000006F0 26C706[A5A5]FFFF        	mov	word [es:BATBUFPOS],-1; 0FFFFh
 11751                                  	;mov	word [cs:BATBUFPOS],-1 ; nuke batch buffer position
 11752 000006F7 31C9                    	xor	cx,cx		; Initialize line length to zero
 11753 000006F9 EB0F                    	jmp	short RDBAT
 11754                                  
 11755                                  	;nop
 11756                                  
 11757                                  ; The first non-delimiter is a :. This line is not echoed and is ignored.
 11758                                  ; We eat characters until a CR is seen.
 11759                                  
 11760                                  NOPLINE:
 11761 000006FB E80501                  	call	SKIPTOEOL
 11762 000006FE E87E03                  	call	GETBATBYT	; eat trailing LF
 11763                                  	;test	word [Batch],0FFFFh
 11764 00000701 F706[4902]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 11765 00000707 75A7                    	jnz	short TESTNOP	; no, go get another line
 11766                                  READBAT_RETN:			; Hit EOF
 11767 00000709 C3                      	retn
 11768                                  
 11769                                  ; ---------------------------------------------------------------------------
 11770                                  
 11771                                  ; Read a line into the buffer pointed to by ES:DI. If any %s are seen in the
 11772                                  ; input, we are to consider two special cases:
 11773                                  ;
 11774                                  ;   %0 to %9	These represent replaceable parameters from the batch segment
 11775                                  ;   %sym%	This is a symbol from the environment
 11776                                  
 11777                                  RDBAT:
 11778 0000070A E87203                  	call	GETBATBYT
 11779 0000070D 41                      	inc	cx		; Inc the line length
 11780                                  
 11781                                  	; 05/02/2023
 11782                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0601h
 11783 0000070E E81720                  	call	testkanj
 11784 00000711 740C                    	jz	short RDBAT1
 11785                                  	;cmp	cx,127
 11786 00000713 83F97F                  	cmp	cx,COMBUFLEN-1
 11787 00000716 7350                    	jnb	short TOOLONG
 11788 00000718 AA                      	stosb
 11789 00000719 E86303                  	call    GETBATBYT
 11790 0000071C 41                      	inc	cx
 11791 0000071D EB0A                    	jmp	short SAVBATBYT
 11792                                  RDBAT1:
 11793 0000071F 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 11794 00000723 7343                    	jnb	short TOOLONG	   ; Yes - handle it, handle it
 11795                                  
 11796                                  ; See if we have a parameter character.
 11797                                  
 11798 00000725 3C25                    	cmp	al,'%'		; Check for parameter
 11799 00000727 7449                    	je	short NEEDPARM
 11800                                  
 11801                                  ; no parameter character. Store it as usual and see if we are done.
 11802                                  
 11803                                  SAVBATBYT:
 11804 00000729 AA                      	stosb			; End of line found?
 11805 0000072A 3C0D                    	cmp	al,0Dh
 11806 0000072C 75DC                    	jne	short RDBAT	; no, go for more
 11807                                  
 11808                                  ; We have read in an entire line. 
 11809                                  ; Decide whether we should echo the command line or not.
 11810                                  
 11811                                  FOUND_EOL:
 11812 0000072E 81EF[339A]              	sub	di,COMBUF+3
 11813 00000732 89F8                    	mov	ax,di		; remember that we've not counted the CR
 11814 00000734 26A2[319A]              	mov	[es:COMBUF+1],al
 11815                                  				; Set length of line
 11816 00000738 E84403                  	call	GETBATBYT	; Eat linefeed
 11817 0000073B E8F206                  	call	BATCLOSE
 11818 0000073E 803E[9E02]00            	cmp	byte [Suppress],NO_ECHO ; 0
 11819 00000743 7407                    	jz	short RESET
 11820 00000745 F606[9D02]01            	test	byte [EchoFlag],1  ; To echo or not to echo, that is the
 11821 0000074A 7504                    	jnz	short TRY_NEXTFLAG ; question. (Profound, huh?)
 11822                                  RESET:
 11823 0000074C 0E                      	push	cs
 11824 0000074D 1F                      	pop	ds		; Go back to local segment
 11825 0000074E 74B9                    	jz	short READBAT_RETN ; no echoing here...
 11826                                  TRY_NEXTFLAG:
 11827 00000750 803E[B402]01            	cmp	byte [NullFlag],nullcommand ; 1
 11828                                  				;G was there a command last time?
 11829 00000755 7403                    	jz	short NO_CRLF_PRINT
 11830                                  				;G no - don't print crlf
 11831 00000757 E8E621                  	call	CRLF2		;G Print out prompt
 11832                                  NO_CRLF_PRINT:
 11833 0000075A E89119                  	call	PRINT_PROMPT
 11834 0000075D 0E                      	push	cs		;G change data segment
 11835 0000075E 1F                      	pop	ds
 11836 0000075F BA[329A]                	mov	dx,COMBUF+2	; get command line for echoing
 11837 00000762 E83422                  	call	CRPRINT
 11838                                  	;call	CRLF2
 11839                                  	;retn
 11840                                  	; 06/02/2023
 11841 00000765 E9D821                  	jmp	CRLF2
 11842                                  
 11843                                  ; The line was too long. Eat remainder of input text up until the CR
 11844                                  
 11845                                  TOOLONG:
 11846 00000768 3C0D                    	cmp	al,0Dh		; Has the end of the line been reached?
 11847 0000076A 7403                    	jz	short LTLCONT	; Yes, continue
 11848 0000076C E89400                  	call	SKIPTOEOL	; Eat remainder of line	
 11849                                  LTLCONT:
 11850 0000076F AA                      	stosb			; Terminate the command
 11851 00000770 EBBC                    	jmp	short FOUND_EOL	; Go process the valid part of the line
 11852                                  
 11853                                  ; We have found a parameter lead-in character. Check for the 0-9 case first
 11854                                  
 11855                                  NEEDPARM:
 11856 00000772 E80A03                  	call	GETBATBYT	; get next character
 11857 00000775 3C25                    	cmp	al,'%'		; Check for two consecutive %
 11858 00000777 74B0                    	je	short SAVBATBYT	; if so, replace with a single %
 11859 00000779 3C0D                    	cmp	al,0Dh		; Check for end-of-line
 11860 0000077B 74AC                    	je	short SAVBATBYT	; yes, treat it normally
 11861                                  
 11862                                  ; We have found %<something>. If the <something> is in the range 0-9, we
 11863                                  ; retrieve the appropriate parameter from the batch segment. Otherwise we
 11864                                  ; see if the <something> has a terminating % and then look up the contents
 11865                                  ; in the environment.
 11866                                  
 11867                                  PAROK:
 11868 0000077D 2C30                    	sub	al,'0'
 11869 0000077F 7239                    	jb	short NEEDENV	; look for parameter in the environment
 11870 00000781 3C09                    	cmp	al,9
 11871 00000783 7735                    	ja	short NEEDENV
 11872                                  
 11873                                  ; We have found %<number>. This is taken from the parameters in the
 11874                                  ; allocated batch area.
 11875                                  
 11876 00000785 98                      	cbw
 11877 00000786 89C3                    	mov	bx,ax		; move index into AX
 11878 00000788 D1E3                    	shl	bx,1		; convert word index into byte ptr
 11879 0000078A 06                      	push	es
 11880 0000078B 8E06[4902]              	mov	es,[Batch]
 11881                                  
 11882                                  ; The structure of the batch area is:
 11883                                  ;
 11884                                  ;   BYTE    type of segment
 11885                                  ;   DWORD   offset for next line
 11886                                  ;   10 WORD pointers to parameters. -1 is empty parameter
 11887                                  ;   ASCIZ   file name (with . and ..)
 11888                                  ;   BYTES   CR-terminated parameters
 11889                                  ;   BYTE    0 flag to indicate end of parameters
 11890                                  ;
 11891                                  ; Get pointer to BX'th argument
 11892                                  
 11893                                  	;;mov	si,[es:bx+0Bh]
 11894                                  	; 05/02/2023
 11895                                  	;mov	si,[es:bx+0Ch] 	; MSDOS 5.0 COMMAND.COM
 11896 0000078F 268B770C                	mov	si,[es:bx+BATCHSEGMENT.BatParm]
 11897 00000793 07                      	pop	es
 11898                                  
 11899                                  ; Is there a parameter here?
 11900                                  
 11901 00000794 83FEFF                  	cmp	si,-1		; Check if parameter exists
 11902 00000797 7503                    	jnz	short YES_THERE_IS ; Yes go get it
 11903 00000799 E96EFF                  	jmp	RDBAT		; Ignore if it doesn't
 11904                                  
 11905                                  ; Copy in the found parameter from batch segment
 11906                                  
 11907                                  YES_THERE_IS:
 11908 0000079C 1E                      	push	ds
 11909 0000079D 8E1E[4902]              	mov	ds,[Batch]
 11910 000007A1 49                      	dec	cx		; Don't count '%' in line length
 11911                                  COPYPARM:
 11912 000007A2 AC                      	lodsb			; From resident segment
 11913 000007A3 3C0D                    	cmp	al,0Dh		; Check for end of parameter
 11914 000007A5 740F                    	je	short ENDPARAM
 11915 000007A7 41                      	inc	cx		; Inc the line length
 11916 000007A8 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 11917 000007AC 7303                    	jnb	short LINETOOL	; Yes - handle it, handle it
 11918 000007AE AA                      	stosb
 11919 000007AF EBF1                    	jmp	short COPYPARM
 11920                                  
 11921                                  ; We have copied up to the limit. Stop copying and eat remainder of batch
 11922                                  ; line. We need to make sure that the tooLong code isn't fooled into
 11923                                  ; believing that we are at EOL. Clobber AL too.
 11924                                  
 11925                                  LINETOOL:
 11926 000007B1 30C0                    	xor	al,al
 11927 000007B3 1F                      	pop	ds
 11928 000007B4 EBB2                    	jmp	short TOOLONG
 11929                                  
 11930                                  ; We have copied in an entire parameter. Go back for more
 11931                                  
 11932                                  ENDPARAM:
 11933 000007B6 1F                      	pop	ds
 11934 000007B7 E950FF                  	jmp	RDBAT
 11935                                  
 11936                                  ; We have found % followed by something other than 0-9. We presume that there
 11937                                  ; will be a following % character. In between is an environment variable that
 11938                                  ; we will fetch and replace in the batch line with its value.
 11939                                  
 11940                                  NEEDENV:
 11941                                  	; MSDOS 6.0 COMMAND.COM
 11942                                  	; 05/02/2023 
 11943 000007BA 49                      	dec     cx 		;AN070; Don't count "%"
 11944                                  
 11945                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11946 000007BB 1E                      	push	ds
 11947 000007BC 57                      	push	di
 11948                                  				; temp spot for name
 11949 000007BD BF[9A9C]                	mov	di,ID
 11950 000007C0 0430                    	add	al,'0'		; reconvert character
 11951 000007C2 AA                      	stosb			; store it in appropriate place
 11952                                  
 11953                                  ; loop getting characters until the next % is found or until EOL
 11954                                  
 11955                                  GETENV1:
 11956 000007C3 E8B902                  	call	GETBATBYT	; get the byte
 11957 000007C6 AA                      	stosb			; store it
 11958 000007C7 3C0D                    	cmp	al,0Dh		; EOL?
 11959 000007C9 7514                    	jne	short GETENV15	; no, see if it the term char
 11960                                  
 11961                                  ; The user entered a string with a % but no trailing %. We copy the string.
 11962                                  
 11963 000007CB 26C645FF00              	mov	byte [es:di-1],0 ; nul terminate the string
 11964 000007D0 BE[9A9C]                	mov	si,ID 		; point to buffer
 11965 000007D3 5F                      	pop	di		; point to line buffer
 11966 000007D4 0E                      	push	cs
 11967 000007D5 1F                      	pop	ds
 11968 000007D6 E89302                  	call	STRCPY
 11969                                  	; 05/02/2023
 11970 000007D9 72D6                    	jc	short LINETOOL	;  MSDOS 6.0 COMMAND.COM
 11971                                  	; 24/04/2023
 11972                                  	;dec	di  		;  MSDOS 3.3 COMMAND.COM	
 11973 000007DB 1F                      	pop	ds
 11974 000007DC E94AFF                  	jmp	SAVBATBYT
 11975                                  GETENV15:
 11976 000007DF 3C25                    	cmp	al,'%'		; terminating %?
 11977 000007E1 75E0                    	jne	short GETENV1	; no, go suck out more characters
 11978                                  
 11979                                  ; M017 - following DEC is wrong, because we replace the % with a = here.
 11980                                  ; This was the source of bug #1.
 11981                                  ;	dec	cx		;AN070; Don't count "%"
 11982                                  
 11983 000007E3 B03D                    	mov	al,'='		; terminate  with =
 11984 000007E5 268845FF                	mov	[es:di-1],al
 11985                                  
 11986                                  ; ID now either has a =-terminated string which we are to find in the
 11987                                  ; environment or a non =-terminated string which will not be found in the
 11988                                  ; environment.
 11989                                  
 11990                                  GETENV2:
 11991 000007E9 BE[9A9C]                	mov	si,ID
 11992 000007EC 0E                      	push	cs
 11993 000007ED 1F                      	pop	ds		; DS:SI points to name
 11994 000007EE 51                      	push	cx
 11995 000007EF E88C1E                  	call	find_name_in_environment
 11996 000007F2 59                      	pop	cx
 11997 000007F3 06                      	push	es
 11998 000007F4 1F                      	pop	ds
 11999 000007F5 0E                      	push	cs
 12000 000007F6 07                      	pop	es
 12001 000007F7 89FE                    	mov	si,di
 12002 000007F9 5F                      	pop	di		; get back pointer to command line
 12003                                  
 12004                                  ; If the parameter was not found, there is no need to perform any replacement.
 12005                                  ; We merely pretend that we've copied the parameter.
 12006                                  
 12007 000007FA 7203                    	jc	short GETENV6
 12008                                  
 12009                                  ; ES:DI points to command line being built
 12010                                  ; DS:SI points either to nul-terminated environment object AFTER =
 12011                                  
 12012 000007FC E86D02                  	call	STRCPY		; (let RdBat handle overflow)
 12013                                  	; 24/04/2022
 12014                                  	;dec	di 		; MSDOS 3.3 COMMAND.COM
 12015                                  GETENV6:
 12016 000007FF 1F                      	pop	ds
 12017 00000800 E907FF                  	jmp	RDBAT		; go back to batch file
 12018                                  
 12019                                  ; =============== S U B	R O U T	I N E =======================================
 12020                                  
 12021                                  ;   SkipToEOL - read from batch file until end of line
 12022                                  
 12023                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12024                                  SKIPTOEOL:
 12025 00000803 F706[4902]FFFF          	test	word [Batch],-1 ; 0FFFFh
 12026                                  	;jnz	short SKIPTOEOL1  	
 12027                                  	;retn			; no batch file in effect
 12028                                  	
 12029 00000809 7407                    	jz	short SKIPTOEOL2 ; Retro DOS v3.0 COMMAND.COM
 12030                                  SKIPTOEOL1:
 12031 0000080B E87102                  	call	GETBATBYT
 12032 0000080E 3C0D                    	cmp	al,0Dh		; eol character?
 12033 00000810 75F1                    	jnz	short SKIPTOEOL	; no, go eat another
 12034                                  SKIPTOEOL2:
 12035 00000812 C3                      	retn
 12036                                  
 12037                                  ; =============== S U B	R O U T	I N E =======================================
 12038                                  
 12039                                  ;Break	<Allocate and deallocate the transient portion>
 12040                                  
 12041                                  ; Free Transient. Modify ES,AX,flags
 12042                                  
 12043                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12044                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0708h
 12045                                  
 12046                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 12047                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:081Eh
 12048                                  FREE_TPA:
 12049 00000813 06                      	push	es
 12050 00000814 8E06[D19B]              	mov	es,[RESSEG]
 12051 00000818 268E06[5804]            	mov	es,[es:Res_Tpa]
 12052 0000081D B449                    	mov	ah,49h
 12053                                  	;mov	ah,DEALLOC ; 49h
 12054                                  
 12055                                  ; 25/07/2024
 12056                                  ; PCDOS 7.1 COMMAND.COM
 12057                                  %if 0
 12058                                  	int	21h	; DOS -	2+ - FREE MEMORY
 12059                                  			; ES = segment address of area to be freed
 12060                                  %else
 12061 0000081F E898FD                  	call	int_21h_indirect
 12062                                  %endif
 12063                                  
 12064 00000822 07                      	pop	es
 12065 00000823 C3                      	retn
 12066                                  
 12067                                  ; =============== S U B	R O U T	I N E =======================================
 12068                                  
 12069                                  ; Allocate transient. Modify AX,BX,DX,flags
 12070                                  
 12071                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 12072                                  	; 06/02/2023
 12073                                  ALLOC_TPA:
 12074 00000824 06                      	push	es
 12075 00000825 8E06[D19B]              	mov	es,[RESSEG]
 12076 00000829 BBFFFF                  	mov	bx,0FFFFh 	; Re-allocate the transient	
 12077 0000082C B448                    	mov	ah,48h
 12078                                  	;mov	ah,ALLOC ; 48h
 12079                                  
 12080                                  ; 25/07/2024
 12081                                  ; PCDOS 7.1 COMMAND.COM
 12082                                  %if 0
 12083                                  	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 12084                                  			; BX = number of 16-byte paragraphs desired
 12085                                  %else
 12086 0000082E E889FD                  	call	int_21h_indirect
 12087                                  %endif
 12088                                  
 12089 00000831 53                      	push	bx	  	; Save size of block
 12090 00000832 B448                    	mov	ah,48h
 12091                                  	;mov	ah,ALLOC ; 48h
 12092                                  
 12093                                  ; 25/07/2024
 12094                                  ; PCDOS 7.1 COMMAND.COM
 12095                                  %if 0
 12096                                  	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 12097                                  			; BX = number of 16-byte paragraphs desired
 12098                                  %else
 12099 00000834 E883FD                  	call	int_21h_indirect
 12100                                  %endif
 12101                                  
 12102                                  ; Attempt to align TPA on 64K boundary
 12103                                  
 12104 00000837 5B                      	pop	bx		; Restore size of block
 12105 00000838 26A3[5804]              	mov	[es:Res_Tpa],ax
 12106                                  				; Save segment to beginning of block
 12107 0000083C A3[E19B]                	mov	[TRAN_TPA],ax
 12108                                  
 12109                                  ; Is the segment already aligned on a 64K boundary
 12110                                  
 12111 0000083F 89C2                    	mov	dx,ax		; Save segment
 12112 00000841 25FF0F                  	and	ax,0FFFh	; Test if above boundary
 12113 00000844 7507                    	jnz	short CALC_TPA
 12114 00000846 89D0                    	mov	ax,dx
 12115 00000848 2500F0                  	and	ax,0F000h	; Test if multiple of 64K
 12116 0000084B 7523                    	jnz	short NOROUND
 12117                                  CALC_TPA:
 12118 0000084D 89D0                    	mov	ax,dx
 12119 0000084F 2500F0                  	and	ax,0F000h
 12120 00000852 050010                  	add	ax,1000h	; Round up to next 64K boundary
 12121 00000855 7219                    	jc	short NOROUND	; Memory wrap if carry set
 12122                                  
 12123                                  ; Make sure that new boundary is within allocated range
 12124                                  
 12125 00000857 268B16[5804]            	mov	dx,[es:Res_Tpa]
 12126 0000085C 01DA                    	add	dx,bx		; Compute maximum address
 12127 0000085E 39C2                    	cmp	dx,ax		; Is 64K address out of range?
 12128 00000860 720E                    	jb	short NOROUND
 12129                                  
 12130                                  ; Make sure that we won't overwrite the transient
 12131                                  
 12132 00000862 8CCB                    	mov	bx,cs		; CS is beginning of transient
 12133 00000864 39C3                    	cmp	bx,ax
 12134 00000866 7208                    	jb	short NOROUND
 12135                                  
 12136                                  ; The area from the 64K boundary to the beginning of the transient must
 12137                                  ; be at least 64K.
 12138                                  
 12139 00000868 29C3                    	sub	bx,ax
 12140                                  	;cmp	bx,4096
 12141 0000086A 81FB0010                	cmp	bx,1000h	; Size greater than 64K?	
 12142 0000086E 7304                    	jnb	short ROUNDDONE
 12143                                  NOROUND:
 12144 00000870 26A1[5804]              	mov	ax,[es:Res_Tpa]
 12145                                  ROUNDDONE:
 12146 00000874 26A3[4C04]              	mov	[es:LTpa],ax	; Re-compute everything
 12147 00000878 A3[D39B]                	mov	[TPA],ax
 12148 0000087B 89C3                    	mov	bx,ax
 12149 0000087D 8CC8                    	mov	ax,cs
 12150 0000087F 29D8                    	sub	ax,bx
 12151 00000881 53                      	push	bx
 12152 00000882 BB1000                  	mov	bx,16
 12153 00000885 F7E3                    	mul	bx
 12154 00000887 5B                      	pop	bx
 12155 00000888 09D2                    	or	dx,dx
 12156 0000088A 7403                    	jz	short SAVSIZ2
 12157 0000088C B8FFFF                  	mov	ax,-1
 12158                                  SAVSIZ2:
 12159                                  
 12160                                  ; AX is the number of bytes free in the buffer between the resident and the
 12161                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 12162                                  
 12163 0000088F 3D0002                  	cmp	ax,512
 12164 00000892 7603                    	jbe	short GOTSIZE2
 12165                                  	;and	ax,~1FFh
 12166 00000894 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FFh
 12167                                  GOTSIZE2:
 12168 00000897 A3[F29B]                	mov	[BYTCNT],ax
 12169 0000089A 07                      	pop	es
 12170 0000089B C3                      	retn
 12171                                  
 12172                                  ; =============== S U B	R O U T	I N E =======================================
 12173                                  
 12174                                  ;Break	<BatCom - enter a batch file>
 12175                                  
 12176                                  ; The exec search has determined that the user has requested a batch file for
 12177                                  ; execution. We parse the arguments, create the batch segment, and signal
 12178                                  ; batch processing.
 12179                                  
 12180                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12181                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:078Eh
 12182                                  
 12183                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12184                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0868h
 12185                                  
 12186                                  	; 18/07/2024 - Retro DOS 5.0 COMMAND.COM
 12187                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:08A7h
 12188                                  
 12189                                  BATCOM:	
 12190                                  
 12191                                  ;ASSUME	DS:TRANGROUP, ES:NOTHING
 12192                                  
 12193                                  ; Batch parameters are read with ES set to segment of resident part
 12194                                  
 12195                                  	; MSDOS 6.0
 12196 0000089C 8E06[D19B]              	mov	es,[RESSEG]
 12197                                  	;ASSUME	ES:RESGROUP
 12198                                  	;cmp	byte [es:Call_Batch_Flag],1
 12199 000008A0 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 12200                                  					;AN043; If in CALL,
 12201 000008A6 7403                    	jz	short skip_ioset	;AN043; redirection was already set up
 12202                                  	;invoke	IOSET			; Set up any redirection
 12203 000008A8 E8CC26                  	call	IOSET
 12204                                  skip_ioset:				;AN043;
 12205 000008AB E865FF                  	call	FREE_TPA		; G
 12206                                  	;cmp	byte [es:Call_Batch_Flag],1
 12207 000008AE 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 12208 000008B4 7403                    	jz	short GETECHO 		; G if we're in a call, don't execute
 12209                                  
 12210                                  	; 12/02/2023
 12211                                  	; MSDOS 3.3
 12212                                  	;call	IOSET
 12213                                  	;mov	es,[RESSEG]
 12214                                  	;call	FREE_TPA
 12215                                  	;;cmp	byte [es:CALL_BATCH_FLAG],1
 12216                                  	;cmp	byte [es:CALL_BATCH_FLAG],call_in_progress
 12217                                  	;jz	short GETECHO		; G if we're in a call, don't execute
 12218                                  
 12219                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12220                                  
 12221                                  ; Since BATCH has lower precedence than PIPE or FOR. If a new BATCH file is
 12222                                  ; being started it MUST be true that no FOR or PIPE is currently in progress.
 12223                                  ; Don't execute if in call
 12224                                  
 12225 000008B6 E8A008                  	call	FOROFF
 12226                                  GETECHO:
 12227 000008B9 E8A62A                  	call	PipeOff
 12228 000008BC 26A0[9D02]              	mov	al,[es:EchoFlag]	; preserve echo state for chaining
 12229 000008C0 2401                    	and	al,1			; Save current echo state
 12230                                  
 12231 000008C2 50                      	push	ax
 12232 000008C3 31C0                    	xor	ax,ax
 12233 000008C5 26F706[4902]FFFF        	test	word [es:Batch],-1 	; Are we in a batch file?
 12234 000008CC 7414                    	jz	short LEAVEBAT	   	; No, nothing to save
 12235 000008CE 26A1[4902]              	mov	ax,[es:Batch] 		; Get current batch segment
 12236                                  	;cmp	byte [es:Call_Batch_Flag],1
 12237 000008D2 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 12238 000008D8 7408                    	jz	short LEAVEBAT
 12239                                  
 12240                                  ;  We are in a chained batch file, save batlast from previous batch segment
 12241                                  ;  so that if we're in a CALL, we will return to the correct batch file.
 12242                                  
 12243 000008DA 06                      	push	es
 12244 000008DB 8EC0                    	mov	es,ax		; Get current batch segment
 12245                                  	;mov	ax,[es:02h] ; MSDOS 3.3 COMMAND.COM
 12246                                  				; Get previous batch segment
 12247                                  	; 12/02/2023
 12248                                  	;mov	ax,[es:03h] ; MSDOS 6.0 (&5.0) COMMAND.COM	
 12249 000008DD 26A10300                	mov	ax,[es:BATCHSEGMENT.BatLast]
 12250 000008E1 07                      	pop	es
 12251                                  LEAVEBAT:
 12252 000008E2 50                      	push	ax		; Keep segment until new one created
 12253                                  	;cmp	byte [es:Call_Batch_Flag],1
 12254 000008E3 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 12255 000008E9 7403                    	jz	short STARTBAT
 12256 000008EB E82401                  	call	BATCHOFF
 12257                                  
 12258                                  ; Find length of batch file
 12259                                  
 12260                                  STARTBAT:
 12261 000008EE 26C606[B102]00          	mov	byte [es:Call_Batch_Flag],0 ; Reset call flag
 12262 000008F4 BE[F99A]                	mov	si,EXECPATH
 12263                                  
 12264                                  	; 12/02/2023
 12265                                  	; MSDOS 6.0
 12266 000008F7 B811B7                  	mov	ax,0B711h
 12267                                  	;mov	ax,AppendTruename
 12268                                  				;AN042; Get the real path where the batch file
 12269 000008FA CD2F                    	int	2Fh		;AN042;    was found with APPEND
 12270 000008FC B44E                    	mov	ah,4Eh
 12271                                  	;mov	ah,Find_First	;AN042; The find_first will return it
 12272 000008FE 89F2                    	mov	dx,si		;AN042; Get the string
 12273 00000900 B91300                  	mov	cx,13h
 12274                                  	;mov	cx,search_attr	;AN042; filetypes to search for
 12275                                  	
 12276                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12277                                  %if 0
 12278                                  	int	21h		;AN042;
 12279                                  %else
 12280 00000903 E8B4FC                  	call	int_21h_indirect
 12281                                  %endif
 12282                                  
 12283                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12284 00000906 E85D27                  	call	dstrlen
 12285                                  ;
 12286                                  ; Allocate batch area:
 12287                                  ;   BYTE    type of segment
 12288                                  ;   WORD    segment of last batch file
 12289                                  ;   WORD    segment for FOR command
 12290                                  ;   BYTE    FOR flag state on entry to batch file
 12291                                  ;   DWORD   offset for next line
 12292                                  ;   10 WORD pointers to parameters.  -1 is empty parameter
 12293                                  ;   ASCIZ   file name (with . and ..)
 12294                                  ;   BYTES   CR-terminated parameters
 12295                                  ;   BYTE    0 flag to indicate end of parameters
 12296                                  ;
 12297                                  ; We allocate the maximum size for the command line and use setblock to shrink
 12298                                  ; later when we've squeezed out the extra
 12299                                  ;
 12300 00000909 89CB                    	mov	bx,cx		; length of file name.
 12301                                  	;add	bx,190	; MSDOS 3.3 (BATCHSEGMENT struc size = 32)
 12302                                  	; 12/02/2023
 12303                                  	;add	bx,191	; MSDOS 6.0 (BATCHSEGMENT struc size = 33)
 12304                                  			; PCDOS 7.1 ; 26/07/2024
 12305                                   	; 25/04/2023
 12306 0000090B 81C3BF00                	add	bx,15+BATCHSEGMENT.SIZE+COMBUFLEN+15
 12307                                  					; structure + max len + round up
 12308 0000090F 51                      	push	cx
 12309 00000910 B104                    	mov	cl,4
 12310 00000912 D3EB                    	shr	bx,cl		; convert to paragraphs
 12311 00000914 53                      	push	bx		; Save size of batch segment
 12312 00000915 B448                    	mov	ah,48h
 12313                                  	;mov	ah,ALLOC ; 48h ; Allocate batch segment
 12314                                  
 12315                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12316                                  %if 0
 12317                                  	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 12318                                  				; BX = number of 16-byte paragraphs desired
 12319                                  %else
 12320 00000917 E8A0FC                  	call	int_21h_indirect
 12321                                  %endif
 12322                                  
 12323 0000091A 5B                      	pop	bx		; Get size of batch segment
 12324                                  
 12325                                  ; This should *NEVER* return an error. The transient is MUCH bigger than
 12326                                  ; the batch segment. This may not be true, however, in a multitasking system.
 12327                                  ; G This error will occur with nesting of batch files. We also need to
 12328                                  ; G make sure that we don't overlay the transient.
 12329                                  
 12330 0000091B 7222                    	jc	short MEM_ERROR	;G not enough memory - exit
 12331                                  
 12332 0000091D 50                      	push	ax		;G save batch segment
 12333 0000091E 01D8                    	add	ax,bx		;G get end of batch segment
 12334 00000920 83C020                  	add	ax,20h		;G add some tpa work area
 12335 00000923 8CCB                    	mov	bx,cs		;G get the transient segment
 12336                                  
 12337                                  	; MSDOS 6.0
 12338                                  ; M006; We cant check just for above. If the batchseg goes into a UMB, the
 12339                                  ; M006; batchseg is always above the transient. We need to change this code
 12340                                  ; M006; to only check for an overlap
 12341                                  
 12342                                  	;;mov	dx,offset TRANGROUP:TranSpaceEnd ; M006
 12343                                  	; 12/02/2023
 12344                                  	;;mov	dx,98C5h ; MSDOS 5.0 COMMAND.COM
 12345                                  	; 18/07/2024
 12346                                  	;mov	dx,0AA9Ah ; PCDOS 7.1 COMMAND.COM
 12347                                  	;mov	dx,TRANSPACEEND		
 12348                                  	;add	dx,15		;round up para; M006
 12349 00000925 BAF8A5                  	mov	dx,TRANSPACEEND+15
 12350                                  
 12351 00000928 D3EA                    	shr	dx,cl		;para size of transient; M006
 12352 0000092A 01DA                    	add	dx,bx		;dx = top of transient; M006
 12353                                  
 12354 0000092C 39D8                    	cmp	ax,bx		; M006
 12355 0000092E 7212                    	jb	short ENOUGH_MEM
 12356                                  				; Batchseg below transient
 12357                                  				; enough memory ; M006
 12358 00000930 39D0                    	cmp	ax,dx		; M006
 12359 00000932 770E                    	ja	short ENOUGH_MEM	
 12360                                  				; Batchseg above transient
 12361                                  				; enough memory ; M006
 12362                                  
 12363                                  ; M006; Batchseg overlaps transient -- insufficient memory
 12364                                  
 12365 00000934 58                      	pop	ax		; restore ax; M006
 12366                                  
 12367                                  	; 12/02/2023
 12368                                  	; MSDOS 3.3
 12369                                  ; M006;	cmp	ax,bx		;G do we end before the transient
 12370                                  ; M006;	pop	ax		;G get batch segment back
 12371                                  ; M006;	jb	short ENOUGH_MEM ;G we have enough memory - continue
 12372                                  
 12373                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12374 00000935 06                      	push	es		;G no we're hitting the transient
 12375 00000936 8EC0                    	mov	es,ax
 12376 00000938 B80049                  	mov	ax,4900h
 12377                                  	;mov	ax,DEALLOC*256 ; 4900h ;G deallocate the batch segment
 12378                                  
 12379                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12380                                  %if 0
 12381                                  	int	21h	; DOS -	2+ - FREE MEMORY
 12382                                  			; ES = segment address of area to be freed
 12383                                  %else
 12384 0000093B E87CFC                  	call	int_21h_indirect
 12385                                  %endif
 12386                                  
 12387 0000093E 07                      	pop	es
 12388                                  MEM_ERROR:
 12389 0000093F E9B900                  	jmp	NO_MEMORY	;G Set up for message and exit
 12390                                  
 12391                                  ENOUGH_MEM:
 12392                                  	; 12/02/2023 - Retro DOS v4.0 COMMAND.COM
 12393                                  	; MSDOS 6.0
 12394 00000942 58                      	pop	ax		; restore ax; M006
 12395                                  
 12396                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12397 00000943 26A3[4902]              	mov	[es:Batch],ax
 12398 00000947 E8DAFE                  	call	ALLOC_TPA
 12399                                  
 12400                                  ; Initialize batch segment
 12401                                  
 12402 0000094A 5A                      	pop	dx		; length of name
 12403 0000094B 58                      	pop	ax		;G get saved batch segment back
 12404 0000094C 26FF06[AE02]            	inc	word [es:Nest]	;G increment # batch files in progress
 12405 00000951 06                      	push	es
 12406 00000952 268E06[4902]            	mov	es,[es:Batch]
 12407                                  	;mov	byte [ES:0],0
 12408                                  				; signal batch file type
 12409 00000957 26C606000000            	mov	byte [es:BATCHSEGMENT.BatType],BATCHTYPE ; 0
 12410                                  	;;mov	[es:2],ax	; MSDOS 3.3
 12411                                  				;G save segment of last batch file
 12412                                  	;mov	[es:3],ax	; MSDOS 6.0
 12413 0000095D 26A30300                	mov	[es:BATCHSEGMENT.BatLast],ax
 12414 00000961 1E                      	push	ds
 12415 00000962 8E1E[D19B]              	mov	ds,[RESSEG]	;G set to resident data
 12416                                  
 12417 00000966 31C0                    	xor	ax,ax
 12418 00000968 8A1E[AB02]              	mov	bl,[ForFlag]	;G get the current FOR state
 12419                                  	;;mov	[es:6],bl	; MSDOS 3.3
 12420                                  				;G save it in the batch segment
 12421                                  	;mov	[es:7],bl	; MSDOS 6.0 	
 12422 0000096C 26881E0700              	mov	[es:BATCHSEGMENT.BatForFlag],bl
 12423 00000971 F6C3FF                  	test	bl,-1 ; 0FFh	;G are we in a FOR?
 12424 00000974 7406                    	jz	short FOR_NOT_ON ;G no, for segment set to 0	
 12425                                  	;mov	ax,[ForPtr]	;G yes, get current FOR segment	
 12426                                  	;mov	byte [ForFlag],0 ;G reset forflag
 12427                                  	; 26/07/2024
 12428 00000976 A2[AB02]                	mov	[ForFlag],al ; 0
 12429 00000979 A1[AC02]                	mov	ax,[ForPtr]	;G yes, get current FOR segment	
 12430                                  FOR_NOT_ON:
 12431                                  	;;mov	[es:4],ax	; MSDOS 3.3
 12432                                  				;G save FOR segment in batch segment
 12433                                  	;mov	[es:5],ax	; MSDOS 6.0		
 12434 0000097C 26A30500                	mov	[es:BATCHSEGMENT.BatForPtr],ax	
 12435 00000980 31C0                    	xor	ax,ax
 12436 00000982 A3[AC02]                	mov	[ForPtr],ax	;G make sure for segment is not active
 12437 00000985 8A1E[9D02]              	mov	bl,[EchoFlag]
 12438 00000989 1F                      	pop	ds
 12439                                  	;mov	[es:1],bl 
 12440                                  				 ;G save echo state of parent
 12441 0000098A 26881E0100              	mov	[es:BATCHSEGMENT.BatEchoFlag],bl
 12442                                  ;SR;
 12443                                  ; Initialize the new BatchEOF flag we have added to 0
 12444                                  
 12445                                  	; MSDOS 6.0
 12446                                  	;mov	byte [es:2],0
 12447 0000098F 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 12448                                  
 12449                                  	;mov	[es:08h],ax  ; MSDOS 6.0
 12450 00000995 26A30800                	mov	[es:BATCHSEGMENT.BatSeek],ax ; point to beginning of file
 12451                                  	;mov	[es:0Ah],ax  ; MSDOS 6.0	
 12452 00000999 26A30A00                	mov	[es:BATCHSEGMENT.BatSeek+2],ax
 12453                                  
 12454                                  ; Initialize pointers
 12455                                  
 12456 0000099D 48                      	dec	ax		; put -1 into AX
 12457                                  	;;mov	di,0Bh  ; MSDOS 3.3
 12458                                  				; point to parm area
 12459                                  	;mov	di,0Ch	; MSDOS 6.0
 12460 0000099E BF0C00                  	mov	di,BATCHSEGMENT.BatParm
 12461 000009A1 89FB                    	mov	bx,di
 12462 000009A3 B90A00                  	mov	cx,10
 12463 000009A6 F3AB                    	rep stosw		; Init to no parms
 12464                                  
 12465                                  ; Move in batch file name
 12466                                  
 12467 000009A8 89D1                    	mov	cx,dx
 12468 000009AA F3A4                    	rep	movsb
 12469                                  
 12470                                  ; Now copy the command line into batch segment, parsing the arguments along
 12471                                  ; the way. Segment will look like this:
 12472                                  ;
 12473                                  ;   <arg0>CR<arg1>CR...<arg9>CR<arg10>CR...<ARGn>CR 0
 12474                                  ;
 12475                                  ; or, in the case of fewer arguments:
 12476                                  ;
 12477                                  ;   <arg0>CR<arg1>CR...<arg6>CR CR CR ... CR 0
 12478                                  
 12479 000009AC BE[329A]                	mov	si,COMBUF+2
 12480                                  	;mov	cx,10		; at most 10 arguments
 12481                                  	; 07/06/2023
 12482 000009AF B10A                    	mov	cl,10
 12483                                  EACHPARM:
 12484 000009B1 E8991F                  	call	scanoff		; skip to argument
 12485                                  
 12486                                  ; AL is first non-delimiter. DS:SI points to char = AL
 12487                                  
 12488 000009B4 3C0D                    	cmp	al,0Dh		; end of road?
 12489 000009B6 741D                    	jz	short HAVPARM	; yes, no more arguments
 12490                                  
 12491                                  ; If CX = 0 then we have stored the most parm we can. Skip store
 12492                                  
 12493 000009B8 E306                    	jcxz	MOVPARM		; Only first 10 parms get pointers
 12494                                  
 12495                                  ; Go into allocated piece and stick in new argument pointer.
 12496                                  
 12497 000009BA 26893F                  	mov	[es:bx],di	; store batch pointer
 12498 000009BD 83C302                  	add	bx,2		; advance arg counter
 12499                                  
 12500                                  ; Move the parameter into batch segment
 12501                                  
 12502                                  MOVPARM:
 12503 000009C0 AC                      	lodsb			; get byte
 12504 000009C1 E8911F                  	call	DELIM		; if delimiter
 12505 000009C4 7407                    	jz	short ENDPARM	; then done with parm
 12506 000009C6 AA                      	stosb			; store byte
 12507 000009C7 3C0D                    	cmp	al,0Dh		; if CR then not delimiter
 12508 000009C9 740A                    	jz	short HAVPARM	; but end of parm list, finish
 12509 000009CB EBF3                    	jmp	short MOVPARM
 12510                                  
 12511                                  ; We have copied a parameter up until the first separator.
 12512                                  ; Terminate it with CR.
 12513                                  
 12514                                  ENDPARM:
 12515 000009CD B00D                    	mov	al,0Dh
 12516 000009CF AA                      	stosb
 12517 000009D0 E3DF                    	jcxz	EACHPARM	; if no parameters, don't dec
 12518 000009D2 49                      	dec	cx		; remember that we've seen one.	
 12519 000009D3 EBDC                    	jmp	short EACHPARM
 12520                                  
 12521                                  ; We have parsed the entire line. Terminate the arg list
 12522                                  
 12523                                  HAVPARM:
 12524 000009D5 30C0                    	xor	al,al		; Nul terminate the parms
 12525 000009D7 AA                      	stosb
 12526                                  
 12527                                  ; Now we know EXACTLY how big the BATCH segment is. Round up size (from DI)
 12528                                  ; into paragraphs and setblock to the appropriate size
 12529                                  
 12530 000009D8 8D5D0F                  	lea	bx,[di+15]
 12531 000009DB B104                    	mov	cl,4
 12532 000009DD D3EB                    	shr	bx,cl
 12533 000009DF B44A                    	mov	ah,4Ah
 12534                                  	;mov	ah,SETBLOCK ; 4Ah
 12535                                  
 12536                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12537                                  %if 0
 12538                                  	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 12539                                  			; ES = segment address of block	to change
 12540                                  			; BX = new size	in paragraphs
 12541                                  %else
 12542 000009E1 E8D6FB                  	call	int_21h_indirect
 12543                                  %endif
 12544                                  
 12545 000009E4 07                      	pop	es
 12546 000009E5 06                      	push	es
 12547 000009E6 1F                      	pop	ds		; Simply batch FCB setup
 12548 000009E7 833E[A502]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 12549 000009EC 7506                    	jne	short NOBATSING
 12550 000009EE C706[A502]F0FF          	mov	word [SingleCom],0FFF0h ; Flag single command BATCH job
 12551                                  
 12552                                  NOBATSING:
 12553                                  
 12554                                  ; Enter the batch file with the current echo state
 12555                                  
 12556 000009F4 58                      	pop	ax		; Get original echo state
 12557 000009F5 A2[9D02]                	mov	[EchoFlag],al	; restore it
 12558 000009F8 E909F7                  	jmp	TCOMMAND
 12559                                  
 12560                                  ; The following is executed if there isn't enough memory for batch segment
 12561                                  
 12562                                  NO_MEMORY:
 12563 000009FB 5A                      	pop	dx		; even up our stack 
 12564 000009FC 58                      	pop	ax
 12565 000009FD 58                      	pop	ax
 12566 000009FE E823FE                  	call	ALLOC_TPA	; reallocate memory
 12567                                  
 12568                                  	; 12/02/2023
 12569                                  	; MSDOS 3.3
 12570                                  	;mov	dx,INSFMEMMESPTR
 12571                                  	;jmp	CERROR
 12572                                  
 12573                                  	; MSDOS 6.0
 12574                                  	;mov	byte [msg_disp_class],1
 12575 00000A01 C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class
 12576                                  				;AN000; set up extended error msg class
 12577                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 12578 00000A06 BA[448F]                	mov	dx,extend_buf_ptr
 12579                                  	;			;AC000; get extended message pointer
 12580                                  	;mov	word [extend_buf_ptr],8
 12581 00000A09 C706[448F]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 12582                                  				;AN000; get message number in control block
 12583 00000A0F E9DB22                  	jmp	cerror		;g print error message and go...
 12584                                  
 12585                                  ; =============== S U B	R O U T	I N E =======================================
 12586                                  
 12587                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12588                                  	; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 12589                                  BATCHOFF:
 12590 00000A12 50                      	push	ax
 12591 00000A13 06                      	push	es
 12592 00000A14 1E                      	push	ds
 12593 00000A15 53                      	push	bx
 12594                                  
 12595 00000A16 2E8E06[D19B]            	mov	es,[cs:RESSEG]
 12596                                  	;mov	ds,[cs:RESSEG]
 12597                                  	; 26/07/2024
 12598 00000A1B 06                      	push	es
 12599 00000A1C 1F                      	pop	ds
 12600                                  
 12601 00000A1D A1[4902]                	mov	ax,[Batch]	; Free the batch segment
 12602 00000A20 09C0                    	or	ax,ax
 12603 00000A22 7443                    	jz	short NOTFREE
 12604                                  
 12605 00000A24 06                      	push	es
 12606 00000A25 8EC0                    	mov	es,ax
 12607 00000A27 F606[9D02]01            	test	byte [EchoFlag],1
 12608                                  				;G Is echo on?
 12609 00000A2C 7505                    	jnz	short ECHO_LAST_LINE
 12610                                  				;G Yes - echo last line in file
 12611                                  	;mov	byte [SUPPRESS],0
 12612 00000A2E C606[9E02]00            	mov	byte [Suppress],NO_ECHO
 12613                                  				;G no - don't echo last line in file	
 12614                                  ECHO_LAST_LINE:
 12615                                  	;mov	bl,[es:1]
 12616 00000A33 268A1E0100              	mov	bl,[es:BATCHSEGMENT.BatEchoFlag]
 12617                                  				; G get echo state
 12618 00000A38 881E[9D02]              	mov	[EchoFlag],bl
 12619                                  				; G  and restore it
 12620                                  	;;mov	bx,[es:4]  ; MSDOS 3.3
 12621                                  	;mov	bx,[es:5]  ; MSDOS 6.0
 12622 00000A3C 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr]
 12623                                  				;G Get FOR segment
 12624 00000A41 891E[AC02]              	mov	[ForPtr],bx	;G  and restore it
 12625                                  	;;mov	bl,[es:6]  ; MSDOS 3.3
 12626                                  	;mov	bl,[es:7]  ; MSDOS 6.0	
 12627 00000A45 268A1E0700              	mov	bl,[es:BATCHSEGMENT.BatForFlag]
 12628                                  				;G Get FOR flag
 12629 00000A4A 881E[AB02]              	mov	[ForFlag],bl
 12630                                  				;G  and restore it
 12631                                  	;;mov	bx,[es:2] ; MSDOS 3.3
 12632                                  	;mov	bx,[es:3] ; MSDOS 6.0	
 12633 00000A4E 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 12634                                  				;G  Get old batch segment
 12635 00000A53 B449                    	mov	ah,49h
 12636                                  	;mov	ah,DEALLOC ; 49h
 12637                                  
 12638                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12639                                  %if 0
 12640                                  	int	21h	; DOS -	2+ - FREE MEMORY
 12641                                  			; ES = segment address of area to be freed
 12642                                  %else
 12643 00000A55 E862FB                  	call	int_21h_indirect
 12644                                  %endif
 12645                                  
 12646 00000A58 07                      	pop	es
 12647 00000A59 891E[B202]              	mov	[Next_Batch],bx	;G reset batch segment	
 12648 00000A5D 26FF0E[AE02]            	dec	word [es:Nest]
 12649 00000A62 31C0                    	xor	ax,ax
 12650 00000A64 A3[4902]                	mov	[Batch],ax	; No batch in progress
 12651                                  NOTFREE:
 12652 00000A67 5B                      	pop	bx
 12653 00000A68 1F                      	pop	ds
 12654 00000A69 07                      	pop	es
 12655 00000A6A 58                      	pop	ax
 12656 00000A6B C3                      	retn
 12657                                  
 12658                                  ; =============== S U B	R O U T	I N E =======================================
 12659                                  
 12660                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12661                                  
 12662                                  ; StrCpy - copy string, checking count in CX against COMBUFLEN
 12663                                  ;	Entry : DS:SI ==> source string
 12664                                  ;		ES:DI ==> destination string
 12665                                  ;		CX = current length of destination string
 12666                                  ;	Exit  : string copied, CX updated, Carry set if length limit exceeded
 12667                                  
 12668                                  	; 12/02/2023	
 12669                                  	; MSDOS 3.3
 12670                                  ;STRCPY:
 12671                                  	;push	ax
 12672                                  ;CCYCLE:
 12673                                  	;lodsb
 12674                                  	;stosb
 12675                                  	;or	al,al
 12676                                  	;jnz	short CCYCLE
 12677                                  	;pop	ax
 12678                                  	;retn
 12679                                  
 12680                                  ;Procedure StrCpy,NEAR
 12681                                  
 12682                                  	; 12/02/2023
 12683                                  	; MSDOS 6.0
 12684                                  STRCPY:
 12685 00000A6C 50                      	push	ax
 12686                                  ccycle:
 12687 00000A6D AC                      	lodsb
 12688 00000A6E 41                      	inc	cx
 12689                                  	;cmp	cx,128
 12690 00000A6F 81F98000                	cmp	cx,COMBUFLEN
 12691                                  	;jb	short ccopy
 12692                                  	;stc			; set carry to signal error
 12693                                  	;jmp	short ccend
 12694                                  	; 12/02/2023
 12695 00000A73 F5                      	cmc
 12696 00000A74 7205                    	jc	short ccend
 12697                                  ccopy:
 12698 00000A76 AA                      	stosb
 12699 00000A77 08C0                    	or	al,al
 12700 00000A79 75F2                    	jnz	short ccycle
 12701                                  ccend:
 12702 00000A7B 49                      	dec	cx		; discount extra byte
 12703 00000A7C 4F                      	dec	di		; back up pointer
 12704 00000A7D 58                      	pop	ax
 12705 00000A7E C3                      	retn			; return carry clear
 12706                                  
 12707                                  ;EndProc StrCpy
 12708                                  
 12709                                  ;============================================================================
 12710                                  ; TBATCH2.ASM, MSDOS 6.0, 1991
 12711                                  ;============================================================================
 12712                                  ; 12/10/2018 - Retro DOS v3.0
 12713                                  
 12714                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0892h
 12715                                  
 12716                                  ; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12717                                  
 12718                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 0977h
 12719                                  
 12720                                  ; =============== S U B	R O U T	I N E =======================================
 12721                                  
 12722                                  ;Break	<GetBatByt - retrieve a byte from the batch file>
 12723                                  
 12724                                  ; Get one byte from the batch file and return it in AL. End-of-file returns
 12725                                  ; <CR> and ends batch mode. DS must be set to resident segment.
 12726                                  ; AH, DX destroyed.
 12727                                  
 12728                                  ; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 12729                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 0A95h
 12730                                  
 12731                                  GETBATBYT:
 12732 00000A7F 53                      	push	bx
 12733 00000A80 51                      	push	cx
 12734 00000A81 1E                      	push	ds
 12735 00000A82 F606[9302]FF            	test	byte [Batch_Abort],-1
 12736                                  	;jnz	short BATEOF
 12737                                  	; 14/02/2023
 12738 00000A87 7403                    	jz	short getbatbyt1
 12739 00000A89 E9D200                  	jmp	BATEOF
 12740                                  getbatbyt1:
 12741 00000A8C F706[4902]FFFF          	test	word [Batch],-1
 12742                                  	;jz	short BATEOF
 12743                                  	; 14/02/2023
 12744 00000A92 7503                    	jnz	short getbatbyt2
 12745 00000A94 E9C700                  	jmp	BATEOF
 12746                                  getbatbyt2:
 12747 00000A97 06                      	push	es
 12748 00000A98 8E06[4902]              	mov	es,[Batch]
 12749                                  
 12750                                  	; MSDOS 6.0
 12751                                  ;M020;
 12752                                  ;Check if we have already reached EOF (BatchEOF flag set. Then, we do not
 12753                                  ;try to read from the batchfile again.
 12754                                  
 12755                                  	;cmp	byte [es:2],0
 12756 00000A9C 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 12757                                  				;already reached EOF?	;M020
 12758 00000AA2 7403                    	jz	short not_eof	;no, read batch file	;M020
 12759 00000AA4 E99D00                  	jmp	At_EOF		;yes, no more reads	;M020
 12760                                  not_eof:						;M020
 12761                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12762                                  	;add	word [es:8],1	; MSDOS 6.0
 12763 00000AA7 268306080001            	add	word [es:BATCHSEGMENT.BatSeek],1
 12764                                  	;adc	word [es:10],0	; MSDOS 6.0
 12765 00000AAD 2683160A0000            	adc	word [es:BATCHSEGMENT.BatSeek+2],0
 12766 00000AB3 07                      	pop	es
 12767                                  
 12768                                  ; See if we have bytes buffered...
 12769                                  
 12770 00000AB4 8CC8                    	mov	ax,cs
 12771 00000AB6 8ED8                    	mov	ds,ax
 12772 00000AB8 8B1E[A5A5]              	mov	bx,[BATBUFPOS]
 12773 00000ABC 83FBFF                  	cmp	bx,-1
 12774 00000ABF 7541                    	jnz	short UNBUF
 12775                                  
 12776                                  ; There are no bytes in the buffer. Let's try to fill it up.
 12777                                  
 12778 00000AC1 BA[A7A5]                	mov	dx,BATBUF
 12779 00000AC4 8B0E[5695]              	mov	cx,[BATBUFLEN] ; max to read.
 12780 00000AC8 8B1E[D19E]              	mov	bx,[BATHAND]
 12781                                  	; 14/02/2023
 12782 00000ACC B43F                    	mov	ah,3Fh
 12783                                  	;mov	ah,READ ; 3Fh	; Get one more byte from batch file
 12784                                  
 12785                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12786                                  %if 0
 12787                                  	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 12788                                  			; BX = file handle,CX = number	of bytes to read
 12789                                  			; DS:DX	-> buffer
 12790                                  %else
 12791 00000ACE E8E9FA                  	call	int_21h_indirect
 12792                                  %endif
 12793                                  
 12794                                  	; MSDOS 6.0
 12795 00000AD1 7321                    	jnc	short bat_read_ok	;AN022; if no error - continue
 12796                                  	;invoke	get_ext_error_number	;AN022; get the error
 12797 00000AD3 E87315                  	call	get_ext_error_number
 12798 00000AD6 1E                      	push	ds			;AN022; save local segment
 12799 00000AD7 8E1E[D19B]              	mov	ds,[RESSEG]		;AN022; get resident segment
 12800                                  	;assume ds:resgroup		;AN022;
 12801 00000ADB 89C2                    	mov	dx,ax			;AN022; put error in DX
 12802                                  	;invoke	output_batch_name	;AN022; set up to print the error
 12803 00000ADD E857FB                  	call	output_batch_name
 12804 00000AE0 1F                      	pop	ds			;AN022;
 12805                                  	;assume	ds:trangroup		;AN022;
 12806                                  	;invoke	std_eprintf		;AN022; print out the error
 12807 00000AE1 E8F148                  	call	std_eprintf
 12808                                  	;mov	byte ptr combuf+2,end_of_line_in
 12809 00000AE4 C606[329A]0D            	mov	byte [COMBUF+2],END_OF_LINE_IN ; 0Dh
 12810                                  	;				;AN022; terminate the batch line for parsing
 12811                                  	;mov	byte ptr combuf+3,end_of_line_out 
 12812 00000AE9 C606[339A]00            	mov	byte [COMBUF+3],END_OF_LINE_OUT ; 0
 12813                                  	;				;AN022; terminate the batch line for output
 12814                                  ;M020;
 12815                                  ;Old bug! We jump to BatEof from here without ds=RESGROUP. Probably, this
 12816                                  ;error is never hit (and it shouldn't be)
 12817                                  
 12818 00000AEE 8E1E[D19B]              	mov	ds,[RESSEG]		; ds = RESGROUP ; M020
 12819 00000AF2 EB6A                    	jmp	short BATEOF		;AN022; terminate the batch file
 12820                                  bat_read_ok:				;AN022;
 12821                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12822 00000AF4 89C1                    	mov	cx,ax
 12823                                  	;jcxz	TURN_OFF ; MSDOS 3.3
 12824                                  	; 14/02/2023
 12825 00000AF6 E320                    	jcxz	BATEOFDS ; MSDOS 6.0
 12826 00000AF8 890E[C7A5]              	mov	[BATBUFEND],cx
 12827 00000AFC 31DB                    	xor	bx,bx
 12828 00000AFE 891E[A5A5]              	mov	[BATBUFPOS],bx
 12829                                  
 12830                                  	; Buffered bytes!
 12831                                  UNBUF:
 12832 00000B02 8A87[A7A5]              	mov	al,[BATBUF+bx]		; get next byte
 12833 00000B06 43                      	inc	bx
 12834 00000B07 3B1E[C7A5]              	cmp	bx,[BATBUFEND]		; beyond end of buffer?
 12835 00000B0B 7203                    	jb	short SETBUFPOS
 12836 00000B0D BBFFFF                  	mov	bx,-1
 12837                                  SETBUFPOS:
 12838 00000B10 891E[A5A5]              	mov	[BATBUFPOS],bx
 12839 00000B14 3C1A                    	cmp	al,1Ah			; ^Z for termination?
 12840 00000B16 7575                    	jne	short GETBYTEDONE
 12841                                  
 12842                                  ;We get here only when we hit an EOF
 12843                                  	
 12844                                  	; MSDOS 6.0
 12845                                  BATEOFDS:
 12846                                  ;SR;
 12847                                  ; HACK!!! A massive hack being put in here to get batch processing to work
 12848                                  ;properly on EOF. Previously, a CR was returned and batch processing turned
 12849                                  ;off the moment we hit an EOF. Unfortunately, if the last line had no CR-LF,
 12850                                  ;batch processing is turned off before the last line is processed and so 
 12851                                  ;this line would never be executed. 
 12852                                  ;   	To fix this, a new flag BatchEOF has been introduced. This flag is
 12853                                  ;set to 4 if there is no CR-LF before the EOF -- this is determined by looking
 12854                                  ;at the buffer contents. If there is no LF ( we assume that presence of LF
 12855                                  ;indicated a CR-LF combination), then we set BatchEOF to 4 and return a 
 12856                                  ;fake CR to the caller. This decrements BatchEOF. On the next call to this
 12857                                  ;routine, BatchEOF is decremented to 2 and a fake lF is returned. On the 
 12858                                  ;third call, BatchEOF becomes zero and batch processing is turned off,
 12859                                  ;now that the last line has been processed. If the EOF is the first char read into the buffer 
 12860                                  ;during this call, and there was a CR-LF previously, we are going to fake
 12861                                  ;another redundant CR-LF. There is no work-around I can think of.
 12862                                  ; 	I would love to restructure this entire routine and its caller to
 12863                                  ;make the flow really easy to understand but I guess this will have to wait.
 12864                                  ;
 12865 00000B18 06                      	push	es
 12866 00000B19 8E06[D19B]              	mov	es,[RESSEG]
 12867                                  ;SR;
 12868                                  ; If we had already set the BatchEOF flag on a previous call (BatchEOF == 2
 12869                                  ;or BatchEOF == 1 now), then do not do the LF check.
 12870                                  ;
 12871 00000B1D 268E06[4902]            	mov	es,[es:Batch]
 12872                                  	;cmp	byte [es:2],0
 12873 00000B22 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 12874 00000B28 7516                    	jnz	short crpresent
 12875                                  
 12876                                  	;inc	byte [es:2]
 12877 00000B2A 26FE060200              	inc	byte [es:BATCHSEGMENT.BatchEOF]
 12878                                  					;match the dec following
 12879 00000B2F 8B1E[C7A5]              	mov	bx,[BATBUFEND]
 12880 00000B33 80BF[A6A5]0A            	cmp	byte [bx+BATBUF-1],0Ah	;was a LF present?
 12881 00000B38 7406                    	je	short crpresent		;yes, no need to fake it
 12882                                  
 12883                                  	;add	byte [es:2],3
 12884 00000B3A 268006020003            	add	byte [es:BATCHSEGMENT.BatchEOF],3
 12885                                  					;BatchEOF == 4 to fake CR-LF
 12886                                  crpresent:
 12887                                  ;;	;pop	es
 12888                                  
 12889                                  	;ASSUME	DS:TranGroup
 12890                                  	; 14/02/2023
 12891 00000B40 8E1E[D19B]              	mov	ds,[RESSEG]
 12892                                  	;ASSUME	DS:ResGroup
 12893                                  ;SR;
 12894                                  ; The shift operation is done here to replace the decrement. This is because
 12895                                  ;we can jump to this label directly from above when bogus calls are made to
 12896                                  ;this routine even after batch processing is turned off. The shift ensures
 12897                                  ;maintains the following invariance : 4 -> 2; 2 -> 1 ; 1 -> 0; 0 -> 0. Thus,
 12898                                  ;it is used as a decrement and also as a NOP to just fall through on bogus 
 12899                                  ;calls.
 12900                                  ;	We turn batch processing off if BatchEOF == 1 or BatchEOF == 0.
 12901                                  ;BatchEOF == 1 when we fall through from BatEOFDS and BatchEOF == 0 on a 
 12902                                  ;direct jump to BATEOF. If BatchEOF == 4, we return a fake CR-LF without 
 12903                                  ;turning batch processing off.
 12904                                  
 12905                                  At_EOF:					;new label added ;M020
 12906                                  	;shr	byte [es:2],1
 12907 00000B44 26D02E0200              	shr	byte [es:BATCHSEGMENT.BatchEOF],1
 12908                                  					;decrement the flag
 12909 00000B49 7412                    	jz	short turn_off		;zero,turn batch off
 12910                                  	;cmp	byte [es:2],1
 12911 00000B4B 26803E020001            	cmp	byte [es:BATCHSEGMENT.BatchEOF],1				
 12912 00000B51 7405                    	jz	short ret_lf		;BatchEOF was 2, return LF
 12913                                  ;
 12914                                  ;BatchEOF == 4, indicates return fake CR now and fake LF next.
 12915                                  ;
 12916 00000B53 B00D                    	mov	al,0Dh			;return fake CR.
 12917 00000B55 07                      	pop	es
 12918 00000B56 EB35                    	jmp	short GETBYTEDONE
 12919                                  ret_lf:
 12920 00000B58 B00A                    	mov	al,0Ah			;return fake LF
 12921 00000B5A 07                      	pop	es
 12922 00000B5B EB30                    	jmp	short GETBYTEDONE		
 12923                                  turn_off:
 12924 00000B5D 07                      	pop	es
 12925                                  ;BATEOF:
 12926                                  	; MSDOS 3.3
 12927                                  ;TURN_OFF:
 12928                                  	;mov	ds,[RESSEG]
 12929                                  
 12930                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12931                                  BATEOF:
 12932 00000B5E E8B1FE                  	call	BATCHOFF
 12933 00000B61 E8CC02                  	call	BATCLOSE
 12934                                  
 12935                                  ;;;	mov	BatchEOF,0	;make sure BatchEOF = 0
 12936                                  
 12937                                  ;SR; BugBug
 12938                                  ; There is a good reason why this carriage return is being returned here. 
 12939                                  ;This was part of the old code, thanks to some brain-damaged coding. Because,
 12940                                  ;of the way the caller is structured, a fake CR has to be returned again on
 12941                                  ;EOF to ensure the termination of the caller's loop. If echo is on, this
 12942                                  ;results in an extra linefeed after the batchfile is run if the last line of
 12943                                  ;the batchfile already had a CR-LF. 
 12944                                  ;NB: Do not confuse this with the faked CR. The fake CR-LF was to mark
 12945                                  ;the end-of-line. This CR is to mark the end-of-file.
 12946                                  
 12947 00000B64 B00D                    	mov	al,0Dh			; If end-of-file, then end of line
 12948 00000B66 F606[9302]FF            	test	byte [Batch_Abort],-1
 12949 00000B6B C606[9302]00            	mov	byte [Batch_Abort],0
 12950 00000B70 7407                    	jz	short CONT_GET_BYT
 12951 00000B72 BF[329A]                	mov	di,COMBUF+2		; reset pointer to beginning of buffer
 12952 00000B75 31C9                    	xor	cx,cx			; zero line length
 12953 00000B77 EB14                    	jmp	short GETBYTEDONE
 12954                                  CONT_GET_BYT:
 12955 00000B79 833E[A502]F0            	cmp	word [SingleCom],0FFF0h ; See if we need to set SINGLECOM
 12956 00000B7E 750D                    	jne	short GETBYTEDONE
 12957 00000B80 833E[AE02]00            	cmp	word [Nest],0		;G See if we have nested batch files
 12958 00000B85 7506                    	jnz	short GETBYTEDONE	;G Yes - don't exit just yet
 12959 00000B87 C706[A502]FFFF          	mov	word [SingleCom],0FFFFh	; -1 ; Cause termination
 12960                                  GETBYTEDONE:
 12961 00000B8D 1F                      	pop	ds
 12962 00000B8E 59                      	pop	cx
 12963 00000B8F 5B                      	pop	bx
 12964 00000B90 C3                      	retn
 12965                                  
 12966                                  ; ---------------------------------------------------------------------------
 12967                                  
 12968                                  ;break	<$If - conditional execution>
 12969                                  
 12970                                  	; 17/04/2023
 12971                                  ;IFERRORP:
 12972                                  ;	pop	ax
 12973                                  ;IFERROR:
 12974                                  ;	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 12975                                  ;FORERROR:
 12976                                  ;	mov	dx,SYNTMES_PTR
 12977                                  ;	jmp	cerror
 12978                                  
 12979                                  ; ---------------------------------------------------------------------------
 12980                                  
 12981                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12982                                  	;
 12983                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12984                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0B69h
 12985                                  
 12986                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12987                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:0BAEh
 12988                                  _$IF:
 12989                                  	; MSDOS 6.0
 12990                                  ; Turn off any pipes in progress.
 12991 00000B91 1E                      	push	ds			;AN004; save local DS
 12992 00000B92 8E1E[D19B]              	mov	ds,[RESSEG]		;AN004; get resident segment
 12993                                  	;assume	ds:resgroup		;AN004;
 12994 00000B96 803E[1403]00            	cmp	byte [PipeFiles],0	;AN004; Only turn off if present.
 12995 00000B9B 7403                    	jz	short IFNoPipe		;AN004; no pipe - continue
 12996                                  	;invoke	PipeDel 		;AN004; turn off piping
 12997 00000B9D E84725                  	call	PIPEDEL	
 12998                                  IFNoPipe:				;AN004;
 12999 00000BA0 1F                      	pop	ds			;AN004; get local DS back
 13000                                  	;assume	ds:trangroup		;AN004;
 13001                                  
 13002                                  	; MSDOS 3.3 (&MSDOS 6.0)
 13003 00000BA1 C606[E49B]00            	mov	byte [IFNOTFLAG],0
 13004 00000BA6 C706[79A4]0000          	mov	word [IF_NOT_COUNT],0
 13005 00000BAC BE8100                  	mov	si,81h
 13006                                  IFREENT:
 13007 00000BAF E89B1D                  	call	scanoff
 13008 00000BB2 3C0D                    	cmp	al,0Dh
 13009 00000BB4 743C                    	je	short IFERROR
 13010 00000BB6 89F5                    	mov	bp,si
 13011 00000BB8 BF[A493]                	mov	di,IFTAB		; Prepare to search if table	
 13012                                  	;mov	ch,0
 13013                                  	; 17/04/2023
 13014 00000BBB 30ED                    	xor	ch,ch
 13015                                  IFINDCOM:
 13016 00000BBD 89EE                    	mov	si,bp
 13017 00000BBF 8A0D                    	mov	cl,[di]
 13018 00000BC1 47                      	inc	di
 13019 00000BC2 E33E                    	jcxz	IFSTRING
 13020 00000BC4 EB02                    	jmp	short FIRSTCOMP
 13021                                  IFCOMP:
 13022 00000BC6 7510                    	jnz	short IF_DIF
 13023                                  FIRSTCOMP:
 13024 00000BC8 AC                      	lodsb
 13025 00000BC9 268A25                  	mov	ah,[es:di]
 13026 00000BCC 47                      	inc	di
 13027 00000BCD 38E0                    	cmp	al,ah
 13028 00000BCF 7405                    	je	short IFLP
 13029 00000BD1 80CC20                  	or	ah,20h			; Try lower case
 13030 00000BD4 38E0                    	cmp	al,ah
 13031                                  IFLP:
 13032 00000BD6 E2EE                    	loop	IFCOMP
 13033                                  IF_DIF:
 13034 00000BD8 9F                      	lahf
 13035 00000BD9 01CF                    	add	di,cx			; Bump to next position without affecting flags
 13036 00000BDB 8B1D                    	mov	bx,[di]			; Get handler address
 13037 00000BDD 47                      	inc	di
 13038 00000BDE 47                      	inc	di
 13039 00000BDF 9E                      	sahf
 13040 00000BE0 75DB                    	jnz	short IFINDCOM
 13041 00000BE2 AC                      	lodsb
 13042 00000BE3 3C0D                    	cmp	al,0Dh
 13043                                  IFERRJ:
 13044 00000BE5 740B                    	jz	short IFERROR
 13045 00000BE7 E86B1D                  	call	DELIM
 13046 00000BEA 75D1                    	jnz	short IFINDCOM
 13047 00000BEC E85E1D                  	call	scanoff
 13048 00000BEF FFE3                    	jmp	bx
 13049                                  
 13050                                  	; 17/04/2023
 13051                                  IFERRORP:
 13052 00000BF1 58                      	pop	ax
 13053                                  IFERROR:
 13054                                  	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 13055                                  FORERROR:
 13056 00000BF2 BA[1790]                	mov	dx,SYNTMES_PTR
 13057 00000BF5 E9F520                  	jmp	cerror
 13058                                  
 13059                                  IFNOT:
 13060 00000BF8 F616[E49B]              	not	byte [IFNOTFLAG]
 13061 00000BFC FF06[79A4]              	inc	word [IF_NOT_COUNT]
 13062 00000C00 EBAD                    	jmp	short IFREENT
 13063                                  
 13064                                  ; We are comparing two strings for equality. First, find the end of the
 13065                                  ; first string.
 13066                                  
 13067                                  IFSTRING:
 13068 00000C02 56                      	push	si			; save away pointer for later compare
 13069 00000C03 31C9                    	xor	cx,cx			; count of chars in first string
 13070                                  FIRST_STRING:
 13071 00000C05 AC                      	lodsb				; get character
 13072 00000C06 3C0D                    	cmp	al,0Dh			; end of line?
 13073 00000C08 74E7                    	jz	short IFERRORP		; yes => error
 13074 00000C0A E8481D                  	call	DELIM			; is it a delimiter?
 13075 00000C0D 7403                    	jz	short EQUAL_CHECK 	; yes, go find equal sign
 13076 00000C0F 41                      	inc	cx			; remember 1 byte for the length
 13077 00000C10 EBF3                    	jmp	short FIRST_STRING 	; go back for more
 13078                                  EQUAL_CHECK:
 13079 00000C12 3C3D                    	cmp	al,'='			; is char we have an = sign?
 13080 00000C14 7407                    	je	short EQUAL_CHECK2 	; yes, go find second one.
 13081 00000C16 3C0D                    	cmp	al,0Dh			; end of line?
 13082 00000C18 74D7                    	je	short IFERRORP		; yes, syntax error
 13083 00000C1A AC                      	lodsb				; get next char
 13084 00000C1B EBF5                    	jmp	short EQUAL_CHECK
 13085                                  
 13086                                  ; The first = has been found. The next char had better be an = too.
 13087                                  
 13088                                  EQUAL_CHECK2:
 13089 00000C1D AC                      	lodsb				; get potential = char
 13090 00000C1E 3C3D                    	cmp	al,'='			; is it good?	
 13091                                  	;jnz	short IFERRPJ		; no, error
 13092                                  	; 17/04/2023
 13093 00000C20 75CF                    	jne	short IFERRORP
 13094                                  
 13095                                  ; Find beginning of second string.
 13096                                  
 13097 00000C22 E8281D                  	call	scanoff
 13098 00000C25 3C0D                    	cmp	al,0Dh
 13099                                  	;jz	short IFERRPJ
 13100                                  	; 17/04/2023
 13101 00000C27 74C8                    	je	short IFERRORP
 13102 00000C29 5F                      	pop	di
 13103                                  
 13104                                  ; DS:SI points to second string
 13105                                  ; CX has number of chars in first string
 13106                                  ; ES:DI points to first string
 13107                                  
 13108 00000C2A F3A6                    	repe	cmpsb
 13109 00000C2C 7414                    	jz	short MATCH		; match found!
 13110                                  
 13111                                  ; No match. Let's find out what was wrong. The character that did not match
 13112                                  ; has been advanced over. Let's back up to it.
 13113                                  
 13114 00000C2E 4E                      	dec	si
 13115                                  
 13116                                  ; If it is EOL, then syntax error
 13117                                  
 13118 00000C2F 803C0D                  	cmp	byte [si],0Dh
 13119                                  	;jz	short IFERRJ
 13120                                  	; 17/04/2023
 13121 00000C32 74BE                    	je	short IFERROR
 13122                                  
 13123                                  ; Advance pointer over remainder of unmatched text to next delimiter
 13124                                  
 13125                                  SKIPSTRINGEND:
 13126 00000C34 AC                      	lodsb
 13127                                  NOTMATCH:
 13128 00000C35 3C0D                    	cmp	al,0Dh
 13129                                  IFERRORJ2:
 13130                                  	;jz	short IFERRJ
 13131                                  	; 17/04/2023
 13132 00000C37 74B9                    	jz	short IFERROR
 13133 00000C39 E8191D                  	call	DELIM
 13134 00000C3C 75F6                    	jnz	short SKIPSTRINGEND
 13135                                  
 13136                                  ; Signal that we did NOT have a match
 13137                                  
 13138 00000C3E B0FF                    	mov	al,-1	 ; 0FFh
 13139 00000C40 EB37                    	jmp	short IFRET
 13140                                  
 13141                                  	; 17/04/2023
 13142                                  ;IFERRPJ:
 13143                                  	;jmp	IFERRORP
 13144                                  
 13145                                  ; The compare succeeded. Was the second string longer than the first?
 13146                                  ; We do this by seeing if the next char is a delimiter.
 13147                                  
 13148                                  MATCH:
 13149 00000C42 AC                      	lodsb
 13150 00000C43 E80F1D                  	call	DELIM
 13151 00000C46 75ED                    	jnz	short NOTMATCH ; not same.
 13152 00000C48 30C0                    	xor	al,al
 13153 00000C4A EB2D                    	jmp	short IFRET
 13154                                  
 13155                                  ; ---------------------------------------------------------------------------
 13156                                  
 13157                                  IFEXISTS:
 13158                                  
 13159                                  IFEXIST_ATTR	EQU	ATTR_HIDDEN+ATTR_SYSTEM  ; 2+4 = 6
 13160                                  
 13161                                  ;MOREDELIM:
 13162 00000C4C AC                      	lodsb
 13163 00000C4D E8051D                  	call	DELIM
 13164 00000C50 75FA                    	jnz	short IFEXISTS
 13165                                  	;jnz	short MOREDELIM
 13166                                  
 13167 00000C52 BA[189D]                	mov	dx,DIRBUF
 13168 00000C55 B8001A                  	mov	ax,1A00h
 13169                                  	;mov	ax,Set_DMA*256 ; 1A00h
 13170 00000C58 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13171                                  			; DS:DX	-> disk	transfer buffer
 13172 00000C5A BB0200                  	mov	bx,2	; if(0) [|not](|1) exist[1|2] file(2|3)
 13173 00000C5D 031E[79A4]              	add	bx,[IF_NOT_COUNT]
 13174                                  	;mov	ax,ARG_ARGV
 13175                                  	;mov	ax,ARG+ARG_UNIT.argv
 13176 00000C61 B8[2D9F]                	mov	ax,ARG
 13177 00000C64 E8E128                  	call	argv_calc		; convert arg index to pointer
 13178 00000C67 8B17                    	mov	dx,[bx]
 13179                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13180                                  	;mov	cx,6
 13181 00000C69 B90600                  	mov	cx,IFEXIST_ATTR ; filetypes to search for
 13182 00000C6C B8004E                  	mov	ax,4E00h
 13183                                  	;mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 13184 00000C6F CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13185                                  			; CX = search attributes
 13186                                  			; DS:DX	-> ASCIZ filespec
 13187                                  			; (drive,path, and wildcards allowed)
 13188 00000C71 7204                    	jc	short IF_EX_C ; carry is how to determine error
 13189 00000C73 30C0                    	xor	al,al
 13190 00000C75 EB02                    	jmp	short IFRET
 13191                                  
 13192                                  	;nop
 13193                                  IF_EX_C:
 13194 00000C77 B0FF                    	mov	al,-1	; 0FFh	; false 'n' fall through...
 13195                                  IFRET:
 13196 00000C79 F606[E49B]FF            	test	byte [IFNOTFLAG],-1 ; 0FFh
 13197 00000C7E 7402                    	jz	short REALTEST
 13198 00000C80 F6D0                    	not	al
 13199                                  REALTEST:
 13200 00000C82 08C0                    	or	al,al
 13201 00000C84 7403                    	jz	short IFTRUE
 13202 00000C86 E97BF4                  	jmp	TCOMMAND
 13203                                  
 13204                                  IFTRUE:
 13205 00000C89 E8C11C                  	call	scanoff
 13206 00000C8C 89F1                    	mov	cx,si
 13207 00000C8E 81E98100                	sub	cx,81h
 13208 00000C92 280E8000                	sub	[80h],cl
 13209 00000C96 8A0E8000                	mov	cl,[80h]
 13210 00000C9A 880E[319A]              	mov	[COMBUF+1],cl
 13211 00000C9E BF[329A]                	mov	di,COMBUF+2
 13212 00000CA1 FC                      	cld
 13213 00000CA2 F3A4                    	rep	movsb
 13214 00000CA4 B00D                    	mov	al,0Dh
 13215 00000CA6 AA                      	stosb
 13216                                  
 13217                                  ; Signal that an IF was done. 
 13218                                  ; This prevents the redirections from getting lost.
 13219                                  
 13220 00000CA7 1E                      	push	ds
 13221 00000CA8 8E1E[D19B]              	mov	ds,[RESSEG]
 13222 00000CAC C606[AA02]FF            	mov	byte [IfFlag],-1
 13223 00000CB1 1F                      	pop	ds
 13224                                  
 13225                                  ; Go do the command
 13226                                  
 13227                                  	;jmp	DOCOM1 ; MSDOS 5.0 COMMAND.COM
 13228                                  	; 07/06/2023
 13229                                  	; Retro DOS v4.2 COMMAND.COM
 13230 00000CB2 E940F6                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 13231                                  
 13232                                  ; ---------------------------------------------------------------------------
 13233                                  
 13234                                  IFERRORJ3:
 13235 00000CB5 EB80                    	jmp	IFERRORJ2
 13236                                  
 13237                                  IFERLEV:
 13238                                  
 13239                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13240                                  ; PCDOS 7.1 COMMAND.COM
 13241                                  ;%if 1
 13242                                  ;	cmp	byte [si],0F2h  ; CODE PAGE 437
 13243                                  ;	jne	short IFERLEV_@
 13244                                  ;	inc	si
 13245                                  ;IFERLEV_@:	
 13246                                  ;%endif
 13247 00000CB7 B70A                    	mov	bh,10
 13248 00000CB9 30DB                    	xor	bl,bl
 13249                                  GETNUMLP:
 13250 00000CBB AC                      	lodsb
 13251 00000CBC 3C0D                    	cmp	al,0Dh
 13252 00000CBE 74F5                    	je	short IFERRORJ3
 13253 00000CC0 E8921C                  	call	DELIM
 13254 00000CC3 740C                    	jz	short GOTNUM
 13255 00000CC5 2C30                    	sub	al,'0'
 13256 00000CC7 86C3                    	xchg	al,bl
 13257 00000CC9 F6E7                    	mul	bh
 13258 00000CCB 00D8                    	add	al,bl
 13259 00000CCD 86C3                    	xchg	al,bl
 13260 00000CCF EBEA                    	jmp	short GETNUMLP
 13261                                  GOTNUM:
 13262 00000CD1 1E                      	push	ds
 13263 00000CD2 8E1E[D19B]              	mov	ds,[RESSEG]
 13264 00000CD6 8A26[9A02]              	mov	ah,[RetCode]
 13265 00000CDA 1F                      	pop	ds
 13266 00000CDB 30C0                    	xor	al,al
 13267 00000CDD 38DC                    	cmp	ah,bl
 13268 00000CDF 7398                    	jnb	short IFRET
 13269 00000CE1 FEC8                    	dec	al
 13270 00000CE3 EB94                    	jmp	short IFRET
 13271                                  
 13272                                  ; ---------------------------------------------------------------------------
 13273                                  
 13274                                  ; Shift the parameters in the batch structure by 1 and set up the new argument.
 13275                                  ; This is a NOP if no batch in progress.
 13276                                  
 13277                                  _SHIFT:
 13278 00000CE5 8E1E[D19B]              	mov	ds,[RESSEG]
 13279 00000CE9 A1[4902]                	mov	ax,[Batch]		; get batch pointer
 13280 00000CEC 09C0                    	or	ax,ax			; in batch mode?
 13281 00000CEE 7501                    	jnz	short SHIFT1		; yes, operate in batch segment	
 13282                                  SHIFT_RETN:				; no, done.
 13283 00000CF0 C3                      	retn
 13284                                  SHIFT1:
 13285 00000CF1 8EC0                    	mov	es,ax
 13286 00000CF3 8ED8                    	mov	ds,ax
 13287                                  
 13288                                  ; Now move the batch args down by 1 word
 13289                                  
 13290                                  	;;mov	di,0Bh ; MSDOS 3.3 COMMAND.COM
 13291                                  	;mov	di,0Ch ; MSDOS 5.0 COMMAND.COM
 13292 00000CF5 BF0C00                  	mov	di,BATCHSEGMENT.BatParm ; point to parm table
 13293 00000CF8 8D7502                  	lea	si,[di+2]		; make source = dest + 2
 13294 00000CFB B90900                  	mov	cx,9			; move 9 parameters
 13295 00000CFE F3A5                    	rep	movsw			; SHIFT down
 13296                                  
 13297                                  ; If the last parameter (the one not moved) is empty (= -1) then we are done.
 13298                                  ; We have copied it into the previous position.
 13299                                  
 13300 00000D00 833DFF                  	cmp	word [di],-1	; if last one was not in use then
 13301 00000D03 74EB                    	je	short SHIFT_RETN ; No new parm
 13302                                  
 13303                                  ; This last pointer is NOT nul. Get it and scan to find the next argument.
 13304                                  ; Assume, first, that there is no next argument.
 13305                                   
 13306 00000D05 8B35                    	mov	si,[di]
 13307 00000D07 C705FFFF                	mov	word [di],-1		; Assume no parm
 13308                                  
 13309                                  ; The parameters are CR separated. Scan for end of this parm.
 13310                                  
 13311                                  SKIPCRLP:
 13312 00000D0B AC                      	lodsb
 13313 00000D0C 3C0D                    	cmp	al,0Dh
 13314 00000D0E 75FB                    	jne	short SKIPCRLP
 13315                                  
 13316                                  ; We are now pointing at next arg. If it is 0 (end of original line) then we
 13317                                  ; are finished. There are no more parms and the pointer has been previously
 13318                                  ; initialized to indicate it.
 13319                                  
 13320 00000D10 803C00                  	cmp	byte [si],0
 13321 00000D13 74DB                    	jz	short SHIFT_RETN 	; End of parms
 13322 00000D15 8935                    	mov	[di],si			; Pointer to next parm as %9
 13323 00000D17 C3                      	retn
 13324                                  
 13325                                  ; =============== S U B	R O U T	I N E =======================================
 13326                                  
 13327                                  ; Skip delim reads bytes from the batch file until a non-delimiter is seen.
 13328                                  ; returns char in AL, carry set -> eof
 13329                                  
 13330                                  SKIPDELIM:
 13331 00000D18 F706[4902]FFFF          	test	word [Batch],-1		; batch file empty. OOPS!
 13332 00000D1E 740A                    	jz	short SKIPERR
 13333 00000D20 E85CFD                  	call	GETBATBYT		; get a char
 13334 00000D23 E82F1C                  	call	DELIM			; check for ignoreable chars
 13335 00000D26 74F0                    	jz	short SKIPDELIM		; ignore this char.
 13336 00000D28 F8                      	clc
 13337 00000D29 C3                      	retn
 13338                                  SKIPERR:
 13339 00000D2A F9                      	stc
 13340                                  GOTO_RETN:
 13341 00000D2B C3                      	retn
 13342                                  
 13343                                  ; ---------------------------------------------------------------------------
 13344                                  
 13345                                  ;  CALL is an internal command that transfers control to a .bat, .exe, or
 13346                                  ;  .com file. This routine strips the CALL off the command line, sets
 13347                                  ;  the CALL_FLAG to indicate a call in progress, and returns control to
 13348                                  ;  DOCOM1 in TCODE to reprocess the command line and execute the file
 13349                                  ;  being CALLed.
 13350                                  
 13351                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13352                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0C27h
 13353                                  
 13354                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 13355                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0D01h
 13356                                  
 13357                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13358                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:0D4Ch
 13359                                  _$CALL:
 13360                                  
 13361                                  ;  strip off CALL from command line
 13362                                  
 13363                                  	;ASSUME DS:trangroup,ES:trangroup
 13364                                  
 13365 00000D2C 56                      	push	si
 13366 00000D2D 57                      	push	di
 13367 00000D2E 50                      	push	ax
 13368 00000D2F 51                      	push	cx
 13369 00000D30 BE[329A]                	mov	si,COMBUF+2
 13370 00000D33 E8171C                  	call	scanoff			;get to first non-delimeter
 13371                                  	;add	si,4
 13372 00000D36 83C604                  	add	si,length_call		;point to char past CALL
 13373 00000D39 BF[329A]                	mov	di,COMBUF+2
 13374                                  	;mov	cx,124		
 13375 00000D3C B97C00                  	mov	cx,COMBUFLEN-length_call 
 13376                                  					;get length of buffer
 13377 00000D3F F3A4                    	rep	movsb			;move it
 13378 00000D41 59                      	pop	cx
 13379 00000D42 58                      	pop	ax
 13380 00000D43 5F                      	pop	di
 13381 00000D44 5E                      	pop	si
 13382                                  
 13383                                  ;  set call flag to indicate call in progress
 13384                                  
 13385 00000D45 1E                      	push	ds
 13386 00000D46 8E1E[D19B]              	mov	ds,[RESSEG]
 13387 00000D4A C606[B002]01            	mov	byte [Call_Flag],call_in_progress ; 1
 13388 00000D4F C606[B102]01            	mov	byte [Call_Batch_Flag],call_in_progress ; 1
 13389                                  
 13390                                  ; Turn off any pipes in progress.
 13391                                  
 13392 00000D54 803E[1403]00            	cmp	byte [PipeFiles],0 	; Only turn off if present.
 13393 00000D59 7403                    	jz	short _NOPIPE
 13394 00000D5B E88923                  	call	PIPEDEL
 13395                                  _NOPIPE:
 13396 00000D5E 1F                      	pop	ds
 13397 00000D5F C3                      	retn
 13398                                  
 13399                                  ; ---------------------------------------------------------------------------
 13400                                  
 13401                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13402                                  _GOTO:
 13403 00000D60 8E1E[D19B]              	mov	ds,[RESSEG]
 13404 00000D64 F706[4902]FFFF          	test	word [Batch],-1	; If not in batch mode, a nop
 13405 00000D6A 74BF                    	jz	short GOTO_RETN
 13406 00000D6C 31D2                    	xor	dx,dx
 13407 00000D6E 1E                      	push	ds
 13408 00000D6F 8E1E[4902]              	mov	ds,[Batch]
 13409                                  	;mov	[8],dx	; MSDOS 5.0 COMMAND.COM
 13410 00000D73 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; Back to start
 13411                                  	;mov	[10],dx	; MSDOS 5.0 COMMAND.COM
 13412 00000D77 89160A00                	mov	[BATCHSEGMENT.BatSeek+2],dx ; Back to start
 13413                                  
 13414                                  	; MSDOS 6.0
 13415                                  ;M037
 13416                                  ; Clear EOF indicator because we have reseeked to the beginning of the file.
 13417                                  ;
 13418 00000D7B C606020000              	mov	byte [BATCHSEGMENT.BatchEOF],0
 13419                                  					; clear eof indicator ;M037
 13420                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13421 00000D80 1F                      	pop	ds
 13422                                  GOTOOPEN:
 13423 00000D81 E86BF8                  	call	PROMPTBAT
 13424                                  	;mov	di,5Dh
 13425 00000D84 BF5D00                  	mov	di,FCB+1		; Get the label
 13426 00000D87 B90B00                  	mov	cx,11
 13427 00000D8A B020                    	mov	al,' '
 13428 00000D8C F2AE                    	repne	scasb
 13429 00000D8E 7501                    	jnz	short NOINC
 13430 00000D90 41                      	inc	cx
 13431                                  NOINC:
 13432 00000D91 83E90B                  	sub	cx,11
 13433 00000D94 F7D9                    	neg	cx
 13434                                  	;mov	[cs:GOTOLEN],cx
 13435                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13436 00000D96 26890E[189D]            	mov	[es:GOTOLEN],cx	; MSDOS 5.0 (& 6.0)
 13437                                  
 13438                                  ; At beginning of file. Skip to first non-delimiter char
 13439                                  
 13440 00000D9B E87AFF                  	call	SKIPDELIM
 13441 00000D9E 721C                    	jb	short BADGOTO
 13442 00000DA0 3C3A                    	cmp	al,':'
 13443 00000DA2 7426                    	jz	short CHKLABEL
 13444                                  LABLKLP:				; Look for the label
 13445 00000DA4 E8D8FC                  	call	GETBATBYT
 13446 00000DA7 3C0A                    	cmp	al,0Ah
 13447 00000DA9 7509                    	jne	short LABLKTST
 13448                                  
 13449                                  ; At beginning of line. Skip to first non-delimiter char
 13450                                  
 13451 00000DAB E86AFF                  	call	SKIPDELIM
 13452 00000DAE 720C                    	jb	short BADGOTO
 13453 00000DB0 3C3A                    	cmp	al,':'
 13454 00000DB2 7416                    	je	short CHKLABEL
 13455                                  LABLKTST:
 13456 00000DB4 F706[4902]FFFF          	test	word [Batch],0FFFFh ; -1
 13457 00000DBA 75E8                    	jnz	short LABLKLP
 13458                                  BADGOTO:
 13459 00000DBC E87100                  	call	BATCLOSE
 13460                                  
 13461                                  	; MSDOS 6.0
 13462                                  ;SR;
 13463                                  ; At this point we are terminating without freeing up any nested batch 
 13464                                  ;segments i.e if the error occurred within a called batch file. This routine
 13465                                  ;will traverse the linked list of batch segments and free all of them.
 13466                                  ;
 13467 00000DBF E8BD00                  	call	free_batch		; free up nested batch segments
 13468                                  
 13469                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13470 00000DC2 0E                      	push	cs
 13471 00000DC3 1F                      	pop	ds
 13472 00000DC4 BA[1490]                	mov	dx,BADLAB_PTR
 13473 00000DC7 E9231F                  	jmp	cerror
 13474                                  
 13475                                  ; Found the :.	Skip to first non-delimiter char
 13476                                  
 13477                                  CHKLABEL:
 13478 00000DCA E84BFF                  	call	SKIPDELIM
 13479 00000DCD 72ED                    	jb	short BADGOTO
 13480 00000DCF BF5D00                  	mov	di,FCB+1 ; 5Dh
 13481                                  	;mov	cx,[cs:GOTOLEN]
 13482                                  	; 14/02/2023
 13483 00000DD2 268B0E[189D]            	mov	cx,[es:GOTOLEN]	 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 13484 00000DD7 EB05                    	jmp	short GOTBYTE
 13485                                  
 13486                                  NEXTCHRLP:
 13487 00000DD9 51                      	push	cx
 13488 00000DDA E8A2FC                  	call	GETBATBYT
 13489 00000DDD 59                      	pop	cx
 13490                                  GOTBYTE:
 13491                                  	; 18/03/2023
 13492                                  	; 14/02/2023
 13493                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CD9h
 13494 00000DDE E84719                  	call	testkanj
 13495 00000DE1 7413                    	jz	short NOTKANJ1
 13496 00000DE3 263A05                  	cmp	al,[es:di]
 13497 00000DE6 75CC                    	jne	short LABLKTST
 13498 00000DE8 47                      	inc	di
 13499 00000DE9 49                      	dec	cx
 13500 00000DEA E3C8                    	jcxz	LABLKTST
 13501 00000DEC 51                      	push	cx
 13502 00000DED E88FFC                  	call	GETBATBYT
 13503 00000DF0 59                      	pop	cx
 13504 00000DF1 263A05                  	cmp	al,[es:di]
 13505 00000DF4 EB0C                    	jmp	short KNEXTLABCHR
 13506                                  NOTKANJ1:
 13507                                  	; 14/02/2023
 13508                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CF1h
 13509 00000DF6 0C20                    	or	al,20h
 13510 00000DF8 263A05                  	cmp	al,[es:di]
 13511                                  	;jne	short TRYUPPER
 13512                                  	;jmp	short NEXTLABCHR
 13513                                  	; 25/04/2023
 13514 00000DFB 7407                    	je	short NEXTLABCHR 
 13515                                  TRYUPPER:
 13516 00000DFD 2C20                    	sub	al,20h
 13517 00000DFF 263A05                  	cmp	al,[es:di]
 13518                                  KNEXTLABCHR:
 13519 00000E02 75B0                    	jnz	short LABLKTST
 13520                                  NEXTLABCHR:
 13521 00000E04 47                      	inc	di
 13522 00000E05 E2D2                    	loop	NEXTCHRLP
 13523 00000E07 E875FC                  	call	GETBATBYT
 13524                                  	; 14/02/2023
 13525 00000E0A 26833E[189D]08          	cmp	word [es:GOTOLEN],8 ;  MSDOS 5.0 (& 6.0) COMMAND.COM
 13526                                  	;cmp	word [cs:GOTOLEN],8 ; Is the label at least 8 chars long?
 13527 00000E10 7D04                    	jge	short GOTOCONT	; Yes, then the next char doesn't matter
 13528 00000E12 3C20                    	cmp	al,' '
 13529 00000E14 779E                    	ja	short LABLKTST
 13530                                  GOTOCONT:
 13531 00000E16 3C0D                    	cmp	al,0Dh
 13532 00000E18 7407                    	je	short SKIPLFEED
 13533                                  TONEXTBATLIN:
 13534 00000E1A E862FC                  	call	GETBATBYT
 13535 00000E1D 3C0D                    	cmp	al,0Dh
 13536 00000E1F 75F9                    	jne	short TONEXTBATLIN
 13537                                  SKIPLFEED:
 13538 00000E21 E85BFC                  	call	GETBATBYT
 13539                                  
 13540                                  	; MSDOS 6.0
 13541                                  ;SR;
 13542                                  ; The BatchEOF flag is set in GetBatByt to indicate that we are faking a 
 13543                                  ;CR-LF for the last line. On a goto, this flag has to be cleared, because
 13544                                  ;BatchEOF == 1 now, after returning a CR-LF. The next call to GetBatByt
 13545                                  ;to get the EOF has not been made yet because we encountered the Goto. On
 13546                                  ;all other cases, EOF will be hit while trying to read the next line and
 13547                                  ;we are fine. I know, I know, what a massive hack from hell!! God help us!!
 13548                                  ;
 13549 00000E24 06                      	push	es
 13550 00000E25 8E06[4902]              	mov	es,[Batch]
 13551 00000E29 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 13552                                  					;invalidate fake CR-LF flag
 13553 00000E2F 07                      	pop	es
 13554                                  
 13555                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13556                                  	;call	BATCLOSE
 13557                                  	;retn
 13558                                  	; 14/02/2023
 13559                                  	;jmp	short BATCLOSE
 13560                                  
 13561                                  ; =============== S U B	R O U T	I N E =======================================
 13562                                  
 13563                                  	; 27/07/2024
 13564                                  BATCLOSE:
 13565 00000E30 2E8B1E[D19E]            	mov	bx,[cs:BATHAND]
 13566 00000E35 83FB05                  	cmp	bx,5
 13567 00000E38 7205                    	jb	short CLOSERETURN
 13568                                  	; 14/02/2023
 13569 00000E3A B43E                    	mov	ah,3Eh
 13570                                  	;mov	ah,CLOSE ; 3Eh
 13571                                  
 13572                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM
 13573                                  %if 0
 13574                                  	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 13575                                  			; BX = file handle
 13576                                  %else
 13577 00000E3C E87BF7                  	call	int_21h_indirect
 13578                                  %endif
 13579                                  
 13580                                  CLOSERETURN:
 13581 00000E3F C606[9202]00            	mov	byte [In_Batch],0 ; reset flag	
 13582 00000E44 C3                      	retn
 13583                                  
 13584                                  ; =============== S U B	R O U T	I N E =======================================
 13585                                  
 13586                                  ; Open the BATCH file, If open fails, AL is drive of batch file (A=1)
 13587                                  ; Also, fills internal batch buffer. If access denied, then AX = -1
 13588                                  	
 13589                                  	; 27/07/2024
 13590                                  	; 14/02/2023
 13591                                  BATOPEN:
 13592 00000E45 1E                      	push	ds
 13593 00000E46 8E1E[4902]              	mov	ds,[Batch]
 13594                                  	;;mov	dx,1Fh	; MSDOS 3.3 COMMAND.COM
 13595                                  	;mov	dx,20h	; MSDOS 5.0 COMMAND.COM
 13596 00000E4A BA2000                  	mov	dx,BATCHSEGMENT.BatFile
 13597                                  
 13598                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM
 13599                                  %if 0
 13600                                  	mov	ax,3D00h
 13601                                  	;mov	ax,(OPEN<<8) ; 3D00h ; Open the batch file
 13602                                  
 13603                                  	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 13604                                  			; DS:DX	-> ASCIZ filename
 13605                                  			; AL = access mode
 13606                                  			; 0 - read
 13607                                  %else
 13608 00000E4D B8203D                  	mov	ax,3D20h
 13609                                  	;mov	ax,(OPEN<<8)|20h ; 3D20h ; Open the batch file
 13610                                  				 ; 00-100-000b (00-DENYNONE-READONLY)
 13611 00000E50 E867F7                  	call	int_21h_indirect
 13612                                  %endif
 13613                                  
 13614 00000E53 721C                    	jc	short SETERRDL
 13615                                  	;mov	dx,[8]
 13616 00000E55 8B160800                	mov	dx,[BATCHSEGMENT.BatSeek]
 13617                                  	;mov	cx,[10]
 13618 00000E59 8B0E0A00                	mov	cx,[BATCHSEGMENT.BatSeek+2]
 13619 00000E5D 1F                      	pop	ds
 13620                                  	;mov	[cs:BATHAND],ax
 13621 00000E5E 26A3[D19E]              	mov	[es:BATHAND],ax ; MSDOS 5.0 (& 6.0) COMMAND.COM
 13622 00000E62 89C3                    	mov	bx,ax
 13623 00000E64 B80042                  	mov	ax,4200h
 13624                                  	;mov	ax,(LSEEK<<8) ; 4200h ; Go to the right spot
 13625 00000E67 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 13626                                  			; AL = method: offset from beginning of	file
 13627                                  
 13628                                  	;mov	word [cs:BATBUFPOS],-1 ; 0FFFFh
 13629                                  					; nuke batch buffer position
 13630 00000E69 26C706[A5A5]FFFF        	mov	word [es:BATBUFPOS],-1 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 13631                                  BATOPEN_RETN:
 13632 00000E70 C3                      	retn
 13633                                  
 13634                                  SETERRDL:
 13635 00000E71 89D3                    	mov	bx,dx
 13636                                  	; MSDOS 6.0
 13637                                  	;invoke	get_ext_error_number 	;AN022; get the extended error
 13638                                  	; 14/02/2023
 13639 00000E73 E8D311                  	call	get_ext_error_number
 13640 00000E76 89C2                    	mov	dx,ax		     	;AN022; save extended error in DX
 13641                                  
 13642                                  	; MSDOS 3.3
 13643                                  	;mov	dx,INSERTDSKPTR
 13644                                  	;call	GET_EXT_ERR_NUMBER
 13645                                  
 13646                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13647 00000E78 8A07                    	mov	al,[bx]			; Get drive spec
 13648 00000E7A 2C40                    	sub	al,'@'	; sub al,40h	; A = 1, B = 2 ..
 13649 00000E7C 1F                      	pop	ds
 13650 00000E7D F9                      	stc				; SUB mucked over carry
 13651 00000E7E C3                      	retn
 13652                                  
 13653                                  ; =============== S U B	R O U T	I N E =======================================
 13654                                  
 13655                                  ;Free_batch : This routine traverses the linked batch segments freeing all
 13656                                  ;the batch and FOR segments until all of them are freed. It also restores
 13657                                  ;the old state of the EchoFlag.
 13658                                  ;
 13659                                  ;	ENTRY:	ds = RESGROUP
 13660                                  ;
 13661                                  ;	EXIT: 	All batch & FOR segments freed.
 13662                                  ;		EchoFlag restored to old state before batch process.
 13663                                  ;
 13664                                  ;	REGISTERS AFFECTED: bx, cx
 13665                                  
 13666                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13667                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0D7Eh
 13668                                  
 13669                                  free_batch: ;proc near
 13670                                  	;assume	ds:RESGROUP,es:nothing
 13671                                  
 13672 00000E7F 06                      	push	es
 13673 00000E80 8B1E[B202]              	mov	bx,[Next_Batch]
 13674 00000E84 09DB                    	or	bx,bx
 13675 00000E86 7433                    	jz	short fb_ret
 13676                                  _ClearBatch:
 13677 00000E88 8EC3                    	mov	es,bx			; get batch segment
 13678                                  	;mov	bx,es:BatForPtr		; get old FOR segment
 13679 00000E8A 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
 13680                                  	;cmp	bx,0			; is a FOR in progress
 13681                                  	; 27/07/2024
 13682 00000E8F 21DB                    	and	bx,bx
 13683 00000E91 7409                    	jz	short no_bat_for	; no - don't deallocate
 13684 00000E93 06                      	push	es			;
 13685 00000E94 8EC3                    	mov	es,bx			; yes - free it up...
 13686 00000E96 B449                    	mov	ah,49h
 13687                                  	;mov	ah,DEALLOC		;
 13688                                  
 13689                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM
 13690                                  %if 0
 13691                                  	int	21h			;
 13692                                  %else
 13693 00000E98 E81FF7                  	call	int_21h_indirect
 13694                                  %endif
 13695 00000E9B 07                      	pop	es			; restore to batch segment
 13696                                  no_bat_for:
 13697                                  	;mov	cl,[es:1]
 13698 00000E9C 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag]
 13699                                  					; get old echo flag
 13700                                  	;mov	bx,[es:3]
 13701 00000EA1 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 13702                                  					; get old batch segment
 13703 00000EA6 B449                    	mov	ah,49h
 13704                                  	;mov	ah,DEALLOC		; free it up...
 13705                                  
 13706                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM
 13707                                  %if 0
 13708                                  	int	21h			;
 13709                                  %else
 13710 00000EA8 E80FF7                  	call	int_21h_indirect
 13711                                  %endif
 13712                                  	; 14/02/2023
 13713                                  	;mov	[Batch],bx		; get ready to deallocate next batch
 13714 00000EAB FF0E[AE02]              	dec	word [Nest]		; is there another batch file?
 13715 00000EAF 75D7                    	jnz	short _ClearBatch	; keep going until no batch file
 13716                                  	
 13717 00000EB1 880E[9D02]              	mov	[EchoFlag],cl		;restore echo status
 13718 00000EB5 C706[4902]0000          	mov	word [Batch],0		;no batch process in progress
 13719                                  fb_ret:
 13720 00000EBB 07                      	pop	es
 13721 00000EBC C3                      	ret
 13722                                  
 13723                                  ;free_batch endp
 13724                                  
 13725                                  ;============================================================================
 13726                                  ; TFOR.ASM, MSDOS 6.0, 1991
 13727                                  ;============================================================================
 13728                                  ; 10/10/2018 - Retro DOS v3.0
 13729                                  
 13730                                  ; All batch proccessing has DS set to segment of resident portion
 13731                                  
 13732                                  ;ASSUME DS:RESGROUP,ES:TRANGROUP
 13733                                  
 13734                                  ; MSDOS 3.3 COMMAND.COM, transient portion/segment offset 0BE9h
 13735                                  
 13736                                  ; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13737                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:0DBFh
 13738                                  
 13739                                  ; ---------------------------------------------------------------------------
 13740                                  
 13741                                  	; 15/02/2023
 13742                                  FORTERM:
 13743                                  	; MSDOS 6.0
 13744 00000EBD 0E                      	push	cs			;AN037; Get local segment into
 13745 00000EBE 1F                      	pop	ds			;AN037;  DS, ES
 13746 00000EBF 0E                      	push	cs			;AN037;
 13747 00000EC0 07                      	pop	es			;AN037;
 13748                                  
 13749                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13750 00000EC1 E89502                  	call	FOROFF
 13751                                  	;mov	ds,[cs:RESSEG]
 13752 00000EC4 268E1E[D19B]            	mov	ds,[es:RESSEG] ; 15/02/2023 - MSDOS 5.0
 13753 00000EC9 813E[A502]00FF          	cmp	word [SingleCom],0FF00h
 13754 00000ECF 750F                    	jne	short BAT_CRLF
 13755 00000ED1 833E[AE02]00            	cmp	word [Nest],0		;See if we have nested batch files
 13756 00000ED6 7508                    	jne	short BAT_CRLF		;Yes - don't exit just yet
 13757 00000ED8 C706[A502]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause a terminate
 13758 00000EDE EB12                    	jmp	short NOFORP2
 13759                                  BAT_CRLF:
 13760 00000EE0 F606[9D02]01            	test	byte [EchoFlag],1 	; Is echo on?
 13761 00000EE5 740B                    	jz	short NOFORP2		; no - exit
 13762 00000EE7 F706[4902]FFFF          	test	word [Batch],-1 ; 0FFFFh
 13763                                  					; print CRLF if in batch
 13764 00000EED 7403                    	jz	short NOFORP2
 13765 00000EEF E84E1A                  	call	CRLF2
 13766                                  NOFORP2:
 13767 00000EF2 E90FF2                  	jmp	TCOMMAND
 13768                                  
 13769                                  ; ---------------------------------------------------------------------------
 13770                                  
 13771                                  ;------
 13772                                  ;   For-loop processing. For loops are of the form:
 13773                                  ;	    for %<loop-variable> in (<list>) do <command>
 13774                                  ; where <command> may contain references of the form %<variable>, which are
 13775                                  ; later substituted with the items in <list>. The for-loop structure is
 13776                                  ; set-up by the procedure '$for'; successive calls to 'forproc' execute
 13777                                  ; <command> once for each item in <list>. All of the information needed for
 13778                                  ; loop processing is stored on a piece of memory gotten from 'alloc'. This
 13779                                  ; structure is actually fairly large, on the order of 700 bytes, and includes
 13780                                  ; a complete copy of the original command-line structure as parsed by
 13781                                  ; 'parseline', loop control variables, and a dma buffer for the
 13782                                  ; 'FindFirst/FindNext' expansion of wildcard filenames in <list>. When loop
 13783                                  ; processing has completed, this chunk of memory is returned to the system.
 13784                                  ;
 13785                                  ;   All of the previously defined variables, in 'datares', used for loop
 13786                                  ; processing may be erased. Only one, (DW) ForPtr, need be allocated.
 13787                                  ;
 13788                                  ;   The error message, 'for_alloc_mes', should be moved into the file
 13789                                  ; containing all of the other error messages.
 13790                                  ;
 13791                                  ;   Referencing the allocated for-loop structure is a little tricky.
 13792                                  ; At the moment, a byte is defined as part of a new segment, 'for_segment'.
 13793                                  ; When 'forproc' actually runs, ES and DS are set to point to the base of the
 13794                                  ; new chunk of memory.	References to this byte, 'f', thus assemble correctly
 13795                                  ; as offsets of ES or DS. 'f' would not be necessary, except that the
 13796                                  ; assembler translates an instruction such as 'mov AX, [for_minarg]' as an
 13797                                  ; immediate move of the offset of 'for_minarg' into AX. In other words, in
 13798                                  ; terms of PDP-11 mnemonics, the assembler ACTUALLY assembles
 13799                                  ;	mov  AX, #for_minarg 	; AX := 02CA (for example)
 13800                                  ; instead of
 13801                                  ;	mov  AX, for_minarg	; AX := [02CA] (contents of 02CA)
 13802                                  ; By using 'f', we pretend that we are actually referencing an allocated
 13803                                  ; structure, and the assembler coughs up the code we want. Notice that it
 13804                                  ; doesn't matter whether we put brackets around the location or not -- the
 13805                                  ; assembler is "smart" enough to know that we want an address instead of the
 13806                                  ; contents of that location.
 13807                                  ;
 13808                                  ;   Finally, there now exists the potential to easily implement nested loops.
 13809                                  ; One method would be to have a link field in each for-structure pointing to
 13810                                  ; its parent.  Variable references that couldn't be resolved in the local
 13811                                  ; frame would cause a search of prior frames. For-structures would still be
 13812                                  ; allocated and released in exactly the same fashion. The only limit on the
 13813                                  ; number of nested loops would be memory size (although at 700 bytes a pop,
 13814                                  ; memory wouldn't last THAT long). Alternately, a small structure could be
 13815                                  ; maintained in the resident data area. This structure would be an array of
 13816                                  ; control-variable names and pointers to for-structure blocks. This would
 13817                                  ; greatly speed up the resolution of non-local variable references. However,
 13818                                  ; since space in the resident is precious, we would have to compromise on a
 13819                                  ; "reasonable" level of nesting -- 10, 16, 32 levels, whatever. For-structure
 13820                                  ; allocation and de-allocation would have to be modified slightly to take this
 13821                                  ; new structure into account.
 13822                                  ;
 13823                                  ;   Oops, just one more thing. Forbuf need not be a part of the for-structure.
 13824                                  ; It could just as well be one structure allocated in 'transpace'. Actually,
 13825                                  ; it may be easier to allocate it as part of 'for_segment'.
 13826                                  ;------
 13827                                  		; include fordata.asm
 13828                                  
 13829                                  ; Data structure definitions included by tfor.asm
 13830                                  
 13831                                  struc FOR_INFO
 13832 00000000 <res 444h>                .FOR_ARGS:	  resb  ARG_UNIT.SIZE	; argv[] structure 
 13833 00000444 ??                        .FOR_COM_START: resb  1		; beginning of <command>
 13834 00000445 ????                      .FOR_EXPAND:	  resw  1		; * or ? item in <list>?
 13835 00000447 ????                      .FOR_MINARG:	  resw  1		; beginning of <list>
 13836 00000449 ????                      .FOR_MAXARG:	  resw  1		; end of <list>
 13837 0000044B <res 80h>                 .FORBUF:	  resw  64		; temporary buffer
 13838 000004CB <res 80h>                 .FORDMA:	  resw  64		; FindFirst/Next buffer
 13839 0000054B ??                        .FOR_VAR:	  resb  1		; loop control variable
 13840                                    .size:
 13841                                  endstruc
 13842                                  					; ARG_UNIT.SIZE = 1348 (544h)
 13843                                  					; ARG_UNIT.SIZE = 1092 ; 27/07/2024
 13844                                  _$FOR_EXIT:
 13845 00000EF5 EBC6                    	jmp	short FORTERM		; exceeding maxarg means all done
 13846                                  
 13847                                  ; ---------------------------------------------------------------------------
 13848                                  
 13849                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13850                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13851                                  FORPROC:
 13852 00000EF7 A1[AC02]                	mov	ax,[ForPtr]
 13853 00000EFA 8ED8                    	mov	ds,ax
 13854 00000EFC 8EC0                    	mov	es,ax			; operate in for-info area
 13855                                  	;;mov	dx,5CBh	; MSDOS 5.0 & 6.22
 13856                                  	;mov	dx,4CBh ; PCDOS 7.1 ; 27/07/2024
 13857 00000EFE BACB04                  	mov	dx,FOR_INFO.FORDMA	; 1348+1+2+2+2+128 = 1483 = 5CBh
 13858                                  		; PCDOS 7.1 COMMAND.COM ; 1092+1+2+2+2+128 = 1227 = 4CBh
 13859 00000F01 B8001A                  	mov	ax,1A00h
 13860                                  	;mov	ax,Set_DMA*256 ; 1A00h
 13861 00000F04 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13862                                  			; DS:DX	-> disk	transfer buffer
 13863                                  FOR_BEGIN:
 13864                                  	;;cmp	word [545h],0
 13865                                  	;cmp	word [445h] ; 27/07/2024
 13866 00000F06 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 13867 00000F0B 7404                    	jz	short FOR_BEGIN1
 13868                                  					; non-zero for_expand equals FALSE
 13869                                  	;;inc	word [547h]
 13870                                  	;inc	word [447h] ; 27/07/2024
 13871 00000F0D FF064704                	inc	word [FOR_INFO.FOR_MINARG]
 13872                                  FOR_BEGIN1:
 13873                                  	;mov	bx,[447h] ; 27/07/2024
 13874 00000F11 8B1E4704                	mov	bx,[FOR_INFO.FOR_MINARG] ; current item in <list> to examine
 13875                                  	;cmp	bx,[449h] ; 27/07/2024
 13876 00000F15 3B1E4904                	cmp	bx,[FOR_INFO.FOR_MAXARG]
 13877 00000F19 7FDA                     	jg	short _$FOR_EXIT	; exceeding maxarg means all done
 13878                                  	;mov	ax,0
 13879 00000F1B B80000                  	mov	ax,FOR_INFO.FOR_ARGS ; 0
 13880 00000F1E E82726                  	call	argv_calc		; compute argv[x] address
 13881                                  	;mov	cx,[bx+3]
 13882 00000F21 8B4F03                  	mov	cx,[bx+ARGV_ELE.argstartel]
 13883 00000F24 8B17                    	mov	dx,[bx]
 13884                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13885                                  	;test	byte [bx+2],4		; Is there a path separator in this arg?
 13886 00000F26 F6470204                	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 13887 00000F2A 7512                    	jnz	short FORSUB		; Yes, argstartel should be correct
 13888 00000F2C 8B37                    	mov	si,[bx]
 13889                                  	;mov	si,[bx+ARGV_ELE.argpointer]
 13890                                  
 13891                                  	;mov	al,[cs:LPAREN]
 13892                                  	; 15/02/2023
 13893                                  	; MSDOS 6.0 (& 5.0) COMMAND.com
 13894                                  	;mov	al,'('	; mov al,lparen
 13895                                  	;cmp	[si-1],	al		; If the current token is the first
 13896                                  	; 27/07/2024
 13897 00000F2E 807CFF28                	cmp	byte [si-1],'('
 13898 00000F32 750A                    	jne	short FORSUB		;  one in the list and originally had
 13899 00000F34 41                      	inc	cx			;  the opening paren as its first char,
 13900                                  					;  the argstartel ptr needs to be
 13901                                  					;  advanced passed it before the prefix
 13902                                  					;  length is computed.
 13903                                  	;mov	al,':'
 13904                                  	;cmp	[si+1],	al		; If the token begins with "(d:",
 13905                                  	; 27/07/2024
 13906 00000F35 807C013A                	cmp	byte [si+1],':'
 13907 00000F39 7503                    	jne	short FORSUB		;  argstartel has to be moved over the
 13908 00000F3B 83C102                  	add	cx,2			;  rest of the prefix as well.
 13909                                  FORSUB:
 13910 00000F3E 29D1                    	sub	cx,dx			; compute length of pathname prefix
 13911                                  	;;cmp	word [545h],0
 13912                                  	;cmp	word [445h],0 ; 27/07/2024
 13913 00000F40 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 13914                                  					; are we still expanding a name?
 13915 00000F45 7416                    	jz	short FOR_FIND_NEXT
 13916                                  					; if so, get next matching filename
 13917                                  	;test	byte [bx+2],2
 13918 00000F47 F6470202                	test	byte [bx+ARGV_ELE.argflags],2 ; wildcard
 13919 00000F4B 7505                    	jnz	short FOR_FIND_FIRST
 13920                                  					; should we expand THIS (new) arg?
 13921                                  	;mov	cx,[bx+5]
 13922                                  					; else, just copy all of it directly
 13923 00000F4D 8B4F05                  	mov	cx,[bx+ARGV_ELE.arglen]
 13924 00000F50 EB1D                    	jmp	short FOR_SMOOSH
 13925                                  
 13926                                  	;nop
 13927                                  	; 15/02/2023
 13928                                  FOR_FIND_FIRST:
 13929 00000F52 51                      	push	cx
 13930 00000F53 31C9                    	xor	cx,cx
 13931 00000F55 B8004E                  	mov	ax,4E00h
 13932                                  	;mov	ax,Find_First*256 ; 4E00h
 13933 00000F58 CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13934                                  			; CX = search attributes
 13935                                  			; DS:DX	-> ASCIZ filespec
 13936                                  			; (drive,path, and wildcards allowed)
 13937 00000F5A 59                      	pop	cx
 13938 00000F5B EB05                    	jmp	short FOR_RESULT
 13939                                  
 13940                                  	;nop
 13941                                  FOR_FIND_NEXT:
 13942 00000F5D B8004F                  	mov	ax,4F00h
 13943                                  	;mov	ax,Find_Next*256 ;4F00h
 13944 00000F60 CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 13945                                  			; [DTA]	= data block from
 13946                                  			; last AH = 4Eh/4Fh call
 13947                                  FOR_RESULT:
 13948 00000F62 B8FFFF                  	mov	ax,-1 ; 0FFFFh		; assume worst case
 13949 00000F65 7201                    	jc	short FOR_CHECK
 13950                                  	; 15/02/2023
 13951 00000F67 40                      	inc	ax ; ax = 0
 13952                                  	;mov	ax,0			; Find* returns 0 for SUCCESS
 13953                                  FOR_CHECK:				; record success of findfirst/next
 13954                                  	;;mov	[545h],ax
 13955                                  	;mov	[445h],ax ; 27/07/2024
 13956 00000F68 A34504                  	mov	[FOR_INFO.FOR_EXPAND],ax
 13957 00000F6B 09C0                    	or	ax,ax			; anything out there?
 13958 00000F6D 7597                    	jnz	short FOR_BEGIN		; if not, try next arg
 13959                                  FOR_SMOOSH:
 13960                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 13961 00000F6F 8B37                    	mov	si,[bx] 		; copy argv[arg][0,CX] into destbuf
 13962                                  	;;mov	di,54Bh	; MSDOS 5.0 & 6.22 COMMAND.COM
 13963                                  	;mov	di,44Bh ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 13964 00000F71 BF4B04                  	mov	di,FOR_INFO.FORBUF	; some days this will be the entire
 13965 00000F74 F3A4                    	rep	movsb			; arg, some days just the path prefix
 13966                                  					
 13967 00000F76 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 13968                                  					; if we're not expanding, we can
 13969 00000F7B 7509                    	jnz	short FOR_MAKE_COM 	; skip the following
 13970                                  	; 15/02/2023
 13971                                  	;;mov	si,05E9h ; MSDOS 3.3 & 5.0 & 6.22 COMMAND.COM ; 27/07/2024
 13972                                  	; 27/07/2024
 13973                                  	;mov	si,04E9h ; PCDOS 7.1 COMMAND.COM
 13974 00000F7D BEE904                  	mov	si,FOR_INFO.FORDMA+FIND_BUF.PNAME ; 14/10/2018
 13975                                  FOR_MORE:
 13976                                  	;cmp	byte [si],0		; tack on matching filename
 13977                                  	;jz	short FOR_MAKE_COM
 13978                                  	;movsb
 13979                                  	;jnz	short FOR_MORE
 13980                                  	; 25/04/2023
 13981 00000F80 AC                      	lodsb
 13982 00000F81 AA                      	stosb
 13983 00000F82 08C0                    	or	al,al
 13984 00000F84 75FA                    	jnz	short FOR_MORE
 13985                                  FOR_MAKE_COM:
 13986                                  	; 25/04/2023
 13987                                  	;xor	al,al			; tack a null byte onto the end
 13988                                  	;stosb				; of the substitute string
 13989 00000F86 31C9                    	xor	cx,cx			; character count for command line
 13990 00000F88 F7D1                    	not	cx			; negate it -- take advantage of loopnz
 13991 00000F8A 31DB                    	xor	bx,bx			; argpointer
 13992 00000F8C BF[329A]                	mov	di,COMBUF+2
 13993                                  	; 15/02/2023
 13994                                  	;;mov	bl,[544h] ; MSDOS 5.0-6.22 ; 27/07/2024
 13995                                  	; 27/07/2024
 13996                                  	;mov	bl,[444h] ; PCDOS 7.1 COMMAND.COM 
 13997 00000F8F 8A1E4404                	mov	bl,[FOR_INFO.FOR_COM_START] ; argindex
 13998                                  	;;mov	dh,[64Bh]
 13999                                  	;mov	dh,[54Bh] ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 14000 00000F93 8A364B05                	mov	dh,[FOR_INFO.FOR_VAR]
 14001                                  					; %<for-var> is replaced by [forbuf]
 14002 00000F97 0E                      	push	cs			; time to form the <command> string
 14003 00000F98 07                      	pop	es
 14004                                  	;assume ES:trangroup
 14005                                  	;mov	ax,FOR_INFO.FOR_ARGS
 14006 00000F99 B80000                  	mov	ax,0			; translate offset to pointer
 14007 00000F9C E8A925                  	call	argv_calc
 14008                                  	;mov	si,[bx+9]
 14009 00000F9F 8B7709                  	mov	si,[bx+ARGV_ELE.arg_ocomptr]
 14010                                  					; mov ptr passed beginning space
 14011 00000FA2 46                      	inc	si
 14012                                  FOR_MAKE_LOOP:
 14013 00000FA3 8A04                    	mov	al,[si]			; the <command> arg, byte by byte
 14014 00000FA5 46                      	inc	si
 14015 00000FA6 3C25                    	cmp	al,'%'			; looking for %<control-variable>
 14016 00000FA8 7514                    	jne	short FOR_STOSB 	; no % ... add byte to string
 14017 00000FAA 3834                    	cmp	[si],dh			; got the right <variable>?
 14018 00000FAC 7510                    	jnz	short FOR_STOSB		; got a %, but wrong <variable>
 14019 00000FAE 46                      	inc	si			; skip over <for-variable>
 14020                                  
 14021 00000FAF 56                      	push	si
 14022                                  	; 15/02/2023
 14023                                  	;;mov	si,54Bh	; MSDOS 5.0-6.22 ; 27/07/2024
 14024                                  	; 27/07/2024
 14025                                  	;mov	si,44Bh ; PCDOS 7.1 COMMAND.COM
 14026 00000FB0 BE4B04                  	mov	si,FOR_INFO.FORBUF
 14027                                  					; substitute the <item> for <variable>
 14028                                  					; to make a final <command> to execute
 14029                                  SLOOP:					
 14030 00000FB3 AC                      	lodsb				; grab all those <item> bytes, and
 14031 00000FB4 AA                      	stosb				; add 'em to the <command> string,
 14032 00000FB5 08C0                    	or	al,al			; until we run into a null
 14033 00000FB7 E0FA                    	loopne	SLOOP
 14034 00000FB9 4F                      	dec	di			; adjust length and <command> pointer
 14035 00000FBA 41                      	inc	cx			; so we can overwrite the null
 14036 00000FBB 5E                      	pop	si
 14037 00000FBC EBE5                    	jmp	short FOR_MAKE_LOOP
 14038                                  					; got back for more <command> bytes
 14039                                  FOR_STOSB:
 14040 00000FBE AA                      	stosb				; take a byte from the <command> arg
 14041 00000FBF 49                      	dec	cx			; and put it into the <command> to be
 14042                                  					; executed (and note length, too)
 14043 00000FC0 3C0D                    	cmp	al,0Dh
 14044 00000FC2 75DF                    	jne	short FOR_MAKE_LOOP	; If not done, loop.
 14045                                  FOR_MADE_COM:
 14046 00000FC4 F6D1                    	not	cl
 14047                                  	;mov	[cs:COMBUF+1],cl
 14048                                  	;mov	ds,[cs:RESSEG]
 14049                                  	; 15/02/2023 - Retro DOS v4.0 COMMAND.COM
 14050                                  	; MSDOS 5.0 COMMAND.COM
 14051 00000FC6 26880E[319A]            	mov	[es:COMBUF+1],cl
 14052 00000FCB 268E1E[D19B]            	mov	ds,[es:RESSEG]
 14053                                  	;assume DS:resgroup
 14054 00000FD0 F606[9D02]01            	test	byte [EchoFlag],1 	; shall we echo this <command>, dearie?
 14055 00000FD5 742F                    	jz	short NOECHO3
 14056                                  	;cmp	byte [NullFlag],nullcommand
 14057 00000FD7 803E[B402]01            	cmp	byte [NullFlag],1 	;G was there a command last time?
 14058 00000FDC 7403                    	jz	short NO_CRLF_PR  	;G no - don't print crlf
 14059                                  
 14060 00000FDE E85F19                  	call	CRLF2		  	;G Print out prompt
 14061                                  NO_CRLF_PR:
 14062 00000FE1 C606[B402]00            	mov	byte [NullFlag],0 	;G reset no command flag
 14063 00000FE6 0E                      	push	cs
 14064 00000FE7 1F                      	pop	ds
 14065 00000FE8 57                      	push	di
 14066 00000FE9 E80211                  	call	PRINT_PROMPT	  	;G Prompt the user
 14067 00000FEC 5F                      	pop	di
 14068                                  
 14069 00000FED 26C645FF00              	mov	byte [es:di-1],0  	; yeah, PRINT it out...	
 14070 00000FF2 C706[7F9D][329A]        	mov	word [string_ptr_2],COMBUF+2
 14071                                  	; 17/04/2023
 14072 00000FF8 BA[4C91]                	mov	dx,string_buf_ptr
 14073 00000FFB E8DF43                  	call	std_printf
 14074 00000FFE 26C645FF0D              	mov	byte [es:di-1],0Dh
 14075 00001003 E9ECF2                  	jmp	DOCOM		  	; run silent, run deep...
 14076                                  NOECHO3:
 14077 00001006 C606[B402]00            	mov	byte [NullFlag],0
 14078 0000100B 0E                      	push	cs
 14079 0000100C 1F                      	pop	ds
 14080                                  	;jmp	DOCOM1
 14081                                  	; 07/06/2023
 14082                                  	; Retro DOS v4.2 COMMAND.COM
 14083 0000100D E9E5F2                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 14084                                  
 14085                                  FORNESTERRJ:				; no multi-loop processing... yet!
 14086 00001010 E84601                  	call	FOROFF
 14087 00001013 E92901                  	jmp	FORNESTERR
 14088                                  
 14089                                  ; ---------------------------------------------------------------------------
 14090                                  
 14091                                  FORERRORJ:
 14092 00001016 E9D9FB                  	jmp	FORERROR
 14093                                  
 14094                                  ; ---------------------------------------------------------------------------
 14095                                  
 14096                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F24h
 14097                                  
 14098                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14099                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0FFEh
 14100                                  
 14101                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 14102                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1040h
 14103                                  _$FOR:
 14104 00001019 8E06[D19B]              	mov	es,[RESSEG]
 14105 0000101D 26803E[AB02]00          	cmp	byte [es:ForFlag],0 ; is another one already running?
 14106 00001023 75EB                    	jnz	short FORNESTERRJ   ; if flag is set.... boom!
 14107                                  
 14108                                  ; Turn off any pipes in progress.
 14109                                  
 14110 00001025 26803E[1403]00          	cmp	byte [es:PipeFiles],0 ; Only turn off if present.
 14111 0000102B 7403                    	jz	short NO_PIPE
 14112 0000102D E8B720                  	call	PIPEDEL
 14113                                  NO_PIPE:
 14114 00001030 31D2                    	xor	dx,dx			; counter (0 <= DX < argvcnt)
 14115 00001032 E8F400                  	call	NEXTARG			; move to next argv[n]
 14116 00001035 72DF                    	jc	short FORERRORJ		; no more args -- bad forloop
 14117 00001037 3C25                    	cmp	al,'%'			; next arg MUST start with '%'...
 14118 00001039 75DB                    	jne	short FORERRORJ
 14119 0000103B 89C5                    	mov	bp,ax			; save forloop variable
 14120 0000103D AC                      	lodsb
 14121 0000103E 08C0                    	or	al,al			; and MUST end immediately...
 14122 00001040 75D4                    	jnz	short FORERRORJ
 14123 00001042 E8E400                  	call	NEXTARG			; let's make sure the next arg is 'in'
 14124 00001045 72CF                    	jb	short FORERRORJ
 14125                                  	;and	ax,0DFDFh
 14126 00001047 25DFDF                  	and	ax,~2020h		; uppercase the letters
 14127                                  	; 15/02/2023
 14128                                  	;cmp	ax,4E49h  	; MSDOS 5.0
 14129                                  	;cmp	ax,[IN_WORD] 	; MSDOS 3.3
 14130                                  	;cmp	ax,in_word	; MSDOS 5.0
 14131 0000104A 3D494E                  	cmp	ax,'IN'
 14132 0000104D 75C7                    	jnz	short FORERRORJ
 14133 0000104F AC                      	lodsb
 14134                                  
 14135                                  	; 15/02/2023
 14136                                  	; MSDOS 3.3
 14137                                  	;or	al,al			; it, too, must end right away
 14138                                  	;jz	short CHECKLPAREN
 14139                                  	;cmp	al,[LPAREN]
 14140                                  	;jnz	short FORERRORJ
 14141                                  	;;add	word [bx+ARGV_ELE.argpointer],2 ; add word [bx+0],2
 14142                                  	;add	word [bx],2
 14143                                  	;;add	word [bx+9],2
 14144                                  	;add	word [bx+ARGV_ELE.arg_ocomptr],2
 14145                                  	;;sub	word [bx+5],2
 14146                                  	;sub	word [bx+ARGV_ELE.arglen],2
 14147                                  	;mov	ax,[si-1]
 14148                                  	;jmp	short LPCHECK
 14149                                  
 14150                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14151                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Bh
 14152                                  
 14153                                  	; MSDOS 6.0
 14154                                  ; Compaq bug fix -- exit from this loop on error
 14155                                  
 14156 00001050 08C0                    	or	al,al
 14157 00001052 75C2                    	jne	short FORERRORJ		; jump on error
 14158                                  
 14159                                  ;	je	short CHECKLPAREN
 14160                                  ;
 14161                                  ; Not null. Perhaps there are no spaces between this and the (:
 14162                                  ;   FOR %i in(foo bar...
 14163                                  ; Check for the Lparen here
 14164                                  ;
 14165                                  ;;	cmp	al,lparen
 14166                                  ;;	jnz	short FORERRORJ
 14167                                  ;
 14168                                  ; The token was in(... We strip off the "in" part to simulate a separator
 14169                                  ; being there in the first place.
 14170                                  ;
 14171                                  ;;	add	word [bx+ARGV_ELE.argpointer],2 ; advance source pointer
 14172                                  ;;	add	word [bx+ARGV_ELE.arg_ocomptr],2
 14173                                  ;;						; advance original string
 14174                                  ;;	sub	word [bx+ARGV_ELE.arglen],2 	; decrement the appropriate length
 14175                                  ;
 14176                                  ; SI now points past the in(.  Simulate a nextarg call that results in the
 14177                                  ; current value.
 14178                                  ;
 14179                                  ;;	mov	ax,[si-1]		; get lparen and next char
 14180                                  ;;	jmp	short LPCHECK
 14181                                  ;
 14182                                  ; end of Compaq bug fix
 14183                                  
 14184                                  ; ---------------------------------------------------------------------------
 14185                                  
 14186                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14187                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Fh
 14188                                  
 14189                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14190                                  CHECKLPAREN:
 14191 00001054 E8D200                  	call	NEXTARG			; lparen delimits beginning of <list>
 14192 00001057 72BD                    	jc	short FORERRORJ
 14193                                  LPCHECK:
 14194                                  	; 15/02/2023
 14195                                  	; MSDOS 5.0 (% MSDOS 6.0)
 14196                                  	;;cmp	al,[LPAREN]
 14197                                  	;cmp	al,lparen
 14198 00001059 3C28                    	cmp	al,'('
 14199 0000105B 75B9                    	jne	short FORERRORJ
 14200 0000105D 80FC00                  	cmp	ah,0
 14201 00001060 7410                    	je	short FOR_PAREN_TOKEN
 14202                                  	;;cmp	ah,[RPAREN]		; special case:  null list
 14203                                  	;cmp	ah,rparen
 14204 00001062 80FC29                  	cmp	ah,')'
 14205 00001065 7503                    	jne	short FOR_LIST_NOT_EMPTY
 14206 00001067 E953FE                  	jmp	FORTERM
 14207                                  FOR_LIST_NOT_EMPTY:
 14208                                  	;inc	word [bx+ARGV_ELE.argpointer] ; inc word [bx+0]
 14209 0000106A FF07                    	inc	word [bx]		; Advance ptr past "("
 14210                                  	;dec	word [bx+5]		; Adjust the rest of this argv entry
 14211 0000106C FF4F05                  	dec	word [bx+ARGV_ELE.arglen] ; to agree.
 14212 0000106F 46                      	inc	si			; Inc si so check for ")" works
 14213 00001070 EB0D                    	jmp	short FOR_LIST
 14214                                  
 14215                                  	;nop
 14216                                  FOR_PAREN_TOKEN:
 14217 00001072 E8B400                  	call	NEXTARG			; what have we in our <list>?
 14218 00001075 729F                    	jc	short FORERRORJ
 14219                                  	; 15/02/2023
 14220                                  	;;;cmp	ax,[RPAREN+1]
 14221                                  	;;cmp	ax,[NULLRPAREN]		; special case:  null list
 14222                                  	;cmp	ax,nullrparen
 14223 00001077 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 14224 0000107A 7503                    	jne	short FOR_LIST
 14225 0000107C E93EFE                  	jmp	FORTERM
 14226                                  
 14227                                  ;FORERORJJ:
 14228                                  	;jmp	FORERROR
 14229                                  
 14230                                  FOR_LIST:				; skip over rest of <list>
 14231 0000107F 89D1                    	mov	cx,dx			; first arg of <list>
 14232                                  
 14233                                  SKIP_LIST:
 14234                                  	;add	si,[bx+5]
 14235 00001081 037705                  	add	si,[bx+ARGV_ELE.arglen]
 14236 00001084 83EE03                  	sub	si,3			; si = ptr to last char of token
 14237                                  	; 15/02/2023
 14238                                  	;;mov	al,[RPAREN]
 14239                                  	;mov	al,rparen
 14240 00001087 B029                    	mov	al,')'
 14241 00001089 3804                    	cmp	[si],al			; Is this the last element in <list>
 14242 0000108B 7408                    	je	short FOR_END_LIST 	; Yes, exit loop.
 14243 0000108D E89900                  	call	NEXTARG			; No, get next arg <list>
 14244                                  	;jc	short FORERORJJ		; If no more and no rparen, error.
 14245                                  	;jmp	short SKIP_LIST
 14246                                  	; 15/02/2023
 14247 00001090 73EF                    	jnc	short SKIP_LIST
 14248                                  
 14249                                  	; 15/02/2023
 14250                                  FORERORJJ:
 14251 00001092 E95DFB                  	jmp	FORERROR
 14252                                  
 14253                                  FOR_END_LIST:
 14254 00001095 89D7                    	mov	di,dx			; record position of last arg in <list>
 14255 00001097 C60400                  	mov	byte [si],0		; Zap the rparen
 14256                                  	; 15/02/2023
 14257                                  	;;;cmp	ax,[RPAREN+1]
 14258                                  	;;cmp	ax,[NULLRPAREN] 	; Was this token only a rparen
 14259                                  	;cmp	ax,nullparen
 14260 0000109A 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 14261 0000109D 7401                    	je	short FOR_DO		; Yes, continue
 14262 0000109F 47                      	inc	di			; No, inc position of last arg
 14263                                  FOR_DO:
 14264 000010A0 E88600                  	call	NEXTARG			; now we had BETTER find a 'do'...
 14265 000010A3 72ED                    	jc	short FORERORJJ
 14266                                  	;and	ax,0DFDFh
 14267 000010A5 25DFDF                  	and	ax,~2020h		; uppercase the letters
 14268                                  	; 15/02/2023
 14269                                  	;;cmp	ax,[DO_WORD]
 14270                                  	;cmp	ax,do_word ; 4F44h
 14271 000010A8 3D444F                  	cmp	ax,'DO'	 ; 4F44h
 14272 000010AB 75E5                    	jne	short FORERORJJ
 14273 000010AD AC                      	lodsb
 14274 000010AE 08C0                    	or	al,al			; and it had BETTER be ONLY a 'do'...
 14275 000010B0 75E0                    	jnz	short FORERORJJ
 14276                                  		
 14277 000010B2 E87400                  	call	NEXTARG			; on to the beginning of <command>
 14278 000010B5 72DB                    	jc	short FORERORJJ		; null <command> not legal
 14279                                  
 14280 000010B7 50                      	push	ax
 14281 000010B8 53                      	push	bx
 14282 000010B9 51                      	push	cx
 14283 000010BA 52                      	push	dx			; preserve registers against disaster
 14284 000010BB 57                      	push	di
 14285 000010BC 56                      	push	si
 14286 000010BD 55                      	push	bp
 14287 000010BE E852F7                  	call	FREE_TPA		; need to make free memory, first
 14288 000010C1 E89500                  	call	FOROFF
 14289                                  	;mov	bx,264 ; 27/07/2024  ; MSDOS 5.0-6.22 & PCDOS 7.1	
 14290 000010C4 BB0801                  	mov	bx,FOR_INFO.size-ARG_UNIT.SIZE
 14291 000010C7 E8A927                  	call	SAVE_ARGS		; extra bytes needed for for-info
 14292 000010CA 9C                      	pushf
 14293 000010CB 26A3[AC02]              	mov	[es:ForPtr],ax
 14294 000010CF E852F7                  	call	ALLOC_TPA		; ALLOC_TPA clobbers registers...
 14295 000010D2 9D                      	popf
 14296 000010D3 5D                      	pop	bp
 14297 000010D4 5E                      	pop	si
 14298 000010D5 5F                      	pop	di
 14299 000010D6 5A                      	pop	dx
 14300 000010D7 59                      	pop	cx
 14301 000010D8 5B                      	pop	bx
 14302 000010D9 58                      	pop	ax
 14303 000010DA 723C                    	jc	short FOR_ALLOC_ERR
 14304                                  
 14305 000010DC 06                      	push	es			; save resgroup seg...
 14306 000010DD 26FF36[AC02]            	push	word [es:ForPtr]
 14307 000010E2 07                      	pop	es
 14308                                  	;assume es:for_segment
 14309 000010E3 49                      	dec	cx			; forproc wants min pointing before
 14310 000010E4 4F                      	dec	di			; first arg, max right at last one
 14311                                  	; 15/02/2023
 14312                                  	;;mov	[547h],cx
 14313                                  	; 27/07/2024
 14314                                  	;mov	[447h],cx ; PCDOS 7.1 COMMAND.COM
 14315 000010E5 26890E4704              	mov	[es:FOR_INFO.FOR_MINARG],cx
 14316                                  	;;mov	[549h],di
 14317                                  	;mov	[449h],di ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 14318 000010EA 26893E4904              	mov	[es:FOR_INFO.FOR_MAXARG],di
 14319                                  	;;mov	[544h],dl
 14320                                  	;mov	[444h],dl ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 14321 000010EF 2688164404              	mov	[es:FOR_INFO.FOR_COM_START],dl
 14322                                  	;;mov	word [545h],0FFFFh ; -1
 14323                                  	;mov	[445h],0FFFFh ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 14324 000010F4 26C7064504FFFF          	mov	word [es:FOR_INFO.FOR_EXPAND],-1
 14325                                  					; non-zero means FALSE
 14326 000010FB 89E8                    	mov	ax,bp
 14327                                  	;;mov	[64Bh],ah
 14328                                  	;mov	[54Bh],ah ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 14329 000010FD 2688264B05              	mov	[es:FOR_INFO.FOR_VAR],ah
 14330 00001102 07                      	pop	es
 14331                                  	;assume es:resgroup
 14332 00001103 26FE06[AB02]            	inc	byte [es:ForFlag]
 14333 00001108 26833E[A502]FF          	cmp	word [es:SingleCom],-1
 14334 0000110E 7507                    	jne	short FOR_RET
 14335 00001110 26C706[A502]00FF        	mov	word [es:SingleCom],0FF00h
 14336                                  FOR_RET:
 14337 00001117 C3                      	retn
 14338                                  
 14339                                  FOR_ALLOC_ERR:
 14340                                  	; 15/02/2023
 14341                                  	; MSDOS 3.3
 14342                                  	;mov	dx,INSFMEMMESPTR
 14343                                  	;jmp	CERROR
 14344                                  
 14345                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14346                                  	; MSDOS 6.0
 14347                                  	;mov	byte [msg_disp_class],1
 14348 00001118 C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class
 14349                                  					;AN000; set up extended error msg class
 14350                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 14351 0000111D BA[448F]                	mov	dx,extend_buf_ptr
 14352                                  					;AC000; get extended message pointer
 14353                                  	;mov	word [extend_buf_ptr],8
 14354 00001120 C706[448F]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 14355                                  					;AN000; get message number in control block
 14356 00001126 E9C41B                  	jmp	cerror
 14357                                  
 14358                                  
 14359                                  ; =============== S U B	R O U T	I N E =======================================
 14360                                  
 14361                                  NEXTARG:
 14362 00001129 42                      	inc	dx			; next argv[n]
 14363                                  	;cmp	dx,[ARG_ARGVCNT]
 14364 0000112A 3B16[EDA1]              	cmp	dx,[ARG+ARG_UNIT.argvcnt]
 14365                                  					; make sure we don't run off end
 14366 0000112E 7D0D                    	jge	short NEXTARG_ERR 	;  of argv[]...	
 14367 00001130 89D3                    	mov	bx,dx
 14368                                  	;mov	ax,ARG_ARGV
 14369                                  	;mov	ax,ARG+ARG_UNIT.argv
 14370 00001132 B8[2D9F]                	mov	ax,ARG
 14371 00001135 E81024                  	call	argv_calc		; convert array index to pointer
 14372 00001138 8B37                    	mov	si,[bx]			; load pointer to argstring
 14373                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 14374 0000113A AD                      	lodsw				; and load first two chars
 14375 0000113B F8                      	clc
 14376 0000113C C3                      	retn
 14377                                  NEXTARG_ERR:
 14378 0000113D F9                      	stc
 14379 0000113E C3                      	retn
 14380                                  
 14381                                  ; ---------------------------------------------------------------------------
 14382                                  
 14383                                  FORNESTERR:
 14384 0000113F 1E                      	push	ds
 14385 00001140 8E1E[D19B]              	mov	ds,[RESSEG]
 14386                                  	;ASSUME DS:RESGROUP
 14387 00001144 BA[C790]                	mov	dx,FORNESTMES_PTR
 14388 00001147 813E[A502]00FF          	cmp	word [SingleCom],0FF00h
 14389 0000114D 7506                    	jne	short NOFORP3
 14390 0000114F C706[A502]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause termination
 14391                                  NOFORP3:
 14392 00001155 1F                      	pop	ds
 14393 00001156 E9941B                  	jmp	cerror
 14394                                  
 14395                                  ; =============== S U B	R O U T	I N E =======================================
 14396                                  
 14397                                  ; General routine called to free the for segment. We also clear the forflag
 14398                                  ; too. Change no registers.
 14399                                  
 14400                                  FOROFF:
 14401 00001159 50                      	push	ax
 14402 0000115A 06                      	push	es
 14403 0000115B 2E8E06[D19B]            	mov	es,[cs:RESSEG]
 14404 00001160 26A1[AC02]              	mov	ax,[es:ForPtr]
 14405 00001164 09C0                    	or	ax,ax
 14406 00001166 7408                    	jz	short FREEDONE
 14407 00001168 06                      	push	es
 14408 00001169 8EC0                    	mov	es,ax
 14409                                  	; 15/02/2023
 14410 0000116B B449                    	mov	ah,49h
 14411                                  	;mov	ah,DEALLOC ; 49h
 14412 0000116D CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 14413                                  			; ES = segment address of area to be freed
 14414 0000116F 07                      	pop	es
 14415                                  FREEDONE:
 14416 00001170 26C706[AC02]0000        	mov	word [es:ForPtr],0
 14417 00001177 26C606[AB02]00          	mov	byte [es:ForFlag],0
 14418 0000117D 07                      	pop	es
 14419 0000117E 58                      	pop	ax
 14420 0000117F C3                      	retn
 14421                                  
 14422                                  ;============================================================================
 14423                                  ; TCMD1A.ASM, MSDOS 6.0, 1991
 14424                                  ;============================================================================
 14425                                  ; 09/10/2018 - Retro DOS v3.0
 14426                                  
 14427                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0ECBh
 14428                                  
 14429                                  ; ---------------------------------------------------------------------------
 14430                                  
 14431                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14432                                  
 14433                                  %if 0
 14434                                  
 14435                                  ; The DIR command displays the contents of a directory.
 14436                                  ;
 14437                                  ; ****************************************************************
 14438                                  ; *
 14439                                  ; * ROUTINE:	 CATALOG - display file(s) in directory
 14440                                  ; *
 14441                                  ; * FUNCTION:	 PARSE command line for drive, file, or path name.
 14442                                  ; *		 DIR allows two switches, /P (pause) and /W (wide).
 14443                                  ; *		 If an error occurs issue and error message and
 14444                                  ; *		 transfer control to CERROR.
 14445                                  ; *
 14446                                  ; * INPUT:	 command line at offset 81H
 14447                                  ; *
 14448                                  ; * OUTPUT:	 none
 14449                                  ; *
 14450                                  ; ****************************************************************
 14451                                  
 14452                                  CATALOG:
 14453                                  	; MSDOS 3.3
 14454                                  
 14455                                  	;mov	ax,ARG_ARGV
 14456                                  	;mov	ax,ARG+ARG_UNIT.argv
 14457                                  	mov	ax,ARG
 14458                                  	mov	dx,0FFFFh
 14459                                  	xor	cx,cx
 14460                                  	xor	si,si
 14461                                  DIR1:
 14462                                  	;cmp	cx,[ARG_ARGVCNT]
 14463                                  	cmp	cx,[ARG+ARG_UNIT.argvcnt]
 14464                                  	jnb	short DIR6 ; No more arguments
 14465                                  	mov	bx,cx
 14466                                  	call	ARGV_CALC
 14467                                  	;or	si,[bx+7]
 14468                                  	or	si,[bx+ARGV_ELE.argsw_word]
 14469                                  	test	si,7FFCh  ; test si,~8003
 14470                                  	jnz	short DIR2  ; /A,/B,/V switches (are invalid)
 14471                                  	;test	byte [bx+2],1
 14472                                  	test	byte [bx+ARGV_ELE.argflags],sw_flag  ; 1
 14473                                  	jz	short DIR3
 14474                                  	jmp	short DIR5
 14475                                  DIR2:
 14476                                  	mov	dx,BADPARMPTR
 14477                                  	jmp	CERROR
 14478                                  DIR3:
 14479                                  	or	cx,cx
 14480                                  	jnz	short DIR4	
 14481                                  	;cmp	word [bx+5],3
 14482                                  	cmp	word [bx+ARGV_ELE.arglen],3
 14483                                  	jz	short DIR5
 14484                                  	;add	word [bx+ARGV_ELE.argpointer],3 ; add word [bx+0],3
 14485                                  	add	word [bx],3
 14486                                  	;add	word [bx+9],3
 14487                                  	add	word [bx+ARGV_ELE.arg_ocomptr],3
 14488                                  	;add	word [bx+3],3
 14489                                  	add	word [bx+ARGV_ELE.argstartel],3
 14490                                  	;sub	word [bx+5],3
 14491                                  	sub	word [bx+ARGV_ELE.arglen],3
 14492                                  DIR4:
 14493                                  	cmp	dx,0FFFFh
 14494                                  	jnz	short DIR2
 14495                                  	mov	dx,bx
 14496                                  DIR5:
 14497                                  	inc	cx
 14498                                  	jmp	short DIR1
 14499                                  DIR6:
 14500                                  	mov	[COMSW],si
 14501                                  	push	dx
 14502                                  	xor	al,al
 14503                                  	cmp	dx,0FFFFh
 14504                                  	jz	short DIR7
 14505                                  	mov	bx,dx
 14506                                  	;mov	di,[bx+ARGV_ELE.argpointer]  ;mov di,[bx+0]
 14507                                  	mov	di,[bx]
 14508                                  	cmp	byte [di+1],':'
 14509                                  	jnz	short DIR7
 14510                                  	mov	al,[di]
 14511                                  	or	al,20h		; Lowercase drive name	
 14512                                  	sub	al,'a'-1 ; 60h  ; Convert to drive number (0,1..)
 14513                                  DIR7:
 14514                                  	;mov	[5CH],al
 14515                                  	mov	[FCB],al
 14516                                  	call	OKVOLARG
 14517                                  	mov	al,'?'		; *.* is default file spec.
 14518                                  	;mov	di,5Dh
 14519                                  	mov	di,FCB+1
 14520                                  	mov	cx,11
 14521                                  	rep stosb
 14522                                  
 14523                                  ; Begin by processing any switches that may have been specified.
 14524                                  ; BITS will contain any information about switches that was
 14525                                  ; found when the command line was parsed.
 14526                                  
 14527                                  	mov	ax,[COMSW]	; Get switches from command
 14528                                  	mov	[_BITS],ax	; initialize switches
 14529                                  	mov	word [COMSW],0	; initialize flags
 14530                                  	mov	byte [LINPERPAG],23 ; Set default for lines per page
 14531                                  	;test	al,1
 14532                                  	test	al,SWITCHW	; /W ?
 14533                                  	;mov	al,1
 14534                                  	mov	al,NORMPERLIN
 14535                                  	jz	short DIR8
 14536                                  	;mov	al,5
 14537                                  	mov	al,WIDEPERLIN
 14538                                  DIR8:
 14539                                  	mov	[LINLEN],al	; Set number of entries per line
 14540                                  	mov	[LINCNT],al
 14541                                  	mov	word [FILECNT],0 ; Keep track of how many files found
 14542                                  	mov	dx,DIRBUF
 14543                                  	mov	ah,Set_DMA ; 1Ah
 14544                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 14545                                  			; DS:DX	-> disk	transfer buffer
 14546                                  	;mov	dl,[5Ch]
 14547                                  	mov	dl,[FCB]
 14548                                  	call	SAVUDIR
 14549                                  	pop	bx
 14550                                  	cmp	bx,0FFFFh
 14551                                  	jz	short DIR9
 14552                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 14553                                  	mov	dx,[bx]
 14554                                  
 14555                                  ; The user may have specified a device. Search for the path and see if the
 14556                                  ; attributes indicate a device.
 14557                                  
 14558                                  	mov	ah,Find_First ; 4Eh
 14559                                  	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 14560                                  			; CX = search attributes
 14561                                  			; DS:DX	-> ASCIZ filespec
 14562                                  			; (drive,path, and wildcards allowed)
 14563                                  	jc	short DIR10
 14564                                  			; Check device atrribute..
 14565                                  	;test	byte [DIRBUF_ATTRIB2],40h
 14566                                  	;test	byte [DIRBUF_ATTRIB2],ATTR_DEVICE
 14567                                  	; 14/10/2018
 14568                                  	;test	byte [DIRBUF+21],40h
 14569                                  	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 14570                                  	jz	short DIR10	; no, go do normal operation
 14571                                  	mov	word [COMSW],-2 ; 0FFFEh  ; Signal device
 14572                                  DIR9:
 14573                                  	jmp	short DOHEADER
 14574                                  DIR10:
 14575                                  	;mov	dx,[bx+ARGV_ELE.argpointer]
 14576                                  	mov	dx,[bx]
 14577                                  	mov	ah,CHDir ; 3Bh
 14578                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 14579                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 14580                                  	jnc	short DOHEADER
 14581                                  	;mov	si,[bx+3]
 14582                                  	mov	si,[bx+ARGV_ELE.argstartel]
 14583                                  	cmp	dx,si
 14584                                  	jz	short DIR_NO_DRIVE
 14585                                  	xor	cl,cl
 14586                                  	xchg	cl,[si]
 14587                                  	mov	ah,CHDir ; 3Bh
 14588                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 14589                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 14590                                  	xchg	cl,[si]
 14591                                  	jnc	short DIR_NO_DRIVE
 14592                                  	mov	al,[si-1]
 14593                                  	call	PATHCHRCMP
 14594                                  	jnz	short DIR11
 14595                                  	mov	al,[si-2]
 14596                                  	call	PATHCHRCMP
 14597                                  	jz	short DIR12
 14598                                  	xchg	cl,[si-1]
 14599                                  	mov	ah,CHDir ; 3Bh
 14600                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 14601                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 14602                                  	xchg	cl,[si-1]
 14603                                  	jnc	short DIR_NO_DRIVE
 14604                                  DIR11:
 14605                                  	mov	ch,':'
 14606                                  	cmp	ch,[si-1]
 14607                                  	jnz	short DIR12
 14608                                  	;mov	cx,[bx+ARGV_ELE.argpointer] ; mov cx,[bx+0]
 14609                                  	mov	cx,[bx]
 14610                                  	xchg	cx,si
 14611                                  	sub	cx,si
 14612                                  	cmp	cx,2
 14613                                  	jz	short DIR_NO_DRIVE
 14614                                  DIR12:
 14615                                  	mov	dx,BADCDPTR
 14616                                  	;test	byte [bx+2],4
 14617                                  	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 14618                                  	jnz	short DIRERROR
 14619                                  DIRNF:
 14620                                  	mov	dx,FNOTFOUNDPTR
 14621                                  DIRERROR:
 14622                                  	jmp	CERROR
 14623                                  DIR_NO_DRIVE:
 14624                                  	cmp	word [si],'..'
 14625                                  	jnz	short DOREALPARSE
 14626                                  	cmp	byte [si+2],0
 14627                                  	jnz	short DOREALPARSE
 14628                                  	inc	word [COMSW]
 14629                                  	jmp	short DOHEADER
 14630                                  DOREALPARSE:
 14631                                  	mov	di,FCB ; 5Ch	
 14632                                  	;mov	ax,290Eh
 14633                                  	mov	ax,(Parse_File_Descriptor<<8)|0Eh
 14634                                  	int	21h	; DOS -	PARSE FILENAME
 14635                                  			; DS:SI	-> string to parse
 14636                                  			; ES:DI	-> buffer to fill with unopened	FCB
 14637                                  			; AL = bit mask	to control parsing
 14638                                  	cmp	byte [si],0
 14639                                  	jz	short DOHEADER
 14640                                  	dec	word [COMSW]
 14641                                  DOHEADER:
 14642                                  		
 14643                                  ; Display the header
 14644                                  
 14645                                  	push	bx
 14646                                  	call	BUILD_DIR_STRING
 14647                                  	mov	dx,DIRBUF
 14648                                  	mov	[VOL_DIR],dx
 14649                                  	mov	dx,DIRHEADPTR
 14650                                  	call	PRINTF_CRLF
 14651                                  	pop	bx
 14652                                  	cmp	bx,0FFFFh
 14653                                  	jz	short DOSEARCH
 14654                                  
 14655                                  ; If there were chars left after parse or device, then invalid file name
 14656                                  
 14657                                  	cmp	word [COMSW],0
 14658                                  	jz	short DOSEARCH	; nothing left; good parse
 14659                                  	jl	short DIRNFFIX	; not .. => error file not found
 14660                                  	call	RESTUDIR
 14661                                  	mov	dx,BADCDPTR
 14662                                  	jmp	CERROR		; was .. => error directory not found
 14663                                  DIRNFFIX:
 14664                                  	call	RESTUDIR
 14665                                  	jmp	short DIRNF
 14666                                  
 14667                                  ; We are assured that everything is correct. Let's go and search. Use
 14668                                  ; attributes that will include finding directories. Perform the first search
 14669                                  ; and reset our directory afterward.
 14670                                  
 14671                                  DOSEARCH:
 14672                                  	;mov	byte [55h],0FFh
 14673                                  	mov	byte [FCB-7],0FFh
 14674                                  	;mov	byte [5Bh],10h
 14675                                  	mov	byte [FCB-1],10h
 14676                                  
 14677                                  ; Caution! Since we are using an extended FCB, we will *also* be returning
 14678                                  ; the directory information as an extended FCB. We must bias all fetches into
 14679                                  ; DIRBUF by 8 (Extended FCB part + drive)
 14680                                  
 14681                                  	mov	ah,Dir_Search_First ; 11h
 14682                                  	mov	dx,FCB-7 ; 55h
 14683                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 14684                                  			; DS:DX	-> FCB
 14685                                  
 14686                                  ; Restore the user's directory. We preserve, though, the return from the
 14687                                  ; previous system call for later checking.
 14688                                  
 14689                                  FOUND_FIRST_FILE:
 14690                                  	push	ax		; save return state
 14691                                  	call	RESTUDIR	; restore user's dir	
 14692                                  	pop	ax		; get return state back
 14693                                  
 14694                                  ; Main scanning loop. Entry has AL = Search first/next error code. Test for
 14695                                  ; no more.
 14696                                  
 14697                                  DIRSTART:
 14698                                  	inc	al		; 0FFh = file not found
 14699                                  	jnz	short DISPLAY	; Either an error or we are finished
 14700                                  	jmp	CHKCNT
 14701                                  DISPLAY:
 14702                                  	inc	word [FILECNT]	; Keep track of how many we find
 14703                                  	mov	si,DIRBUF+8	; SI -> information returned by sys call
 14704                                  	;call	SHONAME
 14705                                  	call	DISPLAYNAME
 14706                                  	;test	byte [_BITS],1
 14707                                  	test	byte [_BITS],SWITCHW ; W switch set?
 14708                                  	jz	short DIRTEST	; If so, no size, date, or time
 14709                                  	jmp	NEXENT
 14710                                  DIRTEST:
 14711                                  	;test	byte [DIRBUF_ATTRIB1],10h
 14712                                  	; 14/10/2018
 14713                                  	;test	byte [DIRBUF_ATTRIB1],ATTR_DIRECTORY
 14714                                  	;test	byte [DIRBUF+19],10h
 14715                                  	test	byte [DIRBUF+8+DIR_ENTRY.DIR_ATTR],ATTR_DIRECTORY
 14716                                  	jz	short FILEENT
 14717                                  	mov	dx,DMESPTR
 14718                                  	call	STD_PRINTF
 14719                                  	jmp	short NOFSIZ
 14720                                  FILEENT:
 14721                                  	;mov	dx,[DIRBUF_FSIZ_L]
 14722                                  	;mov	dx,[DIRBUF+36]
 14723                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_L]
 14724                                  	mov	[FILESIZE_L],dx
 14725                                  	;mov	dx,[DIRBUF_FSIZ_H]
 14726                                  	;mov	dx,[DIRBUF+38]
 14727                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_H]
 14728                                  	mov	[FILESIZE_H],dx
 14729                                  	mov	dx,FSIZEMESPTR
 14730                                  	call	STD_PRINTF	; Print size of file
 14731                                  NOFSIZ:
 14732                                  	;mov	ax,[DIRBUF_FDATE]  ; Get date
 14733                                  	;mov	ax,[DIRBUF+32]
 14734                                  	mov	ax,[DIRBUF+8+DIR_ENTRY.DIR_DATE]
 14735                                  	or	ax,ax
 14736                                  	jz	short NEXENT	; Skip if no date
 14737                                  	mov	di,CHARBUF
 14738                                  	push	ax
 14739                                  	mov	ax,'  '
 14740                                  	stosw
 14741                                  	pop	ax
 14742                                  	mov	bx,ax
 14743                                  	and	ax,1Fh		; Get day
 14744                                  	mov	dl,al
 14745                                  	mov	ax,bx
 14746                                  	mov	cl,5
 14747                                  	shr	ax,cl		; Align month
 14748                                  	and	al,0Fh		; Get month
 14749                                  	mov	dh,al
 14750                                  	mov	cl,bh
 14751                                  	shr	cl,1		; Align year
 14752                                  	xor	ch,ch
 14753                                  	add	cx,80		; Relative 1980
 14754                                  	cmp	cl,100
 14755                                  	jb	short MILLENIUM
 14756                                  	sub	cl,100
 14757                                  MILLENIUM:
 14758                                  	call	DATE_CXDX
 14759                                  	;mov	cx,[DIRBUF_FTIME]
 14760                                  	;mov	cx,[DIRBUF+30]
 14761                                  	mov	cx,[DIRBUF+8+DIR_ENTRY.DIR_TIME]
 14762                                  	jcxz	PRBUF		; Time field present?
 14763                                  	mov	ax,2020h
 14764                                  	stosw
 14765                                  	shr	cx,1
 14766                                  	shr	cx,1
 14767                                  	shr	cx,1
 14768                                  	shr	cl,1
 14769                                  	shr	cl,1		; Hours in CH, minutes in CL
 14770                                  	mov	bl,[TIME_24]
 14771                                  	or	bl,80h		; Tell P_TIME called from DIR
 14772                                  	call	P_TIME		; Don't care about DX, never used with DIR
 14773                                  PRBUF:
 14774                                  	xor	ax,ax
 14775                                  	stosb
 14776                                  	mov	dx,CHARBUF
 14777                                  	mov	[STRING_PTR_2],dx
 14778                                  	mov	dx,STRINGBUF2PTR
 14779                                  	call	STD_PRINTF
 14780                                  NEXENT:
 14781                                  	dec	byte [LINCNT]
 14782                                  	jnz	short SAMLIN
 14783                                  NEXLIN:
 14784                                  	mov	al,[LINLEN]
 14785                                  	mov	[LINCNT],al
 14786                                  	call	CRLF2
 14787                                  	dec	byte [LINPERPAG]
 14788                                  	jnz	short SCROLL
 14789                                  	;test	byte [_BITS],2
 14790                                  	test	byte [_BITS],SWITCHP ; P switch present?
 14791                                  	jz	short SCROLL	; If not, just continue
 14792                                  	mov	byte [LINPERPAG],23
 14793                                  	call	PAUSE
 14794                                  	jmp	short SCROLL
 14795                                  SAMLIN:
 14796                                  	mov	dx,TABPTR	; Output a tab
 14797                                  	call	STD_PRINTF
 14798                                  SCROLL:
 14799                                  	mov	ah,Dir_Search_Next ; 12h
 14800                                  	;mov	dx,55h
 14801                                  	mov	dx,FCB-7	; DX -> Unopened FCB
 14802                                  	int	21h	; DOS -	SEARCH NEXT USING FCB
 14803                                  			; DS:DX	-> FCB
 14804                                  			; Return: AL = status
 14805                                  	jmp	DIRSTART
 14806                                  CHKCNT:
 14807                                  	test	word [FILECNT],0FFFFh ; -1
 14808                                  	jnz	short TRAILER
 14809                                  	jmp	DIRNF
 14810                                  TRAILER:
 14811                                  	mov	al,[LINLEN]
 14812                                  	cmp	al,[LINCNT]
 14813                                  	jz	short MMESSAGE
 14814                                  	call	CRLF2
 14815                                  MMESSAGE:
 14816                                  	mov	dx,DIRMESPTR
 14817                                  	mov	si,[FILECNT]
 14818                                  	mov	[DIR_NUM],si
 14819                                  	call	STD_PRINTF
 14820                                  DTFREE:
 14821                                  	mov	ah,GET_DRIVE_FREESPACE ; 36h
 14822                                  	;mov	dl,[5Ch]
 14823                                  	mov	dl,[FCB]
 14824                                  	int	21h	; DOS -	2+ - GET DISK SPACE
 14825                                  			; DL = drive code (0 = default,	1 = A,2 = B,etc.)
 14826                                  	cmp	ax,-1
 14827                                  	jnz	short DTFREE1
 14828                                  DTRET:
 14829                                  	retn
 14830                                  DTFREE1:
 14831                                  	mul	cx
 14832                                  	mul	bx
 14833                                  	mov	[BYTES_FREE],ax
 14834                                  	mov	[BYTES_FREE+2],dx
 14835                                  	mov	dx,BYTEMESPTR
 14836                                  	jmp	STD_PRINTF
 14837                                  
 14838                                  ; =============== S U B	R O U T	I N E =======================================
 14839                                  
 14840                                  SHONAME:
 14841                                  DISPLAYNAME:
 14842                                  	; MSDOS 3.3
 14843                                  	mov	di,CHARBUF
 14844                                  	mov	cx,8
 14845                                  	rep	movsb
 14846                                  	mov	al,' '
 14847                                  	stosb
 14848                                  	mov	cx,3
 14849                                  	rep	movsb
 14850                                  	xor	ax,ax
 14851                                  	stosb
 14852                                  	push	dx
 14853                                  	mov	dx,CHARBUF
 14854                                  	mov	[STRING_PTR_2],dx
 14855                                  	mov	dx,STRINGBUF2PTR
 14856                                  	call	STD_PRINTF
 14857                                  	pop	dx
 14858                                  	retn
 14859                                  
 14860                                  %endif
 14861                                  
 14862                                  ;============================================================================
 14863                                  ; DIR.ASM, MSDOS 6.0, 1991
 14864                                  ;============================================================================
 14865                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14866                                  
 14867                                  	; MSDOS 6.0
 14868                                  %if 0
 14869                                  
 14870                                  ;***	DIR.ASM - DIR internal command
 14871                                  
 14872                                  comment	% =================================================================
 14873                                  
 14874                                  This module replaces TCMD1A.ASM.  The old module was titled 
 14875                                  "PART4 COMMAND Transient routines".
 14876                                  
 14877                                  From residual documentation, I surmise that TCMD.ASM originally
 14878                                  contained the internal commands DIR, PAUSE, ERASE, TYPE, VOL, and
 14879                                  VER.  The file seems to have been successively split:
 14880                                  
 14881                                    TCMD -> TCMD1,TCMD2 -> TCMD1A,TCMD1B,TCMD2A,TCMD2B
 14882                                  
 14883                                  TCMD1A.ASM contained only the DIR command.
 14884                                  
 14885                                  Usage:
 14886                                  ------
 14887                                  
 14888                                  DIR <filespec> /w /p /b /s /l /c /o<sortorder> /a<attriblist>
 14889                                  
 14890                                  DIR /?
 14891                                  
 14892                                  
 14893                                  <filespec> may include any or none of:  drive; directory path;
 14894                                             wildcarded filename.  If drive or directory path are
 14895                                  	   omitted, the current defaults are used.  If the
 14896                                  	   file name or extension is omitted, wildcards are
 14897                                  	   assumed.
 14898                                  
 14899                                  /w	Wide listing format.  Files are displayed in compressed
 14900                                  	'name.ext' format.  Subdirectory files are enclosed in
 14901                                  	brackets, '[dirname]'.
 14902                                  
 14903                                  /p	Paged, or prompted listing.  A screenful is displayed
 14904                                  	at a time.  The name of the directory being listed appears
 14905                                  	at the top of each page.
 14906                                  
 14907                                  	Bugbug:  pages nead to be uniform length..?
 14908                                  
 14909                                  /b	Bare listing format.  Turns off /w or /p.  Files are 
 14910                                  	listed in compressed 'name.ext' format, one per line,
 14911                                  	without additional information.  Good for making batch
 14912                                  	files or for piping.  When used with /s, complete
 14913                                  	pathnames are listed.
 14914                                  
 14915                                  /s	Descend subdirectory tree.  Performs command on current
 14916                                  	or specified directory, then for each subdirectory below
 14917                                  	that directory.  Directory header and footer is displayed
 14918                                  	for each directory where matching files are found, unless
 14919                                  	used with /b.  /b suppresses headers and footers.
 14920                                  
 14921                                  	Tree is explored depth first, alphabetically within the
 14922                                  	same level.
 14923                                  
 14924                                  	Bugbug:  hidden directories aren't searched.
 14925                                  
 14926                                  /l	Display file names, extensions and paths in lowercase.	;M010
 14927                                  
 14928                                  /c	Display file compression ratio, if the file is on a MagicDrv
 14929                                  	compressed volume.
 14930                                  
 14931                                  /o	Sort order.  /o alone sorts by default order (dirs-first, name,
 14932                                  	extension).  A sort order may be specified after /o.  Any of
 14933                                  	the following characters may be used: nedsgc (name, extension,
 14934                                  	date/time, size, group-dirs-first, compression ratio).	Placing
 14935                                  	a '-' before any letter causes a downward sort on that field.
 14936                                  	E.g., /oe-d means sort first by extension in alphabetical order,
 14937                                  	then within each extension sort by date and time in reverse
 14938                                  	chronological order.
 14939                                  
 14940                                  /a	Attribute selection.  Without /a, hidden and system files
 14941                                  	are suppressed from the listing.  With /a alone, all files
 14942                                  	are listed.  An attribute list may follow /a, consisting of
 14943                                  	any of the following characters:  hsdar (hidden, system,
 14944                                  	directory, archive, read-only).  A '-' before any letter
 14945                                  	means 'not' that attribute.  E.g., /ar-d means files that
 14946                                  	are marked read-only and are not directory files.  Note
 14947                                  	that hidden or system files may be included in the listing.
 14948                                  	They are suppressed without /a but are treated like any other
 14949                                  	attribute with /a.
 14950                                  
 14951                                  /?	Help listing.  Display DIR useage information.	;M008;Handled externally
 14952                                  
 14953                                  /h has been removed.					;M008
 14954                                  
 14955                                  DIRCMD	An environment variable named DIRCMD is parsed before the
 14956                                  	DIR command line.  Any command line options may be specified
 14957                                  	in DIRCMD, and become defaults.  /? will be ignored in DIRCMD.
 14958                                  	A filespec may be specified in DIRCMD and will be used unless
 14959                                  	a filespec is specified on the command line.  Any switch
 14960                                  	specified in DIRCMD may be overridden on the command line.
 14961                                  	If the original DIR default action is desired for a particular
 14962                                  	switch, the switch letter may be preceded by a '-' on the
 14963                                  	command line.  E.g.,
 14964                                  
 14965                                  	  /-w	use long listing format
 14966                                  	  /-p	don't page the listing
 14967                                  	  /-b	don't use bare format
 14968                                  	  /-s	don't descend subdirectory tree
 14969                                  	  /-o	display files in disk order
 14970                                  	  /-a	suppress hidden and system files
 14971                                  
 14972                                  Notes:
 14973                                  ------
 14974                                  
 14975                                  For sorted listings, file entries are loaded into the TPA buffer, which
 14976                                  is usually about 64K in size.  This allows sorts of up to 3000 files at
 14977                                  a time.  Each entry takes up 21 bytes in the buffer (see EntryStruc below).
 14978                                  The byte after the last entry is 0FFh.  The first byte of each entry is
 14979                                  a flag byte which is made zero when the entry is loaded, and made one
 14980                                  when the entry is used.
 14981                                  
 14982                                  Revision History
 14983                                  ================
 14984                                  M01	md	7/13/90 	Use ROM BIOS data area to obtain screen height
 14985                                  				in the absence of ANSI.SYS
 14986                                  
 14987                                  M007	sa	8/1/90		Allow /p/b combination
 14988                                  
 14989                                  M008	sa	8/1/90		Remove /h parameter.  Eliminate code used
 14990                                  				to internally handle /? message.
 14991                                  
 14992                                  M010	sa	8/5/90		Add support for /l (lowercase) option.
 14993                                  
 14994                                  M011	sa	8/5/90		Patch up bug where MS-DOS does not load the
 14995                                  				first FCB with the drive number when the drive
 14996                                  				letter in the command line is preceded by a
 14997                                  				switch.  Now dir manually loads the drive
 14998                                  				number after parsing.
 14999                                  
 15000                                  M018	md	8/12/90 	Increment the screen height by 1 when obtained
 15001                                  				from the ROM BIOS.
 15002                                  
 15003                                  M023	sa	8/31/90		Prevent DIR from failing if it encounters
 15004                                  				a subdirectory having len(pathname)>MAXPATH.
 15005                                  				Just skip over that subdirectory.
 15006                                  
 15007                                  M028	dbo	9/24/90		When country=US, sort by strict character
 15008                                  				byte value, rather than collating table.
 15009                                  				This to match MS-DOS Shell's sort order.
 15010                                  
 15011                                  ========================================================================= %
 15012                                  
 15013                                  %endif
 15014                                  
 15015                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM (PCDOS 7.1)
 15016                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22)
 15017                                  ;ifdef DBLSPACE_HOOKS
 15018                                  ;NUM_DIR_SWS	equ	16	; # of dir switch synonyms in Dir_Sw_Ptrs list
 15019                                  ; 28/07/2024 - PCDOS 7.1 COMMAND.COM
 15020                                  NUM_DIR_SWS	equ	18
 15021                                  ;else
 15022                                  ; 16/02/2023 - Retro DOS v4.0 (v4.1) COMMAND.COM (MSDOS 5.0)
 15023                                  ;NUM_DIR_SWS	equ	14	; # of dir switch synonyms in Dir_Sw_Ptrs list
 15024                                  ;endif
 15025                                  
 15026                                  ;OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 15027                                  ;
 15028                                  ;		on/off bit record for /l, /b, /s, /p, /w, /c options
 15029                                  ;		(order is hard-coded; see OnOffSw)
 15030                                  ;		Inmem is set when entries are loaded in memory.
 15031                                  
 15032                                  ; 28/07/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM
 15033                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM (MSDOS 5.0)
 15034                                  mask.wide  equ 1	; dir /W switch
 15035                                  mask.pagd  equ 2	; dir /P switch
 15036                                  mask.subd  equ 4	; dir /S switch
 15037                                  mask.bare  equ 8	; dir /B switch
 15038                                  mask.lcase equ 16	; dir /L switch	
 15039                                  ;mask.inmem equ 32	;
 15040                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15041                                  mask.narrow equ 32	; dir /Z switch
 15042                                  mask.year4 equ 64	; dir /4 switch	
 15043                                  mask.inmem equ 128	; 
 15044                                  
 15045                                  ; 28/07/2024
 15046                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 15047                                  ;ifdef DBLSPACE_HOOKS
 15048                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1,cratio:1
 15049                                  ;else
 15050                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 15051                                  ;endif
 15052                                  ;mask.cratio equ 1
 15053                                  ;mask.wide   equ 2
 15054                                  ;mask.pagd   equ 4
 15055                                  ;mask.subd   equ 8
 15056                                  ;mask.bare   equ 16
 15057                                  ;mask.lcase  equ 32
 15058                                  ;mask.inmem  equ 64
 15059                                  ;
 15060                                  mask.dev    equ 1
 15061                                  mask.baddir equ 2	
 15062                                  
 15063                                  NUM_ATTR_LTRS	equ	6	; length of attribute letter list
 15064                                  
 15065                                  ; 05/06/2023
 15066                                  ;ifdef DBLSPACE_HOOKS
 15067                                  NUM_ORDER_LTRS	equ	6	; length of sort order letter list
 15068                                  CRATIO_ORDER	equ	6	; position of 'C' in ORDER_LTRS
 15069                                  ;else
 15070                                  ;NUM_ORDER_LTRS	equ	5	; length of sort order letter list
 15071                                  ;endif
 15072                                  
 15073                                  ;ResultBuffer	struc		; structure of parse result buffer
 15074                                  ;ValueType	db	?
 15075                                  ;ValueTag	db	?
 15076                                  ;SynPtr		dw	?
 15077                                  ;ValuePtr	dd	?
 15078                                  ;ResultBuffer	ends
 15079                                  
 15080                                  ;ErrorRec	record	baddir:1,dev:1
 15081                                  ;
 15082                                  ;		Error bits are:
 15083                                  ;		  Invalid directory format
 15084                                  ;		  File is device
 15085                                  
 15086                                  ;EntryStruc	struc			; our private directory entry structure
 15087                                  ;used		db	?		; =0 until entry used, then =1
 15088                                  ;filename	db	8 dup (?)	; filename
 15089                                  ;fileext	db	3 dup (?)	; extension
 15090                                  ;fileattr	db	?		; file attributes
 15091                                  ;filetime	dw	?		; file time
 15092                                  ;filedate	dw	?		; file date
 15093                                  ;filesize	dd	?		; file size
 15094                                  ; 05/06/2023
 15095                                  ;;ifdef DBLSPACE_HOOKS
 15096                                  ;compratio	db	?		; compression ratio
 15097                                  ;;endif
 15098                                  ;EntryStruc	ends
 15099                                  
 15100                                  ;shove	macro	val		; hose-bag 8086 doesn't push immediate
 15101                                  ;	mov	ax,val		; invisible, dangerous use of AX!
 15102                                  ;	push	ax
 15103                                  ;	endm
 15104                                  
 15105                                  ;	public	Catalog		; our entry point
 15106                                  ;
 15107                                  ;	break	<DIR (Catalog) principal routines>
 15108                                  ;
 15109                                  ;	assume	cs:TRANGROUP,ds:TRANGROUP,es:nothing,ss:TRANGROUP
 15110                                  ; ---------------------------------------------------------------------------
 15111                                  ;	Bugbug:	Each routine should start with it's own ASSUME.
 15112                                  
 15113                                  ;----------------------------------------------------------------------------
 15114                                  ;----------------------------------------------------------------------------
 15115                                  
 15116                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15117                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:108Dh
 15118                                  
 15119                                  ;***	Catalog - DIR command main routine
 15120                                  ;
 15121                                  ;	ENTRY	FCB #1 in PSP has drive# from cmd-line or default
 15122                                  ;		Cmd-line tail text is at 81h, terminated by 0Dh
 15123                                  ;		CS, DS, ES, SS = TRANGROUP seg addr
 15124                                  ;		Tpa = TPA buffer seg addr
 15125                                  ;		BytCnt = # bytes in TPA buffer
 15126                                  ;
 15127                                  ;	EXIT	nothing
 15128                                  ;
 15129                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15130                                  ;
 15131                                  ;	ERROR EXITS
 15132                                  ;
 15133                                  ;	  Errors are handled by setting up error message pointers
 15134                                  ;	   for Std_EPrintf and jumping to CError. Syntax errors in
 15135                                  ;	   the environment variable, however, are handled by printing
 15136                                  ;	   an error message and continuing.
 15137                                  ;
 15138                                  ;	EFFECTS
 15139                                  ;
 15140                                  ;	  Directory listing is displayed (on standard output).
 15141                                  ;	  APPEND is disabled. HeadFix routine is expected to
 15142                                  ;	   restore APPEND state.
 15143                                  ;	  Working directory may be changed. The user's default
 15144                                  ;	   directory is saved and flagged for restoration by RestUDir
 15145                                  ;	   during COMMAND cycle.
 15146                                  ;	  Lots of variables may be changed in TRANSPACE segment.
 15147                                  ;
 15148                                  ;	NOTES
 15149                                  ;
 15150                                  ;	  ES = TRANGROUP seg addr except when used to address the
 15151                                  ;	   the TPA buffer, where directory entries are loaded from disk.
 15152                                  
 15153                                  	; 16/02/2023
 15154                                  
 15155                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15156                                  ; ----------------------------------------
 15157                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:1167h
 15158                                  
 15159                                  ; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 15160                                  ;----------------------------------------------------------------------------
 15161                                  ; PCDOS 7.1 COMMAND.COM - TRANGROUP:11B7h
 15162                                  
 15163                                  CATALOG:
 15164                                  
 15165                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15166                                  %if 0
 15167                                  	; 07/06/2023
 15168                                  	; MSDOS 6.22 COMMAND COM feature only !
 15169                                  	call    screen_f_set	; set display parameters for video/text mode
 15170                                  	;			; (different depending on scr width/columns)
 15171                                  	call	SetDefaults
 15172                                  	call	ParseEnvironment
 15173                                  	call	ParseCmdLine
 15174                                  	jnc	short catalog1	; no parse error
 15175                                  	;jmp	catErr		; error msg is set up
 15176                                  	; 07/06/2023
 15177                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMANBD.COM
 15178                                  	jmp	catExtErr2
 15179                                  %else
 15180                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 15181                                  	; PCDOS 7.1 COMMAND.COM
 15182 00001180 C606[0A9C]00            	mov	byte [nocommas],0
 15183 00001185 C606[0C9C]00            	mov	byte [bfree_not_kilo],0
 15184                                  				; use kilobyte if number of bytes is very big
 15185 0000118A 50                      	push	ax
 15186 0000118B 51                      	push	cx
 15187 0000118C 57                      	push	di
 15188 0000118D 56                      	push	si
 15189 0000118E 06                      	push	es
 15190 0000118F BE[7992]                	mov	si,no_sep_text	; NO_SEP=1 ; Removes the commas from numbers
 15191 00001192 E8E914                  	call	find_name_in_environment
 15192 00001195 720A                    	jb	short catalog0
 15193 00001197 C606[0C9C]FF            	mov	byte [bfree_not_kilo],0FFh 
 15194                                  				; no need to kilobyte (short) display
 15195 0000119C C606[0A9C]FF            	mov	byte [nocommas],0FFh
 15196                                  				; do not use commas for displaying numbers
 15197                                  catalog0:
 15198 000011A1 07                      	pop	es
 15199 000011A2 5E                      	pop	si
 15200 000011A3 5F                      	pop	di
 15201 000011A4 59                      	pop	cx
 15202 000011A5 58                      	pop	ax
 15203 000011A6 E8D000                  	call	SetDefaults
 15204 000011A9 E8F400                  	call	ParseEnvironment
 15205 000011AC E80C01                  	call	ParseCmdLine
 15206 000011AF 7303                    	jnc	short catalog1	; no parse error
 15207                                  	;jmp	catErr
 15208                                  	; 31/07/2024
 15209 000011B1 E9C200                  	jmp	catExtErr2
 15210                                  %endif
 15211                                   
 15212                                  catalog1:
 15213 000011B4 E83501                  	call	SetOptions
 15214 000011B7 E80B01                  	call	SetCollatingTable
 15215                                  
 15216                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15217                                  %if 1
 15218 000011BA C606[099C]00            	mov	byte [narrow],0
 15219                                  	;test	byte [_Bits],20h	; /Z switch (narrow)
 15220 000011BF F606[6A9D]20            	test	byte [_Bits],mask.narrow ; 20h
 15221 000011C4 740A                    	jz	short catalog1_1
 15222 000011C6 C606[099C]FF            	mov	byte [narrow],0FFh
 15223 000011CB C606[0A9C]FF            	mov	byte [nocommas],0FFh
 15224                                  catalog1_1:
 15225                                  	;test	byte [_Bits],40h	; /4 switch
 15226 000011D0 F606[6A9D]40            	test	byte [_Bits],mask.year4	; 40h
 15227 000011D5 7407                    	jz	short catalog1_2
 15228                                  	;mov	byte [cs:yeardigit4],0FFh ; 4 digits year
 15229                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 15230 000011D7 C606[0B9C]FF            	mov	byte [yeardigit4],0FFh
 15231 000011DC EB05                    	jmp	short catalog1_3
 15232                                  catalog1_2:
 15233                                  	;mov	byte [cs:yeardigit4],0	; 2 digits year
 15234 000011DE C606[0B9C]00            	mov	byte [yeardigit4],0
 15235                                  catalog1_3:
 15236                                  %endif
 15237                                  
 15238                                  ;	Drive # to operate on has already been placed in FCB by
 15239                                  ;	COMMAND preprocessing. OkVolArg & PathCrunch depend on that.
 15240                                  
 15241                                  	;;;test	Bits,mask bare
 15242                                  	;;test 	word [_Bits],8
 15243                                  	;test	byte [_Bits],8
 15244                                  	; 07/06/2023
 15245 000011E3 F606[6A9D]08            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0 (6.22)
 15246                                  		; 31/07/2024 ; mask.bare = 8 ; PCDOS 7.1
 15247 000011E8 750A                    	jnz	short catalog2	; don't display volume info for /b
 15248                                  	;invoke	OkVolArg	; find & display volume info
 15249 000011EA E8CB0D                  	call	OkVolArg
 15250                                  	;sub	byte [LeftOnpage],2
 15251 000011ED 832E[FD9B]02            	sub	word [LeftOnPage],2
 15252                                  				; record display lines used by volume info
 15253 000011F2 EB14                    	jmp	short catCrunch
 15254                                  
 15255                                  ;	OkVolArg side effects:
 15256                                  ;	APPEND is disabled;
 15257                                  ;	DTA established at DirBuf;
 15258                                  ;	Filename fields in FCB are wildcarded.
 15259                                  
 15260                                  catalog2:
 15261                                  ;	OkVolArg wasn't executed, so we have to do these ourselves.
 15262                                  
 15263                                  	;invoke	DisAppend	; disable APPEND
 15264 000011F4 E88A0D                  	call	DisAppend
 15265                                  
 15266                                  	;mov	dx,offset TRANGROUP:DirBuf
 15267 000011F7 BA[189D]                	mov	dx,DIRBUF
 15268 000011FA B41A                    	mov	ah,1Ah
 15269                                  	;mov	ah,Set_DMA
 15270 000011FC CD21                    	int	21h		; set DTA
 15271                                  
 15272                                  	;mov	di,FCB	; 5Ch	; ES:DI = ptr to FCB
 15273                                  	;inc	di		; ES:DI = ptr to filename field of FCB
 15274                                  	; 28/07/2024
 15275 000011FE BF5D00                  	mov	di, FCB+1 ; 5Dh
 15276 00001201 B03F                    	mov	al,'?'		; AL = wildcard character
 15277 00001203 B90B00                  	mov	cx,11
 15278 00001206 F3AA                    	rep	stosb		; wildcard filename field
 15279                                  
 15280                                  catCrunch:
 15281 00001208 E83C01                  	call	CrunchPath	; crunch pathname to get directory and filename
 15282 0000120B 7233                    	jc	short catRecErr	; handle recorded or extended error
 15283                                  
 15284                                  ;	User's directory has been saved, we've changed to specified directory.
 15285                                  ;	ComSw = error bits for later use
 15286                                  ;	FCB contains parsed filename
 15287                                  
 15288                                  	;cmp	byte [COMSW],0
 15289 0000120D 833E[E89B]00            	cmp	word [COMSW],0
 15290 00001212 752C                    	jne	short catRecErr	; handle recorded error
 15291                                  
 15292 00001214 E88A01                  	call	InstallCtrlC	; install control-C handler
 15293                                  
 15294                                  ; 31/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 15295                                  %if 0
 15296                                  	; 07/06/2023
 15297                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 15298                                  	; MSDOS 6.0 (DBLSPACE/DRVSPACE)
 15299                                  
 15300                                   	;test	word [_Bits],1	; mask.cratio
 15301                                  	test	byte [_Bits],mask.cratio ; compression ratio wanted?
 15302                                  	jz      short catalog4
 15303                                  	call    OpenCVF         ; yes, try to open CVF file
 15304                                  	jnc     short catalog4
 15305                                  
 15306                                  	;and	word [_Bits],0FFFEh ; not (mask cratio)
 15307                                  	and	byte [_Bits],~mask.cratio ; 0FEh
 15308                                  %endif
 15309                                  
 15310                                  catalog4:	; 07/06/2023
 15311 00001217 E89F0A                  	call	ZeroTotals	; zero grand totals
 15312 0000121A E8DD04                  	call	ListDir		; list main directory
 15313                                  	;jc	short catExtErr
 15314                                  	; 07/06/2023
 15315                                  	; MSDOS 6.22 COMMAND.COM
 15316 0000121D 7247                    	jc      short catExtErr1
 15317                                  
 15318                                  	;;;test	Bits,mask subd
 15319                                  	;;test	word [_Bits],4
 15320                                  	;test	byte [_Bits],4
 15321                                  	; 07/06/2023
 15322 0000121F F606[6A9D]04            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0 (6.22)
 15323                                  			; 31/07/2024   ; 4 ; PCDOS 7.1
 15324 00001224 7405                    	jz	short catalog3	; subdirectories option not set
 15325 00001226 E89001                  	call	ListSubds	; list subdirectories
 15326                                  	;jc	short catExtErr
 15327                                  	; 07/06/2023
 15328                                  	; MSDOS 6.22 COMMAND.COM
 15329 00001229 723B                    	jc      short catExtErr1
 15330                                  
 15331                                  catalog3:
 15332                                  ;	Check if any files were found.
 15333                                  
 15334                                  	;;;test	Bits,mask bare
 15335                                  	;;test	word [_Bits],8
 15336                                  	;test	byte [_Bits],8
 15337                                  	; 07/06/2023
 15338 0000122B F606[6A9D]08            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0 (6.22)
 15339                                  			; 31/07/2024   ; 8  ; PCDOS 7.1
 15340 00001230 750D                    	jnz	short catRet	; don't bother for bare format
 15341                                  
 15342                                  ; 31/07/2024
 15343                                  ; PCDOS 7.1 COMMAND.COM
 15344                                  %if 0
 15345                                  	mov	ax,[FileCntTotal]
 15346                                  	or	ax,ax
 15347                                  	jz	short catNoFiles ; no files found
 15348                                  %else
 15349 00001232 8B0E[3D9C]              	mov	cx,[FileCntTotal]
 15350 00001236 0B0E[3F9C]              	or	cx,[FileCntTotal+2]
 15351 0000123A E317                    	jcxz	catNoFiles	; no files found
 15352                                  %endif
 15353                                  
 15354 0000123C E8BA02                  	call	DisplayTotals	; display trailing grand totals
 15355                                  	;jmp	short catRet	; all done
 15356                                  	; 25/04/2023
 15357                                  	; 07/06/2023
 15358                                  catRet:
 15359                                  	;retn	; MSDOS 5.0 COMMAND.COM
 15360                                  	
 15361                                  ; 31/07/2024
 15362                                  ; PCDOS 7.1 COMMAND.COM
 15363                                  %if 0
 15364                                  	; 07/06/2023
 15365                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 15366                                  
 15367                                  	;test	word [_Bits],1	; mask.cratio
 15368                                  	test	byte [_Bits],mask.cratio
 15369                                  	jz      short catRetn
 15370                                  	call    CloseCVF
 15371                                  %endif
 15372                                  
 15373                                  catRetn:
 15374 0000123F C3                      	retn
 15375                                  
 15376                                  catRecErr:
 15377                                  
 15378                                  ;	ComSw may have error bit set. If not, do extended error.
 15379                                  
 15380                                  	;;;test	ComSw,mask dev
 15381                                  	;;test	word [COMSW],1
 15382                                  	;test	byte [COMSW],1
 15383 00001240 F606[E89B]01            	test	byte [COMSW],mask.dev
 15384 00001245 750C                    	jnz	short catNoFiles 
 15385                                  				; filename is device, respond 'file not found'
 15386                                  	;;test	ComSw,mask baddir
 15387                                  	;;test	word [COMSW],2
 15388                                  	;test	byte [COMSW],2
 15389 00001247 F606[E89B]02            	test	byte [COMSW],mask.baddir
 15390                                  	;jz	short catExtErr	; no ComSw error bits, must be extended error
 15391                                  	; 07/06/2023
 15392                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM 
 15393 0000124C 7418                    	jz	short catExtErr1
 15394                                  
 15395                                  	;mov	dx,offset TRANGROUP:BadCd_Ptr
 15396                                  				; invalid directory
 15397 0000124E BA[A490]                	mov	dx,badcd_ptr
 15398                                  	;jmp	short catErr
 15399                                  	; 07/06/2023
 15400                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 15401 00001251 EB23                    	jmp	short catExtErr2	
 15402                                  
 15403                                  catNoFiles:
 15404                                  
 15405                                  ;	Display header and force 'file not found' message.
 15406                                  
 15407 00001253 E8EF07                  	call	DisplayHeader
 15408 00001256 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 15409 00001259 C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 15410 0000125E BA[448F]                	mov	dx,extend_buf_ptr
 15411 00001261 A3[448F]                	mov	[extend_buf_ptr],ax
 15412                                  	;jmp	short catErr
 15413                                  	; 07/06/2023
 15414                                  	; MSDOS 6.22 COMMAND.COM
 15415 00001264 EB10                    	jmp	short catExtErr2
 15416                                  
 15417                                  catExtErr:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 15418                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 15419                                  catExtErr1:
 15420                                  
 15421                                  ;	DOS has returned an error status. Get the extended error#, and
 15422                                  ;	set up an error message, changing 'No more files' error 
 15423                                  ;	to 'File not found' error.
 15424                                  
 15425 00001266 E8D00D                  	call	Set_Ext_Error_Msg
 15426 00001269 833E[448F]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 15427                                  	;jne	short catalog4  ; catErr ; MSDOS 5.0 COMMAND.COM
 15428                                  	; 07/06/2023
 15429                                  	; MSDOS 6.22 COMMAND.COM
 15430 0000126E 7506                    	jne	short catExtErr2	
 15431                                  
 15432 00001270 C706[448F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 15433                                  
 15434                                  ;catalog4:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 15435                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 15436                                  catExtErr2:
 15437                                  
 15438                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15439                                  %if 0
 15440                                  	;test	word [_Bits],1	; mask.cratio
 15441                                  	test	byte [_Bits],mask.cratio
 15442                                  				; close Compressed Volume File if cratio
 15443                                  	jz      short catErr
 15444                                  	call    CloseCVF
 15445                                  %endif
 15446                                  
 15447                                  ;	Error exit. Error message information has been set up
 15448                                  ;	for Std_EPrintf.
 15449                                  
 15450                                  catErr:
 15451 00001276 E9741A                  	jmp	cerror		; go to COMMAND error recycle point
 15452                                  
 15453                                  	; 25/04/2023
 15454                                  ;catRet:
 15455                                  	;retn
 15456                                  
 15457                                  ; ---------------------------------------------------------------------------
 15458                                  
 15459                                  ;***	SetDefaults - set default pathname, options
 15460                                  ;
 15461                                  ;	ENTRY	DS = TRANGROUP seg addr
 15462                                  ;
 15463                                  ;	EXIT	nothing
 15464                                  ;
 15465                                  ;	USED	AX,DI
 15466                                  ;
 15467                                  ;	EFFECTS
 15468                                  ;	  SrcBuf = '*',EOL - default pathname
 15469                                  ;	  PathPos = ptr to pathname
 15470                                  ;	  PathCnt = length of pathname
 15471                                  
 15472                                  	; 16/02/2023
 15473                                  SetDefaults:
 15474 00001279 BF[FE9D]                	mov	di,SrcBuf		; DI = ptr to pathname buffer
 15475 0000127C 893E[6E9D]              	mov	[PathPos],di		; PathPos = ptr to pathname
 15476                                  	;mov	al,STAR
 15477 00001280 B02A                    	mov	al,'*'
 15478 00001282 AA                      	stosb
 15479                                  	;mov	al,END_OF_LINE_IN
 15480 00001283 B00D                    	mov	al,0Dh ; cr
 15481 00001285 AA                      	stosb				; SrcBuf = '*',0Dh
 15482 00001286 C706[6C9D]0100          	mov	word [PathCnt],1	; PathCnt = pathname length
 15483                                  
 15484 0000128C 31C0                    	xor	ax,ax			; AX = 0
 15485 0000128E A3[E89B]                	mov	[COMSW],ax		; = no error
 15486 00001291 A3[6A9D]                	mov	[_Bits],ax		; = options off
 15487 00001294 A2[9B9D]                	mov	[DestBuf],al		; = no sort
 15488 00001297 C606[729D]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM ; 6
 15489 0000129C A2[739D]                	mov	[AttrSelect],al		; exclude hidden, system files
 15490                                  peRet:	; 25/04/2023
 15491 0000129F C3                      	retn
 15492                                  
 15493                                  ; ---------------------------------------------------------------------------
 15494                                  
 15495                                  ;***	ParseEnvironment - find and parse our environment variable
 15496                                  ;
 15497                                  ;	Find our environment variable and parse it. If a parse
 15498                                  ;	error occurs, issue an error message. The parse results
 15499                                  ;	up to the error will still have effect. Always leave
 15500                                  ;	the option variables in a useable state.
 15501                                  ;
 15502                                  ;	ENTRY	DS = TRANGROUP seg addr
 15503                                  ;
 15504                                  ;	EXIT	nothing
 15505                                  ;
 15506                                  ;	USED	AX,BX,CX,DX,SI,DI
 15507                                  ;
 15508                                  ;	EFFECTS
 15509                                  ;
 15510                                  ;	  Bits may contain new option settings.
 15511                                  ;	  DestBuf may contain new series of sort codes.
 15512                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 15513                                  ;	  SrcBuf may contain a new default pathname/filespec.
 15514                                  ;	  PathPos, PathCnt updated for new pathname.
 15515                                  ;
 15516                                  ;	  If a parse error occurred, an error message will be issued.
 15517                                  
 15518                                  	; 16/02/2023
 15519                                  ParseEnvironment:
 15520 000012A0 E80D04                  	call	GetEnvValue		; get environment variable value
 15521 000012A3 72FA                    	jc	short peRet		; name not found in environment
 15522                                  
 15523                                  ;	SI = ptr to value of environment variable, in TRANGROUP seg
 15524                                  
 15525 000012A5 E85E05                  	call	Parse_Line		; parse environment value
 15526 000012A8 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 15527                                  	;cmp	ax,END_OF_LINE
 15528 000012AB 74F2                    	je	short peRet		; successful completion
 15529                                  
 15530                                  ;	Some kind of parse error occurred.
 15531                                  ;	We're set up for a Std_EPrintf call.
 15532                                  
 15533 000012AD E82541                  	call	std_eprintf		; display the parse error
 15534                                  	;mov	byte [Msg_Disp_Class],util_msg_class ; -1
 15535                                  					; restore default msg class
 15536 000012B0 C606[428F]FF            	mov	byte [msg_disp_class],0FFh ; -1
 15537                                  	;mov	dx,offset TRANGROUP:ErrParsEnv_Ptr
 15538 000012B5 BA[FF91]                	mov	dx,errparsenv_ptr
 15539                                  	;;invoke Printf_Crlf		; "(Error occurred in environment.."
 15540                                  	;call	Printf_Crlf
 15541                                  	; 25/04/2023
 15542                                  	;retn
 15543 000012B8 E91441                  	jmp	Printf_Crlf
 15544                                  					;M008;Internal handling of /? removed
 15545                                  ;peOk:	and	Bits,not mask help	; disallow /h in environment variable
 15546                                  	; 25/04/2023
 15547                                  ;peRet:
 15548                                  	;retn
 15549                                  
 15550                                  ; ---------------------------------------------------------------------------
 15551                                  
 15552                                  ;***	ParseCmdLine - parse and record command line parameters
 15553                                  ;
 15554                                  ;	ENTRY	PSP offset 81h is beginning of cmd line buffer
 15555                                  ;		DS, ES, CS = TRANGROUP seg addr
 15556                                  ;
 15557                                  ;	EXIT	CY = set if parse error occurred
 15558                                  ;
 15559                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 15560                                  ;		AX = system parser error code
 15561                                  ;		DX = ptr to message block
 15562                                  ;
 15563                                  ;	USED	AX,BX,CX,DX,SI,DI
 15564                                  ;
 15565                                  ;	EFFECTS
 15566                                  ;
 15567                                  ;	  Bits may contain new option settings.
 15568                                  ;	  DestBuf may contain new series of sort codes.
 15569                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 15570                                  ;	  SrcBuf may contain a new default pathname/filespec.
 15571                                  ;	  PathPos, PathCnt updated for new pathname.
 15572                                  ;
 15573                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 15574                                  ;	  Msg_Disp_Class = parse error class
 15575                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 15576                                  ;	  Message block (see DX) is set up for parse error message
 15577                                  
 15578                                  	; 16/02/2023
 15579                                  ParseCmdLine:
 15580 000012BB BE8100                  	mov	si,81h			; SI = ptr to cmd-line tail text
 15581 000012BE E84505                  	call	Parse_Line		; parse cmd line tail
 15582 000012C1 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 15583                                  	;;cmp	ax,END_OF_LINE
 15584                                  	; 25/04/2023
 15585                                  	;je	short pcOk		; parse completed successfully
 15586                                  
 15587                                  ;	A parse error occurred. We're all set up for message output.
 15588                                  
 15589                                  	; 25/04/2023
 15590                                  	; cf = 1 (ax < 0FFFFh)
 15591                                  	;stc		   		; return failure
 15592                                  	;jmp	short pcRet
 15593                                  	; 25/04/2023
 15594                                  	;retn
 15595                                  pcOk:
 15596                                  	; 25/04/2023
 15597                                  	;cf = 0 (ax = 0FFFFh)
 15598                                  	;clc				; return success
 15599                                  pcRet:
 15600 000012C4 C3                      	retn
 15601                                  
 15602                                  ; ---------------------------------------------------------------------------
 15603                                  
 15604                                  ;***	SetCollatingTable - set up character collating table for sorting
 15605                                  ;
 15606                                  ;	If country is other than USA, try to get a collating table
 15607                                  ;	for character sorting. For USA, use straight byte values.
 15608                                  ;	This is so DIR behaves like the MS-DOS Shell, which sorts
 15609                                  ;	by straight byte values in the USA for better performance.
 15610                                  ;
 15611                                  ;	ENTRY	ES = TRANGROUP seg addr
 15612                                  ;
 15613                                  ;	EXIT	nothing
 15614                                  ;
 15615                                  ;	USED	AX,BX,CX,DX,DI
 15616                                  ;
 15617                                  ;	EFFECTS
 15618                                  ;
 15619                                  ;	  If collating table is set -
 15620                                  ;	    CountryPtrId = 6.
 15621                                  ;	    CountryPtr points to collating table.
 15622                                  ;
 15623                                  ;	  Otherwise -
 15624                                  ;	    CountryPtrId = 0.
 15625                                  
 15626                                  SetCollatingTable:
 15627                                  
 15628                                  ;	Begin modification M028
 15629                                  
 15630                                  	;mov	dx,offset TRANGROUP:InternatVars
 15631                                  	;			; DS:DX = ptr to international info buffer
 15632 000012C5 BA[7CA5]                	mov	dx,INTERNATVARS
 15633 000012C8 B80038                  	mov	ax,3800h
 15634                                  	;mov	ax,INTERNATIONAL << 8
 15635                                  	;;mov	ax,INTERNATIONAL shl 8
 15636                                  				; AX = 'Get current country info'
 15637 000012CB CD21                    	int	21h		; call DOS
 15638 000012CD 7217                    	jc	short scNoTable	; error - so don't collate
 15639                                  
 15640                                  ;	BX = country code
 15641                                  
 15642 000012CF 83FB01                  	cmp	bx,1
 15643 000012D2 7412                    	je	short scNoTable	; we're in USA, don't collate
 15644                                  
 15645                                  ;	End modification M028
 15646                                  
 15647                                  ;*	Country code is other than USA. Try to get a collating table.
 15648                                  
 15649 000012D4 B80665                  	mov	ax,6506h
 15650                                  	;mov	ax,(GETEXTCNTRY << 8) + SETCOLLATE
 15651                                  	;;mov	ax,(GETEXTCNTRY shl 8) + SETCOLLATE
 15652                                  				; AH = 'Get Extended Country Info'
 15653                                  				; AL = 'Get Pointer to Collating Table'
 15654 000012D7 BBFFFF                  	mov	bx,-1		; BX = code page of interest = CON
 15655 000012DA B90500                  	mov	cx,5		; CX = length of info buffer
 15656 000012DD 89DA                    	mov	dx,bx		; DX = country ID = default
 15657                                  	;mov	di,offset TRANGROUP:CountryPtrInfo
 15658 000012DF BF[9CA5]                	mov	di,CountryPtrInfo
 15659                                  				; ES:DI = ptr to info buffer
 15660 000012E2 CD21                    	int	21h		; call DOS
 15661 000012E4 7305                    	jnc	short scRet	; success
 15662                                  
 15663                                  ;*	Set CountryPtrId = 0 to signal no collating table.
 15664                                  
 15665                                  scNoTable:			;M028
 15666 000012E6 C606[9CA5]00            	mov	byte [CountryPtrId],0
 15667                                  scRet:
 15668 000012EB C3                      	retn
 15669                                  
 15670                                  ; ---------------------------------------------------------------------------
 15671                                  
 15672                                  ;***	SetOptions - check and set options
 15673                                  ;
 15674                                  ;	ENTRY	nothing
 15675                                  ;
 15676                                  ;	EXIT	nothing
 15677                                  ;
 15678                                  ;	USED	AX,BX,CX,DX
 15679                                  ;
 15680                                  ;	EFFECTS
 15681                                  ;
 15682                                  ;	  Bits may contain modified option settings.
 15683                                  ;	  Display_Ioctl table, including LinPerPag variable, is filled in.
 15684                                  ;	  LeftOnPage is initialized to # lines till end of page is handled.
 15685                                  ;	  PerLine is set according to /w presence.
 15686                                  
 15687                                  	; 16/02/2023
 15688                                  
 15689                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15690                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:12BEh
 15691                                  
 15692                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 15693                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1335h
 15694                                  
 15695                                  SetOptions:
 15696                                  
 15697                                  ;	If bare listing requested, cancel wide listings.
 15698                                  
 15699                                  	;;;test	Bits,mask bare
 15700                                  	;;test	word [_Bits],8
 15701                                  	;test	byte [_Bits],8
 15702                                  	; 07/06/2023
 15703 000012EC F606[6A9D]08            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 15704                                  		; 31/07/2024 ; mask.bare = 8 ; PCDOS 7.1
 15705 000012F1 7405                    	jz	short setopts1
 15706                                  	;;;and	Bits,not mask wide	;M007;Allow /p with /b
 15707                                  	;;and	word [_Bits],0FFFEh
 15708                                  	;;and	byte [_Bits],0FEh
 15709                                  	; 31/07/2024
 15710                                  	;and	word [_Bits],0FFFEh ; PCDOS 7.1 COMMAND.COM
 15711                                  	; 07/06/2023
 15712 000012F3 8026[6A9D]FE            	and	byte [_Bits],~mask.wide ; 0FDh ; MSDOS 6.0
 15713                                  			; 31/07/2024	; 0FEh ; PCDOS 7.1 	
 15714                                  
 15715                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15716                                  %if 0
 15717                                  ;setopts1:	; MSDOS 5.0 COMMAND.COM
 15718                                  	; 07/06/2023
 15719                                   	; MSDOS 6.22 COMMAND.COM
 15720                                  setopts0:
 15721                                  	;test	word [_Bits],12h  ; (mask bare) or (mask wide)
 15722                                  	test	byte [_Bits],(mask.bare|mask.wide)
 15723                                  	jz      short setopts1
 15724                                  	;and 	word [_Bits],0FFFEh ; not mask cratio
 15725                                  	and	byte [_Bits],~mask.cratio
 15726                                  %endif
 15727                                  
 15728                                  setopts1:
 15729                                  ;	Set # lines per display page.
 15730                                  
 15731                                  ;M01  Obtain screen height from ROM BIOS data area
 15732                                  ;
 15733                                  ;M01	mov	LinPerPag,LINESPERPAGE	; default value
 15734                                  
 15735 000012F8 1E                      	push	ds
 15736                                  	;mov	ax,ROMBIOS_DATA 	; Get ROM Data segment
 15737 000012F9 B84000                  	mov	ax,40h
 15738 000012FC 8ED8                    	mov	ds,ax			;
 15739                                  	;Assume	DS:ROMBIOS_DATA
 15740                                  
 15741                                  	;mov	al,[CRT_Rows] ; [84h]	; Get max rows
 15742 000012FE A08400                  	mov	al,[84h]
 15743 00001301 1F                      	pop	ds			;
 15744                                  	;Assume	DS:Trangroup
 15745                                  
 15746 00001302 08C0                    	or	al,al			; If zero specified
 15747 00001304 7502                    	jnz	short setopts2		;
 15748                                  
 15749                                  	;mov	al,LINESPERPAGE 	; assume 24 rows
 15750 00001306 B019                    	mov	al,25	; MSDOS 5.0 COMMAND.COM (TRANGROUP:11D1h)
 15751                                  setopts2:
 15752 00001308 30E4                    	xor	ah,ah
 15753                                  setopts3:
 15754 0000130A FEC0                    	inc	al			; height + 1 ;M018
 15755                                  
 15756 0000130C A3[F49E]                	mov	[LinPerPag],ax		; set the rows now
 15757                                  
 15758                                  ; Now the console driver can change the rows if it knows better (M01 end)
 15759                                  
 15760                                  	;mov	ax,(IOCTL shl 8)+GENERIC_IOCTL_HANDLE
 15761                                  					; IOCTL for handles
 15762 0000130F B80C44                  	mov	ax,440Ch
 15763                                  	;mov	bx,STDOUT		; handle #
 15764 00001312 BB0100                  	mov	bx,1
 15765                                  	;mov	ch,IOC_SC		; screen
 15766 00001315 B503                    	mov	ch,3
 15767                                  	;mov	cl,get_generic		; get display info
 15768 00001317 B17F                    	mov	cl,7Fh
 15769 00001319 BA[E49E]                	mov	dx,Display_Ioctl	; info block
 15770 0000131C CD21                    	int	21h			; call DOS
 15771                                  
 15772 0000131E A1[F49E]                	mov	ax,[LinPerPag]		; AX = # lines per page
 15773 00001321 A3[FD9B]                	mov	[LeftOnPage],ax		; initialize # lines left on page
 15774                                  
 15775                                  ;	Set # entries per line.
 15776                                  
 15777                                  	;mov	byte [PerLine],NORMPERLIN
 15778                                  					; # entries per line without /w
 15779 00001324 C606[FA9B]01            	mov	byte [PerLine],1
 15780                                  	;;;test	Bits,mask wide
 15781                                  	;;test	word [_Bits],1
 15782                                  	;test	byte [_Bits],1
 15783                                  	; 07/06/2023
 15784 00001329 F606[6A9D]01            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 15785                                  			; 31/07/2024   ; 1 ; PCDOS 7.1
 15786 0000132E 7405                    	jz	short setopts4
 15787                                  	;mov	byte [PerLine],WIDEPERLIN
 15788                                  					; # entries per line with /w
 15789 00001330 C606[FA9B]05            	mov	byte [PerLine],5
 15790                                  setopts4:
 15791                                  				;M011;start;The following code checks if a drive
 15792                                  				;letter has been parsed into SrcBuf, and if
 15793                                  				;so, the correct drive number is loaded into
 15794                                  				;the first FCB, at offset 5C.
 15795                                  
 15796                                  	;cmp	TRANGROUP:[SrcBuf+1],COLON_CHAR	; is this a drive letter?
 15797 00001335 803E[FF9D]3A            	cmp	byte [SrcBuf+1],':'
 15798 0000133A 750A                    	jne	short soRet
 15799                                  	;mov	al,TRANGROUP:[SrcBuf]		; load drive letter into al
 15800 0000133C A0[FE9D]                	mov	al,[SrcBuf]
 15801                                  	;and	al,not 20h			; capitalize ASCII drive letter (LowerCase-32)-->UpperCase
 15802 0000133F 24DF                    	and	al,0DFh ; ~20h ; not 20h
 15803 00001341 2C40                    	sub	al,'@'	; 40h			; convert to 1-based number (1=A)
 15804 00001343 A25C00                  	mov	[FCB],al  ; [5Ch]		; store in first FCB
 15805                                  						;M011;end
 15806                                  soRet:
 15807 00001346 C3                      	retn
 15808                                  
 15809                                  ; ---------------------------------------------------------------------------
 15810                                  
 15811                                  ;***	CrunchPath - analyze supplied or default pathname
 15812                                  ;
 15813                                  ;	ENTRY	PathPos = ptr to pathname buffer
 15814                                  ;		PathCnt = length of pathname, not incl trailing delimiter
 15815                                  ;		Pathname in buffer must end in delimiter (like CR) and
 15816                                  ;		 must have space for another char after the delimiter.
 15817                                  ;
 15818                                  ;	EXIT	CY = clear if no error
 15819                                  ;		We are changed to directory found in pathname
 15820                                  ;		Previous directory ready to be restored via RestUDir
 15821                                  ;		FCB filename fields contain filename (possibly w/ wildcards)
 15822                                  ;
 15823                                  ;		If error occurred,
 15824                                  ;		CY = set
 15825                                  ;		ComSw = error bits (see ErrorRec)
 15826                                  ;		If ComSw not set,
 15827                                  ;		Ready for DOS Get Extended Error call
 15828                                  
 15829                                  	; 16/02/2023
 15830                                  CrunchPath:
 15831 00001347 E87802                  	call	FileIsDevice
 15832 0000134A 7507                    	jne	short crpath1	; not a device, skip ahead
 15833                                  	;;;or	ComSw,mask dev	; signal file is device
 15834                                  	;;or	word [COMSW],1
 15835                                  	;or	byte [COMSW],1
 15836 0000134C 800E[E89B]01            	or	byte [COMSW],mask.dev
 15837 00001351 EB2F                    	jmp	short cpErr	; return error
 15838                                  crpath1:
 15839 00001353 FF36[6E9D]              	push	word [PathPos]	; save ptr to pathname
 15840 00001357 C606[769D]FF            	mov	byte [DirFlag],-1
 15841                                  				; tell PathCrunch not to parse file into FCB
 15842 0000135C E88A16                  	call	PathCrunch	; change to directory in pathname
 15843 0000135F C606[769D]00            	mov	byte [DirFlag],0
 15844                                  				; reset our little flag
 15845 00001364 5E                      	pop	si		; SI = ptr to pathname
 15846 00001365 7208                    	jc	short cpNoDir	; didn't find directory path
 15847 00001367 741A                    	jz	short cpRet	; found directory path w/ no filename
 15848                                  				;  - leave wildcard default in FCB and return
 15849                                  
 15850                                  ;*	We found a directory, and there was a filename attached.
 15851                                  ;	DestTail = ptr to ASCIIZ filename
 15852                                  
 15853 00001369 8B36[989D]              	mov	si,[DestTail]	; SI = ptr to filename
 15854 0000136D EB28                    	jmp	short cpFile	; go parse the file into FCB
 15855                                  
 15856                                  ;*	PathCrunch failed to find a directory in the pathname.
 15857                                  ;
 15858                                  ;	Msg_Numb = error code
 15859                                  ;	DestIsDir = nonzero if path delimiter char's occur in pathname
 15860                                  ;	SI = ptr to pathname (now an ASCIIZ string)
 15861                                  
 15862                                  cpNoDir:
 15863 0000136F A1[119F]                	mov	ax,[Msg_Numb]	  ; AX = error code from PathCrunch
 15864 00001372 09C0                    	or	ax,ax
 15865 00001374 750C                    	jnz	short cpErr	  ; error occurred - return it
 15866 00001376 803E[969D]00            	cmp	byte [DestIsDir],0
 15867 0000137B 7407                    	je	short cpMaybe	  ; no path delimiters seen, maybe it's a file
 15868                                  crpath3:
 15869                                  	;;;or	ComSw,mask baddir ; signal invalid directory name
 15870                                  	;;or	word [COMSW],2
 15871                                  	;or	byte [COMSW],2
 15872 0000137D 800E[E89B]02            	or	byte [COMSW],mask.baddir
 15873                                  	;jmp	short cpErr	  ; return error
 15874                                  	; 16/02/2023
 15875                                  cpErr:
 15876 00001382 F9                      	stc			  ; return error
 15877                                  cpRet:
 15878 00001383 C3                      	retn
 15879                                  
 15880                                  cpMaybe:
 15881                                  ;	SI = ptr to pathname
 15882                                  
 15883                                  	;cmp	byte [si+1],COLON_CHAR
 15884 00001384 807C013A                	cmp	byte [si+1],':'
 15885 00001388 7501                    	jne	short crpath2	  ; no drive specifier, skip ahead
 15886 0000138A AD                      	lodsw			  ; SI = ptr past drive specifier "d:"
 15887                                  crpath2:
 15888 0000138B 813C2E2E                	cmp	word [si],".."	; 2E2Eh
 15889 0000138F 7506                    	jne	short cpFile	  ; if not "..", treat as a file
 15890 00001391 807C0200                	cmp	byte [si+2],0
 15891                                  	;jne	short cpFile	  ; or if there's more after "..", treat as file
 15892                                  	;;;;or	ComSw,mask baddir ; signal invalid directory
 15893                                  	;;;or	word [COMSW],2
 15894                                  	;;or	byte [COMSW],2
 15895                                  	;or	byte [COMSW],mask.baddir
 15896                                  	;jmp	short cpErr	  ; return error
 15897                                  	; 16/02/2023
 15898 00001395 74E6                    	je	short crpath3
 15899                                  
 15900                                  ;	The preceding code was taken from the old DIR routine.
 15901                                  ;	It's garbage, I'm afraid. It's meant to check for ".."
 15902                                  ;	occurring when we're at the root directory. Too bad it
 15903                                  ;	doesn't handle problems with "..\..", etc.
 15904                                  
 15905                                  ;	We're ready to parse a filename into the FCB.
 15906                                  ;	SI = ptr to ASCIIZ filename
 15907                                  
 15908                                  cpFile:	
 15909 00001397 BF5C00                  	mov	di,FCB	; 5Ch	; DI = ptr to FCB
 15910 0000139A B80E29                  	mov	ax,290Eh
 15911                                  	;mov	ax,(Parse_File_Descriptor<<8)|0Eh
 15912                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 0Eh
 15913                                  				; wildcards already in FCB used as defaults
 15914 0000139D CD21                    	int	21h
 15915 0000139F F8                      	clc			; return success
 15916                                  	;jmp	short cpRet
 15917                                  	; 16/02/2023
 15918 000013A0 C3                      	retn
 15919                                  
 15920                                  ;cpErr:
 15921                                  ;	stc			; return error
 15922                                  ;cpRet:
 15923                                  ;	retn
 15924                                  
 15925                                  ; ---------------------------------------------------------------------------
 15926                                  
 15927                                  ;***	InstallCtrlC - install our private control-C handler
 15928                                  ;
 15929                                  ;	Put our control-c handler in front of command.com's default
 15930                                  ;	handler, to make sure the user's default directory gets restored.
 15931                                  ;	This shouldn't be necessary, but, for now, there are situations
 15932                                  ;	where the TDATA segment is left in a modified state when a
 15933                                  ;	control-c occurs.  This means that the transient will be
 15934                                  ;	reloaded, and the user's directory cannot be restored.
 15935                                  ;
 15936                                  ;	Bugbug:  fix the wider problem?  Involves message services.  Ugly.
 15937                                  ;
 15938                                  ;	ENTRY	nothing
 15939                                  ;
 15940                                  ;	EXIT	nothing
 15941                                  ;
 15942                                  ;	USED	AX,BX,DX
 15943                                  ;
 15944                                  ;	EFFECTS
 15945                                  ;
 15946                                  ;	  CtrlCHandler address placed in int 23 vector.
 15947                                  ;
 15948                                  ;	NOTE
 15949                                  ;
 15950                                  ;	  Command.com's basic control-c handler will be restored
 15951                                  ;	  to the int 23 vector by the HeadFix routine, after DIR finishes.
 15952                                  
 15953                                  	; 16/02/2023
 15954                                  InstallCtrlC:
 15955 000013A1 06                      	push	es			; preserve ES
 15956 000013A2 B82335                  	mov	ax,3523h
 15957                                  	;mov	ax,(GET_INTERRUPT_VECTOR<<8)+23h
 15958                                  	;;mov	ax,(GET_INTERRUPT_VECTOR shl 8) + 23h
 15959 000013A5 CD21                    	int	21h
 15960 000013A7 891E[A1A5]              	mov	[OldCtrlCHandler],bx	; save old int 23 vector
 15961 000013AB 8C06[A3A5]              	mov	[OldCtrlCHandler+2],es	 
 15962 000013AF 07                      	pop	es			; restore ES
 15963                                  
 15964 000013B0 BA[C41C]                	mov	dx,CtrlCHandler 	; DS:DX = ptr to CtrlCHandler
 15965 000013B3 B82325                  	mov	ax,2523h
 15966                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+23h
 15967                                  	;;mov	ax,(SET_INTERRUPT_VECTOR shl 8) + 23h
 15968 000013B6 CD21                    	int	21h
 15969 000013B8 C3                      	retn
 15970                                  
 15971                                  ; ---------------------------------------------------------------------------
 15972                                  
 15973                                  ;***	ListSubds - search and list files in subdirectories
 15974                                  ;
 15975                                  ;	ENTRY	Current directory (on selected drive) is top of subdir tree
 15976                                  ;		FCB is still set up for file searches
 15977                                  ;		Bits, AttrSpecified, AttrSelect, DestBuf all still set up
 15978                                  ;
 15979                                  ;	EXIT	CY = clear if no error
 15980                                  ;		FileCnt = # files found & displayed
 15981                                  ;		FileSiz = total size of files found
 15982                                  ;
 15983                                  ;		If error,
 15984                                  ;		CY = set
 15985                                  ;		Ready for DOS Get Extended Error call
 15986                                  ;
 15987                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15988                                  ;
 15989                                  ;	EFFECTS
 15990                                  ;
 15991                                  ;	  FileCntTotal, FileSizTotal are updated.
 15992                                  ;	  Subdirectories may be listed on standard output device.
 15993                                  ;
 15994                                  ;	NOTES
 15995                                  ;
 15996                                  ;	  ListSubds seeds the recursive entry point lsNode with a ptr
 15997                                  ;	   to a buffer where we'll stack up subdirectory filenames.
 15998                                  ;	   Each name is stored ASCIIZ.
 15999                                  
 16000                                  	; 16/02/2023
 16001                                  ListSubds:
 16002                                  	;invoke	SetRest1		; make sure user's dir gets restored
 16003 000013B9 E81F1D                  	call	SetRest1
 16004                                  
 16005 000013BC BB[589E]                	mov	bx,ScanBuf   		; BX = ptr to child name buffer
 16006                                  lsNode:
 16007 000013BF C60700                  	mov	byte [bx],0		; start with null child name
 16008                                  lsLoop:
 16009 000013C2 E88702                  	call	FindNextChild		; search for next subdirectory
 16010 000013C5 7235                    	jc	short lsErr		; search failed - examine error
 16011                                  
 16012 000013C7 89DA                    	mov	dx,bx			; DX = ptr to child's name
 16013 000013C9 E8ED04                  	call	ChangeDir		; enter child directory
 16014                                  
 16015                                  					; M023;start
 16016 000013CC 7306                    	jnc	short lstsd1		; check for error
 16017                                  	;cmp	ax,3
 16018 000013CE 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND	; error due to len(pathname)>MAXPATH?
 16019 000013D1 74EF                    	je	short lsLoop		; yes, skip over this subdirectory
 16020                                  	;jmp	short lsRet		; no, other error: DIR must fail
 16021                                  	; 16/02/2023			; M023;end
 16022 000013D3 C3                      	retn
 16023                                  lstsd1:	
 16024 000013D4 53                      	push	bx
 16025 000013D5 E82203                  	call	ListDir			; list the directory
 16026 000013D8 5B                      	pop	bx
 16027                                  
 16028                                  ;	Note we're ignoring errors returned here.
 16029                                  
 16030 000013D9 89DF                    	mov	di,bx			; DI = ptr to child's name
 16031 000013DB B90D00                  	mov	cx,13			; CX = max name length w/ null
 16032 000013DE 30C0                    	xor	al,al			; AL = zero byte to look for
 16033 000013E0 F2AE                    	repne	scasb			; DI = ptr to next name pos'n in buf
 16034 000013E2 53                      	push	bx			; save ptr to child's name
 16035 000013E3 89FB                    	mov	bx,di			; BX = ptr to next name pos'n in buf
 16036 000013E5 E8D7FF                  	call	lsNode			; recurse from new node
 16037 000013E8 5B                      	pop	bx			; BX = ptr to child's name
 16038 000013E9 9C                      	pushf				; save error condition
 16039                                  	
 16040                                  	;;shove	0
 16041                                  	;mov	ax,0
 16042 000013EA 29C0                    	sub	ax,ax ; 0
 16043 000013EC 50                      	push	ax
 16044                                  	;shove	".."
 16045 000013ED B82E2E                  	mov	ax,'..'  ; 2E2Eh
 16046 000013F0 50                      	push	ax
 16047 000013F1 89E2                    	mov	dx,sp			; DX = ptr to "..",0 on stack
 16048 000013F3 E8C304                  	call	ChangeDir		; return to parent directory
 16049 000013F6 58                      	pop	ax			; restore stack
 16050 000013F7 58                      	pop	ax
 16051                                  
 16052 000013F8 9D                      	popf				; restore error condition from child
 16053                                  	;jc	short lsRet		; return error
 16054                                  	;jmp	short lsLoop		; look for more children
 16055                                  	; 16/02/2023
 16056 000013F9 73C7                    	jnc	short lsLoop
 16057 000013FB C3                      	retn
 16058                                  lsErr:
 16059 000013FC E84A0C                  	call	get_ext_error_number	; AX = extended error code
 16060                                  	;cmp	ax,2
 16061 000013FF 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 16062 00001402 7406                    	je	short lsRet		; file not found, we're ok
 16063                                  	;cmp	ax,18
 16064 00001404 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 16065 00001407 7401                    	je	short lsRet		; no more files, we're ok
 16066 00001409 F9                      	stc				; return other errors
 16067                                  lsRet:	
 16068 0000140A C3                      	retn
 16069                                  
 16070                                  ; ---------------------------------------------------------------------------
 16071                                  
 16072                                  	;break	<DIR support routines>
 16073                                  
 16074                                  ;***	SUPPORT ROUTINES
 16075                                  
 16076                                  ; ----------------------
 16077                                  
 16078                                  ;***	CheckChild - check potential subdirectory name for FindNextChild
 16079                                  ;
 16080                                  ;	ENTRY	DirBuf contains DOS Find-buffer with potential child
 16081                                  ;		BX = ptr to last child's name
 16082                                  ;		BP = ptr to temp child's name
 16083                                  ;
 16084                                  ;	EXIT	nothing
 16085                                  ;
 16086                                  ;	USED	AX,CX,SI,DI
 16087                                  ;
 16088                                  ;	EFFECTS
 16089                                  ;
 16090                                  ;	  Filename pointed to by BP may be changed.
 16091                                  ;
 16092                                  ;	NOTES
 16093                                  ;
 16094                                  ;	  Potential filename replaces temp filename if:
 16095                                  ;	   it's a subdirectory file;
 16096                                  ;	   it doesn't start with a '.';
 16097                                  ;	   it's alphanumerically greater than last child's name;
 16098                                  ;	   and it's alphanumerically less than temp name.
 16099                                  
 16100                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16101                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16102                                  CheckChild:
 16103                                  	;test	DirBuf.find_buf_attr,ATTR_DIRECTORY
 16104 0000140B F606[2D9D]10            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY ; 10h
 16105 00001410 741D                    	jz	short ccRet	; not a subdirectory file- return
 16106                                  
 16107                                  	; 16/02/2023
 16108 00001412 BE[369D]                	mov	si,DIRBUF+FIND_BUF.PNAME
 16109 00001415 803C2E                  	cmp	byte [si],'.'
 16110                                  	;;cmp	DirBuf.find_buf_pname,'.'
 16111                                  	;cmp	byte [DIRBUF+FIND_BUF.PNAME],'.'
 16112 00001418 7415                    	je	short ccRet	; starts with a dot- return
 16113                                  
 16114                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 16115                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 16116 0000141A 89DF                    	mov	di,bx
 16117 0000141C E8B104                  	call	CmpAscz		; compare candidate to last child's name
 16118 0000141F 760E                    	jna	short ccRet	; it's not above it- return
 16119                                  
 16120                                  	; 07/06/2023
 16121                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 16122                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 16123                                  	; si = DIRBUF+FIND_BUF.PNAME
 16124 00001421 89EF                    	mov	di,bp
 16125 00001423 E8AA04                  	call	CmpAscz		; compare candidate to temp name
 16126 00001426 7307                    	jnb	short ccRet	; it's not below it- return
 16127                                  
 16128                                  ;	New kid is alright. Copy to temp.
 16129                                  
 16130                                  	; 07/06/2023
 16131                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 16132                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 16133                                  	; si = DIRBUF+FIND_BUF.PNAME
 16134 00001428 89EF                    	mov	di,bp
 16135 0000142A B90D00                  	mov	cx,13
 16136 0000142D F3A4                    	rep	movsb
 16137                                  ccRet:
 16138 0000142F C3                      	retn
 16139                                  
 16140                                  ; ---------------------------------------------------------------------------
 16141                                  
 16142                                  ;***	CmpEntry - compare one directory entry to another in sort order
 16143                                  ;
 16144                                  ;	Compare one directory entry against another according to
 16145                                  ;	the sort codes in DestBuf. One or more comparisons
 16146                                  ;	may be made of file name, extension, time/date, and
 16147                                  ;	size.  Comparisons may be made for upward or downward
 16148                                  ;	sort order.
 16149                                  ;
 16150                                  ;	ENTRY	ES:BX = ptr to entry to compare
 16151                                  ;		ES:BP = ptr to entry to be compared against
 16152                                  ;		DestBuf contains sort codes (see DestBuf)
 16153                                  ;		DS = TRANGROUP seg addr
 16154                                  ;
 16155                                  ;	EXIT	BX = unchanged
 16156                                  ;		BP = unchanged
 16157                                  ;		Condition flags set for same, above, or below
 16158                                  ;		 comparing BX entry against BP entry.
 16159                                  ;		 'Same, above, below' translate to 'same, after, before'.
 16160                                  ;
 16161                                  ;	USED:	AX,CX,DX,SI,DI
 16162                                  
 16163                                  	; 16/02/2023
 16164                                  CmpEntry:
 16165 00001430 BE[9B9D]                	mov	si,DestBuf	; (DS:SI) = ptr to sort codes
 16166                                  ceLoop:
 16167 00001433 31C0                    	xor	ax,ax		; AX = 0
 16168 00001435 8A04                    	mov	al,[si]		; AL = sort code
 16169 00001437 08C0                    	or	al,al
 16170 00001439 741C                    	jz	short ceDone	; sort code is zero, we're done
 16171 0000143B 46                      	inc	si		; DS:SI = ptr to next sort code
 16172 0000143C 56                      	push	si		; save ptr to next sort code
 16173 0000143D FEC8                    	dec	al
 16174 0000143F D0E0                    	shl	al,1
 16175                                  	;sal	al,1		; AX = index into cmp call table
 16176                                  				; CY set for downward sort order
 16177 00001441 89C6                    	mov	si,ax		; SI = index into cmp call table
 16178 00001443 2E8B84[5814]            	mov	ax,[cs:si+FieldCmps]
 16179                                  				; AX = addr of compare routine
 16180 00001448 7204                    	jc	short ceDn	; downwards sort - go swap entries
 16181 0000144A FFD0                    	call	ax 		; do upwards sort
 16182 0000144C EB06                    	jmp	short ceNs
 16183                                  ceDn:
 16184 0000144E 87DD                    	xchg	bx,bp		; swap entry ptrs for downward sort order
 16185 00001450 FFD0                    	call	ax		; do sort
 16186 00001452 87DD                    	xchg	bx,bp		; swap ptrs back
 16187                                  ceNs:
 16188 00001454 5E                      	pop	si		; SI = ptr to next sort code
 16189 00001455 74DC                    	je	short ceLoop	; compare showed no difference, keep trying
 16190                                  ceDone:
 16191                                  
 16192                                  ;	Get here either from unequal compare or sort code = 0.
 16193                                  ;	In the latter case, condition codes indicate equality,
 16194                                  ;	which is correct.
 16195                                  
 16196 00001457 C3                      	retn
 16197                                  
 16198                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16199                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:1339h)
 16200                                  
 16201                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 16202                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:144Eh)
 16203                                  
 16204                                  FieldCmps:		; call table of entry comparisons
 16205 00001458 [6214]                  	dw	CmpName
 16206 0000145A [6D14]                  	dw	CmpExt
 16207 0000145C [BE14]                  	dw	CmpTime
 16208 0000145E [DA14]                  	dw	CmpSize
 16209 00001460 [DF14]                  	dw	CmpType
 16210                                  
 16211                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 16212                                  %if 0
 16213                                  	; 05/06/2023 - Retro DOS 4.2 COMMAND.COM
 16214                                  	dw	CmpCratio
 16215                                  %endif
 16216                                  
 16217                                  ; ---------------------------------------------------------------------------
 16218                                  
 16219                                  ;***	CmpName - compare file name of two entries
 16220                                  ;***	CmpExt - compare extension of two entries
 16221                                  ;
 16222                                  ;	ENTRY	ES:BX = ptr to one entry
 16223                                  ;		ES:BP = ptr to another entry
 16224                                  ;
 16225                                  ;	EXIT	BX = unchanged
 16226                                  ;		BP = unchanged
 16227                                  ;		Condition flags set for same, above, or below
 16228                                  ;		comparing BX entry to BP entry.
 16229                                  ;
 16230                                  ;	USED:	AX,CX,DX,SI,DI
 16231                                  
 16232                                  	; 16/02/2023
 16233                                  CmpName:
 16234 00001462 89DE                    	mov	si,bx		; ES:SI = ptr to BX entry
 16235 00001464 89EF                    	mov	di,bp		; ES:DI = ptr to BP entry
 16236                                  	;;add	si,filename	; ES:SI = ptr to BX name
 16237                                  	;add	si,1
 16238                                  	; 25/04/2023
 16239 00001466 46                      	inc	si
 16240                                  	;;add	di,filename	; ES:DI = ptr to BP name
 16241                                  	;add	di,1
 16242                                  	; 25/04/2023
 16243 00001467 47                      	inc	di
 16244                                  	;mov	cx,size filename
 16245                                  				; CX = length of name
 16246 00001468 B90800                  	mov	cx,8
 16247 0000146B EB0C                    	jmp	short CmpStr
 16248                                  
 16249                                  CmpExt:
 16250                                  	; 07/06/2023
 16251                                  	;mov	si,bx		; ES:SI = ptr to BX entry
 16252                                  	;mov	di,bp		; ES:DI = ptr to BP entry
 16253                                  	;;add	si,fileext	; ES:SI = ptr to BX extension
 16254                                  	;add	si,9
 16255                                  	;;add	di,fileext	; ES:DI = ptr to BP extension
 16256                                  	;add	di,9
 16257                                  	;
 16258 0000146D BE0900                  	mov	si,9
 16259 00001470 89F7                    	mov	di,si ; mov di,9
 16260 00001472 01DE                    	add	si,bx
 16261 00001474 01EF                    	add	di,bp
 16262                                  	;
 16263                                  	;mov	cx,size fileext	; CX = length of extension field
 16264 00001476 B90300                  	mov	cx,3
 16265                                  
 16266                                  ;	Bugbug:	use symbol for subfunction code.
 16267                                  
 16268                                  CmpStr:	
 16269 00001479 803E[9CA5]06            	cmp	byte [CountryPtrId],6
 16270 0000147E 753A                    	jne	short cnNoCollTable
 16271                                  				; no collating table available
 16272                                  
 16273                                  ;*	Compare strings using collating table.
 16274                                  ;
 16275                                  ;	ES:SI = ptr to 1st string
 16276                                  ;	ES:DI = ptr to 2nd string
 16277                                  ;	CX = length
 16278                                  
 16279 00001480 55                      	push	bp		; preserve BP
 16280 00001481 53                      	push	bx		; preserve BX
 16281 00001482 1E                      	push	ds		; preserve DS
 16282 00001483 C51E[9DA5]              	lds	bx,[CountryPtr]	; DS:BX = ptr to collating table
 16283                                  	;assume	ds:NOTHING
 16284 00001487 8B2F                    	mov	bp,[bx]		; BP = size of collating table
 16285 00001489 43                      	inc	bx
 16286 0000148A 43                      	inc	bx		; DS:BX = ptr to collating values
 16287                                  				; DS:[BX]-2 = size of table
 16288 0000148B 31C0                    	xor	ax,ax		; AX = 0 for starters
 16289                                  
 16290                                  ;	Bugbug:	Investigate removing collating table length checks.
 16291                                  
 16292                                  cnNextChar:
 16293 0000148D 268A05                  	mov	al,[es:di]	; AL = AX = char from 2nd string
 16294 00001490 47                      	inc	di		; ES:DI = ptr to next char 2nd string
 16295                                  
 16296                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 16297                                  %if 0
 16298                                  	cmp	ax,bp		; compare to collating table length
 16299                                  	jae	short cn1 	; char not in table
 16300                                  	xlat				
 16301                                  cn1:				; AL = AX = collating value
 16302                                  	mov	dx,ax		; DX = collating value from 2nd string
 16303                                  	;lods	byte ptr es:[si]
 16304                                  	es	lodsb		; AL = AX = char from 1st string
 16305                                  				; ES:SI = ptr to next char 1st string
 16306                                  	cmp	ax,bp		; compare to collating table length
 16307                                  	jae	short cn2	; char not in table
 16308                                  	xlat				
 16309                                  cn2:				; AL = AX = collating value
 16310                                  	cmp	ax,dx		; compare collating values
 16311                                  	loope	cnNextChar	; until unequal or no more left
 16312                                  
 16313                                  	pop	ds		; restore DS
 16314                                  	;assume	ds:TRANGROUP
 16315                                  	pop	bx		; restore BX
 16316                                  	pop	bp		; restore BP
 16317                                  	retn
 16318                                  
 16319                                  ;*	If no collating table is available, simply compare raw ASCII values.
 16320                                  ;	Don't we wish we could just do this all the time? Sigh.
 16321                                  
 16322                                  %else
 16323                                  	; 31/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 16324 00001491 84F6                    	test	dh,dh
 16325 00001493 7408                    	jz	short cn1
 16326 00001495 30F6                    	xor	dh,dh
 16327 00001497 88C2                    	mov	dl,al
 16328                                  	;lods	byte ptr es:[si]
 16329 00001499 26AC                    	es	lodsb
 16330 0000149B EB15                    	jmp	short cn4
 16331                                  cn1:
 16332 0000149D E88812                  	call	testkanj
 16333 000014A0 7402                    	jz	short cn2
 16334 000014A2 B601                    	mov	dh,1
 16335                                  cn2:
 16336 000014A4 39E8                    	cmp	ax,bp
 16337 000014A6 7301                    	jnb	short cn3
 16338 000014A8 D7                      	xlat
 16339                                  cn3:
 16340 000014A9 88C2                    	mov	dl,al
 16341                                  	;lods	byte ptr es:[si]
 16342 000014AB 26AC                    	es	lodsb
 16343 000014AD 39E8                    	cmp	ax,bp
 16344 000014AF 7301                    	jnb	short cn4
 16345 000014B1 D7                      	xlat
 16346                                  cn4:
 16347 000014B2 38D0                    	cmp	al,dl
 16348 000014B4 E1D7                    	loope	cnNextChar
 16349 000014B6 1F                      	pop	ds
 16350 000014B7 5B                      	pop	bx
 16351 000014B8 5D                      	pop	bp
 16352 000014B9 C3                      	retn	
 16353                                  %endif
 16354                                  
 16355                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16356                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:138Dh)
 16357                                  cnNoCollTable:
 16358                                  	;repe	cmps byte ptr es:[si], byte ptr es:[di] ; 31/07/2024
 16359                                  				;db 0F3h,26h,0A6h,0C3h
 16360 000014BA F3                      	repe	; 0F3h
 16361 000014BB 26                      	es	; 26h
 16362 000014BC A6                      	cmpsb	; 0A6h
 16363 000014BD C3                      	retn	; 0C3h
 16364                                  
 16365                                  ; ---------------------------------------------------------------------------
 16366                                  
 16367                                  ;***	CmpTime - compare entries by date/time
 16368                                  ;
 16369                                  ;	ENTRY	ES:BX = ptr to one entry
 16370                                  ;		ES:BP = ptr to another entry
 16371                                  ;
 16372                                  ;	EXIT	BX = unchanged
 16373                                  ;		BP = unchanged
 16374                                  ;		Condition flags set for same, above, or below
 16375                                  ;		 comparing BX entry to BP entry.
 16376                                  ;
 16377                                  ;	USED:	CX,SI,DI
 16378                                  ;
 16379                                  ;	NOTE	Filetime and filedate fields in our private entry
 16380                                  ;		structure must be adjacent and in that order.
 16381                                  
 16382                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16383                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16384                                  CmpTime:
 16385 000014BE 89DE                    	mov	si,bx
 16386 000014C0 89EF                    	mov	di,bp
 16387                                  	;add	si,filedate + size filedate - 1
 16388 000014C2 83C610                  	add	si,16 ; 15+2-1
 16389                                  	;add	di,filedate + size filedate - 1
 16390 000014C5 83C710                  	add	di,16 ; 15+2-1
 16391                                  	; 07/06/2023
 16392 000014C8 BE1000                  	mov	si,16
 16393                                  CmpST2:		; 07/06/2023
 16394 000014CB 89F7                    	mov	di,si	; mov di,16
 16395 000014CD 01DE                    	add	si,bx
 16396 000014CF 01EF                    	add	di,bp
 16397                                  
 16398                                  	;mov	cx,size filetime + size filedate
 16399 000014D1 B90400                  	mov	cx,4 ; 2+2
 16400 000014D4 FD                      	std
 16401                                  	;repe	cmps byte ptr es:[si],[di]
 16402                                  				;db 0F3h,26h,0A6h, 0FCh,0C3h
 16403 000014D5 F3                      	repe	; 0F3h
 16404 000014D6 26                      	es	; 26h
 16405 000014D7 A6                      	cmpsb	; 0A6h
 16406                                  	
 16407 000014D8 FC                      	cld	; 0FCh
 16408 000014D9 C3                      	retn	; 0C3h
 16409                                  
 16410                                  ; ---------------------------------------------------------------------------
 16411                                  
 16412                                  ;***	CmpSize - compare entries by size
 16413                                  ;
 16414                                  ;	ENTRY	ES:BX = ptr to one entry
 16415                                  ;		ES:BP = ptr to another entry
 16416                                  ;
 16417                                  ;	EXIT	BX = unchanged
 16418                                  ;		BP = unchanged
 16419                                  ;		Condition flags set for same, above, or below
 16420                                  ;		 comparing BX entry to BP entry.
 16421                                  ;
 16422                                  ;	USED:	CX,SI,DI
 16423                                  
 16424                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16425                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16426                                  CmpSize:
 16427                                  	;mov	si,bx
 16428                                  	;mov	di,bp
 16429                                  	;;add	si,filesize + size filesize - 1
 16430                                  	;add	si,20  ; 17+4-1
 16431                                  	;;add	di,filesize + size filesize - 1
 16432                                  	;add	di,20  ; 17+4-1
 16433                                  	; 07/06/2023
 16434 000014DA BE1400                  	mov	si,20
 16435                                  	;;;
 16436 000014DD EBEC                    	jmp	short CmpST2 ; 07/06/2023
 16437                                  	;;;
 16438                                  ;CmpST2:
 16439                                  ;	mov	di,si	; mov di,20
 16440                                  ;	add	si,bx
 16441                                  ;	add	di,bp
 16442                                  ;
 16443                                  ;	;mov	cx,size filesize
 16444                                  ;	mov	cx,4
 16445                                  ;	std
 16446                                  ;	;repe	cmps byte ptr es:[si],[di]
 16447                                  ;				;db 0F3h,26h,0A6h
 16448                                  ;	repe	; 0F3h
 16449                                  ;	es	; 26h
 16450                                  ;	cmpsb	; 0A6h
 16451                                  ;
 16452                                  ;	cld
 16453                                  ;	retn
 16454                                  
 16455                                  ; ---------------------------------------------------------------------------
 16456                                  
 16457                                  ;***	CmpType - compare entries by file type (subdirectory or not)
 16458                                  ;
 16459                                  ;	ENTRY	ES:BX = ptr to one entry
 16460                                  ;		ES:BP = ptr to another entry
 16461                                  ;
 16462                                  ;	EXIT	BX = unchanged
 16463                                  ;		BP = unchanged
 16464                                  ;		Condition flags set for same, above, or below
 16465                                  ;		 comparing BX entry to BP entry.
 16466                                  ;
 16467                                  ;	USED:	AX
 16468                                  
 16469                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16470                                  CmpType:
 16471                                  	;mov	al,es:[bx].fileattr
 16472 000014DF 268A470C                	mov	al,[es:bx+12]
 16473                                  	;mov	ah,es:[bp].fileattr
 16474 000014E3 268A660C                	mov	ah,[es:bp+12]
 16475                                  	;and	ax,(ATTR_DIRECTORY shl 8) + ATTR_DIRECTORY
 16476                                  	;and	ax,1010h
 16477 000014E7 251010                  	and	ax,(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY
 16478 000014EA 38C4                    	cmp	ah,al
 16479 000014EC C3                      	retn
 16480                                  
 16481                                  ; ---------------------------------------------------------------------------
 16482                                  
 16483                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 16484                                  %if 0
 16485                                  
 16486                                  ;***	CmpCratio - compare entries by compression ratio
 16487                                  ;
 16488                                  ;	ENTRY	ES:BX = ptr to one entry
 16489                                  ;		ES:BP = ptr to another entry
 16490                                  ;
 16491                                  ;	EXIT	BX = unchanged
 16492                                  ;		BP = unchanged
 16493                                  ;		Condition flags set for same, above, or below
 16494                                  ;		 comparing BX entry to BP entry.
 16495                                  ;
 16496                                  ;	USED:	AX
 16497                                  
 16498                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 16499                                  CmpCratio:
 16500                                  	;mov	al,es:[bx].compratio
 16501                                  	mov	al,[es:bx+21]	
 16502                                  	;cmp	al,es:[bp].compratio
 16503                                  	cmp     al,[es:bp+21]
 16504                                  	retn
 16505                                  
 16506                                  %endif
 16507                                  
 16508                                  ; ---------------------------------------------------------------------------
 16509                                  
 16510                                  ;***	DefaultAttr - set default attribute conditions
 16511                                  ;
 16512                                  ;	ENTRY	nothing
 16513                                  ;
 16514                                  ;	EXIT	CY clear
 16515                                  ;
 16516                                  ;	USED
 16517                                  ;
 16518                                  ;	EFFECTS
 16519                                  ;
 16520                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 16521                                  
 16522                                  	; 16/02/2023
 16523                                  DefaultAttr:
 16524                                  	;mov	byte [AttrSpecified],6
 16525 000014ED C606[729D]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM
 16526                                  					; specify H and S
 16527 000014F2 C606[739D]00            	mov	byte [AttrSelect],0	; H and S must be off
 16528 000014F7 F8                      	clc				; return success
 16529                                  dtRet:	; 18/02/2023
 16530 000014F8 C3                      	retn
 16531                                  
 16532                                  ; ---------------------------------------------------------------------------
 16533                                  
 16534                                  ;***	DisplayTotals - display grand total stats
 16535                                  ;
 16536                                  ;	If we searched subdirectories, display the total # files found
 16537                                  ;	 and total size of files found.
 16538                                  ;	Display disk space remaining.
 16539                                  ;
 16540                                  ;	ENTRY	FileCntTotal, FileSizTotal contain correct values
 16541                                  ;		Bits contains setting of /s
 16542                                  ;		FCB contains drive #
 16543                                  ;
 16544                                  ;	EXIT	nothing
 16545                                  ;
 16546                                  ;	USES	AX,DX
 16547                                  ;		FileSiz
 16548                                  
 16549                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16550                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:13D1h
 16551                                  
 16552                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16553                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:14F1h
 16554                                  
 16555                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 16556                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1565h
 16557                                  
 16558                                  DisplayTotals:
 16559                                  	;;;test	Bits,mask subd
 16560                                  	;;test	word [_Bits],4
 16561                                  	;test	byte [_Bits],4
 16562                                  	; 07/06/2023
 16563 000014F9 F606[6A9D]04            	test	byte [_Bits],mask.subd	; 8 ; MSDOS 6.0
 16564                                  			; 31/07/2024	; 4 ; PCDOS 7.1
 16565 000014FE 7423                    	jz	short dtFree		; no subdirectories- do bytes free
 16566                                  
 16567 00001500 E83D14                  	call	CRLF2			; start on new line
 16568 00001503 E87304                  	call	UseLine
 16569                                  
 16570 00001506 BA[FC91]                	mov	dx,total_ptr
 16571 00001509 E8D13E                  	call	std_printf		; "Total:",cr,lf
 16572 0000150C E86A04                  	call	UseLine
 16573                                  
 16574                                  ; 31/07/2024
 16575                                  ; PCDOS 7.1 COMMAND.COM
 16576                                  	;;;
 16577                                  %if 0
 16578                                  	; 07/06/2023
 16579                                  	; MSDOS 6.22 COMMAND.COM
 16580                                  	;test	word [_Bits],1		; mask.cratio
 16581                                  	test	byte [_Bits],mask.cratio
 16582                                  	jz      short dtCntSize
 16583                                  	mov     ax,[ccluUsedTotal]
 16584                                  	mov     [ccluUsedDir],ax
 16585                                  	mov     si,csecUsedTotal
 16586                                  	mov     di,csecUsedDir
 16587                                  	movsw
 16588                                  	movsw
 16589                                  dtCntSize:    
 16590                                  %endif
 16591                                  	;;;
 16592 0000150F A1[3D9C]                	mov	ax,[FileCntTotal]	; AX = # files found mod 64K
 16593 00001512 BE[419C]                	mov	si,FileSizTotal
 16594 00001515 BF[019C]                	mov	di,FileSiz
 16595 00001518 A5                      	movsw				; move total size to size variable
 16596 00001519 A5                      	movsw
 16597                                  
 16598                                  ; 31/07/2024
 16599                                  ; PCDOS 7.1 COMMAND.COM
 16600                                  %if 1
 16601 0000151A A5                      	movsw
 16602 0000151B A5                      	movsw
 16603 0000151C 8B16[3F9C]              	mov	dx,[FileCntTotal+2]
 16604                                  %endif
 16605 00001520 E8D106                  	call	DisplayCntSiz		; display file count & size
 16606                                  dtFree:
 16607                                  
 16608                                  ; 31/07/2024
 16609                                  ; PCDOS 7.1 COMMAND.COM
 16610                                  %if 0
 16611                                  	mov	ah,36h
 16612                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 16613                                  	mov	dl,[FCB] ; [5Ch]	; DL = drive#
 16614                                  	int	21h			; call DOS
 16615                                  	cmp	ax,-1			; check 'invalid drive' return code
 16616                                  	jz	short dtRet		; can't get drive space - return
 16617                                  	mul	cx
 16618                                  	mul	bx
 16619                                  	mov	[Bytes_Free],ax
 16620                                  	mov	[Bytes_Free+2],dx
 16621                                  	mov	dx,bytmes_ptr
 16622                                  %else
 16623                                  	; 31/07/2024 - Retro DOS v5.0
 16624                                  	; PCDOS 7.1 COMMAND.COM
 16625 00001523 E86707                  	call	GetDriveLtr
 16626 00001526 A2[399C]                	mov	byte [efs_drive],al ; "C:\"
 16627 00001529 BA[399C]                	mov	dx,efs_drive ; "C:\"
 16628 0000152C BF[0D9C]                	mov	di,efs_buffer
 16629 0000152F B92C00                  	mov	cx,44
 16630 00001532 26890D                  	mov	[es:di],cx
 16631 00001535 26C745020000            	mov	word [es:di+2],0
 16632 0000153B B80373                  	mov	ax,7303h	; GET EXTENDED FREE SPACE ON DRIVE (Windows95, FAT32)
 16633                                  				; DS:DX	-> ASCIZ string	for drive ("C:\" or "\\SERVER\Share")
 16634                                  				; ES:DI	-> buffer for extended free space structure
 16635                                  				; CX = length of buffer	for extended free space
 16636 0000153E CD21                    	int	21h		; DOS -
 16637                                  				;
 16638                                  				; Return:
 16639                                  				; CF clear if successful
 16640                                  				; ES:DI	buffer filled
 16641                                  				; CF set on error
 16642                                  				; AX = error code
 16643                                  				;
 16644                                  				; Format of extended free space	structure:
 16645                                  				;
 16646                                  				; Offset  Size	  Description
 16647                                  				; 00h	 WORD	 (ret) size of returned	structure
 16648                                  				; 02h	 WORD	 (call)	structure version (0000h)
 16649                                  				;		 (ret) actual structure	version	(0000h)
 16650                                  				; 04h	 DWORD	 number	of sectors per cluster
 16651                                  				;		 (with adjustment for compression)
 16652                                  				; 08h	 DWORD	 number	of bytes per sector
 16653                                  				; 0Ch	 DWORD	 number	of available clusters
 16654                                  				; 10h	 DWORD	 total number of clusters on the drive
 16655                                  				; 14h	 DWORD	 number	of physical sectors available on the drive,
 16656                                  				;		 without adjustment for	compression
 16657                                  				; 18h	 DWORD	 total number of physical sectors on the drive,
 16658                                  				;		 without adjustment for	compression
 16659                                  				; 1Ch	 DWORD	 number	of available allocation	units,
 16660                                  				;		 without adjustment for	compression
 16661                                  				; 20h	 DWORD	 total allocation units,
 16662                                  				;		 without adjustment for	compression
 16663                                  				; 24h  8 BYTEs	 reserved
 16664 00001540 89C1                    	mov	cx,ax		; error	code (cf=1) or (cf=0) efs structure size (44)
 16665 00001542 268B5D08                	mov	bx,[es:di+8]	; bytes	per sector
 16666 00001546 268B4514                	mov	ax,[es:di+14h]	; number of sectors available
 16667 0000154A 268B5516                	mov	dx,[es:di+16h]
 16668 0000154E 7204                    	jc	short get_efs_err
 16669 00001550 08C9                    	or	cl,cl
 16670 00001552 750F                    	jnz	short dtFree_1	; cl = 44 (IBMDOS 7.1 Kernel, INT 21h, AX=7303h	return value)
 16671                                  get_efs_err:
 16672 00001554 B436                    	mov	ah,36h
 16673                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 16674 00001556 8A165C00                	mov	dl,[FCB] 		; DL = drive#
 16675                                  	;mov	dl,[5Ch]
 16676 0000155A CD21                    	int	21h		; DOS -	2+ - GET DISK SPACE
 16677                                  				; DL = drive code (0 = default,	1 = A, 2 = B, etc.)
 16678 0000155C 83F8FF                  	cmp	ax,0FFFFh	; ax = sectors per cluster
 16679 0000155F 7497                    	je	short dtRet	; ! invalid drive ! return
 16680 00001561 F7E1                    	mul	cx		; * bytes per sectors
 16681                                  				; dx:ax	= bytes	per cluster
 16682                                  				; bx = free clusters
 16683                                  dtFree_1:
 16684 00001563 89D1                    	mov	cx,dx		; hw of	free sectors
 16685 00001565 F7E3                    	mul	bx		; lw of	free sectors * bytes per sector
 16686 00001567 91                      	xchg	ax,cx
 16687 00001568 87D3                    	xchg	dx,bx
 16688 0000156A F7E2                    	mul	dx
 16689 0000156C 01D8                    	add	ax,bx
 16690 0000156E 83D200                  	adc	dx,0		; dx:ax:cx = free bytes
 16691 00001571 09D2                    	or	dx,dx
 16692 00001573 7416                    	jz	short dtFree_2
 16693 00001575 88E9                    	mov	cl,ch		; prints free space as kilobytes
 16694 00001577 88C5                    	mov	ch,al		; save al
 16695 00001579 88E0                    	mov	al,ah		; / 256
 16696 0000157B 88D4                    	mov	ah,dl
 16697 0000157D D0CE                    	ror	dh,1		; / 2 (= free bytes / 512)
 16698 0000157F D1D8                    	rcr	ax,1
 16699 00001581 D1D9                    	rcr	cx,1
 16700 00001583 D0CE                    	ror	dh,1		; / 2 (= free bytes / 1024)
 16701 00001585 D1D8                    	rcr	ax,1
 16702 00001587 D1D9                    	rcr	cx,1
 16703 00001589 B2FF                    	mov	dl,0FFh	; dx > 0
 16704                                  dtFree_2:
 16705 0000158B 890E[869D]              	mov	[Bytes_Free],cx
 16706 0000158F A3[889D]                	mov	[Bytes_Free+2],ax
 16707 00001592 09D2                    	or	dx,dx		; is dx	> 0 ?
 16708 00001594 740F                    	jz	short dtFree_3	; no
 16709 00001596 BA[4292]                	mov	dx,kbytesf_ptr	; MSG_1106 (".. K bytes free" msg)
 16710                                  				; 30 digits, long binary do decimal
 16711 00001599 803E[0C9C]00            	cmp	byte [bfree_not_kilo],0
 16712 0000159E 741C                    	jz	short dtFree_5
 16713 000015A0 BA[4292]                	mov	dx,kbytesf_ptr	; MSG_1106
 16714                                  				; ".. K	bytes free" msg, 28 digits
 16715 000015A3 EB17                    	jmp	short dtFree_5
 16716                                  dtFree_3:
 16717 000015A5 BA[B18F]                	mov	dx,bytmes1_ptr	; MSG_1020 (".. bytes free" msg)
 16718                                  				; 30 digits, long binary do decimal
 16719 000015A8 803E[099C]00            	cmp	byte [narrow],0	; narrow display area ?
 16720 000015AD 7503                    	jnz	short dtFree_4	; yes
 16721 000015AF BA[BF8F]                	mov	dx,bytmes2_ptr	; MSG_1020, 33 digits
 16722                                  dtFree_4:
 16723 000015B2 803E[0C9C]00            	cmp	byte [bfree_not_kilo],0 ; not kilobyte option
 16724 000015B7 7403                    	jz	short dtFree_5	; use kilo bytes (if number of free bytes is big)
 16725 000015B9 BA[CD8F]                	mov	dx,bytmes_n_ptr	; narrow (28 digits), MSG_1020
 16726                                  dtFree_5:
 16727                                  %endif
 16728 000015BC E81E3E                  	call	std_printf	; "nnn bytes free",cr,lf
 16729                                  	;call	UseLine
 16730                                  ;dtRet:
 16731                                  	;retn
 16732                                  	; 18/02/2023
 16733 000015BF E9B703                  	jmp	UseLine
 16734                                  
 16735                                  ; ---------------------------------------------------------------------------
 16736                                  
 16737                                  ;***	FileIsDevice - see if file looks like a device
 16738                                  ;
 16739                                  ;	ENTRY	PathPos = ptr to pathname
 16740                                  ;		PathCnt = length of pathname w/o terminating char
 16741                                  ;		DirBuf is DOS DTA
 16742                                  ;
 16743                                  ;	EXIT	ZR = set if file looks like a device
 16744                                  ;
 16745                                  ;	USED	AX,BX,CX,DX,DI
 16746                                  ;
 16747                                  ;	EFFECTS
 16748                                  ;
 16749                                  ;	  DTA buffer holds results of Find First function
 16750                                  ;
 16751                                  ;	NOTES
 16752                                  ;
 16753                                  ;	  We try to flag devices in two ways. First, we try
 16754                                  ;	  the DOS Find First function. It returns attribute bit 6
 16755                                  ;	  set on a successful find if it identifies a device name.
 16756                                  ;	  Unfortunately, it returns 'path not found' for a device
 16757                                  ;	  name terminated with colon, such as "CON:". So, we look
 16758                                  ;	  for any colon in the pathname after the 2nd character,
 16759                                  ;	  and flag the pathname as a device if we find one.
 16760                                  
 16761                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16762                                  FileIsDevice:
 16763 000015C2 8B16[6E9D]              	mov	dx,[PathPos]	 ; DX = ptr to pathname
 16764                                  
 16765 000015C6 89D7                    	mov	di,dx
 16766 000015C8 033E[6C9D]              	add	di,[PathCnt]	 ; DI = ptr to byte after pathname
 16767 000015CC 30DB                    	xor	bl,bl		 ; BL = NUL to terminate pathname with
 16768 000015CE 861D                    	xchg	bl,[di] 	 ; BL = saved pathname terminating char
 16769                                  
 16770 000015D0 31C9                    	xor	cx,cx		 ; CX = attribute mask (normal search)
 16771 000015D2 B44E                    	mov	ah,4Eh
 16772                                  	;mov	ah,Find_First	 ; AH = DOS Find First function code
 16773 000015D4 CD21                    	int	21h	 	 ; call DOS
 16774 000015D6 861D                    	xchg	bl,[di]		 ; restore pathname terminating char
 16775 000015D8 720A                    	jc	short piCol	 ; didn't find a dir entry, check for colon
 16776                                  
 16777                                  ;	Found a dir entry, see if Find First thinks it's a device.
 16778                                  
 16779                                  	;test	byte [DIRBUF+21],40h
 16780 000015DA F606[2D9D]40            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 16781 000015DF 7403                    	jz	short piCol	 ; device attribute not set, look for colon
 16782 000015E1 31C9                    	xor	cx,cx		 ; it's a device, return ZR flag
 16783                                  	;jmp	short piRet
 16784                                  	; 25/04/2023
 16785                                  piRet:
 16786 000015E3 C3                      	retn
 16787                                  
 16788                                  ;	Device attribute not returned by Find First function. But
 16789                                  ;	let's check for a colon anywhere in the pathname after the
 16790                                  ;	second byte.
 16791                                  ;
 16792                                  ;	DI = ptr to byte after pathname
 16793                                  
 16794                                  piCol:
 16795 000015E4 4F                      	dec	di		 ; DI = ptr to last char in pathname
 16796 000015E5 B03A                    	mov	al,':'
 16797                                  	;mov	al,COLON_CHAR	 ; AL = colon char to search for
 16798 000015E7 8B0E[6C9D]              	mov	cx,[PathCnt]	 ; CX = # chars to scan
 16799 000015EB 49                      	dec	cx
 16800 000015EC 49                      	dec	cx		 ; ignore 1st two chars of pathname
 16801 000015ED 09C9                    	or	cx,cx
 16802 000015EF 78F2                    	js	short piRet	 ; if < 2 chars in pathname, just return
 16803 000015F1 09FF                    	or	di,di		 ; clear ZR in case CX = 0
 16804 000015F3 FD                      	std			 ; scan downward
 16805 000015F4 F2AE                    	repne	scasb
 16806 000015F6 FC                      	cld			 ; restore default upward direction
 16807                                  
 16808                                  ;	After scanning, the ZR flag is set to indicate presence of a colon.
 16809                                  ;piRet:
 16810 000015F7 C3                      	retn
 16811                                  
 16812                                  ;FileIsDevice endp
 16813                                  
 16814                                  ; ---------------------------------------------------------------------------
 16815                                  
 16816                                  ;***	FindFirst - find first directory entry to display
 16817                                  ;***	FindNext - find next directory entry to display
 16818                                  ;
 16819                                  ;	ENTRY	Bits<inmem> = set if entries are loaded in TPA
 16820                                  ;		AttrSpecified, AttrSelect are set
 16821                                  ;
 16822                                  ;	EXIT	CY = clear if successful
 16823                                  ;		BX = offset in TPA buffer of directory entry found
 16824                                  ;
 16825                                  ;		If unsuccessful,
 16826                                  ;		CY = set
 16827                                  ;		AX = DOS error code
 16828                                  ;		DOS Get Extended Error call will get error code
 16829                                  ;
 16830                                  ;		NOTE: if entries were loaded into TPA, AX contains
 16831                                  ;		ERROR_NO_MORE_FILES when no more entries are available,
 16832                                  ;		but DOS Get Extended Error call WON'T return the correct
 16833                                  ;		error. That's ok, because we'll see the value in AX
 16834                                  ;		and recognize it as a non-error condition.
 16835                                  ;
 16836                                  ;	USED	AX,CX,DX,SI,DI
 16837                                  ;
 16838                                  ;	EFFECTS
 16839                                  ;
 16840                                  ;	  Entries in memory may be marked as output.
 16841                                  ;	  If not sorted, entry is loaded at TPA.
 16842                                  ;
 16843                                  ;	NOTES
 16844                                  ;
 16845                                  ;	  If we don't find a qualifying file, we return after the final
 16846                                  ;	   DOS Find File call. A DOS Get Extended Error call will then
 16847                                  ;	   indicate an appropriate condition.
 16848                                  
 16849                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16850                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 16851                                  
 16852                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16853                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1585h
 16854                                  
 16855                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 16856                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1667h
 16857                                  	
 16858                                  FindFirst:
 16859                                  	;mov	ax,offset TRANGROUP:GetFirst
 16860 000015F8 B8[CF16]                	mov	ax,GetFirst
 16861 000015FB EB03                    	jmp	short ffFindEntry
 16862                                  
 16863                                  	; 18/02/2023
 16864                                  FindNext:
 16865                                  	;mov	ax,offset TRANGROUP:GetNext
 16866 000015FD B8[DD16]                	mov	ax,GetNext
 16867                                  
 16868                                  ;	AX = address of correct disk get routine to use.
 16869                                  
 16870                                  ffFindEntry:
 16871 00001600 06                      	push	es			; save TRANGROUP seg addr
 16872                                  	;;;test	Bits,mask inmem
 16873                                  	;;test	word [_Bits],20h
 16874                                  	;test	byte [_Bits],20h
 16875                                  	; 07/06/2023
 16876 00001601 F606[6A9D]80            	test	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0
 16877                                  			; 31/07/2024	; 80h ; PCDOS 7.1	
 16878 00001606 7405                    	jz	short ffDisk		; entries not in memory, search disk
 16879                                  
 16880                                  ;	Entries are loaded in memory to sort out. Find the first one.
 16881                                  ;	There will always be one, or LoadEntries would've failed.
 16882                                  
 16883 00001608 E81A00                  	call	FindInMem		; find first entry in TPA
 16884 0000160B EB16                    	jmp	short ffRet		; return what TPA search returns
 16885                                  
 16886                                  ;	Get entry from disk.
 16887                                  
 16888                                  ffDisk:
 16889 0000160D FFD0                    	call	ax			; get entry from disk
 16890 0000160F 720E                    	jc	short ffGetErr		; get & return error
 16891 00001611 8E06[D39B]              	mov	es,[TPA]		; ES = seg addr of TPA
 16892 00001615 31FF                    	xor	di,di			; ES:DI = ptr to TPA
 16893 00001617 89FB                    	mov	bx,di			; BX = offset of entry in TPA
 16894 00001619 E85C01                  	call	LoadEntry		; load entry to TPA
 16895 0000161C F8                      	clc				; return success
 16896 0000161D EB04                    	jmp	short ffRet
 16897                                  
 16898                                  ffGetErr:
 16899 0000161F E8270A                  	call	 get_ext_error_number	; AX = DOS error code
 16900 00001622 F9                      	stc
 16901                                  ffRet:
 16902 00001623 07                      	pop	es			; ES = TRANGROUP seg addr again
 16903 00001624 C3                      	retn
 16904                                  
 16905                                  ; ---------------------------------------------------------------------------
 16906                                  
 16907                                  ;***	FindInMem - find next directory entry in TPA buffer
 16908                                  ;
 16909                                  ;	ENTRY	TPA is loaded (see LoadEntries)
 16910                                  ;
 16911                                  ;	EXIT	BX = offset in TPA of entry found
 16912                                  ;
 16913                                  ;		If no more files,
 16914                                  ;		CY = set
 16915                                  ;		AX = DOS 'no more files' error code
 16916                                  ;
 16917                                  ;	USED	AX,BX,CX,DX,SI,DI,BP,ES
 16918                                  ;
 16919                                  ;	EFFECTS
 16920                                  ;
 16921                                  ;	  Entry found is flagged as 'used' (see EntryStruc).
 16922                                  
 16923                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16924                                  FindInMem:
 16925 00001625 8E06[D39B]              	mov	es,[TPA]		; ES = TPA seg addr
 16926 00001629 31DB                    	xor	bx,bx			; ES:BX = ptr to 1st entry in TPA
 16927 0000162B FC                      	cld				; make sure default string direction is up
 16928                                  	
 16929 0000162C E86D00                  	call	FindOneInMem		; locate an entry
 16930 0000162F 720E                    	jc	short fiNoMore		; none left, set up 'no more files' error
 16931                                  
 16932                                  ;	BX = ptr to entry in TPA
 16933                                  
 16934                                  fiBest:
 16935 00001631 89DD                    	mov	bp,bx			; BP = ptr to best entry so far
 16936                                  fiNext:
 16937 00001633 E87300                  	call	FindNextInMem		; locate next entry
 16938 00001636 720C                    	jc	short fiFound		; no more, best entry so far wins
 16939                                  
 16940                                  ;	BX = ptr to next entry
 16941                                  
 16942 00001638 E8F5FD                  	call	CmpEntry		; compare it to best found so far (BP)
 16943 0000163B 73F6                    	jnb	short fiNext		; it's not better, go look at next one
 16944 0000163D EBF2                    	jmp	short fiBest		; it's better, go mark it as best so far
 16945                                  
 16946                                  fiNoMore:
 16947                                  
 16948                                  ;	No more entries available in TPA. Set up 'no more files' error.
 16949                                  
 16950                                  	;mov	ax,18
 16951 0000163F B81200                  	mov	ax,ERROR_NO_MORE_FILES	; AX = 'no more files' error code
 16952 00001642 F9                      	stc				; return error
 16953                                  	;jmp	short fiRet
 16954                                  	; 18/02/2023
 16955 00001643 C3                      	retn
 16956                                  
 16957                                  fiFound:
 16958 00001644 89EB                    	mov	bx,bp			; BX = ptr to best entry found
 16959 00001646 26C60701                	mov	byte [es:bx],1		; mark entry 'used'
 16960 0000164A F8                      	clc				; return success
 16961                                  fiRet:
 16962 0000164B C3                      	retn
 16963                                  
 16964                                  ; ---------------------------------------------------------------------------
 16965                                  
 16966                                  ;***	FindNextChild - find next subdirectory in current directory
 16967                                  ;
 16968                                  ;	ENTRY	BX = ptr to last child found, ASCIIZ filename
 16969                                  ;		DirBuf is established DTA
 16970                                  ;
 16971                                  ;	EXIT	BX = ptr (same addr) to next child found, ASCIIZ filename
 16972                                  ;
 16973                                  ;		If failure,
 16974                                  ;		CY = set
 16975                                  ;		DOS Get Extended Error call will get error
 16976                                  ;
 16977                                  ;	USED	AX,CX,DX,SI,DI,BP
 16978                                  ;
 16979                                  ;	EFFECTS
 16980                                  ;
 16981                                  ;	  DirBuf is used for find first/next calls.
 16982                                  ;
 16983                                  ;	NOTES
 16984                                  ;
 16985                                  ;	  We keep on checking files until DOS returns an error. If
 16986                                  ;	  the error is 'no more files' and the temp filename is not
 16987                                  ;	  the initial high tag, copy the temp to the child's name spot
 16988                                  ;	  and return success. Otherwise, send the error back to caller.
 16989                                  ;
 16990                                  ;	  This routine depends on DS,ES,CS, & SS all being equal.
 16991                                  
 16992                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16993                                  FindNextChild:
 16994 0000164C 83EC0C                  	sub	sp,12			; make temp filename buf on stack
 16995                                  	;shove	00FFh			; temp filename = high tag
 16996 0000164F B8FF00                  	mov	ax,0FFh
 16997 00001652 50                      	push	ax
 16998 00001653 89E5                    	mov	bp,sp			; BP = ptr to temp filename buf
 16999                                  	;shove	"*"	
 17000 00001655 B02A                    	mov	al,'*'  ; ax = 002Ah
 17001 00001657 50                      	push	ax
 17002                                  	;;shove	".*" 
 17003                                  	;mov	ax,"*."
 17004                                  	;mov	ax,2E2Ah
 17005 00001658 B42E                    	mov	ah,'.'
 17006 0000165A 50                      	push	ax
 17007 0000165B E82F06                  	call	GetDriveLtr		; AX = "d:"
 17008 0000165E 50                      	push	ax
 17009 0000165F 89E2                    	mov	dx,sp			; DX = ptr to "d:*.*",0 on stack
 17010                                  
 17011                                  ;	See that the stack is restored properly at the end of this proc.
 17012                                  
 17013                                  	;mov	cx,10h
 17014 00001661 B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 17015 00001664 B44E                    	mov	ah,4Eh
 17016                                  	;mov	ah,Find_First
 17017 00001666 CD21                    	int	21h			; DOS- Find First matching file
 17018 00001668 722C                    	jc	short fcRet		; return error
 17019                                  
 17020 0000166A E89EFD                  	call	CheckChild		; check child against last, temp
 17021                                  fcNext:	
 17022                                  	;mov	cx,10h
 17023 0000166D B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 17024 00001670 B44F                    	mov	ah,4Fh
 17025                                  	;mov	ah,Find_Next
 17026 00001672 CD21                    	int	21h			; DOS- Find Next matching file
 17027 00001674 7205                    	jc	short fcErr		; examine error
 17028                                  
 17029 00001676 E892FD                  	call	CheckChild		; check child against last, temp
 17030 00001679 EBF2                    	jmp	short fcNext		; go find another child
 17031                                  
 17032                                  fcErr:
 17033 0000167B E8CB09                  	call	get_ext_error_number	; AX = extended error code
 17034                                  	;cmp	ax,18
 17035 0000167E 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	; no more files?
 17036 00001681 7512                    	jne	short fcNope		; some other error- return it
 17037                                  
 17038                                  ;	We ran out of files. See if we qualified at least one.
 17039                                  
 17040 00001683 807E00FF                	cmp	byte [bp],0FFh
 17041 00001687 740C                    	je	short fcNope		; temp filename is unused- no child
 17042                                  
 17043                                  ;	Move temp filename to child name position.
 17044                                  
 17045 00001689 89EE                    	mov	si,bp			; SI = ptr to temp filename
 17046 0000168B 89DF                    	mov	di,bx			; DI = ptr to child name pos'n
 17047                                  fcMove:
 17048 0000168D AC                      	lodsb				; AL = next byte of filename
 17049 0000168E AA                      	stosb				; store byte
 17050 0000168F 08C0                    	or	al,al
 17051 00001691 7403                    	jz	short fcRet		; byte was zero, return success (CY clear)
 17052 00001693 EBF8                    	jmp	short fcMove		; go move another byte
 17053                                  fcNope:
 17054 00001695 F9                      	stc				; return error
 17055                                  fcRet:
 17056 00001696 9F                      	lahf
 17057 00001697 83C414                  	add	sp,20			; restore stack
 17058 0000169A 9E                      	sahf
 17059 0000169B C3                      	retn
 17060                                  
 17061                                  ; ---------------------------------------------------------------------------
 17062                                  
 17063                                  ;***	FindOneInMem - find the first available entry in TPA
 17064                                  ;***	FindNextInMem - find the next available entry in TPA
 17065                                  ;
 17066                                  ;	ENTRY	ES = TPA seg addr
 17067                                  ;		BX = ptr to entry in TPA
 17068                                  ;
 17069                                  ;	EXIT	BX = ptr to entry found
 17070                                  ;		CY = set if no more entries available in TPA
 17071                                  ;
 17072                                  ;	USED	AL
 17073                                  
 17074                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17075                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 17076                                  FindOneInMem:
 17077 0000169C 268A07                  	mov	al,[es:bx]		; examine 'used' byte of starting entry
 17078 0000169F 3C01                    	cmp	al,1
 17079 000016A1 7406                    	je	short FindNextInMem	; entry has already been used
 17080 000016A3 3CFF                    	cmp	al,0FFh
 17081 000016A5 7407                    	je	short foNoMore		; 0FFh, we're at the end of the list
 17082                                  
 17083                                  ;	BX = ptr to entry that hasn't been output yet.
 17084                                  
 17085 000016A7 F8                      	clc				; return success
 17086 000016A8 C3                      	retn
 17087                                  
 17088                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 17089                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:163Ah
 17090                                  FindNextInMem:
 17091                                  	; 07/06/2023
 17092                                  	;add	bx,21 ; MSDOS 5.0
 17093                                  	; 07/06/2023
 17094 000016A9 83C316                  	add	bx,22 ; MSDOS 6.0  ; size EntryStruc (22 = 21 + compratio)
 17095                                  	;add	bx,size EntryStruc	; BX = ptr to next entry
 17096 000016AC EBEE                    	jmp	short FindOneInMem	; go look at it
 17097                                  foNoMore:
 17098 000016AE F9                      	stc				; ran out of entries, return failure
 17099 000016AF C3                      	retn
 17100                                  
 17101                                  ; ---------------------------------------------------------------------------
 17102                                  
 17103                                  ;***	GetEnvValue - get value of our environment variable
 17104                                  ;
 17105                                  ;	ENTRY	DS, ES = TRANGROUP seg addr
 17106                                  ;
 17107                                  ;	EXIT	CY = set if environment variable not in environment
 17108                                  ;
 17109                                  ;		Otherwise:
 17110                                  ;		SI = ptr to environment variable asciiz value in TRANGROUP
 17111                                  ;
 17112                                  ;	USED	AX,BX,CX,DX,DI
 17113                                  ;		(We assume the (almost) worst, since we don't know about
 17114                                  ;		Find_Name_In_Environment.)
 17115                                  ;
 17116                                  ;	EFFECTS
 17117                                  ;
 17118                                  ;	  ScanBuf is loaded with value text
 17119                                  
 17120                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17121                                  GetEnvValue:
 17122 000016B0 06                      	push	es				; save ES
 17123                                  	;mov	si,offset TRANGROUP:DirEnvVar	; DS:SI = ptr to variable name
 17124 000016B1 BE[7292]                	mov	si,DirEnvVar	; "DIRCMD="
 17125                                  	;invoke	Find_Name_In_Environment
 17126 000016B4 E8C70F                  	call	find_name_in_environment
 17127 000016B7 7214                    	jc	short geRet			; name not found in environment
 17128                                  
 17129                                  ;	ES:DI = ptr to value of environment variable
 17130                                  ;	We're assuming DS, CS, and SS are unchanged.
 17131                                  
 17132 000016B9 1E                      	push	ds
 17133 000016BA 06                      	push	es
 17134 000016BB 1F                      	pop	ds
 17135 000016BC 07                      	pop	es
 17136                                  
 17137                                  	;assume	ds:nothing
 17138                                  
 17139                                  ;	DS = seg addr of environment variable value (in environment segment)
 17140                                  ;	ES = TRANGROUP seg addr
 17141                                  
 17142 000016BD 89FE                    	mov	si,di				; DS:SI = ptr to value string
 17143                                  	;mov	di,offset TRANGROUP:ScanBuf	; ES:DI = ptr to dest buffer
 17144 000016BF BF[589E]                	mov	di,ScanBuf
 17145                                  geLoop:
 17146                                  ;@@:	
 17147 000016C2 AC                      	lodsb
 17148 000016C3 08C0                    	or	al,al
 17149 000016C5 AA                      	stosb
 17150                                  	;loopnz	@B		; move the string, including trailing null
 17151 000016C6 E0FA                    	loopnz	geLoop
 17152                                  
 17153 000016C8 06                      	push	es
 17154 000016C9 1F                      	pop	ds		; DS = TRANGROUP seg addr again
 17155                                  	;assume	ds:TRANGROUP
 17156                                  
 17157                                  	;mov	si,offset TRANGROUP:ScanBuf	; SI = ptr to var value
 17158 000016CA BE[589E]                	mov	si,ScanBuf
 17159                                  geRet:
 17160 000016CD 07                      	pop	es				; restore ES
 17161 000016CE C3                      	retn
 17162                                  
 17163                                  ; ---------------------------------------------------------------------------
 17164                                  
 17165                                  ;***	GetFirst - get first directory entry from disk
 17166                                  ;
 17167                                  ;	ENTRY	DOS DTA established at DirBuf
 17168                                  ;		FCB contains drive # and filename
 17169                                  ;		Current directory (on selected drive) is the one to search
 17170                                  ;		AttrSpecified & AttrSelect masks set
 17171                                  ;
 17172                                  ;	EXIT	CY = clear if success
 17173                                  ;		DirBuf contains extended FCB for file found
 17174                                  ;
 17175                                  ;		If unsuccessful,
 17176                                  ;		CY = set
 17177                                  ;		Ready for DOS Get Extended Error call
 17178                                  ;
 17179                                  ;	USED	AX,DX
 17180                                  ;
 17181                                  ;	EFFECTS
 17182                                  ;
 17183                                  ;	  FCB-7 = 0FFh to mark extended FCB
 17184                                  ;	  FCB-1 = attribute mask to find all files
 17185                                  ;	  These fields should remain unmodified for GetNext calls.
 17186                                  ;
 17187                                  ;***	GetNext - get next directory entry from disk
 17188                                  ;
 17189                                  ;	ENTRY	As for GetFirst, plus
 17190                                  ;		FCB-7 set up as extended FCB w/ find-all attribute byte
 17191                                  ;
 17192                                  ;	EXIT	As for GetFirst
 17193                                  ;
 17194                                  ;	USED	AX,DX
 17195                                  
 17196                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17197                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 17198                                  
 17199                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 17200                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1660h
 17201                                  GetFirst:
 17202                                  	;mov	byte [55h],0FFh	; -1
 17203 000016CF C6065500FF              	mov	byte [FCB-7],0FFh	; signal extended FCB
 17204                                  	;mov	byte [5Bh],16h
 17205 000016D4 C6065B0016              	mov	byte [FCB-1],ATTR_ALL ; 16h
 17206                                  					; find any file
 17207                                  	; 07/06/2023
 17208                                  	;mov	dx,FCB-7 ; 55h		; DX = ptr to extended FCB
 17209 000016D9 B411                    	mov	ah,11h
 17210                                  	;mov	ah,Dir_Search_First	; AH = DOS Find First function code
 17211                                  	; 07/06/2023
 17212                                  	;int	21h			; call DOS
 17213                                  	;shl	al,1			; CY = set if error
 17214                                  	;jc	short gfRet		; return error
 17215                                  	;jmp	short gfFound		; go look at attr's
 17216                                  	; 07/06/2023
 17217 000016DB EB02                    	jmp	short GetFrstNxt
 17218                                  GetNext:
 17219                                  	; 07/06/2023
 17220                                  	;;mov	dx,55h
 17221                                  	;mov	dx,FCB-7		; DX = ptr to extended FCB
 17222 000016DD B412                    	mov	ah,12h
 17223                                  	;mov	ah,Dir_Search_Next	; AH = DOS Find Next function code
 17224                                  GetFrstNxt:
 17225                                  	; 07/06/2023
 17226 000016DF BA5500                  	mov	dx,FCB-7 ; mov dx,55h
 17227                                  	;
 17228 000016E2 CD21                    	int	21h			; call DOS
 17229 000016E4 D0E0                    	shl	al,1			; CY = set if error
 17230 000016E6 7211                    	jc	short gfRet		; return error
 17231                                  
 17232                                  ;*	Found an entry. Check attributes.
 17233                                  gfFound:
 17234                                  	;;mov	al,[DirBuf+8].dir_attr	; AL = file attributes
 17235                                  	;mov	al,[DIRBUF+19]
 17236 000016E8 A0[2B9D]                	mov	al,[DIRBUF+8+DIR_ENTRY.DIR_ATTR]
 17237 000016EB 8A26[729D]              	mov	ah,[AttrSpecified]	; AH = mask of pertinent attr's
 17238 000016EF 20E0                    	and	al,ah			; AL = pertinent attr's of file
 17239 000016F1 2226[739D]              	and	ah,[AttrSelect]		; AH = attr settings to match
 17240 000016F5 38E0                    	cmp	al,ah
 17241 000016F7 75E4                    	jne	short GetNext		; attr's don't match, look for another
 17242                                  gfRet:
 17243 000016F9 C3                      	retn
 17244                                  
 17245                                  ; ---------------------------------------------------------------------------
 17246                                  
 17247                                  ;***	ListDir - search for and list files in the current directory
 17248                                  ;
 17249                                  ;	List header, files, and trailer for current directory on selected
 17250                                  ;	drive. Header & trailer are listed if at least one file is found.
 17251                                  ;	If no qualifying files are found, no display output occurs.
 17252                                  ;
 17253                                  ;	ENTRY	Current directory (on selected drive) is the one to be listed
 17254                                  ;		FCB contains selected drive # and filename spec
 17255                                  ;		Option bits, attribute masks, and sort codes set up
 17256                                  ;
 17257                                  ;	EXIT	CY = clear if no error
 17258                                  ;		FileCnt = # files found & displayed
 17259                                  ;
 17260                                  ;		If error,
 17261                                  ;		CY = set
 17262                                  ;		Ready for DOS Get Extended Error call
 17263                                  ;
 17264                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 17265                                  ;		FileSiz
 17266                                  ;
 17267                                  ;	EFFECTS
 17268                                  ;
 17269                                  ;	  FileCntTotal, FileSizTotal are updated.
 17270                                  ;	  Files found are listed. A directory header and trailer are
 17271                                  ;	   displayed only if files are found.
 17272                                  
 17273                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17274                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:155Eh
 17275                                  
 17276                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17277                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1694h
 17278                                  
 17279                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 17280                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1776h
 17281                                  ListDir:
 17282 000016FA 31C0                    	xor	ax,ax ; 0
 17283 000016FC A3[FF9B]                	mov	[FileCnt],ax		; zero file count
 17284 000016FF A3[019C]                	mov	[FileSiz],ax		; zero file size accumulator
 17285 00001702 A3[039C]                	mov	[FileSiz+2],ax
 17286                                  
 17287                                  ; 31/07/2024
 17288                                  ; PCDOS 7.1 COMMAND.COM
 17289                                  %if 1
 17290 00001705 A3[059C]                	mov	[FileSiz+4],ax
 17291 00001708 A3[079C]                	mov	[FileSiz+6],ax	
 17292                                  %else
 17293                                  	; 08/06/2023
 17294                                  	; MSDOS 6.0
 17295                                  ;ifdef DBLSPACE_HOOKS
 17296                                  	mov	[ccluUsedDir],ax 	; zero count clusters used
 17297                                  	mov	[csecUsedDir],ax	; zero count compressed sectors used
 17298                                  	mov	[csecUsedDir+2],ax
 17299                                  ;endif
 17300                                  %endif	
 17301                                  	;cmp	byte [DestBuf],0	; check for sort code
 17302                                  	; 31/07/2024
 17303 0000170B 3806[9B9D]              	cmp	[DestBuf],al ; 0
 17304 0000170F 740A                    	je	short ld1		; no sort
 17305 00001711 E83000                  	call	LoadEntries		; load entries for sorted listing
 17306 00001714 7305                    	jnc	short ld1		; no error - continue
 17307 00001716 E83009                  	call	get_ext_error_number	; AX = DOS error code
 17308                                  	; 19/02/2023
 17309                                  	;stc
 17310 00001719 EB12                    	jmp	short ldErr		; return error
 17311                                  ld1:
 17312 0000171B E8DAFE                  	call	FindFirst		; find first file
 17313 0000171E 720D                    	jc	short ldErr		; not found, return error
 17314                                  
 17315                                  ;	BX = offset in TPA buffer of entry found
 17316                                  
 17317 00001720 E82203                  	call	DisplayHeader		; if at least one file, display header
 17318                                  ldNext:
 17319 00001723 E8FA02                  	call	DisplayFile		; display the file entry
 17320                                  ;ldNext:
 17321 00001726 E8D4FE                  	call	FindNext		; find another file
 17322 00001729 7202                    	jc	short ldErr		; not found
 17323                                  	;call	DisplayFile		; display entry
 17324                                  	;jmp	short ldNext		; go find another one
 17325                                  	; 19/02/2023
 17326 0000172B EBF6                    	jmp	short ldNext
 17327                                  ldErr:
 17328                                  	;cmp	ax,2
 17329 0000172D 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 17330 00001730 7407                    	je	short ldDone		; file not found, we're done
 17331                                  	;cmp	ax,18
 17332 00001732 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 17333 00001735 7402                    	je	short ldDone		; no more files, we're done
 17334 00001737 F9                      	stc
 17335                                  	;jmp	short ldRet
 17336                                  	; 19/02/2023
 17337 00001738 C3                      	retn
 17338                                  ldDone:
 17339 00001739 833E[FF9B]00            	cmp	word [FileCnt],0
 17340                                  	;je	short ld2		; no files found, just return
 17341                                  	; 25/04/2023
 17342 0000173E 7403                    	jz	short ldRet
 17343 00001740 E8A104                  	call	DisplayTrailer		; display trailing info
 17344                                  	; 08/06/2023
 17345                                  	; cf=0
 17346                                  ;ld2:	
 17347                                  	;clc				; return success
 17348                                  ldRet:
 17349 00001743 C3                      	retn
 17350                                  
 17351                                  ; ---------------------------------------------------------------------------
 17352                                  
 17353                                  ;***	LoadEntries - attempt to load entries from current directory
 17354                                  ;
 17355                                  ;	Load all qualifying directory entries from the current directory
 17356                                  ;	into the TPA. If an error is returned by FindFirst/FindNext calls
 17357                                  ;	other than 'no more files', return to caller with carry flag set.
 17358                                  ;	If we run out of buffer space, display a message that we haven't
 17359                                  ;	enough memory to sort this directory, but return without error.
 17360                                  ;	Other routines know whether or not entries have been loaded by
 17361                                  ;	the 'inmem' flag bit, which we set here.
 17362                                  ;
 17363                                  ;	The TPA is usually 64K - 512 bytes long. At 20 bytes per entry,
 17364                                  ;	this allows sorting over 3000 entries in a directory.
 17365                                  ;
 17366                                  ;	ENTRY	Tpa = buffer seg addr
 17367                                  ;		BytCnt = buffer length, in bytes
 17368                                  ;		Current directory (on selected drive) is the one to load
 17369                                  ;		FCB contains drive # and filespec
 17370                                  ;		Bits, AttrSpecified, AttrSelect, & DestBuf (sort codes) are set
 17371                                  ;
 17372                                  ;	EXIT	CY = set if error
 17373                                  ;		If error, DOS Get Extended Error will get error info
 17374                                  ;
 17375                                  ;	USED	AX,CX,DX,SI,DI
 17376                                  ;
 17377                                  ;	EFFECTS
 17378                                  ;
 17379                                  ;	  Inmem bit of Bits = set if load succeeded.
 17380                                  ;	  Tpa buffer contains directory entries.
 17381                                  ;	  Byte after last entry = 0FFh.
 17382                                  
 17383                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17384                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17385                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 17386                                  LoadEntries:
 17387 00001744 06                      	push	es			; save TRANGROUP seg addr
 17388 00001745 8E06[D39B]              	mov	es,[TPA]		; ES = TPA seg addr
 17389 00001749 31FF                    	xor	di,di			; ES:DI = destination ptr
 17390                                  	;;;and	Bits,not mask inmem	; signal entries not loaded
 17391                                  	; MSDOS 5.0
 17392                                  	;;;and	word [_Bits],0FFDFh
 17393                                  	;;and	byte [_Bits],0DFh	; not 20h
 17394                                  	; 31/07/2024
 17395                                  	;and	word [_Bits],0FF7Fh ; PCDOS 7.1 COMMAND.COM
 17396                                  	; 08/06/2023
 17397                                  	;and	byte [_Bits],0BFh	; ~20h ; MSDOS 6.0
 17398 0000174B 8026[6A9D]7F            	and	byte [_Bits],~mask.inmem ; 0BFh ; MSDOS 6.0
 17399                                  			; 31/07/2024	; 07Fh ; PCDOS 7.1
 17400                                  
 17401 00001750 E87CFF                  	call	GetFirst		; look for first file
 17402 00001753 7221                    	jc	short leRet		; return any error
 17403 00001755 E82000                  	call	LoadEntry		; load entry into TPA
 17404                                  leNext:
 17405 00001758 E882FF                  	call	GetNext			; get another file
 17406 0000175B 720F                    	jc	short leLoaded		; assume any error is no more files
 17407 0000175D A1[F29B]                	mov	ax,[BYTCNT]		; AX = size of TPA
 17408 00001760 29F8                    	sub	ax,di			; AX = bytes left in TPA
 17409                                  	; 08/06/2023
 17410                                  	;;cmp	ax,size EntryStruc+2	; insist on entry size + 2 bytes
 17411                                  	;cmp	ax,23 ; 21+2 ; MSDOS 5.0
 17412 00001762 83F818                  	cmp	ax,24 ; 22+2 ; MSDOS 6.0
 17413 00001765 720E                    	jb	short leOk		; not enough memory left, give up
 17414 00001767 E80E00                  	call	LoadEntry		; load entry into TPA
 17415 0000176A EBEC                    	jmp	short leNext		; go get another file
 17416                                  
 17417                                  leLoaded:
 17418 0000176C 26C605FF                	mov	byte [es:di],0FFh	; mark end of entry list
 17419                                  	;;;or	Bits,mask inmem		; signal entries loaded in memory
 17420                                  	; MSDOS 5.0
 17421                                  	;;or	word [_Bits],20h
 17422                                  	;or	byte [_Bits],20h
 17423                                  	; 08/06/2023
 17424                                  	;or	byte [_Bits],40h	; MSDOS 6.0
 17425 00001770 800E[6A9D]80            	or	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0 
 17426                                  			; 31/07/2024	; 80h ; PCDOS 7.1	
 17427                                  	; 25/04/2023
 17428                                  	; cf = 0
 17429                                  leOk:
 17430 00001775 F8                      	clc				; return no error
 17431                                  leRet:
 17432 00001776 07                      	pop	es			; ES = TRANGROUP seg addr again
 17433 00001777 C3                      	retn
 17434                                  
 17435                                  ; ---------------------------------------------------------------------------
 17436                                  
 17437                                  ;***	LoadEntry - load directory entry from DirBuf ext'd FCB
 17438                                  ;
 17439                                  ;	ENTRY	ES:DI = ptr to load point in TPA
 17440                                  ;		DirBuf contains extended FCB of entry to load
 17441                                  ;
 17442                                  ;	EXIT	ES:DI = ptr to next byte available in TPA
 17443                                  ;
 17444                                  ;	USED	AX,CX,SI
 17445                                  ;
 17446                                  ;	NOTES
 17447                                  ;
 17448                                  ;	  I could've used symbolic offsets and sizes of fields from
 17449                                  ;	   the dir_entry struc to do this, but this is time-critical,
 17450                                  ;	   so I hard-wired the structure of the DOS 4.x returned FCB,
 17451                                  ;	   as well as our private directory entry structure.
 17452                                  ;
 17453                                  ;	  We force a zero size for subdirectory files. A zero size is
 17454                                  ;	   ordinarily returned for subdirectories, but with Novell
 17455                                  ;	   Netware 286 or 386 loaded, we can't depend on it. Bug #1594.
 17456                                  
 17457                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17458                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:15DDh
 17459                                  	
 17460                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 17461                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:171Ch
 17462                                  
 17463                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 17464                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:17FDh
 17465                                  LoadEntry:
 17466                                  	;mov	si,offset TRANGROUP:Dirbuf+8	; DS:SI = ptr to filename
 17467 00001778 BE[209D]                	mov	si,DIRBUF+8
 17468 0000177B 30C0                    	xor	al,al				; AL = 0
 17469 0000177D AA                      	stosb					; 'used' byte = false
 17470 0000177E B90B00                  	mov	cx,11
 17471 00001781 F3A4                    	rep	movsb				; transfer filename & extension
 17472 00001783 AC                      	lodsb					; AL = attrib byte
 17473 00001784 AA                      	stosb					; store attrib byte
 17474                                  	;add	si,10 ; 22-11-1
 17475                                  	;add	si,dir_time-dir_attr-1		; skip to time field
 17476 00001785 83C60A                  	add	si,(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1
 17477 00001788 A5                      	movsw					; transfer time
 17478 00001789 A5                      	movsw					; transfer date
 17479                                  
 17480                                  ; 08/06/2023
 17481                                  ; MSDOS 5.0
 17482                                  %if 0
 17483                                  	inc	si				; skip alloc unit
 17484                                  	inc	si
 17485                                  	;and	al,10h
 17486                                  	and	al,ATTR_DIRECTORY
 17487                                  	jnz	short leSetDirSize		; force zero size for subdir
 17488                                  	movsw
 17489                                  	movsw					; transfer size
 17490                                  	retn
 17491                                  leSetDirSize:
 17492                                  	xor	ax,ax ; 0
 17493                                  	stosw
 17494                                  	stosw					; store zero size
 17495                                  	retn
 17496                                  %endif
 17497                                  
 17498                                  ; 08/06/2023
 17499                                  ; MSDOS 6.0
 17500                                  ;%if 1
 17501                                  ;ifdef DBLSPACE_HOOKS
 17502 0000178A 88C1                    	mov	cl,al				; attrib to cl
 17503 0000178C AD                      	lodsw					; allocation unit (cluster
 17504                                  	;and	cl,10h
 17505 0000178D 80E110                  	and	cl,ATTR_DIRECTORY
 17506 00001790 7506                    	jnz	short leSetDirSize		; force zero size for subdir
 17507 00001792 A5                      	movsw
 17508 00001793 A5                      	movsw					; transfer size
 17509                                  
 17510                                  ; 31/07/2024 - Retro DOS 5.0 - PCDOS 7.1 COMMAND.COM
 17511                                  %if 0
 17512                                  	;;test	word [_Bits],1
 17513                                  	;test	word [_Bits],mask.cratio	; compression ratio report?
 17514                                  	test	byte [_Bits],mask.cratio
 17515                                  	jnz	short leCalcRatio		; yup
 17516                                  %endif
 17517                                  
 17518 00001794 31C0                    	xor	ax,ax
 17519 00001796 AA                      	stosb					; dummy compression ratio
 17520 00001797 C3                      	retn
 17521                                  
 17522                                  ; 31/07/2024 - Retro DOS 5.0 - PCDOS 7.1 COMMAND.COM
 17523                                  %if 0
 17524                                  leCalcRatio:
 17525                                  	call	CalcCompRatio			; takes cluster in AX
 17526                                  	or	ax,ax				;   returns ratio in AX
 17527                                  	jz	short leNoRatio			; 0 means couldn't calculate
 17528                                  	dec	ah				; pack 1.0 - 16.0 comp ratio
 17529                                  	mov	cl,4				;   into 2 nibbles.  Store
 17530                                  	shl	ah,cl				;   1-16 as 0-15 in hi nibble,
 17531                                  	or	al,ah				;   tenths (0-9) in low nibble
 17532                                  	stosb
 17533                                  	retn
 17534                                  %endif
 17535                                  
 17536                                  leSetDirSize:
 17537 00001798 31C0                    	xor	ax,ax ; 0
 17538 0000179A AB                      	stosw
 17539 0000179B AB                      	stosw					; store zero size
 17540                                  leNoRatio:
 17541 0000179C FEC8                    	dec	al				; al = FFh = special invalid
 17542 0000179E AA                      	stosb					; compression ratio
 17543 0000179F C3                      	retn
 17544                                  ;endif
 17545                                  ;%endif
 17546                                  
 17547                                  ; ---------------------------------------------------------------------------
 17548                                  
 17549                                  ;***	NoOrder - turn sorting off
 17550                                  ;
 17551                                  ;	ENTRY	nothing
 17552                                  ;
 17553                                  ;	EXIT	CY clear
 17554                                  ;
 17555                                  ;	USED	AX
 17556                                  ;
 17557                                  ;	EFFECTS
 17558                                  ;
 17559                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 17560                                  
 17561                                  	; 19/02/2023
 17562                                  NoOrder:
 17563 000017A0 C606[9B9D]00            	mov	byte [DestBuf],0
 17564                                  				; no sort
 17565 000017A5 F8                      	clc			; no error
 17566 000017A6 C3                      	retn
 17567                                  
 17568                                  ; ---------------------------------------------------------------------------
 17569                                  
 17570                                  ;***	OnOffSw - record occurence of on/off option switch
 17571                                  ;
 17572                                  ;	ENTRY	DI = index into word list of switches
 17573                                  ;
 17574                                  ;	EXIT	CY clear
 17575                                  ;
 17576                                  ;	USED	AX,CX
 17577                                  ;
 17578                                  ;	EFFECTS
 17579                                  ;
 17580                                  ;	  Bits modified to indicate option state.
 17581                                  
 17582                                  	; 19/02/2023
 17583                                  OnOffSw:
 17584 000017A7 89F9                    	mov	cx,di		; CX = index into word list of options
 17585 000017A9 D1E9                    	shr	cx,1
 17586 000017AB D1E9                    	shr	cx,1		; CX = bit position of option
 17587 000017AD B80100                  	mov	ax,1		
 17588 000017B0 D3E0                    	shl	ax,cl		; AX = bit mask of option
 17589 000017B2 F7C70200                	test	di,2		; check if it is a negated option
 17590 000017B6 7405                    	jz	short oo1	; it's negated
 17591                                  	;or	Bits,ax		; turn option on
 17592 000017B8 0906[6A9D]              	or	[_Bits],ax
 17593                                  	;jmp	short ooRet
 17594                                  	; 19/02/2023
 17595                                  	;cf=0
 17596 000017BC C3                      	retn
 17597                                  oo1:	
 17598 000017BD F7D0                    	not	ax		; AX = complemented bit mask of option
 17599                                  	;and	Bits,ax		; turn option off
 17600 000017BF 2106[6A9D]              	and	[_Bits],ax
 17601                                  ooRet:
 17602                                  	; 19/02/2023
 17603                                  	;cf=0
 17604                                  	;clc			; always return success
 17605 000017C3 C3                      	retn
 17606                                  
 17607                                  ; ---------------------------------------------------------------------------
 17608                                  
 17609                                  ;***	ParseAttr - parse and record /A option
 17610                                  ;
 17611                                  ;	ENTRY	BX = ptr to system parser result buffer for /A occurence
 17612                                  ;
 17613                                  ;	EXIT	CY = set if error occurs parsing attribute conditions
 17614                                  ;
 17615                                  ;		For parse error, we set up for Std_EPrintf call:
 17616                                  ;		AX = parse error code, like system parser
 17617                                  ;		DX = ptr to message block
 17618                                  ;
 17619                                  ;	USED	AX,CX,DX,DI
 17620                                  ;
 17621                                  ;	EFFECTS
 17622                                  ;
 17623                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 17624                                  ;	  If parse error occurs, attribute conditions parsed so far hold.
 17625                                  ;
 17626                                  ;	  For parse error, we set up for Std_EPrintf call:
 17627                                  ;	  Msg_Disp_Class = parse error message class
 17628                                  ;	  Message block (see DX) is set up for parse error message
 17629                                  
 17630                                  	; 19/02/2023
 17631                                  ParseAttr:
 17632 000017C4 56                      	push	si			; save SI
 17633 000017C5 C606[729D]00            	mov	byte [AttrSpecified],0	; cancel all attribute conditions
 17634                                  
 17635                                  ;	Each /A invocation starts by assuming all files are to be listed.
 17636                                  
 17637                                  	;;mov	si,word ptr [bx].ValuePtr
 17638                                  					; SI = ptr to string after /A
 17639                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17640 000017CA 8B7704                  	mov	si,[bx+4]
 17641                                  paLoop:	
 17642 000017CD BA0100                  	mov	dx,1			; DX = 1 (for un-negated attribute)
 17643 000017D0 AC                      	lodsb				; AL = next char in string
 17644 000017D1 08C0                    	or	al,al
 17645                                  	;jz	short paOk		; it's terminating null, we're done
 17646                                  	; 19/02/2023
 17647 000017D3 742F                    	jz	short paRet ; cf=0
 17648 000017D5 3C2D                    	cmp	al,'-'
 17649 000017D7 7502                    	jne	short pa1		; not '-', go look for letter
 17650 000017D9 4A                      	dec	dx			; DX = 0 (for negated attribute)
 17651 000017DA AC                      	lodsb				; AL = next char
 17652                                  pa1:	
 17653                                  	;mov	di,offset TRANGROUP:AttrLtrs 
 17654                                  					; DI = ptr to attrib letter list
 17655 000017DB BF[4995]                	mov	di,AttrLtrs ; "RHSvDA"
 17656                                  	;mov	cx,6
 17657 000017DE B90600                  	mov	cx,NUM_ATTR_LTRS ; 6	; CX = length of attrib letter list
 17658 000017E1 F2AE                    	repne	scasb			; look for our letter in the list
 17659 000017E3 751B                    	jne	short paErr		; not found, return error
 17660                                  
 17661 000017E5 F7D1                    	not	cx
 17662                                  	;add	cx,6
 17663 000017E7 83C106                  	add	cx,NUM_ATTR_LTRS	; CX = attrib bit #, 0-5
 17664                                  
 17665                                  ;	Note that we rely on AttrLtrs to be in the attribute bit order,
 17666                                  ;	starting from bit 0.
 17667                                  
 17668                                  ;	Record this attribute bit in AttrSpecified.
 17669                                  
 17670 000017EA B001                    	mov	al,1
 17671 000017EC D2E0                    	shl	al,cl			; AL = mask for our bit
 17672 000017EE 0806[729D]              	or	[AttrSpecified],al	; set it in the 'specified' mask
 17673                                  
 17674                                  ;	Record the selected state for this attribute in AttrSelect.
 17675                                  ;	DX = 0 or 1, the selected state for this attribute.
 17676                                  
 17677 000017F2 F6D0                    	not	al			; AL = mask for all other bits
 17678 000017F4 2006[739D]              	and	[AttrSelect],al		; clear our bit
 17679 000017F8 D2E2                    	shl	dl,cl			; DL = our bit state in position
 17680 000017FA 0816[739D]              	or	[AttrSelect],dl		; set selected attr state
 17681 000017FE EBCD                    	jmp	short paLoop		; go look at next char
 17682                                  
 17683                                  ;	The attribute letter string is invalid.
 17684                                  
 17685                                  paErr:	
 17686 00001800 E89B04                  	call	SetupParamError		; set message up for Std_EPrintf
 17687 00001803 F9                      	stc		   		; return error
 17688                                  	; 19/02/2023
 17689                                  	;jmp	short paRet
 17690                                  ;paOk:
 17691                                  	;clc				; return success		
 17692                                  paRet:	
 17693 00001804 5E                      	pop	si			; restore SI
 17694 00001805 C3                      	retn
 17695                                  
 17696                                  ; ---------------------------------------------------------------------------
 17697                                  
 17698                                  ;***	ParseLine - parse a line of text
 17699                                  ;
 17700                                  ;	Parse text until an EOL (CR or NUL) is found, or until a parse
 17701                                  ;	error occurs.
 17702                                  ;
 17703                                  ;	ENTRY	DS:SI = ptr to text
 17704                                  ;		CS, DS, ES = TRANGROUP seg addr
 17705                                  ;
 17706                                  ;	EXIT	AX = last return code from system parser
 17707                                  ;		CX = # positional parameters (pathnames) found - 0 or 1
 17708                                  ;
 17709                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 17710                                  ;		DX = ptr to message block
 17711                                  ;
 17712                                  ;	USED	BX,CX,DX,SI,DI
 17713                                  ;
 17714                                  ;	EFFECTS
 17715                                  ;
 17716                                  ;	  Bits may contain new option settings.
 17717                                  ;	  DestBuf may contain new series of sort codes.
 17718                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 17719                                  ;	  SrcBuf may contain a new default pathname/filespec.
 17720                                  ;	  PathPos, PathCnt updated for new pathname.
 17721                                  ;
 17722                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 17723                                  ;	  Msg_Disp_Class = parse error class
 17724                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 17725                                  ;	  Message block (see DX) is set up for parse error message
 17726                                  
 17727                                  	; 19/02/2023
 17728                                  Parse_Line:
 17729                                  	; 04/05/2023
 17730 00001806 BF[1796]                	mov	di,PARSE_DIR		; ES:DI = ptr to parse block
 17731 00001809 31C9                    	xor	cx,cx			; CX = # positionals found
 17732                                  plPars:
 17733 0000180B E8140D                  	call	Parse_With_Msg		; call parser
 17734 0000180E 83F8FF                  	cmp	ax,-1
 17735                                  	;cmp	ax,END_OF_LINE ; 0FFFFh ; -1
 17736 00001811 7411                    	je	short plRet		; EOL encountered, return
 17737 00001813 83F800                  	cmp	ax,RESULT_NO_ERROR ; 0
 17738 00001816 750C                    	jne	short plRet		; parse error occurred, return
 17739                                  
 17740                                  ;	Parse call succeeded. We have a filespec or a switch.
 17741                                  ;	DX = ptr to result buffer
 17742                                  
 17743 00001818 89D3                    	mov	bx,dx			; BX = ptr to parse result buffer
 17744 0000181A 803F05                  	cmp	byte [bx],RESULT_FILESPEC ; 5
 17745 0000181D 7406                    	je	short plFil		; we have a filespec
 17746                                  
 17747 0000181F E85900                  	call	ParseSwitch		; else we have a switch
 17748                                  	;jc	short plRet		; error parsing switch, return
 17749                                  	;jmp	short plPars		; parse more
 17750                                  	; 19/02/2023
 17751 00001822 73E7                    	jnc	short plPars
 17752                                  plRet:
 17753 00001824 C3                      	retn	
 17754                                  plFil:	
 17755 00001825 E8BA00                  	call	CopyPathname		; copy pathname into our buffer
 17756 00001828 EBE1                    	jmp	short plPars		; parse more
 17757                                  ;plRet:
 17758                                  ;	retn
 17759                                  
 17760                                  ; ---------------------------------------------------------------------------
 17761                                  
 17762                                  ;***	ParseOrder - parse and record /O option
 17763                                  ;
 17764                                  ;	ENTRY	BX = ptr to system parser result buffer for /O occurence
 17765                                  ;
 17766                                  ;	EXIT	CY = set if error occurs parsing order
 17767                                  ;
 17768                                  ;		For parse error, we set up for Std_EPrintf call:
 17769                                  ;		AX = parse error code, like system parser
 17770                                  ;		DX = ptr to message block
 17771                                  ;
 17772                                  ;	USED	AX,CX,DX,DI
 17773                                  ;
 17774                                  ;	EFFECTS
 17775                                  ;
 17776                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 17777                                  ;
 17778                                  ;	  For parse error, we set up for Std_EPrintf call:
 17779                                  ;	  Msg_Disp_Class = parse error message class
 17780                                  ;	  Message block (see DX) is set up for parse error message
 17781                                  
 17782                                  	; 19/02/2023 - Retro DOS v4.0 COMMAND.COM
 17783                                  	;
 17784                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17785                                  	; MSDOS 6.22 COMMAND.COM
 17786                                  ParseOrder:
 17787 0000182A 56                      	push	si			; save SI
 17788 0000182B 53                      	push	bx			; save ptr to result buffer
 17789                                  
 17790                                  	;;mov	si,word ptr [bx].ValuePtr
 17791                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17792 0000182C 8B7704                  	mov	si,[bx+4]		; SI = ptr to order letters
 17793                                  	;mov	bx,offset TRANGROUP:DestBuf
 17794                                  	; 08/06/2023
 17795 0000182F BB[9B9D]                	mov	bx,DestBuf		; BX = ptr to sort code buffer
 17796 00001832 8A04                    	mov	al,[si]			; AL = 1st char of order string
 17797 00001834 08C0                    	or	al,al
 17798 00001836 750E                    	jnz	short poLtr		; not NUL, go parse letters
 17799                                  
 17800                                  ;	We have /O alone. Set standard sort order.
 17801                                  ;	Note hardwired dependency on character order in OrderLtrs.
 17802                                  
 17803 00001838 C60705                  	mov	byte [bx],5		; sort 1st by group (subdirs 1st)
 17804 0000183B 43                      	inc	bx
 17805 0000183C C60701                  	mov	byte [bx],1		; then by name
 17806 0000183F 43                      	inc	bx
 17807 00001840 C60702                  	mov	byte [bx],2		; then by extension
 17808 00001843 43                      	inc	bx
 17809 00001844 EB2F                    	jmp	short poOk		; return success
 17810                                  
 17811                                  ;	We have /O<something>. Parse sort order letters.
 17812                                  
 17813                                  poLtr:	
 17814 00001846 30D2                    	xor	dl,dl			; DL = 0 (upward sort)
 17815 00001848 AC                      	lodsb				; AL = next sort order letter
 17816 00001849 08C0                    	or	al,al
 17817 0000184B 7428                    	jz	short poOk		; NUL found, return success
 17818                                  
 17819 0000184D 3C2D                    	cmp	al,'-'
 17820 0000184F 7503                    	jne	short po1		; not '-', go look for letter
 17821 00001851 B280                    	mov	dl,80h			; DL = downward sort mask
 17822 00001853 AC                      	lodsb				; AL = next char
 17823                                  po1:
 17824                                  	;mov	di,offset TRANGROUP:OrderLtrs
 17825                                  	; 08/06/2023
 17826 00001854 BF[4F95]                	mov	di,OrderLtrs ;"NEDSGC"	; DI = ptr to list of letters
 17827                                  	; (NUM_ORDER_LTRS = 6 for MSDOS 6.22 COMMAND.COM)
 17828                                  	; ((N,E,D,S,G for MSDOS 5.0 and N,E,D,S,G,C for MSDOS 6.22)) 
 17829                                  	;mov	cx,6 ; 08/06/2023
 17830 00001857 B90600                  	mov	cx,NUM_ORDER_LTRS ; 5	; CX = length of list
 17831 0000185A F2AE                    	repne	scasb			; look for our letter in the list
 17832 0000185C 7510                    	jne	short poErr		; not found, return error
 17833                                  
 17834 0000185E F7D9                    	neg	cx
 17835                                  	;add	cx,6 ; 08/06/2023
 17836 00001860 83C106                  	add	cx,NUM_ORDER_LTRS ; 5	; CL = sort order code, 1-6
 17837                                  
 17838 00001863 08D1                    	or	cl,dl			; CL = sort code with up/dn bit
 17839 00001865 880F                    	mov	[bx],cl			; store sort order code in buffer
 17840 00001867 43                      	inc	bx			; BX = ptr to next spot in buffer
 17841                                  	;cmp	bx,offset TRANGROUP:EndDestBuf
 17842 00001868 81FB[F29D]              	cmp	bx,EndDestBuf
 17843                                  	;jae	short poErr		; too many letters
 17844                                  	;
 17845                                  	;jmp	short poLtr		; go look at next char
 17846                                  	; 19/02/2023
 17847 0000186C 72D8                    	jb	short poLtr
 17848                                  
 17849                                  ;	The sort order string is invalid.  
 17850                                  
 17851                                  poErr:
 17852 0000186E 5B                      	pop	bx			; BX = ptr to result buffer
 17853 0000186F E82C04                  	call	SetupParamError		; set message up for Std_EPrintf
 17854 00001872 F9                      	stc				; return failure
 17855 00001873 EB04                    	jmp	short poRet
 17856                                  poOk:	
 17857 00001875 C60700                  	mov	byte [bx],0		; mark end of sort code list
 17858 00001878 5B                      	pop	bx			; BX = ptr to result buffer
 17859                                  	; 19/02/2023
 17860                                  	;cf=0
 17861                                  	;clc				; return success
 17862                                  poRet:
 17863 00001879 5E                      	pop	si			; restore SI
 17864 0000187A C3                      	retn
 17865                                  
 17866                                  ; ---------------------------------------------------------------------------
 17867                                  ; MSDOS 6.0
 17868                                  	; 08/06/2023
 17869                                  
 17870                                  ; 31/07/2024 - Retro DOS 5.0 - PCDOS 7.1 COMMAND.COM
 17871                                  %if 0
 17872                                  
 17873                                  ;ifdef DBLSPACE_HOOKS
 17874                                  
 17875                                  ;***	ParseRatio - parse and record /C[H] option
 17876                                  ;
 17877                                  ;	ENTRY	BX = ptr to system parser result buffer for /C occurence
 17878                                  ;		DI = index into word list of switches
 17879                                  ;
 17880                                  ;	EXIT	CY = set if error occurs parsing order
 17881                                  ;
 17882                                  ;		For parse error, we set up for Std_EPrintf call:
 17883                                  ;		AX = parse error code, like system parser
 17884                                  ;		DX = ptr to message block
 17885                                  ;
 17886                                  ;	USED	AX,CX,DX,DI
 17887                                  ;
 17888                                  ;	EFFECTS
 17889                                  ;
 17890                                  ;	  Bits modified to indicate option state.
 17891                                  ;	  fUseHostSize is set to zero for /C, non-zero for /CH.
 17892                                  ;
 17893                                  ;	  For parse error, we set up for Std_EPrintf call:
 17894                                  ;	  Msg_Disp_Class = parse error message class
 17895                                  ;	  Message block (see DX) is set up for parse error message
 17896                                  
 17897                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17898                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:184Ch
 17899                                  
 17900                                  ParseRatio:	;proc
 17901                                  	call	OnOffSw			; turn on option bit
 17902                                  	push	si			; save SI
 17903                                  	;;mov	si,word ptr [bx].ValuePtr
 17904                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17905                                  	mov	si,[bx+4]		; SI = ptr to possible H option
 17906                                  	mov	al,[si] 		; AL = null or 'H'
 17907                                  	or	al,al
 17908                                  	jz	short prDone		; if null, no H option to check
 17909                                  	cmp	al,'H' 			; only H is allowed, make sure that's
 17910                                  	je	short prDone		;   what it is
 17911                                  	call	SetupParamError		; set message up for Std_EPrintf
 17912                                  	stc				; return failure
 17913                                  	jmp	short prRet
 17914                                  prDone:
 17915                                  	mov	[fUseHostSize],al	; set Host cluster size flag
 17916                                  	; 08/06/2023
 17917                                  	;clc
 17918                                  	;;cf = 0
 17919                                  prRet:	
 17920                                  	pop	si
 17921                                  	retn
 17922                                  
 17923                                  ;ParseRatio	;endp
 17924                                  ;endif
 17925                                  
 17926                                  %endif
 17927                                  
 17928                                  ; ---------------------------------------------------------------------------
 17929                                  
 17930                                  ;***	ParseSwitch - parse a switch
 17931                                  ;
 17932                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 17933                                  ;		     a switch
 17934                                  ;
 17935                                  ;	EXIT	CY = set if parse error occurred
 17936                                  ;
 17937                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 17938                                  ;		AX = parse error code, like system parser
 17939                                  ;		DX = ptr to message block
 17940                                  ;
 17941                                  ;	USED	AX,BX,DX
 17942                                  ;
 17943                                  ;	EFFECTS
 17944                                  ;
 17945                                  ;	  Bits may contain new option settings.
 17946                                  ;	  DestBuf may contain new series of sort codes.
 17947                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 17948                                  ;
 17949                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 17950                                  ;	  Msg_Disp_Class = parse error class
 17951                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 17952                                  ;	  Message block (see DX) is set up for parse error message
 17953                                  
 17954                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17955                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16E2h
 17956                                  
 17957                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17958                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1869h
 17959                                  ParseSwitch:
 17960 0000187B 51                      	push	cx			; save CX
 17961 0000187C 57                      	push	di			; save DI
 17962                                  
 17963                                  	;;mov	ax,[bx].SynPtr		; AX = synonym ptr
 17964                                  	;mov	ax,[bx+ResultBuffer.SynPtr]
 17965 0000187D 8B4702                  	mov	ax,[bx+2]
 17966                                  	;mov	di,offset TRANGROUP:Dir_Sw_Ptrs
 17967 00001880 BF[6E96]                	mov	di,Dir_Sw_Ptrs		; ES:DI = ptr to list of synonym ptrs
 17968                                  	; 08/06/2023
 17969                                  	; (NUM_DIR_SWS = 16 for MSDOS 6.0)
 17970                                  	;mov	cx,16
 17971                                  	; 31/07/2024
 17972                                  	;mov	cx,18 ; PCDOS 7.1 COMMAND.COM
 17973 00001883 B91200                  	mov	cx,NUM_DIR_SWS ; 14	; CX = # of dir switches in list
 17974 00001886 FC                      	cld				; scan direction = upward
 17975 00001887 F2AF                    	repne	scasw			; locate synonym ptr in list
 17976                                  	;sub	di,offset TRANGROUP:Dir_Sw_Ptrs + 2
 17977 00001889 81EF[7096]              	sub	di,Dir_Sw_Ptrs+2
 17978                                  
 17979                                  ;	DI = index into word list of synonym ptrs
 17980                                  
 17981 0000188D 2EFF95[9518]            	call	word [cs:di+SwHandler]	; use same index into call table
 17982                                  
 17983 00001892 5F                      	pop	di			; restore DI
 17984 00001893 59                      	pop	cx			; restore CX
 17985                                  
 17986 00001894 C3                      	retn
 17987                                  
 17988                                  ; ---------------------------------------------------------------------------
 17989                                  
 17990                                  ;	Order in this table must correspond to order in Dir_Sw_Ptrs list.
 17991                                  ;	Simple on/off switches must occur first in both lists, and must be
 17992                                  ;	  in order of option bits in Bits, starting with bit 0.
 17993                                  
 17994                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17995                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16FCh
 17996                                  
 17997                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17998                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1883h
 17999                                  SwHandler:
 18000                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 18001                                  
 18002                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 18003                                  %if 0
 18004                                  		; ifdef DBLSPACE_HOOKS
 18005                                  	dw	OnOffSw 	; /-C
 18006                                  	dw	ParseRatio	; /C[H]
 18007                                  	;	; endif	
 18008                                  %endif
 18009                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 18010                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1922h
 18011                                  
 18012 00001895 [A717]                  	dw	OnOffSw		; /-W
 18013 00001897 [A717]                  	dw	OnOffSw		; /W
 18014 00001899 [A717]                  	dw	OnOffSw		; /-P
 18015 0000189B [A717]                  	dw	OnOffSw		; /P
 18016 0000189D [A717]                  	dw	OnOffSw		; /-S
 18017 0000189F [A717]                  	dw	OnOffSw		; /S
 18018 000018A1 [A717]                  	dw	OnOffSw		; /-B
 18019 000018A3 [A717]                  	dw	OnOffSw		; /B
 18020 000018A5 [A717]                  	dw	OnOffSw		; /-L	;M010
 18021 000018A7 [A717]                  	dw	OnOffSw		; /L	;M010
 18022                                  
 18023                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 18024                                  %if 1
 18025 000018A9 [A717]                    	dw	OnOffSw		; /-Z
 18026 000018AB [A717]                  	dw	OnOffSw		; /Z
 18027 000018AD [A717]                  	dw	OnOffSw		; /-4
 18028 000018AF [A717]                  	dw	OnOffSw		; /4
 18029                                  %endif
 18030 000018B1 [A017]                  	dw	NoOrder		; /-O
 18031 000018B3 [2A18]                  	dw	ParseOrder	; /O
 18032 000018B5 [ED14]                  	dw	DefaultAttr	; /-A
 18033 000018B7 [C417]                  	dw	ParseAttr	; /A
 18034                                  
 18035                                  ; ---------------------------------------------------------------------------
 18036                                  
 18037                                  	;break	<DIR utility routines>
 18038                                  
 18039                                  ;***	UTILITY ROUTINES
 18040                                  ; ---------------------- 
 18041                                  
 18042                                  ; ---------------------------------------------------------------------------
 18043                                  
 18044                                  ;***	ChangeDir - change directory on target drive
 18045                                  ;
 18046                                  ;	ENTRY	FCB contains drive #
 18047                                  ;		DS:DX = ptr to ASCIIZ string w/o drive specifier
 18048                                  ;
 18049                                  ;	EXIT	Changed current directory on drive
 18050                                  ;
 18051                                  ;		If error,
 18052                                  ;		CY = set
 18053                                  ;		DOS Get Extended Error call will get error
 18054                                  ;
 18055                                  ;	USED	AX,DX,SI,DI
 18056                                  ;
 18057                                  ;	EFFECTS
 18058                                  ;
 18059                                  ;	  DirBuf is used to build "d:string".
 18060                                  
 18061                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18062                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1718h
 18063                                  
 18064                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18065                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:18A3h
 18066                                  
 18067                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 18068                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1946h
 18069                                  ChangeDir:
 18070                                  	;mov	di,offset TRANGROUP:DirBuf
 18071 000018B9 BF[189D]                	mov	di,DIRBUF
 18072 000018BC E8CE03                  	call	GetDriveLtr	; AX = "d:"
 18073 000018BF AB                      	stosw			; put drive specifier in buffer
 18074 000018C0 89D6                    	mov	si,dx		; SI = ptr to argument string
 18075                                  cdLoop:
 18076 000018C2 AC                      	lodsb
 18077 000018C3 AA                      	stosb			; move byte to buffer
 18078 000018C4 08C0                    	or	al,al
 18079 000018C6 75FA                    	jne	short cdLoop	; continue until null transferred
 18080                                  
 18081                                  	;mov	dx,offset TRANGROUP:DirBuf
 18082 000018C8 BA[189D]                	mov	dx,DIRBUF	; DX = ptr to "d:string"
 18083                                  	;mov	ah,CHDir
 18084 000018CB B43B                    	mov	ah,3Bh
 18085 000018CD CD21                    	int	21h		; change directory
 18086 000018CF C3                      	retn			; return what CHDIR returns
 18087                                  
 18088                                  ; ---------------------------------------------------------------------------
 18089                                  
 18090                                  ;***	CmpAscz - compare two ASCIIZ strings alphanumerically
 18091                                  ;
 18092                                  ;	ENTRY	DS:SI = ptr to one ASCIIZ string
 18093                                  ;		ES:DI = ptr to another ASCIIZ string
 18094                                  ;
 18095                                  ;	EXIT	flags set after REPE CMPSB
 18096                                  ;
 18097                                  ;	USED	AL,CX,SI,DI
 18098                                  ;
 18099                                  ;	NOTES
 18100                                  ;
 18101                                  ;	Maximum run of comparison is length of DS:SI string.
 18102                                  ;	This ensures that two identical strings followed by
 18103                                  ;	random characters will compare correctly.
 18104                                  
 18105                                  	; 19/02/2023
 18106                                  CmpAscz:
 18107                                  	; 07/06/2023
 18108 000018D0 56                      	push	si ; *
 18109                                  	;
 18110 000018D1 57                      	push	di
 18111                                  
 18112 000018D2 89F7                    	mov	di,si
 18113 000018D4 30C0                    	xor	al,al
 18114 000018D6 B9FFFF                  	mov	cx,0FFFFh
 18115 000018D9 F2AE                    	repne	scasb
 18116 000018DB F7D1                    	not	cx
 18117                                  
 18118 000018DD 5F                      	pop	di
 18119 000018DE F3A6                    	repe	cmpsb
 18120                                  
 18121                                  	; 07/06/2023
 18122 000018E0 5E                      	pop	si ; *
 18123                                  	;
 18124 000018E1 C3                      	retn
 18125                                  
 18126                                  ; ---------------------------------------------------------------------------
 18127                                  
 18128                                  ;***	CopyPathname - copy pathname to our buffer
 18129                                  ;
 18130                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 18131                                  ;		     a filespec
 18132                                  ;
 18133                                  ;	EXIT	nothing
 18134                                  ;
 18135                                  ;	USED	AX
 18136                                  ;
 18137                                  ;	EFFECTS
 18138                                  ;
 18139                                  ;	  SrcBuf may contain a new pathname/filespec.
 18140                                  ;	  PathPos, PathCnt updated for new pathname.
 18141                                  
 18142                                  	; 19/02/2023
 18143                                  CopyPathname:
 18144 000018E2 56                      	push	si
 18145                                  	;;lds	si,dword ptr [bx].ValuePtr  ; load far ptr from result buffer
 18146                                  	;lds	si,[bx+ResultBuffer.ValuePtr]
 18147 000018E3 C57704                  	lds	si,[bx+4]
 18148                                  	;invoke	Move_To_SrcBuf		    ; copy pathname to SrcBuf
 18149 000018E6 E8B617                  	call	Move_To_SrcBuf
 18150 000018E9 5E                      	pop	si
 18151 000018EA C3                      	retn
 18152                                  
 18153                                  ; ---------------------------------------------------------------------------
 18154                                  
 18155                                  ;***	CountFile - update counters with current file
 18156                                  ;
 18157                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18158                                  ;
 18159                                  ;	EXIT	nothing
 18160                                  ;
 18161                                  ;	USED	AX,DX
 18162                                  ;
 18163                                  ;	EFFECTS
 18164                                  ;
 18165                                  ;	  FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 18166                                  
 18167                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18168                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 18169                                  CountFile:
 18170 000018EB 06                      	push	es			; save TRANGROUP seg addr
 18171 000018EC 8E06[D39B]              	mov	es,[TPA]		; ES = TPA seg addr
 18172                                  
 18173 000018F0 FF06[FF9B]              	inc	word [FileCnt]		; # files this directory
 18174 000018F4 FF06[3D9C]              	inc	word [FileCntTotal]	; # files total
 18175 000018F8 7504                    	jnz	short cntf1
 18176 000018FA FF06[3F9C]              	inc	word [FileCntTotal+2]
 18177                                  cntf1:
 18178                                  	;mov	ax,word ptr es:[bx].filesize
 18179                                  					; AX = low word of file size
 18180                                  	;mov	dx,word ptr es:[bx].filesize+2
 18181                                  					; DX = high word of file size
 18182 000018FE 268B4711                	mov	ax,[es:bx+17] ; [es:bx+EntryStruc.filesize]
 18183 00001902 268B5713                	mov	dx,[es:bx+19] ; [es:bx+EntryStruc.filesize+2]
 18184 00001906 0106[019C]              	add	[FileSiz],ax
 18185 0000190A 1116[039C]              	adc	[FileSiz+2],dx		; size of this directory
 18186                                  
 18187                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 18188                                  %if 1
 18189 0000190E 8316[059C]00            	adc	word [FileSiz+4],0
 18190                                  %endif
 18191 00001913 0106[419C]              	add	[FileSizTotal],ax
 18192 00001917 1116[439C]              	adc	[FileSizTotal+2],dx	; total size of files listed
 18193                                  
 18194                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 18195                                  %if 1
 18196 0000191B 8316[459C]00            	adc	word [FileSizTotal+4],0
 18197                                  %endif
 18198 00001920 07                      	pop	es			; ES = TRANGROUP seg addr again
 18199                                  dbRet:	; 19/02/2023
 18200 00001921 C3                      	retn
 18201                                  
 18202                                  ; ---------------------------------------------------------------------------
 18203                                  
 18204                                  ;***	DisplayBare - display filename in bare format
 18205                                  ;
 18206                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18207                                  ;
 18208                                  ;	EXIT	DX = # char's displayed, including dot
 18209                                  ;
 18210                                  ;	USED	AX,CX,SI,DI
 18211                                  ;
 18212                                  ;	EFFECTS
 18213                                  ;
 18214                                  ;	  Filename is displayed in name.ext format, followed by cr/lf.
 18215                                  ;	  If /s is on, complete pathname is displayed.
 18216                                  ;
 18217                                  ;	NOTE
 18218                                  ;
 18219                                  ;	  Directory pseudofiles . and .. and suppressed in bare listing.
 18220                                  
 18221                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18222                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1775h
 18223                                  
 18224                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18225                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1900h
 18226                                  
 18227                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18228                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:19ADh
 18229                                  
 18230                                  DisplayBare:
 18231                                  ;	Suppress . and .. files from bare listing.
 18232                                  
 18233 00001922 8CD9                    	mov	cx,ds			; CX = saved TRANGROUP seg addr
 18234 00001924 8E1E[D39B]              	mov	ds,[TPA]		; DS:BX = ptr to file entry
 18235                                  	;assume	ds:NOTHING
 18236                                  	;cmp	ds:[bx].filename,'.'	; check 1st char of filename
 18237 00001928 807F012E                	cmp	byte [bx+1],'.' ; [bx+EntrStruc.filename]
 18238 0000192C 8ED9                    	mov	ds,cx			; DS = TRANGROUP seg addr again
 18239                                  	;assume	ds:TRANGROUP
 18240 0000192E 74F1                    	je	short dbRet		; it's . or .. - don't display
 18241                                  
 18242                                  	;;;test	Bits,mask subd
 18243                                  	;;test	word [_Bits],4
 18244                                  	;test	byte [_Bits],4
 18245                                  	; 08/06/2023
 18246 00001930 F606[6A9D]04            	test	byte [_Bits],mask.subd	; 8 ; MSDOS 6.0
 18247                                  			; 01/08/2024    ; 4 ; PCDOS 7.1	
 18248 00001935 743C                    	jz	short dbNameExt		; not /s - display filename only
 18249                                  
 18250                                  	;invoke	Build_Dir_String
 18251 00001937 E88A08                  	call	build_dir_string
 18252                                  	;mov	di,offset TRANGROUP:BwdBuf
 18253 0000193A BF[189D]                	mov	di,BWDBUF		; ES:DI = ptr to dir string
 18254                                     
 18255                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 18256                                  	;;test	word [_Bits],10h
 18257                                  	;test	byte [_Bits],10h
 18258                                  	; 08/06/2023
 18259 0000193D F606[6A9D]10            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 18260                                  			; 01/08/2024	; 10h ; PCDOS 7.1
 18261                                  	;jz	@F			;M010;lowercase not needed
 18262 00001942 7405                    	jz	short dbare1
 18263 00001944 89FE                    	mov	si,di			;M010;DS:SI --> ASCIIZ string in BwdBuf	
 18264 00001946 E89603                  	call	LowercaseString		;M010;path string is in BwdBuf
 18265                                  dbare1:
 18266                                  ;@@:	
 18267                                  	;xor	al,al			; AL = 0
 18268                                  	; 19/02/2023
 18269 00001949 31C0                    	xor	ax,ax
 18270 0000194B B9FFFF                  	mov	cx,0FFFFh
 18271 0000194E FC                      	cld
 18272 0000194F F2AE                    	repne	scasb			; ES:DI = ptr to byte after null
 18273 00001951 4F                      	dec	di			; ES:DI = ptr to null byte
 18274                                  
 18275                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18276                                  %if 1 ; *!
 18277                                  ;ifdef DBCS
 18278 00001952 56                      	push	si ; *!
 18279 00001953 57                      	push	di
 18280                                  	;mov	si,offset TRANGROUP:BwdBuf
 18281 00001954 BE[189D]                	mov	si,BWDBUF
 18282 00001957 4F                      	dec	di
 18283 00001958 E89011                  	call	CheckDBCSTailByte
 18284 0000195B 5F                      	pop	di
 18285                                  	; 01/08/2024
 18286                                  	;pop	si ; *!
 18287 0000195C 7407                    	jz	short dbTailByte	; if last char is double byte
 18288                                  ;endif
 18289                                  %endif
 18290 0000195E 26807DFF5C              	cmp	byte [es:di-1],'\'
 18291                                  	;je	@F
 18292 00001963 7403                    	je	short dbare2		; already terminated w/ '\'
 18293                                  
 18294                                  dbTailByte:	; 01/08/2024
 18295                                  	;mov	ax,'\'			; AX = '\',0
 18296 00001965 B05C                    	mov	al,'\'
 18297 00001967 AB                      	stosw				; add to dir string
 18298                                  ;@@:
 18299                                  dbare2:
 18300                                  	;;mov	String_Ptr_2,offset TRANGROUP:BwdBuf
 18301                                  	;mov	word [string_ptr_2],BWDBUF ; *!
 18302                                  	; 01/08/2024
 18303 00001968 8936[7F9D]              	mov	[string_ptr_2],si ; BWDBUF ; *!
 18304 0000196C 5E                      	pop	si ; *!
 18305                                  	;mov	dx,offset TRANGROUP:String_Buf_Ptr
 18306 0000196D BA[4C91]                	mov	dx,string_buf_ptr
 18307                                  	;invoke	Std_Printf		; display device & directory path
 18308 00001970 E86A3A                  	call	std_printf
 18309                                  dbNameExt:
 18310 00001973 E82D00                  	call	DisplayDotForm		; display name.ext
 18311                                  	;invoke	CrLf2			; display cr/lf
 18312 00001976 E8C70F                  	call	CRLF2
 18313                                  	; 19/02/2023
 18314                                  	;call	UseLine			;M007;Allow /p with /b
 18315                                  ;dbRet:
 18316                                  	;retn
 18317                                  
 18318                                  	; 19/02/2023
 18319                                  	;jmp	short UseLine
 18320                                  
 18321                                  ; ---------------------------------------------------------------------------
 18322                                  
 18323                                  ;***	UseLine - use a display line, start a new page if none left
 18324                                  ;
 18325                                  ;	ENTRY	nothing
 18326                                  ;
 18327                                  ;	EXIT	nothing
 18328                                  ;
 18329                                  ;	USED	flags
 18330                                  
 18331                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18332                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A04h
 18333                                  
 18334                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18335                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1D58h
 18336                                  UseLine:
 18337 00001979 FF0E[FD9B]              	dec	word [LeftOnPage]
 18338 0000197D 833E[FD9B]02            	cmp	word [LeftOnPage],2
 18339 00001982 771E                    	ja	short ulRet
 18340                                  	; 19/02/2023
 18341                                  	;call	EndPage
 18342                                  ;ulRet:
 18343                                  	;retn
 18344                                  
 18345                                  	; 19/02/2023
 18346                                  	;jmp	short EndPage
 18347                                  
 18348                                  ; ---------------------------------------------------------------------------
 18349                                  
 18350                                  ;***	EndPage - end the current display page
 18351                                  ;
 18352                                  ;	ENTRY	LeftOnPage = # lines left on display page
 18353                                  ;		Current directory (on selected drive) is the one being listed
 18354                                  ;		Bits contains /p setting
 18355                                  ;
 18356                                  ;	EXIT	LeftOnPage = # lines left for next page
 18357                                  ;
 18358                                  ;	USED	AX,DX
 18359                                  ;
 18360                                  ;	EFFECTS
 18361                                  ;
 18362                                  ;	  Pause is invoked to display a message and wait for a keystroke.
 18363                                  ;	  BwdBuf (same as DirBuf) used to build directory string.
 18364                                  
 18365                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18366                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19B8h
 18367                                  
 18368                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18369                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1BADh
 18370                                  
 18371                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18372                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1D0Ch
 18373                                  EndPage:
 18374                                  	;;;test	Bits,mask pagd
 18375                                  	;;test	word [_Bits],2
 18376                                  	;test	byte [_Bits],2
 18377                                  	; 08/06/2023
 18378 00001984 F606[6A9D]02            	test	byte [_Bits],mask.pagd ; 4 ; MSDOS 6.0
 18379                                  			; 01/08/2024   ; 2 ; PCDOS 7.1	
 18380 00001989 7410                    	jz	short epNew		; paged display isn't enabled
 18381                                  
 18382 0000198B 53                      	push	bx			; save BX
 18383 0000198C 51                      	push	cx			; save CX
 18384                                  
 18385                                  	;invoke	Pause			; "Press any key to continue..."
 18386 0000198D E86E03                  	call	PAUSE
 18387                                  
 18388                                  	;invoke	Build_Dir_String
 18389 00001990 E83108                  	call	build_dir_string
 18390                                  	;mov	dx,offset TRANGROUP:DirCont_Ptr
 18391 00001993 BA[0892]                	mov	dx,dircont_ptr
 18392                                  	;invoke	Printf_Crlf		; "(continuing <dir>)", cr/lf
 18393 00001996 E8363A                  	call	Printf_Crlf
 18394                                  
 18395 00001999 59                      	pop	cx			; restore CX
 18396 0000199A 5B                      	pop	bx			; restore BX
 18397                                  epNew:	
 18398 0000199B A1[F49E]                	mov	ax,[LinPerPag]		; AX = # lines per page
 18399 0000199E 48                      	dec	ax			; AX = # lines till next EndPage
 18400 0000199F A3[FD9B]                	mov	[LeftOnPage],ax		; LeftOnPage = countdown variable
 18401                                  ulRet:	
 18402                                  	; 19/02/2023
 18403 000019A2 C3                      	retn
 18404                                  
 18405                                  ; ---------------------------------------------------------------------------
 18406                                  
 18407                                  ;***	DisplayDotForm - display filename in compressed dot format
 18408                                  ;
 18409                                  ;	Display name.ext, with no cr/lf's. Dot is displayed only
 18410                                  ;	if the filename has a nonblank extension.
 18411                                  ;
 18412                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18413                                  ;
 18414                                  ;	EXIT	DX = # char's displayed, including dot
 18415                                  ;
 18416                                  ;	USED	AX,CX,SI,DI
 18417                                  ;
 18418                                  ;	EFFECTS
 18419                                  ;
 18420                                  ;	  Filename is displayed in name.ext format.
 18421                                  ;
 18422                                  ;	NOTE
 18423                                  ;
 18424                                  ;	  We allow for bogus filenames that have blanks embedded
 18425                                  ;	  in the name or extension.
 18426                                  
 18427                                  ;	Bugbug:	might be a good performance gain if we buffered
 18428                                  ;	up the output and used DOS function 9.
 18429                                  
 18430                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18431                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:17C8h
 18432                                  
 18433                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18434                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1953h
 18435                                  
 18436                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18437                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1A0Dh
 18438                                  DisplayDotForm:
 18439 000019A3 1E                      	push	ds			; save TRANGROUP seg addr
 18440 000019A4 06                      	push	es			; save ES
 18441 000019A5 2EA1[D39B]              	mov	ax,[cs:TPA]		; AX = TPA seg addr
 18442 000019A9 8ED8                    	mov	ds,ax			; DS:BX = ptr to entry
 18443                                  	;assume	ds:nothing
 18444 000019AB 8EC0                    	mov	es,ax			; ES:BX = ptr to entry
 18445                                  
 18446                                  	; 08/06/2023
 18447                                  	;mov	di,bx			; ES:DI = ptr to entry
 18448                                  	;;;add	di,filename + size filename - 1
 18449                                  	;add	di,8 ; 1+8-1		; ES:DI = ptr to last char in name field
 18450                                  	;;mov	cx,size filename	; CX = length of name field
 18451                                  	;mov	cx,8
 18452                                  	; 08/06/2023
 18453 000019AD B90800                  	mov	cx,8
 18454 000019B0 89CF                    	mov	di,cx
 18455 000019B2 01DF                    	add	di,bx	
 18456                                  
 18457 000019B4 B020                    	mov	al,' '
 18458 000019B6 FD                      	std				; scan down
 18459 000019B7 F3AE                    	repe	scasb			; scan for nonblank
 18460                                  
 18461                                  ;	Assume file name has at least one character.
 18462                                  
 18463 000019B9 41                      	inc	cx			; CX = # chars in name
 18464 000019BA 89CA                    	mov	dx,cx			; DX = # chars to be displayed
 18465                                  
 18466 000019BC 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 18467                                  	;;add	si,filename		; DS:SI = ptr to name
 18468                                  	;add	si,1 
 18469                                  	;		; add si,EntryStruc.filename
 18470                                  	; 25/04/2023
 18471 000019BE 46                      	inc	si
 18472                                  NextNameChar:
 18473 000019BF FC                      	cld
 18474 000019C0 AC                      	lodsb				; AL = next char
 18475                                  
 18476                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18477                                  %if 1
 18478                                  ;ifdef DBCS
 18479                                  	;invoke	testkanj
 18480                                  	;jz	@f			; if this is not lead byte
 18481 000019C1 E8640D                  	call	testkanj
 18482 000019C4 7409                    	jz	short ddf3
 18483                                  	;invoke	Print_Char		; display lead byte
 18484 000019C6 E8AC07                  	call    PRINT_CHAR
 18485 000019C9 49                      	dec	cx
 18486 000019CA 7413                    	jz	short ExtChar		; if this is end
 18487 000019CC AC                      	lodsb				; get tail byte
 18488                                  	;jmp	short NameChar10	; display tail byte
 18489 000019CD EB0B                    	jmp	short ddf1
 18490                                  ;@@:
 18491                                  ddf3:
 18492                                  ;endif
 18493                                  %endif
 18494                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 18495                                  	;;test	word [ss:_Bits],10h
 18496                                  	;test	byte [ss:_Bits],10h
 18497                                  	; 08/06/2023
 18498 000019CF 36F606[6A9D]10          	test	byte [ss:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 18499                                  			; 01/08/2024	   ; 10h ; PCDOS 7.1
 18500                                  	;jz	short @F		;M010;lowercase not required
 18501 000019D5 7403                    	jz	short ddf1
 18502 000019D7 E8FA02                  	call	LowerCase		;M010;filename char is in AL
 18503                                  
 18504                                  ;NameChar10:
 18505                                  ddf1:
 18506                                  ;@@:	
 18507                                  	;invoke	Print_Char		; display it
 18508 000019DA E89807                  	call	PRINT_CHAR
 18509 000019DD E2E0                    	loop	NextNameChar
 18510                                  
 18511                                  ExtChar:	; 01/08/2024
 18512                                  
 18513                                  ;	Now do extension.
 18514                                  
 18515 000019DF 89DF                    	mov	di,bx			; ES:DI = ptr to entry
 18516                                  	;add	di,fileext + size fileext - 1
 18517 000019E1 83C70B                  	add	di,11 ; 9+3-1		; ES:DI = ptr to last char in ext field
 18518                                  	;mov	cx,size fileext		; CX = length of ext field
 18519 000019E4 B90300                  	mov	cx,3
 18520 000019E7 B020                    	mov	al,' '
 18521 000019E9 FD                      	std				; scan down
 18522 000019EA F3AE                    	repe	scasb			; scan for nonblank
 18523 000019EC 742E                    	je	short ddDone		; no nonblank chars in ext
 18524                                  
 18525 000019EE 41                      	inc	cx			; CX = # chars in ext
 18526 000019EF 01CA                    	add	dx,cx			; DX = total # chars to be displayed
 18527 000019F1 42                      	inc	dx			;      including dot
 18528                                  
 18529 000019F2 B02E                    	mov	al,'.'
 18530 000019F4 E87E07                  	call	PRINT_CHAR
 18531 000019F7 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 18532                                  	;add	si,fileext		; DS:SI = ptr to ext
 18533 000019F9 83C609                  	add	si,9
 18534                                  
 18535                                  NextExtChar:
 18536 000019FC FC                      	cld
 18537 000019FD AC                      	lodsb				; AL = next char
 18538                                  
 18539                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18540                                  %if 1
 18541                                  ;ifdef DBCS
 18542                                  	;invoke	testkanj
 18543                                  	;jz	@f			; if this is not lead byte
 18544 000019FE E8270D                  	call	testkanj
 18545 00001A01 7409                    	jz	short ddf4
 18546                                  	;invoke	Print_Char		; display lead byte
 18547 00001A03 E86F07                  	call    PRINT_CHAR
 18548 00001A06 49                      	dec	cx
 18549 00001A07 7413                    	jz	short ddDone		; if this is end
 18550 00001A09 AC                      	lodsb				; get tail byte
 18551                                  	;jmp	short ExtChar10		; display tail byte
 18552 00001A0A EB0B                    	jmp	short ddf2
 18553                                  ;@@:
 18554                                  ddf4:
 18555                                  ;endif
 18556                                  %endif
 18557                                  	;;;test	CS:Bits,mask lcase	;M010;check for lowercase option
 18558                                  	;;test	word [cs:_Bits],10h
 18559                                  	;test	byte [cs:_Bits],10h
 18560                                  	; 08/06/2023
 18561 00001A0C 2EF606[6A9D]10          	test	byte [cs:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 18562                                  			; 01/08/2024	   ; 10h ; PCDOS 7.1
 18563                                  	;jz	short @F		;M010;lowercase not required
 18564 00001A12 7403                    	jz	short ddf2
 18565 00001A14 E8BD02                  	call	LowerCase		;M010;fileext char is in AL
 18566                                  ;@@:	
 18567                                  ddf2:
 18568                                  	;invoke	Print_Char		; display it
 18569 00001A17 E85B07                  	call	PRINT_CHAR
 18570 00001A1A E2E0                    	loop	NextExtChar
 18571                                  ddDone:
 18572 00001A1C 07                      	pop	es			; restore ES
 18573 00001A1D 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 18574                                  	;assume	ds:TRANGROUP
 18575 00001A1E FC                      	cld				; leave direction flag = up
 18576 00001A1F C3                      	retn
 18577                                  
 18578                                  ; ---------------------------------------------------------------------------
 18579                                  
 18580                                  ;***	DisplayFile - display file entry, update counters
 18581                                  ;
 18582                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18583                                  ;		Bits contains /w, /p settings
 18584                                  ;
 18585                                  ;	EXIT	nothing
 18586                                  ;
 18587                                  ;	USED	AX,CX,DX,SI,DI,BP
 18588                                  ;
 18589                                  ;	EFFECTS
 18590                                  ;
 18591                                  ;	  Entry is displayed.  
 18592                                  ;	  If not /b,
 18593                                  ;	    Cursor is left at end of entry on screen.
 18594                                  ;	    FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 18595                                  ;	  If /b,
 18596                                  ;	    Cursor is left at beginning of next line.
 18597                                  ;	    Cnt's and Siz's aren't updated.
 18598                                  
 18599                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18600                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:182Eh
 18601                                  	
 18602                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18603                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:19B9h
 18604                                  
 18605                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18606                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1A8Fh
 18607                                  
 18608                                  DisplayFile:
 18609                                  	;;;test	Bits,mask bare
 18610                                  	;;test	word [_Bits],8
 18611                                  	;test	byte [_Bits],8
 18612                                  	; 08/06/2023
 18613 00001A20 F606[6A9D]08            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0
 18614                                  			; 01/08/2024	; 8 ; PCDOS 7.1
 18615 00001A25 7405                    	jz	short dfNorm		; not /b - do normal display
 18616                                  
 18617 00001A27 E8F8FE                  	call	DisplayBare		; display file in bare format
 18618 00001A2A EB18                    	jmp	short dfRet
 18619                                  dfNorm:	
 18620 00001A2C E87800                  	call	DisplayNext		; pos'n cursor for next entry
 18621                                  	;;;test	Bits,mask wide
 18622                                  	;;test	word [_Bits],1
 18623                                  	;test	byte [_Bits],1
 18624                                  	; 08/06/2023
 18625 00001A2F F606[6A9D]01            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 18626                                  			; 01/08/2024   ; 1 ; PCDOS 7.1
 18627 00001A34 7405                    	jz	short dfFull		; full format
 18628 00001A36 E82802                  	call	DisplayWide		; wide format
 18629 00001A39 EB06                    	jmp	short dfCnt
 18630                                  dfFull:	
 18631 00001A3B E83400                  	call	DisplayName		; display filename & extension
 18632 00001A3E E88D00                  	call	DisplayTheRest		; display size, date, time
 18633                                  
 18634                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18635                                  %if 0	
 18636                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18637                                  	; MSDOS 6.0
 18638                                  ;ifdef DBLSPACE_HOOKS
 18639                                  	;;test	Bits,mask cratio
 18640                                  	;test	word [_Bits],1
 18641                                  	test	byte [_Bits],mask.cratio
 18642                                  					; display compression ratio
 18643                                  	jz	short dfCnt
 18644                                  	call	DisplayCompRatio
 18645                                  ;endif
 18646                                  %endif
 18647                                  
 18648                                  dfCnt:
 18649 00001A41 E8A7FE                  	call	CountFile		; update file counters
 18650                                  dfRet:
 18651                                  dhRet:	; 19/02/2023
 18652 00001A44 C3                      	retn
 18653                                  
 18654                                  ; ---------------------------------------------------------------------------
 18655                                  
 18656                                  ;***	DisplayHeader - display directory header of working directory
 18657                                  ;
 18658                                  ;	ENTRY	Current directory (on selected drive) is the one to display
 18659                                  ;		LeftOnPage = # lines left on display page
 18660                                  ;
 18661                                  ;	EXIT	nothing
 18662                                  ;
 18663                                  ;	ERROR EXIT
 18664                                  ;
 18665                                  ;	  Build_Dir_String will exit through CError with "Invalid drive
 18666                                  ;	   specification" if there's a problem obtaining the current
 18667                                  ;	   directory pathname.
 18668                                  ;
 18669                                  ;	USED	AX,DX,SI,DI
 18670                                  ;
 18671                                  ;	EFFECTS
 18672                                  ;
 18673                                  ;	  BwdBuf (which is really the same buffer as DirBuf, which
 18674                                  ;	   we are using for the DTA) contains the directory string.
 18675                                  ;	  LeftOnPage is adjusted.
 18676                                  
 18677                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18678                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18679                                  
 18680                                  DisplayHeader:
 18681                                  	;;;test	Bits,mask bare
 18682                                  	;;test	word [_Bits],8
 18683                                  	;test	byte [_Bits],8
 18684                                  	; 08/06/2023
 18685 00001A45 F606[6A9D]08            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 18686                                  			; 01/08/2024	; 8 ; PCDOS 7.1
 18687 00001A4A 75F8                    	jnz	short dhRet		; /b - don't display header
 18688                                  
 18689                                  	;;;test	Bits,mask subd
 18690                                  	;;test	word [_Bits],4
 18691                                  	;test	byte [_Bits],4
 18692                                  	; 08/06/2023
 18693 00001A4C F606[6A9D]04            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 18694                                  			; 01/08/2024   ; 4 ; PCDOS 7.1
 18695 00001A51 7408                    	jz	short dhNorm		; not /s
 18696                                  
 18697                                  ;	For subdirectory listings, put a blank line before the header.
 18698                                  
 18699                                  	;invoke	Crlf2			; start with a blank line
 18700 00001A53 E8EA0E                  	call	CRLF2
 18701 00001A56 E820FF                  	call	UseLine
 18702 00001A59 EB05                    	jmp	short dhCom
 18703                                  dhNorm:
 18704 00001A5B B020                    	mov	al,' ' ; 20h
 18705                                  	;mov	al,BLANK		; if not /s, precede by a blank
 18706 00001A5D E81507                  	call	PRINT_CHAR		; print a leading blank
 18707                                  dhCom:
 18708 00001A60 E86107                  	call	build_dir_string
 18709 00001A63 BA[B090]                	mov	dx,dirhead_ptr
 18710 00001A66 E87439                  	call	std_printf		; print header & cr/lf
 18711 00001A69 E80DFF                  	call	UseLine
 18712 00001A6C E8D10E                  	call	CRLF2			; another cr/lf
 18713                                  	;call	UseLine
 18714                                  ;dhRet:
 18715                                  	;retn
 18716                                  
 18717                                  	; 19/02/2023
 18718 00001A6F E907FF                  	jmp	UseLine
 18719                                  
 18720                                  ; ---------------------------------------------------------------------------
 18721                                  
 18722                                  ;***	DisplayName - display file name & extension
 18723                                  ;
 18724                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18725                                  ;
 18726                                  ;	EXIT	nothing
 18727                                  ;
 18728                                  ;	USED	AX,CX,DX,SI,DI
 18729                                  ;
 18730                                  ;	EFFECTS
 18731                                  ;
 18732                                  ;	  Filename & extension are displayed in spread format.
 18733                                  ;	  Cursor is left at end of extension.
 18734                                  
 18735                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18736                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18737                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18738                                  
 18739                                  DisplayName:
 18740 00001A72 1E                      	push	ds			; save TRANGROUP seg addr
 18741 00001A73 8E1E[D39B]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 18742                                  	;assume	ds:nothing
 18743 00001A77 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 18744                                  	;;add	si,filename		; DS:SI = ptr to filename
 18745                                  	;add	si,1  ; EntryStruc.filename
 18746                                  	; 08/06/2023
 18747 00001A79 46                      	inc	si
 18748 00001A7A BF[499C]                	mov	di,CHARBUF		; ES:DI = ptr to CharBuf
 18749                                  
 18750 00001A7D B90800                  	mov	cx,8
 18751 00001A80 FC                      	cld
 18752 00001A81 F3A4                    	rep	movsb			; move filename to CharBuf
 18753 00001A83 B020                    	mov	al,' '
 18754 00001A85 AA                      	stosb				; add a blank
 18755                                  	;mov	cx,3
 18756                                  	; 08/06/2023
 18757 00001A86 B103                    	mov	cl,3
 18758 00001A88 F3A4                    	rep	movsb			; add extension
 18759 00001A8A 30C0                    	xor	al,al
 18760 00001A8C AA                      	stosb				; add a NULL
 18761                                  
 18762 00001A8D 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 18763                                  	;assume	ds:TRANGROUP
 18764                                  
 18765                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 18766                                  	;;test	word [_Bits],10h
 18767                                  	;test	byte [_Bits],10h
 18768                                  	; 08/06/2023
 18769 00001A8E F606[6A9D]10            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 18770                                  			; 01/08/2024	; 10h ; PCDOS 7.1
 18771 00001A93 7406                    	jz	short dn1		;M010;lowercase not required
 18772 00001A95 BE[499C]                	mov	si,CHARBUF		;M010;DS:SI --> ASCIIZ string
 18773 00001A98 E84402                  	call	LowercaseString		;M010;filename.ext string is in CharBuf
 18774                                  dn1:	
 18775 00001A9B C706[7F9D][499C]        	mov	word [string_ptr_2],CHARBUF
 18776 00001AA1 BA[4C91]                	mov	dx,string_buf_ptr
 18777                                  	;call	std_printf		; print filename & extension
 18778                                  	;retn
 18779                                  	; 19/02/2023
 18780 00001AA4 E93639                  	jmp	std_printf
 18781                                  
 18782                                  ; ---------------------------------------------------------------------------
 18783                                  
 18784                                  ;***	DisplayNext - move display cursor to next entry position
 18785                                  ;
 18786                                  ;	ENTRY	LeftOnLine = # entries can still be printed on this line
 18787                                  ;		LeftOnPage = # lines can still be printed for this page
 18788                                  ;		FileCnt = # files in this dir displayed before this one
 18789                                  ;		Bits contains /w setting
 18790                                  ;
 18791                                  ;	EXIT	nothing
 18792                                  ;
 18793                                  ;	USED	AX,DX
 18794                                  ;
 18795                                  ;	EFFECTS
 18796                                  ;
 18797                                  ;	  LeftOnLine will be updated to reflect the entry about to be
 18798                                  ;	   displayed.
 18799                                  ;	  LeftOnPage may be updated.
 18800                                  
 18801                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18802                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18803                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18804                                  	
 18805                                  DisplayNext:
 18806 00001AA7 833E[FF9B]00            	cmp	word [FileCnt],0
 18807 00001AAC 7415                    	je	short dn1st		; 1st file in directory
 18808 00001AAE 803E[F99B]00            	cmp	byte [LeftOnLine],0
 18809 00001AB3 7E08                    	jng	short dnEol	; jle	; no more room on this line
 18810                                  
 18811                                  ;	We are in wide mode (LeftOnLine is always 0 otherwise) and
 18812                                  ;	we still have room for more on this line.
 18813                                  ;	Tab to next position.
 18814                                  
 18815 00001AB5 BA[5B91]                	mov	dx,tab_ptr
 18816 00001AB8 E82239                  	call	std_printf
 18817 00001ABB EB0C                    	jmp	short dnDone
 18818                                  dnEol:	
 18819                                  ;	Start this entry on a new line.
 18820                                  
 18821 00001ABD E8800E                  	call	CRLF2		; start on new line
 18822 00001AC0 E8B6FE                  	call	UseLine
 18823                                  dn1st:
 18824 00001AC3 A0[FA9B]                	mov	al,[PerLine]
 18825 00001AC6 A2[F99B]                	mov	[LeftOnLine],al	; reset # entries left on line
 18826                                  
 18827                                  dnDone:
 18828 00001AC9 FE0E[F99B]              	dec	byte [LeftOnLine]
 18829                                  				; reflect the entry about to be displayed
 18830 00001ACD C3                      	retn
 18831                                  
 18832                                  ; ---------------------------------------------------------------------------
 18833                                  
 18834                                  ;***	DisplayTheRest - display file size/dir, date, time
 18835                                  ;
 18836                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18837                                  ;		Display cursor is at end of file extension
 18838                                  ;
 18839                                  ;	EXIT	nothing
 18840                                  ;
 18841                                  ;	USED	AX,CX,DX,SI,DI,BP
 18842                                  ;
 18843                                  ;	EFFECTS
 18844                                  ;
 18845                                  ;	  File size, date, & time are displayed.
 18846                                  
 18847                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18848                                  
 18849                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18850                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1A7Ch
 18851                                  
 18852                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18853                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1B47h
 18854                                  
 18855                                  DisplayTheRest:
 18856 00001ACE 06                      	push	es			; save TRANGROUP seg addr
 18857 00001ACF 8E06[D39B]              	mov	es,[TPA]		; ES = TPA seg addr
 18858 00001AD3 89DD                    	mov	bp,bx			; BP = offset of entry in TPA
 18859                                  	;;test	es:[bp].fileattr,ATTR_DIRECTORY
 18860                                  	;test	byte [es:bp+EntryStruc.fileattr],10h
 18861 00001AD5 26F6460C10              	test	byte [es:bp+12],ATTR_DIRECTORY
 18862 00001ADA 7425                    	jz	short drNonDir		; not a directory file
 18863                                  
 18864                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18865                                  %if 1
 18866 00001ADC 803E[0A9C]00            	cmp	byte [nocommas],0	; no commas ?
 18867 00001AE1 750C                    	jnz	short dr_2		; yes
 18868 00001AE3 C706[7F9D][7493]        	mov	word [string_ptr_2],twospacechars ; db "  ",0
 18869 00001AE9 BA[4C91]                	mov	dx,string_buf_ptr
 18870 00001AEC E8EE38                  	call	std_printf
 18871                                  dr_2:
 18872                                  %endif
 18873                                  
 18874                                  ;	For a directory file, display <DIR> instead of size.
 18875                                  
 18876                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18877                                  %if 0
 18878                                  	mov	dx,dmes_ptr
 18879                                  	call	std_printf
 18880                                  	; 08/06/2023
 18881                                  	;jmp	short drCom
 18882                                  
 18883                                  	; 08/06/2023
 18884                                  	; MSDOS 6.22 COMMAND.COM (disassembled source code)
 18885                                  	test    byte [screen_f_1],40h	; 80 columns ?
 18886                                  	jz      short dr_0      	; no
 18887                                  	mov     dx,space_4_ptr		; 4 space chars
 18888                                  	call    std_printf
 18889                                  dr_0:
 18890                                  	jmp	short drCom		; skip to common fields
 18891                                  %else
 18892                                  	; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18893 00001AEF BA[5E91]                	mov	dx,dmes_ptr		; MSG_1068
 18894 00001AF2 803E[0C9C]00            	cmp	byte [bfree_not_kilo],0 ; size will be displayed as kilobyte ?
 18895 00001AF7 7403                    	jz	short dr_3		; yes
 18896 00001AF9 BA[6191]                	mov	dx,space_4_ptr		; 4 space chars
 18897                                  dr_3:
 18898 00001AFC E8DE38                  	call	std_printf
 18899 00001AFF EB2A                    	jmp	short drCom	
 18900                                  %endif
 18901                                  
 18902                                  drNonDir:
 18903                                  ;	For a non-directory file, display file size.
 18904                                  
 18905                                  	;;mov	dx,word ptr es:[bp].filesize
 18906                                  	;mov	dx,[es:bp+EntryStruc.filesize]
 18907 00001B01 268B5611                	mov	dx,[es:bp+17]
 18908 00001B05 8916[7B9D]              	mov	[File_Size_Low],dx
 18909                                  	;;mov	dx,word ptr es:[bp].filesize+2
 18910                                  	;mov	dx,[es:bp+EntryStruc.filesize+2]
 18911 00001B09 268B5613                	mov	dx,[es:bp+19]
 18912 00001B0D 8916[7D9D]              	mov	[File_Size_High],dx
 18913 00001B11 BA[2291]                	mov	dx,disp_file_size_ptr
 18914                                  
 18915                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18916                                  %if 1
 18917 00001B14 803E[099C]00            	cmp	byte [narrow],0
 18918 00001B19 7503                    	jnz	short dr_4		; narrow display
 18919 00001B1B BA[3091]                	mov	dx,disp_file_size_w_ptr	; big file (wide)
 18920                                  dr_4:
 18921 00001B1E 803E[0C9C]00            	cmp	byte [bfree_not_kilo],0
 18922 00001B23 7403                    	jz	short dr_5		; big file
 18923 00001B25 BA[3E91]                	mov	dx,disp_file_size_n_ptr ; not big file
 18924                                  dr_5:	
 18925                                  %endif
 18926                                  
 18927 00001B28 E8B238                  	call	std_printf
 18928                                  drCom:
 18929                                  ;	For all files, display date & time.
 18930                                  
 18931                                  	;;mov	ax,es:[bp].filedate	; AX = date word
 18932                                  	;mov	ax,[es:bp+EntryStruc.filedate]
 18933 00001B2B 268B460F                	mov	ax,[es:bp+15]
 18934                                  
 18935                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18936                                  %if 0
 18937                                  	or	ax,ax			; test for null date (DOS 1.x)
 18938                                  	jz	short drDone		; no date, skip date/time display
 18939                                  %else
 18940 00001B2F 09C0                    	or	ax,ax
 18941 00001B31 7503                    	jnz	short dr_6
 18942 00001B33 E9AA00                  	jmp	drDone
 18943                                  dr_6:
 18944                                  %endif
 18945                                  
 18946 00001B36 89C3                    	mov	bx,ax			; BX = date word
 18947 00001B38 83E01F                  	and	ax,1Fh			; AX = day of month
 18948 00001B3B 88C2                    	mov	dl,al			; DL = day of month
 18949 00001B3D 89D8                    	mov	ax,bx			; AX = date word
 18950 00001B3F B105                    	mov	cl,5
 18951 00001B41 D3E8                    	shr	ax,cl			; shift day out
 18952 00001B43 240F                    	and	al,0Fh			; AL = month
 18953 00001B45 88C6                    	mov	dh,al			; DH = month
 18954 00001B47 88F9                    	mov	cl,bh
 18955 00001B49 D0E9                    	shr	cl,1			; CL = year - 1980
 18956 00001B4B 30ED                    	xor	ch,ch			; CX = year - 1980
 18957                                  
 18958                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18959                                  %if 0
 18960                                  	; MSDOS 5.0-6.22
 18961                                  	add	cx,80			; CX = 2-digit year
 18962                                  	cmp	cl,100
 18963                                  	jb	short dr_1		; not year 2000 yet, skip ahead
 18964                                  	sub	cl,100			; adjust for 21st century
 18965                                  %else
 18966                                  	; PCDOS 7.1
 18967 00001B4D 81C1BC07                	add	cx,1980			; CX = 4-digit year
 18968 00001B51 803E[0B9C]00            	cmp	byte [yeardigit4],0	; 4 digits year display ?
 18969 00001B56 7509                    	jnz	short dr_1		; yes
 18970 00001B58 81E9D007                	sub	cx,2000			; after	year 2000 (21st century)
 18971 00001B5C 7903                    	jns	short dr_1
 18972 00001B5E 83C164                  	add	cx,100			; before year 2000 (20th century)
 18973                                  %endif
 18974                                  
 18975                                  dr_1:	
 18976 00001B61 86F2                    	xchg	dh,dl			; DX = month/day
 18977 00001B63 890E[9F91]              	mov	[DirDat_Yr],cx		; move year to msg block
 18978 00001B67 8916[A191]              	mov	[DirDat_Mo_Day],dx	; move month/day to msg block
 18979                                  	;;mov	cx,es:[bp].filetime	; CX = file time
 18980                                  	;mov	cx,[es:bp+EntryStruc.filetime]
 18981 00001B6B 268B4E0D                	mov	cx,[es:bp+13]
 18982 00001B6F E310                    	jcxz	drPrint			; no time field - go print
 18983 00001B71 D1E9                    	shr	cx,1
 18984 00001B73 D1E9                    	shr	cx,1
 18985 00001B75 D1E9                    	shr	cx,1			; CH = hours
 18986 00001B77 D0E9                    	shr	cl,1
 18987 00001B79 D0E9                    	shr	cl,1			; CL = minutes
 18988 00001B7B 86E9                    	xchg	ch,cl			; CX = hr/min
 18989 00001B7D 890E[AA91]              	mov	[DirTim_Hr_Min],cx	; move time to msg block
 18990                                  drPrint:
 18991                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18992                                  %if 1
 18993 00001B81 C706[9A91]3504          	mov	word [dirdattim_ptr],1077 ; MSG_1077 (normal)
 18994 00001B87 C606[A491]A4            	mov	byte [DirDat_form],0A4h   ; Right_Align+DATE_MDY_2
 18995 00001B8C C706[A591]0A08          	mov	word [DirDat_width],80Ah  ; 10 (max), 8 (min)
 18996 00001B92 803E[099C]00            	cmp	byte [narrow],0
 18997 00001B97 750C                    	jnz	short dr_narrow
 18998 00001B99 C706[9A91]3304          	mov	word [dirdattim_ptr],1075 ; MSG_1075 (narrow)
 18999 00001B9F 8106[A591]0202          	add	word [DirDat_width],202h  ; 12 (max), 10 (min)
 19000                                  dr_narrow:
 19001 00001BA5 803E[0B9C]00            	cmp	byte [yeardigit4],0
 19002 00001BAA 740B                    	jz	short dr_7		 ; 2 digits year display
 19003                                  		; 4 digits year display
 19004 00001BAC C606[A491]B4            	mov	byte [DirDat_form],0B4h  ; Right_Align+DATE_MDY_4
 19005 00001BB1 8106[A591]0202          	add	word [DirDat_width],202h ; 12 (max), 10 (min)
 19006                                  dr_7:	
 19007                                  %endif
 19008 00001BB7 BA[9A91]                	mov	dx,dirdattim_ptr
 19009 00001BBA E82038                  	call	std_printf		; print date & time
 19010                                  
 19011                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 19012                                  %if 1
 19013                                  	; restore message data format fields (to the default values)
 19014 00001BBD C706[9A91]3504          	mov	word [dirdattim_ptr],1077 ; MSG_1077
 19015 00001BC3 C606[A491]A4            	mov	byte [DirDat_form],0A4h   ; Right_Align+DATE_MDY_2
 19016 00001BC8 C706[A591]0A08          	mov	word [DirDat_width],80Ah  ; 10 (max), 8 (min)
 19017 00001BCE C706[9F91]0000          	mov	word [DirDat_Yr],0
 19018 00001BD4 C706[A191]0000          	mov	word [DirDat_Mo_Day],0
 19019 00001BDA C706[AA91]0000          	mov	word [DirTim_Hr_Min],0
 19020                                  %endif
 19021                                  
 19022                                  drDone:
 19023 00001BE0 07                      	pop	es			; ES = TRANGROUP seg addr again	
 19024 00001BE1 89EB                    	mov	bx,bp			; BX = offset of entry in TPA again
 19025                                  dtrRet:		; 03/08/2024
 19026                                  	; 19/02/2023
 19027 00001BE3 C3                      	retn
 19028                                  
 19029                                  ; ---------------------------------------------------------------------------
 19030                                  ; MSDOS 6.0
 19031                                  
 19032                                  ; 01/08/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 19033                                  %if 0
 19034                                  ;ifdef DBLSPACE_HOOKS
 19035                                  
 19036                                  ;***	DisplayCompRatio - display compression ratio
 19037                                  ;
 19038                                  ;	ENTRY	BX = offset of entry in TPA buffer
 19039                                  ;
 19040                                  ;	EXIT	nothing
 19041                                  ;
 19042                                  ;	USED	AX,CX,DX
 19043                                  ;
 19044                                  ;	EFFECTS
 19045                                  ;
 19046                                  ;	  File compression ratio is displayed.
 19047                                  
 19048                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19049                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1B09h
 19050                                  
 19051                                  DisplayCompRatio: ;proc
 19052                                  	push	es			; save TRANGROUP seg addr
 19053                                  	mov	es,[TPA]		; ES = TPA seg addr
 19054                                  	;;mov	al,es:[bx].compratio
 19055                                  	;mov	al,[es:bx+EntryStruc.compratio]
 19056                                  	mov	al,[es:bx+15h]
 19057                                  	cmp	al,0FFh			; invalid/no compression ratio?
 19058                                  	je	short dcrRet
 19059                                  
 19060                                  	mov	ah,al			; unpack compression ratio
 19061                                  	mov	cl,4
 19062                                  	shr	ah,cl			; isolate whole number portion
 19063                                  	inc	ah			; 0-15 = 1-16
 19064                                  	and	al,0Fh 			; isolate tenths
 19065                                  
 19066                                  	mov	[Dir_CRatio_1],ah
 19067                                  	mov	[Dir_CRatio_2],al
 19068                                  	;mov	dx,offset TRANGROUP:DirCompRatio_Ptr
 19069                                  	;invoke	Std_Printf
 19070                                  	mov	dx,DirCompRatio_Ptr
 19071                                  	call	std_printf	
 19072                                  dcrRet:
 19073                                  	pop	es
 19074                                  dtrRet:		; 08/06/2023
 19075                                  	retn
 19076                                  
 19077                                  ;DisplayCompRatio ;endp
 19078                                  
 19079                                  ;endif
 19080                                  %endif
 19081                                  
 19082                                  ; ---------------------------------------------------------------------------
 19083                                  
 19084                                  ;***	DisplayTrailer - display trailing lines for directory listing
 19085                                  ;
 19086                                  ;	ENTRY	LeftOnPage = # lines left on display page
 19087                                  ;		FileCnt = # files listed
 19088                                  ;		FileSiz = total size of files listed
 19089                                  ;
 19090                                  ;	EXIT	nothing
 19091                                  ;
 19092                                  ;	USED
 19093                                  ;
 19094                                  ;	EFFECTS
 19095                                  ;
 19096                                  ;	  Trailing info lines are displayed
 19097                                  
 19098                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19099                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19100                                  	; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 19101                                  
 19102                                  DisplayTrailer:
 19103                                  	;;;test	Bits,mask bare
 19104                                  	;;test	word [_Bits],8
 19105                                  	;test	byte [_Bits],8
 19106                                  	; 08/06/2023
 19107 00001BE4 F606[6A9D]08            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 19108                                  			    ; 02/08/2024 ; 8 ; PCDOS 7.1 	
 19109 00001BE9 75F8                    	jnz	short dtrRet		; /b - don't display trailer
 19110                                  
 19111 00001BEB E8520D                  	call	CRLF2			; start on new line
 19112 00001BEE E888FD                  	call	UseLine
 19113 00001BF1 A1[FF9B]                	mov	ax,[FileCnt]		; AX = # files found
 19114                                  
 19115                                  ;	DisplayTotals uses this entry point.
 19116                                  ;
 19117                                  DisplayCntSiz:
 19118                                  ;	AX = # files
 19119                                  ;	FileSiz = dword total size of files
 19120                                  
 19121                                  ; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 19122                                  ; PCDOS 7.1 COMMAND.COM
 19123                                  %if 0 
 19124                                  	mov	[Dir_Num],ax		; load # files
 19125                                  	mov	dx,dirmes_ptr		; DX = ptr to message block
 19126                                  	call	std_printf		; "nnn File(s)"
 19127                                  
 19128                                  	mov	dx,bytes_ptr
 19129                                  	call	std_printf		; "nnn bytes",cr,lf
 19130                                  	; 19/02/2023
 19131                                  	;call	UseLine
 19132                                  ;dtrRet:
 19133                                  	;retn
 19134                                  
 19135                                  	; 19/02/2023
 19136                                  	jmp	UseLine
 19137                                  %else
 19138                                  	; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 19139 00001BF4 A3[849D]                	mov	[Dir_Num],ax		; number of files
 19140 00001BF7 8916[869D]              	mov	[Dir_Num+2],dx
 19141 00001BFB BA[878F]                	mov	dx,dirmes_ptr		; MSG_1019, 9 bytes, word	
 19142 00001BFE 803E[099C]00            	cmp	byte [narrow],0		; narrow display ?
 19143 00001C03 7503                    	jnz	short dcs_1		; yes
 19144 00001C05 BA[958F]                	mov	dx,dirmes_w_ptr		; MSG_1019, 10 bytes
 19145                                  dcs_1:
 19146 00001C08 803E[0C9C]00            	cmp	byte [bfree_not_kilo],0	; is kilobyte display usable?
 19147 00001C0D 7403                    	jz	short dcs_2		; yes (big files)
 19148 00001C0F BA[A38F]                	mov	dx,dirmes2_ptr		; MSG_1019, 9 bytes, dword
 19149                                  dcs_2:
 19150 00001C12 E8C837                  	call	std_printf		; "nnn File(s)"
 19151 00001C15 8B0E[059C]              	mov	cx,[FileSiz+4]		; 5th and 6th byte of the file size
 19152                                  					; (6th byte=0)
 19153 00001C19 E329                    	jcxz	dcs_3			; file size is (in) 4 bytes
 19154 00001C1B 8B16[049C]              	mov	dx,[FileSiz+3]		; convert to kilobytes
 19155 00001C1F A1[029C]                	mov	ax,[FileSiz+1]
 19156 00001C22 D0CD                    	ror	ch,1			; ch = 5th byte of file size
 19157 00001C24 D1DA                    	rcr	dx,1
 19158 00001C26 D1D8                    	rcr	ax,1
 19159 00001C28 D0CD                    	ror	ch,1
 19160 00001C2A D1DA                    	rcr	dx,1
 19161 00001C2C D1D8                    	rcr	ax,1			; dx:ax = (ch:dx:ax) / 1024
 19162 00001C2E 8916[039C]              	mov	[FileSiz+2],dx
 19163 00001C32 A3[019C]                	mov	[FileSiz],ax
 19164 00001C35 BA[E091]                	mov	dx,kbytes_ptr		; MSG_1107 normal, 14 bytes
 19165 00001C38 803E[0C9C]00            	cmp	byte [bfree_not_kilo],0 ; is kilobyte display usable?
 19166 00001C3D 741C                    	jz	short dcs_5		; yes (big files)
 19167                                  		; no (not big files)
 19168 00001C3F BA[EE91]                	mov	dx,kybytes_n_ptr	; MSG_1107 narrow, 10 bytes
 19169 00001C42 EB17                    	jmp	short dcs_5
 19170                                  dcs_3:
 19171 00001C44 BA[B691]                	mov	dx,bytes_ptr		; MSG_1079 normal, 12 bytes
 19172 00001C47 803E[099C]00            	cmp	byte [narrow],0		; narrow display option
 19173 00001C4C 7503                    	jnz	short dcs_4
 19174 00001C4E BA[C491]                	mov	dx,bytes_w_tr		; MSG_1079 wide, 14 bytes
 19175                                  dcs_4:
 19176 00001C51 803E[0C9C]00            	cmp	byte [bfree_not_kilo],0
 19177 00001C56 7403                    	jz	short dcs_5
 19178 00001C58 BA[D291]                	mov	dx,bytes_n_ptr		; MSG_1079 narrow, 10 bytes
 19179                                  dcs_5:
 19180 00001C5B E87F37                  	call	std_printf		; "nnn bytes",cr,lf
 19181                                  	;call	UseLine
 19182                                  ;dtrRet:
 19183                                  	;retn
 19184                                  	; 02/08/2024
 19185 00001C5E E918FD                  	jmp	UseLine
 19186                                  %endif
 19187                                  
 19188                                  ; ---------------------------------------------------------------------------
 19189                                  
 19190                                  ;***	DisplayWide - display filename in wide format
 19191                                  ;
 19192                                  ;	ENTRY	BX = offset of entry in TPA buffer
 19193                                  ;
 19194                                  ;	EXIT	nothing
 19195                                  ;
 19196                                  ;	USED	AX,CX,DX,SI,DI
 19197                                  ;
 19198                                  ;	EFFECTS
 19199                                  ;
 19200                                  ;	  Name.ext is displayed. Cursor left at end of field (padded
 19201                                  ;	  with blanks). Subdirectory files are displayed as [name.ext].
 19202                                  
 19203                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19204                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:198Ah
 19205                                  
 19206                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19207                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1CDEh
 19208                                  
 19209                                  DisplayWide:
 19210 00001C61 1E                      	push	ds			; save TRANGROUP seg addr
 19211 00001C62 8E1E[D39B]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 19212                                  	;assume	ds:nothing
 19213                                  
 19214                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 19215                                  	;test	byte [bx+EntryStruc.fileattr],10h
 19216 00001C66 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 19217 00001C6A 9C                      	pushf	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19218 00001C6B 7405                    	jz	short dw1		; not a subdirectory file
 19219 00001C6D B05B                    	mov	al,'['
 19220 00001C6F E80305                  	call	PRINT_CHAR		; prefix subdirectory
 19221                                  dw1:	
 19222 00001C72 E82EFD                  	call	DisplayDotForm		; display name.ext
 19223                                  
 19224                                  ;	DX = # chars displayed in name.ext
 19225                                  
 19226                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 19227                                  	;test	byte [bx+EntryStruc.fileattr],10h
 19228                                  	; 03/08/2024
 19229                                  	;test	byte [bx+12],ATTR_DIRECTORY
 19230 00001C75 9D                      	popf	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19231 00001C76 7405                    	jz	short dw2		; not a subdirectory file
 19232 00001C78 B05D                    	mov	al,']'
 19233 00001C7A E8F804                  	call	PRINT_CHAR		; postfix subdirectory
 19234                                  dw2:
 19235                                  ;	Pad field with blanks.
 19236                                  
 19237                                  	;mov	cx,size filename + size fileext + 1
 19238 00001C7D B90C00                  	mov	cx,12 ; 8+3+1
 19239                                  					; CX = field size
 19240 00001C80 29D1                    	sub	cx,dx			; CX = # pad char's
 19241 00001C82 E307                    	jcxz	dwDone
 19242 00001C84 B020                    	mov	al,' '
 19243                                  dw3:	
 19244 00001C86 E8EC04                  	call	PRINT_CHAR
 19245 00001C89 E2FB                    	loop	dw3
 19246                                  dwDone:	
 19247 00001C8B 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 19248                                  	;assume	ds:TRANGROUP
 19249 00001C8C C3                      	retn
 19250                                  
 19251                                  ; ---------------------------------------------------------------------------
 19252                                  
 19253                                  ;***	GetDriveLtr - get target drive letter
 19254                                  ;
 19255                                  ;	ENTRY	FCB contains drive #
 19256                                  ;
 19257                                  ;	EXIT	AX = "d:"
 19258                                  ;
 19259                                  ;	USED	nothing
 19260                                  
 19261                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19262                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19D8h
 19263                                  GetDriveLtr:
 19264 00001C8D A05C00                  	mov	al,[FCB] ; 5Ch	; AL = target drive #
 19265 00001C90 08C0                    	or	al,al
 19266 00001C92 7505                    	jnz	short gdl1	; not current drive default, skip ahead
 19267 00001C94 A0[E59B]                	mov	al,[CURDRV]	; AL = current drive #
 19268 00001C97 FEC0                    	inc	al		; AL = 1-based drive #
 19269                                  gdl1:	
 19270 00001C99 0440                    	add	al,'A'-1 ; 40h	; AL = target drive letter
 19271 00001C9B B43A                    	mov	ah,':'		; AX = "d:"
 19272 00001C9D C3                      	retn
 19273                                  
 19274                                  ; ---------------------------------------------------------------------------
 19275                                  
 19276                                  ;***	SetupParamError - set up for Std_EPrintf parameter parse error message
 19277                                  ;
 19278                                  ;	Do for our /O and /A string parsers what Parse_With_Msg does
 19279                                  ;	for system parser calls. Set up a message substitution block,
 19280                                  ;	etc. for invalid value strings. I copied the procedure from
 19281                                  ;	Setup_Parse_Error_Msg.
 19282                                  ;
 19283                                  ;	ENTRY	BX = ptr to system parser result buffer (contains ptr to str)
 19284                                  ;		
 19285                                  ;
 19286                                  ;	EXIT	AX = system parser error return code for bad param format
 19287                                  ;		DX = ptr to message description block for Std_EPrintf
 19288                                  ;
 19289                                  ;	USED	SI
 19290                                  ;
 19291                                  ;	EFFECTS
 19292                                  ;
 19293                                  ;	  Msg_Disp_Class = parse error message class
 19294                                  ;	  Message block (see DX) is set up for parse error message
 19295                                  
 19296                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19297                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19E9h
 19298                                  SetupParamError:
 19299 00001C9E B80900                  	mov	ax,9			; parse error #
 19300 00001CA1 C606[428F]02            	mov	byte [msg_disp_class],parse_msg_class
 19301                                  	;mov	byte [msg_disp_class],2
 19302 00001CA6 A3[448F]                	mov	[extend_buf_ptr],ax
 19303                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 19304 00001CA9 8B7704                  	mov	si,[bx+4]
 19305 00001CAC 8936[7F9D]              	mov	[string_ptr_2],si
 19306 00001CB0 C606[468F]01            	mov	byte [extend_buf_sub],one_subst
 19307                                  	;mov	byte [extend_buf_sub],1
 19308 00001CB5 BA[448F]                	mov	dx,extend_buf_ptr
 19309 00001CB8 C3                      	retn
 19310                                  
 19311                                  ; ---------------------------------------------------------------------------
 19312                                  
 19313                                  ;***	ZeroTotals - zero grand total file count, size
 19314                                  ;
 19315                                  ;	ENTRY	nothing
 19316                                  ;
 19317                                  ;	EXIT	nothing
 19318                                  ;
 19319                                  ;	USED	AX
 19320                                  ;
 19321                                  ;	EFFECTS
 19322                                  ;
 19323                                  ;	  FileCntTotal & FileSizTotal are zeroed.
 19324                                  ;
 19325                                  ;	NOTES
 19326                                  ;
 19327                                  ;	  FileCntTotal throuth csecUsedTotal must be together!
 19328                                  
 19329                                  ; 05/06/2023
 19330                                  ;ifdef DBLSPACE_HOOKS
 19331                                  ;csecSIZE EQU size csecUsed + size csecUsedDir + size csecUsedTotal
 19332                                  ;ccluSIZE EQU size ccluUsed + size ccluUsedDir + size ccluUsedTotal
 19333                                  ;endif
 19334                                  
 19335                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19336                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A13h
 19337                                  
 19338                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 19339                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C08h
 19340                                  
 19341                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19342                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1D67h
 19343                                  ZeroTotals:
 19344 00001CB9 BF[3D9C]                	mov	di,FileCntTotal
 19345                                  
 19346                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 19347                                  	;;mov	cx,size FileCntTotal+size FileSizTotal
 19348                                  	;mov	cx,8
 19349                                  	;ifdef DBLSPACE_HOOKS
 19350                                  	;mov	cx,size FileCntTotal+size FileSizTotal+csecSIZE+ccluSIZE
 19351                                  	;endif
 19352                                  	;mov	cx,26
 19353                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19354 00001CBC B90C00                  	mov	cx,12
 19355                                  
 19356 00001CBF 30C0                    	xor	al,al
 19357 00001CC1 F3AA                    	rep	stosb
 19358 00001CC3 C3                      	retn	
 19359                                  
 19360                                  ; ---------------------------------------------------------------------------
 19361                                  
 19362                                  ;***	CtrlCHandler - our own control-c handler
 19363                                  ;
 19364                                  ;	Make sure user's default directory gets restored. See notes
 19365                                  ;	at InstallCtrlCHandler.
 19366                                  ;
 19367                                  ;	ENTRY	control-c
 19368                                  ;
 19369                                  ;	EXIT	to OldCtrlCHandler
 19370                                  ;
 19371                                  ;	USED	DS,flags
 19372                                  ;
 19373                                  ;	EFFECTS
 19374                                  ;
 19375                                  ;	  Restore user's default directory.
 19376                                  ;
 19377                                  ;	NOTES
 19378                                  ;
 19379                                  ;	  This handler is only installed after calling PathCrunch,
 19380                                  ;	  which sets UserDir1, so the restoration will work.
 19381                                  ;
 19382                                  ;	  The original control-c vector will be restored, whether
 19383                                  ;	  or not this one is invoked, in the HeadFix routine.
 19384                                  
 19385                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19386                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A1Eh
 19387                                  
 19388                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 19389                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C13h ; *
 19390                                  
 19391                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19392                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1D72h
 19393                                  
 19394                                  CtrlCHandler:	;proc far
 19395                                  
 19396                                  ;SR;
 19397                                  ; Save all registers used: ds, dx, ax. I know ax is being used by the 
 19398                                  ;CtrlC handler, am not sure about ds & dx. Save them to be safe
 19399                                  ;
 19400 00001CC4 1E                      	push	ds
 19401 00001CC5 0E                      	push	cs
 19402 00001CC6 1F                      	pop	ds			; DS = TRANGROUP seg addr
 19403 00001CC7 50                      	push	ax
 19404                                  
 19405                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19406                                  %if 0
 19407                                  	push	bx ; *
 19408                                  	push	dx
 19409                                  	call	CloseCVF ; * 		; close CVF file if open
 19410                                  	call	RestUDir		; restore user's default directory
 19411                                  	pop	dx
 19412                                  	pop	bx ; *
 19413                                  %else
 19414 00001CC8 52                      	push	dx
 19415 00001CC9 E82B0B                  	call	RestUDir		; restore user's default directory
 19416 00001CCC 5A                      	pop	dx
 19417                                  %endif
 19418 00001CCD 58                      	pop	ax
 19419 00001CCE 1F                      	pop	ds
 19420 00001CCF 2EFF2E[A1A5]            	jmp	far [cs:OldCtrlCHandler]
 19421                                  					; go to previous int 23 handler
 19422                                  
 19423                                  ; ---------------------------------------------------------------------------
 19424                                  
 19425                                  ;M010;start
 19426                                  ;***	LowerCase - convert ASCII character in AL to lowercase
 19427                                  ;
 19428                                  ;	ENTRY	AL = character to be displayed
 19429                                  ;
 19430                                  ;	EXIT	AL is lowercase
 19431                                  ;
 19432                                  ;	USED	nothing
 19433                                  
 19434                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19435                                  LowerCase:
 19436 00001CD4 3C41                    	cmp	al,'A'		; ensure AL is in range 'A'-'Z'
 19437 00001CD6 7206                    	jb	short lcRet
 19438 00001CD8 3C5A                    	cmp	al,'Z'
 19439 00001CDA 7702                    	ja	short lcRet
 19440                                  
 19441 00001CDC 0C20                    	or	al,20h		; convert to ASCII lowercase (UpperCase+32)-->LowerCase
 19442                                  lcRet:
 19443 00001CDE C3                      	retn
 19444                                  
 19445                                  ; ---------------------------------------------------------------------------
 19446                                  
 19447                                  ;***	LowercaseString - convert ASCIIZ string at DS:SI to lowercase
 19448                                  ;
 19449                                  ;	ENTRY	DS:SI points to start of ASCIIZ string
 19450                                  ;		ES = DS
 19451                                  ;
 19452                                  ;	EXIT	nothing
 19453                                  ;	
 19454                                  ;	USED	AL,SI
 19455                                  
 19456                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19457                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19458                                  LowercaseString:
 19459 00001CDF 57                      	push	di			; save di
 19460 00001CE0 89F7                    	mov	di,si			; ES:DI --> ASCIIZ string
 19461 00001CE2 FC                      	cld
 19462                                  NextChar: 
 19463 00001CE3 AC                      	lodsb				; get character from string into al
 19464 00001CE4 08C0                    	or	al,al			; are we at end of string?
 19465 00001CE6 7414                    	jz	short EndOfString
 19466                                  
 19467                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19468                                  %if 1
 19469                                  ;ifdef DBCS
 19470                                  	;invoke	testkanj
 19471                                  	;jz	@f			; if this is not lead byte
 19472 00001CE8 E83D0A                  	call	testkanj
 19473 00001CEB 7409                    	jz	short NextChar_@
 19474 00001CED AA                      	stosb				; store lead byte
 19475 00001CEE AC                      	lodsb				; get tail byte
 19476 00001CEF 08C0                    	or	al,al
 19477 00001CF1 7409                    	jz	short EndOfString	; if end
 19478 00001CF3 AA                      	stosb				; store tail byte
 19479 00001CF4 EBED                    	jmp	short NextChar
 19480                                  ;@@:
 19481                                  NextChar_@:
 19482                                  ;endif
 19483                                  %endif
 19484 00001CF6 E8DBFF                  	call	LowerCase		; convert character to lowercase
 19485 00001CF9 AA                      	stosb				; store character back into buffer
 19486 00001CFA EBE7                    	jmp	short NextChar		; repeat until end of string
 19487                                  
 19488                                  EndOfString:
 19489 00001CFC 5F                      	pop	di			; restore di
 19490 00001CFD C3                      	retn
 19491                                  
 19492                                  ;M010;end
 19493                                  
 19494                                  ; 08/06/2023
 19495                                  ; ---------------------------------------------------------------------------
 19496                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 19497                                  ; -----------------------------------------
 19498                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 19499                                  ; ---------------------------------------------------------------------------
 19500                                  
 19501                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19502                                  %if 0
 19503                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19504                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C44h
 19505                                  screen_f_set:
 19506                                  	; set dir display parameters depending on screen width (# of columns)
 19507                                  	push	ds
 19508                                  	mov	ax,40h
 19509                                  	mov	ds,ax
 19510                                  	cmp	word [4Ah],40	; Check ROMBIOS DATA colums per row
 19511                                  				; value (80 or 40)
 19512                                  	pop	ds
 19513                                  	jnz	short columns_80 ; 80 columns per line (video mode 3)
 19514                                  	and	byte [screen_f_1],0BFh ; ~40h
 19515                                  	mov	word [screen_f_2],0A0Ah ; 10 bytes (file size field)
 19516                                  	and	byte [screen_f_3],0BFh
 19517                                  	and	byte [screen_f_4],0BFh
 19518                                  	mov	word [screen_f_5],0A0Ah ; 10 bytes (file size field)
 19519                                  	and	byte [screen_f_6],0BFh
 19520                                  	mov	word [screen_f_7],1C1Ch ; 28 bytes (free bytes field)
 19521                                  	;jmp	short screen_f_set_retn
 19522                                  	retn
 19523                                  columns_80:
 19524                                  	or	byte [screen_f_1],40h
 19525                                  	mov	word [screen_f_2],0E0Eh ; 14 bytes (file size field)
 19526                                  	or	byte [screen_f_3],40h
 19527                                  	or	byte [screen_f_4],40h
 19528                                  	mov	word [screen_f_5],0E0Eh ; 14 bytes (file size field)
 19529                                  	or	byte [screen_f_6],40h
 19530                                  	mov	word [screen_f_7],2020h ; 32 bytes (free bytes field)
 19531                                  screen_f_set_retn:
 19532                                  	retn
 19533                                  %endif
 19534                                  
 19535                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19536                                  %if 0
 19537                                  
 19538                                  ;============================================================================
 19539                                  ; CRATIO.ASM, MSDOS 6.0, 1992
 19540                                  ;============================================================================
 19541                                  ; 08/06/2023 - Retro DOS v4.2
 19542                                  
 19543                                  ; The code to calculate compression ratios requires access to the drive's
 19544                                  ; (DOS) FAT and MagicDrv FAT regions.  Two buffers are used (one for each
 19545                                  ; FAT type).  pbufDOSFAT and pbufMDFAT contain the offset to the buffers,
 19546                                  ; segFATBuf contains the segment (both buffers are in the same segment).
 19547                                  ; The buffers are of variable size: cFATEntries contains the size of the
 19548                                  ; buffers in terms of the number of FAT entries they can contain.
 19549                                  
 19550                                  ; ---------------------------------------------------------------------------
 19551                                  
 19552                                  ;***	OpenCVF - open Compressed Volume File for compression ratio report
 19553                                  ;
 19554                                  ;	ENTRY
 19555                                  ;		FCB setup with drive for DIR
 19556                                  ;
 19557                                  ;	EXIT	If successful, CY clear, CVF file open, fhCVF has file handle,
 19558                                  ;		szCVF has \0 terminated CVF file name, MDBPB loaded.
 19559                                  ;
 19560                                  ;		If unsuccessful, CY set
 19561                                  ;
 19562                                  ;	USED	AX, BX, CX, DX, SI, DI
 19563                                  
 19564                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19565                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1CA1h
 19566                                  OpenCVF:
 19567                                  	mov	ax,-1
 19568                                  	mov	[fhCVF],ax		;indicate CVF not open
 19569                                  	mov	[entInBuf],ax		;  and no FAT entries in buffers
 19570                                  
 19571                                  	mov	dl,[FCB] ; mov dl,5Ch	;target drive of DIR cmd
 19572                                  	or	dl,dl			;default drive?
 19573                                  	jz	short ocvf_default
 19574                                  	dec	dl			;no, from 1=A to 0=A
 19575                                  	jmp	short ocvf_swap_info
 19576                                  
 19577                                  ocvf_default:
 19578                                  	mov	dl,[CURDRV]		;0=A, 1=B, ...
 19579                                  
 19580                                  ocvf_swap_info:
 19581                                  	mov	ax,4A11h ; multMagicDrv	;magicdrv Int 2Fh multiplex ID
 19582                                  	mov	bx,1	 ; MD_DRIVE_MAP	;get drive swap info
 19583                                  	int	2fh
 19584                                  
 19585                                  	or	ax,ax			;0 if okay
 19586                                  	jnz	short ocvf_error
 19587                                  
 19588                                  	test	bl,80h 			;80h set if compressed volume
 19589                                  	jz	short ocvf_error
 19590                                  
 19591                                  	and	bl,7Fh 			;bl = host drive, bh = seq #
 19592                                  
 19593                                  	; The CVF may have been mounted from a swapped host drive, in which
 19594                                  	; case the host drive returned in BL is the original host (now
 19595                                  	; swapped with a CVF).	Make a second drive swap info call on the
 19596                                  	; returned host to see if it must be accessed by a different drive
 19597                                  	; letter.
 19598                                  
 19599                                  	push	bx
 19600                                  	push	dx			;save dl, orig drive letter
 19601                                  
 19602                                  	mov	ax,4A11h ; mov ax,multMagicDrv
 19603                                  	mov	dl,bl
 19604                                  	mov	bx,1	 ; mov bx,MD_DRIVE_MAP
 19605                                  	int	2fh
 19606                                  
 19607                                  	pop	dx
 19608                                  	pop	cx			;bx from 1st drive swap info call
 19609                                  
 19610                                  	or	ax,ax			;0 if okay
 19611                                  	jnz	short ocvf_error
 19612                                  
 19613                                  	and	bl,7Fh
 19614                                  	xchg	bx,cx			;bx = 1st, cx = 2nd swap results
 19615                                  
 19616                                  	cmp	dl,cl			;2nd swap info call return orig drive?
 19617                                  	je	short ocvf_got_host	;yes, 1st swap info call returned host
 19618                                  
 19619                                  	mov	bl,cl			;no, use swapped host, orig seq #
 19620                                  ocvf_got_host:
 19621                                  	; Build the filename of the Compressed Volume File
 19622                                  
 19623                                  	;mov	di,offset TRANGROUP:szCVF
 19624                                  					;CVF name buffer
 19625                                  	mov	di,szCVF
 19626                                  
 19627                                  	mov	al,bl
 19628                                  	add	al,'A'
 19629                                  	mov	ah,':'
 19630                                  	cld
 19631                                  	stosw				; drive:
 19632                                  
 19633                                  	;mov	si,offset TRANGROUP:sCVFRoot
 19634                                  					; \name.
 19635                                  	mov	si,sCVFRoot	; "\DBLSPACE"
 19636                                  	;mov	cx,cbCVFRoot
 19637                                  	mov	cx,10
 19638                                  	rep	movsb
 19639                                  
 19640                                  	add	di,3			; point past extension
 19641                                  	xor	al,al
 19642                                  	std
 19643                                  	stosb				; null terminate
 19644                                  
 19645                                  	mov	al,bh			; seq #
 19646                                  	mov	bl,10
 19647                                  	;mov	cx,3			; 3 digit ext/seq #
 19648                                  	mov	cl,3
 19649                                  ;@@:
 19650                                  ocvf_1:	xor	ah,ah			; convert seq # to ascii
 19651                                  	div	bl			;   and store as CVF extension
 19652                                  	add	ah,'0'
 19653                                  	xchg	ah,al
 19654                                  	stosb
 19655                                  	mov	al,ah
 19656                                  	;loop	@b
 19657                                  	loop	ocvf_1
 19658                                  
 19659                                  	cld
 19660                                  
 19661                                  	; Now open the Compressed Volume File
 19662                                  
 19663                                  	; 08/06/2023
 19664                                  	; MSDOS 6.22 COMMAND.COM code only !
 19665                                  	;;;
 19666                                  	mov	di,szCVF ; *
 19667                                  	mov	word [di+4],5652h ; 'RV' (DRVSPACE)
 19668                                  	mov	ax,3D00h
 19669                                  	;mov	dx,szCVF
 19670                                  	mov	dx,di ; *
 19671                                  	int	21h     ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 19672                                  			; DS:DX -> ASCIZ filename
 19673                                  			; AL = access mode
 19674                                  			; 0 - read
 19675                                  	jnb     short ocvf_2
 19676                                  	mov	word [di+4],4C42h ; 'BL' (DBLSPACE)
 19677                                  	;;;
 19678                                  
 19679                                  	;mov	ax,(OPEN shl 8) or 00h 	;compatibility mode/read access
 19680                                  	mov	ax,3D00h
 19681                                  	;;mov	dx,offset TRANGROUP:szCVF
 19682                                  	;mov	dx,szCVF
 19683                                  	mov	dx,di ; *
 19684                                  	int	21h
 19685                                  	;jc	short ocvf_error
 19686                                  	; 18/06/2023
 19687                                  	jnc	short ocvf_2
 19688                                  ocvf_error:	; 18/06/2023
 19689                                  	stc				;indicate failure
 19690                                  	retn
 19691                                  ocvf_2:
 19692                                  	mov	[fhCVF],ax		; success, save CVF file handle
 19693                                  
 19694                                  	; Read the extended MagicDrv BPB
 19695                                  
 19696                                  	mov	bx,ax
 19697                                  	;mov	ah,READ
 19698                                  	mov	ah,3Fh
 19699                                  	;mov	cx,size MD_BPB
 19700                                  	mov	cx,64
 19701                                  	;mov	dx,offset TRANGROUP:MDBPB
 19702                                  	mov	dx,MDBPB
 19703                                  	int	21h
 19704                                  	jc	short ocvf_error1
 19705                                  
 19706                                  	cmp	ax,cx			; get it all?
 19707                                  	je	short ocvf_pick_cluster_size
 19708                                  					; yes...
 19709                                  ocvf_error1:
 19710                                  	call	CloseCVF
 19711                                  	; 18/06/2023
 19712                                  ;ocvf_error:
 19713                                  	stc				;indicate failure
 19714                                  	;jmp	short ocvf_ret
 19715                                  	retn
 19716                                  
 19717                                  	; Determine the cluster size to use for ratio calculation
 19718                                  
 19719                                  ocvf_pick_cluster_size:
 19720                                  	cmp	byte [fUseHostSize],0 	; user want Host drive cluster size?
 19721                                  	je	short ovcf_use_CVF_size	; no, use CVF cluster size
 19722                                  
 19723                                  	;mov	ah,Get_Drive_Data	; get the host drive cluster size
 19724                                  	mov	ah,1Ch
 19725                                  	mov	dl,[szCVF]
 19726                                  	;sub	dl,40h	
 19727                                  	sub	dl,'A'-1		; 1 = A, 2 = B, ...
 19728                                  	push	ds
 19729                                  	int	21h
 19730                                  	pop	ds
 19731                                  
 19732                                  	cmp	al,0FFh			; host drive cluster size in AL if okay,
 19733                                  	jne	short ovcf_set_size	;   failed = 0FFh
 19734                                  
 19735                                  ovcf_use_CVF_size:
 19736                                  	;mov	al,[MDBPB.dos_bpb.csecPerClu]
 19737                                  	mov	al,[MDBPB+0Dh]		; using CVF cluster size
 19738                                  
 19739                                  ovcf_set_size:
 19740                                  	mov	[csecPerCluster],al
 19741                                  
 19742                                  	; Lastly, setup the FAT buffers
 19743                                  ocvf_set_buf:
 19744                                  	mov	ax,[BYTCNT]		; if >= 32k TPA space available,
 19745                                  	mov	[savBytCnt],ax		;   setup larger FAT buffers
 19746                                  	cmp	ax,32*1024  ; 8000h
 19747                                  	jae	short ocvf_big_buf
 19748                                  
 19749                                  	; small TPA, use small resident buffers
 19750                                  
 19751                                  	;mov	word ptr [cFATEntries],cRES_FAT_ENTRIES
 19752                                  	mov	word [cFATEntries],32 ; cRES_FAT_ENTRIES
 19753                                  	mov	[segFATBuf],ds
 19754                                  	;mov	word ptr [pbufDOSFAT],offset TRANGROUP:bufDOSFAT
 19755                                  	;mov	word ptr [pbufMDFAT],offset TRANGROUP:bufMDFAT
 19756                                  	mov	word [pbufDOSFAT],bufDOSFAT
 19757                                  	mov	word [pbufMDFAT],bufMDFAT
 19758                                  	;jmp	short ocvf_success
 19759                                  	; 08/06/2023
 19760                                  	; cf = 1
 19761                                  	clc
 19762                                  	retn
 19763                                  
 19764                                  ocvf_big_buf:
 19765                                  	;mov	bx,cBIG_FAT_ENTRIES
 19766                                  	mov	bx,256
 19767                                  	mov	[cFATEntries],bx
 19768                                  
 19769                                  	shl	bx,1			; 6 bytes per entry (2 for DOS FAT, 4 MD FAT)
 19770                                  	mov	cx,bx			; entries * 2
 19771                                  	shl	bx,1
 19772                                  	add	bx,cx			; bx = # entries * 6
 19773                                  
 19774                                  	sub	ax,bx			; reduce TPA size by size of FAT buffers
 19775                                  	and	ax,0FE00h		; init code rounds BytCnt down to multiple of
 19776                                  	mov	[BYTCNT],ax		;   512 bytes -- a no-op with some buf sizes.
 19777                                  
 19778                                  	mov	bx,[TPA]		; buffers in the TPA
 19779                                  	mov	[segFATBuf],bx
 19780                                  	mov	[pbufDOSFAT],ax		; DOS FAT buffer offset
 19781                                  	add	ax,cx			;   + DOS FAT buffer size
 19782                                  	mov	[pbufMDFAT],ax 		;   = MD FAT buffer offset
 19783                                  	; 08/06/2023
 19784                                  	; cf = 0
 19785                                  ;ocvf_success:
 19786                                  	;clc				;indicate success
 19787                                  ocvf_ret:
 19788                                  	retn
 19789                                  
 19790                                  ; ---------------------------------------------------------------------------
 19791                                  
 19792                                  ;***	CloseCVF - close Compressed Volume File
 19793                                  ;
 19794                                  ;	ENTRY	fhCVF has file handle
 19795                                  ;
 19796                                  ;	EXIT
 19797                                  ;
 19798                                  ;	USED	AX, BX, CX, DX
 19799                                  
 19800                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 19801                                  CloseCVF:
 19802                                  	mov	bx,[fhCVF]		; -1 unless file is open
 19803                                  	cmp	bx,-1 ; 0FFFFh
 19804                                  	je	short ccvf_ret
 19805                                  
 19806                                  	;mov	ah,CLOSE
 19807                                  	mov	ah,3Eh
 19808                                  	int	21h
 19809                                  
 19810                                  	mov	word [fhCVF],-1 ; 0FFFFh ; don't try to close again
 19811                                  
 19812                                  	mov	ax,[savBytCnt]		; 'deallocate' DOS & MD FAT buffers
 19813                                  	mov	[BYTCNT],ax		;   by restoring old TPA byte count
 19814                                  ccvf_ret:
 19815                                  	retn
 19816                                  
 19817                                  ; ---------------------------------------------------------------------------
 19818                                  
 19819                                  ;***	CalcCompRatio - calculate file compression ratio
 19820                                  ;
 19821                                  ;	ENTRY	AX = starting cluster of file to get compression ratio of
 19822                                  ;
 19823                                  ;	EXIT	AX = compression ratio.  Example: a ratio of 2.7 to 1.0
 19824                                  ;		     will return AH = 02h & AL = 07h
 19825                                  ;		ccluUsed set to # DOS clusters used by file
 19826                                  ;		csecUsed set to # compressed sectors used by file
 19827                                  ;		ccluUsedDir, ccluUsedTotal, csecUsedDir, csecUsedTotal updated
 19828                                  ;	USED	none
 19829                                  
 19830                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 19831                                  CalcCompRatio:
 19832                                  	push	bx
 19833                                  	push	cx
 19834                                  	push	dx
 19835                                  	push	es
 19836                                  	mov	es,[segFATBuf]		; es is pointer to FAT buffers
 19837                                  	;assume	es:nothing
 19838                                  
 19839                                  	xor	bx,bx			; zero count of sectors & clusters used
 19840                                  	mov	[ccluUsed],bx
 19841                                  	mov	[csecUsed],bx
 19842                                  	mov	[csecUsed+2],bx
 19843                                  ccr_next:
 19844                                  	cmp	ax,2			; sanity check the DOS FAT value
 19845                                  	jb	short ccr_screwy
 19846                                  
 19847                                  	cmp	ax,0FFF0h		; end of file?
 19848                                  	jae	short ccr_eof
 19849                                  
 19850                                  	call	CheckFATBuffers 	; make sure buffers contain target
 19851                                  	jc	short ccr_screwy	;   FAT entries
 19852                                  
 19853                                  	call	GetMDFATEntry		; returns corresponding entry in BX:CX
 19854                                  	jc	short ccr_screwy
 19855                                  
 19856                                  	shl	bx,1			; used bit to CY
 19857                                  	jnc	short ccr_screwy	; better be used!
 19858                                  
 19859                                  	mov	ch,bh			; save uncompressed count
 19860                                  
 19861                                  	shl	bx,1			; get count into position
 19862                                  	and	bx,0F00h		; bh = count of compressed sectors used
 19863                                  	xchg	bh,bl			; bx = count
 19864                                  	inc	bx			; 0 - 15 means 1 - 16 used
 19865                                  
 19866                                  	add	[csecUsed],bx
 19867                                  	adc	word [csecUsed+2],0
 19868                                  
 19869                                  	mov	dx,ax			; save cluster # in dx
 19870                                  
 19871                                  	mov	al,ch			; uncompressed count to al
 19872                                  	mov	cl,3
 19873                                  	shr	al,cl			; get uncompressed count into position
 19874                                  	and	ax,000Fh		; ax = uncompressed count (0 - 15)
 19875                                  	dec	bx			; bx = compressed count (0 - 15)
 19876                                  	cmp	ax,bx			; if the compressed cnt > uncompressed
 19877                                  	;jae	@f			;   fudge a little and use the larger
 19878                                  	jae	short ccr_1 ; jnb
 19879                                  	mov	ax,bx
 19880                                  ;@@:	
 19881                                  ccr_1:
 19882                                  	mov	cl,[csecPerCluster]	; round up to the number of clusters
 19883                                  	xor	ch,ch			;   required for uncompressed
 19884                                  	add	ax,cx			;   sectors
 19885                                  	div	cl
 19886                                  	xor	ah,ah
 19887                                  	add	[ccluUsed],ax
 19888                                  
 19889                                  	mov	ax,dx			; restore cluster #
 19890                                  	call	GetDOSFATEntry		; retuns next DOS FAT entry in AX
 19891                                  	;jc	short ccr_screwy
 19892                                  	;jmp	short ccr_next
 19893                                  	; 08/06/2023
 19894                                  	jnc	short ccr_next
 19895                                  ccr_screwy:
 19896                                  	xor	ax,ax			; something screwy happened, set
 19897                                  					;   ratio to 0.0 and exit
 19898                                  ccr_ret:
 19899                                  	pop	es
 19900                                  	pop	dx
 19901                                  	pop	cx
 19902                                  	pop	bx
 19903                                  	retn
 19904                                  
 19905                                  	; Reached the end-of-file, now calculate the ratio as the
 19906                                  	; number of DOS sectors used / number of compressed sectors used.
 19907                                  
 19908                                  ccr_eof:
 19909                                  	mov	ax,[ccluUsed]
 19910                                  	add	[ccluUsedDir],ax	; update cluster used totals
 19911                                  	add	[ccluUsedTotal],ax
 19912                                  
 19913                                  	mov	cx,[csecUsed+2]
 19914                                  	mov	bx,[csecUsed]		; cx:bx = # compressed sectors used
 19915                                  
 19916                                  	add	[csecUsedDir],bx	; update sector used totals
 19917                                  	adc	[csecUsedDir+2],cx
 19918                                  	add	[csecUsedTotal],bx
 19919                                  	adc	[csecUsedTotal+2],cx
 19920                                  
 19921                                  	call	ComputeRatio		; ax=clusters used, cx:bx=sectors used
 19922                                  
 19923                                  	jmp	short ccr_ret
 19924                                  
 19925                                  	; 08/06/2023
 19926                                  ;ccr_screwy:
 19927                                  ;	xor	ax,ax			; something screwy happened, set
 19928                                  ;					;   ratio to 0.0 and exit
 19929                                  ;ccr_ret:
 19930                                  ;	pop	es
 19931                                  ;	pop	dx
 19932                                  ;	pop	cx
 19933                                  ;	pop	bx
 19934                                  ;	retn
 19935                                  
 19936                                  ; ---------------------------------------------------------------------------
 19937                                  
 19938                                  ;***	ComputeRatio - calculate ratio of compressed sectors used to
 19939                                  ;		       (would be) DOS sectors used
 19940                                  ;
 19941                                  ;	Entry
 19942                                  ;		AX = DOS clusters used, cx:bx = compressed sectors used
 19943                                  ;	Exit
 19944                                  ;		ah = whole portion, al = tenths
 19945                                  ;
 19946                                  ;	Used	BX, CX, DX
 19947                                  
 19948                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 19949                                  ComputeRatio:
 19950                                  	push	si
 19951                                  	push	di
 19952                                  
 19953                                  	mov	si,bx
 19954                                  	mov	di,cx			; save cx:bx in di:si
 19955                                  
 19956                                  	mov	bl,[csecPerCluster]
 19957                                  	xor	bh,bh
 19958                                  	mul	bx			; dx:ax = # DOS sectors used
 19959                                  	mov	bx,si			; restore bx
 19960                                  
 19961                                  	call	Div32			; dx:ax = quotient, cx:bx = remainder
 19962                                  
 19963                                  	push	ax			; save quotient
 19964                                  
 19965                                  	mov	ax,bx			; if no remainder, tenths will be 0
 19966                                  	or	ax,cx			;   which is in AX so skip following
 19967                                  	jz	short cr_got_tenths	;   (happens frequently)
 19968                                  
 19969                                  	; Multiply the reminder by 10, add half the divisor so result is
 19970                                  	; rounded up, and divide again to get tenths digit
 19971                                  
 19972                                  	mov	ax,cx
 19973                                  	xor	dx,dx
 19974                                  	mov	cx,bx
 19975                                  	mov	bx,10
 19976                                  	mul	bx
 19977                                  	xchg	ax,cx
 19978                                  	mul	bx
 19979                                  	add	dx,cx			; dx:ax = remainder * 10
 19980                                  
 19981                                  	mov	cx,di
 19982                                  	mov	bx,si
 19983                                  	shr	cx,1
 19984                                  	rcr	bx,1			; cx:bx = 1/2 divisor
 19985                                  	add	ax,bx
 19986                                  	adc	dx,cx			; dx:ax = remainder * 10 + 1/2 divisor
 19987                                  
 19988                                  	mov	cx,di
 19989                                  	mov	bx,si
 19990                                  
 19991                                  	call	Div32
 19992                                  
 19993                                  cr_got_tenths:
 19994                                  	pop	bx			; original quotient
 19995                                  	mov	ah,bl
 19996                                  
 19997                                  	cmp	al,10			; if the tenths rounded up to the
 19998                                  	jb	short cr_exit 		;   next whole number, adjust the
 19999                                  					;   whole number part and 0 the
 20000                                  	inc	ah			;   tenths  (i.e. round 1.97 to 2.0)
 20001                                  	xor	al,al
 20002                                  cr_exit:
 20003                                  	pop	di
 20004                                  	pop	si
 20005                                  
 20006                                  	retn
 20007                                  
 20008                                  ; --------------------------------------------------------------------------- 
 20009                                  
 20010                                  ;***	Div32 - 32 bit divide for computing ratios
 20011                                  ;
 20012                                  ;	Entry	DX:AX = dividend, CX:BX = divisor
 20013                                  ;
 20014                                  ;	Exit	DX:AX = quotient, CX:BX = reminder
 20015                                  
 20016                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 20017                                  Div32:
 20018                                  	jcxz	d32_16bit		; differently if 16bit divisor
 20019                                  
 20020                                  	push	si
 20021                                  	push	di
 20022                                  
 20023                                  	; Brute force divide by subtraction. This is okay because worse case
 20024                                  	; the dividend will only be 16 times greater, and typically about 2
 20025                                  	; times
 20026                                  
 20027                                  	xor	si,si
 20028                                  	mov	di,si			; di:si is quotient
 20029                                  ;@@:
 20030                                  div32_1:
 20031                                  	sub	ax,bx			; subtract divisor
 20032                                  	sbb	dx,cx
 20033                                  	jc	short d32_too_far
 20034                                  
 20035                                  	add	si, 1			; accumulate quotient
 20036                                  	adc	di, 0
 20037                                  	;jmp	short @b
 20038                                  	jmp	short div32_1
 20039                                  
 20040                                  d32_too_far:
 20041                                  	add	ax,bx			; fix the last subtraction
 20042                                  	adc	dx,cx
 20043                                  
 20044                                  	mov	cx,di
 20045                                  	mov	bx,si			; dx:ax = remainder, cx:bx = quoient
 20046                                  
 20047                                  	xchg	ax,bx
 20048                                  	xchg	dx,cx			; dx:ax = quoient, cx:bx = remainder
 20049                                  
 20050                                  	pop	di
 20051                                  	pop	si
 20052                                  
 20053                                  	retn
 20054                                  
 20055                                  d32_16bit:
 20056                                  	div	bx			; divide dx:ax by bx
 20057                                  
 20058                                  	mov	bx,dx			; remainder to cx:bx
 20059                                  	xor	dx,dx			; quotient to dx:ax
 20060                                  	mov	cx,dx
 20061                                  	retn
 20062                                  
 20063                                  ; --------------------------------------------------------------------------- 
 20064                                  
 20065                                  ;***	GetDOSFATEntry - returns next cluster in file's FAT chain
 20066                                  ;
 20067                                  ;	Entry	AX = current cluster number
 20068                                  ;		ES = segment of FAT buffer
 20069                                  ;		Entry should be in FAT buffer
 20070                                  ;
 20071                                  ;	Exit	AX = next cluster number
 20072                                  ;		CY set if error
 20073                                  ;
 20074                                  ;	Uses	BX
 20075                                  
 20076                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20077                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1EF2h
 20078                                  GetDOSFATEntry:
 20079                                  	sub	ax,[entInBuf]		; calc entry # in buffer
 20080                                  	jc	short gdf_ret 		; CY already set for error
 20081                                  
 20082                                  	mov	bx,ax
 20083                                  
 20084                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 20085                                  	cmp	byte [MDBPB+3Dh],0
 20086                                  	jnz	short gdf_12		; go do 12
 20087                                  
 20088                                  	shl	bx,1			; offset = entry * 2
 20089                                  	add	bx,[pbufDOSFAT]
 20090                                  	mov	ax,[es:bx]
 20091                                  	; 08/06/2023
 20092                                  	; cf = 0
 20093                                  ;gdf_success:
 20094                                  	;clc				; success
 20095                                  gdf_ret:
 20096                                  	retn
 20097                                  
 20098                                  gdf_12:
 20099                                  	shr	bx,1
 20100                                  	add	bx,ax			; offset to entry = entry * 1.5
 20101                                  	add	bx,[pbufDOSFAT]
 20102                                  
 20103                                  ;	ES:BX points to the word containing the desired 12 bit FAT entry.
 20104                                  ;	For odd entries, the upper 12 bits are valid, for even entries
 20105                                  ;	the low 12 bits are valid.  odd: OOOx  even: xEEE
 20106                                  
 20107                                  	test	al,1			; is current entry odd?
 20108                                  
 20109                                  	mov	ax,[es:bx]		; word with FAT entry
 20110                                  	jnz	short gdf_odd
 20111                                  
 20112                                  	and	ax,0FFFh		; keep low 12 bits for even
 20113                                  	jmp	short gdf_testEOF
 20114                                  
 20115                                  gdf_odd:
 20116                                  	mov	bx,cx			; (save cx in bx)
 20117                                  	mov	cl,4
 20118                                  	shr	ax,cl			; upper 12 bits for odd
 20119                                  	mov	cx,bx			; (restore cx)
 20120                                  
 20121                                  gdf_testEOF:
 20122                                  	cmp	ax,0FF0h		; valid entry?
 20123                                  	;jb	short gdf_success
 20124                                  	cmc	; cf = 1 <--> cf = 0
 20125                                  	jnc	short gdf_ret	
 20126                                  
 20127                                  	or	ah,0F0h			; caller expects 16 bit special values
 20128                                  	;jmp	short gdf_success
 20129                                  	; cf = 0
 20130                                  	retn
 20131                                  
 20132                                  ; --------------------------------------------------------------------------- 
 20133                                  
 20134                                  ;***	GetMDFATEntry - returns requested MD FAT entry
 20135                                  ;
 20136                                  ;	Entry	AX = current DOS cluster number
 20137                                  ;		ES = segment of FAT buffer
 20138                                  ;		Entry should be in FAT buffer
 20139                                  ;
 20140                                  ;	Exit	BX:CX = corresponding MD FAT entry
 20141                                  ;		CY set if error
 20142                                  ;
 20143                                  ;	Uses	None
 20144                                  
 20145                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 20146                                  GetMDFATEntry:
 20147                                  	mov	bx,ax
 20148                                  	sub	bx,[entInBuf]		; calc entry # in buffer
 20149                                  	jc	short gmf_ret 		; CY already set for error return
 20150                                  
 20151                                  	shl	bx,1
 20152                                  	shl	bx,1			; * 4 bytes per MDFAT entry
 20153                                  
 20154                                  	add	bx,[pbufMDFAT]
 20155                                  	mov	cx,[es:bx]
 20156                                  	mov	bx,[es:bx+2]
 20157                                  
 20158                                  	clc
 20159                                  gmf_ret:
 20160                                  	retn
 20161                                  
 20162                                  ; --------------------------------------------------------------------------- 
 20163                                  
 20164                                  ;***	CheckFATBuffers - check that target FAT entry is in FAT buffers.  If
 20165                                  ;			  not, fill the buffers starting with the requested
 20166                                  ;			  entry.
 20167                                  ;
 20168                                  ;	ENTRY	AX = FAT entry #
 20169                                  ;		ES = segment of FAT buffers
 20170                                  ;
 20171                                  ;	EXIT	FAT buffers contain target entry, or CY set if error
 20172                                  ;		entInBuf updated
 20173                                  ;
 20174                                  ;	USED	BX
 20175                                  
 20176                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20177                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1F4Bh
 20178                                  
 20179                                  CheckFATBuffers:
 20180                                  	mov	bx,ax
 20181                                  	sub	bx,[entInBuf]
 20182                                  	jb	short cfb_load_fat
 20183                                  
 20184                                  	sub	bx,[cFATEntries]
 20185                                  	jae	short cfb_load_fat ; jnb
 20186                                  
 20187                                  	clc
 20188                                  	retn
 20189                                  
 20190                                  	; Desired entry isn't in the FAT buffers, reload the buffers to
 20191                                  	; include it
 20192                                  
 20193                                  cfb_load_fat:
 20194                                  	push	ax
 20195                                  	push	cx
 20196                                  	push	dx
 20197                                  
 20198                                  	; Start with the DOS FAT buffer
 20199                                  
 20200                                  	xor	cx,cx			; zero high offset to FAT file position
 20201                                  
 20202                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 20203                                  	cmp	byte [MDBPB+3Dh],0
 20204                                  	jnz	short cfb_12		; go do 12
 20205                                  
 20206                                  	mov	[entInBuf],ax		; this entry is first
 20207                                  
 20208                                  	shl	ax,1			; 2 bytes per cluster #
 20209                                  	rcl	cx,1			; cx:ax = offset to FAT entry
 20210                                  
 20211                                  	jmp	short cfb_common
 20212                                  
 20213                                  cfb_12:
 20214                                  	;and	al,not 1 ; 0FEh		; start with even # entry
 20215                                  	and	al,~1
 20216                                  	mov	[entInBuf],ax
 20217                                  
 20218                                  	mov	bx,ax
 20219                                  	shr	bx,1
 20220                                  	add	ax,bx			; ax = offset to FAT entry
 20221                                  					;      (entry # * 1.5)
 20222                                  cfb_common:
 20223                                  	mov	bx,ax			; cx:bx = offset to FAT entry
 20224                                  
 20225                                  	;mov	ax,[MDBPB.csecMDReserved] ; # magicDrv reserved sectors
 20226                                  	mov	ax,[MDBPB+27h]
 20227                                  	;add	ax,[MDBPB.dos_bpb.csecReserved]
 20228                                  	add	ax,[MDBPB+0Eh]
 20229                                  
 20230                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 20231                                  	mul	word [MDBPB+0Bh]	; DX:AX = DOS FAT file origin
 20232                                  	add	ax,bx
 20233                                  	adc	dx,cx			; DX:AX = file offset to read from
 20234                                  
 20235                                  	mov	cx,[cFATEntries]	; size to read
 20236                                  	shl	cx,1
 20237                                  	mov	bx,[pbufDOSFAT]		; es:bx = location to read
 20238                                  
 20239                                  	call	ReadCVFile
 20240                                  	jc	short cfb_error
 20241                                  
 20242                                  	; Now read the corresponding MagicDrv FAT entries
 20243                                  
 20244                                  	;mov	ax,[MDBPB.secMDFATStart]
 20245                                  	mov	ax,[MDBPB+24h]
 20246                                  	inc	ax
 20247                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 20248                                  	mul	word [MDBPB+0Bh]	; DX:AX = MDFAT file offset
 20249                                  
 20250                                  	mov	bx,[entInBuf]
 20251                                  	xor	cx,cx			; CX:BX = 32 bit cluster #
 20252                                  	;add	bx,[MDBPB.cluFirstData]
 20253                                  	add	bx,[MDBPB+2Dh]
 20254                                  	adc	cx,cx			; CX:BX = MDFAT entry #
 20255                                  
 20256                                  	shl	bx,1
 20257                                  	rcl	cx,1
 20258                                  	shl	bx,1
 20259                                  	rcl	cx,1			; * 4 bytes per MDFAT entry
 20260                                  
 20261                                  	add	ax,bx
 20262                                  	adc	dx,cx			; DX:AX = file offset of MDFAT entry
 20263                                  
 20264                                  	mov	cx,[cFATEntries]
 20265                                  	shl	cx,1
 20266                                  	shl	cx,1			; size to read
 20267                                  	mov	bx,[pbufMDFAT]		; es:bx = location to read into
 20268                                  
 20269                                  	call	ReadCVFile
 20270                                  	;jnc	short cfb_ret ; cf = 0 ; 08/06/2023
 20271                                  	; 08/06/2023
 20272                                  	; cf = 1
 20273                                  cfb_error:
 20274                                  	;stc
 20275                                  cfb_ret:
 20276                                  	pop	dx
 20277                                  	pop	cx
 20278                                  	pop	ax
 20279                                  	retn
 20280                                  
 20281                                  ; --------------------------------------------------------------------------- 
 20282                                  
 20283                                  ;***	ReadCVFile - read from the Compressed Volume File
 20284                                  ;
 20285                                  ;	Entry	DX:AX file offset, ES:BX buffer location, CX length in bytes
 20286                                  ;
 20287                                  ;	Exit	CY set if error, else data read
 20288                                  ;
 20289                                  ;	Uses	AX, BX, CX, DX
 20290                                  
 20291                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 20292                                  ReadCVFile:
 20293                                  	push	bx			; save buffer loc
 20294                                  	push	cx			; save read length
 20295                                  
 20296                                  	mov	cx,dx
 20297                                  	mov	dx,ax			; cx:dx = file offset of fat entry
 20298                                  	;mov	ax,(LSEEK shl 8) or 0
 20299                                  	mov	ax,4200h
 20300                                  	mov	bx,[fhCVF]
 20301                                  	int	21h
 20302                                  	jc	short rcf_ret 		; CY set for error return
 20303                                  
 20304                                  	;mov	ah,READ
 20305                                  	mov	ah,3Fh
 20306                                  	pop	cx			; read length
 20307                                  	pop	dx			; buffer loc offset
 20308                                  	push	ds
 20309                                  	push	es
 20310                                  	pop	ds			; buffer loc segment
 20311                                  	int	21h
 20312                                  	pop	ds
 20313                                  	jc	short rcf_ret 		; CY set for error return
 20314                                  
 20315                                  	cmp	ax,cx			; read it all?
 20316                                  	;je	short rcf_ret 		; yes, CY clear
 20317                                  	; 08/06/2023	
 20318                                  	; ax < cx
 20319                                  	;stc				; end-of-file?
 20320                                  rcf_ret:
 20321                                  	retn
 20322                                  
 20323                                  %endif
 20324                                  
 20325                                  ;============================================================================
 20326                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 20327                                  ;============================================================================
 20328                                  ; 09/10/2018 - Retro DOS v3.0
 20329                                  
 20330                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1195h
 20331                                  
 20332                                  ; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20333                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1A4Ah
 20334                                  
 20335                                  ; =============== S U B	R O U T	I N E =======================================
 20336                                  
 20337                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20338                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1FF4h
 20339                                  
 20340                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20341                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1DCCh
 20342                                  PAUSE:
 20343 00001CFE BA[1190]                	mov	dx,PAUSEMES_PTR ; 19/02/2023
 20344 00001D01 E8D936                  	call	std_printf
 20345 00001D04 E85BE9                  	call	GETKEYSTROKE
 20346                                  	;call	CRLF2
 20347                                  	;retn
 20348                                  	; 19/02/2023
 20349 00001D07 E9360C                  	jmp	CRLF2
 20350                                  
 20351                                  ; ---------------------------------------------------------------------------
 20352                                  
 20353                                  ;****************************************************************
 20354                                  ;*
 20355                                  ;* ROUTINE:	DEL/ERASE - erase file(s)
 20356                                  ;*
 20357                                  ;* FUNCTION:	PARSE command line for file or path name and /P
 20358                                  ;*		and invoke PATHCRUNCH. If an error occurs, set
 20359                                  ;*		up an error message and transfer control to CERROR.
 20360                                  ;*		Otherwise, transfer control to NOTEST2 if /P not
 20361                                  ;*		entered or SLASHP_ERASE if /P entered.
 20362                                  ;*
 20363                                  ;* INPUT:	command line at offset 81H
 20364                                  ;*
 20365                                  ;* OUTPUT:	if no error:
 20366                                  ;*		FCB at 5ch set up with filename(s) entered
 20367                                  ;*		Current directory set to entered directory
 20368                                  ;*
 20369                                  ;****************************************************************
 20370                                  
 20371                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20372                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A57h
 20373                                  
 20374                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20375                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2001h
 20376                                  
 20377                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20378                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1DD9h
 20379                                  ERASE:
 20380                                  	; MSDOS 6.0
 20381                                  
 20382                                  	;assume	ds:trangroup,es:trangroup
 20383                                  
 20384 00001D0A BE8100                  	mov	si,81h		;AC000; get command line
 20385 00001D0D C706[E89B]0000          	mov	word [COMSW],0 	;AN000; clear switch indicator
 20386 00001D13 BF[0C96]                	mov	di,PARSE_ERASE
 20387                                  				;AN000; Get address of PARSE_ERASE
 20388 00001D16 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20389                                  erase_scan:
 20390 00001D18 31D2                    	xor	dx,dx		;AN000;
 20391 00001D1A E80508                  	call	Parse_With_Msg	;AC018; call parser
 20392                                  	
 20393                                  	;cmp	ax,-1  ; 0FFFFh
 20394                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 20395                                  	;je	short good_line	;AN000; yes - done parsing
 20396                                  	;;cmp	ax,0
 20397                                  	;;cmp	ax,RESULT_NO_ERROR ; 0
 20398                                  	;and	ax,ax		;AC000; did we have an error?
 20399                                  	;jnz	short errj2	;AC000; yes exit
 20400                                  	; 10/06/2023
 20401 00001D1D 40                      	inc	ax  ; cmp ax,-1
 20402 00001D1E 743C                    	jz	short good_line ; 0FFFFh -> 0
 20403 00001D20 48                      	dec	ax  ; cmp ax,0	
 20404 00001D21 7566                    	jnz	short errj2  ; 1 -> 0
 20405                                  	; ax = 0
 20406                                  
 20407 00001D23 813E[CBA5][7F95]        	cmp	word [PARSE1_SYN],SLASH_P_SYN ; "/P"
 20408                                  				;AN000; was /P entered?
 20409 00001D29 741C                    	je	short set_erase_prompt
 20410                                  				;AN000; yes - go set prompt
 20411                                  ;
 20412                                  ; Must be filespec since no other matches occurred. move filename to srcbuf
 20413                                  ;
 20414 00001D2B 56                      	push	si		;AC000; save position in line
 20415 00001D2C C536[CDA5]              	lds	si,[PARSE1_ADDR]
 20416                                  				;AC000; get address of filespec
 20417                                  	;cmp	byte [si+1],colon_char
 20418 00001D30 807C013A                	cmp	byte [si+1],':'	;AC000; drive specified?
 20419 00001D34 750B                    	jne	short erase_drive_ok
 20420                                  				;AC000; no - continue
 20421                                  	;cmp	byte [si+2],END_OF_LINE_OUT	
 20422 00001D36 807C0200                	cmp	byte [si+2],0	;AC000; was only drive entered?
 20423 00001D3A 7505                    	jne	short erase_drive_ok
 20424                                  				;AC000; no - continue
 20425 00001D3C B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2 
 20426                                  				;AN022; get message number in control block
 20427 00001D3F EB3D                    	jmp	short extend_setup
 20428                                  				;AC000; exit
 20429                                  erase_drive_ok:
 20430 00001D41 E85B13                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 20431 00001D44 5E                      	pop	si		;AC000; get position back
 20432 00001D45 EBD1                    	jmp	short erase_scan
 20433                                  				;AN000; continue parsing
 20434                                  set_erase_prompt:
 20435 00001D47 833E[E89B]00            	cmp	word [COMSW],0 	;AN018; was /P already entered?
 20436 00001D4C 7408                    	jz	short ok_to_set_erase_prompt
 20437                                  				;AN018; no go set switch
 20438                                  	;mov	ax,1
 20439 00001D4E B80100                  	mov	ax,MoreArgs_Ptr 
 20440                                  				;AN018; set up too many arguments
 20441 00001D51 E8DD07                  	call	setup_parse_error_msg
 20442                                  				;AN018; set up an error message
 20443 00001D54 EB33                    	jmp	short errj2	;AN018; exit
 20444                                  
 20445                                  ok_to_set_erase_prompt: 	;AN018;
 20446 00001D56 FF06[E89B]              	inc	word [COMSW]	;AN000; indicate /p specified
 20447 00001D5A EBBC                    	jmp	short erase_scan
 20448                                  				;AN000; continue parsing
 20449                                  good_line:			;G  We know line is good
 20450 00001D5C E88A0C                  	call	PathCrunch
 20451 00001D5F 730D                    	jnc	short checkdr
 20452 00001D61 A1[119F]                	mov	ax,[Msg_Numb]	;AN022; get message number
 20453                                  	;cmp	ax,0		;AN022; was message flag set?
 20454 00001D64 09C0                    	or	ax,ax
 20455 00001D66 7516                    	jnz	short extend_setup
 20456                                  				;AN022; yes - print out message
 20457                                  	;cmp	byte [DestIsDir],0
 20458 00001D68 3806[969D]              	cmp	[DestIsDir],al 	; No CHDIRs worked
 20459 00001D6C 750D                    	jnz	short badpath_err
 20460                                  				;AC022; see if they should have
 20461                                  checkdr:
 20462 00001D6E 833E[E89B]00            	cmp	word [COMSW],0 	;AN000; was /p specified
 20463 00001D73 7403                    	jz	short notest2j	;AN000; no - go to notest2
 20464 00001D75 E9BE1B                  	jmp	slashp_erase	;AN000; yes - go to slashp_erase
 20465                                  notest2j:
 20466 00001D78 E9561B                  	jmp	notest2
 20467                                  
 20468                                  badpath_err:			;AN022; "Path not found" message
 20469 00001D7B B80300                  	mov	ax,ERROR_PATH_NOT_FOUND ; 3
 20470                                  				;AN022; set up error number
 20471                                  extend_setup:			;AN022;
 20472                                  	;mov	byte [msg_disp_class],1
 20473 00001D7E C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class
 20474                                  				;AN022; set up extended error msg class
 20475 00001D83 BA[448F]                	mov	dx,extend_buf_ptr
 20476                                  				;AC022; get extended message pointer
 20477 00001D86 A3[448F]                	mov	[extend_buf_ptr],ax
 20478                                  				;AN022; get message number in control block
 20479                                  errj2:				;AC022; exit jump
 20480 00001D89 E9610F                  	jmp	cerror		;AN022;
 20481                                  
 20482                                  ; ---------------------------------------------------------------------------
 20483                                  
 20484                                  ; ****************************************************************
 20485                                  ; *
 20486                                  ; * ROUTINE:	 CRENAME - rename file(s)
 20487                                  ; *
 20488                                  ; * FUNCTION:	 PARSE command line for one full filespec and one
 20489                                  ; *		 filename. Invoke PATHCRUNCH on the full filespec.
 20490                                  ; *		 Make sure the second filespec only contains a
 20491                                  ; *		 filename. If both openands are valid, attempt
 20492                                  ; *		 to rename the file.
 20493                                  ; *
 20494                                  ; * INPUT:	 command line at offset 81H
 20495                                  ; *
 20496                                  ; * OUTPUT:	 none
 20497                                  ; *
 20498                                  ; ****************************************************************
 20499                                  
 20500                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20501                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20502                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20503                                  CRENAME:
 20504                                  	; MSDOS 6.0
 20505                                  	;assume	ds:trangroup,es:trangroup
 20506                                  
 20507 00001D8C BE8100                  	mov	si,81h		;AC000; Point to command line
 20508 00001D8F BF[8E96]                	mov	di,PARSE_RENAME
 20509                                  				;AN000; Get address of PARSE_RENAME
 20510 00001D92 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20511 00001D94 31D2                    	xor	dx,dx		;AN000;
 20512 00001D96 E88907                  	call	Parse_With_Msg	;AC018; call parser
 20513                                  	;cmp	ax,RESULT_NO_ERROR ; 0
 20514 00001D99 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 20515                                  ;	jz	short crename_no_parse_error
 20516                                  				;AC000; no - continue
 20517 00001D9B 752C                    	jnz	short crename_parse_error
 20518                                  				;AC000; Yes, fail. (need long jump)
 20519                                  ;
 20520                                  ;  Get first file name returned from parse into our buffer
 20521                                  ;
 20522                                  crename_no_parse_error:
 20523 00001D9D 56                      	push	si		;AN000; save position in line
 20524 00001D9E C536[CDA5]              	lds	si,[PARSE1_ADDR]
 20525                                  				;AN000; get address of filespec
 20526 00001DA2 E8FA12                  	call    Move_To_SrcBuf	;AN000; move to srcbuf
 20527 00001DA5 5E                      	pop	si		;AN000; restore position in line
 20528                                  
 20529 00001DA6 31D2                    	xor	dx,dx		;AN000; clear dx
 20530 00001DA8 E87707                  	call	Parse_With_Msg	;AC018; call parser
 20531                                  	;cmp	ax,RESULT_NO_ERROR
 20532 00001DAB 21C0                    	and	ax,ax ; 0 ?	;AN000; did we have an error?
 20533 00001DAD 751A                    	jnz	short crename_parse_error
 20534                                  				;AN000; Yes, fail.
 20535                                  ;
 20536                                  ;  Check the second file name for drive letter colon
 20537                                  ;
 20538 00001DAF 56                      	push	si		;AN000; save position in line
 20539 00001DB0 C536[CDA5]              	lds	si,[PARSE1_ADDR]
 20540                                  				;AC000; get address of path
 20541                                  	;mov	al,':'		;AC000;
 20542                                  	;cmp	[si+1],al	;AC000; Does the 2nd parm have a drive spec?
 20543 00001DB4 807C013A                	cmp	byte [si+1],':'
 20544 00001DB8 7511                    	jnz	short ren_no_drive
 20545                                  				;AN000; Yes, error
 20546                                  	;mov	byte [msg_disp_class],2
 20547 00001DBA C606[428F]02            	mov	byte [msg_disp_class],parse_msg_class
 20548                                  				;AN000; set up parse error msg class
 20549 00001DBF BA[448F]                	mov	dx,extend_buf_ptr
 20550                                  				;AC000; get extended message pointer
 20551                                  	;mov	word [extend_buf_ptr],0Ah
 20552 00001DC2 C706[448F]0A00          	mov	word [extend_buf_ptr],BadParm_Ptr
 20553                                  				;AN000; get "Invalid parameter" message number
 20554 00001DC8 5E                      	pop	si		;AN000;
 20555                                  crename_parse_error:		;AC022;
 20556 00001DC9 EB64                    	jmp	short errj	;AC000;
 20557                                  
 20558                                  ;  Get second file name returned from parse into the fCB. Save
 20559                                  ;  character after file name so we can later check to make sure it
 20560                                  ;  isn't a path character.
 20561                                  
 20562                                  ren_no_drive:
 20563 00001DCB BF6C00                  	mov	di,FCB+10h ; 6Ch
 20564                                  				;AC000; set up to parse second file name
 20565                                  	;mov	ax,(Parse_File_Descriptor SHL 8) OR 01H ;AC000;
 20566 00001DCE B80129                  	mov	ax,2901h
 20567 00001DD1 CD21                    	int	21h		;AC000; do the function
 20568 00001DD3 AC                      	lodsb			;AC000; Load char after filename
 20569 00001DD4 A2[8E9D]                	mov	[One_Char_Val],al
 20570                                  				;AN000; save char after filename
 20571 00001DD7 5E                      	pop	si		;AN000; get line position back
 20572                                  ;
 20573                                  ; We have source and target. See if any args beyond.
 20574                                  ;
 20575 00001DD8 BF[8E96]                	mov	di,PARSE_RENAME
 20576                                  				;AC000; get address of parse_rename
 20577 00001DDB E82E07                  	call	parse_check_eol ;AC000; are we at end of line?
 20578 00001DDE 75E9                    	jnz	short crename_parse_error
 20579                                  				;AN000; no, fail.
 20580 00001DE0 E8060C                  	call	PathCrunch
 20581 00001DE3 BA[558F]                	mov	dx,BADCPMES_PTR
 20582 00001DE6 74A1                    	jz	short errj2	; If 1st parm a dir, print error msg
 20583 00001DE8 730F                    	jnc	short notest3
 20584 00001DEA A1[119F]                	mov	ax,[Msg_Numb]	;AN022; get message number
 20585                                  	;cmp	ax,0		;AN022; was message flag set?
 20586 00001DED 21C0                    	and	ax,ax ; 0 ?
 20587 00001DEF 758D                    	jnz	short extend_setup
 20588                                  				;AN022; yes - print out message
 20589                                  	;cmp	byte [DestIsDir],0
 20590 00001DF1 3806[969D]              	cmp	[DestIsDir],al	; No CHDIRs worked
 20591 00001DF5 7402                    	jz	short notest3 	; see if they should have
 20592 00001DF7 EB82                    	Jmp	badpath_err	;AC022; set up error
 20593                                  notest3:
 20594 00001DF9 A0[8E9D]                	mov	al,[One_Char_Val]
 20595                                  				;AN000; move char into AX
 20596 00001DFC BA[768F]                	mov	dx,INORNOT_PTR 
 20597                                  				; Load invalid fname error ptr
 20598 00001DFF E8D90B                  	call	pathchrcmp	; Is the char in al a path sep?
 20599 00001E02 742B                    	jz	short errj	; Yes, error - 2nd arg must be
 20600                                  				;  filename only.
 20601                                  	;mov	ah,FCB_Rename
 20602 00001E04 B417                    	mov	ah,17h
 20603 00001E06 BA5C00                  	mov	dx,FCB ; 5Ch
 20604 00001E09 CD21                    	int	21h
 20605 00001E0B 3CFF                    	cmp	al,0FFh		; Did an error occur??
 20606 00001E0D 7506                    	jne	short renameok
 20607                                  
 20608 00001E0F E83702                  	call	get_ext_error_number
 20609                                  				;AN022; get extended error
 20610 00001E12 50                      	push	ax		;AC022; Save results
 20611 00001E13 B0FF                    	mov	al,0FFh		; Restore original error state
 20612                                  renameok:
 20613 00001E15 50                      	push	ax
 20614 00001E16 E8DE09                  	call	RestUDir
 20615 00001E19 58                      	pop	ax
 20616 00001E1A FEC0                    	inc	al
 20617                                  	;;retnz
 20618                                  	;jz	short rn1
 20619                                  	;retn	
 20620 00001E1C 7514                    	jnz	short ret56
 20621                                  rn1:
 20622 00001E1E 58                      	pop	ax		;AC022; get the error number back
 20623 00001E1F 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2 
 20624                                  				;AN022; error file not found?
 20625 00001E22 7408                    	je	short use_renerr
 20626                                  				;AN022; yes - use generic error message
 20627 00001E24 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5 
 20628                                  				;AN022; error file not found?
 20629 00001E27 7403                    	je	short use_renerr
 20630                                  				;AN022; yes - use generic error message
 20631 00001E29 E952FF                  	jmp	extend_setup	;AN022; need long jump - use extended error
 20632                                  
 20633                                  use_renerr:
 20634 00001E2C BA[528F]                	mov	dx,RENERR_PTR	;AC022;
 20635                                  errj:
 20636 00001E2F E9BB0E                  	jmp	cerror
 20637                                  ret56:
 20638                                  ;typefil_ret:	; 20/02/2023 ; 17/04/2023
 20639 00001E32 C3                      	retn
 20640                                  
 20641                                  ; ---------------------------------------------------------------------------
 20642                                  
 20643                                  ;****************************************************************
 20644                                  ;*
 20645                                  ;* ROUTINE:	TYPEFIL - Display the contents of a file to the
 20646                                  ;*		standard output device
 20647                                  ;*
 20648                                  ;* SYNTAX:	TYPE filespec
 20649                                  ;*
 20650                                  ;* FUNCTION:	If a valid filespec is found, read the file until
 20651                                  ;*		1Ah and display the contents to STDOUT.
 20652                                  ;*
 20653                                  ;* INPUT:	command line at offset 81H
 20654                                  ;*
 20655                                  ;* OUTPUT:	none
 20656                                  ;*
 20657                                  ;****************************************************************
 20658                                  
 20659                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20660                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20661                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20662                                  TYPEFIL:
 20663                                  	; MSDOS 6.0	
 20664                                  	;assume	ds:trangroup,es:trangroup
 20665                                  
 20666 00001E33 BE8100                  	mov	si,81h
 20667 00001E36 BF[FA95]                	mov	di,PARSE_MRDIR
 20668                                  				;AN000; Get address of PARSE_MRDIR
 20669 00001E39 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20670 00001E3B 31D2                    	xor	dx,dx		;AN000;
 20671 00001E3D E8E206                  	call	Parse_With_Msg	;AC018; call parser
 20672                                  	;cmp	ax,RESULT_NO_ERROR
 20673 00001E40 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 20674 00001E42 751E                    	jnz	short typefil_parse_error
 20675                                  				;AN000; yes - issue error message
 20676                                  
 20677 00001E44 56                      	push	si		;AC000; save position in line
 20678 00001E45 C536[CDA5]              	lds	si,[PARSE1_ADDR]
 20679                                  				;AC000; get address of filespec
 20680 00001E49 E85312                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 20681 00001E4C 5E                      	pop	si		;AC000; get position back
 20682 00001E4D BF[FA95]                	mov	di,PARSE_MRDIR
 20683                                  				;AC000; get address of parse_mrdir
 20684 00001E50 E8B906                  	call	parse_check_eol ;AC000; are we at end of line?
 20685                                  	;jz	short gottarg 	;AC000; yes - continue
 20686                                  	; 20/02/2023
 20687                                  ;typefil_parse_error:		;AN000; no - set up error message and exit
 20688                                  	;jmp	cerror
 20689 00001E53 750D                    	jnz	short typefil_parse_error
 20690                                  gottarg:
 20691 00001E55 E88E10                  	call	SETPATH
 20692 00001E58 F606[9A9D]02            	test	byte [DestInfo],00000010b ; 2
 20693                                  				; Does the filespec contain wildcards
 20694 00001E5D 7406                    	jz	short nowilds 	; No, continue processing
 20695 00001E5F BA[768F]                	mov	dx,INORNOT_PTR	; Yes, report error
 20696                                  	; 20/02/2023
 20697                                  typefil_parse_error:
 20698 00001E62 E9880E                  	jmp	cerror
 20699                                  nowilds:
 20700                                  	;mov	ax,ExtOpen SHL 8 ;AC000; open the file
 20701 00001E65 B8006C                  	mov	ax,6C00h
 20702                                  	;mov	bx,read_open_mode ; 0
 20703                                  				;AN000; get open mode for TYPE
 20704 00001E68 31C9                    	xor	cx,cx		;AN000; no special files
 20705 00001E6A 89CB                    	mov	bx,cx ; 20/02/2023
 20706 00001E6C BA0101                  	mov	dx,101h
 20707                                  	;mov	dx,read_open_flag ; 101h
 20708                                  				;AN000; set up open flags
 20709 00001E6F BE[FE9D]                	mov	si,SrcBuf	;AN030; get file name
 20710                                  	;int	21h
 20711                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20712 00001E72 E845E7                  	call	int_21h_indirect
 20713 00001E75 7313                    	jnc	short typecont	; If open worked, continue. Otherwise load
 20714                                  
 20715                                  typerr: 			;AN022;
 20716 00001E77 0E                      	push	cs		;AN022; make sure we have local segment
 20717 00001E78 1F                      	pop	ds		;AN022;
 20718 00001E79 E8BD01                  	call	Set_Ext_Error_Msg ;AN022;
 20719 00001E7C C706[7F9D][FE9D]        	mov	word [string_ptr_2],SrcBuf 
 20720                                  				;AC022; get address of failed string
 20721                                  	;mov	byte [extend_buf_sub],1
 20722 00001E82 C606[468F]01            	mov	byte [extend_buf_sub],one_subst
 20723                                  				;AC022; put number of subst in control block
 20724 00001E87 E9630E                  	jmp	cerror		;AC022; exit
 20725                                  
 20726                                  typecont:
 20727 00001E8A 89C3                    	mov	bx,ax		;AC000; get Handle
 20728                                  ;M043
 20729                                  ; We should do the LSEEK for filesize only if this handle belongs to a file
 20730                                  ;and not if it belongs to a device. If device, set TypeFilSiz+2 to -1 to
 20731                                  ;indicate it is a device.
 20732                                  ;
 20733                                  	;mov	ax,(IOCTL shl 8) or 0
 20734 00001E8C B80044                  	mov	ax,4400h
 20735                                  	;int	21h
 20736                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20737 00001E8F E828E7                  	call	int_21h_indirect
 20738                                  
 20739 00001E92 F6C280                  	test	dl,80h		;is it a device?
 20740 00001E95 7408                    	jz	short not_device
 20741                                  				;no, a file
 20742                                  
 20743                                  	;mov	word [TypeFilSiz+2],-1 ; 0FFFFh
 20744                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20745 00001E97 C706[7D9D]FFFF          	mov	word [File_Size_High],-1 ; 0FFFFh
 20746                                  				;indicate it is a device
 20747 00001E9D EB19                    	jmp	short dotype
 20748                                  not_device:
 20749                                  ;SR;
 20750                                  ; Find the filesize by seeking to the end and then reset file pointer to
 20751                                  ;start of file
 20752                                  
 20753                                  	;mov	ax,(LSEEK shl 8) or 2
 20754 00001E9F B80242                  	mov	ax,4202h
 20755 00001EA2 31D2                    	xor	dx,dx
 20756 00001EA4 89D1                    	mov	cx,dx		;seek  to end of file
 20757                                  	;int	21h
 20758                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20759 00001EA6 E811E7                  	call	int_21h_indirect
 20760                                  
 20761                                  	;mov	[TypeFilSiz],ax
 20762                                  	;mov	[TypeFilSiz+2],dx ;store filesize
 20763                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20764 00001EA9 A3[7B9D]                	mov	[File_Size_Low],ax
 20765 00001EAC 8916[7D9D]              	mov	[File_Size_High],dx
 20766                                  
 20767                                  	;mov	ax,(LSEEK shl 8) or 0
 20768 00001EB0 B80042                  	mov	ax,4200h
 20769 00001EB3 31D2                    	xor	dx,dx
 20770                                  	;int	21h	        ;reset file pointer to start
 20771                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20772 00001EB5 E802E7                  	call	int_21h_indirect
 20773                                  dotype:				;M043
 20774 00001EB8 C606[7BA4]00            	mov	byte [zflag],0 	; Reset ^Z flag
 20775 00001EBD 8E1E[D39B]              	mov	ds,[TPA]
 20776 00001EC1 31D2                    	xor	dx,dx
 20777                                  	;ASSUME	DS:NOTHING
 20778                                  typelp:
 20779 00001EC3 2E803E[7BA4]00          	cmp	byte [cs:zflag],0
 20780                                  				;AC050; Is the ^Z flag set?
 20781                                  	;retnz			; Yes, return
 20782                                  	; 17/04/2023
 20783 00001EC9 7401                    	jz	short tf1
 20784 00001ECB C3                      	retn
 20785                                  tf1:
 20786 00001ECC 2E8B0E[F29B]            	mov	cx,[cs:BYTCNT]	;AC056; No, continue
 20787                                  
 20788                                  ;Update the filesize left to read
 20789                                  
 20790                                  	;cmp	word [cs:TypeFilSiz+2],-1
 20791                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20792 00001ED1 2E833E[7D9D]FF          	cmp	word [cs:File_Size_High],-1 ; 0FFFFh
 20793                                  				;is it a device? M043
 20794 00001ED7 7431                    	je	short typ_read	;yes, just read from it; M043
 20795                                  
 20796                                  	;cmp	word [cs:TypeFilSiz+2],0
 20797                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20798 00001ED9 2E833E[7D9D]00          	cmp	word [cs:File_Size_High],0
 20799                                  				;more than 64K left?
 20800 00001EDF 740D                    	jz	short lt64k	;no, do word subtraction
 20801                                  	;sub	[cs:TypeFilSiz],cx
 20802                                  	;sbb	word [cs:TypeFilSiz+2],0
 20803                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20804 00001EE1 2E290E[7B9D]            	sub	[cs:File_Size_Low],cx
 20805 00001EE6 2E831E[7D9D]00          	sbb	word [cs:File_Size_High],0
 20806                                  				;update filesize
 20807 00001EEC EB1C                          	jmp	short typ_read	;do the read
 20808                                  lt64k:
 20809                                  	;cmp	cx,[cs:TypeFilSiz]
 20810                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20811 00001EEE 2E3B0E[7B9D]            	cmp	cx,[cs:File_Size_Low]
 20812                                  				;readsize <= buffer?
 20813 00001EF3 7610                    	jbe	short gtbuf	; yes, just update readsize
 20814                                  
 20815                                  ;Buffer size is larger than bytes to read
 20816                                  
 20817                                  	;mov	cx,[cs:TypeFilSiz]
 20818                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20819 00001EF5 2E8B0E[7B9D]            	mov	cx,[cs:File_Size_Low]
 20820 00001EFA E364                    	jcxz	typelp_ret
 20821                                  	;mov	word [cs:TypeFilSiz],0
 20822                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20823 00001EFC 2EC706[7B9D]0000        	mov	word [cs:File_Size_Low],0
 20824 00001F03 EB05                    	jmp	short typ_read
 20825                                  gtbuf:
 20826                                  	;sub	[cs:TypeFilSiz],cx
 20827                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20828 00001F05 2E290E[7B9D]            	sub	 [cs:File_Size_Low],cx
 20829                                  				;update filesize remaining
 20830                                  typ_read:
 20831                                  	;mov	ah,read
 20832 00001F0A B43F                    	mov	ah,3Fh
 20833                                  	;int	21h
 20834                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20835 00001F0C E8ABE6                  	call	int_21h_indirect
 20836 00001F0F 7303                    	jnc	short tf2	;M043
 20837 00001F11 E963FF                  	jmp	typerr		;M043
 20838                                  tf2:				;M043
 20839                                  ;M043;	jc	typerr		;AN022; Exit if error
 20840                                  
 20841 00001F14 89C1                    	mov	cx,ax
 20842 00001F16 E348                    	jcxz	typelp_ret	;AC000; exit if nothing read
 20843 00001F18 1E                      	push	ds
 20844 00001F19 07                      	pop	es		; Check to see if a ^Z was read.
 20845                                  	;assume es:nothing
 20846 00001F1A 31FF                    	xor	di,di
 20847 00001F1C 50                      	push	ax
 20848 00001F1D B01A                    	mov	al,1Ah
 20849 00001F1F F2AE                    	repnz	scasb
 20850 00001F21 58                      	pop	ax
 20851 00001F22 91                      	xchg	ax,cx
 20852                                  	;cmp	ax,0
 20853 00001F23 21C0                    	and	ax,ax
 20854 00001F25 7506                    	jnz	short foundz	; Yes, handle it
 20855 00001F27 807DFF1A                	cmp	byte [di-1],1Ah	; No, double check
 20856 00001F2B 750A                    	jnz	short typecont2	; No ^Z, continue
 20857                                  foundz:
 20858 00001F2D 29C1                    	sub	cx,ax		; Otherwise change cx so that only those
 20859 00001F2F 49                      	dec	cx		;  bytes up to but NOT including the ^Z
 20860 00001F30 0E                      	push	cs		;  will be typed.
 20861 00001F31 07                      	pop	es
 20862                                  	;assume es:trangroup
 20863 00001F32 26F616[7BA4]            	not	byte [es:zflag]	; Turn on ^Z flag so that the routine
 20864                                  typecont2:			;  will quit after this write.
 20865 00001F37 53                      	push	bx
 20866 00001F38 BB0100                  	mov	bx,1
 20867                                  	;mov	ah,Write
 20868 00001F3B B440                    	mov	ah,40h
 20869                                  	;int	21h
 20870                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20871 00001F3D E87AE6                  	call	int_21h_indirect
 20872 00001F40 5B                      	pop	bx
 20873 00001F41 720C                    	jc	short Error_outputj
 20874 00001F43 39C8                    	cmp	ax,cx
 20875 00001F45 7503                    	jnz	short tf3	;M043
 20876 00001F47 E979FF                  	jmp	typelp		;M043
 20877                                  tf3:				;M043
 20878                                  ;M043;	jz	short typelp
 20879 00001F4A 49                      	dec	cx
 20880 00001F4B 39C8                    	cmp	ax,cx
 20881                                  	;;retz			; One less byte OK (^Z)
 20882                                  	;jnz	short Error_outputj
 20883                                  ;tf4:
 20884                                  	;retn
 20885 00001F4D 7411                    	jz	short typelp_ret ; 20/02/2023
 20886                                  
 20887                                  Error_outputj:
 20888 00001F4F BB0100                  	mov	bx,1
 20889                                  	;mov	ax,IOCTL SHL 8
 20890 00001F52 B80044                  	mov	ax,4400h
 20891                                  	;int	21h
 20892                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20893 00001F55 E862E6                  	call	int_21h_indirect
 20894 00001F58 F6C280                  	test	dl,80h
 20895                                  	;test	dl,devid_ISDEV
 20896                                  	;;retnz			; If device, no error message
 20897                                  	;jnz	short tf4
 20898 00001F5B 7503                    	jnz	short typelp_ret
 20899 00001F5D E9610A                  	jmp	error_output
 20900                                  typelp_ret:
 20901 00001F60 C3                      	retn
 20902                                  
 20903                                  ; ---------------------------------------------------------------------------
 20904                                  
 20905                                  ; VOLUME command displays the volume ID on the specified drive
 20906                                  
 20907                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20908                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20909                                  	; 10/06/2023
 20910                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20911                                  VOLUME:
 20912                                  	; MSDOS 6.0
 20913 00001F61 BE8100                  	mov	si,81h
 20914 00001F64 BF[E895]                	mov	di,PARSE_VOL
 20915                                  				;AN000; Get address of PARSE_VOL
 20916 00001F67 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20917 00001F69 31D2                    	xor	dx,dx		;AN000;
 20918 00001F6B E8B405                  	call	Parse_With_Msg	;AC018; call parser
 20919                                  
 20920                                  	;cmp	ax,-1 ; 0FFFFh
 20921                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 20922                                  	;je	short OkVolArg	;AC000; Yes, display default volume ID
 20923                                  	;;cmp	ax,RESULT_NO_ERROR
 20924                                  	;;cmp	ax,0		;AC000; did we have an error?
 20925                                  	;or	ax,ax ; 0?
 20926                                  	;jnz	short badvolarg	;AC000; Yes, fail.
 20927                                  	; 10/06/2023
 20928 00001F6E 40                      	inc	ax  ; cmp ax,-1
 20929 00001F6F 7447                    	jz	short OkVolArg ; 0FFFFh -> 0
 20930 00001F71 48                      	dec	ax  ; cmp ax,0
 20931 00001F72 750A                    	jnz	short badvolarg ; 1 -> 0
 20932                                  	; ax = 0
 20933                                  
 20934                                  ; We have parsed off the drive. See if there are any more chars left
 20935                                  
 20936 00001F74 BF[E895]                	mov	di,PARSE_VOL
 20937                                  				;AC000; get address of parse_vol
 20938 00001F77 31D2                    	xor	dx,dx		;AC000;
 20939 00001F79 E89005                  	call	parse_check_eol ;AC000; call parser
 20940 00001F7C 743A                    	jz	short OkVolArg	;AC000; yes, end of road
 20941                                  
 20942                                  ; The line was not interpretable. Report an error.
 20943                                  
 20944                                  badvolarg:
 20945 00001F7E E96C0D                  	jmp	cerror
 20946                                  
 20947                                  ; ---------------------------------------------------------------------------
 20948                                  
 20949                                  ;***	DisAppend - disable APPEND
 20950                                  ;
 20951                                  ;	ENTRY	nothing
 20952                                  ;
 20953                                  ;	EXIT	nothing
 20954                                  ;
 20955                                  ;	USED	AX,BX
 20956                                  ;
 20957                                  ;	EFFECTS
 20958                                  ;
 20959                                  ;	  APPEND is disabled. If it was active, it will be re-enabled
 20960                                  ;	  after the command finishes, by the HeadFix routine.
 20961                                  ;
 20962                                  ;	NOTE
 20963                                  ;
 20964                                  ;	  This routine must not be called more than once during a single
 20965                                  ;	  command cycle. The second call would permanently disable APPEND.
 20966                                  
 20967                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20968                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1CDFh
 20969                                  	
 20970                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20971                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2289h
 20972                                  
 20973                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20974                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2069h
 20975                                  
 20976                                  	; MSDOS 6.0
 20977                                  DisAppend:
 20978 00001F81 1E                      	push	ds			; save DS
 20979 00001F82 06                      	push	es			; save ES
 20980 00001F83 57                      	push	di
 20981                                  
 20982                                  	;mov	ax,APPENDINSTALL	; AX = Append Installed Check code
 20983 00001F84 B800B7                  	mov	ax,0B700h
 20984                                  	;int	2Fh			; talk to APPEND via multiplex
 20985                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20986 00001F87 E856E6                  	call	int_2Fh_indirect
 20987 00001F8A 08C0                    	or	al,al
 20988 00001F8C 7426                    	jz	short daRet		; APPEND not installed, return
 20989                                  
 20990                                  	;mov	ax,APPENDDOS		; AX = Get Append Version code
 20991 00001F8E B802B7                  	mov	ax,0B702h
 20992                                  	;int	2Fh			; talk to APPEND via multiplex
 20993                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20994 00001F91 E84CE6                  	call	int_2Fh_indirect
 20995 00001F94 83F8FF                  	cmp	ax,0FFFFh
 20996 00001F97 751B                    	jne	short daRet		; it's not a local version, return
 20997                                  
 20998                                  	;mov	ax,APPENDGETSTATE	; AX = Get Function State code
 20999 00001F99 B806B7                  	mov	ax,0B706h
 21000                                  	;int	2Fh			; talk to APPEND via multiplex
 21001                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21002 00001F9C E841E6                  	call	int_2Fh_indirect
 21003                                  
 21004 00001F9F 8E1E[D19B]              	mov	ds,[RESSEG]		; DS = resident seg addr
 21005                                  
 21006 00001FA3 891E[BE02]              	mov	[Append_State],bx	; Append_State = saved APPEND state
 21007 00001FA7 C606[C002]FF            	mov	byte [Append_Flag],-1	; Append_Flag = true, restore state
 21008                                  
 21009 00001FAC 31DB                    	xor	bx,bx			; BX = APPEND state = off
 21010                                  	;mov	ax,APPENDSETSTATE	; AX = Set Append State code
 21011 00001FAE B807B7                  	mov	ax,0B707h
 21012                                  	;int	2Fh			; talk to APPEND via multiplex
 21013                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21014 00001FB1 E82CE6                  	call	int_2Fh_indirect
 21015                                  daRet:	
 21016 00001FB4 5F                      	pop	di
 21017 00001FB5 07                      	pop	es			; restore ES
 21018 00001FB6 1F                      	pop	ds			; restore DS
 21019                                  
 21020 00001FB7 C3                      	retn
 21021                                  
 21022                                  ; ---------------------------------------------------------------------------
 21023                                  
 21024                                  ; Find the Volume ID on the disk.
 21025                                  
 21026                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21027                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21028                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21029                                  	
 21030                                  	; MSDOS 6.0
 21031                                  OkVolArg:
 21032 00001FB8 E8C6FF                  	call	DisAppend		; disable APPEND
 21033 00001FBB E88209                  	call	CRLF2
 21034                                  	;mov	al,blank			
 21035 00001FBE B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 21036 00001FC0 E8B201                  	call	PRINT_CHAR		;AN051;  before volume message
 21037 00001FC3 1E                      	push	ds
 21038 00001FC4 07                      	pop	es
 21039                                  
 21040                                  ; Volume IDs are only findable via extended FCBs or find_first with attributes
 21041                                  ; of volume_id ONLY.
 21042                                  
 21043 00001FC5 BF5500                  	mov	di,FCB-7 ; 55h		; Point to extended FCB beginning
 21044 00001FC8 B0FF                    	mov	al,-1 ; 0FFh		; Tag to indicate Extention
 21045 00001FCA AA                      	stosb
 21046 00001FCB 31C0                    	xor	ax,ax			; Zero padding to volume label
 21047 00001FCD AB                      	stosw
 21048 00001FCE AB                      	stosw
 21049 00001FCF AA                      	stosb
 21050 00001FD0 B008                    	mov	al,ATTR_VOLUME_ID ; 8	; Look for volume label
 21051 00001FD2 AA                      	stosb
 21052 00001FD3 47                      	inc	di			; Skip drive byte; it is already set
 21053 00001FD4 B90B00                  	mov	cx,11			; fill in remainder of file
 21054 00001FD7 B03F                    	mov	al,'?'
 21055 00001FD9 F3AA                    	rep	stosb
 21056                                  
 21057                                  ; Set up transfer address (destination of search first information)
 21058                                  
 21059 00001FDB BA[189D]                	mov	dx,DIRBUF
 21060                                  	;mov	ah,Set_DMA
 21061 00001FDE B41A                    	mov	ah,1Ah
 21062                                  	;int	21h
 21063                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21064 00001FE0 E8D7E5                  	call	int_21h_indirect
 21065                                  
 21066                                  ; Do the search
 21067                                  
 21068 00001FE3 BA5500                  	mov	dx,FCB-7 ; 55h
 21069                                  	;mov	ah,Dir_Search_First
 21070 00001FE6 B411                    	mov	ah,11h
 21071                                  	;int	21h
 21072                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21073 00001FE8 E8CFE5                  	call	int_21h_indirect
 21074                                  
 21075                                  
 21076                                  ;********************************
 21077                                  ; Print volume ID info
 21078                                  
 21079 00001FEB 50                      	push	ax			;AC000; AX return from SEARCH_FIRST for VOL ID
 21080 00001FEC A05C00                  	mov	al,[FCB]  ; [5Ch]	;AC000; get drive letter
 21081 00001FEF 0440                    	add	al,'@'  ; add al,40h
 21082 00001FF1 3C40                    	cmp	al,'@'
 21083 00001FF3 7505                    	jne	short drvok
 21084 00001FF5 A0[E59B]                	mov	al,[CURDRV]
 21085                                  	;add	al,capital_A
 21086 00001FF8 0441                    	add	al,'A'
 21087                                  drvok:
 21088 00001FFA A2[909D]                	mov	[vol_drv],al		;AC000; get drive letter into argument
 21089 00001FFD 58                      	pop	ax			;AC000; get return code back
 21090 00001FFE 08C0                    	or	al,al			;AC000; volume label found?
 21091 00002000 7405                    	jz	short Get_vol_name	;AC000; volume label exists - go get it
 21092 00002002 BA[6490]                	mov	dx,VolMes_Ptr_2		;AC000; set up no volume message
 21093 00002005 EB13                    	jmp	short print_serial	;AC000; go print it
 21094                                  
 21095                                  Get_vol_name:
 21096 00002007 BF[499C]                	mov	di,CHARBUF
 21097 0000200A 89FA                    	mov	dx,di
 21098 0000200C BE[209D]                	mov	si,DIRBUF+8		;AN000;  3/3/KK
 21099 0000200F B90B00                  	mov	cx,11			;AN000;  3/3/KK
 21100 00002012 F3A4                    	rep	movsb			;AN000;  3/3/KK
 21101                                  
 21102 00002014 30C0                    	xor	al,al			;AC000; store a zero to terminate the string
 21103 00002016 AA                      	stosb
 21104 00002017 BA[7290]                	mov	dx,VolMes_Ptr		;AC000; set up message
 21105                                  
 21106                                  print_serial:
 21107                                  
 21108                                  ; Attempt to get the volume serial number from the disk. If an error
 21109                                  ; occurs, do not print volume serial number.
 21110                                  
 21111 0000201A 52                      	push	dx			;AN000; save message offset
 21112                                  	;mov	ax,(GetSetMediaID SHL 8)
 21113 0000201B B80069                  	mov	ax,6900h		;AC036; Get the volume serial info
 21114 0000201E 8A1E5C00                	mov	bl,[FCB] ; [5Ch]	;AN000; get drive number from FCB
 21115 00002022 BA[F69E]                	mov	dx,vol_ioctl_buf	;AN000; target buffer
 21116                                  	;int	21h			;AN000; do the call
 21117                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21118 00002025 E892E5                  	call	int_21h_indirect
 21119                                  			; DOS - 4.0 internal - GET/SET DISK SERIAL NUMBER
 21120                                  			; AL = 00h get serial number / 01h set serial number
 21121                                  			; BL = drive (0=default, 1=A, 2=B, etc)
 21122                                  			; DS:DX -> disk info
 21123 00002028 5A                      	pop	dx			;AN000; get message offset back
 21124 00002029 720B                    	jc	short printvol_end	;AN000; if error, just go print label
 21125 0000202B E8AF33                  	call	std_printf		;AC000; go print volume message
 21126                                  	;mov	al,blank				
 21127 0000202E B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 21128 00002030 E84201                  	call	PRINT_CHAR		;AN051;  before volume message
 21129 00002033 BA[8B90]                	mov	dx,VolSerMes_Ptr 	;AN000; get serial number message
 21130                                  printvol_end:
 21131 00002036 E9A433                  	jmp	std_printf		;AC000; go print and exit
 21132                                  
 21133                                  ; ---------------------------------------------------------------------------
 21134                                  
 21135                                  ;****************************************************************
 21136                                  ;*
 21137                                  ;* ROUTINE:	Set_ext_error_msg
 21138                                  ;*
 21139                                  ;* FUNCTION:	Sets up extended error message for printing
 21140                                  ;*
 21141                                  ;* INPUT:	return from INT 21
 21142                                  ;*
 21143                                  ;* OUTPUT:	extended error message set up in extended error
 21144                                  ;*		buffer.
 21145                                  ;*
 21146                                  ;****************************************************************
 21147                                  	
 21148                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21149                                  
 21150                                  	; MSDOS 6.0
 21151                                  Set_Ext_Error_Msg:			;AN000;
 21152 00002039 E80D00                  	call	get_ext_error_number	;AC022; get the extended error
 21153 0000203C C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class
 21154                                  	;mov	byte [msg_disp_class],1	;AN000; set up extended error msg class
 21155 00002041 BA[448F]                	mov	dx,extend_buf_ptr 	;AC000; get extended message pointer
 21156 00002044 A3[448F]                	mov	[extend_buf_ptr],ax	;AN000; get message number in control block
 21157 00002047 F9                      	stc				;AN000; make sure carry is set
 21158 00002048 C3                      	retn				;AN000; return
 21159                                  
 21160                                  ; ---------------------------------------------------------------------------
 21161                                  
 21162                                  ;****************************************************************
 21163                                  ;*
 21164                                  ;* ROUTINE:	Get_ext_error_number
 21165                                  ;*
 21166                                  ;* FUNCTION:	Does get extended error function call
 21167                                  ;*
 21168                                  ;* INPUT:	return from INT 21
 21169                                  ;*
 21170                                  ;* OUTPUT:	AX - extended error number
 21171                                  ;*
 21172                                  ;****************************************************************
 21173                                  
 21174                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21175                                  
 21176                                  	; MSDOS 6.0
 21177                                  get_ext_error_number:			;AN022;
 21178                                  
 21179                                  	;SaveReg <BX,CX,DX,SI,DI,BP,ES,DS>
 21180                                  					;AN022; save registers
 21181 00002049 53                      	push	bx
 21182 0000204A 51                      	push	cx
 21183 0000204B 52                      	push	dx
 21184 0000204C 56                      	push	si
 21185 0000204D 57                      	push	di
 21186 0000204E 55                      	push	bp
 21187 0000204F 06                      	push	es
 21188 00002050 1E                      	push	ds
 21189                                  	;mov	ah,GetExtendedError	;AN022; get extended error
 21190 00002051 B459                    	mov	ah,59h
 21191 00002053 31DB                    	xor	bx,bx			;AN022; clear BX
 21192 00002055 CD21                    	int	21h			;AN022;
 21193                                  			; DOS - 3+ - GET EXTENDED ERROR CODE
 21194                                  			; BX = version code (0000h for DOS 3.x)
 21195                                  
 21196                                  	;RestoreReg  <DS,ES,BP,DI,SI,DX,CX,BX>
 21197                                  					;AN022; restore registers
 21198 00002057 1F                      	pop	ds
 21199 00002058 07                      	pop	es
 21200 00002059 5D                      	pop	bp
 21201 0000205A 5F                      	pop	di
 21202 0000205B 5E                      	pop	si
 21203 0000205C 5A                      	pop	dx
 21204 0000205D 59                      	pop	cx
 21205 0000205E 5B                      	pop	bx
 21206                                  
 21207 0000205F C3                      	retn				;AN022; return
 21208                                  
 21209                                  ;============================================================================
 21210                                  ; TCMD2A.ASM, MSDOS 6.0, 1991
 21211                                  ;============================================================================
 21212                                  ; 08/10/2018 - Retro DOS v3.0
 21213                                  
 21214                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1379h
 21215                                  
 21216                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 21217                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1DB7h
 21218                                  
 21219                                  ; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21220                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 2361h
 21221                                  
 21222                                  ; ---------------------------------------------------------------------------
 21223                                  
 21224                                  ; MSDOS 6.0
 21225                                  ;***	Version - display DOS version
 21226                                  ;
 21227                                  ;	SYNTAX	ver [/debug]
 21228                                  ;
 21229                                  ;		/debug - display additional DOS configuration info
 21230                                  ;
 21231                                  ;	ENTRY	command-line tail is in PSP
 21232                                  ;
 21233                                  ;	EXIT	if successful, nothing
 21234                                  ;		if parse fails,
 21235                                  ;		  parse error message is set up (for Std_EPrintf)
 21236                                  ;		    AX = system parser error code
 21237                                  ;		    DX = ptr to message block
 21238                                  ;		  we jump to CError
 21239                                  ;
 21240                                  ;	EFFECTS
 21241                                  ;	  If parse fails, a parse error message is displayed.
 21242                                  ;	  Otherwise, version message is displayed.
 21243                                  ;	  If /debug is specified, additional DOS info is displayed.
 21244                                  
 21245                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21246                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21247                                  	; 20/07/2024 - Retro DOS v5.0 COMMAND.COM
 21248                                  VERSION:
 21249                                  	;assume	ds:TRANGROUP,es:TRANGROUP
 21250                                  
 21251                                  ;	Parse command line for /debug switch.
 21252                                  
 21253 00002060 BE8100                  	mov	si,81h			; DS:SI = ptr to command tail
 21254 00002063 BF[AB96]                	mov	di,PARSE_VER		; ES:DI = ptr to parse block
 21255 00002066 31C9                    	xor	cx,cx			; CX = # positional param's found
 21256 00002068 E8B704                  	call	Parse_With_Msg
 21257                                  
 21258 0000206B B301                    	mov	bl,1			; BL = flag = /debug present
 21259                                  	;cmp	ax,RESULT_NO_ERROR
 21260                                  	;cmp	ax,0
 21261                                  	;je	short verPrintVer	; something parsed - must be /debug
 21262 0000206D 09C0                    	or	ax,ax
 21263 0000206F 740A                    	jz	short verPrintVer 
 21264 00002071 FECB                    	dec	bl			; BL = flag = no /debug present
 21265                                  	;cmp	ax,END_OF_LINE ; -1
 21266 00002073 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 21267                                  
 21268                                  ; 20/07/2024 - Retro DOS v5.0 COMMAND.COM
 21269                                  %if 0
 21270                                  	je	short verPrintVer	; reached end of line - ok
 21271                                  %else
 21272 00002076 7414                    	je	short not_truever_sw
 21273                                  %endif
 21274                                  
 21275                                  ;	The parse failed. Error message has been set up.
 21276                                  
 21277 00002078 E9720C                  	jmp	cerror
 21278                                  
 21279                                  verPrintVer:
 21280                                  
 21281                                  ; 20/07/2024 - Retro DOS v5.0 COMMAND.COM
 21282                                  %if 1
 21283                                  check_t_switch:
 21284 0000207B 813E[CBA5][CB96]        	cmp	word [PARSE1_SYN],SLASH_T_SYN ; "/T" ; /t switch
 21285 00002081 7509                    	jne	short not_truever_sw
 21286 00002083 BA[EE96]                	mov	dx,RD5CMD_VER_MSG
 21287 00002086 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9 ; print the message
 21288 00002088 CD21                    	int	21h
 21289 0000208A EB47                    	jmp	short verDone
 21290                                  not_truever_sw:
 21291                                  %endif
 21292 0000208C 53                      	push	bx			; save /debug flag
 21293 0000208D E8B008                  	call	CRLF2
 21294 00002090 E84300                  	call	PRINT_VERSION
 21295 00002093 E8AA08                  	call	CRLF2
 21296 00002096 5B                      	pop	bx   			; BL = /debug flag
 21297 00002097 08DB                    	or	bl,bl
 21298 00002099 7438                    	jz	short verDone		; /debug is false - we're done
 21299                                  
 21300                                  ;*	For /debug, display DOS internal revision and DOS location
 21301                                  ;	(low memory, HMA, or ROM).
 21302                                  
 21303                                  ;	Bugbug:	use symbols for bitmasks below.
 21304                                  
 21305                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) + 6 ; M013
 21306 0000209B B80633                  	mov	ax,3306h
 21307 0000209E CD21                    	int	21h
 21308                                  		; DOS - 5+ Get TRUE Version Number
 21309                                  		; (BL major, BH minor, DL revision, DH flags)
 21310 000020A0 88D0                    	mov	al,dl			;revision number in dl; M013
 21311 000020A2 88F7                    	mov	bh,dh			;flags in dh now; M013
 21312                                  ;M032	and	al,7			; AL = DOS internal revision
 21313 000020A4 3C19                    	cmp	al,'Z'-'A' ; 25	 ;M032	; revision in A-to-Z range?
 21314                                  	;jbe	short @f	 ;M032	; A-to-Z revision ok
 21315 000020A6 7602                    	jbe	short ver1
 21316                                  	;mov	al,0E9h
 21317 000020A8 B0E9                    	mov	al,'*'-'A' ; -23 ;M032	; beyond Z, just say revision *
 21318                                  ;@@:
 21319                                  ver1:
 21320                                  
 21321                                  ; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 21322                                  %if 0
 21323                                  	add	al,'A' ; 41h		; AL = DOS internal rev letter
 21324                                  %else
 21325                                  	; PCDOS 7.1 COMMAND.COM
 21326 000020AA 0430                    	add	al,'0'  ; 30h
 21327                                  %endif
 21328                                  
 21329 000020AC A2[8E9D]                	mov	[One_Char_Val],al
 21330 000020AF BA[1692]                	mov	dx,dosrev_ptr		; MSG_1090
 21331 000020B2 E82833                  	call	std_printf		; print DOS internal revision
 21332                                  
 21333                                  ; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 21334                                  %if 1
 21335 000020B5 08D2                    	or	dl,dl
 21336 000020B7 741A                    	jz	short verDone		; Revision 0
 21337                                  %endif
 21338                                  
 21339 000020B9 B104                    	mov	cl,4
 21340 000020BB D2EF                    	shr	bh,cl			; CY = DOS in ROM
 21341 000020BD 7209                    	jc	short verRom
 21342 000020BF D0EF                    	shr	bh,1			; CY = DOS in HMA
 21343 000020C1 720A                    	jc	short verHma
 21344                                  
 21345                                  ;	DOS isn't in ROM or HMA, so it must be in lower memory.
 21346                                  
 21347                                  	;mov	dx,offset TRANGROUP:DosLow_Ptr
 21348 000020C3 BA[2A92]                	mov	dx,DosLow_Ptr		; MSG_1093
 21349 000020C6 EB08                    	jmp	short verPrintLoc
 21350                                  verRom: 
 21351                                  	;mov	dx,offset TRANGROUP:DosRom_Ptr
 21352 000020C8 BA[2492]                	mov	dx,DosRom_Ptr		; MSG_1091
 21353 000020CB EB03                    	jmp	short verPrintLoc
 21354                                  verHma: 
 21355                                  	;mov	dx,offset TRANGROUP:DosHma_Ptr
 21356 000020CD BA[2792]                	mov	dx,DosHma_Ptr		; MSG_1092
 21357                                  verPrintLoc:
 21358 000020D0 E80A33                  	call	std_printf
 21359                                  verDone:
 21360 000020D3 E96A08                  	jmp	CRLF2
 21361                                  
 21362                                  ; 21/02/2023
 21363                                  ;	; MSDOS 3.3
 21364                                  ;VERSION:
 21365                                  ;	call	CRLF2
 21366                                  ;	call	PRINT_VERSION
 21367                                  ;	jmp	CRLF2
 21368                                  
 21369                                  ; =============== S U B	R O U T	I N E =======================================
 21370                                  
 21371                                  	; 21/02/2023 - Retro DOS v4.0
 21372                                  PRINT_VERSION:
 21373                                  	;mov	ah,GET_VERSION ; 30h
 21374 000020D6 B430                    	mov	ah,30h
 21375 000020D8 CD21                    	int	21h	; DOS -	GET DOS	VERSION
 21376                                  			; Return: AL = major version number (00h for DOS 1.x)
 21377 000020DA 50                      	push	ax
 21378 000020DB 30E4                    	xor	ah,ah
 21379 000020DD A3[8A9D]                	mov	[Major_Ver_Num],ax
 21380 000020E0 58                      	pop	ax
 21381 000020E1 86E0                    	xchg	ah,al
 21382 000020E3 30E4                    	xor	ah,ah
 21383 000020E5 A3[8C9D]                	mov	[Minor_Ver_Num],ax
 21384 000020E8 BA[6190]                	mov	dx,VerMes_Ptr	; MSG_1040
 21385 000020EB E9EF32                  	jmp	std_printf
 21386                                  
 21387                                  ; =============== S U B	R O U T	I N E =======================================
 21388                                  
 21389                                  	; 21/02/2023 - Retro DOS v4.0
 21390                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21391                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21392                                  
 21393                                  PRINT_PROMPT:
 21394                                  
 21395                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21396                                  %if 0
 21397                                  	push	ds
 21398                                  	push	cs
 21399                                  	pop	ds		; Make sure DS is in TRANGROUP
 21400                                  	push	es
 21401                                  	call	find_prompt	; Look for prompt string
 21402                                  	jc	short PP0	; Can't find one
 21403                                  	cmp	byte [es:di],0
 21404                                  	jnz	short PP1
 21405                                  PP0:				; Use default prompt
 21406                                  	call	PRINT_DRIVE
 21407                                  	mov	al,'>'
 21408                                  	;mov	al,SYM
 21409                                  	call	PRINT_CHAR
 21410                                  	jmp	short PP5
 21411                                  ;PP1:
 21412                                  ;	mov	al,[es:di]	; Get a char
 21413                                  ;	inc	di
 21414                                  ;	or	al,al
 21415                                  ;	jz	short PP5	; Nul terminated
 21416                                  ;	; 21/02/2023
 21417                                  ;	cmp	al,'$' ; 24h
 21418                                  ;	;cmp	al,[DOLLAR]	; Meta character
 21419                                  ;	jz	short PP2	; Nope
 21420                                  ;	call	PRINT_CHAR
 21421                                  ;	jmp	short PP1
 21422                                  PP2:
 21423                                  	mov	al,[es:di]
 21424                                  	inc	di
 21425                                  	;mov	bx,CLSSTRING+2	; "[2J"
 21426                                  	mov	bx,PROMPT_TABLE-3
 21427                                  	or	al,al
 21428                                  	jz	short PP5
 21429                                  PP3:
 21430                                  	add	bx,3
 21431                                  	; 21/02/2023
 21432                                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 21433                                  	;call	UPCONV_MAPCALL  ; MSDOS 3.3
 21434                                  	cmp	al,[bx]
 21435                                  	jz	short PP4
 21436                                  	cmp	byte [bx],0
 21437                                  	jnz	short PP3
 21438                                  	;jmp	short PP1
 21439                                  	; 21/02/2023
 21440                                  PP1:
 21441                                  	mov	al,[es:di]	; Get a char
 21442                                  	inc	di
 21443                                  	or	al,al
 21444                                  	jz	short PP5	; Nul terminated
 21445                                  	; 21/02/2023
 21446                                  	cmp	al,'$' ; 24h
 21447                                  	;cmp	al,[DOLLAR]	; Meta character
 21448                                  	jz	short PP2	; Nope
 21449                                  	call	PRINT_CHAR
 21450                                  	jmp	short PP1
 21451                                  PP4:
 21452                                  	push	es
 21453                                  	push	di
 21454                                  	push	cs
 21455                                  	pop	es
 21456                                  	call	word [bx+1]
 21457                                  	pop	di
 21458                                  	pop	es
 21459                                  	jmp	short PP1
 21460                                  PP5:
 21461                                  	pop	es		; Restore segments
 21462                                  	pop	ds
 21463                                  	retn
 21464                                  %else
 21465                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21466                                  	; PCDOS 7.1 COMMAND.COM
 21467 000020EE 1E                      	push	ds
 21468 000020EF 0E                      	push	cs
 21469 000020F0 1F                      	pop	ds		; Make sure DS is in TRANGROUP
 21470 000020F1 06                      	push	es
 21471 000020F2 9C                      	pushf
 21472                                  PP0:
 21473 000020F3 B8104A                  	mov	ax,4A10h	; SMARTDRV INSTALLATION CHECK (*)
 21474 000020F6 BB0000                  	mov	bx,0		; (*)
 21475 000020F9 CD2F                    	int	2Fh
 21476 000020FB 3DBEBA                  	cmp	ax,0BABEh	; 0BABEh if installed
 21477 000020FE 7504                    	jnz	short PP1
 21478                                  	;cmp	cx,0		; number of dirty cache elements
 21479 00002100 21C9                    	and	cx,cx ; 03/08/2024
 21480 00002102 7516                    	jnz	short PP3
 21481                                  PP1:
 21482 00002104 9D                      	popf
 21483 00002105 E87305                  	call	find_prompt	; Look for prompt string
 21484 00002108 7206                    	jc	short PP2	; Can't find one
 21485 0000210A 26803D00                	cmp	byte [es:di],0
 21486 0000210E 752E                    	jnz	short PP4
 21487                                  PP2:				; Use default prompt
 21488 00002110 1E                      	push	ds
 21489 00002111 07                      	pop	es
 21490 00002112 E87700                  	call	build_dir_for_prompt
 21491 00002115 E85300                  	call	PRINT_G
 21492 00002118 EB40                    	jmp	short PP8
 21493                                  PP3:
 21494 0000211A B8104A                  	mov	ax,4A10h	; SMARTDRV - FLUSH BUFFERS (**)
 21495 0000211D BB0100                  	mov	bx,1		; (**)
 21496 00002120 CD2F                    	int	2Fh
 21497 00002122 EBCF                    	jmp	short PP0
 21498                                  PP5:
 21499 00002124 268A05                  	mov	al,[es:di]
 21500 00002127 47                      	inc	di
 21501                                  	;mov	bx,CLSSTRING+2	; "[2J"
 21502 00002128 BB[7993]                	mov	bx,PROMPT_TABLE-3
 21503 0000212B 08C0                    	or	al,al
 21504 0000212D 742B                    	jz	short PP8
 21505                                  PP6:
 21506 0000212F 83C303                  	add	bx,3
 21507 00002132 E81D06                  	call	UPCONV
 21508 00002135 3A07                    	cmp	al,[bx]
 21509 00002137 7416                    	je	short PP7
 21510 00002139 803F00                  	cmp	byte [bx],0
 21511 0000213C 75F1                    	jnz	short PP6
 21512                                  	;jmp	short PP4
 21513                                  PP4:
 21514 0000213E 268A05                  	mov	al,[es:di]	; Get a char
 21515 00002141 47                      	inc	di
 21516 00002142 08C0                    	or	al,al
 21517 00002144 74DE                    	jz	short PP5	; Nul terminated
 21518 00002146 3C24                    	cmp	al,'$' ; 24h	; Meta character
 21519 00002148 74DA                    	je	short PP5	; Nope
 21520 0000214A E82800                  	call	PRINT_CHAR
 21521 0000214D EBEF                    	jmp	short PP4
 21522                                  PP7:
 21523 0000214F 06                      	push	es
 21524 00002150 57                      	push	di
 21525 00002151 0E                      	push	cs
 21526 00002152 07                      	pop	es
 21527 00002153 FF5701                  	call	word [bx+1]
 21528 00002156 5F                      	pop	di
 21529 00002157 07                      	pop	es
 21530 00002158 EBE4                    	jmp	short PP4
 21531                                  PP8:
 21532 0000215A 07                      	pop	es		; Restore segments
 21533 0000215B 1F                      	pop	ds
 21534 0000215C C3                      	retn
 21535                                  
 21536                                  %endif
 21537                                  
 21538                                  ; ---------------------------------------------------------------------------
 21539                                  
 21540                                  PRINT_BACK:
 21541                                  	; 21/02/2023
 21542 0000215D BA[6491]                	mov	dx,dback_ptr
 21543 00002160 E97A32                  	jmp	std_printf
 21544                                  
 21545                                  ; ---------------------------------------------------------------------------
 21546                                  
 21547                                  PRINT_EQ:
 21548 00002163 B03D                    	mov	al,'='
 21549 00002165 EB0E                    	jmp	short PRINT_CHAR
 21550                                  
 21551                                  ; ---------------------------------------------------------------------------
 21552                                  
 21553                                  PRINT_ESC:
 21554 00002167 B01B                    	mov	al,1Bh
 21555 00002169 EB0A                    	jmp	short PRINT_CHAR
 21556                                  
 21557                                  ; ---------------------------------------------------------------------------
 21558                                  
 21559                                  	; 21/02/2023
 21560                                  PRINT_G:
 21561                                  	;mov	al,[RABRACKET]
 21562 0000216B B03E                    	mov	al,'>' ; 3Eh
 21563 0000216D EB06                    	jmp	short PRINT_CHAR
 21564                                  
 21565                                  ; ---------------------------------------------------------------------------
 21566                                  
 21567                                  	; 21/02/2023
 21568                                  PRINT_L:
 21569                                  	;mov	al,[LABRACKET]
 21570 0000216F B03C                    	mov	al,'<' ; 3Ch
 21571 00002171 EB02                    	jmp	short PRINT_CHAR
 21572                                  
 21573                                  ; ---------------------------------------------------------------------------
 21574                                  
 21575                                  	; 21/02/2023
 21576                                  Print_B:
 21577                                  	;mov	al,[VBAR]
 21578 00002173 B07C                    	mov	al,'|' ; 7Ch
 21579                                  
 21580                                  ; =============== S U B	R O U T	I N E =======================================
 21581                                  
 21582                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21583                                  PRINT_CHAR:
 21584                                  	; MSDOS 6.0
 21585                                  
 21586                                  ;	Bugbug:	Why bother with ds,es here?
 21587                                  		
 21588 00002175 06                      	push	es
 21589 00002176 1E                      	push	ds
 21590 00002177 07                      	pop	es
 21591 00002178 57                      	push	di
 21592 00002179 52                      	push	dx
 21593 0000217A 88C2                    	mov	dl,al		;AC000; Get char into al
 21594                                  	;mov	ah,STD_CON_OUTPUT
 21595                                  				;AC000; print the char to stdout
 21596 0000217C B402                    	mov	ah,2
 21597 0000217E CD21                    	int	21h		;AC000;
 21598 00002180 5A                      	pop	dx
 21599 00002181 5F                      	pop	di
 21600 00002182 07                      	pop	es
 21601 00002183 C3                      	retn
 21602                                  
 21603                                  ; ---------------------------------------------------------------------------
 21604                                  
 21605                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21606                                  PRINT_DRIVE:
 21607                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 21608 00002184 B419                    	mov	ah,19h
 21609 00002186 CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 21610 00002188 0441                    	add	al,'A'
 21611                                  	;add	al,[CAPITAL_A]
 21612                                  	;call	PRINT_CHAR
 21613                                  	;retn
 21614                                  	; 21/02/2023
 21615 0000218A EBE9                    	jmp	short PRINT_CHAR
 21616                                  
 21617                                  ; ---------------------------------------------------------------------------
 21618                                  
 21619                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21620                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EB6h
 21621                                  
 21622                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21623                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2460h
 21624                                  
 21625                                  	; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 21626                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:229Ch
 21627                                  
 21628                                  build_dir_for_prompt:
 21629 0000218C 30D2                    	xor	dl,dl
 21630 0000218E BE[189D]                	mov	si,BWDBUF
 21631 00002191 89F7                    	mov	di,si
 21632 00002193 A0[E59B]                	mov	al,[CURDRV]
 21633 00002196 0441                    	add	al,'A'
 21634 00002198 B43A                    	mov	ah,':'
 21635 0000219A AB                      	stosw
 21636 0000219B A0[D69B]                	mov	al,[DIRCHAR]
 21637 0000219E AA                      	stosb
 21638 0000219F 87F7                    	xchg	si,di
 21639 000021A1 893E[7F9D]              	mov	[string_ptr_2],di
 21640                                  	;mov	ah,CURRENT_DIR ; 47h
 21641 000021A5 B447                    	mov	ah,47h
 21642 000021A7 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 21643                                  			; DL = drive (0=default,1=A,etc.)
 21644                                  			; DS:SI	points to 64-byte buffer area
 21645                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 21646 000021A9 BA[4C91]                	mov	dx,string_buf_ptr
 21647 000021AC 7303                    	jnc	short doprint
 21648                                  	;mov	dx,BADCURDRVPTR	; MSDOS 3.3
 21649 000021AE BA[0E90]                	mov	dx,BADCURDRV
 21650                                  doprint:
 21651                                  	;call	std_printf
 21652                                  	;retn
 21653 000021B1 E92932                  	jmp	std_printf
 21654                                  
 21655                                  ; =============== S U B	R O U T	I N E =======================================
 21656                                  
 21657                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21658                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EDFh
 21659                                  
 21660                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21661                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:22C5h
 21662                                  
 21663                                  build_dir_for_chdir:
 21664 000021B4 E80D00                  	call	build_dir_string
 21665 000021B7 BA[189D]                	mov	dx,DIRBUF
 21666 000021BA 8916[7F9D]              	mov	[string_ptr_2],dx
 21667                                  	;mov	dx,offset trangroup:string_buf_ptr ; MSDOS 6.0
 21668                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 21669 000021BE BA[4C91]                	mov	dx,string_buf_ptr
 21670                                  	;call	std_printf
 21671                                  	;retn
 21672                                  	; 21/02/2023
 21673                                  	;jmp	short doprint
 21674 000021C1 E91932                  	jmp	std_printf
 21675                                  
 21676                                  ; =============== S U B	R O U T	I N E =======================================
 21677                                  
 21678                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21679                                  build_dir_string:
 21680 000021C4 8A165C00                	mov	dl,[FCB] ; mov dl,[5Ch]
 21681 000021C8 88D0                    	mov	al,dl
 21682 000021CA 0440                    	add	al,'@'	; 40h
 21683 000021CC 3C40                    	cmp	al,'@'
 21684 000021CE 7506                    	jne	short gotdrive
 21685 000021D0 0206[E59B]              	add	al,[CURDRV]
 21686 000021D4 FEC0                    	inc	al
 21687                                  gotdrive:
 21688 000021D6 50                      	push	ax
 21689 000021D7 BE[1B9D]                	mov	si,BWDBUF+3
 21690                                  	;mov	ah,CURRENT_DIR ; 47h
 21691 000021DA B447                    	mov	ah,47h
 21692 000021DC CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 21693                                  			; DL = drive (0=default,1=A,etc.)
 21694                                  			; DS:SI	points to 64-byte buffer area
 21695 000021DE 7305                    	jnc	short dpbisok
 21696 000021E0 0E                      	push	cs
 21697 000021E1 1F                      	pop	ds
 21698 000021E2 E9040A                  	jmp	DRVBAD
 21699                                  dpbisok:
 21700 000021E5 BF[189D]                	mov	di,BWDBUF
 21701 000021E8 89FA                    	mov	dx,di
 21702 000021EA 58                      	pop	ax
 21703 000021EB B43A                    	mov	ah,':'
 21704 000021ED AB                      	stosw
 21705 000021EE A0[D69B]                	mov	al,[DIRCHAR]
 21706 000021F1 AA                      	stosb
 21707 000021F2 C3                      	retn
 21708                                  
 21709                                  ; ---------------------------------------------------------------------------
 21710                                  
 21711                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21712                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1F1Fh
 21713                                  
 21714                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21715                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:24C9h
 21716                                  
 21717                                  	; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 21718                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2305h
 21719                                  PATH:
 21720                                  	; MSDOS 6.0
 21721 000021F3 30C0                    	xor	al,al			;AN049; Set up holding buffer
 21722 000021F5 BF[FF98]                	mov	di,SRCXNAME		;AN049;  for PATH while parsing
 21723 000021F8 AA                      	stosb				;AN049; Initialize PATH to null
 21724 000021F9 4F                      	dec	di			;AN049; point to the start of buffer
 21725 000021FA E8600D                  	call	PGETARG 		; Pre scan for arguments
 21726 000021FD 7460                    	jz	short disppath		; Print the current path
 21727                                  	;cmp	al,semicolon		;AC049; NUL path argument?
 21728 000021FF 3C3B                    	cmp	al,';' ; 3Bh
 21729 00002201 7503                    	jne	short pathslp 		;AC049;
 21730 00002203 46                      	inc	si			;AN049; point past semicolon
 21731 00002204 EB1B                    	jmp	short scan_white	;AC049; Yes - make sure nothing else on line
 21732                                  pathslp:					; Get the user specified path
 21733 00002206 AC                      	lodsb				; Get a character
 21734 00002207 3C0D                    	cmp	al,0Dh
 21735                                  	;cmp	al,END_OF_LINE_IN	;AC049; Is it end of line?
 21736 00002209 7434                    	je	short path_eol		;AC049; yes - end of command
 21737 0000220B E81A05                  	call	testkanj		;See if DBCS
 21738 0000220E 7405                    	jz	short notkanj2		;No - continue
 21739 00002210 AA                      	stosb				;AC049; Yes - store the first byte
 21740 00002211 AC                      	lodsb				;skip second byte of DBCS
 21741                                  path_hold:				;AN049;
 21742 00002212 AA                      	stosb				;AC049; Store a byte in the PATH buffer
 21743 00002213 EBF1                    	jmp	short pathslp		;continue parsing
 21744                                  notkanj2:
 21745 00002215 E83A05                  	call	UPCONV			;upper case the character
 21746                                  
 21747 00002218 3C3B                    	cmp	al,';' ; 3Bh
 21748                                  	;cmp	al,semicolon		;AC049; ';' not a delimiter on PATH
 21749 0000221A 74F6                    	je	short path_hold		;AC049; go store it
 21750 0000221C E83607                  	call	DELIM			;delimiter?
 21751 0000221F 75F1                    	jnz	short path_hold		;AC049; no - go store character
 21752                                  scan_white:				;AN049; make sure were at EOL
 21753 00002221 AC                      	lodsb				;AN049; get a character
 21754 00002222 3C0D                    	cmp	al,0Dh
 21755                                  	;cmp	al,END_OF_LINE_IN	;AN049; end of line?
 21756 00002224 7419                    	je	short path_eol		;AN049; yes - go set path
 21757 00002226 3C20                    	cmp	al,' ' ; 20h
 21758                                  	;cmp	al,blank		;AN049; whitespace?
 21759 00002228 74F7                    	je	short scan_white	;AN049; yes - continue scanning
 21760                                  	;cmp	al,9
 21761 0000222A 3C09                    	cmp	al,tab_chr ; 9		;AN049; whitespace?
 21762 0000222C 74F3                    	je	short scan_white	;AN049; yes - continue scanning
 21763                                  
 21764 0000222E BA[448F]                	mov	dx,extend_buf_ptr 	;AN049; no - set up error message
 21765                                  	;mov	word [extend_buf_ptr],1	;AN049; get "Too many parameters" message number
 21766 00002231 C706[448F]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 21767                                  	;mov	byte [msg_disp_class],2		
 21768                                  					;AN049; set up parse error msg class
 21769 00002237 C606[428F]02            	mov	byte [msg_disp_class],parse_msg_class
 21770 0000223C E9AE0A                  	jmp	cerror			;AN049;
 21771                                  path_eol:				;AN049; Parsing was clean
 21772 0000223F 30C0                    	xor	al,al			;AN049; null terminate the PATH
 21773 00002241 AA                      	stosb				;AN049;    buffer
 21774 00002242 E83104                  	call	find_path		;AN049; Find PATH in environment
 21775 00002245 E80504                  	call	delete_path		;AC049; Delete any offending name
 21776 00002248 E8BB04                  	call	scan_double_null	;AC049; Scan to end of environment
 21777 0000224B E88B04                  	call	move_name		;AC049; move in PATH=
 21778 0000224E BE[FF98]                	mov	si,SRCXNAME		;AN049; Set up source as PATH buffer
 21779                                  store_path:				;AN049; Store the PATH in the environment
 21780 00002251 AC                      	lodsb				;AN049; Get a character
 21781                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN049; null character?
 21782 00002252 20C0                    	and	al,al ; al=0 ?
 21783 00002254 7405                    	jz	short got_paths		;AN049; yes - exit
 21784 00002256 E81B05                  	call	store_char		;AN049; no - store character
 21785 00002259 EBF6                    	jmp	short store_path	;AN049; continue
 21786                                  got_paths:				;AN049; we're finished
 21787 0000225B 31C0                    	xor	ax,ax			;	null terminate the PATH in
 21788 0000225D AB                      	stosw				;    	the environment
 21789 0000225E C3                      	retn
 21790                                  disppath:
 21791 0000225F E81404                  	call	find_path		;AN049;
 21792 00002262 E80300                  	call	print_path
 21793                                  	;call	CRLF2
 21794                                  	;retn
 21795                                  	; 21/02/2023
 21796 00002265 E9D806                  	jmp	CRLF2
 21797                                  
 21798                                  ; =============== S U B	R O U T	I N E =======================================
 21799                                  
 21800                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21801                                  print_path:
 21802 00002268 26803D00                	cmp	byte [es:di],0
 21803 0000226C 750A                    	jnz	short path1
 21804                                  path0:
 21805 0000226E BA[BE90]                	mov	dx,NULLPATH_PTR
 21806 00002271 0E                      	push	cs
 21807 00002272 07                      	pop	es
 21808 00002273 0E                      	push	cs
 21809 00002274 1F                      	pop	ds
 21810 00002275 E96531                  	jmp	std_printf
 21811                                  path1:
 21812 00002278 06                      	push	es
 21813 00002279 1F                      	pop	ds
 21814 0000227A 83EF05                  	sub	di,5
 21815 0000227D 89FE                    	mov	si,di
 21816 0000227F E89E04                  	call	SCASB2		; Look for null
 21817                                  	;cmp	cx,0FFh ; 255
 21818                                  	; 21/02/2023
 21819                                  	;ch = 0
 21820 00002282 80F9FF                  	cmp	cl,255
 21821 00002285 74E7                    	je	short path0
 21822 00002287 0E                      	push	cs
 21823 00002288 07                      	pop	es
 21824 00002289 BF[73A3]                	mov	di,Arg_Buf
 21825                                  	;mov	dx,100h ; 256
 21826                                  	;sub	dx,cx
 21827                                  	;xchg	dx,cx
 21828                                  	; 21/02/2023
 21829 0000228C F6D9                    	neg	cl ; 256-cl
 21830 0000228E F3A4                    	rep	movsb
 21831 00002290 BA[0691]                	mov	dx,arg_buf_ptr
 21832 00002293 0E                      	push	cs
 21833 00002294 1F                      	pop	ds
 21834 00002295 E94531                  	jmp	std_printf
 21835                                  
 21836                                  ; ---------------------------------------------------------------------------
 21837                                  
 21838                                  ; ****************************************************************
 21839                                  ; *
 21840                                  ; * ROUTINE:	 CLS
 21841                                  ; *
 21842                                  ; * FUNCTION:	 Clear the screen using INT 10h. If ANSI.SYS is
 21843                                  ; *		 installed, send a control string to clear the
 21844                                  ; *		 screen.
 21845                                  ; *
 21846                                  ; * INPUT:	 command line at offset 81H
 21847                                  ; *
 21848                                  ; * OUTPUT:	 none
 21849                                  ; *
 21850                                  ; ****************************************************************
 21851                                  
 21852                                  	; MSDOS 6.0
 21853                                  
 21854                                  ANSI_installed	equ 0FFh
 21855                                  
 21856                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21857                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21858                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21859                                  CLS:
 21860                                  	;;mov	ah,Mult_ANSI		;AN000; see if ANSI.SYS installed
 21861                                  	;mov	ah,1Ah
 21862                                  	;mov	al,0			;AN000;
 21863 00002298 B8001A                  	mov	ax,1A00h
 21864 0000229B CD2F                    	int	2Fh			;AN000;
 21865                                  		; - Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK
 21866                                  		; Return: AL = FFh if installed
 21867 0000229D 3CFF                    	cmp	al,ANSI_installed	;AN000;
 21868 0000229F 7429                    	je	short ansicls 		;AN000; installed - go do ANSI CLS
 21869                                  
 21870                                  check_lines:
 21871                                  	;mov	ax,(IOCTL SHL 8) + generic_ioctl_handle ; 440Ch
 21872 000022A1 B80C44                  	mov	ax,440Ch		;AN000; get lines per page on display
 21873                                  	;mov	bx,stdout		;AN000; lines for stdout
 21874 000022A4 BB0100                  	mov	bx,1   ; handle
 21875                                  	;;mov	ch,ioc_sc		;AN000; type is display
 21876                                  	;mov	ch,3   ; CON device	
 21877                                  	;;mov	cl,get_generic		;AN000; get information
 21878                                  	;mov	cl,7Fh ; minor function, get display info
 21879                                  	; 25/04/2023
 21880 000022A7 B97F03                  	mov	cx,037Fh
 21881 000022AA BA[E49E]                	mov	dx,Display_Ioctl	;AN000;
 21882 000022AD CD21                    	int	21h			;AN000;
 21883 000022AF 720A                    	jc	short no_variable	;AN000; function had error, use default
 21884                                  		; 21/02/2023
 21885                                  		; ds:dx = parameter block
 21886                                  		; --- https://stanislavs.org/helppc/int_21-44-c.html ---
 21887                                  		; offset 00h  byte  level (0 for DOS 4.0)
 21888                                  		;   	 01h  byte  reserved
 21889                                  		;   	 02h  word  length of following data
 21890                                  		;   	 04h  word  control flags
 21891                                  		;	       bit 0 set for blink, clear for intensity
 21892                                  		;	       bits 1 to 15 reserved
 21893                                  		;   	 06h  byte  mode type (1=text, 2=graphics)
 21894                                  		;   	 07h  byte  reserved
 21895                                  		;   	 08h  word  colors; 0=monochrome, n=bits per pixel
 21896                                  		;   	 0Ah  word  pixel columns
 21897                                  		;   	 0Ch  word  pixel rows
 21898                                  		;   	 0Eh  word  character columns
 21899                                  		;   	 10h  word  character rows
 21900                                  	
 21901                                  	;mov	ax,[LinPerPag] ; [Display_Ioctl+10h]
 21902                                  	;				;AN000; get number of rows returned
 21903                                  	;mov	dh,al			;AN000; set number of rows
 21904                                  	;mov	ax,[display_width] ; [Display_Ioctl+0Eh]
 21905                                  	;				;AN000; get number of columns returned
 21906                                  	;mov	dl,al			;AN000; set number of columns
 21907                                  	; 21/02/2023
 21908 000022B1 8A16[F29E]              	mov	dl,[display_width]
 21909 000022B5 8A36[F49E]              	mov	dh,[LinPerPag]
 21910 000022B9 EB3B                    	jmp	short regcls		;AN000; go do cls
 21911                                  
 21912                                  no_variable:
 21913                                  	;;mov	bx,stdout		;AC000; set handle as stdout
 21914                                  	;mov	bx,1
 21915                                  	; bx = 1
 21916                                  	;mov	ax,IOCTL SHL 8		;AC000; do ioctl - get device info
 21917 000022BB B80044                  	mov	ax,4400h
 21918 000022BE CD21                    	int	21h			;AC000;
 21919 000022C0 F6C280                  	test	dl,80h
 21920                                  	;test	dl,devid_ISDEV		;AC000; is handle a device
 21921 000022C3 7405                    	jz	short ansicls 		;AC000; If a file put out ANSI
 21922 000022C5 F6C210                  	test	dl,10h
 21923                                  	;test	dl,devid_SPECIAL	;AC000;
 21924 000022C8 7505                    	jnz	short cls_normal	;AC000; If not special CON, do ANSI
 21925                                  
 21926                                  ansicls:
 21927 000022CA E85200                  	call	ansi_cls		;AN000; clear the screen
 21928 000022CD EB2C                    	jmp	short cls_ret		;AN000; exit
 21929                                  
 21930                                  ; Get video mode
 21931                                  
 21932                                  cls_normal:				;AC000;
 21933                                  	;mov	ah,get_video_state	;AC000; set up to get video state
 21934 000022CF B40F                    	mov	ah,0Fh
 21935                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 21936 000022D1 CD10                    	int	10h
 21937 000022D3 3C03                    	cmp	al,3
 21938                                  	;cmp	al,video_alpha		;AC000; see if in text mode
 21939 000022D5 760A                    	jbe	short DoAlpha
 21940 000022D7 3C07                    	cmp	al,7
 21941                                  	;cmp	al,video_bw		;AC000; see if black & white card
 21942 000022D9 7406                    	je	short DoAlpha
 21943                                  
 21944                                  ; We are in graphics mode. Bogus IBM ROM does not scroll correctly. We will
 21945                                  ; be just as bogus and set the mode that we just got. This will blank the
 21946                                  ; screen too.
 21947                                  
 21948                                  	;mov	ah,set_video_mode	;AC000; set video mode call
 21949 000022DB B400                    	mov	ah,0
 21950                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 21951 000022DD CD10                    	int	10h
 21952 000022DF EB1A                    	jmp	short cls_ret		;AC000; exit
 21953                                  
 21954                                  DoAlpha:
 21955                                  
 21956                                  ; Get video mode and number of columns to scroll
 21957                                  
 21958                                  ;M01 - INT 10 Function 0F doesn't reliably return the number of rows on some
 21959                                  ;M01   adaptors. We circumvent this by reaching directly into the BIOS data
 21960                                  ;M01   area
 21961                                  ;M01   Commented out code here is the original
 21962                                  ;M01	mov	ah,get_video_state	;AC000; set up to get current video state
 21963                                  ;M01	int	video_io_int		;AC000; do int 10h - BIOS video IO
 21964                                  ;M01	mov	dl,ah
 21965                                  ;M01	mov	dh,linesperpage 	;AC000; have 25 rows on the screen
 21966                                  
 21967                                  ;M01   Following code lifted from a fix Compaq applied to ANSI
 21968                                  
 21969 000022E1 1E                      	push	ds
 21970                                  	;mov	ax,ROMBIOS_DATA 	; GET ROM Data segment	M01
 21971 000022E2 B84000                  	mov	ax,40h
 21972 000022E5 8ED8                    	mov	ds,ax			;  *			M01
 21973                                  
 21974                                  	;mov	dx,[CRT_Cols]		; Get Columns - assume < 256 M01
 21975 000022E7 8A164A00                	mov	dl,[4Ah]
 21976                                  	;mov	dh,[CRT_Rows]		; GET MAX NUM OF ROWS	M01
 21977 000022EB 8A368400                	mov	dh,[84h]
 21978 000022EF 1F                      	pop	ds			;			M01
 21979                                  
 21980 000022F0 08F6                    	or	dh,dh			; Q:ZERO		M01
 21981 000022F2 7502                    	jnz	short regcls		;  *JMP IF NO		M01
 21982                                  
 21983                                  	;mov	dh,LINESPERPAGE 	; SET TO 24 ROWS	M01
 21984                                  	; 25/04/2023
 21985 000022F4 B619                    	mov	dh,25
 21986                                  regcls:
 21987 000022F6 FEC6                    	inc	dh			; height+1		M018
 21988 000022F8 E80100                  	call	reg_cls 		; go clear the screen
 21989                                  cls_ret:
 21990 000022FB C3                      	retn				; exit
 21991                                  
 21992                                  ; ---------------------------------------------------------------------------
 21993                                  
 21994                                  ; MSDOS 6.0
 21995                                  
 21996                                  ; ****************************************************************
 21997                                  ; *
 21998                                  ; * ROUTINE:	 REG_CLS
 21999                                  ; *
 22000                                  ; * FUNCTION:	 Clear the screen using INT 10H.
 22001                                  ; *
 22002                                  ; * INPUT:	 DL = NUMBER OF COLUMNS
 22003                                  ; *		 DH = NUMBER OF ROWS
 22004                                  ; *
 22005                                  ; * OUTPUT:	 none
 22006                                  ; *
 22007                                  ; ****************************************************************
 22008                                  
 22009                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22010                                  reg_cls:
 22011                                  ; Set overscan to black.
 22012                                  
 22013 000022FC FECE                    	dec	dh			; decrement rows and columns
 22014 000022FE FECA                    	dec	dl			;  to zero base
 22015 00002300 52                      	push	dx			; save rows,columns
 22016                                  	;mov	ah,set_color_palette	; set up to set the color to blank
 22017 00002301 B40B                    	mov	ah,0Bh
 22018 00002303 31DB                    	xor	bx,bx
 22019                                  	;int	video_io_int		; do int 10h - BIOS video IO
 22020 00002305 CD10                    	int	10h
 22021 00002307 5A                      	pop	dx			;  restore rows,colums
 22022                                  
 22023 00002308 31C0                    	xor	ax,ax			; zero out ax
 22024 0000230A 89C1                    	mov	cx,ax			;  and cx
 22025                                  
 22026                                  ; Scroll active page
 22027                                  
 22028                                  	;mov	ah,scroll_video_page	; set up to scroll page up
 22029 0000230C B406                    	mov	ah,6
 22030                                  	;mov	bh,video_attribute	; attribute for blank line
 22031 0000230E B707                    	mov	bh,7
 22032 00002310 30DB                    	xor	bl,bl			; set BL to 0
 22033                                  	;int	video_io_int		; do int 10h - BIOS video IO
 22034 00002312 CD10                    	int	10h
 22035                                  
 22036                                  ; Seek to cursor to 0,0
 22037                                  
 22038                                  ;M022 following two lines added
 22039                                  	;mov	ah,get_video_state	; get current video page in BH
 22040 00002314 B40F                    	mov	ah,0Fh
 22041                                  	;int	video_io_int
 22042 00002316 CD10                    	int	10h
 22043                                  	;mov	ah,set_cursor_position	; set up to set cursor position
 22044 00002318 B402                    	mov	ah,2
 22045 0000231A 31D2                    	xor	dx,dx			; row and column 0
 22046                                  ;M022	mov	bh,0
 22047                                  	;int	video_io_int		; do into 10h - BIOS video IO
 22048 0000231C CD10                    	int	10h
 22049                                  
 22050 0000231E C3                      	retn
 22051                                  
 22052                                  ; ---------------------------------------------------------------------------
 22053                                  
 22054                                  ; MSDOS 6.0
 22055                                  
 22056                                  ; ****************************************************************
 22057                                  ; *
 22058                                  ; * ROUTINE:	 ANSI_CLS
 22059                                  ; *
 22060                                  ; * FUNCTION:	 Clear the screen using by writing a control code
 22061                                  ; *		 to STDOUT.
 22062                                  ; *
 22063                                  ; * INPUT:	 none
 22064                                  ; *
 22065                                  ; * OUTPUT:	 none
 22066                                  ; *
 22067                                  ; ****************************************************************
 22068                                  
 22069                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22070                                  ansi_cls:			;AC000;
 22071 0000231F BE[7793]                	mov	si,CLSSTRING
 22072                                  			; db 4,1Bh,'[2J'
 22073 00002322 AC                      	lodsb
 22074 00002323 88C1                    	mov	cl,al	; al = 4
 22075 00002325 30ED                    	xor	ch,ch
 22076                                  	;mov	ah,Raw_CON_IO
 22077 00002327 B406                    	mov	ah,6
 22078                                  clrloop:
 22079 00002329 AC                      	lodsb
 22080 0000232A 88C2                    	mov	dl,al
 22081 0000232C CD21                    	int	21h
 22082                                  		; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
 22083 0000232E E2F9                    	loop	clrloop
 22084 00002330 C3                      	retn
 22085                                  
 22086                                  ;============================================================================
 22087                                  ; TCMD2B.ASM, MSDOS 6.0, 1991
 22088                                  ;============================================================================
 22089                                  ; 08/10/2018 - Retro DOS v3.0
 22090                                  
 22091                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 156Dh
 22092                                  
 22093                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 22094                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 206Bh
 22095                                  
 22096                                  ; ---------------------------------------------------------------------------
 22097                                  
 22098                                  ; ****************************************************************
 22099                                  ; *
 22100                                  ; * ROUTINE:	 CTTY - Change console
 22101                                  ; *
 22102                                  ; * SYNTAX:	 CTTY device
 22103                                  ; *
 22104                                  ; * FUNCTION:	 If a valid console device is specified, CTTY will
 22105                                  ; *		 duplicate the device handle to STDIN, STDOUT and
 22106                                  ; *		 STDERR. This routine returns to LODCOM1.
 22107                                  ; *
 22108                                  ; * INPUT:	 command line at offset 81H
 22109                                  ; *
 22110                                  ; * OUTPUT:	 none
 22111                                  ; *
 22112                                  ; ****************************************************************
 22113                                  
 22114                                  	; 21/02/2023 - Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 22115                                  	; 08/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 22116                                  	; 10/06/2023
 22117                                  	; 03/08/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM
 22118                                  CTTY:
 22119                                  	; MSDOS 6.0
 22120 00002331 1E                      	push	ds			;AN000; Get local ES
 22121 00002332 07                      	pop	es			;AN000;
 22122 00002333 BE8100                  	mov	si,81h			;AC000; Get command argument for CTTY
 22123 00002336 BF[9996]                	mov	di,PARSE_CTTY
 22124                                  					;AC000; Get address of PARSE_CTTY
 22125 00002339 31C9                    	xor	cx,cx			;AC000; clear cx,dx
 22126 0000233B 31D2                    	xor	dx,dx			;AC000;
 22127 0000233D E8CC25                  	call	cmd_parse		;AC000; call parser
 22128                                  
 22129                                  	;cmp	ax,-1 ; 0FFFFh
 22130                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 22131                                  	;je	short ctty_error	;AN000; yes - error
 22132                                  	;;cmp	ax,RESULT_NO_ERROR ; 0	;AN000; did an error occur
 22133                                  	;and	ax,ax ; ax > 0 ?
 22134                                  	;jnz	short ctty_error	;AN000; YES -ERROR
 22135                                  	; 10/06/2023
 22136 00002340 40                      	inc	ax  ; cmp ax,-1
 22137 00002341 7434                    	jz	short ctty_error  ; 0FFFFh -> 0
 22138 00002343 48                      	dec	ax  ; cmp ax,0
 22139 00002344 7531                    	jnz	short ctty_error  ; 1 -> 0
 22140                                  	; ax = 0
 22141                                  
 22142 00002346 56                      	push	si			;AN000; save position in line
 22143 00002347 C536[CDA5]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 22144 0000234B BF[FE9D]                	mov	di,SrcBuf		;AN000; get address of srcbuf
 22145                                  ctty_move_filename:			;AN000; put filespec in srcbuf
 22146 0000234E AC                      	lodsb				;AN000; get a char from buffer
 22147 0000234F AA                      	stosb				;AN000; store in srcbuf
 22148                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN000; it char a terminator?
 22149 00002350 08C0                    	or	al,al ; al = 0 ?
 22150 00002352 75FA                    	jnz	short ctty_move_filename ; 26/04/2023
 22151                                  					;AN000; no - keep moving
 22152 00002354 5E                      	pop	si			;AN000; get line position back
 22153 00002355 BF[9996]                	mov	di,PARSE_CTTY		;AC000; Get address of PARSE_CTTY
 22154 00002358 E8B101                  	call	parse_check_eol 	;AN000; are we at end of line?
 22155                                  	;jz	short nocolon 		;AN000; yes - continue
 22156                                  	; 21/02/2023
 22157 0000235B 751A                    	jnz	short ctty_error
 22158                                  ;ctty_error:
 22159                                  	;jmp	short isbaddev		;AC000; yes - exit
 22160                                  
 22161                                  	; 21/02/2023
 22162                                  	; MSDOS 3.3
 22163                                  	;call	SETPATH
 22164                                  	;dec	si
 22165                                  	;dec	si
 22166                                  	;cmp	byte [si],':'
 22167                                  	;jnz	short NOCOLON
 22168                                  	;mov	byte [si],0
 22169                                  nocolon:
 22170                                  	; 21/02/2023
 22171                                  	; MSDOS 6.0
 22172 0000235D BA[FE9D]                	mov	dx,SrcBuf
 22173                                  ;NOCOLON:
 22174                                  	; MSDOS 3.3 & MSDOS 6.0
 22175                                  	;;mov	ax,(OPEN SHL 8) OR 2 ; Read and write
 22176                                  	;mov	ax,(OPEN<<8)|2 ; 3D02h
 22177 00002360 B8023D                  	mov	ax,3D02h ; 21/02/2023
 22178 00002363 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 22179                                  			; DS:DX	-> ASCIZ filename
 22180                                  			; AL = access mode
 22181                                  			; 2 - read & write
 22182 00002365 7210                    	jc	short isbaddev
 22183 00002367 89C3                    	mov	bx,ax
 22184                                  	;mov	ax,IOCTL*256 ; 4400h
 22185 00002369 B80044                  	mov	ax,4400h
 22186 0000236C CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 22187                                  			; BX = file or device handle
 22188 0000236E F6C280                  	test	dl,80h
 22189 00002371 750C                    	jnz	short devisok
 22190                                  closedev:
 22191                                  	;mov	ah,CLOSE ; 3Eh ; Close initial handle
 22192 00002373 B43E                    	mov	ah,3Eh
 22193 00002375 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 22194                                  			; BX = file handle
 22195                                  ctty_error:
 22196                                  isbaddev:
 22197 00002377 BA[C490]                	mov	dx,BADDEV_PTR
 22198 0000237A E86030                  	call	std_printf
 22199 0000237D EB40                    	jmp	short resret
 22200                                  
 22201                                  	;nop
 22202                                  devisok:
 22203                                  	; 21/02/2023
 22204                                  	; MSDOS 6.0
 22205 0000237F 52                      	push	dx		;AN007; save device info
 22206                                  	; 08/06/2023
 22207 00002380 A1[6791]                	mov	ax,[acrlf_ptr]	;AN021; get message number for 0d, 0a
 22208                                  	;mov	dh,util_msg_class
 22209 00002383 B6FF                    	mov	dh,-1 ; 0FFh	;AN021; this is a utility message
 22210 00002385 53                      	push	bx		;AN021; save handle
 22211 00002386 E83931                  	call	TSYSGETMSG	;AN021; get the address of the message
 22212 00002389 89F2                    	mov	dx,si		;AN021; get address into dx
 22213                                  	;mov	ax,(Write shl 8)
 22214 0000238B B80040                  	mov	ax,4000h	;AN007; write to device
 22215 0000238E B90200                  	mov	cx,2		;AN007; write two bytes
 22216 00002391 CD21                    	int	21h		;AN007;
 22217 00002393 5B                      	pop	bx		;AN021; get back handle
 22218 00002394 5A                      	pop	dx		;AN007; get back device info
 22219 00002395 72DC                    	jc	short closedev	;AN007; if error, quit
 22220                                  
 22221                                  	; MSDOS 3.3 & MSDOS 6.0
 22222 00002397 30F6                    	xor	dh,dh
 22223 00002399 80CA03                  	or	dl,3
 22224                                  	;;mov	ax,(IOCTL SHL 8) OR 1
 22225                                  	;mov	ax,(IOCTL<<8)|1 ; 4401h
 22226 0000239C B80144                  	mov	ax,4401h
 22227 0000239F CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 22228                                  			; BX = device handle,DH = 0
 22229                                  			; DL = device information to set 
 22230                                  			;	(bits 0-7 from	function 0)
 22231 000023A1 53                      	push	bx
 22232 000023A2 B90300                  	mov	cx,3
 22233 000023A5 31DB                    	xor	bx,bx
 22234                                  iclloop:			; Close basic handles
 22235                                  	;mov	ah,CLOSE ; 3Eh
 22236 000023A7 B43E                    	mov	ah,3Eh
 22237 000023A9 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 22238                                  			; BX = file handle
 22239 000023AB 43                      	inc	bx
 22240 000023AC E2F9                    	loop	iclloop
 22241 000023AE 5B                      	pop	bx		; Get handle
 22242                                  	;mov	ah,XDUP ; 45h
 22243 000023AF B445                    	mov	ah,45h
 22244 000023B1 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 22245                                  			; BX = file handle to duplicate
 22246                                  	;mov	ah,XDUP ; 45h
 22247 000023B3 B445                    	mov	ah,45h
 22248 000023B5 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 22249                                  			; BX = file handle to duplicate
 22250                                  	;mov	ah,XDUP ; 45h
 22251 000023B7 B445                    	mov	ah,45h
 22252 000023B9 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 22253                                  			; BX = file handle to duplicate
 22254                                  	;mov	ah,CLOSE ; 3Eh
 22255 000023BB B43E                    	mov	ah,3Eh
 22256 000023BD CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 22257                                  			; BX = file handle
 22258                                  resret:
 22259 000023BF 8E1E[D19B]              	mov	ds,[RESSEG]
 22260 000023C3 1E                      	push	ds
 22261                                  	;mov	ax,[18h]
 22262 000023C4 A11800                  	mov	ax,[PDB.JFN_TABLE] ; Get new 0 and 1
 22263 000023C7 A3[9F02]                	mov	[Io_Save],ax
 22264                                  	;;;mov	ax,31Eh ; MSDOS 3.3
 22265                                  	;;mov	ax,LODCOM1
 22266                                  	;;mov	ax,offset DATARES:TrnLodCom1_Trap  ; MSDOS 6.0
 22267                                  	;mov	ax,175h ; MSDOS 6.0
 22268 000023CA B8[D600]                	mov	ax,TrnLodCom1_Trap
 22269 000023CD 50                      	push	ax
 22270                                  
 22271 000023CE CB                      	retf		; Far return
 22272                                  
 22273                                  ; ---------------------------------------------------------------------------
 22274                                  
 22275                                  ;****************************************************************
 22276                                  ;*
 22277                                  ;* ROUTINE:	CHCP - Change code page internal command
 22278                                  ;*		(added DOS 3.30 07/21/86)
 22279                                  ;*
 22280                                  ;* SYNTAX:	CHCP [xxx]
 22281                                  ;*		where xxx is a valid code page
 22282                                  ;*
 22283                                  ;* FUNCTION:	If xxx is specified, CHCP will use INT 21H function
 22284                                  ;*		6402H to set the code page to xxxx. If no parameters
 22285                                  ;*		are specified, CHCP will use INT 21H function 6401H
 22286                                  ;*		to get global code page and display it to the user.
 22287                                  ;*
 22288                                  ;* INPUT:	command line at offset 81H
 22289                                  ;*
 22290                                  ;* OUTPUT:	none
 22291                                  ;*
 22292                                  ;****************************************************************
 22293                                  
 22294                                  NLSFUNC_installed equ  0FFh
 22295                                  set_global_cp	  equ  2
 22296                                  get_global_cp	  equ  1
 22297                                  
 22298                                  	; 21/02/2023 - Retro DOS v4.0
 22299                                  	; 09/06/2023 - Retro DOS v4.2 COMMAND.COM
 22300                                  	; 10/06/2023
 22301                                  	; 03/08/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM
 22302                                  CHCP:
 22303                                  	; MSDOS 6.0
 22304 000023CF 1E                      	push	ds		;AN000; Get local ES
 22305 000023D0 07                      	pop	es		;AN000;
 22306 000023D1 BE8100                  	mov	si,81h		;AC000; Get command argument for CHCP
 22307 000023D4 BF[A595]                	mov	di,PARSE_CHCP
 22308                                  				;AN000; Get address of PARSE_CHCP
 22309 000023D7 31C9                    	xor	cx,cx		;AC000; clear cx,dx
 22310 000023D9 31D2                    	xor	dx,dx		;AC000;
 22311 000023DB E84401                  	call    Parse_With_Msg	;AC018; call parser
 22312                                  
 22313                                  	;cmp	ax,-1
 22314                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 22315                                  	;;jne	short setcp	;AC000; no go get number & set code page
 22316                                  	;je	short getcp	;AC000; yes - no parm - get code page
 22317                                  ;setcp:
 22318                                  	;;cmp	ax,0
 22319                                  	;;cmp	ax,RESULT_NO_ERROR
 22320                                  	;			;AN000; did we have an error?
 22321                                  	;;jne	short cp_error	;AC018; yes - go issue message
 22322                                  	;and	ax,ax ; ax > 0 ?
 22323                                  	;jnz	short cp_error	
 22324                                  	; 10/06/2023
 22325 000023DE 40                      	inc	ax  ; cmp ax,-1	
 22326 000023DF 745C                    	jz	short getcp ; 0FFFFh -> 0
 22327 000023E1 48                      	dec	ax  ; cmp ax,0
 22328 000023E2 7556                    	jnz	short cp_error ; 1 -> 0
 22329                                  	; ax = 0
 22330                                  
 22331                                  	;;push	cx		;AN000; save positional count
 22332                                  	;mov	bx,PARSE1_ADDR	;AN000; get number returned
 22333                                  	;;mov	cx,[bx]		;AN000;  into cx
 22334                                  	;;mov	[system_cpage],cx
 22335                                  	;			;AN000; save user input number
 22336                                  	;;pop	cx		;AC000; restore positional count
 22337                                  	;; 21/02/2023
 22338                                  	;mov	di,[bx]
 22339                                  	;mov	[system_cpage],di
 22340                                  	; 09/06/2023	
 22341 000023E4 8B1E[CDA5]              	mov	bx,[PARSE1_ADDR]
 22342 000023E8 891E[799D]              	mov	[system_cpage],bx
 22343                                  	;
 22344 000023EC BF[A595]                	mov	di,PARSE_CHCP	;AN000; Get address of PARSE_CHCP
 22345 000023EF E81A01                  	call	parse_check_eol ;AN000; are we at end of line?
 22346 000023F2 7546                    	jnz	short cp_error	;AC000; no - exit
 22347                                  okset:
 22348                                  	;;mov	ah,NLSFUNC	;AN000; see if NLSFUNC installed
 22349                                  	;mov	ah,14h
 22350                                  	;mov	al,0		;AN000;
 22351 000023F4 B80014                  	mov	ax,1400h
 22352 000023F7 CD2F                    	int	2Fh		;AN000;
 22353                                  	;cmp	al,0FFh
 22354 000023F9 3CFF                    	cmp	al,NLSFUNC_installed
 22355                                  				;AN000;
 22356 000023FB 7405                    	je	short got_NLS 	;AN000; Yes - continue
 22357 000023FD BA[0890]                	mov	dx,NLSFUNC_PTR
 22358                                  				;AN000; no - set up error message
 22359 00002400 EB38                    	jmp	short cp_error	;AN000; error exit
 22360                                  
 22361                                  	; 21/02/2023
 22362                                  got_NLS:
 22363                                  	; MSDOS 6.0
 22364 00002402 8B1E[799D]              	mov	bx,[system_cpage]
 22365                                  				;AN000; get user input code page
 22366                                  ;SET_CP_TBL_NUM:
 22367                                  	;mov	[SYSTEM_CPAGE],bx ; MSDOS 3.3
 22368                                  	;
 22369                                  	; MSDOS 3.3 & MSDOS 6.0
 22370                                  	;;mov	ah,GETSETCDPG 	;get/set global code page function
 22371                                  	;mov	ah,66h
 22372                                  	;;mov	al,set_global_cp 
 22373                                  	;mov	al,2		;minor - set
 22374                                  	; 26/04/2023
 22375 00002406 B80266                  	mov	ax,6602h
 22376 00002409 CD21                    	int	21h
 22377                                  		; DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE
 22378                                  		; BX = active code page
 22379                                  		; DX = system code page (active page at boot time)
 22380                                  
 22381 0000240B 733F                    	jnc	short chcp_return
 22382                                  				;no error - exit
 22383                                  
 22384 0000240D 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2
 22385 00002410 7515                    	jnz	short chcp_other_error
 22386                                  
 22387                                  	;mov	ah,GETEXTENDEDERROR ; 59h
 22388 00002412 B459                    	mov	ah,59h
 22389 00002414 31DB                    	xor	bx,bx
 22390 00002416 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 22391                                  			; BX = version code (0000h for DOS 3.x)
 22392                                  
 22393 00002418 83F80D                  	cmp	ax,ERROR_INVALID_DATA ; 0Dh ; invalid code page
 22394 0000241B 7505                    	jne	short no_countrysys ; 26/04/2023
 22395                                  	;mov	dx,FNOTFOUNDPTR ; MSDOS 3.3
 22396 0000241D BA[0B90]                	mov	dx,INV_CODE_PAGE
 22397                                  	;jmp	cerror
 22398 00002420 EB18                    	jmp	short cp_error
 22399                                  
 22400                                  	; 21/02/2023
 22401                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 22402                                  no_countrysys:
 22403                                  ;M045;	mov	byte [msg_disp_class],ext_msg_class	   
 22404                                  ;					;AN000; set up extended error msg class
 22405                                  ;M045;	mov	dx,extend_buf_ptr	;AC000; get extended message pointer
 22406                                  ;M045;	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND
 22407                                  					;AN000; get message number in control block
 22408 00002422 BA[3392]                	mov	dx,NoCntry_Ptr
 22409 00002425 EB13                    	jmp	short cp_error
 22410                                  
 22411                                  chcp_other_error:		; end of p716
 22412                                  	;mov	ah,GETEXTENDEDERROR ; 59h ;error - see what it is
 22413 00002427 B459                    	mov	ah,59h
 22414 00002429 31DB                    	xor	bx,bx
 22415 0000242B CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 22416                                  			; BX = version code (0000h for DOS 3.x)
 22417 0000242D 83F841                  	cmp	ax,65		;was it access denied?
 22418 00002430 7505                    	jne	short none_set	;no - assume all failed
 22419 00002432 BA[EC8F]                	mov	dx,cp_not_all_ptr
 22420                                  				;set up message
 22421                                  	;jmp	cerror		;AC000; error exit
 22422 00002435 EB03                    	jmp     short cp_error
 22423                                  none_set:
 22424 00002437 BA[DE8F]                	mov	dx,cp_not_set_ptr
 22425                                  				;set up message
 22426                                  cp_error:
 22427 0000243A E9B008                  	jmp	cerror		;exit
 22428                                  getcp:
 22429                                  	;;mov	ah,GETSETCDPG ; 66h
 22430                                  	;mov	ah,66h		;get/set global code page function	
 22431                                  	;;mov	al,get_global_cp ; 1
 22432                                  	;mov	al,1		;minor - get
 22433                                  	; 26/04/2023
 22434 0000243D B80166                  	mov	ax,6601h
 22435 00002440 CD21                    	int	21h	; DOS -	3.3+ - GET GLOBAL CODE PAGE TABLE
 22436 00002442 891E[799D]              	mov	[system_cpage],bx
 22437                                  				;get active cp for output
 22438 00002446 BA[FA8F]                	mov	dx,cp_active_ptr
 22439 00002449 E8912F                  	call	std_printf	;print it out
 22440                                  chcp_return:
 22441 0000244C C3                      	retn
 22442                                  
 22443                                  ; ---------------------------------------------------------------------------
 22444                                  
 22445                                  ; ****************************************************************
 22446                                  ; *
 22447                                  ; * ROUTINE:	 TRUENAME
 22448                                  ; *
 22449                                  ; * FUNCTION:	 Entry point for the internal TRUENAME command.
 22450                                  ; *		 Parses the command line. If a path is found, set
 22451                                  ; *		 SRCXNAME to path. If only a drive letter is found,
 22452                                  ; *		 set SRCXNAME to the drive letter. If no path
 22453                                  ; *		 is found, set the path of SRCXNAME to dot (.) for
 22454                                  ; *		 current directory. Use the NAME TRANSLATE system
 22455                                  ; *		 call to get the real name and  then display the 
 22456                                  ; *		 real name. If an error occurs issue an error
 22457                                  ; *		 message and transfer control to  CERROR.
 22458                                  ; *
 22459                                  ; * INPUT:	 command line at offset 81H
 22460                                  ; *
 22461                                  ; * OUTPUT:	 none
 22462                                  ; *
 22463                                  ; ****************************************************************
 22464                                  
 22465                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22466                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2197h
 22467                                  
 22468                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 22469                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2741h
 22470                                  
 22471                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 22472                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:257Dh
 22473                                  
 22474                                  TRUENAME:				;AN000; TRUENAME entry point
 22475 0000244D 1E                      	push	ds			;AN000; Get local ES
 22476 0000244E 07                      	pop	es			;AN000;
 22477 0000244F BE8100                  	mov	si,81h			;AN000; Get command line
 22478 00002452 BF[0396]                	mov	di,PARSE_CHDIR		;AN000; Get address of PARSE_CHDIR
 22479 00002455 31C9                    	xor	cx,cx			;AN000; clear cx,dx
 22480 00002457 31D2                    	xor	dx,dx			;AN000;
 22481 00002459 E8C600                  	call	Parse_With_Msg		;AC018; call parser
 22482                                  
 22483 0000245C BF[FF98]                	mov	di,SRCXNAME		;AN000; get address of srcxname
 22484                                  	;cmp	ax,0FFFFh
 22485                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 22486                                  	;je	short tn_eol		;AN000; yes - go process
 22487                                  	;; 22/02/2023
 22488                                  	;;cmp	ax,0
 22489                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 22490                                  	;;jne	short tn_parse_error	;AN000; yes - go issue message
 22491                                  	;and	ax,ax ; ax = 0 ?
 22492                                  	;jnz	short tn_parse_error ; no, parse error	
 22493                                  	; 10/06/2023
 22494 0000245F 40                      	inc	ax  ; 0FFFFh -> 0 ; cmp ax,0FFFFh
 22495 00002460 7433                    	jz	short tn_eol ; ah = 0 ; *
 22496 00002462 48                      	dec	ax  ; 1 -> 0 ; cmp ax, 0
 22497 00002463 752D                    	jnz	short tn_parse_error
 22498                                  	
 22499                                  	;cmp	byte [PARSE1_TYPE],6
 22500 00002465 803E[C9A5]06            	cmp	byte [PARSE1_TYPE],result_drive
 22501                                  					;AN000; was a drive entered?
 22502                                  	;je	short tn_drive		;AN000; yes - go process
 22503                                  	;jmp	short tn_filespec	;AN000; nothing else - must be filespec
 22504                                  	; 23/02/2023
 22505 0000246A 7512                    	jne	short tn_filespec
 22506                                  
 22507                                  ;tn_eol: 
 22508                                  ;	;mov	ah,0			;AN000; no parameters on line
 22509                                  ;	mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 22510                                  ;	;mov	al,dot_chr		;AN000;   for current dir
 22511                                  ;	mov	al,'.'
 22512                                  ;	stosw				;AN000; store in srcxname
 22513                                  ;	jmp	short tn_doit		;AN000; go do command
 22514                                  
 22515                                  tn_drive:				;AN000; a drive was entered
 22516 0000246C 56                      	push	si			;AN000; save position in line
 22517 0000246D BE[CDA5]                	mov	si,PARSE1_ADDR		;AN000; get address of drive
 22518 00002470 AC                      	lodsb				;AN000; get the drive number
 22519 00002471 0440                    	add	al,"A"-1 ; 40h		;AN000; convert it to char
 22520 00002473 AA                      	stosb				;AN000; store it in srcxname
 22521                                  	;mov	ax,dot_colon		;AN000; get colon and . and
 22522 00002474 B83A2E                  	mov	ax,':.' ; 2E3Ah ; ah=".", al=":"
 22523 00002477 AB                      	stosw				;AN000;  store in srcxname
 22524                                  	;mov	al,0
 22525 00002478 B000                    	mov	al,END_OF_LINE_OUT	;AN000; put a terminator char
 22526 0000247A AA                      	stosb				;AN000;
 22527 0000247B 5E                      	pop	si			;AN000; get line position back
 22528 0000247C EB0C                    	jmp	short tn_check_eol	;AN000; check to make sure eol
 22529                                  
 22530                                  tn_filespec:				;AN000; a filespec was entered
 22531 0000247E 56                      	push	si			;AN000; save position in line
 22532 0000247F C536[CDA5]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 22533                                  
 22534                                  tn_move_filename:			;AN000; put filespec in srcxname
 22535 00002483 AC                      	lodsb				;AN000; get a char from buffer
 22536 00002484 AA                      	stosb				;AN000; store in srcxname
 22537                                  	;;cmp	al,0
 22538                                  	;cmp	al,END_OF_LINE_OUT	;AN000; it char a terminator?
 22539 00002485 08C0                    	or	al,al ; al = 0 ?
 22540 00002487 75FA                    	jnz	short tn_move_filename	;AN000; no - keep moving
 22541 00002489 5E                      	pop	si			;AN000; get line position back
 22542                                  
 22543                                  tn_check_eol:				;AN000; make sure no extra parms
 22544 0000248A BF[0396]                	mov	di,PARSE_CHDIR		;AN000; get address of parse_chdir
 22545 0000248D E87C00                  	call	parse_check_eol 	;AN000; are we at end of line?
 22546 00002490 7406                    	jz	short tn_doit 		;AN000; Yes - do the command
 22547                                  tn_parse_error: 			;AN000; A parse error occurred
 22548 00002492 E95808                  	jmp	cerror			;AN000; Go to error routine
 22549                                  
 22550                                  tn_eol: 
 22551                                  	;23/02/2023
 22552                                  	;;mov	ah,0			;AN000; no parameters on line
 22553                                  	;mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 22554                                  	;;mov	al,dot_chr		;AN000;   for current dir
 22555                                  	;mov	al,'.'
 22556                                  	; 10/06/2023
 22557                                  	;mov	ax,002Eh
 22558                                  	; ah = 0 ; *
 22559 00002495 B02E                    	mov	al,'.'  ;dot_chr ; 2Eh
 22560                                  	;	
 22561 00002497 AB                      	stosw				;AN000; store in srcxname
 22562                                  	; 23/02/2023
 22563                                  	;jmp	short tn_doit		;AN000; go do command
 22564                                  
 22565                                  tn_doit:				;AN000;
 22566 00002498 BE[FF98]                	mov	si,SRCXNAME		;AN000; set up srcxname as source
 22567 0000249B BF[309A]                	mov	di,COMBUF		;AN000; set up combuf as target (need big target)
 22568 0000249E B460                    	mov	ah,xNameTrans		;AN000; do name translate call
 22569                                  	;mov	ah,60h
 22570 000024A0 CD21                    	int	21h			;AN000;
 22571 000024A2 7311                    	jnc	short tn_print_xname	;AN000; If no error - print result
 22572                                  
 22573 000024A4 E892FB                  	call	Set_Ext_Error_Msg	;AN000; get extended message
 22574 000024A7 C706[7F9D][FF98]        	mov	word [string_ptr_2],SRCXNAME
 22575                                  					;AN000; get address of failed string
 22576                                  	;mov	byte [extend_buf_sub],1
 22577 000024AD C606[468F]01            	mov	byte [extend_buf_sub],one_subst
 22578                                  					;AN000; put number of subst in control block
 22579 000024B2 E93808                  	jmp	cerror			;AN000; Go to error routine
 22580                                  
 22581                                  tn_print_xname: 			;AN000;
 22582 000024B5 C706[7F9D][309A]        	mov	word [string_ptr_2],COMBUF
 22583                                  					;AN000; Set up address of combuf
 22584 000024BB BA[4C91]                	mov	dx,string_buf_ptr	;AN000; Set up address of print control block
 22585 000024BE E87F04                  	call	CRLF2			;AN000; print a crlf
 22586                                  	;call	Printf_Crlf		;AN000; print it out
 22587                                  	;retn				;AN000;
 22588                                  	; 23/02/2023
 22589 000024C1 E90B2F                  	jmp	Printf_Crlf
 22590                                  
 22591                                  ; ---------------------------------------------------------------------------
 22592                                  
 22593                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22594                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2219h
 22595                                  
 22596                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 22597                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:27C3h
 22598                                  
 22599                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22600                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2600h
 22601                                  _$EXIT:
 22602                                  	; MSDOS 6.0
 22603 000024C4 1E                      	push	ds			;AN000; save data segment
 22604 000024C5 8E1E[D19B]              	mov	ds,[RESSEG]		;AN000; get resident data segment
 22605                                  	;assume	ds:resgroup		;AN000;
 22606                                  
 22607 000024C9 803E[A202]00            	cmp	byte [PermCom],0	;AN045; is this a permanent COMMAND?
 22608 000024CE 740A                    	jz	short free_com		;AN045; no - free everything
 22609                                  
 22610                                  ;	We're a permanent command.
 22611                                  ;	Unless this is a singlecom (int 2Eh), don't deallocate transient.
 22612                                  
 22613 000024D0 833E[A502]FF            	cmp	word [SingleCom],-1	;M034
 22614 000024D5 7403                    	je	short no_reset		;M034 ; exit singlecom
 22615 000024D7 E92ADC                  	jmp	TCOMMAND		;permanent command, recycle
 22616                                  
 22617                                  free_com:
 22618                                  
 22619                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 22620                                  %if 0
 22621                                  	;mov	ax,(multdos shl 8 or message_2f)
 22622                                  	mov	ax,122Eh		;AN060; reset parse message pointers
 22623                                  	;mov	dl,SET_CRITICAL_MSG	;AN000; set up critical error message address
 22624                                  	mov	dl,5
 22625                                  	mov	di,[Crit_Msg_Off] 	;AN000; old offset of critical messages
 22626                                  	mov	es,[Crit_Msg_Seg] 	;AN000; old segment of critical messages
 22627                                  	int	2Fh			;AN000; go set it
 22628                                  %endif
 22629                                  
 22630                                  no_reset:				;AN045;
 22631 000024DA 1F                      	pop	ds			;AN000; restore local data segment
 22632                                  	;assume	ds:trangroup		;AN000;
 22633                                  ;M040
 22634                                  ; Restore user directory if the restore flag is set. RestUDir1 checks for
 22635                                  ;this, restores user dir if flag is set and resets the flag.
 22636                                  
 22637                                  	;invoke	RestUDir1		;restore user dir if needed ;M040
 22638 000024DB E80C03                  	call	RestUDir1
 22639 000024DE 8E06[D19B]              	mov	es,[RESSEG]
 22640                                  	;assume	es:resgroup
 22641                                  
 22642 000024E2 26A1[3E02]              	mov	ax,[es:Parent]
 22643                                  	;mov	[es:16h],ax
 22644                                  	;mov	[es:PDB_Parent_PID],ax
 22645 000024E6 26A31600                	mov	[es:PDB.PARENT_PID],ax
 22646 000024EA 26A1[4002]              	mov	ax,[es:OldTerm]
 22647                                  	;mov	[es:0Ah],ax
 22648                                  	;mov	[es:PDB_Exit],ax
 22649 000024EE 26A30A00                	mov	[es:PDB.EXIT],ax
 22650 000024F2 26A1[4202]              	mov	ax,[es:OldTerm+2]
 22651                                  	;mov	[es:0Ch],ax
 22652                                  	;mov	[es:PDB_Exit+2],ax
 22653 000024F6 26A30C00                	mov	[es:PDB.EXIT+2],ax
 22654                                  
 22655 000024FA 06                      	push	es
 22656 000024FB 8E06[E19B]              	mov	es,[TRAN_TPA]
 22657                                  	;mov	ah,DEALLOC
 22658 000024FF B449                    	mov	ah,49h
 22659 00002501 CD21                    	int	21h			; Now running in "free" space
 22660 00002503 07                      	pop	es
 22661                                  
 22662                                  	;mov	ah,Exit
 22663 00002504 B44C                    	mov	ah,4Ch
 22664                                  	;mov	al,byte ptr RetCode
 22665 00002506 26A0[9A02]              	mov	al,[es:RetCode]
 22666 0000250A CD21                    	int	21h
 22667                                  
 22668                                  ; ---------------------------------------------------------------------------
 22669                                  
 22670                                  ; MSDOS 6.0
 22671                                  ; ****************************************************************
 22672                                  ; *
 22673                                  ; * ROUTINE:	 PARSE_CHECK_EOL
 22674                                  ; *
 22675                                  ; * FUNCTION:	 Calls parser to see if end of line occurred.
 22676                                  ; *		 If not end of line, set up to print parse
 22677                                  ; *		 error message. ASSUMES NO MORE PARAMETERS ARE
 22678                                  ; *		 EXPECTED!
 22679                                  ; *
 22680                                  ; * INPUT:	 DS:SI	  last output from parser
 22681                                  ; *		 ES:DI	  points to parse block
 22682                                  ; *		 CX	  last output from parser
 22683                                  ; *
 22684                                  ; * OUTPUT:	 AX	  parser return code
 22685                                  ; *
 22686                                  ; *		 if end of line found
 22687                                  ; *		     zero flag set
 22688                                  ; *		 else
 22689                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 22690                                  ; *
 22691                                  ; ****************************************************************
 22692                                  
 22693                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22694                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2270h
 22695                                  
 22696                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22697                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2648h
 22698                                  parse_check_eol:
 22699 0000250C 31D2                    	xor	dx,dx			;AN000;
 22700 0000250E 8936[779D]              	mov	[parse_last],si 	;AN018; save start of parameter
 22701 00002512 E8F723                  	call	cmd_parse		;AN000; call parser
 22702 00002515 3CFF                    	cmp	al,-1 ; 0FFh
 22703                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN000; Are we at end of line?
 22704 00002517 7408                    	je	short parse_good_eol	;AN000; yes - no problem
 22705                                  	;cmp	ax,0
 22706                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; was any error found?
 22707 00002519 21C0                    	and	ax,ax ; ax = 0 ?
 22708 0000251B 7501                    	jnz	short ok_to_setup_pmsg	;AN018; yes - continue
 22709 0000251D 40                      	inc	ax			;AN018; set AX to 1 and turn off zero flag
 22710                                  ok_to_setup_pmsg:
 22711 0000251E E81000                  	call	setup_parse_error_msg	;AN018; go set up error message
 22712                                  parse_good_eol:
 22713                                  parse_msg_good:	; 23/02/2023
 22714 00002521 C3                      	retn				;AN000;
 22715                                  
 22716                                  ; ---------------------------------------------------------------------------
 22717                                  
 22718                                  ; MSDOS 6.0
 22719                                  ; ****************************************************************
 22720                                  ; *
 22721                                  ; * ROUTINE:	 PARSE_WITH_MSG
 22722                                  ; *
 22723                                  ; * FUNCTION:	 Calls parser. If an error occurred, the error
 22724                                  ; *		 message is set up.
 22725                                  ; *
 22726                                  ; * INPUT:	 DS:SI	  last output from parser
 22727                                  ; *		 ES:DI	  points to parse block
 22728                                  ; *		 CX	  last output from parser
 22729                                  ; *
 22730                                  ; * OUTPUT:	 AX	  parser return code
 22731                                  ; *
 22732                                  ; *		 if no error
 22733                                  ; *		     outputs from parser
 22734                                  ; *		 else
 22735                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 22736                                  ; *		     error message set up for STD_PRINTF
 22737                                  ; *
 22738                                  ; ****************************************************************
 22739                                  
 22740                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22741                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22742                                  Parse_With_Msg:
 22743 00002522 8936[779D]              	mov	[parse_last],si 	;AN018; save start of parameter
 22744 00002526 E8E323                  	call	cmd_parse		;AN018; call parser
 22745 00002529 3CFF                    	cmp	al,-1 ; 0FFh
 22746                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN018; Are we at end of line?
 22747 0000252B 74F4                    	je	short parse_msg_good	;AN018; yes - no problem
 22748                                  	;cmp	ax,0
 22749                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; did an error occur
 22750 0000252D 09C0                    	or	ax,ax ; ax = 0 ?
 22751 0000252F 74F0                    	jz	short parse_msg_good	;AN018; yes - no problem
 22752                                  	; 23/02/2023
 22753                                  	;call	setup_parse_error_msg	;AN018; go set up error message
 22754                                  ;parse_msg_good:
 22755                                  	;retn				;AN018;
 22756                                  	; 23/02/2023
 22757                                  	;jmp	short setup_parse_error_msg	
 22758                                  
 22759                                  ; ---------------------------------------------------------------------------
 22760                                  
 22761                                  ; MSDOS 6.0
 22762                                  ; ****************************************************************
 22763                                  ; *
 22764                                  ; * ROUTINE:	 SETUP_PARSE_ERROR_MSG
 22765                                  ; *
 22766                                  ; * FUNCTION:	 Calls parser.	If an error occurred, the error
 22767                                  ; *		 message is set up.
 22768                                  ; *
 22769                                  ; * INPUT:	 AX	     Parse error number
 22770                                  ; *		 SI	     Set to past last parameter
 22771                                  ; *		 Parse_last  Set to start of last parameter
 22772                                  ; *
 22773                                  ; * OUTPUT:	 MSG_DISPLAY_CLASS set to parse error
 22774                                  ; *		 error message set up for STD_PRINTF
 22775                                  ; *
 22776                                  ; ****************************************************************
 22777                                  
 22778                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22779                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22780                                  setup_parse_error_msg:
 22781 00002531 C606[428F]02            	mov	byte [msg_disp_class],parse_msg_class
 22782                                  	;mov	byte [msg_disp_class],2	;AC018; Set up parse message class
 22783 00002536 BA[448F]                	mov	dx,extend_buf_ptr	;AC018; get extended message pointer
 22784 00002539 C60400                  	mov	byte [si],END_OF_LINE_OUT ; 0
 22785                                  					;AC018; terminate the parameter string
 22786 0000253C A3[448F]                	mov	[extend_buf_ptr],ax	;AC018; get message number in control block
 22787 0000253F 83F802                  	cmp	ax,2
 22788                                  	;cmp	ax,LessArgs_Ptr 	;AC018; if required parameter missing
 22789 00002542 740D                    	je	short setup_parse_msg_ret
 22790                                  					;AN018;    no subst
 22791 00002544 8B36[779D]              	mov	si,[parse_last] 	;AC018; get start of parameter
 22792 00002548 8936[7F9D]              	mov	[string_ptr_2],si 	;AC018; get address of failed string
 22793 0000254C C606[468F]01            	mov	byte [extend_buf_sub],one_subst
 22794                                  					;AC018; put number of subst in control block
 22795                                  	;mov	byte [extend_buf_sub],1
 22796                                  setup_parse_msg_ret:
 22797 00002551 46                      	inc	si			;AN018; make sure zero flag not set
 22798 00002552 C3                      	retn				;AC018;
 22799                                  
 22800                                  ;============================================================================
 22801                                  ; TENV.ASM, MSDOS 6.0, 1991
 22802                                  ;============================================================================
 22803                                  ; 08/10/2018 - Retro DOS v3.0
 22804                                  
 22805                                  ; TITLE	Part6 COMMAND Transient routines.
 22806                                  
 22807                                  ;	Environment utilities and misc. routines
 22808                                  
 22809                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1690h
 22810                                  
 22811                                  ; 23/02/2023 - Retro DOS v4.0 (& v4.1)
 22812                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 22BDh
 22813                                  
 22814                                  ; ---------------------------------------------------------------------------
 22815                                  
 22816                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 22817                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 22818                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22819                                  ADD_PROMPT:
 22820 00002553 E8FC00                  	call	delete_prompt	; Delete any existing prompt
 22821 00002556 E8AD01                  	call	scan_double_null
 22822                                  
 22823                                  ADD_PROMPT2:
 22824 00002559 56                      	push	si
 22825 0000255A E89B01                  	call	GETARG
 22826 0000255D 5E                      	pop	si
 22827 0000255E 7501                    	jnz	short ADD_PROMPT3
 22828                                  ADD_PROMPT_RETN:
 22829 00002560 C3                      	retn
 22830                                  ADD_PROMPT3:			; Pre scan for arguments
 22831 00002561 E87501                  	call	move_name	; Move in name
 22832 00002564 E89101                  	call	GETARG
 22833 00002567 56                      	push	si
 22834 00002568 EB53                    	jmp	short ADD_NAME
 22835                                  
 22836                                  ;break	The SET command
 22837                                  
 22838                                  ; Input: DS:SI points to a CR terminated string
 22839                                  ; Output: carry flag is set if no room
 22840                                  ;	  otherwise name is added to environment
 22841                                  
 22842                                  DISP_ENVJ:
 22843 0000256A E9BC00                  	jmp	DISP_ENV
 22844                                  
 22845                                  ADD_NAME_TO_ENVIRONMENT:
 22846 0000256D E88801                  	call	GETARG
 22847 00002570 74F8                    	jz	short DISP_ENVJ
 22848                                  
 22849                                  ; check if line contains exactly one equals sign
 22850                                  
 22851 00002572 31DB                    	xor	bx,bx		; = count is 0
 22852 00002574 56                      	push	si		; Save pointer to beginning of line
 22853                                  EQLP:
 22854 00002575 AC                      	lodsb			; Get a char
 22855 00002576 3C0D                    	cmp	al,13 ; 0Dh	; IF CR we're all done
 22856 00002578 740F                    	je	short QUEQ	
 22857 0000257A 3C3D                    	cmp	al,'='		; Look for = sign	
 22858 0000257C 75F7                    	jne	short EQLP	; not there, get next char
 22859 0000257E FEC3                    	inc	bl		; Otherwise increment EQ count
 22860 00002580 803C0D                  	cmp	byte [si],13	; Look for CR following = sign
 22861 00002583 75F0                    	jne	short EQLP
 22862 00002585 FEC7                    	inc	bh		; Set BH=1 means no parameters
 22863 00002587 EBEC                    	jmp	short EQLP	; And look for more
 22864                                  QUEQ:
 22865 00002589 5E                      	pop	si		; Restore beginning of line
 22866 0000258A FECB                    	dec	bl		; Zero flag means only one EQ
 22867 0000258C 7406                    	jz	short ONEQ	; Good line
 22868 0000258E BA[1790]                	mov	dx,SYNTMES_PTR
 22869 00002591 E95907                  	jmp	cerror
 22870                                  ONEQ:
 22871 00002594 53                      	push	bx
 22872 00002595 E8BD00                  	call	delete_name_in_environment
 22873 00002598 5B                      	pop	bx
 22874 00002599 FECF                    	dec	bh
 22875 0000259B 74C3                    	jz	short ADD_PROMPT_RETN
 22876 0000259D E86601                  	call	scan_double_null
 22877 000025A0 89FB                    	mov	bx,di		; Save ptr to beginning of env var name
 22878 000025A2 E83401                  	call	move_name
 22879 000025A5 56                      	push	si
 22880 000025A6 87DF                    	xchg	bx,di		; Switch ptrs to beginning and end of
 22881                                  				;  env var name
 22882                                  		
 22883                                  ; We want to special-case COMSPEC. This is to reduce the amount of code
 22884                                  ; necessary in the resident for re-reading the transient. Let's look for
 22885                                  ; COMSPEC=
 22886                                  
 22887 000025A8 C606[5595]00            	mov	byte [comspec_flag],0 ; MSDOS 6.0 ; clear flag ; M024
 22888 000025AD BE[6A92]                	mov	si,COMSPECSTR ; "COMSPEC="
 22889 000025B0 B90400                  	mov	cx,4
 22890 000025B3 F3A7                    	repe	cmpsw
 22891 000025B5 7504                    	jnz	short NOT_COMSPEC
 22892                                  				; Zero set => exact match
 22893 000025B7 FE06[5595]              	inc	byte [comspec_flag] ; MSDOS 6.0 ; comspec is changing ; M024
 22894                                  	;mov	byte [COMSPEC_FLAG],1
 22895                                  NOT_COMSPEC:
 22896 000025BB 89DF                    	mov	di,bx		; Load ptr to end of env var name
 22897                                  ADD_NAME:
 22898 000025BD 5E                      	pop	si		; Add the value of the new env var
 22899 000025BE 56                      	push	si		;  to the environment.
 22900                                  ADD_NAME1:
 22901 000025BF AC                      	lodsb
 22902 000025C0 3C0D                    	cmp	al,13 ; 0Dh
 22903 000025C2 7405                    	je	short ADD_NAME_RET
 22904 000025C4 E8AD01                  	call	store_char
 22905 000025C7 EBF6                    	jmp	short ADD_NAME1
 22906                                  ADD_NAME_RET:
 22907 000025C9 5E                      	pop	si
 22908 000025CA 803E[5595]00            	cmp	byte [comspec_flag],0
 22909                                  				; If the new env var is comspec,	
 22910                                  ADD_NAME_JZ_RET:
 22911 000025CF 748F                    	jz	short ADD_PROMPT_RETN 
 22912                                  				;  copy the value into the
 22913                                  				;  comspec var in the resident
 22914                                  
 22915                                  ; We have changed the COMSPEC variable. We need to update the resident
 22916                                  ; pieces necessary to reread in the info. First, skip all delimiters
 22917                                  
 22918 000025D1 E87903                  	call	scanoff
 22919 000025D4 8E06[D19B]              	mov	es,[RESSEG]	;  comspec var in the resident
 22920                                  
 22921                                  ; Make sure that the printer knows where the beginning of the string is
 22922                                  
 22923 000025D8 BF[4B02]                	mov	di,ComSpec
 22924 000025DB 89FB                    	mov	bx,di
 22925                                  
 22926                                  ; Generate drive letter for display
 22927                                  
 22928 000025DD 31C0                    	xor	ax,ax		;g assume no drive first
 22929 000025DF 26A2[9402]              	mov	[es:ComDrv],al
 22930                                  	; 23/02/2023
 22931                                  	; MSDOS 6.0 (& 5.0)
 22932 000025E3 50                      	push	ax		;AN000; 3/3/KK
 22933 000025E4 8A04                    	mov	al,[si]		;AN000; 3/3/KK
 22934 000025E6 E83F01                  	call	testkanj	;AN000; 3/3/KK	
 22935 000025E9 58                      	pop	ax		;AN000; 3/3/KK
 22936 000025EA 7518                    	jnz	short _GOTDRIVE
 22937                                  	;
 22938 000025EC 807C013A                	cmp	byte [si+1],':'	; drive specified?
 22939 000025F0 7512                    	jne	short _GOTDRIVE
 22940 000025F2 8A04                    	mov	al,[si]		; get his specified drive
 22941                                  	; 23/02/2023
 22942 000025F4 E85B01                  	call	UPCONV
 22943                                  	;call	UPCONV_MAPCALL	; convert to uppercase
 22944 000025F7 2C41                    	sub	al,'A'		; convert to 0-based
 22945 000025F9 83C702                  	add	di,2
 22946 000025FC FEC0                    	inc	al		; convert to 1-based number
 22947 000025FE 26A2[9402]              	mov	[es:ComDrv],al
 22948                                  
 22949                                  ; Stick the drive letter in the prompt message. Nothing special needs to be
 22950                                  ; done here..
 22951                                  	;add	al,40h
 22952 00002602 0440                    	add	al,'A'-1
 22953                                  _GOTDRIVE:
 22954                                  	; 23/02/2023
 22955                                  	;;mov	[es:0BD9h],di	; MSDOS 3.3 COMMAND.COM offset 1734h
 22956                                  	;mov	[es:PUTBACKSUBSTPTR],di
 22957                                  	;mov	[es:0233h],di	; MSDOS 5.0 COMMAND.COM offset 236Eh
 22958 00002604 26893E[2A02]            	mov	[es:PutBackComSpec],di
 22959                                  				;g point to beginning of name after drive
 22960                                  	;;mov	[es:0A21h],al	; MSDOS 3.3 COMMAND.COM offset 1739h
 22961                                  	;mov	[es:PUTBACKDRV],al
 22962                                  	;mov	[es:0238h],al	; MSDOS 5.0 COMMAND.COM offset 2373h
 22963 00002609 26A2[2F02]              	mov	[es:PutBackDrv],al
 22964                                  
 22965                                  ; Copy chars until delim      	
 22966                                  
 22967 0000260D 89DF                    	mov	di,bx
 22968                                  COPY_COMSPEC:
 22969 0000260F AC                      	lodsb
 22970 00002610 E84203                  	call	DELIM
 22971 00002613 7407                    	jz	short COPYDONE
 22972 00002615 3C0D                    	cmp	al,13 ; 0Dh
 22973 00002617 7403                    	je	short COPYDONE
 22974 00002619 AA                      	stosb
 22975 0000261A EBF3                    	jmp	short COPY_COMSPEC
 22976                                  COPYDONE:
 22977 0000261C 30C0                    	xor	al,al		; Null terminate the string and quit
 22978 0000261E AA                      	stosb
 22979                                  	;mov	byte [comspec_flag],0
 22980 0000261F A2[5595]                	mov	[comspec_flag],al ; 0 ; 23/02/2023
 22981 00002622 4F                      	dec	di
 22982 00002623 26893E[8B02]            	mov	[es:ComSpec_End],di
 22983 00002628 C3                      	retn
 22984                                  
 22985                                  DISP_ENV:
 22986 00002629 8E1E[D19B]              	mov	ds,[RESSEG]
 22987 0000262D 8E1E[3A04]              	mov	ds,[EnvirSeg]
 22988                                  	; assume ds:nothing
 22989 00002631 31F6                    	xor	si,si
 22990                                  PENVLP:
 22991 00002633 803C00                  	cmp	byte [si],0
 22992 00002636 7497                    	jz	short ADD_NAME_JZ_RET
 22993 00002638 BF[73A3]                	mov	di,Arg_Buf
 22994                                  PENVLP2:
 22995 0000263B AC                      	lodsb
 22996 0000263C AA                      	stosb
 22997 0000263D 08C0                    	or	al,al
 22998 0000263F 75FA                    	jnz	short PENVLP2
 22999 00002641 BA[0691]                	mov	dx,arg_buf_ptr
 23000 00002644 1E                      	push	ds
 23001 00002645 06                      	push	es
 23002 00002646 1F                      	pop	ds
 23003                                  	; assume ds:nothing
 23004 00002647 E8852D                  	call	Printf_Crlf
 23005 0000264A 1F                      	pop	ds
 23006 0000264B EBE6                    	jmp	short PENVLP
 23007                                  
 23008                                  ; =============== S U B	R O U T	I N E =======================================
 23009                                  
 23010                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23011                                  delete_path:
 23012 0000264D BE[5E92]                	mov	si,PATH_TEXT ; "PATH="
 23013 00002650 EB03                    	jmp	short delete_name_in_environment
 23014                                  
 23015                                  ; =============== S U B	R O U T	I N E =======================================
 23016                                  
 23017                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23018                                  delete_prompt:
 23019 00002652 BE[6392]                	mov	si,PROMPT_TEXT ; "PROMPT="
 23020                                  
 23021                                  ; ---------------------------------------------------------------------------
 23022                                  
 23023                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23024                                  delete_name_in_environment:
 23025                                  
 23026                                  ; Input: DS:SI points to a "=" terminated string
 23027                                  ; Output: carry flag is set if name not found
 23028                                  ;	  otherwise name is deleted
 23029                                  
 23030 00002655 56                      	push	si
 23031 00002656 1E                      	push	ds
 23032 00002657 E82C00                  	call	FIND		; ES:DI points to name
 23033 0000265A 7217                    	jc	short del1
 23034 0000265C 89FE                    	mov	si,di		; Save it
 23035 0000265E E8BF00                  	call	SCASB2		; Scan for the nul
 23036 00002661 87F7                    	xchg	si,di
 23037                                  ;SR;
 23038                                  ; If we have only one env string, then the double null is lost when the last
 23039                                  ;string is deleted and we have an invalid empty environment with only a
 23040                                  ;single null. To avoid this, we will look for the double null case and then
 23041                                  ;move an extra null char.
 23042                                  ; Bugbug: The only possible problem is that the last pathstring
 23043                                  ;will be followed by a triple null. Is this really a problem?
 23044                                  
 23045                                  	; MSDOS 6.0
 23046 00002663 26803C00                	cmp	byte [es:si],0	;null char?
 23047 00002667 7501                    	jnz	short not_dnull	;no, we are at a double null
 23048 00002669 4E                      	dec	si		;point at the double null
 23049                                  not_dnull:
 23050                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23051 0000266A E86901                  	call	GETENVSIZ
 23052 0000266D 29F1                    	sub	cx,si
 23053 0000266F 06                      	push	es
 23054 00002670 1F                      	pop	ds		; ES:DI points to name
 23055                                  				; DS:SI points to next name
 23056 00002671 F3A4                    	rep	movsb
 23057                                  del1:
 23058 00002673 1F                      	pop	ds
 23059 00002674 5E                      	pop	si
 23060                                  find_retn:
 23061 00002675 C3                      	retn
 23062                                  
 23063                                  ; =============== S U B	R O U T	I N E =======================================
 23064                                  
 23065                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23066                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:23E2h
 23067                                  find_path:
 23068 00002676 BE[5E92]                	mov	si,PATH_TEXT ; "PATH="
 23069 00002679 EB03                    	jmp	short find_name_in_environment
 23070                                  
 23071                                  ; =============== S U B	R O U T	I N E =======================================
 23072                                  
 23073                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23074                                  find_prompt:
 23075 0000267B BE[6392]                	mov	si,PROMPT_TEXT ; "PROMPT="
 23076                                  
 23077                                  ; ---------------------------------------------------------------------------
 23078                                  
 23079                                  find_name_in_environment:
 23080                                  
 23081                                  ; Input: DS:SI points to a "=" terminated string
 23082                                  ; Output: ES:DI points to the arguments in the environment
 23083                                  ;	  zero is set if name not found
 23084                                  ;	  carry flag is set if name not valid format
 23085                                  
 23086 0000267E E80500                  	call	FIND		; Find the name
 23087 00002681 72F2                    	jc	short find_retn	; Carry means not found	
 23088 00002683 E99600                  	jmp	SCASB1		; Scan for = sign
 23089                                  
 23090                                  ; ---------------------------------------------------------------------------
 23091                                  	;nop
 23092                                  
 23093                                  ; =============== S U B	R O U T	I N E =======================================
 23094                                  
 23095                                  ; On return of FIND1, ES:DI points to beginning of name
 23096                                  
 23097                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 23098                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 23099                                  FIND:
 23100 00002686 FC                      	cld
 23101 00002687 E84100                  	call	COUNT0		; CX = Length of name
 23102 0000268A 8E06[D19B]              	mov	es,[RESSEG]
 23103                                  	;assume es:RESGROUP
 23104 0000268E 268E06[3A04]            	mov	es,[es:EnvirSeg]
 23105                                  	;assume es:NOTHING
 23106 00002693 31FF                    	xor	di,di
 23107                                  find1:	
 23108 00002695 51                      	push	cx
 23109 00002696 56                      	push	si
 23110 00002697 57                      	push	di
 23111                                  find11:
 23112 00002698 AC                      	lodsb
 23113                                  	; 23/02/2023 
 23114                                  	; MSDOS 6.0 (& 5.0)
 23115 00002699 E88C00                  	call	testkanj	
 23116 0000269C 740F                    	jz	short notkanj3
 23117 0000269E 4E                      	dec	si
 23118 0000269F AD                      	lodsw
 23119 000026A0 47                      	inc	di
 23120 000026A1 47                      	inc	di
 23121 000026A2 263B45FE                	cmp	ax,[es:di-2]
 23122 000026A6 7511                    	jne	short find12
 23123 000026A8 49                      	dec	cx
 23124 000026A9 E2ED                    	loop	find11
 23125 000026AB EB0C                    	jmp	short find12
 23126                                  notkanj3:
 23127 000026AD E8A200                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 23128                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 23129 000026B0 47                      	inc	di
 23130 000026B1 263A45FF                	cmp	al,[es:di-1]
 23131 000026B5 7502                    	jne	short find12
 23132 000026B7 E2DF                    	loop	find11
 23133                                  find12:
 23134 000026B9 5F                      	pop	di
 23135 000026BA 5E                      	pop	si
 23136 000026BB 59                      	pop	cx
 23137 000026BC 74B7                    	jz	short find_retn
 23138 000026BE 51                      	push	cx
 23139 000026BF E85E00                  	call	SCASB2		; Scan for a nul
 23140 000026C2 59                      	pop	cx
 23141 000026C3 26803D00                	cmp	byte [es:di],0
 23142 000026C7 75CC                    	jnz	short find1
 23143 000026C9 F9                      	stc			; Indicate not found
 23144 000026CA C3                      	retn
 23145                                  
 23146                                  ; =============== S U B	R O U T	I N E =======================================
 23147                                  
 23148                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23149                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2437h
 23150                                  COUNT0:
 23151 000026CB 1E                      	push	ds
 23152 000026CC 07                      	pop	es
 23153                                  	;assume es:nothing
 23154 000026CD 89F7                    	mov	di,si
 23155                                  ;COUNT1:
 23156 000026CF 57                      	push	di		; Count number of chars until "="
 23157 000026D0 E84900                  	call	SCASB1
 23158                                  	; 23/02/2023
 23159                                  ;	jmp	short COUNTX
 23160                                  ;COUNT2:
 23161                                  ;	push	di		; Count number of chars until nul
 23162                                  ;	call	SCASB2
 23163                                  ;COUNTX:
 23164 000026D3 59                      	pop	cx
 23165 000026D4 29CF                    	sub	di,cx
 23166 000026D6 87F9                    	xchg	di,cx
 23167                                  move_name_retn:
 23168 000026D8 C3                      	retn
 23169                                  
 23170                                  ; =============== S U B	R O U T	I N E =======================================
 23171                                  
 23172                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23173                                  move_name:
 23174 000026D9 803C0D                  	cmp	byte [si],13 ; 0Dh
 23175 000026DC 74FA                    	je	short move_name_retn
 23176 000026DE AC                      	lodsb
 23177                                  	; 23/02/2023 
 23178                                  	; MSDOS 6.0 (& 5.0)
 23179 000026DF E84600                  	call	testkanj		
 23180 000026E2 7409                    	jz	short notkanj1
 23181 000026E4 E88D00                  	call	store_char
 23182 000026E7 AC                      	lodsb
 23183 000026E8 E88900                  	call	store_char
 23184 000026EB EBEC                    	jmp	short move_name
 23185                                  notkanj1: 
 23186 000026ED E86200                  	call	UPCONV
 23187                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3
 23188 000026F0 E88100                  	call	store_char
 23189 000026F3 3C3D                    	cmp	al,'='
 23190 000026F5 75E2                    	jne	short move_name
 23191                                  getarg_retn:
 23192 000026F7 C3                      	retn
 23193                                  
 23194                                  ; =============== S U B	R O U T	I N E =======================================
 23195                                  
 23196                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23197                                  GETARG:
 23198 000026F8 BE8000                  	mov	si,80h
 23199 000026FB AC                      	lodsb
 23200 000026FC 08C0                    	or	al,al
 23201 000026FE 74F7                    	jz	short getarg_retn
 23202 00002700 E84A02                  	call	scanoff
 23203 00002703 3C0D                    	cmp	al,13 ; 0Dh
 23204                                  sdn_retn:
 23205 00002705 C3                      	retn
 23206                                  
 23207                                  ; =============== S U B	R O U T	I N E =======================================
 23208                                  
 23209                                  ; Point ES:DI to the final NULL string. Note that in an empty environment,
 23210                                  ; there is NO double NULL, merely a string that is empty.
 23211                                  
 23212                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23213                                  scan_double_null:
 23214 00002706 8E06[D19B]              	mov	es,[RESSEG]
 23215 0000270A 268E06[3A04]            	mov	es,[es:EnvirSeg]
 23216 0000270F 31FF                    	xor	di,di
 23217                                  
 23218                                  ; Top cycle-point. If the string here is empty, then we are done
 23219                                  
 23220                                  sdn1:
 23221 00002711 26803D00                	cmp	byte [es:di],0	; nul string?
 23222 00002715 74EE                    	jz	short sdn_retn	; yep, all done
 23223 00002717 E80600                  	call	SCASB2
 23224 0000271A EBF5                    	jmp	short sdn1
 23225                                  
 23226                                  ; =============== S U B	R O U T	I N E =======================================
 23227                                  
 23228                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23229                                  SCASB1:
 23230 0000271C B03D                    	mov	al,'='		; Scan for an =
 23231 0000271E EB02                    	jmp	short SCASBX
 23232                                  
 23233                                  ; =============== S U B	R O U T	I N E =======================================
 23234                                  
 23235                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23236                                  SCASB2:
 23237 00002720 30C0                    	xor	al,al		; Scan for a nul
 23238                                  
 23239                                  ; ---------------------------------------------------------------------------
 23240                                  
 23241                                  	; 23/02/2023
 23242                                  SCASBX:
 23243 00002722 B90001                  	mov	cx,256
 23244 00002725 F2AE                    	repne	scasb
 23245 00002727 C3                      	retn
 23246                                  
 23247                                  ; =============== S U B	R O U T	I N E =======================================
 23248                                  
 23249                                  ; MSDOS 6.0
 23250                                  
 23251                                  ;Bugbug: This is Kanji stuff - put it in conditionals
 23252                                  
 23253                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23254                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:249Ah
 23255                                  
 23256                                  	; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 23257                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2872h
 23258                                  testkanj:
 23259 00002728 1E                      	push	ds			;AN000;  3/3/KK
 23260 00002729 56                      	push	si			;AN000;  3/3/KK
 23261 0000272A 50                      	push	ax			;AN000;  3/3/KK
 23262 0000272B 2E8E1E[D19B]            	mov	ds,[cs:RESSEG]		;AN000;  Get resident segment
 23263 00002730 C536[BA02]              	lds	si,[Dbcs_Vector_Addr]	;AN000;  get DBCS vector
 23264                                  ktlop:					;AN000;  3/3/KK
 23265 00002734 833C00                  	cmp	word [si],0		;AN000;  end of Table 3/3/KK
 23266 00002737 740E                    	je	short notlead 		;AN000;  3/3/KK
 23267 00002739 58                      	pop	ax			;AN000;  3/3/KK
 23268 0000273A 50                      	push	ax			;AN000;  3/3/KK
 23269 0000273B 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 23270 0000273D 7208                    	jb	short notlead 		;AN000;  3/3/KK
 23271 0000273F 46                      	inc	si			;AN000;  3/3/KK
 23272 00002740 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 23273 00002742 7607                    	jbe	short islead		;AN000;  3/3/KK
 23274 00002744 46                      	inc	si			;AN000;  3/3/KK
 23275 00002745 EBED                    	jmp	short ktlop		;AN000;  try another range ; 3/3/KK
 23276                                  notlead:				;AN000;  3/3/KK
 23277 00002747 31C0                    	xor	ax,ax			;AN000;  set zero 3/3/KK
 23278 00002749 EB03                    	jmp	short ktret		;AN000;  3/3/KK
 23279                                  islead: 				;AN000;  3/3/KK
 23280 0000274B 31C0                    	xor	ax,ax			;AN000;  reset zero 3/3/KK
 23281 0000274D 40                      	inc	ax			;AN000;  3/3/KK
 23282                                  ktret:					;AN000;  3/3/KK
 23283 0000274E 58                      	pop	ax			;AN000;  3/3/KK
 23284 0000274F 5E                      	pop	si			;AN000;  3/3/KK
 23285 00002750 1F                      	pop	ds			;AN000;  3/3/KK
 23286 00002751 C3                      	retn				;AN000;  3/3/KK
 23287                                  
 23288                                  ; =============== S U B	R O U T	I N E =======================================
 23289                                  
 23290                                  ; MSDOS 6.0
 23291                                  
 23292                                  ; ****************************************************************
 23293                                  ; *
 23294                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 23295                                  ; *
 23296                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 23297                                  ; *		 the character in AL from the file upper case table
 23298                                  ; *		 in DOS if character if above  ascii 128, else
 23299                                  ; *		 subtracts 20H if between "a" and "z".
 23300                                  ; *
 23301                                  ; * INPUT:	 AL	      char to be upper cased
 23302                                  ; *		 FUCASE_ADDR  set to the file upper case table
 23303                                  ; *
 23304                                  ; * OUTPUT:	 AL	      upper cased character
 23305                                  ; *
 23306                                  ; ****************************************************************
 23307                                  
 23308                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23309                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:24C4h
 23310                                  
 23311                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 23312                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2A6Eh
 23313                                  
 23314                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 23315                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:289Ch
 23316                                  UPCONV:
 23317 00002752 3C80                    	cmp	al,80h			;AN000;  see if char is > ascii 128
 23318 00002754 7213                    	jb	short oth_fucase	;AN000;  no - upper case math
 23319 00002756 2C80                    	sub	al,80h			;AN000;  only upper 128 chars in table
 23320 00002758 1E                      	push	ds			;AN000;
 23321 00002759 53                      	push	bx			;AN000;
 23322 0000275A 8E1E[D19B]              	mov	ds,[RESSEG]		;AN000;  get resident data segment
 23323                                  	;lds	bx,dword ptr FUCase_Addr+1
 23324 0000275E C51E[B602]              	lds	bx,[FUCase_Addr+1]	;AN000;  get table address
 23325 00002762 83C302                  	add	bx,2			;AN000;  skip over first word
 23326                                  	;xlat	ds:byte ptr [bx]	;AN000;  convert to upper case
 23327 00002765 D7                      	xlat
 23328 00002766 5B                      	pop	bx			;AN000;
 23329 00002767 1F                      	pop	ds			;AN000;
 23330                                  	;jmp	short upconv_end	;AN000;  we finished - exit
 23331                                  	; 10/06/2023
 23332                                  upconv_end:
 23333                                  	; 24/02/2023
 23334 00002768 C3                      	retn
 23335                                  oth_fucase:				;AN000;
 23336 00002769 3C61                    	cmp	al,'a' ; small_a	;AC000; if between "a" and "z",
 23337 0000276B 72FB                    	jb	short upconv_end	;AC000;    subtract 20h to get
 23338 0000276D 3C7A                    	cmp	al,'z' ; small_z	;AC000;    upper case equivalent.
 23339 0000276F 77F7                    	ja	short upconv_end	;AC000;
 23340 00002771 2C20                    	sub	al,20h			;AC000; Change lower-case to upper
 23341                                  ;upconv_end:	; 10/06/2023		;AN000;
 23342 00002773 C3                      	retn
 23343                                  
 23344                                  ; ---------------------------------------------------------------------------
 23345                                  
 23346                                  ; MSDOS 3.3
 23347                                  
 23348                                  	; 24/02/2023
 23349                                  ;UPCONV_MAPCALL:
 23350                                  	;			; If between "a" and "z"
 23351                                  	;cmp	al,[small_a]
 23352                                  	;jb	short UPCONV_END
 23353                                  	;cmp	al,[small_z]
 23354                                  	;ja	short UPCONV_END
 23355                                  	;sub	al,20h		; Change lower-case to upper
 23356                                  ;UPCONV_END:
 23357                                  	;call	far [cs:MAP_CALL] ; (far) call to char mapping routine 
 23358                                  	;			  ; 	  for (current) country
 23359                                  	;retn
 23360                                  
 23361                                  ; =============== S U B	R O U T	I N E =======================================
 23362                                  
 23363                                  ; STORE A CHAR IN environment, GROWING IT IF NECESSARY
 23364                                  
 23365                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23366                                  store_char:
 23367 00002774 51                      	push	cx
 23368 00002775 53                      	push	bx
 23369                                  
 23370                                  	; 24/02/2023
 23371                                  	;;16/10/2018
 23372                                  	; MSDOS 6.0
 23373 00002776 06                      	push	es		;AN056;*
 23374 00002777 1E                      	push	ds		;AN056; Save local DS
 23375 00002778 8E1E[D19B]              	mov	ds,[RESSEG]	;AN056; Get resident segment
 23376 0000277C 8E06[3A04]              	mov	es,[EnvirSeg]	;AN056; Get environment segment
 23377 00002780 1F                      	pop	ds		;AN056; Get local segment back
 23378                                  
 23379                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23380 00002781 E85200                  	call	GETENVSIZ
 23381 00002784 89CB                    	mov	bx,cx		; Save room for double nul
 23382 00002786 83EB02                  	sub	bx,2
 23383 00002789 39DF                    	cmp	di,bx
 23384 0000278B 723F                    	jb	short store1
 23385 0000278D 50                      	push	ax
 23386 0000278E 51                      	push	cx
 23387 0000278F 53                      	push	bx		; Save Size of environment
 23388 00002790 E880E0                  	call	FREE_TPA
 23389 00002793 5B                      	pop	bx
 23390 00002794 83C302                  	add	bx,2		; Recover true environment size
 23391                                  
 23392 00002797 81FB0080                	cmp	bx,8000h	; Don't let environment grow > 32K
 23393 0000279B 7203                    	jb	short envsiz_ok
 23394                                  bad_env_size:			;AN056;
 23395 0000279D F9                      	stc
 23396 0000279E EB16                    	jmp	short envnoset
 23397                                  	;nop
 23398                                  envsiz_ok:
 23399 000027A0 B104                    	mov	cl,4
 23400 000027A2 D3EB                    	shr	bx,cl		; Convert back to paragraphs
 23401 000027A4 43                      	inc	bx
 23402                                  	; 24/02/2023
 23403                                  	; MSDOS 6.0
 23404 000027A5 8CC1                    	mov	cx,es		;AN056; Get environment segment
 23405 000027A7 01D9                    	add	cx,bx		;AN056; Add in size of environment
 23406 000027A9 83C120                  	add	cx,20h		;AN056; Add in some TPA
 23407 000027AC 8CC8                    	mov	ax,cs		;AN056; Get the transient segment
 23408 000027AE 39C1                    	cmp	cx,ax		;AN056; Are we hitting the transient?
 23409 000027B0 73EB                    	jnb	short bad_env_size
 23410                                  				;AN056; Yes - don't do it!!!
 23411                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23412 000027B2 B44A                    	mov	ah,4Ah
 23413                                  	;mov	ah,SETBLOCK ; 4Ah
 23414 000027B4 CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23415                                  			; ES = segment address of block	to change
 23416                                  			; BX = new size	in paragraphs
 23417                                  envnoset:
 23418 000027B6 9C                      	pushf
 23419 000027B7 06                      	push	es
 23420 000027B8 8E06[D19B]              	mov	es,[RESSEG]
 23421 000027BC E865E0                  	call	ALLOC_TPA
 23422 000027BF 07                      	pop	es
 23423 000027C0 9D                      	popf
 23424 000027C1 59                      	pop	cx
 23425 000027C2 58                      	pop	ax
 23426                                  	; 10/06/2023
 23427 000027C3 7307                    	jnc	short store1
 23428                                  	; 24/02/2023
 23429 000027C5 07                      	pop	es ; MSDOS 6.0	;AN056;*	
 23430                                  	;jnc	short store1
 23431 000027C6 BA[5B8F]                	mov	dx,ENVERR_PTR
 23432 000027C9 E92105                  	jmp	cerror
 23433                                  store1:	
 23434 000027CC AA                      	stosb
 23435 000027CD 26C7050000              	mov	word [es:di],0	; NULL IS AT END
 23436                                  	; 24/02/2023
 23437 000027D2 07                      	pop	es ; MSDOS 6.0	;AN056;*
 23438 000027D3 5B                      	pop	bx
 23439 000027D4 59                      	pop	cx
 23440 000027D5 C3                      	retn
 23441                                  
 23442                                  ; =============== S U B	R O U T	I N E =======================================
 23443                                  
 23444                                  	; 24/02/2023
 23445                                  GETENVSIZ:
 23446                                  
 23447                                  ;Get size of environment in bytes, rounded up to paragraph boundry
 23448                                  ;ES has environment segment
 23449                                  ;Size returned in CX, all other registers preserved
 23450                                  
 23451 000027D6 06                      	push	es
 23452 000027D7 50                      	push	ax
 23453 000027D8 8CC0                    	mov	ax,es
 23454 000027DA 48                      	dec	ax		;Point at arena
 23455 000027DB 8EC0                    	mov	es,ax
 23456                                  	;mov	ax,[es:3]
 23457 000027DD 26A10300                	mov	ax,[es:ARENA.size]
 23458 000027E1 B104                    	mov	cl,4
 23459 000027E3 D3E0                    	shl	ax,cl		;Convert to bytes
 23460 000027E5 89C1                    	mov	cx,ax
 23461 000027E7 58                      	pop	ax
 23462 000027E8 07                      	pop	es
 23463                                  getenvsiz_retn:
 23464 000027E9 C3                      	retn
 23465                                  
 23466                                  ; =============== S U B	R O U T	I N E =======================================
 23467                                  
 23468                                  	; 24/02/2023
 23469                                  RestUDir1:
 23470 000027EA 1E                      	push	ds
 23471 000027EB 8E1E[D19B]              	mov	ds,[RESSEG]
 23472 000027EF 803E[A102]00            	cmp	byte [RestDir],0
 23473 000027F4 1F                      	pop	ds
 23474 000027F5 74F2                    	jz	short getenvsiz_retn
 23475                                  
 23476                                  ; =============== S U B	R O U T	I N E =======================================
 23477                                  
 23478                                  	; 24/02/2023
 23479                                  RestUDir:
 23480 000027F7 BA[B39A]                	mov	dx,USERDIR1
 23481 000027FA B43B                    	mov	ah,3Bh
 23482                                  	;mov	ah,CHDir ; 3Bh
 23483 000027FC CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 23484                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 23485 000027FE 30C0                    	xor	al,al
 23486                                  	;call	SETREST
 23487                                  	;retn
 23488                                  	; 24/02/2023
 23489 00002800 E9DA08                  	jmp	SETREST
 23490                                  
 23491                                  ;============================================================================
 23492                                  ; TENV2.ASM, MSDOS 6.0, 1991
 23493                                  ;============================================================================
 23494                                  ; 07/10/2018 - Retro DOS v3.0
 23495                                  
 23496                                  ; TITLE	Part6 COMMAND Transient routines.
 23497                                  
 23498                                  ;	Environment utilities and misc. routines
 23499                                  
 23500                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 18C2h
 23501                                  
 23502                                  ; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23503                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2577h
 23504                                  
 23505                                  ; ---------------------------------------------------------------------------
 23506                                  
 23507                                  ; ****************************************************************
 23508                                  ; *
 23509                                  ; * ROUTINE:	 $CHDIR
 23510                                  ; *
 23511                                  ; * FUNCTION:	 Entry point for CHDIR command. Parse the command
 23512                                  ; *		 line. If path is found, CHDIR to path. If a drive
 23513                                  ; *		 letter is found, get and display the current dir
 23514                                  ; *		 of the specified drive. If nothing is found, get
 23515                                  ; *		 and display the current dir of the default drive.
 23516                                  ; *
 23517                                  ; * INPUT:	 command line at offset 81H
 23518                                  ; *
 23519                                  ; * OUTPUT:	 none
 23520                                  ; *
 23521                                  ; ****************************************************************
 23522                                  
 23523                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23524                                  
 23525                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 23526                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B21h
 23527                                  
 23528                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 23529                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:294Fh
 23530                                  
 23531                                  _$CHDIR:
 23532                                  	; MSDOS 6.0
 23533 00002803 BE8100                  	mov	si,81h
 23534 00002806 BF[0396]                	mov	di,PARSE_CHDIR
 23535                                  				;AN000; Get address of PARSE_CHDIR
 23536 00002809 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 23537 0000280B 31D2                    	xor	dx,dx		;AN000;
 23538 0000280D E812FD                  	call	Parse_With_Msg	;AC018; call parser
 23539                                  	
 23540                                  	;cmp	ax,-1
 23541                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 23542                                  	;je	short bwdj	; No args
 23543                                  	;;cmp	ax,0
 23544                                  	;;cmp	ax,RESULT_NO_ERROR
 23545                                  	;			;AC000; did we have an error?
 23546                                  	;or	ax,ax ; ax = 0 ?
 23547                                  	;jnz	short ChDirErr	;AC018; yes - exit
 23548                                  	
 23549                                  	; 10/06/2023
 23550 00002810 40                      	inc	ax	; cmp ax,-1
 23551 00002811 7414                    	jz	short bwdj ; 0FFFFh -> 0
 23552 00002813 48                      	dec	ax	; cmp ax,0
 23553 00002814 756F                    	jnz	short ChDirErr ; 1 -> 0
 23554                                  	; ax = 0
 23555                                  
 23556                                  	;cmp	byte [PARSE1_TYPE],6
 23557 00002816 803E[C9A5]06            	cmp	byte [PARSE1_TYPE],result_drive
 23558                                  				;AC000; was a drive entered?
 23559 0000281B 7511                    	jne	short REALCD	; no
 23560                                  
 23561                                  ; D: was found. See if there is anything more.
 23562                                  
 23563 0000281D BF[0396]                	mov	di,PARSE_CHDIR
 23564                                  				;AC000; get address of parse_chdir
 23565 00002820 31D2                    	xor	dx,dx		;AC000;
 23566 00002822 E8E7FC                  	call	parse_check_eol ;AC000; call parser
 23567 00002825 755E                    	jnz	short ChDirErr	;AC000;
 23568                                  bwdj:
 23569 00002827 E88AF9                  	call	build_dir_for_chdir
 23570                                  				; Drive only specified
 23571 0000282A E81301                  	call	CRLF2
 23572                                  chdir_retn:
 23573 0000282D C3                      	retn
 23574                                  
 23575                                  	; 24/02/2023
 23576                                  	; MSDOS 3.3
 23577                                  	;mov	ax,[COMSW]
 23578                                  	;or	ax,[ALLSWITCH]
 23579                                  	;mov	dx,BADPARMPTR
 23580                                  	;jnz	short CHDIR_ERR
 23581                                  	;mov	si,81h
 23582                                  	;call	SCANOFF
 23583                                  	;cmp	al,0Dh		; are we at end of line?
 23584                                  	;je	short BWDJ	; No args
 23585                                  	;inc	si
 23586                                  	;lodsb
 23587                                  	;cmp	al,':'
 23588                                  	;jne	short REALCD
 23589                                  	;push	si
 23590                                  	;call	SCANOFF
 23591                                  	;pop	si
 23592                                  	;cmp	al,0Dh		; was a drive entered?
 23593                                  	;jne	short REALCD	; no
 23594                                  ;BWDJ:
 23595                                  	;call	BUILD_DIR_FOR_CHDIR ; Drive only specified
 23596                                  	;call	CRLF2
 23597                                  ;CHDIR_RETN:
 23598                                  	;retn
 23599                                  
 23600                                  	; 24/02/2023
 23601                                  	; MSDOS 6.0
 23602                                  REALCD:
 23603 0000282E 56                      	push	si		;AN000; save position in line
 23604 0000282F C536[CDA5]              	lds	si,[PARSE1_ADDR]
 23605                                  				;AN000; get address of filespec
 23606 00002833 E86908                  	call	Move_To_SrcBuf	;AN000; move to srcbuf
 23607 00002836 5E                      	pop	si		;AN000; restore position in line
 23608 00002837 BF[0396]                	mov	di,PARSE_CHDIR	;AC000; get address of parse_chdir
 23609 0000283A 31D2                    	xor	dx,dx		;AC000;
 23610 0000283C E8CDFC                  	call	parse_check_eol ;AC000; call parser
 23611 0000283F 7544                    	jnz	short ChDirErr	;AC000;
 23612                                  	
 23613 00002841 E8A206                  	call	SETPATH
 23614 00002844 F606[9A9D]02            	test	byte [DestInfo],2
 23615 00002849 7519                    	jnz	short BadChDir
 23616                                  
 23617                                  	; 26/04/2023
 23618 0000284B B43B                    	mov	ah,3Bh
 23619                                  	;mov	ah,CHDir
 23620                                  	;int	21h
 23621                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23622 0000284D E86ADD                  	call    int_21h_indirect
 23623 00002850 73DB                    	jnc	short chdir_retn
 23624                                  	
 23625 00002852 E8F4F7                  	call	get_ext_error_number
 23626                                  				;AN022; get the extended error
 23627 00002855 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 23628                                  				;AN022; see if path not found
 23629 00002858 740A                    	je	short BadChDir	;AN022; yes - issue old message
 23630                                  ;SR;
 23631                                  ; We want to issue "Invalid Directory" message even if the path is valid
 23632                                  ;but is not a directory. The extended error returns "Access denied" which
 23633                                  ;is kind of confusing. Issue the old message if access denied error is 
 23634                                  ;returned
 23635                                  
 23636 0000285A 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 23637 0000285D 7405                    	je	short BadChDir
 23638                                  	
 23639 0000285F E8A200                  	call	set_ext_error_subst ;AN022;
 23640 00002862 EB21                    	jmp	short ChDirErr	;AN022;
 23641                                  
 23642                                  BadChDir:
 23643 00002864 BA[A490]                	mov	dx,badcd_ptr
 23644                                  ;ChDirErr:
 23645                                  ;	call	std_eprintf
 23646                                  ;mkdir_retn:
 23647                                  	;retn
 23648                                  	; 24/02/2023
 23649 00002867 EB1C                    	jmp	short ChDirErr	;AN022;
 23650                                  
 23651                                  	; 24/02/2023
 23652                                  	; MSDOS 3.3
 23653                                  ;REALCD:
 23654                                  	;call	SETPATH
 23655                                  	;test	byte [DESTINFO],2
 23656                                  	;jnz	short BADCHDIR
 23657                                  	;mov	ah,CHDir ; 3Bh
 23658                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 23659                                  	;		; DS:DX	-> ASCIZ directory name	(may include drive)
 23660                                  	;jnc	short CHDIR_RETN
 23661                                  ;BADCHDIR:
 23662                                  	;mov	dx,BADCDPTR
 23663                                  ;CHDIR_ERR:
 23664                                  	;call	STD_EPRINTF
 23665                                  ;MKDIR_RETN:
 23666                                  	;retn
 23667                                  
 23668                                  ; =============== S U B	R O U T	I N E =======================================
 23669                                  
 23670                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23671                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:25E2h
 23672                                  
 23673                                  	; 11/06/2023 - Retro DOS v4.2
 23674                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B8Ch
 23675                                  
 23676                                  	; 04/08/2024 - Retro DOS v5.0
 23677                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:29BBh
 23678                                  
 23679                                  _$MKDIR:
 23680                                  	; MSDOS 6.0
 23681 00002869 E86700                  	call	SETRMMK
 23682 0000286C 7217                    	jc	short MkDirErr
 23683                                  
 23684 0000286E B439                    	mov	ah,39h
 23685                                  	;mov	ah,MKDIR
 23686                                  	;int	21h
 23687                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23688 00002870 E847DD                  	call    int_21h_indirect
 23689 00002873 7313                    	jnc	short mkdir_retn
 23690                                  
 23691 00002875 E8D1F7                  	call	get_ext_error_number	
 23692                                  				;AN022; get the extended error
 23693 00002878 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 23694                                  				;AN022; see if path not found
 23695 0000287B 742C                    	je	short MD_other_err
 23696                                  				;AN022; yes - issue old message
 23697 0000287D 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 23698                                  				;AN022; access denied?
 23699 00002880 7407                    	je	short badmderr	;AN022; yes - see if file exists
 23700                                  	
 23701 00002882 E87F00                  	call	set_ext_error_subst
 23702                                  				;AN022;
 23703                                  	;jmp	short MkDirerr	;AC022; yes - go print it
 23704                                  	; 24/02/2023
 23705                                  ChDirErr:
 23706                                  MkDirErr:
 23707                                  RmDirErr:
 23708 00002885 E84D2B                  	call	std_eprintf
 23709                                  mkdir_retn:
 23710                                  rmdir_retn:
 23711 00002888 C3                      	retn
 23712                                  	
 23713                                  badmderr:
 23714 00002889 BA[FF98]                	mov	dx,SRCXNAME	;AN006; Set Disk transfer address
 23715 0000288C B41A                    	mov	ah,1Ah
 23716                                  	;mov	ah,Set_DMA	;AN006;
 23717                                  	;int	21h		;AN006;
 23718                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23719 0000288E E829DD                  	call    int_21h_indirect
 23720                                  	
 23721 00002891 B44E                    	mov	ah,4Eh
 23722                                  	;mov	ah,Find_First	;AN006; see if file/dir exists
 23723                                  	;mov	cx,10h
 23724 00002893 B91000                  	mov	cx,ATTR_DIRECTORY
 23725                                  				;AN006;   search for directory
 23726                                  	;int	21h		;AN006;
 23727                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23728 00002896 E821DD                  	call    int_21h_indirect
 23729 00002899 720E                    	jc	short MD_other_err
 23730                                  				;AN006; doesn't exist - must be something else
 23731                                  	;;mov	dl,SRCXNAME.find_buf_attr
 23732                                  				;AN006; we found a file/dir
 23733                                  	;mov	dl,[SRCXNAME+21] 
 23734 0000289B 8A16[1499]              	mov	dl,[SRCXNAME+FIND_BUF.ATTR]
 23735 0000289F F6C210                  	test	dl,ATTR_DIRECTORY
 23736                                  				;AN006; was it a directory?
 23737 000028A2 7405                    	jz	short MD_other_err
 23738                                  				;AN006; no - must have been a file
 23739 000028A4 BA[B391]                	mov	dx,MD_EXISTS_PTR
 23740                                  				;AN006; set up already exists error
 23741 000028A7 EBDC                    	jmp	short MkDirErr	;AN006; make sure we didn't have network error
 23742                                  MD_other_err:			;AN006;
 23743 000028A9 BA[A790]                	mov	dx,badmkd_ptr
 23744                                  ;MkDirErr:
 23745                                  	;call	std_eprintf
 23746                                  	;retn
 23747                                  	; 24/02/2023
 23748 000028AC EBD7                    	jmp	short MkDirErr
 23749                                  
 23750                                  	; 24/02/2023
 23751                                  	; MSDOS 3.3
 23752                                  	;call	SETRMMK
 23753                                  	;jb	short MKDIRERR
 23754                                  	;mov	ah,MKDIR ; 39h
 23755                                  	;int	21h	; DOS -	2+ - CREATE A SUBDIRECTORY (MKDIR)
 23756                                  	;		; DS:DX	-> ASCIZ pathname (may include drive)
 23757                                  	;jnc	short MKDIR_RETN
 23758                                  	;mov	dx,BADMKDPTR
 23759                                  	;call	GET_EXT_ERR_NUMBER
 23760                                  ;MKDIRERR:
 23761                                  	;call	STD_EPRINTF
 23762                                  	;retn
 23763                                  
 23764                                  ; =============== S U B	R O U T	I N E =======================================
 23765                                  
 23766                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23767                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2656h
 23768                                  	
 23769                                  	; 11/06/2023 - Retro DOS v4.2
 23770                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2C00h
 23771                                  	
 23772                                  	; 04/08/2024 - Retro DOS v5.0
 23773                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2A32h
 23774                                  
 23775                                  _$RMDIR:
 23776 000028AE E82200                  	call	SETRMMK
 23777 000028B1 72D2                    	jb	short RmDirErr
 23778 000028B3 7519                    	jnz	short badrderr
 23779                                  
 23780 000028B5 B43A                    	mov	ah,3Ah
 23781                                  	;mov	ah,RMDIR ; 3Ah
 23782                                  	;int	21h	; DOS -	2+ - REMOVE A DIRECTORY	ENTRY (RMDIR)
 23783                                  			; DS:DX	-> ASCIZ pathname (may include drive)
 23784                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23785 000028B7 E800DD                  	call    int_21h_indirect
 23786 000028BA 73CC                    	jnc	short rmdir_retn ; 24/02/2023
 23787                                  
 23788                                  	; 24/02/2023
 23789                                  	; MSDOS 6.0
 23790 000028BC E88AF7                  	call	get_ext_error_number
 23791                                  				;AN022; get the extended error
 23792 000028BF 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 23793                                  				;AN022; see if path not found
 23794 000028C2 740A                    	je	short badrderr	;AN022; yes - issue old message
 23795 000028C4 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 23796                                  				;AN022; access denied?
 23797 000028C7 7405                    	je	short badrderr	;AN022; yes - issue old message
 23798                                  
 23799 000028C9 E83800                  	call	set_ext_error_subst
 23800                                  				;AN022;
 23801 000028CC EBB7                    	jmp	short RmDirErr	;AC022; yes - go print it
 23802                                  
 23803                                  	; MSDOS 6.0
 23804                                  badrderr:
 23805                                  	; 24/02/2023
 23806 000028CE BA[AA90]                	mov	dx,badrmd_ptr
 23807 000028D1 EBB2                    	jmp	short RmDirErr
 23808                                  ;RmDirErr:
 23809                                  	;call	std_eprintf
 23810                                  ;;rmdir_retn
 23811                                  	;retn
 23812                                  
 23813                                  	; 24/02/2023
 23814                                  	; MSDOS 3.3
 23815                                  	;mov	dx,BADRMDPTR
 23816                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 23817                                  ;RMDIRERR:
 23818                                  	;call	STD_EPRINTF
 23819                                  ;RMDIR_RETN:
 23820                                  	;retn
 23821                                  
 23822                                  ; =============== S U B	R O U T	I N E =======================================
 23823                                  
 23824                                  ; 	<Common MkDir/RmDir set up code>
 23825                                  ;****************************************************************
 23826                                  ;*
 23827                                  ;* ROUTINE:	SETRMMK
 23828                                  ;*
 23829                                  ;* FUNCTION:	Parse routine for the internal MKDIR and RMDIR
 23830                                  ;*		commands. Parses the command line for a required
 23831                                  ;*		filespec.
 23832                                  ;*
 23833                                  ;* INPUT:	command line at offset 81H
 23834                                  ;*
 23835                                  ;* OUTPUT:	carry clear
 23836                                  ;*		    DS:DX points to ASCIIZ argument
 23837                                  ;*		carry set
 23838                                  ;*		    DS:DX has error message pointer
 23839                                  ;*
 23840                                  ;****************************************************************
 23841                                  
 23842                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23843                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2624h
 23844                                  	
 23845                                  	; 11/06/2023 - Retro DOS v4.2
 23846                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2BCEh
 23847                                  
 23848                                  	; 04/08/2024 - Retro DOS v5.0
 23849                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2A00h
 23850                                  
 23851                                  SETRMMK:
 23852                                  	; MSDOS 6.0
 23853 000028D3 BE8100                  	mov	si,81h
 23854 000028D6 BF[FA95]                	mov	di,PARSE_MRDIR 	;AN000; Get address of PARSE_MRDIR
 23855 000028D9 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 23856 000028DB 31D2                    	xor	dx,dx		;AN000;
 23857                                  	;invoke	Parse_With_Msg	;AC000; call parser
 23858 000028DD E842FC                  	call	Parse_With_Msg
 23859                                  	;cmp	ax,0
 23860                                  	;cmp	ax,RESULT_NO_ERROR
 23861 000028E0 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 23862 000028E2 7519                    	jnz	short noargerr	;AC000; yes - exit
 23863                                  
 23864 000028E4 BF[FF98]                	mov	di,SRCXNAME
 23865                                  				;AN000; get address of srcxname
 23866 000028E7 57                      	push	di		;AN000; save address
 23867 000028E8 56                      	push	si		;AN000; save position in line
 23868 000028E9 C536[CDA5]              	lds	si,[PARSE1_ADDR]
 23869                                  				;AN000; get address of path
 23870                                  mrdir_move_filename:		;AN000; put filespec in srcxname
 23871 000028ED AC                      	lodsb			;get a char from buffer
 23872 000028EE AA                      	stosb			;AN000; store in srcxname
 23873                                  	;cmp	al,0
 23874                                  	;cmp	al,END_OF_LINE_OUT
 23875 000028EF 20C0                    	and	al,al ; 0 ?	;AC000; it char a terminator?
 23876 000028F1 75FA                    	jnz	short mrdir_move_filename
 23877                                  				;AC000; no - keep moving
 23878 000028F3 5E                      	pop	si		;AN000; get line position back
 23879                                  
 23880                                  ; we have scanned an argument.	See if any args beyond.
 23881                                  
 23882 000028F4 BF[FA95]                	mov	di,PARSE_MRDIR
 23883 000028F7 E812FC                  	call	parse_check_eol ;AC000; are we at end of line?
 23884 000028FA 5A                      	pop	dx		;AC000; get address of SRCXNAME
 23885                                  	;retz			;yes - return no error
 23886 000028FB 7406                    	jz	short setrmmk_retn
 23887                                  noargerr:
 23888 000028FD BA[448F]                	mov	dx,extend_buf_ptr
 23889                                  				;AC000; get extended message pointer
 23890 00002900 31C0                    	xor	ax,ax
 23891 00002902 F9                      	stc
 23892                                  setrmmk_retn:
 23893 00002903 C3                      	retn
 23894                                  
 23895                                  	; 24/02/2023
 23896                                  	; MSDOS 3.3
 23897                                  ;SETRMMK:
 23898                                  	;mov	si,81h
 23899                                  	;call	SCANOFF
 23900                                  	;cmp	al,0Dh
 23901                                  	;je	short NOARGERR
 23902                                  	;mov	dx,si
 23903                                  ;SETRMMK1:
 23904                                  	;lodsb
 23905                                  	;call	DELIM
 23906                                  	;jz	short SETRMMK3
 23907                                  	;cmp	al,0Dh
 23908                                  	;jne	short SETRMMK1
 23909                                  	;mov	byte [si-1],0
 23910                                  ;SETRMMK2:
 23911                                  	;retn
 23912                                  ;SETRMMK3:
 23913                                  	;mov	byte [si-1],0
 23914                                  	;push	si
 23915                                  	;call	SCANOFF
 23916                                  	;pop	si
 23917                                  	;cmp	al,0Dh
 23918                                  	;je	short SETRMMK2
 23919                                  ;NOARGERR:
 23920                                  	;mov	dx,BADARGSPTR
 23921                                  	;xor	ax,ax
 23922                                  	;stc
 23923                                  ;SETRMMK_RETN:
 23924                                  	;retn
 23925                                  
 23926                                  ; =============== S U B	R O U T	I N E =======================================
 23927                                  
 23928                                  ; MSDOS 6.0
 23929                                  
 23930                                  ;****************************************************************
 23931                                  ;*
 23932                                  ;* ROUTINE:	Set_ext_error_subst
 23933                                  ;*
 23934                                  ;* FUNCTION:	Sets up substitution for extended error
 23935                                  ;*
 23936                                  ;* INPUT:	AX - extended error number
 23937                                  ;*		DX - offset of string
 23938                                  ;*
 23939                                  ;* OUTPUT:	Extend_Buf_Ptr set up for STD_EPRINTF
 23940                                  ;*
 23941                                  ;****************************************************************
 23942                                  
 23943                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23944                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:267Ch
 23945                                  set_ext_error_subst:
 23946                                  	;mov	byte [msg_disp_class],1
 23947 00002904 C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class
 23948                                  					;AN022; set up extended error msg class
 23949 00002909 8916[7F9D]              	mov	[string_ptr_2],dx 	;AN022; get address of failed string
 23950                                  	;mov	byte [extend_buf_sub],1
 23951 0000290D C606[468F]01            	mov	byte [extend_buf_sub],one_subst
 23952                                  	;AN022; put number of subst in control block
 23953 00002912 BA[448F]                	mov	dx,extend_buf_ptr 	;AN022; get extended message pointer
 23954 00002915 A3[448F]                	mov	[extend_buf_ptr],ax	;AN022; get message number in control block
 23955                                  savudir_err_retn: ; 24/02/2023
 23956 00002918 C3                      	retn				;AN022; return
 23957                                  
 23958                                  ; =============== S U B	R O U T	I N E =======================================
 23959                                  
 23960                                  ; <SavUDir - preserve the users current directory on a particular drive>
 23961                                  
 23962                                  ; SavUDir - move the user's current directory on a drive into UserDir1
 23963                                  ; SavUDir1 - move the user's current directory on a drive into a specified
 23964                                  ;   buffer
 23965                                  ;
 23966                                  ;   Inputs:	DL has 1-based drive number
 23967                                  ;		ES:DI has destination buffer (SavUDir1 only)
 23968                                  ;   Outputs:	Carry Clear
 23969                                  ;		    DS = TranGroup
 23970                                  ;		Carry Set
 23971                                  ;		    AX has error code
 23972                                  ;   Registers Modified: AX, SI
 23973                                  
 23974                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23975                                  SAVUDIR:
 23976 00002919 BF[B39A]                	mov	di,USERDIR1
 23977                                  ; --------------
 23978                                  SAVUDIR1:
 23979 0000291C 88D0                    	mov	al,dl
 23980 0000291E 0440                    	add	al,'@' ; 40h
 23981 00002920 3C40                    	cmp	al,'@' ; 40h
 23982 00002922 7506                    	jne	short GOTUDRV
 23983 00002924 0206[E59B]              	add	al,[CURDRV]
 23984 00002928 FEC0                    	inc	al		; A = 1
 23985                                  GOTUDRV:
 23986 0000292A AA                      	stosb
 23987 0000292B 8A26[D69B]              	mov	ah,[DIRCHAR]
 23988 0000292F B03A                    	mov	al,':' ; 3Ah
 23989 00002931 AB                      	stosw
 23990 00002932 06                      	push	es
 23991 00002933 1F                      	pop	ds
 23992 00002934 89FE                    	mov	si,di
 23993 00002936 B447                    	mov	ah,47h ; 24/02/2023
 23994                                  	;mov	ah,CURRENT_DIR	; 47h
 23995                                  	;int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 23996                                  			; DL = drive (0=default,1=A,etc.)
 23997                                  			; DS:SI	points to 64-byte buffer area
 23998                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23999 00002938 E87FDC                  	call	int_21h_indirect
 24000 0000293B 72DB                    	jc	short savudir_err_retn ; 24/02/2023
 24001 0000293D 0E                      	push	cs
 24002 0000293E 1F                      	pop	ds
 24003 0000293F C3                      	retn
 24004                                  
 24005                                  ; =============== S U B	R O U T	I N E =======================================
 24006                                  
 24007                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24008                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:26B7h
 24009                                  CRLF2:
 24010 00002940 52                      	push	dx
 24011 00002941 BA[6791]                	mov	dx,acrlf_ptr
 24012 00002944 1E                      	push	ds
 24013 00002945 0E                      	push	cs
 24014 00002946 1F                      	pop	ds
 24015 00002947 E8932A                  	call	std_printf
 24016 0000294A 1F                      	pop	ds
 24017 0000294B 5A                      	pop	dx
 24018 0000294C C3                      	retn
 24019                                  
 24020                                  ; =============== S U B	R O U T	I N E =======================================
 24021                                  
 24022                                  ; These routines (SCANOFF, DELIM) are called in batch processing when DS
 24023                                  ; may NOT be TRANGROUP
 24024                                  
 24025                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24026                                  scanoff:
 24027 0000294D AC                      	lodsb
 24028 0000294E E80400                  	call	DELIM
 24029 00002951 74FA                    	jz	short scanoff
 24030 00002953 4E                      	dec	si		; Point to first non-delimiter
 24031                                  scanoff_retn:
 24032 00002954 C3                      	retn
 24033                                  
 24034                                  ; =============== S U B	R O U T	I N E =======================================
 24035                                  
 24036                                  ; Input:    AL is character to classify
 24037                                  ; Output:   Z set if delimiter
 24038                                  ;	    NZ set otherwise
 24039                                  ; Registers modified: none
 24040                                  
 24041                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24042                                  DELIM:
 24043 00002955 3C20                    	cmp	al,' '	 ;20h
 24044 00002957 74FB                    	je	short scanoff_retn
 24045 00002959 3C3D                    	cmp	al,'='  ; 3Dh
 24046 0000295B 74F7                    	je	short scanoff_retn
 24047 0000295D 3C2C                    	cmp	al,','	; 2Ch
 24048 0000295F 74F3                    	je	short scanoff_retn
 24049 00002961 3C3B                    	cmp	al,';'	 ;3Bh
 24050 00002963 74EF                    	je	short scanoff_retn
 24051 00002965 3C09                    	cmp	al,9		; Check for TAB character
 24052 00002967 74EB                    	je	short scanoff_retn
 24053 00002969 3C0A                    	cmp	al,0Ah		; Check for line feed character - BAS
 24054 0000296B C3                      	retn
 24055                                  
 24056                                  
 24057                                  ; =============== S U B	R O U T	I N E =======================================
 24058                                  
 24059                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24060                                  FCB_TO_ASCZ:			
 24061                                  	; Convert DS:SI to ASCIZ ES:DI
 24062 0000296C B90800                  	mov	cx,8
 24063                                  MAINNAME:
 24064 0000296F AC                      	lodsb
 24065 00002970 3C20                    	cmp	al,' ' ; 20h
 24066 00002972 7401                    	jz	short SKIPSPC
 24067 00002974 AA                      	stosb
 24068                                  SKIPSPC:
 24069 00002975 E2F8                    	loop	MAINNAME
 24070 00002977 AC                      	lodsb
 24071 00002978 3C20                    	cmp	al,' '
 24072 0000297A 740F                    	je	short GOTNAME
 24073 0000297C 88C4                    	mov	ah,al
 24074                                  	; 24/02/2023
 24075 0000297E B02E                    	mov	al,'.' ; 2Eh  ; MSDOS 5.0 (& 6.0)
 24076                                  	;mov	al,[DOT_CHR]  ; MSDOS 3.3
 24077                                  	;stosb
 24078                                  	;xchg	al,ah
 24079                                  	;stosb
 24080                                  	; 24/02/2023
 24081 00002980 AB                      	stosw
 24082 00002981 B102                    	mov	cl,2
 24083                                  EXTNAME:
 24084 00002983 AC                      	lodsb
 24085 00002984 3C20                    	cmp	al,' '
 24086 00002986 7403                    	je	short GOTNAME
 24087 00002988 AA                      	stosb
 24088 00002989 E2F8                    	loop	EXTNAME
 24089                                  GOTNAME:
 24090 0000298B 30C0                    	xor	al,al
 24091 0000298D AA                      	stosb
 24092                                  STRCOMP_RETN:
 24093 0000298E C3                      	retn
 24094                                  
 24095                                  ; =============== S U B	R O U T	I N E =======================================
 24096                                  
 24097                                  ; Compare ASCIZ DS:SI with ES:DI.
 24098                                  ; SI,DI destroyed.
 24099                                  
 24100                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24101                                  STRCOMP:	
 24102 0000298F A6                      	cmpsb
 24103 00002990 75FC                    	jnz	short STRCOMP_RETN ; Strings not equal
 24104 00002992 807CFF00                	cmp	byte [si-1],0	; Hit NUL terminator?
 24105                                  	;jz	short STRCOMP_RETN ; Yes, strings equal
 24106                                  	;jmp	short STRCOMP	; Equal so far, keep going
 24107                                  	; 24/02/2023
 24108 00002996 75F7                    	jnz	short STRCOMP
 24109 00002998 C3                      	retn
 24110                                  
 24111                                  ; =============== S U B	R O U T	I N E =======================================
 24112                                  
 24113                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24114                                  CRPRINT:
 24115 00002999 50                      	push	ax
 24116                                  	;mov	al,13	; 0Dh
 24117 0000299A B00D                    	mov	al,0Dh
 24118 0000299C 51                      	push	cx
 24119 0000299D 57                      	push	di
 24120 0000299E 89D7                    	mov	di,dx
 24121 000029A0 B9FFFF                  	mov	cx,65535 ; 0FFFFh
 24122 000029A3 06                      	push	es
 24123 000029A4 1E                      	push	ds
 24124 000029A5 07                      	pop	es
 24125 000029A6 F2AE                    	repne	scasb		; LOOK FOR TERMINATOR
 24126 000029A8 C645FF00                	mov	byte [di-1],0	; nul terminate the string
 24127 000029AC 07                      	pop	es
 24128 000029AD 8916[7F9D]              	mov	[string_ptr_2],dx
 24129                                  	;mov	dx,STRINGBUF2PTR  ; MSDOS 3.3 (Retro DOS v3.0 COMMAND.COM)
 24130 000029B1 BA[4C91]                	mov	dx,string_buf_ptr ; MSDOS 5.0 (& 6.0)
 24131 000029B4 E8262A                  	call	std_printf
 24132                                  	;mov	byte [di-1],13
 24133 000029B7 C645FF0D                	mov	byte [di-1],0Dh	; now put the CR back
 24134 000029BB 7204                    	jb	short error_output
 24135 000029BD 5F                      	pop	di
 24136 000029BE 59                      	pop	cx
 24137 000029BF 58                      	pop	ax
 24138 000029C0 C3                      	retn
 24139                                  
 24140                                  ; ---------------------------------------------------------------------------
 24141                                  
 24142                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24143                                  error_output:
 24144 000029C1 0E                      	push	cs
 24145 000029C2 1F                      	pop	ds
 24146 000029C3 8E06[D19B]              	mov	es,[RESSEG]
 24147 000029C7 BA[588F]                	mov	dx,NOSPACE_PTR
 24148 000029CA 26803E[1303]00          	cmp	byte [es:PipeFlag],0
 24149 000029D0 7406                    	jz	short go_to_error
 24150 000029D2 E88D09                  	call	PipeOff
 24151 000029D5 BA[CA90]                	mov	dx,PIPEEMES_PTR
 24152                                  go_to_error:
 24153 000029D8 E91203                  	jmp	cerror
 24154                                  
 24155                                  ; =============== S U B	R O U T	I N E =======================================
 24156                                  
 24157                                  ;---- Mod for path invocation ----
 24158                                  
 24159                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24160                                  pathchrcmp:
 24161                                  	; 18/03/2023	
 24162                                  	;push	ax
 24163                                  	;mov	ah,'/' ; 2Fh
 24164                                  	;cmp	[SWITCHAR],ah
 24165 000029DB 803E[D59B]2F            	cmp	byte [SWITCHAR],'/' ; 2Fh
 24166 000029E0 7404                    	je	short noslasht
 24167 000029E2 3C2F                    	cmp	al,'/'
 24168 000029E4 7402                    	je	short pccont
 24169                                  noslasht:
 24170 000029E6 3C5C                    	cmp	al,'\' ; 5Ch
 24171                                  pccont:	
 24172                                  	;pop	ax
 24173 000029E8 C3                      	retn
 24174                                  
 24175                                  ; =============== S U B	R O U T	I N E =======================================
 24176                                  
 24177                                  ; PATHCRUNCH -
 24178                                  ;
 24179                                  ; ENTRY FCB (in PSP) contains drive # to crunch on
 24180                                  ;       PathPos = ptr to string with pathname in it
 24181                                  ;       PathCnt = length of string
 24182                                  ;
 24183                                  ; EXIT  PathPos = ptr after pathname (w/ NULL) in string
 24184                                  ;       PathCnt = length left in string
 24185                                  ;       DestIsDir = nonzero if pathname delimiter char's found in pathname
 24186                                  ;       DestInfo<bit1> = set if wildcard char's found in pathname
 24187                                  ;       If path crunched successfully,
 24188                                  ;         CY = clear
 24189                                  ;         Current directory is changed to directory in pathname
 24190                                  ;         UserDir1 contains previous directory for use by RestUDir
 24191                                  ;         RestDir = nonzero to flag later restoration of user's dir
 24192                                  ;         DestTail = ptr to beginning of filename
 24193                                  ;         If filename found in pathname,
 24194                                  ;           ZR = clear
 24195                                  ;           FCB filename fields contain filename
 24196                                  ;         If filename not found (pure directory path),
 24197                                  ;           ZR = set
 24198                                  ;           FCB filename fields are wildcarded with ?'s
 24199                                  ;       If pathcrunch failed (no ChDir's worked),
 24200                                  ;         CY = set
 24201                                  ;         Msg_Numb = extended error code
 24202                                  ;
 24203                                  ; NOTE  DIR asks PathCrunch to forego parsing the filename into the
 24204                                  ;       FCB by setting DirFlag. In this case, the FCB is returned
 24205                                  ;       with the filename wildcarded.
 24206                                  
 24207                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 24208                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2767h
 24209                                  
 24210                                  	; 11/06/2023 - Retro DOS v4.2
 24211                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2D11h
 24212                                  
 24213                                  	; 04/08/2024 - Retro DOS v5.0
 24214                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2B45h
 24215                                  PathCrunch:
 24216                                  	; MSDOS 6.0
 24217 000029E9 C706[119F]0000          	mov     word [Msg_Numb],0
 24218                                  				;AN022; Set up message flag
 24219                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24220                                  	;mov	dl,[5Ch]
 24221 000029EF 8A165C00                	mov	dl,[FCB]	; DL = drive # (1 = A)
 24222 000029F3 E823FF                  	call	SAVUDIR		; save current directory in UserDir1
 24223                                  	; MSDOS 6.0
 24224 000029F6 7233                     	jc	short pcrunch_cderrj
 24225                                  				;AN022; if error on current dir - report
 24226 000029F8 E8EB04                  	call	SETPATH		; scan past switches, whitespace
 24227                                  
 24228                                  ;       DX = ptr to pathname, NULL-terminated
 24229                                  ;       PathPos = ptr to byte after NULL at end of pathname
 24230                                  
 24231                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24232 000029FB F606[9A9D]02            	test	byte [DestInfo],2 ; test if wildcards (? or *) seen
 24233 00002A00 752C                    	jnz	short trypeel	; wildcard seen, peel filename
 24234                                  
 24235                                  	;mov	ah,CHDir ; 3Bh
 24236 00002A02 B43B                    	mov	ah,3Bh
 24237 00002A04 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 24238                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 24239                                  	; MSDOS 6.0
 24240 00002A06 7313                    	jnc	short chdir_worked	;AN022; no error - continue
 24241                                  	
 24242 00002A08 E83EF6                  	call	get_ext_error_number    ;AN022; get the extended error
 24243 00002A0B 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found
 24244 00002A0E 741E                    	je	short trypeel		;AC022;    keep trying
 24245 00002A10 83F805                  	cmp	ax,ERROR_ACCESS_DENIED  ;AN022; if access denied
 24246 00002A13 7419                    	je	short trypeel		;AC022;    keep trying
 24247 00002A15 A3[119F]                	mov	[Msg_Numb],ax           ;AN022; set up message flag
 24248 00002A18 E99D00                  	jmp	peelfail                ;AN022; exit with other error
 24249                                  
 24250                                  	; MSDOS 3.3
 24251                                  	;jc	short trypeel
 24252                                  chdir_worked:
 24253                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24254 00002A1B E8BD06                  	call	SetRest1	; set 'Restore Directory' flag true
 24255 00002A1E B03F                    	mov	al,'?'		; if pure dir, wildcard filename in FCB
 24256 00002A20 BF5D00                  	mov	di,5Dh  ; FCB+1
 24257 00002A23 B90B00                  	mov	cx,11
 24258 00002A26 F3AA                    	rep	stosb
 24259 00002A28 30C0                    	xor	al,al		; return carry clear, zero set
 24260 00002A2A C3                      	retn
 24261                                  
 24262                                  pcrunch_cderrj: 		;AN022; need this for long jmp
 24263 00002A2B E98200                  	jmp	pcrunch_cderr	;AN022;
 24264                                  
 24265                                  trypeel:
 24266 00002A2E 8B36[6E9D]              	mov	si,[PathPos]
 24267 00002A32 4E                      	dec	si		; SI = ptr to NULL at end of pathname
 24268 00002A33 8A44FF                  	mov	al,[si-1]	; AL = last char of pathname
 24269                                  	; 25/02/2023
 24270                                  	; MSDOS 5.0 (& 6.0)
 24271 00002A36 803E[2C9F]00            	cmp	byte [KPARSE],0
 24272 00002A3B 7505                    	jnz	short delstrt	; Last char is 2nd KANJI byte, might be '\'
 24273                                  	
 24274 00002A3D E89BFF                  	call	pathchrcmp
 24275 00002A40 7476                    	jz	short peelfail	; Trailing '/'
 24276                                  delstrt:
 24277 00002A42 89F1                    	mov	cx,si		; CX = ptr to NULL at end of pathname
 24278 00002A44 89D6                    	mov	si,dx		; SI = ptr to start of pathname
 24279 00002A46 52                      	push	dx		; save ptr to pathname
 24280                                  delloop:
 24281 00002A47 39CE                    	cmp	si,cx
 24282                                  	;jz	short BADRET
 24283                                  	; 25/02/2023
 24284 00002A49 7413                    	je	short gotdele	; no char's left, we have what we have
 24285 00002A4B AC                      	lodsb			; AL = next char of pathname
 24286 00002A4C E8D9FC                  	call	testkanj
 24287 00002A4F 7403                    	jz	short notkanj8	; not Kanji, move along
 24288 00002A51 46                      	inc	si
 24289 00002A52 EBF3                    	jmp	short delloop	
 24290                                  
 24291                                  	; 25/02/2023
 24292                                  	; MSDOS 3.3
 24293                                  	;mov	al,[si]
 24294                                  	;call	PATHCHRCMP
 24295                                  	;jz	short TRYCD
 24296                                  	;dec	si
 24297                                  	;jmp	short delloop
 24298                                  
 24299                                  notkanj8:
 24300 00002A54 E884FF                  	call	pathchrcmp
 24301 00002A57 75EE                    	jnz	short delloop	; not a path delimiter, keep looking
 24302 00002A59 89F2                    	mov	dx,si
 24303 00002A5B 4A                      	dec	dx		; DX = ptr to last delimiter found	
 24304 00002A5C EBE9                    	jmp	short delloop	; go look for more
 24305                                  
 24306                                  	; 25/02/2023
 24307                                  	; MSDOS 5.0 (& 6.0)
 24308                                  gotdele:
 24309 00002A5E 89D6                    	mov	si,dx		; SI = ptr to pathname or last delim
 24310 00002A60 5A                      	pop	dx		; DX = ptr to pathname
 24311 00002A61 39D6                    	cmp	si,dx
 24312 00002A63 7455                    	je	short badret	; didn't find path delim
 24313 00002A65 89F1                    	mov	cx,si		; CX = ptr to last path delimiter
 24314 00002A67 89D6                    	mov	si,dx		; SI = ptr to pathname
 24315                                  delloop2:			; Set value of KPARSE
 24316 00002A69 39CE                    	cmp	si,cx
 24317 00002A6B 7412                    	je	short trycd	; roll up till SI meets CX
 24318 00002A6D C606[2C9F]00            	mov	byte [KPARSE],0
 24319 00002A72 AC                      	lodsb
 24320 00002A73 E8B2FC                  	call	testkanj
 24321 00002A76 74F1                    	jz	short delloop2
 24322 00002A78 46                      	inc	si
 24323 00002A79 FE06[2C9F]              	inc	byte [KPARSE]
 24324 00002A7D EBEA                    	jmp	short delloop2
 24325                                  
 24326                                  trycd:
 24327 00002A7F 50                      	push	ax
 24328                                  	; 25/02/2023
 24329 00002A80 B02E                    	mov	al,'.'
 24330                                  	;mov	al,[DOT_CHR]	; AL = '.'
 24331                                  	; MSDOS 6.0
 24332 00002A82 384401                  	cmp	[si+1],al	; check for '.' after path delim
 24333                                  				;M019; allow continuation if '. ' or 
 24334                                  				;M019; '..' is not found.
 24335 00002A85 7509                    	jne	short trycd1	;M019; '.' not found
 24336 00002A87 384402                  	cmp	[si+2],al	;M019; check for '..'
 24337 00002A8A 7404                    	je	short trycd1	;M019; found '..'
 24338 00002A8C 807C0200                	cmp	byte [si+2],0	;M019; check for '. ' (null terminated)
 24339                                  trycd1:	
 24340 00002A90 58                      	pop     ax
 24341 00002A91 7425                    	jz	short peelfail	; if . or .., pure cd should have worked
 24342                                  
 24343                                  	; 25/02/2023
 24344                                  	; MSDOS 3.3
 24345                                  	;cmp	[si+1],	al	; check for '.' after path delim
 24346                                  	;pop	ax
 24347                                  	;jz	short PEELFAIL	; if . or .., pure cd should have worked
 24348                                  
 24349                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24350 00002A93 8A44FF                  	mov	al,[si-1]
 24351 00002A96 3C3A                    	cmp	al,':' 		; Special case d:\file
 24352 00002A98 7420                    	je	short badret
 24353                                  	; 25/02/2023
 24354                                  	; MSDOS 6.0
 24355 00002A9A 803E[2C9F]00            	cmp	byte [KPARSE],0
 24356 00002A9F 7505                    	jnz	short notdoublesl
 24357 00002AA1 E837FF                  	call	pathchrcmp
 24358                                  	;jnz	short notdoublesl
 24359                                  				; Last char is 2nd KANJI byte, might be '\'
 24360                                  	; 25/02/2023
 24361 00002AA4 7412                    	jz	short peelfail 
 24362                                  ;peelfail:
 24363                                  	;stc
 24364                                  	;retn
 24365                                  
 24366                                  notdoublesl:
 24367 00002AA6 C60400                  	mov	byte [si],0
 24368                                  	;mov	ah,CHDir ; 3Bh
 24369 00002AA9 B43B                    	mov	ah,3Bh
 24370                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 24371                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 24372                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 24373 00002AAB E80CDB                  	call	int_21h_indirect
 24374 00002AAE 7321                    	jnc	short cdsucc
 24375                                  
 24376                                  	; 25/02/2023
 24377                                  	; MSDOS 6.0
 24378                                  pcrunch_cderr:
 24379 00002AB0 E896F5                  	call	get_ext_error_number
 24380                                  				;AN022; get the extended error
 24381 00002AB3 A3[119F]                	mov	[Msg_Numb],ax	;AN022; set up message flag
 24382 00002AB6 09F6                    	or	si,si		;AN022; set up zero flag to not zero
 24383                                  peelfail: ; 25/02/2023
 24384 00002AB8 F9                      	stc			;AN022; set up carry flag
 24385                                  pcrunch_retn:
 24386 00002AB9 C3                      	retn
 24387                                  
 24388                                  badret:
 24389                                  	; MSDOS 3.3 & MSDOS 6.0
 24390 00002ABA 8A04                    	mov	al,[si]
 24391 00002ABC E81CFF                  	call	pathchrcmp	; Special case 'DIRCHAR'file
 24392 00002ABF F9                      	stc
 24393 00002AC0 75F7                    	jnz	short pcrunch_retn
 24394 00002AC2 30DB                    	xor	bl,bl
 24395 00002AC4 865C01                  	xchg	bl,[si+1]
 24396                                  	;mov	ah,CHDir ; 3Bh
 24397 00002AC7 B43B                    	mov	ah,3Bh
 24398                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 24399                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 24400                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 24401 00002AC9 E8EEDA                  	call	int_21h_indirect
 24402                                  	;jc	short pcrunch_retn ; MSDOS 3.3
 24403                                  	; 25/02/2023
 24404 00002ACC 72E2                    	jc	short pcrunch_cderr
 24405                                  				;AN022; go to error exit 
 24406 00002ACE 885C01                  	mov	[si+1],bl
 24407                                  cdsucc:
 24408 00002AD1 E80706                  	call	SetRest1
 24409 00002AD4 46                      	inc	si		; Reset zero
 24410 00002AD5 8936[989D]              	mov	[DestTail],si
 24411                                  	; 25/02/2023
 24412                                  	; MSDOS 6.0
 24413 00002AD9 9C                      	pushf			;AN015; save flags
 24414 00002ADA 803E[769D]FF            	cmp	byte [DirFlag],-1
 24415                                  				;AN015; don't do parse if in DIR
 24416 00002ADF 7408                    	je	short pcrunch_end
 24417                                  				;AN015;
 24418                                  	; MSDOS 3.3 & MSDOS 6.0
 24419 00002AE1 BF5C00                  	mov	di,FCB  ; 5Ch
 24420                                  	;mov	ax,(Parse_File_Descriptor<<8)|2 ; 2902h
 24421 00002AE4 B80229                  	mov	ax,2902h	
 24422 00002AE7 CD21                    	int	21h		; Parse with default drive
 24423                                  			; DOS -	PARSE FILENAME
 24424                                  			; DS:SI	-> string to parse
 24425                                  			; ES:DI	-> buffer to fill with unopened	FCB
 24426                                  			; AL = bit mask	to control parsing
 24427                                  	; MSDOS 3.3
 24428                                  	;retn
 24429                                  
 24430                                  pcrunch_end:
 24431 00002AE9 9D                      	popf			;AN015; get flags back
 24432 00002AEA C3                      	retn
 24433                                  
 24434                                  ; =============== S U B	R O U T	I N E =======================================
 24435                                  
 24436                                  ; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 24437                                  ; PCDOS 7.1 COMMAND.COM
 24438                                  %if 1
 24439                                  ;ifdef DBCS
 24440                                  ;
 24441                                  ;	Check if the character position is at Tail Byte of DBCS
 24442                                  ;
 24443                                  ;	input:	ds:si = start address of the string
 24444                                  ;		ds:di = character position to check
 24445                                  ;	output:	ZF = 1 if at Tail Byte
 24446                                  ;
 24447                                  ;CheckDBCSTailByte proc near
 24448                                  CheckDBCSTailByte:
 24449 00002AEB 50                      	push	ax
 24450 00002AEC 51                      	push	cx
 24451 00002AED 57                      	push	di
 24452 00002AEE 89F9                    	mov	cx,di			; save character position
 24453                                  cdtb_check:
 24454 00002AF0 39F7                    	cmp	di,si
 24455 00002AF2 7409                    	jz	short cdtb_next		; if at the top
 24456 00002AF4 4F                      	dec	di			; go back
 24457 00002AF5 8A05                    	mov	al,[di]			; get character
 24458                                  	;invoke	testkanj
 24459 00002AF7 E82EFC                  	call	testkanj
 24460 00002AFA 75F4                    	jnz	short cdtb_check	; if DBCS lead byte do next
 24461 00002AFC 47                      	inc	di			; adjust
 24462                                  cdtb_next:
 24463 00002AFD 29F9                    	sub	cx,di			; if the length is odd then
 24464 00002AFF 80F101                  	xor	cl,1			; the character position is
 24465 00002B02 F6C101                  	test	cl,1			; at the tail byte
 24466 00002B05 5F                      	pop	di
 24467 00002B06 59                      	pop	cx
 24468 00002B07 58                      	pop	ax
 24469 00002B08 C3                      	retn
 24470                                  ;CheckDBCSTailByte endp
 24471                                  ;endif
 24472                                  %endif
 24473                                  
 24474                                  ;============================================================================
 24475                                  ; TMISC1.ASM, MSDOS 6.0, 1991
 24476                                  ;============================================================================
 24477                                  ; 05/10/2018 - Retro DOS v3.0
 24478                                  
 24479                                  ;TITLE	Part7 COMMAND Transient Routines
 24480                                  
 24481                                  ;	More misc routines
 24482                                  
 24483                                  ;---------------------------
 24484                                  ; We can get rid of this switch processing code if we can take
 24485                                  ; care of the remaining two calls to switch, later in the file.
 24486                                  ; However, I have not checked whether or not any other files use
 24487                                  ; switch -- after all, it IS public!
 24488                                  ;---------------------------
 24489                                  
 24490                                  ; 14/06/2023
 24491                                  SWCOUNT	EQU 8	; MSDOS 6.22		; Length of switch_list
 24492                                  ; 28/03/2023
 24493                                  ;SWCOUNT  EQU  6  ; MSDOS 6.0 (& MSDOS 5.0)
 24494                                  ;;SWCOUNT EQU  5  ; MSDOS 3.3	
 24495                                  
 24496                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1AC2h
 24497                                  
 24498                                  ; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 24499                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2869h
 24500                                  
 24501                                  ; ---------------------------------------------------------------------------
 24502                                  
 24503                                  	; 25/02/2023
 24504                                  RETSW:
 24505 00002B09 93                      	xchg	ax,bx		; Put switches in AX
 24506 00002B0A C3                      	retn
 24507                                  
 24508                                  ; =============== S U B	R O U T	I N E =======================================
 24509                                  
 24510                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 24511                                  	; 11/06/2023 - Retro DOS 4.2 COMMAND.COM
 24512                                  	; 04/08/2024 - Retro DOS 5.0 COMMAND.COM
 24513                                  SWITCH:
 24514 00002B0B 31DB                    	xor	bx,bx		; Initialize - no switches set
 24515                                  SWLOOP:
 24516 00002B0D E83DFE                  	call	scanoff		; Skip any delimiters
 24517 00002B10 3A06[D59B]              	cmp	al,[SWITCHAR]	; Is it a switch specifier?
 24518 00002B14 75F3                    	jnz	short RETSW	; No -- we're finished
 24519 00002B16 81CB0080                	or	bx,8000h
 24520                                  	;or	bx,FSWITCH	; Indicate there is a switch specified
 24521 00002B1A 46                      	inc	si		; Skip over the switch character
 24522 00002B1B E82FFE                  	call	scanoff
 24523 00002B1E 3C0D                    	cmp	al,0Dh
 24524 00002B20 74E7                    	je	short RETSW	; Oops
 24525 00002B22 46                      	inc	si
 24526                                  
 24527                                  	; Convert lower case input to upper case
 24528                                  
 24529 00002B23 E82CFC                  	call	UPCONV
 24530                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 24531                                  
 24532 00002B26 BF[4195]                	mov	di,switch_list	; "-Y?VBAPW" (for PCDOS 7.1) ; 04/08/2024
 24533                                  				; "-Y?VBAPW" (for MSDOS 6.22) ; 11/06/2023
 24534                                  				; "?VBAPW" (for MSDOS 6.0)
 24535                                  				; ("VBAPW" (for MSDOS 3.3))
 24536                                  	; 11/06/2023
 24537                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2E33h
 24538 00002B29 B90800                  	mov	cx,8  ; MSDOS 6.22
 24539                                  	;mov	cx,6  ; MSDOS 6.0 (& MSDOS 5.0)
 24540                                  	;;mov	cx,5  ; MSDOS 3.3
 24541                                  	;;mov	cx,SWCOUNT ; 5 (for MSDOS 3.3), (6 (for MSDOS 6.0))
 24542                                  
 24543                                  	;nop
 24544                                  
 24545 00002B2C F2AE                    	repne	scasb		; Look for matching switch
 24546 00002B2E 7507                    	jnz	short BADSW
 24547 00002B30 B80100                  	mov	ax,1
 24548 00002B33 D3E0                    	shl	ax,cl		; Set a bit for the switch
 24549 00002B35 09C3                    	or	bx,ax
 24550                                  BADSW: 				; Retro DOS v3.0 COMMAND.COM modificiation
 24551 00002B37 EBD4                    	jmp	short SWLOOP
 24552                                  ;BADSW:
 24553                                  	;jmp	short SWLOOP
 24554                                  ;DRVBAD:
 24555                                  ;	mov	dx,baddrv_ptr
 24556                                  ;	jmp	cerror
 24557                                  EXTERNALJ:
 24558 00002B39 E90501                  	jmp	EXTERNAL
 24559                                  FNDCOM:				; search the internal command table
 24560 00002B3C 08C0                    	or	al,al		; Get real length of first arg
 24561 00002B3E 74F9                    	jz	short EXTERNALJ	; If 0, it must begin with "\" so has
 24562                                  				;  to be external.
 24563                                  ; barryf code starts here
 24564                                  
 24565 00002B40 E89203                  	call	test_append	; see if APPEND installed
 24566 00002B43 7429                    	jz	short CONTCOM	; not loaded
 24567                                  
 24568                                  APPEND_INTERNAL:
 24569 00002B45 8A0E[999C]              	mov	cl,[IDLEN]
 24570 00002B49 B500                    	mov	ch,0
 24571 00002B4B 890E[6E9D]              	mov	[PathPos],cx
 24572                                  	
 24573                                  	; 25/02/2023
 24574                                  	; MSDOS 6.0
 24575 00002B4F FE06[139F]              	inc 	byte [append_exec]
 24576                                  				;AN041; set APPEND to ON
 24577 00002B53 E82104                  	call	IOSET		; re-direct the o'l io
 24578                                  
 24579 00002B56 BE[999C]                	mov	si,IDLEN	; address command name, DS already set
 24580 00002B59 BAFFFF                  	mov	dx,-1 ; 0FFFFh	; set invoke function
 24581                                  		
 24582                                  	; MSDOS 6.0
 24583 00002B5C BF[C753]                	mov	di,append_parse
 24584                                  				;AN010; Get the entry point for PARSE for APPEND
 24585                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24586 00002B5F B801AE                  	mov	ax,0AE01h
 24587 00002B62 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal
 24588                                  			; - INSTALLABLE	COMMAND	- EXECUTE
 24589                                  			; DX = FFFFh, DS:SI -> buffer
 24590                                  			; Return: buffer at DS:SI filled with a	length byte
 24591                                  			; followed by the uppercase internal command
 24592                                  			; to execute (if length not 0)
 24593                                  	; 25/02/2023
 24594                                  	; INT 2Fh
 24595                                  	; 	AX = AE01h
 24596                                  	; entry:
 24597                                  	; 	DX = magic value FFFFh
 24598                                  	; 	CH = 00h
 24599                                  	; 	CL = length of command name
 24600                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 24601                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 24602                                  	; return:
 24603                                  	;	DS:SI buffer updated
 24604                                  	;	if length byte is nonzero, the following bytes contain
 24605                                  	;	the uppercase internal command to execute and the command line
 24606                                  	; 	buffer contains the command's parameters
 24607                                  	;	(the first DS:[SI] bytes are ignored)
 24608                                  	;
 24609                                  	; Format of COMMAND.COM command line buffer:
 24610                                  	;	Offset  Size    Description
 24611                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 24612                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 24613                                  	;	N BYTEs command line text, terminated by 0Dh
 24614                                  	;
 24615                                  	; Format of command name buffer:
 24616                                  	;	Offset  Size    Description
 24617                                  	;	00h     BYTE    length of command name
 24618                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 24619                                  
 24620 00002B64 803E[999C]00            	cmp	byte [IDLEN],0 ; execute requested
 24621 00002B69 7503                    	jne	short CONTCOM
 24622 00002B6B E9A300                  	jmp	CMD_DONE
 24623                                  
 24624                                  	;nop
 24625                                  CONTCOM:			; continue with internal scan
 24626 00002B6E BF[C093]                	mov	di,COMTAB
 24627 00002B71 31C9                    	xor	cx,cx
 24628                                  FINDCOM:
 24629 00002B73 BE[9A9C]                	mov	si,ID		; pointer to command argument
 24630 00002B76 8A0D                    	mov	cl,[di]		; load length of internal command
 24631 00002B78 47                      	inc	di		; advance past length
 24632 00002B79 E3BE                    	jcxz	EXTERNALJ 	; if it's zero, we're out of internals
 24633 00002B7B 3A0E[999C]              	cmp	cl,[IDLEN]	; that of the command argument
 24634 00002B7F 7506                    	jne	short ABCD	; lengths not equal ==> strings not eq
 24635 00002B81 890E[6E9D]              	mov	[PathPos],cx	; store length of command
 24636 00002B85 F3A6                    	repe	cmpsb
 24637                                  ABCD:
 24638 00002B87 9F                      	lahf			; save the good ol' flags
 24639 00002B88 01CF                    	add	di,cx		; skip over remaining internal, if any
 24640 00002B8A 8A05                    	mov	al,[di]		; load drive-check indicator byte (DCIB)
 24641 00002B8C A2[E39B]                	mov	[CHKDRV],al	; save command flag byte in chkdrv
 24642 00002B8F 47                      	inc	di		; increment DI (OK, OK, I'll stop)
 24643 00002B90 8B1D                    	mov	bx,[di]		; load internal command address
 24644 00002B92 47                      	inc	di		; skip over the puppy
 24645 00002B93 47                      	inc	di
 24646                                  
 24647                                  	; MSDOS 6.0
 24648 00002B94 8B15                    	mov	dx,[di]		; load ptr to help msg #s
 24649 00002B96 47                      	inc	di
 24650 00002B97 47                      	inc	di
 24651 00002B98 9E                      	sahf			; remember those flags?
 24652 00002B99 75D8                    	jnz	short FINDCOM	; well, if all the cmps worked...
 24653                                  
 24654                                  ; All messages get redirected.
 24655                                  
 24656 00002B9B 803E[139F]00            	cmp     byte [append_exec],0
 24657                                  				;AN041; APPEND just executed?
 24658 00002BA0 7503                    	jnz 	short DONT_SET_IO
 24659                                  				;AN041; Yes - this junk is already set
 24660 00002BA2 E8D203                  	call	IOSET		; re-direct the ol' i/o
 24661                                  
 24662                                  DONT_SET_IO:			;AN041;
 24663                                  
 24664                                  ; Check for /?. Certain commands, flagged fLimitHelp,
 24665                                  ; respond to /? only if it is the only command-line argument.
 24666                                  
 24667 00002BA5 A1[E89B]                	mov	ax,[COMSW]	; AX = switches after command
 24668 00002BA8 0B06[EE9B]              	or	ax,[AllSwitch]	; AX = all switches
 24669                                  	;and	ax,SwitchQues
 24670 00002BAC 83E020                  	and	ax,20h
 24671 00002BAF 7426                    	jz	short DRIVE_CHECK
 24672                                  				; /? not in command line
 24673 00002BB1 F606[E39B]04            	test	byte [CHKDRV],4	
 24674                                  	;test	byte [CHKDRV],fLimitHelp
 24675 00002BB6 7407                    	jz	short DO_HELP	; /? allowed in combination
 24676                                  
 24677                                  ; Make sure /? is the only argument on the command line.
 24678                                  
 24679 00002BB8 833E[EDA1]02            	cmp	word [ARG+ARG_UNIT.argvcnt],2
 24680 00002BBD 7518                    	jne	short DRIVE_CHECK
 24681                                  				; /? not only arg - ignore
 24682                                  
 24683                                  ; Note: this is all the check we need, even against things like /??.
 24684                                  ; Our argv parser breaks /?? into two args, /? and ?.
 24685                                  
 24686                                  DO_HELP:
 24687                                  ; DX = ptr to word list of msg #s, terminated by zero word
 24688                                  
 24689 00002BBF 89D6                    	mov	si,dx		; SI = ptr to list of msg #s
 24690                                      	;mov	ax,no_subst	; AL = no subst's code
 24691 00002BC1 B80000                  	mov	ax,0
 24692 00002BC4 50                      	push	ax		; build subst block on stack
 24693                                  
 24694                                  NEXT_HELP_MSG:
 24695 00002BC5 AD                      	lodsw			; AX = help msg # or zero
 24696 00002BC6 09C0                    	or	ax,ax
 24697 00002BC8 7409                    	jz	short HELP_DONE
 24698 00002BCA 50                      	push	ax		; SS:SP = ptr to subst block
 24699                                  				; (msg # and no_subst byte)
 24700                                  ;; We assume DS = SS.
 24701                                  	
 24702 00002BCB 89E2                    	mov     dx,sp		; DS:DX = ptr to subst block
 24703 00002BCD E80D28                  	call	std_printf	; display help message
 24704 00002BD0 58                      	pop	ax		; remove msg # from stack
 24705 00002BD1 EBF2                    	jmp	short NEXT_HELP_MSG
 24706                                  
 24707                                  HELP_DONE:
 24708 00002BD3 58                      	pop	ax		; clean up stack
 24709 00002BD4 E92DD5                  	jmp	TCOMMAND
 24710                                  
 24711                                  	; 25/02/2023
 24712                                  	; MSDOS 3.3
 24713                                  	;sahf			; remember those flags?
 24714                                  	;jnz	short FINDCOM	; well, if all the cmps worked...
 24715                                  	;call	IOSET		; re-direct the ol' i/o
 24716                                  
 24717                                  DRIVE_CHECK:
 24718 00002BD7 F606[E39B]01            	test	byte [CHKDRV],1
 24719                                  	;test	byte [CHKDRV],FCHECKDRIVE
 24720                                  				; did we wanna check those drives?
 24721 00002BDC 7411                    	jz	short NOCHECK
 24722 00002BDE A0[E69B]                	mov	al,[PARM1]	; parse_file_descriptor results tell
 24723 00002BE1 0A06[E79B]              	or	al,[PARM2]	; us whether those drives were OK
 24724 00002BE5 3CFF                    	cmp	al,-1
 24725 00002BE7 7506                    	jne	short NOCHECK
 24726                                  	;jmp	DRVBAD
 24727                                  	; 25/02/2023
 24728                                  DRVBAD:
 24729 00002BE9 BA[DB8F]                	mov	dx,baddrv_ptr
 24730 00002BEC E9FE00                  	jmp	cerror
 24731                                  
 24732                                  ; The user may have omitted the space between the command and its arguments.
 24733                                  ; We need to copy the remainder of the user's command line into the buffer.
 24734                                  ; Note that thisdoes not screw up the arg structure; it points into COMBUF not
 24735                                  ; into the command line at 80.
 24736                                  
 24737                                  NOCHECK:
 24738 00002BEF E8C602                  	call	cmd_copy
 24739                                  SWITCHECK:
 24740                                  	;test	byte [CHKDRV],2
 24741 00002BF2 F606[E39B]02            	test	byte [CHKDRV],fSwitchAllowed 
 24742                                  				; Does the command take switches
 24743 00002BF7 7516                    	jnz	short REALWORK	; Yes, process the command
 24744 00002BF9 E82F00                  	call	noswit		; No, check to see if any switches
 24745 00002BFC 7511                    	jnz	short REALWORK	; None, process the command
 24746                                  
 24747                                  	; MSDOS 6.0
 24748                                  	;mov	byte [msg_disp_class],2
 24749 00002BFE C606[428F]02            	mov	byte [msg_disp_class],parse_msg_class
 24750                                  				;AN000; set up parse error msg class
 24751 00002C03 BA[448F]                	mov	dx,extend_buf_ptr	
 24752                                  				;AC000; get extended message pointer
 24753                                  	;mov	word [extend_buf_ptr],3
 24754 00002C06 C706[448F]0300          	mov	word [extend_buf_ptr],BadSwt_Ptr
 24755                                  				;AN000; get "Invalid switch" message number
 24756 00002C0C E9DE00                  	jmp	cerror		; Print error and chill out...
 24757                                  
 24758                                  	; 25/02/2023
 24759                                  	; MSDOS 3.3
 24760                                  	;mov	dx,BADPARMPTR
 24761                                  	;jmp	CERROR
 24762                                  
 24763                                  REALWORK:
 24764 00002C0F FFD3                    	call	bx		; do some real work, at last
 24765                                  
 24766                                  ; See if we're in a batch CALL command. If we are, reprocess the command line,
 24767                                  ; otherwise, go get another command.
 24768                                  
 24769                                  CMD_DONE:
 24770 00002C11 0E                      	push	cs		; g  restore data segment
 24771 00002C12 1F                      	pop	ds		; g
 24772 00002C13 1E                      	push	ds
 24773 00002C14 8E1E[D19B]              	mov	ds,[RESSEG]	; g  save data segment
 24774                                  	;cmp	byte [Call_Flag],1
 24775                                  				; G  Is a call in progress?
 24776 00002C18 803E[B002]01            	cmp	byte [Call_Flag],call_in_progress
 24777 00002C1D C606[B002]00            	mov	byte [Call_Flag],0
 24778                                  				; G  Either way, reset flag
 24779 00002C22 1F                      	pop	ds		; g  get data segment back
 24780 00002C23 7403                    	jz	short INCALL	; G
 24781 00002C25 E9DCD4                  	jmp	TCOMMAND	; chill out...
 24782                                  INCALL:
 24783                                  	;jmp	DOCOM1
 24784                                  	; 11/06/2023
 24785                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 24786 00002C28 E9CAD6                  	jmp	DOCOM0
 24787                                  
 24788                                  ; =============== S U B	R O U T	I N E =======================================
 24789                                  
 24790                                  	; 25/02/2023
 24791                                  noswit:
 24792 00002C2B 57                      	push	di		; Save di
 24793 00002C2C BF8100                  	mov	di,81h		; di = ptr to command args
 24794 00002C2F BE8000                  	mov	si,80h		; Get address of length of command args
 24795 00002C32 AC                      	lodsb			; Load length
 24796 00002C33 88C1                    	mov	cl,al		; Move length to cl
 24797 00002C35 30ED                    	xor	ch,ch		; Zero ch
 24798 00002C37 2EA0[D59B]              	mov	al,[cs:SWITCHAR] ; al = switch character
 24799                                  	;cmp	al,0		; Turn off ZF
 24800                                  	; 25/02/2023
 24801 00002C3B 20C0                    	and	al,al
 24802 00002C3D F2AE                    	repne	scasb		; Scan for a switch character and return
 24803 00002C3F 5F                      	pop	di		;  with ZF set if one was found
 24804 00002C40 C3                      	retn
 24805                                  
 24806                                  ; ---------------------------------------------------------------------------
 24807                                  
 24808                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 24809                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:29A6h
 24810                                  
 24811                                  EXTERNAL:
 24812 00002C41 E89102                  	call	test_append	; check to see if append installed
 24813 00002C44 7403                    	jz	short NOT_BARRYF
 24814                                  				; no - truly external command
 24815 00002C46 E9FCFE                  	jmp	APPEND_INTERNAL	; yes - go to Barryf code
 24816                                  
 24817                                  NOT_BARRYF:
 24818 00002C49 2EC606[E49B]00          	mov	byte [cs:FILTYP],0
 24819 00002C4F 2E8A16[F19B]            	mov	dl,[cs:SPECDRV]
 24820 00002C54 2E8816[999C]            	mov	[cs:IDLEN],dl
 24821 00002C59 2EC606[919D]00          	mov	byte [cs:ROM_CALL],0
 24822 00002C5F 52                      	push	dx
 24823 00002C60 BA[999C]                	mov	dx,IDLEN
 24824 00002C63 E86DD8                  	call	ROM_SCAN
 24825 00002C66 5A                      	pop	dx
 24826                                  	;jnc	short POSTSAVE
 24827 00002C67 7305                    	jnc	short DO_SCAN
 24828 00002C69 2EFE06[919D]            	inc	byte [cs:ROM_CALL]
 24829                                  	;jmp	short POSTSAVE
 24830                                  
 24831                                  	;nop
 24832                                  DO_SCAN:
 24833                                  POSTSAVE:
 24834 00002C6E BF[F99A]                	mov	di,EXECPATH
 24835 00002C71 C60500                  	mov	byte [di],0	; Initialize to current directory
 24836                                  	
 24837 00002C74 2E803E[919D]00          	cmp	byte [cs:ROM_CALL],0
 24838                                  	;jz	short RESEARCH
 24839                                  	; 25/02/2023
 24840                                  	;jmp	short NEOEXECUTE
 24841 00002C7A 7577                    	jnz	short NEOEXECUTE
 24842                                  
 24843                                  	;nop
 24844                                  RESEARCH:
 24845 00002C7C E8E108                  	call	path_search	; find the mother (result in execpath)
 24846 00002C7F 09C0                    	or	ax,ax		; did we find anything?
 24847                                  	;jz	short BADCOMJ45	; null means no (sob)
 24848                                  	; 25/02/2023
 24849 00002C81 7465                    	jz	short BADCOM
 24850 00002C83 83F804                  	cmp	ax,4		; 04H and 08H are .exe and .com
 24851                                  				; fuckin' sixteen-bit machine ought
 24852                                  	;jl	short BATCOMJ	; to be able to handle a SIXTEEN-BIT
 24853                                  				; DISPLACEMENT!!
 24854                                  	;;jmp	short NEOEXECUTE
 24855                                  	;jmp	short EXECUTE	
 24856                                  	; 25/02/2023
 24857 00002C86 7D6B                    	jnl	short EXECUTE ; jge
 24858                                  
 24859                                  	; 02H is .bat
 24860                                  
 24861                                  ; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 24862                                  ; PCDOS 7.1 COMMAND.COM
 24863                                  %if 1
 24864                                  		; ... .BAT file	...
 24865 00002C88 BA[F99A]                	mov	dx,EXECPATH
 24866 00002C8B B8003D                  	mov	ax,3D00h
 24867 00002C8E CD21                    	int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 24868                                  				; DS:DX	-> ASCIZ filename
 24869                                  				; AL = access mode
 24870                                  				; 0 - read
 24871 00002C90 7253                    	jb	short BATCOMJ
 24872 00002C92 8326[73A3]00            	and	word [TPBUF],0	; clear 1st two bytes of the buffer
 24873 00002C97 BA[73A3]                	mov	dx,TPBUF
 24874 00002C9A B90200                  	mov	cx,2
 24875 00002C9D 89C3                    	mov	bx,ax
 24876 00002C9F B43F                    	mov	ah,3Fh
 24877 00002CA1 CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 24878                                  				; BX = file handle, CX = number	of bytes to read
 24879                                  				; DS:DX	-> buffer
 24880 00002CA3 B43E                    	mov	ah,3Eh
 24881 00002CA5 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 24882                                  				; BX = file handle
 24883 00002CA7 813E[73A3]2F2A          	cmp	word [TPBUF],2A2Fh ; '/*' (NASM syntax)
 24884 00002CAD 7536                    	jnz	short BATCOMJ
 24885 00002CAF B8[E596]                	mov	ax,REXX_EXE ; "REXX.EXE"
 24886                                  	;mov	[ARG_ARGV],ax
 24887 00002CB2 A3[2D9F]                	mov	[ARG+ARGV_ELE.argpointer],ax
 24888                                  	;mov	word [ARGV0_ARG_FLAGS],0
 24889 00002CB5 C706[2F9F]0000          	mov	word [ARG+ARGV_ELE.argflags],0
 24890                                  	;mov	[ARGV0_ARGSTARTEL],ax
 24891 00002CBB A3[309F]                	mov	[ARG+ARGV_ELE.argstartel],ax
 24892                                  	;mov	word [ARGV0_ARGLEN],8
 24893 00002CBE C706[329F]0800          	mov	word [ARG+ARGV_ELE.arglen],8
 24894                                  	;mov	word [ARGV0_ARGSW_WORD],0
 24895 00002CC4 C706[349F]0000          	mov	word [ARG+ARGV_ELE.argsw_word],0
 24896                                  	;mov	[ARGV0_ARG_OCOMPTR],ax
 24897 00002CCA A3[369F]                	mov	[ARG+ARGV_ELE.arg_ocomptr],ax
 24898                                  				; pointer into original	command	string
 24899 00002CCD E89008                  	call	path_search
 24900 00002CD0 85C0                    	test	ax,ax
 24901 00002CD2 740C                    	jz	short rexx_nf_err
 24902 00002CD4 BE[319A]                	mov	si,COMBUF+1
 24903 00002CD7 BF8000                  	mov	di,80h		; PSP command tail (arguments)
 24904 00002CDA 89F9                    	mov	cx,di ; 128
 24905 00002CDC F3A4                    	rep movsb
 24906 00002CDE EB13                    	jmp	short NEOEXECUTE
 24907                                  rexx_nf_err:
 24908 00002CE0 BA[6A8F]                	mov	dx,REXXNOTF_PTR	; MSG_1012 ; REXX.EXE not found
 24909 00002CE3 EB08                    	jmp	short cerror	
 24910                                  %endif
 24911                                  
 24912                                  	;nop
 24913                                  BATCOMJ:
 24914 00002CE5 E9B4DB                  	jmp	BATCOM
 24915                                  
 24916                                  	; 25/02/2023
 24917                                  ;BADCOMJ45:
 24918                                  	;jmp	short BADCOM
 24919                                  
 24920                                  ; 06/08/2024
 24921                                  ; ---------------------------------------------------------------------------
 24922                                  
 24923                                  	;  25/02/2023 - Retro DOS v4.0 COMMAND.COM
 24924                                  BADCOM:
 24925 00002CE8 0E                      	push	cs
 24926 00002CE9 1F                      	pop	ds
 24927 00002CEA BA[678F]                	mov	dx,BADNAM_PTR
 24928                                  cerror:		
 24929 00002CED E8E526                  	call	std_eprintf
 24930 00002CF0 E911D4                  	jmp	TCOMMAND
 24931                                  
 24932                                  ; ---------------------------------------------------------------------------
 24933                                  
 24934                                  	;nop
 24935                                  EXECUTE:
 24936                                  NEOEXECUTE:
 24937 00002CF3 E88102                  	call	IOSET
 24938                                  
 24939                                  ; MSDOS 6.0
 24940                                  ;M051
 24941                                  ; Previously LoadHigh was jumping to the execute label above. This was wrong
 24942                                  ;because IOSET was getting invoked twice resulting in 2 sets of redirections.
 24943                                  ;After a close, this would still leave one open active resulting in sharing
 24944                                  ;errors on subsequent opens of the redirected file.
 24945                                  
 24946                                  LH_EXECUTE:			;M051	
 24947 00002CF6 8E06[E19B]              	mov	es,[TRAN_TPA]
 24948                                  	;mov	ah,DEALLOC ; 49h
 24949 00002CFA B449                    	mov	ah,49h
 24950 00002CFC CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 24951                                  			; ES = segment address of area to be freed
 24952                                  				; Now running in "free" space
 24953 00002CFE 8E06[D19B]              	mov	es,[RESSEG]
 24954 00002D02 26FE06[9902]            	inc	byte [es:ExtCom] ; Indicate external command
 24955 00002D07 26C606[A102]00          	mov	byte [es:RestDir],0 
 24956                                  				; Since USERDIR1 is in transient, insure
 24957                                  				; this flag value for re-entry to COMMAND
 24958                                  	; MSDOS 6.0
 24959 00002D0D BE[F99A]                	mov	si,EXECPATH	  ; offset TRANGROUP:EXECPATH	
 24960 00002D10 BF[5E04]                	mov	di,SafePathBuffer ; offset RESGROUP:SAFEPATHBUFFER
 24961                                  	;mov	cx,LENMSGORPATHBUF
 24962 00002D13 B95000                  	mov	cx,80
 24963 00002D16 FC                      	cld
 24964 00002D17 F3A4                    	rep	movsb		; copy program pathname to resident
 24965                                  
 24966                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24967 00002D19 BF5C00                  	mov	di,FCB ; 5Ch
 24968 00002D1C 89FE                    	mov	si,di
 24969                                  	;mov	cx,82 ; 52h	; moving (100h-5Ch)/2 = 80h-2Eh
 24970 00002D1E B152                    	mov	cl,82 ; 25/02/2023
 24971 00002D20 F3A5                    	rep	movsw		; Transfer parameters to resident header
 24972                                  	
 24973                                  	; 25/02/2023
 24974                                  	;mov	dx,EXECPATH  ; MSDOS 3.3
 24975                                  	; MSDOS 6.0 (& 5.0)
 24976                                  	;mov	dx,offset RESGROUP:SAFEPATHBUFFER
 24977 00002D22 BA[5E04]                	mov	dx,SafePathBuffer
 24978 00002D25 06                      	push	es
 24979 00002D26 1F                      	pop	ds
 24980                                  
 24981                                  	;mov	bx,offset RESGROUP:EXEC_BLOCK
 24982 00002D27 BB[3A04]                	mov	bx,Exec_Block  ; = offset EnvirSeg
 24983                                  	;mov	ax,EXEC*256 ; 4B00h
 24984 00002D2A B8004B                  	mov	ax,4B00h
 24985                                  	;test	byte [ROM_CALL],-1 ; 0FFh ; MSDOS 3.3
 24986 00002D2D 2EF606[919D]FF          	test	byte [cs:ROM_CALL],-1 ; MSDOS 6.0 (& 5.0)
 24987 00002D33 7403                    	jz	short OK_EXEC
 24988 00002D35 E914D8                  	jmp	ROM_EXEC
 24989                                  
 24990                                  OK_EXEC:
 24991                                  
 24992                                  ; we are now running in free space. Anything we do from here on may get
 24993                                  ; trashed. Move the stack (also in free space) to allocated space because
 24994                                  ; since EXEC restores the stack, somebody may trash what is on the stack.
 24995                                  
 24996 00002D38 8CC1                    	mov	cx,es
 24997 00002D3A 8ED1                    	mov	ss,cx
 24998 00002D3C BC[2E05]                	mov	sp,RStack
 24999                                  	; MSDOS 3.3
 25000                                  	;jmp	far [EXEC_ADDR]	; Jmp to the EXEC in the resident
 25001                                  	; 25/02/2023
 25002                                  	; MSDOS 6.0
 25003 00002D3F 2EFF2E[D79B]            	jmp	far [cs:EXEC_ADDR] ; Jmp to the EXEC in the resident
 25004                                  
 25005                                  ; =============== S U B	R O U T	I N E =======================================
 25006                                  
 25007                                  ; Prescan converts the input buffer into a canonicalized form.
 25008                                  ; All redirections and pipes are removed.
 25009                                  
 25010                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25011                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2A51h
 25012                                  
 25013                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25014                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2FFBh
 25015                                  
 25016                                  	; 05/08/2024 - Retro DOS v5.0 COMMAND.COM
 25017                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2E8Dh
 25018                                  PRESCAN:
 25019 00002D44 31C9                    	xor	cx,cx
 25020 00002D46 8E06[D19B]              	mov	es,[RESSEG]
 25021 00002D4A BE[329A]                	mov	si,COMBUF+2
 25022 00002D4D 89F7                    	mov	di,si
 25023                                  COUNTQUOTES:
 25024 00002D4F AC                      	lodsb			; get a byte
 25025 00002D50 3C22                    	cmp	al,22h	; '"'	; is it a quote?
 25026 00002D52 7504                    	jne	short COUNTEND	; no, try for end of road
 25027 00002D54 FEC5                    	inc	ch		; bump count
 25028 00002D56 EBF7                    	jmp	short COUNTQUOTES
 25029                                  				; go get next char
 25030                                  COUNTEND:
 25031 00002D58 3C0D                    	cmp	al,0Dh	; 13	; end of road?
 25032 00002D5A 75F3                    	jne	short COUNTQUOTES
 25033                                  				; no, go back for next char
 25034                                  	; 26/02/2023
 25035                                  	; MSDOS 5.0 (& 6.0)
 25036 00002D5C 51                      	push	cx		; save count
 25037 00002D5D 89FE                    	mov	si,di		; restore pointer to begining
 25038                                  KanjiScan:
 25039 00002D5F AC                      	lodsb			; get a byte
 25040 00002D60 E8C5F9                  	call	testkanj	; is it a leadin byte
 25041 00002D63 740F                    	jz	short KanjiQuote
 25042                                  				; no, check for quotes
 25043 00002D65 88C4                    	mov	ah,al		; save leadin
 25044 00002D67 AC                      	lodsb			; get trailing byte
 25045 00002D68 3D2020                  	cmp	ax,2020h
 25046                                  	;cmp	ax,DB_SPACE	; is it Kanji space
 25047 00002D6B 75F2                    	jne	short KanjiScan	; no, go get next
 25048 00002D6D C744FE2020              	mov	word [si-2],2020h
 25049                                  				; replace with spaces
 25050 00002D72 EBEB                    	jmp	short KanjiScan	; go get next char
 25051                                  	
 25052                                  KanjiQuote:
 25053 00002D74 3C22                    	cmp	al,22h	; '"'	; beginning of quoted string
 25054 00002D76 750D                    	jne	short KanjiEnd	; no, check for end
 25055 00002D78 FECD                    	dec	ch		; drop count
 25056 00002D7A 74E3                    	jz	short KanjiScan	; if count is zero, no quoting
 25057                                  KanjiQuoteLoop:
 25058 00002D7C AC                      	lodsb			; get next byte
 25059 00002D7D 3C22                    	cmp	al,22h	; '"'	; is it another quote
 25060 00002D7F 75FB                    	jne	short KanjiQuoteLoop
 25061                                  				; no, get another
 25062 00002D81 FECD                    	dec	ch		; yes, drop count
 25063 00002D83 EBDA                    	jmp	short KanjiScan	; go get next char
 25064                                  KanjiEnd:
 25065 00002D85 3C0D                    	cmp	al,13 ; 0Dh	; end of line character?
 25066 00002D87 75D6                    	jne	short KanjiScan	; go back to beginning
 25067 00002D89 59                      	pop	cx		; get back original count
 25068                                  	; 26/04/2023
 25069 00002D8A 89FE                    	mov	si,di		; restore pointer to beginning
 25070                                  	
 25071                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25072                                  PRESCANLP:
 25073 00002D8C AC                      	lodsb
 25074                                  	; 26/02/2023
 25075 00002D8D E898F9                  	call	testkanj
 25076 00002D90 740C                    	jz	short NOTKANJ6
 25077                                  	; MSDOS 6.0
 25078 00002D92 8805                    	mov	[di],al
 25079 00002D94 47                      	inc	di		; fake STOSB into DS
 25080 00002D95 AC                      	lodsb			; grab second byte
 25081 00002D96 8805                    	mov	[di],al		; fake stosb into DS
 25082 00002D98 FEC1                    	inc	cl
 25083 00002D9A FEC1                    	inc	cl
 25084 00002D9C EBEE                    	jmp	short PRESCANLP
 25085                                  
 25086                                  NOTKANJ6:
 25087                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25088 00002D9E 3C22                    	cmp	al,'"'	; 22h	; " character
 25089 00002DA0 7510                    	jne	short TRYGREATER
 25090 00002DA2 FECD                    	dec	ch
 25091 00002DA4 740C                    	jz	short TRYGREATER
 25092                                  QLOOP:
 25093 00002DA6 8805                    	mov	[di],al
 25094 00002DA8 47                      	inc	di
 25095 00002DA9 FEC1                    	inc	cl
 25096 00002DAB AC                      	lodsb
 25097 00002DAC 3C22                    	cmp	al,'"'		; " character
 25098 00002DAE 75F6                    	jne	short QLOOP
 25099 00002DB0 FECD                    	dec	ch
 25100                                  TRYGREATER:
 25101 00002DB2 3C3E                    	cmp	al,'>' ; 3Eh
 25102                                  	;cmp	al,rabracket	; MSDOS 6.0 (& 5.0)
 25103                                  	;;cmp	al,[RABRACKET]	; MSDOS 3.3
 25104 00002DB4 7565                    	jne	short NOOUT
 25105                                  
 25106                                  ; We have found a ">" char. We need to see if there is another ">"
 25107                                  ; following it.
 25108                                  
 25109 00002DB6 3804                    	cmp	[si],al
 25110 00002DB8 7506                    	jne	short NOAPPND
 25111 00002DBA AC                      	lodsb
 25112 00002DBB 26FE06[C102]            	inc	byte [es:Re_Out_App] ; Flag >>
 25113                                  NOAPPND:
 25114                                  ; Now we attempt to find the file name. First, scan off all whitespace
 25115                                  
 25116 00002DC0 E88AFB                  	call	scanoff
 25117                                  
 25118                                  	; 26/02/2023
 25119                                  	; MSDOS 6.0
 25120 00002DC3 3C3C                    	cmp	al,'<' ; 3Ch
 25121                                  	;cmp	al,labracket	;AN040; was there no filename?
 25122 00002DC5 7404                    	je	short REOUT_ERRSET
 25123                                  				;AN040; yes - set up error
 25124                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25125 00002DC7 3C0D                    	cmp	al,0Dh
 25126 00002DC9 750D                    	jnz	short GOTREOFIL
 25127                                  
 25128                                  ; There was no file present. Set us up at end-of-line.
 25129                                  
 25130                                  REOUT_ERRSET:			;AN040; set up for an error
 25131 00002DCB C6050D                  	mov	byte [di],0Dh	; Clobber first ">"
 25132 00002DCE 26C706[C202]0900        	mov	word [es:Re_OutStr],9
 25133                                  				; Cause an error later
 25134 00002DD5 E9B700                  	jmp	PRESCANEND
 25135                                  
 25136                                  GOTREOFIL:
 25137 00002DD8 57                      	push	di
 25138                                  	;mov	di,offset RESGROUP:RE_OUTSTR
 25139 00002DD9 BF[C202]                	mov	di,Re_OutStr
 25140 00002DDC 89FB                    	mov	bx,di
 25141 00002DDE 06                      	push	es
 25142                                  
 25143                                  	; 26/02/2023
 25144                                  	; MSDOS 6.0
 25145                                  SETREOUTSTR:			; Get the output redirection name
 25146                                  				; MSKK06 07/14/89
 25147 00002DDF 51                      	push	cx		; save cx
 25148 00002DE0 B94D00                  	mov	cx,64+13	; CX = max string length
 25149                                  SETREOUTSTR_LOOP:
 25150 00002DE3 AC                      	lodsb
 25151 00002DE4 3C0D                    	cmp	al,0Dh
 25152 00002DE6 741A                    	je	short GOTRESTR_J
 25153 00002DE8 E86AFB                  	call	DELIM
 25154 00002DEB 7415                    	jz	short GOTRESTR_J
 25155 00002DED 3A06[D59B]              	cmp	al,[SWITCHAR]
 25156 00002DF1 740F                    	je	short GOTRESTR_J
 25157 00002DF3 3C22                    	cmp	al,'"' ; 22h 	;AN033; Is the character a quote?
 25158 00002DF5 7421                    	je	short PIPEERRSYNJ5_J
 25159                                  				;AN033; Yes - get out quick - or system crashes
 25160 00002DF7 3C3C                    	cmp	al,'<' ; 3Ch
 25161                                  	;cmp	al,labracket	;AN002; Is char for input redirection
 25162 00002DF9 7404                    	je	short ABRACKET_TERM
 25163                                  				;AN002; yes - end of string
 25164 00002DFB 3C3E                    	cmp	al,'>' ; 3Eh
 25165                                  	;cmp	al,rabracket	;AN002; Is char for output redirection
 25166 00002DFD 7506                    	jne	short NO_ABRACKET
 25167                                  				;AN002; no - not end of string
 25168                                  ABRACKET_TERM:			;AN002; have end of string by < or >
 25169 00002DFF 4E                      	dec	si		;AN002; back up over symbol
 25170 00002E00 B020                    	mov	al,20h ; BLANK	;AN002; show delimiter as char
 25171                                  GOTRESTR_J:
 25172 00002E02 59                      	pop	cx		; MSKK06 07/14/89
 25173 00002E03 EB66                    	jmp	short GOTRESTR	;AN002; go process it
 25174                                  NO_ABRACKET:			;AN002; NOT AT END OF STRING
 25175 00002E05 AA                      	stosb			; store it into resgroup
 25176                                  
 25177                                  ; 05/08/2024 - PCDOS 7.1 COMMAND.COM
 25178                                  %if 1
 25179                                  ;ifdef DBCS
 25180                                  	;invoke	testkanj
 25181                                  	;jz	short @f	; if not lead byte of DBCS
 25182 00002E06 E81FF9                  	call	testkanj
 25183 00002E09 7409                    	jz	short NO_ABRACKET_@
 25184 00002E0B E3F5                    	jcxz	GOTRESTR_J	; if no tail byte
 25185 00002E0D AC                      	lodsb
 25186 00002E0E 3C0D                    	cmp	al,0Dh
 25187 00002E10 74F0                    	jz	short GOTRESTR_J ; if tail byte does't come and ends
 25188 00002E12 AA                      	stosb			; copy tail byte
 25189 00002E13 49                      	dec	cx
 25190                                  ;@@:
 25191                                  NO_ABRACKET_@:	; 05/08/2024
 25192                                  ;endif
 25193                                  %endif
 25194                                  
 25195 00002E14 E2CD                    	loop	SETREOUTSTR_LOOP
 25196                                  				; MSKK06 07/14/89
 25197 00002E16 EBEA                    	jmp	short GOTRESTR_J
 25198                                  PIPEERRSYNJ5_J:
 25199 00002E18 59                      	pop	cx		; recover CX
 25200 00002E19 EB4B                    	jmp	short PIPEERRSYNJ5
 25201                                  
 25202                                  	; 26/02/2023
 25203                                  ;	; MSDOS 3.3
 25204                                  ;SETREOUTSTR_LOOP:		; Get the output redirection name
 25205                                  ;	lodsb
 25206                                  ;	cmp	al,0Dh
 25207                                  ;	jz	short GOTRESTR
 25208                                  ;	call	DELIM
 25209                                  ;	jz	short GOTRESTR
 25210                                  ;	cmp	al,[SWITCHAR]
 25211                                  ;	je	short GOTRESTR
 25212                                  ;	cmp	al,'"'
 25213                                  ;	jne	short NO_ABRACKET
 25214                                  ;	dec	ch
 25215                                  ;NO_ABRACKET:
 25216                                  ;	stosb
 25217                                  ;	jmp	short SETREOUTSTR_LOOP
 25218                                  
 25219                                  NOOUT:
 25220                                  	; 26/02/2023
 25221                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25222 00002E1B 3C3C                    	cmp	al, '<' ; 3Ch
 25223                                  	;cmp	al,labracket	; MSDOS 6.0
 25224                                  	;;cmp	al,[LABRACKET]  ; MSDOS 3.3
 25225 00002E1D 7523                    	jne	short CHKPIPE
 25226 00002E1F 89F3                    	mov	bx,si		; Save loc of "<"
 25227 00002E21 E829FB                  	call	scanoff
 25228                                  	; MSDOS 6.0
 25229 00002E24 3C3E                    	cmp	al,'>' ; 3Eh
 25230                                  	;cmp	al,rabracket	;AN040; was there no filename?
 25231 00002E26 7404                    	je	short REIN_ERRSET ;AN040; yes - set up error
 25232                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25233 00002E28 3C0D                    	cmp	al,0Dh
 25234 00002E2A 750B                    	jne	short GOTREIFIL
 25235                                  REIN_ERRSET:			;AN040; set up for error
 25236 00002E2C C6050D                  	mov	byte [di],0Dh	; Clobber "<"
 25237 00002E2F C706[7C9B]0900          	mov	word [RE_INSTR],9 
 25238                                  				; Cause an error later
 25239 00002E35 EB58                    	jmp	short PRESCANEND
 25240                                  GOTREIFIL:
 25241 00002E37 57                      	push	di
 25242 00002E38 BF[7C9B]                	mov	di,RE_INSTR
 25243 00002E3B 89FB                    	mov	bx,di
 25244 00002E3D 06                      	push	es
 25245 00002E3E 0E                      	push	cs
 25246 00002E3F 07                      	pop	es		; store in TRANGROUP
 25247                                  	; 26/04/2023
 25248                                  	;jmp	short SETREOUTSTR_LOOP  ; MSDOS 3.3 COMMAND.COM
 25249 00002E40 EB9D                    	jmp	short SETREOUTSTR ; MSDOS 5.0 (& 6.0) COMMAND.COM
 25250                                  				; Get the input redirection name
 25251                                  CHKPIPE:
 25252 00002E42 88C4                    	mov	ah,al
 25253                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25254 00002E44 80FC7C                  	cmp	ah,'|' ; 7Ch
 25255                                  	;cmp	ah,ALTPIPECHR ; 7Ch
 25256                                  	;je	short ISPIPE3
 25257                                  	;; MSDOS 6.0
 25258                                  	;cmp	ah,'|' ; 7Ch
 25259                                  	;;cmp	al,vbar ; 7Ch
 25260                                  	;;;cmp	ah,[VBAR]  ; MSDOS 3.3
 25261 00002E47 7539                    	jne	short CONTPRESCAN
 25262                                  ISPIPE3:
 25263                                  ; Only push the echo flag if we are entering the pipe for the first time.
 25264                                  
 25265 00002E49 26803E[1303]00          	cmp	byte [es:PipeFlag],0
 25266 00002E4F 7505                    	jne	short NOECHOPUSH
 25267 00002E51 26D026[9D02]            	shl	byte [es:EchoFlag],1 ; push echo state and turn it off
 25268                                  NOECHOPUSH:
 25269 00002E56 26FE06[1303]            	inc	byte [es:PipeFlag]
 25270 00002E5B E8EFFA                  	call	scanoff
 25271 00002E5E 3C0D                    	cmp	al,0Dh
 25272 00002E60 7404                    	je	short PIPEERRSYNJ5
 25273                                  	; 26/02/2023
 25274 00002E62 3C7C                    	cmp	al,'|' ; 7Ch
 25275                                  	;cmp	al,ALTPIPECHR ; 7Ch
 25276                                  	;je	short PIPEERRSYNJ5
 25277                                  	;; MSDOS 6.0
 25278                                  	;cmp	al,'|' ; 7Ch
 25279                                  	;;cmp	al,vbar ; 7Ch
 25280                                  	;;;cmp	al,[VBAR]  ; MSDOS 3.3	
 25281 00002E64 751C                    	jne	short CONTPRESCAN
 25282                                  
 25283                                  PIPEERRSYNJ5:
 25284 00002E66 06                      	push	es
 25285 00002E67 1F                      	pop	ds
 25286 00002E68 E99C02                  	jmp	PIPEERRSYN
 25287                                  
 25288                                  ; Trailing :s are allowed on devices. Check to be sure that there is more
 25289                                  ; than just a : in the redir string.
 25290                                  
 25291                                  GOTRESTR:
 25292 00002E6B 86E0                    	xchg	ah,al
 25293 00002E6D B03A                    	mov	al,':' ; 3Ah
 25294 00002E6F 29FB                    	sub	bx,di		; compute negative of number of chars
 25295 00002E71 83FBFF                  	cmp	bx,-1		; is there just a :?
 25296 00002E74 7407                    	je	short NOTRAILCOL ; yep, don't change
 25297 00002E76 263845FF                	cmp	[es:di-1],al	; Trailing ':' OK on devices
 25298 00002E7A 7501                    	jne	short NOTRAILCOL
 25299 00002E7C 4F                      	dec	di		; Back up over trailing ':'
 25300                                  NOTRAILCOL:
 25301 00002E7D 30C0                    	xor	al,al
 25302 00002E7F AA                      	stosb			; NUL terminate the string
 25303 00002E80 07                      	pop	es
 25304 00002E81 5F                      	pop	di		; Remember the start
 25305                                  CONTPRESCAN:
 25306 00002E82 8825                    	mov	[di],ah		; "delete" the redirection string
 25307 00002E84 47                      	inc	di
 25308 00002E85 80FC0D                  	cmp	ah,0Dh
 25309 00002E88 7405                    	je	short PRESCANEND
 25310 00002E8A FEC1                    	inc	cl
 25311 00002E8C E9FDFE                  	jmp	PRESCANLP
 25312                                  PRESCANEND:
 25313 00002E8F 26803E[1303]00          	cmp	byte [es:PipeFlag],0
 25314 00002E95 7414                    	jz	short ISNOPIPE
 25315                                  
 25316                                  	; 11/06/2023
 25317                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:314Ah
 25318                                  	;mov	di,48Ah		; PipeStr ; RESGROUP:EndInit+160
 25319                                  	;mov	[es:488h],di	; [es:PipePtr],di
 25320                                  				; (RESGROUP:EndInit+158)
 25321                                  	; 26/02/2023
 25322                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA0h
 25323                                  	;;mov	di,3C0h		; offset RESGROUP:PIPESTR
 25324                                  	;;			; (EndInit+160]
 25325                                  
 25326                                  	; 05/08/2024
 25327                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2FEAh
 25328                                  	;mov	di,4BEh		; PipeStr ; RESGROUP:EndInit+160	
 25329                                  	;mov	[es:4BCh],di	; (RESGROUP:EndInit+158)
 25330                                  
 25331                                  	;mov	di,offset RESGROUP:PIPESTR
 25332 00002E97 BF[B503]                	mov	di,PipeStr	; RESGROUP:EndInit+160
 25333                                  
 25334                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA3h
 25335                                  	;;mov	[es:3BEh],di	; [es:EndInit+158]
 25336 00002E9A 26893E[B303]            	mov	[es:PipePtr],di	; RESGROUP:EndInit+158
 25337                                  	
 25338 00002E9F BE[329A]                	mov	si,COMBUF+2
 25339 00002EA2 E8A8FA                  	call	scanoff
 25340                                  PIPESETLP:			; Transfer the pipe into the resident
 25341 00002EA5 AC                      	lodsb			; pipe buffer
 25342 00002EA6 AA                      	stosb
 25343 00002EA7 3C0D                    	cmp	al,0Dh
 25344 00002EA9 75FA                    	jnz	short PIPESETLP
 25345                                  ISNOPIPE:
 25346 00002EAB 880E[319A]              	mov	[COMBUF+1],cl
 25347 00002EAF 26803E[1303]00          	cmp	byte [es:PipeFlag],0 ; [es:41Ch] ; PCDOS 7.1 COMMAND.COM
 25348 00002EB5 0E                      	push	cs
 25349 00002EB6 07                      	pop	es
 25350 00002EB7 C3                      	retn
 25351                                  
 25352                                  ; =============== S U B	R O U T	I N E =======================================
 25353                                  
 25354                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25355                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2BC1h
 25356                                  cmd_copy:
 25357 00002EB8 BE[329A]                	mov	si,COMBUF+2
 25358 00002EBB E88FFA                  	call	scanoff		; advance past separators...
 25359 00002EBE 0336[6E9D]              	add	si,[PathPos]
 25360 00002EC2 BF8100                  	mov	di,81h
 25361 00002EC5 31C9                    	xor	cx,cx
 25362                                  cmdcopy:
 25363 00002EC7 AC                      	lodsb
 25364 00002EC8 AA                      	stosb
 25365 00002EC9 3C0D                    	cmp	al,0Dh
 25366 00002ECB 7403                    	je	short copy_done
 25367 00002ECD 41                      	inc	cx
 25368 00002ECE EBF7                    	jmp	short cmdcopy
 25369                                  copy_done:
 25370 00002ED0 880E8000                	mov	[80h],cl
 25371 00002ED4 C3                      	retn
 25372                                  
 25373                                  ; =============== S U B	R O U T	I N E =======================================
 25374                                  
 25375                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25376                                  test_append:
 25377 00002ED5 BB[309A]                	mov	bx,COMBUF	; barry can address
 25378 00002ED8 BE[999C]                	mov	si,IDLEN	; address command name, DS already set 	
 25379 00002EDB BAFFFF                  	mov	dx,-1
 25380 00002EDE B800AE                  	mov	ax,0AE00h
 25381 00002EE1 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal 
 25382                                  			; - INSTALLABLE	COMMAND	- INSTALL CHECK
 25383                                  			; DX = FFFFh,[BX -> command line
 25384                                  			; Return: AL = FFh if this command is a TSR extension 
 25385                                  			;		   to COMMAND.COM
 25386                                  			; AL = 00h if the command should be executed as	usual
 25387                                  	;cmp	al,0
 25388 00002EE3 08C0                    	or	al,al ; 25/02/2023
 25389 00002EE5 C3                      	retn
 25390                                  
 25391                                  	; 25/02/2023
 25392                                  	; INT 2Fh
 25393                                  	; 	AX = AE00h
 25394                                  	; entry:
 25395                                  	; 	DX = magic value FFFFh
 25396                                  	; 	CH = FFh
 25397                                  	; 	CL = length of command line tail
 25398                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 25399                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 25400                                  	; return:
 25401                                  	;	AL = FFh if this command is a TSR extension to COMMAND.COM
 25402                                  	;	AL = 00h if the command should be executed as usual
 25403                                  	;
 25404                                  	; Format of COMMAND.COM command line buffer:
 25405                                  	;	Offset  Size    Description
 25406                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 25407                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 25408                                  	;	N BYTEs command line text, terminated by 0Dh
 25409                                  	;
 25410                                  	; Format of command name buffer:
 25411                                  	;	Offset  Size    Description
 25412                                  	;	00h     BYTE    length of command name
 25413                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 25414                                  
 25415                                  ;============================================================================
 25416                                  ; TMISC2.ASM, MSDOS 6.0, 1991
 25417                                  ;============================================================================
 25418                                  ; 05/10/2018 - Retro DOS v3.0
 25419                                  
 25420                                  ;	More misc routines
 25421                                  
 25422                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1D9Bh
 25423                                  
 25424                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25425                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2BEFh
 25426                                  
 25427                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25428                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3199h
 25429                                  
 25430                                  ; 05/08/2024 - Retro DOS v5.0 COMMAND.COM
 25431                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 3039h
 25432                                  
 25433                                  ; =============== S U B	R O U T	I N E =======================================
 25434                                  
 25435                                  SETPATH:
 25436                                  
 25437                                  ; ENTRY PathPos = ptr to string
 25438                                  ;       PathCnt = length of string
 25439                                  ;
 25440                                  ; EXIT  PathPos = ptr to string after pathname
 25441                                  ;       PathCnt = length of rest of string
 25442                                  ;       DX = ptr to pathname in string, made ASCIIZ
 25443                                  ;       DestIsDir = 1 if pathname delimiters appeared in pathname, 0 otherwise
 25444                                  ;       DestInfo = 2 if wildcards (?, *) appeared in pathname, 0 otherwise
 25445                                  ;
 25446                                  ;       A null character is dropped at the end of the pathname. If the
 25447                                  ;       character in that spot previously was CR, it is copied into the
 25448                                  ;       following byte. So there must be at least two two character 
 25449                                  ;       positions in the buffer following the pathname.
 25450                                  
 25451                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25452                                  	
 25453                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25454                                  	; MSDOS 6.0
 25455                                  	;mov	ax,[PathCnt]	;AC000; get length of string
 25456                                  	;mov	si,[PathPos]	;AC000; get start of source buffer
 25457                                  
 25458                                  	; 26/02/2023
 25459                                  	; MSDOS 3.3
 25460                                  	;mov	si,80h
 25461                                  	;lodsb
 25462                                  	;xor	ah,ah
 25463                                  	;mov	[PATCNT],ax
 25464                                  	;mov	[PATHPOS],si
 25465                                  GETPATH:
 25466                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25467 00002EE6 C606[9A9D]00            	mov	byte [DestInfo],0
 25468 00002EEB C606[969D]00            	mov	byte [DestIsDir],0
 25469 00002EF0 8B36[6E9D]              	mov	si,[PathPos]	; SI = ptr to string
 25470 00002EF4 8B0E[6C9D]              	mov	cx,[PathCnt]	; CX = string length
 25471 00002EF8 89F2                    	mov	dx,si		; DX = ptr to string
 25472 00002EFA E34D                    	jcxz	PATHDONE	; string length is zero, we're done
 25473 00002EFC 51                      	push	cx		; save string length
 25474 00002EFD 56                      	push	si		; save ptr to string
 25475 00002EFE E80AFC                  	call	SWITCH
 25476                                  
 25477                                  ;       After Switch, SI has been scanned past any switches, and
 25478                                  ;       switches that COMMAND intrinsically recognizes are recorded in AX.
 25479                                  
 25480 00002F01 A3[709D]                	mov	[PathSw],ax	; PathSw = switch occurrence mask
 25481 00002F04 5B                      	pop	bx		; BX = ptr to original string
 25482 00002F05 29F3                    	sub	bx,si		; BX = -(# chars scanned by Switch)
 25483 00002F07 59                      	pop	cx		; CX = string length
 25484 00002F08 01D9                    	add	cx,bx		; CX = string length from current SI
 25485 00002F0A 89F2                    	mov	dx,si		; DX = ptr to current string
 25486                                  SKIPPATH:
 25487                                  	; 26/02/2023
 25488                                  	; MSDOS 6.0
 25489 00002F0C C606[2C9F]00            	mov	byte [KPARSE],0
 25490                                  SKIPPATH2:
 25491 00002F11 E336                    	jcxz	PATHDONE	; string length is zero, we're done
 25492 00002F13 49                      	dec	cx		; CX = length left after next char
 25493 00002F14 AC                      	lodsb			; AL = next char of string
 25494                                  				; SI = ptr to char after this one
 25495                                  	; 26/02/2023
 25496 00002F15 E810F8                  	call	testkanj
 25497 00002F18 7408                    	jz	short TESTPPSEP
 25498 00002F1A 49                      	dec	cx
 25499 00002F1B 46                      	inc	si
 25500 00002F1C FE06[2C9F]              	inc	byte [KPARSE]
 25501 00002F20 EBEF                    	jmp	short SKIPPATH2
 25502                                  TESTPPSEP:
 25503 00002F22 E8B6FA                  	call	pathchrcmp	; compare AL to path delimiter char
 25504 00002F25 7504                    	jnz	short TESTPMETA	; it's not a path delim
 25505 00002F27 FE06[969D]              	inc	byte [DestIsDir]
 25506                                  				; DestIsDir = 1, signalling path char
 25507                                  TESTPMETA:
 25508 00002F2B 3C3F                    	cmp	al,'?'
 25509 00002F2D 7505                    	jne	short TESTPSTAR	; char is not '?'
 25510 00002F2F 800E[9A9D]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 25511                                  TESTPSTAR:
 25512 00002F34 3C2A                    	cmp	al,'*'
 25513                                  	;cmp	al,[STAR] ; MSDOS 3.3	
 25514 00002F36 7505                    	jne	short TESTPDELIM ; char is not '*'
 25515 00002F38 800E[9A9D]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 25516                                  TESTPDELIM:
 25517 00002F3D E815FA                  	call	DELIM		; compare AL to all delimiters
 25518 00002F40 7406                    	jz	short PATHDONEDEC ; delimiter found, back up & leave
 25519 00002F42 3A06[D59B]              	cmp	al,[SWITCHAR]
 25520 00002F46 75C4                    	jne	short SKIPPATH	; char isn't switch, go get next char
 25521                                  PATHDONEDEC:
 25522 00002F48 4E                      	dec	si		; SI = ptr to char after pathname
 25523                                  PATHDONE:
 25524 00002F49 30C0                    	xor	al,al		; AL = NULL
 25525 00002F4B 8604                    	xchg	al,[si]		; place NULL after pathname
 25526 00002F4D 46                      	inc	si		; SI = ptr to byte after NULL
 25527 00002F4E 3C0D                    	cmp	al,0Dh		; were we at end of line?
 25528 00002F50 7502                    	jne	short NOPSTORE	; not EOL, finish up
 25529 00002F52 8804                    	mov	[si],al		; save EOL after NULL
 25530                                  NOPSTORE:
 25531 00002F54 8936[6E9D]              	mov	[PathPos],si	; PathPos = ptr to char after NULL
 25532 00002F58 890E[6C9D]              	mov	[PathCnt],cx	; PathCnt = length of string left
 25533                                  SETPATH_RETN:
 25534 00002F5C C3                      	retn
 25535                                  
 25536                                  ; ---------------------------------------------------------------------------
 25537                                  
 25538                                  PGETARG:
 25539 00002F5D BE8000                  	mov	si,80h
 25540 00002F60 AC                      	lodsb
 25541 00002F61 08C0                    	or	al,al
 25542 00002F63 74F7                    	jz	short SETPATH_RETN
 25543 00002F65 E80300                  	call	PSCANOFF
 25544 00002F68 3C0D                    	cmp	al,0Dh
 25545 00002F6A C3                      	retn
 25546                                  
 25547                                  ; ---------------------------------------------------------------------------
 25548                                  
 25549                                  PSCANOFF:
 25550 00002F6B AC                      	lodsb
 25551 00002F6C E8E6F9                  	call	DELIM
 25552 00002F6F 7504                    	jnz	short PSCANOFFD
 25553 00002F71 3C3B                    	cmp	al,';' ; 3Bh
 25554 00002F73 75F6                    	jne	short PSCANOFF	; ';' is not a delimiter
 25555                                  PSCANOFFD:
 25556 00002F75 4E                      	dec	si		; Point to first non-delimiter
 25557 00002F76 C3                      	retn
 25558                                  
 25559                                  ; =============== S U B	R O U T	I N E =======================================
 25560                                  
 25561                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25562                                  IOSET:
 25563                                  	; ALL REGISTERS PRESERVED
 25564 00002F77 1E                      	push	ds
 25565 00002F78 52                      	push	dx
 25566 00002F79 50                      	push	ax
 25567 00002F7A 53                      	push	bx
 25568 00002F7B 51                      	push	cx
 25569 00002F7C 2E8E1E[D19B]            	mov	ds,[cs:RESSEG]
 25570 00002F81 803E[1303]00            	cmp	byte [PipeFlag],0
 25571 00002F86 750D                    	jne	short NOREDIR
 25572 00002F88 F606[AA02]FF            	test	byte [IfFlag],0FFh
 25573 00002F8D 7506                    	jnz	short NOREDIR
 25574 00002F8F E88C00                  	call	TESTDOREIN
 25575 00002F92 E80600                  	call	TESTDOREOUT
 25576                                  NOREDIR:
 25577 00002F95 59                      	pop	cx
 25578 00002F96 5B                      	pop	bx
 25579 00002F97 58                      	pop	ax
 25580 00002F98 5A                      	pop	dx
 25581 00002F99 1F                      	pop	ds
 25582                                  IOSET_RETN:	; 06/08/2024
 25583 00002F9A C3                      	retn
 25584                                  
 25585                                  ; =============== S U B	R O U T	I N E =======================================
 25586                                  
 25587                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25588                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CF3h
 25589                                  
 25590                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 25591                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:313Dh
 25592                                  TESTDOREOUT:
 25593 00002F9B 803E[C202]00            	cmp	byte [Re_OutStr],0
 25594                                  	;je	short NOREOUT  ; MSDOS 3.3
 25595                                  	; 26/02/2023
 25596                                  	;jne	short REOUTEXISTS
 25597                                  	;jmp	NOREOUT
 25598                                  	; 06/08/2024
 25599 00002FA0 74F8                    	jz	short IOSET_RETN
 25600                                  REOUTEXISTS:
 25601 00002FA2 803E[C102]00            	cmp	byte [Re_Out_App],0
 25602 00002FA7 745D                    	je	short REOUTCRT
 25603                                  
 25604 00002FA9 BA[C202]                	mov	dx,Re_OutStr
 25605                                  
 25606                                  	; 26/02/2023
 25607                                  	; MSDOS 6.0
 25608                                  	;mov	ax,(OPEN SHL 8) OR 2 ;AC011; Open for read/write
 25609 00002FAC B8023D                  	mov	ax,3D02h
 25610                                  	; MSDOS 3.3
 25611                                  	;mov	ax,(OPEN<<8)|1  ; 3D01h ; Open for write
 25612                                  	
 25613                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25614 00002FAF 50                      	push	ax
 25615 00002FB0 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 25616                                  			; DS:DX	-> ASCIZ filename
 25617                                  			; AL = access mode
 25618                                  			; 1 - write
 25619 00002FB2 5B                      	pop	bx
 25620 00002FB3 724B                    	jc	short OpenWriteError
 25621                                  
 25622                                  	; 26/02/2023
 25623                                  	; MSDOS 6.0
 25624 00002FB5 89C3                    	mov	bx,ax
 25625                                  	;mov	ax,IOCTL<<8		;AN035; Get attributes of handle
 25626 00002FB7 B80044                  	mov	ax,4400h
 25627 00002FBA CD21                    	int	21h			;AN035;
 25628                                  			; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 25629                                  			; BX = file or device handle
 25630 00002FBC F6C280                  	test	dl,80h
 25631                                  	;test	dl,devid_ISDEV		;AN035; Is it a device?
 25632 00002FBF 7554                    	jnz	short SET_REOUT		;AN035; Yes, don't read from it
 25633                                  	
 25634                                  	;mov	ax,(LSEEK SHL 8) OR 2
 25635 00002FC1 B80242                  	mov	ax,4202h
 25636 00002FC4 B9FFFF                  	mov	cx,-1			;AC011; MOVE TO EOF -1
 25637 00002FC7 89CA                    	mov	dx,cx			;AC011;
 25638 00002FC9 CD21                    	int	21h
 25639                                  			; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 25640                                  			; AL = method: offset from end of file
 25641 00002FCB 0E                      	push	cs			;AN011; Get transient seg to DS
 25642 00002FCC 1F                      	pop	ds			;AN011;
 25643                                  	
 25644                                  	;mov	ax,(READ SHL 8) 	;AN011; Read one byte from the
 25645 00002FCD B8003F                  	mov	ax,3F00h
 25646 00002FD0 B90100                  	mov	cx,1			;AN011;  file into one_char_val
 25647 00002FD3 BA[8E9D]                	mov	dx,One_Char_Val		;AN011;
 25648 00002FD6 CD21                    	int	21h			;AN011;
 25649                                  			; DOS - 2+ - READ FROM FILE WITH HANDLE
 25650                                  			; BX = file handle, CX = number of bytes to read
 25651                                  			; DS:DX -> buffer
 25652 00002FD8 7226                    	jc	short OpenWriteError	;AN011; If error, exit
 25653 00002FDA 39C8                    	cmp	ax,cx			;AN017; Did we read 1 byte?
 25654 00002FDC 7517                    	jnz	short reout_0_length	;AN017; No - file must be 0 length
 25655                                  	
 25656 00002FDE 803E[8E9D]1A            	cmp	byte [One_Char_Val],1Ah	;AN011; Was char an eof mark?
 25657 00002FE3 8E1E[D19B]              	mov	ds,[RESSEG]		;AN011; Get resident segment back
 25658 00002FE7 752C                    	jne	short SET_REOUT		;AN011; No, just continue
 25659                                  	
 25660                                  	;mov	ax,(LSEEK<<8)|1		;AN011; EOF mark found
 25661 00002FE9 B80142                  	mov	ax,4201h
 25662 00002FEC B9FFFF                  	mov	cx,-1			;AN011; LSEEK back one byte
 25663                                  setreout_p:	; 26/02/2023
 25664 00002FEF 89CA                    	mov	dx,cx			;AN011;
 25665 00002FF1 CD21                    	int	21h			;AN011;
 25666 00002FF3 EB20                    	jmp	short SET_REOUT
 25667                                  reout_0_length: 			;AN017; We have a 0 length file
 25668                                  	; ds = cs ; 26/02/2023
 25669                                  	;mov	ds,[cs:RESSEG] ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2D50h
 25670                                  					;AN017; Get resident segment back
 25671                                  	; 26/02/2023
 25672 00002FF5 8E1E[D19B]              	mov	ds,[RESSEG]
 25673                                  	;mov	ax,(LSEEK SHL 8)	;AN017; Move to beginning of file
 25674 00002FF9 B80042                  	mov	ax,4200h
 25675 00002FFC 31C9                    	xor	cx,cx			;AN017; Offset is 0
 25676                                  	;mov	dx,cx			;AN017;
 25677                                  	;int	21h			;AN017;
 25678                                  	;jmp	short SET_REOUT 	;AN017; now finish setting up redirection
 25679                                  	; 26/02/2023
 25680 00002FFE EBEF                    	jmp	short setreout_p
 25681                                  
 25682                                  	; 26/02/2023
 25683                                  	; MSDOS 3.3
 25684                                  	;xor	dx,dx
 25685                                  	;xor	cx,cx
 25686                                  	;mov	bx,ax
 25687                                  	;mov	ax,(LSEEK<<8)|2 ; 4202h
 25688                                  	;int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 25689                                  	;		; AL = method: offset from end of file
 25690                                  	;jmp	short SET_REOUT
 25691                                  		
 25692                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25693                                  OpenWriteError:	
 25694                                  	;cmp	ax,5
 25695 00003000 83F805                  	cmp	ax,ERROR_ACCESS_DENIED
 25696 00003003 F9                      	stc
 25697                                  	;;je	short REDIRERR ; MSDOS 3.3
 25698                                  	; 26/02/2023
 25699                                  	;jnz	short REOUTCRT
 25700                                  	;jmp	REDIRERR
 25701 00003004 743B                    	je	short REDIRERR
 25702                                  
 25703                                  REOUTCRT:	
 25704 00003006 BA[C202]                	mov	dx,Re_OutStr
 25705 00003009 31C9                    	xor	cx,cx
 25706                                  	;mov	ah,CREAT ; 3Ch
 25707 0000300B B43C                    	mov	ah,3Ch
 25708 0000300D 50                      	push	ax
 25709 0000300E CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 25710                                  			; CX = attributes for file
 25711                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 25712 00003010 5B                      	pop	bx
 25713                                  	;jc	short REDIRERR ; MSDOS 3.3
 25714                                  	; 26/02/2023
 25715                                  	;jnc	short NOREDIRERR
 25716                                  	;jmp	REDIRERR
 25717 00003011 722E                    	jc	short REDIRERR
 25718                                  	
 25719                                  NOREDIRERR:
 25720 00003013 89C3                    	mov	bx,ax
 25721                                  SET_REOUT:
 25722                                  
 25723                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdout
 25724                                  ; spot. We invalidate the new JFN we got.
 25725                                  
 25726 00003015 B0FF                    	mov	al,0FFh
 25727                                  	;xchg	al,[bx+18h]
 25728 00003017 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 25729 0000301A A21900                  	mov	[PDB.JFN_TABLE+1],al
 25730                                  NOREOUT:	; 06/08/2024
 25731 0000301D C3                      	retn
 25732                                  
 25733                                  ; =============== S U B	R O U T	I N E =======================================
 25734                                  
 25735                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25736                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 25737                                  
 25738                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 25739                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:30F5h
 25740                                  TESTDOREIN:
 25741 0000301E 2E803E[7C9B]00          	cmp	byte [cs:RE_INSTR],0
 25742                                  	;jz	short IOSET_RETN
 25743                                  	; 06/08/2024
 25744 00003024 74F7                    	jz	short NOREOUT
 25745 00003026 1E                      	push	ds
 25746 00003027 0E                      	push	cs
 25747 00003028 1F                      	pop	ds
 25748 00003029 BA[7C9B]                	mov	dx,RE_INSTR
 25749                                  	;;mov	ax,OPEN*256 ; 3D00h
 25750                                  	;mov	ax,3D00h
 25751                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 25752                                  	;mov	ax,(OPEN*256)+SHARING_DENY_NONE
 25753 0000302C B8403D                  	mov	ax,3D40h
 25754 0000302F 89C3                    	mov	bx,ax
 25755 00003031 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 25756                                  			; DS:DX	-> ASCIZ filename
 25757                                  			; AL = access mode
 25758                                  			; 0 - read
 25759 00003033 1F                      	pop	ds
 25760                                  
 25761 00003034 720B                    	jc	short REDIRERR
 25762                                  
 25763 00003036 89C3                    	mov	bx,ax
 25764 00003038 B0FF                    	mov	al,0FFh
 25765                                  
 25766                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdin
 25767                                  ; spot. We invalidate the new JFN we got.
 25768                                  
 25769                                  	;xchg	al,[bx+18h]
 25770 0000303A 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 25771 0000303D A21800                  	mov	[PDB.JFN_TABLE],al
 25772 00003040 C3                      	retn
 25773                                  
 25774                                  ; ---------------------------------------------------------------------------
 25775                                  
 25776                                  ; We had some kind of error on the redirection. Figure out what the
 25777                                  ; appropriate message should be; BX has the system call that failed
 25778                                  
 25779                                  REDIRERR:
 25780 00003041 0E                      	push	cs
 25781 00003042 1F                      	pop	ds
 25782 00003043 E82E00                  	call	TriageError  ; MSDOS 6.0
 25783                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 25784                                  
 25785                                  ; At this point, we have recognized the network-generated access denied error.
 25786                                  ; The correct message is in DX
 25787                                  
 25788 00003046 83F841                  	cmp	ax,65
 25789 00003049 7408                    	je	short _CERRORJ	;AC000; just issue message returned
 25790 0000304B 80FF3D                  	cmp	bh,OPEN ; 3Dh
 25791 0000304E 7406                    	je	short OpenError
 25792 00003050 BA[5E8F]                	mov	dx,FULLDIR_PTR
 25793                                  _CERRORJ:
 25794 00003053 E997FC                  	jmp	cerror
 25795                                  
 25796                                  OpenError:
 25797                                  ; The system call was an OPEN. Report either file not found or path not found.
 25798                                  
 25799                                  	; 26/02/2023
 25800                                  	; MSDOS 6.0
 25801                                  	;mov	byte [cs:msg_disp_class],1
 25802 00003056 2EC606[428F]01          	mov	byte [cs:msg_disp_class],ext_msg_class
 25803                                  				;AN000; set up extended error msg class
 25804 0000305C BA[448F]                	mov	dx,extend_buf_ptr
 25805                                  				;AC000; get extended message pointer
 25806 0000305F 2EA3[448F]              	mov	[cs:extend_buf_ptr],ax
 25807                                  				;AN000; get message number in control block
 25808 00003063 E987FC                  	jmp	cerror
 25809                                  
 25810                                  	; 26/02/2023
 25811                                  	; MSDOS 3.3
 25812                                  	;mov	dx,FNOTFOUNDPTR
 25813                                  	;;cmp	ax,2
 25814                                  	;cmp	ax,ERROR_FILE_NOT_FOUND
 25815                                  	;je	short _CERRORJ
 25816                                  	;mov	dx,ACCDENPTR
 25817                                  	;;cmp	ax,5 ; Access denied error
 25818                                  	;cmp	ax,ERROR_ACCESS_DENIED
 25819                                  	;je	short _CERRORJ
 25820                                  	;	; ERROR_PATH_NOT_FOUND
 25821                                  	;mov	dx,PNOTFOUNDPTR
 25822                                  	;jmp	CERROR
 25823                                  
 25824                                  ; =============== S U B	R O U T	I N E =======================================
 25825                                  
 25826                                  ; Compute length of string (including NUL) in DS:SI into CX. Change no other
 25827                                  ; registers
 25828                                  
 25829                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 25830                                  dstrlen:
 25831 00003066 50                      	push	ax
 25832 00003067 31C9                    	xor	cx,cx
 25833 00003069 FC                      	cld
 25834                                  dloop:
 25835 0000306A AC                      	lodsb
 25836 0000306B 41                      	inc	cx
 25837 0000306C 08C0                    	or	al,al
 25838 0000306E 75FA                    	jnz	short dloop
 25839 00003070 29CE                    	sub	si,cx
 25840 00003072 58                      	pop	ax
 25841                                  TRIAGEERR_RETN:
 25842 00003073 C3                      	retn
 25843                                  
 25844                                  ; =============== S U B	R O U T	I N E =======================================
 25845                                  
 25846                                  ;Break	<Extended error support>
 25847                                  
 25848                                  TriageError:  ; MSDOS 6.0
 25849                                  
 25850                                  ; TriageError will examine the return from a carry-set system call and
 25851                                  ; return the correct error if applicable.
 25852                                  ;
 25853                                  ;   Inputs:	outputs from a carry-settable system call
 25854                                  ;		No system calls may be done in the interrim
 25855                                  ;   Outputs:	If carry was set on input
 25856                                  ;		   carry set on output
 25857                                  ;		   DX contains trangroup offset to printf message
 25858                                  ;		else
 25859                                  ;		   No registers changed
 25860                                  
 25861                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1EEEh
 25862                                  
 25863                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25864                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2D92h
 25865                                  
 25866                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25867                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 333Ch
 25868                                  
 25869                                  GET_EXT_ERR_NUMBER:  ; MSDOS 3.3
 25870 00003074 73FD                    	jnc	short TRIAGEERR_RETN ; no carry => do nothing...
 25871 00003076 9C                      	pushf
 25872 00003077 53                      	push	bx
 25873 00003078 51                      	push	cx
 25874 00003079 56                      	push	si
 25875 0000307A 57                      	push	di
 25876 0000307B 55                      	push	bp
 25877 0000307C 06                      	push	es
 25878 0000307D 1E                      	push	ds
 25879 0000307E 50                      	push	ax
 25880 0000307F 52                      	push	dx
 25881 00003080 B459                    	mov	ah,59h
 25882                                  	;mov	ah,GETEXTENDEDERROR
 25883 00003082 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 25884                                  			; BX = version code (0000h for DOS 3.x)
 25885 00003084 59                      	pop	cx
 25886 00003085 5B                      	pop	bx		; restore original AX
 25887 00003086 BA[6D8F]                	mov	dx,ACCDEN_PTR
 25888 00003089 83F841                  	cmp	ax,65		; network access denied?
 25889 0000308C 7404                    	je	short NoMove	; Yes, return it.
 25890 0000308E 89D8                    	mov	ax,bx
 25891 00003090 89CA                    	mov	dx,cx
 25892                                  NoMove:
 25893 00003092 1F                      	pop	ds
 25894 00003093 07                      	pop	es
 25895 00003094 5D                      	pop	bp
 25896 00003095 5F                      	pop	di
 25897 00003096 5E                      	pop	si
 25898 00003097 59                      	pop	cx
 25899 00003098 5B                      	pop	bx
 25900 00003099 9D                      	popf
 25901 0000309A C3                      	retn
 25902                                  
 25903                                  ; =============== S U B	R O U T	I N E =======================================
 25904                                  
 25905                                  	; Far call from resident portion/segment of COMMAND.COM
 25906                                  
 25907                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F15h
 25908                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DB9h
 25909                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3363h
 25910                                  
 25911                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25912                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25913                                  Triage_Init:
 25914 0000309B E8D6FF                  	call	TriageError	 ; MSDOS 6.0
 25915                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 25916 0000309E CB                      	retf
 25917                                  
 25918                                  ; =============== S U B	R O U T	I N E =======================================
 25919                                  
 25920                                  ; MSDOS 6.0
 25921                                  
 25922                                  ; ****************************************************************
 25923                                  ; *
 25924                                  ; * ROUTINE:	 MOVE_TO_SRCBUF
 25925                                  ; *
 25926                                  ; * FUNCTION:	 Move ASCIIZ string from DS:SI to SRCBUF.  Change
 25927                                  ; *		 terminating 0 to 0dH.	Set PATHCNT to length of
 25928                                  ; *		 string.  Set PATHPOS to start of SRCBUF.
 25929                                  ; *
 25930                                  ; * INPUT:	 DS:SI points to ASCIIZ string
 25931                                  ; *		 ES    points to TRANGROUP
 25932                                  ; *
 25933                                  ; * OUTPUT:	 SRCBUF filled in with string terminated by 0dH
 25934                                  ; *		 PATHCNT set to length of string
 25935                                  ; *		 PATHPOS set to start of SRCBUF
 25936                                  ; *		 CX,AX	 changed
 25937                                  ; *
 25938                                  ; ****************************************************************
 25939                                  
 25940                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25941                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 25942                                  Move_To_SrcBuf:
 25943 0000309F 56                      	push	si			;AN000;  save si,di
 25944 000030A0 57                      	push	di			;AN000;
 25945 000030A1 51                      	push	cx			;AN000;
 25946 000030A2 BF[FE9D]                	mov	di,SrcBuf		;AN000;  set ES:DI to srcbuf
 25947 000030A5 31C9                    	xor	cx,cx			;AN000; clear cx for counint
 25948 000030A7 89C8                    	mov	ax,cx			;AN000; clear ax
 25949 000030A9 57                      	push	di			;AN000; save start of srcbuf
 25950 000030AA AC                      	lodsb				;AN000; get a character from DS:SI
 25951                                  mts_get_chars:				;AN000;
 25952                                  	;cmp	al,0			;AN000; was it a null char?
 25953 000030AB 20C0                    	and 	al,al ; al = 0 ?
 25954 000030AD 7405                    	jz	short mts_end_string	;AN000; yes - exit
 25955 000030AF AA                      	stosb				;AN000; no - store it in srcbuf
 25956 000030B0 41                      	inc	cx			;AN000; increment length count
 25957 000030B1 AC                      	lodsb				;AN000; get a character from DS:SI
 25958 000030B2 EBF7                    	jmp	short mts_get_chars	;AN000; go check it
 25959                                  mts_end_string: 			;AN000; we've reached the end of line
 25960                                  	;mov	al,END_OF_LINE_IN	;AN000; store 0Dh in srcbuf
 25961 000030B4 B00D                    	mov	al,0Dh
 25962 000030B6 AA                      	stosb				;AN000;
 25963 000030B7 5F                      	pop	di			;AN000; restore start of srcbuf
 25964 000030B8 0E                      	push	cs			;AN000; set DS to local segment
 25965 000030B9 1F                      	pop	ds			;AN000;
 25966 000030BA 890E[6C9D]              	mov	[PathCnt],cx		;AN000; set patchcnt to length count
 25967 000030BE 893E[6E9D]              	mov	[PathPos],di		;AN000; set pathpos to start of srcbuf
 25968 000030C2 59                      	pop	cx			;AN000; restore cx,di,si
 25969 000030C3 5F                      	pop	di			;AN000;
 25970 000030C4 5E                      	pop	si			;AN000;
 25971 000030C5 C3                      	retn				;AN000; exit
 25972                                  
 25973                                  ;============================================================================
 25974                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 25975                                  ;============================================================================
 25976                                  ; 03/10/2018 - Retro DOS v3.0
 25977                                  
 25978                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F19h
 25979                                  
 25980                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25981                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DE4h
 25982                                  
 25983                                  ; =============== S U B	R O U T	I N E =======================================
 25984                                  
 25985                                  	; 26/02/2023
 25986                                  SINGLETEST:
 25987 000030C6 1E                      	push	ds
 25988 000030C7 2E8E1E[D19B]            	mov	ds,[cs:RESSEG]
 25989 000030CC 833E[A502]00            	cmp	word [SingleCom],0
 25990 000030D1 7406                    	jz	short TESTDONE
 25991 000030D3 813E[A502]FFEF          	cmp	word [SingleCom],0EFFFh
 25992                                  TESTDONE:
 25993 000030D9 1F                      	pop	ds
 25994 000030DA C3                      	retn
 25995                                  
 25996                                  ; =============== S U B	R O U T	I N E =======================================
 25997                                  
 25998                                  	; 26/02/2023
 25999                                  SetRest1:
 26000 000030DB B001                    	mov	al,1
 26001                                  
 26002                                  ; ---------------------------------------------------------------------------
 26003                                  
 26004                                  SETREST:
 26005 000030DD 1E                      	push	ds
 26006 000030DE 8E1E[D19B]              	mov	ds,[RESSEG]
 26007 000030E2 A2[A102]                	mov	[RestDir],al
 26008 000030E5 1F                      	pop	ds
 26009 000030E6 C3                      	retn
 26010                                  
 26011                                  ; =============== S U B	R O U T	I N E =======================================
 26012                                  
 26013                                  ; Note that we need to handle the same thing that RestDir handles: the
 26014                                  ; requirement that we try only once to restore the user's environment after
 26015                                  ; and INT 24 or the like. If the condition that causes the INT 24 does not
 26016                                  ; disappear, we just give up.
 26017                                  
 26018                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 26019                                  	;
 26020                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26021                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33AFh 
 26022                                  PIPEDEL:
 26023 000030E7 1E                      	push	ds
 26024 000030E8 52                      	push	dx
 26025 000030E9 2E8E1E[D19B]            	mov	ds,[cs:RESSEG]
 26026                                  	;mov	dx,3EAh	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33B1h
 26027                                  	;;mov	dx,320h	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E0Ch
 26028                                  			; Pipe1 = offset RESGROUP:EndInit
 26029 000030EE BA[1503]                	mov	dx,Pipe1	; Clean up in case ^C
 26030                                  	;mov	ah,Unlink ; 41h 
 26031 000030F1 B441                    	mov	ah,41h
 26032 000030F3 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 26033                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 26034                                  			;		(no wildcards allowed)
 26035                                  
 26036                                  	;mov	dx,439h	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33BDh
 26037                                  	;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E13h
 26038                                  			; Pipe2 = offset RESGROUP:EndInit+79
 26039 000030F5 BA[6403]                	mov	dx,Pipe2
 26040                                  	;mov	ah,Unlink ; 41h
 26041 000030F8 B441                    	mov	ah,41h
 26042 000030FA CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 26043                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 26044                                  			;		(no wildcards allowed)
 26045 000030FC 5A                      	pop	dx
 26046 000030FD E86202                  	call	PipeOff
 26047 00003100 C606[1403]00            	mov	byte [PipeFiles],0
 26048 00003105 1F                      	pop	ds
 26049 00003106 C3                      	retn
 26050                                  
 26051                                  ; ---------------------------------------------------------------------------
 26052                                  
 26053                                  	; 26/02/2023
 26054                                  PIPEERRSYN:
 26055 00003107 BA[1790]                	mov	dx,SYNTMES_PTR
 26056 0000310A E8DAFF                  	call	PIPEDEL
 26057 0000310D 0E                      	push	cs
 26058 0000310E 1F                      	pop	ds
 26059 0000310F E9DBFB                  	jmp	cerror
 26060                                  
 26061                                  ; ---------------------------------------------------------------------------
 26062                                  
 26063                                  	; 26/02/2023
 26064                                  PIPERR:
 26065 00003112 9C                      	pushf
 26066 00003113 E85EFF                  	call    TriageError
 26067                                  	;call	GET_EXT_ERR_NUMBER  ; MSDOS 3.3
 26068 00003116 50                      	push	ax		; Save results from TriageError
 26069 00003117 52                      	push	dx
 26070 00003118 BA[CA90]                	mov	dx,PIPEEMES_PTR
 26071 0000311B E8C9FF                  	call	PIPEDEL
 26072 0000311E 0E                      	push	cs
 26073 0000311F 1F                      	pop	ds
 26074 00003120 E8B222                  	call	std_eprintf
 26075 00003123 5A                      	pop	dx		; Restore results from TriageError
 26076 00003124 58                      	pop	ax
 26077 00003125 9D                      	popf
 26078 00003126 83F841                  	cmp	ax,65
 26079 00003129 7503                    	jne	short TCOMMANDJ
 26080 0000312B E9BFFB                  	jmp	cerror
 26081                                  
 26082                                  TCOMMANDJ:
 26083 0000312E E9D3CF                  	jmp	TCOMMAND
 26084                                  
 26085                                  ; ---------------------------------------------------------------------------
 26086                                  
 26087                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 26088                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26089                                  PIPEPROCSTRT:
 26090 00003131 8E1E[D19B]              	mov	ds,[RESSEG]
 26091 00003135 FE06[1403]              	inc	byte [PipeFiles] ; Flag that the pipe files exist
 26092                                  
 26093                                  	; MSDOS 6.0
 26094 00003139 06                      	push	es
 26095 0000313A 57                      	push	di
 26096 0000313B 1E                      	push	ds
 26097 0000313C 56                      	push	si
 26098                                  	
 26099 0000313D 1E                      	push	ds
 26100 0000313E 06                      	push	es
 26101 0000313F 1F                      	pop	ds			;ds = TRANGROUP
 26102 00003140 BE[D796]                	mov	si,TempVarName		;ds:si = "TEMP="
 26103                                  
 26104                                  ;Some hideous code in Find_Name_In_Environment. Expects ds = TRANGROUP and
 26105                                  ;so the routine is not really general
 26106                                  
 26107 00003143 E838F5                  	call	find_name_in_environment
 26108                                  					;es:di points at path
 26109 00003146 1F                      	pop	ds			;ds = DATARES again
 26110 00003147 721F                    	jc	short no_temp_path
 26111                                  	
 26112 00003149 1E                      	push	ds
 26113 0000314A 06                      	push	es
 26114 0000314B 1F                      	pop	ds
 26115 0000314C 07                      	pop	es			;swap ds and es
 26116 0000314D 89FE                    	mov	si,di			;ds:si points at path
 26117                                  	
 26118 0000314F E8AA02                  	call	skip_white		;skip white space chars
 26119                                  
 26120                                  ;This copies the path into both buffers -- Pipe1 & Pipe2
 26121                                  
 26122 00003152 E8B302                  	call	copy_pipe_path		;copy the pipe path
 26123                                  	
 26124                                  ;Check if the TEMP path is valid
 26125                                  
 26126 00003155 06                      	push	es
 26127 00003156 1F                      	pop	ds			;ds = DATARES
 26128                                  	;mov	dx,offset DATARES:Pipe1	;ds:dx = path to look for
 26129                                  	;;mov	dx,320h ; MSDOS 5.0 - offset EndInit
 26130                                  	;mov	dx,3EAh	; MSDOS 6.22 - offset EndInit
 26131 00003157 BA[1503]                	mov	dx,Pipe1
 26132                                  	;mov	ax,(CHMOD shl 8) or 0
 26133 0000315A B80043                  	mov	ax,4300h
 26134 0000315D CD21                    	int	21h
 26135 0000315F 7207                    	jc	short no_temp_path
 26136                                  	
 26137 00003161 F7C11000                	test	cx,10h			;is it a directory?
 26138 00003165 7501                    	jnz	short no_temp_path	;yes, continue (carry clear)
 26139                                  	
 26140 00003167 F9                      	stc				;no, indicate fail
 26141                                  no_temp_path:
 26142 00003168 5E                      	pop	si
 26143 00003169 1F                      	pop	ds
 26144 0000316A 5F                      	pop	di
 26145 0000316B 07                      	pop	es
 26146 0000316C 730B                    	jnc	short crt_temp		;path found, create tempfiles
 26147                                  
 26148                                  	; 27/02/2023
 26149                                  	; MSDOS 3.3
 26150                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 26151                                  	;				; Get current drive
 26152                                  	;int	21h ; DOS - GET DEFAULT DISK NUMBER
 26153                                  	;add	al,[cs:CAPITAL_A]
 26154                                  	;mov	byte [PIPE2],al		; Make pipe files in root of def drv
 26155                                  	;mov	bx,PIPE1
 26156                                  	;mov	[bx],al
 26157                                  	;xor	ah,ah			; nul terminate path names
 26158                                  	;mov	byte [PIPE1+3],ah
 26159                                  	;mov	byte [PIPE2+3],ah
 26160                                  
 26161                                  	; MSDOS 6.0
 26162                                  ;SR;
 26163                                  ; We want to create temp files in the current directory rather than in the 
 26164                                  ;root of the drive. This is because the number of files that can be present
 26165                                  ;in the root directory is fixed, whereas it is not so in subdirectories.
 26166                                  
 26167                                  	;mov	ah,'.'
 26168                                  	;mov	[Pipe1],ah	; = RESGROUP:EndInit
 26169                                  	;mov	[Pipe2],ah	; = RESGROUP:EndInit+79
 26170                                  	;xor	ah,ah
 26171                                  	;mov	[Pipe1+1],ah	; = RESGROUP:EndInit+1
 26172                                  	;mov	[Pipe2+1],ah		;create files in current dir
 26173                                  	; 27/02/2023
 26174 0000316E B92E00                  	mov	cx,002Eh
 26175 00003171 890E[1503]              	mov	[Pipe1],cx
 26176 00003175 890E[6403]              	mov	[Pipe2],cx
 26177                                  crt_temp:
 26178                                  	; MSDOS 6.0
 26179                                  	;mov	dx,offset DATARES:Pipe1	; = RESGROUP:EndInit
 26180                                  	;;mov	dx,320h ; MSDOS 5.0 COMMAND.COM
 26181                                  	;mov	dx,3EAh ; MSDOS 6.22 COMMAND.COM	
 26182 00003179 BA[1503]                	mov	dx,Pipe1
 26183                                  	; MSDOS 3.3
 26184                                  	;mov	dx,bx
 26185                                  	
 26186                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26187 0000317C 31C9                    	xor	cx,cx
 26188                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 26189 0000317E B45A                    	mov	ah,5Ah
 26190 00003180 CD21                    	int	21h
 26191                                  		; DOS -	3+ - CREATE UNIQUE FILE
 26192                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 26193                                  		; receive generated filename
 26194                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 26195 00003182 728E                    	jc	short PIPERR	; Couldn't create
 26196                                  
 26197 00003184 89C3                    	mov	bx,ax
 26198                                  	;mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 26199 00003186 B43E                    	mov	ah,3Eh
 26200 00003188 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 26201                                  			; BX = file handle
 26202                                  	;;;mov	dx,PIPE2
 26203                                  	;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM
 26204                                  	;mov	dx,439h ; MSDOS 6.22 COMMAND.COM
 26205 0000318A BA[6403]                	mov	dx,Pipe2
 26206                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 26207 0000318D B45A                    	mov	ah,5Ah
 26208 0000318F CD21                    	int	21h
 26209                                  		; DOS -	3+ - CREATE UNIQUE FILE
 26210                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 26211                                  		; receive generated filename
 26212                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 26213                                  	; 17/04/2023
 26214                                  	;jc	short PIPERR
 26215                                  	; 27/02/2023
 26216 00003191 7303                    	jnc	short pps1
 26217 00003193 E97CFF                  	jmp	PIPERR
 26218                                  pps1:
 26219 00003196 89C3                    	mov	bx,ax
 26220 00003198 B43E                    	mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 26221 0000319A CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 26222                                  				; BX = file handle
 26223                                  	;call	near ptr TESTDOREIN ; Set up a redirection if specified
 26224 0000319C E87FFE                  	call	TESTDOREIN
 26225                                  	;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 26226 0000319F 8B36[B303]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 26227 000031A3 833E[A502]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 26228 000031A8 7506                    	jne	short NOSINGP
 26229 000031AA C706[A502]00F0          	mov	word [SingleCom],0F000h ; Flag single command pipe
 26230                                  NOSINGP:
 26231 000031B0 EB29                    	jmp	short FIRSTPIPE
 26232                                  
 26233                                  ; ---------------------------------------------------------------------------
 26234                                  
 26235                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 26236                                  	; 11/06/2026 - Retro DOS v4.2 COMMAND.COM
 26237                                  PIPEPROC:
 26238 000031B2 8026[9D02]FE            	and	byte [EchoFlag],0FEh  ; force current echo to be off
 26239                                  	;;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 26240 000031B7 8B36[B303]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 26241 000031BB AC                      	lodsb
 26242                                  	; 27/02/2023
 26243 000031BC 3C7C                    	cmp	al,'|'		
 26244                                  	;;cmp	al,ALTPIPECHR	; Alternate pipe char? 	
 26245                                  	;je	short ISPIPE1	; Yes
 26246                                  	;cmp	al,'|'
 26247                                  	;;cmp	al,[cs:VBAR]
 26248 000031BE 7403                    	je	short ISPIPE1
 26249 000031C0 E98400                  	jmp	PIPEEND		; Pipe done
 26250                                  ISPIPE1:
 26251 000031C3 8B16[3604]              	mov	dx,[InPipePtr]	; Get the input file name
 26252                                  	;mov	ax,OPEN*256 ; 3D00h
 26253 000031C7 B8003D                  	mov	ax,3D00h
 26254 000031CA CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 26255                                  			; DS:DX	-> ASCIZ filename
 26256                                  			; AL = access mode
 26257                                  			; 0 - read
 26258                                  PIPEERRJ:
 26259 000031CC 7303                    	jnc	short NO_PIPEERR
 26260 000031CE E941FF                  	jmp	PIPERR		; Lost the pipe file
 26261                                  NO_PIPEERR:
 26262 000031D1 89C3                    	mov	bx,ax
 26263 000031D3 B0FF                    	mov	al,0FFh
 26264                                  	;xchg	al,[bx+18h]
 26265 000031D5 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 26266 000031D8 A21800                  	mov	[PDB.JFN_TABLE],al	; Redirect
 26267                                  FIRSTPIPE:
 26268 000031DB BF[329A]                	mov	di,COMBUF+2
 26269 000031DE 31C9                    	xor	cx,cx
 26270 000031E0 803C0D                  	cmp	byte [si],0Dh	; '|<CR>'
 26271 000031E3 7503                    	jne	short PIPEOK1
 26272                                  PIPEERRSYNJ:
 26273 000031E5 E91FFF                  	jmp	PIPEERRSYN
 26274                                  PIPEOK1:
 26275                                  	;;;mov	al,[cs:VBAR]
 26276                                  	; 27/02/2023
 26277                                  	;;mov	al,vbar
 26278                                  	;mov	al,'|'
 26279                                  	;cmp	[si],al		; '||'
 26280                                  	;je	short PIPEERRSYNJ
 26281 000031E8 803C7C                  	cmp	byte [si],'|'
 26282                                  	;cmp	byte [si],ALTPIPECHR ; '##' or '|#'?
 26283 000031EB 74F8                    	je	short PIPEERRSYNJ
 26284                                  PIPECOMLP:
 26285 000031ED AC                      	lodsb
 26286 000031EE AA                      	stosb
 26287                                  	; 27/02/2023
 26288 000031EF E836F5                  	call	testkanj
 26289 000031F2 7405                    	jz	short NOTKANJ5
 26290 000031F4 A4                      	movsb
 26291                                  ;  Added following 2 commands to the fix pipe bug.
 26292 000031F5 41                      	inc	cx		;AN000;  3/3/KK
 26293 000031F6 41                      	inc	cx		;AN000;  3/3/KK
 26294 000031F7 EBF4                    	jmp	short PIPECOMLP
 26295                                  NOTKANJ5:
 26296 000031F9 3C0D                    	cmp	al,0Dh
 26297 000031FB 7438                    	je	short LASTPIPE
 26298 000031FD 41                      	inc	cx
 26299                                  	; 27/02/2023
 26300 000031FE 3C7C                    	cmp	al,'|'
 26301                                  	;cmp	al,ALTPIPECHR
 26302                                  	;je	short ISPIPE2
 26303                                  	;;cmp	al,[cs:VBAR]
 26304                                  	;cmp	al,vbar
 26305 00003200 75EB                    	jne	short PIPECOMLP
 26306                                  ISPIPE2:
 26307 00003202 26C645FF0D              	mov	byte [es:di-1],0Dh
 26308 00003207 49                      	dec	cx
 26309                                  	;mov	[cs:COMBUF+1],cl
 26310                                  	; 27/02/2023
 26311 00003208 26880E[319A]            	mov	[es:COMBUF+1],cl
 26312 0000320D 4E                      	dec	si
 26313                                  	;;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 26314                                  	; 11/06/2023 - MSDOS 6.22 COMMAND.COM
 26315                                  	;mov	[488h],si ; [PipePtr] = [EndInit+158]
 26316 0000320E 8936[B303]              	mov	[PipePtr],si		; On to next pipe element
 26317                                  			; mov [EndInit+158],si
 26318 00003212 8B16[3804]              	mov	dx,[OutPipePtr]
 26319 00003216 51                      	push	cx
 26320 00003217 31C9                    	xor	cx,cx
 26321                                  	;mov	ax,CREAT*256 ; 3C00h
 26322 00003219 B8003C                  	mov	ax,3C00h
 26323 0000321C CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 26324                                  			; CX = attributes for file
 26325                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 26326 0000321E 59                      	pop	cx
 26327 0000321F 72AB                    	jc	short PIPEERRJ		; Lost the file
 26328 00003221 89C3                    	mov	bx,ax
 26329 00003223 B0FF                    	mov	al,0FFh
 26330                                  	;xchg	al,[bx+18h]
 26331 00003225 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 26332 00003228 A21900                  	mov	[PDB.JFN_TABLE+1],al
 26333 0000322B 8716[3604]              	xchg	dx,[InPipePtr]	; Swap for next element of pipe
 26334 0000322F 8916[3804]              	mov	[OutPipePtr],dx
 26335 00003233 EB0D                    	jmp	short PIPECOM
 26336                                  LASTPIPE:
 26337                                  	;mov	[cs:COMBUF+1],cl 
 26338                                  	; 27/02/2023
 26339 00003235 26880E[319A]            	mov	[es:COMBUF+1],cl
 26340 0000323A 4E                      	dec	si
 26341                                  	;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 26342                                  	;mov	[488h],si ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 26343 0000323B 8936[B303]              	mov	[PipePtr],si	; Point at the CR (anything not '|' will do)
 26344                                  		; mov [EndInit+158],si
 26345 0000323F E859FD                  	call	TESTDOREOUT	; Set up the redirection if specified
 26346                                  PIPECOM:
 26347 00003242 0E                      	push	cs
 26348 00003243 1F                      	pop	ds
 26349 00003244 E9D5D0                  	jmp	NOPIPEPROC	; Process the pipe element
 26350                                  PIPEEND:
 26351 00003247 E89DFE                  	call	PIPEDEL
 26352 0000324A 813E[A502]00F0          	cmp	word [SingleCom],0F000h
 26353 00003250 7506                    	jnz	short NOSINGP2
 26354 00003252 C706[A502]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Make it return
 26355                                  NOSINGP2:
 26356 00003258 E9A9CE                  	jmp	TCOMMAND
 26357                                  
 26358                                  ; =============== S U B	R O U T	I N E =======================================
 26359                                  
 26360                                  ; Date and time are set during initialization and use
 26361                                  ; this routines since they need to do a long return
 26362                                  
 26363                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 26364                                  DATINIT:
 26365 0000325B 2E8C1E[D19B]            	mov	[cs:RESSEG],ds	; SetInitFlag needs resseg initialized
 26366 00003260 06                      	push	es
 26367 00003261 1E                      	push	ds		; Going to use the previous stack
 26368 00003262 8CC8                    	mov	ax,cs		; Set up the appropriate segment registers
 26369 00003264 8EC0                    	mov	es,ax
 26370 00003266 8ED8                    	mov	ds,ax
 26371 00003268 E85122                  	call	TSYSLOADMSG ; MSDOS 6.0 ; AN000; preload messages
 26372 0000326B BA[7CA5]                	mov	dx,INTERNATVARS
 26373 0000326E B80038                  	mov	ax,3800h
 26374                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 26375 00003271 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 26376                                  			; get current-country info
 26377                                  			; DS:DX	-> buffer for returned info
 26378                                  	; 20/10/2018
 26379 00003273 C70681000D00            	mov	word [81h],0Dh ; Want to prompt for date during initialization
 26380 00003279 C606[309A]80            	mov	byte [COMBUF],128 ; Init COMBUF
 26381 0000327E C706[319A]010D          	mov	word [COMBUF+1],0D01h
 26382 00003284 E80600                  	call	DATE
 26383 00003287 E86200                  	call	CTIME
 26384 0000328A 1F                      	pop	ds
 26385 0000328B 07                      	pop	es
 26386 0000328C CB                      	retf	; far return
 26387                                  
 26388                                  ; =============== S U B	R O U T	I N E =======================================
 26389                                  
 26390                                  ; MSDOS 6.0
 26391                                  
 26392                                  ; ****************************************************************
 26393                                  ; *
 26394                                  ; * ROUTINE:	 DATE - Set system date
 26395                                  ; *
 26396                                  ; * FUNCTION:	 If a date is specified, set the system date,
 26397                                  ; *		 otherwise display the current system date and
 26398                                  ; *		 prompt the user for a new date.  If an invalid
 26399                                  ; *		 date is specified, issue an error message and
 26400                                  ; *		 prompt for a new date.  If the user enters
 26401                                  ; *		 nothing when prompted for a date, terminate.
 26402                                  ; *
 26403                                  ; * INPUT:	 command line at offset 81H
 26404                                  ; *
 26405                                  ; * OUTPUT:	 none
 26406                                  ; *
 26407                                  ; ****************************************************************
 26408                                  
 26409                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26410                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2FC4h
 26411                                  
 26412                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26413                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:356Eh
 26414                                  DATE:
 26415 0000328D BE8100                  	mov	si,81h			; Accepting argument for date inline
 26416 00003290 BF[C495]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 26417 00003293 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 26418 00003295 31D2                    	xor	dx,dx			;AN000;
 26419 00003297 E87216                  	call	cmd_parse		;AC000; call parser
 26420                                  
 26421                                  	; 27/02/2023
 26422                                  	;cmp	ax,-1
 26423                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 26424                                  	;je	short PRMTDAT 		;AC000; yes - go ask for date
 26425                                  	;;cmp	ax,0
 26426                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 26427                                  	;;jne	short DATERR		;AN000; yes - go issue message
 26428                                  	; 26/04/2023
 26429                                  	;or	ax,ax ; ax = 0 ?
 26430                                  	;jnz	short DATERR
 26431                                  	;;jmp	short COMDAT		;AC000; we have a date
 26432                                  	; 11/06/2023
 26433 0000329A 40                      	inc	ax  ; cmp ax,-1
 26434 0000329B 7428                    	jz	short PRMTDAT ; 0FFFFh -> 0
 26435 0000329D 48                      	dec	ax  ; cmp ax,0
 26436 0000329E 7541                    	jnz	short DATERR ; 1 -> 0
 26437                                  	; ax = 0
 26438                                  
 26439                                  	; 27/02/2023
 26440                                  COMDAT:
 26441 000032A0 8B0E[D5A5]              	mov	cx,[DATE_YEAR]		;AC000; get parts of date in
 26442 000032A4 8A36[D7A5]              	mov	dh,[DATE_MONTH]		;AC000;  cx and dx for set
 26443 000032A8 8A16[D8A5]              	mov	dl,[DATE_DAY]		;AC000;  date function call.
 26444 000032AC 51                      	push	cx			;AC000; save date
 26445 000032AD 52                      	push	dx			;AC000;
 26446 000032AE B90100                  	mov	cx,1			;AC000; set 1 positional entered
 26447 000032B1 31D2                    	xor	dx,dx			;AN029;
 26448 000032B3 E85616                  	call	cmd_parse		;AN029; call parser
 26449 000032B6 3CFF                    	cmp	al,0FFh ; -1
 26450                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 26451 000032B8 5A                      	pop	dx			;AC000; retrieve date
 26452 000032B9 59                      	pop	cx			;AC000;
 26453 000032BA 7525                    	jnz	short DATERR		;AC000; extra stuff on line - try again
 26454                                  	; 26/04/2023
 26455                                  	;mov	ah,SET_DATE		;yes - set date
 26456 000032BC B42B                    	mov	ah,2Bh
 26457 000032BE CD21                    	int	21h
 26458                                  			; DOS - SET CURRENT DATE
 26459                                  			; DL = day, DH = month, CX = year
 26460                                  			; Return: AL = 00h if no error /= FFh if bad value sent to routine
 26461 000032C0 08C0                    	or	al,al
 26462 000032C2 751D                    	jnz	short DATERR
 26463                                  date_end:
 26464 000032C4 C3                      	retn
 26465                                  
 26466                                  PRMTDAT:
 26467                                  	; Print "Current date is
 26468 000032C5 E81C08                  	call	GetDate 		;AN000; get date for output
 26469                                  
 26470 000032C8 86F2                    	xchg	dh,dl			;AN000; switch month & day
 26471 000032CA 890E[2D90]              	mov	[CurDat_yr],cx		;AC000; put year into message control block
 26472 000032CE 8916[2F90]              	mov	[CurDat_mo_day],dx	;AC000; put month and day into message control block
 26473 000032D2 BA[1D90]                	mov	dx,CurDat_Ptr		;AC000; set up message for output
 26474 000032D5 E80521                  	call	std_printf
 26475                                  
 26476                                  ;AD061; mov	word [CurDat_yr],0	;AC000; reset year, month and day
 26477                                  ;AD061; mov	word [CurDat_mo_day],0 	;AC000;  pointers in control block
 26478                                  
 26479                                  GET_NEW_DATE:				;AN000;
 26480 000032D8 E8BC00                  	call	GETDAT			;AC000; prompt user for date
 26481                                  	
 26482                                  	; 11/06/2023
 26483                                  	;cmp	ax,0FFFFh ; -1
 26484                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 26485                                  	;je	short date_end		;AC000; yes - exit
 26486                                  	; 26/04/2023
 26487                                  	;;cmp	ax,0
 26488                                  	;;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 26489                                  	;;;jnz	short DATERR		;AN000; yes - go issue message
 26490                                  	;; 27/02/2023
 26491                                  	;;jz	short COMDAT
 26492                                  	; 26/04/2023
 26493                                  	;and	ax,ax ; 0 ?
 26494                                  	;jz	short COMDAT
 26495                                  
 26496                                  	; 11/06/2023
 26497 000032DB 40                      	inc	ax  ; cmp ax,-1
 26498 000032DC 74E6                    	jz	short date_end ; 0FFFFh -> 0
 26499 000032DE 48                      	dec	ax  ; cmp ax,0
 26500 000032DF 74BF                    	jz	short COMDAT ; 1 -> 0
 26501                                  	; ax > 0
 26502                                  
 26503                                  ;COMDAT:
 26504                                  ;	....
 26505                                  DATERR:
 26506 000032E1 E85CF6                  	call	CRLF2			;AN028; print out a blank line
 26507 000032E4 BA[1A90]                	mov	dx,BADDAT_PTR
 26508 000032E7 E8F320                  	call	std_printf
 26509 000032EA EBEC                    	jmp	short GET_NEW_DATE	;AC000; get date again
 26510                                  
 26511                                  ; =============== S U B	R O U T	I N E =======================================
 26512                                  
 26513                                  ; MSDOS 6.0
 26514                                  
 26515                                  ; TIME gets and sets the time
 26516                                  
 26517                                  ; ****************************************************************
 26518                                  ; *
 26519                                  ; * ROUTINE:	 TIME - Set system time
 26520                                  ; *
 26521                                  ; * FUNCTION:	 If a time is specified, set the system time,
 26522                                  ; *		 otherwise display the current system time and
 26523                                  ; *		 prompt the user for a new time.  If an invalid
 26524                                  ; *		 time is specified, issue an error message and
 26525                                  ; *		 prompt for a new time.  If the user enters
 26526                                  ; *		 nothing when prompted for a time, terminate.
 26527                                  ; *
 26528                                  ; * INPUT:	 command line at offset 81H
 26529                                  ; *
 26530                                  ; * OUTPUT:	 none
 26531                                  ; *
 26532                                  ; ****************************************************************
 26533                                  
 26534                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26535                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:302Dh
 26536                                  
 26537                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26538                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:35D7h
 26539                                  CTIME:
 26540 000032EC BE8100                  	mov	si,81h			; Accepting argument for time inline
 26541 000032EF BF[D695]                	mov	di,PARSE_TIME		;AN000; Get address of PARSE_time
 26542 000032F2 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 26543 000032F4 31D2                    	xor	dx,dx			;AN000;
 26544 000032F6 E81316                  	call	cmd_parse		;AC000; call parser
 26545                                  	
 26546                                  	; 27/02/2023
 26547                                  	;cmp	ax,-1
 26548                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 26549                                  	;je	short PRMTTIM 		;AC000; yes - prompt for time
 26550                                  	;;cmp	ax,0
 26551                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 26552                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 26553                                  	;and	ax,ax ; ax = 0 ?
 26554                                  	;jnz	short TIMERR
 26555                                  	;;jmp	short COMTIM		;AC000; we have a time
 26556                                  	; 11/06/2023
 26557 000032F9 40                      	inc	ax  ; cmp ax,-1
 26558 000032FA 742C                    	jz	short PRMTTIM ; 0FFFFh -> 0
 26559 000032FC 48                      	dec	ax  ; cmp ax,0
 26560 000032FD 7548                    	jnz	short TIMERR ; 1 -> 0
 26561                                  	; ax = 0
 26562                                  	
 26563                                  	; 27/02/2023
 26564                                  COMTIM:
 26565 000032FF 8A2E[DDA5]              	mov	ch,[TIME_HOUR]		;AC000; get parts of time in
 26566 00003303 8A0E[DEA5]              	mov	cl,[TIME_MINUTES]	;AC000;  cx and dx for set
 26567 00003307 8A36[DFA5]              	mov	dh,[TIME_SECONDS]	;AC000;  time function call
 26568 0000330B 8A16[E0A5]              	mov	dl,[TIME_FRACTION]	;AC000;
 26569 0000330F 51                      	push	cx			;AC000; save time
 26570 00003310 52                      	push	dx			;AC000;
 26571 00003311 B90100                  	mov	cx,1			;AC000; set 1 positional parm entered
 26572 00003314 31D2                    	xor	dx,dx			;AN029;
 26573 00003316 E8F315                  	call	cmd_parse		;AN029; call parser
 26574 00003319 3CFF                    	cmp	al, -1
 26575                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 26576 0000331B 5A                      	pop	dx			;AC000; retieve time
 26577 0000331C 59                      	pop	cx			;AC000;
 26578 0000331D 7528                    	jnz	short TIMERR		;AC000; extra stuff on line - try again
 26579                                  SAVTIM:
 26580                                  	;mov	ah,SET_TIME
 26581 0000331F B42D                    	mov	ah,2Dh
 26582 00003321 CD21                    	int	21h
 26583 00003323 08C0                    	or	al,al
 26584 00003325 7520                    	jnz	short TIMERR		;AC000; if an error occured, try again
 26585                                  time_end:
 26586 00003327 C3                      	retn
 26587                                  
 26588                                  PRMTTIM:
 26589                                  	;Printf "Current time is ... "
 26590                                  
 26591                                  	;mov	ah,Get_Time		;AC000; get the current time
 26592 00003328 B42C                    	mov	ah,2Ch
 26593 0000332A CD21                    	int	21h			;AC000;   Get time in CX:DX
 26594 0000332C 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 26595 0000332E 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 26596 00003330 890E[4F90]              	mov	[CurTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 26597 00003334 8916[5190]              	mov	[CurTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 26598 00003338 BA[4A90]                	mov	dx,CurTim_Ptr		;AC000; set up message for output
 26599 0000333B E89F20                  	call	std_printf
 26600                                  
 26601                                  ;AD061; mov	word [CurTim_hr_min],0 	;AC000; reset hour, minutes, seconds, and hundredths
 26602                                  ;AD061; mov	word [CurTim_Sec_hn],0 	;AC000;  pointers in control block
 26603                                  
 26604                                  GET_NEW_TIME:
 26605 0000333E E8AE00                  	call	GETTIM			;AC000;
 26606                                  	
 26607                                  	; 11/06/2023
 26608                                  	;cmp	ax,-1
 26609                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 26610                                  	;je	short time_end		;AC000;
 26611                                  	;;cmp	ax,0
 26612                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 26613                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 26614                                  	;or	ax,ax  ; ax = 0 ?
 26615                                  	;;jnz	short TIMERR
 26616                                  	; 27/02/2023
 26617                                  	;jz	short COMTIM
 26618                                  
 26619                                  	; 11/06/2023
 26620 00003341 40                      	inc	ax  ; cmp ax,-1
 26621 00003342 74E3                    	jz	short time_end ; 0FFFFh -> 0
 26622 00003344 48                      	dec	ax  ; cmp ax,0
 26623 00003345 74B8                    	jz	short COMTIM ; 1 -> 0
 26624                                  	; ax > 0
 26625                                  
 26626                                  ;COMTIM:
 26627                                  ;	....
 26628                                  TIMERR:
 26629 00003347 E8F6F5                  	call	CRLF2			;AN028; print out a blank line
 26630 0000334A BA[4790]                	mov	dx,BadTim_Ptr
 26631 0000334D E88D20                  	call	std_printf		; Print error message
 26632 00003350 EBEC                    	jmp	short GET_NEW_TIME	;AC000; Try again
 26633                                  
 26634                                  ; =============== S U B	R O U T	I N E =======================================
 26635                                  
 26636                                  ; MSDOS 6.0
 26637                                  
 26638                                  ; Set the special flag in the INIT flag to the value in CX.
 26639                                  
 26640                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26641                                  SetInitFlag:
 26642 00003352 8E1E[D19B]              	mov	ds,[RESSEG]
 26643                                  
 26644 00003356 8026[1203]FD            	and	byte [InitFlag],~INITSPECIAL ; 0FDh ; not initspecial
 26645                                  	;and	byte [InitFlag],0FDh
 26646 0000335B 080E[1203]              	or	byte [InitFlag],cl
 26647 0000335F 0E                      	push	cs
 26648 00003360 1F                      	pop	ds
 26649 00003361 C3                      	retn
 26650                                  
 26651                                  ; =============== S U B	R O U T	I N E =======================================
 26652                                  
 26653                                  ; MSDOS 6.0
 26654                                  
 26655                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26656                                  PipeOff:
 26657 00003362 1E                      	push	ds
 26658 00003363 50                      	push	ax
 26659 00003364 2E8E1E[D19B]            	mov	ds,[cs:RESSEG]
 26660 00003369 30C0                    	xor	al,al
 26661 0000336B 8606[1303]              	xchg	[PipeFlag],al
 26662 0000336F 08C0                    	or	al,al
 26663 00003371 7404                    	jz	short PipeOffDone
 26664 00003373 D02E[9D02]              	shr	byte [EchoFlag],1
 26665                                  PipeOffDone:
 26666 00003377 58                      	pop	ax
 26667 00003378 1F                      	pop	ds
 26668 00003379 C3                      	retn
 26669                                  
 26670                                  ; =============== S U B	R O U T	I N E =======================================
 26671                                  
 26672                                  ; MSDOS 6.0
 26673                                  
 26674                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26675                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26676                                  PRINT_TIME:
 26677                                  	;mov	ah,Get_Time
 26678 0000337A B42C                    	mov	ah,2Ch
 26679 0000337C CD21                    	int	21h			; Get time in CX:DX
 26680                                  
 26681 0000337E 06                      	push	es
 26682 0000337F 0E                      	push	cs
 26683 00003380 07                      	pop	es
 26684 00003381 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 26685 00003383 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 26686 00003385 2E890E[9191]            	mov	[cs:PromTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 26687 0000338A 2E8916[9391]            	mov	[cs:PromTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 26688 0000338F BA[8C91]                	mov	dx,promtim_ptr		;AC000; set up message for output
 26689 00003392 E84820                  	call	std_printf
 26690                                  
 26691                                  ;AD061; mov	word [cs:PromTim_hr_min],0
 26692                                  					;AC000; reset hour, minutes, seconds, and hundredths
 26693                                  ;AD061; mov	word [cs:PromTim_Sec_hn],0
 26694                                  					;AC000;  pointers in control block
 26695 00003395 07                      	pop	es
 26696 00003396 C3                      	retn
 26697                                  
 26698                                  ; =============== S U B	R O U T	I N E =======================================
 26699                                  
 26700                                  ; MSDOS 6.0
 26701                                  
 26702                                  ; ****************************************************************
 26703                                  ; *
 26704                                  ; * ROUTINE:	 GETDAT - Prompt user for date
 26705                                  ; *
 26706                                  ; * FUNCTION:	 Gets the date format from the COUNTRY DEPENDENT
 26707                                  ; *		 INFORMATION and issues the "Enter new date"
 26708                                  ; *		 message with the proper date format. COMBUF
 26709                                  ; *		 is reset to get a date from the command line.
 26710                                  ; *		 The PARSE_DATE blocks are then reset and the
 26711                                  ; *		 PARSE function call is issued.
 26712                                  ; *
 26713                                  ; * INPUT:	 NONE
 26714                                  ; *
 26715                                  ; * OUTPUT:	 COMBUF
 26716                                  ; *		 PARSER RETURN CODES
 26717                                  ; *
 26718                                  ; ****************************************************************
 26719                                  
 26720                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26721                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:30E2h
 26722                                  
 26723                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26724                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:368Ch
 26725                                  GETDAT:
 26726                                  	;mov	ax,(International SHL 8)
 26727 00003397 B80038                  	mov	ax,3800h
 26728                                  					; Determine what format the date
 26729 0000339A BA5C00                  	mov	dx,5Ch			;  should be entered in and
 26730 0000339D CD21                    	int	21h			;  print a message describing it
 26731                                  			; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 26732                                  			; get current-country info
 26733                                  			; DS:DX -> buffer for returned info
 26734 0000339F 89D6                    	mov	si,dx
 26735 000033A1 AD                      	lodsw
 26736 000033A2 2E8B16[6A91]            	mov	dx,[cs:usadat_ptr]	;AC000; get mm-dd-yy
 26737 000033A7 48                      	dec	ax
 26738 000033A8 780C                    	js	short printformat
 26739 000033AA 2E8B16[6D91]            	mov	dx,[cs:eurdat_ptr]	;AC000; get dd-mm-yy
 26740 000033AF 7405                    	jz	short printformat
 26741 000033B1 2E8B16[7091]            	mov	dx,[cs:japdat_ptr]	;AC000; get yy-mm-dd
 26742                                  printformat:
 26743 000033B6 89D0                    	mov	ax,dx			;AN000; get message number of format
 26744                                  	;mov	dh,util_msg_class	;AN000; this is a utility message
 26745 000033B8 B6FF                    	mov	dh,-1 ; 0FFh
 26746 000033BA E80521                  	call	TSYSGETMSG		;AN000; get the address of the message
 26747 000033BD 2E8936[3E90]            	mov	[cs:NewDat_Format],si	;AN000; put the address in subst block
 26748 000033C2 BA[3990]                	mov	dx,NewDat_Ptr		;AC000; get address of message to print
 26749 000033C5 E81520                  	call	std_printf
 26750                                  	;mov	word [cs:NewDat_Format],no_subst
 26751                                  					;AN000; reset subst block
 26752 000033C8 2EC706[3E90]0000        	mov	word [cs:NewDat_Format],0
 26753                                  
 26754                                  	; 28/02/2023
 26755 000033CF BF[C495]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 26756                                  ; 28/02/2023
 26757                                  gettim_p:	
 26758                                  	;mov	ah,Std_Con_String_Input
 26759 000033D2 B40A                    	mov	ah,0Ah
 26760 000033D4 BA[309A]                	mov	dx,COMBUF
 26761 000033D7 B90200                  	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 26762 000033DA E875FF                  	call	SetInitFlag		;  prompting for date.
 26763 000033DD CD21                    	int	21h			; Get input line
 26764 000033DF 31C9                    	xor	cx,cx			; Reset bit in InitFlag that indicates
 26765 000033E1 E86EFF                  	call	SetInitFlag		;  prompting for date.
 26766 000033E4 E859F5                  	call	CRLF2
 26767                                  	; 28/02/2023
 26768                                  	;mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 26769                                  ;gettim_p: ; 28/02/2023
 26770 000033E7 BE[329A]                	mov	si,COMBUF+2
 26771                                  	;xor	cx,cx	 ; cx = 0	;AN000; clear counter for positionals
 26772 000033EA 31D2                    	xor	dx,dx			;AN000;
 26773                                  	;call	cmd_parse		;AC000; call parser
 26774                                  	;retn
 26775                                  	; 28/02/2023
 26776 000033EC E91D15                  	jmp	cmd_parse
 26777                                  
 26778                                  ; =============== S U B	R O U T	I N E =======================================
 26779                                  
 26780                                  ; MSDOS 6.0
 26781                                  
 26782                                  ; ****************************************************************
 26783                                  ; *
 26784                                  ; * ROUTINE:	 GETTIME - Prompt user for time
 26785                                  ; *
 26786                                  ; * FUNCTION:	 Gets the time format from the COUNTRY DEPENDENT
 26787                                  ; *		 INFORMATION and issues the "Enter new time"
 26788                                  ; *		 message. COMBUF is reset to get a time from the
 26789                                  ; *		 command line. The PARSE_TIME blocks are then
 26790                                  ; *		 reset and the PARSE function call is issued.
 26791                                  ; *
 26792                                  ; * INPUT:	 NONE
 26793                                  ; *
 26794                                  ; * OUTPUT:	 COMBUF
 26795                                  ; *		 PARSER RETURN CODES
 26796                                  ; *
 26797                                  ; ****************************************************************
 26798                                  
 26799                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26800                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:313Dh
 26801                                  
 26802                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26803                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:36E7h
 26804                                  GETTIM:
 26805 000033EF 31C9                    	xor	cx,cx			; Initialize hours and minutes to zero
 26806 000033F1 BA[5890]                	mov	dx,NewTim_Ptr
 26807 000033F4 E8E61F                  	call	std_printf
 26808                                  
 26809                                  	; 28/02/2023
 26810 000033F7 BF[D695]                	mov	di,PARSE_TIME
 26811 000033FA EBD6                    	jmp	short gettim_p
 26812                                  
 26813                                  ; 28/02/2023
 26814                                  ;	;mov	ah,Std_Con_String_Input
 26815                                  ;	mov	ah,0Ah
 26816                                  ;	mov	dx,COMBUF
 26817                                  ;	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 26818                                  ;	call	SetInitFlag		;  prompting for time.
 26819                                  ;	int	21h			; Get input line
 26820                                  ;	; 28/02/2023
 26821                                  ;	xor	cx,cx			; Reset bit in InitFlag that indicates
 26822                                  ;	call	SetInitFlag		;  prompting for time.
 26823                                  ;	call	CRLF2
 26824                                  ;	; 28/02/2023
 26825                                  ;	;mov	si,COMBUF+2
 26826                                  ;	; 28/02/2023
 26827                                  ;	mov	di,PARSE_TIME		;AN000; Get address of PARSE_TIME
 26828                                  ;	; 28/02/2023
 26829                                  ;	jmp	short gettim_p	
 26830                                  ;	; 28/02/2023
 26831                                  ;	;;xor	cx,cx			;AN000; clear counter for positionals
 26832                                  ;	;xor	dx,dx			;AN000;
 26833                                  ;	;call	cmd_parse		;AC000; call parser
 26834                                  ;	;retn
 26835                                  
 26836                                  
 26837                                  ; =============== S U B	R O U T	I N E =======================================
 26838                                  
 26839                                  ; MSDOS 6.0
 26840                                  
 26841                                  ;Skip_white: Skips over the whitespace chars that could be present after
 26842                                  ;the '=' sign in the environment variable before the actual path.
 26843                                  ;
 26844                                  ;	ENTRY:	ds:si = arguments of the environment variable
 26845                                  ;
 26846                                  ;	EXIT:	ds:si = start of the path
 26847                                  ;
 26848                                  ;	REGISTERS AFFECTED: ax
 26849                                  
 26850                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26851                                  skip_white:
 26852 000033FC FC                      	cld
 26853                                  skw_lp:
 26854 000033FD AC                      	lodsb
 26855 000033FE 3C20                    	cmp	al,' '			;blank char?
 26856 00003400 74FB                    	jz	short skw_lp		;yes, skip it
 26857 00003402 3C09                    	cmp	al,9			;tab char?
 26858 00003404 74F7                    	jz	short skw_lp		;yes, skip it
 26859 00003406 4E                      	dec	si			;point at first non-white
 26860 00003407 C3                      	retn
 26861                                  
 26862                                  ; =============== S U B	R O U T	I N E =======================================
 26863                                  
 26864                                  ; MSDOS 6.0
 26865                                  
 26866                                  ;Copy_pipe_path: This routine copies the path from the TEMP environment
 26867                                  ;variable into the path buffers Pipe1 & Pipe2.
 26868                                  ;
 26869                                  ;	ENTRY:	ds:si = path to be copied
 26870                                  ;		es = RESGROUP
 26871                                  ;
 26872                                  ;	EXIT:	Path copied into Pipe1 and Pipe2.
 26873                                  ;
 26874                                  ;	REGISTERS AFFECTED: si, di, cx, ax
 26875                                  
 26876                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26877                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3174h
 26878                                  
 26879                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26880                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:371Eh
 26881                                  copy_pipe_path:
 26882 00003408 B9FFFF                  	mov	cx,0FFFFh ; 65535
 26883 0000340B 30C0                    	xor	al,al
 26884                                  
 26885 0000340D 89F7                    	mov	di,si
 26886 0000340F 06                      	push	es			;save es
 26887 00003410 1E                      	push	ds
 26888 00003411 07                      	pop	es			;es:di = path to be copied
 26889                                  	
 26890 00003412 FC                      	cld
 26891 00003413 57                      	push	di
 26892 00003414 F2AE                    	repnz	scasb			;look for the null char
 26893 00003416 5F                      	pop	di
 26894                                  
 26895 00003417 07                      	pop	es			;es = RESGROUP again
 26896                                  
 26897 00003418 F7D1                    	not	cx			;length including the null
 26898                                  
 26899                                  	;;;mov	di,320h ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit)
 26900                                  	;;mov	di,3EAh ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 26901                                  	;mov	di,offset DATARES:Pipe1
 26902 0000341A BF[1503]                	mov	di,Pipe1  ; (offset RESGROUP:EndInit)
 26903 0000341D 57                      	push	di
 26904 0000341E 51                      	push	cx			
 26905 0000341F F3A4                    	rep	movsb			;copy path into Pipe1
 26906 00003421 59                      	pop	cx
 26907 00003422 5F                      	pop	di
 26908                                  
 26909 00003423 1E                      	push	ds
 26910 00003424 06                      	push	es
 26911 00003425 1F                      	pop	ds			;ds:si = Pipe1
 26912 00003426 89FE                    	mov	si,di
 26913                                  	;;;mov	di,36Fh ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit+79)
 26914                                  	;;mov	di,439h ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 26915                                  	;mov	di,offset DATARES:Pipe2	;es:di = Pipe2
 26916 00003428 BF[6403]                	mov	di,Pipe2  ; (offset RESGROUP:EndInit+79)
 26917 0000342B F3A4                    	rep	movsb			;copy path into Pipe2
 26918 0000342D 1F                      	pop	ds
 26919 0000342E C3                      	retn
 26920                                  
 26921                                  ;============================================================================
 26922                                  ; PARSE2.ASM, MSDOS 6.0, 1991
 26923                                  ;============================================================================
 26924                                  ; 03/10/2018 - Retro DOS v3.0
 26925                                  
 26926                                  ;----------------------------------------------------------------------------
 26927                                  ; PARSELINE takes an MSDOS command line and maps it into a UNIX-style
 26928                                  ; argv[argvcnt] array. The most important difference between this array and
 26929                                  ; the tradition UNIX format is the extra cparse information included with
 26930                                  ; each argument element.
 26931                                  ;---------------
 26932                                  ; ENTRY:
 26933                                  ;	BL	     special delimiter for cparse -- not implemented)
 26934                                  ;---------------
 26935                                  ; EXIT:
 26936                                  ;	CF	    set if error
 26937                                  ;	AL	    error code (carry set). Note AH clobbered in any event.
 26938                                  ;	argv[]	    array of cparse flags and pointers to arguments
 26939                                  ;	argvcnt     argument count
 26940                                  ;---------------
 26941                                  ; NOTE(S):
 26942                                  ;	*   BL (special delimiter) is ignored, for now (set to space).
 26943                                  ;	*   Parseflags record contains cparse flags, as follows:
 26944                                  ;		sw_flag 	--	was this arg a switch?
 26945                                  ;		wildcard	--	whether or not it contained a * or ?
 26946                                  ;		path_sep	--	maybe it was a pathname
 26947                                  ;		unused		--	for future expansion
 26948                                  ;		special_delim	--	was there an initial special delimiter?
 26949                                  ;	*   argv[] and argvcnt are undefined if CF/AL indicates an error.
 26950                                  ;	*   Relationship between input, cparse output, and comtail can be
 26951                                  ;	    found in the following chart. Despite the claim of the cparse
 26952                                  ;	    documentation that, "Token buffer always starts d: for non switch
 26953                                  ;	    tokens", such is not the case (see column two, row two).
 26954                                  ;	    Similarly, [STARTEL] is not null when the command line is one of
 26955                                  ;	    the forms, "d:", "d:\", or "d:/". In fact, *STARTEL (i.e., what
 26956                                  ;	    STARTEL addresses) will be null. This is clearly just a
 26957                                  ;	    documentation error.
 26958                                  ;	*   cparse also returns a switch code in BP for each switch it
 26959                                  ;	    recognizes on the command line.
 26960                                  ;	*   arglen for each token does NOT include the terminating null.
 26961                                  ;	*   Finally, note that interesting constructions like 'foodir/*.exe'
 26962                                  ;	    parse as three separate tokens, and the asterisk is NOT a wildcard.
 26963                                  ;	    For example, 'for %i in (foodir/*.exe) do echo %i' will first
 26964                                  ;	    echo 'foodir', then '*', then '.exe'. Using cparse for command-
 26965                                  ;	    line parsing may result in slightly different behavior than
 26966                                  ;	    previously observed with the old COMMAND.COM command-line parser.
 26967                                  ;
 26968                                  ;	    Input		    Cparse		Command Line (80H)
 26969                                  ;	\alan\foo.bat		c:\alan\foo.bat 	\alan\foo.bat
 26970                                  ;	alan\foo.bat		alan\foo.bat		alan\foo.bat
 26971                                  ;	foo.bat 		foo.bat 		foo.bat
 26972                                  ;	c:\alan\foo.bat 	c:\alan\foo.bat 	c:\alan\foo.bat
 26973                                  ;	c:alan\foo.bat		c:alan\foo.bat		c:alan\foo.bat
 26974                                  ;	c:foo.bat		c:foo.bat		c:foo.bat
 26975                                  
 26976                                  ; =============== S U B	R O U T	I N E =======================================
 26977                                  
 26978                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23D0h
 26979                                  
 26980                                  ; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26981                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 319Bh
 26982                                  
 26983                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26984                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3745h
 26985                                  
 26986                                  ; 27/07/2024 - Retro DOS v4.0-v4.1-v4.2-v5.0 COMMAND.COM (PARSELINE)
 26987                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 35F5h
 26988                                  
 26989                                  PARSELINE:
 26990 0000342F 50                      	push	ax			; most of these are clobbered
 26991 00003430 53                      	push	bx			; by cparse...
 26992 00003431 51                      	push	cx
 26993 00003432 52                      	push	dx
 26994 00003433 57                      	push	di
 26995 00003434 56                      	push	si
 26996 00003435 9C                      	pushf
 26997                                  	;mov	byte [cpyflag],0  ; Turn "CPARSE called from COPY flag" off
 26998 00003436 C706[F3A3]FFFF          	mov	word [LASTARG],-1 ; last argument at which to accumulate
 26999 0000343C 31C0                    	xor	ax,ax
 27000                                  	;;mov	cx,1348
 27001                                  	; 27/07/2024
 27002                                  	;mov	cx,1092  ; PCDOS 7.1 COMMAND.COM
 27003 0000343E B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092
 27004 00003441 A2[839D]                	mov	[cpyflag],al ; 0 ; 27/07/2024
 27005 00003444 BF[2D9F]                	mov	di,ARG
 27006 00003447 F3AA                    	rep	stosb
 27007                                  	;mov	word [ARGBUF_PTR],ARG_ARGBUF
 27008 00003449 C706[71A3][F1A1]        	mov	word [ARGBUF_PTR],ARG+ARG_UNIT.argbuf
 27009                                  	;mov	word [ARG_ARGSWINFO],0 ; switch information, and info to date
 27010                                  	;mov	word [ARG+ARG_UNIT.argswinfo],0
 27011 0000344F A3[EFA1]                	mov	[ARG+ARG_UNIT.argswinfo],ax ; 0 ; 27/07/2024
 27012                                  	;mov	word [ARG_ARGVCNT],0 ; initialize argvcnt/argv[]
 27013                                  	;mov	word [ARG+ARG_UNIT.argvcnt],0
 27014 00003452 A3[EDA1]                	mov	[ARG+ARG_UNIT.argvcnt],ax ; 0 ; 27/07/2024 
 27015 00003455 BE[329A]                	mov	si,COMBUF+2	; prescan leaves cooked input in combuf
 27016                                  
 27017                                  ; This next section of code (up to pcont:)  makes sure that si is set up for
 27018                                  ; parsing. It should point at COMBUF if FORFLAG is set and arg.argforcombuf
 27019                                  ; otherwise. This is done so that commands can get arg pointers into their
 27020                                  ; original command line (or an exact copy of it) in arg_ocomptr.
 27021                                  ; Arg.argforcombuf is used so that the for loop processor will always be able
 27022                                  ; to get a hold of its original command line; even after COMBUF is blasted by
 27023                                  ; the command to be repeated or the transient part of command has been
 27024                                  ; reloaded.
 27025                                  
 27026 00003458 1E                      	push	ds
 27027 00003459 8E1E[D19B]              	mov	ds,[RESSEG]
 27028                                  	;cmp	byte [ForFlag],0
 27029 0000345D 3806[AB02]              	cmp	[ForFlag],al ; 0 ; 27/07/2024
 27030 00003461 1F                      	pop	ds
 27031 00003462 7510                    	jnz	short PCONT
 27032                                  	;mov	di,ARG_ARGFORCOMBUF
 27033 00003464 BF[F1A2]                	mov	di,ARG+ARG_UNIT.argforcombuf
 27034 00003467 30ED                    	xor	ch,ch
 27035 00003469 8A0E[319A]              	mov	cl,[COMBUF+1]
 27036 0000346D FEC1                    	inc	cl
 27037 0000346F F3A4                    	rep	movsb
 27038                                  	;mov	si,ARG_ARGFORCOMBUF
 27039 00003471 BE[F1A2]                	mov	si,ARG+ARG_UNIT.argforcombuf
 27040                                  PCONT:
 27041 00003474 BF[73A3]                	mov	di,TPBUF	; destination is temporary token buffer
 27042 00003477 B320                    	mov	bl,' '		; no special delimiter, for now
 27043                                  PARSELOOP:
 27044 00003479 8936[F5A3]              	mov	[COMPTR],si	; save ptr into original command buffer
 27045 0000347D 31ED                    	xor	bp,bp		; switch information put here by cparse
 27046 0000347F C606[0F9F]00            	mov	byte [expand_star],0 ; don't expand *'s to ?'s
 27047 00003484 E8C6F4                  	call	scanoff		; skip leading blanks...
 27048 00003487 E8BD12                  	call	cparse		; byte off a token (args in SI, DI, BL)
 27049 0000348A 730B                    	jnb	short MORE_PRSE
 27050 0000348C 09ED                    	or	bp,bp		; Check for trailing switch character
 27051 0000348E 7403                    	jz	short PARSEDONE
 27052 00003490 E81700                  	call	newarg		; We hit CR but BP is non-zero. The
 27053                                  				;   typical cause of this is that a
 27054                                  				;   switch char IMMEDIATELY preceeds
 27055                                  				;   the CR. We have an argument, but it
 27056                                  				;   is sort of an error.
 27057                                  	;jmp	short PARSEDONE	; We're done (found the CR).
 27058                                  	; 01/03/2023
 27059                                  PARSEDONE:
 27060 00003493 9D                      	popf
 27061 00003494 F8                      	clc
 27062 00003495 EB0C                    	jmp	short PARSE_EXIT
 27063                                  
 27064                                  MORE_PRSE:
 27065 00003497 C606[839D]02            	mov	byte [cpyflag],2
 27066                                  				; tell CPARSE that 1st token is done
 27067 0000349C E80B00                  	call	newarg		; add to argv array (CX has char count)
 27068 0000349F 73D8                    	jnb	short PARSELOOP	; was everything OK?
 27069                                  	;jmp	short PARSE_ERROR ; NO, it wasn't -- bug out (CF set)
 27070                                  	; 01/03/2023
 27071                                  ;PARSEDONE:
 27072                                  	;popf
 27073                                  	;clc
 27074                                  	;jmp	short PARSE_EXIT
 27075                                  
 27076                                  PARSE_ERROR:			; error entry (er, exit) point
 27077 000034A1 9D                      	popf
 27078 000034A2 F9                      	stc
 27079                                  PARSE_EXIT:			; depend on not changing CF
 27080 000034A3 5E                      	pop	si
 27081 000034A4 5F                      	pop	di
 27082 000034A5 5A                      	pop	dx
 27083 000034A6 59                      	pop	cx
 27084 000034A7 5B                      	pop	bx
 27085 000034A8 58                      	pop	ax
 27086 000034A9 C3                      	retn
 27087                                  
 27088                                  ; =============== S U B	R O U T	I N E =======================================
 27089                                  
 27090                                  ; NEWARG adds the supplied argstring and cparse data to arg.argv[].
 27091                                  ;
 27092                                  ; ENTRY:
 27093                                  ;   BH			argflags
 27094                                  ;   CX			character count in argstring
 27095                                  ;   DI			pointer to argstring
 27096                                  ;   comptr		ptr to starting loc of current token in original command
 27097                                  ;   [STARTEL]		cparse's answer to where the last element starts
 27098                                  ; EXIT:
 27099                                  ;   argbufptr		points to next free section of argbuffer
 27100                                  ;   arg.argbuf		contains null-terminated argument strings
 27101                                  ;   arg.argvcnt 	argument count
 27102                                  ;   arg.argv[]		array of flags and pointers
 27103                                  ;   arg.arg_ocomptr	ptr to starting loc of current token in original command
 27104                                  ;   CF			set if error
 27105                                  ;   AL			carry set:  error code; otherwise, zero
 27106                                  
 27107                                  	; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27108                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27109                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27110                                  newarg:
 27111 000034AA 53                      	push	bx
 27112 000034AB 51                      	push	cx
 27113 000034AC 52                      	push	dx
 27114 000034AD 57                      	push	di
 27115 000034AE 56                      	push	si
 27116 000034AF 9C                      	pushf
 27117 000034B0 E86200                  	call	arg_switch		; if it's a switch, record switch info
 27118                                  					; LEAVE SWITCH ON COMMAND LINE!!
 27119                                  	;;;jc	short newarg_done 	; previous arg's switches -- and leave
 27120                                  
 27121                                  	;cmp	word [ARG_ARGVCNT],64	; check to ensure we've not
 27122 000034B3 833E[EDA1]40            	cmp	word [ARG+ARG_UNIT.argvcnt],ARGMAX ; 64
 27123 000034B8 7D50                    	jge	short to_many_args	; exceeded array limits
 27124 000034BA 88FE                    	mov	dh,bh			
 27125                                  	;mov	bx,[ARG_ARGVCNT]	; save argflags	
 27126 000034BC 8B1E[EDA1]              	mov	bx,[ARG+ARG_UNIT.argvcnt] ; argv[argvcnt++] = arg data
 27127                                  	;inc	word [ARG_ARGVCNT]
 27128 000034C0 FF06[EDA1]              	inc	word [ARG+ARG_UNIT.argvcnt]
 27129                                  	;mov	ax,ARG_ARGV
 27130 000034C4 B8[2D9F]                	mov	ax,ARG+ARG_UNIT.argv
 27131 000034C7 E87E00                  	call	argv_calc		; convert offset to pointer
 27132                                  	;mov	[BX].argsw_word,0 	; no switch information, yet...
 27133                                  	;mov	word [bx+7],0
 27134 000034CA C747070000              	mov	word [bx+ARGV_ELE.argsw_word],0
 27135                                  	;mov	[BX].arglen,CX		; argv[argvcnt].arglen = arg length
 27136                                  	;mov	[bx+5],cx
 27137 000034CF 894F05                  	mov	[bx+ARGV_ELE.arglen],cx 
 27138                                  	;mov	[BX].argflags,DH 	; argv[argvcnt].argflags = cparse flags
 27139                                  	;mov	[bx+2],dh
 27140 000034D2 887702                  	mov	[bx+ARGV_ELE.argflags],dh
 27141 000034D5 8B36[71A3]              	mov	si,[ARGBUF_PTR]
 27142                                  	;mov	[BX].argpointer,SI 	; argv[argvcnt].argpointer = [argbufptr]
 27143                                  	;mov	[bx+ARGV_ELE.argpointer],si
 27144 000034D9 8937                    	mov	[bx],si			
 27145 000034DB 0336[D39E]              	add	si,[STARTEL]		; save startel from new location
 27146 000034DF 29FE                    	sub	si,di			; form pointer into argbuf
 27147                                  	;mov	[BX].argstartel,SI ; argv[argvcnt].argstartel = new [STARTEL]
 27148                                  	;mov	[bx+3],si
 27149 000034E1 897703                  	mov	[bx+ARGV_ELE.argstartel],si
 27150 000034E4 8B36[F5A3]              	mov	si,[COMPTR]
 27151                                  	;mov	[BX].arg_ocomptr,si ; arg_ocomptr = ptr into original com line
 27152                                  	;mov	[bx+9],si
 27153 000034E8 897709                  	mov	[bx+ARGV_ELE.arg_ocomptr],si
 27154 000034EB 89FE                    	mov	si,di			; now save argstring in argbuffer
 27155 000034ED 8B3E[71A3]              	mov	di,[ARGBUF_PTR]		; load the argbuf pointer and make
 27156                                  
 27157                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27158                                  ; PCDOS 7.1 COMMAND.COM
 27159                                  %if 0
 27160                                  	add	di,cx			; sure we're not about to run off
 27161                                  	;cmp	DI,OFFSET TRANGROUP:arg.argbuf+ARGBLEN-1
 27162                                  	;;cmp	di,ARG_ARGBUF+255
 27163                                  	;cmp	di,ARG+ARG_UNIT.argbuf+127
 27164                                  	cmp	di,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 27165                                  	jge	short buf_oflow		; the end of the buffer (plus null byte)
 27166                                  	sub	di,cx
 27167                                  %else
 27168                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27169                                  	;mov	bx,ARG_ARGBUF+127
 27170 000034F1 BB[70A2]                	mov	bx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 27171 000034F4 29FB                    	sub	bx,di	; sure we're not about to run off
 27172 000034F6 39CB                    	cmp	bx,cx
 27173 000034F8 7302                    	jnb	short newarg_@
 27174 000034FA 89D9                    	mov	cx,bx	
 27175                                  %endif
 27176                                  
 27177                                  newarg_@:	; 27/07/2024
 27178 000034FC FC                      	cld
 27179 000034FD F3A4                    	rep	movsb
 27180 000034FF B000                    	mov	al,ANULL ; 0		; tack a null byte on the end
 27181 00003501 AA                      	stosb
 27182 00003502 893E[71A3]              	mov	[ARGBUF_PTR],di		; update argbufptr after copy
 27183                                  newarg_done:
 27184 00003506 9D                      	popf
 27185 00003507 F8                      	clc
 27186 00003508 EB05                    	jmp	short newarg_exit
 27187                                  
 27188                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27189                                  ; PCDOS 7.1 COMMAND.COM
 27190                                  %if 0
 27191                                  to_many_args:
 27192                                  	mov	ax,1
 27193                                  	jmp	short newarg_error
 27194                                  buf_oflow:
 27195                                  	mov	ax,2
 27196                                  %else
 27197                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27198                                  ;buf_oflow:
 27199                                  ;	; 27/07/2024
 27200                                  ;	; PCDOS 7.1 COMMAND.COM
 27201                                  ;	sub	di,cx
 27202                                  ;	;mov	cx,ARG_ARGBUF+7Fh
 27203                                  ;	mov	cx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 27204                                  ;	sub	cx,di
 27205                                  ;	jmp     short newarg_@
 27206                                  to_many_args:
 27207 0000350A B80100                  	mov	ax,1
 27208                                  %endif
 27209                                  
 27210                                  newarg_error:
 27211 0000350D 9D                      	popf
 27212 0000350E F9                      	stc
 27213                                  newarg_exit:
 27214 0000350F 5E                      	pop	si
 27215 00003510 5F                      	pop	di
 27216 00003511 5A                      	pop	dx
 27217 00003512 59                      	pop	cx
 27218 00003513 5B                      	pop	bx
 27219 00003514 C3                      	retn
 27220                                  
 27221                                  ; =============== S U B	R O U T	I N E =======================================
 27222                                  
 27223                                  ; ARG_SWITCH decides if an argument might really be a switch. In the
 27224                                  ; event that it is, and we can recognize
 27225                                  ;
 27226                                  ; ENTRY:
 27227                                  ;   As in <newarg>.
 27228                                  ; EXIT:
 27229                                  ;   CF	    --	    clear (wasn't a switch); set (was a switch)
 27230                                  ; NOTE(S):
 27231                                  ;   *	The mechanism mapping a switch into a bit-value depends entirely
 27232                                  ;	on the order of definition in the <switch_list> variable and the
 27233                                  ;	values chosen to define the bits in CMDT:COMEQU.ASM. Change either
 27234                                  ;	<switch_list> or the definitions in CMDT:COMEQU.ASM -- and rewrite
 27235                                  ;	this mechanism. This code taken from CMDT:TCODE.ASM.
 27236                                  ;   *	The <switch_list> declared below is redundant to one declared in
 27237                                  ;	TDATA.ASM, and used in TCODE.ASM.
 27238                                  ;   *	An ugly routine.
 27239                                  
 27240                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 27241                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27242                                  arg_switch:
 27243 00003515 50                      	push	ax
 27244 00003516 53                      	push	bx
 27245 00003517 51                      	push	cx
 27246 00003518 57                      	push	di
 27247 00003519 9C                      	pushf
 27248 0000351A F6C701                  	test	bh,1 ; sw_flag		; is it a switch? (preserve flag word)
 27249 0000351D 741C                    	jz	short arg_no_switch0
 27250 0000351F 833E[F3A3]FF            	cmp	word [LASTARG],-1 	; have we encountered any REAL args yet?
 27251 00003524 741B                    	je	short arg_no_switch1 	; no, so leading switches don't matter
 27252 00003526 8B1E[F3A3]              	mov	bx,[LASTARG]		; yes, add switch info to last REAL arg
 27253                                  	;mov	ax,offset TRANGROUP:arg.argv
 27254                                  	;mov	ax,ARG_ARGV
 27255 0000352A B8[2D9F]                	mov	ax,ARG+ARG_UNIT.argv  ; ARG+0
 27256 0000352D E81800                  	call	argv_calc
 27257                                  	;or	[BX].argsw_word,BP
 27258                                  	;or	[bx+7],bp
 27259 00003530 096F07                  	or	[bx+ARGV_ELE.argsw_word],bp
 27260                                  	;or	arg.argswinfo,BP
 27261                                  	;or	[ARG_ARGSWINFO],bp
 27262 00003533 092E[EFA1]              	or	[ARG+ARG_UNIT.argswinfo],bp
 27263                                  arg_yes_switch:
 27264 00003537 9D                      	popf
 27265 00003538 F9                      	stc
 27266 00003539 EB08                    	jmp	short arg_switch_exit
 27267                                  
 27268                                  arg_no_switch0:
 27269                                  	;mov	ax,[ARG_ARGVCNT]
 27270 0000353B A1[EDA1]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 27271 0000353E A3[F3A3]                	mov	[LASTARG],ax
 27272                                  arg_no_switch1:
 27273 00003541 9D                      	popf
 27274 00003542 F8                      	clc
 27275                                  arg_switch_exit:
 27276 00003543 5F                      	pop	di
 27277 00003544 59                      	pop	cx
 27278 00003545 5B                      	pop	bx
 27279 00003546 58                      	pop	ax
 27280 00003547 C3                      	retn
 27281                                  
 27282                                  ; =============== S U B	R O U T	I N E =======================================
 27283                                  
 27284                                  ; ARGV_CALC maps an array index into a byte-offset from the base of
 27285                                  ; the supplied array.  Method used for computing the address is:
 27286                                  ;	Array Index * Array Elt Size + Base Addr = Elt Addr
 27287                                  ; ENTRY:
 27288                                  ;   AX	    --	    base of array
 27289                                  ;   BX	    --	    array index
 27290                                  ; EXIT:
 27291                                  ;   BX	    --	    byte offset
 27292                                  
 27293                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 27294                                  argv_calc:
 27295 00003548 50                      	push	ax		; Save base
 27296 00003549 88D8                    	mov	al,bl		; al = array index
 27297                                  	;mov	bl,11
 27298 0000354B B30B                    	mov	bl,ARGV_ELE.SIZE ; bl = size of an argv element
 27299 0000354D F6E3                    	mul	bl		; ax = base offset
 27300 0000354F 5B                      	pop	bx		; Get base
 27301 00003550 01D8                    	add	ax,bx		; Add in base offset
 27302 00003552 93                      	xchg	ax,bx		; Restore ax and put byte offset in bx
 27303 00003553 C3                      	retn
 27304                                  
 27305                                  ; ---------------------------------------------------------------------------
 27306                                  	
 27307                                  	;db 0Ah dup(0)
 27308                                  	;times 10 db 0
 27309                                  
 27310 00003554 90<rep Ch>              align 16
 27311                                  
 27312                                  ;============================================================================
 27313                                  ; PATH1.ASM, MSDOS 6.0, 1991
 27314                                  ;============================================================================
 27315                                  ; 03/10/2018 - Retro DOS v3.0
 27316                                  
 27317                                  ;----------------------------------------------------------------------------
 27318                                  ;    PATH.ASM contains the routines to perform pathname incovation. Path and
 27319                                  ;    Parse share a temporary buffer and argv[] definitions. <Path_Search>,
 27320                                  ;    given a pathname, attempts to find a corresponding executable or batch
 27321                                  ;    file on disk. Directories specified in the user's search path will be
 27322                                  ;    searched for a matching file, if a match is not found in the current
 27323                                  ;    directory and if the pathname is actually only an MSDOS filename.
 27324                                  ;    <Path_Search> assumes that the parsed command name can be found in
 27325                                  ;    argv[0] -- in other words, <Parseline> should be executed prior to
 27326                                  ;    <Path_Search>. Alternatively, the command name and appropriate
 27327                                  ;    information could be placed in argv[0], or <Path_Search> could be
 27328                                  ;    (easily) modified to make no assumptions about where its input is found.
 27329                                  ;    Please find enclosed yet another important routine, <Save_Args>, which
 27330                                  ;    places the entire arg/argv[]/argbuf structure on a piece of newly
 27331                                  ;    allocated memory. This is handy for for-loop processing, and anything
 27332                                  ;    else that wants to save the whole shebang and then process other command
 27333                                  ;    lines.
 27334                                  ;
 27335                                  ; Alan L, OS/MSDOS				    August 15, 1983
 27336                                  ;
 27337                                  ; ENTRY:
 27338                                  ;   <Path_Search>:	    argv[0].
 27339                                  ;   <Save_Args>:	    bytes to allocate in addition to arg structure
 27340                                  ; EXIT:
 27341                                  ;   <Path_Search>:	    success flag, best pathname match in EXECPATH.
 27342                                  ;   <Save_Args>:	    success flag, segment address of new memory
 27343                                  ; NOTE(S):
 27344                                  ;   *	<Argv_calc> handily turns an array index into an absolute pointer.
 27345                                  ;	The computation depends on the size of an argv[] element (arg_ele).
 27346                                  ;   *	<Parseline> calls <cparse> for chunks of the command line. <Cparse>
 27347                                  ;	does not function as specified; see <Parseline> for more details.
 27348                                  ;   *	<Parseline> now knows about the flags the internals of COMMAND.COM
 27349                                  ;	need to know about. This extra information is stored in a switch_flag
 27350                                  ;	word with each command-line argument; the switches themselves will not
 27351                                  ;	appear in the resulting arg structure.
 27352                                  ;   *	With the exception of CARRY, flags are generally preserved across calls.
 27353                                  ;----------------------------------------------------------------------------
 27354                                  
 27355                                  ; =============== S U B	R O U T	I N E =======================================
 27356                                  
 27357                                  ; PATH_SEARCH tries to find the file it's given, somewhere. An initial value
 27358                                  ; of *argv[0].argstartel == 0 implies that there is no command (empty line
 27359                                  ; or 'd:' or 'd:/'). This check is done in strip; otherwise, strip formats
 27360                                  ; the filename/pathname into tpbuf. Search(tpbuf) is executed to see if we
 27361                                  ; have a match, either in the current working directory if we were handed
 27362                                  ; a filename, or in the specified directory, given a pathname. If this call
 27363                                  ; fails, and we were given a pathname, then Path_Search fails. Otherwise,
 27364                                  ; Path_Crunch is repeatedly invoked on tpbuf[STARTEL] (if there's a drive
 27365                                  ; prefix, we want to skip it) for each pathstring in userpath. Success on
 27366                                  ; either the first invocation of search or on one of the succeeding calls
 27367                                  ; sets up the appropriate information for copying the successful pathname
 27368                                  ; prefix (if any) into the result buffer, followed by the successful filename
 27369                                  ; match (from [search_best_buf]). The result is returned in in EXECPATH.
 27370                                  ;
 27371                                  ; ENTRY:
 27372                                  ;   argv[0]		--	command name and associated information
 27373                                  ; EXIT:
 27374                                  ;   AX			--	non-zero indicates type of file found
 27375                                  ;   EXECPATH		--	successful pathname (AX non-zero)
 27376                                  ; NOTE(S):
 27377                                  ;   1)	Uses the temporary buffer, tpbuf, from the parse routines.
 27378                                  ;   2)	Some files are more equal than others.	See search: for rankings.
 27379                                  ;   3)	Path_Search terminates as soon as a call to search succeeds, even
 27380                                  ;	if search returns an .exe or .bat.
 27381                                  ;   5)	Clobbers dma address.
 27382                                  
 27383                                  ;PBUFLEN 	EQU	128		; length of EXECPATH
 27384                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 27385                                  PBUFLEN 	EQU	256
 27386                                  PATH_SEP_CHAR	EQU	';'
 27387                                  
 27388                                  ;parseflags RECORD special_delim:1, unused:4, path_sep:1, wildcard:1, sw_flag:1
 27389                                  
 27390                                  	;special_delim equ 128
 27391                                  	;path_sep equ 4
 27392                                  	;wildcard equ 2
 27393                                  	;sw_flag  equ 1
 27394                                  
 27395                                  ;----------------------------------------------------------------------------
 27396                                  
 27397                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2510h
 27398                                  
 27399                                  ; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27400                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 32D1h
 27401                                  
 27402                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27403                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 387Bh
 27404                                  
 27405                                  ; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 27406                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 372Fh
 27407                                  
 27408                                  path_search:
 27409 00003560 53                      	push	bx
 27410 00003561 51                      	push	cx
 27411 00003562 52                      	push	dx		; could use a "stack 'em" instruction
 27412 00003563 56                      	push	si
 27413 00003564 57                      	push	di
 27414 00003565 55                      	push	bp
 27415 00003566 9C                      	pushf
 27416                                  
 27417                                  	;test	ds:arg.argv[0].argflags, (MASK wildcard) + (MASK sw_flag)
 27418                                  	;test	byte [ARGV0_ARG_FLAGS],3
 27419 00003567 F606[2F9F]03            	test	byte [ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag
 27420 0000356C 7403                    	jz	short path_search_ok
 27421                                  path_failure_jmp:
 27422 0000356E E9C100                  	jmp	path_failure	; ambiguous commands not allowed
 27423                                  
 27424                                  path_search_ok:
 27425 00003571 E85201                  	call	STORE_PCHAR	; figure out the pathname separator
 27426 00003574 BA[F7A3]                	mov	dx,FBUF		; clobber old dma value with
 27427 00003577 B8001A                  	mov	ax,Set_DMA*256 ; 1A00h ; a pointer to our dma buffer
 27428 0000357A CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 27429                                  			; DS:DX	-> disk	transfer buffer
 27430 0000357C 06                      	push	es
 27431 0000357D E8F6F0                  	call	find_path	; get a handle (ES:DI) on user path
 27432 00003580 8C06[22A4]              	mov	[pathinfo+0],es	; and squirrel it away
 27433 00003584 893E[24A4]              	mov	[pathinfo+2],di	; "old" pathstring pointer
 27434 00003588 893E[26A4]              	mov	[pathinfo+4],di	; "new" pathstring pointer
 27435 0000358C 07                      	pop	es
 27436                                  	
 27437                                  	;mov	bx,PBUFLEN ; 128 ; copy/format argv[0] into temp buffer
 27438                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 27439                                  	;mov	bx,256
 27440 0000358D BB0001                  	mov	bx,PBUFLEN ; 256 ; copy/format argv[0] into temp buffer
 27441 00003590 BE[F99A]                	mov	si,EXECPATH
 27442 00003593 E88002                  	call	STRIP
 27443 00003596 72D6                    	jc	short path_failure_jmp ; if possible, of course
 27444                                  		
 27445 00003598 89F2                    	mov	dx,si		; search (EXECPATH, error_message)
 27446 0000359A C706[77A4][DB8F]        	mov	word [search_error],baddrv_ptr
 27447 000035A0 E89F01                  	call	PSEARCH		; must do at least one search
 27448 000035A3 09C0                    	or	ax,ax		; find anything?
 27449 000035A5 7469                    	jz	short path_noinit
 27450                                  				; failure ... search farther
 27451 000035A7 89C5                    	mov	bp,ax		; success... save filetype code
 27452 000035A9 BF[F99A]                	mov	di,EXECPATH
 27453                                  	;mov	si,ds:arg.argv[0].argpointer
 27454                                  	;mov	si,[ARG_ARGV]
 27455 000035AC 8B36[2D9F]              	mov	si,[ARG+ARGV_ELE.argpointer]
 27456                                  	;mov	cx,ds:arg.argv[0].argstartel
 27457                                  	;mov	cx,[ARGV0_ARGSTARTEL]
 27458 000035B0 8B0E[309F]              	mov	cx,[ARG+ARGV_ELE.argstartel]
 27459 000035B4 29F1                    	sub	cx,si		; compute prefix bytes to copy
 27460                                  
 27461                                  ; We have the number of bytes in the prefix (up to the final component).
 27462                                  ; We need to form the complete pathname including leading drive and current
 27463                                  ; directory.
 27464                                  ;
 27465                                  ; Is there a drive letter present?
 27466                                  
 27467 000035B6 B43A                    	mov	ah,':'
 27468 000035B8 83F902                  	cmp	cx,2		; room for drive letter?
 27469 000035BB 7205                    	jb	short adddrive	; no, stick it in
 27470 000035BD 386401                  	cmp	[si+1],	ah	; colon present?
 27471 000035C0 7408                    	je	short movedrive	; yes, just move it
 27472                                  adddrive:
 27473 000035C2 A0[E59B]                	mov	al,[CURDRV]	; get current drive
 27474 000035C5 0441                    	add	al,'A'		; convert to uppercase letter
 27475 000035C7 AB                      	stosw			; store d:
 27476 000035C8 EB05                    	jmp	short checkpath
 27477                                  
 27478                                  movedrive:
 27479 000035CA AD                      	lodsw			; move d:
 27480 000035CB AB                      	stosw
 27481 000035CC 83E902                  	sub	cx,2		; 2 bytes less to move
 27482                                  checkpath:
 27483 000035CF 0C20                    	or	al,20h
 27484 000035D1 88C2                    	mov	dl,al
 27485                                  	;sub	dl,60h
 27486 000035D3 80EA60                  	sub	dl,'a'-1	; convert to 1-based for current dir
 27487                                  
 27488                                  ; Stick in beginning path char
 27489                                  
 27490 000035D6 A0[28A4]                	mov	al,[psep_char]
 27491 000035D9 AA                      	stosb
 27492                                  
 27493                                  ; Is there a leading /? If so, then no current dir copy is necessary.
 27494                                  ; Otherwise, get current dir for DL.
 27495                                  
 27496 000035DA 83F901                  	cmp	cx,1		; is there room for path char?
 27497 000035DD 720A                    	jb	short addpath	; no, go add path
 27498 000035DF AC                      	lodsb
 27499 000035E0 49                      	dec	cx
 27500 000035E1 3A06[28A4]              	cmp	al,[psep_char]	; is there a path separator?
 27501 000035E5 741C                    	je	short movepath	; yes, go move remainder of path
 27502 000035E7 41                      	inc	cx
 27503 000035E8 4E                      	dec	si		; undo the lodsb
 27504                                  addpath:
 27505 000035E9 56                      	push	si
 27506 000035EA 89FE                    	mov	si,di		; remainder of buffer
 27507 000035EC B80047                  	mov	ax,Current_Dir*256 ; 4700h
 27508 000035EF CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 27509                                  			; DL = drive (0=default,1=A,etc.)
 27510                                  			; DS:SI	points to 64-byte buffer area
 27511                                  
 27512                                  ; The previous current dir will succeed a previous find_first already worked.
 27513                                  ;
 27514                                  ; Find end of string.
 27515                                  
 27516 000035F1 89F7                    	mov	di,si
 27517 000035F3 5E                      	pop	si
 27518 000035F4 A0[28A4]                	mov	al,[psep_char]
 27519 000035F7 803D00                  	cmp	byte [di],0	; root (empty dir string)?
 27520 000035FA 7407                    	jz	short movepath	; yes, no need for path char
 27521                                  scanend:
 27522                                  	;cmp	byte [di],0	; end of string?
 27523                                  	;jz	short foundend
 27524                                  	;inc	di
 27525                                  	;jmp	short scanend
 27526                                  	; 18/03/2023 - Retro DOS v4.0 COMMAND.COM
 27527 000035FC 47                      	inc	di
 27528 000035FD 803D00                  	cmp	byte [di],0
 27529 00003600 75FA                    	jnz	short scanend
 27530                                  
 27531                                  ; Stick in a trailing path char.
 27532                                  
 27533                                  foundend:
 27534 00003602 AA                      	stosb
 27535                                  
 27536                                  ; Move remaining part of path. Skip leading path char if present.
 27537                                  
 27538                                  movepath:
 27539 00003603 3804                    	cmp	[si],al		; first char a path char?
 27540 00003605 7502                    	jne	short copypath
 27541                                  	; 26/04/2023
 27542 00003607 46                      	inc	si		; move past leading char
 27543 00003608 49                      	dec	cx		; drop from count
 27544                                  copypath:
 27545 00003609 E302                    	jcxz	_copydone	; no chars to move!
 27546 0000360B F3A4                    	rep	movsb
 27547                                  _copydone:
 27548 0000360D E9A100                  	jmp	path_success
 27549                                  				; run off and form complete pathname
 27550                                  path_noinit:
 27551                                  	;test	ds:arg.argv[0].argflags, MASK path_sep
 27552                                  	;test	byte [ARGV0_ARG_FLAGS],4
 27553 00003610 F606[2F9F]04            	test	byte [ARG+ARGV_ELE.argflags],4 ; path_sep
 27554 00003615 751B                    	jnz	short path_failure
 27555                                  				; complete pathname specified ==> fail
 27556                                  	;mov	bh,';'
 27557 00003617 B73B                    	mov	bh,PATH_SEP_CHAR
 27558                                  				; semicolon terminates pathstring
 27559                                  	;mov	dx,ds:arg.argv[0].argstartel
 27560                                  				; this is where the last element starts
 27561                                  	;mov	dx,[ARGV0_ARGSTARTEL]
 27562 00003619 8B16[309F]              	mov	dx,[ARG+ARGV_ELE.argstartel]
 27563                                  	;sub	dx,ds:arg.argv[0].argpointer
 27564                                  				; form pointer into EXECPATH,
 27565                                  	;sub	dx,[ARG_ARGV]
 27566 0000361D 2B16[2D9F]              	sub	dx,[ARG+ARGV_ELE.argpointer]
 27567 00003621 81C2[F99A]              	add	dx,EXECPATH	; skipping over drive spec, if any
 27568                                  path_loop:
 27569 00003625 E8AD00                  	call	path_crunch	; pcrunch (EXECPATH, pathinfo)
 27570 00003628 89C5                    	mov	bp,ax		; save filetype code
 27571 0000362A 9F                      	lahf			; save flags, just in case
 27572 0000362B 09ED                    	or	bp,bp		; did path_crunch find anything?
 27573 0000362D 7508                    	jnz	short path_found
 27574 0000362F 9E                      	sahf			; see? needed those flags, after all!
 27575 00003630 73F3                    	jnc	short path_loop	; is there anything left to the path?
 27576                                  path_failure:
 27577 00003632 31C0                    	xor	ax,ax
 27578 00003634 E98700                  	jmp	path_exit
 27579                                  
 27580                                  path_found:				; pathinfo[] points to winner
 27581 00003637 BF[F99A]                	mov	di,EXECPATH
 27582                                  	;mov	cx,pathinfo[4]
 27583 0000363A 8B0E[26A4]              	mov	cx,[pathinfo+4]	; "new" pointer -- end of string
 27584                                  	;mov	si,pathinfo[2]
 27585 0000363E 8B36[24A4]              	mov	si,[pathinfo+2]	; "old" pointer -- beginning of string
 27586                                  
 27587                                  ;	BAS Nov 20/84
 27588                                  ;   Look at the pathname and expand . and .. if they are the first element
 27589                                  ;   in the pathname (after the drive letter)
 27590                                  
 27591 00003642 06                      	push	es
 27592                                  	;push	pathinfo[0]
 27593 00003643 FF36[22A4]              	push	word [pathinfo+0]
 27594 00003647 07                      	pop	es
 27595                                  ;SR;
 27596                                  ; Oops! Gets fooled if path= \;..
 27597                                  ; We should also check if a drive letter is really present
 27598                                  ;
 27599 00003648 26807C022E              	cmp	byte [es:si+2],'.'
 27600                                  				; Look for Current dir at start of path
 27601 0000364D 7534                    	jne	short path_cpy
 27602                                  
 27603                                  	; 18/03/2023
 27604                                  	; MSDOS 6.0
 27605 0000364F 26807C013A              	cmp	byte [es:si+1],':'
 27606                                  				; does path have drive letter?
 27607 00003654 752D                    	jne	short path_cpy	; no, copy the path string
 27608                                  
 27609 00003656 51                      	push	cx		; Save pointer to end of string
 27610                                  	;mov	al,[es:si]
 27611                                  	;mov	[di],al		; Copy drive letter, :, and root char
 27612                                  	;mov	al,[es:si+1]	; to EXECPATH
 27613                                  	;mov	[di+1],al
 27614                                  	; 05/05/2023
 27615 00003657 268B04                  	mov	ax,[es:si]
 27616 0000365A 8905                    	mov	[di],ax
 27617 0000365C A0[28A4]                	mov	al,[psep_char]
 27618 0000365F 884502                  	mov	[di+2],	al
 27619 00003662 56                      	push	si		; Save pointer to begining of string
 27620 00003663 268A14                  	mov	dl,[es:si]	; Convert device letter for cur dir
 27621 00003666 80CA20                  	or	dl,20h
 27622                                  	;sub	dl,60h
 27623 00003669 80EA60                  	sub	dl,'a'-1
 27624 0000366C 89FE                    	mov	si,di		; pointer to EXECPATH
 27625 0000366E 83C603                  	add	si,3		; Don't wipe out drive and root info
 27626 00003671 B80047                  	mov	ax,Current_Dir*256 ; 4700h
 27627 00003674 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 27628                                  			; DL = drive (0=default,1=A,etc.)
 27629                                  			; DS:SI	points to 64-byte buffer area
 27630 00003676 E8EDF9                  	call	dstrlen		; Determine length of present info
 27631 00003679 01CE                    	add	si,cx		; Don't copy over drive and root info
 27632 0000367B 4E                      	dec	si
 27633 0000367C 89F7                    	mov	di,si		; Point to end of target string
 27634 0000367E 5E                      	pop	si		; Restore pointer to begining of string
 27635 0000367F 83C603                  	add	si,3		; Point past drive letter, :, .
 27636 00003682 59                      	pop	cx		; Restore pointer to end of string
 27637                                  path_cpy:
 27638 00003683 07                      	pop	es
 27639 00003684 29F1                    	sub	cx,si		; yields character count
 27640 00003686 1E                      	push	ds		; time to switch segments
 27641 00003687 FF36[22A4]              	push	word [pathinfo+0]
 27642                                  				; string lives in this segment
 27643 0000368B 1F                      	pop	ds
 27644 0000368C FC                      	cld
 27645                                  
 27646                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27647                                  	; MSDOS 5.0 (& MSDOS 5.0)
 27648                                  	;;rep	movsb ; 3/3/KK	; copy the prefix path into EXECPATH
 27649                                  kloop:
 27650 0000368D AC                      	lodsb			;AN000;  3/3/KK
 27651 0000368E AA                      	stosb			;AN000;  3/3/KK
 27652 0000368F E896F0                  	call	testkanj	;AN000;  3/3/KK
 27653 00003692 7410                    	jz	short _notkanj1	;AN000;  3/3/KK
 27654 00003694 49                      	dec	cx		;AN000;  3/3/KK
 27655 00003695 E307                    	jcxz	popdone		;AN000;  Ignore boundary error 3/3/KK
 27656 00003697 A4                      	movsb			;AN000;  3/3/KK
 27657 00003698 49                      	dec	cx		;AN000;  3/3/KK
 27658 00003699 83F901                  	cmp	cx,1		;AN000;  One char (the terminator) left ? 3/3/KK
 27659 0000369C 77EF                    	ja	short kloop	;AN000;  no.  3/3/KK
 27660                                  popdone:			;AN000;  3/3/KK
 27661 0000369E 1F                      	pop	ds		;AN000;  Yes ES:DI->terminator, last char is 3/3/KK
 27662 0000369F A0[28A4]                	mov	al,[psep_char]	;AN000;  KANJI 3/3/KK
 27663 000036A2 EB0C                    	jmp	short path_store
 27664                                  				;AN000;  3/3/KK
 27665                                  _notkanj1:
 27666                                  	; 26/04/2023
 27667 000036A4 E2E7                    	loop	kloop
 27668 000036A6 1F                      	pop	ds		; return to our segment
 27669 000036A7 4F                      	dec	di		; overwrite terminator
 27670 000036A8 A0[28A4]                	mov	al,[psep_char]	; with a pathname separator
 27671 000036AB 3A45FF                  	cmp	al,[di-1]
 27672 000036AE 7401                    	je	short path_success
 27673                                  path_store:
 27674 000036B0 AA                      	stosb
 27675                                  path_success:
 27676 000036B1 BE[2AA4]                	mov	si,search_best_buf
 27677 000036B4 31C9                    	xor	cx,cx
 27678                                  path_succ_loop:
 27679 000036B6 AC                      	lodsb			; append winning filename to path
 27680 000036B7 AA                      	stosb			; (including terminating null)
 27681 000036B8 08C0                    	or	al,al
 27682 000036BA 75FA                    	jnz	short path_succ_loop
 27683 000036BC 89E8                    	mov	ax,bp		; retrieve filetype code
 27684                                  path_exit:
 27685 000036BE 9D                      	popf
 27686 000036BF 5D                      	pop	bp
 27687 000036C0 5F                      	pop	di
 27688 000036C1 5E                      	pop	si		; chill out...
 27689 000036C2 5A                      	pop	dx
 27690 000036C3 59                      	pop	cx
 27691 000036C4 5B                      	pop	bx
 27692 000036C5 C3                      	retn
 27693                                  
 27694                                  ; =============== S U B	R O U T	I N E =======================================
 27695                                  
 27696                                  ; STORE_PCHAR determines the pathname-element separator and squirrels
 27697                                  ; it away. In other words, must we say '/bin/ls' or '\bin\ls'?
 27698                                  ;
 27699                                  ; ENTRY:
 27700                                  ; EXIT:
 27701                                  ; NOTE(S):
 27702                                  ;   *	Uses <psep_char>, defined in <path_search>.
 27703                                  
 27704                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27705                                  STORE_PCHAR:
 27706 000036C6 50                      	push	ax
 27707 000036C7 B02F                    	mov	al,'/'		; is the pathname-element separator
 27708 000036C9 E80FF3                  	call	pathchrcmp	; a regular slash?
 27709 000036CC 7402                    	jz	short STORE_SLASH
 27710                                  				; if yes, remember slash
 27711 000036CE B05C                    	mov	al,'\'
 27712                                  	; 18/03/2023
 27713                                  	;mov	[psep_char],al	; otherwise, remember back-slash
 27714                                  	;pop	ax
 27715                                  	;retn
 27716                                  STORE_SLASH:
 27717 000036D0 A2[28A4]                	mov	[psep_char],al
 27718 000036D3 58                      	pop	ax
 27719 000036D4 C3                      	retn
 27720                                  
 27721                                  ; =============== S U B	R O U T	I N E =======================================
 27722                                  
 27723                                  ; PATH_CRUNCH takes a prefix from a prefix string, and a suffix from
 27724                                  ; EXECPATH, and smooshes them into tpbuf. The caller may supply an
 27725                                  ; additional separator to use for breaking up the path-string. Null is the
 27726                                  ; default. Once the user-string has been formed, search is invoked to see
 27727                                  ; what's out there.
 27728                                  ;
 27729                                  ; ENTRY:
 27730                                  ;   BH			--	additional terminator character
 27731                                  ;   SI			--	pointer into pathstring to be dissected
 27732                                  ;   DX			--	pointer to stripped filename
 27733                                  ; EXIT:
 27734                                  ;   AX			--	non-zero (file type), zero (nothing found)
 27735                                  ;   SI			--	moves along pathstring from call to call
 27736                                  ;   [search_best_buf]	--	name of best file (AX non-zero)
 27737                                  ;   [tpbuf]		--	clobbered
 27738                                  ; NOTE(S):
 27739                                  ;   *	Implicit in this code is the ability to specify when to search
 27740                                  ;	the current directory (if at all) through the PATH defined by
 27741                                  ;	the user, a la UNIX (e.g., PATH=;c:\bin;c:\etc searches the
 27742                                  ;	current directory before the bin and etc directories of drive c).
 27743                                  
 27744                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27745                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3454h
 27746                                  
 27747                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27748                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:39FEh
 27749                                  
 27750                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 27751                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:38B2h
 27752                                  path_crunch:
 27753 000036D5 53                      	push	bx
 27754 000036D6 51                      	push	cx
 27755 000036D7 52                      	push	dx
 27756 000036D8 57                      	push	di
 27757 000036D9 56                      	push	si
 27758                                  	;pushf	; ** ; 18/03/2023
 27759 000036DA E8E9FF                  	call	STORE_PCHAR	; figure out pathname separator
 27760 000036DD BF[73A3]                	mov	di,TPBUF	; destination of concatenated string
 27761 000036E0 8B36[26A4]              	mov	si,[pathinfo+4]	; "new" pointer to start with
 27762 000036E4 8936[24A4]              	mov	[pathinfo+2],si	; becomes "old" pointer
 27763 000036E8 1E                      	push	ds		; save old segment pointer
 27764 000036E9 FF36[22A4]              	push	word [pathinfo+0]
 27765                                  				; replace with pointer to userpath's
 27766 000036ED 1F                      	pop	ds		; segment
 27767                                  	; 26/04/2023
 27768 000036EE 30C9                    	xor	cl,cl		;AN000; clear flag for later use 3/3/KK
 27769                                  path_cr_copy:
 27770 000036F0 AC                      	lodsb			; get a pathname byte
 27771 000036F1 08C0                    	or	al,al		; check for terminator(s)
 27772 000036F3 7414                    	jz	short path_seg	; null terminates segment & pathstring
 27773 000036F5 38F8                    	cmp	al,bh
 27774 000036F7 7410                    	je	short path_seg	; BH terminates a pathstring segment
 27775                                  	;
 27776                                  	; 18/03/2023
 27777                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 27778 000036F9 E82CF0                  	call	testkanj	;AN000; 3/3/KK
 27779 000036FC 7406                    	jz	short _notkanj2	;AN000; 3/3/KK
 27780 000036FE AA                      	stosb			;AN000; 3/3/KK
 27781 000036FF A4                      	movsb			;AN000; 3/3/KK
 27782 00003700 B101                    	mov	cl,1 ; *	;AN000; CL=1 means latest stored char is DBCS 3/3/KK
 27783 00003702 EBEC                    	jmp	short path_cr_copy
 27784                                  _notkanj2:
 27785 00003704 30C9                    	xor	cl,cl ; *	;AN000; CL=0 means latest stored char is SBCS 3/3/KK
 27786                                  	;
 27787 00003706 AA                      	stosb
 27788 00003707 EBE7                    	jmp	short path_cr_copy
 27789                                  
 27790                                  path_seg:
 27791 00003709 1F                      	pop	ds		; restore old data segment
 27792 0000370A 8936[26A4]              	mov	[pathinfo+4],si	; save "new" pointer for next time
 27793 0000370E 88C3                    	mov	bl,al		; remember if we saw null or not...
 27794                                  				;;; REMOVE NEXT 3 LINES FOR CURDIR SPEC
 27795 00003710 31C0                    	xor	ax,ax		; in case nothing in pathstr...
 27796 00003712 81FF[73A3]              	cmp	di,TPBUF	; was there really anything in pathstr?
 27797 00003716 7421                    	je	short path_cr_leave
 27798                                  				; if nothing was copied, pathstr empty
 27799                                  path_cr_look:
 27800 00003718 A0[28A4]                	mov	al,[psep_char]	; form complete pathname
 27801                                  	;
 27802                                  	; 18/03/2023
 27803                                  	; MSDOS 6.0
 27804 0000371B 08C9                    	or	cl,cl ; *	;AN000; 3/3/KK
 27805 0000371D 7505                    	jnz	short path_cr_store
 27806                                  				;AN000; this is a trailing byte of ECS code 3/3/KK
 27807                                  	;
 27808 0000371F 3A45FF                  	cmp	al,[di-1]	; add pathname separator for suffix
 27809 00003722 7401                    	je	short path_cr_l1
 27810                                  path_cr_store:
 27811 00003724 AA                      	stosb
 27812                                  path_cr_l1:
 27813 00003725 89D6                    	mov	si,dx
 27814                                  path_cr_l2:
 27815 00003727 AC                      	lodsb			; tack the stripped filename onto
 27816 00003728 AA                      	stosb			; the end of the path, up to and
 27817 00003729 08C0                    	or	al,al		; including the terminating null
 27818 0000372B 75FA                    	jnz	short path_cr_l2
 27819 0000372D BA[73A3]                	mov	dx,TPBUF	; and look for an appropriate file...
 27820 00003730 C706[77A4][C190]        	mov	word [search_error],BADPMES_PTR
 27821                                  	;invoke search
 27822 00003736 E80900                  	call	PSEARCH		; results are in AX & search_best_buf
 27823                                  
 27824                                  	; 18/03/2023
 27825                                  ;path_cr_leave:
 27826                                  	;or	bl,bl		; did we finish off the pathstring?
 27827                                  	;jz	short path_cr_empty
 27828                                  	;			; null in BL means all gone...
 27829                                  	;popf	; **		; otherwise, plenty left
 27830                                  	;clc
 27831                                  	;jmp	short path_cr_exit
 27832                                  ;path_cr_empty:
 27833                                  	;popf	; **
 27834                                  	;stc
 27835                                  ;path_cr_exit:
 27836                                  
 27837                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27838                                  path_cr_leave:
 27839                                  	;popf ; ** ; 18/03/2023
 27840 00003739 80FB01                  	cmp	bl,1	; if bl = 0 -> cf = 1 (path_cr_empty:)
 27841                                  
 27842                                  path_cr_exit:
 27843 0000373C 5E                      	pop	si
 27844 0000373D 5F                      	pop	di
 27845 0000373E 5A                      	pop	dx
 27846 0000373F 59                      	pop	cx
 27847 00003740 5B                      	pop	bx
 27848 00003741 C3                      	retn
 27849                                  
 27850                                  ;============================================================================
 27851                                  ; PATH2.ASM, MSDOS 6.0, 1991
 27852                                  ;============================================================================
 27853                                  ; 02/10/2018 - Retro DOS v3.0
 27854                                  
 27855                                  ;----------------------------------------------------------------------------
 27856                                  ;   SEARCH, when given a pathname, attempts to find a file with
 27857                                  ; one of the following extensions: .com, .exe, .bat (highest to
 27858                                  ; lowest priority). Where conflicts arise, the extension with
 27859                                  ; the highest priority is favored.
 27860                                  ; ENTRY:
 27861                                  ;   DX		--	pointer to null-terminated pathname
 27862                                  ;   fbuf	--	dma buffer for findfirst/next
 27863                                  ; EXIT:
 27864                                  ;   AX		--	8)  file found with .com extension
 27865                                  ;			4)  file found with .exe extension
 27866                                  ;			2)  file found with .bat extension
 27867                                  ;			0)  no such file to be found
 27868                                  ;   (if AX is non-zero:)
 27869                                  ;   [search_best]	identical to AX
 27870                                  ;   [search_best_buf]	null-terminated filename
 27871                                  ; NOTES:
 27872                                  ;   1) Requires caller to have allocated a dma buffer and executed a setdma.
 27873                                  ;---------------
 27874                                  ; CONSTANTS:
 27875                                  ;---------------
 27876                                  SEARCH_FILE_NOT_FOUND	EQU	0
 27877                                  SEARCH_COM		EQU	8
 27878                                  SEARCH_EXE		EQU	4
 27879                                  SEARCH_BAT		EQU	2
 27880                                  FNAME_LEN		EQU	8
 27881                                  FNAME_MAX_LEN		EQU	13
 27882                                  DOT			EQU	'.'
 27883                                  WILDCHAR		EQU	'?'
 27884                                  
 27885                                  
 27886                                  ; =============== S U B	R O U T	I N E =======================================
 27887                                  
 27888                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 26D6h
 27889                                  
 27890                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27891                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:34C9h
 27892                                  
 27893                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27894                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3A73h
 27895                                  
 27896                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 27897                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3927h
 27898                                  PSEARCH:
 27899 00003742 51                      	push	cx
 27900 00003743 52                      	push	dx
 27901 00003744 57                      	push	di
 27902 00003745 56                      	push	si
 27903                                  	;pushf	; ** ; 18/03/2023
 27904 00003746 52                      	push	dx		; check drivespec (save pname ptr)
 27905 00003747 89D7                    	mov	di,dx		; working copy of pathname
 27906 00003749 BE[37A4]                	mov	si,search_curdir_buf
 27907 0000374C 31D2                    	xor	dx,dx		; zero means current drive
 27908 0000374E 807D013A                	cmp	byte [di+1],':'	; is there a drive spec?
 27909 00003752 7508                    	jne	short SEARCH_DIR_CHECK
 27910 00003754 8A15                    	mov	dl,[di]		; get the drive byte
 27911 00003756 80E2DF                  	and	dl,0DFh ; ~20h	; uppercase the sucker
 27912 00003759 80EA40                  	sub	dl,'@' ; 40h	; and convert to drive number
 27913                                  SEARCH_DIR_CHECK:
 27914 0000375C B80047                  	mov	ax,Current_Dir*256 ; 4700h
 27915 0000375F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 27916                                  			; DL = drive (0=default,1=A,etc.)
 27917                                  			; DS:SI	points to 64-byte buffer area
 27918 00003761 5A                      	pop	dx		; directory? If we can't we'll
 27919 00003762 724C                    	jc	short SEARCH_INVALID_DRIVE
 27920                                  				; assume it's a bad drive...
 27921 00003764 B91300                  	mov	cx,search_attr	; 13h
 27922                                  				; filetypes to search for
 27923 00003767 B8004E                  	mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 27924 0000376A CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 27925                                  			; CX = search attributes
 27926                                  			; DS:DX	-> ASCIZ filespec
 27927                                  			; (drive,path, and wildcards allowed)
 27928 0000376C 7249                    	jc	short SEARCH_NO_FILE
 27929 0000376E C606[29A4]00            	mov	byte [search_best],SEARCH_FILE_NOT_FOUND ; 0
 27930 00003773 C606[2AA4]00            	mov	byte [search_best_buf],ANULL
 27931                                  				; 0 ; nothing's been found, yet
 27932                                  SEARCH_LOOP:
 27933 00003778 E84300                  	call	SEARCH_FTYPE	; determine if .com, &c...
 27934 0000377B 3A06[29A4]              	cmp	al,[search_best]
 27935                                  				; better than what we've found so far?
 27936 0000377F 7E13                    	jle	short SEARCH_NEXT
 27937                                  				; no, look for another
 27938 00003781 A2[29A4]                	mov	[search_best],al
 27939                                  				; found something... save its code
 27940                                  	;mov	si,offset TRANGROUP:fbuf.find_buf_pname
 27941                                  	;mov	si,FBUF_PNAME
 27942 00003784 BE[15A4]                	mov	si,FBUF+FIND_BUF.PNAME ; FBUF+30
 27943 00003787 BF[2AA4]                	mov	di,search_best_buf
 27944 0000378A B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 27945 0000378D FC                      	cld
 27946 0000378E F3A4                    	rep	movsb		; save complete pathname representation
 27947 00003790 3C08                    	cmp	al,SEARCH_COM	; 8
 27948                                  				; have we found the best of all?
 27949 00003792 740A                    	je	short SEARCH_DONE
 27950                                  SEARCH_NEXT:			; keep on looking
 27951 00003794 B91300                  	mov	cx,search_attr ; 13h
 27952 00003797 B8004F                  	mov	ax,Find_Next*256 ; 4F00h ; next match
 27953 0000379A CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 27954                                  			; [DTA]	= data block from
 27955                                  			; last AH = 4Eh/4Fh call
 27956 0000379C 73DA                    	jnc	short SEARCH_LOOP
 27957                                  SEARCH_DONE:			; it's all over with...
 27958 0000379E A0[29A4]                	mov	al,[search_best]
 27959                                  				; pick best to return with
 27960                                  	; 18/03/2023
 27961                                  	; MSDOS 6.0
 27962 000037A1 803E[E39E]01            	cmp	byte [ext_entered],1
 27963                                  				;AN005; Did user request a specific ext?
 27964 000037A6 7411                    	je	short SEARCH_EXIT
 27965                                  				;AN005; no - exit
 27966 000037A8 A0[E39E]                	mov	al,[ext_entered]
 27967                                  				;AN005; yes - get the real file type back
 27968 000037AB A2[29A4]                	mov	[search_best],al
 27969                                  				;AN005; save the real file type
 27970                                  	;
 27971 000037AE EB09                    	jmp	short SEARCH_EXIT
 27972                                  
 27973                                  SEARCH_INVALID_DRIVE:		; Tell the user path/drive
 27974 000037B0 8B16[77A4]              	mov	dx,[search_error]
 27975                                  				; appropriate error message
 27976 000037B4 E8261C                  	call	std_printf	; and pretend no file found
 27977                                  
 27978                                  SEARCH_NO_FILE:			; couldn't find a match
 27979                                  	;mov	ax,SEARCH_FILE_NOT_FOUND ; 0
 27980                                  	; 18/03/2023
 27981 000037B7 31C0                    	xor	ax,ax
 27982                                  SEARCH_EXIT:
 27983                                  	;popf	; ** ; 18/03/2023
 27984 000037B9 5E                      	pop	si
 27985 000037BA 5F                      	pop	di
 27986 000037BB 5A                      	pop	dx
 27987 000037BC 59                      	pop	cx
 27988 000037BD C3                      	retn
 27989                                  
 27990                                  ; =============== S U B	R O U T	I N E =======================================
 27991                                  
 27992                                  ; SEARCH_FTYPE determines the type of a file by examining its extension.
 27993                                  ;
 27994                                  ; ENTRY:
 27995                                  ;   fbuf    --	dma buffer containing filename
 27996                                  ; EXIT:
 27997                                  ;   AX	    --	file code, as given in search header
 27998                                  ; NOTE(S):
 27999                                  ;   *	Implicit assumption that NULL == search_file_not_found
 28000                                  
 28001                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28002                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28003                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 28004                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3927h
 28005                                  SEARCH_FTYPE:
 28006 000037BE 57                      	push	di
 28007 000037BF 56                      	push	si
 28008                                  	;mov	ax,ANULL ; 0	; find the end of the filename
 28009                                  	; 18/02/2023
 28010 000037C0 31C0                    	xor	ax,ax ; ax = 0		
 28011                                  	;mov	di,offset TRANGROUP:fbuf.find_buf_pname
 28012                                  	;mov	di,FBUF_PNAME
 28013 000037C2 BF[15A4]                	mov	di,FBUF+FIND_BUF.PNAME ; FBUF+1Eh
 28014 000037C5 B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 28015 000037C8 FC                      	cld
 28016 000037C9 F2AE                    	repnz	scasb		; search for the terminating null
 28017 000037CB 7535                    	jnz	short FTYPE_EXIT
 28018                                  				; weird... no null byte at end
 28019 000037CD 83EF05                  	sub	di,5		; . + E + X + T + NULL
 28020                                  
 28021                                  	; Compare .COM
 28022                                  
 28023 000037D0 BE[3595]                	mov	si,comext ; ".COM"
 28024 000037D3 89F8                    	mov	ax,di
 28025 000037D5 A7                      	cmpsw
 28026 000037D6 7508                    	jnz	short FTYPE_EXE
 28027 000037D8 A7                      	cmpsw
 28028 000037D9 7505                    	jnz	short FTYPE_EXE
 28029                                  	;mov	ax,8
 28030 000037DB B80800                  	mov	ax,SEARCH_COM	; success!
 28031 000037DE EB22                    	jmp	short FTYPE_EXIT
 28032                                  
 28033                                  	; Compare .EXE
 28034                                  FTYPE_EXE:			; still looking... now for '.exe'
 28035 000037E0 89C7                    	mov	di,ax
 28036 000037E2 BE[3995]                	mov	si,exeext ; ".EXE"
 28037 000037E5 A7                      	cmpsw
 28038 000037E6 7508                    	jnz	short FTYPE_BAT
 28039 000037E8 A7                      	cmpsw
 28040 000037E9 7505                    	jnz	short FTYPE_BAT
 28041                                  	;mov	ax,4
 28042 000037EB B80400                  	mov	ax,SEARCH_EXE	; success!
 28043 000037EE EB12                    	jmp	short FTYPE_EXIT
 28044                                  
 28045                                  	; Compare .BAT
 28046                                  FTYPE_BAT:			; still looking... now for '.bat'
 28047 000037F0 89C7                    	mov	di,ax
 28048 000037F2 BE[3D95]                	mov	si,batext ; ".BAT"
 28049 000037F5 A7                      	cmpsw
 28050 000037F6 7508                    	jnz	short FTYPE_FAIL
 28051 000037F8 A7                      	cmpsw
 28052 000037F9 7505                    	jnz	short FTYPE_FAIL
 28053                                  	;mov	ax,2
 28054 000037FB B80200                  	mov	ax,SEARCH_BAT	; success!
 28055 000037FE EB02                    	jmp	short FTYPE_EXIT
 28056                                  
 28057                                  FTYPE_FAIL:			; file doesn't match what we need
 28058                                  	;mov	ax,ANULL ; 0
 28059                                  	; 18/03/2023
 28060 00003800 29C0                    	sub	ax,ax  ; ax = 0
 28061                                  FTYPE_EXIT:
 28062                                  	; 18/03/2023
 28063                                  	; MSDOS 6.0
 28064 00003802 803E[E39E]01            	cmp	byte [ext_entered],1
 28065                                  				;AN005; was an extension entered?
 28066 00003807 740A                    	jz	short FTYPE_DONE
 28067                                  				;AN005; no - exit
 28068                                  	;cmp	ax,ANULL	;AN005; was any match found
 28069 00003809 21C0                    	and	ax,ax  ; ax = 0 ?
 28070 0000380B 7406                    	jz	short FTYPE_DONE
 28071                                  				;AN005; no - exit
 28072 0000380D A2[E39E]                	mov	[ext_entered],al
 28073                                  				;AN005; save the match type found
 28074 00003810 B80800                  	mov	ax,SEARCH_COM	;AN005; send back best was found to stop search
 28075                                  FTYPE_DONE:
 28076 00003813 5E                      	pop	si
 28077 00003814 5F                      	pop	di
 28078 00003815 C3                      	retn
 28079                                  
 28080                                  ; =============== S U B	R O U T	I N E =======================================
 28081                                  
 28082                                  ; STRIP copies the source string (argv[0]) into the destination buffer,
 28083                                  ; replacing any extension with wildcards.
 28084                                  ;
 28085                                  ; ENTRY:
 28086                                  ;	BX	--	maximum length of destination buffer
 28087                                  ;	DS:SI	--	address of destination buffer
 28088                                  ;	argv[0] --	command name to be stripped
 28089                                  ; EXIT:
 28090                                  ;	CF	--	set if failure, clear if successful
 28091                                  ; NOTE(S):
 28092                                  
 28093                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28094                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28095                                  STRIP:
 28096 00003816 50                      	push	ax
 28097 00003817 53                      	push	bx
 28098 00003818 51                      	push	cx
 28099 00003819 52                      	push	dx
 28100 0000381A 57                      	push	di
 28101 0000381B 56                      	push	si
 28102                                  	;pushf	; ** ; 18/03/2023
 28103                                  		
 28104                                  	; 05/05/2023
 28105                                  	; MSDOS 6.0
 28106 0000381C C606[E39E]01            	mov	byte [ext_entered],1
 28107                                  				;AN005; assume no extension on file name
 28108                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28109                                  	;mov	dx,[ARG_ARGV]
 28110                                  	;mov	dx,ds:arg.argv[0].argpointer
 28111                                  				; save pointer to beginning of argstring
 28112                                  	;mov	dx,[ARGV0_ARGPOINTER]
 28113 00003821 8B16[2D9F]              	mov	dx,[ARG+ARGV_ELE.argpointer]
 28114                                  	;mov	di,ds:arg.argv[0].argstartel
 28115                                  				; beginning of last pathname element
 28116                                  	;mov	di,[ARGV0_ARGSTARTEL] ; beginning of last pathname element
 28117 00003825 8B3E[309F]              	mov	di,[ARG+ARGV_ELE.argstartel]
 28118 00003829 803D00                  	cmp	byte [di],0	; *STARTEL == NULL means no command
 28119 0000382C 743D                    	je	short STRIP_ERROR
 28120 0000382E 89D1                    	mov	cx,dx		; compute where end of argstring lies
 28121                                  	;add	cx,ds:arg.argv[0].arglen
 28122                                  	;add	cx,[ARGV0_ARGLEN]
 28123 00003830 030E[329F]              	add	cx,[ARG+ARGV_ELE.arglen]
 28124 00003834 29F9                    	sub	cx,di		; and then find length of last element
 28125 00003836 41                      	inc	cx		; include null as well
 28126 00003837 B02E                    	mov	al,'.'
 28127                                  	;mov	al,DOT		; let's find the filetype extension
 28128 00003839 FC                      	cld
 28129 0000383A F2AE                    	repnz	scasb		; wind up pointing to either null or dot
 28130                                  
 28131                                  	; 18/03/2023
 28132                                  	; MSDOS 6.0
 28133 0000383C E307                    	jcxz	PROCESS_EXT	;AN005; if no extension found, just continue
 28134 0000383E B000                    	mov	al,0 ; 18/03/2023
 28135                                  	;mov	byte [ext_entered],0
 28136 00003840 A2[E39E]                	mov	[ext_entered],al
 28137                                  				;AN005; we found an extension
 28138                                  	;;mov	al,ANULL	;AN005; continue scanning until the
 28139                                  	;mov	al,0
 28140 00003843 F2AE                    	repnz	scasb		;AN005; end of line is reached.
 28141                                  PROCESS_EXT:
 28142                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28143 00003845 89F9                    	mov	cx,di		; pointer to end of argstring yields
 28144 00003847 29D1                    	sub	cx,dx		; number of bytes to be copied
 28145 00003849 83EB04                  	sub	bx,4		; can argstring fit into dest. buffer?
 28146 0000384C 39D9                    	cmp	cx,bx
 28147 0000384E 7F1B                    	jg	short STRIP_ERROR
 28148                                  				; if not, we must have a bad pathname
 28149 00003850 89F7                    	mov	di,si		; destination buffer
 28150 00003852 89D6                    	mov	si,dx		; source is beginning of pathname
 28151 00003854 FC                      	cld
 28152 00003855 F3A4                    	rep	movsb		; SI=arg,DI=buffer,CX=argend-argbeg
 28153                                  
 28154                                  	; 18/03/2023
 28155                                  	; MSDOS 6.0
 28156 00003857 803E[E39E]01            	cmp	byte [ext_entered],1
 28157                                  				;AN005; if an extension was entered
 28158 0000385C 750A                    	jne	short SKIP_WILDS ; cf = 1 ; 12/06/2023
 28159                                  				;AN005;    don't set up wildcard ext.
 28160                                  
 28161                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28162 0000385E 4F                      	dec	di		; overwrite null or dot
 28163 0000385F AA                      	stosb			; with a dot
 28164 00003860 B03F                    	mov	al,'?'
 28165                                  	;mov	al,WILDCHAR	; now add wildcards
 28166 00003862 AA                      	stosb
 28167 00003863 AA                      	stosb
 28168 00003864 AA                      	stosb
 28169 00003865 B000                    	mov	al,0
 28170                                  	;mov	al,ANULL	; and a terminating null	
 28171 00003867 AA                      	stosb
 28172                                  SKIP_WILDS:
 28173                                  	;popf	; ** ; 18/03/2023
 28174 00003868 F8                      	clc
 28175 00003869 EB01                    	jmp	short STRIP_EXIT ; chill out...
 28176                                  
 28177                                  STRIP_ERROR:
 28178                                  	;popf	; ** ; 18/03/2023
 28179 0000386B F9                      	stc
 28180                                  STRIP_EXIT:
 28181 0000386C 5E                      	pop	si
 28182 0000386D 5F                      	pop	di
 28183 0000386E 5A                      	pop	dx
 28184 0000386F 59                      	pop	cx
 28185 00003870 5B                      	pop	bx
 28186 00003871 58                      	pop	ax
 28187 00003872 C3                      	retn
 28188                                  
 28189                                  ; =============== S U B	R O U T	I N E =======================================
 28190                                  
 28191                                  ; SAVE_ARGS attempts to preserve the existing argv[]/argvcnt/argbuffer
 28192                                  ;
 28193                                  ; structure in newly allocated memory. The argv[] structure is found at the
 28194                                  ; beginning of this area. The caller indicates how much extra space is
 28195                                  ; needed in the resulting structure; Save_Args returns a segment number and
 28196                                  ; an offset into that area, indicating where the caller may preserve its own
 28197                                  ; data. Note that <argvcnt> can be found at <offset-2>.
 28198                                  ; ENTRY:
 28199                                  ;   BX	    --	size (in bytes) of extra area to allocate
 28200                                  ; EXIT:
 28201                                  ;   AX	    --	segment of new area.
 28202                                  ;   CF	    --	set if unable to save a copy.
 28203                                  ; NOTE(S):
 28204                                  ;   1)	The allocated area will be AT LEAST the size requested -- since
 28205                                  ;	the underlying MSDOS call, <alloc> returns an integral number of
 28206                                  ;	paragraphs.
 28207                                  ;   2)	It is an error if MSDOS can't allocate AT LEAST as much memory
 28208                                  ;	as the caller of Save_Args requests.
 28209                                  ;   3)	AX is undefined if CF indicates an error.
 28210                                  
 28211                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28212                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28213                                  SAVE_ARGS:
 28214 00003873 53                      	push	bx
 28215 00003874 51                      	push	cx
 28216 00003875 52                      	push	dx
 28217 00003876 57                      	push	di
 28218 00003877 56                      	push	si
 28219 00003878 55                      	push	bp
 28220                                  	; 01/05/2023
 28221                                  	; 26/04/2023
 28222                                  	;pushf ; **
 28223                                  	;add	bx,1363		; space for arg structure, round up
 28224 00003879 81C35304                	add	bx,ARG_UNIT.SIZE+15 ; 1348+15
 28225 0000387D B104                    	mov	cl,4		; to paragraph size and convert
 28226 0000387F D3EB                    	shr	bx,cl		; size in bytes to size in paragraphs
 28227 00003881 B80048                  	mov	ax,ALLOC*256 ; 4800h
 28228 00003884 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 28229                                  			; BX = number of 16-byte paragraphs desired
 28230 00003886 7242                    	jc	short SAVE_ERROR ; ***
 28231 00003888 89C5                    	mov	bp,ax		; save segment id
 28232 0000388A 06                      	push	es		; save TRANGROUP address
 28233 0000388B 8EC0                    	mov	es,ax		; switch to new memory segment
 28234                                  	; assume es:nothing
 28235                                  	;mov	cx,1348		; get back structure size
 28236 0000388D B94404                  	mov	cx,ARG_UNIT.SIZE
 28237 00003890 31FF                    	xor	di,di		; destination is new memory area
 28238                                  	;mov	si,ARG_ARGV
 28239 00003892 BE[2D9F]                	mov	si,ARG		; source is arg structure
 28240 00003895 F3A4                    	rep	movsb		; move that sucker!
 28241                                  	;mov	cx,arg.argvcnt 	; adjust argv pointers
 28242                                  	;mov	cx,[ARG_ARGVCNT]
 28243 00003897 8B0E[EDA1]              	mov	cx,[ARG+ARG_UNIT.argvcnt]
 28244 0000389B 31C0                    	xor	ax,ax		; base address for argv_calc
 28245                                  
 28246                                  ;	Bugbug:	What did they mean by this?
 28247                                  ;	Note that the replacement line produces exactly the same code.
 28248                                  ;;	mov	SI, OFFSET TRANGROUP:arg.argbuf - OFFSET arg_unit.argbuf
 28249                                  ;	mov	SI, OFFSET TRANGROUP:arg
 28250                                  
 28251                                  	;mov	si,ARG_ARGV
 28252 0000389D BE[2D9F]                	mov	si,ARG	
 28253                                  SAVE_PTR_LOOP:
 28254 000038A0 49                      	dec	cx		; exhausted all args?
 28255 000038A1 7C24                    	jl	short SAVE_DONE
 28256 000038A3 89CB                    	mov	bx,cx		; get arg index and
 28257 000038A5 E8A0FC                  	call	argv_calc	; convert to a pointer
 28258                                  	;mov	dx,ds:arg.argv[bx].argpointer
 28259                                  	;mov	dx,[ARG_ARGV+bx]
 28260 000038A8 8B97[2D9F]              	mov	dx,[ARG+ARGV_ELE.argpointer+bx]
 28261 000038AC 29F2                    	sub	dx,si		; adjust argpointer
 28262                                  	;mov	es:argv[BX].argpointer,dx
 28263                                  	;mov	[es:bx+ARGV_ELE.argpointer],dx ; mov [es:bx+0],dx
 28264 000038AE 268917                  	mov	[es:bx],dx
 28265                                  	;mov	dx,ds:arg.argv[bx].argstartel
 28266                                  	;mov	dx,[ARGV0_ARGSTARTEL+bx]
 28267 000038B1 8B97[309F]              	mov	dx,[ARG+ARGV_ELE.argstartel+bx]
 28268 000038B5 29F2                    	sub	dx,si		; and adjust argstartel
 28269                                  	;mov	es:argv[bx].argstartel,dx
 28270                                  	;mov	[es:bx+3],dx
 28271 000038B7 26895703                	mov	[es:bx+ARGV_ELE.argstartel],dx
 28272                                  	;mov	dx,ds:arg.argv[bx].arg_ocomptr
 28273                                  	;mov	dx,[ARGV0_OCOMPTR+bx]
 28274 000038BB 8B97[369F]              	mov	dx,[ARG+ARGV_ELE.arg_ocomptr+bx]
 28275 000038BF 29F2                    	sub	dx,si		; and adjust arg_ocomptr
 28276                                  	;mov	es:argv[bx].arg_ocomptr,dx
 28277                                  	;mov	[es:bx+9],dx
 28278 000038C1 26895709                	mov	[es:bx+ARGV_ELE.arg_ocomptr],dx
 28279 000038C5 EBD9                    	jmp	short SAVE_PTR_LOOP
 28280                                  SAVE_DONE:
 28281 000038C7 07                      	pop	es		; back we go to TRANGROUP
 28282                                  	; assume es:nothing
 28283 000038C8 89E8                    	mov	ax,bp		; restore segment id
 28284                                  	; 26/04/2023
 28285                                  	; cf = 0 ; *
 28286                                  	;jmp	short SAVE_OK
 28287                                  
 28288                                  	; 26/04/2023
 28289                                  ;SAVE_ERROR:
 28290                                  ;	; 26/04/2023
 28291                                  ;	;popf ; **
 28292                                  ;	stc
 28293                                  ;	jmp	short SAVE_EXIT
 28294                                  
 28295                                  SAVE_OK:
 28296                                  	; 26/04/2023
 28297                                  	;popf ; **
 28298                                  	; 26/04/2023
 28299                                  	; cf = 0 ; *
 28300                                  	;clc
 28301                                  SAVE_EXIT:
 28302                                  SAVE_ERROR:	; 26/04/2023 (cf=1) ; ***
 28303 000038CA 5D                      	pop	bp
 28304 000038CB 5E                      	pop	si
 28305 000038CC 5F                      	pop	di
 28306 000038CD 5A                      	pop	dx
 28307 000038CE 59                      	pop	cx
 28308 000038CF 5B                      	pop	bx
 28309                                  answ_no:	; 26/04/2023
 28310 000038D0 C3                      	retn
 28311                                  
 28312                                  ;============================================================================
 28313                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (1)
 28314                                  ;============================================================================
 28315                                  ; 02/10/2018 - Retro DOS v3.0
 28316                                  
 28317                                  ; Title	COMMAND Language midifiable Code Transient
 28318                                  
 28319                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2843h
 28320                                  
 28321                                  ; =============== S U B	R O U T	I N E =======================================
 28322                                  
 28323                                  ; ****************************************************************
 28324                                  ; *
 28325                                  ; * ROUTINE:	 NOTEST2 - execution of DEL/ERASE command
 28326                                  ; *
 28327                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 28328                                  ; *		 user for Y/N if necessary. If an error occurs,
 28329                                  ; *		 set up an error message and go to CERROR.
 28330                                  ; *
 28331                                  ; * INPUT:	 FCB at 5ch set up with filename(s) entered
 28332                                  ; *		 Current directory set to entered directory
 28333                                  ; *
 28334                                  ; * OUTPUT:	 none
 28335                                  ; *
 28336                                  ; ****************************************************************
 28337                                  ;
 28338                                  ; ARE YOU SURE prompt when deleting *.*
 28339                                  
 28340                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28341                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28342                                  notest2:
 28343 000038D1 B90B00                  	mov	cx,11
 28344 000038D4 BE5D00                  	mov	si,FCB+1 ; 5Dh
 28345                                  ambspec:
 28346 000038D7 AC                      	lodsb
 28347 000038D8 3C3F                    	cmp	al,'?'
 28348 000038DA 7502                    	jne	short allfil
 28349 000038DC E2F9                    	loop	ambspec
 28350                                  allfil:
 28351                                  	; 19/03/2023
 28352                                  	;cmp	cx,0
 28353 000038DE 09C9                    	or	cx,cx
 28354 000038E0 752E                    	jnz	short noprmpt
 28355                                  askagn:	
 28356 000038E2 BA[5E90]                	mov	dx,SureMes_Ptr	; "Are you sure (Y/N)?"
 28357 000038E5 E8F51A                  	call	std_printf
 28358 000038E8 BE8000                  	mov	si,80h
 28359 000038EB 89F2                    	mov	dx,si
 28360 000038ED C7047800                	mov	word [si],120	; zero length
 28361                                  	;mov	ax,0C0Ah
 28362 000038F1 B80A0C                  	mov	ax,(STD_CON_INPUT_FLUSH<<8)|Std_Con_String_Input
 28363 000038F4 CD21                    	int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 28364                                  			; AL must be 01h,06h,07h,08h or 0Ah.
 28365 000038F6 AD                      	lodsw
 28366 000038F7 08E4                    	or	ah,ah
 28367 000038F9 74E7                    	jz	short askagn
 28368 000038FB E84FF0                  	call	scanoff
 28369                                  	; 19/03/2023
 28370                                  	; MSDOS 6.0
 28371 000038FE E80C02                  	call	char_in_xlat	; Convert to upper case
 28372                                  	;retc			; return if function not supported
 28373                                  	; 19/03/2023
 28374                                  	;jnc	short check_yn
 28375                                  ;answ_no:
 28376                                  	;retn
 28377 00003901 72CD                    	jc	short answ_no
 28378                                  
 28379                                  	; 19/03/2023
 28380                                  	; AL = 0 if it was (country depended) NO character
 28381                                  	; AL = 1 if it was (country depenced) YES character
 28382                                  
 28383                                  	; MSDOS 3.3
 28384                                  	;call	UPCONV
 28385                                  
 28386                                  	; 19/03/2023	
 28387                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28388                                  	;cmp	al,[CAPITAL_N]
 28389                                  	;jne	short CHECK_Y
 28390                                  	;retn
 28391                                  ;CHECK_Y:
 28392                                  	;cmp	al,[CAPITAL_Y]
 28393                                  	;pushf
 28394                                  	;call	CRLF2
 28395                                  	;popf
 28396                                  	;jne	short ASKAGN
 28397                                  
 28398                                  check_yn:
 28399                                  	; 19/03/2023
 28400                                  	;cmp	al,0	; NO character
 28401 00003903 08C0                    	or	al,al
 28402 00003905 74C9                    	jz	short answ_no
 28403                                  	;cmp	al,1	 ;YES character
 28404 00003907 FEC8                    	dec	al ; 1 -> 0 --> zf = 1
 28405 00003909 9C                      	pushf
 28406 0000390A E833F0                  	call	CRLF2
 28407 0000390D 9D                      	popf
 28408 0000390E 75D2                    	jnz	short askagn
 28409                                  noprmpt:
 28410 00003910 B413                    	mov	ah,FCB_Delete ; 13h
 28411 00003912 BA5C00                  	mov	dx,FCB ; 5Ch
 28412 00003915 CD21                    	int	21h	; DOS -	DELETE FILE via	FCB
 28413                                  			; DS:DX	-> FCB with filename field filled with
 28414                                  			; template for deletion ('?' wildcard allowed,but not '*')
 28415                                  			; Return: AL = 00h file	found,FFh file	not found
 28416 00003917 FEC0                    	inc	al
 28417 00003919 7403                    	jz	short eraerr
 28418                                  	; 26/04/2023
 28419                                  	;call	RestUDir
 28420                                  ;answ_no:
 28421                                  	;retn
 28422 0000391B E9D9EE                  	jmp	RestUDir ; 26/04/2023
 28423                                  
 28424                                  	; 19/03/2023
 28425                                  	; MSDOS 6.0
 28426                                  eraerr:
 28427                                  	;invoke	set_ext_error_msg
 28428                                  				;AN022; set up the extended error
 28429 0000391E E818E7                  	call	Set_Ext_Error_Msg
 28430 00003921 52                      	push	dx		;AN022; save message
 28431                                  	;invoke	RESTUDIR
 28432 00003922 E8D2EE                  	call	RestUDir
 28433 00003925 5A                      	pop	dx		;AN022; restore message
 28434                                  	
 28435 00003926 833E[448F]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 28436                                  				;AN022; convert no more files to
 28437 0000392B 7506                    	jne	short cerrorj2	;AN022;  file not found
 28438 0000392D C706[448F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2  
 28439                                  				;AN000; get message number in control block
 28440                                  cerrorj2:
 28441 00003933 E9B7F3                  	jmp	cerror
 28442                                  	
 28443                                  	; 19/03/2023
 28444                                  	; MSDOS 3.3
 28445                                  ;ERAERR:	
 28446                                  	;mov	ah,Set_DMA ; 1Ah
 28447                                  	;mov	dx,FCB ; 5Ch
 28448                                  	;int	21h		; DOS -	SET DISK TRANSFER AREA ADDRESS
 28449                                  	;			; DS:DX	-> disk	transfer buffer
 28450                                  	;mov	ah,Dir_Search_First ; 11h
 28451                                  	;int	21h		; DOS -	SEARCH FIRST USING FCB
 28452                                  	;			; DS:DX	-> FCB
 28453                                  	;push	ax
 28454                                  	;call	RESTUDIR
 28455                                  	;pop	ax
 28456                                  	;mov	dx,FNOTFOUNDPTR
 28457                                  	;inc	al
 28458                                  	;jz	short CERRORJ
 28459                                  	;mov	dx,ACCDENPTR
 28460                                  	;jmp	CERROR
 28461                                  
 28462                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28463                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:36D4h
 28464                                  
 28465                                  ; ****************************************************************
 28466                                  ; *
 28467                                  ; * ROUTINE:	 SLASHP_ERASE - execution of DEL/ERASE /P
 28468                                  ; *
 28469                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 28470                                  ; *		 user for Y/N where necessary. If an error occurs
 28471                                  ; *		 set up and error message and transfer control
 28472                                  ; *		 to CERROR.
 28473                                  ; *
 28474                                  ; * INPUT:	 FCB at 5Ch set up with filename(s) entered
 28475                                  ; *		 Current directory set to entered directory
 28476                                  ; *
 28477                                  ; * OUTPUT:	 none
 28478                                  ; *
 28479                                  ; ****************************************************************
 28480                                  
 28481                                  	; 19/03/2023
 28482                                  slashp_erase:				;AN000; entry point
 28483                                  	;invoke	build_dir_string	;AN000; set up current directory string for output
 28484 00003936 E88BE8                  	call	build_dir_string
 28485                                  
 28486 00003939 B41A                    	mov	ah,Set_DMA ; 1Ah	;AN000; issue set dta int 21h
 28487                                  	;mov	dx,offset trangroup:destdir
 28488 0000393B BA[D59C]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 28489 0000393E CD21                    	int	21h			;AN000;
 28490                                  
 28491                                  	;mov	ah,11h
 28492 00003940 B411                    	mov	ah,Dir_Search_First	;AN000; do dir search first int 21h
 28493 00003942 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000; use FCB at 5Ch for target
 28494 00003945 CD21                    	int	21h			;AN000;
 28495 00003947 FEC0                    	inc	al			;AN000; did an error occur
 28496                                  	;jz	short eraerr		;AN022; go to error exit
 28497                                  	; 26/04/2023
 28498 00003949 7502                    	jnz	short delete_prompt_loop
 28499                                  
 28500                                  	; 26/04/2023
 28501                                  stop_del:
 28502 0000394B EBD1                    	jmp	short eraerr		;AN022; go to error exit - need long jmp
 28503                                  
 28504                                  delete_prompt_loop:			;AN000;
 28505                                  	;mov	si,offset trangroup:destdir+1
 28506 0000394D BE[D69C]                	mov	si,DESTDIR+1		;AN000; set up FCB as source
 28507                                  	;mov	di,offset trangroup:dest
 28508 00003950 BF[A59C]                	mov	di,DEST			;AN000; set up dest as target
 28509 00003953 A0[D69B]                	mov	al,[DIRCHAR]		;AN000; store a "\" in the first char
 28510 00003956 AA                      	stosb				;AN000;   of DEST
 28511                                  	;invoke	FCB_TO_ASCZ		;AN000; convert filename from FCB to ASCIIZ string
 28512 00003957 E812F0                  	call	FCB_TO_ASCZ
 28513                                  
 28514                                  slashp_askagn:				;AN000;
 28515 0000395A E8E3EF                  	call	CRLF2			;AN000; print out carriage return, line feed
 28516                                  	;mov	dx,offset trangroup:bwdbuf
 28517 0000395D BA[189D]                	mov	dx,BWDBUF		;AN000; print out current directory string
 28518 00003960 89D3                    	mov	bx,dx			;AN000; get string pointer in bx
 28519 00003962 807F0300                	cmp	byte [bx+3],END_OF_LINE_OUT ; 0
 28520                                  					;AN000; see if only D:\,0
 28521 00003966 7504                    	jnz	short not_del_root	;AN000; no continue
 28522 00003968 C6470200                	mov	byte [bx+2],END_OF_LINE_OUT ; 0
 28523                                  					;AN000; yes, get rid of \ ;
 28524                                  not_del_root:				;AN000;
 28525 0000396C 8916[7F9D]              	mov	[string_ptr_2],dx 	;AN000;
 28526                                  	;mov	dx,offset trangroup:string_buf_ptr
 28527 00003970 BA[4C91]                	mov	dx,string_buf_ptr	;AN000;
 28528                                  	;invoke	std_printf		;AN000;
 28529 00003973 E8671A                  	call	std_printf
 28530                                  	;mov	dx,offset trangroup:dest
 28531 00003976 BA[A59C]                	mov	dx,DEST			;AN000; print out file name string
 28532 00003979 8916[7F9D]              	mov	[string_ptr_2],dx 	;AN000;
 28533                                  	;mov	dx,offset trangroup:string_buf_ptr
 28534 0000397D BA[4C91]                	mov	dx,string_buf_ptr	;AN000;
 28535                                  	;invoke	std_printf		;AN000;
 28536 00003980 E85A1A                  	call	std_printf
 28537                                  	;mov	dx,offset trangroup:Del_Y_N_Ptr
 28538 00003983 BA[5B90]                	mov	dx,Del_Y_N_Ptr		;AN000; issue ", Delete (Y/N)?" message
 28539                                  	;invoke	std_printf		;AN000;
 28540 00003986 E8541A                  	call	std_printf
 28541                                  
 28542                                  ;;M029	mov	si,80H			;AN000; set up buffer for input
 28543                                  ;;M029	mov	dx,si			;AN000;
 28544                                  ;;M029	mov	word ptr [si],combuflen ;AN000;
 28545                                  ;;M029	mov	ax,(std_con_input_flush shl 8) or std_con_string_input	;AN000;
 28546                                  ;;M029	int	21h			;AN000; get input from the user
 28547                                  ;;M029	lodsw				;AN000;
 28548                                  ;;M029	or	ah,ah			;AN000; was a character entered?
 28549                                  ;;M029	jz	short slashp_askagn	;AN000; no - ask again
 28550                                  ;;M029	invoke	scanoff 		;AN000; scan off leading delimiters
 28551                                  
 28552                                  ;	Get a single character input.
 28553                                  
 28554                                  	;;mov	ax,(STD_CON_INPUT_FLUSH shl 8) or STD_CON_INPUT	;M029
 28555                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT
 28556 00003989 B8010C                  	mov	ax,0C01h
 28557 0000398C CD21                    	int	21h			;M029
 28558                                  
 28559 0000398E E87C01                  	call	char_in_xlat		;AN000; yes - upper case it
 28560                                  	;retc				;AN000; return if function not supported
 28561                                  	; 19/03/2023
 28562 00003991 7301                    	jnc	short slashp_check_yn
 28563                                  slashp_ans_no:
 28564 00003993 C3                      	retn
 28565                                  
 28566                                  slashp_check_yn:
 28567                                  	; 19/03/2023
 28568                                  	; AL = 0 if it was (country depended) NO character
 28569                                  	; AL = 1 if it was (country depenced) YES character
 28570                                  
 28571                                  	;cmp	al,capital_n		;AN000; was it no?
 28572                                  	;cmp	al,0
 28573 00003994 20C0                    	and	al,al ; 0
 28574 00003996 7420                    	jz	short next_del_file	;AN000; yes - don't delete file
 28575                                  	;cmp	al,capital_y		;AN000; was it yes?
 28576                                  	;cmp	al,1
 28577 00003998 FEC8                    	dec	al  ; 1-> 0 --> zf = 1
 28578                                  	;jz	short delete_this_file	;AN000; yes - delete the file
 28579                                  	;jmp	short slashp_askagn	;AN000; it was neither - ask again
 28580                                  	; 19/03/2023
 28581 0000399A 75BE                    	jnz	short slashp_askagn
 28582                                  
 28583                                  delete_this_file:			;AN000;
 28584 0000399C B413                    	mov	ah,FCB_Delete ; 13h	;AN000; delete the file
 28585                                  	;mov	dx,offset trangroup:destdir
 28586 0000399E BA[D59C]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 28587 000039A1 CD21                    	int	21h			;AN000;
 28588 000039A3 FEC0                    	inc	al			;AN000; did an error occur?
 28589 000039A5 7511                    	jnz	short next_del_file	;AN000; no - get next file
 28590                                  ;
 28591                                  ;M041; Begin changes
 28592                                  ; We got an error deleting the file. If this is access denied, we can go on
 28593                                  ;to the next file after printing an error message.
 28594                                  ;
 28595                                  	;invoke	Get_ext_error_number	;see what error we got
 28596 000039A7 E89FE6                  	call	get_ext_error_number
 28597 000039AA 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 28598                                  					;is it access denied?
 28599 000039AD 759C                    	jne	short stop_del		;no, some other error
 28600                                  	;invoke	CrLf2			;print a CR-LF
 28601 000039AF E88EEF                  	call	CRLF2
 28602                                  	;invoke set_ext_error_msg	;error message
 28603 000039B2 E884E6                  	call	Set_Ext_Error_Msg
 28604                                  	;invoke	std_eprintf		;"Access denied"
 28605 000039B5 E81D1A                  	call	std_eprintf
 28606                                  	; 26/04/2023
 28607                                  	;jmp	short next_del_file	;try next file
 28608                                  	; 26/04/2023
 28609                                  ;stop_del:
 28610                                  ;;
 28611                                  ;;M041; End changes
 28612                                  ;;
 28613                                  ;	jmp	eraerr			;AN022; go to error exit - need long jmp
 28614                                  
 28615                                  next_del_file:				;AN000;
 28616                                  ;
 28617                                  ; M050 - begin
 28618                                  ; 	Norton Utilities 5.0 has a bug. DiskMon when invoked
 28619                                  ;       with /protect+ and /light+ makes it intercept all
 28620                                  ;       deletes. This hook does not save and restore the DTA correctly.
 28621                                  ;       They save the DWORD in a WORD by mistake! They save both the
 28622                                  ;       segment and the offset in the SAME variable (WORD)!!!
 28623                                  ;
 28624 000039B8 B41A                    	mov	ah,Set_DMA ; 1Ah
 28625                                  	;mov	dx,offset trangroup:destdir
 28626 000039BA BA[D59C]                	mov	dx,DESTDIR
 28627 000039BD CD21                    	int	21h
 28628                                  ;
 28629                                  ; M050 - end
 28630                                  
 28631 000039BF B412                    	mov	ah,Dir_Search_Next ; 12h
 28632                                  					;AN000; search for another file
 28633 000039C1 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000;
 28634 000039C4 CD21                    	int	21h			;AN000;
 28635 000039C6 FEC0                    	inc	al			;AN000; was a file found?
 28636                                  	;jz	short slash_p_exit	;AN000; no - exit
 28637                                  	;jmp	delete_prompt_loop	;AN000; yes - continue (need long jump)
 28638                                  	; 26/04/2023
 28639 000039C8 7583                    	jnz	short delete_prompt_loop
 28640                                  
 28641                                  slash_p_exit:
 28642                                  	;invoke	get_ext_error_number	;AN022; get the extended error number
 28643 000039CA E87CE6                  	call	get_ext_error_number
 28644 000039CD 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	;AN022; was error file not found?
 28645 000039D0 7403                    	jz	short good_erase_exit 	;AN022; yes - clean exit
 28646 000039D2 E9A9E3                  	jmp	extend_setup		;AN022; go issue error message
 28647                                  
 28648                                  good_erase_exit:
 28649                                  	;invoke	restudir		;AN000; we're finished - restore user's dir
 28650 000039D5 E81FEE                  	call	RestUDir
 28651                                  	;call	CRLF2			;AN000; print out carriage return, line feed
 28652                                  	;retn				;AN000; exit
 28653                                  	; 19/03/2023
 28654 000039D8 E965EF                  	jmp	CRLF2
 28655                                  
 28656                                  ; =============== S U B	R O U T	I N E =======================================
 28657                                  
 28658                                  ; ECHO, BREAK, and VERIFY commands. Check for "ON" and "OFF"
 28659                                  
 28660                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28661                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28662                                  _ECHO:
 28663 000039DB E89900                  	call	ON_OFF
 28664 000039DE 7212                    	jb	short DOEMES
 28665 000039E0 8E1E[D19B]              	mov	ds,[RESSEG]
 28666 000039E4 7506                    	jnz	short ECH_OFF
 28667 000039E6 800E[9D02]01            	or	byte [EchoFlag],1
 28668 000039EB C3                      	retn
 28669                                  
 28670                                  ECH_OFF:
 28671 000039EC 8026[9D02]FE            	and	byte [EchoFlag],0FEh
 28672 000039F1 C3                      	retn
 28673                                  
 28674                                  	; 19/03/2023
 28675                                  	; MSDOS 6.0 (& MSDOS 5.0)
 28676                                  ;CERRORJ:
 28677                                  	;jmp	cerror
 28678                                  
 28679                                  ; There was no discrenable ON or OFF after the ECHO. If there is nothing but
 28680                                  ; delimiters on the command line, we issue the ECHO is ON/OFF message.
 28681                                  
 28682                                  DOEMES:
 28683                                  	; 19/03/2023
 28684                                  	; MSDOS 6.0
 28685                                  	;cmp	cl,0		;AC000; was anything on the line?
 28686 000039F2 20C9                    	and	cl,cl
 28687 000039F4 7409                    	jz	short PECHO	; just display current state.
 28688 000039F6 BA8200                  	mov	dx,82h		; Skip one char after "ECHO"
 28689 000039F9 E89DEF                  	call	CRPRINT
 28690 000039FC E941EF                  	jmp	CRLF2
 28691                                  
 28692                                  	; 19/03/2023
 28693                                  	; MSDOS 3.3
 28694                                  	;call	MOVE_TO_FIRST_ARG
 28695                                  	;jz	short PECHO
 28696                                  	;mov	dx,82h
 28697                                  	;call	CRPRINT
 28698                                  	;jmp	CRLF2
 28699                                  
 28700                                  PECHO:
 28701                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28702 000039FF 8E1E[D19B]              	mov	ds,[RESSEG]
 28703 00003A03 8A1E[9D02]              	mov	bl,[EchoFlag]
 28704 00003A07 0E                      	push	cs
 28705 00003A08 1F                      	pop	ds
 28706 00003A09 80E301                  	and	bl,1
 28707 00003A0C BA[EC90]                	mov	dx,EchoMes_Ptr
 28708 00003A0F EB24                    	jmp	short PYN
 28709                                  
 28710                                  ; ---------------------------------------------------------------------------
 28711                                  
 28712                                  	; 19/03/2023
 28713                                  	; MSDOS 3.3
 28714                                  CERRORJ:
 28715 00003A11 E9D9F2                  	jmp	cerror
 28716                                  
 28717                                  ; =============== S U B	R O U T	I N E =======================================
 28718                                  
 28719                                  	; 19/03/2023
 28720                                  	; MSDOS 3.3
 28721                                  ;MOVE_TO_FIRST_ARG:
 28722                                  	;mov	si,81h
 28723                                  	;call	SCANOFF
 28724                                  	;cmp	al,0Dh
 28725                                  	;retn
 28726                                  
 28727                                  ; =============== S U B	R O U T	I N E =======================================
 28728                                  
 28729                                  CNTRLC:
 28730 00003A14 E86000                  	call	ON_OFF
 28731 00003A17 B80133                  	mov	ax,(Set_CTRL_C_Trapping<<8)|1 ; 3301h
 28732 00003A1A 720C                    	jc	short PCNTRLC
 28733 00003A1C 7505                    	jnz	short CNTRLC_OFF
 28734 00003A1E B201                    	mov	dl,1
 28735 00003A20 CD21                    	int	21h	; DOS -	EXTENDED CONTROL-BREAK CHECKING
 28736                                  			; AL = 00h get state / 01h set state / 02h set AND get
 28737                                  			; DL = 00h for OFF or 01h for ON
 28738 00003A22 C3                      	retn
 28739                                  
 28740                                  ; ---------------------------------------------------------------------------
 28741                                  
 28742                                  CNTRLC_OFF:
 28743 00003A23 30D2                    	xor	dl,dl
 28744 00003A25 CD21                    	int	21h		; Turn off ^C check
 28745 00003A27 C3                      	retn
 28746                                  
 28747                                  ; ---------------------------------------------------------------------------
 28748                                  
 28749                                  PCNTRLC:
 28750                                  	; 19/03/2023
 28751                                  	; MSDOS 6.0
 28752                                  	;cmp	cl,0		;AC000; rest of line blank?
 28753 00003A28 08C9                    	or	cl,cl
 28754 00003A2A 75E5                    	jnz	short CERRORJ 	; no, oops!
 28755                                  
 28756                                  	; 19/03/2023
 28757                                  	; MSDOS 3.3
 28758                                  	;call	MOVE_TO_FIRST_ARG
 28759                                  	;jnz	short CERRORJ
 28760                                  ;pccont:
 28761                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28762 00003A2C 30C0                    	xor	al,al
 28763 00003A2E CD21                    	int	21h		; get Ctrl-Break state (ah=33h)
 28764 00003A30 88D3                    	mov	bl,dl
 28765 00003A32 BA[D090]                	mov	dx,CtrlcMes_Ptr
 28766                                  
 28767                                  ; ---------------------------------------------------------------------------
 28768                                  
 28769                                  PYN:	; write "ON" or "OFF" state 
 28770                                  
 28771                                  	; 26/04/2023
 28772                                  	; 19/03/2023
 28773                                  	; MSDOS 3.3
 28774                                  	;call	STD_PRINTF
 28775                                  	;mov	dx,ONMES_PTR	;AC000; get ON pointer
 28776                                  	;or	bl,bl
 28777                                  	;jnz	short PRINTVAL
 28778                                  	;mov	dx,OFFMES_PTR	;AC000; get OFF pointer
 28779                                  	
 28780                                  	; 26/04/2023
 28781                                  	; 19/03/2023
 28782                                  	; MSDOS 6.0
 28783 00003A35 BE[FD90]                	mov	si,ONMES_PTR
 28784 00003A38 08DB                    	or	bl,bl
 28785 00003A3A 7503                    	jnz	short PRINTVAL
 28786 00003A3C BE[FA90]                	mov	si,OFFMES_PTR
 28787                                  PRINTVAL:
 28788                                  	; 19/03/2023
 28789                                  	; MSDOS 3.3
 28790                                  	;jmp	STD_PRINTF
 28791                                  
 28792                                  	; 19/03/2023
 28793                                  	; MSDOS 6.0
 28794 00003A3F 52                      	push	dx		;AN000; save offset of message block
 28795 00003A40 89D3                    	mov	bx,dx		;AN000; save offset value
 28796 00003A42 AD                      	lodsw			;AN000; get message number of on or off
 28797 00003A43 B6FF                    	mov	dh,util_msg_class ; -1 ; 0FFh
 28798                                  				;AN000; this is a utility message
 28799 00003A45 E87A1A                  	call	TSYSGETMSG	;AN000; get the address of the message
 28800                                  	;add	bx,5
 28801 00003A48 83C305                  	add	bx,Ptr_off_pos	;AN000; point to offset of ON/OFF
 28802                                  	
 28803 00003A4B 8937                    	mov	[bx],si		;AN000; put the offset in the message block
 28804 00003A4D 5A                      	pop	dx		;AN000; get message back
 28805 00003A4E E88C19                  	call	std_printf	;AC000; go print message
 28806 00003A51 C7070000                	mov	word [bx],0	;AN000; zero out message pointer
 28807 00003A55 C3                      	retn			;AN000; exit
 28808                                  
 28809                                  ; =============== S U B	R O U T	I N E =======================================
 28810                                  
 28811                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.CO
 28812                                  VERIFY:
 28813 00003A56 E81E00                  	call	ON_OFF
 28814 00003A59 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 28815 00003A5C 720A                    	jc	short PVERIFY
 28816 00003A5E 7503                    	jnz	short VER_OFF
 28817 00003A60 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 28818                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 28819 00003A62 C3                      	retn
 28820                                  
 28821                                  ; ---------------------------------------------------------------------------
 28822                                  
 28823                                  VER_OFF:
 28824 00003A63 FEC8                    	dec	al
 28825 00003A65 CD21                    	int	21h		; Turn off verify after write
 28826 00003A67 C3                      	retn
 28827                                  
 28828                                  ; ---------------------------------------------------------------------------
 28829                                  
 28830                                  PVERIFY:
 28831                                  	; 19/03/2023
 28832                                  	; MSDOS 6.0
 28833                                  	;cmp	cl,0		;AC000; is rest of line blank?
 28834 00003A68 20C9                    	and	cl,cl
 28835 00003A6A 75A5                    	jnz	short CERRORJ 	; nope...
 28836                                  
 28837                                  	 ;19/03/2023
 28838                                  	; MSDOS 3.3
 28839                                  	;call	MOVE_TO_FIRST_ARG
 28840                                  	;jnz	short CERRORJ
 28841                                  
 28842 00003A6C B454                    	mov	ah,Get_Verify_On_Write ; 54h
 28843 00003A6E CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 28844                                  				; Return: AL = 00h if flag OFF
 28845                                  				; AL = 01h if flag ON
 28846 00003A70 88C3                    	mov	bl,al
 28847 00003A72 BA[DE90]                	mov	dx,VeriMes_Ptr
 28848 00003A75 EBBE                    	jmp	short PYN
 28849                                  
 28850                                  ; =============== S U B	R O U T	I N E =======================================
 28851                                  
 28852                                  ; ****************************************************************
 28853                                  ; *
 28854                                  ; * ROUTINE:	 ON_OFF
 28855                                  ; *
 28856                                  ; * FUNCTION:	 Parse the command line for an optional ON or
 28857                                  ; *		 OFF string for the BREAK, VERIFY, and ECHO
 28858                                  ; *		 routines.
 28859                                  ; *
 28860                                  ; * INPUT:	 command line at offset 81H
 28861                                  ; *		 PARSE_BREAK control block
 28862                                  ; *
 28863                                  ; * OUTPUT:	 If carry is clear
 28864                                  ; *		    If ON is found
 28865                                  ; *		       Zero flag set
 28866                                  ; *		    If OFF is found
 28867                                  ; *		       Zero flag clear
 28868                                  ; *		 If carry set
 28869                                  ; *		    If nothing on command line
 28870                                  ; *		       CL set to zero
 28871                                  ; *		    If error
 28872                                  ; *		       CL contains error value from parse
 28873                                  ; *
 28874                                  ; ****************************************************************
 28875                                  
 28876                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28877                                  ON_OFF:
 28878 00003A77 BE8100                  	mov	si,81h
 28879                                  
 28880                                  	; 19/03/2023
 28881                                  	; MSDOS 3.3
 28882                                  	;call	SCANOFF		; scan off leading blanks & equal
 28883                                  	;cmp	al,0Dh		; are we at end of line?
 28884                                  	;je	short BAD_ONF	; yes, return error
 28885                                  	;lodsw
 28886                                  	;or	ax,2020h	; convert to lowercase
 28887                                  	;cmp	ax,6E6Fh ;'on'
 28888                                  	;je	short ON_CHECK
 28889                                  	;cmp	ax,666Fh ;'of'
 28890                                  	;jne	short BAD_ONF
 28891                                  	;lodsb
 28892                                  	;or	al,20h		; convert to lowercase		
 28893                                  	;cmp	al,66h	 ; 'f'
 28894                                  	;jne	short BAD_ONF	
 28895                                  	;or	al,66h ; or al,'f'
 28896                                  	;jmp	short OFF_CHECK
 28897                                  ;ON_CHECK:
 28898                                  	;xor	al,al
 28899                                  ;OFF_CHECK:
 28900                                  	;lahf
 28901                                  	;mov	bx,ax
 28902                                  	;call	SCANOFF		; scan off leading blanks & equal
 28903                                  	;cmp	al,0Dh		; are we at end of line?	
 28904                                  	;jne	short BAD_ONF	; no, return error
 28905                                  	;mov	ax,bx
 28906                                  	;sahf
 28907                                  	;clc
 28908                                  	;retn
 28909                                  
 28910                                  	; 19/03/2023
 28911                                  	; MSDOS 6.0
 28912                                  scan_on_off:			;AN032; scan off leading blanks & equal
 28913 00003A7A AC                      	lodsb			;AN032; get a char
 28914                                  	;cmp	al,blank	;AN032; if whitespace
 28915 00003A7B 3C20                    	cmp	al,20h
 28916 00003A7D 74FB                    	je	short scan_on_off
 28917                                  				;AN032;    keep scanning
 28918 00003A7F 3C09                    	cmp	al,tab_chr	;AN032; if tab
 28919                                  	;cmp	al,09h
 28920 00003A81 74F7                    	je	short scan_on_off
 28921                                  				;AN032;    keep scanning
 28922                                  	;cmp	al,equal_chr	;AN032; if equal char
 28923 00003A83 3C3D                    	cmp	al,'=' ; 3Dh
 28924 00003A85 7401                    	je	short parse_on_off
 28925                                  				;AN032;    start parsing
 28926 00003A87 4E                      	dec	si		;AN032; if none of above - back up
 28927                                  
 28928                                  parse_on_off:			;AN032;    and start parsing
 28929 00003A88 BF[8295]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 28930 00003A8B 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 28931 00003A8D 31D2                    	xor	dx,dx		;AN000;
 28932 00003A8F E87A0E                  	call	cmd_parse	;AC000; call parser
 28933                                  	;cmp	ax,-1 ; 0FFFFh
 28934 00003A92 83F8FF                  	cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 28935 00003A95 742E                    	je	short BADONF	;AC000; yes, return error
 28936                                  	;cmp	ax,RESULT_NO_ERROR ;AN000; did an error occur
 28937                                  	;cmp	ax,0
 28938 00003A97 21C0                    	and	ax,ax ; ax = 0 ?
 28939 00003A99 7404                    	jz	short on_off_there
 28940                                  				;AN000; no - continue
 28941 00003A9B 89C1                    	mov	cx,ax		;AN000; yes - set cl to error code
 28942 00003A9D EB26                    	jmp	short BADONF	;AN000; return error
 28943                                  
 28944                                  on_off_there:
 28945 00003A9F 803E[CAA5]FF            	cmp	byte [PARSE1_CODE],-1 ; 0FFh
 28946                                  				;AN014; was a valid positional present?
 28947 00003AA4 7505                    	jnz	short good_on_off
 28948                                  				;AN014; yes - continue
 28949 00003AA6 B90A00                  	mov	cx,BadParm_Ptr	;AN014; something other than ON/OFF
 28950                                  	;mov	cx,10 ; 0Ah
 28951 00003AA9 EB1A                    	jmp	short BADONF	;AN014; return error
 28952                                  
 28953                                  good_on_off:			;AN014;
 28954 00003AAB 31C0                    	xor	ax,ax		;AC000; set up return code for
 28955 00003AAD 0A06[CAA5]              	or	al,[PARSE1_CODE]
 28956                                  				;AC000;    ON or OFF in AX
 28957 00003AB1 9C                      	pushf			;AN000; save flags
 28958 00003AB2 BF[8295]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 28959 00003AB5 31D2                    	xor	dx,dx		;AN000;
 28960 00003AB7 E8520E                  	call	cmd_parse	;AN000; call parser
 28961 00003ABA 83F8FF                  	cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 28962                                  	;cmp	ax,-1 ; 0FFFFh
 28963 00003ABD 7503                    	jne	short BADONF_flags
 28964                                  				;AN000; NO, return error
 28965 00003ABF 9D                      	popf			;AN000; restore flags
 28966 00003AC0 F8                      	clc			;AC000; no error
 28967                                  	;jmp	short on_off_end
 28968                                  				;AN000; return to caller
 28969                                  	; 26/04/2023
 28970 00003AC1 C3                      	retn
 28971                                  
 28972                                  BADONF_flags:
 28973 00003AC2 89C1                    	mov	cx,ax
 28974 00003AC4 9D                      	popf
 28975                                  
 28976                                  ; ---------------------------------------------------------------------------
 28977                                  
 28978                                  ; No discernable ON or OFF has been found. Put an error message pointer in DX
 28979                                  ; and return the error
 28980                                  
 28981                                  BADONF:
 28982 00003AC5 BA[AD90]                	mov	dx,bad_on_off_ptr
 28983 00003AC8 F9                      	stc
 28984                                  on_off_end:
 28985 00003AC9 C3                      	retn
 28986                                  
 28987                                  ;============================================================================
 28988                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (2)
 28989                                  ;============================================================================
 28990                                  ; 02/10/2018 - Retro DOS v3.0
 28991                                  
 28992                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29BFh
 28993                                  
 28994                                  ; =============== S U B	R O U T	I N E =======================================
 28995                                  
 28996                                  	; 20/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28997                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3876h
 28998                                  	
 28999                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29000                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3E20h
 29001                                  PRINT_DATE:
 29002                                  	; 20/03/2023
 29003                                  	; MSDOS 3.3
 29004                                  	;push	es
 29005                                  	;push	di
 29006                                  	;push	cs
 29007                                  	;pop	es
 29008                                  	;mov	di,ARG_BUF
 29009                                  	;mov	ah,Get_Date ; 2Ah
 29010                                  	;int	21h	; DOS -	GET CURRENT DATE
 29011                                  	;		; Return: DL = day,DH = month,	CX = year
 29012                                  	;		; AL = day of the week (0=Sunday,1=Monday,etc.)
 29013                                  	;cbw
 29014                                  	;call	GETDATE
 29015                                  	;call	P_DATE
 29016                                  	;xor	al,al
 29017                                  	;stosb
 29018                                  	;mov	dx,ARG_BUF_PTR
 29019                                  	;call	STD_PRINTF
 29020                                  		; 20/03/2023 (MSDOS 3.3 COMMAND.COM - TRANGROUP:29DAh)
 29021                                  	;pop	es ; !!??!! 
 29022                                  	;pop	di
 29023                                  	;retn
 29024                                  
 29025                                  	; 20/03/2023
 29026                                  	; MSDOS 6.0
 29027 00003ACA 06                      	push	es
 29028 00003ACB 57                      	push	di
 29029 00003ACC 0E                      	push	cs
 29030 00003ACD 07                      	pop	es
 29031 00003ACE E81300                  	call	GetDate 		; get date
 29032 00003AD1 86F2                    	xchg	dh,dl			;AN000; switch month & day
 29033 00003AD3 890E[8391]              	mov	[promptDat_yr],cx 	;AC000; put year into message control block
 29034 00003AD7 8916[8591]              	mov	[promptDat_moday],dx	;AC000; put month and day into message control block
 29035 00003ADB BA[7391]                	mov	dx,promptdat_ptr	;AC000; set up message for output
 29036 00003ADE E8FC18                  	call	std_printf
 29037                                  	;AD061; mov word [promptDat_yr],0 ;AC000; reset year, month and day
 29038                                  	;AD061; mov word [promptDat_moday],0 ;AC000; pointers in control block
 29039 00003AE1 5F                      	pop	di			;AC000; restore di,es
 29040 00003AE2 07                      	pop	es			;AC000;
 29041 00003AE3 C3                      	retn
 29042                                  
 29043                                  ; ---------------------------------------------------------------------------
 29044                                  
 29045                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29046                                  
 29047                                  ;GETDATE:
 29048                                  	; 21/03/2023
 29049                                  	; MSDOS 3.3
 29050                                  	;mov	si,ax
 29051                                  	;shl	si,1
 29052                                  	;add	si,ax
 29053                                  	;add	si,WEEKTAB ; "SunMonTueWedThuFriSat"
 29054                                  	;mov	bx,cx
 29055                                  	;mov	cx,3
 29056                                  	;rep	movsb
 29057                                  	;mov	al,' '
 29058                                  	;stosb
 29059                                  	;retn
 29060                                  
 29061                                  	; 21/03/2023
 29062                                  	; MSDOS 6.0
 29063                                  
 29064                                  ; Do GET DATE system call and set up 3 character day of week in ARG_BUF
 29065                                  ; for output. Date will be returned in CX,DX.
 29066                                  
 29067                                  GetDate:
 29068 00003AE4 BF[73A3]                	mov	di,Arg_Buf		;AC000; target for day of week
 29069 00003AE7 B42A                    	mov	ah,Get_Date ;2Ah	;AC000; get current date
 29070 00003AE9 CD21                    	int	21h			;AC000; Get date in CX:DX
 29071 00003AEB 98                      	cbw				;AC000;
 29072 00003AEC 51                      	push	cx			;AN000; save date returned in
 29073 00003AED 52                      	push	dx			;AN000;  CX:DX
 29074 00003AEE 89C6                    	mov	si,ax
 29075 00003AF0 D1E6                    	shl	si,1
 29076 00003AF2 01C6                    	add	si,ax			; SI=AX*3
 29077 00003AF4 89F1                    	mov	cx,si			;AN000; save si
 29078 00003AF6 A1[3690]                	mov	ax,[WeekTab]		;AN000; get message number of weektab
 29079 00003AF9 B6FF                    	mov	dh,util_msg_class ;0FFh	;AN000; this is a utility message
 29080 00003AFB 57                      	push	di			;AN000; save argument buffer
 29081 00003AFC E8C319                  	call	TSYSGETMSG		;AN000; get the address of the message
 29082 00003AFF 5F                      	pop	di			;AN000; retrieve argument buffer
 29083 00003B00 01CE                    	add	si,cx			;AC000; get day of week
 29084 00003B02 B90300                  	mov	cx,3
 29085 00003B05 F3A4                      	rep	movsb
 29086 00003B07 B000                    	mov	al,END_OF_LINE_OUT ; 0	;AC000; terminate the string
 29087 00003B09 AA                      	stosb
 29088 00003B0A 5A                      	pop	dx			;AN000; get back date
 29089 00003B0B 59                      	pop	cx			;AN000;
 29090 00003B0C C3                      	retn
 29091                                  
 29092                                  ; =============== S U B	R O U T	I N E =======================================
 29093                                  
 29094                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29095                                  
 29096                                  	; MSDOS 6.0
 29097                                  
 29098                                  ; This routine determines whether the character in AL is a
 29099                                  ; Yes or No character. On return, if AL=0, the character is
 29100                                  ; No, if AL=1, the character is Yes.
 29101                                  
 29102                                  ;	assume	ds:trangroup
 29103                                  
 29104                                  char_in_xlat:	; proc	near
 29105                                  	; 21/03/2023
 29106 00003B0D 88C2                    	mov	dl,al			;AC000; get character into DX
 29107 00003B0F 30F6                    	xor	dh,dh			;AC000;
 29108                                  	;mov	ax,(GetExtCntry<<8)+35	;AC000; Yes/No char call
 29109 00003B11 B82365                  	mov	ax,6523h
 29110 00003B14 CD21                    	int	21h			;AC000;
 29111 00003B16 C3                      	retn
 29112                                  
 29113                                  ;char_in_xlat	endp
 29114                                  
 29115                                  ;============================================================================
 29116                                  ; TENV.ASM, MSDOS 6.0, 1991
 29117                                  ;============================================================================
 29118                                  ; 02/10/2018 - Retro DOS v3.0
 29119                                  
 29120                                  ;	Environment utilities and misc. routines
 29121                                  
 29122                                  ; MSDOS 6.0
 29123                                  ; ****************************************************************
 29124                                  ; *
 29125                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 29126                                  ; *
 29127                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 29128                                  ; *		 the character in AL from the file upper case table
 29129                                  ; *		 in DOS if character if above  ascii 128, else
 29130                                  ; *		 subtracts 20H if between "a" and "z".
 29131                                  ; *
 29132                                  ; * INPUT:	 AL	      char to be upper cased
 29133                                  ; *		 FUCASE_ADDR  set to the file upper case table
 29134                                  ; *
 29135                                  ; * OUTPUT:	 AL	      upper cased character
 29136                                  ; *
 29137                                  ; ****************************************************************
 29138                                  ;
 29139                                  ;assume	ds:trangroup				;AN000;
 29140                                  ;
 29141                                  ;upconv	proc	near				;AN000;
 29142                                  ;
 29143                                  ;	cmp	al,80h				;AN000;  see if char is > ascii 128
 29144                                  ;	jb	oth_fucase			;AN000;  no - upper case math
 29145                                  ;	sub	al,80h				;AN000;  only upper 128 chars in table
 29146                                  ;	push	ds				;AN000;
 29147                                  ;	push	bx				;AN000;
 29148                                  ;	mov	ds,[resseg]			;AN000;  get resident data segment
 29149                                  ;assume	ds:resgroup				;AN000;
 29150                                  ;	lds	bx,dword ptr FUCase_Addr+1	;AN000;  get table address
 29151                                  ;	add	bx,2				;AN000;  skip over first word
 29152                                  ;	xlat	ds:byte ptr [bx]		;AN000;  convert to upper case
 29153                                  ;	pop	bx				;AN000;
 29154                                  ;	pop	ds				;AN000;
 29155                                  ;assume	ds:trangroup				;AN000;
 29156                                  ;	jmp	short upconv_end		;AN000;  we finished - exit
 29157                                  ;
 29158                                  ;oth_fucase:					;AN000;
 29159                                  ;	cmp	al,small_a			;AC000; if between "a" and "z",
 29160                                  ;	jb	upconv_end			;AC000;     subtract 20h to get
 29161                                  ;	cmp	al,small_z			;AC000;    upper case equivalent.
 29162                                  ;	ja	upconv_end			;AC000;
 29163                                  ;	sub	al,20h				;AC000; Change lower-case to upper
 29164                                  ;
 29165                                  ;upconv_end:					;AN000;
 29166                                  ;	ret
 29167                                  ;
 29168                                  ;upconv	endp					;AN000;
 29169                                  
 29170                                  ;============================================================================
 29171                                  ; COPY.ASM, MSDOS 6.0, 1991
 29172                                  ;============================================================================
 29173                                  ; 01/10/2018 - Retro DOS v3.0
 29174                                  
 29175                                  ;	title	COMMAND COPY routines.
 29176                                  
 29177                                  ;/*
 29178                                  ; *                      Microsoft Confidential
 29179                                  ; *                      Copyright (C) Microsoft Corporation 1991
 29180                                  ; *                      All Rights Reserved.
 29181                                  ; */
 29182                                  
 29183                                  ;***	COPY.ASM
 29184                                  
 29185                                  ;Source files:  copy.asm, copypr1.asm, copypr2.asm
 29186                                  
 29187                                  
 29188                                  ;***	MODIFICATION HISTORY
 29189                                  
 29190                                  ;11/01/83 EE  Added a few lines at the end of SCANSRC2 to get multiple
 29191                                  ;	     file concatenations (eg copy a.*+b.*+c.*) to work properly.
 29192                                  ;11/02/83 EE  Commented out the code in CPARSE which added drive designators
 29193                                  ;	     to tokens which begin with path characters so that PARSELINE
 29194                                  ;	     will work correctly.
 29195                                  ;11/04/83 EE  Commented out the code in CPARSE that considered paren's to be
 29196                                  ;	     individual tokens. That distinction is no longer needed for
 29197                                  ;	     FOR loop processing.
 29198                                  ;11/17/83 EE  CPARSE upper case conversion is now flag dependent. Flag is
 29199                                  ;	     1 when Cparse is called from COPY.
 29200                                  ;11/17/83 EE  Took out the comment chars around code described in 11/04/83
 29201                                  ;	     mod. It now is conditional on flag like previous mod.
 29202                                  ;11/21/83 NP  Added printf
 29203                                  ;12/09/83 EE  CPARSE changed to use CPYFLAG to determine when a colon should
 29204                                  ;	     be added to a token.
 29205                                  ;05/30/84 MZ  Initialize all copy variables. Fix confusion with destclosed
 29206                                  ;	     NOTE: DestHand is the destination handle. There are two
 29207                                  ;	     special values: -1 meaning destination was never opened and
 29208                                  ;	     0 which means that the destination has been openned and
 29209                                  ;	     closed.
 29210                                  ;06/01/84 MZ  Above reasoning totally specious. Returned things to normal
 29211                                  ;06/06/86 EG  Change to fix problem of source switches /a and /b getting
 29212                                  ;	     lost on large and multiple file (wildcard) copies.
 29213                                  ;06/09/86 EG  Change to use xnametrans call to verify that source and
 29214                                  ;	     destination are not equal.
 29215                                  ;
 29216                                  ;06/24/90 DO  If the destination of a file concatenation is the same as
 29217                                  ;	     first source file AND we run out of disk space before
 29218                                  ;	     completing the concatenation, restore the first source
 29219                                  ;	     file as best we can. See SeekEnd and CopErr. Bug #859.
 29220                                  ;
 29221                                  ;M031 SR 10/11/90  Bug #3069. Use deny write sharing mode to open files
 29222                                  ;		instead of compatibility mode. This gives lesser sharing
 29223                                  ;		violations when files are opened for read on a copy.
 29224                                  
 29225                                  ; ---------------------------------------------------------------------------
 29226                                  ;***	COPY CODE
 29227                                  ; ---------------------------------------------------------------------------
 29228                                  
 29229                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2A15h
 29230                                  
 29231                                  ; 23/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29232                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 38C3h
 29233                                  
 29234                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29235                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3E6Dh
 29236                                  
 29237                                  COPY:
 29238                                  	; 	Initialize internal variables.
 29239                                  
 29240 00003B17 31C0                    	xor	ax,ax		; AX = 0
 29241 00003B19 A3[819D]                	mov	[Copy_num],ax	; # files copied (destinations) = 0
 29242 00003B1C A3[AF9E]                	mov	[SRCPT],ax	; cmd line ptr for source scan = 0
 29243 00003B1F A3[FB9D]                	mov	[SrcTail],ax	; ptr to last element of source pathname = 0
 29244 00003B22 A2[F09B]                	mov	[CFLAG],al	; 'destination file created' = false
 29245 00003B25 A3[F69B]                	mov	[NXTADD],ax	; ptr into TPA buffer = 0
 29246 00003B28 A3[EC9B]                	mov	[DestSwitch],ax	; destination switches = none
 29247 00003B2B A3[D39E]                	mov	[STARTEL],ax	; CParse ptr to last pathname element = 0
 29248 00003B2E A3[989D]                	mov	[DestTail],ax	; ptr to last element of dest pathname = 0
 29249 00003B31 A2[F19B]                	mov	[DestClosed],al	; 'destination file closed' = false
 29250 00003B34 A2[979D]                	mov	[DestSiz],al	; length of destination pathname = 0
 29251 00003B37 A2[FA9D]                	mov	[SrcSiz],al	; length of source pathname = 0
 29252 00003B3A A2[9A9D]                	mov	[DestInfo],al	; destination pathname flags = none
 29253 00003B3D A2[FD9D]                	mov	[SrcInfo],al	; source pathname flags = none
 29254 00003B40 A2[B19E]                	mov	[INEXACT],al	; 'inexact copy' = false
 29255 00003B43 A2[969D]                	mov	[DestVars],al	; 'dest pathname is directory' = false  ;*!*
 29256 00003B46 A2[F99D]                	mov	[SrcVars],al	; 'source pathname is directory' = false
 29257 00003B49 A2[B39A]                	mov	[USERDIR1],al	; saved working directory = null
 29258 00003B4C A2[B29E]                	mov	[NOWRITE],al	; 'no write' (source = dest) = false
 29259 00003B4F A2[E49B]                	mov	[RDEOF],al	; 'read end of file' = false
 29260 00003B52 A3[559E]                	mov	[SRCHAND],ax	; source handle = 0
 29261 00003B55 A3[BA9E]                	mov	[CPDATE],ax	; copy date = 0
 29262 00003B58 A3[BC9E]                	mov	[CPTIME],ax	; copy time = 0
 29263 00003B5B A2[579E]                	mov	[SRCISDEV],al	; 'source is device' = false
 29264                                  	; 23/03/2023
 29265                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM	
 29266 00003B5E A2[C29E]                	mov	[OCtrlZ],al	; 'Ctrl+Z removed from original' = false
 29267 00003B61 A3[BE9E]                	mov	[OFilePtr_Lo],ax
 29268 00003B64 A3[C09E]                	mov	[OFilePtr_Hi],ax ; original destination file ptr = null
 29269 00003B67 A2[B69E]                	mov	[TERMREAD],al	; 'terminate read' = false
 29270 00003B6A A2[749D]                	mov	[comma],al	; '"+,," found' = false
 29271 00003B6D A2[759D]                	mov	[plus_comma],al ; '"+,," found last time' = false (?)
 29272 00003B70 A2[109F]                	mov	[msg_flag],al	;AN022; 'non-utility msg issued' = false
 29273 00003B73 A3[EE9B]                	mov	[AllSwitch],ax	; all switches = none
 29274 00003B76 A2[E79B]                	mov	[ArgC],al	; source/dest argument count = 0
 29275 00003B79 A2[B89E]                	mov	[PLUS],al	; '"+" in command line' = false
 29276 00003B7C A2[B39E]                	mov	[BINARY],al	; 'binary copy' = false
 29277 00003B7F A2[B79E]                	mov	[ASCII],al	; 'ascii copy' = false
 29278 00003B82 A3[FF9B]                	mov	[FileCnt],ax	; # files copied (destinations) = 0
 29279 00003B85 A3[B49E]                	mov	[WRITTEN],ax	; 'destination written to' = false
 29280 00003B88 A2[E69B]                	mov	[Concat],al	; 'concatenating' = false
 29281 00003B8B A2[F69D]                	mov	[MELCOPY],al	; 'Mel Hallerman copy' = false
 29282 00003B8E A3[F79D]                	mov	[MELSTART],ax	; Mel Hallerman cmd line ptr = 0
 29283                                  	
 29284                                  	; 12/06/2023
 29285                                  	; MSDOS 6.22 COMMAND.COM
 29286                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 29287 00003B91 A2[CF9E]                	mov     [cox_dest_file], al ; MSDOS 6.22
 29288 00003B94 A2[D09E]                	mov     [cox_src_file], al  ; MSDOS 6.22
 29289                                  
 29290                                  	;	Initialize buffers with double-nulls.
 29291                                  
 29292 00003B97 A3[589E]                	mov	[ScanBuf],ax
 29293 00003B9A A3[9B9D]                	mov	[DestBuf],ax
 29294 00003B9D A3[FE9D]                	mov	[SrcBuf],ax
 29295 00003BA0 A3[5E9D]                	mov	[SDIRBUF],ax
 29296 00003BA3 A3[189D]                	mov	[DIRBUF],ax
 29297 00003BA6 A3[D59C]                	mov	[DestFcb],ax
 29298                                  
 29299 00003BA9 A2[B99E]                	mov	[objcnt],al	; # CParse cmd-line objects found = 0
 29300                                  		
 29301 00003BAC 48                      	dec	ax ; -1		; AX = 0FFFFh
 29302 00003BAD A3[F29D]                	mov	[DESTHAND],ax	; destination handle = 'never opened'
 29303 00003BB0 A2[F89B]                	mov	[FRSTSRCH],al	; 'first search for source' = true
 29304 00003BB3 A2[F59D]                	mov	[FIRSTDEST],al	; 'first time for dest' = true
 29305 00003BB6 A2[969D]                	mov	[DestIsDir],al	; 'haven't analyzed destination' ; *!*
 29306                                  
 29307                                  	; 12/06/2023
 29308                                  	; Retro DOS v4.2 COMMAND.COM
 29309                                  	; MSDOS 6.22 COMMAND.COM code only !
 29310                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 29311                                  	;
 29312 00003BB9 E8F306                  	call	init_copycmd_option ; MSDOS 6.22 
 29313                                  		
 29314 00003BBC BE8100                  	mov	si,81h		; SI = ptr to command line
 29315                                  	;mov	bl,[PLUS_CHR]	; BL = special delimiter = "+"
 29316                                  	; 23/03/2023
 29317 00003BBF B32B                    	mov	bl,'+'
 29318 00003BC1 FE06[0F9F]              	inc	byte [expand_star] ; CParse 'expand * to ?s' = true
 29319 00003BC5 C606[839D]01            	mov	byte [cpyflag],1 ; CParse 'called from COPY' = true
 29320                                  
 29321                                  	;*	Scan the command line for destination information.
 29322                                  
 29323                                  DESTSCAN:
 29324 00003BCA 31ED                    	xor	bp,bp			; BP = switch flag accumulator
 29325 00003BCC BF[589E]                	mov	di,ScanBuf		; ES:DI = ptr to pathname buf
 29326                                  	; 23/03/2023
 29327 00003BCF 8936[779D]              	mov	[parse_last],si		;AN018; save cmd line ptr
 29328 00003BD3 E8710B                  	call	cparse			; parse next object
 29329 00003BD6 9C                      	pushf	; (*)			; save CParse flags
 29330 00003BD7 FE06[B99E]              	inc	byte [objcnt]		; count object
 29331 00003BDB F6C780                  	test	bh,80h
 29332 00003BDE 7405                    	jz	short NOCOPY		; no "+" delimiter
 29333 00003BE0 C606[B89E]01            	mov	byte [PLUS],1		; "+" delimiter occurred
 29334                                  NOCOPY:
 29335 00003BE5 F6C701                  	test	bh,1
 29336 00003BE8 747D                    	jz	short TESTP2		; not a switch
 29337                                  
 29338                                  	;	Found a switch.
 29339                                  
 29340                                  	; 23/03/2023 - Retro DOS v4.0 COMMAND.COM
 29341                                  	;
 29342                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29343                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F43h
 29344                                  CHK_CP_SWITCH:
 29345                                  	; MSDOS 6.0
 29346 00003BEA F7C51000                	test	bp,10h
 29347                                  	;test	bp,SwitchV ; 10h	;AN038; Verify requested?
 29348 00003BEE 740B                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 29349                                  	;test	word [AllSwitch],10h
 29350 00003BF0 F606[EE9B]10            	test	byte [AllSwitch],10h
 29351                                  	;test	byte [AllSwitch],SwitchV ;AN038; Verify already entered?
 29352 00003BF5 7404                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 29353                                  ;AD018; ;or	word [AllSwitch],FBadSwitch ;AN038; Set up bad switch
 29354                                  	;or	bp,FBadSwitch		;AN018; Set up bad switch
 29355 00003BF7 81CD0040                	or	bp,4000h
 29356                                  NOT_SLASHV:
 29357                                  	; ****************************************
 29358                                  	; 12/06/2023
 29359                                  	; Retro DOS v4.2 COMMAND.COM
 29360                                  	; MSDOS 6.22 COMMAND.COM code only !
 29361                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 29362                                  	; ****************************************
 29363                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F55h
 29364                                  	;
 29365 00003BFB F7C54000                	test    bp,40h			; negative Y (-Y) switch flag
 29366 00003BFF 7417                    	jz	short CHK_SLASHY0
 29367                                  	;
 29368                                  	;test	word [AllSwitch],40h
 29369 00003C01 F606[EE9B]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 29370 00003C06 7507                    	jnz	short NOT_SLASHY1	; N flag
 29371                                  	;test	word [AllSwitch],80h
 29372 00003C08 F606[EE9B]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 29373 00003C0D 7404                    	jz	short NOT_SLASHY2
 29374                                  NOT_SLASHY1:
 29375 00003C0F 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 29376                                  NOT_SLASHY2:				; Set up bad switch
 29377 00003C13 C606[CE9E]00            	mov	byte [cox_y_override],0	; cox_y setting will be used
 29378                                  CHK_SLASHY0:
 29379 00003C18 F7C58000                	test    bp,80h
 29380 00003C1C 742B                    	jz      short CHK_SLASHY4	; not a /Y switch
 29381                                  	;
 29382 00003C1E 8A04                    	mov	al,[si]
 29383 00003C20 3C79                    	cmp	al,'y'
 29384 00003C22 740A                    	je	short CHK_SLASHY1
 29385 00003C24 3C59                    	cmp	al,'Y'
 29386 00003C26 7406                    	je	short CHK_SLASHY1
 29387 00003C28 81CD0040                	or	bp,4000h		; FBadSwitch
 29388                                  	;				; Set up bad switch
 29389 00003C2C EB1B                    	jmp	short CHK_SLASHY4
 29390                                  CHK_SLASHY1:
 29391 00003C2E C60420                  	mov	byte [si],20h ; ' '
 29392 00003C31 46                      	inc	si
 29393                                  	;test	word [AllSwitch],40h
 29394 00003C32 F606[EE9B]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 29395 00003C37 7507                    	jnz	short CHK_SLASHY2	; N flag
 29396                                  	;test	word [AllSwitch],80h
 29397 00003C39 F606[EE9B]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 29398 00003C3E 7404                    	jz	short CHK_SLASHY3
 29399                                  CHK_SLASHY2:
 29400 00003C40 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 29401                                  	;				; Set up bad switch
 29402                                  CHK_SLASHY3:
 29403 00003C44 C606[CE9E]01            	mov	byte [cox_y_override],1
 29404                                  CHK_SLASHY4:
 29405                                  	; ****************************************
 29406                                  	; 12/06/2023
 29407                                  ;NOT_SLASHV:
 29408                                  	;or	[DestSwitch],bp		; assume destination
 29409                                  	;or	[AllSwitch],bp		; keep tabs on all switches
 29410                                  
 29411                                  	; 12/06/2023
 29412                                  	; Retro DOS v4.2 COMMAND.COM
 29413                                  	; MSDOS 6.22 COMMAND.COM -TRANGROUP:3FA7h
 29414 00003C49 092E[EC9B]              	or	[DestSwitch],bp		; set [DestSwitch] SwitchY flag to 1
 29415 00003C4D 092E[EE9B]              	or	[AllSwitch],bp		; set [AllSwitch] SwitchY flag to 1
 29416                                  	;test	bp,~SwitchCopy		; Bad switch?
 29417 00003C51 F7C5237F                	test	bp,7F23h ; MSDOS 6.22	; ~SwitchCopy ; not SwitchCopy
 29418 00003C55 740A                    	jz	short NOT_BAD_SWITCH	; Switches are okay
 29419                                  
 29420                                  	; 12/06/2023
 29421                                  	; 23/03/2023
 29422                                  	; MSDOS 6.0
 29423                                  	;;test	bp,not SwitchCopy	;AN018; Bad switch?
 29424                                  	;test	bp,7FE3h ; test bp,~SwitchCopy
 29425                                  	;jz	short NOT_BAD_SWITCH	;AN018; Switches are okay
 29426                                  	
 29427 00003C57 9D                      	popf	; (*)			;AN018; fix up stack
 29428 00003C58 B80300                  	mov	ax,BadSwt_Ptr ; 3	;AN018; get "Invalid switch" message number
 29429 00003C5B E8D3E8                  	call	setup_parse_error_msg	;AN018; setup to print the message
 29430 00003C5E E98CF0                  	jmp	cerror			;AC018; exit
 29431                                  NOT_BAD_SWITCH:
 29432 00003C61 9D                      	popf				; restore CParse flags
 29433 00003C62 7235                    	jc	short CHECKDONE		; found CR
 29434 00003C64 E963FF                  	jmp	DESTSCAN		; continue scanning for destination
 29435                                  TESTP2:
 29436 00003C67 9D                      	popf	; (*)			; restore CParse flags
 29437 00003C68 722F                    	jc	short CHECKDONE		; found CR
 29438 00003C6A F6C780                  	test	bh,80h
 29439 00003C6D 7504                    	jnz	short GOTPLUS		; found a "+pathname" argument
 29440 00003C6F FE06[E79B]              	inc	byte [ArgC]		; count independent pathname args
 29441                                  GOTPLUS:
 29442 00003C73 56                      	push	si			; save cmd line ptr
 29443 00003C74 A1[D39E]                	mov	ax,[STARTEL]		; AX = ptr to last path element
 29444 00003C77 BE[589E]                	mov	si,ScanBuf		; SI = ptr to path string
 29445 00003C7A 29F0                    	sub	ax,si			; AX = offset of last element
 29446 00003C7C BF[9B9D]                	mov	di,DestBuf		; DI = ptr to destination buf
 29447 00003C7F 01F8                    	add	ax,di			; AX = ptr to last element in
 29448                                  					;  destination path buffer
 29449 00003C81 A3[989D]                	mov	[DestTail],ax		; save ptr to last element
 29450 00003C84 880E[979D]              	mov	[DestSiz],cl		; save path string length
 29451 00003C88 41                      	inc	cx			; CX = mov length (incl null)
 29452 00003C89 F3A4                    	rep	movsb			; DestBuf = possible destination path
 29453 00003C8B 883E[9A9D]              	mov	[DestInfo],bh		; save CParse info flags
 29454 00003C8F C706[EC9B]0000          	mov	word [DestSwitch],0	; clear destination switches
 29455 00003C95 5E                      	pop	si			; SI = ptr into cmd line again
 29456 00003C96 E931FF                  	jmp	DESTSCAN		;AC018; continue scanning for dest
 29457                                  
 29458                                  CHECKDONE:
 29459                                  	;	We reached the CR. The destination scan is finished.
 29460                                  
 29461                                  	;	Disallow "copy file1+" as file overwriting itself.
 29462                                  	;
 29463                                  	;	(Note that "copy file1+file2+" will be accepted, and
 29464                                  	;	equivalent to "copy file1+file2".)
 29465                                  
 29466                                  	;	Bugbug: it looks like "copy /x file1+" would slip
 29467                                  	;	through this check, since the switch would count
 29468                                  	;	as another object in ObjCnt.
 29469                                  
 29470 00003C99 803E[B89E]01            	cmp	byte [PLUS],1		; "+" with
 29471 00003C9E 7514                    	jnz	short CDCONT
 29472 00003CA0 803E[E79B]01            	cmp	byte [ArgC],1		; one arg,
 29473 00003CA5 750D                    	jnz	short CDCONT
 29474 00003CA7 803E[B99E]02            	cmp	byte [objcnt],2		; two objects..
 29475 00003CAC 7506                    	jnz	short CDCONT
 29476 00003CAE BA[708F]                	mov	dx,OVERWR_PTR
 29477 00003CB1 E9AE07                  	jmp	COPYERR			; is file overwrite
 29478                                  
 29479                                  CDCONT:
 29480 00003CB4 A0[B89E]                	mov	al,[PLUS]		; AL = '"+" occurred'
 29481 00003CB7 A2[E69B]                	mov	[Concat],al		; if "+" occurred, we're concatenating
 29482 00003CBA D0E0                    	shl	al,1
 29483 00003CBC D0E0                    	shl	al,1
 29484 00003CBE A2[B19E]                	mov	[INEXACT],al		; therefore making an inexact copy
 29485                                  	;mov	dx,BADARGSPTR ; MSDOS 3.3 ; 18/04/2023
 29486 00003CC1 A0[E79B]                	mov	al,[ArgC]		; AL = # independent arguments
 29487                                  
 29488                                  	; 23/03/2023
 29489                                  	; MSDOS 3.3		
 29490                                  	;or	al,al
 29491                                  	;jz	short CERROR4J
 29492                                  	; MSDOS 6.0
 29493 00003CC4 08C0                    	or	al,al
 29494 00003CC6 750B                    	jnz	short TRY_TOO_MANY	; more than 0 args; check if too many
 29495                                  		
 29496 00003CC8 BA[448F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 29497 00003CCB C706[448F]0200          	mov	word [extend_buf_ptr],LessArgs_Ptr ; 2
 29498                                  	;mov	word [extend_buf_ptr],2	; set msg # "param missing"
 29499 00003CD1 EB0D                    	jmp	short CERROR_PARSEJ	; take parse error exit		
 29500                                  
 29501                                  	; more than 0 args; check if too many
 29502                                  TRY_TOO_MANY:
 29503 00003CD3 3C02                    	cmp	al,2
 29504 00003CD5 7611                    	jbe	short ACOUNTOK		; <= 2 arguments - ok
 29505                                  
 29506                                  	; 23/03/2023
 29507                                  	; MSDOS 6.0
 29508 00003CD7 BA[448F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 29509 00003CDA C706[448F]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 29510                                  	;mov	word [extend_buf_ptr],1 ; set msg # "too many params"
 29511                                  CERROR_PARSEJ:
 29512 00003CE0 C606[428F]02            	mov	byte [msg_disp_class],parse_msg_class ; 2
 29513                                  					; parse error message	
 29514                                  CERROR4J:
 29515 00003CE5 E905F0                  	jmp	cerror
 29516                                  
 29517                                  ACOUNTOK:
 29518 00003CE8 BD[969D]                	mov	bp,DestVars		; BP = base of dest variables
 29519                                  
 29520 00003CEB 3C01                    	cmp	al,1
 29521 00003CED 7520                    	jnz	short GOT2ARGS
 29522                                  
 29523                                  	;	Only one independent pathname argument on command line.
 29524                                  	;	Set destination to d:*.*, where d: is current drive.
 29525                                  
 29526                                  	;	Bugbug: but is this appropriate for "copy x:file1+x:file2"?
 29527                                  	;	The two files would be appended as d:file1, rather than x:file1.
 29528                                  
 29529 00003CEF A0[E59B]                	mov	al,[CURDRV]		; AL = current drive (0 = A)
 29530                                  	;add	al,[CAPITAL_A]		; AL = current drive letter
 29531                                  	; 23/03/2023
 29532 00003CF2 0441                    	add	al,'A'
 29533 00003CF4 B43A                    	mov	ah,':'			; AX = "d:"
 29534                                  	;mov	byte [bp+1],2
 29535 00003CF6 C6460102                	mov	byte [bp+VARSTRUC.SIZ],2 ; pathname length = 2
 29536                                  
 29537 00003CFA BF[9B9D]                	mov	di,DestBuf		; ES:DI = ptr to dest path buf
 29538 00003CFD AB                      	stosw				; store "d:"
 29539                                  		
 29540 00003CFE C706[EC9B]0000          	mov	word [DestSwitch],0	; clear destination switches
 29541                                  	;mov	byte [bp+4],2		
 29542 00003D04 C6460402                	mov	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 29543                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 29544                                  	;mov	byte [bp+0],0		
 29545 00003D08 C6460000                	mov	byte [bp],0
 29546 00003D0C E8090A                  	call	SETSTARS		; add wildcards
 29547                                  GOT2ARGS:
 29548                                  	;	If destination pathname is "d:", add full wildcard filename
 29549                                  
 29550                                  	;cmp	byte [bp+1],2
 29551 00003D0F 807E0102                	cmp	byte [bp+VARSTRUC.SIZ],2
 29552 00003D13 7516                    	jnz	short NOTSHORTDEST	; not two chars, can't be "d:"
 29553 00003D15 B03A                    	mov	al,':'  ; 3Ah
 29554 00003D17 3806[9C9D]              	cmp	byte [DestBuf+1],al
 29555 00003D1B 750E                    	jnz	short NOTSHORTDEST	; it's just a 2-character filename
 29556                                  	;or	byte [bp+4],2
 29557 00003D1D 804E0402                	or	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 29558 00003D21 BF[9D9D]                	mov	di,DestBuf+2		; ES:DI = ptr after "d:"
 29559                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 29560                                  	;mov	byte [bp+0],0		
 29561 00003D24 C6460000                	mov	byte [bp],0
 29562 00003D28 E8ED09                  	call	SETSTARS		; add wildcards
 29563                                  NOTSHORTDEST:
 29564                                  	;	If destination pathname ends with "\", try to make
 29565                                  	;	sure it's "d:\".
 29566                                  
 29567                                  	;mov	di,[bp+2]
 29568 00003D2B 8B7E02                  	mov	di,[bp+VARSTRUC.TTAIL]	; DI = ptr to last path element
 29569 00003D2E 803D00                  	cmp	byte [di],0
 29570 00003D31 7515                    	jnz	short CHKSWTCHES	; not a null, so last char not "\"
 29571                                  
 29572 00003D33 BA[A490]                	mov	dx,badcd_ptr
 29573 00003D36 B03A                    	mov	al,':'
 29574 00003D38 3845FE                  	cmp	[di-2],al
 29575 00003D3B 75A8                    	jne	short CERROR4J		; it's not "d:\", exit with error msg
 29576                                  	;mov	byte [bp+0],2
 29577                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; destination 'is a directory'
 29578 00003D3D C6460002                	mov	byte [bp],2
 29579                                  	;or	byte [bp+4],6
 29580 00003D41 804E0406                	or	byte [bp+VARSTRUC.INFO],6 ; destination wildcarded and contains
 29581                                  					  ;  path character
 29582 00003D45 E8D009                  	call	SETSTARS		; add wildcards
 29583                                  CHKSWTCHES:
 29584                                  	;	We have enough information about the destination for now.
 29585                                  
 29586                                  	;	Turn on verify if requested. Save the current verify flag.
 29587                                  
 29588                                  	; 23/03/2023
 29589                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM
 29590                                  	;mov	dx,BADPARMPTR
 29591                                  	
 29592 00003D48 A1[EE9B]                	mov	ax,[AllSwitch]		; AX = all switch flags
 29593                                  
 29594                                  	; 23/03/2023
 29595                                  	; MSDOS 3.3
 29596                                  	;;test	ax,~SWITCHCOPY ; 7FE3h
 29597                                  	;test	ax,NOT_SWITCHCOPY ; 7FE3h ; 13/10/2018
 29598                                  	;jnz	short CERROR4J
 29599                                  	
 29600                                  	; 23/03/2023
 29601                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29602                                  	;test	ax,SwitchV ; 10h
 29603                                  	; 18/04/2023
 29604                                  	;test	ax,10h
 29605 00003D4B A810                    	test	al,10h  ; test al,SwitchV
 29606 00003D4D 7414                    	jz	short NOVERIF		; no /v, no verify
 29607                                  
 29608 00003D4F B454                    	mov	ah,Get_Verify_On_Write ; 54h
 29609 00003D51 CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 29610                                  				; Return: AL = 00h if flag OFF
 29611                                  				; AL = 01h if flag ON
 29612 00003D53 1E                      	push	ds
 29613 00003D54 8E1E[D19B]              	mov	ds,[RESSEG]
 29614 00003D58 30E4                    	xor	ah,ah
 29615 00003D5A A3[A702]                	mov	[VerVal],ax		; save current verify flag
 29616 00003D5D 1F                      	pop	ds
 29617 00003D5E B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 29618 00003D61 CD21                    	int	21h		; DOS -	SET VERIFY FLAG
 29619                                  				; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 29620                                  NOVERIF:
 29621                                  	;*	Scan for first source.
 29622                                  
 29623 00003D63 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 29624 00003D65 BE8100                  	mov	si,81h			; SI = ptr into command line
 29625                                  	;mov	bl,[PLUS_CHR]		; BL = special CParse delimiter = "+"
 29626                                  	; 23/03/2023
 29627 00003D68 B32B                    	mov	bl,'+' ; 2Bh
 29628                                  SCANFSRC:
 29629 00003D6A BF[589E]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 29630 00003D6D E8D709                  	call	cparse			; parse first source pathname
 29631 00003D70 F6C701                  	test	bh,1			; switch?
 29632 00003D73 75F5                    	jnz	short SCANFSRC		; yes, try again
 29633 00003D75 092E[EC9B]              	or	[DestSwitch],bp		; include copy-wide switches on dest
 29634                                  
 29635                                  ;	Set ascii copying mode if concatenating, unless /b is specified.
 29636                                  
 29637                                  	; 23/03/2023
 29638 00003D79 F7C50800                	test	bp,8
 29639                                  	;test	bp,SWITCHB
 29640 00003D7D 750C                    	jnz	short NOSETCASC		; /b - explicit binary copy
 29641 00003D7F 803E[E69B]00            	cmp	byte [Concat],0
 29642 00003D84 7405                    	jz	short NOSETCASC		; we're not concatenating
 29643 00003D86 C606[B79E]04            	mov	byte [ASCII],4
 29644                                  	;mov	byte [ASCII],SWITCHA	; set ascii copy
 29645                                  NOSETCASC:
 29646 00003D8B E82604                  	call	SOURCE_SET		; set source variables
 29647 00003D8E E84400                  	call	FRSTSRC			; set up first source copy
 29648 00003D91 E99500                  	jmp	FIRSTENT		; jump into the copy loop
 29649                                  
 29650                                  ; ---------------------------------------------------------------------------
 29651                                  
 29652                                  	; 24/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29653                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3AE9h
 29654                                  ENDCOPY:
 29655                                  	;*	End of the road. Close destination, display # files
 29656                                  	;	copied (meaning # destinations), and go back to main
 29657                                  	;	transient COMMAND code.
 29658                                  
 29659 00003D94 E83203                  	call	CLOSEDEST
 29660                                  ENDCOPY2:
 29661 00003D97 BA[798F]                	mov	dx,copied_ptr
 29662 00003D9A 8B36[FF9B]              	mov	si,[FileCnt]
 29663 00003D9E 8936[819D]              	mov	[Copy_num],si
 29664 00003DA2 E83816                  	call	std_printf
 29665 00003DA5 E95CC3                  	jmp	TCOMMAND		; stack could be messed up
 29666                                  
 29667                                  ; ---------------------------------------------------------------------------
 29668                                  
 29669                                  SRCNONEXIST:
 29670                                  	;*	Source doesn't exist. If concatenating, ignore and continue.
 29671                                  	;	Otherwise, say 'file not found' and quit.
 29672                                  
 29673 00003DA8 803E[E69B]00            	cmp	byte [Concat],0
 29674 00003DAD 7543                    	jne	short NEXTSRC		; concatenating - go on to next source
 29675                                  
 29676                                  	; 24/03/2023
 29677                                  	; MSDOS 3.3
 29678                                  	;mov	dx,SRCBUF
 29679                                  	;mov	[STRING_PTR_1],dx
 29680                                  	;mov	dx,STRINGBUF1PTR
 29681                                  	;call	STD_PRINTF
 29682                                  	;mov	dx,FNOTFOUNDPTR
 29683                                  	;jmp	COPYERR
 29684                                  
 29685                                  	; 24/*03/2023
 29686                                  	; MSDOS 6.0
 29687                                  	;	Set up error message.
 29688 00003DAF C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 29689                                  				  	; extended error msg
 29690 00003DB4 BA[448F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 29691 00003DB7 C706[448F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 29692                                  					; 'file not found' msg#
 29693 00003DBD C706[7F9D][FE9D]        	mov	word [string_ptr_2],SrcBuf
 29694                                  					; point at bad pathname
 29695 00003DC3 C606[468F]01            	mov	byte [extend_buf_sub],one_subst ; 1
 29696                                  					; 1 substitution
 29697 00003DC8 E99706                  	jmp	COPYERR			; print msg and clean up
 29698                                  
 29699                                  ; ---------------------------------------------------------------------------
 29700                                  
 29701                                  SOURCEPROC:
 29702                                  
 29703                                  	;*	Preparatory processing for each source file.
 29704                                  	;	Called at FrstSrc for first source file.
 29705                                  
 29706 00003DCB E8E603                  	call	SOURCE_SET		; set source variables & ascii/binary
 29707 00003DCE 803E[E69B]00            	cmp	byte [Concat],0
 29708 00003DD3 750B                    	jne	short LEAVECFLAG	; concatenating - leave CFlag alone
 29709                                  
 29710                                  ; ---------------------------------------------------------------------------
 29711                                  
 29712                                  FRSTSRC:
 29713 00003DD5 31C0                    	xor	ax,ax
 29714 00003DD7 A2[F09B]                	mov	[CFLAG],al		; 'destination not created'
 29715 00003DDA A3[F69B]                	mov	[NXTADD],ax		; copy buffer ptr = 0
 29716 00003DDD A2[F19B]                	mov	[DestClosed],al		; 'destination not closed'
 29717                                  
 29718                                  LEAVECFLAG:
 29719 00003DE0 8936[AF9E]              	mov	[SRCPT],si		; save cmd-line ptr
 29720 00003DE4 BF[B39A]                	mov	di,USERDIR1		; DI = ptr to buf for user's 
 29721                                  						;   current dir
 29722 00003DE7 BD[F99D]                	mov	bp,SrcVars		; BP = base of source variables
 29723 00003DEA E8DB07                  	call	BUILDPATH		; cd to source dir, figure
 29724                                  						;   out stuff about source
 29725 00003DED 8B36[FB9D]              	mov	si,[SrcTail]		; SI = ptr to source filename
 29726 00003DF1 C3                      	retn
 29727                                  
 29728                                  ; ---------------------------------------------------------------------------
 29729                                  
 29730                                  	; 25/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29731                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29732                                  NEXTSRC:
 29733                                  	;*	Next source. Come here after handling each pathname.
 29734                                  	;	We're done unless there are additional source pathnames
 29735                                  	;	to be appended.
 29736                                  	;
 29737                                  	;	Note that all files matching an ambiguous pathname
 29738                                  	;	are processed before coming here.
 29739                                  
 29740 00003DF2 803E[B89E]00            	cmp	byte [PLUS],0
 29741                                  	;jne	short MORECP		; copying "+" sources - keep going
 29742                                  	; 26/04/2023
 29743                                  ;ENDCOPYJ2:
 29744                                  	;jmp	short ENDCOPY
 29745 00003DF7 749B                    	je	short ENDCOPY
 29746                                  MORECP:
 29747 00003DF9 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 29748 00003DFB 8B36[AF9E]              	mov	si,[SRCPT]		; SI = ptr to current pos'n in cmd line
 29749                                  	;mov	bl,[PLUS_CHR]		; BL = special delimiter = "+"
 29750 00003DFF B32B                    	mov	bl,'+' ; 2Bh
 29751                                  SCANSRC:
 29752 00003E01 BF[589E]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 29753 00003E04 E84009                  	call	cparse			; parse first source name
 29754                                  	;jb	short ENDCOPYJ2		; CR found - we're done
 29755                                  	; 26/04/2023
 29756 00003E07 728B                    	jb	short ENDCOPY
 29757                                  
 29758 00003E09 F6C780                  	test	bh,80h
 29759                                  	;jz	short ENDCOPYJ2		; no "+" delimiter - we're done
 29760                                  	; 26/04/2023
 29761 00003E0C 7486                    	jz	short ENDCOPY
 29762                                  
 29763 00003E0E F6C701                  	test	bh,1
 29764 00003E11 75EE                    	jnz	short SCANSRC		; switch found - keep looking
 29765                                  
 29766                                  	;	ScanBuf contains the next source pathname.
 29767                                  
 29768 00003E13 E8B5FF                  	call	SOURCEPROC		; prepare this source
 29769 00003E16 803E[749D]01            	cmp	byte [comma],1		; was +,, found last time?
 29770 00003E1B 7507                    	jnz	short NOSTAMP		;  no - try for a file
 29771 00003E1D C606[759D]01            	mov	byte [plus_comma],1	; yes - set flag
 29772 00003E22 EB84                    	jmp	short SRCNONEXIST	; we know we won't find it
 29773                                  
 29774                                  NOSTAMP:
 29775 00003E24 C606[759D]00            	mov	byte [plus_comma],0	; reset +,, flag
 29776                                  
 29777                                  ; ---------------------------------------------------------------------------
 29778                                  
 29779                                  FIRSTENT:
 29780                                  
 29781                                  ;M047
 29782                                  ; The only case we need to worry about is when the source is wildcarded and
 29783                                  ;the destination is not. For this case, ConCat is not yet set to indicate
 29784                                  ;concatenation. We check for this case.
 29785                                  ;
 29786                                  ;NB: This change has been backed out and replaced by M048. This is not the
 29787                                  ;right place to do this check.
 29788                                  
 29789                                  	;	This is where we enter the loop with the first source.
 29790                                  
 29791 00003E29 BF5C00                  	mov	di,FCB ; 5Ch		; DI = ptr to FCB
 29792 00003E2C B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 29793 00003E2F CD21                    	int	21h		; DOS -	PARSE FILENAME
 29794                                  				; DS:SI	-> string to parse
 29795                                  				; ES:DI	-> buffer to fill with unopened	FCB
 29796                                  				; AL = bit mask	to control parsing
 29797 00003E31 803C00                  	cmp	byte [si],0		; did we parse the whole thing?
 29798 00003E34 7516                    	jne	short SRCHDONE		; no, error, simulate 'not found'
 29799 00003E36 A1[FE9D]                	mov	ax,[SrcBuf]		; AX = possible "d:"
 29800 00003E39 80FC3A                  	cmp	ah,':'
 29801 00003E3C 7402                    	je	short DRVSPEC1		; AX = definite "d:"
 29802 00003E3E B040                    	mov	al,'@'	; 40h		; AL = drive 'letter' for current drive
 29803                                  DRVSPEC1:
 29804 00003E40 0C20                    	or	al,20h			; AL = lowercase drive letter
 29805 00003E42 2C60                    	sub	al,60h			; AL = drive id (0=current,1=A,..)
 29806                                  	;mov	[5Ch],al
 29807 00003E44 A25C00                  	mov	[FCB],al		; put drive id in FCB
 29808                                  
 29809                                  	;	FCB contains drive and filename to search.
 29810                                  		
 29811 00003E47 B411                    	mov	ah,Dir_Search_First ; 11h  ; AH = 'Find First File'	
 29812 00003E49 E86D01                  	call	SEARCH
 29813                                  SRCHDONE:
 29814 00003E4C 9C                      	pushf				; save flags from Search
 29815 00003E4D E89AE9                  	call	RestUDir1		; restore users current directory
 29816 00003E50 9D                      	popf				; restore flags from search
 29817 00003E51 7403                    	jz	short NEXTAMBIG0	; found the source - continue
 29818 00003E53 E952FF                  	jmp	SRCNONEXIST		; didn't find the source
 29819                                  
 29820                                  NEXTAMBIG0:
 29821 00003E56 30C0                    	xor	al,al
 29822 00003E58 8606[F89B]              	xchg	al,[FRSTSRCH]
 29823 00003E5C 08C0                    	or	al,al
 29824 00003E5E 740B                    	jz	short NEXTAMBIG
 29825                                  SETNMEL:
 29826 00003E60 B90C00                  	mov	cx,12
 29827 00003E63 BF[5E9D]                	mov	di,SDIRBUF
 29828 00003E66 BE[189D]                	mov	si,DIRBUF
 29829 00003E69 F3A4                    	rep	movsb			; save very first source name
 29830                                  NEXTAMBIG:
 29831 00003E6B 30C0                    	xor	al,al
 29832 00003E6D A2[B29E]                	mov	[NOWRITE],al		; turn off nowrite
 29833 00003E70 8B3E[FB9D]              	mov	di,[SrcTail]
 29834 00003E74 BE[199D]                	mov	si,DIRBUF+1
 29835 00003E77 E8F2EA                  	call	FCB_TO_ASCZ		; SrcBuf has complete name
 29836                                  ;MELDO:
 29837                                  	; ****************************************
 29838                                  	; 12/06/2023
 29839                                  	; Retro DOS v4.2 COMMAND.COM
 29840                                  	; MSDOS 6.22 COMMAND.COM code only !
 29841                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 29842                                  	; ****************************************
 29843                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:41DBh
 29844                                  MELDO0:
 29845 00003E7A 803E[CE9E]00            	cmp	byte [cox_y_override],0 ; /Y switch override (question) enabled ?
 29846 00003E7F 746C                    	jz	short MELDO ; no
 29847                                  	; ----------------------
 29848                                  	; yes
 29849 00003E81 E85406                  	call	BUILDDEST
 29850 00003E84 BE[FE9D]                	mov	si,SrcBuf
 29851 00003E87 BF[FF98]                	mov	di,SRCXNAME
 29852                                  	;mov	ah,60h
 29853 00003E8A B460                    	mov	ah,xNameTrans ; 60h
 29854 00003E8C CD21                    	int	21h	; DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING
 29855                                  			; DS:SI -> ASCIZ relative path string or directory name
 29856                                  			; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
 29857 00003E8E E8A308                  	call	COMPNAME
 29858 00003E91 7540                    	jnz	short MELDO1    	; different file names
 29859 00003E93 803E[E69B]00            	cmp	byte [Concat],0
 29860 00003E98 7539                    	jnz	short MELDO1		; concatenating
 29861                                  	; "File cannot be copied onto itself"
 29862 00003E9A BA[1491]                	mov	dx,file_name_ptr
 29863 00003E9D E83D15                  	call	std_printf
 29864 00003EA0 E89DEA                  	call	CRLF2
 29865 00003EA3 BA[708F]                	mov	dx,OVERWR_PTR
 29866 00003EA6 E9B905                  	jmp	COPYERR
 29867                                  ;MELDO1:
 29868                                  	;cmp	byte [CFLAG],0		; destination file created flag
 29869                                  	;jnz	short MELDO		; yes, new (created) file
 29870                                  	;				; no, overwrite question (must be confirmed)
 29871                                  	;call	get_answer_YNA
 29872                                  	;jb	short MELDO2    	; answer is no
 29873                                  	;cmp	byte [Concat],0
 29874                                  	;jnz	short MELDO
 29875                                  	;cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 29876                                  	;jnz	short DOREAD    	; yes
 29877                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 29878                                  MELDO2:
 29879 00003EA9 803E[F69D]00            	cmp	byte [MELCOPY],0	; is 'Mel Hallerman copy' false ?
 29880 00003EAE 7507                    	jnz	short MELDO3    	; no (, it is true)
 29881 00003EB0 803E[E69B]00            	cmp	byte [Concat],0
 29882 00003EB5 7408                    	jz	short MELDO4
 29883                                  MELDO3:
 29884 00003EB7 C606[F19B]01            	mov	byte [DestClosed],1
 29885 00003EBC E9D5FE                  	jmp	ENDCOPY
 29886                                  MELDO4:
 29887 00003EBF E8EB00                  	call	SEARCHNEXT
 29888 00003EC2 74A7                    	jz	short NEXTAMBIG
 29889 00003EC4 803E[D09E]00            	cmp	byte [cox_src_file],0
 29890                                  	;jz	short MELDO5
 29891                                  	;jmp	NEXTSRC
 29892                                  	; 18/06/2023
 29893 00003EC9 7505                    	jnz	short NEXTSRCJ
 29894                                  MELDO5:
 29895 00003ECB C606[F19B]01            	mov	byte [DestClosed],1
 29896                                  NEXTSRCJ:	; 18/06/2023
 29897 00003ED0 E91FFF                  	jmp	NEXTSRC
 29898                                  
 29899                                  	; 12/06/2023
 29900                                  MELDO1:
 29901 00003ED3 803E[F09B]00            	cmp	byte [CFLAG],0		; destination file created flag
 29902 00003ED8 7513                    	jnz	short MELDO     	; yes, new (created) file
 29903                                  					; no, overwrite question (must be confirmed)
 29904 00003EDA E81803                  	call	get_answer_YNA
 29905 00003EDD 72CA                    	jb	short MELDO2    	; answer is no
 29906 00003EDF 803E[E69B]00            	cmp	byte [Concat],0
 29907 00003EE4 7507                    	jnz	short MELDO
 29908 00003EE6 803E[CF9E]00            	cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 29909 00003EEB 7517                    	jnz	short DOREAD    	; yes
 29910                                  	; 12/06/2023
 29911                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 29912                                  
 29913                                  	; ****************************************
 29914                                  	; 12/06/2023
 29915                                  MELDO:
 29916 00003EED 803E[E69B]00            	cmp	byte [Concat],0
 29917 00003EF2 7507                    	jnz	short SHOWCPNAM		; concatenating - show name
 29918 00003EF4 F606[FD9D]02            	test	byte [SrcInfo],2	; wildcard - show name
 29919 00003EF9 7409                    	jz	short DOREAD
 29920                                  SHOWCPNAM:
 29921                                  	; 25/03/2023
 29922                                  	; MSDOS 3.3
 29923                                  	;mov	dx,SRCBUF
 29924                                  	;mov	[STRING_PTR_2],dx
 29925                                  	;mov	dx,STRINGBUF2PTR
 29926                                  	;call	STD_PRINTF
 29927                                  	;call	CRLF2
 29928                                  	; 25/03/2023 - Retro DOS 4.0 COMMAND.COM
 29929                                  	; MSDOS 6.0 (& MSDOS 5.0
 29930 00003EFB BA[1491]                	mov	dx,file_name_ptr
 29931 00003EFE E8DC14                  	call	std_printf
 29932 00003F01 E83CEA                  	call	CRLF2
 29933                                  DOREAD:
 29934 00003F04 E8C300                  	call	DOCOPY
 29935 00003F07 803E[E69B]00            	cmp	byte [Concat],0
 29936 00003F0C 750A                    	jnz	short NODCLOSE		; concatenating - don't close dest
 29937                                  
 29938 00003F0E E8B801                  	call	CLOSEDEST		; close current destination
 29939 00003F11 7205                    	jc	short NODCLOSE		; concatenating - dest not closed
 29940                                  
 29941 00003F13 C606[F09B]00            	mov	byte [CFLAG],0		; 'destination not created'
 29942                                  NODCLOSE:
 29943 00003F18 803E[E69B]00            	cmp	byte [Concat],0		
 29944 00003F1D 740A                    	jz	short NOFLUSH
 29945                                  
 29946                                  ;	Concatenating - flush output between source files so LostErr
 29947                                  ;	stuff works correctly.
 29948                                  
 29949                                  	;invoke	FlshFil  ; MSDOS 6.0
 29950                                  	; 25/03/2023
 29951 00003F1F E80304                  	call	FlshFil
 29952                                  	;call	FLUSHFIL ; MSDOS 3.3
 29953                                  
 29954 00003F22 F606[F69D]FF            	test	byte [MELCOPY],0FFh
 29955                                  	;jz	short NOFLUSH
 29956                                  	;jmp	short DOMELCOPY
 29957                                  	; 25/03/2023
 29958 00003F27 750D                    	jnz	short DOMELCOPY
 29959                                  NOFLUSH:
 29960 00003F29 E88100                  	call	SEARCHNEXT		; try next match
 29961 00003F2C 75A2                    	jnz	short NEXTSRCJ		; not found - finished with 
 29962                                  					;   this source spec
 29963 00003F2E C606[F19B]00            	mov	byte [DestClosed],0	; 'destination not closed'
 29964 00003F33 E935FF                  	jmp	NEXTAMBIG		; do next ambig match
 29965                                  
 29966                                  DOMELCOPY:
 29967 00003F36 803E[F69D]FF            	cmp	byte [MELCOPY],0FFh
 29968 00003F3B 740D                    	je	short CONTMEL
 29969 00003F3D 8B36[AF9E]              	mov	si,[SRCPT]
 29970 00003F41 8936[F79D]              	mov	[MELSTART],si
 29971 00003F45 C606[F69D]FF            	mov	byte [MELCOPY],0FFh
 29972                                  
 29973                                  CONTMEL:
 29974 00003F4A 31ED                    	xor	bp,bp
 29975 00003F4C 8B36[AF9E]              	mov	si,[SRCPT]
 29976                                  	;mov	bl,[PLUS_CHR]
 29977                                  	; 25/03/2023
 29978 00003F50 B32B                    	mov	bl,'+'
 29979                                  SCANSRC2:
 29980 00003F52 BF[589E]                	mov	di,ScanBuf
 29981 00003F55 E8EF07                  	call	cparse
 29982 00003F58 F6C780                  	test	bh,80h
 29983 00003F5B 742F                    	jz	short NEXTMEL		; no "+" - go back to start
 29984 00003F5D F6C701                  	test	bh,1
 29985 00003F60 75F0                    	jnz	short SCANSRC2		; switch - keep scanning
 29986 00003F62 E866FE                  	call	SOURCEPROC
 29987 00003F65 E882E8                  	call	RestUDir1
 29988 00003F68 BF[999C]                	mov	di,DESTFCB2
 29989 00003F6B B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 29990 00003F6E CD21                    	int	21h		; DOS -	PARSE FILENAME
 29991                                  				; DS:SI	-> string to parse
 29992                                  				; ES:DI	-> buffer to fill with unopened	FCB
 29993                                  				; AL = bit mask	to control parsing
 29994 00003F70 BB[5F9D]                	mov	bx,SDIRBUF+1
 29995 00003F73 BE[9A9C]                	mov	si,DESTFCB2+1
 29996 00003F76 8B3E[FB9D]              	mov	di,[SrcTail]
 29997                                  
 29998 00003F7A E81C06                  	call	BUILDNAME
 29999                                  
 30000 00003F7D 803E[E69B]00            	cmp	byte [Concat],0
 30001 00003F82 7405                    	je	short MELDOJ		; not concatenating - continue
 30002                                  
 30003                                  	;	Yes, turn off nowrite because this part of the code 
 30004                                  	;	is only reached after the first file has been dealt with.
 30005                                  
 30006 00003F84 C606[B29E]00            	mov	byte [NOWRITE],0
 30007                                  MELDOJ:
 30008 00003F89 E961FF                  	jmp	MELDO
 30009                                  	; 18/06/2023
 30010                                  ;NEXTSRCJ:
 30011                                  	;jmp	NEXTSRC
 30012                                  
 30013                                  NEXTMEL:
 30014 00003F8C E83A01                  	call	CLOSEDEST
 30015 00003F8F 31C0                    	xor	ax,ax
 30016 00003F91 A2[F09B]                	mov	[CFLAG],al
 30017 00003F94 A3[F69B]                	mov	[NXTADD],ax
 30018 00003F97 A2[F19B]                	mov	[SPECDRV],al
 30019 00003F9A 8B36[F79D]              	mov	si,[MELSTART]
 30020 00003F9E 8936[AF9E]              	mov	[SRCPT],si
 30021 00003FA2 E80800                  	call	SEARCHNEXT
 30022 00003FA5 7403                    	jz	short SETNMELJ
 30023 00003FA7 E9EDFD                  	jmp	ENDCOPY2
 30024                                  SETNMELJ:
 30025 00003FAA E9B3FE                  	jmp	SETNMEL
 30026                                  
 30027                                  ; ---------------------------------------------------------------------------
 30028                                  
 30029                                  SEARCHNEXT:
 30030 00003FAD B412                    	mov	ah,Dir_Search_Next ; 12h
 30031 00003FAF F606[FD9D]02            	test	byte [SrcInfo],2
 30032 00003FB4 7503                    	jnz	short SEARCH		; do search-next if ambig
 30033 00003FB6 08E4                    	or	ah,ah			; reset zero flag
 30034 00003FB8 C3                      	retn
 30035                                  
 30036                                  ; ---------------------------------------------------------------------------
 30037                                  
 30038                                  SEARCH:
 30039 00003FB9 50                      	push	ax
 30040 00003FBA B41A                    	mov	ah,Set_DMA ; 1Ah
 30041 00003FBC BA[189D]                	mov	dx,DIRBUF	; put result of search in dirbuf
 30042 00003FBF CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 30043                                  			; DS:DX	-> disk	transfer buffer
 30044 00003FC1 58                      	pop	ax		; restore search first/next command
 30045 00003FC2 BA5C00                  	mov	dx,FCB ; 5Ch
 30046 00003FC5 CD21                    	int	21h		; Do the search
 30047 00003FC7 08C0                    	or	al,al
 30048 00003FC9 C3                      	retn
 30049                                  
 30050                                  ; ---------------------------------------------------------------------------
 30051                                  
 30052                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30053                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30054                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4335h
 30055                                  DOCOPY:
 30056 00003FCA BE[FE9D]                	mov	si,SrcBuf	; do name translate of source
 30057 00003FCD BF[FF98]                	mov	di,SRCXNAME	; save for name comparison
 30058 00003FD0 B460                    	mov	ah,xNameTrans ; 60h
 30059                                  	;mov	ah,60h
 30060 00003FD2 CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 30061                                  			; DS:SI	-> ASCIZ relative path string or directory name
 30062                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 30063 00003FD4 C606[E49B]00            	mov	byte [RDEOF],0	; no EOF yet
 30064                                  
 30065                                  	; MSDOS 6.0
 30066                                  	;mov	ax,ExtOpen shl 8	; open the file
 30067                                  	; 26/03/2023
 30068 00003FD9 B8006C                  	mov	ax,6C00h
 30069                                  ;M046
 30070                                  ; For reads, the sharing mode should be deny none so that any process can
 30071                                  ;open this file again in any other sharing mode. This is mainly to allow
 30072                                  ;multiple command.com's to access the same file without getting sharing
 30073                                  ;violations
 30074                                  ;
 30075                                  	;mov	bx,deny_none|read_open_mode
 30076 00003FDC BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 30077 00003FDF 31C9                    	xor	cx,cx			; no special files
 30078                                  	;mov	dx,read_open_flag	; set up open flags
 30079 00003FE1 BA0101                  	mov	dx,101h
 30080 00003FE4 CD21                    	int	21h
 30081                                  	; 26/03/2023
 30082 00003FE6 7230                    	jc	short Error_On_Source
 30083                                  	;jnc	short OPENOK
 30084                                  
 30085                                  	;	Bogosity: IBM wants us to issue Access Denied in this case.
 30086                                  	;	They asked for it...
 30087                                  
 30088                                  	;jmp	short Error_On_Source ;AC022; clean up and exit
 30089                                  
 30090                                  	; 26/03/2023
 30091                                  	; MSDOS 3.3
 30092                                  	;mov	dx,SRCBUF
 30093                                  	;mov	ax,OPEN*256 ; 3D00h
 30094                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 30095                                  	;			; DS:DX	-> ASCIZ filename
 30096                                  	;			; AL = access mode
 30097                                  	;			; 0 - read
 30098                                  	;jnc	short OPENOK
 30099                                  	;call	GET_EXT_ERR_NUMBER
 30100                                  	;pushf
 30101                                  	;cmp	ax,65
 30102                                  	;jnz	short DOCOPY_ERR
 30103                                  	;mov	dx,ACCDENPTR
 30104                                  	;call	STD_PRINTF
 30105                                  ;DOCOPY_ERR:
 30106                                  	;popf
 30107                                  	;retn
 30108                                  
 30109                                  	; 26/03/2023
 30110                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30111                                  OPENOK:
 30112 00003FE8 89C3                    	mov	bx,ax
 30113 00003FEA 891E[559E]              	mov	[SRCHAND],bx		; save handle
 30114 00003FEE B80057                  	mov	ax,File_Times*256 ; 5700h
 30115 00003FF1 CD21                    	int	21h		; DOS -	2+ - GET FILE'S DATE/TIME
 30116                                  				; BX = file handle
 30117                                  
 30118 00003FF3 7223                    	jc	short Error_On_Source ; MSDOS 6.0
 30119                                  
 30120 00003FF5 8916[BA9E]              	mov	[CPDATE],dx		; save date
 30121 00003FF9 890E[BC9E]              	mov	[CPTIME],cx		; save time
 30122                                  
 30123                                  	; MSDOS 6.0
 30124                                  	;jmp	short No_Copy_Xa 	; (xa copy code removed)
 30125                                  	; 26/04/2023
 30126                                  No_Copy_Xa:
 30127                                  	; 26/03/2023
 30128                                  	;mov	bx,[SRCHAND]		;AN022; get handle back
 30129                                  
 30130                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30131 00003FFD B80044                  	mov	ax,(IOCTL<<8) ; 4400h
 30132 00004000 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 30133                                  				; BX = file or device handle
 30134                                  	;and	dl,devid_ISDEV ; 80h
 30135                                  	; 18/04/2023
 30136 00004002 80E280                  	and	dl,80h ; devid_ISDEV
 30137 00004005 8816[579E]              	mov	[SRCISDEV],dl		; set source info
 30138 00004009 7436                    	jz	short COPYLP		; source not a device
 30139 0000400B 803E[B39E]00            	cmp	byte [BINARY],0
 30140 00004010 742F                    	je	short COPYLP		; ascii device ok
 30141 00004012 BA[CD90]                	mov	dx,INBDEV_PTR		; cannot do binary input
 30142 00004015 E94A04                  	jmp	COPYERR
 30143                                  
 30144                                  Error_On_Source:			;AN022; we have a BAD error
 30145 00004018 E81EE0                  	call	Set_Ext_Error_Msg	;AN022; set up the error message
 30146 0000401B C706[7F9D][FE9D]        	mov	word [string_ptr_2],SrcBuf
 30147                                  				;AN022; get address of failed string
 30148 00004021 C606[468F]01            	mov	byte [extend_buf_sub],one_subst ; 1
 30149                                  				;AN022; put number of subst in control block
 30150 00004026 E8AC13                  	call	std_eprintf		;AN022; print it
 30151                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 30152 00004029 8B1E[559E]              	mov	bx,[SRCHAND]
 30153                                  	;cmp	word [SRCHAND],0	;AN022; did we open the file?
 30154                                  	;je	short No_Close_Src	;AN022; no - don't close
 30155 0000402D 09DB                    	or	bx,bx
 30156 0000402F 7403                    	jz	short No_Close_Src
 30157                                  	;call	CLOSESRC		;AN022; clean up
 30158                                  	; 26/03/2023
 30159 00004031 E89000                  	call	CLOSESRC2 ; bx = [SRCHAND]
 30160                                  No_Close_Src:				;AN022;
 30161 00004034 803E[F09B]00            	cmp	byte [CFLAG],0		;AN022; was destination created?
 30162 00004039 7403                    	je	short EndCopyJ3		;AN022; no - just cleanup and exit
 30163 0000403B E956FD                  	jmp	ENDCOPY			;AN022; clean up concatenation and exit
 30164                                  EndCopyJ3:				;AN022;
 30165 0000403E E956FD                  	jmp	ENDCOPY2		;AN022;
 30166                                  
 30167                                  	; 26/04/2023
 30168                                  ;No_Copy_Xa:
 30169                                  ;	; 26/03/2023
 30170                                  ;	;mov	bx,[SRCHAND]		;AN022; get handle back
 30171                                  ;
 30172                                  ;	; MSDOS 3.3 (& MSDOS 6.0)
 30173                                  ;	mov	ax,(IOCTL<<8) ; 4400h
 30174                                  ;	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 30175                                  ;				; BX = file or device handle
 30176                                  ;	;and	dl,devid_ISDEV ; 80h
 30177                                  ;	; 18/04/2023
 30178                                  ;	and	dl,80h ; devid_ISDEV
 30179                                  ;	mov	[SRCISDEV],dl		; set source info
 30180                                  ;	jz	short COPYLP		; source not a device
 30181                                  ;	cmp	byte [BINARY],0
 30182                                  ;	je	short COPYLP		; ascii device ok
 30183                                  ;	mov	dx,INBDEV_PTR		; cannot do binary input
 30184                                  ;	jmp	COPYERR
 30185                                  
 30186                                  COPYLP:
 30187                                  	; 26/03/2023
 30188 00004041 8B1E[559E]              	mov	bx,[SRCHAND] ; ? ; 26/03/2023
 30189 00004045 8B0E[F29B]              	mov	cx,[BYTCNT]
 30190 00004049 8B16[F69B]              	mov	dx,[NXTADD]
 30191 0000404D 29D1                    	sub	cx,dx			; compute available space
 30192 0000404F 750E                    	jnz	short GOTROOM
 30193 00004051 E8D102                  	call	FlshFil   ; MSDOS 6.0
 30194                                  	;call	FLUSHFIL  ; MSDOS 3.3
 30195 00004054 803E[B69E]00            	cmp	byte [TERMREAD],0
 30196 00004059 7565                    	jne	short CLOSESRC		; give up
 30197 0000405B 8B0E[F29B]              	mov	cx,[BYTCNT]
 30198                                  GOTROOM:
 30199 0000405F 1E                      	push	ds
 30200 00004060 8E1E[D39B]              	mov	ds,[TPA]
 30201 00004064 B43F                    	mov	ah,READ ; 3Fh
 30202 00004066 CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 30203                                  				; BX = file handle,CX = number of bytes to read
 30204                                  				; DS:DX	-> buffer
 30205 00004068 1F                      	pop	ds
 30206                                  	;jc	short CLOSESRC	; MSDOS 3.3
 30207                                  	; 26/03/2023
 30208 00004069 72AD                    	jc	short Error_On_Source ; MSDOS 6.0
 30209 0000406B 89C1                    	mov	cx,ax			; get count
 30210 0000406D E351                    	jcxz	CLOSESRC		; no more to read
 30211 0000406F 803E[579E]00            	cmp	byte [SRCISDEV],0
 30212 00004074 7507                    	jne	short NOTESTA		; is a device, ascii mode
 30213 00004076 803E[B79E]00            	cmp	byte [ASCII],0
 30214 0000407B 741B                    	je	short BINREAD
 30215                                  NOTESTA:
 30216 0000407D 89CA                    	mov	dx,cx
 30217 0000407F 8B3E[F69B]              	mov	di,[NXTADD]
 30218 00004083 B01A                    	mov	al,1Ah
 30219 00004085 06                      	push	es
 30220 00004086 8E06[D39B]              	mov	es,[TPA]		; scan for EOF
 30221 0000408A F2AE                    	repne	scasb
 30222 0000408C 07                      	pop	es
 30223 0000408D 7505                    	jnz	short USEALL
 30224 0000408F FE06[E49B]              	inc	byte [RDEOF]
 30225 00004093 41                      	inc	cx
 30226                                  USEALL:
 30227 00004094 29CA                    	sub	dx,cx
 30228 00004096 89D1                    	mov	cx,dx
 30229                                  BINREAD:
 30230 00004098 030E[F69B]              	add	cx,[NXTADD]
 30231 0000409C 890E[F69B]              	mov	[NXTADD],cx
 30232 000040A0 3B0E[F29B]              	cmp	cx,[BYTCNT]		; is buffer full?
 30233 000040A4 720C                    	jb	short TESTDEV		; if not, we may have found eof
 30234                                  	; 26/03/2023
 30235 000040A6 E87C02                  	call	FlshFil
 30236                                  	;call	FLUSHFIL
 30237 000040A9 803E[B69E]00            	cmp	byte [TERMREAD],0
 30238 000040AE 7510                    	jne	short CLOSESRC		; give up
 30239 000040B0 EB8F                    	jmp	short COPYLP
 30240                                  TESTDEV:
 30241 000040B2 803E[579E]00            	cmp	byte [SRCISDEV],0	; if file then EOF
 30242 000040B7 7407                    	je	short CLOSESRC
 30243 000040B9 803E[E49B]00            	cmp	byte [RDEOF],0
 30244 000040BE 7481                    	je	short COPYLP		; on device, go till ^Z
 30245                                  CLOSESRC:
 30246 000040C0 8B1E[559E]              	mov	bx,[SRCHAND]
 30247                                  CLOSESRC2:
 30248 000040C4 B43E                    	mov	ah,CLOSE ; 3Eh
 30249 000040C6 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 30250                                  				; BX = file handle
 30251                                  CLOSESRCDEST_RETN:
 30252 000040C8 C3                      	retn
 30253                                  
 30254                                  ; ---------------------------------------------------------------------------
 30255                                  
 30256                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30257                                  CLOSEDEST:
 30258                                  
 30259                                  	;	We are called to close the destination.
 30260                                  	;	We need to note whether or not there is any internal data left
 30261                                  	;	to be flushed out.
 30262                                  
 30263 000040C9 803E[F19B]00            	cmp	byte [DestClosed],0
 30264 000040CE 75F8                    	jne	short CLOSESRCDEST_RETN	; don't double close
 30265 000040D0 A0[EC9B]                	mov	al,[DestSwitch]
 30266 000040D3 E8E803                  	call	SETASC			; check for b or a switch
 30267 000040D6 742E                    	jz	short BINCLOS		;   on destination
 30268 000040D8 8B1E[F69B]              	mov	bx,[NXTADD]
 30269                                  ;
 30270                                  ;M048 -- TryFlush changes the state of ConCat flag. So, before we append a
 30271                                  ;^Z, let's always flush out. This way if the ConCat flag changes, we will
 30272                                  ;just return without appending a ^Z incorrectly for the first file (since we
 30273                                  ;are concatenating now). Also, in case it is a single file copy, we will
 30274                                  ;anyway write the ^Z out separately. The only drawback is that there is a
 30275                                  ;performance overhead on single ASCII file copies which now always involve
 30276                                  ;2 writes instead of 1 before. Is this really that important?
 30277                                  ;
 30278                                  ;M048;	cmp	bx,[BYTCNT]		; is memory full?
 30279                                  ;M048;	jne	short PutZ
 30280                                  
 30281                                  	; 26/03/2023
 30282                                  	; MSDOS 3.3
 30283                                  	;cmp	bx,[BYTCNT]		; is memory full?
 30284                                  	;jne	short PUTZ
 30285                                  
 30286                                  	; 26/03/2023
 30287 000040DC E83902                  	call	TRYFLUSH		; flush (and double-check for concat)	
 30288 000040DF 7402                    	jz	short NOCONC
 30289                                  CONCHNG:
 30290 000040E1 F9                      	stc
 30291 000040E2 C3                      	retn
 30292                                  
 30293                                  NOCONC:	
 30294 000040E3 31DB                    	xor	bx,bx
 30295                                  PUTZ:
 30296 000040E5 1E                      	push	ds
 30297 000040E6 8E1E[D39B]              	mov	ds,[TPA]
 30298 000040EA C7071A00                	mov	word [bx],1Ah	; add EOF mark (ctrl-Z)
 30299 000040EE 1F                      	pop	ds
 30300 000040EF FF06[F69B]              	inc	word [NXTADD]	; make sure our ^z gets written	
 30301 000040F3 C606[B29E]00            	mov	byte [NOWRITE],0
 30302 000040F8 A1[B49E]                	mov	ax,[WRITTEN]
 30303 000040FB 0306[F69B]              	add	ax,[NXTADD]
 30304 000040FF 7205                    	jc	short BINCLOS	; > 1
 30305 00004101 83F801                  	cmp	ax,1
 30306 00004104 740C                    	je	short FORGETITJ	; Written = 0 NxtAdd = 1 (the ^Z)
 30307                                  BINCLOS:
 30308 00004106 E80F02                  	call	TRYFLUSH
 30309 00004109 75D6                    	jnz	short CONCHNG
 30310                                  
 30311                                  	; 26/04/2023
 30312 0000410B 833E[B49E]00            	cmp	word [WRITTEN],0
 30313                                  	; 26/03/2023
 30314 00004110 7503                    	jnz	short NO_FORGET
 30315                                  FORGETITJ:
 30316                                  	;jz	short FORGETIT	; never wrote nothing
 30317                                  	; 26/03/2023
 30318 00004112 E98500                  	jmp	FORGETIT ; 18/04/2023
 30319                                  NO_FORGET:			; wrote something
 30320 00004115 8B1E[F29D]              	mov	bx,[DESTHAND]
 30321 00004119 8B0E[BC9E]              	mov	cx,[CPTIME]
 30322 0000411D 8B16[BA9E]              	mov	dx,[CPDATE]
 30323 00004121 803E[B19E]00            	cmp	byte [INEXACT],0 ; copy not exact?
 30324 00004126 7431                    	je	short DODCLOSE	; if no, copy date & time
 30325 00004128 B42C                    	mov	ah,Get_Time ; 2Ch
 30326 0000412A CD21                    	int	21h		; DOS -	GET CURRENT TIME
 30327                                  				; Return: CH = hours,CL = minutes,DH = seconds
 30328                                  				; DL = hundredths of seconds
 30329 0000412C D0E1                    	shl	cl,1
 30330 0000412E D0E1                    	shl	cl,1		; left justify min in cl
 30331 00004130 D1E1                    	shl	cx,1
 30332 00004132 D1E1                    	shl	cx,1
 30333 00004134 D1E1                    	shl	cx,1		; hours to high 5 bits, min to 5-10
 30334 00004136 D0EE                    	shr	dh,1		; divide seconds by 2 (now 5 bits)
 30335 00004138 08F1                    	or	cl,dh		; and stick into low 5 bits of cx
 30336 0000413A 51                      	push	cx		; save packed time
 30337 0000413B B42A                    	mov	ah,Get_Date ; 2Ah
 30338 0000413D CD21                    	int	21h		; DOS -	GET CURRENT DATE
 30339                                  				; Return: DL = day,DH = month,	CX = year
 30340                                  				; AL = day of the week (0=Sunday,1=Monday,etc.)
 30341 0000413F 81E9BC07                	sub	cx,1980
 30342 00004143 86E9                    	xchg	ch,cl
 30343 00004145 D1E1                    	shl	cx,1		; year to high 7 bits
 30344 00004147 D0E6                    	shl	dh,1		; month to high 3 bits
 30345 00004149 D0E6                    	shl	dh,1
 30346 0000414B D0E6                    	shl	dh,1
 30347 0000414D D0E6                    	shl	dh,1
 30348 0000414F D0E6                    	shl	dh,1		; most sig bit of month in carry
 30349 00004151 80D500                  	adc	ch,0		; put that bit next to year
 30350 00004154 08F2                    	or	dl,dh		; or low three of month into day
 30351 00004156 88EE                    	mov	dh,ch		; get year and high bit of month
 30352 00004158 59                      	pop	cx
 30353                                  DODCLOSE:
 30354 00004159 83FB00                  	cmp	bx,0
 30355 0000415C 7E36                    	jle	short CLOSEDONE
 30356 0000415E B80157                  	mov	ax,(File_Times<<8)|1 ; 5701h
 30357 00004161 CD21                    	int	21h		; DOS -	2+ - SET FILE'S DATE/TIME
 30358                                  				; BX = file handle,CX = time to be set
 30359                                  				; DX = date to be set
 30360                                  	; 26/03/2023
 30361                                  	; MSDOS 6.0
 30362 00004163 721A                    	jc	short Cleanup_Err ;AN022; handle error
 30363                                  
 30364                                  	;	See if the destination has *anything* in it.
 30365                                  	;	If not, just close and delete it.
 30366                                  
 30367 00004165 B80242                  	mov	ax,(LSEEK<<8)+2 ; 4202h	; seek to EOF
 30368 00004168 31D2                    	xor	dx,dx
 30369 0000416A 89D1                    	mov	cx,dx
 30370 0000416C CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 30371                                  			; AL = method: offset from end of file
 30372                                  	;	DX:AX is file size
 30373                                  
 30374 0000416E 09C2                    	or	dx,ax
 30375 00004170 9C                      	pushf
 30376 00004171 B80044                  	mov	ax,(IOCTL<<8)+0 ; 4400h	; get the destination attributes
 30377 00004174 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 30378                                  			; BX = file or device handle
 30379 00004176 52                      	push	dx		; save them away
 30380 00004177 B43E                    	mov	ah,CLOSE ; 3Eh
 30381 00004179 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 30382                                  			; BX = file handle
 30383 0000417B 5A                      	pop	dx
 30384                                  
 30385                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 30386                                  	; MSDOS 6.0
 30387 0000417C 730D                    	jnc	short Close_Cont ;AN022; handle error on close
 30388 0000417E 9D                      	popf			;AN022; get the flags back
 30389                                  Cleanup_Err: 			;AN022;
 30390 0000417F E85A00                  	call	CleanUpErr	;AN022; attempt to delete the target
 30391                                  	; 26/03/2023
 30392                                  	;call	DestDelete	;AN022; attempt to delete the target
 30393                                  	;jmp	short FILECLOSED
 30394                                  	;			;AN022; close the file
 30395                                  	; 26/03/2023
 30396                                  DestDel_fclosed:
 30397 00004182 E82700                  	call	DestDelete
 30398                                  FILECLOSED:
 30399 00004185 FE06[F19B]              	inc	byte [DestClosed]
 30400                                  RET50:
 30401 00004189 F8                      	clc
 30402 0000418A C3                      	retn
 30403                                  	
 30404                                  Close_Cont:			;AN022; no error - co
 30405                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30406 0000418B 9D                      	popf
 30407 0000418C 7506                    	jnz	short CLOSEDONE
 30408 0000418E F7C28000                	test	dx,80h		; is the destination a device?
 30409                                  	;jnz	short CLOSEDONE	; yes, copy succeeded
 30410                                  	;call	DestDelete
 30411                                  	;jmp	short FILECLOSED
 30412                                  	; 26/03/2023
 30413 00004192 74EE                    	jz	short DestDel_fclosed
 30414                                  CLOSEDONE:
 30415 00004194 FF06[FF9B]              	inc	word [FileCnt]
 30416                                  	; 26/03/2023
 30417 00004198 EBEB                    	jmp	short FILECLOSED
 30418                                  	
 30419                                  ;FILECLOSED:
 30420                                  ;	inc	byte [DestClosed]
 30421                                  ;RET50:
 30422                                  	;clc
 30423                                  	;retn
 30424                                  
 30425                                  FORGETIT:
 30426 0000419A 8B1E[F29D]              	mov	bx,[DESTHAND]
 30427 0000419E E8B8FF                  	call	DODCLOSE	 ; close the dest	
 30428 000041A1 E80800                  	call	DestDelete
 30429 000041A4 C706[FF9B]0000          	mov	word [FileCnt],0 ; no files transferred
 30430 000041AA EBDD                    	jmp	short RET50
 30431                                  
 30432                                  ; ---------------------------------------------------------------------------
 30433                                  
 30434                                  	; 26/03/2023
 30435                                  DestDelete:
 30436 000041AC BA[9B9D]                	mov	dx,DestBuf
 30437 000041AF B441                    	mov	ah,Unlink ; 41h
 30438 000041B1 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 30439                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 30440                                  			;		(no wildcards allowed)
 30441 000041B3 C3                      	retn
 30442                                  
 30443                                  ; ---------------------------------------------------------------------------
 30444                                  
 30445                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30446                                  SOURCE_SET:
 30447 000041B4 56                      	push	si
 30448 000041B5 A1[D39E]                	mov	ax,[STARTEL]
 30449 000041B8 BE[589E]                	mov	si,ScanBuf	; adjust to copy
 30450 000041BB 29F0                    	sub	ax,si
 30451 000041BD BF[FE9D]                	mov	di,SrcBuf
 30452 000041C0 01F8                    	add	ax,di
 30453 000041C2 A3[FB9D]                	mov	[SrcTail],ax
 30454 000041C5 880E[FA9D]              	mov	[SrcSiz],cl	; save its size
 30455 000041C9 41                      	inc	cx		; include the nul
 30456 000041CA F3A4                    	rep	movsb		; save this source
 30457 000041CC 883E[FD9D]              	mov	[SrcInfo],bh	; save info about it
 30458 000041D0 5E                      	pop	si
 30459 000041D1 89E8                    	mov	ax,bp		; switches so far
 30460 000041D3 E8E802                  	call	SETASC		; set a,b switches accordingly
 30461 000041D6 E832E9                  	call	SWITCH		; get any more switches on this arg
 30462                                  	;call	SETASC		; set
 30463                                  	;retn
 30464                                  	; 26/03/2023
 30465 000041D9 E9E202                  	jmp	SETASC
 30466                                  
 30467                                  ; =============== S U B	R O U T	I N E =======================================
 30468                                  
 30469                                  ; MSDOS 6.0
 30470                                  
 30471                                  ;****************************************************************
 30472                                  ;*
 30473                                  ;* ROUTINE:	CleanupErr
 30474                                  ;*
 30475                                  ;* FUNCTION:	Issues extended error message for destination
 30476                                  ;*		if not alreay issued
 30477                                  ;*
 30478                                  ;* INPUT:	return from INT 21
 30479                                  ;*
 30480                                  ;* OUTPUT:	none
 30481                                  ;*
 30482                                  ;****************************************************************
 30483                                  
 30484                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30485                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30486                                  	; MSDOS 6.0 (MSDOS 5.0) COMMAND.COM
 30487                                  CleanUpErr:	;proc near		;AN022;
 30488                                  
 30489 000041DC 803E[109F]00            	cmp	byte [msg_flag],0	;AN022; have we already issued a message?
 30490 000041E1 7511                    	jnz	short CleanupErr_Cont	;AN022; yes - don't issue duplicate error
 30491 000041E3 E853DE                  	call	Set_Ext_Error_Msg	;AN022; set up error message
 30492 000041E6 C706[7F9D][9B9D]        	mov	word [string_ptr_2],DestBuf 
 30493                                  					;AN022; get address of failed string
 30494 000041EC C606[468F]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 30495                                  					;AN022; put number of subst in control block
 30496 000041F1 E8E111                  	call	std_eprintf		;AN022; issue the error message
 30497                                  CleanupErr_Cont:			;AN022;
 30498                                  getansw_8:	; 12/06/2023
 30499 000041F4 C3                      	retn				;AN022; return to caller
 30500                                  
 30501                                  ;CleanUpErr	endp			;AN022;
 30502                                  
 30503                                  
 30504                                  ; 12/06/2023
 30505                                  ; ---------------------------------------------------------------------------
 30506                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 30507                                  ; -----------------------------------------
 30508                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 30509                                  ; ---------------------------------------------------------------------------
 30510                                  
 30511                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30512                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:456Dh
 30513                                  
 30514                                  get_answer_YNA:
 30515 000041F5 C606[CF9E]00            	mov	byte [cox_dest_file],0	; clear validation flag
 30516 000041FA B80043                  	mov	ax,4300h
 30517 000041FD BA[9B9D]                	mov	dx,DestBuf
 30518 00004200 CD21                    	int	21h		; DOS -	2+ - GET FILE ATTRIBUTES
 30519                                  				; DS:DX	-> ASCIZ file name or directory
 30520                                  				; name without trailing	slash
 30521                                  	;jnc	short getansw_1
 30522                                  	;jmp	getansw_5
 30523                                  	; 12/06/2023
 30524 00004202 F5                      	cmc
 30525 00004203 73EF                    	jnc	short getansw_8 
 30526                                  getansw_1:
 30527 00004205 FE06[CF9E]              	inc	byte [cox_dest_file]	; valid destination file
 30528 00004209 8D36[C39E]              	lea	si,cox_sublist_buff
 30529 0000420D C7040B00                	mov	word [si],11		; sublist size, 11 bytes
 30530 00004211 C74402[9B9D]            	mov	word [si+2],DestBuf	; sublist value	(pointer)
 30531 00004216 8C5C04                  	mov	[si+4],ds		; sublist segment
 30532                                  	;mov	byte [si+6],1		; sub id (N of %N)
 30533 00004219 C6440710                	mov	byte [si+7],10h		; data type flags
 30534                                  	;mov	byte [si+8],0		; maximum length (chars)
 30535                                  	;mov	byte [si+9],0		; minimum length (chars)
 30536                                  	;mov	byte [si+10],0		; pad field character (0)
 30537                                  	; 12/06/2023
 30538 0000421D 31C9                    	xor	cx,cx
 30539 0000421F 894C08                  	mov	[si+8],cx ; 0
 30540 00004222 884C0A                  	mov	[si+10],cl ; 0
 30541 00004225 FEC1                    	inc	cl
 30542 00004227 884C06                  	mov	[si+6],cl ; 1	
 30543                                  
 30544                                  	; 12/06/2023
 30545                                  	;lea	si,cox_sublist_buff
 30546 0000422A B84F04                  	mov	ax,1103			; message number
 30547                                  					; 'Overwrite %1 (Yes/No/All)?'
 30548 0000422D BB0200                  	mov	bx,2			; std error (file handle = 2)
 30549                                  	; 12/06/2023
 30550                                  	;mov	cx,1			; byte count
 30551                                  	; cx = 1
 30552                                  	;mov	dh,0FFh			; message class	(utility)
 30553                                  	;xor	dl,dl			; control flag = 0
 30554 00004230 31D2                    	xor	dx,dx
 30555 00004232 FECE                    	dec	dh  ; dh = 0FFh
 30556 00004234 E87314                  	call	SYSDISPMSG
 30557                                  	; 12/06/2023
 30558                                  	;xor	bx,bx
 30559                                  	; bh = 0
 30560                                  getansw_2:
 30561 00004237 B8080C                  	mov	ax,0C08h
 30562 0000423A CD21                    	int	21h		; DOS -	CLEAR KEYBOARD BUFFER
 30563                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 30564                                  	;cmp	al,0
 30565                                  	;jz	short getansw_2
 30566                                  	; 12/06/2023
 30567 0000423C 20C0                    	and	al,al
 30568 0000423E 74F7                    	jz	short getansw_2
 30569 00004240 3C0D                    	cmp	al,0Dh
 30570 00004242 743B                    	je	short getansw_4
 30571 00004244 88C3                    	mov	bl,al
 30572 00004246 88C2                    	mov	dl,al
 30573 00004248 B82065                  	mov	ax,6520h
 30574 0000424B CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 30575                                  				; AL = function	-
 30576 0000424D 3A16[3D6D]              	cmp	dl,[_Y_es]		; 'Y' ?
 30577 00004251 740C                    	je	short getansw_3
 30578 00004253 3A16[3E6D]              	cmp	dl,[_N_o]		; 'N' ?
 30579 00004257 7406                    	je	short getansw_3
 30580 00004259 3A16[3F6D]              	cmp	dl,[_A_ll]		; 'A' ?
 30581 0000425D 75D8                    	jne	short getansw_2
 30582                                  getansw_3:
 30583 0000425F 88DF                    	mov	bh,bl
 30584 00004261 53                      	push	bx
 30585 00004262 881E[3C6D]              	mov	[MSG_1104],bl
 30586 00004266 B440                    	mov	ah,40h
 30587 00004268 BB0200                  	mov	bx,2			; std error (file handle = 2)
 30588 0000426B B90100                  	mov	cx,1			; byte count
 30589 0000426E BA[3C6D]                	mov	dx,MSG_1104
 30590 00004271 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 30591                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 30592 00004273 B440                    	mov	ah,40h
 30593 00004275 C606[3C6D]08            	mov	byte [MSG_1104],8	; backspace (move cursor to back)
 30594 0000427A CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 30595                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 30596 0000427C 5B                      	pop	bx
 30597 0000427D EBB8                    	jmp	short getansw_2
 30598                                  getansw_4:
 30599                                  	;cmp	bh,0
 30600                                  	;jz	short getansw_2
 30601                                  	; 12/06/2023
 30602 0000427F 08FF                    	or	bh,bh
 30603 00004281 74B4                    	jz	short getansw_2
 30604 00004283 88FA                    	mov	dl,bh
 30605 00004285 B82065                  	mov	ax,6520h
 30606 00004288 CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 30607                                  				; AL = function	-
 30608 0000428A 52                      	push	dx
 30609 0000428B B82E04                  	mov	ax,1070			; message number
 30610 0000428E BB0200                  	mov	bx,2			; std error (file handle = 2)
 30611 00004291 31C9                    	xor	cx,cx
 30612                                  	;mov	dh,0FFh			; message class	(utility)
 30613                                  	;xor	dl,dl
 30614                                  	; 12/06/2023
 30615 00004293 31D2                    	xor	dx,dx
 30616 00004295 FECE                    	dec	dh  ; dh = 0FFh
 30617 00004297 E81014                  	call	SYSDISPMSG
 30618 0000429A 5A                      	pop	dx
 30619 0000429B 3A16[3D6D]              	cmp	dl,[_Y_es]
 30620 0000429F 740B                    	jz	short getansw_5
 30621 000042A1 3A16[3E6D]              	cmp	dl,[_N_o]
 30622 000042A5 7406                    	jz	short getansw_6
 30623 000042A7 C606[CE9E]00            	mov	byte [cox_y_override],0
 30624                                  	; 12/06/2023
 30625                                  	;jmp	short $+2
 30626                                  getansw_5:
 30627                                  	; 12/06/2023
 30628                                  	;clc
 30629                                  	; cf = 0
 30630                                  	;jmp	short getansw_7
 30631                                  	; 12/06/2023
 30632 000042AC C3                      	retn
 30633                                  getansw_6:
 30634                                  gcpcmdo_2:	; 12/06/2023
 30635                                  gecpcmd_3:	; 12/06/2023
 30636 000042AD F9                      	stc
 30637                                  getansw_7:
 30638 000042AE C3                      	retn
 30639                                  
 30640                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30641                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:463Ah
 30642                                  init_copycmd_option:
 30643 000042AF C606[CE9E]01            	mov	byte [cox_y_override],1 ; suppress copy overwrite confirmation
 30644 000042B4 06                      	push	es
 30645 000042B5 8E06[D19B]              	mov	es,[RESSEG]
 30646 000042B9 268E06[3A04]            	mov	es,[es:EnvirSeg]
 30647 000042BE 8D36[DD96]              	lea	si,copycmd		; "COPYCMD="
 30648 000042C2 B90800                  	mov	cx,8
 30649 000042C5 E83500                  	call	getenv_copycmd
 30650 000042C8 7216                    	jc	short icpcmd_3
 30651 000042CA E82000                  	call	get_copycmd_option	; copycmd=/Y or copycmd=/-Y
 30652 000042CD 720F                    	jc	short icpcmd_2
 30653 000042CF 47                      	inc	di			; skip '/'
 30654 000042D0 268A05                  	mov	al,[es:di]
 30655 000042D3 24DF                    	and	al,0DFh			; convert to uppercase
 30656 000042D5 3C59                    	cmp	al,'Y'
 30657 000042D7 7505                    	jnz	short icpcmd_2
 30658                                  icpcmd_1:
 30659 000042D9 C606[CE9E]00            	mov	byte [cox_y_override],0	; clear copy overwrite question/confirmation
 30660                                  					; (don't suppress)
 30661                                  icpcmd_2:
 30662 000042DE 07                      	pop	es
 30663 000042DF C3                      	retn
 30664                                  icpcmd_3:				; ...
 30665 000042E0 8E06[D19B]              	mov	es,[RESSEG]
 30666 000042E4 803E[FD01]00            	cmp	byte [cox_Y_option],0	; default (/Y) switch option (1 = enabled)
 30667 000042E9 74F3                    	jz	short icpcmd_2
 30668 000042EB EBEC                    	jmp	short icpcmd_1
 30669                                  
 30670                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30671                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4679h
 30672                                  get_copycmd_option:
 30673 000042ED 26803D00                	cmp	byte [es:di],0
 30674 000042F1 74BA                    	jz	short gcpcmdo_2
 30675 000042F3 26803D2F                	cmp	byte [es:di],'/'
 30676 000042F7 7403                    	jz	short gcpcmdo_1
 30677 000042F9 47                      	inc	di
 30678 000042FA EBF1                    	jmp	short get_copycmd_option
 30679                                  gcpcmdo_1:
 30680                                  	; 12/06/2023
 30681                                  	;clc
 30682                                  	; cf = 0
 30683                                  	;jmp	short gcpcmdo_3
 30684                                  	; 12/06/2023
 30685 000042FC C3                      	retn
 30686                                  	; 12/06/2023
 30687                                  ;gcpcmdo_2:
 30688                                  ;	stc
 30689                                  ;gcpcmdo_3:
 30690                                  ;	retn
 30691                                  
 30692                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30693                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:468Dh
 30694                                  getenv_copycmd:
 30695 000042FD 31FF                    	xor	di,di
 30696 000042FF 30C0                    	xor	al,al
 30697                                  gecpcmd_1:
 30698                                  	;cmp	byte [es:di],0
 30699                                  	; 12/06/2023
 30700 00004301 263805                  	cmp	[es:di],al ; 0
 30701 00004304 74A7                    	jz	short gecpcmd_3
 30702 00004306 51                      	push	cx
 30703 00004307 56                      	push	si
 30704 00004308 F3A6                    	repe	cmpsb
 30705 0000430A 5E                      	pop	si
 30706 0000430B 59                      	pop	cx
 30707 0000430C 7409                    	jz	short gecpcmd_2 ; cf = 0
 30708 0000430E 51                      	push	cx
 30709 0000430F B90080                  	mov	cx,32768
 30710 00004312 F2AE                    	repne	scasb	; al = 0
 30711 00004314 59                      	pop	cx
 30712 00004315 EBEA                    	jmp	short gecpcmd_1
 30713                                  gecpcmd_2:
 30714                                  	;clc
 30715                                  	; 12/06/2023
 30716                                  	; cf = 0
 30717                                  	;jmp	short gecpcmd_4
 30718                                  	; 12/06/2023
 30719 00004317 C3                      	retn
 30720                                  	; 12/06/2023
 30721                                  ;gecpcmd_3:
 30722                                  ;	stc
 30723                                  ;gecpcmd_4:
 30724                                  ;	retn
 30725                                  
 30726                                  ;============================================================================
 30727                                  ; COPYPR1.ASM, MSDOS 6.0, 1991
 30728                                  ;============================================================================
 30729                                  ; 01/10/2018 - Retro DOS v3.0
 30730                                  
 30731                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2FBBh
 30732                                  
 30733                                  ; =============== S U B	R O U T	I N E =======================================
 30734                                  
 30735                                  ;***	TryFlush - flush copy buffer, double-check for concatenation
 30736                                  ;
 30737                                  ;	EXIT	ZR set if concatenate flag unchanged
 30738                                  
 30739                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30740                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3EEAh
 30741                                  
 30742                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30743                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46ADh
 30744                                  TRYFLUSH:
 30745 00004318 A0[E69B]                	mov	al,[Concat]
 30746 0000431B 50                      	push	ax
 30747                                  	;call	FLUSHFIL
 30748 0000431C E80600                  	call	FlshFil
 30749 0000431F 58                      	pop	ax
 30750 00004320 3A06[E69B]              	cmp	al,[Concat]
 30751 00004324 C3                      	retn
 30752                                  
 30753                                  ; =============== S U B	R O U T	I N E =======================================
 30754                                  
 30755                                  	; 26/03/2023
 30756                                  	; MSDOS 3.3
 30757                                  ;FLUSHFIL:
 30758                                  	;mov	al,[BINARY]
 30759                                  	;mov	ah,[ASCII]
 30760                                  	;push	ax
 30761                                  	;call	FLSHFIL
 30762                                  	;pop	ax
 30763                                  	;mov	[ASCII],ah
 30764                                  	;mov	[BINARY],al
 30765                                  	;retn
 30766                                  
 30767                                  ; =============== S U B	R O U T	I N E =======================================
 30768                                  
 30769                                  ;***	Flshfil - write out any data remaining in copy buffer.
 30770                                  ;
 30771                                  ;	Inputs:
 30772                                  ;	  [NXTADD] = No. of bytes to write
 30773                                  ;	  [CFLAG] <> 0 if file has been created
 30774                                  ;	Outputs:
 30775                                  ;	  [NXTADD] = 0
 30776                                  
 30777                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30778                                  	;
 30779                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 30780                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46BAh
 30781                                  FlshFil:
 30782 00004325 C606[B69E]00            	mov	byte [TERMREAD],0
 30783 0000432A 803E[F09B]00            	cmp	byte [CFLAG],0
 30784 0000432F 7403                    	jz	short NotExists
 30785 00004331 E99600                  	jmp	Exists
 30786                                  NotExists:
 30787 00004334 E8A101                  	call	BUILDDEST		; find out all about the destination
 30788 00004337 E8FA03                  	call	COMPNAME		; source and dest. the same?
 30789 0000433A 7519                    	jnz	short ProcDest		; if not, go ahead
 30790 0000433C 803E[579E]00            	cmp	byte [SRCISDEV],0
 30791 00004341 7512                    	jnz	short ProcDest		; same name on device ok
 30792 00004343 803E[E69B]00            	cmp	byte [Concat],0		; concatenation?
 30793 00004348 BA[708F]                	mov	dx,OVERWR_PTR
 30794                                  	;je	short COPERR		; not concatenating - overwrite error
 30795                                  	; 26/03/2023
 30796 0000434B 7503                    	jne	short No_Concat_Err
 30797 0000434D E91201                  	jmp	COPYERR
 30798                                  	
 30799                                  No_Concat_Err:	; concatenating
 30800 00004350 C606[B29E]01            	mov	byte [NOWRITE],1 	; flag not writing (just seeking)
 30801                                  ProcDest:
 30802                                  	; MSDOS 6.0
 30803                                  	;mov	ax,(ExtOpen<<8)		; open the file
 30804                                  	; 26/03/2023
 30805 00004355 B8006C                  	mov	ax,6C00h
 30806 00004358 BE[9B9D]                	mov	si,DestBuf		; get file name
 30807                                  ;M046
 30808                                  ; For writes, we want to deny writes by anyone else at the same time that we
 30809                                  ;are writing to it. For instance, on a network, 2 workstations could try
 30810                                  ;writing to the same file. Also, because we opened the source file with
 30811                                  ;DENY NONE, it is fine if the source and destination files are the same as
 30812                                  ;would happen when we append to an existing file.
 30813                                  
 30814                                  	; 26/03/2023
 30815                                  	;mov	bx,deny_write|write_open_mode
 30816 0000435B BB2100                  	mov	bx,21h			; get open mode for copy; M046
 30817 0000435E 31C9                    	xor	cx,cx			; no special files
 30818                                  	;mov	dx,write_open_flag	; set up open flags
 30819 00004360 BA0101                  	mov	dx,101h	
 30820                                  
 30821 00004363 803E[B29E]00            	cmp	byte [NOWRITE],0
 30822 00004368 7503                    	jne	short DoDestOpen	; don't actually create if nowrite set
 30823                                  	;mov	dx,creat_open_flag	; set up create flags
 30824 0000436A BA1201                  	mov	dx,112h
 30825                                  
 30826                                  	; 26/03/2023
 30827                                  	; MSDOS 3.3
 30828                                  	;mov	ax,(OPEN*256)+1 ; 3D01h ; open file, write access
 30829                                  	;cmp	byte [NOWRITE],0
 30830                                  	;jne	short DODESTOPEN
 30831                                  	;mov	ah,CREAT ; 3Ch
 30832                                  	;xor	cx,cx
 30833                                  ;DODESTOPEN:
 30834                                  	;mov	dx,DESTBUF
 30835                                  	;int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 30836                                  	;		; CX = attributes for file
 30837                                  	;		; DS:DX	-> ASCIZ filename (may include drive and path)
 30838                                  
 30839                                  ; 26/03/2023
 30840                                  ;	; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 301Ch
 30841                                  ;	;mov	dx,FULDIRPTR
 30842                                  ;	;call	GET_EXT_ERR_NUMBER
 30843                                  ;	;jc	short COPERR
 30844                                  ;
 30845                                  ;	; 01/10/2018
 30846                                  ;	;jnc	short DEST_OPEN_OKAY
 30847                                  ;		
 30848                                  ;	;mov	dx,FULDIRPTR
 30849                                  ;	;call	GET_EXT_ERR_NUMBER
 30850                                  ;	;jmp	short COPERR
 30851                                  ;
 30852                                  ;	jc	short DEST_OPEN_ERROR
 30853                                  
 30854                                  	; 26/03/2023
 30855                                  DoDestOpen:
 30856 0000436D CD21                    	int     21h	; DOS - 4.0 - EXTENDED OPEN/CREATE
 30857                                  			; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
 30858                                  			; BH = flags
 30859                                  			; CX = create attribute
 30860                                  			; DL = action if file exists/does not exists
 30861                                  			; DH = 00h (reserved), DS:SI -> ASCIZ file name
 30862                                  
 30863                                  ;	We assume that the error is normal.
 30864                                  ;	TriageError will correct the DX value appropriately.
 30865                                  	
 30866 0000436F 7311                    	jnc	short Dest_Open_Okay
 30867                                  Xa_Set_Error:				;AN030; error occurred on XA
 30868 00004371 E8C5DC                  	call	Set_Ext_Error_Msg	;AN030; get extended error
 30869                                  
 30870                                  	; 26/04/2023 - Retro DOS v4.0 ( 4.1) COMMAND.COM
 30871                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3F46h
 30872                                  Ext_Err_Set:				;AN030;
 30873 00004374 C706[7F9D][9B9D]        	mov	word [string_ptr_2],DestBuf
 30874                                  					;AN000; get address of failed string
 30875 0000437A C606[468F]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 30876                                  					;AN030; put number of subst in control block
 30877                                  CopErrJ2:				;AN030;
 30878 0000437F E9E000                  	jmp	COPYERR			;AN030; go issue message
 30879                                  
 30880                                  ;DEST_OPEN_OKAY:
 30881                                  	; 26/03/2023
 30882                                  Dest_Open_Okay:
 30883 00004382 A3[F29D]                	mov	[DESTHAND],ax		; save handle
 30884 00004385 C606[F09B]01            	mov	byte [CFLAG],1		; destination now exists
 30885 0000438A 89C3                    	mov	bx,ax
 30886 0000438C B80044                  	mov	ax,IOCTL*256 ; 4400h 	; get device stuff
 30887 0000438F CD21                    	int	21h	   	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 30888                                  			   	; BX = file or device handle
 30889                                  
 30890 00004391 8816[F49D]              	mov	[DESTISDEV],dl		; set dest info
 30891                                  	; 18/04/2023
 30892 00004395 F6C280                  	test	dl,80h
 30893                                  	;test	dl,devid_ISDEV
 30894 00004398 7430                    	jz	short Exists		; Dest not a device
 30895                                  
 30896                                  ;	Destination is device.
 30897                                  
 30898 0000439A A0[EC9B]                	mov	al,[DestSwitch]
 30899                                  	; 26/03/2023
 30900 0000439D 240C                    	and	al,0Ch
 30901                                  	;and	al,SWITCHA+SWITCHB ; 4+8
 30902 0000439F 7509                    	jnz	short TestBoth
 30903 000043A1 A0[B79E]                	mov	al,[ASCII]		; neither set, use current setting
 30904 000043A4 0A06[B39E]              	or	al,[BINARY]
 30905 000043A8 7416                    	jz	short ExSetA		; neither set, default to ascii
 30906                                  TestBoth:
 30907 000043AA 7A1E                    	jpe	short Exists		; both are set, ignore
 30908 000043AC A808                    	test	al,8
 30909                                  	;test	al,SWITCHB
 30910 000043AE 741A                    	jz	short Exists
 30911                                  	;mov	ax,(IOCTL shl 8) or 1
 30912 000043B0 B80144                  	mov	ax,(IOCTL<<8)|1 ; 4401h
 30913 000043B3 30F6                    	xor	dh,dh
 30914                                  	; 18/04/2023
 30915 000043B5 80CA20                  	or	dl,20h
 30916                                  	;or	dl,devid_RAW
 30917 000043B8 8816[F49D]              	mov	[DESTISDEV],dl
 30918 000043BC CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 30919                                  			; BX = device handle,DH = 0
 30920                                  			; DL = device information to set (bits 0-7 from	function 0)
 30921 000043BE EB0A                    	jmp	short Exists
 30922                                  
 30923                                  	; 26/03/2023
 30924                                  	; 01/10/2018 - Retro DOS v3.0 modification
 30925                                  ;DEST_OPEN_ERROR:
 30926                                  	;mov	dx,FULDIRPTR
 30927                                  	;call	GET_EXT_ERR_NUMBER
 30928                                  ;COPERR:
 30929                                  	; 26/03/2023
 30930                                  ;CopyErrj:
 30931                                  	;jmp	short COPYERR
 30932                                  
 30933                                  ExSetA:
 30934                                  ;	What we read in may have been in binary mode, flag zapped write OK
 30935                                  
 30936 000043C0 C606[B79E]04            	mov	byte [ASCII],4
 30937                                  	;mov	byte [ASCII],SWITCHA	; set ascii mode
 30938 000043C5 800E[B19E]04            	or	byte [INEXACT],4
 30939                                  	;or	byte [INEXACT],SWITCHA	; ascii -> inexact
 30940                                  Exists:
 30941 000043CA 803E[B29E]00            	cmp	byte [NOWRITE],0
 30942 000043CF 7524                    	jnz	short NoChecking	; if nowrite don't bother with name check
 30943 000043D1 803E[759D]01            	cmp	byte [plus_comma],1	; don't check if just doing +,,
 30944 000043D6 741D                    	jz	short NoChecking
 30945 000043D8 E85903                  	call	COMPNAME		; source and dest. the same?
 30946 000043DB 7518                    	jnz	short NoChecking	; if not, go ahead
 30947 000043DD 803E[579E]00            	cmp	byte [SRCISDEV],0
 30948 000043E2 7511                    	jne	short NoChecking	; same name on device ok
 30949                                  
 30950                                  ;	At this point we know in append (would have gotten overwrite error
 30951                                  ;	on first destination create otherwise), and user trying to specify
 30952                                  ;	destination which has been scribbled already (if dest had been named
 30953                                  ;	first, NoWrite would be set).
 30954                                  
 30955 000043E4 BA[738F]                	mov	dx,LOSTERR_PTR		; tell him he's not going to get it
 30956                                  	;invoke	Std_EprintF		;ac022;
 30957                                  	; 26/03/2023
 30958 000043E7 E8EB0F                  	call	std_eprintf ; MSDOS 6.0 (& 5.0)
 30959                                  	;call	STD_PRINTF  ; MSDOS 3.3	
 30960 000043EA C706[F69B]0000          	mov	word [NXTADD],0		; set return
 30961 000043F0 FE06[B69E]              	inc	byte [TERMREAD]		; tell read to give up
 30962                                  Ret60:
 30963 000043F4 C3                      	retn
 30964                                  
 30965                                  NoChecking:
 30966 000043F5 8B1E[F29D]              	mov	bx,[DESTHAND]		; get handle
 30967 000043F9 31C9                    	xor	cx,cx
 30968 000043FB 870E[F69B]              	xchg	cx,[NXTADD]
 30969 000043FF E3F3                    	jcxz	Ret60			; if nothing to write, forget it
 30970 00004401 FF06[B49E]              	inc	word [WRITTEN]		; flag that we wrote something
 30971 00004405 803E[B29E]00            	cmp	byte [NOWRITE],0	; if nowrite set, just seek cx bytes
 30972 0000440A 7514                    	jnz	short SeekEnd
 30973 0000440C 31D2                    	xor	dx,dx
 30974 0000440E 1E                      	push	ds
 30975 0000440F 8E1E[D39B]              	mov	ds,[TPA]
 30976 00004413 B440                    	mov	ah,Write ; 40h
 30977 00004415 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 30978                                  			; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 30979 00004417 1F                      	pop	ds
 30980 00004418 BA[588F]                	mov	dx,NOSPACE_PTR
 30981                                  	;jc	short COPERRP		; failure
 30982                                  	; 26/03/2023
 30983                                  	; MSDOS 6.0
 30984 0000441B 7326                    	jnc	short NoChecking2
 30985 0000441D E951FF                  	jmp	Xa_Set_Error
 30986                                  
 30987                                  	; 18/04/2023
 30988                                  	; 26/03/2023
 30989                                  SeekEnd:
 30990 00004420 31D2                    	xor	dx,dx
 30991 00004422 87D1                    	xchg	dx,cx
 30992                                  	;mov	ax,(LSEEK shl 8) or 1
 30993 00004424 B80142                  	mov	ax,(LSEEK<<8)|1 ; 4201h
 30994 00004427 CD21                    	int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 30995                                  				; AL = method: offset from present location
 30996                                  
 30997                                  	; 26/03/2023
 30998                                  	; MSDOS 6.0
 30999                                  
 31000                                  ;	Save the file pointer in DX:AX to restore the file
 31001                                  ;	with in case the copy should fail.
 31002                                  
 31003 00004429 A3[BE9E]                	mov	[OFilePtr_Lo],ax
 31004 0000442C 8916[C09E]              	mov	[OFilePtr_Hi],dx
 31005                                  
 31006                                  	; 26/03/2023
 31007                                  	; MSDOS 3.3  MSDOS 6.0
 31008                                  
 31009 00004430 803E[E49B]00            	cmp	byte [RDEOF],0
 31010 00004435 740B                    	jz	short Retz60
 31011                                  
 31012                                  ;	^Z has been read - we must set the file size to the current
 31013                                  ;	file pointer location
 31014                                  
 31015 00004437 B440                    	mov	ah,Write ; 40h
 31016 00004439 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 31017                                  				; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 31018                                  
 31019                                  	; 26/03/2023
 31020                                  	; MSDOS 6.0
 31021 0000443B 727E                    	jc	short Xa_Set_Error_Jmp	;AC022; failure
 31022                                  
 31023                                  ;	Make note that ^Z was removed, in case the
 31024                                  ;	copy should fail and we need to restore the file.
 31025                                  
 31026 0000443D C606[C29E]1A            	mov	byte [OCtrlZ],1Ah
 31027                                  Retz60:
 31028 00004442 C3                      	retn
 31029                                  
 31030                                  NoChecking2:
 31031 00004443 29C1                    	sub	cx,ax
 31032 00004445 74AD                    	jz	short Ret60		; wrote all supposed to
 31033                                  	; 18/04/2023
 31034 00004447 F606[F49D]80            	test	byte [DESTISDEV],80h ; devid_ISDEV
 31035                                  	;test	byte [DESTISDEV],devid_ISDEV ;80h
 31036 0000444C 7414                    	jz	short COPYERR		; is a file, error
 31037 0000444E F606[F49D]20            	test	byte [DESTISDEV],20h  ; devid_RAW
 31038                                  	;test	byte [DESTISDEV],devid_RAW ; 20h
 31039 00004453 750A                    	jnz	short DevWrtErr	; is a raw device, error
 31040 00004455 803E[B19E]00            	cmp	byte [INEXACT],0
 31041 0000445A 7598                    	jnz	short Ret60		; inexact so ok
 31042 0000445C 49                      	dec	cx
 31043                                  ;Retz60:
 31044 0000445D 7495                    	jz	short Ret60		; wrote one byte less (the ^z)		
 31045                                  
 31046                                  DevWrtErr:
 31047 0000445F BA[0091]                	mov	dx,DEVWMES_PTR
 31048                                  	; 26/03/2023
 31049                                  COPYERR:
 31050                                  	;invoke	Std_EPrintF		;AC022;
 31051 00004462 E8700F                  	call	std_eprintf  ; MSDOS 6.0
 31052                                  	;call	STD_PRINTF   ; MSDOS 3.3
 31053                                  CopErrP:
 31054 00004465 FE06[F19B]              	inc	byte [DestClosed]
 31055 00004469 803E[F09B]00            	cmp	byte [CFLAG],0
 31056 0000446E 7448                    	jz	short EndCopyJ		; never actually got it open
 31057 00004470 8B1E[F29D]              	mov	bx,[DESTHAND]
 31058 00004474 83FB00                  	cmp	bx,0
 31059 00004477 7E33                    	jle	short NoClose
 31060                                  
 31061                                  ;	Check to see if we should save part of the destination file.
 31062                                  
 31063                                  	; 26/03/2023
 31064                                  	; MSDOS 6.0
 31065 00004479 8B0E[C09E]              	mov	cx,[OFilePtr_Hi]	; CX = hi word of original file ptr
 31066 0000447D 8B16[BE9E]              	mov	dx,[OFilePtr_Lo]	; DX = lo word of original file ptr
 31067                                  			
 31068 00004481 89C8                    	mov	ax,cx
 31069 00004483 09D0                    	or	ax,dx
 31070 00004485 7421                    	jz	short ceClose		; null file ptr means nothing to save
 31071                                  
 31072                                  ;	Destination was also the first source. Do the best we can to
 31073                                  ;	restore it. Truncate it back to the size we took from it (which
 31074                                  ;	may have been due to a Ctrl-Z, so may not have included the whole
 31075                                  ;	file). If a Ctrl-Z was originally read, put it back.
 31076                                  
 31077 00004487 B80042                  	mov	ax,(LSEEK<<8) ; 4200h
 31078 0000448A CD21                    	int	21h
 31079                                  
 31080 0000448C 31C9                    	xor	cx,cx			; CX = # bytes to write = 0
 31081 0000448E B440                    	mov	ah,Write ; 40h
 31082 00004490 CD21                    	int	21h			; truncate file
 31083                                  
 31084 00004492 803E[C29E]00            	cmp	byte [OCtrlZ],0
 31085 00004497 7408                    	je	short ceClose0		; no ctrl-z removed from original
 31086 00004499 41                      	inc	cx			; CX = # bytes to write = 1
 31087 0000449A BA[C29E]                	mov	dx,OCtrlZ		; DS:DX = ptr to original ctrl-z
 31088 0000449D B440                    	mov	ah,Write ; 40h
 31089 0000449F CD21                    	int	21h			; write ctrl-z
 31090                                  ceClose0:
 31091 000044A1 B43E                    	mov	ah,CLOSE ; 3Eh
 31092 000044A3 CD21                    	int	21h			; close it
 31093                                  ;;	;mov	byte [CFLAG],0
 31094 000044A5 E9ECF8                  	jmp	ENDCOPY			; and go home
 31095                                  
 31096                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31097                                  ceClose:
 31098 000044A8 B43E                    	mov	ah,CLOSE ; 3Eh		; close the file
 31099 000044AA CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 31100                                  				; BX = file handle
 31101                                  NoClose:
 31102 000044AC BA[9B9D]                	mov	dx,DestBuf
 31103 000044AF B441                    	mov	ah,Unlink ; 41h 	; and delete it
 31104 000044B1 CD21                    	int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
 31105                                  				; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
 31106 000044B3 C606[F09B]00            	mov	byte [CFLAG],0
 31107                                  EndCopyJ:
 31108 000044B8 E9D9F8                  	jmp	ENDCOPY
 31109                                  
 31110                                  Xa_Set_Error_Jmp:			;AN022; go set up error message
 31111 000044BB E9B3FE                  	jmp	Xa_Set_Error
 31112                                  
 31113                                  ;============================================================================
 31114                                  ; COPYPR2.ASM, MSDOS 6.0, 1991
 31115                                  ;============================================================================
 31116                                  ; 01/10/2018 - Retro DOS v3.0
 31117                                  
 31118                                  ; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 311Fh
 31119                                  
 31120                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31121                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4095h
 31122                                  
 31123                                  ; =============== S U B	R O U T	I N E =======================================
 31124                                  
 31125                                  ;***	SetAsc - set Ascii, Binary, Inexact flags based on switches
 31126                                  ;
 31127                                  ;	Given switch vector in AX,
 31128                                  ;	  Set Ascii flag if /a is set
 31129                                  ;	  Clear Ascii flag if /b is set
 31130                                  ;	  Binary set if /b specified
 31131                                  ;	  Leave Ascii unchanged if neither or both are set
 31132                                  ; 	Also sets Inexact if Ascii is ever set. 
 31133                                  ;	AL = Ascii on exit, flags set
 31134                                  
 31135                                  	; 26/03/2023
 31136                                  SETASC:
 31137                                  	;and	al,SWITCHA+SWITCHB ; 0Ch ; AL = /a, /b flags
 31138 000044BE 240C                    	and	al,0Ch ; 4+8
 31139 000044C0 7A10                    	jpe	short LOADSW	; even parity - both or neither
 31140 000044C2 50                      	push	ax
 31141                                  	;and	al,SWITCHB  ; 8
 31142 000044C3 2408                    	and	al,8
 31143 000044C5 A2[B39E]                	mov	[BINARY],al
 31144 000044C8 58                      	pop	ax
 31145                                  	;and	al,SWITCHA
 31146 000044C9 2404                    	and	al,4	
 31147 000044CB A2[B79E]                	mov	[ASCII],al
 31148 000044CE 0806[B19E]              	or	[INEXACT],al
 31149                                  LOADSW:
 31150 000044D2 A0[B79E]                	mov	al,[ASCII]
 31151 000044D5 08C0                    	or	al,al
 31152 000044D7 C3                      	retn
 31153                                  
 31154                                  ; =============== S U B	R O U T	I N E =======================================
 31155                                  
 31156                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31157                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 31158                                  BUILDDEST:
 31159 000044D8 803E[969D]FF            	cmp	byte [DestIsDir],-1 ; 0FFh
 31160 000044DD 750C                    	jnz	short KNOWABOUTDEST	; figuring already done
 31161 000044DF BF[B39A]                	mov	di,USERDIR1
 31162 000044E2 BD[969D]                	mov	bp,DestVars
 31163 000044E5 E8E000                  	call	BUILDPATH
 31164 000044E8 E8FFE2                  	call	RestUDir1
 31165                                  
 31166                                  ;	We now know all about the destination
 31167                                  
 31168                                  KNOWABOUTDEST:
 31169 000044EB 30C0                    	xor	al,al
 31170 000044ED 8606[F59D]              	xchg	al,[FIRSTDEST]
 31171 000044F1 08C0                    	or	al,al
 31172 000044F3 7503                    	jnz	short FIRSTDST
 31173 000044F5 E98D00                  	jmp	NOFIRSTDEST
 31174                                  
 31175                                  FIRSTDST:
 31176                                  ;	Create an fcb of the original dest.
 31177                                  
 31178 000044F8 8B36[989D]              	mov	si,[DestTail]
 31179 000044FC BF[D59C]                	mov	di,DestFcb
 31180 000044FF B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 31181 00004502 CD21                    	int	21h		; DOS -	PARSE FILENAME
 31182                                  				; DS:SI	-> string to parse
 31183                                  				; ES:DI	-> buffer to fill with unopened	FCB
 31184                                  				; AL = bit mask	to control parsing
 31185 00004504 803C00                  	cmp	byte [si],0
 31186 00004507 7406                    	jz	short GOODPARSE
 31187                                  
 31188                                  	; 27/03/2023	
 31189                                  	; MSDOS 6.0
 31190                                  	;mov	byte [di+1],"|"	;AD052; must be illegal file name character
 31191                                  	
 31192 00004509 BA[5E8F]                	mov	dx,FULLDIR_PTR		;AN052; issue "file creation error"
 31193 0000450C E953FF                  	jmp	COPYERR			;AN052;
 31194                                  GOODPARSE:
 31195 0000450F A1[9B9D]                	mov	ax,[DestBuf]		; AX = possible "d:"
 31196 00004512 80FC3A                  	cmp	ah,':'
 31197 00004515 7402                    	jz	short DRVSPEC4
 31198 00004517 B040                    	mov	al,'@'  ; 40h
 31199                                  DRVSPEC4:
 31200                                  ;	AX = "d:" for following FCB drive computation
 31201                                  
 31202 00004519 8A0E[B79E]              	mov	cl,[ASCII]		; CL = saved Ascii flag
 31203 0000451D 0C20                    	or	al,20h
 31204 0000451F 2C60                    	sub	al,60h
 31205 00004521 A2[D59C]                	mov	[DestFcb],al		; store drive # in FCB
 31206                                  
 31207                                  ;*	Figure out what copy mode we're in.
 31208                                  ;	Letters stand for unambiguous, * for ambiguous pathnames.
 31209                                  ;	+n stands for additional sources delimited by +'s.
 31210                                  ;
 31211                                  ;	copy a b	not concatenating
 31212                                  ;	copy a *	not concatenating
 31213                                  ;	copy * a	concatenating
 31214                                  ;	copy * *	not concatenating
 31215                                  ;	copy a+n b	concatenating
 31216                                  ;	copy *+n a	concatenating
 31217                                  ;	copy *+n *	concatenating, Mel Hallerman style
 31218                                  
 31219                                  ;	Bugbug:  copy *.a+a.b *.t  picks up only 1st *.a file.. Why?
 31220                                  ;		 copy a.b+*.a *.t  picks up all *.a files.
 31221                                  
 31222 00004524 A0[9A9D]                	mov	al,[DestInfo]		; AL = destination CParse flags
 31223 00004527 8A26[FD9D]              	mov	ah,[SrcInfo]		; AH = source CParse flags
 31224 0000452B 250202                  	and	ax,202h			; AH,AL = source,dest wildcard flags
 31225 0000452E 08C0                    	or	al,al
 31226 00004530 7413                    	jz	short NOTMELCOPY 	; no destination wildcard
 31227                                  
 31228                                  ;	Destination is wildcarded.
 31229                                  	
 31230 00004532 38E0                    	cmp	al,ah
 31231 00004534 750F                    	jnz	short NOTMELCOPY ; no source wildcard
 31232                                  
 31233                                  ;	Source and destination are both wildcarded.
 31234                                  
 31235 00004536 803E[B89E]00            	cmp	byte [PLUS],0
 31236 0000453B 7408                    	jz	short NOTMELCOPY	; no +'s in source
 31237                                  
 31238                                  ;	Source and destination are wildcarded, and source includes +'s.
 31239                                  ;	It's Mel Hallorman copy time.
 31240                                  
 31241 0000453D FE06[F69D]              	inc	byte [MELCOPY]		; 'Mel copy' = true
 31242 00004541 30C0                    	xor	al,al
 31243 00004543 EB06                    	jmp	short SETCONC
 31244                                  
 31245                                  NOTMELCOPY:
 31246 00004545 3402                    	xor	al,2			; AL=0 -> ambiguous destination, 2 otherwise
 31247 00004547 20E0                    	and	al,ah
 31248 00004549 D0E8                    	shr	al,1			; AL=1 -> ambiguous source, unambiguous dest
 31249                                  					;   (implies concatenation)
 31250                                  SETCONC:
 31251 0000454B 0A06[B89E]              	or	al,[PLUS]		; "+" always infers concatenation
 31252                                  
 31253                                  ;	Whew. AL = 1 if concatenating, 0 if not.
 31254                                  
 31255 0000454F A2[E69B]                	mov	[Concat],al
 31256 00004552 D0E0                    	shl	al,1
 31257 00004554 D0E0                    	shl	al,1
 31258 00004556 A2[B19E]                	mov	[INEXACT],al		; concatenation -> inexact copy
 31259 00004559 803E[B39E]00            	cmp	byte [BINARY],0
 31260 0000455E 7525                    	jne	short NOFIRSTDEST 	; explicit binary copy	
 31261                                  
 31262                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 31263                                  	; MSDOS 6.0 (MSDOS.50)
 31264                                  	;mov	[ASCII],al		; otherwise, concatenate in ascii mode
 31265                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:48FAh
 31266 00004560 0806[B79E]              	or	[ASCII],al	
 31267                                  
 31268 00004564 08C9                    	or	cl,cl
 31269 00004566 751D                    	jnz	short NOFIRSTDEST 	; Ascii flag set before, data read correctly	
 31270 00004568 08C0                    	or	al,al
 31271 0000456A 7419                    	jz	short NOFIRSTDEST 	; Ascii flag did not change state
 31272                                  
 31273                                  ;	At this point there may already be binary read data in the read
 31274                                  ;	buffer. We need to find the first ^Z (if there is one) and trim the
 31275                                  ;	amount of data in the buffer correctly.
 31276                                  
 31277 0000456C 8B0E[F69B]              	mov	cx,[NXTADD]
 31278 00004570 E313                    	jcxz	NOFIRSTDEST		; no data, everything ok
 31279 00004572 B01A                    	mov	al,1Ah
 31280 00004574 06                      	push	es
 31281 00004575 31FF                    	xor	di,di
 31282 00004577 8E06[D39B]              	mov	es,[TPA]
 31283 0000457B F2AE                    	repne	scasb			; scan for EOF
 31284 0000457D 07                      	pop	es
 31285 0000457E 7505                    	jnz	short NOFIRSTDEST 	; no ^z in buffer, everything ok
 31286 00004580 4F                      	dec	di			; point at ^z
 31287 00004581 893E[F69B]              	mov	[NXTADD],di		; new buffer length
 31288                                  
 31289                                  NOFIRSTDEST:
 31290 00004585 BB[199D]                	mov	bx,DIRBUF+1		; Source of replacement chars
 31291 00004588 803E[E69B]00            	cmp	byte [Concat],0
 31292 0000458D 7403                    	jz	short GOTCHRSRC		; Not a concat
 31293 0000458F BB[5F9D]                	mov	bx,SDIRBUF+1		; Source of replacement chars
 31294                                  GOTCHRSRC:
 31295 00004592 BE[D69C]                	mov	si,DestFcb+1		; Original dest name
 31296 00004595 8B3E[989D]              	mov	di,[DestTail]		; Where to put result
 31297                                  
 31298                                  ; --------------- S U B	R O U T	I N E --------------------------------------- 
 31299                                  
 31300                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31301                                  BUILDNAME:
 31302 00004599 B90800                  	mov	cx,8
 31303                                  BUILDMAIN:
 31304 0000459C AC                      	lodsb
 31305 0000459D 3C3F                    	cmp	al,'?'
 31306 0000459F 7502                    	jne	short NOTAMBIG
 31307 000045A1 8A07                    	mov	al,[bx]
 31308                                  NOTAMBIG:
 31309 000045A3 3C20                    	cmp	al,' '
 31310 000045A5 7401                    	je	short NOSTORE
 31311 000045A7 AA                      	stosb
 31312                                  NOSTORE:
 31313 000045A8 43                      	inc	bx
 31314 000045A9 E2F1                    	loop	BUILDMAIN
 31315 000045AB B103                    	mov	cl,3
 31316                                  	;mov	al,' ' ; 20h
 31317                                  	;cmp	[si],al
 31318                                  	; 27/03/2023
 31319 000045AD 803C20                  	cmp	byte [si],20h ; ' '
 31320 000045B0 7412                    	je	short ENDDEST		; No extension
 31321                                  	;mov	al,[DOT_CHR]
 31322                                  	; 27/03/2023
 31323 000045B2 B02E                    	mov	al,'.' ; 2Eh ; dot_chr
 31324 000045B4 AA                      	stosb
 31325                                  BUILDEXT:
 31326 000045B5 AC                      	lodsb
 31327 000045B6 3C3F                    	cmp	al,'?'
 31328 000045B8 7502                    	jne	short NOTAMBIGE
 31329 000045BA 8A07                    	mov	al,[bx]
 31330                                  NOTAMBIGE:
 31331 000045BC 3C20                    	cmp	al,' '
 31332 000045BE 7401                    	je	short NOSTOREE
 31333 000045C0 AA                      	stosb
 31334                                  NOSTOREE:
 31335 000045C1 43                      	inc	bx
 31336 000045C2 E2F1                    	loop	BUILDEXT
 31337                                  ENDDEST:
 31338 000045C4 30C0                    	xor	al,al
 31339 000045C6 AA                      	stosb				; NUL terminate
 31340 000045C7 C3                      	retn
 31341                                  
 31342                                  ; =============== S U B	R O U T	I N E =======================================
 31343                                  
 31344                                  	; 28/03/2023
 31345                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31346                                  	;
 31347                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31348                                  BUILDPATH:
 31349 000045C8 F6460402                	test	byte [bp+VARSTRUC.INFO],2 ; test byte [bp+4],2
 31350 000045CC 7543                    	jnz	short NOTPFILE		; If ambig don't bother with open
 31351 000045CE 89EA                    	mov	dx,bp			; Set DX to spec
 31352 000045D0 83C205                  	add	dx,VARSTRUC.BUF 	; add dx,5
 31353                                  
 31354                                  	; 27/03/2023
 31355                                  	; MSDOS 6.0
 31356 000045D3 57                      	push	di			;AN000;
 31357 000045D4 B8006C                  	mov	ax,(ExtOpen<<8)	; 6C00h	;AC000; open the file
 31358                                  	;mov	bx,deny_none|read_open_mode
 31359 000045D7 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 31360 000045DA 31C9                    	xor	cx,cx			;AN000; no special files
 31361 000045DC 89D6                    	mov	si,dx			;AN030; get file name offset
 31362                                  	;mov	dx,read_open_flag	;AN000; set up open flags
 31363 000045DE BA0101                  	mov	dx,101h
 31364 000045E1 CD21                    	INT	21h
 31365 000045E3 5F                      	pop	di			;AN000;
 31366 000045E4 7315                    	jnc	short PURE_FILE		;AN022; is pure file
 31367 000045E6 E860DA                  	call	get_ext_error_number	;AN022; get the extended error
 31368                                  	;cmp	ax,2
 31369 000045E9 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ;AN022; if file not found - okay
 31370 000045EC 7423                    	jz	short NOTPFILE		;AN022;
 31371                                  	;cmp	ax,3
 31372 000045EE 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 31373 000045F1 741E                    	jz	short NOTPFILE		;AN022;
 31374                                  	;cmp	ax,5
 31375 000045F3 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 31376 000045F6 7419                    	jz	short NOTPFILE		;AN022;
 31377 000045F8 E983D7                  	jmp	extend_setup		;AN022; exit with error
 31378                                  
 31379                                  	; 27/03/2023
 31380                                  	; MSDOS 3.3
 31381                                  	;mov	ax,OPEN*256 ; 3D00h
 31382                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 31383                                  	;			; DS:DX	-> ASCIZ filename
 31384                                  	;			; AL = access mode
 31385                                  	;			; 0 - read
 31386                                  	;jc	short NOTPFILE
 31387                                  
 31388                                  PURE_FILE:
 31389 000045FB 89C3                    	mov	bx,ax
 31390 000045FD B80044                  	mov	ax,IOCTL*256 ; 4400h
 31391 00004600 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 31392                                  				; BX = file or device handle
 31393 00004602 B43E                    	mov	ah,CLOSE ;3Eh
 31394 00004604 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 31395                                  				; BX = file handle
 31396                                  	; 18/04/2023
 31397 00004606 F6C280                  	test	dl,80h
 31398                                  	;test	dl,devid_ISDEV ; test dl,80h
 31399 00004609 7553                    	jnz	short ISADEV
 31400 0000460B F6460404                	test	byte [bp+VARSTRUC.INFO],4 ; test byte [bp+4],4
 31401 0000460F 744D                    	jz	short ISADEV
 31402                                  NOTPFILE:
 31403 00004611 8B5605                  	mov	dx,[bp+VARSTRUC.BUF] ; mov dx,[bp+5]
 31404                                  	
 31405                                  	; 27/03/2023	
 31406                                  	; MSDOS 6.0
 31407 00004614 80FA00                  	cmp	dl,0		     	;AN034; If no drive specified, get
 31408 00004617 7405                    	je	short SET_DRIVE_SPEC	;AN034;    default drive dir
 31409                                  
 31410 00004619 80FE3A                  	cmp	dh,':'
 31411 0000461C 7402                    	je	short DRVSPEC5
 31412                                  SET_DRIVE_SPEC:
 31413 0000461E B240                    	mov	dl,'@' ; 40h
 31414                                  DRVSPEC5:
 31415 00004620 80CA20                  	or	dl,20h
 31416 00004623 80EA60                  	sub	dl,60h		; A = 1
 31417 00004626 E8F3E2                  	call	SAVUDIR1
 31418                                  	
 31419                                  	; 27/03/2023
 31420                                  	; MSDOS 6.0
 31421 00004629 7306                    	jnc	short CURDIR_OK		;AN022; if error - exit
 31422 0000462B E81BDA                  	call	get_ext_error_number	;AN022; get the extended error
 31423 0000462E E94DD7                  	jmp	extend_setup		;AN022; exit with error
 31424                                  
 31425                                  CURDIR_OK:
 31426 00004631 89EA                    	mov	dx,bp
 31427                                  	;add	dx,5
 31428 00004633 83C205                  	add	dx,VARSTRUC.BUF		; Set DX for upcomming CHDIRs
 31429                                  	;mov	bh,[bp+4]
 31430 00004636 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 31431 00004639 80E706                  	and	bh,6
 31432 0000463C 80FF06                  	cmp	bh,6			; Ambig and path ?
 31433 0000463F 7518                    	jne	short CHECKAMB		; jmp if no
 31434                                  	;mov	si,[bp+2]
 31435 00004641 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 31436 00004644 B33A                    	mov	bl,':'
 31437 00004646 385CFE                  	cmp	[si-2],bl
 31438 00004649 7506                    	jne	short KNOWNOTSPEC
 31439                                  	;mov	byte [bp+VARSTRUC.ISDIR],2
 31440                                  					; Know is d:/file
 31441                                  	;mov	byte [bp+0],2
 31442 0000464B C6460002                	mov	byte [bp],2
 31443 0000464F EB05                    	jmp	short DOPCDJ
 31444                                  KNOWNOTSPEC:
 31445                                  	;mov	byte [bp+VARSTRUC.ISDIR],1
 31446                                  					; Know is path/file
 31447                                  	;mov	byte [bp+0],1		
 31448 00004651 C6460001                	mov	byte [bp],1
 31449 00004655 4E                      	dec	si
 31450                                  DOPCDJ:
 31451 00004656 E98300                  	jmp	DOPCD
 31452                                  CHECKAMB:
 31453 00004659 80FF02                  	cmp	bh,2
 31454 0000465C 7505                    	jnz	short CHECKCD
 31455                                  ISSIMPFILE:
 31456                                  ISADEV:
 31457                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 31458                                  	;mov	byte [bp+0],0		
 31459 0000465E C6460000                	mov	byte [bp],0
 31460 00004662 C3                      	retn
 31461                                  CHECKCD:
 31462 00004663 E875EA                  	call	SetRest1
 31463 00004666 B43B                    	mov	ah,CHDir ; 3Bh
 31464 00004668 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 31465                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 31466 0000466A 7239                    	jb	short NOTPDIR
 31467 0000466C 89D7                    	mov	di,dx
 31468 0000466E 31C0                    	xor	ax,ax
 31469 00004670 89C1                    	mov	cx,ax
 31470 00004672 49                      	dec	cx
 31471                                  	; 14/06/2023
 31472                                  	;repne	scasb	 ; MSDOS 3.3
 31473                                  
 31474                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31475                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:424Ah)
 31476                                  	; MSDOS 6.0
 31477                                  Kloop:					;AN000;  3/3/KK
 31478 00004673 268A05                  	mov	al,[es:di]		;AN000;  3/3/KK
 31479 00004676 47                      	inc	di			;AN000;  3/3/KK
 31480 00004677 08C0                    	or	al,al			;AN000;  3/3/KK
 31481 00004679 740C                    	jz	short DONE		;AN000;  3/3/KK
 31482 0000467B 30E4                    	xor	ah,ah			;AN000;  3/3/KK
 31483 0000467D E8A8E0                  	call	testkanj		;AN000;  3/3/KK
 31484 00004680 74F1                    	jz	short Kloop		;AN000;  3/3/KK
 31485 00004682 47                      	inc	di			;AN000;  3/3/KK
 31486 00004683 FEC4                    	inc	ah			;AN000;  3/3/KK
 31487 00004685 EBEC                    	jmp	short Kloop		;AN000;  3/3/KK
 31488                                  DONE:
 31489 00004687 4F                      	dec	di
 31490 00004688 A0[D69B]                	mov	al,[DIRCHAR]
 31491                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 31492                                  	;mov	byte [bp+0],2
 31493 0000468B C6460002                	mov	byte [bp],2
 31494                                  	; 27/03/2023
 31495                                  	; MSDOS 6.0
 31496 0000468F 08E4                    	or	ah,ah			;AN000; 3/3/KK
 31497 00004691 7505                    	jnz	short _STORE_PCHAR	;AN000; 3/3/KK	 this is the tra
 31498                                  	;
 31499 00004693 3A45FF                  	cmp	al,[di-1]
 31500 00004696 7405                    	jz	short GOTSRCSLSH
 31501                                  _STORE_PCHAR:
 31502 00004698 AA                      	stosb
 31503                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 ; know path/file
 31504                                  	;mov	byte [bp+0],1
 31505 00004699 C6460001                	mov	byte [bp],1
 31506                                  GOTSRCSLSH:
 31507                                  	;or	byte [bp+4],6
 31508 0000469D 804E0406                	or 	byte [bp+VARSTRUC.INFO],6 
 31509 000046A1 E87400                  	call	SETSTARS
 31510                                  NOTPDIR_RETN:
 31511 000046A4 C3                      	retn
 31512                                  
 31513                                  	; 28/03/2023
 31514                                  NOTPDIR:
 31515                                  	; MSDOS 6.0
 31516 000046A5 E8A1D9                  	call	get_ext_error_number	;AN022; get the extended error
 31517                                  	;cmp	ax,3
 31518 000046A8 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 31519 000046AB 7405                    	je	short NOTPDIR_TRY	;AN022;
 31520                                  	;cmp	ax,5
 31521 000046AD 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 31522 000046B0 7560                    	jne	short EXTEND_SETUPJ	;AN022; otherwise - exit error
 31523                                  NOTPDIR_TRY:
 31524                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31525                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 31526                                  	;mov	byte [bp+0],0
 31527 000046B2 C6460000                	mov	byte [bp],0
 31528                                  	;mov	bh,[bp+4]
 31529 000046B6 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 31530 000046B9 F6C704                  	test	bh,4
 31531 000046BC 74E6                    	jz	short NOTPDIR_RETN	; Know pure file, no path seps
 31532                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 31533                                  	;mov	byte [bp+0],2		
 31534 000046BE C6460002                	mov	byte [bp],2
 31535                                  	;mov	si,[bp+2]
 31536 000046C2 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 31537 000046C5 803C00                  	cmp	byte [si],0
 31538 000046C8 744B                    	je	short BADCDERRJ2	; Trailing '/'	
 31539                                  	;mov	bl,[DOT_CHR]
 31540                                  	; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 31541                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 31542 000046CA B32E                    	mov	bl,'.'  ; 2Eh ; dot_chr
 31543 000046CC 381C                    	cmp	[si],bl
 31544 000046CE 7445                    	je	short BADCDERRJ2	; If . or .. pure cd should have worked
 31545 000046D0 B33A                    	mov	bl,':'  ; 3Ah
 31546 000046D2 385CFE                  	cmp	[si-2],bl
 31547 000046D5 7405                    	je	short DOPCD		; Know d:/file
 31548                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 
 31549                                  					; Know path/file
 31550                                  	;mov	byte [bp+0],1
 31551 000046D7 C6460001                	mov	byte [bp],1
 31552 000046DB 4E                      	dec	si			; Point at last '/'
 31553                                  DOPCD:
 31554 000046DC 30DB                    	xor	bl,bl
 31555 000046DE 861C                    	xchg	bl,[si]			; Stick in a NUL
 31556 000046E0 E8F8E9                  	call	SetRest1
 31557                                  
 31558                                  	; 28/03/2023
 31559                                  	; MSDOS 6.0 (& MSDOS 5.0)
 31560 000046E3 39F2                    	cmp	dx,si			;AN000;  3/3/KK
 31561 000046E5 771B                    	ja	short LookBack		;AN000;  3/3/KK
 31562 000046E7 56                      	push	si			;AN000;  3/3/KK
 31563 000046E8 51                      	push	cx			;AN000;  3/3/KK
 31564 000046E9 89F1                    	mov	cx,si			;AN000;  3/3/KK
 31565 000046EB 89D6                    	mov	si,dx			;AN000;  3/3/KK
 31566                                  Kloop2: 				;AN000;  3/3/KK
 31567 000046ED AC                      	lodsb				;AN000;  3/3/KK
 31568 000046EE E837E0                  	call	testkanj		;AN000;  3/3/KK
 31569 000046F1 7409                    	jz	short NotKanj4		;AN000;  3/3/KK
 31570 000046F3 AC                      	lodsb				;AN000;  3/3/KK
 31571 000046F4 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 31572 000046F6 72F5                    	jb	short Kloop2		;AN000;  3/3/KK
 31573 000046F8 59                      	pop	cx			;AN000;  3/3/KK
 31574 000046F9 5E                      	pop	si			;AN000;  3/3/KK
 31575 000046FA EB0B                    	jmp	short DoCdr		;AN000;  3/3/KK  Last char is ECS code, don't check for
 31576                                  					;		 trailing path sep
 31577                                  NotKanj4:				;AN000;  3/3/KK
 31578 000046FC 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 31579 000046FE 72ED                    	jb	short Kloop2		;AN000;  3/3/KK
 31580 00004700 59                      	pop	cx			;AN000;  3/3/KK
 31581 00004701 5E                      	pop	si			;AN000;  3/3/KK
 31582                                  LookBack:				;AN000;  3/3/KK
 31583                                  	; 28/03/2023
 31584                                  	; MSDOS 3.3 & MSDOS 6.0
 31585 00004702 3A5CFF                  	cmp	bl,[si-1]		; if double slash, then complain.
 31586 00004705 740E                    	je	short BADCDERRJ2
 31587                                  DoCdr:
 31588 00004707 B43B                    	mov	ah,CHDir ; 3Bh
 31589 00004709 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 31590                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 31591 0000470B 861C                    	xchg	bl,[si]
 31592 0000470D 7395                    	jnc	short NOTPDIR_RETN
 31593                                  	
 31594                                  	; 28/03/2023
 31595                                  	; MSDOS 3.3
 31596                                  ;BADCDERRJ2:
 31597                                  	;stc
 31598                                  	;jmp	BADCDERR
 31599                                  
 31600                                  	; 28/03/2023
 31601                                  	; MSDOS 6.0 (& MSDOS 5.0)
 31602 0000470F E837D9                  	call	get_ext_error_number	;AN022; get the extended error
 31603                                  EXTEND_SETUPJ:					;AN022;
 31604 00004712 E969D6                  	jmp	extend_setup		;AN022; go issue the error message
 31605                                  BADCDERRJ2:
 31606 00004715 E963D6                  	jmp	badpath_err		;AC022; go issue path not found message
 31607                                  
 31608                                  ; =============== S U B	R O U T	I N E =======================================
 31609                                  
 31610                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31611                                  SETSTARS:
 31612                                  	;mov	[bp+2],di
 31613 00004718 897E02                  	mov	[bp+VARSTRUC.TTAIL],di
 31614                                  	;add	byte [bp+1],12
 31615 0000471B 8046010C                	add	byte [bp+VARSTRUC.SIZ],12
 31616                                  	;;mov	ax,[DOT_QMARK] ; '?.' (2E3Fh)
 31617                                  	; 28/03/2023
 31618                                  	; MSDOS 6.0
 31619 0000471F B83F2E                  	mov	ax,dot_qmark ; 2E3Fh
 31620                                  	;mov	ax,'?.' ; dot_qmark
 31621                                  
 31622 00004722 B90800                  	mov	cx,8
 31623 00004725 F3AA                    	rep	stosb
 31624 00004727 86C4                    	xchg	al,ah
 31625 00004729 AA                      	stosb
 31626 0000472A 86C4                    	xchg	al,ah
 31627 0000472C B103                    	mov	cl,3
 31628 0000472E F3AA                    	rep	stosb
 31629 00004730 30C0                    	xor	al,al
 31630 00004732 AA                      	stosb
 31631 00004733 C3                      	retn
 31632                                  
 31633                                  ; =============== S U B	R O U T	I N E =======================================
 31634                                  
 31635                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31636                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 31637                                  COMPNAME:
 31638 00004734 BE[9B9D]                	mov	si,DestBuf	; do name translate of target
 31639 00004737 BF[5699]                	mov	di,TRGXNAME	; save for name comparison
 31640 0000473A B460                    	mov	ah,xNameTrans ; 60h
 31641                                  	;mov	ah,60h
 31642 0000473C CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 31643                                  			; DS:SI	-> ASCIZ relative path string or directory name
 31644                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 31645 0000473E BE[FF98]                	mov	si,SRCXNAME	; get name translate of source
 31646 00004741 BF[5699]                	mov	di,TRGXNAME	; get name translate of target
 31647                                  	;call	STRCOMP
 31648                                  	;retn
 31649                                  	; 28/03/2023
 31650 00004744 E948E2                  	jmp	STRCOMP
 31651                                  
 31652                                  ;============================================================================
 31653                                  ; CPARSE.ASM, MSDOS 6.0, 1991
 31654                                  ;============================================================================
 31655                                  ; 30/09/2018 - Retro DOS v3.0
 31656                                  ; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31657                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31658                                  
 31659                                  ;-----------------------------------------------------------------------;
 31660                                  ; ENTRY:								;
 31661                                  ;	DS:SI	Points input buffer					;
 31662                                  ;	ES:DI	Points to the token buffer				;
 31663                                  ;	BL	Special delimiter for this call 			;
 31664                                  ;		    Always checked last 				;
 31665                                  ;		    set it to space if there is no special delimiter	;
 31666                                  ; EXIT: 								;
 31667                                  ;	DS:SI	Points to next char in the input buffer 		;
 31668                                  ;	ES:DI	Points to the token buffer				;
 31669                                  ;	[STARTEL] Points to start of last element of path in token	;
 31670                                  ;		points to a NUL for no element strings 'd:' 'd:/'       ;
 31671                                  ;	CX	Character count 					;
 31672                                  ;	BH	Condition Code						;
 31673                                  ;			Bit 1H of BH set if switch character		;
 31674                                  ;				Token buffer contains char after	;
 31675                                  ;				switch character			;
 31676                                  ;				BP has switch bits set (ORing only)	;
 31677                                  ;			Bit 2H of BH set if ? or * in token		;
 31678                                  ;				if * found element ? filled		;
 31679                                  ;			Bit 4H of BH set if path sep in token		;
 31680                                  ;			Bit 80H of BH set if the special delimiter	;
 31681                                  ;			   was skipped at the start of this token	;
 31682                                  ;		Token buffer always starts d: for non switch tokens	;
 31683                                  ;	CARRY SET							;
 31684                                  ;	    if CR on input						;
 31685                                  ;		token buffer not altered				;
 31686                                  ;									;
 31687                                  ;	DOES NOT RETURN ON BAD PATH, OR TRAILING SWITCH CHAR ERROR	;
 31688                                  ; MODIFIES:								;
 31689                                  ;	CX, SI, AX, BH, DX and the Carry Flag				;
 31690                                  ;									;
 31691                                  ;-----------------------------------------------------------------------;
 31692                                  
 31693                                  ; Modifications to cparse: recognition of right and left parentheses
 31694                                  ; as integral tokens, and removal of automatic upper-case conversion code.
 31695                                  ;
 31696                                  ; Both modifications were installed in the course of adding a coherent
 31697                                  ; command-line parser to COMMAND.COM which builds a UNIX-style argv[]/argc
 31698                                  ; structure for command-line arguments. This parser relies on cparse to
 31699                                  ; recognize individual tokens.
 31700                                  ;
 31701                                  ; To process for-loops correctly, parentheses must therefore be
 31702                                  ; recognized as tokens. The upper-case conversion code was removed so
 31703                                  ; that commands (such as for and echo) would be able to use the "original"
 31704                                  ; text of the command line.
 31705                                  ;
 31706                                  ; Note also the modification to prevent the automatic conversion of colons
 31707                                  ; into spaces WITHIN THE SOURCE TEXT!
 31708                                  ;
 31709                                  ; Also note that BP is also clobbered if cparse recognizes any switches
 31710                                  ; on the command line.
 31711                                  ;
 31712                                  ; Alan L, OS/MSDOS				    14 August 1983
 31713                                  
 31714                                  ; ---------------------------------------------------------------------------
 31715                                  
 31716                                  ; COMEQU.ASM (MSDOS 6.0, 1991)
 31717                                  
 31718                                  ;FSWITCH	EQU	8000h
 31719                                  ;FBADSWITCH	EQU	4000h
 31720                                  
 31721                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3334h
 31722                                  
 31723                                  ; =============== S U B	R O U T	I N E =======================================
 31724                                  		
 31725                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31726                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 431Fh
 31727                                  
 31728                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31729                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 4AE3h
 31730                                  cparse:
 31731 00004747 31C0                    	xor	ax,ax
 31732 00004749 893E[D39E]              	mov	[STARTEL],di		; No path element (Is DI correct?)
 31733 0000474D A2[D69E]                	mov	[ELPOS],al		; Start in 8 char prefix
 31734                                  	; MSDOS 3.3
 31735                                  	;mov	[SOURCE],al		
 31736                                  	; MSDOS 6.0
 31737 00004750 A2[D79E]                	mov	[SKPDEL], al		; No skip delimiter yet
 31738 00004753 88C7                    	mov	bh,al			; Init nothing
 31739 00004755 9C                      	pushf				; save flags
 31740 00004756 57                      	push	di			; save the token buffer addrss
 31741 00004757 31C9                    	xor	cx,cx			; no chars in token buffer
 31742 00004759 880E[749D]              	mov	[comma],cl		; reset comma flag
 31743                                  moredelim:
 31744 0000475D AC                      	lodsb
 31745 0000475E E8F4E1                  	call	DELIM
 31746 00004761 751D                    	jnz	short SCANCDONE
 31747 00004763 3C20                    	cmp	al,' '
 31748 00004765 74F6                    	jz	short moredelim
 31749 00004767 3C09                    	cmp	al,9
 31750 00004769 74F2                    	jz	short moredelim
 31751                                  	;xchg	al,[SOURCE]
 31752                                  	; 28/03/2023
 31753 0000476B 8606[D79E]              	xchg	al,[SKPDEL]
 31754 0000476F 08C0                    	or	al,al
 31755 00004771 74EA                    	jz	short moredelim		; One non space/tab delimiter allowed
 31756 00004773 F6C780                  	test	bh,80h			; has a special char been found?
 31757 00004776 7405                    	jz	short no_comma		; no - just exit
 31758 00004778 C606[749D]01            	mov	byte [comma],1		; set comma flag
 31759                                  no_comma:
 31760 0000477D E92A01                  	jmp	x_done			; Nul argument
 31761                                  
 31762                                  SCANCDONE:
 31763                                  	; 28/03/2023
 31764                                  	; MSDOS 6.0
 31765                                  	; -----------------------------------
 31766                                  	; Mod to avoid upper-case conversion.
 31767                                  	; -----------------------------------
 31768                                  	; MSDOS 3.3
 31769                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 31770                                  	;jnz	short cpcont1		; 3/3/KK
 31771                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 31772                                  cpcont1:
 31773                                  	; -----------------------------------
 31774                                  	; 28/03/2023
 31775 00004780 38D8                    	cmp	al,bl			; Special delimiter?
 31776 00004782 7505                    	jne	short nospec
 31777 00004784 80CF80                  	or	bh,80h
 31778 00004787 EBD4                    	jmp	short moredelim
 31779                                  nospec:
 31780 00004789 3C0D                    	cmp	al,0Dh			; a CR?
 31781 0000478B 7503                    	jne	short ncperror
 31782 0000478D E91501                  	jmp	cperror
 31783                                  ncperror:
 31784 00004790 3A06[D59B]              	cmp	al,[SWITCHAR]		; is the char the switch char?
 31785 00004794 7503                    	jne	short na_switch		; yes, process...
 31786 00004796 E91401                  	jmp	a_switch
 31787                                  na_switch:
 31788 00004799 B23A                    	mov	dl,':'
 31789 0000479B 3814                    	cmp	[si],dl
 31790 0000479D 751D                    	jne	short anum_chard	; Drive not specified
 31791                                  	; 28/03/2023
 31792                                  	; MSDOS 6.0 
 31793 0000479F 803E[839D]01            	cmp	byte [cpyflag],1	; 3/3/KK
 31794 000047A4 7503                    	jne	short cpcont2		; 3/3/KK
 31795 000047A6 E8A9DF                  	call	UPCONV			; 3/3/KK
 31796                                  cpcont2:
 31797 000047A9 E85901                  	call	move_char
 31798 000047AC AC                      	lodsb				; Get the ':'
 31799 000047AD E85501                  	call	move_char
 31800 000047B0 893E[D39E]              	mov	[STARTEL],di
 31801 000047B4 C606[D59E]00            	mov	byte [ELCNT],0
 31802 000047B9 E9B300                  	jmp	anum_test
 31803                                  anum_chard:
 31804 000047BC 893E[D39E]              	mov	[STARTEL],di
 31805 000047C0 C606[D59E]00            	mov	byte [ELCNT],0		; Store of this char sets it to one
 31806 000047C5 803E[839D]01            	cmp	byte [cpyflag],1	; Was CPARSE called from COPY?
 31807 000047CA 751D                    	jnz	short anum_char		; No, don't add drive spec.
 31808 000047CC E80CE2                  	call	pathchrcmp		; Starts with a pathchar?
 31809 000047CF 7518                    	jnz	short anum_char		; no
 31810 000047D1 50                      	push	ax
 31811 000047D2 A0[E59B]                	mov	al,[CURDRV]		; Insert drive spec
 31812                                  	;add	al,[CAPITAL_A]
 31813                                  	; 28/03/2023
 31814                                  	; MSDOS 6.0
 31815 000047D5 0441                    	add	al,'A' ; 41h
 31816 000047D7 E82B01                  	call	move_char
 31817 000047DA B03A                    	mov	al,':' ; 3Ah
 31818 000047DC E82601                  	call	move_char
 31819 000047DF 58                      	pop	ax
 31820 000047E0 893E[D39E]              	mov	[STARTEL],di
 31821 000047E4 C606[D59E]00            	mov	byte [ELCNT],0
 31822                                  anum_char:
 31823                                  	; 28/03/2023
 31824                                  	; MSDOS 6.0
 31825 000047E9 E83CDF                  	call	testkanj		;AC048			
 31826 000047EC 7406                    	jz	short NOTKANJ		;AC048;
 31827 000047EE E81401                  	call	move_char
 31828 000047F1 AC                      	lodsb
 31829 000047F2 EB78                    	jmp	short notspecial
 31830                                  
 31831                                  NOTKANJ:				;AN048; If not kanji
 31832 000047F4 803E[839D]01            	cmp	byte [cpyflag],1	;AN048; and if we're in COPY
 31833 000047F9 7503                    	jne	short TESTDOT 		;AN048;
 31834 000047FB E854DF                  	call	UPCONV			;AN048; upper case the char
 31835                                  TESTDOT:
 31836                                  	; 28/03/2023
 31837                                  	;cmp	al,dot_chr  ; 2Eh
 31838 000047FE 3C2E                    	cmp	al,'.'
 31839 00004800 7509                    	jne	short testquest
 31840 00004802 FE06[D69E]              	inc	byte [ELPOS] 		; flag in extension
 31841 00004806 C606[D59E]FF            	mov	byte [ELCNT],0FFh	; Store of the '.' resets it to 0
 31842                                  testquest:
 31843 0000480B 3C3F                    	cmp	al,'?'  ; 3Fh
 31844 0000480D 7503                    	jnz	short testsplat
 31845 0000480F 80CF02                  	or	bh,2
 31846                                  testsplat:
 31847                                  	;cmp	al,[STAR]
 31848 00004812 3C2A                    	cmp	al,star	; 2Ah
 31849                                  	; 27/04/2023
 31850                                  	;cmp	al,'*' 
 31851 00004814 7530                    	jne	short testpath
 31852 00004816 80CF02                  	or	bh,2
 31853 00004819 803E[0F9F]00            	cmp	byte [expand_star],0
 31854 0000481E 7504                    	jne	short expand_filename
 31855 00004820 EB24                    	jmp	short testpath
 31856                                  
 31857                                  BADPERR2J:
 31858                                  	;jmp	BADPERR2
 31859                                  	; 28/03/2023
 31860                                  	; MSDOS 6.0
 31861 00004822 EB75                    	jmp	short BADPERR2
 31862                                  
 31863                                  expand_filename:
 31864 00004824 B407                    	mov	ah,7
 31865 00004826 803E[D69E]00            	cmp	byte [ELPOS],0
 31866 0000482B 7402                    	jz	short gotelcnt
 31867 0000482D B402                    	mov	ah,2
 31868                                  gotelcnt:
 31869 0000482F B03F                    	mov	al,'?'
 31870 00004831 2A26[D59E]              	sub	ah,[ELCNT]
 31871 00004835 72EB                    	jb	short BADPERR2J
 31872 00004837 86E1                    	xchg	ah,cl
 31873 00004839 E309                    	jcxz	testpathx
 31874                                  qmove:
 31875 0000483B 86E1                    	xchg	ah,cl
 31876 0000483D E8C500                  	call	move_char
 31877 00004840 86E1                    	xchg	ah,cl
 31878 00004842 E2F7                    	loop	qmove
 31879                                  testpathx:
 31880 00004844 86E1                    	xchg	ah,cl
 31881                                  testpath:
 31882 00004846 E892E1                  	call	pathchrcmp
 31883 00004849 7521                    	jnz	short notspecial
 31884 0000484B 80CF04                  	or	bh,4
 31885 0000484E 803E[0F9F]00            	cmp	byte [expand_star],0
 31886 00004853 7405                    	jz	short no_err_check
 31887 00004855 F6C702                  	test	bh,2			; If just hit a '/', cannot have ? or * yet
 31888 00004858 7545                    	jnz	short BADPERR
 31889                                  no_err_check:
 31890 0000485A 893E[D39E]              	mov	[STARTEL],di	  	; New element
 31891 0000485E FF06[D39E]              	inc	word [STARTEL]	  	; Point to char after /
 31892 00004862 C606[D59E]FF            	mov	byte [ELCNT],0FFh 	; Store of '/' sets it to 0
 31893 00004867 C606[D69E]00            	mov	byte [ELPOS],0
 31894                                  notspecial:
 31895 0000486C E89600                  	call	move_char		; just an alphanum string
 31896                                  anum_test:
 31897 0000486F AC                      	lodsb
 31898                                  
 31899                                  	; 28/03/2023
 31900                                  	; MSDOS 6.0
 31901                                  	; -----------------------------------
 31902                                  	; Mod to avoid upper-case conversion.
 31903                                  	; -----------------------------------
 31904                                  	; MSDOS 3.3
 31905                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 31906                                  	;jnz	short cpcont3		; 3/3/KK
 31907                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 31908                                  cpcont3:
 31909                                  	; -----------------------------------
 31910                                  
 31911 00004870 E8E2E0                  	call	DELIM
 31912 00004873 7435                    	jz	short x_done
 31913 00004875 3C0D                    	cmp	al,0Dh
 31914 00004877 7431                    	je	short x_done
 31915 00004879 3A06[D59B]              	cmp	al,[SWITCHAR]
 31916 0000487D 742B                    	je	short x_done
 31917 0000487F 38D8                    	cmp	al,bl
 31918 00004881 7427                    	je	short x_done
 31919 00004883 3C3A                    	cmp	al,':'			; ':' allowed as trailer because of devices
 31920                                  	; 28/03/2023
 31921                                  	; MSDOS 3.3
 31922                                  	;jnz	short ANUM_CHARJ 
 31923                                  	; MSDOS 6.0
 31924 00004885 7403                    	je	short FOO15
 31925 00004887 E95FFF                  	jmp	anum_char
 31926                                  
 31927                                  ; Modification made for parseline.
 31928                                  ; Why would it be necessary to change colons to spaces? In this
 31929                                  ; case, EVERY colon is changed to a space; e.g., 'f:' yields 'f ',
 31930                                  ; but so does 'echo foo:bar' yield 'echo foo bar'.
 31931                                  
 31932                                  FOO15:
 31933 0000488A 803E[839D]02            	cmp	byte [cpyflag],2
 31934 0000488F 7505                    	jnz	short cpcont4
 31935 00004891 E87100                  	call	move_char
 31936 00004894 EBD9                    	jmp	short anum_test
 31937                                  cpcont4:
 31938 00004896 46                      	inc	si			; Skip the ':'
 31939 00004897 EB11                    	jmp	short x_done
 31940                                  
 31941                                  	; 28/03/2023
 31942                                  ;ANUM_CHARJ:
 31943                                  	;jmp	anum_char
 31944                                  
 31945                                  BADPERR2:
 31946 00004899 BA[558F]                	mov	dx,BADCPMES_PTR
 31947 0000489C E94EE4                  	jmp	cerror
 31948                                  
 31949                                  BADPERR:
 31950                                  	; 28/03/2023
 31951                                  	;jmp	BADCDERR  ; MSDOS 3.3	
 31952                                  BADCDERR:
 31953                                  	; MSDOS 6.0
 31954 0000489F BA[A490]                	mov	dx,badcd_ptr		;AC022; Issue "Invalid Directory"
 31955 000048A2 E948E4                  	jmp	cerror			;AC022;  message
 31956                                  	
 31957                                  cperror:
 31958 000048A5 4E                      	dec	si			; adjust the pointer
 31959 000048A6 5F                      	pop	di			; retrive token buffer address
 31960 000048A7 9D                      	popf				; restore flags
 31961 000048A8 F9                      	stc				; set the carry bit
 31962 000048A9 C3                      	retn
 31963                                  
 31964                                  x_done:
 31965 000048AA 4E                      	dec	si			; adjust for next round
 31966                                  
 31967                                  ; Mod to recognize right and left parens as integral tokens.
 31968                                  ;x_done2:
 31969 000048AB EB51                    	jmp	short out_token
 31970                                  
 31971                                  a_switch:
 31972 000048AD 80CF01                  	or	bh,1			; Indicate switch
 31973                                  	;or	bp,FSWITCH ; 8000h
 31974                                  	; 28/03/2023
 31975 000048B0 81CD0080                	or	bp,8000h
 31976 000048B4 E896E0                  	call	scanoff
 31977 000048B7 46                      	inc	si
 31978                                  	; 28/03/2023
 31979                                  	; MSDOS 6.0
 31980 000048B8 E86DDE                  	call	testkanj		;AN057; See if DBCS lead byte
 31981 000048BB 740D                    	jz	short a_switch_notkanj	;AN057; no - continue processing
 31982 000048BD E84500                  	call	move_char		;AN057; DBCS - store first byte
 31983 000048C0 AC                      	lodsb				;AN057; get second byte
 31984 000048C1 E84100                  	call	move_char		;AN057; store second byte
 31985                                  	;or	bp,FBADSWITCH ; 4000h	;AN057; DBCS switch is invalid
 31986 000048C4 81CD0040                	or	bp,4000h
 31987 000048C8 EB34                    	jmp	short out_token 	;AN057; don't bother checking switch
 31988                                  a_switch_notkanj:			;AN057;
 31989 000048CA 3C0D                    	cmp	al,0Dh
 31990 000048CC 7509                    	jne	short Store_swt
 31991 000048CE B000                    	mov	al,0
 31992 000048D0 AA                      	stosb
 31993                                  	;or	bp,FBADSWITCH ; 4000h
 31994 000048D1 81CD0040                	or	bp,4000h
 31995 000048D5 EBCE                    	jmp	short cperror		; Trailing switch character error
 31996                                  					;   BP = fSwitch but no switch
 31997                                  					;   bit is set (unknown switch)
 31998                                  Store_swt:
 31999 000048D7 E82B00                  	call	move_char		; store the character
 32000                                  
 32001                                  ; This upconv call must stay. It is used to identify copy-switches
 32002                                  ; on the command line, and won't store anything into the output buffer.
 32003                                  
 32004                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3 (Retro DOS 3.0)
 32005                                  	; 28/03/2023
 32006 000048DA E875DE                  	call	UPCONV 	; MSDOS 6.0 & MSDOS 5.0 (Retro DOS 4.0)
 32007                                  	
 32008 000048DD 06                      	push	es
 32009 000048DE 57                      	push	di
 32010 000048DF 51                      	push	cx
 32011 000048E0 0E                      	push	cs
 32012 000048E1 07                      	pop	es
 32013                                  	; 28/03/2023
 32014                                  	; MSDOS 3.3
 32015                                  	;;mov	di,SWITCH_LIST ; "VBAPW"
 32016                                  	; MSDOS 6.0
 32017                                  	;mov	di,switch_list ; "?VBAPW"
 32018                                  	; 14/06/*2023
 32019                                  	; MSDOS 6.22
 32020 000048E2 BF[4195]                	mov	di,switch_list ; "-Y?VBAPW"
 32021                                  
 32022                                  	; MSDOS 3.3
 32023                                  	;mov	cx,SWCOUNT ; 5
 32024                                  	; MSDOS 6.0
 32025                                  	;mov	cx,6  ; SWCOUNT = 6
 32026                                  	; 14/06/2023
 32027                                  	; MSDOS 6.22
 32028 000048E5 B90800                  	mov	cx,8  ; SWCOUNT = 8	
 32029                                  
 32030                                  	;or	bp,FBADSWITCH  ; 4000h
 32031 000048E8 81CD0040                	or	bp,4000h
 32032 000048EC F2AE                    	repne	scasb
 32033 000048EE 750B                    	jnz	short out_tokenp
 32034                                  	;and	bp,~FBADSWITCH ; 0BFFFh
 32035 000048F0 81E5FFBF                	and	bp,0BFFFh
 32036 000048F4 B80100                  	mov	ax,1
 32037 000048F7 D3E0                    	shl	ax,cl
 32038 000048F9 09C5                    	or	bp,ax
 32039                                  out_tokenp:
 32040 000048FB 59                      	pop	cx
 32041 000048FC 5F                      	pop	di
 32042 000048FD 07                      	pop	es
 32043                                  out_token:
 32044 000048FE B000                    	mov	al,0			; null at the end
 32045 00004900 AA                      	stosb
 32046 00004901 5F                      	pop	di			; restore token buffer pointer	
 32047 00004902 9D                      	popf
 32048 00004903 F8                      	clc				; clear carry flag
 32049 00004904 C3                      	retn
 32050                                  
 32051                                  ; =============== S U B	R O U T	I N E =======================================
 32052                                  
 32053                                  	; 28/03/2023
 32054                                  move_char:
 32055 00004905 AA                      	stosb				; store char in token buffer
 32056 00004906 41                      	inc	cx			; increment char count
 32057 00004907 FE06[D59E]              	inc	byte [ELCNT]		; increment element count for * substi
 32058 0000490B C3                      	retn
 32059                                  
 32060                                  ;============================================================================
 32061                                  ; PARSE.ASM, MSDOS 6.0, 1991
 32062                                  ;============================================================================
 32063                                  ; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32064                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32065                                  
 32066                                  ; -----------------------------
 32067                                  ; (PSDATA.INC, MSDOS 6.0, 1991)
 32068                                  ; -----------------------------
 32069                                  
 32070                                  ;**** Equation field
 32071                                  ;-------- Character code definition
 32072                                  
 32073                                  $P_DBSP1	   equ	20h ; DB_SP_HI	;AN000; 1st byte of DBCS blank
 32074                                  $P_DBSP2	   equ	20h ; DB_SP_LO	;AN000; 2nd byte of DBCS blank
 32075                                  $P_Period	   equ	"."             ;AN020;
 32076                                  $P_Slash	   equ	"/"             ;AN020;
 32077                                  $P_Space	   equ	" "             ;AN000; SBCS blank
 32078                                  $P_Comma	   equ	","             ;AN000;
 32079                                  $P_Switch	   equ	"/"             ;AN000;
 32080                                  $P_Keyword	   equ	"="             ;AN000;
 32081                                  $P_Colon	   equ	":"             ;AN000;
 32082                                  $P_Plus 	   equ	"+"             ;AN000;
 32083                                  $P_Minus	   equ	"-"             ;AN000;
 32084                                  $P_Rparen	   equ	")"             ;AN000;
 32085                                  $P_Lparen	   equ	"("             ;AN000;
 32086                                  ;(deleted ;AN025;) $P_SQuote equ  "'"
 32087                                  $P_DQuote	   equ	'"'             ;AN000;
 32088                                  $P_NULL 	   equ	0		;AN000;
 32089                                  $P_TAB		   equ	9		;AN000;
 32090                                  $P_CR		   equ	0Dh		;AN000;
 32091                                  $P_LF		   equ	0Ah		;AN000;
 32092                                  $P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 32093                                  
 32094                                  $P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 32095                                  $P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 32096                                  
 32097                                  $P_error_filespec  equ  1
 32098                                  
 32099                                  ;----------------------------------------------------------------------------
 32100                                  ; PARMS LABEL	BYTE
 32101                                  ;	DW	PARMSX
 32102                                  ;	DB	2		; NUMBER OF STRINGS (0, 1, 2)
 32103                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 32104                                  ;	DB	" .. "          ; EXTRA DELIMITER LIST,
 32105                                  ;				; TYPICAL ARE ";", "="
 32106                                  ;				; "," & WHITESPACE ALWAYS
 32107                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 32108                                  ;	DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 32109                                  ;----------------------------------------------------------------------------
 32110                                  
 32111                                  struc $P_PARMS_BLK			;AN000;
 32112 00000000 ????                    .$P_PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 32113 00000002 ??                      .$P_Num_Extra:	     resb 1		;AN000; Number of extra stuff
 32114 00000003 ??                      .$P_Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 32115                                  endstruc 				;AN000;
 32116                                  
 32117                                  $P_Len_PARMS	   equ	4		;AN000;
 32118                                  $P_I_Use_Default   equ	0		;AN000; no extra stuff specified
 32119                                  $P_I_Have_Delim    equ	1		;AN000; extra delimiter specified
 32120                                  $P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 32121                                  
 32122                                  ;----------------------------------------------------------------------------
 32123                                  ; PARMSX LABEL	BYTE
 32124                                  ;	DB	minp,maxp		; MIN, MAX POSITIONAL OPERANDS ALLOWED
 32125                                  ;	DW	CONTROL 		; DESCRIPTION OF POSITIONAL 1
 32126                                  ;	:				; REPEATS maxp-1 TIMES
 32127                                  ;	DB	maxs			; # OF SWITCHES
 32128                                  ;	DW	CONTROL 		; DESCRIPTION OF SWITCH 1
 32129                                  ;	:				; REPEATS maxs-1 TIMES
 32130                                  ;	DB	maxk			; # OF KEYWORD
 32131                                  ;	DW	CONTROL 		; DESCRIPTION OF KEYWORD 1
 32132                                  ;	:				; REPEATS maxk-1 TIMES
 32133                                  ;----------------------------------------------------------------------------
 32134                                  
 32135                                  struc $P_PARMSX_BLK			;AN000;
 32136 00000000 ??                      .$P_MinP: 	 resb 1	 ; 27/04/2023	;AN000; Minimum positional number
 32137 00000001 ??                      .$P_MaxP: 	 resb 1			;AN000; Maximum positional number
 32138 00000002 ??                      .$P_1st_Control: resb 1			;AN000; Address of the 1st CONTROL block
 32139                                  endstruc				;AN000;
 32140                                  
 32141                                  ; 31/03/2023
 32142                                  ;----------------------------------------------------------------------------
 32143                                  ; << Control field definition >>
 32144                                  ;
 32145                                  ;CONTROL   LABEL   BYTE
 32146                                  ;	   DW MATCH_FLAGS	; CONTROLS TYPE MATCHED
 32147                                  ;				; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 32148                                  ;				; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 32149                                  ;				; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 32150                                  ;				; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 32151                                  ;				; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 32152                                  ;				; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 32153                                  ;				; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 32154                                  ;				; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 32155                                  ;				; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 32156                                  ;				; 0010H=IGNORE ":" AT END IN MATCH
 32157                                  ;				; 0002H=REPEATS ALLOWED
 32158                                  ;				; 0001H=OPTIONAL
 32159                                  ;	   DW FUNCTION_FLAGS
 32160                                  ;				; 0001H=CAP RESULT BY FILE TABLE
 32161                                  ;				; 0002H=CAP RESULT BY CHAR TABLE
 32162                                  ;				; 0010H=REMOVE ":" AT END
 32163                                  ; (tm10)			; 0020H=colon is not necessary for switch
 32164                                  ;
 32165                                  ;	   DW RESULT		; RESULT BUFFER
 32166                                  ;	   DW VALUES		; VALUE LISTS
 32167                                  ;	   DB nid		; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 32168                                  ;	   DB "...",0		; IF n >0, KEYWORD 1
 32169                                  ;	   :
 32170                                  ;
 32171                                  ;Note:
 32172                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 32173                                  ;      DATE bit simalteniously.
 32174                                  ;
 32175                                  ;      The parser examins each bit along with the following priority.
 32176                                  ;
 32177                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 32178                                  ;      FILE SPEC -> SIMPLE STRING.
 32179                                  ;
 32180                                  ;
 32181                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 32182                                  ;      in the result buffer is capitalized.
 32183                                  ;
 32184                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 32185                                  ;
 32186                                  ;
 32187                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 32188                                  ;      switch, for example, '/A', then STRING points to;
 32189                                  ;
 32190                                  ;		DB    1 	; number of following synonyms
 32191                                  ;		DB   '/A',0
 32192                                  ;
 32193                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 32194                                  ;
 32195                                  ;		DB    1 	; number of following synonyms
 32196                                  ;		DB   'CODEPAGE=',0
 32197                                  ;
 32198                                  ;
 32199                                  ;    - "..." must consist of upper case characters only because the parser
 32200                                  ;      performs pattern matching after converting input to upper case (by
 32201                                  ;      using the current country upper case table)
 32202                                  ;
 32203                                  ;
 32204                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 32205                                  ;      example /A and /B, the format will be;
 32206                                  ;
 32207                                  ;		DB    2 	; number of following synonyms
 32208                                  ;		DB    '/A',0
 32209                                  ;		DB    '/B',0
 32210                                  ;----------------------------------------------------------------------------
 32211                                  
 32212                                  ;**** Match_Flags
 32213                                  
 32214                                  $P_Num_Val	   equ	8000h		;AN000; Numeric Value
 32215                                  $P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 32216                                  $P_Simple_S	   equ	2000h		;AN000; Simple string
 32217                                  $P_Date_S	   equ	1000h		;AN000; Date string
 32218                                  $P_Time_S	   equ	0800h		;AN000; Time string
 32219                                  $P_Cmpx_S	   equ	0400h		;AN000; Complex string
 32220                                  $P_File_Spc	   equ	0200h		;AN000; File Spec
 32221                                  $P_Drv_Only	   equ	0100h		;AN000; Drive Only
 32222                                  $P_Qu_String	   equ	0080h		;AN000; Quoted string
 32223                                  $P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 32224                                  $P_Repeat	   equ	0002h		;AN000; Repeat allowed
 32225                                  $P_Optional	   equ	0001h		;AN000; Optional
 32226                                  
 32227                                  ;**** Function flags
 32228                                  
 32229                                  $P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 32230                                  $P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 32231                                  $P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 32232                                  $P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 32233                                  
 32234                                  ;-------------------------------- Control block structure
 32235                                  struc $P_CONTROL_BLK
 32236 00000000 ????                    .$P_Match_Flag:	   resw 1		;AN000; Controls type matched
 32237 00000002 ????                    .$P_Function_Flag: resw 1		;AN000; Function should be taken
 32238 00000004 ????                    .$P_Result_Buf:	   resw 1		;AN000; Result buffer address
 32239 00000006 ????                    .$P_Value_List:	   resw 1		;AN000; Value list address
 32240 00000008 ??                      .$P_nid:	   resb 1		;AN000; # of keyword/SW synonyms
 32241 00000009 ??                      .$P_KEYorSW:	   resb 1		;AN000; keyword or sw
 32242                                  endstruc
 32243                                  
 32244                                  ; 31/03/2023
 32245                                  ;----------------------------------------------------------------------------
 32246                                  ;
 32247                                  ;VALUES LABEL	BYTE
 32248                                  ;	DB	nval		; NUMBER OF VALUE DEFINITIONS (0 - 3)
 32249                                  ;	+-
 32250                                  ;	| DB	nrng		; NUMBER OF RANGES
 32251                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF RANGE MATCHED
 32252                                  ;	| +DD	X,Y		; RANGE OF VALUES
 32253                                  ;	|	:
 32254                                  ;	| DB	nnval		; NUMBER OF CHOICES
 32255                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF NUMBER CHOICE MATCHED
 32256                                  ;	| +DD	VALUE		; SPECIFIC CHOICE IF NUMBER
 32257                                  ;	|	:
 32258                                  ;	| DB	nstrval 	; NUMBER OF CHOICES
 32259                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF STRING CHOICE MATCHED
 32260                                  ;	| +DW	STRING		; SPECIFIC CHOICE IF STING
 32261                                  ;	+-	:
 32262                                  ;
 32263                                  ;STRING DB	"...",0		; ASCIIZ STRING IMAGE
 32264                                  ;
 32265                                  ;Note:
 32266                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 32267                                  ;      when no choice lists are provided.
 32268                                  ;
 32269                                  ;    - STRING must consist of upper case characters only because the parser
 32270                                  ;      performs pattern matching after converting input to upper case (by
 32271                                  ;      using the current country upper case table)
 32272                                  ;----------------------------------------------------------------------------
 32273                                  
 32274                                  $P_nval_None	equ 0		;AN000; no value list ID
 32275                                  $P_nval_Range	equ 1		;AN000; range list ID
 32276                                  $P_nval_Value	equ 2		;AN000; value list ID
 32277                                  $P_nval_String	equ 3		;AN000; string list ID
 32278                                  $P_Len_Range	equ 9		;AN000; Length of a range choice(two DD plus one DB)
 32279                                  $P_Len_Value	equ 5		;AN000; Length of a value choice(one DD plus one DB)
 32280                                  $P_Len_String	equ 3		;AN000; Length of a string choice(one DW plus one DB)
 32281                                  $P_No_nrng	equ 0		;AN000; (tm07) no nrng. nnval must not be 0.
 32282                                  
 32283                                  struc $P_VAL_LIST
 32284 00000000 ??                      .$P_NumofList:	resb 1		;AN000; number of following choice
 32285 00000001 ????                    .$P_Val_XL:	resw 1		;AN000; lower word of value
 32286 00000003 ????                    .$P_Val_XH:	resw 1		;AN000; higher word of value
 32287 00000005 ????                    .$P_Val_YL:	resw 1		;AN000; lower word of another value
 32288 00000007 ????                    .$P_Val_YH:	resw 1		;AN000; higher word of another value
 32289                                  endstruc
 32290                                  
 32291                                  ; 31/03/2023
 32292                                  ;----------------------------------------------------------------------------
 32293                                  ;
 32294                                  ;RESULT LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 32295                                  ;	DB	type			; TYPE RETURNED: 0=RESERVED,
 32296                                  ;					;	1=NUMBER, 2=LIST INDEX,
 32297                                  ;					;	3=STRING, 4=COMPLEX,
 32298                                  ;					;	5=FILESPEC, 6=DRIVE
 32299                                  ;					;	7=DATE, 8=TIME
 32300                                  ;					;	9=QUOTED STRING
 32301                                  ;	DB	ITEM_TAG		; MATCHED ITEM TAG
 32302                                  ;
 32303                                  ;	dw	synonym@		; es:@ points to found SYNONYM if provided.
 32304                                  ;
 32305                                  ;       +-
 32306                                  ;       | DD	n			; VALUE IF NUMBER
 32307                                  ;       | or
 32308                                  ;       |	DW i			; INDEX (OFFSET) INTO VALUE LIST
 32309                                  ;       |				; (ES presents Segment address)
 32310                                  ;       | or
 32311                                  ;       |	DD STRING		; OFFSET OF STRING VALUE
 32312                                  ;       | or
 32313                                  ;       |	DB drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 32314                                  ;       | or
 32315                                  ;       |	DW YEAR	   		;(1980-2099)  IN CASE OF DATE
 32316                                  ;       |	DB MONTH   ;(1-12)	 Note: Range check is not performed.
 32317                                  ;       |	DB DATE	   ;(1-31)	 0 is filled when the corresponding field was not specified.
 32318                                  ;       | or
 32319                                  ;       |	DB HOUR	   ;(0-23)	 IN CASE OF TIME
 32320                                  ;       |	DB MINUTES    ;(0-59)	 Note: Range check is not performed .
 32321                                  ;       |	DB SECONDS    ;(0-59)	 0 is filled when the corresponding field was not specified .
 32322                                  ;       |	DB HUNDREDTHS ;(0-99)
 32323                                  ;       +-
 32324                                  ;
 32325                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 32326                                  ;      list.
 32327                                  ;
 32328                                  ;      YEAR: If the input value for the year is less than 100, parser
 32329                                  ;	     adds 1900 to it. For example, when 87 is input to parser for
 32330                                  ;	     the year value, he returns 1987.
 32331                                  ;----------------------------------------------------------------------------
 32332                                  
 32333                                  ;-------------------------------- Result block structure
 32334                                  struc $P_RESULT_BLK;
 32335 00000000 ??                      .$P_Type:	 resb 1		;AN000; Type returned
 32336 00000001 ??                      .$P_Item_Tag:	 resb 1		;AN000; Matched item tag
 32337 00000002 ????                    .$P_SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 32338 00000004 ????????                .$P_Picked_Val:	 resb 4		;AN000; value
 32339                                  endstruc
 32340                                  
 32341                                  ;**** values for the type field in the result block
 32342                                  
 32343                                  $P_EOL		 equ 0		;AN000; End of line
 32344                                  $P_Number	 equ 1		;AN000; Number
 32345                                  $P_List_Idx	 equ 2		;AN000; List Index
 32346                                  $P_String	 equ 3		;AN000; String
 32347                                  $P_Complex	 equ 4		;AN000; Complex
 32348                                  $P_File_Spec	 equ 5		;AN000; File Spec
 32349                                  $P_Drive	 equ 6		;AN000; Drive
 32350                                  $P_Date_F	 equ 7		;AN000; Date
 32351                                  $P_Time_F	 equ 8		;AN000; Time
 32352                                  $P_Quoted_String equ 9		;AN000; Quoted String
 32353                                  
 32354                                  $P_No_Tag	 equ 0FFh	;AN000; No ITEM_TAG found
 32355                                  
 32356                                  ;**** Return code
 32357                                  ;
 32358                                  ; following return code will be returned in the AX register.
 32359                                  
 32360                                  $P_No_Error	 equ 0		;AN000; No error
 32361                                  $P_Too_Many	 equ 1		;AN000; Too many operands
 32362                                  $P_Op_Missing	 equ 2		;AN000; Required operand missing
 32363                                  $P_Not_In_SW	 equ 3		;AN000; Not in switch list provided
 32364                                  $P_Not_In_Key	 equ 4		;AN000; Not in keyword list provided
 32365                                  $P_Out_Of_Range  equ 6		;AN000; Out of range specified
 32366                                  $P_Not_In_Val	 equ 7		;AN000; Not in value list provided
 32367                                  $P_Not_In_Str	 equ 8		;AN000; Not in string list provided
 32368                                  $P_Syntax	 equ 9		;AN000; Syntax error
 32369                                  $P_RC_EOL	 equ -1		;AN000; End of command line
 32370                                  
 32371                                  ;in second byte of $P_Flags, referenced as $P_Flags2:
 32372                                  $P_equ		 equ 01h	;AN000; "=" packed in string buffet
 32373                                  $P_Neg		 equ 02h	;AN000; Negative value
 32374                                  $P_Time12	 equ 04h	;AN000; set when PM is specified
 32375                                  $P_Key_Cmp	 equ 08h	;AN000; set when keyword compare
 32376                                  $P_SW_Cmp	 equ 10h	;AN000; set when switch compare
 32377                                  $P_Extra	 equ 20h	;AN000; set when extra delimiter found
 32378                                  $P_SW		 equ 40h	;AN000; set when switch found (tm08)
 32379                                  $P_Signed	 equ 80h	;AN000; signed numeric specified
 32380                                  
 32381                                  ;-------- Masks
 32382                                  $P_Make_Lower	 equ 20h	;AN000; make lower case character
 32383                                  $P_Make_Upper	 equ 0FFh-$P_Make_Lower ;AN000; make upper case character
 32384                                  
 32385                                  ;-------------
 32386                                  
 32387                                  struc $P_DOS_TBL
 32388 00000000 ??                      .$P_DOS_InfoID:	 resb 1		;AN000; information id for the table
 32389 00000001 ????                    .$P_DOS_TBL_Off: resw 1		;AN000; offset address of the table
 32390 00000003 ????                    .$P_DOS_TBL_Seg: resw 1		;AN000; segment address of the table
 32391                                  endstruc
 32392                                  
 32393                                  $P_DOS_Get_TBL	 equ 65h	;AN000; get uppercase table call
 32394                                  				;AN000; following parameters are set
 32395                                  				;AN000; to get casemap table.
 32396                                  $P_DOSTBL_Def	 equ -1		;AN000; get default
 32397                                  $P_DOSTBL_BL	 equ 5		;AN000; buffer length for Tbl pointer
 32398                                  $P_DOSTBL_File	 equ 4		;AN000; get file uppercase table
 32399                                  $P_DOSTBL_Char	 equ 2		;AN000; get character uppercase table
 32400                                  				; By this call following information
 32401                                  				; is returned.
 32402                                  
 32403                                  ; 03/04/2023
 32404                                  ;-------------------------------- country dependent information
 32405                                  
 32406                                  $P_DOS_Get_CDI	equ 3800h
 32407                                  
 32408                                  struc $P_CDI
 32409 00000000 ????                    .$P_CDI_DateF:	resw 1		;AN000;
 32410 00000002 ????????                .$P_CDI_Money:	resb 4		;AN000;
 32411 00000006 ????                    .$P_CDI_1000:	resb 2		;AN000;
 32412 00000008 ????                    .$P_CDI_Dec:	resb 2		;AN000;
 32413 0000000A ????                    .$P_CDI_DateS:	resb 2		;AN000;
 32414 0000000C ????                    .$P_CDI_TimeS:	resb 2		;AN000;
 32415 0000000E ??                      		resb 1		;AN000;
 32416 0000000F ??                      		resb 1		;AN000;
 32417 00000010 ??                      .$P_CDI_TimeF:	resb 1		;AN000;
 32418 00000011 ????????                		resw 2		;AN000;
 32419 00000015 ????                    		resb 2		;AN000;
 32420 00000017 <res Ah>                		resw 5		;AN000;
 32421                                  endstruc
 32422                                  
 32423                                  $P_Date_MDY	equ 0		;AN000;
 32424                                  $P_Date_DMY	equ 1		;AN000;
 32425                                  $P_Date_YMD	equ 2		;AN000;
 32426                                  
 32427                                  ; ----------------------------
 32428                                  ; (PARSE.ASM, MSDOS 6.0, 1991)
 32429                                  ; ----------------------------
 32430                                  
 32431                                  ;***********************************************************************
 32432                                  ; SysParse;
 32433                                  ;
 32434                                  ;  Function : Parser Entry
 32435                                  ;
 32436                                  ;  Input: DS:SI -> command line
 32437                                  ;	  ES:DI -> parameter block
 32438                                  ;	  psdata_seg -> psdata.inc
 32439                                  ;	  CX = operand ordinal
 32440                                  ;
 32441                                  ;	  Note:  ES is the segment containing all the control blocks defined
 32442                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 32443                                  ;		 is in DS.
 32444                                  ;
 32445                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 32446                                  ;		    invalid value list. But this parser does NOT implement
 32447                                  ;		    this feature. Therefore CY always zero.
 32448                                  ;
 32449                                  ;	   CY = 0   AX = return code
 32450                                  ;		    BL = terminated delimiter code
 32451                                  ;		    CX = new operand ordinal
 32452                                  ;		    SI = set past scaned operand
 32453                                  ;		    DX = selected result buffer
 32454                                  ;
 32455                                  ; Use:	$P_Skip_Delim, $P_Chk_EOL, $P_Chk_Delim, $P_Chk_DBCS
 32456                                  ;	$P_Chk_Swtch, $P_Chk_Pos_Control, $P_Chk_Key_Control
 32457                                  ;	$P_Chk_Sw_Control, $P_Fill_Result
 32458                                  ;
 32459                                  ; Vars: $P_Ordinal(RW), $P_RC(RW), $P_SI_Save(RW), $P_DX(R), $P_Terminator(R)
 32460                                  ;	$P_SaveSI_Cmpx(W), $P_Flags(RW), $P_Found_SYNONYM(R), $P_Save_EOB(W)
 32461                                  ;
 32462                                  ;-------- Modification History -----------------------------------------
 32463                                  ;
 32464                                  ;  4/04/87 : Created by K. K,
 32465                                  ;  4/28/87 : $P_Val_YH assemble error (tm01)
 32466                                  ;	   : JMP SHORT assemble error (tm02)
 32467                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 32468                                  ;  6/12/87 : $P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 32469                                  ;	     DateSW equ 1)	      (tm04)
 32470                                  ;  6/12/87 : $P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 32471                                  ;				      (tm05) in PSDATA.INC
 32472                                  ;  6/12/87 : $P_FileSp_Char and $P_FileSP_Len are missing
 32473                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 32474                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 32475                                  ;	     value-list block	      (tm07)
 32476                                  ;  6/20/87 : Add $P_SW to check if there's an omiting parameter after
 32477                                  ;	     switch (keyword) or not. If there is, backup si for next call
 32478                                  ;	     (tm08)
 32479                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 32480                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 32481                                  ;  6/24/87 : New function flag $P_colon_is_not_necessary for switch
 32482                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 32483                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 32484                                  ;	     in user's routines. $P_Chk_DBCS (tm11)
 32485                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 32486                                  ;					  (tm12)
 32487                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 32488                                  ;					  (tm13)
 32489                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 32490                                  ;					  (tm14)
 32491                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 32492                                  ;					  (tm15)
 32493                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 32494                                  ;
 32495                                  ;  7/24/87 : Quoted strings being returned with quotes.
 32496                                  ;
 32497                                  ;  7/28/87 : Kerry S (;AN018;)
 32498                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 32499                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 32500                                  ;	     affected: $P_Chk_SW_Control.
 32501                                  ;
 32502                                  ;  7/29/87 : Kerry S (;AN019;)
 32503                                  ;	     Now allow the optional bit in match flags for switches.  This
 32504                                  ;	     allows the switch to be encountered with a value or without a
 32505                                  ;	     value and no error is returned.
 32506                                  ;
 32507                                  ;
 32508                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 32509                                  ;  9/14/87   In PROC $P_Get_DecNum, when checking for field separators
 32510                                  ;	     within a date response, instead of checking just for the one
 32511                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 32512                                  ;	     all three chars, "-", "/", and ".". Change $P_Chk_Switch to allow
 32513                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 32514                                  ;
 32515                                  ;  9/1/87  : Kerry S (;AN021)
 32516                                  ;	     In PROC $P_String_Comp, when comparing the switch or keyword on
 32517                                  ;	     the command line with the string in the control block the
 32518                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 32519                                  ;	     on the command line and assuming a match.	This allowed a shorter
 32520                                  ;	     string on the command line than in the synonym list in the control
 32521                                  ;	     block.  I put in a test for a null in the control block so the
 32522                                  ;	     string in the control block must be the same length as the string
 32523                                  ;	     preceeding the colon or equal on the command line.
 32524                                  ;
 32525                                  ;  8/28/87 : Kerry S (;AN022;)
 32526                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 32527                                  ;	     problems for people who included it themselves in a segment other
 32528                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 32529                                  ;	     segment.
 32530                                  ;
 32531                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 32532                                  ;	     in $p_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 32533                                  ;	     into PUSH PSDATA_SEG.  In $P_Get_DecNum PROC, fix AN020
 32534                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 32535                                  ;	     Created FLag, in $P_time_Format PROC, to request the delim in
 32536                                  ;	     BL be used if TIME is being parsed.
 32537                                  ;
 32538                                  ;  9/24/87 : Ed K
 32539                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 32540                                  ;	     invocations with their normally expanded code; made comments
 32541                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 32542                                  ;
 32543                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 32544                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 32545                                  ;	     pointed to by non-existant CONTROL.
 32546                                  ;
 32547                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 32548                                  ;	     A quoted text string can be framed only by double quote.  Remove
 32549                                  ;	     support to frame quoted text string with single quote.
 32550                                  ;	     (apostrophe) $P_SorD_Quote is removed from PSDATA.INC.
 32551                                  ;	     $P_SQuote EQU also removed from PSDATA.INC.  Any references to
 32552                                  ;	     single quote in PROC prologues are left as is for history reasons.
 32553                                  ;
 32554                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 32555                                  ;	     quote chars within a quoted string is supposed to be reported as
 32556                                  ;	     one quote character, but is reported as two quotes.  This changed
 32557                                  ;	     two instructions in PROC $P_Quoted_Str.
 32558                                  ;
 32559                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 32560                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 32561                                  ;
 32562                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 32563                                  ;
 32564                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 32565                                  ;	     psdata buffer should have psdata_seg.
 32566                                  ;
 32567                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 32568                                  ;	     positional missing.
 32569                                  ;
 32570                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 32571                                  ;	     as a line delimiter, should use carriage return.
 32572                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 32573                                  ;
 32574                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 32575                                  ;
 32576                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 32577                                  ;	     endless loop since SI is returned still pointing to start
 32578                                  ;	     of that parm.
 32579                                  ;
 32580                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 32581                                  ;	     Vector to returned string has CS instead of Psdata_Seg, but
 32582                                  ;	     when tried to fix it on previous version, changed similar
 32583                                  ;	     but wrong place.
 32584                                  ;
 32585                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 32586                                  ;	     delimiters between hours, minutes, seconds for time. And period
 32587                                  ;	     and comma are valid delimiters between seconds and 100th second.
 32588                                  ;
 32589                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 32590                                  ;	     in a filespec, then flag an error.
 32591                                  ;
 32592                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 32593                                  ;	     indexed off of the psdata_seg equate instead of the DS register.
 32594                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 32595                                  ;  -->	     local parser data. Why were some references to local data changed
 32596                                  ;	     to do this before, but not all ?????
 32597                                  ;
 32598                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 32599                                  ;
 32600                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, PSDATA_SEG HOSED.
 32601                                  ;
 32602                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 32603                                  ;
 32604                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 32605                                  ;
 32606                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 32607                                  ;	     separator in TIME before hundredths field.
 32608                                  ;
 32609                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 32610                                  ;			strings as keywords.
 32611                                  ;
 32612                                  ;***********************************************************************
 32613                                  
 32614                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32615                                  cmd_parse:
 32616                                  	;call	sysparse
 32617                                  	;retn
 32618                                  
 32619                                  ; -----------------------------------
 32620                                  
 32621                                  	; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32622                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:44E7h
 32623                                  
 32624                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32625                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4CABh
 32626                                  sysparse:
 32627 0000490C 2EC706[2C97]0000        	mov	word [cs:$P_Flags],0	;AC034; Clear all internal flags
 32628 00004913 2E890E[B697]            	mov	[cs:$P_ORIG_ORD],cx	;AN039; ORIGINAL ORDINAL FROM CX
 32629 00004918 2E8926[B897]            	mov	[cs:$P_ORIG_STACK],sp	;AN039; ORIGINAL VALUE OF STACK FROM SP
 32630 0000491D 2E8936[BA97]            	mov	[cs:$P_ORIG_SI],si	;AN039; ORIGINAL START PARSE POINTER FROM SI
 32631                                  $P_Redo_Time:				;AN039; try to parse time again
 32632 00004922 FC                      	cld				;AN000; confirm forward direction
 32633 00004923 2E890E[1F97]            	mov	[cs:$P_ORDINAL],cx      ;AC034; save operand ordinal
 32634                                  	;mov	word [cs:$P_RC],$P_No_Error
 32635 00004928 2EC706[2197]0000        	mov	word [cs:$P_RC],0	;AC034; Assume no error
 32636 0000492F 2EC706[3497]0000        	mov	word [cs:$P_Found_SYNONYM],0
 32637                                  					;AC034; initalize synonym pointer
 32638 00004936 2EC706[2597]0000        	mov	word [cs:$P_DX],0	;AC034; (tm15)
 32639                                  
 32640                                  ;M029 -- Begin changes
 32641                                  ; The table of special chars $P_FileSp_Char should be initialized on every
 32642                                  ;entry to SysParse. This is in the non-checksum region and any program that
 32643                                  ;corrupts this table but does not corrupt the checksum region will leave
 32644                                  ;command.com parsing in an inconsistent state.
 32645                                  ; NB: The special characters string has been hardcoded here. If any change
 32646                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 32647                                  
 32648 0000493D 2EC706[F197]5B5D        	mov	word [cs:$P_FileSp_Char], '[]'	 ; "[]|<>+=;\""
 32649 00004944 2EC706[F397]7C3C        	mov	word [cs:$P_FileSp_Char+2], '|<'
 32650 0000494B 2EC706[F597]3E2B        	mov	word [cs:$P_FileSp_Char+4], '>+'
 32651 00004952 2EC706[F797]3D3B        	mov 	word [cs:$P_FileSp_Char+6], '=;'
 32652                                  
 32653                                  ;M029 -- End of changes
 32654                                  
 32655 00004959 E83609                  	call	$P_Skip_Delim		;AN000; Move si to 1st non white space
 32656 0000495C 7312                    	jnc	short $P_Start		;AN000; If EOL is not encountered, do parse
 32657                                  
 32658                                  ;--------------------------- End of Line
 32659                                  	;mov	ax,$P_RC_EOL		;AN000; set exit code to -1
 32660 0000495E B8FFFF                  	mov	ax,0FFFFh
 32661 00004961 53                      	push	bx			;AN000;
 32662                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 32663 00004962 268B1D                  	mov	bx,[es:di]		;AN000; Get the PARMSX address to
 32664                                  	
 32665                                  	;cmp	cl,[es:bx+$P_PARMSX_BLK.$P_MinP]
 32666 00004965 263A0F                  	cmp	cl,[es:bx]		;AN000; check ORDINAL to see if the minimum
 32667 00004968 7304                    	jae	short $P_Fin		;AN000; positional found.
 32668                                  
 32669                                  	;mov	ax,2
 32670 0000496A B80200                  	mov	ax,$P_Op_Missing ; 2	;AN000; If no, set exit code to missing operand
 32671                                  	; 27/04/2023
 32672 0000496D F8                      	clc
 32673                                  $P_Fin: 				;AN000;
 32674 0000496E 5B                      	pop	bx			;AN000;
 32675                                  	;jmp	$P_Single_Exit		;AN000; return to the caller
 32676                                  	; 27/04/2023
 32677                                  	; cf = 0
 32678                                  	;clc
 32679 0000496F C3                      	retn
 32680                                  
 32681                                  ;---------------------------
 32682                                  $P_Start:				;AN000;
 32683 00004970 2E8936[2E97]            	mov	[cs:$P_SaveSI_Cmpx],si	;AN000;AC034;  save ptr to command line for later use by complex,
 32684 00004975 53                      	push	bx			;AN000; quoted string or file spec.
 32685 00004976 57                      	push	di			;AN000;
 32686 00004977 55                      	push	bp			;AN000;
 32687 00004978 8D1E[3697]              	lea	bx,$P_STRING_BUF	;AC034; set buffer to copy from command string
 32688 0000497C 2EF606[2D97]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 32689                                  	;test	byte [cs:$P_Flags2],20h	;AC034; 3/9 extra delimiter encountered ?
 32690 00004982 7543                    	jnz	short $P_Pack_End	;AN000; 3/9 if yes, no need to copy
 32691                                  $P_Pack_Loop:				;AN000;
 32692 00004984 AC                      	lodsb				;AN000; Pick a operand from buffer
 32693 00004985 E8BF09                  	call	$P_Chk_Switch		;AN000; Check switch character
 32694 00004988 723C                    	jc	short $P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 32695                                  
 32696 0000498A E82709                  	call	$P_Chk_EOL		;AN000; Check EOL character
 32697 0000498D 7437                    	je	short $P_Pack_End_BY_EOL ;AN000; need backup si
 32698                                  
 32699 0000498F E85409                  	call	$P_Chk_Delim		;AN000; Check delimiter
 32700 00004992 7518                    	jne	short $P_PL01 		;AN000; If no, process next byte
 32701                                  
 32702 00004994 2EF606[2D97]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 32703                                  	;test	byte [cs:$P_Flags2],20h ;AC034; 3/9 If yes and white spec,
 32704 0000499A 7505                    	jnz	short $P_Pack_End_backup_si
 32705                                  					;AN000; (tm08)
 32706 0000499C E8F308                  	call	$P_Skip_Delim		;AN000; skip subsequent white space,too
 32707 0000499F EB26                    	jmp	short $P_Pack_End	;AN000; finish copy by placing NUL at end
 32708                                  
 32709                                  $P_Pack_End_backup_si:			;AN000; (tm08)
 32710 000049A1 2EF606[2D97]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ ; 41h
 32711                                  	;test	byte [cs:$P_Flags2],41h ;AN000;AC034;  (tm08)
 32712 000049A7 741E                    	jz	short $P_Pack_End	;AN000; (tm08)
 32713                                  
 32714 000049A9 4E                      	dec	si			;AN000; (tm08)
 32715 000049AA EB1B                    	jmp	short $P_Pack_End	;AN025; (tm08)
 32716                                  $P_PL01:				;AN000;
 32717 000049AC 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 32718                                  	;cmp	al,'='
 32719 000049AF 3C3D                    	cmp	al,$P_Keyword ; '='	;AN000; if it is equal character,
 32720 000049B1 7506                    	jne	short $P_PL00 		;AN000; then
 32721                                  
 32722 000049B3 2E800E[2D97]01          	or	byte [cs:$P_Flags2],$P_equ
 32723                                  	;or	byte [cs:$P_Flags_2],1	;AC034; remember it in flag
 32724                                  $P_PL00:				;AN000;
 32725 000049B9 43                      	inc	bx			;AN000; ready to see next byte
 32726 000049BA E8B509                  	call	$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 32727 000049BD 73C5                    	jnc	short $P_Pack_Loop	;AN000; if no, process to next byte
 32728                                  
 32729 000049BF AC                      	lodsb				;AN000; if yes, store
 32730 000049C0 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 32731 000049C3 43                      	inc	bx			;AN000; update pointer
 32732 000049C4 EBBE                    	jmp	short $P_Pack_Loop	;AN000; process to next byte
 32733                                  
 32734                                  $P_Pack_End_BY_EOL:			;AN000;
 32735 000049C6 4E                      	dec	si			;AN000; backup si pointer
 32736                                  $P_Pack_End:				;AN000;
 32737 000049C7 2E8936[2397]            	mov	[cs:$P_SI_Save],si	;AC034; save next pointer, SI
 32738                                  	;mov	byte [cs:bx],0
 32739 000049CC 2EC60700                	mov	byte [cs:bx],$P_NULL	;AN000; put NULL at the end
 32740 000049D0 2E891E[3297]            	mov	[cs:$P_Save_EOB],bx
 32741                                  					;AC034; 3/17/87 keep the address for later use of complex
 32742                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 32743 000049D5 268B1D                  	mov	bx,[es:di]		;AN000; get PARMSX address
 32744 000049D8 8D36[3697]              	lea	si,$P_STRING_BUF	;AC034;
 32745                                  	;cmp	byte [cs:si],'/'
 32746 000049DC 2E803C2F                	cmp	byte [cs:si],$P_Switch	;AN000; the operand begins w/ switch char ?
 32747 000049E0 7436                    	je	short $P_SW_Manager	;AN000; if yes, process as switch
 32748                                  
 32749 000049E2 2E803C22                	cmp	byte [cs:si],$P_DQuote	;M005;is it a string?
 32750 000049E6 7408                    	je	short $P_Positional_Manager
 32751                                  					;M005;if so, process as one!
 32752 000049E8 2EF606[2D97]01          	test	byte [cs:$P_Flags2],$P_equ
 32753                                  	;test	byte [cs:$P_Flags2],1	;AC034; the operand includes equal char ?
 32754 000049EE 7554                    	jnz	short $P_Key_Manager	;AN000; if yes, process as keyword
 32755                                  
 32756                                  $P_Positional_Manager:			;AN000; else process as positional
 32757                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 32758 000049F0 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 32759 000049F4 30E4                    	xor	ah,ah			;AN000; ax = maxp
 32760 000049F6 2E3906[1F97]            	cmp	[cs:$P_ORDINAL],ax	;AC034; too many positional ?
 32761 000049FB 7312                    	jae	short $P_Too_Many_Error	;AN000; if yes, set exit code to too many
 32762                                  
 32763 000049FD 2EA1[1F97]              	mov	ax,[cs:$P_ORDINAL]	;AC034; see what the current ordinal
 32764 00004A01 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 32765 00004A03 43                      	inc	bx			;AC035; add '2' to
 32766 00004A04 43                      	inc	bx			;AC035;  BX reg
 32767                                  					;AN000; now bx points to 1st CONTROL
 32768 00004A05 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 32769 00004A07 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 32770 00004A0A E88800                  	call	$P_Chk_Pos_Control	;AN000; Do process for positional
 32771 00004A0D EB69                    	jmp	short $P_Return_to_Caller
 32772                                  					;AN000; and return to the caller
 32773                                  $P_Too_Many_Error:			;AN000;
 32774                                  	;mov	word [cs:$P_RC],1
 32775 00004A0F 2EC706[2197]0100        	mov	word [cs:$P_RC],$P_Too_Many
 32776                                  					;AC034; set exit code
 32777 00004A16 EB60                    	jmp	short $P_Return_to_Caller
 32778                                  					;AN000; and return to the caller
 32779                                  $P_SW_Manager:				;AN000;
 32780                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 32781 00004A18 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 32782 00004A1C 30E4                    	xor	ah,ah			;AN000; ax = maxp
 32783 00004A1E 40                      	inc	ax			;AN000;
 32784 00004A1F D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 32785 00004A21 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 32786 00004A23 268A0F                  	mov	cl,[es:bx]		;AN000;
 32787 00004A26 30ED                    	xor	ch,ch			;AN000; cx = maxs
 32788 00004A28 09C9                    	or	cx,cx			;AN000; at least one switch ?
 32789 00004A2A 740F                    	jz	short $P_SW_Not_Found 	;AN000;
 32790 00004A2C 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 32791                                  $P_SW_Mgr_Loop: 			;AN000;
 32792 00004A2D 53                      	push	bx			;AN000;
 32793 00004A2E 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 32794 00004A31 E8C100                  	call	$P_Chk_SW_Control	;AN000; do process for switch
 32795 00004A34 5B                      	pop	bx			;AN000;
 32796 00004A35 7341                    	jnc	short $P_Return_to_Caller
 32797                                  					;AN000; if the CONTROL is for the switch, exit
 32798 00004A37 43                      	inc	bx			;AC035; add '2' to
 32799 00004A38 43                      	inc	bx			;AC035;  BX reg
 32800                                  					;AN000; else bx points to the next CONTROL
 32801 00004A39 E2F2                    	loop	$P_SW_Mgr_Loop		;AN000; and loop
 32802                                  $P_SW_Not_Found:			;AN000;
 32803                                  	;mov	word [cs:$P_RC],3
 32804 00004A3B 2EC706[2197]0300        	mov	word [cs:$P_RC],$P_Not_In_SW
 32805                                  					;AC034; here no CONTROL for the switch has
 32806 00004A42 EB34                    	jmp	short $P_Return_to_Caller0
 32807                                  					;AN000; not been found, means error.
 32808                                  $P_Key_Manager: 			;AN000;
 32809                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 32810 00004A44 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 32811 00004A48 30E4                    	xor	ah,ah			;AN000; ax = maxp
 32812 00004A4A 40                      	inc	ax			;AN000;
 32813 00004A4B D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 32814 00004A4D 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 32815 00004A4F 268A07                  	mov	al,[es:bx]		;AN000;
 32816 00004A52 30E4                    	xor	ah,ah			;AN000; ax = maxs
 32817 00004A54 D1E0                    	shl	ax,1			;AN000;
 32818 00004A56 40                      	inc	ax			;AN000; ax = ax*2+1
 32819 00004A57 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 32820 00004A59 268A0F                  	mov	cl,[es:bx]		;AN000;
 32821 00004A5C 30ED                    	xor	ch,ch			;AN000; cx = maxk
 32822 00004A5E 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 32823 00004A60 740F                    	jz	short $P_Key_Not_Found	;AN000;
 32824 00004A62 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 32825                                  $P_Key_Mgr_Loop:			;AN000;
 32826 00004A63 53                      	push	bx			;AN000;
 32827 00004A64 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 32828 00004A67 E85A00                  	call	$P_Chk_Key_Control	;AN000; do process for keyword
 32829 00004A6A 5B                      	pop	bx			;AN000;
 32830 00004A6B 730B                    	jnc	short $P_Return_to_Caller
 32831                                  					;AN000; if the CONTROL is for the keyword, exit
 32832 00004A6D 43                      	inc	bx			;AC035; add '2' to
 32833 00004A6E 43                      	inc	bx			;AC035;  BX reg
 32834                                  					;AN000; else bx points to the next CONTROL
 32835 00004A6F E2F2                    	loop	$P_Key_Mgr_Loop 	;AN000; and loop
 32836                                  $P_Key_Not_Found:			;AN000;
 32837                                  	;mov	word [cs:$P_RC],4
 32838 00004A71 2EC706[2197]0400        	mov	word [cs:$P_RC],$P_Not_In_Key
 32839                                  					;AC034; here no CONTROL for the keyword has
 32840                                  $P_Return_to_Caller0:
 32841                                  $P_Return_to_Caller:			;AN000; not been found, means error.
 32842 00004A78 5D                      	pop	bp			;AN000;
 32843 00004A79 5F                      	pop	di			;AN000;
 32844 00004A7A 5B                      	pop	bx			;AN000;
 32845 00004A7B 2E8B0E[1F97]            	mov	cx,[cs:$P_ORDINAL]	;AC034; return next ordinal
 32846 00004A80 2EA1[2197]              	mov	ax,[cs:$P_RC]		;AC034; return exit code
 32847 00004A84 2E8B36[2397]            	mov	si,[cs:$P_SI_Save]	;AC034; return next operand pointer
 32848 00004A89 2E8B16[2597]            	mov	dx,[cs:$P_DX]		;AC034; return result buffer address
 32849 00004A8E 2E8A1E[2797]            	mov	bl,[cs:$P_Terminator]	;AC034; return delimiter code found
 32850                                  $P_Single_Exit: 			;AN000;
 32851 00004A93 F8                      	clc				;AN000;
 32852 00004A94 C3                      	retn				;AN000;
 32853                                  
 32854                                  ;***********************************************************************
 32855                                  ; $P_Chk_Pos_Control
 32856                                  ;
 32857                                  ; Function: Parse CONTROL block for a positional
 32858                                  ;
 32859                                  ; Input:     ES:BX -> CONTROL block
 32860                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 32861                                  ;
 32862                                  ; Output:    None
 32863                                  ;
 32864                                  ; Use:	 $P_Fill_Result, $P_Check_Match_Flags
 32865                                  ;
 32866                                  ; Vars: $P_Ordinal(W), $P_RC(W)
 32867                                  ;***********************************************************************
 32868                                  
 32869                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32870                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4671h
 32871                                  
 32872                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32873                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E35h
 32874                                  $P_Chk_Pos_Control:
 32875 00004A95 50                      	push	ax			;AN000;
 32876                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 32877 00004A96 268B07                  	mov	ax,[es:bx]		;AN000;
 32878                                  	;test	ax,2
 32879 00004A99 A90200                  	test	ax,$P_Repeat		;AN000; repeat allowed ?
 32880 00004A9C 7505                    	jnz	short $P_CPC00		;AN000; then do not increment ORDINAL
 32881                                  
 32882 00004A9E 2EFF06[1F97]            	inc	word [cs:$P_ORDINAL]	;AC034; update the ordinal
 32883                                  $P_CPC00:				;AN000;
 32884                                  	;cmp	byte [cs:si],0
 32885 00004AA3 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; no data ?
 32886 00004AA7 7516                    	jne	short $P_CPC01		;AN000;
 32887                                  
 32888                                  	;test	ax,1
 32889 00004AA9 A90100                  	test	ax,$P_Optional		;AN000; yes, then is it optional ?
 32890 00004AAC 7509                    	jnz	short $P_CPC02		;AN000;
 32891                                  
 32892 00004AAE 2EC706[2197]0200        	mov	word [cs:$P_RC],$P_Op_Missing ; 2
 32893                                  					;AC034; no, then error	 3/17/87
 32894 00004AB5 EB0B                    	jmp	short $P_CPC_Exit	;AN000;
 32895                                  $P_CPC02:				;AN000;
 32896                                  	; 27/04/2023
 32897                                  	;push	ax ; *			;AN000;
 32898                                  	;
 32899                                  	;;mov	al,3
 32900                                  	;mov	al,$P_String		;AN000; if it is optional return NULL
 32901                                  	;;mov	ah,0FFh
 32902                                  	;mov	ah,$P_No_Tag		;AN000; no item tag indication
 32903                                  	;31/03/2023
 32904 00004AB7 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 32905 00004ABA E89500                  	call	$P_Fill_Result		;AN000;
 32906                                  	; 27/04/2023
 32907                                  	;pop	ax ; *			;AN000;
 32908 00004ABD EB03                    	jmp	short $P_CPC_Exit	;AN000;
 32909                                  $P_CPC01:				;AN000;
 32910 00004ABF E81101                  	call	$P_Check_Match_Flags	;AN000;
 32911                                  $P_CPC_Exit:				;AN000;
 32912 00004AC2 58                      	pop	ax			;AN000;
 32913 00004AC3 C3                      	retn				;AN000;
 32914                                  
 32915                                  ;***********************************************************************
 32916                                  ; $P_Chk_Key_Control
 32917                                  ;
 32918                                  ; Function: Parse CONTROL block for a keyword
 32919                                  ;
 32920                                  ; Input:     ES:BX -> CONTROL block
 32921                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 32922                                  ;
 32923                                  ; Output:    CY = 1 : not match
 32924                                  ;
 32925                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 32926                                  ;
 32927                                  ; Vars: $P_RC(W), $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 32928                                  ;***********************************************************************
 32929                                  
 32930                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32931                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32932                                  $P_Chk_Key_Control:			;AN000;
 32933 00004AC4 F9                      	stc				;AN000;this logic works when the KeySW
 32934 00004AC5 C3                      	retn				;AN000;is reset.
 32935                                  
 32936                                  ;***********************************************************************
 32937                                  ; $P_Search_KEYorSW:
 32938                                  ;
 32939                                  ; Function: Seach specified keyword or switch from CONTROL
 32940                                  ;
 32941                                  ; Input:     ES:BX -> CONTROL block
 32942                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 32943                                  ;
 32944                                  ; Output:    CY = 1 : not match
 32945                                  ;
 32946                                  ; Use:	 $P_String_Comp, $P_MoveBP_NUL, $P_Found_SYNONYM
 32947                                  ;***********************************************************************
 32948                                  
 32949                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32950                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32951                                  $P_Search_KEYorSW:
 32952 00004AC6 55                      	push	bp			;AN000;
 32953 00004AC7 51                      	push	cx			;AN000;
 32954 00004AC8 268A4F08                	mov	cl,[es:bx+$P_CONTROL_BLK.$P_nid]
 32955                                  	;mov	cl,[es:bx+8]		;AN000; Get synonym count
 32956                                  	; 14/06/2023
 32957                                  	;xor	ch,ch			;AN000; and set it to cx
 32958                                  	;or	cx,cx			;AN000; No synonyms specified ?
 32959 00004ACC 08C9                    	or	cl,cl
 32960 00004ACE 740E                    	jz	short $P_KEYorSW_Not_Found
 32961                                  					;AN000; then indicate not found by CY
 32962 00004AD0 268D6F09                	lea	bp,[es:bx+$P_CONTROL_BLK.$P_KEYorSW]
 32963                                  	;lea	bp,[es:bx+9]		;AN000; BP points to the 1st synonym
 32964                                  $P_KEYorSW_Loop:			;AN000;
 32965 00004AD4 E8F803                  	call	$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 32966 00004AD7 7308                    	jnc	short $P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 32967 00004AD9 E80D00                  	call	$P_MoveBP_NUL		;AN000; else, bp points to the next string
 32968 00004ADC E2F6                    	loop	$P_KEYorSW_Loop 	;AN000; loop nid times
 32969                                  $P_KEYorSW_Not_Found:			;AN000;
 32970 00004ADE F9                      	stc				;AN000; indicate not found in synonym list
 32971 00004ADF EB05                    	jmp	short $P_KEYorSW_Exit	;AN000; and exit
 32972                                  $P_KEYorSW_Found:			;AN000;
 32973 00004AE1 2E892E[3497]            	mov	[cs:$P_Found_SYNONYM],bp
 32974                                  					;AC034; set synonym pointer
 32975                                  	; 27/04/2023
 32976                                  	; cf = 0
 32977                                  	;clc				;AN000; indicate found
 32978                                  $P_KEYorSW_Exit:			;AN000;
 32979 00004AE6 59                      	pop	cx			;AN000;
 32980 00004AE7 5D                      	pop	bp			;AN000;
 32981 00004AE8 C3                      	retn				;AN000;
 32982                                  
 32983                                  ;***********************************************************************
 32984                                  ; $P_MoveBP_NUL
 32985                                  ;***********************************************************************
 32986                                  
 32987                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32988                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32989                                  $P_MoveBP_NUL:
 32990                                  $P_MBP_Loop:				;AN000;
 32991                                  	;cmp	byte [es:bp+0],0
 32992 00004AE9 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000; Increment BP that points
 32993 00004AEE 7403                    	je	short $P_MBP_Exit	;AN000; to the synomym list
 32994 00004AF0 45                      	inc	bp			;AN000; until
 32995 00004AF1 EBF6                    	jmp	short $P_MBP_Loop	;AN000; NULL encountered.
 32996                                  $P_MBP_Exit:				;AN000;
 32997 00004AF3 45                      	inc	bp			;AN000; bp points to next to NULL
 32998 00004AF4 C3                      	retn				;AN000;
 32999                                  
 33000                                  ;***********************************************************************
 33001                                  ; $P_Chk_SW_Control
 33002                                  ;
 33003                                  ; Function: Parse CONTROL block for a switch
 33004                                  ;
 33005                                  ; Input:     ES:BX -> CONTROL block
 33006                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 33007                                  ;
 33008                                  ; Output:    CY = 1 : not match
 33009                                  ;
 33010                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 33011                                  ;
 33012                                  ; Vars:  $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 33013                                  ;***********************************************************************
 33014                                  
 33015                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33016                                  	;
 33017                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33018                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E9Ah 
 33019                                  $P_Chk_SW_Control:
 33020 00004AF5 2E800E[2D97]10          	or	byte [cs:$P_Flags2],$P_SW_Cmp
 33021                                  	;or	byte [cs:$P_Flags2],10h	;AC034; Indicate switch for later string comparison
 33022 00004AFB E8C8FF                  	call	$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 33023 00004AFE 7251                    	jc	short $P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 33024                                  
 33025 00004B00 2E8026[2D97]EF          	and	byte [cs:$P_Flags2],0FFh-$P_SW_Cmp
 33026                                  	;and	byte [cs:$P_Flags2],0EFh
 33027                                  					;AC034; reset the indicator previously set
 33028 00004B06 50                      	push	ax			;AN000;       /switch:
 33029 00004B07 2EA1[3097]              	mov	ax,[cs:$P_KEYorSW_Ptr]	;AC034;	      ^       ^
 33030 00004B0B 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 33031 00004B0D 2E0106[2E97]            	add	[cs:$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 33032 00004B12 58                      	pop	ax			;AN000;
 33033                                  
 33034 00004B13 2E8B36[3097]            	mov	si,[cs:$P_KEYorSW_Ptr]	;AC034; set si at the end or colon
 33035                                  	;cmp	byte [cs:si],0
 33036 00004B18 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; any data after colon
 33037 00004B1C 7525                    	jne	short $P_CSW00		;AN000; if yes, process match flags
 33038                                  
 33039                                  	;cmp	byte [cs:si],':'
 33040 00004B1E 2E807CFF3A              	cmp	byte [cs:si-1],$P_Colon
 33041                                  					;AN000; if no, the switch terminated by colon ?
 33042 00004B23 7509                    	jne	short $P_Chk_if_data_required
 33043                                  					;AN000; if yes,
 33044                                  
 33045 00004B25 2EC706[2197]0900        	mov	word [cs:$P_RC],$P_Syntax
 33046                                  	;mov	word [cs:$P_RC],9	;AC034; return syntax error
 33047 00004B2C EB1A                    	jmp	short $P_Chk_SW_Exit	;AN000;
 33048                                  
 33049                                  $P_Chk_if_data_required:		;AN018; no data, no colon
 33050                                  	;cmp	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],0
 33051                                  	; 27/04/2023
 33052 00004B2E 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 33053 00004B32 7414                    	je	short $P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 33054                                  
 33055                                  	;;test	word [es:bx],1 ; $P_Optional
 33056                                  	;test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 33057 00004B34 26F60701                	test	byte [es:bx],$P_Optional
 33058                                  					;AN019; see if no value is valid
 33059 00004B38 750E                    	jnz	short $P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 33060                                  
 33061 00004B3A 2EC706[2197]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 33062                                  	;mov	word [cs:$P_RC],2	;AC034; return required operand missing
 33063 00004B41 EB05                    	jmp	short $P_Chk_SW_Exit	;AN018;
 33064                                  
 33065                                  $P_CSW00:				;AN000;
 33066 00004B43 E88D00                  	call	$P_Check_Match_Flags	;AN000; process match flag
 33067 00004B46 F8                      	clc				;AN000; indicate match
 33068                                  	;jmp	short $P_Chk_SW_Single_Exit
 33069 00004B47 C3                      	retn	; 31/03/2023		;AN000;
 33070                                  	; 31/03/2023
 33071                                  ;$P_Chk_SW_Err0: 			;AN000;
 33072                                  ;	stc				;AN000; not found in switch synonym list
 33073                                  ;	;jmp	short $P_Chk_SW_Single_Exit
 33074                                  ;	retn	; 31/03/2023		;AN000;
 33075                                  	
 33076                                  $P_Chk_SW_Exit: 			;AN000;
 33077 00004B48 50                      	push	ax			;AN000;
 33078                                  	; 31/03/2023
 33079 00004B49 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 33080                                  	;;mov	al,3
 33081                                  	;;mov	ah,0FFh
 33082                                  	;mov	al,$P_String		;AN000; set
 33083                                  	;mov	ah,$P_No_Tag		;AN000;    result
 33084 00004B4C E80300                  	call	$P_Fill_Result		;AN000; 	 buffer
 33085 00004B4F 58                      	pop	ax			;AN000;
 33086 00004B50 F8                      	clc				;AN000;
 33087                                  	; 31/03/2023
 33088                                  $P_Chk_SW_Err0:
 33089                                  $P_Chk_SW_Single_Exit:			;AN000;
 33090 00004B51 C3                      	retn				;AN000;
 33091                                  
 33092                                  ;***********************************************************************
 33093                                  ; $P_Fill_Result
 33094                                  ;
 33095                                  ; Function: Fill the result buffer
 33096                                  ;
 33097                                  ; Input:    AH = Item tag
 33098                                  ;	    AL = type
 33099                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 33100                                  ;		  AL = 2: DX has index(offset) into value list
 33101                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 33102                                  ;		  AL = 7: DX has year, CL has month and CH has date
 33103                                  ;		  AL = 8: DL has hours, DH has minutes, CL has secondsn,
 33104                                  ;			  amd CH has hundredths
 33105                                  ;		  AL = else: psdata_seg:SI points to returned string buffer
 33106                                  ;	    ES:BX -> CONTROL block
 33107                                  ;
 33108                                  ; Output:   None
 33109                                  ;
 33110                                  ; Use:	$P_Do_CAPS_String, $P_Remove_Colon, $P_Found_SYNONYM
 33111                                  ;
 33112                                  ; Vars: $P_DX(W)
 33113                                  ;***********************************************************************
 33114                                  
 33115                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33116                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33117                                  $P_Fill_Result:
 33118 00004B52 57                      	push	di			;AN000;
 33119 00004B53 268B7F04                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Result_Buf]
 33120                                  	;mov	di,[es:bx+4]		;AN000; di points to result buffer
 33121 00004B57 2E893E[2597]            	mov	[cs:$P_DX],di		;AC034; set returned result address
 33122                                  	;mov	[es:di+$P_RESULT_BLK.$P_Type],al
 33123                                  	;;mov	[es:di],al		;AN000; store type
 33124                                  	;mov	[es:di+$P_RESULT_BLK.$P_Item_Tag],ah
 33125                                  	;;mov	[es:di+1],ah		;AN000; store item tag
 33126                                  	; 31/03/2023
 33127 00004B5C 268905                  	mov	[es:di],ax
 33128 00004B5F 50                      	push	ax			;AN000;
 33129 00004B60 2EA1[3497]              	mov	ax,[cs:$P_Found_SYNONYM]
 33130                                  					;AC034; if yes,
 33131 00004B64 26894502                	mov	[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr],ax
 33132                                  	;mov	[es:di+2],ax		;AN000;   then set it to the result
 33133 00004B68 58                      	pop	ax			;AN000;
 33134                                  $P_RLT04:				;AN000;
 33135                                  	;cmp	al,1
 33136 00004B69 3C01                    	cmp	al,$P_Number		;AN000; if number
 33137 00004B6B 750A                    	jne	short $P_RLT00		;AN000;
 33138                                  $P_RLT02:				;AN000;
 33139 00004B6D 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 33140                                  	;mov	[es:di+4],dx		;AN000; then store 32bit
 33141 00004B71 26894D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cx
 33142                                  	;mov	[es:di+6],cx		;AN000;	number
 33143 00004B75 EB5A                    	jmp	short $P_RLT_Exit	;AN000;
 33144                                  $P_RLT00:				;AN000;
 33145                                  	;cmp	al,2
 33146 00004B77 3C02                    	cmp	al,$P_List_Idx		;AN000; if list index
 33147 00004B79 7506                    	jne	short $P_RLT01		;AN000;
 33148 00004B7B 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 33149                                  	;mov	[es:di+4],dx		;AN000; then store list index
 33150 00004B7F EB50                    	jmp	short $P_RLT_Exit	;AN000;
 33151                                  $P_RLT01:				;AN000;
 33152                                  	;cmp	al,7
 33153 00004B81 3C07                    	cmp	al,$P_Date_F ; 7	;AN000; Date format ?
 33154 00004B83 74E8                    	je	short $P_RLT02		;AN000;
 33155                                  	;cmp	al,8
 33156 00004B85 3C08                    	cmp	al,$P_Time_F ; 8	;AN000; Time format ?
 33157 00004B87 74E4                    	je	short $P_RLT02		;AN000;
 33158                                  	;cmp	al,6
 33159 00004B89 3C06                    	cmp	al,$P_Drive  ; 6	;AN000; drive format ?
 33160 00004B8B 7506                    	jne	short $P_RLT03		;AN000;
 33161                                  
 33162 00004B8D 26885504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dl
 33163                                  	;mov	[es:di+4],dl		;AN000; store drive number
 33164 00004B91 EB3E                    	jmp	short $P_RLT_Exit	;AN000;
 33165                                  
 33166                                  $P_RLT03:				;AN000;
 33167                                  	;cmp	al,4
 33168 00004B93 3C04                    	cmp	al,$P_Complex		;AN000; complex format ?
 33169 00004B95 750F                    	jne	short $P_RLT05		;AN000;
 33170                                  
 33171 00004B97 2EA1[2E97]              	mov	ax,[cs:$P_SaveSI_Cmpx]	;AC034; then get pointer in command buffer
 33172 00004B9B 40                      	inc	ax			;AN000; skip left Parentheses
 33173 00004B9C 26894504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],ax
 33174                                  	;mov	[es:di+4],ax		;AN000; store offset
 33175 00004BA0 268C5D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],ds
 33176                                  	;mov	[es:di+6],ds		;AN000; store segment
 33177 00004BA4 EB2B                    	jmp	short $P_RLT_Exit	;AN000;
 33178                                  
 33179                                  $P_RLT05:				;AN000;
 33180                                  ;------------------------  AL = 3, 5, or 9
 33181 00004BA6 26897504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],si
 33182                                  	;mov	[es:di+4],si		;AN000; store offset of STRING_BUF
 33183 00004BAA 268C4D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cs
 33184                                  	;mov	[es:di+6],cs		;AN031; store segment of STRING_BUF
 33185                                  
 33186 00004BAE 50                      	push	ax			;AN000;
 33187 00004BAF 26F6470201              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File
 33188                                  	;test	byte [es:bx+2],1	;AN000; need CAPS by file table?
 33189 00004BB4 7404                    	jz	short $P_RLT_CAP00	;AN000;
 33190                                  
 33191                                  	;mov	al,4
 33192 00004BB6 B004                    	mov	al,$P_DOSTBL_File ; 4	;AN000; use file upper case table
 33193 00004BB8 EB09                    	jmp	short $P_RLT_CAP02	;AN000;
 33194                                  
 33195                                  $P_RLT_CAP00:				;AN000;
 33196 00004BBA 26F6470202              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char
 33197                                  	;test	byte [es:bx+2],2	;AN000; need CAPS by char table ?
 33198 00004BBF 7405                    	jz	short $P_RLT_CAP01	;AN000;
 33199                                  
 33200                                  	;mov	al,2
 33201 00004BC1 B002                    	mov	al,$P_DOSTBL_Char ; 2	;AN000; use character upper case table
 33202                                  $P_RLT_CAP02:				;AN000;
 33203 00004BC3 E80C01                  	call	$P_Do_CAPS_String	;AN000;  process CAPS along the table
 33204                                  $P_RLT_CAP01:				;AN000;
 33205 00004BC6 58                      	pop	ax			;AN000;
 33206 00004BC7 26F6470210              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon
 33207                                  	;test	byte [es:bx+2],10h	;AN000; removing colon at end ?
 33208 00004BCC 7403                    	jz	short $P_RLT_Exit	;AN000;
 33209                                  
 33210 00004BCE E8DD00                  	call	$P_Remove_Colon 	;AN000; then process it.
 33211                                  $P_RLT_Exit:				;AN000;
 33212 00004BD1 5F                      	pop	di			;AN000;
 33213 00004BD2 C3                      	retn				;AN000;
 33214                                  
 33215                                  ;***********************************************************************
 33216                                  ; $P_Check_Match_Flags
 33217                                  ;
 33218                                  ; Function:  Check the mutch_flags and make the exit code and set the
 33219                                  ;	     result buffer
 33220                                  ;
 33221                                  ;	    Check for types in this order:
 33222                                  ;		Complex
 33223                                  ;		Date
 33224                                  ;		Time
 33225                                  ;		Drive
 33226                                  ;		Filespec
 33227                                  ;		Quoted String
 33228                                  ;		Simple String
 33229                                  ;
 33230                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 33231                                  ;	     ES:BX -> CONTROL block
 33232                                  ;
 33233                                  ; Output:    None
 33234                                  ;
 33235                                  ; Use:	     $P_Value, P$_SValue, $P_Simple_String, $P_Date_Format
 33236                                  ;	     $P_Time_Format, $P_Complex_Format, $P_File_Foemat
 33237                                  ;	     $P_Drive_Format
 33238                                  ;***********************************************************************
 33239                                  
 33240                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33241                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33242                                  $P_Check_Match_Flags:
 33243 00004BD3 2EC606[FA97]00          	mov	byte [cs:$P_err_flag],$P_NULL ; 0
 33244                                  					;AN033;AC034;; clear filespec error flag.
 33245 00004BD9 50                      	push	ax			;AN000;
 33246                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 33247 00004BDA 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 33248 00004BDD 09C0                    	or	ax,ax			;AC035; test ax for zero
 33249 00004BDF 7518                    	jnz	short $P_Mat		;AN000; (tm12)
 33250 00004BE1 50                      	push	ax			;AN000; (tm12)
 33251 00004BE2 53                      	push	bx			;AN000; (tm12)
 33252 00004BE3 52                      	push	dx			;AN000; (tm12)
 33253 00004BE4 57                      	push	di			;AN000; (tm12)
 33254 00004BE5 2EC706[2197]0900        	mov	word [cs:$P_RC],$P_Syntax
 33255                                  	;mov	word [cs:$P_RC],9	;AC034; (tm12)
 33256                                  	; 31/03/2023
 33257 00004BEC B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 33258                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; (tm12)
 33259                                  	;mov	al,$P_String ; 3	;AN000; (tm12)
 33260 00004BEF E860FF                  	call	$P_Fill_Result		;AN000; (tm12)
 33261 00004BF2 5F                      	pop	di			;AN000; (tm12)
 33262 00004BF3 5A                      	pop	dx			;AN000; (tm12)
 33263 00004BF4 5B                      	pop	bx			;AN000; (tm12)
 33264 00004BF5 58                      	pop	ax			;AN000; (tm12)
 33265                                  	;jmp	short $P_Bridge 	;AC035; (tm12)
 33266                                  	; 31/03/2023
 33267                                  $P_Bridge:	; 18/04/2023		;AN000;
 33268 00004BF6 E99C00                  	jmp	$P_Match_Exit		;AN000; (tm02)
 33269                                  $P_Mat: 				;AN000; (tm12)
 33270                                  $P_Match01:				;AN000;
 33271                                  	;test	ax,1000h
 33272 00004BF9 A90010                  	test	ax,$P_Date_S		;AN000; Date string
 33273 00004BFC 7412                    	jz	short $P_Match02	;AN000;
 33274 00004BFE 2EC706[2197]0000        	mov	word [cs:$P_RC],$P_No_Error
 33275                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 33276 00004C05 E86503                  	call	$P_Date_Format		;AN000; do process
 33277 00004C08 2E833E[2197]09          	cmp	word [cs:$P_RC],$P_Syntax
 33278                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 33279                                  	; 18/04/2023
 33280 00004C0E 75E6                    	jne	short $P_Bridge		;AN000;
 33281                                  $P_Match02:				;AN000;
 33282                                  	;test	ax,800h
 33283 00004C10 A90008                  	test	ax,$P_Time_S		;AN000; Time string
 33284 00004C13 7412                    	jz	short $P_Match03	;AN000;
 33285 00004C15 2EC706[2197]0000        	mov	word [cs:$P_RC],$P_No_Error
 33286                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 33287 00004C1C E86004                  	call	$P_Time_Format		;AN000; do process
 33288 00004C1F 2E833E[2197]09          	cmp	word [cs:$P_RC],$P_Syntax
 33289                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 33290                                  	;jne	short $P_Bridge		;AN000; (tm09)
 33291                                  	;jmp	short $P_Match03	;AN025; (tm09)
 33292                                  	; 31/03/2023
 33293 00004C25 756E                    	jne	short $P_Match_Exit
 33294                                  ;$P_Bridge:				;AN000;
 33295                                  	;jmp	short $P_Match_Exit	;AN000; (tm02)
 33296                                  $P_Match03:				;AN000;
 33297                                  	;test	ax,8000h
 33298 00004C27 A90080                  	test	ax,$P_Num_Val		;AN000; Numeric value
 33299 00004C2A 7412                    	jz	short $P_Match04	;AN000;
 33300 00004C2C 2EC706[2197]0000        	mov	word [cs:$P_RC],$P_No_Error
 33301                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 33302 00004C33 E82C01                  	call	$P_Value		;AN000; do process
 33303 00004C36 2E833E[2197]09          	cmp	word [cs:$P_RC],$P_Syntax
 33304                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 33305 00004C3C 7557                    	jne	short $P_Match_Exit	;AN000;
 33306                                  $P_Match04:				;AN000;
 33307                                  	;test	ax,4000h
 33308 00004C3E A90040                  	test	ax,$P_SNum_Val		;AN000; Signed numeric value
 33309 00004C41 7412                    	jz	short $P_Match05	;AN000;
 33310 00004C43 2EC706[2197]0000        	mov	word [cs:$P_RC],$P_No_Error
 33311                                  					;AC034; assume no error
 33312 00004C4A E8F100                  	call	$P_SValue		;AN000; do process
 33313 00004C4D 2E833E[2197]09          	cmp	word [cs:$P_RC],$P_Syntax
 33314                                  					;AC034; if error, examine the next type
 33315 00004C53 7540                    	jne	short $P_Match_Exit	;AN000;
 33316                                  $P_Match05:				;AN000;
 33317                                  	;test	ax,100h
 33318 00004C55 A90001                  	test	ax,$P_Drv_Only		;AN000; Drive only
 33319 00004C58 7415                    	jz	short $P_Match06	;AN000;
 33320 00004C5A 2EC706[2197]0000        	mov	word [cs:$P_RC],$P_No_Error
 33321                                  					;AC034; assume no error
 33322 00004C61 E86805                  	call	$P_File_Format		;AN000; 1st, call file format
 33323 00004C64 E8E905                  	call	$P_Drive_Format 	;AN000; check drive format, next
 33324 00004C67 2E833E[2197]09          	cmp	word [cs:$P_RC],$P_Syntax
 33325                                  					;AC034; if error, examinee the next type
 33326 00004C6D 7526                    	jne	short $P_Match_Exit	;AN000;
 33327                                  $P_Match06:				;AN000;
 33328                                  	;test	ax,200h
 33329 00004C6F A90002                  	test	ax,$P_File_Spc		;AN000; File spec
 33330 00004C72 7412                    	jz	short $P_Match07	;AN000;
 33331 00004C74 2EC706[2197]0000        	mov	word [cs:$P_RC],$P_No_Error
 33332                                  					;AC034; assume no error
 33333 00004C7B E84E05                  	call	$P_File_Format		;AN000; do process
 33334 00004C7E 2E833E[2197]09          	cmp	word [cs:$P_RC],$P_Syntax
 33335                                  					;AC034; if error, examine the next type
 33336 00004C84 750F                    	jne	short $P_Match_Exit	;AN000;
 33337                                  $P_Match07:				;AN000;
 33338                                  $P_Match08:				;AN000;
 33339                                  	;test	ax,2000h
 33340 00004C86 A90020                  	test	ax,$P_Simple_S		;AN000; Simple string
 33341 00004C89 740A                    	jz	short $P_Match09	;AN000;
 33342 00004C8B 2EC706[2197]0000        	mov	word [cs:$P_RC],$P_No_Error
 33343                                  					;AC034; assume no error
 33344 00004C92 E8D601                  	call	$P_Simple_String	;AN000; do process
 33345                                  $P_Match09:				;AN000;
 33346                                  $P_Match_Exit:				;AN000;
 33347 00004C95 2E833E[FA97]01          	cmp	word [cs:$P_err_flag],$P_error_filespec
 33348                                  	;cmp	word [cs:$P_err_flag],1 ;AC034; bad filespec ?
 33349 00004C9B 750F                    	jne	short $P_Match2_Exit	;AN033; no, continue
 33350 00004C9D 2E833E[2197]00          	cmp	word [cs:$P_RC],$P_No_Error
 33351                                  	;cmp	word [cs:$P_RC],0	;AN033;AC034;; check for other errors ?
 33352 00004CA3 7507                    	jne	short $P_Match2_Exit	;AN033; no, continue
 33353 00004CA5 2EC706[2197]0900        	mov	word [cs:$P_RC],$P_Syntax
 33354                                  	;mov	word [cs:$P_RC],9	;AN033;AC034;; set error flag
 33355                                  $P_Match2_Exit: 			;AN033;
 33356 00004CAC 58                      	pop	ax			;AN000;
 33357 00004CAD C3                      	retn
 33358                                  
 33359                                  ;***********************************************************************
 33360                                  ; $P_Remove_Colon;
 33361                                  ;
 33362                                  ; Function: Remove colon at end
 33363                                  ;
 33364                                  ; Input:    psdata_seg:SI points to string buffer to be examineed
 33365                                  ;
 33366                                  ; Output:   None
 33367                                  ;
 33368                                  ; Use:	$P_Chk_DBCS
 33369                                  ;***********************************************************************
 33370                                  
 33371                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33372                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33373                                  $P_Remove_Colon:
 33374 00004CAE 50                      	push	ax			;AN000;
 33375 00004CAF 56                      	push	si			;AN000;
 33376                                  $P_RCOL_Loop:				;AN000;
 33377 00004CB0 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 33378 00004CB3 08C0                    	or	al,al			;AN000; end of string ?
 33379 00004CB5 740F                    	jz	short $P_RCOL_Exit	;AN000; if yes, just exit
 33380                                  
 33381 00004CB7 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; is it colon ?
 33382 00004CB9 750E                    	jne	short $P_RCOL00		;AN000;
 33383                                  
 33384                                  	;cmp	byte [cs:si+1],0
 33385 00004CBB 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; if so, next is NULL ?
 33386 00004CC0 7507                    	jne	short $P_RCOL00		;AN000; no, then next char
 33387                                  
 33388 00004CC2 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; yes, remove colon
 33389                                  	; 31/03/2023
 33390                                  	;jmp	short $P_RCOL_Exit	;AN000; and exit.
 33391                                  $P_RCOL_Exit:
 33392 00004CC6 5E                      	pop	si
 33393 00004CC7 58                      	pop	ax
 33394 00004CC8 C3                      	retn
 33395                                  
 33396                                  $P_RCOL00:				;AN000;
 33397 00004CC9 E8A606                  	call	$P_Chk_DBCS		;AN000; if not colon, then check if
 33398 00004CCC 7301                    	jnc	short $P_RCOL01		;AN000; DBCS leading byte.
 33399                                  
 33400 00004CCE 46                      	inc	si			;AN000; if yes, skip trailing byte
 33401                                  $P_RCOL01:				;AN000;
 33402 00004CCF 46                      	inc	si			;AN000; si points to next byte
 33403 00004CD0 EBDE                    	jmp	short $P_RCOL_Loop	;AN000; loop until NULL encountered
 33404                                  
 33405                                  	; 31/03/2023
 33406                                  ;$P_RCOL_Exit:				;AN000;
 33407                                  	;pop	si			;AN000;
 33408                                  	;pop	ax			;AN000;
 33409                                  	;retn
 33410                                  
 33411                                  ;***********************************************************************
 33412                                  ; $P_Do_CAPS_String;
 33413                                  ;
 33414                                  ; Function: Perform capitalization along with the file case map table
 33415                                  ;	    or character case map table.
 33416                                  ;
 33417                                  ; Input:    AL = 2 : Use character table
 33418                                  ;	    AL = 4 : Use file table
 33419                                  ;	    psdata_seg:SI points to string buffer to be capitalized
 33420                                  ;
 33421                                  ; Output:   None
 33422                                  ;
 33423                                  ; Use:	$P_Do_CAPS_Char, $P_Chk_DBCS
 33424                                  ;***********************************************************************
 33425                                  
 33426                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33427                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33428                                  $P_Do_CAPS_String:
 33429 00004CD2 56                      	push	si			;AN000;
 33430 00004CD3 52                      	push	dx			;AN000;
 33431 00004CD4 88C2                    	mov	dl,al			;AN000; save info id
 33432                                  $P_DCS_Loop:				;AN000;
 33433 00004CD6 2E8A04                  	mov	al,[cs:si]		;AN000; load character and
 33434 00004CD9 E89606                  	call	$P_Chk_DBCS		;AN000; check if DBCS leading byte
 33435 00004CDC 720C                    	jc	short $P_DCS00		;AN000; if yes, do not need CAPS
 33436                                  
 33437 00004CDE 08C0                    	or	al,al			;AN000; end of string ?
 33438 00004CE0 740C                    	jz	short $P_DCS_Exit	;AN000; then exit.
 33439                                  
 33440 00004CE2 E80C00                  	call	$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 33441 00004CE5 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 33442 00004CE8 EB01                    	jmp	short $P_DCS01		;AN000; process nexit
 33443                                  $P_DCS00:				;AN000;
 33444 00004CEA 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 33445                                  $P_DCS01:				;AN000;
 33446 00004CEB 46                      	inc	si			;AN000; si point to next byte
 33447 00004CEC EBE8                    	jmp	short $P_DCS_Loop	;AN000; loop until NULL encountered
 33448                                  $P_DCS_Exit:				;AN000;
 33449 00004CEE 5A                      	pop	dx			;AN000;
 33450 00004CEF 5E                      	pop	si			;AN000;
 33451 00004CF0 C3                      	retn
 33452                                  
 33453                                  ;***********************************************************************
 33454                                  ; $P_Do_CAPS_Char;
 33455                                  ;
 33456                                  ; Function: Perform capitalization along with the file case map table
 33457                                  ;	    or character case map table.
 33458                                  ;
 33459                                  ; Input:    DL = 2 : Use character table
 33460                                  ;	    DL = 4 : Use file table
 33461                                  ;	    AL = character to be capitalized
 33462                                  ;
 33463                                  ; Output:   None
 33464                                  ;
 33465                                  ; Use:	INT 21h /w AH=65h
 33466                                  ;***********************************************************************
 33467                                  
 33468                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33469                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33470                                  $P_Do_CAPS_Char:
 33471 00004CF1 3C80                    	cmp	al,$P_ASCII80	; 80h	;AN000; need upper case table ?
 33472 00004CF3 730B                    	jae	short $P_DCC_Go		;AN000;
 33473                                  
 33474 00004CF5 3C61                    	cmp	al,"a"  ; 61h		;AN000; if no,
 33475 00004CF7 7244                    	jb	short $P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 33476                                  
 33477 00004CF9 3C7A                    	cmp	al,"z"  ; 7Ah		;AN000;
 33478 00004CFB 7740                    	ja	short $P_CAPS_Ret	;AN000;   if yes, make CAPS
 33479                                  
 33480 00004CFD 24DF                    	and	al,$P_Make_Upper ; 0DFh	;AN000;   else do nothing.
 33481                                  	;jmp	short $P_CAPS_Ret	;AN000;
 33482                                  	; 18/04/2023
 33483 00004CFF C3                      	retn
 33484                                  
 33485                                  $P_DCC_Go:				;AN000;
 33486 00004D00 53                      	push	bx			;AN000;
 33487 00004D01 06                      	push	es			;AN000;
 33488 00004D02 57                      	push	di			;AN000;
 33489                                  	; 18/04/2023
 33490 00004D03 8D3E[EC97]              	lea	di,$P_File_CAP_Ptr	;AC034;
 33491 00004D07 80FA04                  	cmp	dl,$P_DOSTBL_File ; 4	;AN000; Use file CAPS table ?
 33492 00004D0A 7404                    	je	short $P_DCC00		;AN000;
 33493                                  	; 27/04/2023
 33494 00004D0C 8D3E[E797]              	lea	di,$P_Char_CAP_Ptr	;AC034; or use char CAPS table ?
 33495                                  $P_DCC00:				;AN000;
 33496 00004D10 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 33497 00004D13 7417                    	je	short $P_DCC01		;AN000; if no,
 33498                                  
 33499                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 33500                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 33501                                  ; call, regardless of what base register is currently be defined as PSDATA_SEG.
 33502                                  
 33503 00004D15 50                      	push	ax			;AN000; get CAPS table thru DOS call
 33504 00004D16 51                      	push	cx			;AN000;
 33505 00004D17 52                      	push	dx			;AN000;
 33506 00004D18 0E                      	push	cs			;AC036; pass current base seg into
 33507                                  					;(Note: this used to push CS. BUG...
 33508 00004D19 07                      	pop	es			;AN000;   ES reg, required for
 33509                                  					;get extended country information
 33510                                  	; 31/03/2023
 33511 00004D1A B465                    	mov	ah,$P_DOS_Get_TBL ; 65h	;AN000; get extended CDI
 33512                                  	;mov	ah,65h
 33513 00004D1C 88D0                    	mov	al,dl			;AN000; upper case table
 33514                                  	;mov	bx,-1 ; 0FFFFh
 33515                                  	;mov	cx,5
 33516                                  	;mov	dx,-1
 33517 00004D1E BBFFFF                  	mov	bx,$P_DOSTBL_Def ; -1	;AN000; get active CON
 33518 00004D21 B90500                  	mov	cx,$P_DOSTBL_BL  ; 5 	;AN000; buffer length
 33519 00004D24 BAFFFF                  	mov	dx,$P_DOSTBL_Def ; -1	;AN000; get for default code page
 33520                                  					;DI already set to point to buffer
 33521 00004D27 CD21                    	int	21h			;AN000; es:di point to buffer that
 33522                                  					;now has been filled in with info
 33523 00004D29 5A                      	pop	dx			;AN000;
 33524 00004D2A 59                      	pop	cx			;AN000;
 33525 00004D2B 58                      	pop	ax			;AN000;
 33526                                  
 33527                                  $P_DCC01:				;AN000;
 33528                                  
 33529                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 33530                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 33531                                  ; regardless of which base reg is currently the PSDATA_SEG reg.
 33532                                  
 33533 00004D2C 2E8B5D01                	mov	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 33534                                  	;mov	bx,[cs:di+1]		;AN000; get offset of table
 33535 00004D30 2E8E4503                	mov	es,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Seg]
 33536                                  	;mov	es,[cs:di+3]		;AN000; get segment of table
 33537 00004D34 43                      	inc	bx			;AC035; add '2' to
 33538 00004D35 43                      	inc	bx			;AC035;  BX reg
 33539                                  					;AN000; skip length field
 33540 00004D36 2C80                    	sub	al,$P_ASCII80 ; 80h	;AN000; make char to index
 33541                                  	;xlat	es:[bx] 		;AN000; perform case map
 33542                                  	; 31/03/2023
 33543 00004D38 26D7                    	es	xlat
 33544                                  
 33545 00004D3A 5F                      	pop	di			;AN000;
 33546 00004D3B 07                      	pop	es			;AN000;
 33547 00004D3C 5B                      	pop	bx			;AN000;
 33548                                  $P_CAPS_Ret:				;AN000;
 33549 00004D3D C3                      	retn
 33550                                  
 33551                                  ;***********************************************************************
 33552                                  ; $P_Value / $P_SValue
 33553                                  ;
 33554                                  ; Function:  Make 32bit value from psdata_seg:SI and see value list
 33555                                  ;	     and make result buffer.
 33556                                  ;	     $P_SValue is an entry point for the signed value
 33557                                  ;	     and this will simply call $P_Value after the handling
 33558                                  ;	     of the sign character, "+" or "-"
 33559                                  ;
 33560                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 33561                                  ;	     ES:BX -> CONTROL block
 33562                                  ;
 33563                                  ; Output:    None
 33564                                  ;
 33565                                  ; Use:	$P_Fill_Result, $P_Check_OVF
 33566                                  ;
 33567                                  ; Vars: $P_RC(W), $P_Flags(RW)
 33568                                  ;***********************************************************************
 33569                                  
 33570                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33571                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33572                                  $P_SValue:
 33573 00004D3E 50                      	push	ax			;AN000;
 33574                                  	;or	byte [cs:$P_Flags2],80h
 33575 00004D3F 2E800E[2D97]80          	or	byte [cs:$P_Flags2],$P_Signed
 33576                                  					;AC034; indicate a signed numeric
 33577                                  	;and	byte [cs:$P_Flags2],0FDh
 33578 00004D45 2E8026[2D97]FD          	and	byte [cs:$P_Flags2],0FFh-$P_Neg
 33579                                  					;AC034; assume positive value
 33580 00004D4B 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 33581 00004D4E 3C2B                    	cmp	al,'+' ; 2Bh
 33582                                  	;cmp	al,$P_Plus ; '+'	;AN000; "+" ?
 33583 00004D50 740A                    	je	short $P_SVal00		;AN000;
 33584                                  
 33585 00004D52 3C2D                    	cmp	al,'-' ; 2Dh
 33586                                  	;cmp	al,$P_Minus ; '-'	;AN000; "-" ?
 33587 00004D54 7507                    	jne	short $P_Sval01		;AN000; else
 33588                                  
 33589 00004D56 2E800E[2D97]02          	or	byte [cs:$P_Flags2],$P_Neg ; 2
 33590                                  					;AC034; set this is negative value
 33591                                  $P_SVal00:				;AN000;
 33592 00004D5C 46                      	inc	si			;AN000; skip sign char
 33593                                  $P_Sval01:				;AN000;
 33594 00004D5D E80200                  	call	$P_Value		;AN000; and process value
 33595 00004D60 58                      	pop	ax			;AN000;
 33596 00004D61 C3                      	retn				;AN000;
 33597                                  
 33598                                  ;***********************************************************************
 33599                                  
 33600                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33601                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4955h
 33602                                  
 33603                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33604                                  	; MSDOS 6.2 COMMAND.COM - TRANGROUP:5119h
 33605                                  $P_Value:
 33606 00004D62 50                      	push	ax			;AN000;
 33607 00004D63 51                      	push	cx			;AN000;
 33608 00004D64 52                      	push	dx			;AN000;
 33609 00004D65 56                      	push	si			;AN000;
 33610 00004D66 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 33611 00004D68 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 33612 00004D6A 53                      	push	bx			;AN000; save control pointer
 33613                                  $P_Value_Loop:				;AN000;
 33614 00004D6B 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 33615 00004D6E 08C0                    	or	al,al			;AN000; end of line ?
 33616 00004D70 7442                    	jz	short $P_Value00	;AN000;
 33617                                  
 33618 00004D72 E8EB00                  	call	$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 33619 00004D75 7239                    	jc	short $P_Value_Err0	;AN000;
 33620                                  
 33621 00004D77 30E4                    	xor	ah,ah			;AN000;
 33622 00004D79 89C5                    	mov	bp,ax			;AN000; save binary number
 33623 00004D7B D1E2                    	shl	dx,1			;AN000; to have 2*x
 33624 00004D7D D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 33625 00004D7F E8CC00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33626 00004D82 722C                    	jc	short $P_Value_Err0	;AN000; then error, exit
 33627                                  
 33628 00004D84 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 33629 00004D86 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 33630 00004D88 D1E2                    	shl	dx,1			;AN000; to have 4*x
 33631 00004D8A D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 33632 00004D8C E8BF00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33633 00004D8F 721F                    	jc	short $P_Value_Err0	;AN000; then error, exit
 33634                                  
 33635 00004D91 D1E2                    	shl	dx,1			;AN000; to have 8*x
 33636 00004D93 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 33637 00004D95 E8B600                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33638 00004D98 7216                    	jc	short $P_Value_Err0	;AN000; then error, exit
 33639                                  
 33640 00004D9A 01DA                    	add	dx,bx			;AN000; now have 10*x
 33641 00004D9C 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 33642 00004D9E E8AD00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33643 00004DA1 720D                    	jc	short $P_Value_Err0	;AN000; then error, exit
 33644                                  
 33645 00004DA3 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 33646 00004DA5 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 33647 00004DA8 E8A300                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33648 00004DAB 7203                    	jc	short $P_Value_Err0	;AN000; then error, exit
 33649                                  
 33650 00004DAD 46                      	inc	si			;AN000; update pointer
 33651 00004DAE EBBB                    	jmp	short $P_Value_Loop	;AN000; loop until NULL encountered
 33652                                  
 33653                                  $P_Value_Err0:				;AN000;
 33654 00004DB0 5B                      	pop	bx			;AN000;
 33655 00004DB1 E98800                  	jmp	$P_Value_Err		;AN000; Bridge
 33656                                  
 33657                                  $P_Value00:				;AN000;
 33658 00004DB4 5B                      	pop	bx			;AN000; restore control pointer
 33659 00004DB5 2EF606[2D97]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2 
 33660                                  					;AC034; here cx,dx = 32bit value
 33661 00004DBB 740A                    	jz	short $P_Value01	;AN000; was it negative ?
 33662                                  
 33663 00004DBD F7D1                    	not	cx			;AN000; +
 33664 00004DBF F7D2                    	not	dx			;AN000; |- Make 2's complement
 33665 00004DC1 83C201                  	add	dx,1			;AN000; |
 33666 00004DC4 83D100                  	adc	cx,0			;AN000; +
 33667                                  $P_Value01:				;AN000; / nval =0
 33668 00004DC7 268B7706                	mov	si,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 33669                                  	;mov	si,[es:bx+6]		;AN000; si points to value list
 33670 00004DCB 268A04                  	mov	al,[es:si]		;AN000; get nval
 33671 00004DCE 3C00                    	cmp	al,$P_nval_None ; 0	;AN000; no value list ?
 33672 00004DD0 7505                    	jne	short $P_Value02	;AN000;
 33673                                  
 33674                                  	;mov	al,$P_Number	; 1	;AN000; Set type
 33675                                  	;mov	ah,$P_No_Tag	; 0FFh	;AN000; No ITEM_TAG set
 33676                                  	; 31/03/2023
 33677 00004DD2 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 33678 00004DD5 EB6F                    	jmp	short $P_Value_Exit	;AN000;
 33679                                  
 33680                                  $P_Value02:				;AN000; / nval = 1
 33681 00004DD7 46                      	inc	si			;AN000;
 33682 00004DD8 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 33683 00004DDB 3C00                    	cmp	al,$P_No_nrng	; 0	;AN000; (tm07)
 33684 00004DDD 745D                    	je	short $P_Value03	;AN000; (tm07)
 33685                                  
 33686 00004DDF 46                      	inc	si			;AN000; si points to 1st item_tag
 33687                                  $P_Val02_Loop:				;AN000;
 33688 00004DE0 2EF606[2D97]80          	test	byte [cs:$P_Flags2],$P_Signed ; 80h
 33689                                  	;test	byte [cs:$P_Flags2],80h	;AC034;
 33690 00004DE6 751E                    	jnz	short $P_Val02_Sign	;AN000;
 33691                                  
 33692 00004DE8 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 33693                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 33694 00004DEC 723B                    	jb	short $P_Val02_Next	;AN000;
 33695 00004DEE 7706                    	ja	short $P_Val_In		;AN000;
 33696                                  
 33697 00004DF0 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 33698                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 33699 00004DF4 7233                    	jb	short $P_Val02_Next	;AN000;
 33700                                  
 33701                                  $P_Val_In:				;AN000;
 33702 00004DF6 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 33703                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH (tm01)
 33704 00004DFA 772D                    	ja	short $P_Val02_Next	;AN000;
 33705 00004DFC 7224                    	jb	short $P_Val_Found	;AN000;
 33706                                  
 33707 00004DFE 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 33708                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 33709 00004E02 7725                    	ja	short $P_Val02_Next	;AN000;
 33710                                  
 33711 00004E04 EB1C                    	jmp	short $P_Val_Found	;AN000;
 33712                                  
 33713                                  $P_Val02_Sign:				;AN000;
 33714 00004E06 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 33715                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 33716 00004E0A 7C1D                    	jl	short $P_Val02_Next	;AN000;
 33717 00004E0C 7F06                    	jg	short $P_SVal_In	;AN000;
 33718                                  
 33719 00004E0E 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 33720                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 33721 00004E12 7C15                    	jl	short $P_Val02_Next	;AN000;
 33722                                  
 33723                                  $P_SVal_In:				;AN000;
 33724 00004E14 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 33725                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH
 33726 00004E18 7F0F                    	jg	short $P_Val02_Next	;AN000;
 33727 00004E1A 7C06                    	jl	short $P_Val_Found	;AN000;
 33728                                  
 33729 00004E1C 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 33730                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 33731 00004E20 7F07                    	jg	short $P_Val02_Next	;AN000;
 33732                                  
 33733                                  	;jmp	short $P_Val_Found	;AN000;
 33734                                  	; 27/04/2023
 33735                                  $P_Val_Found:				;AN000;
 33736 00004E22 B001                    	mov	al,$P_Number ; 1	;AN000;
 33737 00004E24 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 33738 00004E27 EB1D                    	jmp	short $P_Value_Exit	;AN000;
 33739                                  
 33740                                  $P_Val02_Next:				;AN000;
 33741 00004E29 83C609                  	add	si,$P_Len_Range ; 9 	;AN000;
 33742 00004E2C FEC8                    	dec	al			;AN000; loop nrng times in AL
 33743 00004E2E 75B0                    	jnz	short $P_Val02_Loop	;AN000;
 33744                                  					; / Not found
 33745 00004E30 2EC706[2197]0600        	mov	word [cs:$P_RC],$P_Out_Of_Range
 33746                                  	;mov	word [cs:$P_RC],6	;AC034;
 33747                                  	
 33748                                  	;mov	al,$P_Number ; 1	;AN000;
 33749                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 33750                                  	; 31/03/2023
 33751 00004E37 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 33752 00004E3A EB0A                    	jmp	short $P_Value_Exit	;AN000;
 33753                                  
 33754                                  	; 27/04/2023
 33755                                  ;$P_Val_Found:				;AN000;
 33756                                  	;mov	al,$P_Number ; 1	;AN000;
 33757                                  	;mov	ah,[es:si]		;AN000; found ITEM_TAG set
 33758                                  	;jmp	short $P_Value_Exit	;AN000;
 33759                                  
 33760                                  $P_Value03:				;AN000; / nval = 2
 33761                                  $P_Value04:				;AN000; / nval = 3 or else
 33762                                  $P_Value_Err:				;AN000;
 33763 00004E3C 2EC706[2197]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 33764                                  					;AC034;
 33765                                  	;mov	al,$P_String ; 3	;AN000; Set type
 33766                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 33767                                  	; 31/03/2023
 33768 00004E43 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 33769                                  $P_Value_Exit:				;AN000;
 33770 00004E46 E809FD                  	call	$P_Fill_Result		;AN000;
 33771 00004E49 5E                      	pop	si			;AN000;
 33772 00004E4A 5A                      	pop	dx			;AN000;
 33773 00004E4B 59                      	pop	cx			;AN000;
 33774 00004E4C 58                      	pop	ax			;AN000;
 33775 00004E4D C3                      	retn				;AN000;
 33776                                  
 33777                                  ;***********************************************************************
 33778                                  ; $P_Check_OVF
 33779                                  ;
 33780                                  ; Function:  Check if overflow is occurred with consideration of
 33781                                  ;	     signed or un-signed numeric value
 33782                                  ;
 33783                                  ; Input:     Flag register
 33784                                  ;
 33785                                  ; Output:    CY = 1  :	Overflow
 33786                                  ;
 33787                                  ; Vars:     $P_Flags(R)
 33788                                  ;***********************************************************************
 33789                                  
 33790                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33791                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33792                                  $P_Check_OVF:
 33793 00004E4E 9C                      	pushf				;AN000;
 33794 00004E4F 2EF606[2D97]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2
 33795                                  					;AC034; is it negative value ?
 33796 00004E55 7502                    	jnz	short $P_COVF		;AN000; if no, check overflow
 33797 00004E57 9D                      	popf				;AN000; by the CY bit
 33798 00004E58 C3                      	retn				;AN000;
 33799                                  $P_COVF:				;AN000;
 33800 00004E59 9D                      	popf				;AN000; else,
 33801 00004E5A 7002                    	jo	short $P_COVF00		;AN000; check overflow by the OF
 33802 00004E5C F8                      	clc				;AN000; indicate it with CY bit
 33803 00004E5D C3                      	retn				;AN000; CY=0 means no overflow
 33804                                  $P_0099Err:	; 31/03/2023
 33805                                  $P_COVF00:				;AN000;
 33806 00004E5E F9                      	stc				;AN000; and CY=1 means overflow
 33807                                  $P_0099Err2:	; 31/03/2023
 33808 00004E5F C3                      	retn				;AN000;
 33809                                  
 33810                                  ;***********************************************************************
 33811                                  ; $P_0099;
 33812                                  ;
 33813                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 33814                                  ;
 33815                                  ; Input:     AL = character code
 33816                                  ;
 33817                                  ; Output:    CY = 1 : AL is not number
 33818                                  ;	     CY = 0 : AL contains binary value
 33819                                  ;***********************************************************************
 33820                                  
 33821                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33822                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33823                                  $P_0099:
 33824 00004E60 3C30                    	cmp	al,"0"                  ;AN000;
 33825                                  	;jb	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 33826                                  	; 31/03/2023
 33827 00004E62 72FB                    	jb	short $P_0099Err2
 33828                                  
 33829 00004E64 3C39                    	cmp	al,"9"                  ;AN000;
 33830 00004E66 77F6                    	ja	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 33831                                  
 33832 00004E68 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 33833                                  	; 31/03/2023
 33834                                  	;clc				;AN000; indicate no error
 33835 00004E6A C3                      	retn				;AN000;
 33836                                  	 ;31/03/2023
 33837                                  ;$P_0099Err:				;AN000;
 33838                                  ;	stc				;AN000; indicate error
 33839                                  ;	retn				;AN000;
 33840                                  
 33841                                  ;***********************************************************************
 33842                                  ; $P_Simple_String
 33843                                  ;
 33844                                  ; Function:  See value list for the simple string
 33845                                  ;	     and make result buffer.
 33846                                  ;
 33847                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 33848                                  ;	     ES:BX -> CONTROL block
 33849                                  ;
 33850                                  ; Output:    None
 33851                                  ;
 33852                                  ; Use:	$P_Fill_Result, $P_String_Comp
 33853                                  ;
 33854                                  ; Vars: $P_RC(W)
 33855                                  ;***********************************************************************
 33856                                  
 33857                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33858                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33859                                  $P_Simple_String:
 33860 00004E6B 50                      	push	ax			;AN000;
 33861 00004E6C 53                      	push	bx			;AN000;
 33862 00004E6D 52                      	push	dx			;AN000;
 33863 00004E6E 57                      	push	di			;AN000;
 33864 00004E6F 268B7F06                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 33865                                  	;mov	di,[es:bx+6]		;AN000; di points to value list
 33866 00004E73 268A05                  	mov	al,[es:di]		;AN000; get nval
 33867 00004E76 08C0                    	or	al,al			;AN000; no value list ?
 33868 00004E78 7502                    	jnz	short $P_Sim00		;AN000; then
 33869                                  	; 31/03/2023
 33870                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 33871 00004E7A EB48                    	jmp	short $P_Sim_Exit	;AN000; and set result buffer
 33872                                  $P_Sim00:				;AN000;
 33873 00004E7C 3C03                    	cmp	al,$P_nval_String ; 3	;AN000; String choice list provided ?
 33874 00004E7E 753D                    	jne	short $P_Sim01		;AN000; if no, syntax error
 33875                                  
 33876 00004E80 47                      	inc	di			;AN000;
 33877 00004E81 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 33878 00004E84 B409                    	mov	ah,$P_Len_Range ; 9	;AN000;
 33879 00004E86 F6E4                    	mul	ah			;AN000;  Skip nrng field
 33880 00004E88 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 33881 00004E89 01C7                    	add	di,ax			;AN000; di points to nnval
 33882 00004E8B 268A05                  	mov	al,[es:di]		;AN000; get nnval
 33883 00004E8E B405                    	mov	ah,$P_Len_Value ; 5	;AN000;
 33884 00004E90 F6E4                    	mul	ah			;AN000; Skip nnval field
 33885 00004E92 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 33886 00004E93 01C7                    	add	di,ax			;AN000; di points to nstrval
 33887 00004E95 268A05                  	mov	al,[es:di]		;AN000; get nstrval
 33888 00004E98 47                      	inc	di			;AC035; add '2' to
 33889 00004E99 47                      	inc	di			;AC035;  DI reg
 33890                                  					;AN000; di points to 1st string in list
 33891                                  $P_Sim_Loop:				;AN000;
 33892 00004E9A 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 33893 00004E9D E82F00                  	call	$P_String_Comp		;AN000; compare it with operand
 33894 00004EA0 7310                    	jnc	short $P_Sim_Found	;AN000; found on list ?
 33895                                  
 33896 00004EA2 83C703                  	add	di,$P_Len_String ; 3	;AN000; if no, point to next choice
 33897 00004EA5 FEC8                    	dec	al			;AN000; loop nstval times in AL
 33898 00004EA7 75F1                    	jnz	short $P_Sim_Loop	;AN000;
 33899                                  					;AN000; / Not found
 33900 00004EA9 2EC706[2197]0800        	mov	word [cs:$P_RC],$P_Not_In_Str
 33901                                  	;mov	[cs:$P_RC],8		;AC034;
 33902                                  	; 31/03/2023
 33903                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 33904 00004EB0 EB12                    	jmp	short $P_Sim_Exit	;AN000;
 33905                                  $P_Sim_Found:				;AN000;
 33906 00004EB2 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 33907 00004EB6 B002                    	mov	al,$P_List_Idx	; 2	;AN000;
 33908 00004EB8 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 33909 00004EBB EB0A                    	jmp	short $P_Sim_Exit0	;AN000;
 33910                                  $P_Sim01:				;AN000;
 33911 00004EBD 2EC706[2197]0900        	mov	word [cs:$P_RC],$P_Syntax
 33912                                  	;mov	word [cs:$P_RC],9	;AC034;
 33913                                  $P_Sim_Exit:
 33914                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 33915                                  ;$P_Sim_Exit:				;AN000;
 33916                                  	;mov	al,$P_String ; 3	;AN000; Set type
 33917                                  	; 31/03/2023
 33918 00004EC4 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 33919                                  $P_Sim_Exit0:				;AN000;
 33920 00004EC7 E888FC                  	call	$P_Fill_Result		;AN000;
 33921 00004ECA 5F                      	pop	di			;AN000;
 33922 00004ECB 5A                      	pop	dx			;AN000;
 33923 00004ECC 5B                      	pop	bx			;AN000;
 33924 00004ECD 58                      	pop	ax			;AN000;
 33925 00004ECE C3                      	retn				;AN000;
 33926                                  
 33927                                  ;***********************************************************************
 33928                                  ; $P_String_Comp:
 33929                                  ;
 33930                                  ; Function:  Compare two string
 33931                                  ;
 33932                                  ; Input:     psdata_seg:SI -> 1st string
 33933                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 33934                                  ;	     ES:BX -> CONTROL block
 33935                                  ;
 33936                                  ; Output:    CY = 1 if not match
 33937                                  ;
 33938                                  ; Use:	$P_Chk_DBCS, $P_Do_CAPS_Char
 33939                                  ;
 33940                                  ; Vars: $P_KEYor_SW_Ptr(W), $P_Flags(R). $P_KEYorSW_Ptr
 33941                                  ;***********************************************************************
 33942                                  
 33943                                  	; 01/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33944                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33945                                  $P_String_Comp:
 33946 00004ECF 50                      	push	ax			;AN000;
 33947 00004ED0 55                      	push	bp			;AN000;
 33948 00004ED1 52                      	push	dx			;AN000;
 33949 00004ED2 56                      	push	si			;AN000;
 33950 00004ED3 B202                    	mov	dl,$P_DOSTBL_Char ; 2	;AN000; use character case map table
 33951                                  $P_SCOM_Loop:				;AN000;
 33952 00004ED5 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 33953 00004ED8 E89704                  	call	$P_Chk_DBCS		;AN000; DBCS ?
 33954 00004EDB 723C                    	jc	short $P_SCOM00		;AN000; yes,DBCS
 33955                                  
 33956 00004EDD E811FE                  	call	$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 33957                                  	
 33958 00004EE0 2EF606[2D97]08          	test	byte [cs:$P_Flags2],$P_Key_Cmp ; 8
 33959                                  					;AC034; keyword search ?
 33960 00004EE6 740D                    	jz	short $P_SCOM04		;AN000;
 33961                                  
 33962                                  	;cmp	al,'=' ; 3Dh
 33963 00004EE8 3C3D                    	cmp	al,$P_Keyword  ;'='	;AN000; "=" is delimiter
 33964 00004EEA 751F                    	jne	short $P_SCOM03		;AN000;IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 33965                                  
 33966 00004EEC 26807E0100              	cmp	byte [es:bp+1],$P_NULL	;AN021;   at end of keyword string in the control block THEN
 33967 00004EF1 7562                    	jne	short $P_SCOM_Differ	;AN021;
 33968                                  
 33969 00004EF3 EB13                    	jmp	short $P_SCOM05 	;AN000;   keyword found in synonym list
 33970                                  
 33971                                  $P_SCOM04:				;AN000;
 33972 00004EF5 2EF606[2D97]10          	test	byte [cs:$P_Flags2],$P_SW_Cmp ; 10h 
 33973                                  					;AC034; switch search ?
 33974 00004EFB 740E                    	jz	short $P_SCOM03		;AN000;
 33975                                  
 33976 00004EFD 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; ":" is delimiter, at end of switch on command line
 33977 00004EFF 750A                    	jne	short $P_SCOM03		;AN000; continue compares
 33978                                  
 33979 00004F01 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN021; IF at end of switch on command AND
 33980 00004F06 754D                    	jne	short $P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 33981                                  
 33982                                  $P_SCOM05:				;AN000;   found a match
 33983 00004F08 46                      	inc	si			;AN000; si points to just after "=" or ":"
 33984 00004F09 EB58                    	jmp	short $P_SCOM_Same	;AN000; exit
 33985                                  
 33986                                  $P_SCOM03:				;AN000;
 33987 00004F0B 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 33988 00004F0F 751D                    	jne	short $P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 33989                                  
 33990 00004F11 08C0                    	or	al,al			;AN000; end of line
 33991 00004F13 744E                    	jz	short $P_SCOM_Same	;AN000; if so, exit
 33992                                  
 33993 00004F15 46                      	inc	si			;AN000; update operand pointer
 33994 00004F16 45                      	inc	bp			;AN000;    and synonym pointer
 33995 00004F17 EB13                    	jmp	short $P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 33996                                  
 33997                                  $P_SCOM00:				;AN000; Here al is DBCS leading byte
 33998 00004F19 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 33999 00004F1D 7536                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different
 34000                                  
 34001 00004F1F 46                      	inc	si			;AN000; else, load next byte
 34002 00004F20 2E8A04                  	mov	al,[cs:si]		;AN000; and
 34003 00004F23 45                      	inc	bp			;AN000;
 34004 00004F24 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 34005 00004F28 752B                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different, too
 34006                                  
 34007 00004F2A 46                      	inc	si			;AN000; else update operand pointer
 34008 00004F2B 45                      	inc	bp			;AN000; 	and synonym pointer
 34009                                  $P_SCOM01:				;AN000;
 34010 00004F2C EBA7                    	jmp	short $P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 34011                                  
 34012                                  $P_SCOM_Differ0:			;AN000;
 34013 00004F2E 2EF606[2D97]40          	test	byte [cs:$P_Flags2],$P_SW ; 40h 
 34014                                  	;test	byte [cs:$P_Flags2],40h	;AC034;(tm10)
 34015 00004F34 740E                    	jz	short $P_not_applicable	;AN000;(tm10)
 34016                                  
 34017                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 34018                                  	;;test	word [es:bx+2],20h	;AN000;(tm10)
 34019                                  	; 03/04/2023
 34020 00004F36 26F6470220              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary	
 34021 00004F3B 7407                    	jz	short $P_not_applicable	;AN000;(tm10)
 34022                                  
 34023 00004F3D 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000;(tm10)
 34024 00004F42 741F                    	je	short $P_SCOM_Same	;AN025;(tm10)
 34025                                  
 34026                                  $P_not_applicable:			;AN000;(tm10)
 34027                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 34028                                  	;;test	word [es:bx],10h	;AN000; ignore colon option specified ?
 34029                                  	; 03/04/2023
 34030 00004F44 26F60710                	test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 34031 00004F48 740B                    	jz	short $P_SCOM_Differ	;AN000; if no, say different.
 34032                                  
 34033 00004F4A 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; End up with ":" and
 34034 00004F4C 750A                    	jne	short $P_SCOM02		;AN000;    subseqently
 34035                                  
 34036 00004F4E 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN000;      NULL ?
 34037                                  	;jne	short $P_SCOM_Differ	;AN000; if no, say different
 34038                                  	;jmp	short $P_SCOM_Same	;AN000; else, say same
 34039                                  	; 01/04/2023
 34040 00004F53 740E                    	je	short $P_SCOM_Same
 34041                                  $P_SCOM_Differ:
 34042 00004F55 F9                      	stc
 34043 00004F56 EB10                    	jmp	short $P_SCOM_Exit
 34044                                  
 34045                                  $P_SCOM02:				;AN000;
 34046 00004F58 3C00                    	cmp	al,$P_NULL ; 0		;AN000; end up NULL and :
 34047 00004F5A 75F9                    	jne	short $P_SCOM_Differ	;AN000;
 34048                                  
 34049                                  	;cmp	byte [es:bp],':'
 34050 00004F5C 26807E003A              	cmp	byte [es:bp],$P_Colon	;AN000; if no, say different
 34051                                  	;je	short $p_SCOM_Same	;AN000; else, say same
 34052                                  	; 01/04/2023
 34053 00004F61 75F2                    	jne	short $P_SCOM_Differ
 34054                                  ;$P_SCOM_Differ: 			;AN000;
 34055                                  	;stc				;AN000; indicate not found
 34056                                  	;jmp	short $P_SCOM_Exit	;AN000;
 34057                                  
 34058                                  $P_SCOM_Same:				;AN000;
 34059 00004F63 2E8936[3097]            	mov	[cs:$P_KEYorSW_Ptr],si	;AC034; for later use by keyword or switch
 34060                                  	; 01/04/2023
 34061                                  	;clc
 34062                                  	; cf = 0			;AN000; indicate found
 34063                                  $P_SCOM_Exit:				;AN000;
 34064 00004F68 5E                      	pop	si			;AN000;
 34065 00004F69 5A                      	pop	dx			;AN000;
 34066 00004F6A 5D                      	pop	bp			;AN000;
 34067 00004F6B 58                      	pop	ax			;AN000;
 34068 00004F6C C3                      	retn				;AN000;
 34069                                  
 34070                                  ;***********************************************************************
 34071                                  ; $P_Date_Format
 34072                                  ;
 34073                                  ; Function:  Convert a date string to DOS date format for int 21h
 34074                                  ;	     with format validation.
 34075                                  ;
 34076                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34077                                  ;	     ES:BX -> CONTROL block
 34078                                  ;
 34079                                  ; Output:    None
 34080                                  ;
 34081                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum
 34082                                  ;
 34083                                  ; Vars: $P_RC(W), $P_1st_Val(RW), $P_2nd_Val(RW), $P_3rd_Val(RW)
 34084                                  ;***********************************************************************
 34085                                  
 34086                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34087                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34088                                  $P_Date_Format:
 34089 00004F6D 50                      	push	ax			;AN000;
 34090 00004F6E 51                      	push	cx			;AN000;
 34091 00004F6F 52                      	push	dx			;AN000;
 34092 00004F70 56                      	push	si			;AN000;
 34093 00004F71 53                      	push	bx			;AN000;
 34094 00004F72 56                      	push	si			;AN000;
 34095 00004F73 E89F00                  	call	$P_Set_CDI		;AN000; set country dependent information before process
 34096                                  	; 03/04/2023
 34097                                  	;pop	si			;AN000;
 34098                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 34099                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 34100                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 34101 00004F76 31F6                    	xor	si,si
 34102 00004F78 2E8936[DF97]            	mov	[cs:$P_1st_Val],si ; 0	;AC034; set initial value
 34103 00004F7D 2E8936[E197]            	mov	[cs:$P_2nd_Val],si ; 0	;AC034; set initial value
 34104                                  	;mov	[cs:$P_3rd_Val],si ; 0	;AC034; set initial value
 34105 00004F82 5E                      	pop	si
 34106 00004F83 E8A900                  	call	$P_Get_DecNum		;AN000; get 1st number
 34107 00004F86 7218                    	jc	short $P_DateF_Err0	;AN000;-----------------------+
 34108 00004F88 2EA3[DF97]              	mov	[cs:$P_1st_Val],ax	;AC034;			      |
 34109 00004F8C 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 34110 00004F8E 741A                    	jz	short $P_DateF_YMD	;AN000; 		      |
 34111 00004F90 E89C00                  	call	$P_Get_DecNum		;AN000; get 2nd number	      |
 34112 00004F93 726D                    	jc	short $P_DateF_Error	;AN000; 		      |
 34113 00004F95 2EA3[E197]              	mov	[cs:$P_2nd_Val],ax	;AC034;			      |
 34114 00004F99 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 34115 00004F9B 740D                    	jz	short $P_DateF_YMD	;AN000; 		      |
 34116 00004F9D E88F00                  	call	$P_Get_DecNum		;AN000; get 3rd number	      |
 34117                                  $P_DateF_Err0:				;AN000; Bridge	  <-----------+
 34118 00004FA0 7260                    	jc	short $P_DateF_Error	;AN000;
 34119 00004FA2 2EA3[E397]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 34120 00004FA6 08DB                    	or	bl,bl			;AN000; end of line ?
 34121 00004FA8 7558                    	jnz	short $P_DateF_Error	;AN000;
 34122                                  $P_DateF_YMD:				;AN000;
 34123 00004FAA 2E8B1E[BD97]            	mov	bx,[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]
 34124                                  	;mov	bx,[cs:$P_Country_Info]	;AC034; get date format
 34125 00004FAF 83FB02                  	cmp	bx,$P_Date_YMD ; 2	;AN000;
 34126 00004FB2 7422                    	je	short $P_DateF00	;AN000;
 34127 00004FB4 2EA1[DF97]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 34128 00004FB8 08E4                    	or	ah,ah			;AN000;
 34129 00004FBA 7546                    	jnz	short $P_DateF_Error	;AN000;
 34130 00004FBC 88C1                    	mov	cl,al			;AN000; set month
 34131 00004FBE 2EA1[E197]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 34132 00004FC2 08E4                    	or	ah,ah			;AN000; if overflow, error.
 34133 00004FC4 753C                    	jnz	short $P_DateF_Error	;AN000;
 34134 00004FC6 88C5                    	mov	ch,al			;AN000; set date
 34135 00004FC8 2E8B16[E397]            	mov	dx,[cs:$P_3rd_Val]	;AC034; set year
 34136 00004FCD 83FB01                  	cmp	bx,$P_Date_DMY ; 1	;AN000; from here format = MDY
 34137 00004FD0 7502                    	jne	short $P_DateF01	;AN000; if it is DMY
 34138 00004FD2 86E9                    	xchg	ch,cl			;AN000;  then swap M <-> D
 34139                                  $P_DateF01:				;AN000;
 34140 00004FD4 EB19                    	jmp	short $P_DateF02	;AN000;
 34141                                  $P_DateF00:				;AN000; / here format = YMD
 34142 00004FD6 2E8B16[DF97]            	mov	dx,[cs:$P_1st_Val]	;AC034; set year
 34143 00004FDB 2EA1[E197]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 34144 00004FDF 08E4                    	or	ah,ah			;AN000; if overflow, error
 34145 00004FE1 751F                    	jnz	short $P_DateF_Error	;AN000;
 34146                                  
 34147 00004FE3 88C1                    	mov	cl,al			;AN000; set month
 34148 00004FE5 2EA1[E397]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 34149 00004FE9 08E4                    	or	ah,ah			;AN000; if overflow, error
 34150 00004FEB 7515                    	jnz	short $P_DateF_Error	;AN000;
 34151 00004FED 88C5                    	mov	ch,al			;AN000; set date
 34152                                  $P_DateF02:				;AN000;
 34153 00004FEF 83FA64                  	cmp	dx,100			;AN000; year is less that 100 ?
 34154 00004FF2 7304                    	jae	short $P_DateF03	;AN000;
 34155 00004FF4 81C26C07                	add	dx,1900 		;AN000; set year 19xx
 34156                                  $P_DateF03:				;AN000;
 34157 00004FF8 5B                      	pop	bx			;AN000; recover CONTROL block
 34158 00004FF9 5E                      	pop	si			;AN000; recover string pointer
 34159                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 34160                                  	;mov	al,$P_Date_F ; 7	;AN000;   result
 34161                                  	; 03/04/2023
 34162 00004FFA B807FF                  	mov	ax,($P_No_Tag<<8)+$P_Date_F
 34163 00004FFD E852FB                  	call	$P_Fill_Result		;AN000;        buffer
 34164 00005000 EB0F                    	jmp	short $P_Date_Format_Exit
 34165                                  					;AN000;	to Date
 34166                                  $P_DateF_Error: 			;AN000;
 34167 00005002 5B                      	pop	bx			;AN000; recover CONTROL block
 34168 00005003 5E                      	pop	si			;AN000; recover string pointer
 34169                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 34170                                  	;mov	al,$P_String ; 3	;AN000;   result
 34171                                  	; 03/04/2023
 34172 00005004 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 34173 00005007 E848FB                  	call	$P_Fill_Result		;AN000; 	buffer
 34174                                  					;AN000; to string
 34175 0000500A 2EC706[2197]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 34176                                  					;AC034; indicate syntax error
 34177                                  $P_Date_Format_Exit:			;AN000;
 34178 00005011 5A                      	pop	dx			;AN000;
 34179 00005012 59                      	pop	cx			;AN000;
 34180 00005013 58                      	pop	ax			;AN000;
 34181 00005014 C3                      	retn				;AN000;
 34182                                  
 34183                                  ;***********************************************************************
 34184                                  ; $P_Set_CDI:
 34185                                  ;
 34186                                  ; Function: Read CDI from DOS if it has not been read yet
 34187                                  ;
 34188                                  ; Input:    None
 34189                                  ;
 34190                                  ; Output:   psdata_seg:SI -> CDI
 34191                                  ;
 34192                                  ; Use:	INT 21h w/ AH = 38h
 34193                                  ;***********************************************************************
 34194                                  
 34195                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34196                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34197                                  $P_Set_CDI:
 34198                                  	; 18/04/2023
 34199 00005015 8D36[BD97]              	lea	si,$P_Country_Info	;AC034;
 34200                                  	;cmp	word [cs:si+$P_CDI.$P_CDI_DateF],-1 ; $P_NeedToBeRead
 34201 00005019 2E833CFF                	cmp	word [cs:si],-1 ; $P_NeedToBeRead ; 0FFFFh
 34202                                  					;AN000; already read ?
 34203                                  	;je	short $P_Read_CDI	;AN000;
 34204                                  	;jmp	short $P_Set_CDI_Exit	;AN000; then do nothing
 34205                                  	; 03/04/2023
 34206 0000501D 750F                    	jne	short $P_Set_CDI_Exit
 34207                                  $P_Read_CDI:				;AN000; else read CDI thru DOS
 34208 0000501F 1E                      	push	ds			;AN000;
 34209 00005020 52                      	push	dx			;AN000;
 34210 00005021 50                      	push	ax			;AN000;
 34211 00005022 0E                      	push	cs			;AC023;
 34212 00005023 1F                      	pop	ds			;AN000; set segment register
 34213                                  	;mov	ax,3800h
 34214 00005024 B80038                  	mov	ax,$P_DOS_Get_CDI	;AN000; get country information
 34215 00005027 89F2                    	mov	dx,si			;AN000; set offset of CDI in local data area
 34216 00005029 CD21                    	int	21h			;AN000;
 34217 0000502B 58                      	pop	ax			;AN000;
 34218 0000502C 5A                      	pop	dx			;AN000;
 34219 0000502D 1F                      	pop	ds			;AN000;
 34220                                  $P_Set_CDI_Exit:			;AN000;
 34221 0000502E C3                      	retn				;AN000;
 34222                                  
 34223                                  ;***********************************************************************
 34224                                  ; $P_Get_DecNum:
 34225                                  ;
 34226                                  ; Function:  Read a chcrater code from psdata_seg:SI until specified delimiter
 34227                                  ;	     or NULL encountered. And make a decimal number.
 34228                                  ;
 34229                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34230                                  ;
 34231                                  ; Output:    BL = delimiter code or NULL
 34232                                  ;	     AX = Decimal number
 34233                                  ;	     SI advanced to the next number
 34234                                  ;	     CY = 1 : Syntax error, AL = Latest examineed number
 34235                                  ;
 34236                                  ; Use:	$P_0099
 34237                                  ;***********************************************************************
 34238                                  
 34239                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34240                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34241                                  $P_Get_DecNum:
 34242 0000502F 51                      	push	cx			;AN000;
 34243 00005030 52                      	push	dx			;AN000;
 34244 00005031 31C9                    	xor	cx,cx			;AN000; cx will have final value
 34245                                  $P_GetNum_Loop: 			;AN000;
 34246 00005033 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 34247 00005036 08C0                    	or	al,al			;AN000; end of line ?
 34248 00005038 7438                    	jz	short $P_GetNum00	;AN000; if yes, exit
 34249 0000503A 2E803E[BC97]00          	cmp	byte [cs:$P_Got_Time],0 ;AC034; is this numeric in a time field? ;AC023
 34250 00005040 740B                    	je	short $P_Do_Date_Delims	;AN000; no, go check out Date delimiters ;AC023
 34251                                  
 34252                                  ; Determine which delimiter(s) to check for. Colon & period  or period only
 34253                                  	;cmp	bl,$P_colon_period
 34254 00005042 80FB01                  	cmp	bl,1 ; $P_colon_period	;AN032; ;Time
 34255 00005045 750E                    	jne	short $P_Do_Time_Delim1	;AN032; ;only check for period
 34256                                  
 34257 00005047 3C3A                    	cmp	al,$P_Colon ; ':'	;AN032; ;Is this a valid delimiter ?
 34258 00005049 742B                    	je	short $P_GetNum01	;AN032; ;yes, exit
 34259                                  
 34260                                  	; 03/04/2023
 34261 0000504B EB08                    	jmp	short $P_Do_Time_Delim1
 34262                                  ;$P_Do_Time_Delim1:			;AN000;
 34263                                  	;cmp	al,$P_Period ; '.'	;;AC032;;AC023;Is this a valid delimiter ?
 34264                                  	;je	short $P_GetNum01	;AC023; yes, exit
 34265                                  	;
 34266                                  	;jmp	short $P_Neither_Delims ;AN023;
 34267                                  
 34268                                  $P_Do_Date_Delims:			;AN000;
 34269                                  ;Regardless of the date delimiter character specified in the country
 34270                                  ;dependent information, check for the presence of any one of these
 34271                                  ;three field delimiters: "-", "/", or ".".
 34272 0000504D 3C2D                    	cmp	al,$P_Minus ;'-'	;AN020;is this a date delimiter character?
 34273 0000504F 7425                    	je	short $P_GetNum01	;AN020;if yes, exit
 34274                                  
 34275 00005051 3C2F                    	cmp	al,$P_Slash ; '/'	;AN020;is this a date delimiter character?
 34276 00005053 7421                    	je	short $P_GetNum01	;AN020;if yes, exit
 34277                                  
 34278                                  $P_Do_Time_Delim1:  ; 03/04/2023
 34279 00005055 3C2E                    	cmp	al,$P_Period ; '.'	;AN020;is this a date delimiter character?
 34280 00005057 741D                    	je	short $P_GetNum01	;AN000; if yes, exit
 34281                                  
 34282                                  $P_Neither_Delims:			;AN023;
 34283 00005059 E804FE                  	call	$P_0099 		;AN000; convert it to binary
 34284 0000505C 721C                    	jc	short $P_GetNum_Exit	;AN000; if error exit
 34285                                  
 34286 0000505E B400                    	mov	ah,0			;AN000;
 34287 00005060 91                      	xchg	ax,cx			;AN000;
 34288 00005061 BA0A00                  	mov	dx,10			;AN000;
 34289 00005064 F7E2                    	mul	dx			;AN000; ax = ax * 10
 34290 00005066 09D2                    	or	dx,dx			;AN000; overflow
 34291 00005068 750F                    	jnz	short $P_GetNum02	;AN000; then exit
 34292                                  
 34293 0000506A 01C8                    	add	ax,cx			;AN000;
 34294 0000506C 720C                    	jc	short $P_GetNum_Exit	;AN000;
 34295                                  
 34296 0000506E 91                      	xchg	ax,cx			;AN000;
 34297 0000506F 46                      	inc	si			;AN000;
 34298 00005070 EBC1                    	jmp	short $P_GetNum_Loop	;AN000;
 34299                                  
 34300                                  $P_GetNum00:				;AN000;
 34301 00005072 88C3                    	mov	bl,al			;AN000; set bl to NULL
 34302                                  	;03/04/2023
 34303                                  	; cf=0
 34304                                  	;clc				;AN000; indicate no error
 34305 00005074 EB04                    	jmp	short $P_GetNum_Exit	;AN000;
 34306                                  
 34307                                  $P_GetNum01:				;AN000;
 34308 00005076 46                      	inc	si			;AN000; si points to next number
 34309                                  	;03/04/2023
 34310                                  	; cf=0
 34311                                  	;clc				;AN000; indicate no error
 34312 00005077 EB01                    	jmp	short $P_GetNum_Exit	;AN000;
 34313                                  
 34314                                  $P_GetNum02:				;AN000;
 34315 00005079 F9                      	stc				;AN000; indicate error
 34316                                  $P_GetNum_Exit: 			;AN000;
 34317 0000507A 89C8                    	mov	ax,cx			;AN000;return value
 34318 0000507C 5A                      	pop	dx			;AN000;
 34319 0000507D 59                      	pop	cx			;AN000;
 34320 0000507E C3                      	retn				;AN000;
 34321                                  
 34322                                  ;***********************************************************************
 34323                                  ; $P_Time_Format
 34324                                  ;
 34325                                  ; Function:  Convert a time string to DOS time format for int 21h
 34326                                  ;	     with format validation.
 34327                                  ;
 34328                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34329                                  ;	     ES:BX -> CONTROL block
 34330                                  ;
 34331                                  ; Output:    None
 34332                                  ;
 34333                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum, $P_Time_2412
 34334                                  ;
 34335                                  ; Vars: $P_RC(W), $P_Flags(R), $P_1st_Val(RW), $P_2nd_Val(RW)
 34336                                  ;	$P_3rd_Val(RW), $P_4th_Val(RW)
 34337                                  ;***********************************************************************
 34338                                  
 34339                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34340                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34341                                  $P_Time_Format:				;AN000;
 34342 0000507F 50                      	push	ax			;AN000;
 34343 00005080 51                      	push	cx			;AN000;
 34344 00005081 52                      	push	dx			;AN000;
 34345 00005082 56                      	push	si			;AN000;
 34346 00005083 53                      	push	bx			;AN000;
 34347 00005084 56                      	push	si			;AN000;
 34348 00005085 E88DFF                  	call	$P_Set_CDI		;AN000; Set country independent
 34349                                  					; information before process
 34350                                  	;test	byte [cs:si+11h], 1
 34351 00005088 2EF6441001              	test	byte [cs:si+$P_CDI.$P_CDI_TimeF],1 
 34352                                  					;AN000; 24 hour system
 34353 0000508D 5E                      	pop	si			;AN000;
 34354 0000508E 7503                    	jnz	short $P_TimeF00	;AN000; if no, means 12 hour system
 34355 00005090 E8F800                  	call	$P_Time_2412		;AN000; this routine handle "am" "pm"
 34356                                  $P_TimeF00:				;AN000;
 34357                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 34358                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 34359                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 34360                                  	;mov	word [cs:$P_4th_Val],0	;AC034; set initial value
 34361                                  	;mov	byte [cs:$P_Got_Time],1	;AN023;AC034;; use time delimiter
 34362                                  	; 03/04/2023
 34363 00005093 31DB                    	xor	bx,bx
 34364 00005095 2E891E[DF97]            	mov	[cs:$P_1st_Val],bx ; 0
 34365 0000509A 2E891E[E197]            	mov	[cs:$P_2nd_Val],bx ; 0
 34366 0000509F 2E891E[E397]            	mov	[cs:$P_3rd_Val],bx ; 0
 34367 000050A4 2E891E[E597]            	mov	[cs:$P_4th_Val],bx ; 0
 34368                                  	;inc	bl
 34369                                  	;mov	[cs:$P_Got_Time],bl ; 1
 34370                                  
 34371                                  	;mov	bl,$P_colon_period
 34372                                  	;mov	bl,1 ; $P_colon_period	;AN032; flag, indicates use of
 34373                                  					; delimiters between hours,
 34374                                  					;  minutes,seconds
 34375                                  	; 03/04/2023 - Retro DOS v4.0 COMMAND.COM
 34376 000050A9 FEC3                    	inc	bl ; bl = 1
 34377 000050AB 2E881E[BC97]            	mov	[cs:$P_Got_Time],bl ; 1
 34378                                  	;
 34379 000050B0 E87CFF                  	call	$P_Get_DecNum		;AN000; get 1st number
 34380 000050B3 725D                    	jc	short $P_TimeF_Err0	;AN000;
 34381 000050B5 2EA3[DF97]              	mov	[cs:$P_1st_Val],ax	;AC034;
 34382 000050B9 08DB                    	or	bl,bl			;AN000; end of line ?
 34383 000050BB 745F                    	jz	short $P_TimeF_Rlt	;AN000;
 34384 000050BD E86FFF                  	call	$P_Get_DecNum		;AN000; get 2nd number
 34385 000050C0 7250                    	jc	short $P_TimeF_Err0	;AC038; if OK
 34386 000050C2 2EA3[E197]              	mov	[cs:$P_2nd_Val],ax	;AC034;
 34387 000050C6 08DB                    	or	bl,bl			;AN000; end of line ?
 34388 000050C8 7452                    	jz	short $P_TimeF_Rlt	;AN000;
 34389 000050CA B302                    	mov	bl,2 ; $P_period_only	;AN032; flag, which to decimal separator
 34390 000050CC E860FF                  	call	$P_Get_DecNum		;AN000; get 3rd number
 34391 000050CF 7241                    	jc	short $P_TimeF_Err0	;AC039; if problem, bridge to error
 34392 000050D1 2EA3[E397]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 34393 000050D5 08DB                    	or	bl,bl			;AN000; end of line ?
 34394 000050D7 7536                    	jnz	short $P_Time_4		;AN039; NOT END OF LINE,
 34395                                  					;AN039;   GO TO 4TH NUMBER
 34396                                  	;test	byte [cs:$P_Flags1],$P_Time_Again ; 2
 34397 000050D9 2EF606[2C97]02          	test	byte [cs:$P_Flags1],2 	;AN039; HAS TIME PARSE
 34398                                  					;AN039;    BEEN REPEATED?
 34399 000050DF 753B                    	jnz	short $P_TimeF_Rlt	;AN039; yes, this is really
 34400                                  					;AN039;   the end of line
 34401                                  					;AN039; no, time has not been repeated
 34402 000050E1 2E8B36[2397]            	mov	si,[cs:$P_SI_Save]	;AN039; get where parser quit
 34403                                  					;AN039;   in command line
 34404 000050E6 807CFF2C                	cmp	byte [si-1],$P_Comma ; ','
 34405                                  					;AN039; look at delimiter
 34406                                  					;AN039;   from command line
 34407 000050EA 7530                    	jne	short $P_TimeF_Rlt	;AN039; was not a comma, this is
 34408                                  					;AN039;  really end of line
 34409                                  					;AN039; is comma before hundredths,
 34410                                  					;AN039;   redo TIME
 34411 000050EC C644FF2E                	mov	byte [si-1],$P_Period ; '.' 
 34412                                  					;AN039; change that ambiguous
 34413                                  					;AN039;    comma to a decimal point
 34414                                  					;AN039;     parse can understand
 34415 000050F0 2EC706[2C97]0000        	mov	word [cs:$P_Flags],0	;AN039; Clear all internal flags
 34416                                  	;or	byte [cs:$P_Flags1],$P_Time_Again
 34417 000050F7 2E800E[2C97]02          	or	byte [cs:$P_Flags1],2	;AN039; indicate TIME
 34418                                  					;AN039; is being repeated
 34419 000050FD 2E8B0E[B697]            	mov	cx,[cs:$P_ORIG_ORD]	;AN039; ORIGINAL ORDINAL FROM CX
 34420 00005102 2E8B26[B897]            	mov	sp,[cs:$P_ORIG_STACK]	;AN039; ORIGINAL VALUE
 34421                                  					;AN039;   OF STACK FROM SP
 34422 00005107 2E8B36[BA97]            	mov	si,[cs:$P_ORIG_SI]	;AN039; ORIGINAL START
 34423                                  					;AN039;   PARSE POINTER FROM SI
 34424 0000510C E913F8                  	jmp	$P_Redo_Time		;AN039; go try TIME again
 34425                                  $P_Time_4:				;AN039; READY FOR 4TH (HUNDREDTHS) NUMBER
 34426 0000510F E81DFF                  	call	$P_Get_DecNum		;AN000; get 4th number
 34427                                  $P_TimeF_Err0:				;AN000; Bridge
 34428 00005112 725E                    	jc	short $P_TimeF_Error	;AN000;
 34429                                  	;
 34430 00005114 2EA3[E597]              	mov	[cs:$P_4th_Val],ax	;AC034;
 34431 00005118 08DB                    	or	bl,bl			;AN000; After hundredth, no data allowed
 34432 0000511A 7556                    	jnz	short $P_TimeF_Error	;AN000; if some, then error
 34433                                  $P_TimeF_Rlt:				;AN000;
 34434 0000511C 2EA1[DF97]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 34435 00005120 08E4                    	or	ah,ah			;AN000; if overflow then error
 34436 00005122 754E                    	jnz	short $P_TimeF_Err	;AN000;
 34437                                  	;test	byte [cs:$P_Flags1],$P_Time12am ; 1
 34438 00005124 2EF606[2C97]01          	test	byte [cs:$P_Flags1],1	;AN038;if "am" specified
 34439 0000512A 7408                    	jz	short $P_Time_notAM	;AN038;skip if no "AM" specified
 34440                                  					;since "AM" was specified,
 34441 0000512C 3C0C                    	cmp	al,12			;AN038: if hour specified as later than noon
 34442 0000512E 7742                    	ja	short $P_TimeF_Err	;AN038; error if "AM" on more than noon
 34443 00005130 7502                    	jne	short $P_Time_notAM	;AN038; for noon exactly,
 34444 00005132 30C0                    	xor	al,al			;AN038; set hour = zero
 34445                                  $P_Time_notAM:				;AN038;
 34446                                  	;test	byte [cs:$P_Flags2],$P_Time12
 34447 00005134 2EF606[2D97]04          	test	byte [cs:$P_Flags2],4	;AC034; if 12 hour system and pm is specified
 34448 0000513A 740C                    	jz	short $P_TimeSkip00	;AN000; then
 34449 0000513C 3C0C                    	cmp	al,12			;AN038; if 12:00 o'clock already
 34450 0000513E 7408                    	je	short $P_TimeSkip00	;AN038; it is PM already
 34451 00005140 040C                    	add	al,12			;AN000; add 12 hours to make it afternoon
 34452 00005142 722E                    	jc	short $P_TimeF_Err	;AN000; if overflow then error
 34453 00005144 3C18                    	cmp	al,24			;AN038; after adding 12, now cannot be >24
 34454 00005146 772A                    	ja	short $P_TimeF_Err	;AN038; if too big, error
 34455                                  $P_TimeSkip00:				;AN000;
 34456 00005148 88C2                    	mov	dl,al			;AN000; set hour
 34457 0000514A 2EA1[E197]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 34458 0000514E 08E4                    	or	ah,ah			;AN000; if overflow then error
 34459 00005150 7520                    	jnz	short $P_TimeF_Err	;AN000;
 34460 00005152 88C6                    	mov	dh,al			;AN000; set minute
 34461 00005154 2EA1[E397]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 34462 00005158 08E4                    	or	ah,ah			;AN000; if overflow then error
 34463 0000515A 7516                    	jnz	short $P_TimeF_Err	;AN000;
 34464 0000515C 88C1                    	mov	cl,al			;AN000; set second
 34465 0000515E 2EA1[E597]              	mov	ax,[cs:$P_4th_Val]	;AC034;
 34466 00005162 08E4                    	or	ah,ah			;AN000; if overflow then error
 34467 00005164 750C                    	jnz	short $P_TimeF_Err	;AN000;
 34468 00005166 88C5                    	mov	ch,al			;AN000; set hundredth
 34469 00005168 5B                      	pop	bx			;AN000; recover CONTROL block
 34470 00005169 5E                      	pop	si			;AN000; recover string pointer
 34471                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 34472                                  	;mov	al,$P_Time_F ; 8 	;AN000;   result
 34473                                  	; 03/04/2023
 34474 0000516A B808FF                  	mov	ax,($P_No_Tag<<8)+$P_Time_F
 34475 0000516D E8E2F9                  	call	$P_Fill_Result		;AN000;        buffer
 34476 00005170 EB0F                    	jmp	short $P_Time_Format_Exit
 34477                                  					;AN000; to time
 34478                                  $P_TimeF_Error: 			;AN000;
 34479                                  $P_TimeF_Err:				;AN000;
 34480 00005172 5B                      	pop	bx			;AN000; recover CONTROL block
 34481 00005173 5E                      	pop	si			;AN000; recover string pointer
 34482                                  	;mov	ah,$P_No_Tag		;AN000; set
 34483                                  	;mov	al,$P_String		;AN000;     result
 34484                                  	; 03/04/2023
 34485 00005174 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 34486 00005177 E8D8F9                  	call	$P_Fill_Result		;AN000; 	  buffer
 34487                                  					;AN000; to string
 34488 0000517A 2EC706[2197]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9	
 34489                                  					;AC034; return syntax error
 34490                                  $P_Time_Format_Exit:			;AN000;
 34491 00005181 2EC606[BC97]00          	mov	byte [cs:$P_Got_Time],0	;AN023;AC034; finished with this time field
 34492 00005187 5A                      	pop	dx			;AN000;
 34493 00005188 59                      	pop	cx			;AN000;
 34494 00005189 58                      	pop	ax			;AN000;
 34495 0000518A C3                      	retn
 34496                                  
 34497                                  ;***********************************************************************
 34498                                  ; $P_Time_2412:
 34499                                  ;
 34500                                  ; Function:  Remove "a", "p", "am", or "pm" from the end of stinrg
 34501                                  ;
 34502                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34503                                  ;
 34504                                  ; Output:    Set $P_Time12 flag when the string is terminated by "p"
 34505                                  ;	     or "pm"
 34506                                  ;
 34507                                  ; Vars:  $P_Flags(W)
 34508                                  ;***********************************************************************
 34509                                  
 34510                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34511                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34512                                  $P_Time_2412:				;AN000;
 34513 0000518B 50                      	push	ax			;AN000;
 34514 0000518C 56                      	push	si			;AN000;
 34515                                  $P_T12_Loop:				;AN000;
 34516 0000518D 2E8A04                  	mov	al,[cs:si]		;AN000; Move
 34517 00005190 46                      	inc	si			;AN000;     si
 34518 00005191 08C0                    	or	al,al			;AN000;       to
 34519 00005193 75F8                    	jnz	short $P_T12_Loop	;AN000; 	end of string
 34520                                  
 34521 00005195 2E8A44FE                	mov	al,[cs:si-2]		;AN000; get char just before NULL
 34522                                  	;or	al,20h
 34523 00005199 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 34524 0000519B 3C70                    	cmp	al,"p"                  ;AN000; only "p" of "pm" ?
 34525 0000519D 7425                    	je	short $P_T1200		;AN000;
 34526                                  
 34527 0000519F 3C61                    	cmp	al,"a"                  ;AN000; only "a" of "am" ?
 34528 000051A1 7413                    	je	short $P_T1201		;AN000;
 34529                                  
 34530 000051A3 3C6D                    	cmp	al,"m"                  ;AN000; "m" of "am" or "pm"
 34531 000051A5 751A                    	jne	short $P_T12_Exit	;AN000;
 34532                                  
 34533 000051A7 4E                      	dec	si			;AN000;
 34534 000051A8 2E8A44FE                	mov	al,[cs:si-2]		;AN000;
 34535                                  	;or	al,20h
 34536 000051AC 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 34537 000051AE 3C70                    	cmp	al,"p"                  ;AN000; "p" of "pm" ?
 34538 000051B0 7412                    	je	short $P_T1200		;AN000;
 34539                                  
 34540 000051B2 3C61                    	cmp	al,"a"                  ;AN000; "a" of "am" ?
 34541                                  	;je	short $P_T1201		;AN000; go process "a"
 34542                                  	;jmp	short $P_T12_Exit	;AN000; no special chars found
 34543                                  	; 05/04/2023
 34544 000051B4 750B                    	jne	short $P_T12_Exit
 34545                                  
 34546                                  ;$P_T1200:				;AN000; "P" found
 34547                                  	;;or	byte [cs:$P_Flags2],$P_Time12
 34548                                  	;or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 34549                                  	;jmp	short $P_Tclr_chr	;AN038; go clear the special char
 34550                                  
 34551                                  $P_T1201:				;AN000; "A" found
 34552                                  	;or	byte [cs:$P_Flags1],$P_Time12AM
 34553 000051B6 2E800E[2C97]01          	or	byte [cs:$P_Flags1],1	;AN038; flag "AM" found
 34554                                  $P_Tclr_chr:				;AN038;
 34555 000051BC 2EC644FE00              	mov	byte [cs:si-2],$P_NULL	;AN000; null out special char
 34556                                  $P_T12_Exit:				;AN000;
 34557 000051C1 5E                      	pop	si			;AN000;
 34558 000051C2 58                      	pop	ax			;AN000;
 34559 000051C3 C3                      	retn				;AN000;
 34560                                  
 34561                                  	; 05/04/2023
 34562                                  $P_T1200:				;AN000; "P" found
 34563                                  	;or	byte [cs:$P_Flags2],$P_Time12
 34564 000051C4 2E800E[2D97]04          	or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 34565 000051CA EBF0                    	jmp	short $P_Tclr_chr	;AN038; go clear the special char
 34566                                  
 34567                                  ;***********************************************************************
 34568                                  ; $P_File_Format;
 34569                                  ;
 34570                                  ; Function:  Check if the input string is valid file spec format.
 34571                                  ;	     And set the result buffer.
 34572                                  ;
 34573                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34574                                  ;	     ES:BX -> CONTROL block
 34575                                  ;
 34576                                  ; Output:    None
 34577                                  ;
 34578                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS, $P_FileSp_Chk
 34579                                  ;
 34580                                  ; Vars: $P_RC(W), $P_SI_Save(W), $P_Terminator(W), $P_SaveSI_Cmpx(R)
 34581                                  ;	$P_SaveSI_Cmpx(R)
 34582                                  ;***********************************************************************
 34583                                  
 34584                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34585                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4DF0h
 34586                                  
 34587                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34588                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:55B4h
 34589                                  $P_File_Format:
 34590 000051CC 50                      	push	ax			;AN000;
 34591 000051CD 57                      	push	di			;AN000;
 34592 000051CE 56                      	push	si			;AN000;
 34593 000051CF 2E8B3E[2E97]            	mov	di,[cs:$P_SaveSI_Cmpx]	;AC034; get user buffer address
 34594 000051D4 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 34595 000051D7 08C0                    	or	al,al			;AN000; end of line ?
 34596 000051D9 7413                    	je	short $P_FileF_Err	;AN000; if yes, error exit
 34597 000051DB E85D00                  	call	$P_FileSp_Chk		;AN000; else, check if file special character
 34598 000051DE 7523                    	jne	short $P_FileF03	;AN000; if yes,
 34599 000051E0 2EC606[FA97]01          	mov	byte [cs:$P_err_flag],$P_error_filespec ; 1
 34600                                  					;AN033;AC034;; set error flag- bad char.
 34601 000051E6 5E                      	pop	si			;AN033;
 34602 000051E7 2EC60400                	mov	byte [cs:si],$P_NULL	;AN033;
 34603 000051EB 5F                      	pop	di			;AN033;
 34604 000051EC EB3E                    	jmp	short $P_FileF02	;AN033;
 34605                                  $P_FileF_Err:				;AN000;
 34606 000051EE 5E                      	pop	si			;AN000;
 34607 000051EF 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000;
 34608 000051F3 5F                      	pop	di			;AN000;
 34609                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 34610                                  	;test	word [es:bx],1		;AN000; is it optional ?
 34611 000051F4 26F60701                	test	byte [es:bx],$P_Optional ; 1
 34612 000051F8 7532                    	jnz	short $P_FileF02	;AN000;
 34613 000051FA 2EC706[2197]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 34614                                  	;mov	word [cs:$P_RC],2	;AC034; 3/17/87
 34615 00005201 EB29                    	jmp	short $P_FileF02	;AN000;
 34616                                  $P_FileF03:				;AN000;
 34617 00005203 58                      	pop	ax			;AN000; discard save si
 34618 00005204 56                      	push	si			;AN000; save new si
 34619                                  $P_FileF_Loop1: 			;AN000;
 34620 00005205 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 34621 00005208 08C0                    	or	al,al			;AN000; end of line ?
 34622 0000520A 741E                    	jz	short $P_FileF_RLT	;AN000;
 34623 0000520C E82C00                  	call	$P_FileSp_Chk		;AN000; File special character ?
 34624 0000520F 740B                    	jz	short $P_FileF00	;AN000;
 34625 00005211 E85E01                  	call	$P_Chk_DBCS		;AN000; no, then DBCS ?
 34626 00005214 7302                    	jnc	short $P_FileF01	;AN000;
 34627 00005216 47                      	inc	di			;AN000; if yes, skip next byte
 34628 00005217 46                      	inc	si			;AN000;
 34629                                  $P_FileF01:				;AN000;
 34630 00005218 47                      	inc	di			;AN000;
 34631 00005219 46                      	inc	si			;AN000;
 34632 0000521A EBE9                    	jmp	short $P_FileF_Loop1	;AN000;
 34633                                  $P_FileF00:				;AN000;
 34634 0000521C 2EA2[2797]              	mov	[cs:$P_Terminator],al	;AC034;
 34635 00005220 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; update end of string
 34636 00005224 47                      	inc	di			;AN000;
 34637 00005225 2E893E[2397]            	mov	[cs:$P_SI_Save],di	;AC034; update next pointer in command line
 34638                                  $P_FileF_RLT:				;AN000;
 34639 0000522A 5E                      	pop	si			;AN000;
 34640 0000522B 5F                      	pop	di			;AN000;
 34641                                  $P_FileF02:				;AN000;
 34642 0000522C 58                      	pop	ax			;AN000; (tm14)
 34643                                  	;;test	ax,200h
 34644                                  	;test	ax,$P_File_Spc		;AN000; (tm14)
 34645                                  	; 05/04/2023
 34646 0000522D F6C402                  	test	ah,($P_File_Spc>>8)
 34647 00005230 7408                    	jz	short $P_Drv_Only_Exit	;AN000; (tm14)
 34648 00005232 50                      	push	ax			;AN000; (tm14)
 34649                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 34650                                  	;mov	al,$P_File_Spec ; 5 	;AN000;    result
 34651                                  	; 05/04/2023
 34652 00005233 B805FF                  	mov	ax,($P_No_Tag<<8)+$P_File_Spec
 34653 00005236 E819F9                  	call	$P_Fill_Result		;AN000; 	buffer to file spec
 34654 00005239 58                      	pop	ax			;AN000;
 34655                                  $P_Drv_Only_Exit:			;AN000; (tm14)
 34656 0000523A C3                      	retn				;AN000;
 34657                                  
 34658                                  ;***********************************************************************
 34659                                  ; $P_FileSp_Chk
 34660                                  ;
 34661                                  ; Function:  Check if the input byte is one of file special characters
 34662                                  ;
 34663                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34664                                  ;	     AL = character code to be examineed
 34665                                  ;
 34666                                  ; Output:    ZF = 1 , AL is one of special characters
 34667                                  ;***********************************************************************
 34668                                  
 34669                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34670                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34671                                  $P_FileSp_Chk:
 34672 0000523B 53                      	push	bx			;AN000;
 34673 0000523C 51                      	push	cx			;AN000;
 34674                                  	;lea	bx,[cs:$P_FileSp_Char]	;AC034; special character table
 34675 0000523D 8D1E[F197]              	lea	bx,$P_FileSp_Char ; "[]|<>+=;\""
 34676 00005241 B90900                  	mov	cx,$P_FileSp_Len ; 9
 34677                                  	;mov	cx,9			;AN000; load length of it
 34678                                  $P_FileSp_Loop: 			;AN000;
 34679 00005244 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 34680 00005247 7404                    	je	short $P_FileSp_Exit	;AN000;
 34681 00005249 43                      	inc	bx			;AN000;
 34682 0000524A E2F8                    	loop	$P_FileSp_Loop		;AN000;
 34683 0000524C 41                      	inc	cx			;AN000; reset ZF
 34684                                  $P_FileSp_Exit: 			;AN000;
 34685 0000524D 59                      	pop	cx			;AN000;
 34686 0000524E 5B                      	pop	bx			;AN000;
 34687 0000524F C3                      	retn				;AN000;
 34688                                  
 34689                                  ;***********************************************************************
 34690                                  ; $P_Drive_Format;
 34691                                  ;
 34692                                  ; Function:  Check if the input string is valid drive only format.
 34693                                  ;	     And set the result buffer.
 34694                                  ;
 34695                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34696                                  ;	     ES:BX -> CONTROL block
 34697                                  ;
 34698                                  ; Output:    None
 34699                                  ;
 34700                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS
 34701                                  ;
 34702                                  ; Vars: $P_RC(W)
 34703                                  ;***********************************************************************
 34704                                  
 34705                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34706                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34707                                  $P_Drive_Format:
 34708 00005250 50                      	push	ax			;AN000;
 34709 00005251 52                      	push	dx			;AN000;
 34710 00005252 2E8A04                  	mov	al,[cs:si]		;AN000;
 34711 00005255 08C0                    	or	al,al			;AN000; if null string
 34712 00005257 7436                    	jz	short $P_Drv_Exit	;AN000; do nothing
 34713 00005259 E81601                  	call	$P_Chk_DBCS		;AN000; is it leading byte ?
 34714 0000525C 722A                    	jc	short $P_Drv_Err	;AN000;
 34715                                  	;cmp	word [cs:si+1],3Ah ; $P_Colon  ; ':'
 34716 0000525E 2E837C013A              	cmp	word [cs:si+1],$P_Colon ;AN000; "d", ":", 0  ?
 34717 00005263 740D                    	je	short $P_DrvF00		;AN000;
 34718                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 34719                                  	;test	word [es:bx],10h	;AN000; colon can be ignored?
 34720 00005265 26F60710                	test	byte [es:bx],$P_Ig_Colon ; 10h
 34721 00005269 741D                    	jz	short $P_Drv_Err	;AN000;
 34722 0000526B 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; "d", 0  ?
 34723 00005270 7516                    	jne	short $P_Drv_Err	;AN000;
 34724                                  $P_DrvF00:				;AN000;
 34725 00005272 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case
 34726 00005274 3C61                    	cmp	al,"a" ; 61h            ;AN000; drive letter must
 34727 00005276 7210                    	jb	short $P_Drv_Err	;AN000; in range of
 34728 00005278 3C7A                    	cmp	al,"z" ; 7Ah            ;AN000; "a" - "z"
 34729 0000527A 770C                    	ja	short $P_Drv_Err	;AN000; if no, error
 34730 0000527C 2C60                    	sub	al,"a"-1  ; 60h         ;AN000; make text drive to binary drive
 34731 0000527E 88C2                    	mov	dl,al			;AN000; set
 34732                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000;    result
 34733                                  	;mov	al,$P_Drive ; 6		;AN000; 	 buffer
 34734                                  	; 05/04/2023
 34735 00005280 B806FF                  	mov	ax,($P_No_Tag<<8)+$P_Drive ; 06FFh
 34736 00005283 E8CCF8                  	call	$P_Fill_Result		;AN000; 	       to drive
 34737 00005286 EB07                    	jmp	short $P_Drv_Exit	;AN000;
 34738                                  $P_Drv_Err:				;AN000;
 34739 00005288 2EC706[2197]0900        	mov	word [cs:$P_RC],$P_Syntax
 34740                                  	;mov	word [cs:$P_RC],9	;AC034;
 34741                                  $P_Drv_Exit:				;AN000;
 34742 0000528F 5A                      	pop	dx			;AN000;
 34743 00005290 58                      	pop	ax			;AN000;
 34744 00005291 C3                      	retn				;AN000;
 34745                                  
 34746                                  ;***********************************************************************
 34747                                  ; $P_Skip_Delim;
 34748                                  ;
 34749                                  ; Function: Skip delimiters specified in the PARMS list, white space
 34750                                  ;	    and comma.
 34751                                  ;
 34752                                  ; Input:    DS:SI -> Command String
 34753                                  ;	    ES:DI -> Parameter List
 34754                                  ;
 34755                                  ; Output:   CY = 1 if the end of line encounterd
 34756                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 34757                                  ;	    AL = Last examineed character
 34758                                  ;
 34759                                  ; Use:	    $P_Chk_EOL, $P_Chk_Delim,
 34760                                  ;
 34761                                  ; Vars:     $P_Flags(R)
 34762                                  ;***********************************************************************
 34763                                  
 34764                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34765                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34766                                  $P_Skip_Delim:				;AN000;
 34767                                  $P_Skip_Delim_Loop:			;AN000;
 34768 00005292 AC                      	lodsb				;AN000;
 34769 00005293 E81E00                  	call	$P_Chk_EOL		;AN000; is it EOL character ?
 34770 00005296 7416                    	je	short $P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 34771                                  
 34772 00005298 E84B00                  	call	$P_Chk_Delim		;AN000; is it one of delimiters ?
 34773 0000529B 7514                    	jne	short $P_Skip_Delim_NCY	;AN000; if no, exit w/ CY off
 34774                                  
 34775 0000529D 2EF606[2D97]20          	test	byte [cs:$P_Flags2],$P_Extra
 34776                                  	;test	byte [cs:$P_Flags2],20h ;AC034; extra delim or comma found ?
 34777 000052A3 74ED                    	jz	short $P_Skip_Delim_Loop
 34778                                  					;AN000; if no, loop
 34779 000052A5 2EF606[2D97]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ
 34780                                  	;;test	byte [cs:$P_Flags2],41h	;AC034; /x , or xxx=zzz , (tm08)
 34781                                  	;jz	short $P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 34782                                  	;dec	si ; *			;AN000; backup si for next call (tm08)
 34783                                  	;;jmp	short $P_Exit_At_Extra	;AN000; else exit w/ CY off
 34784                                  	; 05/04/2023
 34785 000052AB 7505                    	jnz	short $P_Skip_Delim_Exit ; cf = 0
 34786                                  $P_Exit_At_Extra:			;AN000;
 34787                                  	; cf = 0
 34788                                  	;clc				;AN000; indicate extra delim
 34789 000052AD C3                      	retn				;AN000;
 34790                                  
 34791                                  $P_Skip_Delim_CY:			;AN000;
 34792 000052AE F9                      	stc				;AN000; indicate EOL
 34793 000052AF EB01                    	jmp	short $P_Skip_Delim_Exit
 34794                                  					;AN000;
 34795                                  $P_Skip_Delim_NCY:			;AN000;
 34796 000052B1 F8                      	clc				;AN000; indicate non delim
 34797                                  $P_Skip_Delim_Exit:			;AN000; in this case, need
 34798 000052B2 4E                      	dec	si ; *			;AN000;  backup index pointer
 34799 000052B3 C3                      	retn				;AN000;
 34800                                  	; 05/04/2023
 34801                                  ;$P_Exit_At_Extra:			;AN000;
 34802                                  	;clc				;AN000; indicate extra delim
 34803                                  	;retn				;AN000;
 34804                                  
 34805                                  ;***********************************************************************
 34806                                  ; $P_Chk_EOL;
 34807                                  ;
 34808                                  ; Function: Check if AL is one of End of Line characters.
 34809                                  ;
 34810                                  ; Input:    AL = character code
 34811                                  ;	    ES:DI -> Parameter List
 34812                                  ;
 34813                                  ; Output:   ZF = 1 if one of End of Line characters
 34814                                  ;***********************************************************************
 34815                                  
 34816                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34817                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34818                                  $P_Chk_EOL:
 34819 000052B4 53                      	push	bx			;AN000;
 34820 000052B5 51                      	push	cx			;AN000;
 34821 000052B6 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; Carriage return ?
 34822 000052B8 7429                    	je	short $P_Chk_EOL_Exit 	;AN000;
 34823 000052BA 3C00                    	cmp	al,$P_NULL ; 0		;AN000; zero ?
 34824 000052BC 7425                    	je	short $P_Chk_EOL_Exit 	;AN000;
 34825 000052BE 26807D0202              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL
 34826                                  	;cmp	byte [es:di+2],2	;AN000; EOL character specified ?
 34827 000052C3 721E                    	jb	short $P_Chk_EOL_Exit 	;AN000;
 34828 000052C5 31DB                    	xor	bx,bx			;AN000;
 34829 000052C7 268A5D03                	mov	bl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 34830                                  	;mov	bl,[es:di+3]		;AN000; get length of delimiter list
 34831 000052CB 83C304                  	add	bx,$P_Len_PARMS; 4 	;AN000; skip it
 34832 000052CE 26803900                	cmp	byte [es:bx+di],$P_I_Use_Default
 34833                                  	;cmp	byte [es:bx+di],0	;AN000; No extra EOL character ?
 34834 000052D2 740D                    	je	short $P_Chk_EOL_NZ	;AN000;
 34835 000052D4 31C9                    	xor	cx,cx			;AN000; Get number of extra chcracter
 34836 000052D6 268A09                  	mov	cl,[es:bx+di]		;AN000;
 34837                                  $P_Chk_EOL_Loop:			;AN000;
 34838 000052D9 43                      	inc	bx			;AN000;
 34839 000052DA 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 34840 000052DD 7404                    	je	short $P_Chk_EOL_Exit 	;AN000;
 34841 000052DF E2F8                    	loop	$P_Chk_EOL_Loop 	;AN000;
 34842                                  $P_Chk_EOL_NZ:				;AN000;
 34843 000052E1 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; reset ZF
 34844                                  $P_Chk_EOL_Exit:			;AN000;
 34845 000052E3 59                      	pop	cx			;AN000;
 34846 000052E4 5B                      	pop	bx			;AN000;
 34847 000052E5 C3                      	retn				;AN000;
 34848                                  
 34849                                  ;***********************************************************************
 34850                                  ; $P_Chk_Delim;
 34851                                  ;
 34852                                  ; Function: Check if AL is one of delimiter characters.
 34853                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 34854                                  ;	    blanks.
 34855                                  ;
 34856                                  ; Input:    AL = character code
 34857                                  ;	    DS:SI -> Next Character
 34858                                  ;	    ES:DI -> Parameter List
 34859                                  ;
 34860                                  ; Output:   ZF = 1 if one of delimiter characters
 34861                                  ;	    SI points to the next character
 34862                                  ; Vars:  $P_Terminator(W), $P_Flags(W)
 34863                                  ;***********************************************************************
 34864                                  
 34865                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34866                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34867                                  $P_Chk_Delim:
 34868 000052E6 53                      	push	bx			;AN000;
 34869 000052E7 51                      	push	cx			;AN000;
 34870 000052E8 2EC606[2797]20          	mov	byte [cs:$P_Terminator],$P_Space ; 20h
 34871                                  					;AC034; Assume terminated by space
 34872 000052EE 2E8026[2D97]DF          	and	byte [cs:$P_Flags2],0FFh-$P_Extra ; 0DFh
 34873                                  					;AC034;
 34874 000052F4 3C20                    	cmp	al,$P_Space ; 20h ; ' '	;AN000; Space ?
 34875 000052F6 7436                    	je	short $P_Chk_Delim_Exit	;AN000;
 34876                                  
 34877 000052F8 3C09                    	cmp	al,$P_TAB ; 09h		;AN000; TAB ?
 34878 000052FA 7432                    	je	short $P_Chk_Delim_Exit	;AN000;
 34879                                  
 34880 000052FC 3C2C                    	cmp	al,$P_Comma  ; ',' 	;AN000; Comma ?
 34881 000052FE 7431                    	je	short $P_Chk_Delim_Exit0
 34882                                  					;AN000;
 34883                                  $P_Chk_Delim00: 			;AN000;
 34884 00005300 3C20                    	cmp	al,20h ; $P_DBSP1	;AN000; 1st byte of DBCS Space ?
 34885 00005302 750C                    	jne	short $P_Chk_Delim01	;AN000;
 34886 00005304 803C20                  	cmp	byte [si],20h ; $P_DBSP2
 34887                                  					;AN000; 2nd byte of DBCS Space ?
 34888 00005307 7507                    	jne	short $P_Chk_Delim01	;AN000;
 34889 00005309 B020                    	mov	al,$P_Space ; 20h	;AN000;
 34890 0000530B 46                      	inc	si			;AN000; make si point to next character
 34891 0000530C 38C0                    	cmp	al,al			;AN000; Set ZF
 34892 0000530E EB1E                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 34893                                  
 34894                                  $P_Chk_Delim01: 			;AN000;
 34895                                  	;cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_Delim
 34896 00005310 26807D0201              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],1
 34897                                  	;cmp	byte [es:di+2],1	;AN000; delimiter character specified ?
 34898 00005315 7217                    	jb	short $P_Chk_Delim_Exit	;AN000;
 34899                                  
 34900 00005317 31C9                    	xor	cx,cx			;AN000;
 34901 00005319 268A4D03                	mov	cl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 34902                                  	;mov	cl,[esi:di+3]		;AN000; get length of delimiter list
 34903 0000531D 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 34904 0000531F 740B                    	jz	short $P_Chk_Delim_NZ	;AN000;
 34905                                  
 34906 00005321 BB0300                  	mov	bx,$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 34907                                  $P_Chk_Delim_Loop:			;AN000;
 34908 00005324 43                      	inc	bx			;AN000;
 34909 00005325 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 34910 00005328 7407                    	je	short $P_Chk_Delim_Exit0
 34911                                  					;AN000;
 34912 0000532A E2F8                    	loop	$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 34913                                  
 34914                                  $P_Chk_Delim_NZ:			;AN000;
 34915 0000532C 3C20                    	cmp	al,$P_Space ; 20h	;AN000; reset ZF
 34916                                  $P_Chk_Delim_Exit:			;AN000;
 34917 0000532E 59                      	pop	cx			;AN000;
 34918 0000532F 5B                      	pop	bx			;AN000;
 34919 00005330 C3                      	retn				;AN000;
 34920                                  
 34921                                  $P_Chk_Delim_Exit0:			;AN000;
 34922 00005331 2EA2[2797]              	mov	[cs:$P_Terminator],al	;AC034; keep terminated delimiter
 34923 00005335 2EF606[2D97]01          	test	byte [cs:$P_Flags2],$P_equ
 34924                                  	;test	byte [cs:$P_Flags2],1	;AN027;AC034;; if terminating a key=
 34925 0000533B 7506                    	jnz	short $P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 34926                                  
 34927 0000533D 2E800E[2D97]20          	or	byte [cs:$P_Flags2],$P_Extra ; 20h
 34928                                  	;or	byte [cs:$P_Flags2],20h	;AC034; flag terminated extra delimiter or comma
 34929                                  $P_No_Set_Extra:			;AN027;
 34930 00005343 38C0                    	cmp	al,al			;AN000; set ZF
 34931 00005345 EBE7                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 34932                                  
 34933                                  ;***********************************************************************
 34934                                  ; $P_Chk_Switch;
 34935                                  ;
 34936                                  ; Function: Check if AL is the switch character not in first position of
 34937                                  ;	    $P_STRING_BUF
 34938                                  ;
 34939                                  ; Input:    AL = character code
 34940                                  ;	    BX = current pointer within $P_String_Buf
 34941                                  ;	    SI =>next char on command line (following the one in AL)
 34942                                  ;
 34943                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 34944                                  ;		 position, and has no chance of being part of a date string,
 34945                                  ;		 i.e. should be treated as a delimiter.
 34946                                  ;
 34947                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 34948                                  ;		 position, or is a slash but may be part of a date string, i.e.
 34949                                  ;		 should not be treated as a delimiter.
 34950                                  ;
 34951                                  ; Vars:  $P_Terminator(W)
 34952                                  ;
 34953                                  ; Use:	 $P_0099
 34954                                  ;***********************************************************************
 34955                                  
 34956                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34957                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34958                                  $P_Chk_Switch:
 34959                                  	; 18/04/2023
 34960 00005347 8D2E[3697]              	lea	bp,$P_STRING_BUF	;AN020;AC034; BP=OFFSET of $P_String_Buf even in group addressing
 34961                                  
 34962 0000534B 39EB                    	cmp	bx,bp			;AN000;
 34963 0000534D 7418                    	je	short $P_STRUC_L2	;AN000;
 34964                                  
 34965 0000534F 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 34966 00005351 7512                    	jne	short $P_STRUC_L5	;AN000;
 34967                                  
 34968 00005353 F9                      	stc				;AN020;not in first position and is slash, now see if might be in date string
 34969 00005354 50                      	push	ax			;AN020;save input char
 34970 00005355 2E8A47FF                	mov	al,[cs:bx-1]		;AN026;AL=char before the current char
 34971 00005359 E804FB                  	call	$P_0099 		;AN020;return carry set if not numeric
 34972 0000535C 7205                    	jc	short $P_STRUC_L7	;AN000;
 34973                                  
 34974 0000535E 8A04                    	mov	al,[si]			;AN020;AL=char after the current char
 34975 00005360 E8FDFA                  	call	$P_0099			;AN020;return carry set if not numeric
 34976                                  $P_STRUC_L7:				;AN000;
 34977 00005363 58                      	pop	ax			;AN020;restore AL to input char
 34978                                  	;jmp	short $P_STRUC_L1	;AN000;
 34979                                  	; 18/04/2023
 34980 00005364 C3                      	retn
 34981                                  
 34982                                  $P_STRUC_L5:				;AN000;
 34983 00005365 F8                      	clc				;AN020;not a slash
 34984                                  	;jmp	short $P_STRUC_L1	;AN000;
 34985                                  	 ;18/04/2023
 34986 00005366 C3                      	retn
 34987                                  
 34988                                  $P_STRUC_L2:				;AN000;
 34989 00005367 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 34990                                  	;jne	short $P_STRUC_L12	;AN000;
 34991                                  	; 18/04/2023
 34992 00005369 75FA                    	jne	short $P_STRUC_L5
 34993                                  
 34994 0000536B 2E800E[2D97]40          	or	byte [cs:$P_Flags2],$P_SW
 34995                                  	;or	byte [cs:$P_Flags2],40h	;AN020;AC034;;could be valid switch, first char and is slash
 34996                                  	; 18/04/2023
 34997                                  ;$P_STRUC_L12:				;AN000;
 34998                                  	;clc				;AN020;CF=0 indicating first char
 34999                                  $P_STRUC_L1:				;AN000;
 35000 00005371 C3                      	retn				;AN000;
 35001                                  
 35002                                  ;**************************************************************************
 35003                                  ; $P_Chk_DBCS:
 35004                                  ;
 35005                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 35006                                  ;
 35007                                  ;  Input:
 35008                                  ;	  AL	= Code to be examineed
 35009                                  ;
 35010                                  ;  Output:
 35011                                  ;	  If CF is on then a lead byte of DBCS
 35012                                  ;
 35013                                  ; Use: INT 21h w/AH=63
 35014                                  ;
 35015                                  ; Vars:  $P_DBCSEV_Seg(RW), $P_DBCSEV_Off(RW)
 35016                                  ;***************************************************************************
 35017                                  
 35018                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35019                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35020                                  $P_Chk_DBCS:
 35021 00005372 1E                      	push	ds			;AN000;
 35022 00005373 56                      	push	si			;AN000;
 35023 00005374 53                      	push	bx			;AN000; (tm11)
 35024 00005375 2E833E[2A97]00          	cmp	word [cs:$P_DBCSEV_SEG],0
 35025                                  					;AC034; ALREADY SET ?
 35026 0000537B 7527                    	jne	short $P_DBCS00		;AN000;
 35027 0000537D 50                      	push	ax			;AN000;
 35028 0000537E 1E                      	push	ds			;AN000; (tm11)
 35029 0000537F 51                      	push	cx			;AN000;
 35030 00005380 52                      	push	dx			;AN000;
 35031 00005381 57                      	push	di			;AN000;
 35032 00005382 55                      	push	bp			;AN000;
 35033 00005383 06                      	push	es			;AN000;
 35034 00005384 31F6                    	xor	si,si			;AN000;
 35035 00005386 8EDE                    	mov	ds,si			;AN000;
 35036                                  	;mov	ax,$P_DOS_GetEV 	;AN000; GET DBCS EV CALL
 35037 00005388 B80063                  	mov	ax,6300h
 35038 0000538B CD21                    	int	21h			;AN000;
 35039 0000538D 8CDB                    	mov	bx,ds			;AN000; (tm11)
 35040 0000538F 09DB                    	or	bx,bx			;AN000; (tm11)
 35041 00005391 07                      	pop	es			;AN000;
 35042 00005392 5D                      	pop	bp			;AN000;
 35043 00005393 5F                      	pop	di			;AN000;
 35044 00005394 5A                      	pop	dx			;AN000;
 35045 00005395 59                      	pop	cx			;AN000;
 35046 00005396 1F                      	pop	ds			;AN000; (tm11)
 35047 00005397 58                      	pop	ax			;AN000;
 35048 00005398 7429                    	jz	short $P_NON_DBCS	;AN000;
 35049                                  $P_DBCS02:				;AN000;
 35050 0000539A 2E8936[2897]            	mov	[cs:$P_DBCSEV_OFF],si	;AC034; save EV offset
 35051 0000539F 2E891E[2A97]            	mov	[cs:$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 35052                                  $P_DBCS00:				;AN000;
 35053 000053A4 2E8B36[2897]            	mov	si,[cs:$P_DBCSEV_OFF]	;AC034; load EV offset
 35054 000053A9 2E8E1E[2A97]            	mov	ds,[cs:$P_DBCSEV_SEG]	;AC034; and segment
 35055                                  $P_DBCS_LOOP:				;AN000;
 35056 000053AE 833C00                  	cmp	word [si],0 		;AN000; zero vector ?
 35057 000053B1 7410                    	je	short $P_NON_DBCS	;AN000; then exit
 35058 000053B3 3A04                    	cmp	al,[si] 		;AN000;
 35059 000053B5 7208                    	jb	short $P_DBCS01		;AN000; Check if AL is in
 35060 000053B7 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 35061 000053BA 7703                    	ja	short $P_DBCS01		;AN000;      the vector
 35062 000053BC F9                      	stc				;AN000; if yes, indicate DBCS and exit
 35063 000053BD EB04                    	jmp	short $P_DBCS_EXIT	;AN000;
 35064                                  $P_DBCS01:				;AN000;
 35065 000053BF 46                      	inc	si			;AC035; add '2' to
 35066 000053C0 46                      	inc	si			;AC035;  SI reg
 35067                                  					;AN000; get next vector
 35068 000053C1 EBEB                    	jmp	short $P_DBCS_LOOP	;AN000; loop until zero vector found
 35069                                  
 35070                                  $P_NON_DBCS:				;AN000;
 35071                                  	; 18/04/2023
 35072                                  	; cf=0
 35073                                  	;clc				;AN000; indicate SBCS
 35074                                  $P_DBCS_EXIT:				;AN000;
 35075 000053C3 5B                      	pop	bx			;AN000; (tm11)
 35076 000053C4 5E                      	pop	si			;AN000;
 35077 000053C5 1F                      	pop	ds			;AN000;
 35078 000053C6 C3                      	retn				;AN000;
 35079                                  
 35080                                  ;============================================================================
 35081                                  ; TPARSE.ASM, MSDOS 6.0, 1991
 35082                                  ;============================================================================
 35083                                  ; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35084                                  
 35085                                  ; ****************************************************************
 35086                                  ; *
 35087                                  ; * ROUTINE:	 CMD_PARSE
 35088                                  ; *
 35089                                  ; * FUNCTION:	 Interface for transient COMMAND to invoke
 35090                                  ; *		 SYSPARSE.
 35091                                  ; *
 35092                                  ; * INPUT:	 inputs to SYSPARSE
 35093                                  ; *
 35094                                  ; * OUTPUT:	 outputs from SYSPARSE
 35095                                  ; *
 35096                                  ; ****************************************************************
 35097                                  
 35098                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35099                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4FF7h
 35100                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35101                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:57BBh
 35102                                  ;cmd_parse:
 35103                                  	;call	sysparse		;AN000;
 35104                                  	;retn				;AN000;
 35105                                  	; 06/04/2023
 35106                                  	;jmp	sysparse
 35107                                  
 35108                                  append_parse:
 35109 000053C7 E842F5                  	call	sysparse		;AN010;
 35110 000053CA CB                      	retf				;AN010;
 35111                                  
 35112                                  ;============================================================================
 35113                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 35114                                  ;============================================================================
 35115                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35116                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35117                                  
 35118                                  ; ----------------------------
 35119                                  ; MSDOS 6.0, MSGSERV.ASM, 1991
 35120                                  ; ----------------------------
 35121                                  
 35122                                  ;; Replacable parameters are described by a sublist structure
 35123                                  
 35124                                  struc $M_SUBLIST_STRUC		;;AN000;;
 35125 00000000 ??                       .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 35126 00000001 ??                       .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 35127 00000002 ????????                 .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 35128 00000006 ??                       .$M_S_ID:	resb 1		;;AN000;; n of %n
 35129 00000007 ??                       .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 35130 00000008 ??                       .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 35131 00000009 ??                       .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 35132 0000000A ??                       .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 35133                                  endstruc
 35134                                  
 35135                                  ; ---------------------------------------------------------------------------
 35136                                  ; ---------------------------------------------------------------------------
 35137                                  
 35138                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35139                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 4FFFh
 35140                                  
 35141                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35142                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57C3h
 35143                                  
 35144                                  Printf_Init:
 35145 000053CB E80F00                  	call	std_printf
 35146 000053CE CB                      	retf
 35147                                  
 35148                                  Printf_Crlf:
 35149 000053CF E80B00                  	call	std_printf
 35150                                  	;call	CRLF2
 35151                                  	;retn
 35152                                  	; 07/04/2023
 35153 000053D2 E96BD5                  	jmp	CRLF2
 35154                                  
 35155                                  ;****************************************************************
 35156                                  ;*
 35157                                  ;* ROUTINE:	STD_PRINTF/STD_EPRINTF
 35158                                  ;*
 35159                                  ;* FUNCTION:	Set up to print out a message using SYSDISPMSG.
 35160                                  ;*		Set up substitutions if utility message.  Make
 35161                                  ;*		sure any changes to message variables in TDATA
 35162                                  ;*		are reset to avoid reloading the transient.
 35163                                  ;*
 35164                                  ;* INPUT:	Msg_Disp_Class	-  set to message class
 35165                                  ;*		Msg_Cont_Flag	-  set to control flags
 35166                                  ;*		DS	points to transient segment
 35167                                  ;*
 35168                                  ;*		if utility message:
 35169                                  ;*		DX	points to a block with message number
 35170                                  ;*			(word), number of substitutions (byte),
 35171                                  ;*			followed by substitution list if there
 35172                                  ;*			are substitutions.  If substitutions
 35173                                  ;*			are not in transient segment they must
 35174                                  ;*			be set.
 35175                                  ;*		else
 35176                                  ;*		AX	set to message number
 35177                                  ;*
 35178                                  ;* OUTPUT:	none
 35179                                  ;*
 35180                                  ;****************************************************************
 35181                                  
 35182                                  std_eprintf:
 35183 000053D5 C706[FD98]0200          	mov	word [PRINTF_HANDLE],2 		;AC000;Print to STDERR
 35184 000053DB EB06                    	jmp	short new_printf		;AC000;
 35185                                  
 35186                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35187                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 5012h
 35188                                  
 35189                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35190                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57D6h
 35191                                  
 35192                                  std_printf:
 35193 000053DD C706[FD98]0100          	mov	word [PRINTF_HANDLE],1 		;AC000;Print to STDOUT
 35194                                  
 35195                                  new_printf:
 35196 000053E3 50                      	push	ax				;AN000;save registers
 35197 000053E4 53                      	push	bx				;AN000;
 35198 000053E5 51                      	push	cx				;AN000;
 35199 000053E6 06                      	push	es				;AN000;get local ES
 35200 000053E7 1E                      	push	ds				;AN000;
 35201 000053E8 07                      	pop	es				;AN000;
 35202 000053E9 57                      	push	di				;AN000;
 35203 000053EA 56                      	push	si				;AN000;
 35204 000053EB 52                      	push	dx				;AN000;
 35205                                  
 35206                                  	; 07/04/2023
 35207                                  	;mov	word [print_err_flag],0		;AN000;
 35208 000053EC 31C9                    	xor	cx,cx
 35209 000053EE 890E[149F]              	mov	[print_err_flag],cx ; 0
 35210                                  
 35211 000053F2 89D6                    	mov	si,dx				;AN000;Get offset of message number
 35212 000053F4 AD                      	lodsw					;AN000;load message number
 35213                                  	; 15/06/2023
 35214                                  	;push	ax				;AN000;save it
 35215                                  	;lodsb					;AN000;get number of substitutions
 35216                                  	;mov	cl,al				;AN000;set up CX as # of subst
 35217                                  	;; 07/04/2023
 35218                                  	;;xor	ch,ch				;AN000;SI now points to subst list
 35219                                  	;pop	ax				;AN000;get message number back
 35220                                  	; 15/06/2023
 35221 000053F5 8A0C                    	mov	cl,[si]
 35222 000053F7 46                      	inc	si
 35223                                  
 35224                                  	;cmp	cx,0				;AN000;Any substitutions?
 35225                                  	; 07/04/2023
 35226 000053F8 21C9                    	and	cx,cx
 35227 000053FA 745C                    	jz	short ready_to_print		;AN000;No - continue
 35228                                  
 35229 000053FC BF[169F]                	mov	di,subst_buffer			;AN061; Get address of message subst buffer
 35230 000053FF 57                      	push	di				;AN061; save it
 35231 00005400 51                      	push	cx				;AN061; save number of subst
 35232                                  
 35233                                  move_subst:
 35234 00005401 51                      	push	cx				;AN061;save number of subst
 35235 00005402 89F3                    	mov	bx,si				;AN061;save start of sublist
 35236                                  	;mov	cx,parm_block_size ; 11		;AN061;get size of sublist
 35237                                  	; 07/04/2023
 35238 00005404 B10B                    	mov	cl,parm_block_size ; 11
 35239 00005406 F3A4                    	rep	movsb				;AN061;move sublist
 35240                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 35241 00005408 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 35242                                  	;test	byte [bx+7],4			;AN061;are we doing date/time?
 35243 0000540C 7406                    	jz	short move_subst_cont 		;AN061;no - no need to reset
 35244                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],0
 35245                                  	;mov	word [bx+2],0			;AN061;reset original date or time to 0
 35246 0000540E 894F02                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],cx ; 0
 35247                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 35248                                  	;mov	word [bx+4],0			;AN061;
 35249 00005411 894F04                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cx ; 0
 35250                                  
 35251                                  move_subst_cont:				;AN061;
 35252 00005414 59                      	pop	cx				;AN061;get number of subst back
 35253 00005415 E2EA                    	loop	move_subst			;AN061;move cx sublists
 35254                                  
 35255 00005417 59                      	pop	cx				;AN061;get number of subst
 35256 00005418 50                      	push	ax				;AN061;save message number
 35257 00005419 803E[428F]FF            	cmp	byte [msg_disp_class],util_msg_class
 35258                                  	;cmp	byte [msg_disp_class],0FFh	;AN061;Is this a utility message
 35259 0000541E 740C                    	je	short check_fix			;AN061;YES - go see if substitutions
 35260                                  	;mov	byte [msg_flag],1 ; ext_msg_class
 35261 00005420 C606[109F]01            	mov	byte [msg_flag],ext_msg_class	;AN061;set message flag
 35262 00005425 BF[448F]                	mov	di,extend_buf_ptr		;AN061; Get address of extended message block
 35263 00005428 31C0                    	xor	ax,ax				;AN061;clear ax register
 35264 0000542A AB                      	stosw					;AN061;clear out message number
 35265 0000542B AA                      	stosb					;AN061;clear out subst count
 35266                                  
 35267                                  check_fix:					;AN061;
 35268 0000542C 58                      	pop	ax				;AN061;get message number back
 35269 0000542D 5F                      	pop	di				;AN061;get start of sublists
 35270 0000542E 89FE                    	mov	si,di				;AN061;get into SI for msgserv
 35271 00005430 89F3                    	mov	bx,si				;AN061;get into BX for addressing
 35272 00005432 51                      	push	cx				;AN061;save number of subst
 35273                                  
 35274                                  set_subst:					;AN061;store the segment of the subst
 35275 00005433 837F0400                	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 35276                                  	;cmp	word [bx+4],0			;AN061;was it set already?
 35277 00005437 7509                    	jnz	short subst_seg_set		;AN061;if not 0, don't replace it
 35278 00005439 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 35279                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 35280                                  	;test	byte [bx+7],4			;AN061;don't replace if date or time
 35281 0000543D 7503                    	jnz	short subst_seg_set		;AN061;yes - skip it
 35282 0000543F 8C4F04                  	mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cs
 35283                                  	;mov	word [bx+4],cs			;AN061;set segment value
 35284                                  
 35285                                  subst_seg_set:					;AN061;
 35286 00005442 83C30B                  	add	bx,parm_block_size ; add bx,11	;AN061;go to next sublist
 35287 00005445 E2EC                    	loop	set_subst			;AN061;loop CX times
 35288 00005447 59                      	pop	cx				;AN061;get number of subst back
 35289                                  
 35290 00005448 89F3                    	mov	bx,si				;AN061;get start of sublist to BX
 35291 0000544A 817F02[7F9D]            	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2
 35292                                  	;cmp	word [bx+2],string_ptr_2	;AN061;are we using double indirection?
 35293 0000544F 7507                    	jne	short ready_to_print		;AN061;no - we already have address
 35294                                  	; 01/05/2023
 35295 00005451 8B16[7F9D]              	mov	dx,[string_ptr_2] 		;AN061;get address in string_ptr_2
 35296 00005455 895702                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],dx
 35297                                  						;AN061;put it into the subst block
 35298                                  	;mov	[bx+2],dx
 35299                                  
 35300                                  ready_to_print:
 35301 00005458 8B1E[FD98]              	mov	bx,[PRINTF_HANDLE]		;AN000;get print handle
 35302 0000545C 8A16[438F]              	mov	dl,[msg_cont_flag]		;AN000;set up control flag
 35303 00005460 8A36[428F]              	mov	dh,[msg_disp_class]		;AN000;set up display class
 35304 00005464 C606[438F]00            	mov	byte [msg_cont_flag],0 ; no_cont_flag
 35305                                  						;AN061;reset flags to avoid
 35306 00005469 C606[428F]FF            	mov	byte [msg_disp_class],util_msg_class
 35307                                  	;mov	byte [msg_disp_class],0FFh	;AN061; transient reload
 35308                                  
 35309 0000546E 1E                      	push	ds				;AN026;
 35310 0000546F 06                      	push	es				;AN026;
 35311                                  
 35312 00005470 E83702                  	call	SYSDISPMSG			;AN000;call Rod
 35313                                  
 35314 00005473 07                      	pop	es				;AN026; restore registers
 35315 00005474 1F                      	pop	ds				;AN026;
 35316                                  
 35317 00005475 7303                    	jnc	short print_success		;AN000; everything went okay
 35318 00005477 A3[149F]                	mov	[print_err_flag],ax		;AN000;
 35319                                  
 35320                                  print_success:
 35321 0000547A 5A                      	pop	dx				;AN061;restore dx
 35322 0000547B 5E                      	pop	si				;AN000;restore registers
 35323 0000547C 5F                      	pop	di				;AN000;
 35324 0000547D 07                      	pop	es				;AN000;restore registers
 35325 0000547E 59                      	pop	cx				;AN000;
 35326 0000547F 5B                      	pop	bx				;AN000;
 35327 00005480 58                      	pop	ax				;AN000;
 35328 00005481 833E[149F]00            	cmp	word [print_err_flag],0		;AN000; if an error occurred - handle it
 35329 00005486 7501                    	jnz	short print_err			;AN000;
 35330                                  
 35331 00005488 C3                      	retn					;AC000;
 35332                                  
 35333                                  print_err:
 35334 00005489 0E                      	push	cs
 35335 0000548A 07                      	pop	es
 35336 0000548B 833E[FD98]02            	cmp	word [PRINTF_HANDLE],2 		;AN026;Print to STDERR?
 35337 00005490 7503                    	jne	short not_stderr		;AN026;no - continue
 35338 00005492 E96FAC                  	jmp	TCOMMAND			;AN026;Yes - hopless - just exit
 35339                                  
 35340                                  not_stderr:
 35341 00005495 A1[149F]                	mov	ax,[print_err_flag]		;AN026;get extended error number back
 35342 00005498 8E06[D19B]              	mov	es,[RESSEG]			; No, set up for error, load the
 35343                                  						;  right error msg, and jmp to cerror.
 35344 0000549C 26F606[1303]FF          	test	byte [es:PipeFlag],-1 ; 0FFh
 35345 000054A2 7408                    	jz	short _go_to_error
 35346 000054A4 E8BBDE                  	call	PipeOff
 35347 000054A7 BA[CA90]                	mov	dx,PIPEEMES_PTR
 35348 000054AA EB0B                    	jmp	short print_err_exit			;AC000;
 35349                                  
 35350                                  _go_to_error:
 35351 000054AC C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class
 35352                                  	;mov	byte [msg_disp_class],1		;AN000; set up extended error msg class
 35353 000054B1 BA[448F]                	mov	dx,extend_buf_ptr		;AC000; get extended message pointer
 35354 000054B4 A3[448F]                	mov	[extend_buf_ptr],ax		;AN000; get message number in control block
 35355                                  
 35356                                  print_err_exit: 				;AC000;
 35357 000054B7 0E                      	push	cs
 35358 000054B8 07                      	pop	es
 35359 000054B9 E931D8                  	jmp	cerror
 35360                                  
 35361                                  ;****************************************************************
 35362                                  ;*
 35363                                  ;* ROUTINE:	TSYSLOADMSG
 35364                                  ;*
 35365                                  ;* FUNCTION:	Interface to call SYSLOADMSG to avoid duplicate
 35366                                  ;*		names since these routines are also used in the
 35367                                  ;*		resident.
 35368                                  ;*
 35369                                  ;* INPUT:	Inputs to SYSLOADMSG
 35370                                  ;*
 35371                                  ;* OUTPUT:	Outputs from SYSLOADMSG
 35372                                  ;*
 35373                                  ;****************************************************************
 35374                                  
 35375                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35376                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35377                                  TSYSLOADMSG:
 35378 000054BC 53                      	push	bx				;AN000;
 35379 000054BD E80800                  	call	SYSLOADMSG			;AN000; call routine
 35380 000054C0 5B                      	pop	bx				;AN000;
 35381 000054C1 C3                      	retn					;AN000; exit
 35382                                  
 35383                                  ;****************************************************************
 35384                                  ;*
 35385                                  ;* ROUTINE:	TSYSGETMSG
 35386                                  ;*
 35387                                  ;* FUNCTION:	Interface to call SYSGETMSG to avoid duplicate
 35388                                  ;*		names since these routines are also used in the
 35389                                  ;*		resident.
 35390                                  ;*
 35391                                  ;* INPUT:	Inputs to SYSGETMSG
 35392                                  ;*
 35393                                  ;* OUTPUT:	Outputs from SYSGETMSG
 35394                                  ;*
 35395                                  ;****************************************************************
 35396                                  
 35397                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35398                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35399                                  TSYSGETMSG:
 35400 000054C2 51                      	push	cx				;AN000;
 35401 000054C3 E8B500                  	call	SYSGETMSG			;AN000; call routine
 35402 000054C6 59                      	pop	cx				;AN000;
 35403 000054C7 C3                      	retn					;AN000; exit
 35404                                  
 35405                                  ;============================================================================
 35406                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 35407                                  ;============================================================================
 35408                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35409                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35410                                  
 35411                                  ; ---------------------------------------------------------------------------
 35412                                  ; MODULE NAME: MSGSERV.SAL
 35413                                  ;
 35414                                  ; DESCRIPTIVE NAME: Message Services SALUT file
 35415                                  ;
 35416                                  ; FUNCTION: This module incorporates all the messages services and
 35417                                  ;	    is called upon at build time to INCLUDE the code requested
 35418                                  ;	    by a utility. Code is requested using the macro MSG_SERVICES.
 35419                                  ;
 35420                                  ; ENTRY POINT: Since this a collection of subroutines, entry point is at
 35421                                  ;	    requested procedure.
 35422                                  ;
 35423                                  ; INPUT: Since this a collection of subroutines, input is dependent on
 35424                                  ;	    function requested.
 35425                                  ;
 35426                                  ; EXIT-NORMAL: In all cases, CARRY FLAG = 0
 35427                                  ;
 35428                                  ; EXIT-ERROR: In all cases, CARRY FLAG = 1
 35429                                  ;
 35430                                  ; INTERNAL REFERENCES: (list of included subroutines)
 35431                                  ;
 35432                                  ;	- SYSLOADMSG
 35433                                  ;	- SYSDISPMSG
 35434                                  ;	- SYSGETMSG
 35435                                  ;
 35436                                  ; EXTERNAL REFERENCES: None
 35437                                  ;
 35438                                  ; NOTES: At build time, some modules must be included. These are only included
 35439                                  ;	 once using assembler switches. Other logic is included at the request
 35440                                  ;	 of the utility.
 35441                                  ;
 35442                                  ;	 COMR and COMT are assembler switches to conditionally assemble code
 35443                                  ;	 for RESIDENT COMMAND.COM and TRANSIENT COMMAND.COM to reduce resident
 35444                                  ;	 storage and multiple EQUates.
 35445                                  ;
 35446                                  ; REVISION HISTORY: Created MAY 1987
 35447                                  ;
 35448                                  ;     Label: DOS - - Message Retriever
 35449                                  ;	     (c) Copyright 1988 Microsoft
 35450                                  ; ---------------------------------------------------------------------------
 35451                                  
 35452                                  ;	Revision History
 35453                                  ;	================
 35454                                  ;
 35455                                  ;	M007	SR	08/24/90	Fixed bug #1818 -- changed
 35456                                  ;				$M_DISPLAY_H_STRING to properly
 35457                                  ;				handle Ctrl-Z being passed
 35458                                  ;
 35459                                  ;	M013	SR	9/12/90	Make SETSTDIO flag false so that all
 35460                                  ;				these routines are no longer assembled.
 35461                                  ;
 35462                                  ;	M016	SR	10/14/90	Bug #3380. Changed SYSLOADMSG so that
 35463                                  ;				CR-LF string also gets reinitialized
 35464                                  ;				on every cycle.
 35465                                  ;
 35466                                  ;	M020	SR	10/26/90	Bug #3380 again. Initialize $M_DIVISOR
 35467                                  ;				& $_MSG_NUM also in SYSLOADMSG.
 35468                                  
 35469                                  ; ---------------------------------------------------------------------------
 35470                                  
 35471                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35472                                  
 35473                                  ;;; Replacable parameters are described by a sublist structure
 35474                                  ;
 35475                                  ;struc $M_SUBLIST_STRUC		;;AN000;;
 35476                                  ; .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 35477                                  ; .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 35478                                  ; .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 35479                                  ; .$M_S_ID:	resb 1		;;AN000;; n of %n
 35480                                  ; .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 35481                                  ; .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 35482                                  ; .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 35483                                  ; .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 35484                                  ;endstruc
 35485                                  
 35486                                  ;; Each class will be defined by this structure.
 35487                                  
 35488                                  struc $M_CLASS_ID		;;AN000;;
 35489 00000000 ??                       .$M_CLS_ID:	  resb 1	;;AN000;; Class identifer
 35490 00000001 ????                     .$M_COMMAND_VER: resw 1	;;AN003;; COMMAND.COM version check
 35491 00000003 ??                       .$M_NUM_CLS_MSG: resb 1	;;AN000;; Total number of message in class
 35492                                   .size:
 35493                                  endstruc
 35494                                  
 35495                                  $M_CLASS_ID_SZ	EQU $M_CLASS_ID.size	;;AN000;;
 35496                                  
 35497                                  ;; Each message will be defined by this structure.
 35498                                  
 35499                                  struc $M_ID			;;AN000;;
 35500 00000000 ????                     .$M_NUM:	resw 1		;;AN000;; Message Number
 35501 00000002 ????                     .$M_TXT_PTR:	resw 1		;;AN000;; Pointer to message text
 35502                                   .size:	
 35503                                  endstruc
 35504                                  
 35505                                  $M_ID_SZ	EQU  $M_ID.size	;;AN000;;
 35506                                  
 35507                                  ; ---------------------------
 35508                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 35509                                  ; ---------------------------
 35510                                  $M_TEMP_BUF_SZ	EQU 64     ;; Size of temporary buffer	 ;AN003;
 35511                                  
 35512                                  ; --------------------------- 
 35513                                  
 35514                                  ; 07/04/2023
 35515                                  $M_NUM_CLS equ 3
 35516                                  
 35517                                  ;; Resident data area definition of variables
 35518                                  
 35519                                  struc $M_RES_ADDRS			;;AN000;;
 35520 00000000 ????????                 .$M_EXT_ERR_ADDRS: resd 1		;;AN000;; Allow pointers to THREE Extended error locations
 35521 00000004 ????????                 .$M_EXT_FILE:	    resd 1		;;AN001;;
 35522 00000008 ????????                 .$M_EXT_COMMAND:   resd 1		;;AN000;;
 35523 0000000C ????????                 .$M_EXT_TERM:	    resd 1		;;AN000;;
 35524 00000010 ????????                 .$M_PARSE_COMMAND: resd 1		;;AN000;;
 35525 00000014 ????????                 .$M_PARSE_ADDRS:   resd 1		;;AN000;; Allow pointers to TWO Parse error locations
 35526 00000018 ????????                 .$M_PARSE_TERM:    resd 1		;;AN000;;
 35527 0000001C ????????                 .$M_CRIT_ADDRS:    resd 1		;;AN000;; Allow pointers to TWO Critical error locations
 35528 00000020 ????????                 .$M_CRIT_COMMAND:  resd 1		;;AN000;;
 35529 00000024 ????????                 .$M_CRIT_TERM:	    resd 1		;;AN000;;
 35530 00000028 ????????                 .$M_DISK_PROC_ADDR: resd 1		;;AN004;; Address of READ_DISK_PROC
 35531 0000002C <res Ch>                 .$M_CLASS_ADDRS:   resd $M_NUM_CLS ; 3	;;AN000;; Allow pointers to specified classes
 35532 00000038 ????????                 .$M_CLS_TERM:	    resd 1		;;AN000;;
 35533 0000003C ????????                 .$M_DBCS_VEC:	    resd 1		;;AN000;; Save DBCS vector
 35534 00000040 ????                     .$M_HANDLE:	    resw 1 		;;AN000;;
 35535 00000042 ??                       .$M_SIZE:	    resb 1		;;AN000;;
 35536 00000043 ????                     .$M_CRLF:	    resb 2  		;;AN004;; CR LF message
 35537 00000045 ??                       .$M_CLASS:	    resb 1		;;AN004;; Saved class
 35538 00000046 ????                     .$M_RETURN_ADDR:   resw 1		;;AN000;;
 35539 00000048 ????                     .$M_MSG_NUM:	    resw 1		;;AN000;;
 35540 0000004A ????                     .$M_DIVISOR:	    resw 1		;;AN000;; Default = 10 (must be a WORD for division)
 35541 0000004C <res 40h>                .$M_TEMP_BUF:	    resb $M_TEMP_BUF_SZ	;;AN000;; Temporary buffer
 35542 0000008C ??                       .$M_BUF_TERM:	    resb 1		;;AN000;;
 35543                                   .size:
 35544                                  endstruc				;;AN000;;
 35545                                  
 35546                                  $M_RES_ADDRS_SZ	EQU $M_RES_ADDRS.size	;;AN000;;
 35547                                  
 35548                                  ;; Important fields of the Get Country Information call
 35549                                  
 35550                                  struc $M_COUNTRY_INFO			;;AN000;; Expected Country infomation
 35551 00000000 <res 4Ch>                .$M_HEADER:	    resb $M_RES_ADDRS_SZ-$M_TEMP_BUF_SZ-1
 35552                                  					;;AN000;; Go past first part of struc
 35553 0000004C ????                     .$M_DATE_FORMAT:   resw 1		;;AN000;; <------- Date Format
 35554 0000004E ??????????               .$M_CURR_SEPARA:   resb 5		;;AN000;;
 35555 00000053 ????                     .$M_THOU_SEPARA:   resb 2		;;AN000;; <------- Thou Separator
 35556 00000055 ????                     .$M_DECI_SEPARA:   resb 2		;;AN000;; <------- Decimal Separator
 35557 00000057 ????                     .$M_DATE_SEPARA:   resb 2		;;AN000;; <------- Date Separator
 35558 00000059 ????                     .$M_TIME_SEPARA:   resb 2		;;AN000;; <------- Time Separator
 35559 0000005B ??                       .$M_CURR_FORMAT:   resb 1		;;AN000;;
 35560 0000005C ??                       .$M_SIG_DIGS_CU:   resb 1		;;AN000;;
 35561 0000005D ??                       .$M_TIME_FORMAT:   resb 1		;;AN000;; <------- Time Format
 35562                                  endstruc				;;AN000;;
 35563                                  
 35564                                  ; ---------------------------------------------------------------------------
 35565                                  
 35566                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35567                                  ;;
 35568                                  ;;	PROC NAME: SYSLOADMSG
 35569                                  ;;
 35570                                  ;;	FUNCTION:
 35571                                  ;;	INPUTS:
 35572                                  ;;
 35573                                  ;;	OUTPUTS:
 35574                                  ;;
 35575                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35576                                  
 35577                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35578                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5107h
 35579                                  
 35580                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35581                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:58CBh
 35582                                  
 35583                                  SYSLOADMSG:
 35584 000054C8 50                      	push	ax				;;AN000;
 35585 000054C9 53                      	push	bx				;;AN000;
 35586 000054CA 52                      	push	dx				;;AN000;
 35587 000054CB 06                      	push	es				;;AN000;
 35588 000054CC 57                      	push	di				;;AN000;
 35589 000054CD 31C9                    	xor	cx,cx				;;AN000;  Reset to zero
 35590 000054CF 8EC1                    	mov	es,cx				;;AN000;
 35591 000054D1 31FF                    	xor	di,di				;;AN000;
 35592 000054D3 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 35593 000054D6 B200                    	mov	dl,0 ; DOS_GET_EXTENDED		;;AN000;; Where are the Extended errors in COMMAND.COM
 35594 000054D8 CD2F                    	int	2Fh				;;AN000;; Private interface
 35595                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 35596                                  		; DL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)
 35597                                  		; Return: ES:DI -> error table
 35598                                  	
 35599 000054DA 8C06[0598]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2],es
 35600                                  	;mov	[$M_RT+10],es			;;AN000;; Move into first avaliable table location
 35601 000054DE 893E[0398]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND],di
 35602                                  	;mov	[$M_RT+8],di			;;AN000;;
 35603                                  
 35604 000054E2 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 35605 000054E5 B202                    	mov	dl,2 ; DOS_GET_PARSE		;;AN000;; Where are the Parse errors in COMMAND.COM
 35606 000054E7 CD2F                    	int	2Fh				;;AN000;; Private interface
 35607                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 35608                                  		; DL = subfunction - get critical/SHARE error table (errors 13h-2Bh)
 35609                                  		; ES:DI -> error table
 35610                                  
 35611 000054E9 8C06[0D98]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2],es
 35612                                  	;mov	[$M_RT+18],es			;;AN000;; Move into first avaliable table location
 35613 000054ED 893E[0B98]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND],di
 35614                                  	;mov	[$M_RT+16],di			;;AN000;;
 35615                                  
 35616 000054F1 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 35617 000054F4 B204                    	mov	dl,4 ; DOS_GET_CRITICAL		;;AN000;; Where are the Critical errors in COMMAND.COM
 35618 000054F6 CD2F                    	int	2Fh				;;AN000;; Private interface
 35619                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 35620                                  		; DL = subfunction - get ??? error table
 35621                                  		; ES:DI -> error table
 35622                                  
 35623 000054F8 8C06[1D98]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2],es
 35624                                  	;mov	[$M_RT+34],es			;;AN000;; Move into first avaliable table location
 35625 000054FC 893E[1B98]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND],di
 35626                                  	;mov	[$M_RT+32],di			;;AN000;;
 35627                                  
 35628 00005500 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 35629 00005503 B206                    	mov	dl,6 ; DOS_GET_FILE		;;AN001;; Where are the FILE dependant in IFSFUNC.EXE
 35630 00005505 CD2F                    	int	2Fh					     ;;AN001;; Private interface
 35631                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 35632                                  		; DL = subfunction - get ??? error table
 35633                                  		; ES:DI -> error table
 35634                                  
 35635 00005507 8C06[0198]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2],es
 35636                                  	;mov	[$M_RT+6],es			;;AN001;; Move into first avaliable table location
 35637 0000550B 893E[FF97]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE],di
 35638                                  	;mov	[$M_RT+4],di			;;AN001;;
 35639                                  
 35640 0000550F E80B3A                  	call	$M_MSGSERV_1			;;AN000;; Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)
 35641                                  						;;AN000;;
 35642 00005512 8C06[FD97]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2],es
 35643                                  	;mov	[$M_RT+2],es			;;AN000;; Move into first avaliable table location
 35644 00005516 893E[FB97]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS],di
 35645                                  	;mov	[$M_RT+0],di			;;AN000;;
 35646 0000551A 8C06[1998]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2],es
 35647                                  	;mov	[$M_RT+30],es			;;AN000;; Move into first avaliable table location
 35648 0000551E 893E[1798]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS],di
 35649                                  	;mov	[$M_RT+28],di			;;AN000;;
 35650                                  
 35651 00005522 E8163A                  	call	$M_MSGSERV_2			;;AN000;; Get addressibility to MSGSERV CLASS 2 (PARSE Errors)
 35652                                  
 35653 00005525 8C06[1198]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2],es
 35654                                  	;mov	[$M_RT+22],es			;;AN000;; Move into first avaliable table location
 35655 00005529 893E[0F98]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS],di
 35656                                  	;mov	[$M_RT+20],di			;;AN000;;
 35657                                  
 35658 0000552D B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 35659 00005530 B208                    	mov	dl,8 ; DOS_GET_ADDR 		;;AN001;; Where is the READ_DISK_PROC in COMMAND.COM
 35660 00005532 CD2F                    	int	2Fh				;;AN001;; Private interface
 35661                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 35662                                  		; DL = subfunction - get ??? error table
 35663                                  		; ES:DI -> error table
 35664                                  
 35665 00005534 8C06[2598]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2],es
 35666                                  	;mov	[$M_RT+42],es			;;AN001;; Move into first avaliable table location
 35667 00005538 893E[2398]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],di
 35668                                  	;mov	[$M_RT+40],di			;;AN001;;
 35669                                  
 35670                                  ;M016; M020
 35671                                  ; Reinitialize the CR-LF string. Also, reinit the buffer terminator just to
 35672                                  ;be safe. Initialize $M_MSG_NUM and $M_DIVISOR also.
 35673                                  
 35674 0000553C C706[3E98]0D0A          	mov	word [$M_RT+$M_RES_ADDRS.$M_CRLF],0A0Dh
 35675                                  	;mov	word [$M_RT+67],0A0Dh		; Reinit CR-LF ;M016
 35676 00005542 C606[8798]24            	mov	byte [$M_RT+$M_RES_ADDRS.$M_BUF_TERM],'$'
 35677                                  	;mov	word [$M_RT+140],'$'		; Reinit buffer end;M016
 35678 00005547 C706[4398]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 35679                                  	;mov	word [$M_RT+72],0		; M020
 35680 0000554D C706[4598]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35681                                  	;mov	word [$M_RT+74],10		; M020
 35682                                  
 35683                                  	; 07/04/2023 - Retro DOS v4.0 COMMAND.COM
 35684                                  	; --------------------------
 35685                                  	; MSDOS 6.0 SYSMSG.INC, 1991
 35686                                  	; --------------------------
 35687                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP5192h
 35688                                  
 35689                                  	;$M_BUILD_PTRS %$M_NUM_CLS     		;;AN000;; Build all utility classes	
 35690 00005553 E86439                  	call    $M_CLS_3			; Get addressibility to class F
 35691 00005556 893E[2798]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS],di
 35692                                  	;mov	[$M_RT+44],di
 35693                                  	
 35694 0000555A E80600                  	CALL	$M_GET_DBCS_VEC 		;;AN000;; Save the DBCS vector
 35695                                  
 35696                                  	; 15/04/2023
 35697                                  	;clc					;;AN000;; Make sure carry is clear
 35698                                  	;jc	short $MIF20
 35699                                  	
 35700 0000555D 5F                      	pop	di				;;AN000;; Restore REGS
 35701 0000555E 07                      	pop	es				;;AN000;;
 35702 0000555F 5A                      	pop	dx				;;AN000;;
 35703 00005560 5B                      	pop	bx				;;AN000;;
 35704 00005561 58                      	pop	ax				;;AN000;;
 35705                                  	;jmp	short $MEN20
 35706                                  	; 15/04/2023
 35707 00005562 C3                      	retn
 35708                                  
 35709                                  	; 15/04/2023
 35710                                  ;$MIF20:
 35711                                  	;add	sp,10				;;AN000;;
 35712                                  	;stc					;;AN000;; Reset carry flag
 35713                                  ;$MEN20:
 35714                                  	;retn					;;AN000;;
 35715                                  
 35716                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35717                                  ;;
 35718                                  ;;  Proc Name:	$M_GET_DBCS_VEC
 35719                                  ;;
 35720                                  ;;  Function:	Get the DBCS vector and save it for later use
 35721                                  ;;
 35722                                  ;;  Inputs:	None
 35723                                  ;;
 35724                                  ;;  Outputs:	None
 35725                                  ;;
 35726                                  ;;  Regs Changed:
 35727                                  ;;
 35728                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35729                                  
 35730                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35731                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35732                                  $M_GET_DBCS_VEC:
 35733 00005563 50                      	push	ax				;;AN000;; Save character to check
 35734 00005564 56                      	push	si				;;AN000;;
 35735 00005565 1E                      	push	ds				;;AN000;;
 35736 00005566 B80063                  	mov	ax,6300h ;DOS_GET_DBCS_INFO	;;AN000;; DOS function to get DBSC environment
 35737 00005569 CD21                    	int	21h				;;AN000;; Get environment pointer
 35738 0000556B 1E                      	push	ds				;;AN000;; Get environment pointer
 35739 0000556C 07                      	pop	es				;;AN000;; Get environment pointer
 35740 0000556D 1F                      	pop	ds				;;AN000;; Get environment pointer
 35741 0000556E 7208                    	jc	short $MIF23
 35742                                  	
 35743 00005570 8936[3798]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC],si
 35744                                  	;mov	word [$M_RT+60],si		;;AN000;; Save DBCS Vector
 35745 00005574 8C06[3998]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC+2],es
 35746                                  	;mov	word [$M_RT+62],es		;;AN000;;
 35747                                  $MIF23:
 35748 00005578 5E                      	pop	si				;;AN000;;
 35749 00005579 58                      	pop	ax				;;AN000;; Retrieve character to check
 35750 0000557A C3                      	retn					;;AN000;; Return
 35751                                  
 35752                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35753                                  ;;
 35754                                  ;;  Proc Name:	SYSGETMSG
 35755                                  ;;
 35756                                  ;;  Function:	The GET service returns the segment, offset and size of the
 35757                                  ;;		message text to the caller based on a message number.
 35758                                  ;;		The GET function will not display the message thus assumes
 35759                                  ;;		caller will handle replaceable parameters.
 35760                                  ;;
 35761                                  ;;  Inputs:
 35762                                  ;;
 35763                                  ;;  Outputs:
 35764                                  ;;
 35765                                  ;;  Psuedocode:
 35766                                  ;;		Call $M_GET_MSG_ADDRESS
 35767                                  ;;		IF MSG_NUM exists THEN
 35768                                  ;;		   Set DS:SI = MSG_TXT_PTR + 1
 35769                                  ;;		   CARRY_FLAG = 0
 35770                                  ;;		ELSE
 35771                                  ;;		   CARRY_FLAG = 1
 35772                                  ;;		ENDIF
 35773                                  ;;
 35774                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35775                                  
 35776                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35777                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35778                                  
 35779                                  	utility_msg_class equ 0FFh ; 18/04/2023
 35780                                  
 35781                                  SYSGETMSG:
 35782                                  	;; Save registers needed later
 35783 0000557B 50                      	push	ax				;;AN000;; Save changed regs
 35784 0000557C 06                      	push	es				;;AN000;;
 35785 0000557D 57                      	push	di				;;AN000;;
 35786 0000557E 55                      	push	bp				;;AN000;;
 35787                                  
 35788 0000557F E81400                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 35789 00005582 720D                    	jc	short $MIF31
 35790                                  	
 35791 00005584 80FEFF                  	cmp	dh,utility_msg_class ; 0FFh	;;AN000;; Were utility messages requested?
 35792                                  	;clc					;;AN000;;
 35793 00005587 7404                    	je	short $MIF32			;;AN000;;
 35794                                  	; 15/06/2023
 35795 00005589 F8                      	clc	
 35796                                  
 35797 0000558A 06                      	push	es				;;AN000;;
 35798                                  	;pop	ds				;;AN000;;
 35799 0000558B EB01                    	jmp	short $MEN32
 35800                                  $MIF32:
 35801 0000558D 0E                      	push	cs				;;AN000;;			
 35802                                  	;pop	ds				;;AN000;;
 35803                                  $MEN32:
 35804                                  	; 07/04/2023
 35805 0000558E 1F                      	pop	ds
 35806 0000558F 89FE                    	mov	si,di				;;AN000;; Return message in DS:SI
 35807                                  $MIF31:
 35808 00005591 5D                      	pop	bp				;;AN000;; Restore changed regs
 35809 00005592 5F                      	pop	di				;;AN000;;
 35810 00005593 07                      	pop	es				;;AN000;;
 35811 00005594 58                      	pop	ax				;;AN000;;
 35812 00005595 C3                      	retn					;;AN000;; Return
 35813                                  
 35814                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35815                                  ;;
 35816                                  ;;	PROC NAME: $M_GET_MSG_ADDRESS
 35817                                  ;;
 35818                                  ;;	FUNCTION:  To scan thru classes to return pointer to the message header
 35819                                  ;;	INPUTS:    Access to $M_RES_ADDRESSES
 35820                                  ;;	OUTPUTS:   IF CX = 0 THEN Message was not found
 35821                                  ;;		   IF CX > 1 THEN ES:DI points to the specified message
 35822                                  ;;	REGS CHANGED: ES,DI,CX
 35823                                  ;;
 35824                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35825                                  
 35826                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35827                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35828                                  $M_GET_MSG_ADDRESS:
 35829 00005596 56                      	push	si				;;AN000;;
 35830 00005597 53                      	push	bx				;;AN000;;
 35831 00005598 31F6                    	xor	si,si				;;AN000;; Use SI as an index
 35832 0000559A 31C9                    	xor	cx,cx				;;AN000;; Use CX as an size
 35833                                  $MDO36:
 35834 0000559C 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Were utility messages requested?
 35835 0000559F 7508                    	jne	short $MIF37			;;AN000;; No
 35836                                  
 35837                                  	; 07/04/2023
 35838                                  	;;mov	di,[si+89CAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 35839 000055A1 8BBC[2798]              	mov	di,[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
 35840                                  	;mov	di,[si+$M_RT+44]		;;AN000;; Get address of class
 35841 000055A5 89FB                    	mov	bx,di				;;AN000;;
 35842 000055A7 EB21                    	jmp	short $MEN37
 35843                                  $MIF37:
 35844 000055A9 F6C602                  	test	dh,2 ; parse_err_class		;;AN000;; Were parse errors requested?
 35845 000055AC 7406                    	jz	short $MIF39
 35846                                  	
 35847                                  	; 07/04/2023
 35848                                  	;;les	di,[si+89AEh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 35849 000055AE C4BC[0B98]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]
 35850                                  	;les	di,[si+$M_RT+16]		;;AN000;; Get address of class
 35851                                  
 35852                                  	; 07/04/2023
 35853                                  	;mov	bx,es ; *			;;AN000;;
 35854 000055B2 EB14                    	jmp	short $MEN39
 35855                                  $MIF39:
 35856 000055B4 83F813                  	cmp	ax,19 ; $M_CRIT_LO		;;AN000;; Is this a critical error?
 35857 000055B7 720B                    	jnae	short $MIF41  ; jb short $MIF41 ;;AN000;;
 35858                                  
 35859 000055B9 83F827                  	cmp	ax,39 ; $M_CRIT_HI		;;AN000;;
 35860 000055BC 7706                    	jnbe	short $MIF41  ; ja short $MIF41 ;;AN000;;
 35861                                  
 35862                                  	; 07/04/2023
 35863                                  	;;les	di,[si+89BAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 35864 000055BE C4BC[1798]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]
 35865                                  	;les	di,[si+$M_RT+28]		;;AN000;; Get address of class
 35866                                  	
 35867                                  	; 07/04/2023
 35868                                  	;mov	bx,es ; *			;;AN000;;
 35869 000055C2 EB04                    	jmp	short $MEN41
 35870                                  $MIF41:
 35871                                  	; 07/04/2023
 35872                                  	;;les	di,[si+899Eh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 35873 000055C4 C4BC[FB97]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]
 35874                                  	;les	di,[si+$M_RT+0]			;;AN000;; Get address of class
 35875                                  	
 35876                                  	; 07/04/2023
 35877                                  	;mov	bx,es ; *			;;AN000;;
 35878                                  $MEN41:
 35879                                  $MEN39:
 35880                                  	; 07/04/2023
 35881 000055C8 8CC3                    	mov	bx,es ; *
 35882                                  $MEN37:						;;AN000;;
 35883 000055CA 83FBFF                  	cmp	bx,-1 ; $M_TERMINATING_FLAG	;;AN000;; Are we finished all classes?
 35884 000055CD 7515                    	jne	short $MIF46			;;AN000;; No
 35885                                  
 35886 000055CF 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Was it a UTILITY class?
 35887 000055D2 7503                    	jne	short $MIF47			;;AN000;; No
 35888 000055D4 F9                      	stc		     ; **-		;;AN000;; Set the carry flag
 35889                                  	; 07/04/2023
 35890                                  	;jmp	short $MEN47 ; **-
 35891 000055D5 EB1B                    	jmp	short $MEN36 ; **-
 35892                                  $MIF47:
 35893 000055D7 A3[4398]                	mov	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],ax
 35894                                  	;mov	[$M_RT+72],ax			;;AN000;; Save message number
 35895 000055DA B8FFFF                  	mov	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN000;; Set special message number
 35896 000055DD BD0100                  	mov	bp,1 ; $M_ONE_REPLACE		;;AN000;; Set one replace in message
 35897 000055E0 31F6                    	xor	si,si				;;AN000;; Reset the SI index to start again
 35898                                  	; 28/04/2023
 35899                                  	; 07/04/2023
 35900                                  	;clc	; **+				;;AN000;;
 35901                                  ;$MEN47:
 35902                                  	;jmp	short $MEN46 ; ***
 35903 000055E2 EB0A                    	jmp	short $MEN47 ; ***
 35904                                  $MIF46:
 35905                                  	;cmp	bx,0 ; $M_CLASS_NOT_EXIST	;;AN000;; Does this class exist?
 35906 000055E4 21DB                    	and	bx,bx ; 0 ?
 35907 000055E6 7403                    	jz	short $MIF51			;;AN000;; No
 35908                                  	
 35909 000055E8 E84D00                  	call	$M_FIND_SPECIFIED_MSG		;;AN000;; Try to find the message
 35910                                  $MIF51:
 35911 000055EB 83C604                  	add	si,4 ; $M_ADDR_SZ_FAR 		;;AN000;; Get next class
 35912                                  	; 07/04/2023
 35913                                  	;clc					;;AN000;;
 35914                                  ;$MEN46:
 35915                                  	;jc	short $MEN36 ; **- ; **+	;;AN000;;
 35916                                  $MEN47:	; 07/04/2023	; **+
 35917 000055EE 09C9                    	or	cx,cx				;;AN000;; Was the message found?
 35918                                  	;jnz	short $MXL2			;;AN000;; Yes
 35919                                  	;jmp	short $MDO36
 35920                                  	; 07/04/2023
 35921 000055F0 74AA                    	jz	short $MDO36	
 35922                                  $MXL2:
 35923                                  $MEN36:
 35924 000055F2 9C                      	pushf 					;;AN006;; Save the flag state
 35925                                  	
 35926 000055F3 80FE01                  	cmp	dh,1 ; EXT_ERR_CLASS		;;AN006;; Was an extended error requested?
 35927                                  	;jne	short $MIF56			;;AN006;; No
 35928                                  	; 28/04/2023
 35929 000055F6 752A                    	jne	short $M_MYRET	
 35930                                  
 35931 000055F8 52                      	push	dx				;;AN006;; Save all needed registers
 35932 000055F9 55                      	push	bp				;;AN006;;
 35933 000055FA 51                      	push	cx				;;AN006;;
 35934 000055FB 06                      	push	es				;;AN006;;
 35935 000055FC 57                      	push	di				;;AN006;;
 35936 000055FD 50                      	push	ax				;;AN006;;
 35937                                  
 35938 000055FE B80005                  	mov	ax,500h ; IFSFUNC_INSTALL_CHECK	;;AN006;; Check if IFSFUNC is installed
 35939 00005601 CD2F                    	int	2Fh				;;AN006;;
 35940                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
 35941                                  		; Return: AL = 00h not installed, OK to install
 35942                                  		; 01h not installed, can't install
 35943                                  		; FFh installed
 35944                                  
 35945 00005603 3CFF                    	cmp	al,0FFh ; IFSFUNC_INSTALLED	;;AN006;; Is it installed?
 35946 00005605 58                      	pop	ax				;;AN006;; Restore msg number
 35947 00005606 7513                    	jne	short $MIF57			;;AN006;; No (not installed)
 35948                                  
 35949 00005608 89C3                    	mov	bx,ax				;;AN006;; BX is the extended error number
 35950 0000560A B80205                  	mov	ax,502h ; IFS_GET_ERR_TEXT	;;AN006;; AX is the muliplex number
 35951 0000560D CD2F                    	int	2Fh				;;AN006;; Call IFSFUNC
 35952                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER
 35953                                  
 35954                                  	;jmp	short $MEN57			;;AN006;;
 35955                                  	; 28/04/2023
 35956 0000560F 720B                    	jc	short $MEN57
 35957                                  $MIF60:
 35958 00005611 83C406                  	add	sp,6				;;AN006;; Throw away old pointer
 35959 00005614 E81200                  	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 35960                                  $MEN60:
 35961 00005617 5D                      	pop	bp				;;AN006;; Restore other Regs
 35962 00005618 5A                      	pop	dx				;;AN006;;
 35963                                  $MIF56:
 35964                                  	; 07/04/2023
 35965                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 35966 00005619 EB07                    	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 35967                                  
 35968                                  $MIF57:
 35969 0000561B F9                      	stc					;;AN006;; Carry conditon
 35970                                  $MEN57:
 35971                                  	; 28/04/2023
 35972                                  	;jnc	short $MIF60			;;AN006;;
 35973                                  
 35974 0000561C 5F                      	pop	di				;;AN006;;
 35975 0000561D 07                      	pop	es				;;AN006;; Restore old pointer
 35976 0000561E 59                      	pop	cx				;;AN006;;
 35977 0000561F EBF6                    	jmp	short $MEN60
 35978                                  
 35979                                  ;$MIF60:
 35980                                  ;	add	sp,6				;;AN006;; Throw away old pointer
 35981                                  ;	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 35982                                  ;$MEN60:
 35983                                  ;	pop	bp				;;AN006;; Restore other Regs
 35984                                  ;	pop	dx				;;AN006;;
 35985                                  ;$MIF56:
 35986                                  ;	; 07/04/2023
 35987                                  ;	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 35988                                  ;	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 35989                                  
 35990                                  ; 07/04/2023
 35991                                  ; ---------------------------
 35992                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 35993                                  ; ---------------------------
 35994                                  	; $M_POPF macro
 35995                                  	;jmp	short $+3
 35996                                  m_popf_iret:
 35997 00005621 CF                      	iret
 35998                                  $M_MYRET:
 35999 00005622 0E                      	push	cs
 36000 00005623 E8FBFF                  	call	m_popf_iret
 36001                                  	;;; end macro	
 36002                                  ; ---------------------------
 36003                                  
 36004 00005626 5B                      	pop	bx				;;AN000;;
 36005 00005627 5E                      	pop	si				;;AN000;;
 36006 00005628 C3                      	retn					;;AN000;; Return ES:DI pointing to the message
 36007                                  
 36008                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36009                                  
 36010                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36011                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36012                                  $M_SET_LEN_IN_CX:			
 36013 00005629 57                      	push	di				;;AN006;; Save position
 36014 0000562A 50                      	push	ax				;;AN006;;
 36015 0000562B B9FFFF                  	mov	cx,-1 ; 65535 ; 0FFFFh		;;AN006;; Set CX for decrements
 36016 0000562E 30C0                    	xor	al,al				;;AN006;; Prepare compare register
 36017 00005630 F2AE                    	repne	scasb				;;AN006;; Scan for zero
 36018 00005632 F7D1                    	not	cx				;;AN006;; Change decrement into number
 36019 00005634 49                      	dec	cx				;;AN006;; Don't include the zero
 36020 00005635 58                      	pop	ax				;;AN006;;
 36021 00005636 5F                      	pop	di				;;AN006;; Restore position
 36022 00005637 C3                      	retn					;;AN006;;
 36023                                  
 36024                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36025                                  ;;
 36026                                  ;;	PROC NAME: $M_FIND_SPECIFIED_MSG
 36027                                  ;;
 36028                                  ;;	FUNCTION:  To scan thru message headers until message is found
 36029                                  ;;	INPUTS:    ES:DI points to beginning of msg headers
 36030                                  ;;		   CX contains the number of messages in class
 36031                                  ;;		   DH contains the message class
 36032                                  ;;	OUPUTS:    IF CX = 0 THEN Message was not found
 36033                                  ;;		   IF CX > 1 THEN ES:DI points to header of specified message
 36034                                  ;;
 36035                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36036                                  
 36037                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36038                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36039                                  $M_FIND_SPECIFIED_MSG:
 36040 00005638 83FB01                  	cmp	bx,1				;;AN004;; Do we have an address to CALL?
 36041 0000563B 751F                    	jne	short $MIF64
 36042 0000563D 833E[2398]FF            	cmp	word [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1
 36043                                  	;cmp	word [$M_RT+40],-1 ; 0FFFFh	;;AN004;; Do we have an address to CALL?
 36044                                  	; 15/06/2023
 36045 00005642 7418                    	je	short $MIF64
 36046                                  
 36047 00005644 83F8FF                  	cmp	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN004;; Are we displaying a default Ext Err?
 36048 00005647 750B                    	jne	short $MIF65
 36049                                  	
 36050 00005649 50                      	push	ax				;;AN004;; Reset the special message number
 36051 0000564A A1[4398]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 36052                                  	;mov	ax,[$M_RT+72]			;;AN004;; Get the old message number
 36053 0000564D FF1E[2398]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 36054                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 36055 00005651 58                      	pop	ax				;;AN004;; Reset the special message number
 36056                                  	; 28/04/2023
 36057 00005652 EB04                    	jmp	short $MEN65
 36058                                  	; 18/04/2023
 36059                                  	;jmp	short $MEN64
 36060                                  $MIF65:
 36061 00005654 FF1E[2398]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 36062                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 36063                                  $MEN65:
 36064                                  	; 28/04/2023
 36065 00005658 7344                    	jnc	short $MIF75
 36066                                  	;
 36067 0000565A EB19                    	jmp	short $MEN64 ; $MDO76		;;AN004;;
 36068                                  $MIF64:
 36069 0000565C 31C9                    	xor	cx,cx				;;AN002;; CX = 0 will allow us to
 36070 0000565E 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 36071 00005661 7406                    	je	short $MIF69
 36072                                  	
 36073 00005663 268A4D03                	mov	cl,[es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 36074                                  	;mov	cl,[es:di+3]			;;AN001;; Get number of messages in class
 36075 00005667 EB09                    	jmp	short $MEN69
 36076                                  $MIF69:
 36077                                  	;cmp	[cs:di+$M_CLASS_ID.$M_CLS_ID],dh
 36078                                  	;cmp	[cs:di+0],dh
 36079 00005669 2E3835                  	cmp	[cs:di],dh			;;AN002;; Check if class still exists at
 36080 0000566C 7504                    	jne	short $MIF71
 36081                                  
 36082 0000566E 2E8A4D03                	mov	cl,[cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 36083                                  	;mov	cl,[cs:di+3]			;;AN000;; Get number of messages in class
 36084                                  $MIF71:						;;AN001;;
 36085                                  $MEN69:
 36086 00005672 83C704                  	add	di,$M_CLASS_ID_SZ ; add di,4	;;AN000;; Point past the class header
 36087                                  	; 02/05/2023
 36088                                  	;stc					;;AN004;; Flag that we haven't found anything yet
 36089                                  $MEN64:
 36090                                  	;jnc	short $MIF75
 36091                                  	; 28/04/2023
 36092                                  	; (or instruction clears carry flag)
 36093                                  	;clc					;;AN004;; No, reset carry
 36094                                  $MDO76:
 36095 00005675 09C9                    	or	cx,cx				;;AN000;; Do we have any to check?
 36096 00005677 7417                    	jz	short $MEN76
 36097                                  
 36098 00005679 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 36099 0000567C 7405                    	je	short $MIF78
 36100                                  
 36101                                  	;cmp	ax,[es:di+$M_ID.$M_NUM]		;;AN001;; Is this the message requested?
 36102 0000567E 263B05                  	cmp	ax,[es:di]
 36103 00005681 EB03                    	jmp	short $MEN78
 36104                                  $MIF78:
 36105                                  	;cmp	ax,[cs:di+$M_ID.$M_NUM]		;;AN000;; Is this the message requested?
 36106 00005683 2E3B05                  	cmp	ax,[cs:di]
 36107                                  $MEN78:
 36108                                  	;jne	short $MIF76
 36109                                  	;jmp	short $MSR76
 36110                                  	; 07/04/2023
 36111 00005686 740B                    	je	short $MSR76 ; *
 36112                                  $MIF76:
 36113 00005688 49                      	dec	cx				;;AN000;; No, well do we have more to check?
 36114 00005689 7405                    	jz	short $MEN76
 36115                                  
 36116 0000568B 83C704                  	add	di,$M_ID_SZ ; add di,4		;;AN000;; Yes, skip past msg header
 36117 0000568E EBE5                    	jmp	short $MDO76			;;AN000;;
 36118                                  $MEN76:
 36119 00005690 F9                      	stc					;;AN000;;
 36120                                  ;$MSR76:	; 07/04/2023
 36121                                  	;jc	short $MIF86			;;AN000;;
 36122                                  	; 07/04/2023
 36123                                  	;jc	short $MIF91
 36124 00005691 EB11                    	jmp	short $MIF91 ;*
 36125                                  $MSR76:	; 07/04/2023 ; *	
 36126 00005693 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;; Yes, is it a utility message?
 36127                                  	; 07/04/2023
 36128                                  	;clc					;;AN001;;
 36129 00005696 7502                    	jne	short $MIF87
 36130                                  
 36131 00005698 0E                      	push	cs				;;AN000;;
 36132 00005699 07                      	pop	es				;;AN000;; Return ES:DI pointing to the message
 36133                                  $MIF87:
 36134                                  	;add	di,[es:di+2]
 36135 0000569A 26037D02                	add	di,[es:di+$M_ID.$M_TXT_PTR]     ;;AN000;; Prepare ES:DI pointing to the message
 36136                                  $MIF86:
 36137                                  ;$MIF75:
 36138                                  	; 02/05/2023
 36139                                  	;jc	short $MIF91
 36140                                  $MIF75:	; 28/04/2023
 36141 0000569E 30ED                    	xor	ch,ch				;;AN000;;
 36142 000056A0 268A0D                  	mov	cl,[es:di]			;;AN000;; Move size into CX
 36143 000056A3 47                      	inc	di				;;AN000;; Increment past length
 36144                                  $MIF91:
 36145 000056A4 C606[3D98]00            	mov	byte [$M_RT+$M_RES_ADDRS.$M_SIZE],0 ; $M_NULL
 36146                                  	;mov	byte [$M_RT+66],0		;;AN004;; Reset variable
 36147 000056A9 C3                      	retn					;;AN000;; Return
 36148                                  
 36149                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36150                                  ;;
 36151                                  ;;  Proc Name:	SYSDISPMSG
 36152                                  ;;
 36153                                  ;;  Function:	The DISPLAY service will output a defined message to a handle
 36154                                  ;;		requested by the caller. It also provides function to display
 36155                                  ;;		messages when handles are not applicable (ie. DOS function calls
 36156                                  ;;		00h to 0Ah) Replaceable parameters are allowed and are
 36157                                  ;;		defined previous to entry.
 36158                                  ;;
 36159                                  ;;		It is assumes that a PRELOAD function has already determined
 36160                                  ;;		the addressibilty internally to the message retriever services.
 36161                                  ;;  Inputs:
 36162                                  ;;
 36163                                  ;;  Outputs:
 36164                                  ;;
 36165                                  ;;  Psuedocode:
 36166                                  ;;		Save registers needed later
 36167                                  ;;		Get address of the message requested
 36168                                  ;;		IF Message number exists THEN
 36169                                  ;;		  IF replacable parameters were specified THEN
 36170                                  ;;		     Display message with replacable parms
 36171                                  ;;		  ELSE
 36172                                  ;;		     Display string without replacable parms
 36173                                  ;;		  ENDIF
 36174                                  ;;		  IF character input was requested THEN
 36175                                  ;;		     Wait for character input
 36176                                  ;;		  ENDIF
 36177                                  ;;		  Clear CARRY FLAG
 36178                                  ;;		ELSE
 36179                                  ;;		   Set CARRY FLAG
 36180                                  ;;		ENDIF
 36181                                  ;;		Return
 36182                                  ;;
 36183                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36184                                  
 36185                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36186                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5307h
 36187                                  	;
 36188                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36189                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5ACBh
 36190                                  SYSDISPMSG:
 36191                                  	;; Save registers and values needed later
 36192 000056AA 50                      	push	ax				;;AN000;; Save changed REGs
 36193 000056AB 53                      	push	bx				;;AN000;;
 36194 000056AC 51                      	push	cx				;;AN000;;
 36195 000056AD 55                      	push	bp				;;AN000;;
 36196 000056AE 57                      	push	di				;;AN000;; Save pointer to input buffer (offset)
 36197 000056AF 06                      	push	es				;;AN000;; Save pointer to input buffer (segment)
 36198 000056B0 52                      	push	dx				;;AN000;; Save Input/Class request
 36199                                  
 36200 000056B1 89CD                    	mov	bp,cx				;;AN000;; Use BP to hold replace count
 36201 000056B3 891E[3B98]              	mov	[$M_RT+$M_RES_ADDRS.$M_HANDLE],bx
 36202                                  	;mov	[$M_RT+64],bx			;;AN000;; Save handle
 36203 000056B7 8836[4098]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS],dh
 36204                                  	;mov	[$M_RT+69],dh			;;AN004;; Save class
 36205                                  
 36206                                  	;; Get address of the message requested
 36207 000056BB E8D8FE                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 36208                                  
 36209 000056BE 09C9                    	or	cx,cx				;;AN000;; Was message found?
 36210 000056C0 7427                    	jz	short $MIF93
 36211                                  						;;AN000;; Yes, Message address in ES:DI
 36212                                  	
 36213                                  	;; Test if replacable parameters were specified
 36214 000056C2 09ED                    	or	bp,bp				;;AN000;; Were replacable parameters requested
 36215 000056C4 7505                    	jnz	short $MIF94
 36216                                  
 36217                                  	;; Display string without replacable parms
 36218 000056C6 E82800                  	call	$M_DISPLAY_STRING		;;AN000;; No, great . . . Display message
 36219 000056C9 EB03                    	jmp	short $MEN94
 36220                                  $MIF94:
 36221                                  	;; Display message with replacable parms
 36222 000056CB E88B01                  	call	$M_DISPLAY_MESSAGE		;;AN000;; Display the message with substitutions
 36223                                  $MEN94:
 36224 000056CE 7214                    	jc	short $MIF97
 36225 000056D0 5A                      	pop	dx				;;AN000;; Get Input/Class request
 36226 000056D1 E8FC00                  	call	$M_ADD_CRLF 			;;AN004;; Check if we need to add the CR LF chars.
 36227 000056D4 07                      	pop	es				;;AN000;; Get location of input buffer (if specified)
 36228 000056D5 5F                      	pop	di				;;AN000;;
 36229                                  	
 36230                                  ; 15/06/2023 - MSDOS 5.0
 36231                                  ;	;jmp	short $MEN97 ; ***
 36232                                  ;	; 08/04/2023
 36233                                  ;	;jmp	short $MEN93 ; **
 36234                                  ;
 36235                                  ;	; 08/04/2023
 36236                                  ;;$MEN93:
 36237                                  ;	jc	short $MIF104
 36238                                  
 36239                                  	; 15/06/2023 Retro DOS v4.2 COMMAND.COM
 36240                                   	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5AF7h
 36241                                  
 36242                                  	; MSDOS 6.0 (MSDOS 6.22)
 36243                                  	; Test if character input was requested	;;AN000;;
 36244 000056D6 08D2                    	or	dl,dl
 36245 000056D8 7403                    	jz	short $MIF98
 36246                                  	;jz	short $MEN98 ; *
 36247                                  
 36248 000056DA E88E05                  	call	$M_WAIT_FOR_INPUT	; MSDOS 6.0 (to 6.22)
 36249                                  	; cf = 0 ; *
 36250                                  $MIF98:
 36251                                  	;jmp	short $MEN97
 36252                                  	;;jc	short $MIF104 ; *
 36253                                  $MEN98:
 36254                                  ;$MEN97:
 36255 000056DD 5D                      	pop	bp				;;AN000;;
 36256 000056DE 59                      	pop	cx				;;AN000;;
 36257 000056DF 5B                      	pop	bx				;;AN000;;
 36258                                  	; 15/06/2023
 36259                                  	;pop	ax	; MSDOS 5.0		;;AN000;;
 36260 000056E0 83C402                  	add	sp,2	; MSDOS 6.0 (to 6.22)
 36261 000056E3 C3                      	retn
 36262                                   
 36263                                  $MIF97:
 36264                                  	; 08/04/2023
 36265                                  	;add	sp,6				;;AN000;;
 36266                                  	;stc					;;AN000;; Reset carry flag
 36267                                  ;$MEN97: ; ***
 36268                                  	;jmp	short $MEN93
 36269                                  	; 08/04/2023
 36270                                  	;jmp	short $MIF104
 36271                                  	; 08/04/2023
 36272 000056E4 83C40E                  	add	sp,14 ; 6+8
 36273 000056E7 F9                      	stc
 36274 000056E8 C3                      	retn
 36275                                  $MIF93:
 36276                                  	; 08/04/2023 - 15/06/2023
 36277                                  	; (wrong pops ?) - correct order: pop dx, pop es, pop di -
 36278                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:533Bh
 36279                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5B06h
 36280 000056E9 07                      	pop	es				;;AN000;; Get pointer to input buffer (segment)
 36281 000056EA 5F                      	pop	di				;;AN000;; Get base pointer to first sublist (offset)
 36282 000056EB 5A                      	pop	dx				;;AN000;; Get base pointer to first sublist (segment)
 36283                                  	;stc	; * 				;;AN000;; Set carry flag
 36284                                  	; 08/04/2023
 36285                                  	;jmp	short $MIF104 ; *
 36286                                  
 36287                                  ;$MEN93: ; **
 36288                                  ;	jc	short $MIF104
 36289                                  ;$MEN97: ; 08/04/2023
 36290                                  ;	pop	bp				;;AN000;;
 36291                                  ;	pop	cx				;;AN000;;
 36292                                  ;	pop	bx				;;AN000;;
 36293                                  ;	pop	ax				;;AN000;;
 36294                                  ;	;jmp	short $MEN104
 36295                                  ;	; 08/04/2023
 36296                                  ;	retn
 36297                                  
 36298                                  $MIF104: ; *
 36299 000056EC 83C408                  	add	sp,8				;;AN000;; Eliminate from stack
 36300 000056EF F9                      	stc					;;AN000;;
 36301                                  $MEN104:
 36302 000056F0 C3                      	retn					;;AN000;; Return
 36303                                  
 36304                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36305                                  ;;
 36306                                  ;;	PROC NAME: $M_DISPLAY_STRING
 36307                                  ;;
 36308                                  ;;	FUNCTION:  Will display or write string
 36309                                  ;;	INPUTS:    ES:DI points to beginning of message
 36310                                  ;;		   CX contains the length of string to write (if applicable)
 36311                                  ;;	OUTPUTS:   None
 36312                                  ;;	REGS Revised: None
 36313                                  ;;
 36314                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36315                                  
 36316                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36317                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36318                                  $M_DISPLAY_STRING:
 36319 000056F1 50                      	push	ax				;;AN000;;
 36320 000056F2 53                      	push	bx				;;AN000;;
 36321 000056F3 52                      	push	dx				;;AN000;;
 36322 000056F4 8B1E[3B98]              	mov	bx,[$M_RT+$M_RES_ADDRS.$M_HANDLE]
 36323                                  	;mov	bx,[$M_RT+64]			;;AN000;; Retrieve handle
 36324                                  	
 36325 000056F8 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE 	;;AN000;; Was there a handle specified?
 36326 000056FB 7505                    	jne	short $MIF107
 36327                                  
 36328 000056FD E82600                  	call	$M_DISPLAY_$_STRING		;;AN000;; No, display $ terminated string
 36329 00005700 EB03                    	jmp	short $MEN107
 36330                                  $MIF107:
 36331 00005702 E86E00                  	call	$M_DISPLAY_H_STRING		;;AN000;; Yes, display string to handle
 36332                                  $MEN107:
 36333 00005705 730D                    	jnc	short $MIF110
 36334                                  	
 36335 00005707 B459                    	mov	ah,59h	; DOS_GET_EXT_ERROR	;;AN000;;
 36336                                  	;mov	bx,0	; DOS_GET_EXT_ERROR_BX	;;AN000;; Get extended error
 36337                                  	; 08/04/2023
 36338 00005709 31DB                    	xor	bx,bx
 36339 0000570B CD21                    	int	21h				;;AN000;;
 36340                                  		; DOS - 3+ - GET EXTENDED ERROR CODE
 36341                                  		; BX = version code (0000h for DOS 3.x)
 36342 0000570D 30E4                    	xor	ah,ah				;;AN000;; Clear AH
 36343                                  $MEN110: ; 08/04/2023 ; ***
 36344 0000570F 83C406                  	add	sp,6				;;AN000;; Clean up stack
 36345 00005712 F9                      	stc					;;AN000;; Flag that there was an error
 36346                                  	;jmp	short $MEN110 ; ****
 36347                                  	; 08/04/2023
 36348 00005713 C3                      	retn
 36349                                  $MIF110:
 36350                                  	;cmp	bx,$M_NO_HANDLE
 36351 00005714 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE	;;AN000;; Was there a handle specified?
 36352 00005717 7409                    	je	short $MIF112 ; *  ; cf = 0
 36353 00005719 39C8                    	cmp	ax,cx				;;AN001;; Was it ALL written?
 36354 0000571B 7405                    	je	short $MIF113 ; ** ; cf = 0
 36355 0000571D E8A700                  	call	$M_GET_EXT_ERR_39		;;AN001;; Set Extended error
 36356                                  	;add	sp,6				;;AN001;; Clean up stack
 36357                                  	;stc					;;AN001;; Flag that there was an error
 36358                                  	; 08/04/2023
 36359 00005720 EBED                    	jmp	short $MEN110 ; ***
 36360                                  	; 08/04/2023
 36361                                  ;$MIF112:
 36362                                  ;$MEN110: ; ****
 36363                                  	;jc	short $MIF117
 36364                                  $MIF112: ; 08/04/2023	; *
 36365                                  $MIF113:	; **
 36366 00005722 5A                      	pop	dx				;;AN000;; Restore regs
 36367 00005723 5B                      	pop	bx				;;AN000;;
 36368 00005724 58                      	pop	ax				;;AN000;;
 36369                                  $MIF117:
 36370 00005725 C3                      	retn
 36371                                  
 36372                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36373                                  ;;
 36374                                  ;;	PROC NAME: $M_DISPLAY_$_STRING
 36375                                  ;;
 36376                                  ;;	FUNCTION:  Will display a $ terminated string
 36377                                  ;;	INPUTS:    ES:DI points to beginning of message text (not the length)
 36378                                  ;;	OUTPUTS:   None
 36379                                  ;;	REGS USED: AX,DX
 36380                                  ;;
 36381                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36382                                  
 36383                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36384                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36385                                  $M_DISPLAY_$_STRING:
 36386 00005726 1E                      	push	ds				;;AN000;;
 36387 00005727 06                      	push	es				;;AN000;;
 36388 00005728 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 36389                                  
 36390                                  	; 08/04/2023
 36391 00005729 B402                    	mov	ah,2 ; DOS_DISP_CHAR
 36392                                  
 36393                                  	;cmp	cx,$M_SINGLE_CHAR		;;AN000;; Is this a single character?
 36394 0000572B 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR
 36395 0000572E 7518                    	jne	short $MIF119			;;AN000;; No
 36396                                  	
 36397                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 36398 00005730 268A15                  	mov	dl,[es:di]			;;AN000;; Get the character
 36399 00005733 CD21                    	int	21h				;;AN000;; Write character
 36400                                  		; DOS - DISPLAY OUTPUT
 36401                                  		; DL = character to send to standard output
 36402 00005735 1F                      	pop	ds				;;AN000;;
 36403 00005736 88D0                    	mov	al,dl				;;AN000;; Get the character in AL
 36404 00005738 E8AC00                  	call	$M_IS_IT_DBCS 			;;AN000;; Is this the first byte of a DB character
 36405 0000573B 1E                      	push	ds				;;AN000;;
 36406 0000573C 06                      	push	es				;;AN000;;
 36407 0000573D 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 36408 0000573E 7316                    	jnc	short $MIF120 ; *
 36409                                  
 36410 00005740 268A5501                	mov	dl,[es:di+1]			;;AN000;; Get the next character
 36411 00005744 CD21                    	int	21h				;;AN000;; Write character
 36412                                  		; DOS - DISPLAY OUTPUT
 36413                                  		; DL = character to send to standard output
 36414                                  	; 08/04/2023
 36415                                  	;clc					;;AN000;; Clear the DBCS indicator
 36416                                  ;$MIF120:
 36417 00005746 EB0D                    	jmp	short $MEN119
 36418                                  $MIF119:
 36419                                  	; 08/04/2023
 36420                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 36421                                  ;$MDO123:
 36422 00005748 09C9                    	or	cx,cx				;;AN002;; Are there any left to display?
 36423                                  	;jz	short $MEN123
 36424                                  	; 18/04/2023
 36425 0000574A 740A                    	jz	short $MIF120 ; cf = 0
 36426                                  $MDO123: ; 08/04/2023
 36427 0000574C 268A15                  	mov	dl,[es:di]			;;AN002;; Get the character
 36428 0000574F CD21                    	int	21h				;;AN002;; Display the character
 36429                                  		; DOS - DISPLAY OUTPUT
 36430                                  		; DL = character to send to standard output
 36431 00005751 47                      	inc	di				;;AN002;; Set pointer to next character
 36432 00005752 49                      	dec	cx				;;AN002;; Count this character
 36433 00005753 75F7                    	jnz	short $MDO123
 36434                                  ;$MEN123:
 36435                                  $MEN119:
 36436 00005755 F8                      	clc					;;AN000;;Char functions used don't return carry as error
 36437                                  $MIF120: ; 08/04/2023 ; *
 36438 00005756 1F                      	pop	ds				;;AN000;;
 36439 00005757 C3                      	retn
 36440                                  
 36441                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36442                                  ;;
 36443                                  ;; Scan_ctrlZ: This routine looks through the string to be printed and 
 36444                                  ;; truncates it at the Ctrl-Z if any present.
 36445                                  ;;
 36446                                  ;;	ENTRY:	ds:dx = String to be displayed
 36447                                  ;;		cx = number of chars to be displayed
 36448                                  ;;
 36449                                  ;;	EXIT:	cx = number of chars to be displayed
 36450                                  ;;
 36451                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36452                                  
 36453                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36454                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36455                                  scan_ctrlz:
 36456 00005758 57                      	push	di
 36457 00005759 50                      	push	ax
 36458 0000575A 06                      	push	es
 36459 0000575B 53                      	push	bx
 36460                                  
 36461 0000575C 89D7                    	mov	di,dx
 36462 0000575E 1E                      	push	ds
 36463 0000575F 07                      	pop	es   			;es:di points at string
 36464                                  
 36465 00005760 89CB                    	mov	bx,cx			;save current count
 36466                                  
 36467 00005762 B01A                    	mov	al,1Ah	; Ctrl-Z
 36468 00005764 FC                      	cld
 36469 00005765 F2AE                    	repne	scasb			;find first Ctrl-Z
 36470 00005767 7503                    	jnz	short noCtrlZ		;no CtrlZ found in string
 36471                                  
 36472 00005769 29CB                    	sub	bx,cx
 36473 0000576B 4B                      	dec	bx			;bx = new count to display
 36474                                  noCtrlZ:
 36475 0000576C 89D9                    	mov	cx,bx			;cx = actual display count
 36476                                  
 36477 0000576E 5B                      	pop	bx
 36478 0000576F 07                      	pop	es
 36479 00005770 58                      	pop	ax
 36480 00005771 5F                      	pop	di
 36481                                  $MIF127:	; 08/04/2023
 36482 00005772 C3                      	retn
 36483                                  
 36484                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36485                                  ;;
 36486                                  ;;	PROC NAME: $M_DISPLAY_H_STRING
 36487                                  ;;
 36488                                  ;;	FUNCTION:  Will display a string to a specified handle
 36489                                  ;;	INPUTS:    ES:DI points to beginning of message
 36490                                  ;;		   CX contains the number of bytes to write
 36491                                  ;;		   BX contains the handle to write to
 36492                                  ;;	OUPUTS:    None
 36493                                  ;;	REGS USED: AX,DX
 36494                                  ;;
 36495                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36496                                  
 36497                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36498                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36499                                  $M_DISPLAY_H_STRING:
 36500 00005773 31C0                    	xor	ax,ax			;;AN002;; Set number of bytes written to 0
 36501 00005775 09C9                    	or	cx,cx			;;AN002;; For performance, don't write if not necessary
 36502 00005777 74F9                    	jz	short $MIF127
 36503                                  	
 36504 00005779 1E                      	push	ds			;;AN000;;
 36505 0000577A 06                      	push	es			;;AN000;;
 36506 0000577B 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 36507                                  	
 36508 0000577C B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 36509 0000577E 89FA                    	mov	dx,di			;;AN000;; Pointer to data to write
 36510                                  
 36511 00005780 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR	;;AN000;; Is this a single character?
 36512 00005783 7528                    	jne	short $MIF128		;;AN000;; No
 36513                                  
 36514 00005785 CD21                    	int	21h			;;AN000;; Write character
 36515                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 36516                                  		; BX = file handle, CX = number of bytes to writ
 36517                                  
 36518 00005787 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 36519 00005788 50                      	push	ax			;;AN000;;
 36520 00005789 268A05                  	mov	al,[es:di] 		;;AN000;; Get the character
 36521 0000578C E85800                  	CALL    $M_IS_IT_DBCS		;;AN000;; Is this the first byte of a DB character
 36522 0000578F 58                      	pop	ax			;;AN000;;
 36523 00005790 1E                      	push	ds			;;AN000;;
 36524 00005791 06                      	push	es			;;AN000;;
 36525 00005792 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 36526 00005793 7306                    	jnc	short $MIF129
 36527                                  	
 36528 00005795 F8                      	clc				;;AN000;; Clear the DBCS indicator
 36529 00005796 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 36530 00005798 42                      	inc	dx			;;AN000;; Point to next character
 36531 00005799 CD21                    	int	21h			;;AN000;; Write character
 36532                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 36533                                  		; BX = file handle, CX = number of bytes to write, 
 36534                                  $MIF129:
 36535                                  ;SR;
 36536                                  ; If the single char happened to be a Ctrl-Z, the dos write would return
 36537                                  ;0 chars written making the caller think there was an error writing. To 
 36538                                  ;avoid this, we check if the single char was a Ctrl-Z and if so, return that
 36539                                  ;the char was written, thus fooling the caller.
 36540                                  
 36541 0000579B 9C                      	pushf				;save flags
 36542 0000579C 26803D1A                	cmp	byte [es:di],1Ah	;is char a Ctrl-Z?
 36543 000057A0 7502                    	jne	short m_popf_j		;no, continue
 36544                                  
 36545 000057A2 89C8                    	mov	ax,cx			;yes, fake as if it was written
 36546                                  m_popf_j:
 36547                                  	; 08/04/2023
 36548                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 36549 000057A4 EB01                    	jmp	short m_popf		;restore flags
 36550                                  
 36551                                  ; 07/04/2023
 36552                                  ; ---------------------------
 36553                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 36554                                  ; ---------------------------
 36555                                  	; $M_POPF macro
 36556                                  	;jmp	short $+3
 36557                                  intret:
 36558 000057A6 CF                      	iret
 36559                                  m_popf:
 36560 000057A7 0E                      	push	cs
 36561 000057A8 E8FBFF                  	call	intret
 36562                                  	;;; end macro	
 36563                                  ; ---------------------------
 36564                                  
 36565 000057AB EB18                    	jmp	short $MEN128
 36566                                  
 36567                                  $MIF128:
 36568                                  ;SR;
 36569                                  ; Prescan the string looking for Ctrl-Z. We terminate the message the moment 
 36570                                  ;we hit a Ctrl-Z. cx will contain the number of characters to be printed.
 36571                                  
 36572 000057AD 55                      	push	bp			; M007
 36573 000057AE 51                      	push	cx
 36574 000057AF E8A6FF                  	call	scan_ctrlz		;cx = count without Ctrl-Z
 36575 000057B2 89CD                    	mov	bp,cx			;store no ^Z count in bp ;M007
 36576 000057B4 59                      	pop	cx			;get old count back ;M007
 36577                                  	
 36578 000057B5 CD21                    	int	21h			;;AN000;; Write String at DS:SI to handle
 36579                                  	;jnc	short chk_count		;no error, adjust return count
 36580                                  	;jmp	short m_cnt_ok		;error, return with carry set;M007
 36581                                  	; 08/04/2023
 36582 000057B7 720B                    	jc	short m_cnt_ok 
 36583                                  ;M007
 36584                                  ; If we are writing to con and there is a Ctrl-Z in the string, the
 36585                                  ;return count will be much less and if this returns to the caller we can get
 36586                                  ;spurious error messages. We check here if the count returned is same as
 36587                                  ;original count or same as the count if we stop at Ctrl-Z. In the second
 36588                                  ;case, we fake it as if all bytes have been written. If the return count
 36589                                  ;does not match either count, then we had some other disk error (such as
 36590                                  ;insufficient disk space) and we pass it through
 36591                                  
 36592                                  chk_count:
 36593 000057B9 39C1                    	cmp	cx,ax			;have all bytes been written?;M007
 36594 000057BB 7407                    	je	short m_cnt_ok		;there was an error writing ;M007
 36595 000057BD 39C5                    	cmp	bp,ax			;count = Ctrl-Z count? ;M007
 36596 000057BF F8                      	clc				;no error either way ;M007
 36597 000057C0 7502                    	jne	short m_cnt_ok		;no, pass it through ;M007
 36598 000057C2 89C8                    	mov	ax,cx			;return old count ;M007
 36599                                  m_cnt_ok:				; M007
 36600 000057C4 5D                      	pop	bp			; M007
 36601                                  $MEN128:
 36602 000057C5 1F                      	pop	ds			;;AN000;;
 36603                                  ;$MIF127: ; 08/04/2023
 36604 000057C6 C3                      	retn
 36605                                  
 36606                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36607                                  ;;
 36608                                  ;;	PROC NAME: $M_GET_EXT_ERR_39
 36609                                  ;;
 36610                                  ;;	FUNCTION:  Will set registers for extended error #39
 36611                                  ;;	INPUTS:    None
 36612                                  ;;	OUPUTS:    AX,BX,CX set
 36613                                  ;;	REGS USED:
 36614                                  ;;
 36615                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36616                                  
 36617                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36618                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:542Dh
 36619                                  
 36620                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36621                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5BFAh
 36622                                  
 36623                                  $M_GET_EXT_ERR_39:
 36624 000057C7 B82700                  	mov	ax,27h ; EXT_ERR_39	;AN001; Set AX=39
 36625                                  	;mov	bx,(ERROR_CLASS_39 SHR 8) + ACTION_39
 36626 000057CA BB0400                  	mov	bx,4			;AN001; Set BH=1 BL=4
 36627                                  	;mov	ch,LOCUS_39		;AN001; Set CH=1
 36628 000057CD B501                    	mov	ch,1			;AN001;
 36629 000057CF C3                      	retn				;AN001;
 36630                                  
 36631                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36632                                  ;;
 36633                                  ;;	PROC NAME: $M_ADD_CRLF
 36634                                  ;;
 36635                                  ;;	FUNCTION:  Will decide whether to display a CRLF
 36636                                  ;;	INPUTS:    DX contains the Input/Class requested
 36637                                  ;;	OUTPUTS:   None
 36638                                  ;;	REGS Revised: CX,ES,DI
 36639                                  ;;
 36640                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36641                                  
 36642                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36643                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36644                                  $M_ADD_CRLF:
 36645                                  	;cmp	dh,0FFh
 36646 000057D0 80FEFF                  	cmp	dh,utility_msg_class	;;AN004;; Is it a utility message?
 36647 000057D3 7411                    	je	short $MIF134		;;AN004;; Yes
 36648 000057D5 F6C680                  	test	dh,80h; $M_NO_CRLF_MASK	;;AN004;; Are we to supress the CR LF?
 36649 000057D8 750C                    	jnz	short $MIF135
 36650                                  					;;AN004;; No	
 36651 000057DA 1E                      	push	ds			;;AN004;;
 36652 000057DB 07                      	pop	es			;;AN004;; Set ES to data segment
 36653 000057DC 8D3E[3E98]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_CRLF]
 36654                                  	;lea	di,[$M_RT+67]		;;AN004;; Point at CRLF message
 36655 000057E0 B90200                  	mov	cx,2 ; $M_CRLF_SIZE	;;AN004;; Set the message size
 36656 000057E3 E80BFF                  	call	$M_DISPLAY_STRING	;;AN004;; Display the CRLF
 36657                                  $MIF135:
 36658                                  $MIF134:
 36659 000057E6 C3                      	retn				;;AN004;; Return
 36660                                  
 36661                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36662                                  ;;
 36663                                  ;;	PROC NAME: $M_IS_IT_DBCS
 36664                                  ;;
 36665                                  ;;	FUNCTION:  Will decide whether character is Single or Double Byte
 36666                                  ;;	INPUTS:    AL contains the byte to be checked
 36667                                  ;;	OUTPUTS:   Carry flag = 0 if byte is NOT in DBCS range
 36668                                  ;;		   Carry flag = 1 if byte IS in DBCS range
 36669                                  ;;	REGS USED: All restored
 36670                                  ;;
 36671                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36672                                  
 36673                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36674                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36675                                  $M_IS_IT_DBCS:
 36676 000057E7 06                      	push	es			;;AN000;; Save Extra Segment register
 36677 000057E8 57                      	push	di			;;AN000;; Save DI register
 36678                                  
 36679 000057E9 C43E[3798]              	les	di,[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]
 36680                                  	;les	di,[$M_RT+60]		;;AN000;;
 36681 000057ED 09FF                    	or	di,di			;;AN000;; Was the DBCS vector set?
 36682 000057EF 7417                    	jz	short $MIF138		;;AN000;; No
 36683                                  $MDO139:
 36684 000057F1 26833D00                	cmp	word [es:di],0 ; $M_DBCS_TERM
 36685                                  					;;AN000;; Is this the terminating flag?
 36686 000057F5 F8                      	clc				;;AN000;;
 36687 000057F6 7410                    	jz	short $MEN139
 36688                                  					;;AN000;; No
 36689 000057F8 263A05                  	cmp	al,[es:di]		;;AN000;; Does the character fall in the DBCS range?
 36690 000057FB 7207                    	jnae	short $MIF141 ; jb	;;AN000;; No		
 36691 000057FD 263A4501                	cmp	al,[es:di+1]		;;AN000;; Does the character fall in the DBCS range?
 36692 00005801 7701                    	jnbe	short $MIF141 ; ja	;;AN000;; No
 36693                                  					;;AN000;; Yes
 36694 00005803 F9                      	stc				;;AN000;; Set carry flag
 36695                                  $MIF141:
 36696 00005804 47                      	inc	di			;;AN000;;
 36697 00005805 47                      	inc	di			;;AN000;;
 36698 00005806 EBE9                    	jmp	short $MDO139		;;AN000;; Go to next vector
 36699                                  $MEN139:
 36700                                  $MIF138:
 36701 00005808 5F                      	pop	di			;;AN000;; Restore DI register
 36702 00005809 07                      	pop	es			;;AN000;; Restore Extra Segment register
 36703 0000580A C3                      	retn				;;AN000;; Return
 36704                                  
 36705                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36706                                  ;;
 36707                                  ;;	PROC NAME: $M_CONVERT2ASC
 36708                                  ;;
 36709                                  ;;	FUNCTION: Convert a binary number to a ASCII string
 36710                                  ;;	INPUTS: DX:AX contains the number to be converted
 36711                                  ;;		$M_RT_DIVISOR contains the divisor
 36712                                  ;;	OUTPUTS: CX contains the number of characters
 36713                                  ;;		Top of stack  --> Last character
 36714                                  ;;				     . . .
 36715                                  ;;		Bot of stack  --> First character
 36716                                  ;;	REGS USED:
 36717                                  ;;
 36718                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36719                                  
 36720                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36721                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36722                                  $M_CONVERT2ASC:
 36723 0000580B 8F06[4198]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 36724                                  	;pop	word [$M_RT+70]			;;AN000;; Save Return Address
 36725                                  	
 36726 0000580F 31DB                    	xor	bx,bx				;;AN000;; Use BX as a swapping register
 36727 00005811 93                      	xchg	bx,ax				;;AN000;; Initialize - Low Word in BX
 36728 00005812 92                      	xchg	ax,dx				;;AN000;;	  - High Word in AX
 36729                                  $MDO145:					;;AN000;; DO UNTIL Low Word becomes zero
 36730 00005813 F736[4598]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 36731                                  	;div	word [$M_RT+74]			;;AN000;; Divide High Word by divisor
 36732 00005817 93                      	xchg	bx,ax				;;AN000;; Setup to divide Low Word using remainder
 36733                                  						;;AN000;;  and save reduced High Word in BX
 36734 00005818 F736[4598]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 36735                                  	;div	word [$M_RT+74]			;;AN000;; Divide Low Word by divisor
 36736                                  
 36737 0000581C 83FA09                  	cmp	dx,9				;;AN000;; Make a digit of the remainder
 36738 0000581F 7605                    	jna	short $MIF146			;;AN000;; 0-9
 36739 00005821 80C237                  	add	dl,55	; add dl,37h		;;AN000;; Make A to F ASCII
 36740 00005824 EB03                    	jmp	short $MEN146
 36741                                  $MIF146:
 36742 00005826 80C230                  	add	dl,'0'				;;AN000;; Make 0 to 9 ASCII
 36743                                  $MEN146:
 36744 00005829 52                      	push	dx				;;AN000;; Save the digit on the stack
 36745 0000582A 41                      	inc	cx				;;AN000;; Count that digit
 36746 0000582B 09C0                    	or	ax,ax				;;AN000;; Are we done?
 36747 0000582D 7504                    	jnz	short $MLL149			;;AN000;; No
 36748 0000582F 09DB                    	or	bx,bx				;;AN000;; AX and BX must be ZERO!!
 36749 00005831 741F                    	jz	short $MEN145 ; * ; ax = 0	;;AN000;; Yes
 36750                                  $MLL149:
 36751 00005833 83F903                  	cmp	cx,3 ; $M_FIRST_THOU		;;AN000;; Are we at the first thousands mark
 36752                                  ; 28/04/2023
 36753 00005836 740A                    	je	short $MIF153
 36754                                  ;	jne	short $MIF150			;;AN000;; No
 36755                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 36756                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 36757                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 36758                                  ;	;jne	short $MIF151
 36759                                  ;	; 09/04/2023
 36760                                  ;	jne	short $MEN150
 36761                                  ;						;;AN000;; Yes
 36762                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 36763                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 36764                                  ;	inc	cx				;;AN000;;
 36765                                  ;$MIF151:
 36766                                  ;	jmp	short $MEN150
 36767                                  
 36768                                  $MIF150:
 36769                                  	; 15/06/2023 (6)
 36770                                  	; MSDOS 6.0
 36771                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54ABh 
 36772                                  	;cmp	cx,6 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 36773                                  	; 15/06/2023 (7)
 36774                                  	; MSDOS 6.22
 36775                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C78h 
 36776 00005838 83F907                  	cmp	cx,7 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark	
 36777                                  
 36778                                  ; 28/04/2023
 36779 0000583B 7405                    	je	short $MIF153
 36780                                  ;	jne	short $MIF154			;;AN000;; No
 36781                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 36782                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 36783                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 36784                                  ;	;jne	short $MIF155			;;AN000;; No
 36785                                  ;	; 09/04/2023
 36786                                  ;	jne	short $MEN154
 36787                                  ;						;;AN000;; Yes				
 36788                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 36789                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 36790                                  ;	inc	cx				;;AN000;;
 36791                                  ;$MIF155:
 36792                                  ;	jmp	short $MEN154
 36793                                  
 36794                                  $MIF154:
 36795                                  	; 15/06/2023 (9)
 36796                                  	; MSDOS 6.0
 36797                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54BDh 
 36798                                  	;cmp	cx,9 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 36799                                  	; 15/06/2023 (11)
 36800                                  	; MSDOS 6.22
 36801                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C8Ah 
 36802 0000583D 83F90B                  	cmp	cx,11 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 36803 00005840 750B                    	jne	short $MIF158			;;AN000;; No  
 36804                                  ; 28/04/2023
 36805                                  $MIF153:
 36806                                  	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 36807 00005842 807C0A2C                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 36808                                  	;cmp	byte [si+0Ah],',' ; $M_COMMA
 36809 00005846 7505                    	jne	short $MIF159			;;AN000;; No
 36810                                  						;;AN000;; Yes
 36811 00005848 FF36[4E98]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 36812                                  	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 36813 0000584C 41                      	inc	cx				;;AN000;;
 36814                                  $MIF159:
 36815                                  $MIF158:
 36816                                  $MEN154:
 36817                                  $MEN150:					;;AN000;;
 36818 0000584D 93                      	xchg	ax,bx				;;AN000;; Setup to divide the reduced High Word
 36819                                  						;;AN000;;  and Revised Low Word
 36820 0000584E 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 36821                                  	; 28/04/2023
 36822 00005850 EBC1                    	jmp	short $MDO145
 36823                                  ;$MEN145:
 36824                                  	; 28/04/2023
 36825                                  	;xor	ax,ax				;;AN000;; Reset remainder
 36826                                  $MEN145: ; 09/04/2023 ; * ; ax = 0
 36827 00005852 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 36828 00005854 FF36[4198]              	push	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 36829                                  	;push	word [$M_RT+70]			;;AN000;; Restore Return Address
 36830 00005858 C3                      	retn					;;AN000;; Return
 36831                                  
 36832                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36833                                  ;;
 36834                                  ;;	PROC NAME: $M_DISPLAY_MESSAGE
 36835                                  ;;
 36836                                  ;;	FUNCTION:  Will display or write entire message (with replacable parameters)
 36837                                  ;;	INPUTS:    ES:DI points to beginning of message
 36838                                  ;;		   DS:SI points to first sublist structure in chain
 36839                                  ;;		   BX contains the handle to write to (if applicable)
 36840                                  ;;		   CX contains the length of string to write (before substitutions)
 36841                                  ;;		   BP contains the count of replacables
 36842                                  ;;
 36843                                  ;;	OUTPUTS:
 36844                                  ;;	REGS USED: All
 36845                                  ;;
 36846                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36847                                  
 36848                                  	; 10/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36849                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54DBh
 36850                                  
 36851                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36852                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:54DBh
 36853                                  
 36854                                  $M_DISPLAY_MESSAGE:
 36855                                  ; $DO						;;AN000;; Note: DS:SI -> message
 36856                                  $MDO165:
 36857 00005859 31D2                    	xor	dx,dx				;;AN000;; Set size = 0
 36858 0000585B 09C9                    	or	cx,cx				;;AN000;; Are we finished the message yet?
 36859                                  ;; $IF NZ					;;AN000;; No
 36860 0000585D 7421                    	jz	short $MIF166			;;AN000;; Yes
 36861 0000585F B425                    	mov	ah,"%"				;;AN000;; Prepare to scan for %
 36862 00005861 B000                    	mov	al,0				;;AN004;;
 36863                                  ;; $DO						;;AN000;; Scan through string until %
 36864                                  $MDO167:
 36865 00005863 263825                  	cmp	byte [es:di],ah			;;AN000;; Is this character NOT a %
 36866                                  ;; $LEAVE E,AND					;;AN000;; No
 36867 00005866 750A                    	jne	short $MLL168
 36868 00005868 26386501                	cmp	byte [es:di+1],ah		;;AN000;; Is the next character also a %
 36869                                  ;; $LEAVE NE,AND				;;AN000;; No
 36870 0000586C 7404                    	je	short $MLL168
 36871                                  
 36872 0000586E 38E0                    	cmp	al,ah				;;AN000;; Was the character before a %
 36873                                  ;; $LEAVE NE					;;AN000;; No, GREAT found it
 36874 00005870 750E                    	jne	short MEN167
 36875                                  $MLL168:
 36876 00005872 268A05                  	mov	al,[es:di]			;;AN004;; Yes, (to any of the above)
 36877 00005875 E86FFF                  	call	$M_IS_IT_DBCS			;;AN004;; Is this character the first part of a DBCS?
 36878                                  ;;; $IF C					;;AN004;; Yes
 36879 00005878 7301                    	jnc	short $MIF169
 36880 0000587A 47                      	inc	di				;;AN004;; Increment past second part
 36881                                  ;;; $ENDIF					;;AN004;;
 36882                                  $MIF169:
 36883 0000587B 47                      	inc	di				;;AN000;; Next character in string
 36884 0000587C 42                      	inc	dx				;;AN000;; Size = Size + 1
 36885 0000587D 49                      	dec	cx				;;AN000;; Decrement total size
 36886                                  ;; $ENDDO Z					;;AN000;; Exit scan if we're at the end of the line
 36887 0000587E 75E3                    	jnz	short $MDO167
 36888                                  $MEN167:
 36889                                  ;; $ENDIF					;;AN000;;
 36890                                  $MIF166:
 36891 00005880 56                      	push	si				;;AN000;; Save beginning of sublists
 36892 00005881 87CA                    	xchg	cx,dx				;;AN000;; Get size of message to display (tot sz in DX)
 36893 00005883 09ED                    	or	bp,bp				;;AN000;; Do we have any replacables to do?
 36894                                  ;; $IF NZ					;;AN000;; Yes
 36895 00005885 7431                    	jz	short $MIF173
 36896 00005887 4D                      	dec	bp				;;AN000;; Decrement number of replacables
 36897                                  
 36898                                  ;; Search through sublists to find applicable one
 36899                                  
 36900 00005888 833E[4398]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 36901                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 36902                                  ;;; $IF E					;;AN000;; No
 36903 0000588D 7529                    	jne	short $MIF174
 36904                                  ;;; $SEARCH					;;AN000;;
 36905                                  $MDO175:
 36906                                  	;mov	al,$M_SL.$M_S_ID ;$M_SL=DS:[SI]	;;AN000;; Get ID byte
 36907 0000588F 8A4406                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_ID]
 36908                                  	;mov	al,[si+6]
 36909 00005892 0430                    	add	al,30h				;;AN000;; Convert to ASCII
 36910                                  	; 28/04/2023					
 36911 00005894 263A4501                	cmp	al,[es:di+1]			;;AN000;; Is this the right sublist?
 36912                                  ;;; $EXITIF E					;;AN000;;
 36913                                  	;jne	short $MIF175
 36914                                  ;;; $ORELSE					;;AN000;; No
 36915                                  	;jmp	short $MSR175
 36916                                  	; 28/04/2023
 36917 00005898 741E                    	je	short $MSR175
 36918                                  $MIF175:
 36919 0000589A 3C30                    	cmp	al,30h ; $M_SPECIAL_CASE	;;AN000;; Does this sublist have ID = 0
 36920                                  ;;; $LEAVE E,AND				;;AN000;; Yes
 36921 0000589C 7504                    	jne	short $MLL178
 36922 0000589E 09D2                    	or	dx,dx				;;AN000;; Are we at the end of the message?
 36923                                  ;;; $LEAVE Z					;;AN000;; No
 36924 000058A0 7404                    	jz	short $MEN175
 36925                                  $MLL178:
 36926                                  	;add	si,$M_SL.$M_S_SIZE		;;AN000;; Next SUBLIST
 36927                                  	;add	si,[si+$M_SUBLIST_STRUC.$M_S_SIZE] ; [si+0]
 36928                                  	;;add	si,[si+0]
 36929 000058A2 0334                    	add	si,[si]
 36930                                  ;;; ENDLOOP					;;AN000;; Yes
 36931 000058A4 EBE9                    	jmp	short $MDO175
 36932                                  $MEN175:
 36933 000058A6 803E[4098]FF            	cmp	byte [$M_RT+$M_RES_ADDRS.$M_CLASS],utility_msg_class
 36934                                  	;cmp	byte [$M_RT+69],0FFh		;;AN004;; Is it a utility message?
 36935                                  ;;;; $IF E					;;AN004;; Yes
 36936 000058AB 7508                    	jne	short $MIF180
 36937 000058AD 42                      	inc	dx				;;AN000;; Remember to display CR,LF
 36938 000058AE 42                      	inc	dx				;;AN000;;  at the end of the message
 36939 000058AF 49                      	dec	cx				;;AN000;; Adjust message length
 36940 000058B0 49                      	dec	cx				;;AN000;;
 36941 000058B1 4F                      	dec	di				;;AN000;; Adjust ending address of message
 36942 000058B2 4F                      	dec	di				;;AN000;;
 36943                                  ;;;; $ELSE					;;AN004;; No
 36944 000058B3 EB03                    	jmp	short $MEN180
 36945                                  $MIF180:
 36946 000058B5 BAFFFF                  	mov	dx,-1 				;;AN004;; Set special case
 36947                                  ;;;; $ENDIF					;;AN004;;
 36948                                  $MEN180:
 36949                                  ;;; $ENDSRCH					;;AN000;;
 36950                                  $MSR175:
 36951                                  ;; $ENDIF					;;AN000;;
 36952                                  $MIF174:
 36953                                  ; $ENDIF					;;AN000;;
 36954                                  $MIF173:
 36955                                  ;; Prepare and display this part of message
 36956                                  
 36957 000058B8 57                      	push	di				;;AN000;; Save pointer to replace number
 36958 000058B9 29CF                    	sub	di,cx				;;AN000;; Determine beginning of string
 36959 000058BB E833FE                  	call	$M_DISPLAY_STRING		;;AN000;; Display string until % (or end)
 36960 000058BE 5F                      	pop	di				;;AN000;; Get back pointer to replace number
 36961 000058BF 59                      	pop	cx				;;AN000;; Clean up stack in case error
 36962                                  ; $LEAVE C,LONG					;;AN000;; Fail if carry was set
 36963                                  	;jnc	short $MXL3
 36964                                  	;jmp	$MEN165
 36965                                  	; 02/05/2023
 36966 000058C0 7214                    	jc	short $MEN165
 36967                                  $MXL3:
 36968 000058C2 51                      	push	cx				;;AN000;;
 36969                                  
 36970                                  ;; Save and reset pointer registers
 36971                                  
 36972 000058C3 89D1                    	mov	cx,dx				;;AN000;; Get the size of the rest of the message
 36973                                  	;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h
 36974 000058C5 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0 ; $M_SPECIAL_CASE-30h
 36975                                  	;cmp	byte [si+6],0 			;;AN000;; Is this the %0 case?
 36976                                  ; $IF NE					;;AN000;; No
 36977 000058C9 7412                    	je	short $MIF187			;;AN000;; Yes			
 36978 000058CB 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 36979                                  ;; $IF NZ					;;AN000;; No
 36980 000058CD 7406                    	jz	short $MIF188			;;AN000;; Yes
 36981 000058CF 49                      	dec	cx				;;AN000;; Decrement total size (%)
 36982 000058D0 49                      	dec	cx				;;AN000;; Decrement total size (#)
 36983 000058D1 47                      	inc	di				;;AN000;; Go past %
 36984 000058D2 47                      	inc	di				;;AN000;; Go past replace number
 36985                                  ;; $ELSE					;;AN000;; Yes, (Note this will not leave because INC)
 36986                                  	;jmp	short $MEN188
 36987                                  	; 28/04/2023
 36988 000058D3 EB15                    	jmp	short $MEN187
 36989                                  $MIF188:
 36990 000058D5 5E                      	pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 36991                                  ;; $ENDIF					;;AN000;; Yes, Note this will not leave because INC
 36992                                  $MEN188:
 36993                                  ; $ELSE 					;;AN000;;
 36994                                  	;jmp	short $MEN187
 36995                                  	; 28/04/2023
 36996                                  	; zf = 1
 36997                                  	;jmp	short $MEN165 
 36998                                  
 36999                                  ; 28/04/2023
 37000                                  $MXL4:
 37001                                  $MLL214:
 37002                                  $MEN165:
 37003 000058D6 C706[4398]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 37004                                  	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 37005                                  						;;AN000;; Reset message number to null
 37006 000058DC C3                      	retn					;;AN000;; Return
 37007                                  
 37008                                  $MIF187:
 37009 000058DD 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 37010                                  ;; $IF Z					;;AN004;; No
 37011                                  	;jnz	short $MIF192
 37012                                  	;pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 37013                                  ;; $ELSE					;;AN000;; No
 37014                                  	;jmp	short $MEN192
 37015                                  	; 28/04/2023
 37016 000058DF 74F4                    	jz	short $MIF188
 37017                                  $MIF192:
 37018 000058E1 83F9FF                  	cmp	cx,-1				;;AN004;; Are we at the end of the message?
 37019                                  ;;; $IF Z					;;AN004;; No
 37020 000058E4 7502                    	jnz	short $MIF194
 37021 000058E6 31C9                    	xor	cx,cx				;;AN004;;
 37022                                  ;;; $ENDIF					;;AN000;;
 37023                                  $MIF194:
 37024 000058E8 09FF                    	or	di,di				;;AN004;; Turn ZF off
 37025                                  ;; $ENDIF					;;AN000;;
 37026                                  $MEN192:
 37027                                  ; $ENDIF					;;AN000;; Note this will not leave because INC
 37028                                  $MEN187:
 37029                                  ; $LEAVE Z					;;AN000;;
 37030 000058EA 74EA                    	jz	short $MEN165
 37031                                  	;
 37032 000058EC 55                      	push	bp				;;AN000;; Save the replace count
 37033 000058ED 57                      	push	di				;;AN000;; Save location to complete message
 37034 000058EE 06                      	push	es				;;AN000;;
 37035 000058EF 51                      	push	cx				;;AN000;; Save size of the rest of the message
 37036 000058F0 31C9                    	xor	cx,cx				;;AN000;; Reset CX used for character count
 37037                                  
 37038                                  ;; Determine what action is required on parameter
 37039                                  
 37040 000058F2 833E[4398]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 37041                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 37042                                  ; $IF E						;;AN000;;
 37043 000058F7 753B                    	jne	short $MIF199
 37044                                  
 37045                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 37046 000058F9 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 37047                                  	;test	byte [si+7],0Fh			;;AN000;;
 37048                                  ;; $IF Z					;;AN000;;
 37049 000058FD 7508                    	jnz	short $MIF200
 37050                                  
 37051                                  ;; Character type requested
 37052                                  
 37053                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 37054 000058FF C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 37055                                  	;les	di,[si+2]
 37056 00005902 E84801                  	call	$M_CHAR_REPLACE			;;AN000;;
 37057                                  ;; $ELSE					;;AN000;; Get the rest of the message to display
 37058 00005905 EB28                    	jmp	short $MEN200
 37059                                  $MIF200:
 37060                                  ;; ENDIF					;;AN000;;
 37061                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 37062 00005907 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 37063                                  	;test	byte [si+7],0Dh			;;AN000;;
 37064                                  ;; $IF Z,OR					;;AN000;;
 37065 0000590B 740C                    	jz	short $MLL202
 37066                                  	;test	byte ptr $M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK
 37067 0000590D F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 37068                                  	;test	byte [si+7],0Eh			;;AN000;;
 37069                                  ;;; $IF Z,OR					;;AN000;;
 37070 00005911 7406                    	jz	short $MLL202
 37071                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Bin_Hex_Type and $M_TYPE_MASK
 37072 00005913 F644070C                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Ch
 37073                                  	;test	byte [si+7],0Ch			;;AN000;;
 37074                                  ;;;; $IF Z 					;;AN000;;
 37075 00005917 7508                    	jnz	short $MIF202
 37076                                  $MLL202:
 37077                                  
 37078                                  ;; Numeric type requested
 37079                                  
 37080                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 37081 00005919 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 37082                                  	;les	di,[si+2]
 37083 0000591C E85601                  	call	$M_BIN2ASC_REPLACE		;;AN000;;
 37084                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 37085 0000591F EB0E                    	jmp	short $MEN202
 37086                                  $MIF202:
 37087                                  ;;;; ENDIF					;;AN000;;
 37088                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Date_Type and $M_TYPE_MASK
 37089 00005921 F644070B                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Bh
 37090                                  	;test	byte [si+7],0Bh			;;AN000;;
 37091                                  ;;;; $IF E					;;AN000;;
 37092 00005925 7505                    	jnz	short $MIF204
 37093                                  
 37094                                  ;; Date type requested
 37095                                  
 37096 00005927 E8EC01                  	call	$M_DATE_REPLACE			;;AN000;;
 37097                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 37098 0000592A EB03                    	jmp	short $MEN204
 37099                                  $MIF204:					;;AN000;;
 37100                                  
 37101                                  ;; Time type requested (Default if we have not matched until here)
 37102                                  
 37103 0000592C E89E02                  	call	$M_TIME_REPLACE			;;AN000;;
 37104                                  
 37105                                  ;;;; $ENDIF					;;AN000;;
 37106                                  $MEN204:
 37107                                  ;;; $ENDIF					;;AN000;;
 37108                                  $MEN202:
 37109                                  ;; $ENDIF					;;AN000;;
 37110                                  $MEN200:
 37111                                  
 37112                                  ;; With the replace information of the Stack, display the replaceable field
 37113                                  
 37114 0000592F E85F00                  	call	$M_DISPLAY_REPLACE		;;AN000;; Display the replace
 37115                                  
 37116                                  ;; None of the above - Extended/Parse replace
 37117                                  ; $ELSE 					;;AN000;;
 37118 00005932 EB03                    	jmp	short $MEN199
 37119                                  $MIF199:
 37120 00005934 E81600                  	call	$M_EXT_PAR_REPLACE		;;AN000;;
 37121                                  ; $ENDIF					;;AN000;;
 37122                                  $MEN199:
 37123                                  
 37124                                  ;; We must go back and complete the message after the replacable parameter if there is any left
 37125                                  
 37126                                  ; $IF NC					;;AN000;; IF there was an error displaying then EXIT
 37127 00005937 7207                    	jc	short $MIF211
 37128                                  	;
 37129 00005939 59                      	pop	cx				;;AN000;; Get size of the rest of the message
 37130 0000593A 07                      	pop	es				;;AN000;; Get address of the rest of the message
 37131 0000593B 5F                      	pop	di				;;AN000;;
 37132 0000593C 5D                      	pop	bp				;;AN000;; Get replacment count
 37133 0000593D 5E                      	pop	si				;;AN000;; ELSE get address of first sublist structure
 37134                                  ; $ELSE						;;AN000;;
 37135 0000593E EB03                    	jmp	short $MEN211
 37136                                  $MIF211:
 37137 00005940 83C40A                  	add	sp,10				;;AN000;; Clean up stack if error
 37138                                  	; 28/04/2023
 37139                                  	;stc					;;AN000;;
 37140                                  ; $ENDIF					;;AN000;;
 37141                                  $MEN211:
 37142 00005943 833E[4398]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 37143                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 37144                                  ; $ENDDO NE,OR					;;AN000;;
 37145 00005948 758C                    	jne	short $MLL214
 37146                                  ; $ENDDO C,LONG					;;AN000;; Go back and display the rest of the message
 37147                                  	; 10/04/2023
 37148                                  	;jc	short $MXL4
 37149 0000594A E90CFF                  	jmp	$MDO165
 37150                                  
 37151                                  ; 28/04/2023
 37152                                  ;$MXL4:
 37153                                  ;$MLL214:
 37154                                  ;$MEN165:
 37155                                  ;	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 37156                                  ;	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 37157                                  ;						;;AN000;; Reset message number to null
 37158                                  ;	retn					;;AN000;; Return
 37159                                  
 37160                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37161                                  ;;
 37162                                  ;;	PROC NAME: $M_EXT_PAR_REPLACE
 37163                                  ;;
 37164                                  ;;	FUNCTION:
 37165                                  ;;	INPUTS:
 37166                                  ;;	OUPUTS:
 37167                                  ;;
 37168                                  ;;	REGS USED:
 37169                                  ;;
 37170                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37171                                  
 37172                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37173                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37174                                  
 37175                                  $M_EXT_PAR_REPLACE:
 37176 0000594D 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 37177 0000594F A1[4398]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 37178                                  	;mov	ax,[$M_RT+72]			;;AN000;; Prepare for get binary value (LOW)
 37179 00005952 C706[4598]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37180                                  	;mov	word [$M_RT+74],10 ; $M_BASE10	;;AN000;; Set default divisor
 37181 00005958 E8B0FE                  	call	$M_CONVERT2ASC			;;AN000;;
 37182                                  $MDO215:
 37183 0000595B 58                      	pop	ax				;;AN000;; Get character in register
 37184 0000595C 8887[4798]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 37185                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 37186 00005960 43                      	inc	bx				;;AN000;; Increase buffer count
 37187 00005961 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 37188 00005964 7503                    	jne	short $MIF216			;;AN000;; No
 37189 00005966 E80D00                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37190                                  $MIF216:
 37191 00005969 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 37192 0000596B 75EE                    	jnz	short $MDO215
 37193                                  
 37194 0000596D B80D0A                  	mov	ax,0A0Dh ; mov ax,$M_CR_LF	;;AN000;; Move char into the buffer
 37195 00005970 8987[4798]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],ax
 37196                                  	;;mov	[bx+$M_RT+76],ax		;;AN000;; Move char into the buffer
 37197 00005974 43                      	inc	bx				;;AN000;; Increase buffer count
 37198 00005975 43                      	inc	bx				;;AN000;; Increase buffer count
 37199                                  	;call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37200                                  	;retn					;;AN000::
 37201                                  	; 11/04/2023
 37202                                  	;jmp	$M_FLUSH_BUF
 37203                                  
 37204                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37205                                  ;;
 37206                                  ;;	PROC NAME: $M_FLUSH_BUFFER
 37207                                  ;;
 37208                                  ;;	FUNCTION: Display the contents of the temporary buffer
 37209                                  ;;	INPUTS: DI contains the number of bytes to display
 37210                                  ;;	OUTPUTS: BX reset to zero
 37211                                  ;;
 37212                                  ;;	REGS USED:
 37213                                  ;;
 37214                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37215                                  	
 37216                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37217                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:56C8h
 37218                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37219                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5E95h
 37220                                  $M_FLUSH_BUF:
 37221 00005976 51                      	push	cx				;;AN000;; Save changed regs
 37222 00005977 06                      	push	es				;;AN000;;
 37223 00005978 57                      	push	di				;;AN000;;
 37224 00005979 1E                      	push	ds				;;AN000;; Set ES pointing to buffer
 37225 0000597A 07                      	pop	es				;;AN000;;
 37226 0000597B 89D9                    	mov	cx,bx				;;AN000;; Set number of bytes to display
 37227 0000597D 31DB                    	xor	bx,bx				;;AN000;; Reset buffer counter
 37228 0000597F 8D3E[4798]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 37229                                  	;lea	di,[$M_RT+76]			;;AN000;; Reset buffer location pointer
 37230 00005983 E86BFD                  	call	$M_DISPLAY_STRING		;;AN000;; Display the buffer
 37231 00005986 7204                    	jc	short $MIF314
 37232 00005988 5F                      	pop	di				;;AN000;; No, Restore changed regs
 37233 00005989 07                      	pop	es				;;AN000;;
 37234 0000598A 59                      	pop	cx				;;AN000;;
 37235                                  	;jmp	short $MEN314
 37236                                  	; 11/04/2023
 37237 0000598B C3                      	retn
 37238                                  $MIF314:
 37239 0000598C 83C406                  	add	sp,6				;;AN000;; Fix stack
 37240 0000598F F9                      	stc					;;AN000;;
 37241                                  $MEN314:
 37242 00005990 C3                      	retn					;;AN000;; Return
 37243                                  
 37244                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37245                                  ;;
 37246                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37247                                  
 37248                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37249                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5609h
 37250                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37251                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5DD6h
 37252                                  $M_DISPLAY_REPLACE:
 37253 00005991 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 37254                                  	;;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h ; 0
 37255 00005993 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0	
 37256                                  	;cmp	byte [si+6],0			;;AN000;; Is this the special case (convert to ASCII)
 37257 00005997 7511                    	jne	short $MIF276
 37258                                  	
 37259 00005999 C787[4798]202D          	mov	word [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],2D20h ; $M_SPACE_HYP
 37260                                  	;mov	word [bx+$M_RT+76],2D20h	;;AN000;; Move in a " -"
 37261                                  	
 37262 0000599F 43                      	inc	bx				;;AN000;; Increment count
 37263 000059A0 43                      	inc	bx				;;AN000;; Increment count
 37264                                  	
 37265 000059A1 C687[4798]20            	mov	byte [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],20h ; $M_SPACE
 37266                                  	;mov	byte [bx+$M_RT+76],20h		;;AN000;; Move in a " "
 37267                                  	
 37268 000059A6 43                      	inc	bx				;;AN000;; Increment count
 37269 000059A7 E8CCFF                  	call	$M_FLUSH_BUF			;;AN000;; Write out " - " to prepare for special case
 37270                                  $MIF276:
 37271 000059AA 5D                      	pop	bp				;;AN000;; Remember the return address
 37272 000059AB 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 37273 000059AD 31D2                    	xor	dx,dx				;;AN000;; Use DX for count of parms taken off the stack
 37274                                  
 37275 000059AF 880E[3D98]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl	;;AN000;; Save size to later clear stack
 37276                                  	;mov	[$M_RT+66],cl
 37277                                  	
 37278                                  	;mov	al,byte ptr $M_SL.$M_S_MINW	;;AN000;; Get the minimum width
 37279 000059B3 8A4409                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_MINW]
 37280                                  	;mov	al,[si+9]
 37281                                  	
 37282 000059B6 38C8                    	cmp	al,cl				;;AN000;; Do we need pad chars added?
 37283 000059B8 761E                    	jna	short $MIF278
 37284 000059BA 28C8                    	sub	al,cl				;;AN000;; Calculate how many pad chars are needed.
 37285 000059BC 88C6                    	mov	dh,al				;;AN000;; Save the number of pad characters
 37286                                  	
 37287                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 37288 000059BE F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 37289                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be right aligned?
 37290 000059C2 7414                    	jz	short $MIF279			;;AN000;; No
 37291                                  $MDO280:
 37292                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 37293 000059C4 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 37294                                  	;mov	al,[si+0Ah]
 37295 000059C7 8887[4798]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 37296                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 37297                                  	
 37298 000059CB 43                      	inc	bx				;;AN000;;
 37299 000059CC 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; 64		;;AN000;; Is buffer full?
 37300 000059CF 7503                    	jne	short $MIF281
 37301 000059D1 E8A2FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37302                                  $MIF281:
 37303 000059D4 FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 37304 000059D6 75EC                    	jnz	short $MDO280
 37305                                  $MIF279:
 37306                                  $MIF278:
 37307                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,$M_UNLIM_W
 37308 000059D8 807C0800                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],0 ; $M_UNLIM_W
 37309                                  	;cmp	byte [si+8],0			;;AN000;; Is maximum width unlimited
 37310 000059DC 740C                    	je	short $MIF286
 37311                                  	
 37312                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,CL	;;AN000;; Will we exceed maximum width?
 37313 000059DE 384C08                  	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],cl
 37314                                  	;;cmp	byte [si+8],cl
 37315 000059E1 7307                    	jnb	short $MIF287
 37316                                  
 37317                                  	; 03/05/2023
 37318                                  	;;sub	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Calculate how many extra chars
 37319                                  	;sub	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 37320                                  	;;sub	cl,[si+8]
 37321 000059E3 88CA                    	mov	dl,cl				;;AN000;; Remember how many chars to pop off
 37322                                  	;;mov	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Set new string length
 37323                                  	;mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 37324                                  	;;mov	cl,[si+8]
 37325                                  	; 03/05/2023
 37326 000059E5 8A4C08                  	mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 37327 000059E8 28CA                    	sub	dl,cl
 37328                                  $MIF287:
 37329                                  $MIF286:
 37330 000059EA 09C9                    	or	cx,cx				;;AN000;;
 37331 000059EC 7424                    	jz	short $MIF290			;;AN000;;
 37332                                  $MDO291:
 37333                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type not $M_TYPE_MASK
 37334 000059EE F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 37335                                  	;test	byte [si+7],0Fh			;;AN000;;
 37336 000059F2 750C                    	jnz	short $MIF292
 37337                                  
 37338                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 37339 000059F4 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 37340                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?			 
 37341 000059F8 7406                    	jz	short $MIF292			;;AN000;; No
 37342                                  
 37343 000059FA 268A05                  	mov	al,[es:di]			;;AN000;; Get first character from string
 37344 000059FD 47                      	inc	di				;;AN000;; Next character in string
 37345 000059FE EB01                    	jmp	short $MEN292
 37346                                  $MIF292:
 37347 00005A00 58                      	pop	ax				;;AN000;; Get character in register
 37348                                  $MEN292:
 37349                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 37350 00005A01 8887[4798]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 37351                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 37352                                  	; 03/05/2023
 37353 00005A05 43                      	inc	bx				;;AN000;; Increase buffer count
 37354 00005A06 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 37355 00005A09 7503                    	jne	short $MIF295			;;AN000;;
 37356 00005A0B E868FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37357                                  $MIF295:
 37358 00005A0E FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 37359 00005A10 75DC                    	jnz	short $MDO291
 37360                                  $MIF290:
 37361                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 37362 00005A12 F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 37363                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be left aligned?
 37364 00005A16 7518                    	jnz	short $MIF299			;;AN000;; Yes
 37365 00005A18 08F6                    	or	dh,dh				;;AN000;; Do we need pad chars added?
 37366 00005A1A 7414                    	jz	short $MIF300
 37367                                  $MDO301:
 37368                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 37369 00005A1C 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 37370                                  	;mov	al,[si+0Ah]
 37371                                  
 37372                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 37373 00005A1F 8887[4798]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 37374                                  	; 03/05/2023
 37375                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 37376                                  
 37377 00005A23 43                      	inc	bx				;;AN000;;
 37378 00005A24 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ  ; 64		;;AN000;; Is buffer full?
 37379 00005A27 7503                    	jne	short $MIF302			;;AN000;; No
 37380                                  						;;AN000;; Yes
 37381 00005A29 E84AFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37382                                  $MIF302:
 37383 00005A2C FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 37384 00005A2E 75EC                    	jnz	short $MDO301			;;AN000;;
 37385                                  $MIF300:
 37386                                  $MIF299:
 37387                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 37388 00005A30 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 37389                                  	;test	byte [si+7],0Fh			;;AN000;;
 37390 00005A34 7506                    	jnz	short $MIF307
 37391                                  	
 37392                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 37393 00005A36 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 37394                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?
 37395                                  	; 11/04/2023
 37396                                  	;jz	short $MIF307			;;AN000;;
 37397                                  	;jmp	short $MEN307			;;AN000;;
 37398 00005A3A 750C                    	jnz	short $MEN307
 37399                                  $MIF307:
 37400 00005A3C 08D2                    	or	dl,dl				;;AN000;;
 37401 00005A3E 7408                    	jz	short $MIF309			;;AN000;;
 37402                                  $MDO310:
 37403 00005A40 8F06[4198]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 37404                                  	;pop	word [$M_RT+70]			;;AN000;; Clean Up stack using spare variable
 37405 00005A44 FECA                    	dec	dl				;;AN000;; Are we done?
 37406 00005A46 75F8                    	jnz	short $MDO310
 37407                                  $MIF309:
 37408                                  $MEN307:
 37409 00005A48 E82BFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer for the final time
 37410 00005A4B 55                      	push	bp				;;AN000;; Restore the return address
 37411 00005A4C C3                      	retn					;;AN000;;
 37412                                  
 37413                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37414                                  ;;
 37415                                  ;;	PROC NAME: $M_CHAR_REPLACE
 37416                                  ;;
 37417                                  ;;	FUNCTION: Will prepare a single char or ASCIIZ string for replace
 37418                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 37419                                  ;;		ES:DI contains the VALUE from SUBLIST
 37420                                  ;;	OUTPUTS: CX contains number of characters on stack
 37421                                  ;;		 Top of stack  --> Last character
 37422                                  ;;					. . .
 37423                                  ;;		 Bot of stack  --> First character
 37424                                  ;;
 37425                                  ;;	OTHER REGS Revised: AX
 37426                                  ;;
 37427                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37428                                  
 37429                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37430                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37431                                  $M_CHAR_REPLACE:
 37432 00005A4D 5D                      	pop	bp				;;AN000;; Save return address
 37433                                  	;test	$M_SL.$M_S_FLAG,not Char_Field_Char and $M_SIZE_MASK
 37434 00005A4E F6440730                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],30h
 37435                                  	;test	byte [si+7],30h			;;AN000;; Was Character specified?
 37436 00005A52 7512                    	jnz	short $MIF317			;;AN000;; No
 37437 00005A54 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 37438 00005A57 50                      	push	ax				;;AN000;; Put it on the stack
 37439 00005A58 41                      	inc	cx				;;AN000;; Increase the count
 37440 00005A59 E88BFD                  	call	$M_IS_IT_DBCS			;;AN000;; Is this the first byte of a DB character
 37441 00005A5C 7306                    	jnc	short $MIF318
 37442 00005A5E 268A4501                	mov	al,[es:di+1]			;;AN000;; Get the next character
 37443 00005A62 50                      	push	ax				;;AN000;; Put it on the stack
 37444 00005A63 F8                      	clc					;;AN000;; Clear the carry
 37445                                  $MIF318:
 37446 00005A64 EB0D                    	jmp	short $MEN317
 37447                                  $MIF317:
 37448                                  $MDO321:
 37449 00005A66 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 37450 00005A69 08C0                    	or	al,al				;;AN000;; Is it the NULL?
 37451 00005A6B 7404                    	jz	short $MEN321			;;AN000;; Yes
 37452 00005A6D 47                      	inc	di				;;AN000;; Next character
 37453 00005A6E 41                      	inc	cx				;;AN000;; Increment the count
 37454 00005A6F EBF5                    	jmp	short $MDO321
 37455                                  $MEN321:
 37456 00005A71 29CF                    	sub	di,cx				;;AN000;; Set DI at the beginning of the string
 37457                                  $MEN317:
 37458 00005A73 55                      	push	bp				;;AN000;; Restore return address
 37459 00005A74 C3                      	retn					;;AN000;;	
 37460                                  
 37461                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37462                                  ;;
 37463                                  ;;	PROC NAME: $M_BIN2ASC_REPLACE
 37464                                  ;;
 37465                                  ;;	FUNCTION: Convert a signed or unsigned binary number to an ASCII string
 37466                                  ;;		  and prepare to display
 37467                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 37468                                  ;;		ES:DI contains the VALUE from SUBLIST
 37469                                  ;;	OUTPUTS: CX contains number of characters on stack
 37470                                  ;;		 Top of stack  --> Last character
 37471                                  ;;					. . .
 37472                                  ;;		 Bot of stack  --> First character
 37473                                  ;;	OTHER REGS Revised: BX,DX,AX
 37474                                  ;;
 37475                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37476                                  
 37477                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37478                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37479                                  $M_BIN2ASC_REPLACE:
 37480 00005A75 5D                      	pop	bp				;;AN000;; Save return address
 37481 00005A76 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 37482 00005A78 31C0                    	xor	ax,ax				;;AN000;; Prepare for get binary value (LOW)
 37483 00005A7A C706[4598]1000          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],16 ; $M_BASE16
 37484                                  	;mov	word [$M_RT+74],16  ; $M_BASE16	;;AN000;; Set default divisor
 37485                                  
 37486 00005A80 31DB                    	xor	bx,bx				;;AN000;; Use BX as the NEG flag (if applicable)
 37487                                  
 37488                                  	;test	$M_SL.$M_S_FLAG,not $M_BYTE and $M_SIZE_MASK
 37489 00005A82 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 37490                                  	;test	byte [si+7],20h			;;AN000;; Was BYTE specified?		
 37491 00005A86 7511                    	jnz	short $MIF325			;;AN000;; No
 37492                                  	
 37493 00005A88 268A05                  	mov	al,[es:di]			;;AN000;; Setup byte in AL
 37494                                  
 37495                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 37496 00005A8B F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 37497                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?
 37498 00005A8F 753D                    	jnz	short $MIF326			;;AN000;; No
 37499                                  			 
 37500 00005A91 A880                    	test	al,10000000b ; 80h		;;AN000;; Is this number negative?
 37501 00005A93 7433                    	jz	short $MIF327			;;AN000;; No
 37502                                  						;;AN000;; Yes				
 37503                                  	; 12/04/2023
 37504                                  	;inc	bx				;;AN000;; Remember that it was negative
 37505 00005A95 247F                    	and	al,01111111b			;;AN000;; Make it positive
 37506                                  
 37507                                  	; 12/04/2023 - Retrop DOS v4.0 COMMAND.COM
 37508                                  	;jmp	short $MIF327
 37509 00005A97 EB2E                    	jmp	short $MIF350 ; inc bx
 37510                                  
 37511                                  ; 12/04/2023
 37512                                  %if 0
 37513                                  
 37514                                  $MIF327:
 37515                                  $MIF335:	; 12/04/2023
 37516                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37517                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37518                                  $MIF326:
 37519                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 37520                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 37521                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 37522                                  	jnz	short $MIF330			;;AN000;; No
 37523                                  						;;AN000;; Yes
 37524                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37525                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37526                                  $MIF330:
 37527                                  	jmp	short $MEN325
 37528                                  
 37529                                  %endif
 37530                                  
 37531                                  $MIF325:
 37532                                  	;test	$M_SL.$M_S_FLAG,not $M_WORD and $M_SIZE_MASK
 37533 00005A99 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 37534                                  	;test	byte [si+7],10h			;;AN000;; Was WORD specified?
 37535 00005A9D 7513                    	jnz	short $MIF333			;;AN000;; No
 37536                                  						;;AN000;; Yes
 37537 00005A9F 268B05                  	mov	ax,[es:di]			;;AN000;; Setup byte in AL
 37538                                  
 37539                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 37540 00005AA2 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 37541                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 37542 00005AA6 7526                    	jnz	short $MIF334			;;AN000;; No
 37543                                  						;;AN000;; Yes
 37544 00005AA8 F6C480                  	test	ah,10000000b ; 80h		;;AN000;; Is this number negative?
 37545 00005AAB 741B                    	jz	short $MIF335			;;AN000;; No
 37546                                  						;;AN000;; Yes
 37547                                  	; 12/04/2023
 37548                                  	;inc	bx				;;AN000;; Remember that it was negative
 37549 00005AAD 80E47F                  	and	ah,01111111b			;;AN000;; Make it positive
 37550                                  
 37551                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 37552                                  	;jmp	short $MIF335
 37553 00005AB0 EB15                    	jmp	short $MIF350 ; inc bx
 37554                                  
 37555                                  ; 12/04/2023
 37556                                  %if 0
 37557                                  
 37558                                  $MIF335:
 37559                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37560                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37561                                  $MIF334:
 37562                                  	test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK ;;AN000;; Was Signed binary specified?
 37563                                  	jnz	short $MIF338
 37564                                  
 37565                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 37566                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 37567                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 37568                                  	jnz	short $MIF338			;;AN000;; No
 37569                                  						;;AN000;; Yes
 37570                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37571                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37572                                  $MIF338:
 37573                                  	jmp	short $MEN333			;;AN000;;
 37574                                  %endif
 37575                                  
 37576                                  $MIF333:
 37577 00005AB2 268B05                  	mov	ax,[es:di]			;;AN000;; Setup Double word in DX:AX
 37578 00005AB5 268B5502                	mov	dx,[es:di+2]			;;AN000;;
 37579                                  
 37580                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 37581 00005AB9 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 37582                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 37583 00005ABD 750F                    	jnz	short $MIF341			;;AN000;; No
 37584                                  						;;AN000;; Yes
 37585 00005ABF F6C680                  	test	dh,10000000b ; 80h		;;AN000;; Is this number negative?
 37586 00005AC2 7404                    	jz	short $MIF342			;;AN000;; No
 37587                                  						;;AN000;; Yes
 37588                                  	; 12/04/2023
 37589                                  	;inc	bx				;;AN000;; Remember that it was negative
 37590 00005AC4 80E67F                  	and	dh,01111111b			;;AN000;; Make it positive
 37591                                  	
 37592                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 37593                                  $MIF350:
 37594 00005AC7 43                      	inc	bx
 37595                                  $MIF342:
 37596                                  	; 12/04/2023
 37597                                  $MIF327:
 37598                                  $MIF335:
 37599 00005AC8 C706[4598]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37600                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37601                                  $MIF341:
 37602                                  $MIF326:
 37603                                  	; 18/04/2023
 37604                                  $MIF334:
 37605                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 37606 00005ACE F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 37607                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 37608 00005AD2 7506                    	jnz	short $MIF345			;;AN000;; No
 37609                                  						;;AN000;; Yes
 37610 00005AD4 C706[4598]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37611                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37612                                  
 37613                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37614                                  	; ****************************************
 37615                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5F64h
 37616                                  $MIF345:
 37617                                  	; *** (Disassembled MSDOS 6.22 COMMAND.COM source code.)
 37618                                  $MEN333:
 37619 00005ADA F6440740                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],40h
 37620                                  	;test	byte [si+7],40h		; MSDOS 6.22
 37621                                  				; (Custom/International flag for thousand separator)
 37622 00005ADE 7428                    	jz	short $MEN325
 37623 00005AE0 50                      	push	ax			; MSDOS 6.22
 37624 00005AE1 52                      	push	dx
 37625 00005AE2 B438                    	mov	ah,38h	 ; International
 37626 00005AE4 30C0                    	xor	al,al
 37627 00005AE6 8D16[4798]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 37628 00005AEA CD21                    	int	21h		; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 37629                                  				; get current-country info
 37630                                  				; DS:DX -> buffer for returned info
 37631 00005AEC 7305                    	jnb	short $MEN341		; (use country depended thousand separator)
 37632 00005AEE C606[4E98]2C            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA],','
 37633                                  $MEN341:
 37634 00005AF3 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 37635                                  	;mov	al,[si+0Ah]		; (save pad character)
 37636 00005AF6 89C7                    	mov	di,ax
 37637 00005AF8 5A                      	pop	dx
 37638 00005AF9 58                      	pop	ax
 37639 00005AFA C6440A2C                	mov	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','  ; $M_COMMA
 37640                                  	;mov	byte [si+0Ah],','	; (comma is needed for converting procedure)
 37641 00005AFE E80AFD                  	call	$M_CONVERT2ASC
 37642 00005B01 89F8                    	mov	ax,di
 37643 00005B03 88440A                  	mov	[si+$M_SUBLIST_STRUC.$M_S_PAD],al
 37644                                  	;mov	[si+0Ah],al		; (restore pad character)
 37645 00005B06 EB03                    	jmp	short $MEN345		; MSDOS 6.22
 37646                                  	; *** (end of disassembled MSDOS 6.22 COMMAND.COM source code porehion) 
 37647                                  	; ****************************************
 37648                                  ;$MIF345:
 37649                                  ;$MEN333:
 37650                                  $MEN325:
 37651 00005B08 E800FD                  	call	$M_CONVERT2ASC			;;AN000;; Convert to ASCII string
 37652                                  $MEN345: 	; 15/06/2023 - MSDOS 6.22
 37653 00005B0B 09DB                    	or	bx,bx				;;AN000;; Was number negative?
 37654 00005B0D 7405                    	jz	short $MIF349			;;AN000;; No
 37655                                  						;;AN000;; Yes
 37656 00005B0F 31D2                    	xor	dx,dx				;;AN000;;
 37657 00005B11 B22D                    	mov	dl,'-'	; $M_NEG_SIGN		;;AN000;; Put "-" on the stack with the number
 37658 00005B13 52                      	push	dx				;;AN000;;
 37659                                  $MIF349:
 37660 00005B14 55                      	push	bp				;;AN000;; Restore return address
 37661 00005B15 C3                      	retn					;;AN000;; Return
 37662                                  
 37663                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37664                                  ;;
 37665                                  ;;	PROC NAME: $M_DATE_REPLACE
 37666                                  ;;
 37667                                  ;;	FUNCTION: Convert a date to a decimal ASCII string using current
 37668                                  ;;		  country format and prepare to display
 37669                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 37670                                  ;;		ES:DI points at VALUE from SUBLIST
 37671                                  ;;	OUTPUTS: CX contains number of characters on stack
 37672                                  ;;		 Top of stack  --> Last character
 37673                                  ;;					. . .
 37674                                  ;;		 Bot of stack  --> First character
 37675                                  ;;	OTHER REGS Revised: DX,AX
 37676                                  ;;
 37677                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37678                                  
 37679                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37680                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37681                                  $M_DATE_REPLACE:
 37682 00005B16 5D                      	pop	bp				;;AN000;; Save return address
 37683                                  
 37684 00005B17 C706[4598]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37685                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 37686                                  	
 37687 00005B1D E86700                  	call	$M_GET_DATE			;;AN000;; Set date format/separator in $M_RT
 37688                                  						;;AN000;; All O.K.?
 37689 00005B20 31D2                    	xor	dx,dx				;;AN000;; Reset DX value
 37690                                  	; 12/04/2023
 37691                                  	;xor	ax,ax				;;AN000;; Reset AX value
 37692                                  	
 37693                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0
 37694                                  	;;cmp	word [$M_RT+76],0		;;AN000;; USA Date Format
 37695                                  	;jne	short $MIF351
 37696                                  	; 12/04/2023
 37697 00005B22 A1[4798]                	mov	ax,[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 37698 00005B25 09C0                    	or	ax,ax
 37699 00005B27 751D                    	jnz	short $MIF351
 37700                                  
 37701 00005B29 E87200                  	call	$M_YEAR				;;AN000;; Get Year
 37702 00005B2C E88100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 37703                                  
 37704 00005B2F FF36[5298]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 37705                                  	;push	word [$M_RT+87]			;;AN000;;
 37706                                  	
 37707 00005B33 41                      	inc	cx				;;AN000;; Increment count
 37708 00005B34 31C0                    	xor	ax,ax				;;AN000;; Reset AX value
 37709                                  
 37710 00005B36 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 37711                                  	;mov	al,[si+5]			;;AN000;; Get Day
 37712 00005B39 E87400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 37713                                  	
 37714 00005B3C FF36[5298]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 37715                                  	;push	word [$M_RT+87]			;;AN000;;
 37716                                  
 37717 00005B40 41                      	inc	cx				;;AN000;; Increment count
 37718 00005B41 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 37719                                  	;mov	al,[si+4]			;;AN000;; Get Month
 37720                                  	; 12/04/2023
 37721                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 37722 00005B44 EB3C                    	jmp	short $MIF354 ; **
 37723                                  $MIF351:
 37724                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],1
 37725                                  	;;cmp	word [$M_RT+76],1		;;AN000;; EUROPE Date Format
 37726                                  	;jne	short $MIF353
 37727                                  	; 12/04/2023
 37728                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 37729 00005B46 48                      	dec	ax 
 37730 00005B47 751D                    	jnz	short $MIF352 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] <> 1
 37731                                  
 37732 00005B49 E85200                  	call	$M_YEAR				;;AN000;; Get Year
 37733 00005B4C E86100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 37734                                  
 37735 00005B4F FF36[5298]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 37736                                  	;push	word [$M_RT+87]			;;AN000;;
 37737                                  	
 37738 00005B53 41                      	inc	cx				;;AN000;; Increment count
 37739 00005B54 31C0                    	xor	ax,ax				;;AN000;; Reset AX
 37740                                  
 37741 00005B56 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 37742                                  	;mov	al,[si+4]			;;AN000;; Get Month
 37743 00005B59 E85400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 37744                                  
 37745 00005B5C FF36[5298]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 37746                                  	;push	word [$M_RT+87]			;;AN000;;
 37747                                  
 37748 00005B60 41                      	inc	cx				;;AN000;;
 37749                                  	      
 37750 00005B61 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 37751                                  	;mov	al,[si+5]			;;AN000;; Get Day
 37752                                  
 37753                                  	; 12/04/2023
 37754                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 37755 00005B64 EB1C                    	jmp	short $MIF354 ; **
 37756                                  	; 12/04/2023
 37757                                  $MIF352:
 37758                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]-1 ; *
 37759 00005B66 48                      	dec	ax
 37760                                  	;jz	short $MIF353 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] = 2
 37761                                  	;xor	ax,ax
 37762                                  	;jmp	short $MIF355
 37763                                  	; 12/04/2023
 37764 00005B67 751C                    	jnz	short $MIF355
 37765                                  $MIF353:
 37766                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],2
 37767                                  	;;cmp	word [$M_RT+76],2		;;AN000;; JAPAN Date Format
 37768                                  	;jne	short $MIF355
 37769                                  
 37770 00005B69 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 37771                                  	;mov	al,[si+5]			;;AN000;; Get Day
 37772 00005B6C E84100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 37773                                  	
 37774 00005B6F FF36[5298]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 37775                                  	;push	word [$M_RT+87]			;;AN000;;
 37776                                  
 37777 00005B73 41                      	inc	cx				;;AN000;;
 37778                                  
 37779 00005B74 8A4404                  	 mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 37780                                  	;mov	al,[si+4]			;;AN000;; Get Month
 37781 00005B77 E83600                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 37782                                  	
 37783 00005B7A FF36[5298]              	 push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 37784                                  	;push	word [$M_RT+87]			;;AN000;;
 37785                                  	
 37786 00005B7E 41                      	inc	cx				;;AN000;;
 37787                                  
 37788 00005B7F E81C00                  	call	$M_YEAR				;;AN000;; Get Year
 37789                                  	; 12/04/2023
 37790                                  $MIF354:
 37791 00005B82 E82B00                  	call	$M_CONVERTDATE	; **		;;AN000;; Convert it to an ASCII string
 37792                                  $MIF355:
 37793 00005B85 55                      	push	bp				;;AN000;; Restore return address
 37794 00005B86 C3                      	retn					;;AN000;; Return
 37795                                  
 37796                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37797                                  ;;
 37798                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37799                                  
 37800                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37801                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37802                                  $M_GET_DATE:
 37803                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 37804                                  	;mov	al,0 				;;AN000;; Get current country info
 37805                                  	; 12/04/2023
 37806 00005B87 B80038                  	mov	ax,3800h
 37807                                  	;
 37808 00005B8A 8D16[4798]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 37809                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 37810 00005B8E CD21                    	int	21h				;;AN000;;
 37811 00005B90 730B                    	jnc	short $MIF357
 37812                                  	;
 37813 00005B92 C706[4798]0000          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0 ; $M_DEF_DATE_FORM
 37814                                  	;mov	word [$M_RT+76+0],0		;;AN000;; Set default date format (BH)
 37815 00005B98 C606[5298]2D            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-' ; $M_DEF_DATE_SEP
 37816                                  	;mov	byte [$M_RT+87],'-'		;;AN000;; Set default date separator (BL)
 37817                                  $MIF357:
 37818 00005B9D C3                      	retn					;;AN000;;
 37819                                  
 37820                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37821                                  ;;
 37822                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37823                                  
 37824                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37825                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37826                                  $M_YEAR:
 37827 00005B9E 8B4402                  	mov	ax,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 37828                                  	;mov	ax,[si+2]			;;AN000;; Get Year
 37829                                  
 37830                                  	;test	$M_SL.$M_S_FLAG,Date_MDY_4 and $M_DATE_MASK
 37831 00005BA1 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 37832                                  	;test	byte [si+7],10h			;;AN000;; Was Month/Day/Year (2 Digits) specified?
 37833 00005BA5 7508                    	jnz	short $MIF359			;;AN000;; No
 37834                                  						;;AN000;; Yes
 37835 00005BA7 83F863                  	cmp	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 37836 00005BAA 7603                    	jna	short $MIF360			;;AN000;;
 37837 00005BAC B86300                  	mov	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 37838                                  $MIF360:
 37839                                  $MIF359:
 37840 00005BAF C3                      	retn					;;AN000;;
 37841                                  
 37842                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37843                                  ;;
 37844                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37845                                  
 37846                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37847                                  $M_CONVERTDATE:
 37848                                  $M_CONVERTTIME: ; *!*!  ; 12/04/2023
 37849 00005BB0 8F06[4798]              	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 37850                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 37851 00005BB4 880E[3D98]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 37852                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 37853 00005BB8 E850FC                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 37854 00005BBB 49                      	dec	cx				;;AN000;; Test if size only grew by 1
 37855 00005BBC 3A0E[3D98]              	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 37856 00005BC0 7505                    	jne	short $MIF363			;;AN000;; No
 37857 00005BC2 B83000                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 37858 00005BC5 50                      	push	ax				;;AN000;; Save it
 37859 00005BC6 41                      	inc	cx				;;AN000;; Count it
 37860                                  $MIF363:
 37861 00005BC7 41                      	inc	cx				;;AN000;; Restore CX
 37862 00005BC8 FF36[4798]              	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 37863                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 37864 00005BCC C3                      	retn
 37865                                  
 37866                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37867                                  ;;
 37868                                  ;;	PROC NAME: $M_TIME_REPLACE
 37869                                  ;;
 37870                                  ;;	FUNCTION: Convert a time to a decimal ASCII string
 37871                                  ;;		  and prepare to display
 37872                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 37873                                  ;;		ES:DI points at VALUE from SUBLIST
 37874                                  ;;	OUTPUTS: CX contains number of characters on stack
 37875                                  ;;		 Top of stack  --> Last character
 37876                                  ;;					. . .
 37877                                  ;;		 Bot of stack  --> First character
 37878                                  ;;	REGS USED: BP,CX,AX
 37879                                  ;;
 37880                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37881                                  
 37882                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37883                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM							     ;;
 37884                                  $M_TIME_REPLACE:
 37885 00005BCD 5D                      	pop	bp				;;AN000;; Save return address
 37886                                  
 37887 00005BCE C706[4598]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37888                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 37889                                  
 37890 00005BD4 E87800                  	call	$M_GET_TIME			;;AN000;; All O.K.?
 37891                                  
 37892                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 37893 00005BD7 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1
 37894                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 37895 00005BDB 741A                    	jz	short $MIF365			;;AN000;; No
 37896                                  						;;AN000;; Yes
 37897 00005BDD 803E[5898]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 37898                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 37899 00005BE2 7513                    	jne	short $MIF366			;;AN000;; No
 37900                                  						;;AN000;; Yes
 37901 00005BE4 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 37902                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 37903 00005BE7 3C0C                    	cmp	al,12				;;AN000;; Is hour 12 or less?
 37904 00005BE9 7C04                    	jl	short $MLL367 ; jnge		;;AN000;; Yes	
 37905 00005BEB 3C17                    	cmp	al,23				;;AN000;; Is hour 24 or greater?
 37906 00005BED 7E04                    	jng	short $MIF367 ; jle		;;AN000;; No
 37907                                  $MLL367:
 37908 00005BEF B061                    	mov	al,'a'	; $M_AM			;;AN000;;
 37909                                  	;push	ax				;;AN000;; Push an "a" to represent AM.
 37910                                  	;inc	cx				;;AN000;;
 37911                                  	;jmp	short $MEN367			;;AN000;;
 37912                                  	; 12/04/2023
 37913 00005BF1 EB02                    	jmp	short $MEN367 ; *
 37914                                  $MIF367:
 37915 00005BF3 B070                    	mov	al,'p'	; $M_PM			;;AN000;;
 37916                                  $MEN367:	; * ; 12/04/2023
 37917 00005BF5 50                      	push	ax				;;AN000;; Push an "p" to represent PM.
 37918 00005BF6 41                      	inc	cx				;;AN000;;
 37919                                  ;$MEN367:
 37920                                  $MIF366:
 37921                                  $MIF365:					;;AN000;;
 37922 00005BF7 31C0                    	xor	ax,ax				;;AN000;;
 37923 00005BF9 31D2                    	xor	dx,dx				;;AN000;;
 37924                                  	
 37925                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 37926 00005BFB F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 37927                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 37928 00005BFF 740B                    	jz	short $MIF372			;;AN000;;
 37929                                  
 37930 00005C01 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 37931                                  	;mov	al,[si+5]			;;AN000;; Get Hundreds
 37932 00005C04 E8A9FF                  	call	$M_CONVERTTIME			;;AN000;;
 37933                                  
 37934 00005C07 FF36[5098]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]
 37935                                  	;push	word [$M_RT+85]			;;AN000;;
 37936 00005C0B 41                      	inc	cx				;;AN000;;
 37937                                  $MIF372:
 37938                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 37939 00005C0C F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 37940                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 37941 00005C10 7506                    	jnz	short $MLL374			;;AN000;; No
 37942                                  
 37943                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSS_Cty AND $M_SIZE_MASK
 37944 00005C12 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 37945                                  	;test	byte [si+7],10h			;;AN000;; Was Hour/Min/Sec (12 Hour) specified?
 37946 00005C16 740B                    	jz	short $MIF374			;;AN000;; No
 37947                                  $MLL374:
 37948 00005C18 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 37949                                  	;mov	al,[si+4]			;;AN000;; Get Seconds
 37950 00005C1B E892FF                  	call	$M_CONVERTTIME			;;AN000;;
 37951                                  
 37952 00005C1E FF36[5498]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 37953                                  	;push	word [$M_RT+89]			;;AN000;;
 37954 00005C22 41                      	inc	cx				;;AN000;;
 37955                                  $MIF374:	;;  Do Hour/Min (12 Hour)
 37956 00005C23 8A4403                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+1]
 37957                                  	;mov	al,[si+3]			;;AN000;; Get Minutes
 37958 00005C26 E887FF                  	call	$M_CONVERTTIME			;;AN000;;
 37959                                  
 37960 00005C29 FF36[5498]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 37961                                  	;push	word [$M_RT+89]			;;AN000;;
 37962 00005C2D 41                      	inc	cx				;;AN000;;
 37963                                  
 37964 00005C2E 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 37965                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 37966                                  
 37967                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 37968 00005C31 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1 
 37969                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 37970 00005C35 7413                    	jz	short $MIF376			;;AN000;; No
 37971                                  
 37972 00005C37 803E[5898]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 37973                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 37974 00005C3C 750C                    	jne	short $MIF377			;;AN000;; No
 37975                                  
 37976 00005C3E 3C0D                    	cmp	al,13				;;AN000;; Is hour less than 12?
 37977 00005C40 7C02                    	jnge	short $MIF378 ; jl
 37978 00005C42 2C0C                    	sub	al,12				;;AN000;; Set to a 12 hour value
 37979                                  $MIF378:
 37980                                  	;cmp	al,0				;;AN000;; Is hour less than 12?
 37981                                  	;jne	short $MIF380			;;AN000;; No
 37982                                  	; 12/04/2023
 37983 00005C44 20C0                    	and	al,al
 37984 00005C46 7502                    	jnz	short $MIF380	
 37985 00005C48 B00C                    	mov	al,12				;;AN000;; Set to a 12 hour value
 37986                                  $MIF380:
 37987                                  $MIF377:
 37988                                  $MIF376:
 37989 00005C4A E8BEFB                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to ASCII
 37990 00005C4D 55                      	push	bp				;;AN000;; Restore return address
 37991 00005C4E C3                      	retn					;;AN000;; Return
 37992                                  
 37993                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37994                                  ;;
 37995                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37996                                  
 37997                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37998                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37999                                  $M_GET_TIME:
 38000                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 38001                                  	;mov	al,0 				;;AN000;; Get current country info
 38002                                  	; 12/04/2023
 38003 00005C4F B80038                  	mov	ax,3800h
 38004                                  	;
 38005 00005C52 8D16[4798]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38006                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 38007 00005C56 CD21                    	int	21h				;;AN000;;
 38008 00005C58 7310                    	jnc	short $MIF384
 38009                                  
 38010 00005C5A C706[5898]0100          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],1 ; $M_DEF_TIME_FORM
 38011                                  	;mov	word [$M_RT+93],1		;;AN000;; Set default time format (BH)
 38012 00005C60 C606[5498]3A            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],':' ; $M_DEF_TIME_SEP
 38013                                  	;mov	byte [$M_RT+89],':'		;;AN000;; Set default time separator (BL)
 38014 00005C65 C606[5098]2E            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],'.' ; $M_DEF_DECI_SEP
 38015                                  	;mov	byte [$M_RT+85],'.'		;;AN000;; Set default time separator (BL)		
 38016                                  $MIF384:
 38017 00005C6A C3                      	retn					;;AN000;;
 38018                                  
 38019                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38020                                  ;;
 38021                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38022                                  
 38023                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38024                                  
 38025                                  ; 12/04/2023 
 38026                                  ;; ($M_CONVERTTIME is same with $M_CONVERTDATE)
 38027                                  %if 0
 38028                                  $M_CONVERTTIME:
 38029                                  $M_CONVERTDATE: ; *!*!  ; 12/04/2023
 38030                                  	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38031                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 38032                                  	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 38033                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 38034                                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 38035                                  	dec	cx				;;AN000;; Test if size only grew by 1
 38036                                  	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 38037                                  	jne	short $MIF386			;;AN000;; No
 38038                                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 38039                                  	push	ax				;;AN000;; Save it
 38040                                  	inc	cx				;;AN000;; Count itount it
 38041                                  $MIF386:
 38042                                  	inc	cx				;;AN000;; Restore CX
 38043                                  	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38044                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 38045                                  	retn
 38046                                  %endif
 38047                                  
 38048                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38049                                  ;;
 38050                                  ;;	PROC NAME: $M_WAIT_FOR_INPUT
 38051                                  ;;
 38052                                  ;;	FUNCTION:  To accept keyed input and return extended key value
 38053                                  ;;		   in AX register
 38054                                  ;;	INPUTS:    DL contains the DOS function requested for input
 38055                                  ;;	OUTPUTS:   AX contains the extended key value that was read
 38056                                  ;;	REGS USED:
 38057                                  ;;
 38058                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38059                                  
 38060                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38061                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6123h
 38062                                  $M_WAIT_FOR_INPUT:
 38063 00005C6B 51                      	push	cx				;;AN000;; Save CX
 38064 00005C6C 52                      	push	dx				;;AN000;; Save DX
 38065 00005C6D 1E                      	push	ds				;;AN000;; Save Data segment
 38066                                  
 38067 00005C6E 80FAC0                  	cmp	dl,0C0h ; DOS_CLR_KEYB_BUF_MASK	;;AN001;; Are we to clear the keyboard buffer?
 38068 00005C71 7608                    	jna	short $MIF388	; jbe		;;AN001;; No,
 38069                                  						;;AN001;; Yes,
 38070 00005C73 88D0                    	mov	al,dl				;;AN001;; Mov function into AL
 38071 00005C75 240F                    	and	al,0Fh	; LOW_NIB_MASK		;;AN001;; Mask out the C in high nibble
 38072 00005C77 B40C                    	mov	ah,0Ch	; DOS_CLR_KEYB_BUF 	;;AN001;; Set input function
 38073 00005C79 EB02                    	jmp	short $MEN388
 38074                                  $MIF388:
 38075 00005C7B 88D4                    	mov	ah,dl				;;AN000;; Put DOS function in AH
 38076                                  $MEN388:
 38077 00005C7D 06                      	push	es				;;AN000;; Get output buffer segment
 38078 00005C7E 1F                      	pop	ds				;;AN000;;
 38079 00005C7F 89FA                    	mov	dx,di				;;AN000;; Get output buffer offset in case needed
 38080 00005C81 CD21                    	int	21h				;;AN000;; Get keyboard input
 38081 00005C83 1F                      	pop	ds				;;AN000;;
 38082 00005C84 80FA0A                  	cmp	dl,0Ah	; DOS_BUF_KEYB_INP	;;AN000;;
 38083                                  	;clc					;;AN000;;
 38084 00005C87 7412                    	je	short $MIF391
 38085 00005C89 E85BFB                  	call	$M_IS_IT_DBCS			;;AN000;; Is this character DBCS?
 38086 00005C8C 730B                    	jnc	short $MIF392
 38087 00005C8E 88C1                    	mov	cl,al				;;AN000;; Save first character
 38088 00005C90 88D4                    	mov	ah,dl				;;AN001;; Get back function
 38089 00005C92 CD21                    	int	21h				;;AN000;; Get keyboard input
 38090 00005C94 88CC                    	mov	ah,cl				;;AN000;; Retreive first character  AX = xxxx
 38091 00005C96 F8                      	clc					;;AN000;; Clear carry condition
 38092 00005C97 EB02                    	jmp	short $MEN392
 38093                                  $MIF392:
 38094 00005C99 B400                    	mov	ah,0				;;AN000;; AX = 00xx where xx is SBCS
 38095                                  $MEN392:
 38096                                  $MIF391:
 38097                                  	;jc	short $MIF396 ; 15/06/2023
 38098 00005C9B 5A                      	pop	dx				;;AN000;;
 38099 00005C9C 59                      	pop	cx				;;AN000;;
 38100                                  	;jmp	short $MEN396
 38101 00005C9D C3                      	retn
 38102                                  
 38103                                  	; 15/06/2023
 38104                                  ;$MIF396:
 38105                                  	;add	sp,4				;;AN000;;
 38106                                  	;stc					;;AN000;; Reset carry flag
 38107                                  ;$MEN396:
 38108                                  	;retn					;;AN000;; Return
 38109                                  
 38110                                  ; ----------------------------
 38111                                  ; MSDOS 6.0, TPRINTF.ASM, 1991
 38112                                  ; ----------------------------
 38113                                  ; include msgdcl.inc
 38114                                  ; ----------------------------
 38115                                  
 38116                                  ;============================================================================
 38117                                  ; HIGHLOAD.INC, MSDOS 6.0, 1992
 38118                                  ;============================================================================
 38119                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38120                                  
 38121                                  ;****************************************************************************
 38122                                  ;
 38123                                  ; This file contains routines needed to parse and implement user-given
 38124                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 38125                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 38126                                  ; the variables in highvar.inc, for use by the rest of the routines.
 38127                                  ;
 38128                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 38129                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 38130                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 38131                                  ;    DH/LH module opts
 38132                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 38133                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 38134                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 38135                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 38136                                  ; available during the load.
 38137                                  ;
 38138                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 38139                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 38140                                  ; upper-memory block which was not specified by the user... in addition, if
 38141                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 38142                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 38143                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 38144                                  ; free any UMBs so allocated.
 38145                                  ;
 38146                                  ; When a device driver loads, there is the additional problem of allocating its
 38147                                  ; initial load site; this should be restricted to the first UMB specified on
 38148                                  ; the command-line.  The function FreezeUM temporarily allocates all remaining
 38149                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 38150                                  ; UMB.  Then the initial allocation may be made, and a call to UnFreeze will
 38151                                  ; return any so-allocated memory elements to FREE, for the true load.  Note
 38152                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 38153                                  ;
 38154                                  ;****************************************************************************
 38155                                  
 38156                                  ;___PROCEDURES_______________________________________________________________
 38157                                  ;
 38158                                  ;   AddrToUmb   - converts a segment address in AX to its appropriate UMB #
 38159                                  ;   BigFree     - makes ES:0 point to the largest free MCB in UMB given as AL
 38160                                  ;   FixMem      - scans the UM chain and concatenates adjacent free MCBs
 38161                                  ;   FreezeUM    - Marks FROZEN all UM elements now FREE, save those in load UMB
 38162                                  ;   GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 38163                                  ;   GetLoadUMB  - Returns the load UMB number in AL (-1 if not specified)
 38164                                  ;   GetSize     - Returns the UMB in AL's minimum size (0 if not specified)
 38165                                  ;   GetXNum     - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 38166                                  ;   HideUMBs    - links UMBs and hides upper-memory as appropriate
 38167                                  ;   InitVar     - initializes all the variables used in ParseVar and HideUMBs
 38168                                  ;   NextMCB     - moves an MCB pointer forward to the next MCB
 38169                                  ;   ParseVar    - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 38170                                  ;   PrTable     - produces a printout of the variables in highvar.inc
 38171                                  ;   StoLoadSize - Overrides the load UMB minimum size with what's in AX
 38172                                  ;   StoLoadUMB  - Overrides the load UMB number with what's in AL
 38173                                  ;   UmbHead     - returns in AX the address of the first UMB block (0x9FFF)
 38174                                  ;   UnFreeze    - Marks FROZEN elements as FREE
 38175                                  ;
 38176                                  ;___VARIABLES________________________________________________________________
 38177                                  ;
 38178                                  ;   gnradix     - After a call to GetXNum, is 16 or 10, depending on the # read
 38179                                  ;
 38180                                  ;   Internal:
 38181                                  ;___PROCEDURES_______________________________________________________________
 38182                                  ;
 38183                                  ;   convUMB     - checks after GetXNum to convert an address to a UMB number
 38184                                  ;   findUMB     - makes ES:0 point to the first MCB in UMB given as AL
 38185                                  ;   fm_link     - links UMBs not already linked in
 38186                                  ;   fm_unlink   - unlinks UMBs if fm_umb is set to 0
 38187                                  ;   frezMCB     - marks as 8+FROZEN the MCB at ES:0
 38188                                  ;   hideMCB     - marks as HIDDEN the MCB at ES:0
 38189                                  ;   hideUMB     - marks as HIDDEN all FREE elements in UMB passed as AL
 38190                                  ;   hideUMB?    - hides as appropriate the UMB in CL
 38191                                  ;   hl_unlink   - unlinks UMBs if fm_umb is set to 0; restores strategy too
 38192                                  ;   incArgc     - increments fm_argc, for use with LH command-line parsing
 38193                                  ;   isEOL       - returns with ZF set iff AL contains CR or LF, or 0
 38194                                  ;   isFreeMCB   - returns with ZF set if current MCB (ES:0) is FREE
 38195                                  ;   isFrozMCB   - returns with ZF set if current MCB (ES:0) is FROZEN
 38196                                  ;   isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 38197                                  ;   isSysMCB    - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 38198                                  ;   isTiny      - returns with ZF set if user didn't specify /S
 38199                                  ;   isWhite     - returns with ZF set iff AL contains whitespace (or "=")
 38200                                  ;   loadLow     - returns AL==0 if UMB0 == 0, else AL==1
 38201                                  ;   mul32       - multiplies the number in DX:AX by gnradix
 38202                                  ;   parseL      - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 38203                                  ;   setUMBs     - links umbs and sets allocation strategy for a load
 38204                                  ;   shrinkMCB   - breaks an MCB into two pieces, the lowest one's size==AX
 38205                                  ;   stowSiz     - marks a given UMB as having a given minimum size
 38206                                  ;   stowUMB     - marks a given UMB as used, if it hasn't been so marked before
 38207                                  ;   toDigit     - converts a character-digit to its binary counterpart
 38208                                  ;   toPara      - divides DX:AX by 16; result in AX only
 38209                                  ;   toUpper     - accepts one argument (probly a register), and upper-cases it.
 38210                                  ;   unHideMCB   - marks as FREE the MCB at ES:0
 38211                                  ;   unMarkUMB   - marks a given UMB as unused, even if previously marked used
 38212                                  ;
 38213                                  ;****************************************************************************
 38214                                  
 38215                                  ;DOS_CHECK_STRATEGY equ 5800h ; Int 21h, Func 58h, Svc 0 = check alloc strat
 38216                                  ;DOS_SET_STRATEGY   equ 5801h ; Int 21h, Func 58h, Svc 1 = set alloc strategy
 38217                                  ;DOS_CHECK_UMBLINK  equ 5802h ; Int 21h, Func 58h, Svc 2 = check link state
 38218                                  ;DOS_SET_UMBLINK    equ 5803h ; Int 21h, Func 58h, Svc 3 = set link state
 38219                                  ;DOS_GET_DOS_LISTS  equ   52h ; Int 21h, Func 52h = return list of lists
 38220                                  ;DOS_UMB_HEAD       equ   8Ch ; Offset from ES (after func52h) to get UMBHead
 38221                                  
 38222                                  ; -----------------------------------------------------------------------------
 38223                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 38224                                  ; -----------------------------------------------------------------------------
 38225                                  ; ENTRY:       None
 38226                                  ; EXIT:        Variables listed in highvar.inc are initialized
 38227                                  ; ERROR EXIT:  None
 38228                                  ; USES:        Flags, variables in highvar.inc
 38229                                  ; -----------------------------------------------------------------------------
 38230                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 38231                                  ; are largely ignored, but it is initialized nonetheless.
 38232                                  ; -----------------------------------------------------------------------------
 38233                                  
 38234                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38235                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:615Fh
 38236                                  InitVar:	; proc	near
 38237                                  	;push	ax
 38238                                  	;push	cx
 38239                                  	;push	di
 38240 00005C9E 06                      	push	es ; * es = ds
 38241 00005C9F 8E06[D19B]              	mov	es,[RESSEG]		;Point ES into appropriate data segment
 38242 00005CA3 31C0                    	xor	ax,ax
 38243                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 38244                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 38245 00005CA5 26A3[3005]              	mov	[es:fInHigh],ax ; 16/06/2023
 38246 00005CA9 26A3[3205]              	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 38247 00005CAD 26C606[3405]FF          	mov	byte [es:UmbLoad],0FFh ;UNSPECIFIED
 38248                                  					;Later is the # of the 1st spec'd UMB
 38249 00005CB3 26A2[3705]              	mov	[es:fm_argc],al		;Start with zero args having been read
 38250                                  
 38251 00005CB7 FC                      	cld
 38252                                  
 38253 00005CB8 B91000                  	mov	cx,16 ; MAXUMB		;For each entry
 38254 00005CBB BF[5E04]                	mov	di,UmbUsed		;on the UmbUsed array,
 38255 00005CBE F3AA                    	rep	stosb			;	Store 0
 38256                                  
 38257                                  	;mov	cx,16 ; MAXUMB		;Okay... for each entry
 38258 00005CC0 B110                    	mov	cl,16
 38259 00005CC2 BF[6E04]                	mov	di,UmbSize		;on the UmbSize array,
 38260 00005CC5 F3AB                    	rep	stosw			;	Store 0
 38261                                  
 38262 00005CC7 07                      	pop	es ; * es = ds
 38263                                  	;pop	di
 38264                                  	;pop	cx
 38265                                  	;pop	ax
 38266 00005CC8 C3                       	retn
 38267                                  
 38268                                  ;InitVar endp
 38269                                  
 38270                                  ; -----------------------------------------------------------------------------
 38271                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 38272                                  ; -----------------------------------------------------------------------------
 38273                                  ; ENTRY   : None
 38274                                  ; EXIT    : None
 38275                                  ; ERROR   : None
 38276                                  ; USES    : Flags, fm_umb, fm_strat
 38277                                  ; -----------------------------------------------------------------------------
 38278                                  
 38279                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38280                                  FixMem:
 38281                                  	;push	ax
 38282                                  	;push	bx
 38283                                  	;push	cx
 38284                                  	;push	dx
 38285 00005CC9 06                      	push	es
 38286                                  
 38287 00005CCA E84900                  	call	fm_link			; Link in UMBs
 38288                                  
 38289 00005CCD E82302                  	call	UmbHead			; Get first upper-memory MCB address (0x9FFF)
 38290 00005CD0 723F                    	jc	short fmX		; (if couldn't get it, leave now).
 38291                                  
 38292 00005CD2 8EC0                    	mov	es,ax			; It returns in AX, so move it to ES.
 38293                                  
 38294                                  ; - Walk MCB Chain ------------------------------------------------------------
 38295                                  
 38296 00005CD4 31D2                    	xor	dx,dx			; We're keeping the address of the last MCB
 38297 00005CD6 89D1                    	mov 	cx,dx			; in CX... and the last owner
 38298 00005CD8 42                      	inc	dx			; in dx as we go through the loop:
 38299                                  
 38300                                  ; ------------------------------------------
 38301                                  ; FM10--DX  = last MCB's owner's PSP address
 38302                                  ;       CX  = last MCB's address (segment)
 38303                                  ; ------------------------------------------
 38304                                  
 38305                                  fm10:	
 38306 00005CD9 26A00000                	mov	al,[es:arena_signature]	; if 'Z', don't repeat loop
 38307                                  	;mov	al,[es:0]
 38308 00005CDD 268B1E0100              	mov	bx,[es:arena_owner]	; if not zero, do nothing
 38309                                  	;mov	bx,[es:1]
 38310 00005CE2 09D3                    	or	bx,dx			; dx was owner of previous MCB
 38311 00005CE4 7516                    	jnz	short fm30		; If not both zero, don't cat.
 38312                                  
 38313                                  ; - Coalesce memory blocks at ES:00 and CX:00 ---------------------------------
 38314                                  
 38315                                  fm20:	
 38316 00005CE6 268B1E0300              	mov	bx,[es:arena_size]	; Grab this block's Size,
 38317                                  	;mov	bx,[es:3]
 38318 00005CEB 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 38319 00005CED 26A20000                	mov	[es:arena_signature], al ; & move the SECOND sig here
 38320                                  	;mov	[es:0],al
 38321                                  
 38322 00005CF1 26031E0300              	add	bx,[es:arena_size]	; Size += first MCB's size
 38323                                  	;add	bx,1			; And add one for the header
 38324 00005CF6 43                      	inc	bx
 38325 00005CF7 26891E0300              	mov	[es:arena_size],bx	; Write the size
 38326                                  
 38327                                  	; ---------------------------------------------------------------------
 38328                                  fm30:	
 38329 00005CFC 8CC1                    	mov	cx,es			; Put this address on the stack
 38330 00005CFE 268B160100              	mov	dx,[es:arena_owner]	; And remember its owner
 38331                                  	;mov	dx,[es:1]
 38332                                  
 38333                                  	;NextMCB es,bx			; Move to the next MCB
 38334                                  	
 38335 00005D03 8CC3                    	mov	bx,es
 38336                                  	;add	bx,[es:3]
 38337 00005D05 26031E0300              	add	bx,[es:arena_size]
 38338 00005D0A 43                      	inc	bx
 38339 00005D0B 8EC3                    	mov	es,bx
 38340                                  
 38341                                  	;cmp	al,'Z'	; cmp al,5Ah
 38342 00005D0D 3C5A                    	cmp	al,arena_signature_end
 38343 00005D0F 75C8                    	jnz	short fm10		; If signature != 'Z', there are more.
 38344                                  fmX:	
 38345 00005D11 E81900                  	call	fm_unlink		; Unlink UMBs
 38346                                  
 38347 00005D14 07                      	pop	es
 38348                                  	;pop	dx
 38349                                  	;pop	cx
 38350                                  	;pop	bx
 38351                                  	;pop	ax
 38352 00005D15 C3                      	retn
 38353                                  
 38354                                  ; -----------------------------------------------------------------------------
 38355                                  ; 16/06/2023
 38356                                  
 38357                                  ;INT 21h - DOS 5+ - GET OR SET UMB LINK STATE
 38358                                  ; .......................................................
 38359                                  ;     AH = 58h
 38360                                  ;     AL = subfunction
 38361                                  ;	02h get UMB link state
 38362                                  ;	    Return:
 38363                                  ;		AL = current link state
 38364                                  ;		  00h - UMBs not part of DOS memory chain
 38365                                  ;		  01h - UMBs in DOS memory chain
 38366                                  ;	03h set UMB link state
 38367                                  ;	    BX = new link state
 38368                                  ;		0000h - remove UMBs from DOS memory chain
 38369                                  ;		0001h - add UMBs to DOS memory chain
 38370                                  ;
 38371                                  ;Return: CF clear if successful
 38372                                  ;	CF set on error
 38373                                  ;	AX = error code (01h) (see #01680)
 38374                                  ; .......................................................
 38375                                  
 38376                                  ; -----------------------------------------------------------------------------
 38377                                  ;*** fm_link - links UMBs not already linked in
 38378                                  ; -----------------------------------------------------------------------------
 38379                                  ; ENTRY:    None
 38380                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 38381                                  ; ERROR:    None
 38382                                  ; USES:     AX, BX, fm_umb
 38383                                  ; -----------------------------------------------------------------------------
 38384                                  
 38385                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38386                                  fm_link:
 38387 00005D16 B80258                  	mov	ax,5802h ; DOS_CHECK_UMBLINK
 38388 00005D19 CD21                    	int	21h			; Current link-state is now in al
 38389                                  
 38390                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 38391                                  
 38392                                  	;push	es
 38393                                  	;mov	es,[RESSEG]
 38394                                  	;mov	[es:fm_umb],al
 38395                                  	;pop	es
 38396 00005D1B 1E                      	push	ds
 38397 00005D1C 8E1E[D19B]              	mov	ds,[RESSEG]
 38398 00005D20 A2[3505]                	mov	[fm_umb],al
 38399 00005D23 1F                      	pop	ds
 38400                                  
 38401 00005D24 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 38402 00005D27 BB0100                  	mov	bx,1
 38403 00005D2A CD21                    	int	21h
 38404 00005D2C C3                      	retn
 38405                                  
 38406                                  ; -----------------------------------------------------------------------------
 38407                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 38408                                  ; -----------------------------------------------------------------------------
 38409                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 38410                                  ; EXIT:     None
 38411                                  ; ERROR:    None
 38412                                  ; USES:     AX, BX
 38413                                  ; -----------------------------------------------------------------------------
 38414                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38415                                  fm_unlink:
 38416 00005D2D 31DB                    	xor	bx,bx
 38417                                  	
 38418                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 38419                                  
 38420 00005D2F 1E                      	push    ds
 38421 00005D30 8E1E[D19B]              	mov     ds,[RESSEG]
 38422 00005D34 8A1E[3505]              	mov     bl,[fm_umb]
 38423 00005D38 1F                      	pop     ds
 38424                                  	
 38425 00005D39 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 38426 00005D3C CD21                    	int	21h			; so just use that, and call int 21h
 38427 00005D3E C3                      	retn
 38428                                  
 38429                                  ; -----------------------------------------------------------------------------
 38430                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 38431                                  ; laid out in highvar.inc
 38432                                  ; -----------------------------------------------------------------------------
 38433                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 38434                                  ; EXIT:     ES:SI points to first character in child program name
 38435                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 38436                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 38437                                  ; -----------------------------------------------------------------------------
 38438                                  ; Error codes (in AX if carry set on return):
 38439                                  ;
 38440                                  
 38441                                  ;PV_InvArg	equ	1	; Invalid argument passed
 38442                                  ;PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 38443                                  ;PV_InvSwt	equ	3	; Unrecognized switch passed
 38444                                  
 38445                                  ;
 38446                                  ; This routine exects ES:SI to point to a string much like the following:
 38447                                  ;    "/S/L:1,200;2 module options"
 38448                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 38449                                  ; required, though that's what this routine is supposed to parse.
 38450                                  ;
 38451                                  
 38452                                  ;optS		equ	'S'	; /S
 38453                                  ;optL		equ	'L'	; /L:...
 38454                                  
 38455                                  ;
 38456                                  ; -----------------------------------------------------------------------------
 38457                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 38458                                  ; a command-line for spawning a child process. For a typical LH command, say,
 38459                                  ;     lh /l:1,1000;2 print/d:lpt2
 38460                                  ; the arguments would look like (one per line):
 38461                                  ;     lh
 38462                                  ;     /l
 38463                                  ;     1
 38464                                  ;     1000
 38465                                  ;     2
 38466                                  ;     print
 38467                                  ;     /d
 38468                                  ;     :lpt2
 38469                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 38470                                  ; arg was the filename. So, inside this routine, we keep a running counter
 38471                                  ; of the number of arguments LH will need to skip in order to get to the
 38472                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 38473                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 38474                                  ; for:
 38475                                  ;    Each /L
 38476                                  ;    Each /S (there should be only one)
 38477                                  ;    Each UMB number (they follow ":" or ";")
 38478                                  ;    Each UMB size   (they follow ",")
 38479                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 38480                                  ; "print". Note that InitVar initializes fm_argc to zero.
 38481                                  ; -----------------------------------------------------------------------------
 38482                                  
 38483                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38484                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6216h
 38485                                  ParseVar:	; proc	near
 38486                                  	;push	di
 38487                                  	;push	ds ; *
 38488                                  	;push	es
 38489                                  	;
 38490                                  	; 16/06/2023
 38491                                  	; es = ds (from 'ParseLhCmd')
 38492                                  	;push	es		; Make DS:SI point to it, as well as ES:SI
 38493                                  	;pop	ds		; (regardless if we're in devhigh or loadhigh)
 38494                                  	
 38495 00005D3F FC                      	cld
 38496                                  
 38497                                  ; ------------------------------------------------
 38498                                  ; PV10--ES:SI = any whitespace on the command-line
 38499                                  ; ------------------------------------------------
 38500                                  
 38501                                  pv10:	
 38502 00005D40 AC                      	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 38503 00005D41 E8A800                  	call	isWhite
 38504 00005D44 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 38505 00005D46 3C2F                    	cmp	al,'/' ; SWTCH
 38506 00005D48 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 38507                                  
 38508 00005D4A 4E                      	dec	si		; Backup--it's now "odule options", and we need
 38509 00005D4B F8                      	clc			; that "m" we just read (or whatever it is).
 38510 00005D4C EB2C                    	jmp	short pvX	; Then return with carry clear == we're done.
 38511                                  pv20:
 38512 00005D4E AC                      	lodsb			; Just read 'S' or 'L', hopefully
 38513                                  
 38514                                  	;toUpper al		; So we make it upper-case, and...
 38515 00005D4F 24DF                    	and	al,0DFh
 38516                                  
 38517 00005D51 3C53                    	cmp	al,'S' ; optS	; just read 'S'?
 38518 00005D53 7510                    	jne	short pv30
 38519                                  
 38520 00005D55 E87E00                  	call	incArgc		; If it's /S, it's another arg for LH to skip.
 38521                                  
 38522                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 38523                                  
 38524                                  	;push	es
 38525                                  	;mov	es,[RESSEG]
 38526                                  	;mov	byte [es:fUmbTiny],1
 38527                                  	;pop	es
 38528 00005D58 1E                      	push	ds
 38529 00005D59 8E1E[D19B]              	mov	ds,[RESSEG]
 38530 00005D5D C606[3105]01            	mov	byte [fUmbTiny],1
 38531 00005D62 1F                      	pop	ds
 38532                                  
 38533 00005D63 EBDB                    	jmp	short pv10	; possibly even "/L...".
 38534                                  pv30:	
 38535 00005D65 3C4C                    	cmp	al,'L' ; optL	; If it's not 'L' either, then it's a bad
 38536 00005D67 750B                    	jne	short pvE1	; switch!
 38537                                  
 38538 00005D69 E86A00                  	call	incArgc		; If it's /L, it's another arg for LH to skip.
 38539                                  
 38540 00005D6C E80C00                  	call	parseL
 38541 00005D6F 73CF                    	jnc	short pv10	; If no carry, go back and look for more
 38542                                  
 38543 00005D71 4E                      	dec	si		; Else, back up and exit.
 38544 00005D72 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 38545                                  pvE1:	
 38546 00005D74 B80300                  	mov	ax,3 ; PV_InvSwt
 38547                                  				; Unrecognized switch passed
 38548                                  pvErr:
 38549 00005D77 4E                      	dec	si
 38550 00005D78 4E                      	dec	si
 38551 00005D79 F9                      	stc
 38552                                  pvX:	
 38553                                  	;pop	es
 38554                                  	;pop	ds ; *
 38555                                  	;pop	di
 38556 00005D7A C3                      	retn
 38557                                  
 38558                                  ;ParseVar endp
 38559                                  
 38560                                  ; -----------------------------------------------------------------------------
 38561                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 38562                                  ; -----------------------------------------------------------------------------
 38563                                  ; ENTRY:    ES:SI points to colon
 38564                                  ; EXIT:     ES:SI points to first character not parsed
 38565                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 38566                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 38567                                  ; -----------------------------------------------------------------------------
 38568                                  ; If the string here is terminated with anything other than whitespace or a
 38569                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 38570                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 38571                                  ; makes sure the app /L: is reported as being the culprit.
 38572                                  ; -----------------------------------------------------------------------------
 38573                                  
 38574                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38575                                  parseL:
 38576 00005D7B AC                      	lodsb
 38577 00005D7C 3C3A                    	cmp	al,':'		; Make sure they did /L:
 38578 00005D7E 754A                    	jne	short plE1	; If they didn't, return with carry set.
 38579                                  
 38580                                  ; ------------------------------------------
 38581                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 38582                                  ; ------------------------------------------
 38583                                  
 38584                                  pl10:
 38585 00005D80 E8FD00                  	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 38586 00005D83 724B                    	jc	short plE2	; And error if it's a bad number.
 38587 00005D85 E8C801                  	call	convUMB		; Convert any address to a UMB number
 38588                                  
 38589 00005D88 88C1                    	mov	cl,al	; !*	; Remember the UMB number
 38590 00005D8A E88300                  	call	stowUMB		; Mark this UMB # as used;
 38591 00005D8D 7241                    	jc	short plE2	; If it was already marked, it'll error
 38592                                  
 38593 00005D8F E84400                  	call	incArgc		; Each UMB number is another arg for LH to skip
 38594                                  
 38595 00005D92 AC                      	lodsb
 38596 00005D93 3C3B                    	cmp	al,';'		; Did "umb;" ?
 38597 00005D95 74E9                    	je	short pl10	; Yep: go back and get another UMB.
 38598                                  
 38599 00005D97 E85200                  	call	isWhite		; Did "umb " ?
 38600 00005D9A 7439                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 38601                                  
 38602 00005D9C E84200                  	call	isEOL		; Did "umb" ?
 38603 00005D9F 7433                    	jz	short plSwX	; If so, backup and exit like everything's ok
 38604                                  
 38605 00005DA1 3C2F                    	cmp	al,'/' ; SWTCH	; Did "umb/" ? (as in, "/L:1,100;2/S")
 38606 00005DA3 742F                    	je	short plSwX	; If so, back up ES:SI one character and return
 38607                                  
 38608 00005DA5 3C2C                    	cmp	al,','		; Did "umb," ?
 38609 00005DA7 7521                    	jne	short plE1	; Just what the heck DID they do? Return error.
 38610                                  
 38611                                  ; --- Read a size -------------------------------------------------------------
 38612                                  
 38613 00005DA9 E8D400                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 38614 00005DAC 721C                    	jc	short plE1	; And error if it's a bad size.
 38615                                  
 38616 00005DAE E83401                  	call	toPara		; Convert from bytes to paragraphs
 38617                                  
 38618 00005DB1 E88600                  	call	stowSiz		; CL still has the UMB number for this routine
 38619                                  
 38620 00005DB4 E81F00                  	call	incArgc		; Each UMB size is another arg for LH to skip
 38621                                  
 38622 00005DB7 AC                      	lodsb
 38623 00005DB8 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 38624 00005DBA 74C4                    	je	short pl10		;
 38625                                  
 38626 00005DBC E82D00                  	call	isWhite		; Did it end with whitespace?
 38627 00005DBF 7414                    	jz	short plX	; If so, we're done here--go back.
 38628                                  
 38629 00005DC1 E81D00                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 38630 00005DC4 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 38631                                  
 38632 00005DC6 3C2F                    	cmp	al,'/' ; SWTCH	; Did they do "umb,size/" ?
 38633 00005DC8 740A                    	je	short plSwX	; If so, again, we're done here.
 38634                                  plE1:	
 38635 00005DCA B80100                  	mov	ax,1 ; PV_InvArg
 38636                                  				; If not, we don't know WHAT they did...
 38637 00005DCD 4E                      	dec	si
 38638 00005DCE F9                      	stc
 38639 00005DCF C3                      	retn
 38640                                  plE2:
 38641                                  	; cf = 1 
 38642 00005DD0 B80200                  	mov	ax,2 ; PV_BadUMB
 38643                                  				; In this case, they've specified a UMB twice
 38644                                  	;stc
 38645 00005DD3 C3                      	retn
 38646                                  plSwX:
 38647 00005DD4 4E                      	dec	si		; If we hit a '/' character, back up one char
 38648                                  				; so the whitespace checker will see it too.
 38649                                  plX:
 38650                                  	; cf = 0
 38651                                  	;clc			; Then just return with carry clear, so
 38652 00005DD5 C3                      	retn			; ParseVar will go about its business.
 38653                                  
 38654                                  ; -----------------------------------------------------------------------------
 38655                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 38656                                  ; -----------------------------------------------------------------------------
 38657                                  ; ENTRY:    None
 38658                                  ; EXIT:     None
 38659                                  ; ERROR:    None
 38660                                  ; USES:     fm_argc, flags
 38661                                  ; -----------------------------------------------------------------------------
 38662                                  
 38663                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38664                                  incArgc:
 38665                                  	;push	ax
 38666                                  
 38667                                  	;;getdata al,fm_argc	; Obtain previous value of fm_argc,
 38668                                  	;
 38669                                  	;push	ds		; getdata (macro)
 38670                                  	;			; getdata al, fm_argc
 38671                                  	;mov	ds,[RESSEG]
 38672                                  	;mov	al,[fm_argc]	; Obtain previous value of fm_argc,
 38673                                  	;pop	ds
 38674                                  	;
 38675                                  	;inc	al		; Increment it,
 38676                                  	;
 38677                                  	;;putdata fm_argc,al	; And store it right back.
 38678                                  	;
 38679                                  	;push	es		; putdata (macro)
 38680                                  	;			; putdata fm_argc, al
 38681                                  	;mov	es,[RESSEG]
 38682                                  	;mov	[es:fm_argc],al	; and store it right back.
 38683                                  	;pop	es
 38684                                  
 38685                                  	; 16/06/2023
 38686 00005DD6 1E                      	push	ds
 38687 00005DD7 8E1E[D19B]              	mov	ds,[RESSEG]
 38688 00005DDB FE06[3705]              	inc	byte [fm_argc]	; increment fm_argc
 38689 00005DDF 1F                      	pop	ds
 38690                                  
 38691                                  	;pop	ax
 38692 00005DE0 C3                      	retn
 38693                                  
 38694                                  ; -----------------------------------------------------------------------------
 38695                                  ;*** isEOL - returns with ZF set iff AL contains CR or LF, or 0
 38696                                  ; -----------------------------------------------------------------------------
 38697                                  ; ENTRY:    AL contains character to test
 38698                                  ; EXIT:     ZF set if AL contains CR or LF, or 0
 38699                                  ; ERROR:    None
 38700                                  ; USES:     ZF
 38701                                  ; -----------------------------------------------------------------------------
 38702                                  
 38703                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38704                                  isEOL:
 38705                                  	;cmp	al,0		; Null-terminator
 38706 00005DE1 20C0                    	and	al,al
 38707 00005DE3 7406                    	jz	short ieX
 38708 00005DE5 3C0D                    	cmp	al,0Dh ; CR	; Carriage Return
 38709 00005DE7 7402                    	je	short ieX
 38710 00005DE9 3C0A                    	cmp	al,0Ah ; LF	; LineFeed
 38711                                  ieX:
 38712 00005DEB C3                      	retn
 38713                                  
 38714                                  
 38715                                  ; -----------------------------------------------------------------------------
 38716                                  ;*** isWhite - returns with ZF set iff AL contains whitespace (or "=")
 38717                                  ; -----------------------------------------------------------------------------
 38718                                  ; ENTRY:    AL contains character to test
 38719                                  ; EXIT:     ZF set if AL contains space, tab, or equals
 38720                                  ; ERROR:    None
 38721                                  ; USES:     ZF
 38722                                  ; -----------------------------------------------------------------------------
 38723                                  
 38724                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38725                                  isWhite:
 38726 00005DEC 3C20                    	cmp	al,' '		; Space
 38727 00005DEE 7406                    	je	short iwX
 38728 00005DF0 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 38729 00005DF2 7402                    	je	short iwX
 38730 00005DF4 3C09                    	cmp	al,09h ; TAB	; Tab
 38731                                  iwX:
 38732 00005DF6 C3                      	retn
 38733                                  
 38734                                  ; -----------------------------------------------------------------------------
 38735                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 38736                                  ; -----------------------------------------------------------------------------
 38737                                  ; ENTRY:    AL contains UMB number
 38738                                  ; EXIT:     None
 38739                                  ; ERROR:    None
 38740                                  ; USES:     Flags, variables in highvar.inc
 38741                                  ; -----------------------------------------------------------------------------
 38742                                  
 38743                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38744                                  unMarkUMB:
 38745                                  	;;pushreg <ax,bx,di,es>
 38746                                  	;push	ax ; ***
 38747                                  	
 38748                                  	;push	bx ; **
 38749                                  	
 38750                                  	;push	di
 38751                                  	;push	es
 38752 00005DF7 1E                      	push	ds ; *	
 38753                                  
 38754                                  	;;dataseg es
 38755                                  	;mov	es,[RESSEG]
 38756                                  
 38757 00005DF8 8E1E[D19B]              	mov	ds,[RESSEG] ; *
 38758                                  	
 38759                                  	;xor	ah,ah ; 0
 38760                                  	;mov	bx,ax
 38761                                  	;mov	byte [es:bx+UmbUsed],0
 38762                                  	;mov	[bx+UmbUsed],ah ; marks the UMB as unused
 38763 00005DFC 88C3                    	mov	bl,al
 38764 00005DFE 30FF                    	xor	bh,bh ; 0	
 38765 00005E00 88BF[5E04]              	mov	[bx+UmbUsed],bh ; 0 ; **
 38766                                  
 38767                                  	;cmp	[es:UmbLoad],al
 38768                                  	;jnz	short umu10
 38769 00005E04 3806[3405]              	cmp	[UmbLoad],al
 38770 00005E08 7504                    	jne	short umu10
 38771                                  
 38772                                  	;mov	byte [es:UmbLoad],0
 38773                                  	;mov	[UmbLoad],ah	; If unmarked the load UMB, load into convent.
 38774 00005E0A 883E[3405]              	mov	[UmbLoad],bh ; 0 ; **
 38775                                  umu10:	
 38776 00005E0E 1F                      	pop	ds ; *
 38777                                  	;;popreg <es,di,bx,ax>
 38778                                  	;pop	es
 38779                                  	;pop	di
 38780                                  	
 38781                                  	;pop	bx ; **
 38782                                  	
 38783                                  	;pop	ax ; ***
 38784                                  
 38785                                  	;;normseg es
 38786                                  	
 38787 00005E0F C3                      	retn
 38788                                  
 38789                                  ; -----------------------------------------------------------------------------
 38790                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 38791                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 38792                                  ; listed in the /L:... chain.  If it's the first one specified, it sets UmbLoad
 38793                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 38794                                  ; -----------------------------------------------------------------------------
 38795                                  ; ENTRY:    AL contains UMB number, as specified by the user
 38796                                  ; EXIT:     None
 38797                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 38798                                  ; USES:     AX, Flags, variables in highvar.inc
 38799                                  ; -----------------------------------------------------------------------------
 38800                                  
 38801                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38802                                  stowUMB:
 38803 00005E10 3C10                    	cmp	al,16 ; MAXUMB
 38804 00005E12 7202                    	jb	short su10
 38805 00005E14 F9                      	stc
 38806 00005E15 C3                      	retn			; Ooops-- UMB>=MAXUMB
 38807                                  su10:
 38808                                  	;pushreg <bx,di,si,ds,es>
 38809                                  	;dataseg es		; Point ES into appropriate data segment
 38810                                  	;dataseg ds		; Point DS into appropriate data segment
 38811                                  
 38812                                  	;push	bx ; **
 38813                                  	
 38814                                  	;push	di
 38815                                  	;push	si
 38816                                  
 38817 00005E16 1E                      	push	ds ; *
 38818                                  
 38819                                  	;push	es
 38820                                  	;mov	es,[RESSEG]
 38821 00005E17 8E1E[D19B]              	mov	ds,[RESSEG]
 38822                                  
 38823 00005E1B 803E[3405]FF            	cmp	byte [UmbLoad],0FFh ; UNSPECIFIED
 38824                                  				; If this, we haven't been here before
 38825 00005E20 7503                    	jne	short su20
 38826 00005E22 A2[3405]                	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 38827                                  su20:	
 38828 00005E25 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 38829 00005E27 740F                    	jz	short su30	; that we should do here.
 38830                                  
 38831                                  	;mov	bl,al
 38832                                  	;xor	bh,bh
 38833                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 38834 00005E29 30E4                    	xor	ah,ah
 38835 00005E2B 89C3                    	mov	bx,ax
 38836 00005E2D B001                    	mov	al,1
 38837                                  
 38838                                  	;xchg	[es:bx+UmbUsed],al
 38839 00005E2F 8687[5E04]              	xchg	[bx+UmbUsed],al
 38840                                  
 38841 00005E33 08C0                    	or	al,al		; If it was already 1, then al==1... and that
 38842 00005E35 7401                    	jz	short su30	; means an error.
 38843                                  
 38844 00005E37 F9                      	stc			; OOOPS! This one's been used before. :(
 38845                                  su30:	
 38846                                  	;popreg	<es,ds,si,di,bx>
 38847                                  	;normseg ds
 38848                                  	;normseg es
 38849                                  	;retn
 38850                                  
 38851                                  	;pop	es
 38852                                  	
 38853 00005E38 1F                      	pop	ds ; *
 38854                                  	
 38855                                  	;pop	si
 38856                                  	;pop	di
 38857                                  	
 38858                                  	;pop	bx ; **
 38859                                  
 38860 00005E39 C3                      	retn
 38861                                  
 38862                                  ; -----------------------------------------------------------------------------
 38863                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 38864                                  ; -----------------------------------------------------------------------------
 38865                                  ; ENTRY:    CL contains UMB number, AX contains size
 38866                                  ; EXIT:     None
 38867                                  ; ERROR:    None
 38868                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 38869                                  ; -----------------------------------------------------------------------------
 38870                                  	
 38871                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38872                                  stowSiz:
 38873                                  	;pushreg <bx,di,es>
 38874                                  	;dataseg es		; Point ES into appropriate data seg
 38875                                  
 38876                                  	;push	bx ; **
 38877                                  	
 38878                                  	;push	di
 38879                                  	;push	es
 38880                                  	;mov	es,[RESSEG]
 38881 00005E3A 1E                      	push	ds ; *
 38882 00005E3B 8E1E[D19B]              	mov	ds,[RESSEG]
 38883                                  
 38884 00005E3F 88CB                    	mov	bl,cl		; Now bl==UMB number, AX==size
 38885 00005E41 B700                    	mov	bh,0		;     bx==UMB number, AX==size
 38886 00005E43 D0E3                    	shl	bl,1		;     bx==offset into array, AX=size
 38887                                  	;mov	[es:bx+UmbSize],ax
 38888 00005E45 8987[6E04]              	mov	[bx+UmbSize],ax	; Store the size
 38889                                  
 38890 00005E49 1F                      	pop	ds ; *
 38891                                  
 38892                                  	;popreg	<es,di,bx>
 38893                                  	;normseg es		; Return ES to where it was
 38894                                  
 38895                                  	;pop	es
 38896                                  	;pop	di
 38897                                  	
 38898                                  	;pop	bx ; **
 38899                                  
 38900 00005E4A C3                      	retn
 38901                                  
 38902                                  ; -----------------------------------------------------------------------------
 38903                                  ;*** toDigit - converts a character-digit to its binary counterpart
 38904                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 38905                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).  A-F
 38906                                  ; are considered valid iff gnradix is 16.
 38907                                  ; -----------------------------------------------------------------------------
 38908                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 38909                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 38910                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 38911                                  ; USES:     CL, Flags
 38912                                  ; -----------------------------------------------------------------------------
 38913                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 38914                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 38915                                  ; will be 10 or 16.
 38916                                  ; -----------------------------------------------------------------------------
 38917                                  
 38918                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38919                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6358h
 38920                                  gnradix:
 38921 00005E4B 0000                    	dw	0		; Must be a word--16x16 multiplication
 38922                                  
 38923                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38924                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:635Ah
 38925                                  toDigit:
 38926                                  	;cmp	word [gnradix],16
 38927 00005E4D 803E[4B5E]10            	cmp	byte [gnradix],16
 38928 00005E52 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 38929                                  
 38930 00005E54 80F961                  	cmp	cl,'a'
 38931 00005E57 7209                    	jb	short td10
 38932 00005E59 80F966                  	cmp	cl,'f'
 38933 00005E5C 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 38934 00005E5E 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 38935                                  ;	clc			; <- CLC is implicit from last SUB
 38936 00005E61 C3                      	retn
 38937                                  td10:
 38938 00005E62 80F941                  	cmp	cl,'A'
 38939 00005E65 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 38940 00005E67 80F946                  	cmp	cl,'F'
 38941 00005E6A 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 38942 00005E6C 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 38943                                  ;	clc			; <- CLC is implicit from last SUB
 38944                                  tdErr:
 38945 00005E6F C3                      	retn
 38946                                  td20:
 38947 00005E70 80F930                  	cmp	cl,'0'		; If less than zero,
 38948                                  	;jb	short tdE	; Done.
 38949 00005E73 72FA                    	jb	short tdErr ; cf = 1
 38950 00005E75 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 38951 00005E78 7704                    	ja	short tdE	; Done.
 38952 00005E7A 80E930                  	sub	cl,'0'	  ; 30h	; Okay--make '0'==0 and return.
 38953                                  ;	clc			; <- CLC is implicit from last SUB
 38954 00005E7D C3                      	retn
 38955                                  tdE:
 38956 00005E7E F9                      	stc
 38957 00005E7F C3                      	retn
 38958                                  
 38959                                  ; -----------------------------------------------------------------------------
 38960                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 38961                                  ; -----------------------------------------------------------------------------
 38962                                  ; ENTRY:    ES:SI points to an ascii string to scan
 38963                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 38964                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 38965                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 38966                                  ; -----------------------------------------------------------------------------
 38967                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 38968                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 38969                                  ; will be 10 or 16.
 38970                                  ; -----------------------------------------------------------------------------
 38971                                  
 38972                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38973                                  GetXNum:
 38974                                  	;pushreg <bx,cx,ds>
 38975                                  	
 38976                                  	;push	bx ; **
 38977 00005E80 51                      	push	cx ; *
 38978                                  	
 38979                                  	;push	ds
 38980                                  
 38981 00005E81 FC                      	cld
 38982 00005E82 31C0                    	xor	ax,ax
 38983 00005E84 31DB                    	xor	bx,bx
 38984 00005E86 31C9                    	xor	cx,cx
 38985 00005E88 31D2                    	xor	dx,dx		; Start with 0 (makes sense)
 38986                                  
 38987                                  	;mov	word [gnradix],10 ; And default to a radix of 10 (dec)
 38988 00005E8A C606[4B5E]0A            	mov	byte [gnradix],10
 38989                                  
 38990 00005E8F 268A0C                  	mov	cl,[es:si]	; Now AX=0, BX=0, CH=0/CL=char, DX=0
 38991 00005E92 E8B8FF                  	call	toDigit
 38992 00005E95 722D                    	jc	short gxnE	; If it's not a digit, leave now.
 38993                                  
 38994 00005E97 08C9                    	or	cl,cl
 38995 00005E99 7515                    	jnz	short gxn20	; Doesn't have '0x'
 38996 00005E9B 268A4C01                	mov	cl,[es:si+1]
 38997 00005E9F 80F978                  	cmp	cl,'x'		; Either 'x'...
 38998 00005EA2 7405                    	je	short gxn10
 38999 00005EA4 80F958                  	cmp	cl,'X'		; ...or 'X' means it's hexadecimal
 39000 00005EA7 7507                    	jne	short gxn20
 39001                                  
 39002                                  gxn10:
 39003                                  	;mov	word [gnradix],16
 39004 00005EA9 C606[4B5E]10            	mov	byte [gnradix],16
 39005 00005EAE 46                      	inc	si		; Since we read "0x", march over it.
 39006 00005EAF 46                      	inc	si
 39007                                  
 39008                                  ; ------------------------------------------------------
 39009                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 39010                                  ;        DX:AX = current total
 39011                                  ;        BX    = 0
 39012                                  ;        CH    = 0
 39013                                  ; ------------------------------------------------------
 39014                                  
 39015                                  gxn20:
 39016 00005EB0 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 39017 00005EB3 46                      	inc	si
 39018                                  
 39019 00005EB4 E896FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 39020 00005EB7 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 39021                                  
 39022 00005EB9 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 39023 00005EBC 7206                    	jc	short gxnX	; (if it's too big, error out)
 39024                                  
 39025 00005EBE 01C8                    	add	ax,cx		; Add the digit
 39026 00005EC0 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 if last add wrapped
 39027                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 39028                                  	;jmp	short gxn20
 39029 00005EC2 73EC                    	jnc	short gxn20
 39030                                  gxnE:
 39031                                  	; cf = 1
 39032                                  	;stc			; In this case, we need to set the carry
 39033                                  	;jmp	short gxnX	; and leave--there were no digits given.
 39034                                  ;gxnQ:
 39035                                  	;dec	si		; Don't read in the offensive character.
 39036                                  	;clc			; And clear carry, so they know it's okay.
 39037                                  gxnX:
 39038                                  	;popreg	<ds,cx,bx>
 39039                                  
 39040                                  	;pop	ds
 39041                                  
 39042 00005EC4 59                      	pop	cx ; *
 39043                                  	;pop	bx ; **
 39044                                  
 39045 00005EC5 C3                      	retn
 39046                                  gxnQ:
 39047 00005EC6 4E                      	dec	si
 39048 00005EC7 F8                      	clc
 39049 00005EC8 EBFA                    	jmp	short gxnX
 39050                                  
 39051                                  ; -----------------------------------------------------------------------------
 39052                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 39053                                  ; -----------------------------------------------------------------------------
 39054                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 39055                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 39056                                  ; ERROR:   Carry set if number was too large
 39057                                  ; USES:    Flags, AX, DX
 39058                                  ; -----------------------------------------------------------------------------
 39059                                  
 39060                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39061                                  mul32:
 39062 00005ECA 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 39063 00005ECB 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 39064 00005ECD F726[4B5E]              	mul	word [gnradix]	; DX=?,      AX=new:hi, TOS=old:lo, BX=0
 39065 00005ED1 7210                    	jc	short m32E	; Too big?
 39066                                  
 39067 00005ED3 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 39068 00005ED5 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig,   BX=0
 39069                                  
 39070 00005ED6 87D3                    	xchg	dx,bx		; DX=0,      AX=old:lo, TOS=orig,   BX=new:hi
 39071 00005ED8 F726[4B5E]              	mul	word [gnradix]	; DX=carry,  AX=new:lo, TOS=orig,   BX=new:hi
 39072 00005EDC 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 39073 00005EDE 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 39074 00005EE0 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=0
 39075 00005EE2 C3                      	retn
 39076                                  m32E:
 39077 00005EE3 58                      	pop	ax
 39078 00005EE4 C3                      	retn
 39079                                  
 39080                                  ; -----------------------------------------------------------------------------
 39081                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 39082                                  ; -----------------------------------------------------------------------------
 39083                                  ; ENTRY:   DX:AX = the number to be divided
 39084                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 39085                                  ; ERROR:   None
 39086                                  ; USES:    Flags, AX, DX
 39087                                  ; -----------------------------------------------------------------------------
 39088                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 39089                                  ;       can't ensure a 386 host machine. Sorry.
 39090                                  ; -----------------------------------------------------------------------------
 39091                                  
 39092                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39093                                  toPara:
 39094 00005EE5 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 39095                                  
 39096 00005EE6 B104                    	mov	cl,4		;
 39097 00005EE8 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 39098 00005EEA 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 39099 00005EEB B10C                    	mov	cl,12
 39100 00005EED D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 39101 00005EEF 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 39102                                  
 39103 00005EF1 59                      	pop	cx
 39104 00005EF2 C3                      	retn
 39105                                  
 39106                                  ; -----------------------------------------------------------------------------
 39107                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 39108                                  ; -----------------------------------------------------------------------------
 39109                                  ; ENTRY:  Nothing
 39110                                  ; EXIT:   AX contains 0x9FFF for most systems
 39111                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 39112                                  ; USES:   Flags, AX
 39113                                  ; -----------------------------------------------------------------------------
 39114                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 39115                                  ; to be precise, before a UMB provider is around.  In this event, the pointer
 39116                                  ; is always set to 0xFFFF; it changes once a provider is around.  On most
 39117                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 39118                                  ; -----------------------------------------------------------------------------
 39119                                  
 39120                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39121                                  UmbHead:
 39122                                  	;pushreg <si,ds,es>
 39123                                  	
 39124                                  	;push	si
 39125                                  	;push	ds
 39126                                  	;push	es
 39127                                  
 39128 00005EF3 B452                    	mov	ah,52h	; DOS_GET_DOS_LISTS
 39129                                  					; Call int 21h, function 52h...
 39130 00005EF5 CD21                    	int	21h
 39131                                  			; DOS - 2+ internal - GET LIST OF LISTS
 39132                                  			; Return: ES:BX -> DOS list of lists
 39133                                  
 39134                                  	;mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 39135 00005EF7 26A18C00                	mov	ax,[es:8Ch]
 39136 00005EFB 83F8FF                  	cmp	ax,0FFFFh
 39137                                  	;je	short uhE		; If it's 0xFFFF, it's an error...
 39138                                  
 39139                                  	;clc				; Else, it isn't (CLC done by prev cmp)
 39140                                  	;jmp	short uhX
 39141                                  	; 17/06/2023
 39142 00005EFE F5                      	cmc	; cf = 0 <--> cf = 1
 39143                                  uhE:
 39144                                  	;stc
 39145                                  uhX:	
 39146                                  	;popreg	<es,ds,si>
 39147                                  	
 39148                                  	;pop	es
 39149                                  	;pop	ds
 39150                                  	;pop	si
 39151                                  
 39152 00005EFF C3                      	retn
 39153                                  
 39154                                  ; -----------------------------------------------------------------------------
 39155                                  ;*** isSysMCB - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 39156                                  ; -----------------------------------------------------------------------------
 39157                                  ; ENTRY:  ES:0 should point to a valid MCB
 39158                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 39159                                  ; USES:   Flags
 39160                                  ; -----------------------------------------------------------------------------
 39161                                  
 39162                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39163                                  isSysMCB:
 39164                                  	;push	ax
 39165                                  	
 39166                                  	;mov	ax,[es:1]
 39167 00005F00 26A10100                	mov	ax,[es:arena_owner]	; Check the owner...
 39168 00005F04 83F808                  	cmp	ax,8 ; SystemPSPOwner	; 8 (for US OR Japan) is valid
 39169 00005F07 7405                    	jz	short ism10
 39170 00005F09 83F809                  	cmp	ax,9 ; JapanPSPOwner	; 9 (for Japan) is valid
 39171                                  	;jz	short ism10
 39172                                  	;jmp	short ismX		; Anything else isn't.
 39173 00005F0C 7507                    	jnz	short ismX
 39174                                  ism10:
 39175                                  	;mov	ax,[es:8]
 39176 00005F0E 26A10800                	mov	ax,[es:arena_name]	; Check the name...
 39177 00005F12 3D5343                  	cmp	ax,'SC' ; cmp ax,4353h
 39178                                  ismX:
 39179                                  	;pop	ax
 39180 00005F15 C3                      	retn
 39181                                  
 39182                                  ; -----------------------------------------------------------------------------
 39183                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 39184                                  ; -----------------------------------------------------------------------------
 39185                                  ; ENTRY:  AX contains a segment address
 39186                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 39187                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 39188                                  ; USES:   Flags, AX
 39189                                  ; -----------------------------------------------------------------------------
 39190                                  ; An address in the following areas is treated as:
 39191                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 39192                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 39193                                  ;      ...
 39194                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 39195                                  ; -----------------------------------------------------------------------------
 39196                                  
 39197                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39198                                  AddrToUmb:
 39199                                  	;pushreg <cx,dx,es>
 39200                                  	
 39201                                  	;push	cx
 39202                                  	;push	dx
 39203 00005F16 06                      	push	es
 39204                                  
 39205 00005F17 89C2                    	mov	dx,ax		; DX = address to search for
 39206                                  
 39207 00005F19 E8D7FF                  	call	UmbHead		; AX = first segment
 39208 00005F1C 722B                    	jc	short atuE	; If it couldn't get it, error out.
 39209                                  
 39210                                  	;mov	es,ax ; *	; ES = first UMB segment
 39211 00005F1E 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 39212                                  
 39213                                  ; ----------------------------------------
 39214                                  ; ATU10--ES - Current MCB address
 39215                                  ;        DX - Address given for conversion
 39216                                  ;        CX - Current UMB #
 39217                                  ; ----------------------------------------
 39218                                  
 39219                                  	; 17/06/2023
 39220                                  atu10:
 39221 00005F20 8EC0                    	mov	es,ax ; *
 39222                                  ;atu10:
 39223                                  	;mov	ax,es
 39224 00005F22 39D0                            cmp	ax,dx		; Present segment >= given segment?
 39225 00005F24 7326                    	jae	short atuX	; Yep--done.
 39226                                  
 39227 00005F26 E8D7FF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 39228 00005F29 7501                    	jnz	short atu20
 39229                                  
 39230 00005F2B 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 39231                                  atu20:
 39232                                  	;mov	al,[es:0]
 39233 00005F2C 26A00000                	mov	al,[es:arena_signature]
 39234                                  	;cmp	al,'Z' ; 5Ah
 39235 00005F30 3C5A                    	cmp	al,arena_signature_end
 39236 00005F32 740A                    	je	short atu30	; 'Z' means this was the last MCB... that's it.
 39237                                  
 39238                                  	;NextMCB es,ax
 39239 00005F34 8CC0                    	mov	ax,es
 39240                                  	;add	ax,[es:3]	; NextMCB (macro)
 39241 00005F36 2603060300              	add	ax,[es:arena_size]
 39242 00005F3B 40                      	inc	ax
 39243                                  	;mov	es,ax ; * ; 17/06/2023
 39244 00005F3C EBE2                    	jmp	short atu10
 39245                                  
 39246                                  ; -----------------------------------------------------------------------------
 39247                                  ; if we get to atu30, they specified a number that was past the last MCB.
 39248                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 39249                                  ; -----------------------------------------------------------------------------
 39250                                  
 39251                                  atu30:
 39252 00005F3E 8CC0                    	mov	ax,es
 39253                                  	;add	ax,[es:3]
 39254 00005F40 2603060300              	add	ax,[es:arena_size]
 39255 00005F45 39D0                    	cmp	ax,dx		; Present >= given?
 39256 00005F47 7303                    	jae	short atuX	; Yep! It _was_ inside.
 39257                                  atuE:
 39258 00005F49 31C9                    	xor	cx,cx		; Else, fall through with UMB # == -1
 39259 00005F4B 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 39260                                  atuX:	
 39261 00005F4C 89C8                    	mov	ax,cx		; Return the UMB number in AX
 39262                                  	
 39263                                  	;popreg	<es,dx,cx>
 39264                                  
 39265 00005F4E 07                      	pop	es
 39266                                  	;pop	dx
 39267                                  	;pop	cx
 39268                                  	
 39269 00005F4F C3                      	retn
 39270                                  
 39271                                  ; -----------------------------------------------------------------------------
 39272                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 39273                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 39274                                  ; address rather than a UMB number... and use that address to look up a UMB.
 39275                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 39276                                  ; -----------------------------------------------------------------------------
 39277                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 39278                                  ; EXIT:   AX will contain a UMB number
 39279                                  ; ERROR:  None
 39280                                  ; USES:   Flags, AX
 39281                                  ; -----------------------------------------------------------------------------
 39282                                  
 39283                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39284                                  convUMB:
 39285                                  	;cmp	word [gnradix],16
 39286 00005F50 803E[4B5E]10            	cmp	byte [gnradix],16
 39287 00005F55 7509                    	jne	short cu10	; If it didn't read in hex, it's not an address
 39288 00005F57 E8BCFF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 39289 00005F5A 83F8FF                  	cmp	ax,0FFFFh
 39290 00005F5D 7501                    	jne	short cu10
 39291 00005F5F 40                      	inc	ax ; ax = 0	; If too high, ignore it (make it conventional)
 39292                                  cu10:
 39293 00005F60 C3                      	retn
 39294                                  
 39295                                  ; -----------------------------------------------------------------------------
 39296                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 39297                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 39298                                  ; of the usual HIGH_FIRST.  See the code.
 39299                                  ; -----------------------------------------------------------------------------
 39300                                  ; ENTRY:  None
 39301                                  ; EXIT:   None
 39302                                  ; ERROR:  None
 39303                                  ; USES:   Flags, fm_umb, fm_strat
 39304                                  ; -----------------------------------------------------------------------------
 39305                                  
 39306                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39307                                  setUMBs:
 39308                                  	;pushreg <ax,bx>
 39309                                  	
 39310                                  	;push	ax
 39311                                  	;push	bx
 39312                                  
 39313 00005F61 E8B2FD                  	call	fm_link
 39314                                  
 39315 00005F64 B80058                  	mov	ax,5800h ; DOS_CHECK_STRATEGY
 39316 00005F67 CD21                    	int	21h
 39317                                  
 39318                                  	;putdata fm_strat,al	; Store the current strategy for later restore
 39319                                  
 39320                                  	;push	es
 39321                                  	;mov	es,[RESSEG]
 39322                                  	;mov	[es:fm_strat],al ; store the current strategy
 39323                                  	;pop	es
 39324 00005F69 1E                      	push	ds ; *
 39325 00005F6A 8E1E[D19B]              	mov	ds,[RESSEG]
 39326 00005F6E A2[3605]                	mov	[fm_strat],al
 39327                                  	;pop	ds ; *
 39328                                  
 39329 00005F71 83E07F                  	and	ax,007Fh	; 0000.0000.0111.1111 == All that other stuff
 39330 00005F74 50                      	push	ax ; **		; Watch this carefully...
 39331                                  
 39332 00005F75 E80C00                  	call	loadLow		; returns al==0 if load low, al==1 if loadhigh
 39333 00005F78 D0C8                    	ror	al,1		; Shift that to al==0 or al==0x80
 39334                                  
 39335 00005F7A 5B                      	pop	bx ; **		; ...pushed as AX above
 39336                                  	
 39337 00005F7B 1F                      	pop	ds ; *
 39338                                  	
 39339 00005F7C 08C3                    	or	bl,al		; Now we have 0000.0000.?111.1111 in BX;
 39340                                  
 39341 00005F7E B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 39342                                  				; with ? ==1 if load highfirst. Perfect!
 39343 00005F81 CD21                    	int	21h
 39344                                  
 39345                                  	;popreg	<bx,ax>
 39346                                  
 39347                                  	;pop	bx
 39348                                  	;pop	ax
 39349                                  
 39350 00005F83 C3                      	retn
 39351                                  
 39352                                  ; -----------------------------------------------------------------------------
 39353                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 39354                                  ; -----------------------------------------------------------------------------
 39355                                  ; ENTRY:  None
 39356                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 39357                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 39358                                  ; ERROR:  None
 39359                                  ; USES:   Flags, fm_strat, fm_umb
 39360                                  ; -----------------------------------------------------------------------------
 39361                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 39362                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 39363                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 39364                                  ; such that the load UMB is too small, and shouldn't be used.
 39365                                  ; -----------------------------------------------------------------------------
 39366                                  
 39367                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39368                                  loadLow:
 39369                                  	;push	ds ; *	
 39370                                  	
 39371                                  	;dataseg ds		; Point DS into appropriate data segment
 39372                                  	;mov	ds,[RESSEG]
 39373                                  
 39374                                  	; * ; ds = [RESSEG] from 'setUMBs') ; 17/06/2023
 39375                                  
 39376 00005F84 A0[3405]                	mov	al,[UmbLoad]
 39377 00005F87 3CFF                    	cmp	al,0FFh ; UNSPECIFIED
 39378 00005F89 7503                    	jne	short ll10
 39379                                  
 39380                                  	;mov	al,1		; Return with AL==1 && STC if no UMBs specified
 39381 00005F8B F9                      	stc
 39382                                  	;jmp	short llX
 39383 00005F8C EB04                    	jmp	short lly ; 17/06/2023
 39384                                  ll10:
 39385 00005F8E 08C0                    	or	al,al		; AL=the load UMB: Is it == 0?
 39386 00005F90 7402                    	jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 39387                                  	; cf= 0
 39388                                  
 39389                                  	;mov	al,1
 39390                                  	;clc	
 39391                                  lly:		; 17/06/2023
 39392 00005F92 B001                    	mov	al,1
 39393                                  llX:
 39394                                  	;pop	ds ; *		; Return DS to where it was
 39395                                  	
 39396                                  	;normseg ds		;
 39397                                  	
 39398 00005F94 C3                      	retn
 39399                                  
 39400                                  ; -----------------------------------------------------------------------------
 39401                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 39402                                  ; -----------------------------------------------------------------------------
 39403                                  ; ENTRY:  None
 39404                                  ; EXIT:   None
 39405                                  ; ERROR:  None
 39406                                  ; USES:   Flags, fm_strat, fm_umb
 39407                                  ; -----------------------------------------------------------------------------
 39408                                  
 39409                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39410                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:64D0h
 39411                                  HideUMBs:
 39412                                  	;pushreg <ax,cx,ds,es>
 39413                                  	
 39414                                  	;push	ax
 39415                                  	;push	cx
 39416                                  	;push	ds
 39417                                  	;push	es
 39418                                  
 39419 00005F95 E8EF01                  	call	UmbTest		; See if we REALLY linked in anything...
 39420 00005F98 7236                    	jc	short husX	; ...if not, there's nothing for us to do.
 39421                                  
 39422 00005F9A E82CFD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 39423 00005F9D E8C1FF                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 39424                                  
 39425                                  	;putdata fInHigh,1	; Remember that we're now running high
 39426                                  	;push	es
 39427                                  	;mov	es,[RESSEG]
 39428                                  	;mov	byte [es:fInHigh], 1
 39429                                  	;			; remember that we're now running high
 39430                                  	;pop	es
 39431 00005FA0 1E                      	push	ds
 39432 00005FA1 8E1E[D19B]              	mov	ds,[RESSEG]
 39433 00005FA5 C606[3005]01            	mov	byte [fInHigh], 1
 39434 00005FAA 1F                      	pop	ds
 39435                                  
 39436 00005FAB E82300                  	call	GetLoadUMB	; See if they gave us a list to leave free
 39437 00005FAE 3CFF                    	cmp	al,0FFh	; UNSPECIFIED
 39438                                  				; If they didn't,
 39439 00005FB0 741E                    	je	short husX	; then we shouldn't do this loop:
 39440                                  
 39441 00005FB2 31C9                    	xor	cx,cx
 39442                                  
 39443                                  ; -----------------------------------------------
 39444                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 39445                                  ; -----------------------------------------------
 39446                                  
 39447                                  hus10:
 39448 00005FB4 41                      	inc	cx		; For each UMB:
 39449 00005FB5 83F910                  	cmp	cx,16 ; MAXUMB
 39450 00005FB8 730C                    	jae	short hus20
 39451                                  
 39452 00005FBA 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 39453                                  	; 17/06/2023
 39454                                  	;push	es
 39455 00005FBC E8A900                  	call	findumb		; valid range of UMBs)
 39456                                  	;pop	es		; push/pop: trash what findumb finds.  :-)
 39457 00005FBF 7205                    	jc	short hus20
 39458                                  
 39459 00005FC1 E87901                  	call	hideUMB?	; hide what we need to hide.
 39460                                  
 39461 00005FC4 EBEE                    	jmp	short hus10
 39462                                  hus20:
 39463 00005FC6 E80800                  	call	GetLoadUMB	; Now check if they offered /L:0
 39464 00005FC9 08C0                    	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 39465 00005FCB 7503                    	jnz	short husX	; If not, we're done.
 39466                                  
 39467 00005FCD E8E701                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 39468                                  husX:
 39469                                  	;popreg	<es,ds,cx,ax>
 39470                                  	
 39471                                  	;pop	es
 39472                                  	;pop	ds
 39473                                  	;pop	cx
 39474                                  	;pop	ax
 39475                                  
 39476 00005FD0 C3                      	retn
 39477                                  
 39478                                  ; -----------------------------------------------------------------------------
 39479                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 39480                                  ; -----------------------------------------------------------------------------
 39481                                  ; ENTRY:  None
 39482                                  ; EXIT:   AL == load UMB
 39483                                  ; ERROR:  None
 39484                                  ; USES:   Flags, AX
 39485                                  ; -----------------------------------------------------------------------------
 39486                                  
 39487                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39488                                  GetLoadUMB:
 39489                                  	;getdata al,UmbLoad
 39490                                  
 39491 00005FD1 1E                      	push    ds
 39492 00005FD2 8E1E[D19B]              	mov     ds,[RESSEG]   ; getdata (macro)
 39493 00005FD6 A0[3405]                	mov     al,[UmbLoad]
 39494 00005FD9 1F                      	pop     ds
 39495                                  
 39496 00005FDA C3                      	retn
 39497                                  
 39498                                  ; -----------------------------------------------------------------------------
 39499                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 39500                                  ; -----------------------------------------------------------------------------
 39501                                  ; ENTRY:  AL == a UMB number
 39502                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 39503                                  ; ERROR:  None
 39504                                  ; USES:   Flags, AX
 39505                                  ; -----------------------------------------------------------------------------
 39506                                  
 39507                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39508                                  GetSize:
 39509                                  	;pushreg <bx,si,ds>
 39510                                  	;push	bx
 39511                                  	;push	si
 39512 00005FDB 1E                      	push	ds
 39513                                  	
 39514                                  	;dataseg ds
 39515 00005FDC 8E1E[D19B]              	mov	ds,[RESSEG]
 39516                                  
 39517 00005FE0 30E4                    	xor	ah,ah			;    ax==UMB
 39518                                  	;mov	bx,offset UmbSize
 39519 00005FE2 BB[6E04]                	mov	bx,UmbSize		;    bx==array
 39520 00005FE5 D0E0                    	shl	al,1	                ;    ax==offset
 39521                                  	;add	ax,bx			;    ax==element index
 39522                                  	;mov	si,ax			; ds:si==element index
 39523                                  	;lodsw				;    ax==size
 39524 00005FE7 01C3                    	add	bx,ax
 39525 00005FE9 8B07                    	mov	ax,[bx]
 39526                                  
 39527                                  	;popreg	<ds,si,bx>
 39528 00005FEB 1F                      	pop	ds
 39529                                  	;pop	si
 39530                                  	;pop	bx
 39531                                  
 39532                                  	;normseg ds
 39533 00005FEC C3                      	retn
 39534                                  
 39535                                  ; -----------------------------------------------------------------------------
 39536                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 39537                                  ; -----------------------------------------------------------------------------
 39538                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 39539                                  ; EXIT:     None; free elements in UMB marked as hidden
 39540                                  ; ERROR:    None
 39541                                  ; USES:     Flags
 39542                                  ; -----------------------------------------------------------------------------
 39543                                  
 39544                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39545                                  hideUMB:
 39546                                  	;pushreg <ax,es>
 39547                                  	
 39548                                  	;push	ax
 39549                                  	;push	es
 39550                                  
 39551 00005FED E87800                  	call	findumb		; Returns with carry if err, else ES == MCB
 39552 00005FF0 7221                    	jc	short huX
 39553                                  
 39554                                  ; ------------------------------------------------
 39555                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 39556                                  ;            we're not in the same UMB, so exit.
 39557                                  ; ------------------------------------------------
 39558                                  
 39559                                  hu10:
 39560 00005FF2 E80BFF                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 39561 00005FF5 741C                    	jz	short huX	; If it is, we've finished the UMB.
 39562 00005FF7 E82800                  	call	isFreeMCB	; Returns with ZF set if owner is 0
 39563 00005FFA 7503                    	jnz	short hu20
 39564                                  
 39565 00005FFC E82A00                  	call	hideMCB
 39566                                  hu20:
 39567                                  	;mov	al,[es:0]
 39568 00005FFF 26A00000                	mov	al,[es:arena_signature]
 39569                                  	;cmp	al,'Z'
 39570 00006003 3C5A                    	cmp	al,arena_signature_end
 39571 00006005 740C                    	je	short huX	; 'Z' means this was the last MCB... that's it.
 39572                                  
 39573                                  	;NextMCB es,ax		; Go on forward.
 39574                                  
 39575 00006007 8CC0                     	mov	ax,es		; NextMCB (macro)
 39576                                  	;add	ax,[es:3]
 39577 00006009 2603060300              	add	ax,[es:arena_size]
 39578 0000600E 40                      	inc	ax
 39579 0000600F 8EC0                    	mov	es,ax
 39580                                  
 39581 00006011 EBDF                    	jmp	short hu10
 39582                                  huX:
 39583                                  	;popreg	<es,ax>
 39584                                  	
 39585                                  	;pop	es
 39586                                  	;pop	ax
 39587                                  
 39588 00006013 C3                      	retn
 39589                                  
 39590                                  ; -----------------------------------------------------------------------------
 39591                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 39592                                  ; -----------------------------------------------------------------------------
 39593                                  ; ENTRY:    None
 39594                                  ; EXIT:     ZF set if user DIDN'T specify /S
 39595                                  ; ERROR:    None
 39596                                  ; USES:     Flags
 39597                                  ; -----------------------------------------------------------------------------
 39598                                  
 39599                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39600                                  isTiny:
 39601 00006014 50                      	push	ax
 39602                                  
 39603                                  	;getdata al,fUmbTiny
 39604 00006015 1E                      	push    ds
 39605 00006016 8E1E[D19B]              	mov     ds,[RESSEG]   ; getdata (macro)
 39606 0000601A A0[3105]                	mov     al,[fUmbTiny]
 39607 0000601D 1F                      	pop     ds
 39608                                  
 39609 0000601E 08C0                    	or	al,al
 39610 00006020 58                      	pop	ax
 39611 00006021 C3                      	retn
 39612                                  
 39613                                  ; -----------------------------------------------------------------------------
 39614                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 39615                                  ; -----------------------------------------------------------------------------
 39616                                  ; ENTRY:    ES:0 should point to an MCB
 39617                                  ; EXIT:     ZF set if MCB is free, else !ZF
 39618                                  ; ERROR:    None
 39619                                  ; USES:     Flags
 39620                                  ; -----------------------------------------------------------------------------
 39621                                  
 39622                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39623                                  isFreeMCB:
 39624                                  	;or	word [es:1],0
 39625 00006022 26830E010000            	or	word [es:arena_owner],0
 39626 00006028 C3                      	retn
 39627                                  
 39628                                  ; -----------------------------------------------------------------------------
 39629                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 39630                                  ; -----------------------------------------------------------------------------
 39631                                  ; ENTRY:    ES:0 should point to an MCB
 39632                                  ; EXIT:     None; MCB marked as HIDDEN
 39633                                  ; ERROR:    None
 39634                                  ; USES:     None
 39635                                  ; -----------------------------------------------------------------------------
 39636                                  
 39637                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39638                                  hideMCB:
 39639                                  	;mov	word [es:1],8
 39640 00006029 26C70601000800          	mov	word [es:arena_owner],8 ; SystemPSPOwner
 39641                                  	;mov	word [es:8],4948h     ; 'HIDDEN  ' 
 39642 00006030 26C70608004849          	mov	word [es:arena_name+0], 'HI' ; 4948h
 39643 00006037 26C7060A004444          	mov	word [es:arena_name+2], 'DD' ; 4444h
 39644 0000603E 26C7060C00454E          	mov	word [es:arena_name+4], 'EN' ; 4E45h
 39645                                  	;mov	word [es:14],2020h
 39646 00006045 26C7060E002020          	mov	word [es:arena_name+6], '  ' ; 2020h 
 39647 0000604C C3                      	retn
 39648                                  
 39649                                  ; -----------------------------------------------------------------------------
 39650                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 39651                                  ; -----------------------------------------------------------------------------
 39652                                  ; ENTRY:    ES:0 should point to an MCB
 39653                                  ; EXIT:     None; MCB marked as FREE
 39654                                  ; ERROR:    None
 39655                                  ; USES:     None
 39656                                  ; -----------------------------------------------------------------------------
 39657                                  
 39658                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39659                                  unHideMCB:
 39660                                  	;push	ax
 39661                                  	;mov	word [es:1],0
 39662 0000604D 26C70601000000          	mov	word [es:arena_owner],0 ; FreePSPOwner
 39663 00006054 B82020                  	mov	ax, '  '  ; mov ax,2020h
 39664                                  	;mov	[es:8],ax
 39665 00006057 26A30800                	mov	[es:arena_name+0],ax
 39666 0000605B 26A30A00                	mov	[es:arena_name+2],ax
 39667 0000605F 26A30C00                	mov	[es:arena_name+4],ax
 39668                                  	;mov	[es:14],ax
 39669 00006063 26A30E00                	mov	[es:arena_name+6],ax
 39670                                  	;pop	ax
 39671 00006067 C3                      	retn
 39672                                  
 39673                                  ; -----------------------------------------------------------------------------
 39674                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 39675                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 39676                                  ; -----------------------------------------------------------------------------
 39677                                  ; ENTRY:    AL should be to a valid UMB number
 39678                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 39679                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 39680                                  ; USES:     Flags, ES
 39681                                  ; -----------------------------------------------------------------------------
 39682                                  
 39683                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39684                                  findumb:
 39685                                  	;pushreg <ax,cx,dx>
 39686                                  	
 39687                                  	;push	ax
 39688 00006068 51                      	push	cx
 39689 00006069 52                      	push	dx
 39690                                  
 39691 0000606A 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 39692                                  
 39693 0000606C 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 39694                                  
 39695 0000606E E882FE                  	call	UmbHead		; Returns first UMB segment in AX
 39696                                  
 39697 00006071 8EC0                    	mov	es,ax
 39698 00006073 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 39699                                  
 39700                                  ; ---------------------------------------------
 39701                                  ; FU10--CX - This UMB number; 0 == conventional
 39702                                  ;       DX - The UMB number they're looking for
 39703                                  ;       ES - The current MCB address
 39704                                  ; ---------------------------------------------
 39705                                  
 39706                                  fu10:	
 39707 00006075 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 39708 00006077 741B                    	je	short fuX	; searching for--so exit.
 39709                                  
 39710 00006079 E884FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 39711 0000607C 7501                    	jnz	short fu20
 39712                                  
 39713 0000607E 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 39714                                  fu20:
 39715                                  	;mov	al,[es:0]
 39716 0000607F 26A00000                	mov	al,[es:arena_signature]
 39717                                  	;cmp	al,'Z'
 39718 00006083 3C5A                    	cmp	al,arena_signature_end
 39719 00006085 740C                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 39720                                  
 39721                                  	;NextMCB es,ax		; Go on forward.
 39722                                  
 39723 00006087 8CC0                     	mov	ax,es		; NextMCB (macro)
 39724                                  	;add	ax,[es:3]
 39725 00006089 2603060300              	add	ax,[es:arena_size]
 39726 0000608E 40                      	inc	ax
 39727 0000608F 8EC0                    	mov	es,ax
 39728                                  
 39729 00006091 EBE2                    	jmp	short fu10
 39730                                  fuE:
 39731 00006093 F9                      	stc
 39732                                  fuX:
 39733                                  	;popreg	<dx,cx,ax>	; The address is already in ES.
 39734                                  	
 39735 00006094 5A                      	pop	dx
 39736 00006095 59                      	pop	cx
 39737                                  	
 39738                                  	;pop	ax
 39739 00006096 C3                      	retn
 39740                                  
 39741                                  ; -----------------------------------------------------------------------------
 39742                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 39743                                  ; -----------------------------------------------------------------------------
 39744                                  ; ENTRY:    AL should be to a valid UMB number
 39745                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 39746                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 39747                                  ; USES:     Flags, ES
 39748                                  ; -----------------------------------------------------------------------------
 39749                                  
 39750                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39751                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6624h
 39752                                  BigFree:
 39753                                  	;pushreg <bx,cx>
 39754                                  	
 39755                                  	;push	bx
 39756 00006097 51                      	push	cx
 39757                                  
 39758 00006098 E8CDFF                  	call	findumb			; Returns with CF if err, else ES==MCB
 39759 0000609B 7239                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 39760                                  
 39761 0000609D 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 39762 0000609F 31C9                    	xor	cx,cx			; Size of largest free MCB
 39763                                  
 39764                                  ; ---------------------------------------------
 39765                                  ; BF10--ES - Current MCB address
 39766                                  ;       BX - Address of largest free MCB so far
 39767                                  ;       CX - Size of largest free MCB so far
 39768                                  ; ---------------------------------------------
 39769                                  
 39770                                  bf10:
 39771 000060A1 E85CFE                  	call	isSysMCB		; If we've left the MCB, we're done.
 39772 000060A4 7427                    	jz	short bf30
 39773                                  
 39774 000060A6 E879FF                  	call	isFreeMCB		; Returns with ZF set if owner is 0
 39775 000060A9 750E                    	jnz	short bf20
 39776                                  
 39777                                  	;cmp	cx,[es:3]
 39778 000060AB 263B0E0300              	cmp	cx,[es:arena_size]	; Compare sizes...
 39779 000060B0 7F07                    	jg	short bf20		; Unless we're bigger,
 39780                                  
 39781 000060B2 8CC3                    	mov	bx,es			; Store this new element's address,
 39782                                  	;mov	cx,[es:3]
 39783 000060B4 268B0E0300              	mov	cx,[es:arena_size]	; and its size.
 39784                                  bf20:
 39785                                  	;mov	al,[es:0]
 39786 000060B9 26A00000                	mov	al,[es:arena_signature]
 39787                                  	;cmp	al,'Z'  ; 5Ah
 39788 000060BD 3C5A                    	cmp	al,arena_signature_end
 39789 000060BF 740C                    	je	short bf30		; 'Z' means this was the last MCB.
 39790                                  
 39791                                  	;NextMCB es,ax			; Go on forward.
 39792                                  
 39793 000060C1 8CC0                    	mov	ax,es 
 39794                                  	;add	ax,[es:3]
 39795 000060C3 2603060300              	add	ax,[es:arena_size]
 39796 000060C8 40                      	inc	ax
 39797 000060C9 8EC0                    	mov	es,ax
 39798                                  
 39799 000060CB EBD4                    	jmp	short bf10
 39800                                  bf30:
 39801 000060CD 8EC3                    	mov	es,bx			; Return the address
 39802 000060CF 89C8                    	mov	ax,cx			; Return the size
 39803 000060D1 09DB                    	or	bx,bx
 39804 000060D3 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 39805                                  bfE:
 39806 000060D5 F9                      	stc
 39807                                  bfX:
 39808                                  	;popreg	<cx,bx>
 39809                                  
 39810 000060D6 59                      	pop	cx
 39811                                  	;pop	bx
 39812                                  
 39813 000060D7 C3                      	retn
 39814                                  
 39815                                  ; -----------------------------------------------------------------------------
 39816                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 39817                                  ; -----------------------------------------------------------------------------
 39818                                  ; ENTRY:    AL should be to a valid UMB number
 39819                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 39820                                  ; ERROR:    None
 39821                                  ; USES:     Flags
 39822                                  ; -----------------------------------------------------------------------------
 39823                                  
 39824                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39825                                  isSpecified:
 39826                                  	;push	ax
 39827                                  
 39828 000060D8 30FF                    	xor	bh,bh
 39829 000060DA 88C3                    	mov	bl,al
 39830                                  
 39831                                  	;getdata al,DS:UmbUsed[bx]
 39832                                  
 39833 000060DC 1E                      	push	ds
 39834 000060DD 8E1E[D19B]              	mov	ds,[RESSEG]
 39835 000060E1 8A87[5E04]              	mov	al,[bx+UmbUsed]
 39836 000060E5 1F                      	pop     ds
 39837                                  
 39838 000060E6 08C0                    	or	al,al		; Sets ZF if al==0 (ie, if unspecified)
 39839                                  
 39840                                  	;pop	ax
 39841 000060E8 C3                      	retn
 39842                                  
 39843                                  ; -----------------------------------------------------------------------------
 39844                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 39845                                  ; -----------------------------------------------------------------------------
 39846                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 39847                                  ; EXIT:     None; MCB broken if carry clear
 39848                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 39849                                  ; USES:     Flags
 39850                                  ; -----------------------------------------------------------------------------
 39851                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 39852                                  ; the specified new size, the split is useless; if it's onnly 0x10 bytes, that
 39853                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 39854                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 39855                                  ; minimum for performing a split.
 39856                                  ; -----------------------------------------------------------------------------
 39857                                  
 39858                                  ;MIN_SPLIT_SIZE	equ 20h
 39859                                  
 39860                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39861                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:667Ah
 39862                                  shrinkMCB:
 39863                                  	;pushreg <bx,cx,es>
 39864                                  
 39865                                  	;push	bx
 39866 000060E9 51                      	push	cx ; *
 39867 000060EA 26                      	psuh	es ; **
 39868                                  
 39869 000060EB 89C3                    	mov	bx,ax			; Move things around... and
 39870 000060ED 8CC0                    	mov	ax,es			; save this one for later.
 39871                                  
 39872 000060EF 268B0E0300              	mov	cx,[es:arena_size]
 39873 000060F4 83E920                  	sub	cx,32 ; sub cx,MIN_SPLIT_SIZE
 39874                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 39875                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 39876 000060F7 39D9                    	cmp	cx,bx
 39877 000060F9 723E                    	jb	short smE ; cf = 1 (***)
 39878                                  
 39879                                  	;mov	dl,[es:0]
 39880 000060FB 268A160000              	mov	dl,[es:arena_signature]
 39881                                  
 39882                                  	;;mov	cx,[es:3]
 39883                                  	;mov	cx,[es:arena_size] ; *!
 39884                                  
 39885 00006100 26891E0300              	mov	[es:arena_size],bx
 39886                                  	;mov	byte [es:0],'M' ; 4Dh
 39887 00006105 26C60600004D            	mov	byte [es:arena_signature],'M'
 39888                                  
 39889 0000610B 01D8                    	add	ax,bx
 39890 0000610D 40                      	inc	ax
 39891 0000610E 8EC0                    	mov	es,ax			; Move to new arena area
 39892                                  
 39893                                  	;mov	ax,cx ; !*
 39894 00006110 26A10300                	mov	ax,[es:arena_size] ; *!
 39895 00006114 29D8                    	sub	ax,bx
 39896 00006116 48                      	dec	ax			; And prepare the new size
 39897                                  
 39898                                  	;mov	[es:0],dl
 39899 00006117 2688160000              	mov	[es:arena_signature],dl
 39900                                  	;;mov	word [es:1],0
 39901                                  	;mov	word [es:arena_owner],0
 39902                                  	;mov	[es:3],ax
 39903 0000611C 26A30300                	mov	[es:arena_size],ax
 39904 00006120 B82020                  	mov	ax,'  ' ; mov ax,2020h
 39905                                  	;mov	[es:8],ax
 39906 00006123 26A30800                	mov	[es:arena_name+0],ax
 39907 00006127 26A30A00                	mov	[es:arena_name+2],ax
 39908 0000612B 26A30C00                	mov	[es:arena_name+4],ax
 39909                                  	;mov	[es:14],ax
 39910 0000612F 26A30E00                	mov	[es:arena_name+6],ax
 39911                                  
 39912                                  	;clc
 39913 00006133 31C0                    	xor	ax,ax
 39914 00006135 26A30100                	mov	[es:arena_owner],ax ; 0
 39915                                  	; cf = 0
 39916                                  	;jmp	short smX
 39917                                  smE:
 39918                                  	;stc	 ; cf = 1 (***)
 39919                                  smX:
 39920                                  	;popreg	<es,cx,bx>
 39921 00006139 07                      	pop	es ; **
 39922 0000613A 59                      	pop	cx ; *
 39923 0000613B 5B                      	pop	bx
 39924                                  
 39925 0000613C C3                      	retn
 39926                                  
 39927                                  ; -----------------------------------------------------------------------------
 39928                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 39929                                  ; -----------------------------------------------------------------------------
 39930                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 39931                                  ; EXIT:     None; UMB is hidden as necessary
 39932                                  ; ERROR:    None
 39933                                  ; USES:     Flags, AX, CX
 39934                                  ; -----------------------------------------------------------------------------
 39935                                  ; PRIMARY LOGIC:
 39936                                  ;
 39937                                  ; If the UMB is specified in the DH/LH statement, then:
 39938                                  ;    If the largest free segment is too small (check specified size), then:
 39939                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 39940                                  ;    Else, if largest free segment is LARGER than specified size, then:
 39941                                  ;       If /S was given on the command-line, then:
 39942                                  ;          Break that element into two pieces
 39943                                  ;          Set a flag that we're shrinking
 39944                                  ;       Endif
 39945                                  ;    Endif
 39946                                  ; Endif
 39947                                  ; If the UMB is NOT specified (or was removed by the above):
 39948                                  ;    Hide all free elements in the UMB
 39949                                  ;    If the flag that we're shrinking was set, then:
 39950                                  ;       UN-hide the lower portion of the shrunken UMB
 39951                                  ;    ENDIF
 39952                                  ; ENDIF
 39953                                  ; -----------------------------------------------------------------------------
 39954                                  
 39955                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39956                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:66D7h
 39957                                  hideUMB?:
 39958                                  	;pushreg <bx,dx,es>
 39959                                  
 39960                                  	;push	bx
 39961                                  	;push	dx
 39962                                  	;push	es
 39963                                  
 39964 0000613D 88C8                    	mov	al,cl
 39965 0000613F E896FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 39966                                  	;jz	short hu?20
 39967                                  	; 17/06/2023
 39968 00006142 7432                    	jz	short hu?25 ; *
 39969                                  
 39970 00006144 88C8                    	mov	al,cl		; Retrieve the size of the largest
 39971 00006146 E84EFF                  	call	BigFree		; free element in AX; put its address in ES
 39972                                  	;jc	short hu?20	; Oops. Errors mean skip this part.
 39973                                  	; 17/06/2023
 39974 00006149 723B                    	jc	short hu?X ; **
 39975                                  
 39976 0000614B 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 39977 0000614C 88C8                    	mov	al,cl		; Retrieve the user's specified
 39978 0000614E E88AFE                  	call	GetSize		; minimum size for this umb (into AX)
 39979 00006151 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 39980                                  
 39981 00006152 09C0                    	or	ax,ax		; If they didn't specify one,
 39982                                  	;jz	short hu?20	; Skip over all this.
 39983                                  	; 17/06/2023
 39984 00006154 7530                    	jnz	short hu?X ; **
 39985                                  
 39986 00006156 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 39987 00006158 7607                    	jbe	short hu?10
 39988                                  
 39989 0000615A 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 39990 0000615C E898FC                  	call	unMarkUMB
 39991                                  	;jmp	short hu?20 ; ***
 39992                                  	; 17/06/2023
 39993                                  	; ('isSpecified' would return with ZF=1) ; ***
 39994 0000615F EB15                    	jmp	short hu?25
 39995                                  hu?10:
 39996 00006161 E8B0FE                  	call	isTiny		; Returns ZF clear if user specified /S
 39997                                  	;jz	short hu?20
 39998                                  	; 17/06/2023
 39999                                  	; ('isSpecified' would return with ZF=0) ; **
 40000 00006164 7420                    	jz	short hu?X
 40001                                  
 40002 00006166 E880FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 40003                                  	;jc	short hu?20	; Ah... if didn't shrink after all, skip this:
 40004                                  	; 17/06/2023
 40005                                  	; ('isSpecified' would return with ZF=0) ; **
 40006 00006169 721B                    	jc	short hu?X
 40007                                  
 40008 0000616B 8CC2                    	mov	dx,es
 40009 0000616D EB09                    	jmp	short hu?30	; Skip the spec check.. we wanna hide this one.
 40010                                  hu?20:
 40011                                  	;mov	al,cl
 40012 0000616F 89C8                    	mov	ax,cx
 40013 00006171 E864FF                  	call	isSpecified	; If they specified this UMB, we're done...
 40014 00006174 7510                    	jnz	short hu?X ; **	; so leave.
 40015                                  hu?25:	; 17/06/2023 ; *
 40016 00006176 31D2                    	xor	dx,dx
 40017                                  hu?30:
 40018 00006178 88C8                    	mov	al,cl
 40019                                  
 40020 0000617A E870FE                  	call	hideUMB		; Hides everything in UMB #al
 40021                                  
 40022 0000617D 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 40023 0000617F 7405                    	jz	short hu?X	; So we should leave.
 40024                                  
 40025 00006181 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 40026 00006183 E8C7FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 40027                                  hu?X:
 40028                                  	;popreg	<es,dx,bx>
 40029                                  
 40030                                  	;pop	es
 40031                                  	;pop	dx
 40032                                  	;pop	bx
 40033                                  
 40034 00006186 C3                      	retn
 40035                                  
 40036                                  ; -----------------------------------------------------------------------------
 40037                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 40038                                  ; -----------------------------------------------------------------------------
 40039                                  ; ENTRY:    None
 40040                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 40041                                  ; ERROR:    None
 40042                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 40043                                  ; -----------------------------------------------------------------------------
 40044                                  
 40045                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40046                                  UmbTest:
 40047                                  	;pushreg <ax,bx,ds,es>
 40048                                  	
 40049                                  	;push	ax
 40050                                  	;push	bx
 40051                                  	;push	ds
 40052                                  	;push	es
 40053                                  
 40054 00006187 E88CFB                  	call	fm_link		; Link in UMBs (if not already linked)
 40055 0000618A E80600                  	call	WalkMem		; Check to see if they're really linked
 40056 0000618D 9C                      	pushf			; And remember what we found out
 40057 0000618E E89CFB                  	call	fm_unlink	; Unlink UMBs (if WE have linked 'em)
 40058 00006191 9D                      	popf			; And restore what we found out.
 40059                                  
 40060                                  	;popreg	<es,ds,bx,ax>
 40061                                  	
 40062                                  	;pop	es
 40063                                  	;pop	ds
 40064                                  	;pop	bx
 40065                                  	;pop	ax
 40066                                  	
 40067 00006192 C3                      	retn
 40068                                  
 40069                                  ; -----------------------------------------------------------------------------
 40070                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 40071                                  ; -----------------------------------------------------------------------------
 40072                                  ; ENTRY:    None
 40073                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 40074                                  ; ERROR:    None
 40075                                  ; USES:     Flags
 40076                                  ; -----------------------------------------------------------------------------
 40077                                  
 40078                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40079                                  WalkMem:
 40080                                  	;pushreg <ax,bx,es>
 40081                                  	
 40082                                  	;push	ax
 40083                                  	;push	bx
 40084 00006193 06                      	push	es
 40085                                  
 40086 00006194 B452                    	mov	ah,52h ; DOS_GET_DOS_LISTS
 40087                                  				; Call int 21h, function 52h...
 40088 00006196 CD21                    	int	21h
 40089                                  
 40090 00006198 268B47FE                	mov	ax,[es:bx-2]
 40091                                  	;mov	es,ax ; *
 40092                                  
 40093                                  ; ------------------------------
 40094                                  ; UM10: ES = Current MCB pointer
 40095                                  ; ------------------------------
 40096                                  
 40097                                  um10:	
 40098 0000619C 8EC0                    	mov	es,ax ; *
 40099                                  
 40100                                  	;mov	al,[es:0]
 40101 0000619E 26A00000                	mov	al,[es:arena_signature]
 40102                                  	;cmp	al,'Z' ; 5Ah
 40103 000061A2 3C5A                    	cmp	al,arena_signature_end
 40104 000061A4 740A                    	je	short um20	; If signature == 'Z', hay no more.
 40105                                  
 40106                                  	;NextMCB es,bx		; Move to the next MCB
 40107                                  	
 40108                                  	;mov	bx,es
 40109                                  	;;add	bx,[es:3]
 40110                                  	;add	bx,[es:arena_size]
 40111                                  	;inc	bx
 40112                                  	;mov	es,bx
 40113 000061A6 8CC0                    	mov	ax,es
 40114 000061A8 2603060300              	add	ax,[es:arena_size]
 40115 000061AD 40                      	inc	ax
 40116                                  	;mov	es,ax ; *
 40117                                  
 40118 000061AE EBEC                    	jmp	short um10	; And restart the loop.
 40119                                  um20:
 40120 000061B0 8CC0                    	mov	ax,es
 40121 000061B2 3DFF9F                  	cmp	ax,9FFFh	; This sets CF if ax < 9FFF.
 40122                                  
 40123                                  	;popreg	<es,bx,ax>
 40124 000061B5 07                      	pop	es
 40125                                  	;pop	bx
 40126                                  	;pop	ax
 40127                                  
 40128 000061B6 C3                      	retn
 40129                                  
 40130                                  ; -----------------------------------------------------------------------------
 40131                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 40132                                  ; -----------------------------------------------------------------------------
 40133                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 40134                                  ; EXIT:     None
 40135                                  ; ERROR:    None
 40136                                  ; USES:     AX, BX
 40137                                  ; -----------------------------------------------------------------------------
 40138                                  
 40139                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40140                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:681Ch
 40141                                  hl_unlink:
 40142 000061B7 1E                      	push	ds ; *
 40143                                  
 40144 000061B8 30FF                    	xor	bh,bh
 40145                                  	;getdata bl,fm_umb	; Restore original link-state
 40146                                  
 40147                                  	;push	ds
 40148 000061BA 8E1E[D19B]              	mov	ds,[RESSEG]
 40149 000061BE 8A1E[3505]              	mov	bl,[fm_umb]	; Restore original link-state
 40150                                  	;pop	ds
 40151                                  	
 40152 000061C2 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 40153 000061C5 CD21                    	int	21h
 40154                                  
 40155 000061C7 30FF                    	xor	bh,bh
 40156                                  
 40157                                  	;getdata bl,fm_strat	; Restore original mem-alloc strategy
 40158                                  
 40159                                  	;push	ds
 40160                                  	;mov	ds,[RESSEG]
 40161 000061C9 8A1E[3605]              	mov	bl,[fm_strat]	;Restore original mem-alloc strategy
 40162                                  	;pop	ds
 40163                                  
 40164 000061CD B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 40165 000061D0 CD21                    	int	21h
 40166                                  
 40167 000061D2 1F                      	pop	ds ; *
 40168                                  
 40169 000061D3 C3                      	retn
 40170                                  
 40171                                  ;============================================================================
 40172                                  ; LOADHIGH.ASM, MSDOS 6.0, 1991
 40173                                  ;============================================================================
 40174                                  ; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40175                                  
 40176                                  ; This is a new module added to support loading programs into UMBs provided
 40177                                  ; by DOS 5.0. 
 40178                                  ; ---------------------------------------------------------------------------
 40179                                  ; Usage:
 40180                                  ;
 40181                                  ; LOADHIGH [/L:umb[,size][;umb[,size]]*] <filespec>
 40182                                  ;
 40183                                  ; <filespec> has to be a filename that is not wildcarded.
 40184                                  
 40185                                  ; ---------------------------------------------------------------------------
 40186                                  ;
 40187                                  ;	Revision History
 40188                                  ;	================
 40189                                  ;
 40190                                  ;	M009	SR	08/01/90	Set flags to indicate that we are
 40191                                  ;				loading and high and also remember
 40192                                  ;				current UMB state.
 40193                                  ;
 40194                                  ;	M016	SR	08/09/90	Give special error message on attempt
 40195                                  ;				to loadhigh batch files and invalid
 40196                                  ;				filename on Loadhigh command line.
 40197                                  ;
 40198                                  ;	M039	SR	11/19/90	Bug #4270. Copy all the whitespaces
 40199                                  ;				after the program name also as part
 40200                                  ;				of the command line being passed to
 40201                                  ;				the program to be invoked.
 40202                                  ;
 40203                                  ; ---------------------------------------------------------------------------
 40204                                  
 40205                                  ; ---------------------------------------------------------------------------
 40206                                  ;
 40207                                  ;	include highload.inc		; Grab code for ParseVar and such
 40208                                  
 40209                                  iCmdLine	equ	81h		; PSP:81h points to command-line
 40210                                  
 40211                                  ;
 40212                                  ; ---------------------------------------------------------------------------
 40213                                  
 40214                                  ;****	LoadHigh -- Main routine for Loadhigh command
 40215                                  ;
 40216                                  ;	ENTRY	Command line tail is at PSP:iCmdLine terminated by 0dh
 40217                                  ;		CS = DS = SS = TRANGROUP
 40218                                  ;
 40219                                  ;	EXIT	None
 40220                                  ;
 40221                                  ;	USED	ax, bx, cx, dx, si, di, es
 40222                                  ;
 40223                                  ;	ERROR EXITS
 40224                                  ;		Message pointers are setup at the error locations and then
 40225                                  ;	we jump back to CERROR which is the transient error recycle point.
 40226                                  ;	Apart from parse errors, the other errors handled are too many
 40227                                  ;	switches anf invalid filenames.
 40228                                  ;
 40229                                  ;	EFFECTS
 40230                                  ;		The allocation strategy and the state of the arena chain are
 40231                                  ;	put in the requested state according to the given options. If a 
 40232                                  ;	filename is also given, it is executed as well.
 40233                                  ; ---------------------------------------------------------------------------
 40234                                  
 40235                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40236                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5927h
 40237                                  
 40238                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40239                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:683Fh
 40240                                  LoadHigh:
 40241 000061D4 1E                      	push	ds
 40242 000061D5 07                      	pop	es
 40243                                  	
 40244                                  	; 16/06/2023
 40245                                  	;call	SkipLhDelims	; MSDOS 5.0 !
 40246                                  
 40247                                  ;Get command tail to be passed to the program. This includes any whitespace
 40248                                  ;chars between the program name and its parameters as well.
 40249                                  ;On return, ds:si points at the start of the command tail.
 40250                                  
 40251                                  	; 16/06/2023
 40252                                  	;push	si		; MSDOS 5.0 !
 40253 000061D6 E81300                  	call	ParseLhCmd
 40254                                  	;pop	si		; MSDOS 5.0 !	
 40255 000061D9 720E                    	jc	short LhErr
 40256                                  	
 40257 000061DB E86500                  	call	SetupCmdLine		;setup pgm's command line
 40258                                  
 40259 000061DE E88700                  	call	SetupPath		;setup path for file
 40260 000061E1 7206                    	jc	short LhErr		;file not found
 40261                                  
 40262                                  ;Set allocation strategy to HighFirst and link in UMBs for exec. This will
 40263                                  ;be reset after return from the Exec
 40264                                  ;We will also set a resident flag to indicate that UMBs were activated for
 40265                                  ;the Exec. On return from the Exec, this flag will be used to deactivate UMBs
 40266                                  
 40267 000061E3 E8AFFD                  	call	HideUMBs		;prepare upper-memory for load
 40268                                  
 40269 000061E6 E90DCB                  	jmp	LH_EXECUTE		;go and exec file ;M051
 40270                                  
 40271                                  LhErr:
 40272                                  ;The error message has been setup at this stage
 40273                                  
 40274 000061E9 E901CB                  	jmp	cerror			;print error message and recycle 
 40275                                  
 40276                                  ; ---------------------------------------------------------------------------
 40277                                  					
 40278                                  ;*** 	ParseLhCmd - parses any command-line options
 40279                                  ;
 40280                                  ;	ENTRY	None
 40281                                  ;
 40282                                  ;	EXIT	Carry clear -- command line parsed successfully
 40283                                  ;		Carry set -- appropriate error message setup
 40284                                  ;
 40285                                  ;	USED	ax, si
 40286                                  ;
 40287                                  ;	EFFECTS
 40288                                  ;		Options set up (see highvar.inc)
 40289                                  ;		Filename to be executed setup
 40290                                  ;
 40291                                  ;	ParseLhCmd calls InitVar to initialize data filled in by ParseVar,
 40292                                  ;	then calls ParseVar itself to actually parse the commmand-line.  On
 40293                                  ;	return from ParseVar, DS:SI will point to the beginning of the child
 40294                                  ;	module's name on the command-line; thus it calls LhCopyFilename to
 40295                                  ;	prepare the command-line for that program.
 40296                                  ; ---------------------------------------------------------------------------
 40297                                  
 40298                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40299                                  %if 0
 40300                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40301                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5944h
 40302                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 40303                                  	; 11/06/2023
 40304                                  ParseLhCmd:
 40305                                  	;mov	si,81h
 40306                                  	mov	si,iCmdLine	;ds:si points at command line
 40307                                  
 40308                                  	mov	word [COMSW],0
 40309                                  	mov	di,Parse_LoadHi
 40310                                  	xor	cx,cx
 40311                                  	call	Parse_With_Msg
 40312                                  
 40313                                  	; 11/06/2023
 40314                                  	;cmp	ax,0FFFFh ; -1
 40315                                  	;jz	short PLhCmd2
 40316                                  	;cmp	ax,0
 40317                                  	;jnz	short PLhCmd1
 40318                                  	; 11/06/2023
 40319                                  	inc	ax ; cmp ax,-1
 40320                                  	jz	short PLhCmd2 ; 0FFFFh -> 0
 40321                                  	dec	ax ; cmp ax,0
 40322                                  	jnz	short PLhCmd1 ; 1 -> 0
 40323                                  	; ax = 0
 40324                                  
 40325                                  	mov	bx,dx
 40326                                  	; 14/04/2023
 40327                                  	;call	LhCopyFilename
 40328                                  	;; 13/04/2023
 40329                                  	;;;jc	short PLhCmd2  ; !!! jmp short PLhCmd2 !!!
 40330                                  	;;jmp	short PLhCmd2
 40331                                  	;retn
 40332                                  	; 14/04/2023
 40333                                  	jmp	short LhCopyFilename
 40334                                  PLhCmd1:
 40335                                  	stc
 40336                                  PLhCmd2:
 40337                                  	retn
 40338                                  %endif
 40339                                  
 40340                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40341                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6857h
 40342                                  	; MSDOS 6.0
 40343                                  ParseLhCmd:
 40344                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 40345                                  	
 40346                                  	;mov	si,81h
 40347 000061EC BE8100                  	mov	si,iCmdLine	;ds:si points at command line
 40348                                  
 40349                                  	; es = ds (from 'LoadHigh') 
 40350                                  	;push	es		;Store ES 'cause we're gonna change it:
 40351                                  
 40352                                  	;push	ds
 40353                                  	;pop	es		;Make sure es:si points to cmd line as well
 40354                                  
 40355 000061EF E8ACFA                  	call	InitVar		;Initialize data for ParseVar
 40356                                  
 40357 000061F2 E84AFB                  	call	ParseVar	;And parse the command line
 40358                                  
 40359                                  	;pop	es		;Restore ES now; we're done with it.
 40360                                  
 40361 000061F5 7317                    	jnc	short plcC	;If no error, continue on our way.
 40362                                  
 40363 000061F7 83F802                  	cmp	ax,2 ; PV_BadUMB
 40364                                  				;Bad UMB passed?
 40365 000061FA 7505                    	jne	short plc10
 40366                                  	;mov	dx,offset TRANGROUP:LhBadUMB_Ptr
 40367 000061FC BA[3F92]                	mov	dx,LhBadUMB_Ptr
 40368 000061FF F9                      	stc
 40369 00006200 C3                      	retn
 40370                                  plc10:	
 40371                                  	;mov	dx,offset TRANGROUP:LhInvSwt_Ptr
 40372 00006201 BA[3C92]                	mov	dx,LhInvSwt_Ptr
 40373 00006204 83F803                  	cmp	ax,3 ; PV_InvSwt
 40374                                  				;Unrecognized switch passed?
 40375 00006207 7403                    	je	short plc20
 40376                                  	;mov	dx,offset TRANGROUP:LhInvArg_Ptr
 40377 00006209 BA[3692]                	mov	dx,LhInvArg_Ptr
 40378                                  plc20:
 40379 0000620C F9                      	stc
 40380 0000620D C3                      	retn
 40381                                  plcC:
 40382                                  	;call	LhCopyFilename	;copy filename into our buffer
 40383                                  	;retn			;Return-- carry=status
 40384                                  	; 16/06/2023
 40385                                  	;jmp	short LhCopyFilename
 40386                                  
 40387                                  ; ---------------------------------------------------------------------------
 40388                                  
 40389                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40390                                  
 40391                                  ; ---------------------------------------------------------------------------
 40392                                  ; HIGHlOAD.INC, MSDOS 6.0, 1992
 40393                                  ; ---------------------------------------------------------------------------
 40394                                  
 40395                                  	; 13/04/2023
 40396                                  	; MSDOS 5.0 COMMAND.COM only !
 40397                                  	; (Procedure names are not from original Microsoft source code!)
 40398                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 40399                                  ;set_strategy:
 40400                                  	;mov	ax,5800h	; DOS_CHECK_STRATEGY
 40401                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40402                                  	;		; AL = function code: get allocation strategy
 40403                                  	;mov	bx,ax
 40404                                  	;or	bx,80h
 40405                                  	;mov	ax,5801h	; DOS_SET_STRATEGY
 40406                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40407                                  	;		; AL = function code: set allocation strategy
 40408                                  	;retn
 40409                                  
 40410                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 40411                                  ;set_umblink:
 40412                                  	;mov	ax,5803h	; DOS_SET_UMBLINK
 40413                                  	;mov	bx,1
 40414                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40415                                  	;		; AL = function code: (DOS 5beta) set UMB link state
 40416                                  	;retn
 40417                                  
 40418                                  ; ---------------------------------------------------------------------------
 40419                                  
 40420                                  ;***	LhCopyFilename -- copy filename from command line to buffer
 40421                                  ;
 40422                                  ;	ENTRY	ds:si points at primary argument (filename)
 40423                                  ;
 40424                                  ;	EXIT	Carry set -- filename has wildcards. In this event, DX will
 40425                                  ;				already contain an appropriate error number.
 40426                                  ;		Carry clear -- filename has been copied as needed; DS:SI
 40427                                  ;				points to first character (most likely space)
 40428                                  ;				after filename.
 40429                                  ;
 40430                                  ;	USED	ax, si
 40431                                  ;
 40432                                  ;	EFFECTS
 40433                                  ;		ExecPath contains the filename
 40434                                  ;
 40435                                  ; If there are any wildcards in the filename, then we have an error
 40436                                  ; ---------------------------------------------------------------------------
 40437                                  
 40438                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40439                                  %if 0
 40440                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40441                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5984h
 40442                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 40443                                  LhCopyFilename:
 40444                                  	push	ds
 40445                                  	push	si
 40446                                  	push	di
 40447                                  	lds	si,[bx+4]
 40448                                  	mov	di,EXECPATH
 40449                                  lhcpfn1:
 40450                                  	lodsb
 40451                                  	cmp	al,2Ah ; '*'
 40452                                  	jz	short lhfilerr
 40453                                  	cmp	al,3Fh ; '?'
 40454                                  	jz	short lhfilerr
 40455                                  	stosb
 40456                                  	or	al,al
 40457                                  	jnz	short lhcpfn1
 40458                                  	; 14/04/2023
 40459                                  	; cf = 0
 40460                                  	;clc
 40461                                  lhfilerr2:
 40462                                  	pop	di
 40463                                  	pop	si
 40464                                  	pop	ds
 40465                                  	retn
 40466                                  lhfilerr:
 40467                                  	mov	dx,LhInvFil_Ptr
 40468                                  	stc
 40469                                  	jmp	short lhfilerr2
 40470                                  
 40471                                  %endif
 40472                                  
 40473                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40474                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6881h
 40475                                  	; MSDOS 6.0
 40476                                  LhCopyFilename:
 40477                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 40478                                  
 40479                                  	;mov	di,offset TRANGROUP:ExecPath
 40480 0000620E BF[F99A]                	mov	di,EXECPATH
 40481                                  
 40482                                  	;mov	cx,0	; Copied zero characters
 40483 00006211 29C9                    	sub	cx,cx
 40484                                  ;@@:
 40485                                  lhcpfn1:
 40486 00006213 AC                      	lodsb
 40487 00006214 3C2A                    	cmp	al,'*'			;wildcard?
 40488 00006216 7421                    	je	short lhfilerr		;yes, error
 40489 00006218 3C3F                    	cmp	al,'?'			;wildcard?
 40490 0000621A 741D                    	je	short lhfilerr		;yes, error
 40491                                  
 40492 0000621C 3C0D                    	cmp	al,0Dh			;carriage return?
 40493                                  	;jz	@f
 40494 0000621E 7410                    	je	short lhcpfn2
 40495 00006220 3C2F                    	cmp	al,'/' ; SwitChar	;'/'?
 40496                                  	;jz	@f
 40497 00006222 740C                    	je	short lhcpfn2
 40498 00006224 08C0                    	or	al,al			;EOS?
 40499                                  	;jz	@f
 40500 00006226 7408                    	jz	short lhcpfn2
 40501 00006228 3C20                    	cmp	al,' '			;Space?
 40502                                  	;jz	@f
 40503 0000622A 7404                    	je	short lhcpfn2
 40504                                  	
 40505                                  	;or	al,al
 40506                                  	;;jz	@f
 40507                                  	;je	short lhcpfn2	
 40508                                  
 40509 0000622C AA                      	stosb				;store char
 40510 0000622D 41                      	inc	cx			;And remember that we did one more
 40511                                  	;jmp	short @b
 40512 0000622E EBE3                    	jmp	short lhcpfn1
 40513                                  ;@@:
 40514                                  lhcpfn2:
 40515 00006230 30C0                    	xor	al,al			;Indicate EOS reached
 40516 00006232 AA                      	stosb				;store char
 40517                                  
 40518 00006233 09C9                    	or	cx,cx			;If we didn't copy any characters,
 40519 00006235 7407                    	jz	short lhmissing	; they didn't give a filename.
 40520                                  
 40521 00006237 4E                      	dec	si			;Move back to the delimiting character
 40522                                  	; cf = 0
 40523                                  	;clc				;And indicate no error occurred
 40524 00006238 C3                      	retn
 40525                                  lhfilerr:
 40526                                  	;mov	dx,offset TRANGROUP:LhInvFil_Ptr
 40527 00006239 BA[3092]                	mov	dx,LhInvFil_Ptr		;"Invalid Filename" ; M016
 40528 0000623C F9                      	stc
 40529 0000623D C3                      	retn
 40530                                  lhmissing:
 40531                                  	;mov	dx,offset TRANGROUP:ReqParmMiss
 40532 0000623E BA[3992]                	mov	dx,ReqParmMiss		;"Required parm missing"
 40533 00006241 F9                      	stc
 40534 00006242 C3                      	retn
 40535                                  
 40536                                  ; ---------------------------------------------------------------------------
 40537                                  	
 40538                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 40539                                  %if 0
 40540                                  	; 14/04/2023
 40541                                  	; 13/04/2023
 40542                                  	; MSDOS 5.0 COMMAND.COM only !
 40543                                  	; (Procedure name is not from original Microsoft source code!)
 40544                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 40545                                  set_strategy:
 40546                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 40547                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40548                                  			; AL = function code: get allocation strategy
 40549                                  	mov	bx,ax
 40550                                  	or	bx,80h
 40551                                  	mov	ax,5801h	; DOS_SET_STRATEGY
 40552                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40553                                  			; AL = function code: set allocation strategy
 40554                                  	retn
 40555                                  
 40556                                  ; ---------------------------------------------------------------------------
 40557                                  
 40558                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40559                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59A6h
 40560                                  	; MSDOS 5.0 COMMAND.COM only !
 40561                                  	; (Procedure name is not from original Microsoft source code!)
 40562                                  SkipLhDelims:
 40563                                  	mov	si,81h
 40564                                  	call	scanoff
 40565                                  stfn1:
 40566                                  	lodsb
 40567                                  	call	DELIM
 40568                                  	jz	short stfn2
 40569                                  	cmp	al,0Dh
 40570                                  	jz	short stfn2
 40571                                  	cmp	al,[SWITCHAR]
 40572                                  	jnz	short stfn1
 40573                                  stfn2:
 40574                                  	dec	si
 40575                                  	retn
 40576                                  
 40577                                  %endif
 40578                                  
 40579                                  ; ---------------------------------------------------------------------------
 40580                                  
 40581                                  ;***	SetupCmdLine -- prepare command line for the program
 40582                                  ;
 40583                                  ;	ENTRY	{es/ds}:si = points just after the end of the child program
 40584                                  ;
 40585                                  ;	EXIT	None
 40586                                  ;
 40587                                  ;	USED
 40588                                  ;
 40589                                  ;	EFFECTS		
 40590                                  ;		The rest of the command line following the pgm name is 
 40591                                  ;	moved to the top of the command line buffer (at TRANGROUP:81h)
 40592                                  ;	and a new command line length is put in
 40593                                  ; ---------------------------------------------------------------------------
 40594                                  
 40595                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40596                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59BEh
 40597                                  
 40598                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40599                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68BEh
 40600                                  SetupCmdLine:
 40601                                  	;mov	di,81h
 40602 00006243 BF8100                  	mov	di,iCmdLine
 40603 00006246 30C9                    	xor	cl,cl
 40604 00006248 FEC9                    	dec	cl			;just CR means count = 0
 40605                                  SetCmdL1:
 40606 0000624A AC                      	lodsb
 40607 0000624B AA                      	stosb
 40608 0000624C FEC1                    	inc	cl			;update count
 40609                                  	
 40610                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40611                                  	; MSDOS 6.0
 40612                                  	; 14/04/2023
 40613                                  	; * ; MSDOS 6.0 only !
 40614 0000624E 08C0                    	or	al,al	; *
 40615 00006250 7404                    	jz	short SetCmdL2 ; *
 40616                                  	
 40617 00006252 3C0D                    	cmp	al,0Dh			;carriage return?
 40618 00006254 75F4                    	jnz	short SetCmdL1		;no, continue storing
 40619                                  SetCmdL2:
 40620 00006256 26880E8000              	mov	[es:80h],cl		;store new cmd line length
 40621 0000625B C3                      	retn
 40622                                  
 40623                                  ; ---------------------------------------------------------------------------
 40624                                  
 40625                                  ;***	LhSetupErrMsg -- Sets up error messages
 40626                                  ;
 40627                                  ;	ENTRY	ax = error message number
 40628                                  ;
 40629                                  ;	EXIT	None
 40630                                  ;
 40631                                  ;	USED	dx
 40632                                  ;
 40633                                  ;	EFFECTS
 40634                                  ;		Everything setup to display error message
 40635                                  ; ---------------------------------------------------------------------------
 40636                                  	
 40637                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40638                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40639                                  LhSetupErrMsg:
 40640 0000625C C606[428F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 40641 00006261 BA[448F]                	mov	dx,extend_buf_ptr
 40642 00006264 A3[448F]                	mov	[extend_buf_ptr],ax
 40643 00006267 C3                      	retn
 40644                                  
 40645                                  ; ---------------------------------------------------------------------------
 40646                                  
 40647                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 40648                                  %if 0
 40649                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40650                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59DFh
 40651                                  	; MSDOS 5.0 COMMAND.COM only !
 40652                                  	; (Procedure name is not from original Microsoft source code!)
 40653                                  check_umblink:
 40654                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 40655                                  	int	21h 	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40656                                  			 ; AL = function code: get allocation strategy
 40657                                  	mov	bl,al
 40658                                  	mov	ax,5802h	; DOS_CHECK_UMBLINK
 40659                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40660                                  			; AL = function code: (DOS 5beta) get UMB link state
 40661                                  	mov	bh,al
 40662                                  	xchg	ax,bx
 40663                                  	rol	al,1
 40664                                  	and	al,1
 40665                                  	shl	ah,1
 40666                                  	or	al,ah
 40667                                  	retn
 40668                                  
 40669                                  ; ---------------------------------------------------------------------------
 40670                                  
 40671                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40672                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59F7h
 40673                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 40674                                  HideUMBs:
 40675                                  	push	ds
 40676                                  	call	check_umblink
 40677                                  	mov	ds,[RESSEG]
 40678                                  	mov	[fInHigh],al
 40679                                  	or	byte [fInHigh],80h
 40680                                  	pop	ds
 40681                                  	call	set_strategy
 40682                                  	;call	set_umblink
 40683                                  	;retn
 40684                                  	; 14/04/023
 40685                                  	;jmp	short set_umblink
 40686                                  
 40687                                  ; ---------------------------------------------------------------------------
 40688                                  
 40689                                  	; 14/04/2023
 40690                                  	; 13/04/2023
 40691                                  	; MSDOS 5.0 COMMAND.COM only !
 40692                                  	; (Procedure name is not from original Microsoft source code!)
 40693                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 40694                                  set_umblink:
 40695                                  	mov	ax,5803h	; DOS_SET_UMBLINK
 40696                                  	mov	bx,1
 40697                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40698                                  			; AL = function code: (DOS 5beta) set UMB link state
 40699                                  	retn
 40700                                  %endif
 40701                                  
 40702                                  ; ---------------------------------------------------------------------------
 40703                                  
 40704                                  ;***	SetupPath -- Do path search for the file to be executed
 40705                                  ;
 40706                                  ;	ENTRY	None
 40707                                  ;
 40708                                  ;	EXIT	Carry set if file not found or not executable file
 40709                                  ;
 40710                                  ;	EFFECTS
 40711                                  ;		ExecPath contains the full path of the file to be executed
 40712                                  ; ---------------------------------------------------------------------------
 40713                                  
 40714                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40715                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A0Fh
 40716                                  
 40717                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40718                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68E3h
 40719                                  SetupPath:
 40720                                  
 40721                                  ;Juggle around the argv pointers to make argv[1] into argv[0]. This is 
 40722                                  ;because the path search routine that we are about to invoke expects the
 40723                                  ;filename to search for to be argv[0].
 40724                                  ;
 40725                                  ;If our new argv[0] starts with a switcharacter, it's an option... skip right
 40726                                  ;over it by doing the whole move again (smaller, of course, this time).
 40727                                  
 40728                                  
 40729                                  	;mov	ax,arg.argvcnt		;total number of arguments
 40730                                  	; 14/04/2023
 40731                                  	;mov	ax,[ARG_ARGVCNT]
 40732 00006268 A1[EDA1]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 40733                                  
 40734 0000626B 48                      	dec	ax			;less one - skip "LoadHigh"
 40735                                  	;mov	bx,SIZE Argv_ele
 40736 0000626C BB0B00                  	mov	bx,ARGV_ELE.SIZE ; 11
 40737                                  	;mov	bx,11
 40738 0000626F F7E3                    	mul	bx			;dx:ax = size of argument lists
 40739                                  
 40740                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 40741                                  	; --------------------------------------
 40742                                  	; MSDOS 6.0
 40743                                  
 40744                                  	;getdata cl,fm_argc		;CL = number of arguments to skip
 40745 00006271 1E                      	push	ds              ; getdata (macro)
 40746 00006272 8E1E[D19B]              	mov	ds,[RESSEG]
 40747 00006276 8A0E[3705]              	mov	cl,[fm_argc]
 40748 0000627A 1F                      	pop	ds
 40749                                  	
 40750 0000627B FEC1                    	inc	cl			;Skip one arg, to get over "lh"
 40751                                  
 40752                                  ;Move argv[1]..argv[n] to argv[0]..argv[n-1]. Here, AX == the overall size
 40753                                  ;of the argument lists.
 40754                                  
 40755                                  argloop:
 40756 0000627D E31B                    	jcxz	argdone			;If we've finished copying args, leave.
 40757                                  
 40758 0000627F 49                      	dec	cx			;One less time we'll go through this.
 40759                                  
 40760 00006280 50                      	push	ax			;Copy ( size of remaining list ) bytes
 40761 00006281 51                      	push	cx			;And remember how many args there were
 40762                                  
 40763                                  	; --------------------------------------
 40764                                  
 40765                                  	; 14/04/2023
 40766 00006282 89C1                    	mov	cx,ax			;size to move
 40767                                  
 40768                                  	;mov	di,offset TRANGROUP:Arg	;Copy TO argv[0]
 40769                                  	;mov	di,ARG_ARGV ;mov di,[ARG+ARG_UNIT.argv] ; mov di,[ARG]
 40770 00006284 BF[2D9F]                	mov	di,ARG	
 40771 00006287 89FE                    	mov	si,di			;
 40772                                  	;add	si,SIZE Argv_ele	;Copy FROM argv[1]
 40773 00006289 83C60B                  	add	si,ARGV_ELE.SIZE ; 11
 40774                                  	
 40775                                  	; 14/04/2023
 40776                                  	;mov	cx,ax
 40777                                  
 40778 0000628C FC                      	cld
 40779 0000628D F3A4                    	rep	movsb			;Move the argument list
 40780                                  	
 40781                                  	;dec	arg.argvcnt		;Fake one less argument, and
 40782                                  	;dec	word [ARG_ARGVCNT]
 40783 0000628F FF0E[EDA1]              	dec	word [ARG+ARG_UNIT.argvcnt]
 40784                                  
 40785                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 40786                                  	; --------------------------------------
 40787                                  	; MSDOS 6.0
 40788                                  	
 40789                                  	;sub	ax,ARGV_ELE.SIZE ; 11	;there's one argument we don't copy.
 40790                                  
 40791 00006293 59                      	pop	cx
 40792 00006294 58                      	pop	ax			;Restore the size of the arg list
 40793                                  	; 17/06/2023
 40794                                  	;jmp	short argloop
 40795                                  	
 40796                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40797 00006295 83E80B                  	sub	ax,ARGV_ELE.SIZE ; 11
 40798 00006298 77E3                    	ja	short argloop
 40799                                  	; --------------------------------------
 40800                                  	
 40801                                  ; Done moving... argv[0] is now the child program's name, and [1] its first arg
 40802                                  
 40803                                  	; 17/06/2023
 40804                                  argdone:
 40805 0000629A E8C3D2                  	call	path_search		;look in the path
 40806                                  
 40807                                  ;ax = 0, no file found
 40808                                  ;ax < 4, batch file found -- cant be executed
 40809                                  ;ax = 4,8 => .com or .exe file found
 40810                                  
 40811 0000629D 09C0                    	or	ax,ax			;any file found?
 40812 0000629F 740B                    	jz	short no_exec_file	;no, error
 40813                                  
 40814 000062A1 83F804                  	cmp	ax,4			;executable file?
 40815                                  	;jl	short no_exec_bat	;no, indicate fail ; M016
 40816                                  	;clc
 40817                                  	;retn
 40818                                  	; 14/04/2023
 40819 000062A4 7201                    	jb	short no_exec_bat
 40820 000062A6 C3                      	retn 
 40821                                  
 40822                                  no_exec_bat:
 40823 000062A7 BA[2D92]                	mov	dx,NoExecBat_Ptr	;Setup message ptr ; M016
 40824 000062AA EB06                    	jmp	short lhsp_errret	;return error; M016
 40825                                  
 40826                                  no_exec_file:
 40827 000062AC B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 40828 000062AF E8AAFF                  	call	LhSetupErrMsg		;setup error message
 40829                                  lhsp_errret:				; M016
 40830 000062B2 F9                      	stc
 40831 000062B3 C3                      	retn
 40832                                  
 40833                                  ;============================================================================
 40834                                  ; COMMAND.SKL (MESSAGE.SKL), BUILDMSG.C, MSDOS 6.0, 1991
 40835                                  ;============================================================================
 40836                                  ; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40837                                  
 40838                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A44h
 40839                                  
 40840                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40841                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6930h
 40842                                  
 40843                                  	; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 40844                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:67ADh
 40845                                  
 40846                                  ; ---------------------------------------------------------------------------
 40847                                  ; Class 3 message table/structure
 40848                                  ; ---------------------------------------------------------------------------
 40849                                  
 40850                                  $M_CLASS_3_STRUC:
 40851 000062B4 FF                      	db 0FFh			; $M_CLASS_ID (Class identifer)
 40852                                  	;dw 5			; $M_COMMAND_VER (COMMAND.COM version)
 40853                                  	;db 162			; Total number of messages
 40854                                  	; 17/06/2023
 40855                                  	;dw 1606h		; MSDOS 6.22 COMMAND.COM (hb=22,lb=6)
 40856                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
 40857 000062B5 070A                    	dw 0A07h  ; PCDOS 7.1 COMMAND.COM
 40858                                  	;db 187			; Total number of messages
 40859                                  	; 02/08/2024
 40860 000062B7 B7                      	db 183	; PCDOS 7.1 COMMAND.COM
 40861                                  $M_ID_3_1:
 40862                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:5A48h)
 40863 000062B8 FC03                    	dw 1020			; Message Number = 1020
 40864                                  	;dw MSG_1020-$+2 ; 288h	; Message offset from message number (5A48h+0288h=5CD0h)
 40865                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40866 000062BA D802                    	dw MSG_1020-$+2 ; 2ECh	; Message offset from message number (6934h+02ECh=6C20h)
 40867                                  $M_ID_3_2:
 40868 000062BC F703                    	dw 1015			; Message Number = 1015
 40869                                  	;dw MSG_1015-$+2 ; 294h ; Message offset from message number (5A4Ch+0294h=5CE0h)
 40870                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40871 000062BE E402                    	dw MSG_1015-$+2 ; 2F8h	; Message offset from message number (6938h+02F8h=6C30h)
 40872                                  $M_ID_3_3:	; 26/04/2023
 40873                                  			; 17/06/2023
 40874 000062C0 EC030403                	dw 1004,MSG_1004-$ ; 792
 40875 000062C4 02041A03                	dw 1026,MSG_1026-$ ; 814
 40876 000062C8 07042A03                	dw 1031,MSG_1031-$ ; 830
 40877 000062CC 0B043503                	dw 1035,MSG_1035-$ ; 841
 40878 000062D0 26044003                	dw 1062,MSG_1062-$ ; 852
 40879 000062D4 04044B03                	dw 1028,MSG_1028-$ ; 863
 40880 000062D8 15046903                	dw 1045,MSG_1045-$ ; 893
 40881 000062DC 11048203                	dw 1041,MSG_1041-$ ; 918
 40882 000062E0 1204A003                	dw 1042,MSG_1042-$ ; 948
 40883                                  $M_ID_3_12:
 40884 000062E4 1304B703                	dw 1043,MSG_1043-$ ; 971
 40885 000062E8 EA03D303                	dw 1002,MSG_1002-$ ; 999
 40886 000062EC EB03F703                	dw 1003,MSG_1003-$ ; 1035
 40887 000062F0 EF030F04                	dw 1007,MSG_1007-$ ; 1059
 40888 000062F4 F0032604                	dw 1008,MSG_1008-$ ; 1082
 40889 000062F8 F1033804                	dw 1009,MSG_1009-$ ; 1100
 40890 000062FC F2034904                	dw 1010,MSG_1010-$ ; 1117
 40891 00006300 F3036504                	dw 1011,MSG_1011-$ ; 1145
 40892 00006304 F6039904                	dw 1014,MSG_1014-$ ; 1168
 40893 00006308 F803A604                	dw 1016,MSG_1016-$ ; 1181
 40894 0000630C F903CC04                	dw 1017,MSG_1017-$ ; 1219
 40895 00006310 FA03ED04                	dw 1018,MSG_1018-$ ; 1252
 40896                                  $M_ID_3_24:
 40897 00006314 FB03FD04                	dw 1019,MSG_1019-$ ; 1268
 40898 00006318 FD030505                	dw 1021,MSG_1021-$ ; 1276
 40899 0000631C FE031F05                	dw 1022,MSG_1022-$ ; 1302
 40900 00006320 FF034205                	dw 1023,MSG_1023-$ ; 1337
 40901 00006324 00046A05                	dw 1024,MSG_1024-$ ; 1377
 40902 00006328 01047D05                	dw 1025,MSG_1025-$ ; 1396
 40903 0000632C 03049105                	dw 1027,MSG_1027-$ ; 1416
 40904 00006330 0504AE05                	dw 1029,MSG_1029-$ ; 1445
 40905 00006334 0604BC05                	dw 1030,MSG_1030-$ ; 1459
 40906 00006338 0804C705                	dw 1032,MSG_1032-$ ; 1470
 40907 0000633C 0904DB05                	dw 1033,MSG_1033-$ ; 1490
 40908 00006340 0A04ED05                	dw 1034,MSG_1034-$ ; 1508
 40909 00006344 0C04FF05                	dw 1036,MSG_1036-$ ; 1526
 40910 00006348 0D041006                	dw 1037,MSG_1037-$ ; 1543
 40911 0000634C 0E041D06                	dw 1038,MSG_1038-$ ; 1556
 40912 00006350 0F042C06                	dw 1039,MSG_1039-$ ; 1571
 40913                                  $M_ID_3_40:
 40914 00006354 10046506                	dw 1040,MSG_1040-$ ; 1628
 40915 00006358 14047406                	dw 1044,MSG_1044-$ ; 1645
 40916 0000635C 16048406                	dw 1046,MSG_1046-$ ; 1661
 40917 00006360 1704B706                	dw 1047,MSG_1047-$ ; 1712
 40918 00006364 1804CC06                	dw 1048,MSG_1048-$ ; 1733
 40919 00006368 1904DA06                	dw 1049,MSG_1049-$ ; 1747
 40920 0000636C 1A04E006                	dw 1050,MSG_1050-$ ; 1753
 40921 00006370 1B04FB06                	dw 1051,MSG_1051-$ ; 1780
 40922 00006374 1C040807                	dw 1052,MSG_1052-$ ; 1793
 40923 00006378 1D041B07                	dw 1053,MSG_1053-$ ; 1812
 40924 0000637C 1E043D07                	dw 1054,MSG_1054-$ ; 1846
 40925                                  $M_ID_3_51:
 40926 00006380 1F046007                	dw 1055,MSG_1055-$ ; 1881
 40927 00006384 20046A07                	dw 1056,MSG_1056-$ ; 1891
 40928 00006388 21047507                	dw 1057,MSG_1057-$ ; 1902
 40929 0000638C 23047E07                	dw 1059,MSG_1059-$ ; 1911
 40930 00006390 24047F07                	dw 1060,MSG_1060-$ ; 1912
 40931 00006394 25047F07                	dw 1061,MSG_1061-$ ; 1912
 40932 00006398 27049507                	dw 1063,MSG_1063-$ ; 1934
 40933 0000639C 28049407                	dw 1064,MSG_1064-$ ; 1933
 40934 000063A0 29049307                	dw 1065,MSG_1065-$ ; 1932
 40935 000063A4 2A049207                	dw 1066,MSG_1066-$ ; 1931
 40936 000063A8 2B049107                	dw 1067,MSG_1067-$ ; 1930
 40937 000063AC 2C048F07                	dw 1068,MSG_1068-$ ; 1928
 40938 000063B0 2D049607                	dw 1069,MSG_1069-$ ; 1935
 40939 000063B4 2E049607                	dw 1070,MSG_1070-$ ; 1935
 40940 000063B8 2F049507                	dw 1071,MSG_1071-$ ; 1934
 40941 000063BC 30049407                	dw 1072,MSG_1072-$ ; 1933
 40942                                  $M_ID_3_67:
 40943 000063C0 31049A07                	dw 1073,MSG_1073-$ ; 1939
 40944 000063C4 3204A007                	dw 1074,MSG_1074-$ ; 1945
 40945 000063C8 3304A607                	dw 1075,MSG_1075-$ ; 1951
 40946 000063CC 3404A807                	dw 1076,MSG_1076-$ ; 1953
 40947 000063D0 3504A707                	dw 1077,MSG_1077-$ ; 1952
 40948 000063D4 3604AB07                	dw 1078,MSG_1078-$ ; 1956
 40949 000063D8 3704C207                	dw 1079,MSG_1079-$ ; 1979
 40950 000063DC 3804C907                	dw 1080,MSG_1080-$ ; 1986
 40951 000063E0 3904DB07                	dw 1081,MSG_1081-$ ; 2004
 40952                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40953 000063E4 3A040208                	dw 1082,MSG_1082-$ ; 2043	
 40954 000063E8 3B040608                	dw 1083,MSG_1083-$ ; 2047	
 40955                                  	;
 40956 000063EC 3C040508                	dw 1084,MSG_1084-$ ; 2046
 40957 000063F0 42041108                	dw 1090,MSG_1090-$ ; 2058
 40958 000063F4 43041B08                	dw 1091,MSG_1091-$ ; 2068
 40959 000063F8 44042508                	dw 1092,MSG_1092-$ ; 2078
 40960 000063FC 45042F08                	dw 1093,MSG_1093-$ ; 2088
 40961 00006400 46044008                	dw 1094,MSG_1094-$ ; 2105
 40962 00006404 47045908                	dw 1095,MSG_1095-$ ; 2130
 40963 00006408 48047208                	dw 1096,MSG_1096-$ ; 2155
 40964                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40965 0000640C 49049F08                	dw 1097,MSG_1097-$ ; 2200
 40966 00006410 4A04B808                	dw 1098,MSG_1098-$ ; 2225
 40967 00006414 4B04D108                	dw 1099,MSG_1099-$ ; 2250
 40968 00006418 4C04E308                	dw 1100,MSG_1100-$ ; 2268
 40969                                  
 40970                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 40971                                  %if 0
 40972                                  	dw 1101,MSG_1101-$ ; 2302
 40973                                  	dw 1102,MSG_1102-$ ; 2313
 40974                                  %endif
 40975 0000641C 4F040509                	dw 1103,MSG_1103-$ ; 2367
 40976 00006420 50041C09                	dw 1104,MSG_1104-$ ; 2390
 40977 00006424 51041707                	dw 1105,MSG_1105-$ ; 2390 ; TRANGROUP:6AA8h 
 40978                                  
 40979                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 40980                                  %if 1
 40981 00006428 52041809                	dw 1106,MSG_1106-$ ; 2345 *
 40982                                  %endif
 40983                                  
 40984                                  ;$M_ID_3_84:
 40985                                  $M_ID_3_95: ; 17/06/2023	
 40986 0000642C B0042609                	dw 1200,MSG_1200-$ ; 2391
 40987 00006430 14052309                	dw 1300,MSG_1300-$ ; 2388
 40988 00006434 2805A609                	dw 1320,MSG_1320-$ ; 2519
 40989 00006438 2905E209                	dw 1321,MSG_1321-$ ; 2579
 40990 0000643C 3C054F0A                	dw 1340,MSG_1340-$ ; 2688
 40991 00006440 3D05A70A                	dw 1341,MSG_1341-$ ; 2776
 40992 00006444 3E05060B                	dw 1342,MSG_1342-$ ; 2871
 40993 00006448 5005940B                	dw 1360,MSG_1360-$ ; 3013
 40994 0000644C 7805AC0B                	dw 1400,MSG_1400-$ ; 3037
 40995 00006450 7905450C                	dw 1401,MSG_1401-$ ; 3190
 40996 00006454 7A05AA0C                	dw 1402,MSG_1402-$ ; 3291
 40997 00006458 7B051D0D                	dw 1403,MSG_1403-$ ; 3406
 40998 0000645C 7C05590D                	dw 1404,MSG_1404-$ ; 3466 ; TRANGROUP:6ADCh 
 40999                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41000 00006460 7D05CA0D                	dw 1405,MSG_1405-$ ; 3579 ; TRANGROUP:6AE0h 
 41001 00006464 7E05390E                	dw 1406,MSG_1406-$ ; 3690
 41002 00006468 7F05780E                	dw 1407,MSG_1407-$ ; 3753 ; (MSG_1404 for MSDOS 5.0 COMMAND.COM)
 41003                                  	;
 41004 0000646C 8C05FC0E                	dw 1420,MSG_1420-$ ; 3885
 41005 00006470 A005830F                	dw 1440,MSG_1440-$ ; 4020
 41006 00006474 A105DD0F                	dw 1441,MSG_1441-$ ; 4110
 41007                                  ;$M_ID_3_100:
 41008                                  $M_ID_3_114: ; 17/06/2023
 41009 00006478 B4055D10                	dw 1460,MSG_1460-$ ; 4238
 41010 0000647C B505BE10                	dw 1461,MSG_1461-$ ; 4335
 41011 00006480 B6053E11                	dw 1462,MSG_1462-$ ; 4463
 41012 00006484 C8058A11                	dw 1480,MSG_1480-$ ; 4539
 41013 00006488 C9051012                	dw 1481,MSG_1481-$ ; 4673
 41014 0000648C CA052B12                	dw 1482,MSG_1482-$ ; 4700
 41015 00006490 CB057812                	dw 1483,MSG_1483-$ ; 4777
 41016 00006494 CC05CE12                	dw 1484,MSG_1484-$ ; 4863
 41017 00006498 CD054913                	dw 1485,MSG_1485-$ ; 4986
 41018 0000649C CE05C113                	dw 1486,MSG_1486-$ ; 5106
 41019 000064A0 CF055314                	dw 1487,MSG_1487-$ ; 5252
 41020 000064A4 D0059614                	dw 1488,MSG_1488-$ ; 5319
 41021                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41022 000064A8 D1051215                	dw 1489,MSG_1489-$ ; 5443
 41023                                  
 41024                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41025                                  %if 0
 41026                                  	dw 1490,MSG_1490-$ ; 5505
 41027                                  	dw 1491,MSG_1491-$ ; 5529
 41028                                  	dw 1492,MSG_1492-$ ; 5608
 41029                                  	dw 1493,MSG_1493-$ ; 5751
 41030                                  	dw 1494,MSG_1494-$ ; 5770
 41031                                  %endif
 41032                                  
 41033                                  ;$M_ID_3_112:
 41034                                  $M_ID_3_132: ; 17/06/2023
 41035 000064AC DC055015                	dw 1500,MSG_1500-$ ; 5796
 41036 000064B0 F0058B15                	dw 1520,MSG_1520-$ ; 5855
 41037 000064B4 0406C515                	dw 1540,MSG_1540-$ ; 5913
 41038 000064B8 05061F16                	dw 1541,MSG_1541-$ ; 6003
 41039 000064BC 06068716                	dw 1542,MSG_1542-$ ; 6107
 41040 000064C0 1806BF16                	dw 1560,MSG_1560-$ ; 6163
 41041 000064C4 1906F316                	dw 1561,MSG_1561-$ ; 6215
 41042 000064C8 1A066C17                	dw 1562,MSG_1562-$ ; 6336
 41043 000064CC 1B069817                	dw 1563,MSG_1563-$ ; 6380
 41044 000064D0 1C06BF17                	dw 1564,MSG_1564-$ ; 6419
 41045 000064D4 1D06F917                	dw 1565,MSG_1565-$ ; 6477
 41046 000064D8 1E062A18                	dw 1566,MSG_1566-$ ; 6526
 41047 000064DC 1F065318                	dw 1567,MSG_1567-$ ; 6567
 41048 000064E0 2006C918                	dw 1568,MSG_1568-$ ; 6685
 41049 000064E4 2C061219                	dw 1580,MSG_1580-$ ; 6758
 41050                                  ;$M_ID_3_127:
 41051                                  $M_ID_3_147: ; 17/06/2023
 41052 000064E8 40065619                	dw 1600,MSG_1600-$ ; 6826
 41053 000064EC 41066F19                	dw 1601,MSG_1601-$ ; 6851
 41054 000064F0 4206BF19                	dw 1602,MSG_1602-$ ; 6931
 41055 000064F4 54065C1A                	dw 1620,MSG_1620-$ ; 7088
 41056 000064F8 5506B01A                	dw 1621,MSG_1621-$ ; 7172
 41057 000064FC 56062E1B                	dw 1622,MSG_1622-$ ; 7298
 41058 00006500 6806761B                	dw 1640,MSG_1640-$ ; 7370
 41059 00006504 6906A01B                	dw 1641,MSG_1641-$ ; 7412
 41060 00006508 7C06201C                	dw 1660,MSG_1660-$ ; 7540
 41061 0000650C 9006631C                	dw 1680,MSG_1680-$ ; 7607
 41062 00006510 A406851C                	dw 1700,MSG_1700-$ ; 7641
 41063 00006514 B806331D                	dw 1720,MSG_1720-$ ; 7815
 41064 00006518 CC06821D                	dw 1740,MSG_1740-$ ; 7894
 41065 0000651C CD06DA1D                	dw 1741,MSG_1741-$ ; 7982
 41066 00006520 E006491E                	dw 1760,MSG_1760-$ ; 8093
 41067 00006524 F406921E                	dw 1780,MSG_1780-$ ; 8166
 41068                                  ;$M_ID_3_143:
 41069                                  $M_ID_3_163: ; 17/06/2023
 41070 00006528 0807FA1E                	dw 1800,MSG_1800-$ ; 8270
 41071 0000652C 0907441F                	dw 1801,MSG_1801-$ ; 8344
 41072 00006530 1C07981F                	dw 1820,MSG_1820-$ ; 8428
 41073 00006534 1D07DC1F                	dw 1821,MSG_1821-$ ; 8496
 41074 00006538 30076320                	dw 1840,MSG_1840-$ ; 8631
 41075 0000653C 4407AA20                	dw 1860,MSG_1860-$ ; 8702
 41076 00006540 45070121                	dw 1861,MSG_1861-$ ; 8789
 41077 00006544 46074421                	dw 1862,MSG_1862-$ ; 8856
 41078 00006548 4707BE21                	dw 1863,MSG_1863-$ ; 8978
 41079 0000654C 48075D22                	dw 1864,MSG_1864-$ ; 9137
 41080 00006550 4907C022                	dw 1865,MSG_1865-$ ; 9236
 41081 00006554 4A072723                	dw 1866,MSG_1866-$ ; 9339
 41082 00006558 58078B23                	dw 1880,MSG_1880-$ ; 9439
 41083 0000655C 5907FF23                	dw 1881,MSG_1881-$ ; 9555
 41084 00006560 5A077924                	dw 1882,MSG_1882-$ ; 9677
 41085 00006564 5B07CC24                	dw 1883,MSG_1883-$ ; 9760
 41086 00006568 6C076B25                	dw 1900,MSG_1900-$ ; 9919
 41087 0000656C 80077F25                	dw 1920,MSG_1920-$ ; 9939
 41088 00006570 8107AB25                	dw 1921,MSG_1921-$ ; 9983
 41089                                  ;$M_ID_3_162:
 41090                                  $M_ID_3_182: ; 17/06/2023
 41091 00006574 82074526                	dw 1922,MSG_1922-$ ; 9285
 41092                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41093 00006578 8307F826                	dw 1923,MSG_1923-$ ; 10316
 41094 0000657C 84077A27                	dw 1924,MSG_1924-$ ; 10446
 41095 00006580 8507F627                	dw 1925,MSG_1925-$ ; 10570
 41096 00006584 86077628                	dw 1926,MSG_1926-$ ; 10698
 41097                                  $M_ID_3_187:	; 17/06/2023
 41098 00006588 8707                    	dw 1927	; 19/06/2023	; Message Number = 1927
 41099 0000658A CA28                    	dw MSG_1927-$+2	; 10782	; Message offset from message number
 41100                                  				; (Msg addr: 6C1Ch+2A1Eh = TRANGROUP:963Ah)
 41101                                  
 41102                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41103                                  %if 1
 41104                                  $M_ID_3_183:
 41105 0000658C 53042129                	dw 1107,MSG_1107-$ ; 10602 *
 41106                                  			; (Msg addr: 6A89h+296Ah = TRANGROUP:96F3h)	
 41107                                  %endif
 41108                                  
 41109                                  ; ---------------------------------------------------------------------------
 41110                                  ; Class 3 messages
 41111                                  ; ---------------------------------------------------------------------------
 41112                                  	
 41113                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41114                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5CD0h
 41115                                  
 41116                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41117                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6C20h
 41118                                  
 41119                                  	; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 41120                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:6A8Dh
 41121                                  
 41122                                  MSG_1020:	; COMMON4
 41123 00006590 0F                      	db 15	; (MSG_1015-MSG_1020)-1
 41124 00006591 253120627974657320-     	db '%1 bytes free',0Dh,0Ah
 41124 0000659A 667265650D0A       
 41125                                  MSG_1015:	; COMMON18
 41126 000065A0 23                      	db 35
 41127 000065A1 46696C652063616E6E-     	db 'File cannot be copied onto itself',0Dh,0Ah
 41127 000065AA 6F7420626520636F70-
 41127 000065B3 696564206F6E746F20-
 41127 000065BC 697473656C660D0A   
 41128                                  MSG_1004:	; COMMON20
 41129 000065C4 19                      	db 25
 41130 000065C5 496E73756666696369-     	db 'Insufficient disk space',0Dh,0Ah
 41130 000065CE 656E74206469736B20-
 41130 000065D7 73706163650D0A     
 41131                                  MSG_1026:	; COMMON22
 41132 000065DE 13                      	db 19
 41133 000065DF 496E76616C69642063-     	db 'Invalid code page',0Dh,0Ah
 41133 000065E8 6F646520706167650D-
 41133 000065F1 0A                 
 41134                                  MSG_1031:	; COMMON23
 41135 000065F2 0E                      	db 14
 41136 000065F3 496E76616C69642064-     	db 'Invalid date',0Dh,0Ah
 41136 000065FC 6174650D0A         
 41137                                  MSG_1035:	; COMMON24
 41138 00006601 0E                      	db 14
 41139 00006602 496E76616C69642074-     	db 'Invalid time',0Dh,0Ah
 41139 0000660B 696D650D0A         
 41140                                  MSG_1062:	; COMMON25
 41141 00006610 0E                      	db 14
 41142 00006611 496E76616C69642070-     	db 'Invalid path',0Dh,0Ah
 41142 0000661A 6174680D0A         
 41143                                  MSG_1028:	; COMMON28
 41144 0000661F 21                      	db 33
 41145 00006620 507265737320616E79-     	db 'Press any key to continue . . .',0Dh,0Ah
 41145 00006629 206B657920746F2063-
 41145 00006632 6F6E74696E7565202E-
 41145 0000663B 202E202E0D0A       
 41146                                  MSG_1045:	; COMMON32
 41147 00006641 1C                      	db 28
 41148 00006642 556E61626C6520746F-     	db 'Unable to create directory',0Dh,0Ah
 41148 0000664B 206372656174652064-
 41148 00006654 69726563746F72790D-
 41148 0000665D 0A                 
 41149                                  MSG_1041:	; COMMON33
 41150 0000665E 21                      	db 33
 41151 0000665F 566F6C756D6520696E-     	db 'Volume in drive %1 has no label',0Dh,0Ah
 41151 00006668 206472697665202531-
 41151 00006671 20686173206E6F206C-
 41151 0000667A 6162656C0D0A       
 41152                                  MSG_1042:	; COMMON34
 41153 00006680 1A                      	db 26
 41154 00006681 566F6C756D6520696E-     	db 'Volume in drive %1 is %2',0Dh,0Ah
 41154 0000668A 206472697665202531-
 41154 00006693 2069732025320D0A   
 41155                                  MSG_1043:	; COMMON36
 41156 0000669B 1F                      	db 31  ; (MSG_1002-MSG_1043)-1
 41157 0000669C 566F6C756D65205365-     	db 'Volume Serial Number is %1-%2',0Dh,0Ah
 41157 000066A5 7269616C204E756D62-
 41157 000066AE 65722069732025312D-
 41157 000066B7 25320D0A           
 41158                                  MSG_1002:
 41159 000066BB 27                              db 39
 41160 000066BC 4475706C6963617465-     	db 'Duplicate file name or file not found',0Dh,0Ah
 41160 000066C5 2066696C65206E616D-
 41160 000066CE 65206F722066696C65-
 41160 000066D7 206E6F7420666F756E-
 41160 000066E0 640D0A             
 41161                                  MSG_1003:
 41162 000066E3 1B                      	db 27
 41163 000066E4 496E76616C69642070-     	db 'Invalid path or file name',0Dh,0Ah
 41163 000066ED 617468206F72206669-
 41163 000066F6 6C65206E616D650D0A 
 41164                                  MSG_1007:
 41165 000066FF 1A                      	db 26
 41166 00006700 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
 41166 00006709 7669726F6E6D656E74-
 41166 00006712 2073706163650D0A   
 41167                                  MSG_1008:
 41168 0000671A 15                      	db 21
 41169 0000671B 46696C652063726561-     	db 'File creation error',0Dh,0Ah
 41169 00006724 74696F6E206572726F-
 41169 0000672D 720D0A             
 41170                                  MSG_1009:
 41171 00006730 14                      	db 20  ; (MSG_1010-MSG_1009)-1
 41172 00006731 42617463682066696C-     	db 'Batch file missing',0Dh,0Ah
 41172 0000673A 65206D697373696E67-
 41172 00006743 0D0A               
 41173                                  MSG_1010:
 41174 00006745 1F                      	db 31
 41175 00006746 0D0A                    	db 0Dh,0Ah
 41176 00006748 496E73657274206469-     	db 'Insert disk with batch file',0Dh,0Ah
 41176 00006751 736B20776974682062-
 41176 0000675A 617463682066696C65-
 41176 00006763 0D0A               
 41177                                  MSG_1011:
 41178 00006765 1A                      	db 26
 41179 00006766 42616420636F6D6D61-     	db 'Bad command or file name',0Dh,0Ah
 41179 0000676F 6E64206F722066696C-
 41179 00006778 65206E616D650D0A   
 41180                                  
 41181                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 41182                                  %if 1
 41183                                  MSG_1012:
 41184 00006780 1C                      	db 28
 41185 00006781 5245585820696E7465-     	db 'REXX interpreter not found',0Dh,0Ah	
 41185 0000678A 72707265746572206E-
 41185 00006793 6F7420666F756E640D-
 41185 0000679C 0A                 
 41186                                  %endif
 41187                                  
 41188                                  MSG_1014:	; EXTEND5
 41189 0000679D 10                      	db 16
 41190 0000679E 416363657373206465-     	db 'Access denied ',0Dh,0Ah
 41190 000067A7 6E696564200D0A     
 41191                                  MSG_1016:
 41192 000067AE 29                      	db 41
 41193 000067AF 436F6E74656E74206F-     	db 'Content of destination lost before copy',0Dh,0Ah
 41193 000067B8 662064657374696E61-
 41193 000067C1 74696F6E206C6F7374-
 41193 000067CA 206265666F72652063-
 41193 000067D3 6F70790D0A         
 41194                                  MSG_1017:
 41195 000067D8 24                      	db 36
 41196 000067D9 496E76616C69642066-     	db 'Invalid filename or file not found',0Dh,0Ah
 41196 000067E2 696C656E616D65206F-
 41196 000067EB 722066696C65206E6F-
 41196 000067F4 7420666F756E640D0A 
 41197                                  MSG_1018:
 41198 000067FD 13                      	db 19
 41199 000067FE 25312066696C652873-     	db '%1 file(s) copied',0Dh,0Ah
 41199 00006807 2920636F706965640D-
 41199 00006810 0A                 
 41200                                  MSG_1019:
 41201 00006811 0B                      	db 11
 41202 00006812 25312066696C652873-     	db '%1 file(s) '
 41202 0000681B 2920               
 41203                                  MSG_1021:	; EXTEND15
 41204 0000681D 1D                      	db 29
 41205 0000681E 496E76616C69642064-     	db 'Invalid drive specification',0Dh,0Ah
 41205 00006827 726976652073706563-
 41205 00006830 696669636174696F6E-
 41205 00006839 0D0A               
 41206                                  MSG_1022:
 41207 0000683B 26                      	db 38
 41208 0000683C 436F64652070616765-     	db 'Code page %1 not prepared for system',0Dh,0Ah
 41208 00006845 202531206E6F742070-
 41208 0000684E 726570617265642066-
 41208 00006857 6F722073797374656D-
 41208 00006860 0D0A               
 41209                                  MSG_1023:
 41210 00006862 2B                      	db 43
 41211 00006863 436F64652070616765-     	db 'Code page %1 not prepared for all devices',0Dh,0Ah
 41211 0000686C 202531206E6F742070-
 41211 00006875 726570617265642066-
 41211 0000687E 6F7220616C6C206465-
 41211 00006887 76696365730D0A     
 41212                                  MSG_1024:
 41213 0000688E 16                      	db 22
 41214 0000688F 41637469766520636F-     	db 'Active code page: %1',0Dh,0Ah
 41214 00006898 646520706167653A20-
 41214 000068A1 25310D0A           
 41215                                  MSG_1025:
 41216 000068A5 17                      	db 23
 41217 000068A6 4E4C5346554E43206E-     	db 'NLSFUNC not installed',0Dh,0Ah
 41217 000068AF 6F7420696E7374616C-
 41217 000068B8 6C65640D0A         
 41218                                  MSG_1027:
 41219 000068BD 20                      	db 32
 41220 000068BE 43757272656E742064-     	db 'Current drive is no longer valid'
 41220 000068C7 72697665206973206E-
 41220 000068D0 6F206C6F6E67657220-
 41220 000068D9 76616C6964         
 41221                                  MSG_1029:
 41222 000068DE 11                      	db 17
 41223 000068DF 4C6162656C206E6F74-     	db 'Label not found',0Dh,0Ah
 41223 000068E8 20666F756E640D0A   
 41224                                  MSG_1030:
 41225 000068F0 0E                      	db 14
 41226 000068F1 53796E746178206572-     	db 'Syntax error',0Dh,0Ah
 41226 000068FA 726F720D0A         
 41227                                  MSG_1032:
 41228 000068FF 17                      	db 23
 41229 00006900 43757272656E742064-     	db 'Current date is %1 %2',0Dh,0Ah
 41229 00006909 617465206973202531-
 41229 00006912 2025320D0A         
 41230                                  MSG_1033:
 41231 00006917 15                      	db 21
 41232 00006918 53756E4D6F6E547565-     	db 'SunMonTueWedThuFriSat'
 41232 00006921 576564546875467269-
 41232 0000692A 536174             
 41233                                  MSG_1034:
 41234 0000692D 15                      	db 21
 41235 0000692E 456E746572206E6577-     	db 'Enter new date (%1): '
 41235 00006937 206461746520282531-
 41235 00006940 293A20             
 41236                                  MSG_1036:
 41237 00006943 14                      	db 20
 41238 00006944 43757272656E742074-     	db 'Current time is %1',0Dh,0Ah
 41238 0000694D 696D65206973202531-
 41238 00006956 0D0A               
 41239                                  MSG_1037:
 41240 00006958 10                      	db 16
 41241 00006959 456E746572206E6577-     	db 'Enter new time: '
 41241 00006962 2074696D653A20     
 41242                                  MSG_1038:
 41243 00006969 12                              db 18
 41244 0000696A 2C2020202044656C65-     	db ',    Delete (Y/N)?'
 41244 00006973 74652028592F4E293F 
 41245                                  MSG_1039:
 41246 0000697C 3C                              db 60
 41247 0000697D 416C6C2066696C6573-     	db 'All files in directory will be deleted!',0Dh,0Ah
 41247 00006986 20696E206469726563-
 41247 0000698F 746F72792077696C6C-
 41247 00006998 2062652064656C6574-
 41247 000069A1 6564210D0A         
 41248 000069A6 41726520796F752073-     	db 'Are you sure (Y/N)?'
 41248 000069AF 7572652028592F4E29-
 41248 000069B8 3F                 
 41249                                  
 41250                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 41251                                  %if 0
 41252                                  MSG_1040:
 41253                                  	db 20
 41254                                  	db 'MS-DOS Version %1.%2'
 41255                                  %else
 41256                                  MSG_1040:
 41257 000069B9 12                      	db 18
 41258 000069BA 504320444F53205665-     	db 'PC DOS Version 7.1'
 41258 000069C3 7273696F6E20372E31 
 41259                                  %endif
 41260                                  
 41261                                  MSG_1044:
 41262 000069CC 13                      	db 19
 41263 000069CD 496E76616C69642064-     	db 'Invalid directory',0Dh,0Ah
 41263 000069D6 69726563746F72790D-
 41263 000069DF 0A                 
 41264                                  MSG_1046:
 41265 000069E0 36                      	db 54
 41266 000069E1 496E76616C69642070-     	db 'Invalid path, not directory,',0Dh,0Ah
 41266 000069EA 6174682C206E6F7420-
 41266 000069F3 6469726563746F7279-
 41266 000069FC 2C0D0A             
 41267 000069FF 6F7220646972656374-     	db 'or directory not empty',0Dh,0Ah
 41267 00006A08 6F7279206E6F742065-
 41267 00006A11 6D7074790D0A       
 41268                                  MSG_1047:
 41269 00006A17 18                      	db 24
 41270 00006A18 4D7573742073706563-     	db 'Must specify ON or OFF',0Dh,0Ah
 41270 00006A21 696679204F4E206F72-
 41270 00006A2A 204F46460D0A       
 41271                                  MSG_1048:
 41272 00006A30 11                      	db 17
 41273 00006A31 4469726563746F7279-     	db 'Directory of %1',0Dh,0Ah
 41273 00006A3A 206F662025310D0A   
 41274                                  MSG_1049:
 41275 00006A42 09                      	db 9
 41276 00006A43 4E6F20506174680D0A      	db 'No Path',0Dh,0Ah
 41277                                  MSG_1050:
 41278 00006A4C 1E                      	db 30
 41279 00006A4D 496E76616C69642064-     	db 'Invalid drive in search path',0Dh,0Ah
 41279 00006A56 7269766520696E2073-
 41279 00006A5F 656172636820706174-
 41279 00006A68 680D0A             
 41280                                  MSG_1051:
 41281 00006A6B 10                      	db 16
 41282 00006A6C 496E76616C69642064-     	db 'Invalid device',0Dh,0Ah
 41282 00006A75 65766963650D0A     
 41283                                  MSG_1052:
 41284 00006A7C 16                      	db 22
 41285 00006A7D 464F522063616E6E6F-     	db 'FOR cannot be nested',0Dh,0Ah
 41285 00006A86 74206265206E657374-
 41285 00006A8F 65640D0A           
 41286                                  MSG_1053:
 41287 00006A93 25                      	db 37
 41288 00006A94 496E7465726D656469-     	db 'Intermediate file error during pipe',0Dh,0Ah
 41288 00006A9D 6174652066696C6520-
 41288 00006AA6 6572726F7220647572-
 41288 00006AAF 696E6720706970650D-
 41288 00006AB8 0A                 
 41289                                  MSG_1054:
 41290 00006AB9 26                      	db 38
 41291 00006ABA 43616E6E6F7420646F-     	db 'Cannot do binary reads from a device',0Dh,0Ah
 41291 00006AC3 2062696E6172792072-
 41291 00006ACC 656164732066726F6D-
 41291 00006AD5 206120646576696365-
 41291 00006ADE 0D0A               
 41292                                  
 41293                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:6205h)
 41294                                  	; 17/06/2023
 41295                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7155h)
 41296                                  MSG_1055:
 41297 00006AE0 0D                      	db 13
 41298 00006AE1 425245414B20697320-     	db 'BREAK is %1',0Dh,0Ah
 41298 00006AEA 25310D0A           
 41299                                  MSG_1056:
 41300 00006AEE 0E                      	db 14
 41301 00006AEF 564552494659206973-     	db 'VERIFY is %1',0Dh,0Ah
 41301 00006AF8 2025310D0A         
 41302                                  MSG_1057:
 41303 00006AFD 0C                      	db 12
 41304 00006AFE 4543484F2069732025-     	db 'ECHO is %1',0Dh,0Ah
 41304 00006B07 310D0A             
 41305                                  MSG_1059:
 41306 00006B0A 04                      	db 4
 41307 00006B0B 6F666600                	db 'off',0
 41308                                  MSG_1060:
 41309 00006B0F 03                      	db 3
 41310 00006B10 6F6E00                  	db 'on',0
 41311                                  MSG_1061:
 41312 00006B13 19                      	db 25
 41313 00006B14 4572726F7220777269-     	db 'Error writing to device',0Dh,0Ah
 41313 00006B1D 74696E6720746F2064-
 41313 00006B26 65766963650D0A     
 41314                                  MSG_1063:
 41315 00006B2D 02                      	db 2
 41316 00006B2E 2531                    	db '%1'
 41317                                  MSG_1064:
 41318 00006B30 02                      	db 2
 41319 00006B31 2531                    	db '%1'
 41320                                  MSG_1065:
 41321 00006B33 02                      	db 2
 41322 00006B34 2531                    	db '%1'
 41323                                  MSG_1066:
 41324 00006B36 02                      	db 2
 41325 00006B37 2531                    	db '%1'
 41326                                  MSG_1067:
 41327 00006B39 01                      	db 1
 41328 00006B3A 09                      	db 9
 41329                                  MSG_1068:
 41330                                  MSG_1105:	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 41331 00006B3B 0A                      	db 10
 41332 00006B3C 203C4449523E202020-     	db ' <DIR>    '
 41332 00006B45 20                 
 41333                                  MSG_1069:
 41334 00006B46 03                      	db 3
 41335 00006B47 082008                  	db 8, 20h, 8
 41336                                  MSG_1070:	; CRLF		
 41337 00006B4A 02                      	db 2
 41338 00006B4B 0D                      	db 0Dh
 41339 00006B4C 0A                      	db 0Ah
 41340                                  MSG_1071:
 41341 00006B4D 02                      	db 2
 41342 00006B4E 2531                    	db '%1'
 41343                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 41344                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:71C5h
 41345                                  MSG_1072:
 41346                                  	;db 8
 41347                                  	;db 'mm-dd-yy'
 41348 00006B50 09                      	db 9
 41349 00006B51 6D6D2D64642D797900      	db 'mm-dd-yy',0
 41350                                  MSG_1073:
 41351                                  	;db 8
 41352                                  	;db 'dd-mm-yy'
 41353 00006B5A 09                      	db 9
 41354 00006B5B 64642D6D6D2D797900      	db 'dd-mm-yy',0
 41355                                  MSG_1074:
 41356                                  	;db 8
 41357                                  	;db 'yy-mm-dd'
 41358 00006B64 09                      	db 9
 41359 00006B65 79792D6D6D2D646400      	db 'yy-mm-dd',0
 41360                                  MSG_1075:
 41361 00006B6E 05                      	db 5
 41362 00006B6F 2531202532              	db '%1 %2'
 41363                                  MSG_1076:
 41364 00006B74 02                      	db 2
 41365 00006B75 2531                    	db '%1'
 41366                                  MSG_1077:
 41367 00006B77 07                      	db 7
 41368 00006B78 20253120202532          	db ' %1  %2'
 41369                                  MSG_1078:
 41370 00006B7F 1A                      	db 26
 41371 00006B80 4469726563746F7279-     	db 'Directory already exists',0Dh,0Ah
 41371 00006B89 20616C726561647920-
 41371 00006B92 6578697374730D0A   
 41372                                  MSG_1079:
 41373 00006B9A 0A                      	db 10
 41374 00006B9B 25312062797465730D-     	db '%1 bytes',0Dh,0Ah
 41374 00006BA4 0A                 
 41375                                  MSG_1080:
 41376 00006BA5 15                      	db 21
 41377 00006BA6 546F74616C2066696C-     	db 'Total files listed:',0Dh,0Ah
 41377 00006BAF 6573206C6973746564-
 41377 00006BB8 3A0D0A             
 41378                                  MSG_1081:
 41379 00006BBB 2A                      	db 42
 41380 00006BBC 284572726F72206F63-     	db '(Error occurred in environment variable)',0Dh,0Ah
 41380 00006BC5 63757272656420696E-
 41380 00006BCE 20656E7669726F6E6D-
 41380 00006BD7 656E74207661726961-
 41380 00006BE0 626C65290D0A       
 41381                                  	;
 41382                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 41383                                  MSG_1082:
 41384 00006BE6 07                              db 7
 41385 00006BE7 205B592F4E5D3F          	db ' [Y/N]?'
 41386                                  MSG_1083:
 41387 00006BEE 02                      	db 2
 41388 00006BEF 594E                    	db 'YN'
 41389                                  	;
 41390                                  MSG_1084:
 41391 00006BF1 0F                      	db 15
 41392 00006BF2 28636F6E74696E7569-     	db '(continuing %1)'
 41392 00006BFB 6E6720253129       
 41393                                  MSG_1090:
 41394 00006C01 0D                      	db 13
 41395 00006C02 5265766973696F6E20-     	db 'Revision %1',0Dh,0Ah
 41395 00006C0B 25310D0A           
 41396                                  MSG_1091:
 41397 00006C0F 0D                      	db 13
 41398 00006C10 444F5320697320696E-     	db 'DOS is in ROM'
 41398 00006C19 20524F4D           
 41399                                  MSG_1092:
 41400 00006C1D 0D                      	db 13
 41401 00006C1E 444F5320697320696E-     	db 'DOS is in HMA'
 41401 00006C27 20484D41           
 41402                                  MSG_1093:
 41403 00006C2B 14                      	db 20
 41404 00006C2C 444F5320697320696E-     	db 'DOS is in low memory'
 41404 00006C35 206C6F77206D656D6F-
 41404 00006C3E 7279               
 41405                                  MSG_1094:
 41406 00006C40 1C                      	db 28
 41407 00006C41 43616E6E6F74204C6F-     	db 'Cannot Loadhigh batch file',0Dh,0Ah
 41407 00006C4A 616468696768206261-
 41407 00006C53 7463682066696C650D-
 41407 00006C5C 0A                 
 41408                                  MSG_1095:
 41409 00006C5D 1C                      	db 28
 41410 00006C5E 4C6F6164486967683A-     	db 'LoadHigh: Invalid filename',0Dh,0Ah
 41410 00006C67 20496E76616C696420-
 41410 00006C70 66696C656E616D650D-
 41410 00006C79 0A                 
 41411                                  MSG_1096:
 41412 00006C7A 30                      	db 48
 41413 00006C7B 43616E6E6F74206F70-     	db 'Cannot open specified country information file',0Dh,0Ah
 41413 00006C84 656E20737065636966-
 41413 00006C8D 69656420636F756E74-
 41413 00006C96 727920696E666F726D-
 41413 00006C9F 6174696F6E2066696C-
 41413 00006CA8 650D0A             
 41414                                  
 41415                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41416                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7320h
 41417                                  MSG_1097:
 41418 00006CAB 1C                      	db 28
 41419 00006CAC 4C6F6164486967683A-     	db 'LoadHigh: Invalid argument',0Dh,0Ah
 41419 00006CB5 20496E76616C696420-
 41419 00006CBE 617267756D656E740D-
 41419 00006CC7 0A                 
 41420                                  MSG_1098:
 41421 00006CC8 1C                      	db 28
 41422 00006CC9 526571756972656420-     	db 'Required parameter missing',0Dh,0Ah
 41422 00006CD2 706172616D65746572-
 41422 00006CDB 206D697373696E670D-
 41422 00006CE4 0A                 
 41423                                  MSG_1099:
 41424 00006CE5 15                      	db 21
 41425 00006CE6 556E7265636F676E69-     	db 'Unrecognized switch',0Dh,0Ah
 41425 00006CEF 7A6564207377697463-
 41425 00006CF8 680D0A             
 41426                                  MSG_1100:
 41427 00006CFB 25                      	db 37
 41428 00006CFC 412062616420554D42-     	db 'A bad UMB number has been specified',0Dh,0Ah
 41428 00006D05 206E756D6265722068-
 41428 00006D0E 6173206265656E2073-
 41428 00006D17 70656369666965640D-
 41428 00006D20 0A                 
 41429                                  
 41430                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41431                                  %if 0
 41432                                  MSG_1101:
 41433                                  	db 14
 41434                                  	db '  %1.%2 to 1.0'
 41435                                  MSG_1102:
 41436                                  	db 57
 41437                                  	db '                 %1.%2 to 1.0 average compression ratio',0Dh,0Ah
 41438                                  %endif
 41439                                  
 41440                                  MSG_1103:
 41441 00006D21 1A                      	db 26
 41442 00006D22 4F7665727772697465-     	db 'Overwrite %1 (Yes/No/All)?'
 41442 00006D2B 20253120285965732F-
 41442 00006D34 4E6F2F416C6C293F   
 41443                                  MSG_1104:
 41444 00006D3C 03                      	db 3
 41445 00006D3D 59                      _Y_es:	db 'Y'
 41446 00006D3E 4E                      _N_o:	db 'N'
 41447 00006D3F 41                      _A_ll:	db 'A'
 41448                                  
 41449                                  ; 02/08/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 41450                                  %if 0
 41451                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:73FEh)
 41452                                  MSG_1105:
 41453                                  	db 4
 41454                                  	db '    '
 41455                                  %else
 41456                                  	; 03/08/2024
 41457                                  ;MSG_1105:
 41458                                  	;db 10
 41459                                  	;db ' <DIR>    '
 41460                                  
 41461                                  	; (PCDOS 7.1 COMMAND.COM - TRANGROUP:724Eh)
 41462                                  MSG_1106:
 41463 00006D40 11                      	db 17
 41464 00006D41 2531204B2062797465-     	db '%1 K bytes free',0Dh,0Ah
 41464 00006D4A 7320667265650D0A   
 41465                                  %endif
 41466                                  
 41467                                  	; ((MSDOS 5.0 COMMAND.COM - TRANGROUP:63C2h))
 41468                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7403h)
 41469                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:7260h
 41470                                  MSG_1200:
 41471 00006D52 00                      	db 0	; /? unimplemented
 41472                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7404h)
 41473                                  MSG_1300:
 41474 00006D53 86                      	db 134
 41475 00006D54 53657473206F722063-     	db 'Sets or clears extended CTRL+C checking.',0Dh,0Ah
 41475 00006D5D 6C6561727320657874-
 41475 00006D66 656E64656420435452-
 41475 00006D6F 4C2B4320636865636B-
 41475 00006D78 696E672E0D0A       
 41476 00006D7E 0D0A                    	db 0Dh,0Ah
 41477 00006D80 425245414B205B4F4E-     	db 'BREAK [ON | OFF]',0Dh,0Ah
 41477 00006D89 207C204F46465D0D0A 
 41478 00006D92 0D0A                    	db 0Dh,0Ah
 41479 00006D94 547970652042524541-     	db 'Type BREAK without a parameter to display the current BREAK setting.',0Dh,0Ah
 41479 00006D9D 4B20776974686F7574-
 41479 00006DA6 206120706172616D65-
 41479 00006DAF 74657220746F206469-
 41479 00006DB8 73706C617920746865-
 41479 00006DC1 2063757272656E7420-
 41479 00006DCA 425245414B20736574-
 41479 00006DD3 74696E672E0D0A     
 41480                                  MSG_1320:
 41481 00006DDA 3F                      	db 63
 41482 00006DDB 446973706C61797320-     	db 'Displays or sets the active code page number.',0Dh,0Ah
 41482 00006DE4 6F7220736574732074-
 41482 00006DED 686520616374697665-
 41482 00006DF6 20636F646520706167-
 41482 00006DFF 65206E756D6265722E-
 41482 00006E08 0D0A               
 41483 00006E0A 0D0A                    	db 0Dh,0Ah
 41484 00006E0C 43484350205B6E6E6E-     	db 'CHCP [nnn]',0Dh,0Ah
 41484 00006E15 5D0D0A             
 41485 00006E18 0D0A                    	db 0Dh,0Ah
 41486                                  MSG_1321:
 41487 00006E1A 70                      	db 112
 41488 00006E1B 20206E6E6E20202053-     	db '  nnn   Specifies a code page number.',0Dh,0Ah
 41488 00006E24 706563696669657320-
 41488 00006E2D 6120636F6465207061-
 41488 00006E36 6765206E756D626572-
 41488 00006E3F 2E0D0A             
 41489 00006E42 0D0A                    	db 0Dh,0Ah
 41490 00006E44 547970652043484350-     	db 'Type CHCP without a parameter to display the active code page number.',0Dh,0Ah
 41490 00006E4D 20776974686F757420-
 41490 00006E56 6120706172616D6574-
 41490 00006E5F 657220746F20646973-
 41490 00006E68 706C61792074686520-
 41490 00006E71 61637469766520636F-
 41490 00006E7A 64652070616765206E-
 41490 00006E83 756D6265722E0D0A   
 41491                                  MSG_1340:
 41492 00006E8B 5B                      	db 91
 41493 00006E8C 446973706C61797320-     	db 'Displays the name of or changes the current directory.',0Dh,0Ah
 41493 00006E95 746865206E616D6520-
 41493 00006E9E 6F66206F7220636861-
 41493 00006EA7 6E6765732074686520-
 41493 00006EB0 63757272656E742064-
 41493 00006EB9 69726563746F72792E-
 41493 00006EC2 0D0A               
 41494 00006EC4 0D0A                    	db 0Dh,0Ah
 41495 00006EC6 4348444952205B6472-     	db 'CHDIR [drive:][path]',0Dh,0Ah
 41495 00006ECF 6976653A5D5B706174-
 41495 00006ED8 685D0D0A           
 41496 00006EDC 43484449525B2E2E5D-     	db 'CHDIR[..]',0Dh,0Ah
 41496 00006EE5 0D0A               
 41497                                  MSG_1341:
 41498 00006EE7 62                      	db 98
 41499 00006EE8 4344205B6472697665-     	db 'CD [drive:][path]',0Dh,0Ah
 41499 00006EF1 3A5D5B706174685D0D-
 41499 00006EFA 0A                 
 41500 00006EFB 43445B2E2E5D0D0A        	db 'CD[..]',0Dh,0Ah
 41501 00006F03 0D0A                    	db 0Dh,0Ah
 41502 00006F05 20202E2E2020205370-     	db '  ..   Specifies that you want to change to the parent directory.'
 41502 00006F0E 656369666965732074-
 41502 00006F17 68617420796F752077-
 41502 00006F20 616E7420746F206368-
 41502 00006F29 616E676520746F2074-
 41502 00006F32 686520706172656E74-
 41502 00006F3B 206469726563746F72-
 41502 00006F44 792E               
 41503 00006F46 0D0A                    	db 0Dh,0Ah
 41504 00006F48 0D0A                    	db 0Dh,0Ah
 41505                                  MSG_1342:
 41506 00006F4A 91                      	db 145
 41507 00006F4B 547970652043442064-     	db 'Type CD drive: to display the current directory in the specified '
 41507 00006F54 726976653A20746F20-
 41507 00006F5D 646973706C61792074-
 41507 00006F66 68652063757272656E-
 41507 00006F6F 74206469726563746F-
 41507 00006F78 727920696E20746865-
 41507 00006F81 207370656369666965-
 41507 00006F8A 6420               
 41508 00006F8C 64726976652E0D0A        	db 'drive.',0Dh,0Ah
 41509 00006F94 547970652043442077-     	db 'Type CD without parameters to display the current drive and directory.',0Dh,0Ah
 41509 00006F9D 6974686F7574207061-
 41509 00006FA6 72616D657465727320-
 41509 00006FAF 746F20646973706C61-
 41509 00006FB8 792074686520637572-
 41509 00006FC1 72656E742064726976-
 41509 00006FCA 6520616E6420646972-
 41509 00006FD3 6563746F72792E0D0A 
 41510                                  MSG_1360:
 41511 00006FDC 1B                      	db 27
 41512 00006FDD 436C65617273207468-     	db 'Clears the screen.',0Dh,0Ah
 41512 00006FE6 652073637265656E2E-
 41512 00006FEF 0D0A               
 41513 00006FF1 0D0A                    	db 0Dh,0Ah
 41514 00006FF3 434C530D0A              	db 'CLS',0Dh,0Ah
 41515                                  MSG_1400:
 41516                                  	;db 145
 41517                                  	;db 'Copies one or more files to another location.',0Dh,0Ah
 41518                                  	;db 0Dh,0Ah
 41519                                  	;db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 41520                                  	;db '  [/A | /B]] [/V]',0Dh,0Ah
 41521                                  	;db 0Dh,0Ah
 41522                                  	
 41523                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41524                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:76A9h)
 41525 00006FF8 9C                      	db 156 ; 19/06/2023	
 41526 00006FF9 436F70696573206F6E-     	db 'Copies one or more files to another location.',0Dh,0Ah
 41526 00007002 65206F72206D6F7265-
 41526 0000700B 2066696C657320746F-
 41526 00007014 20616E6F7468657220-
 41526 0000701D 6C6F636174696F6E2E-
 41526 00007026 0D0A               
 41527 00007028 0D0A                    	db 0Dh,0Ah
 41528 0000702A 434F5059205B2F4120-     	db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 41528 00007033 7C202F425D20736F75-
 41528 0000703C 726365205B2F41207C-
 41528 00007045 202F425D205B2B2073-
 41528 0000704E 6F75726365205B2F41-
 41528 00007057 207C202F425D205B2B-
 41528 00007060 202E2E2E5D5D205B64-
 41528 00007069 657374696E6174696F-
 41528 00007072 6E0D0A             
 41529 00007075 20205B2F41207C202F-     	db '  [/A | /B]] [/V] [/Y | /-Y]',0Dh,0Ah
 41529 0000707E 425D5D205B2F565D20-
 41529 00007087 5B2F59207C202F2D59-
 41529 00007090 5D0D0A             
 41530 00007093 0D0A                    	db 0Dh,0Ah
 41531                                  MSG_1401:
 41532 00007095 68                      	db 104
 41533 00007096 2020736F7572636520-     	db '  source       Specifies the file or files to be copied.',0Dh,0Ah
 41533 0000709F 202020202020537065-
 41533 000070A8 636966696573207468-
 41533 000070B1 652066696C65206F72-
 41533 000070BA 2066696C657320746F-
 41533 000070C3 20626520636F706965-
 41533 000070CC 642E0D0A           
 41534 000070D0 20202F412020202020-     	db '  /A           Indicates an ASCII text file.',0Dh,0Ah
 41534 000070D9 202020202020496E64-
 41534 000070E2 69636174657320616E-
 41534 000070EB 204153434949207465-
 41534 000070F4 78742066696C652E0D-
 41534 000070FD 0A                 
 41535                                  MSG_1402:
 41536 000070FE 76                      	db 118
 41537 000070FF 20202F422020202020-     	db '  /B           Indicates a binary file.',0Dh,0Ah
 41537 00007108 202020202020496E64-
 41537 00007111 696361746573206120-
 41537 0000711A 62696E617279206669-
 41537 00007123 6C652E0D0A         
 41538 00007128 202064657374696E61-     	db '  destination  Specifies the directory and/or filename for the new file(s).',0Dh,0Ah
 41538 00007131 74696F6E2020537065-
 41538 0000713A 636966696573207468-
 41538 00007143 65206469726563746F-
 41538 0000714C 727920616E642F6F72-
 41538 00007155 2066696C656E616D65-
 41538 0000715E 20666F722074686520-
 41538 00007167 6E65772066696C6528-
 41538 00007170 73292E0D0A         
 41539                                  MSG_1403:	
 41540                                  	;db 65  ;  MSDOS 5.0
 41541                                  	; 17/06/2023
 41542 00007175 3F                      	db 63 ; MSDOS 6.22	
 41543 00007176 20202F562020202020-     	db '  /V           Verifies that new files are written correctly.',0Dh,0Ah
 41543 0000717F 202020202020566572-
 41543 00007188 696669657320746861-
 41543 00007191 74206E65772066696C-
 41543 0000719A 657320617265207772-
 41543 000071A3 697474656E20636F72-
 41543 000071AC 726563746C792E0D0A 
 41544                                  	;db 0Dh,0Ah ; MSDOS 5.0
 41545                                  
 41546                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41547                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7866h
 41548                                  MSG_1404:
 41549 000071B5 74                              db 116
 41550 000071B6 20202F592020202020-     	db '  /Y           Suppresses prompting to confirm you want to overwrite an',0Dh,0Ah
 41550 000071BF 202020202020537570-
 41550 000071C8 707265737365732070-
 41550 000071D1 726F6D7074696E6720-
 41550 000071DA 746F20636F6E666972-
 41550 000071E3 6D20796F752077616E-
 41550 000071EC 7420746F206F766572-
 41550 000071F5 777269746520616E0D-
 41550 000071FE 0A                 
 41551 000071FF 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 41551 00007208 202020202020657869-
 41551 00007211 7374696E6720646573-
 41551 0000721A 74696E6174696F6E20-
 41551 00007223 66696C652E0D0A     
 41552                                  MSG_1405:
 41553 0000722A 72                      	db 114
 41554 0000722B 20202F2D5920202020-     	db '  /-Y          Causes prompting to confirm you want to overwrite an',0Dh,0Ah
 41554 00007234 202020202020436175-
 41554 0000723D 7365732070726F6D70-
 41554 00007246 74696E6720746F2063-
 41554 0000724F 6F6E6669726D20796F-
 41554 00007258 752077616E7420746F-
 41554 00007261 206F76657277726974-
 41554 0000726A 6520616E0D0A       
 41555 00007270 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 41555 00007279 202020202020657869-
 41555 00007282 7374696E6720646573-
 41555 0000728B 74696E6174696F6E20-
 41555 00007294 66696C652E0D0A     
 41556 0000729B 0D0A                    	db 0Dh,0Ah
 41557                                  MSG_1406:
 41558 0000729D 42                      	db 66
 41559 0000729E 546865207377697463-     	db 'The switch /Y may be preset in the COPYCMD environment variable.',0Dh,0Ah
 41559 000072A7 68202F59206D617920-
 41559 000072B0 626520707265736574-
 41559 000072B9 20696E207468652043-
 41559 000072C2 4F5059434D4420656E-
 41559 000072CB 7669726F6E6D656E74-
 41559 000072D4 207661726961626C65-
 41559 000072DD 2E0D0A             
 41560                                  
 41561                                  ;MSG_1404: ; MSDOS 5.0 (TRANGROUP:681Ch)
 41562                                  MSG_1407:  ; MSDOS 6.22	(TRANGROUP:7991h)
 41563 000072E0 87                      	db 135
 41564 000072E1 546F20617070656E64-     	db 'To append files, specify a single file for destination, but multiple files',0Dh,0Ah
 41564 000072EA 2066696C65732C2073-
 41564 000072F3 706563696679206120-
 41564 000072FC 73696E676C65206669-
 41564 00007305 6C6520666F72206465-
 41564 0000730E 7374696E6174696F6E-
 41564 00007317 2C20627574206D756C-
 41564 00007320 7469706C652066696C-
 41564 00007329 65730D0A           
 41565 0000732D 666F7220736F757263-     	db 'for source (using wildcards or file1+file2+file3 format).',0Dh,0Ah
 41565 00007336 6520287573696E6720-
 41565 0000733F 77696C646361726473-
 41565 00007348 206F722066696C6531-
 41565 00007351 2B66696C65322B6669-
 41565 0000735A 6C653320666F726D61-
 41565 00007363 74292E0D0A         
 41566                                  MSG_1420:
 41567 00007368 8A                      	db 138
 41568 00007369 4368616E6765732074-     	db 'Changes the terminal device used to control your system.',0Dh,0Ah
 41568 00007372 6865207465726D696E-
 41568 0000737B 616C20646576696365-
 41568 00007384 207573656420746F20-
 41568 0000738D 636F6E74726F6C2079-
 41568 00007396 6F7572207379737465-
 41568 0000739F 6D2E0D0A           
 41569 000073A3 0D0A                    	db 0Dh,0Ah
 41570 000073A5 435454592064657669-     	db 'CTTY device',0Dh,0Ah
 41570 000073AE 63650D0A           
 41571 000073B2 0D0A                    	db 0Dh,0Ah
 41572 000073B4 202064657669636520-     	db '  device   The terminal device you want to use, such as COM1.',0Dh,0Ah
 41572 000073BD 202054686520746572-
 41572 000073C6 6D696E616C20646576-
 41572 000073CF 69636520796F752077-
 41572 000073D8 616E7420746F207573-
 41572 000073E1 652C20737563682061-
 41572 000073EA 7320434F4D312E0D0A 
 41573                                  MSG_1440:
 41574                                  	;db 45
 41575                                  	;db 'Displays or sets the date.',0Dh,0Ah
 41576                                  	;db 0Dh,0Ah
 41577                                  	;db 'DATE [date]',0Dh,0Ah
 41578                                  	;db 0Dh,0Ah
 41579                                  
 41580                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41581                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7AA4h)
 41582 000073F3 5D                      	db 93
 41583 000073F4 446973706C61797320-     	db 'Displays or sets the date.',0Dh,0Ah
 41583 000073FD 6F7220736574732074-
 41583 00007406 686520646174652E0D-
 41583 0000740F 0A                 
 41584 00007410 0D0A                    	db 0Dh,0Ah
 41585 00007412 44415445205B6D6D2D-     	db 'DATE [mm-dd-yy]',0Dh,0Ah
 41585 0000741B 64642D79795D0D0A   
 41586 00007423 0D0A                    	db 0Dh,0Ah
 41587 00007425 20206D6D2D64642D79-     	db '  mm-dd-yy    Sets the date you specify.',0Dh,0Ah
 41587 0000742E 792020202053657473-
 41587 00007437 207468652064617465-
 41587 00007440 20796F752073706563-
 41587 00007449 6966792E0D0A       
 41588 0000744F 0D0A                    	db 0Dh,0Ah
 41589                                  MSG_1441:
 41590 00007451 83                      	db 131
 41591 00007452 547970652044415445-     	db 'Type DATE without parameters to display the current date setting and',0Dh,0Ah
 41591 0000745B 20776974686F757420-
 41591 00007464 706172616D65746572-
 41591 0000746D 7320746F2064697370-
 41591 00007476 6C6179207468652063-
 41591 0000747F 757272656E74206461-
 41591 00007488 74652073657474696E-
 41591 00007491 6720616E640D0A     
 41592 00007498 612070726F6D707420-     	db 'a prompt for a new one.  Press ENTER to keep the same date.',0Dh,0Ah
 41592 000074A1 666F722061206E6577-
 41592 000074AA 206F6E652E20205072-
 41592 000074B3 65737320454E544552-
 41592 000074BC 20746F206B65657020-
 41592 000074C5 7468652073616D6520-
 41592 000074CE 646174652E0D0A     
 41593                                  MSG_1460:	
 41594 000074D5 64                      	db 100
 41595 000074D6 44656C65746573206F-     	db 'Deletes one or more files.',0Dh,0Ah
 41595 000074DF 6E65206F72206D6F72-
 41595 000074E8 652066696C65732E0D-
 41595 000074F1 0A                 
 41596 000074F2 0D0A                    	db 0Dh,0Ah
 41597 000074F4 44454C205B64726976-     	db 'DEL [drive:][path]filename [/P]',0Dh,0Ah
 41597 000074FD 653A5D5B706174685D-
 41597 00007506 66696C656E616D6520-
 41597 0000750F 5B2F505D0D0A       
 41598 00007515 4552415345205B6472-     	db 'ERASE [drive:][path]filename [/P]',0Dh,0Ah
 41598 0000751E 6976653A5D5B706174-
 41598 00007527 685D66696C656E616D-
 41598 00007530 65205B2F505D0D0A   
 41599 00007538 0D0A                    	db 0Dh,0Ah
 41600                                  MSG_1461:
 41601 0000753A 83                      	db 131
 41602 0000753B 20205B64726976653A-     	db '  [drive:][path]filename  Specifies the file(s) to delete.  Specify multiple',0Dh,0Ah
 41602 00007544 5D5B706174685D6669-
 41602 0000754D 6C656E616D65202053-
 41602 00007556 706563696669657320-
 41602 0000755F 7468652066696C6528-
 41602 00007568 732920746F2064656C-
 41602 00007571 6574652E2020537065-
 41602 0000757A 63696679206D756C74-
 41602 00007583 69706C650D0A       
 41603 00007589 202020202020202020-     	db '                          files by using wildcards.',0Dh,0Ah
 41603 00007592 202020202020202020-
 41603 0000759B 202020202020202066-
 41603 000075A4 696C65732062792075-
 41603 000075AD 73696E672077696C64-
 41603 000075B6 63617264732E0D0A   
 41604                                  MSG_1462:
 41605 000075BE 4F                      	db 79
 41606 000075BF 20202F502020202020-     	db '  /P                      Prompts for confirmation before deleting each file.',0Dh,0Ah
 41606 000075C8 202020202020202020-
 41606 000075D1 202020202020202050-
 41606 000075DA 726F6D70747320666F-
 41606 000075E3 7220636F6E6669726D-
 41606 000075EC 6174696F6E20626566-
 41606 000075F5 6F72652064656C6574-
 41606 000075FE 696E67206561636820-
 41606 00007607 66696C652E0D0A     
 41607                                  
 41608                                  ; 17/06/2023
 41609                                  %if 0	; MSDOS 5.0 DIR Help messages
 41610                                  
 41611                                  MSG_1480:
 41612                                  	db 162
 41613                                  	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 41614                                  	db 0Dh,0Ah
 41615                                  	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attributes]]',0Dh,0Ah
 41616                                  	db '  [/O[[:]sortorder]] [/S] [/B] [/L]',0Dh,0Ah
 41617                                  	db 0Dh,0Ah
 41618                                  MSG_1481:
 41619                                  	db 93
 41620                                  	db '  [drive:][path][filename]',0Dh,0Ah
 41621                                  	db '              Specifies drive, directory, and/or files to list.',0Dh,0Ah
 41622                                  MSG_1482:
 41623                                  	db 97
 41624                                  	db '  /P          Pauses after each screenful of information.',0Dh,0Ah
 41625                                  	db '  /W          Uses wide list format.',0Dh,0Ah
 41626                                  MSG_1483:	
 41627                                  	db 122
 41628                                  	db '  /A          Displays files with specified attributes.',0Dh,0Ah
 41629                                  	db '  attributes   D  Directories                R  Read-only files',0Dh,0Ah
 41630                                  MSG_1484:
 41631                                  	db 191
 41632                                  	db '               H  Hidden files               A  Files ready for archiving',0Dh,0Ah
 41633                                  	db '               S  System files               -  Prefix meaning "not"',0Dh,0Ah
 41634                                  	db '  /O          List by files in sorted order.',0Dh,0Ah
 41635                                  MSG_1485:
 41636                                  	db 155
 41637                                  	db '  sortorder    N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 41638                                  	db '               E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 41639                                  MSG_1486:
 41640                                  	db 150
 41641                                  	db '               G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 41642                                  	db '  /S          Displays files in specified directory and all subdirectories.',0Dh,0Ah
 41643                                  MSG_1487:
 41644                                  	db 102
 41645                                  	db '  /B          Uses bare format (no heading information or summary).',0Dh,0Ah
 41646                                  	db '  /L          Uses lowercase.',0Dh,0Ah
 41647                                  	db 0Dh,0Ah
 41648                                  MSG_1488:
 41649                                  	db 146
 41650                                  	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 41651                                  	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 41652                                  %endif
 41653                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41654                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7CBFh
 41655                                  MSG_1480:
 41656 0000760E 89                      	db 137
 41657 0000760F 446973706C61797320-     	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 41657 00007618 61206C697374206F66-
 41657 00007621 2066696C657320616E-
 41657 0000762A 642073756264697265-
 41657 00007633 63746F726965732069-
 41657 0000763C 6E2061206469726563-
 41657 00007645 746F72792E0D0A     
 41658 0000764C 0D0A                    	db 0Dh,0Ah
 41659 0000764E 444952205B64726976-     	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attribs]] [/O[[:]sortord]]',0Dh,0Ah
 41659 00007657 653A5D5B706174685D-
 41659 00007660 5B66696C656E616D65-
 41659 00007669 5D205B2F505D205B2F-
 41659 00007672 575D205B2F415B5B3A-
 41659 0000767B 5D617474726962735D-
 41659 00007684 5D205B2F4F5B5B3A5D-
 41659 0000768D 736F72746F72645D5D-
 41659 00007696 0D0A               
 41660                                  MSG_1481:
 41661 00007698 1E                      	db 30
 41662 00007699 202020205B2F535D20-     	db '    [/S] [/B] [/L] [/C[H]]',0Dh,0Ah
 41662 000076A2 5B2F425D205B2F4C5D-
 41662 000076AB 205B2F435B485D5D0D-
 41662 000076B4 0A                 
 41663 000076B5 0D0A                    	db 0Dh,0Ah
 41664                                  MSG_1482:
 41665 000076B7 50                      	db 80
 41666 000076B8 20205B64726976653A-     	db '  [drive:][path][filename]   Specifies drive, directory, and/or files to list.',0Dh,0Ah
 41666 000076C1 5D5B706174685D5B66-
 41666 000076CA 696C656E616D655D20-
 41666 000076D3 202053706563696669-
 41666 000076DC 65732064726976652C-
 41666 000076E5 206469726563746F72-
 41666 000076EE 792C20616E642F6F72-
 41666 000076F7 2066696C657320746F-
 41666 00007700 206C6973742E0D0A   
 41667                                  MSG_1483:
 41668 00007708 59                      	db 89
 41669 00007709 20202F502020202020-     	db '  /P      Pauses after each screenful of information.',0Dh,0Ah
 41669 00007712 205061757365732061-
 41669 0000771B 667465722065616368-
 41669 00007724 2073637265656E6675-
 41669 0000772D 6C206F6620696E666F-
 41669 00007736 726D6174696F6E2E0D-
 41669 0000773F 0A                 
 41670 00007740 20202F572020202020-     	db '  /W      Uses wide list format.',0Dh,0Ah
 41670 00007749 205573657320776964-
 41670 00007752 65206C69737420666F-
 41670 0000775B 726D61742E0D0A     
 41671                                  MSG_1484:
 41672 00007762 7E                      	db 126
 41673 00007763 20202F412020202020-     	db '  /A      Displays files with specified attributes.',0Dh,0Ah
 41673 0000776C 20446973706C617973-
 41673 00007775 2066696C6573207769-
 41673 0000777E 746820737065636966-
 41673 00007787 696564206174747269-
 41673 00007790 62757465732E0D0A   
 41674 00007798 202061747472696273-     	db '  attribs   D  Directories   R  Read-only files         H  Hidden files',0Dh,0Ah
 41674 000077A1 202020442020446972-
 41674 000077AA 6563746F7269657320-
 41674 000077B3 202052202052656164-
 41674 000077BC 2D6F6E6C792066696C-
 41674 000077C5 657320202020202020-
 41674 000077CE 202048202048696464-
 41674 000077D7 656E2066696C65730D-
 41674 000077E0 0A                 
 41675                                  MSG_1485:
 41676 000077E1 7B                      	db 123
 41677 000077E2 202020202020202020-     	db '            S  System files  A  Files ready to archive  -  Prefix meaning "not"',0Dh,0Ah
 41677 000077EB 202020532020537973-
 41677 000077F4 74656D2066696C6573-
 41677 000077FD 202041202046696C65-
 41677 00007806 732072656164792074-
 41677 0000780F 6F2061726368697665-
 41677 00007818 20202D202050726566-
 41677 00007821 6978206D65616E696E-
 41677 0000782A 6720226E6F74220D0A 
 41678 00007833 20202F4F2020202020-     	db '  /O      List by files in sorted order.',0Dh,0Ah
 41678 0000783C 204C69737420627920-
 41678 00007845 66696C657320696E20-
 41678 0000784E 736F72746564206F72-
 41678 00007857 6465722E0D0A       
 41679                                  MSG_1486:
 41680 0000785D 95                      	db 149
 41681 0000785E 2020736F72746F7264-     	db '  sortord   N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 41681 00007867 2020204E2020427920-
 41681 00007870 6E616D652028616C70-
 41681 00007879 686162657469632920-
 41681 00007882 202020202020532020-
 41681 0000788B 42792073697A652028-
 41681 00007894 736D616C6C65737420-
 41681 0000789D 6669727374290D0A   
 41682 000078A5 202020202020202020-     	db '            E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 41682 000078AE 202020452020427920-
 41682 000078B7 657874656E73696F6E-
 41682 000078C0 2028616C7068616265-
 41682 000078C9 746963292020442020-
 41682 000078D2 427920646174652026-
 41682 000078DB 2074696D6520286561-
 41682 000078E4 726C69657374206669-
 41682 000078ED 727374290D0A       
 41683                                  MSG_1487:
 41684 000078F3 46                      	db 70
 41685 000078F4 202020202020202020-     	db '            G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 41685 000078FD 20202047202047726F-
 41685 00007906 757020646972656374-
 41685 0000790F 6F7269657320666972-
 41685 00007918 7374202020202D2020-
 41685 00007921 50726566697820746F-
 41685 0000792A 207265766572736520-
 41685 00007933 6F726465720D0A     
 41686                                  MSG_1488:
 41687 0000793A 7F                      	db 127
 41688 0000793B 202020202020202020-     	db '            C  By compression ratio (smallest first)',0Dh,0Ah
 41688 00007944 202020432020427920-
 41688 0000794D 636F6D707265737369-
 41688 00007956 6F6E20726174696F20-
 41688 0000795F 28736D616C6C657374-
 41688 00007968 206669727374290D0A 
 41689 00007971 20202F532020202020-     	db '  /S      Displays files in specified directory and all subdirectories.',0Dh,0Ah
 41689 0000797A 20446973706C617973-
 41689 00007983 2066696C657320696E-
 41689 0000798C 207370656369666965-
 41689 00007995 64206469726563746F-
 41689 0000799E 727920616E6420616C-
 41689 000079A7 6C2073756264697265-
 41689 000079B0 63746F726965732E0D-
 41689 000079B9 0A                 
 41690                                  MSG_1489:
 41691 000079BA 41                      	db 65
 41692 000079BB 20202F422020202020-     	db '  /B      Uses bare format (no heading information or summary).',0Dh,0Ah
 41692 000079C4 205573657320626172-
 41692 000079CD 6520666F726D617420-
 41692 000079D6 286E6F206865616469-
 41692 000079DF 6E6720696E666F726D-
 41692 000079E8 6174696F6E206F7220-
 41692 000079F1 73756D6D617279292E-
 41692 000079FA 0D0A               
 41693                                  
 41694                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41695                                  %if 0
 41696                                  MSG_1490:
 41697                                  	db 27
 41698                                  	db '  /L      Uses lowercase.',0Dh,0Ah
 41699                                  MSG_1491:
 41700                                  	db 82
 41701                                  	db '  /C[H]   Displays file compression ratio; /CH uses host allocation unit size.',0Dh,0Ah
 41702                                  	db 0Dh,0Ah
 41703                                  MSG_1492:
 41704                                  	db 146
 41705                                  	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 41706                                  	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 41707                                  MSG_1493:
 41708                                  	db 22
 41709                                  	db '    [/S] [/B] [/L]',0Dh,0Ah
 41710                                  	db 0Dh,0Ah
 41711                                  MSG_1494:
 41712                                  	db 29
 41713                                  	db '  /L      Uses lowercase.',0Dh,0Ah
 41714                                  	db 0Dh,0Ah
 41715                                  %endif
 41716                                  
 41717                                  MSG_1500:
 41718 000079FC 3E                      	db 62
 41719 000079FD 517569747320746865-     	db 'Quits the COMMAND.COM program (command interpreter).',0Dh,0Ah
 41719 00007A06 20434F4D4D414E442E-
 41719 00007A0F 434F4D2070726F6772-
 41719 00007A18 616D2028636F6D6D61-
 41719 00007A21 6E6420696E74657270-
 41719 00007A2A 7265746572292E0D0A 
 41720 00007A33 0D0A                    	db 0Dh,0Ah
 41721 00007A35 455849540D0A            	db 'EXIT',0Dh,0Ah
 41722                                  MSG_1520:
 41723 00007A3B 3D                      	db 61
 41724 00007A3C 437265617465732061-     	db 'Creates a directory.',0Dh,0Ah
 41724 00007A45 206469726563746F72-
 41724 00007A4E 792E0D0A           
 41725 00007A52 0D0A                    	db 0Dh,0Ah
 41726 00007A54 4D4B444952205B6472-     	db 'MKDIR [drive:]path',0Dh,0Ah
 41726 00007A5D 6976653A5D70617468-
 41726 00007A66 0D0A               
 41727 00007A68 4D44205B6472697665-     	db 'MD [drive:]path',0Dh,0Ah
 41727 00007A71 3A5D706174680D0A   
 41728                                  MSG_1540:
 41729 00007A79 5D                      	db 93
 41730 00007A7A 446973706C61797320-     	db 'Displays or sets a search path for executable files.',0Dh,0Ah
 41730 00007A83 6F7220736574732061-
 41730 00007A8C 207365617263682070-
 41730 00007A95 61746820666F722065-
 41730 00007A9E 786563757461626C65-
 41730 00007AA7 2066696C65732E0D0A 
 41731 00007AB0 0D0A                    	db 0Dh,0Ah
 41732 00007AB2 50415448205B5B6472-     	db 'PATH [[drive:]path[;...]]',0Dh,0Ah
 41732 00007ABB 6976653A5D70617468-
 41732 00007AC4 5B3B2E2E2E5D5D0D0A 
 41733 00007ACD 50415448203B0D0A        	db 'PATH ;',0Dh,0Ah
 41734 00007AD5 0D0A                    	db 0Dh,0Ah
 41735                                  MSG_1541:
 41736 00007AD7 6B                      	db 107
 41737 00007AD8 547970652050415448-     	db 'Type PATH ; to clear all search-path settings and direct MS-DOS to search',0Dh,0Ah
 41737 00007AE1 203B20746F20636C65-
 41737 00007AEA 617220616C6C207365-
 41737 00007AF3 617263682D70617468-
 41737 00007AFC 2073657474696E6773-
 41737 00007B05 20616E642064697265-
 41737 00007B0E 6374204D532D444F53-
 41737 00007B17 20746F207365617263-
 41737 00007B20 680D0A             
 41738 00007B23 6F6E6C7920696E2074-     	db 'only in the current directory.',0Dh,0Ah
 41738 00007B2C 68652063757272656E-
 41738 00007B35 74206469726563746F-
 41738 00007B3E 72792E0D0A         
 41739                                  MSG_1542:	
 41740 00007B43 3B                      	db 59
 41741 00007B44 547970652050415448-     	db 'Type PATH without parameters to display the current path.',0Dh,0Ah
 41741 00007B4D 20776974686F757420-
 41741 00007B56 706172616D65746572-
 41741 00007B5F 7320746F2064697370-
 41741 00007B68 6C6179207468652063-
 41741 00007B71 757272656E74207061-
 41741 00007B7A 74682E0D0A         
 41742                                  MSG_1560:
 41743 00007B7F 37                      	db 55
 41744 00007B80 4368616E6765732074-     	db 'Changes the MS-DOS command prompt.',0Dh,0Ah
 41744 00007B89 6865204D532D444F53-
 41744 00007B92 20636F6D6D616E6420-
 41744 00007B9B 70726F6D70742E0D0A 
 41745 00007BA4 0D0A                    	db 0Dh,0Ah
 41746 00007BA6 50524F4D5054205B74-     	db 'PROMPT [text]',0Dh,0Ah
 41746 00007BAF 6578745D0D0A       
 41747 00007BB5 0D0A                    	db 0Dh,0Ah
 41748                                  MSG_1561:	
 41749 00007BB7 7C                      	db 124
 41750 00007BB8 202074657874202020-     	db '  text    Specifies a new command prompt.',0Dh,0Ah
 41750 00007BC1 205370656369666965-
 41750 00007BCA 732061206E65772063-
 41750 00007BD3 6F6D6D616E64207072-
 41750 00007BDC 6F6D70742E0D0A     
 41751 00007BE3 0D0A                    	db 0Dh,0Ah
 41752 00007BE5 50726F6D7074206361-     	db 'Prompt can be made up of normal characters and the following special codes:',0Dh,0Ah
 41752 00007BEE 6E206265206D616465-
 41752 00007BF7 207570206F66206E6F-
 41752 00007C00 726D616C2063686172-
 41752 00007C09 61637465727320616E-
 41752 00007C12 642074686520666F6C-
 41752 00007C1B 6C6F77696E67207370-
 41752 00007C24 656369616C20636F64-
 41752 00007C2D 65733A0D0A         
 41753 00007C32 0D0A                    	db 0Dh,0Ah
 41754                                  MSG_1562:
 41755 00007C34 2F                      	db 47
 41756 00007C35 202024512020203D20-     	db '  $Q   = (equal sign)',0Dh,0Ah
 41756 00007C3E 28657175616C207369-
 41756 00007C47 676E290D0A         
 41757 00007C4C 202024242020202420-     	db '  $$   $ (dollar sign)',0Dh,0Ah
 41757 00007C55 28646F6C6C61722073-
 41757 00007C5E 69676E290D0A       
 41758                                  MSG_1563:
 41759 00007C64 2A                      	db 42
 41760 00007C65 202024542020204375-     	db '  $T   Current time',0Dh,0Ah
 41760 00007C6E 7272656E742074696D-
 41760 00007C77 650D0A             
 41761 00007C7A 202024442020204375-     	db '  $D   Current date',0Dh,0Ah
 41761 00007C83 7272656E7420646174-
 41761 00007C8C 650D0A             
 41762                                  MSG_1564:
 41763 00007C8F 3D                      	db 61
 41764 00007C90 202024502020204375-     	db '  $P   Current drive and path',0Dh,0Ah
 41764 00007C99 7272656E7420647269-
 41764 00007CA2 766520616E64207061-
 41764 00007CAB 74680D0A           
 41765 00007CAF 202024562020204D53-     	db '  $V   MS-DOS version number',0Dh,0Ah
 41765 00007CB8 2D444F532076657273-
 41765 00007CC1 696F6E206E756D6265-
 41765 00007CCA 720D0A             
 41766                                  MSG_1565:
 41767 00007CCD 34                      	db 52
 41768 00007CCE 2020244E2020204375-     	db '  $N   Current drive',0Dh,0Ah
 41768 00007CD7 7272656E7420647269-
 41768 00007CE0 76650D0A           
 41769 00007CE4 202024472020203E20-     	db '  $G   > (greater-than sign)',0Dh,0Ah
 41769 00007CED 28677265617465722D-
 41769 00007CF6 7468616E207369676E-
 41769 00007CFF 290D0A             
 41770                                  MSG_1566:
 41771 00007D02 2C                      	db 44
 41772 00007D03 2020244C2020203C20-     	db '  $L   < (less-than sign)',0Dh,0Ah
 41772 00007D0C 286C6573732D746861-
 41772 00007D15 6E207369676E290D0A 
 41773 00007D1E 202024422020207C20-     	db '  $B   | (pipe)',0Dh,0Ah
 41773 00007D27 2870697065290D0A   
 41774                                  MSG_1567:
 41775 00007D2F 79                      	db 121
 41776 00007D30 202024482020204261-     	db '  $H   Backspace (erases previous character)',0Dh,0Ah
 41776 00007D39 636B73706163652028-
 41776 00007D42 657261736573207072-
 41776 00007D4B 6576696F7573206368-
 41776 00007D54 61726163746572290D-
 41776 00007D5D 0A                 
 41777 00007D5E 202024452020204573-     	db '  $E   Escape code (ASCII code 27)',0Dh,0Ah
 41777 00007D67 6361706520636F6465-
 41777 00007D70 202841534349492063-
 41777 00007D79 6F6465203237290D0A 
 41778 00007D82 2020245F2020204361-     	db '  $_   Carriage return and linefeed',0Dh,0Ah
 41778 00007D8B 727269616765207265-
 41778 00007D94 7475726E20616E6420-
 41778 00007D9D 6C696E65666565640D-
 41778 00007DA6 0A                 
 41779 00007DA7 0D0A                    	db 0Dh,0Ah
 41780                                  MSG_1568:
 41781 00007DA9 4C                      	db 76
 41782 00007DAA 547970652050524F4D-     	db 'Type PROMPT without parameters to reset the prompt to the default setting.',0Dh,0Ah
 41782 00007DB3 505420776974686F75-
 41782 00007DBC 7420706172616D6574-
 41782 00007DC5 65727320746F207265-
 41782 00007DCE 736574207468652070-
 41782 00007DD7 726F6D707420746F20-
 41782 00007DE0 746865206465666175-
 41782 00007DE9 6C742073657474696E-
 41782 00007DF2 672E0D0A           
 41783                                  MSG_1580:
 41784 00007DF6 47                      	db 71
 41785 00007DF7 52656D6F7665732028-     	db 'Removes (deletes) a directory.',0Dh,0Ah
 41785 00007E00 64656C657465732920-
 41785 00007E09 61206469726563746F-
 41785 00007E12 72792E0D0A         
 41786 00007E17 0D0A                    	db 0Dh,0Ah
 41787 00007E19 524D444952205B6472-     	db 'RMDIR [drive:]path',0Dh,0Ah
 41787 00007E22 6976653A5D70617468-
 41787 00007E2B 0D0A               
 41788 00007E2D 5244205B6472697665-     	db 'RD [drive:]path',0Dh,0Ah
 41788 00007E36 3A5D706174680D0A   
 41789                                  MSG_1600:
 41790 00007E3E 1C                      	db 28
 41791 00007E3F 52656E616D65732061-     	db 'Renames a file or files.',0Dh,0Ah
 41791 00007E48 2066696C65206F7220-
 41791 00007E51 66696C65732E0D0A   
 41792 00007E59 0D0A                    	db 0Dh,0Ah
 41793                                  MSG_1601:
 41794 00007E5B 53                      	db 83
 41795 00007E5C 52454E414D45205B64-     	db 'RENAME [drive:][path]filename1 filename2',0Dh,0Ah
 41795 00007E65 726976653A5D5B7061-
 41795 00007E6E 74685D66696C656E61-
 41795 00007E77 6D65312066696C656E-
 41795 00007E80 616D65320D0A       
 41796 00007E86 52454E205B64726976-     	db 'REN [drive:][path]filename1 filename2',0Dh,0Ah
 41796 00007E8F 653A5D5B706174685D-
 41796 00007E98 66696C656E616D6531-
 41796 00007EA1 2066696C656E616D65-
 41796 00007EAA 320D0A             
 41797 00007EAD 0D0A                    	db 0Dh,0Ah
 41798                                  MSG_1602:
 41799                                  	;db 77
 41800                                  	;db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 41801                                  
 41802                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41803                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:8697h
 41804                                  MSG_1602:
 41805 00007EAF A0                      	db 160
 41806 00007EB0 4E6F74652074686174-     	db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 41806 00007EB9 20796F752063616E6E-
 41806 00007EC2 6F7420737065636966-
 41806 00007ECB 792061206E65772064-
 41806 00007ED4 72697665206F722070-
 41806 00007EDD 61746820666F722079-
 41806 00007EE6 6F7572206465737469-
 41806 00007EEF 6E6174696F6E206669-
 41806 00007EF8 6C652E0D0A         
 41807 00007EFD 0D0A                    	db 0Dh,0Ah
 41808 00007EFF 557365204D4F564520-     	db 'Use MOVE to rename a directory, or to move files from one directory to another.',0Dh,0Ah
 41808 00007F08 746F2072656E616D65-
 41808 00007F11 206120646972656374-
 41808 00007F1A 6F72792C206F722074-
 41808 00007F23 6F206D6F7665206669-
 41808 00007F2C 6C65732066726F6D20-
 41808 00007F35 6F6E65206469726563-
 41808 00007F3E 746F727920746F2061-
 41808 00007F47 6E6F746865722E0D0A 
 41809                                  MSG_1620:
 41810 00007F50 57                      	db 87
 41811 00007F51 446973706C6179732C-     	db 'Displays, sets, or removes MS-DOS environment variables.',0Dh,0Ah
 41811 00007F5A 20736574732C206F72-
 41811 00007F63 2072656D6F76657320-
 41811 00007F6C 4D532D444F5320656E-
 41811 00007F75 7669726F6E6D656E74-
 41811 00007F7E 207661726961626C65-
 41811 00007F87 732E0D0A           
 41812 00007F8B 0D0A                    	db 0Dh,0Ah
 41813 00007F8D 534554205B76617269-     	db 'SET [variable=[string]]',0Dh,0Ah
 41813 00007F96 61626C653D5B737472-
 41813 00007F9F 696E675D5D0D0A     
 41814 00007FA6 0D0A                    	db 0Dh,0Ah
 41815                                  MSG_1621:
 41816 00007FA8 81                      	db 129
 41817 00007FA9 20207661726961626C-     	db '  variable  Specifies the environment-variable name.',0Dh,0Ah
 41817 00007FB2 652020537065636966-
 41817 00007FBB 696573207468652065-
 41817 00007FC4 6E7669726F6E6D656E-
 41817 00007FCD 742D7661726961626C-
 41817 00007FD6 65206E616D652E0D0A 
 41818 00007FDF 2020737472696E6720-     	db '  string    Specifies a series of characters to assign to the variable.',0Dh,0Ah
 41818 00007FE8 202020537065636966-
 41818 00007FF1 696573206120736572-
 41818 00007FFA 696573206F66206368-
 41818 00008003 617261637465727320-
 41818 0000800C 746F2061737369676E-
 41818 00008015 20746F207468652076-
 41818 0000801E 61726961626C652E0D-
 41818 00008027 0A                 
 41819 00008028 0D0A                    	db 0Dh,0Ah
 41820                                  MSG_1622:
 41821 0000802A 4B                      	db 75
 41822 0000802B 547970652053455420-     	db 'Type SET without parameters to display the current environment variables.',0Dh,0Ah
 41822 00008034 776974686F75742070-
 41822 0000803D 6172616D6574657273-
 41822 00008046 20746F20646973706C-
 41822 0000804F 617920746865206375-
 41822 00008058 7272656E7420656E76-
 41822 00008061 69726F6E6D656E7420-
 41822 0000806A 7661726961626C6573-
 41822 00008073 2E0D0A             
 41823                                  MSG_1640:
 41824                                  	;db 52
 41825                                  	;db 'Displays or sets the system time.',0Dh,0Ah
 41826                                  	;db 0Dh,0Ah
 41827                                  	;db 'TIME [time]',0Dh,0Ah
 41828                                  	;db 0Dh,0Ah
 41829                                  
 41830                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41831                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:885Eh)
 41832 00008076 2D                      	db 45
 41833 00008077 446973706C61797320-     	db 'Displays or sets the time.',0Dh,0Ah
 41833 00008080 6F7220736574732074-
 41833 00008089 68652074696D652E0D-
 41833 00008092 0A                 
 41834 00008093 0D0A                    	db 0Dh,0Ah
 41835 00008095 54494D45205B74696D-     	db 'TIME [time]',0Dh,0Ah
 41835 0000809E 655D0D0A           
 41836 000080A2 0D0A                    	db 0Dh,0Ah
 41837                                  MSG_1641:
 41838 000080A4 83                      	db 131
 41839 000080A5 547970652054494D45-     	db 'Type TIME with no parameters to display the current time setting and a prompt',0Dh,0Ah
 41839 000080AE 2077697468206E6F20-
 41839 000080B7 706172616D65746572-
 41839 000080C0 7320746F2064697370-
 41839 000080C9 6C6179207468652063-
 41839 000080D2 757272656E74207469-
 41839 000080DB 6D652073657474696E-
 41839 000080E4 6720616E6420612070-
 41839 000080ED 726F6D70740D0A     
 41840 000080F4 666F722061206E6577-     	db 'for a new one.  Press ENTER to keep the same time.',0Dh,0Ah
 41840 000080FD 206F6E652E20205072-
 41840 00008106 65737320454E544552-
 41840 0000810F 20746F206B65657020-
 41840 00008118 7468652073616D6520-
 41840 00008121 74696D652E0D0A     
 41841                                  MSG_1660:
 41842 00008128 46                      	db 70
 41843 00008129 446973706C61797320-     	db 'Displays the contents of a text file.',0Dh,0Ah
 41843 00008132 74686520636F6E7465-
 41843 0000813B 6E7473206F66206120-
 41843 00008144 746578742066696C65-
 41843 0000814D 2E0D0A             
 41844 00008150 0D0A                    	db 0Dh,0Ah
 41845 00008152 54595045205B647269-     	db 'TYPE [drive:][path]filename',0Dh,0Ah
 41845 0000815B 76653A5D5B70617468-
 41845 00008164 5D66696C656E616D65-
 41845 0000816D 0D0A               
 41846                                  MSG_1680:
 41847 0000816F 25                      	db 37
 41848 00008170 446973706C61797320-     	db 'Displays the MS-DOS version.',0Dh,0Ah
 41848 00008179 746865204D532D444F-
 41848 00008182 532076657273696F6E-
 41848 0000818B 2E0D0A             
 41849 0000818E 0D0A                    	db 0Dh,0Ah
 41850 00008190 5645520D0A              	db 'VER',0Dh,0Ah
 41851                                  MSG_1700:
 41852 00008195 B1                      	db 177
 41853 00008196 54656C6C73204D532D-     	db 'Tells MS-DOS whether to verify that your files are written correctly to a',0Dh,0Ah
 41853 0000819F 444F53207768657468-
 41853 000081A8 657220746F20766572-
 41853 000081B1 696679207468617420-
 41853 000081BA 796F75722066696C65-
 41853 000081C3 732061726520777269-
 41853 000081CC 7474656E20636F7272-
 41853 000081D5 6563746C7920746F20-
 41853 000081DE 610D0A             
 41854 000081E1 6469736B2E0D0A          	db 'disk.',0Dh,0Ah
 41855 000081E8 0D0A                    	db 0Dh,0Ah
 41856 000081EA 564552494659205B4F-     	db 'VERIFY [ON | OFF]',0Dh,0Ah
 41856 000081F3 4E207C204F46465D0D-
 41856 000081FC 0A                 
 41857 000081FD 0D0A                    	db 0Dh,0Ah
 41858 000081FF 547970652056455249-     	db 'Type VERIFY without a parameter to display the current VERIFY setting.',0Dh,0Ah
 41858 00008208 465920776974686F75-
 41858 00008211 74206120706172616D-
 41858 0000821A 6574657220746F2064-
 41858 00008223 6973706C6179207468-
 41858 0000822C 652063757272656E74-
 41858 00008235 205645524946592073-
 41858 0000823E 657474696E672E0D0A 
 41859                                  MSG_1720:              
 41860 00008247 52                      	db 82
 41861 00008248 446973706C61797320-     	db 'Displays the disk volume label and serial number, if they exist.',0Dh,0Ah
 41861 00008251 746865206469736B20-
 41861 0000825A 766F6C756D65206C61-
 41861 00008263 62656C20616E642073-
 41861 0000826C 657269616C206E756D-
 41861 00008275 6265722C2069662074-
 41861 0000827E 686579206578697374-
 41861 00008287 2E0D0A             
 41862 0000828A 0D0A                    	db 0Dh,0Ah
 41863 0000828C 564F4C205B64726976-     	db 'VOL [drive:]',0Dh,0Ah
 41863 00008295 653A5D0D0A         
 41864                                  MSG_1740:
 41865 0000829A 5B                      	db 91
 41866 0000829B 43616C6C73206F6E65-     	db 'Calls one batch program from another.',0Dh,0Ah
 41866 000082A4 206261746368207072-
 41866 000082AD 6F6772616D2066726F-
 41866 000082B6 6D20616E6F74686572-
 41866 000082BF 2E0D0A             
 41867 000082C2 0D0A                    	db 0Dh,0Ah
 41868 000082C4 43414C4C205B647269-     	db 'CALL [drive:][path]filename [batch-parameters]',0Dh,0Ah
 41868 000082CD 76653A5D5B70617468-
 41868 000082D6 5D66696C656E616D65-
 41868 000082DF 205B62617463682D70-
 41868 000082E8 6172616D6574657273-
 41868 000082F1 5D0D0A             
 41869 000082F4 0D0A                    	db 0Dh,0Ah
 41870                                  MSG_1741:
 41871 000082F6 72                      	db 114
 41872 000082F7 202062617463682D70-     	db '  batch-parameters   Specifies any command-line information required by the',0Dh,0Ah
 41872 00008300 6172616D6574657273-
 41872 00008309 202020537065636966-
 41872 00008312 69657320616E792063-
 41872 0000831B 6F6D6D616E642D6C69-
 41872 00008324 6E6520696E666F726D-
 41872 0000832D 6174696F6E20726571-
 41872 00008336 756972656420627920-
 41872 0000833F 7468650D0A         
 41873 00008344 202020202020202020-     	db '                     batch program.',0Dh,0Ah
 41873 0000834D 202020202020202020-
 41873 00008356 202020626174636820-
 41873 0000835F 70726F6772616D2E0D-
 41873 00008368 0A                 
 41874                                  MSG_1760:	
 41875 00008369 4C                      	db 76
 41876 0000836A 5265636F7264732063-     	db 'Records comments (remarks) in a batch file or CONFIG.SYS.',0Dh,0Ah
 41876 00008373 6F6D6D656E74732028-
 41876 0000837C 72656D61726B732920-
 41876 00008385 696E20612062617463-
 41876 0000838E 682066696C65206F72-
 41876 00008397 20434F4E4649472E53-
 41876 000083A0 59532E0D0A         
 41877 000083A5 0D0A                    	db 0Dh,0Ah
 41878 000083A7 52454D205B636F6D6D-     	db 'REM [comment]',0Dh,0Ah
 41878 000083B0 656E745D0D0A       
 41879                                  MSG_1780:
 41880 000083B6 6B                      	db 107
 41881 000083B7 53757370656E647320-     	db 'Suspends processing of a batch program and displays the message "'
 41881 000083C0 70726F63657373696E-
 41881 000083C9 67206F662061206261-
 41881 000083D2 7463682070726F6772-
 41881 000083DB 616D20616E64206469-
 41881 000083E4 73706C617973207468-
 41881 000083ED 65206D657373616765-
 41881 000083F6 2022               
 41882 000083F8 507265737320616E79-     	db 'Press any',0Dh,0Ah
 41882 00008401 0D0A               
 41883 00008403 6B657920746F20636F-     	db 'key to continue...."',0Dh,0Ah
 41883 0000840C 6E74696E75652E2E2E-
 41883 00008415 2E220D0A           
 41884 00008419 0D0A                    	db 0Dh,0Ah
 41885 0000841B 50415553450D0A          	db 'PAUSE',0Dh,0Ah
 41886                                  MSG_1800:
 41887 00008422 4D                      	db 77
 41888 00008423 446973706C61797320-     	db 'Displays messages, or turns command-echoing on or off.',0Dh,0Ah
 41888 0000842C 6D657373616765732C-
 41888 00008435 206F72207475726E73-
 41888 0000843E 20636F6D6D616E642D-
 41888 00008447 6563686F696E67206F-
 41888 00008450 6E206F72206F66662E-
 41888 00008459 0D0A               
 41889 0000845B 0D0A                    	db 0Dh,0Ah
 41890 0000845D 20204543484F205B4F-     	db '  ECHO [ON | OFF]',0Dh,0Ah
 41890 00008466 4E207C204F46465D0D-
 41890 0000846F 0A                 
 41891                                  MSG_1801:
 41892 00008470 57                      	db 87
 41893 00008471 20204543484F205B6D-     	db '  ECHO [message]',0Dh,0Ah
 41893 0000847A 6573736167655D0D0A 
 41894 00008483 0D0A                    	db 0Dh,0Ah
 41895 00008485 54797065204543484F-     	db 'Type ECHO without parameters to display the current echo setting.'
 41895 0000848E 20776974686F757420-
 41895 00008497 706172616D65746572-
 41895 000084A0 7320746F2064697370-
 41895 000084A9 6C6179207468652063-
 41895 000084B2 757272656E74206563-
 41895 000084BB 686F2073657474696E-
 41895 000084C4 672E               
 41896 000084C6 0D0A                    	db 0Dh,0Ah
 41897                                  MSG_1820:
 41898 000084C8 47                      	db 71
 41899 000084C9 44697265637473204D-     	db 'Directs MS-DOS to a labelled line in a batch program.',0Dh,0Ah
 41899 000084D2 532D444F5320746F20-
 41899 000084DB 61206C6162656C6C65-
 41899 000084E4 64206C696E6520696E-
 41899 000084ED 206120626174636820-
 41899 000084F6 70726F6772616D2E0D-
 41899 000084FF 0A                 
 41900 00008500 0D0A                    	db 0Dh,0Ah
 41901 00008502 474F544F206C616265-     	db 'GOTO label',0Dh,0Ah
 41901 0000850B 6C0D0A             
 41902 0000850E 0D0A                    	db 0Dh,0Ah
 41903                                  MSG_1821:
 41904 00008510 8A                      	db 138
 41905 00008511 20206C6162656C2020-     	db '  label   Specifies a text string used in the batch program as a label.',0Dh,0Ah
 41905 0000851A 205370656369666965-
 41905 00008523 732061207465787420-
 41905 0000852C 737472696E67207573-
 41905 00008535 656420696E20746865-
 41905 0000853E 206261746368207072-
 41905 00008547 6F6772616D20617320-
 41905 00008550 61206C6162656C2E0D-
 41905 00008559 0A                 
 41906 0000855A 0D0A                    	db 0Dh,0Ah
 41907 0000855C 596F75207479706520-     	db 'You type a label on a line by itself, beginning with a colon.',0Dh,0Ah
 41907 00008565 61206C6162656C206F-
 41907 0000856E 6E2061206C696E6520-
 41907 00008577 627920697473656C66-
 41907 00008580 2C20626567696E6E69-
 41907 00008589 6E6720776974682061-
 41907 00008592 20636F6C6F6E2E0D0A 
 41908                                  MSG_1840:
 41909 0000859B 4A                      	db 74
 41910 0000859C 4368616E6765732074-     	db 'Changes the position of replaceable parameters in a batch file.',0Dh,0Ah
 41910 000085A5 686520706F73697469-
 41910 000085AE 6F6E206F6620726570-
 41910 000085B7 6C61636561626C6520-
 41910 000085C0 706172616D65746572-
 41910 000085C9 7320696E2061206261-
 41910 000085D2 7463682066696C652E-
 41910 000085DB 0D0A               
 41911 000085DD 0D0A                    	db 0Dh,0Ah
 41912 000085DF 53484946540D0A          	db 'SHIFT',0Dh,0Ah
 41913                                  MSG_1860:
 41914 000085E6 5A                      	db 90
 41915 000085E7 506572666F726D7320-     	db 'Performs conditional processing in batch programs.',0Dh,0Ah
 41915 000085F0 636F6E646974696F6E-
 41915 000085F9 616C2070726F636573-
 41915 00008602 73696E6720696E2062-
 41915 0000860B 617463682070726F67-
 41915 00008614 72616D732E0D0A     
 41916 0000861B 0D0A                    	db 0Dh,0Ah
 41917 0000861D 4946205B4E4F545D20-     	db 'IF [NOT] ERRORLEVEL number command',0Dh,0Ah
 41917 00008626 4552524F524C455645-
 41917 0000862F 4C206E756D62657220-
 41917 00008638 636F6D6D616E640D0A 
 41918                                  MSG_1861:
 41919 00008641 46                      	db 70
 41920 00008642 4946205B4E4F545D20-     	db 'IF [NOT] string1==string2 command',0Dh,0Ah
 41920 0000864B 737472696E67313D3D-
 41920 00008654 737472696E67322063-
 41920 0000865D 6F6D6D616E640D0A   
 41921 00008665 4946205B4E4F545D20-     	db 'IF [NOT] EXIST filename command',0Dh,0Ah
 41921 0000866E 45584953542066696C-
 41921 00008677 656E616D6520636F6D-
 41921 00008680 6D616E640D0A       
 41922 00008686 0D0A                    	db 0Dh,0Ah
 41923                                  MSG_1862:
 41924 00008688 7D                      	db 125
 41925 00008689 20204E4F5420202020-     	db '  NOT               Specifies that MS-DOS should carry out the command only',0Dh,0Ah
 41925 00008692 202020202020202020-
 41925 0000869B 202053706563696669-
 41925 000086A4 65732074686174204D-
 41925 000086AD 532D444F532073686F-
 41925 000086B6 756C64206361727279-
 41925 000086BF 206F75742074686520-
 41925 000086C8 636F6D6D616E64206F-
 41925 000086D1 6E6C790D0A         
 41926 000086D6 202020202020202020-     	db '                    if the condition is false.',0Dh,0Ah
 41926 000086DF 202020202020202020-
 41926 000086E8 202069662074686520-
 41926 000086F1 636F6E646974696F6E-
 41926 000086FA 2069732066616C7365-
 41926 00008703 2E0D0A             
 41927                                  MSG_1863:
 41928 00008706 A2                      	db 162
 41929 00008707 20204552524F524C45-     	db '  ERRORLEVEL number Specifies a true condition if the last program run returned',0Dh,0Ah
 41929 00008710 56454C206E756D6265-
 41929 00008719 722053706563696669-
 41929 00008722 657320612074727565-
 41929 0000872B 20636F6E646974696F-
 41929 00008734 6E2069662074686520-
 41929 0000873D 6C6173742070726F67-
 41929 00008746 72616D2072756E2072-
 41929 0000874F 657475726E65640D0A 
 41930 00008758 202020202020202020-     	db '                    '
 41930 00008761 202020202020202020-
 41930 0000876A 2020               
 41931 0000876C 616E20657869742063-     	db 'an exit code equal to or greater than the number specified.',0Dh,0Ah
 41931 00008775 6F646520657175616C-
 41931 0000877E 20746F206F72206772-
 41931 00008787 656174657220746861-
 41931 00008790 6E20746865206E756D-
 41931 00008799 626572207370656369-
 41931 000087A2 666965642E0D0A     
 41932                                  MSG_1864:
 41933 000087A9 66                      	db 102
 41934 000087AA 2020636F6D6D616E64-     	db '  command           Specifies the command to carry out if the condition is',0Dh,0Ah
 41934 000087B3 202020202020202020-
 41934 000087BC 202053706563696669-
 41934 000087C5 65732074686520636F-
 41934 000087CE 6D6D616E6420746F20-
 41934 000087D7 6361727279206F7574-
 41934 000087E0 206966207468652063-
 41934 000087E9 6F6E646974696F6E20-
 41934 000087F2 69730D0A           
 41935 000087F6 202020202020202020-     	db '                    met.',0Dh,0Ah
 41935 000087FF 202020202020202020-
 41935 00008808 20206D65742E0D0A   
 41936                                  MSG_1865:
 41937 00008810 6A                      	db 106
 41938 00008811 2020737472696E6731-     	db '  string1==string2  Specifies a true condition if the specified text strings',0Dh,0Ah
 41938 0000881A 3D3D737472696E6732-
 41938 00008823 202053706563696669-
 41938 0000882C 657320612074727565-
 41938 00008835 20636F6E646974696F-
 41938 0000883E 6E2069662074686520-
 41938 00008847 737065636966696564-
 41938 00008850 207465787420737472-
 41938 00008859 696E67730D0A       
 41939 0000885F 202020202020202020-     	db '                    match.',0Dh,0Ah
 41939 00008868 202020202020202020-
 41939 00008871 20206D617463682E0D-
 41939 0000887A 0A                 
 41940                                  MSG_1866:
 41941 0000887B 67                      	db 103
 41942 0000887C 202045584953542066-     	db '  EXIST filename    Specifies a true condition if the specified filename',0Dh,0Ah
 41942 00008885 696C656E616D652020-
 41942 0000888E 202053706563696669-
 41942 00008897 657320612074727565-
 41942 000088A0 20636F6E646974696F-
 41942 000088A9 6E2069662074686520-
 41942 000088B2 737065636966696564-
 41942 000088BB 2066696C656E616D65-
 41942 000088C4 0D0A               
 41943 000088C6 202020202020202020-     	db '                    exists.',0Dh,0Ah
 41943 000088CF 202020202020202020-
 41943 000088D8 20206578697374732E-
 41943 000088E1 0D0A               
 41944                                  MSG_1880:
 41945 000088E3 77                      	db 119
 41946 000088E4 52756E732061207370-     	db 'Runs a specified command for each file in a set of files.',0Dh,0Ah
 41946 000088ED 656369666965642063-
 41946 000088F6 6F6D6D616E6420666F-
 41946 000088FF 722065616368206669-
 41946 00008908 6C6520696E20612073-
 41946 00008911 6574206F662066696C-
 41946 0000891A 65732E0D0A         
 41947 0000891F 0D0A                    	db 0Dh,0Ah
 41948 00008921 464F52202576617269-     	db 'FOR %variable IN (set) DO command [command-parameters]',0Dh,0Ah
 41948 0000892A 61626C6520494E2028-
 41948 00008933 7365742920444F2063-
 41948 0000893C 6F6D6D616E64205B63-
 41948 00008945 6F6D6D616E642D7061-
 41948 0000894E 72616D65746572735D-
 41948 00008957 0D0A               
 41949 00008959 0D0A                    	db 0Dh,0Ah
 41950                                  MSG_1881:
 41951 0000895B 7D                      	db 125
 41952 0000895C 202025766172696162-     	db '  %variable  Specifies a replaceable parameter.',0Dh,0Ah
 41952 00008965 6C6520205370656369-
 41952 0000896E 666965732061207265-
 41952 00008977 706C61636561626C65-
 41952 00008980 20706172616D657465-
 41952 00008989 722E0D0A           
 41953 0000898D 202028736574292020-     	db '  (set)      Specifies a set of one or more files.  Wildcards may be used.',0Dh,0Ah
 41953 00008996 202020205370656369-
 41953 0000899F 666965732061207365-
 41953 000089A8 74206F66206F6E6520-
 41953 000089B1 6F72206D6F72652066-
 41953 000089BA 696C65732E20205769-
 41953 000089C3 6C646361726473206D-
 41953 000089CC 617920626520757365-
 41953 000089D5 642E0D0A           
 41954                                  MSG_1882:
 41955 000089D9 56                      	db 86
 41956 000089DA 2020636F6D6D616E64-     	db '  command    Specifies the command to carry out for each file.',0Dh,0Ah
 41956 000089E3 202020205370656369-
 41956 000089EC 666965732074686520-
 41956 000089F5 636F6D6D616E642074-
 41956 000089FE 6F206361727279206F-
 41956 00008A07 757420666F72206561-
 41956 00008A10 63682066696C652E0D-
 41956 00008A19 0A                 
 41957 00008A1A 2020636F6D6D616E64-     	db '  command-parameters',0Dh,0Ah
 41957 00008A23 2D706172616D657465-
 41957 00008A2C 72730D0A           
 41958                                  MSG_1883:
 41959 00008A30 A2                      	db 162
 41960 00008A31 202020202020202020-     	db '             Specifies parameters or switches for the specified command.',0Dh,0Ah
 41960 00008A3A 202020205370656369-
 41960 00008A43 666965732070617261-
 41960 00008A4C 6D6574657273206F72-
 41960 00008A55 207377697463686573-
 41960 00008A5E 20666F722074686520-
 41960 00008A67 737065636966696564-
 41960 00008A70 20636F6D6D616E642E-
 41960 00008A79 0D0A               
 41961 00008A7B 0D0A                    	db 0Dh,0Ah
 41962 00008A7D 546F20757365207468-     	db 'To use the FOR command in a batch program, specify %%variable instead of',0Dh,0Ah
 41962 00008A86 6520464F5220636F6D-
 41962 00008A8F 6D616E6420696E2061-
 41962 00008A98 206261746368207072-
 41962 00008AA1 6F6772616D2C207370-
 41962 00008AAA 656369667920252576-
 41962 00008AB3 61726961626C652069-
 41962 00008ABC 6E7374656164206F66-
 41962 00008AC5 0D0A               
 41963 00008AC7 257661726961626C65-     	db '%variable.',0Dh,0Ah
 41963 00008AD0 2E0D0A             
 41964                                  MSG_1900:
 41965 00008AD3 17                      	db 23
 41966 00008AD4 526573657276656420-     	db 'Reserved command name',0Dh,0Ah
 41966 00008ADD 636F6D6D616E64206E-
 41966 00008AE6 616D650D0A         
 41967                                  MSG_1920:
 41968 00008AEB 2F                      	db 47
 41969 00008AEC 4C6F61647320612070-     	db 'Loads a program into the upper memory area.',0Dh,0Ah
 41969 00008AF5 726F6772616D20696E-
 41969 00008AFE 746F20746865207570-
 41969 00008B07 706572206D656D6F72-
 41969 00008B10 7920617265612E0D0A 
 41970 00008B19 0D0A                    	db 0Dh,0Ah
 41971                                  MSG_1921:
 41972                                  	;db 88
 41973                                  	;db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 41974                                  	;db 'LH [drive:][path]filename [parameters]',0Dh,0Ah
 41975                                  	;db 0Dh,0Ah
 41976                                  
 41977                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41978                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9303h
 41979 00008B1B 9D                      	db 157
 41980 00008B1C 4C4F41444849474820-     	db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 41980 00008B25 5B64726976653A5D5B-
 41980 00008B2E 706174685D66696C65-
 41980 00008B37 6E616D65205B706172-
 41980 00008B40 616D65746572735D0D-
 41980 00008B49 0A                 
 41981 00008B4A 4C4F41444849474820-     	db 'LOADHIGH [/L:region1[,minsize1][;region2[,minsize2]...] [/S]]',0Dh,0Ah
 41981 00008B53 5B2F4C3A726567696F-
 41981 00008B5C 6E315B2C6D696E7369-
 41981 00008B65 7A65315D5B3B726567-
 41981 00008B6E 696F6E325B2C6D696E-
 41981 00008B77 73697A65325D2E2E2E-
 41981 00008B80 5D205B2F535D5D0D0A 
 41982 00008B89 202020202020202020-     	db '         [drive:][path]filename [parameters]',0Dh,0Ah
 41982 00008B92 5B64726976653A5D5B-
 41982 00008B9B 706174685D66696C65-
 41982 00008BA4 6E616D65205B706172-
 41982 00008BAD 616D65746572735D0D-
 41982 00008BB6 0A                 
 41983 00008BB7 0D0A                    	db 0Dh,0Ah
 41984                                  	
 41985                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:8111h)
 41986                                  ;MSG_1922: 	; MSDOS 5.0 COMMAND.COM
 41987                                  	;db 113
 41988                                  	;db '  parameters   Specifies any command-line information required by the',0Dh,0Ah
 41989                                  	;db '               program you want to load.',0Dh,0Ah
 41990                                  
 41991                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41992                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:93A1h
 41993                                  MSG_1922:
 41994 00008BB9 B6                      	db 182
 41995 00008BBA 2F4C3A726567696F6E-     	db '/L:region1[,minsize1][;region2[,minsize2]]...',0Dh,0Ah
 41995 00008BC3 315B2C6D696E73697A-
 41995 00008BCC 65315D5B3B72656769-
 41995 00008BD5 6F6E325B2C6D696E73-
 41995 00008BDE 697A65325D5D2E2E2E-
 41995 00008BE7 0D0A               
 41996 00008BE9 202020202020202020-     	db '            Specifies the region(s) of memory into which to load',0Dh,0Ah
 41996 00008BF2 202020537065636966-
 41996 00008BFB 696573207468652072-
 41996 00008C04 6567696F6E28732920-
 41996 00008C0D 6F66206D656D6F7279-
 41996 00008C16 20696E746F20776869-
 41996 00008C1F 636820746F206C6F61-
 41996 00008C28 640D0A             
 41997 00008C2B 202020202020202020-     	db '            the program.  Region1 specifies the number of the first',0Dh,0Ah
 41997 00008C34 202020746865207072-
 41997 00008C3D 6F6772616D2E202052-
 41997 00008C46 6567696F6E31207370-
 41997 00008C4F 656369666965732074-
 41997 00008C58 6865206E756D626572-
 41997 00008C61 206F66207468652066-
 41997 00008C6A 697273740D0A       
 41998                                  MSG_1923:
 41999 00008C70 85                      	db 133
 42000 00008C71 202020202020202020-     	db '            memory region; minsize1 specifies the minimum size, if',0Dh,0Ah
 42000 00008C7A 2020206D656D6F7279-
 42000 00008C83 20726567696F6E3B20-
 42000 00008C8C 6D696E73697A653120-
 42000 00008C95 737065636966696573-
 42000 00008C9E 20746865206D696E69-
 42000 00008CA7 6D756D2073697A652C-
 42000 00008CB0 2069660D0A         
 42001 00008CB5 202020202020202020-     	db '            any, for region1.  Region2 and minsize2 specify the',0Dh
 42001 00008CBE 202020616E792C2066-
 42001 00008CC7 6F7220726567696F6E-
 42001 00008CD0 312E2020526567696F-
 42001 00008CD9 6E3220616E64206D69-
 42001 00008CE2 6E73697A6532207370-
 42001 00008CEB 656369667920746865-
 42001 00008CF4 0D                 
 42002 00008CF5 0A                      	db 0Ah
 42003                                  MSG_1924:
 42004 00008CF6 7F                      	db 127
 42005 00008CF7 202020202020202020-     	db '            number and minimum size of the second region, if any.',0Dh,0Ah
 42005 00008D00 2020206E756D626572-
 42005 00008D09 20616E64206D696E69-
 42005 00008D12 6D756D2073697A6520-
 42005 00008D1B 6F6620746865207365-
 42005 00008D24 636F6E642072656769-
 42005 00008D2D 6F6E2C20696620616E-
 42005 00008D36 792E0D0A           
 42006 00008D3A 202020202020202020-     	db '            You can specify as many regions as you want.',0Dh,0Ah
 42006 00008D43 202020596F75206361-
 42006 00008D4C 6E2073706563696679-
 42006 00008D55 206173206D616E7920-
 42006 00008D5E 726567696F6E732061-
 42006 00008D67 7320796F752077616E-
 42006 00008D70 742E0D0A           
 42007 00008D74 0D0A                    	db 0Dh,0Ah
 42008                                  MSG_1925:
 42009 00008D76 83                      	db 131
 42010 00008D77 2F5320202020202020-     	db '/S          Shrinks a UMB to its minimum size while the program',0Dh,0Ah
 42010 00008D80 202020536872696E6B-
 42010 00008D89 73206120554D422074-
 42010 00008D92 6F20697473206D696E-
 42010 00008D9B 696D756D2073697A65-
 42010 00008DA4 207768696C65207468-
 42010 00008DAD 652070726F6772616D-
 42010 00008DB6 0D0A               
 42011 00008DB8 202020202020202020-     	db '            is loading.  /S is normally used only by MemMaker.',0Dh,0Ah
 42011 00008DC1 2020206973206C6F61-
 42011 00008DCA 64696E672E20202F53-
 42011 00008DD3 206973206E6F726D61-
 42011 00008DDC 6C6C79207573656420-
 42011 00008DE5 6F6E6C79206279204D-
 42011 00008DEE 656D4D616B65722E0D-
 42011 00008DF7 0A                 
 42012 00008DF8 0D0A                    	db 0Dh,0Ah
 42013                                  MSG_1926:
 42014 00008DFA 57                      	db 87
 42015 00008DFB 5B64726976653A5D5B-     	db '[drive:][path]filename',0Dh,0Ah
 42015 00008E04 706174685D66696C65-
 42015 00008E0D 6E616D650D0A       
 42016 00008E13 202020202020202020-     	db '            Specifies the location and name of the program.',0Dh,0Ah
 42016 00008E1C 202020537065636966-
 42016 00008E25 69657320746865206C-
 42016 00008E2E 6F636174696F6E2061-
 42016 00008E37 6E64206E616D65206F-
 42016 00008E40 66207468652070726F-
 42016 00008E49 6772616D2E0D0A     
 42017 00008E50 0D0A                    	db 0Dh,0Ah
 42018                                  
 42019                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42020                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:963Ah
 42021                                  MSG_1927:
 42022 00008E52 5A                      	db 90
 42023 00008E53 706172616D65746572-     	db 'parameters  Specifies any command-line information required by',0Dh,0Ah
 42023 00008E5C 732020537065636966-
 42023 00008E65 69657320616E792063-
 42023 00008E6E 6F6D6D616E642D6C69-
 42023 00008E77 6E6520696E666F726D-
 42023 00008E80 6174696F6E20726571-
 42023 00008E89 75697265642062790D-
 42023 00008E92 0A                 
 42024 00008E93 202020202020202020-     	db '            the program.',0Dh,0Ah
 42024 00008E9C 202020746865207072-
 42024 00008EA5 6F6772616D2E0D0A   
 42025                                  
 42026                                  	; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 42027                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:96F3h
 42028                                  MSG_1107:
 42029 00008EAD 0C                      	db 12
 42030 00008EAE 2531204B2062797465-     	db '%1 K bytes',0Dh,0Ah
 42030 00008EB7 730D0A             
 42031                                  
 42032                                  ; ---------------------------------------------------------------------------
 42033                                  
 42034                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42035                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8183h
 42036                                  
 42037                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42038                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9695h
 42039                                  
 42040                                  ; --------------- S U B R O U T I N E ---------------------------------------
 42041                                  
 42042                                  $M_CLS_3:
 42043 00008EBA 0E                      	push	cs		; CLASS_F
 42044 00008EBB 07                      	pop	es
 42045 00008EBC 8D3E[B462]              	lea	di,$M_CLASS_3_STRUC ; LEA DI,$M_CLASS_3_STRUC
 42046                                  	; 15/04/2023
 42047                                  	;add	cx,10053	; ADD CX,$-$M_CLASS_3_STRUC ; 8189h-5A44h
 42048                                  	; 17/06/2023
 42049 00008EC0 81C16B2D                	add	cx,11627	; ADD CX,$-$M_CLASS_3_STRUC ; 969Bh-6930h
 42050 00008EC4 C3                      	retn
 42051                                  
 42052                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42053                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:818Eh
 42054                                  
 42055                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42056                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96A0h
 42057                                  
 42058                                  ; ---------------------------------------------------------------------------
 42059                                  ; Class 1 messages
 42060                                  ; ---------------------------------------------------------------------------
 42061                                  	
 42062                                  $M_CLASS_1_STRUC:
 42063 00008EC5 01                      	db 1			; $M_CLASS_ID
 42064                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 42065                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42066                                  	;dw 1606h  ; MSDOS 6.22 COMMAND.COM
 42067                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
 42068 00008EC6 070A                    	dw 0A07h  ; PCDOS 7.10 COMMAND.COM
 42069 00008EC8 04                      	db 4			; Class_1_MessageCount
 42070                                  $M_ID_1_1:
 42071 00008EC9 0200                    	dw 2			; Message Number = 2
 42072 00008ECB 1000                    	dw EXTEND2-$+2 ; 10h	; Message offset from message number
 42073                                  $M_ID_1_2:
 42074 00008ECD 0300                    	dw 3			; Message Number = 3
 42075 00008ECF 1B00                    	dw EXTEND3-$+2 ; 1Bh	; Message offset from message number
 42076                                  $M_ID_1_3:
 42077 00008ED1 0800                    	dw 8			; Message Number = 8
 42078 00008ED3 2600                    	dw EXTEND8-$+2 ; 26h	; Message offset from message number
 42079                                  $M_ID_1_4:
 42080 00008ED5 FFFF                    	dw 0FFFFh		; Message Number = -1
 42081 00008ED7 3600                    	dw EXTEND999-$+2 ; 36h	; Message offset from message number
 42082                                  
 42083                                  ; ---------------------------------------------------------------------------
 42084                                  
 42085                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81A2h
 42086                                  EXTEND2:
 42087 00008ED9 0E                      	db 14
 42088 00008EDA 46696C65206E6F7420-     	db 'File not found'
 42088 00008EE3 666F756E64         
 42089                                  EXTEND3:
 42090 00008EE8 0E                      	db 14
 42091 00008EE9 50617468206E6F7420-     	db 'Path not found'
 42091 00008EF2 666F756E64         
 42092                                  EXTEND8:
 42093 00008EF7 13                      	db 19
 42094 00008EF8 496E73756666696369-     	db 'Insufficient memory'
 42094 00008F01 656E74206D656D6F72-
 42094 00008F0A 79                 
 42095                                  EXTEND999:
 42096 00008F0B 11                      	db 17
 42097 00008F0C 457874656E64656420-     	db 'Extended Error %1'
 42097 00008F15 4572726F72202531   
 42098                                  
 42099                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42100                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81E6h
 42101                                  
 42102                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42103                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96F8h
 42104                                  
 42105                                  ; --------------- S U B R O U T I N E ---------------------------------------
 42106                                  $M_MSGSERV_1:
 42107 00008F1D 0E                      	push	cs
 42108 00008F1E 07                      	pop	es
 42109 00008F1F 8D3E[C58E]              	lea	di,$M_CLASS_1_STRUC
 42110                                  	; 15/04/2023
 42111                                  	;add	cx,94		; $-$M_CLASS_1_STRUC ; 81ECh-818Eh
 42112                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 42113                                  				; 96FEh-96A0h = 5Eh = 94
 42114 00008F23 C3                      	retn
 42115                                  
 42116                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42117                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F0h
 42118                                  
 42119                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42120                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9702h
 42121                                  
 42122                                  ; ---------------------------------------------------------------------------
 42123                                  ; Class 2 messages
 42124                                  ; ---------------------------------------------------------------------------
 42125                                  	
 42126                                  $M_CLASS_2_STRUC:
 42127 00008F24 02                      	db 2			; $M_CLASS_ID
 42128                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 42129                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42130                                  	;dw 1606h  ; MSDOS 6.22 COMMAND.COM
 42131                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
 42132 00008F25 070A                    	dw 0A07h  ; PCDOS 7.10 COMMAND.COM
 42133 00008F27 01                      	db 1			; Class_2_MessageCount
 42134                                  $M_ID_2_1:
 42135 00008F28 FFFF                    	dw 0FFFFh		; Message Number = -1
 42136 00008F2A 0400                    	dw PARSE999-$+2 ; 4	; Message offset from message number
 42137                                  ; ---------------------------------------------------------------------------
 42138                                  
 42139                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F8h
 42140                                  PARSE999:
 42141 00008F2C 0E                      	db 14
 42142 00008F2D 506172736520457272-     	db 'Parse Error %1'
 42142 00008F36 6F72202531         
 42143                                  
 42144                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42145                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8207h
 42146                                  
 42147                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42148                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9719h
 42149                                  
 42150                                  ; --------------- S U B R O U T I N E ---------------------------------------
 42151                                  $M_MSGSERV_2:
 42152 00008F3B 0E                      	push	cs
 42153 00008F3C 07                      	pop	es
 42154 00008F3D 8D3E[248F]              	lea	di,$M_CLASS_2_STRUC
 42155                                  	; 15/04/2023
 42156                                  	;add	cx,29		; $-$M_CLASS_2_STRUC ; 820Dh-81F0h
 42157                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 42158                                  				; 971Fh-9702h = 1Dh = 29
 42159 00008F41 C3                      	retn
 42160                                  
 42161                                  ;============================================================================
 42162                                  ; TRANMSG.ASM, MSDOS 6.0, 1991
 42163                                  ;============================================================================
 42164                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42165                                  ; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42166                                  
 42167                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8211h
 42168                                  	
 42169                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9723h
 42170                                  
 42171                                  ;****************************************************
 42172                                  ;* TRANSIENT MESSAGE POINTERS & SUBSTITUTION BLOCKS *
 42173                                  ;****************************************************
 42174                                  
 42175                                  msg_disp_class:
 42176 00008F42 FF                      	db	util_msg_class ; 0FFh
 42177                                  msg_cont_flag:
 42178 00008F43 00                      	db	no_cont_flag ; 0
 42179                                  
 42180                                  ;  extended error string output
 42181                                  extend_buf_ptr:
 42182 00008F44 0000                    	dw	0			;AN000;set to no message
 42183                                  extend_buf_sub:
 42184 00008F46 00                      	db	0			;AN000;set to no substitutions
 42185 00008F47 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42186 00008F48 00                      	db	0			;AN000;reserved
 42187                                  extend_buf_off:
 42188 00008F49 [7F9D]                  	dw	string_ptr_2		;AN000;offset of arg
 42189                                  extend_buf_seg:
 42190 00008F4B 0000                    	dw	0			;AN000;segment of arg
 42191 00008F4D 00                      	db	0			;AN000;first subst
 42192 00008F4E 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42193 00008F4F 80                      	db	128			;AN000;maximum width
 42194 00008F50 00                      	db	0			;AN000;minimum width
 42195 00008F51 20                      	db	blank ; 20h		;AN000;pad character
 42196                                  
 42197                                  ;  "Duplicate file name or file not found"
 42198                                  RENERR_PTR:
 42199 00008F52 EA03                    	dw	1002			;AN000;message number
 42200 00008F54 00                      	db	no_subst ; 0		;AN000;number of subst
 42201                                  
 42202                                  ;  "Invalid path or file name"
 42203                                  BADCPMES_PTR:
 42204 00008F55 EB03                    	dw	1003			;AN000;message number
 42205 00008F57 00                      	db	no_subst ; 0		;AN000;number of subst
 42206                                  
 42207                                  ;  "Insufficient disk space"
 42208                                  NOSPACE_PTR:
 42209 00008F58 EC03                    	dw	1004			;AN000;message number
 42210 00008F5A 00                      	db	no_subst ; 0		;AN000;number of subst
 42211                                  
 42212                                  ;  "Out of environment space"
 42213                                  ENVERR_PTR:
 42214 00008F5B EF03                    	dw	1007			;AN000;message number
 42215 00008F5D 00                      	db	no_subst ; 0		;AN000;number of subst
 42216                                  
 42217                                  ;  "File creation error"
 42218                                  FULLDIR_PTR:
 42219 00008F5E F003                    	dw	1008			;AN000;message number
 42220 00008F60 00                      	db	no_subst ; 0		;AN000;number of subst
 42221                                  
 42222                                  ;  "Batch file missing",13,10
 42223                                  BADBAT_PTR:
 42224 00008F61 F103                    	dw	1009			;AN000;message number
 42225 00008F63 00                      	db	no_subst ; 0		;AN000;number of subst
 42226                                  
 42227                                  ;  "Insert disk with batch file",13,10
 42228                                  NEEDBAT_PTR:
 42229 00008F64 F203                    	dw	1010			;AN000;message number
 42230 00008F66 00                      	db	no_subst ; 0		;AN000;number of subst
 42231                                  
 42232                                  ;  "Bad command or file name",13,10
 42233                                  BADNAM_PTR:
 42234 00008F67 F303                    	dw	1011			;AN000;message number
 42235 00008F69 00                      	db	no_subst ; 0		;AN000;number of subst
 42236                                  
 42237                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 42238                                  %if 1
 42239                                  ; "REXX interpreter not found",13,10
 42240                                  REXXNOTF_PTR:
 42241 00008F6A F403                    	dw	1012
 42242 00008F6C 00                      	db	no_subst ; 0
 42243                                  %endif
 42244                                  
 42245                                  ;  "Access denied",13,10
 42246                                  ACCDEN_PTR:
 42247 00008F6D F603                    	dw	1014			;AN000;message number
 42248 00008F6F 00                      	db	no_subst ; 0		;AN000;number of subst
 42249                                  
 42250                                  ;  "File cannot be copied onto itself",13,10
 42251                                  OVERWR_PTR:
 42252 00008F70 F703                    	dw	1015			;AN000;message number
 42253 00008F72 00                      	db	no_subst ; 0		;AN000;number of subst
 42254                                  
 42255                                  ;  "Content of destination lost before copy",13,10
 42256                                  LOSTERR_PTR:
 42257 00008F73 F803                    	dw	1016			;AN000;message number
 42258 00008F75 00                      	db	no_subst ; 0		;AN000;number of subst
 42259                                  
 42260                                  ;  "Invalid filename or file not found",13,10
 42261                                  INORNOT_PTR:
 42262 00008F76 F903                    	dw	1017			;AN000;message number
 42263 00008F78 00                      	db	no_subst		;AN000;number of subst
 42264                                  
 42265                                  ;  "%1 File(s) copied",13,10
 42266                                  copied_ptr:
 42267 00008F79 FA03                    	dw	1018			;AN000;message number
 42268 00008F7B 01                      	db	1			;AN000;number of subst
 42269 00008F7C 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42270 00008F7D 00                      	db	0			;AN000;reserved
 42271 00008F7E [819D]                  	dw	Copy_num		;AN000;offset of arg
 42272 00008F80 0000                    	dw	0			;AN000;segment of arg
 42273 00008F82 01                      	db	1			;AN000;first subst
 42274 00008F83 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 42275                                  					;AN000;binary to decimal
 42276 00008F84 09                      	db	9			;AN000;maximum width
 42277 00008F85 09                      	db	9			;AN000;minimum width
 42278 00008F86 20                      	db	blank ; 20h		;AN000;pad character
 42279                                  
 42280                                  ;  "%1 File(s) "
 42281                                  dirmes_ptr:
 42282 00008F87 FB03                    	dw	1019			;AN000;message number
 42283 00008F89 01                      	db	1			;AN000;number of subst
 42284 00008F8A 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42285 00008F8B 00                      	db	0			;AN000;reserved
 42286 00008F8C [849D]                  	dw	Dir_Num			;AN000;offset of arg
 42287 00008F8E 0000                    	dw	0			;AN000;segment of arg
 42288 00008F90 01                      	db	1			;AN000;first subst
 42289                                  	; MSDOS 5.0 COMMAND.COM
 42290                                  	;db	0A1h ; Right_Align+Unsgn_Bin_Word
 42291                                  	; 17/06/2023
 42292                                  ;screen_f_3:
 42293 00008F91 E1                      	db	0E1h ; MSDOS 6.22 COMMAND.COM
 42294                                  					;AN000;binary to decimal
 42295 00008F92 09                      	db	9			;AN000;maximum width
 42296 00008F93 09                      	db	9			;AN000;minimum width
 42297 00008F94 20                      	db	blank ; 20h		;AN000;pad character
 42298                                  
 42299                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 42300                                  %if 0
 42301                                  ;  "%1 bytes free",13,10
 42302                                  bytmes_ptr:
 42303                                  	dw	1020			;AN000;message number
 42304                                  	db	1			;AN000;number of subst
 42305                                  	db	parm_block_size ; 11	;AN000;size of sublist
 42306                                  	db	0			;AN000;reserved
 42307                                  	dw	Bytes_Free		;AN000;offset of arg
 42308                                  	dw	0			;AN000;segment of arg
 42309                                  	db	1			;AN000;first subst
 42310                                  	; MSDOS 5.0 COMMAND.COM
 42311                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 42312                                  	; 17/06/2023
 42313                                  screen_f_6:
 42314                                  	db	0F1h			;AN000;long binary to decimal
 42315                                  	; MSDOS 5.0 COMMAND.COM
 42316                                  	;db	28			;AN000;maximum width
 42317                                  	;db	28			;AN000;minimum width
 42318                                  	; 17/06/2023
 42319                                  screen_f_7:
 42320                                  	db	32 ; MSDOS 6.22 COMMAND.COM
 42321                                  	db	32
 42322                                  
 42323                                  	db	blank ; 20h		;AN000;pad character
 42324                                  %else
 42325                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 42326                                  	; PCDOS 7.1 COMMAND.COM
 42327                                  dirmes_w_ptr:
 42328 00008F95 FB03                    	dw	1019
 42329 00008F97 01                      	db	1
 42330 00008F98 0B                      	db	11
 42331 00008F99 00                      	db	0
 42332 00008F9A [849D]                  	dw	Dir_Num
 42333 00008F9C 0000                    	dw	0
 42334 00008F9E 01                      	db	1
 42335 00008F9F F1                      	db	0F1h			; long binary to decimal
 42336 00008FA0 0A                      	db	10
 42337 00008FA1 0A                      	db	10
 42338 00008FA2 20                      	db	20h
 42339                                  dirmes2_ptr:
 42340 00008FA3 FB03                    	dw	1019
 42341 00008FA5 01                      	db	1
 42342 00008FA6 0B                      	db	11
 42343 00008FA7 00                      	db	0
 42344 00008FA8 [849D]                  	dw	Dir_Num
 42345 00008FAA 0000                    	dw	0
 42346 00008FAC 01                      	db	1
 42347 00008FAD B1                      	db	0B1h			; Right_Align+Unsgn_Bin_DWord
 42348 00008FAE 09                      	db	9
 42349 00008FAF 09                      	db	9
 42350 00008FB0 20                      	db	20h
 42351                                  bytmes1_ptr:
 42352 00008FB1 FC03                    	dw	1020
 42353 00008FB3 01                      	db	1
 42354 00008FB4 0B                      	db	11
 42355 00008FB5 00                      	db	0
 42356 00008FB6 [869D]                  	dw	Bytes_Free
 42357 00008FB8 0000                    	dw	0
 42358 00008FBA 01                      	db	1
 42359 00008FBB F1                      	db	0F1h			; long binary to decimal
 42360 00008FBC 1E                      	db	30			; maximum width
 42361 00008FBD 1E                      	db	30			; minimum width
 42362 00008FBE 20                      	db	20h			; blank
 42363                                  bytmes2_ptr:
 42364 00008FBF FC03                    	dw	1020
 42365 00008FC1 01                      	db	1
 42366 00008FC2 0B                      	db	11
 42367 00008FC3 00                      	db	0
 42368 00008FC4 [869D]                  	dw 	Bytes_Free
 42369 00008FC6 0000                    	dw	0
 42370 00008FC8 01                      	db	1
 42371 00008FC9 F1                      	db	0F1h			; long binary to decimal
 42372 00008FCA 21                      	db	33			; maximum width
 42373 00008FCB 21                      	db	33			; minimum width
 42374 00008FCC 20                      	db	20h			; pad
 42375                                  bytmes_n_ptr:
 42376 00008FCD FC03                    	dw	1020
 42377 00008FCF 01                      	db	1
 42378 00008FD0 0B                      	db	11			; parm_block_size
 42379 00008FD1 00                      	db	0
 42380 00008FD2 [869D]                  	dw	Bytes_Free
 42381 00008FD4 0000                    	dw	0
 42382 00008FD6 01                      	db	1
 42383 00008FD7 B1                      	db	0B1h			; Right_Align+Unsgn_Bin_DWord
 42384 00008FD8 1C                      	db	28
 42385 00008FD9 1C                      	db	28
 42386 00008FDA 20                      	db	20h
 42387                                  %endif
 42388                                  
 42389                                  ;  "Invalid drive specification",13,10
 42390                                  baddrv_ptr:
 42391 00008FDB FD03                    	dw	1021			;AN000;message number
 42392 00008FDD 00                      	db	no_subst ; 0		;AN000;number of subst
 42393                                  
 42394                                  ;  "Code page %1 not prepared for system",13,10
 42395                                  cp_not_set_ptr:
 42396 00008FDE FE03                    	dw	1022			;AN000;message number
 42397 00008FE0 01                      	db	1			;AN000;number of subst
 42398 00008FE1 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42399 00008FE2 00                      	db	0			;AN000;reserved
 42400 00008FE3 [799D]                  	dw	system_cpage		;AN000;offset of arg
 42401 00008FE5 0000                    	dw	0			;AN000;segment of arg
 42402 00008FE7 01                      	db	1			;AN000;first subst
 42403 00008FE8 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 42404                                  					;AN000;binary to decimal
 42405 00008FE9 05                      	db	5			;AN000;maximum width
 42406 00008FEA 01                      	db	1			;AN000;minimum width
 42407 00008FEB 20                      	db	blank ; 20h		;AN000;pad character
 42408                                  
 42409                                  ;  "Code page %1 not prepared for all devices",13,10
 42410                                  cp_not_all_ptr:
 42411 00008FEC FF03                    	dw	1023			;AN000;message number
 42412 00008FEE 01                      	db	1			;AN000;number of subst
 42413 00008FEF 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 42414 00008FF0 00                      	db	0			;AN000;reserved
 42415 00008FF1 [799D]                  	dw	system_cpage		;AN000;offset of arg
 42416 00008FF3 0000                    	dw	0			;AN000;segment of arg
 42417 00008FF5 01                      	db	1			;AN000;first subst
 42418 00008FF6 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 42419                                  					;AN000;binary to decimal
 42420 00008FF7 05                      	db	5			;AN000;maximum width
 42421 00008FF8 01                      	db	1			;AN000;minimum width
 42422 00008FF9 20                      	db	blank ; 20h		;AN000;pad character
 42423                                  
 42424                                  ;  "Active code page: %1",13,10
 42425                                  cp_active_ptr:
 42426 00008FFA 0004                    	dw	1024			;AN000;message number
 42427 00008FFC 01                      	db	1			;AN000;number of subst
 42428 00008FFD 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42429 00008FFE 00                      	db	0			;AN000;reserved
 42430 00008FFF [799D]                  	dw	system_cpage		;AN000;offset of arg
 42431 00009001 0000                    	dw	0			;AN000;segment of arg
 42432 00009003 01                      	db	1			;AN000;first subst
 42433 00009004 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 42434                                  					;AN000;binary to decimal
 42435 00009005 05                      	db	5			;AN000;maximum width
 42436 00009006 01                      	db	1			;AN000;minimum width
 42437 00009007 20                      	db	blank ; 20h		;AN000;pad character
 42438                                  
 42439                                  ;  "NLSFUNC not installed",13,10
 42440                                  NLSFUNC_PTR:
 42441 00009008 0104                    	dw	1025			;AN000;message number
 42442 0000900A 00                      	db	no_subst ; 0		;AN000;number of subst
 42443                                  
 42444                                  ;  "Invalid code page",13,10
 42445                                  INV_CODE_PAGE:
 42446 0000900B 0204                    	dw	1026			;AN000;message number
 42447 0000900D 00                      	db	no_subst ; 0		;AN000;number of subst
 42448                                  
 42449                                  ;  "Current drive is no longer valid"
 42450                                  BADCURDRV:
 42451 0000900E 0304                    	dw	1027			;AN000;message number
 42452 00009010 00                      	db	no_subst ; 0		;AN000;number of subst
 42453                                  
 42454                                  ;  "Press any key to continue"
 42455                                  PAUSEMES_PTR:
 42456 00009011 0404                    	dw	1028			;AN000;message number
 42457 00009013 00                      	db	no_subst ; 0		;AN000;number of subst
 42458                                  
 42459                                  ;  "Label not found",13,10
 42460                                  BADLAB_PTR:
 42461 00009014 0504                    	dw	1029			;AN000;message number
 42462 00009016 00                      	db	no_subst ; 0		;AN000;number of subst
 42463                                  
 42464                                  ;  "Syntax error",13,10
 42465                                  SYNTMES_PTR:
 42466 00009017 0604                    	dw	1030			;AN000;message number
 42467 00009019 00                      	db	no_subst ; 0		;AN000;number of subst
 42468                                  
 42469                                  ;  "Invalid date",13,10
 42470                                  BADDAT_PTR:
 42471 0000901A 0704                    	dw	1031			;AN000;message number
 42472 0000901C 00                      	db	no_subst ; 0		;AN000;number of subst
 42473                                  
 42474                                  ;  "Current date is %1 %2",13,10
 42475                                  CurDat_Ptr:
 42476 0000901D 0804                    	dw	1032			;AN000;message number
 42477 0000901F 02                      	db	2			;AN000;number of subst
 42478 00009020 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42479 00009021 00                      	db	0			;AN000;reserved
 42480 00009022 [73A3]                  	dw	Arg_Buf			;AN000;offset of arg
 42481 00009024 0000                    	dw	0			;AN000;segment of arg
 42482 00009026 01                      	db	1			;AN000;first subst
 42483 00009027 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42484 00009028 03                      	db	3			;AN000;maximum width
 42485 00009029 03                      	db	3			;AN000;minimum width
 42486 0000902A 20                       	db	blank ; 20h		;AN000;pad character
 42487 0000902B 0B                      	db	parm_block_size 	;AN000;size of sublist
 42488 0000902C 00                      	db	0			;AN000;reserved
 42489                                  CurDat_yr:
 42490 0000902D 0000                    	dw	0			;AN000;year
 42491                                  CurDat_mo_day:
 42492 0000902F 0000                    	dw	0			;AN000;month,day
 42493 00009031 02                      	db	2			;AN000;second subst
 42494 00009032 34                      	db	34h ; DATE_MDY_4	;AN000;date
 42495 00009033 0A                      	db	10			;AN000;maximum width
 42496 00009034 0A                      	db	10			;AN000;minimum width
 42497 00009035 20                      	db	blank ; 20h		;AN000;pad character
 42498                                  
 42499                                  ;  "SunMonTueWedThuFriSat"
 42500                                  WeekTab:
 42501 00009036 0904                    	dw	1033			;AN000;message number
 42502 00009038 00                      	db	no_subst ; 0		;AN000;number of subst
 42503                                  
 42504                                  ;  "Enter new date (%1):"
 42505                                  
 42506                                  NewDat_Ptr:
 42507 00009039 0A04                    	dw	1034			;AN000;message number
 42508 0000903B 01                      	db	1			;AN000;number of subst
 42509 0000903C 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42510 0000903D 00                      	db	0			;AN000;reserved
 42511                                  NewDat_Format:
 42512 0000903E 0000                    	dw	0			;AN000;offset of replacement
 42513 00009040 0000                    	dw	0			;AN000;segment of arg
 42514 00009042 01                      	db	1			;AN000;first subst
 42515 00009043 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42516 00009044 08                      	db	8			;AN000;maximum width
 42517 00009045 08                      	db	8			;AN000;minimum width
 42518 00009046 20                      	db	blank ; 20h		;AN000;pad character
 42519                                  
 42520                                  ;  "Invalid time",13,10
 42521                                  
 42522                                  BadTim_Ptr:
 42523 00009047 0B04                    	dw	1035			;AN000;message number
 42524 00009049 00                      	db	no_subst ; 0		;AN000;number of subst
 42525                                  
 42526                                  ;  "Current time is %1",13,10
 42527                                  CurTim_Ptr:
 42528 0000904A 0C04                    	dw	1036			;AN000;message number
 42529 0000904C 01                      	db	1			;AN000;number of subst
 42530 0000904D 0B                      	db	parm_block_size 	;AN000;size of sublist
 42531 0000904E 00                      	db	0			;AN000;reserved
 42532                                  CurTim_hr_min:
 42533 0000904F 0000                    	dw	0			;AN000;hours,minutes
 42534                                  CurTim_Sec_hn:
 42535 00009051 0000                    	dw	0			;AN000;seconds,hundredths
 42536 00009053 01                      	db	1			;AN000;first subst
 42537 00009054 A5                      	db	0A5h ; Right_Align+TIME_HHMMSSHH_Cty
 42538                                  					;AC059;time
 42539 00009055 0C                      	db	12			;AC059;maximum width
 42540 00009056 0C                      	db	12			;AC059;minimum width
 42541 00009057 20                      	db	blank ; 20h		;AN000;pad character
 42542                                  
 42543                                  ;  "Enter new time:"
 42544                                  NewTim_Ptr:
 42545 00009058 0D04                    	dw	1037			;AN000;message number
 42546 0000905A 00                      	db	no_subst ; 0		;AN000;number of subst
 42547                                  
 42548                                  ;  ",    Delete (Y/N)?",13,10
 42549                                  Del_Y_N_Ptr:
 42550 0000905B 0E04                    	dw	1038			;AN000;message number
 42551 0000905D 00                      	db	no_subst ; 0		;AN000;number of subst
 42552                                  
 42553                                  ;  "All files in directory will be deleted!",13,10
 42554                                  ;  "Are you sure (Y/N)?",13,10
 42555                                  SureMes_Ptr:
 42556 0000905E 0F04                    	dw	1039			;AN000;message number
 42557 00009060 00                      	db	no_subst ; 0		;AN000;number of subst
 42558                                  
 42559                                  ;  "Microsoft DOS Version %1.%2",13,10
 42560                                  VerMes_Ptr:
 42561 00009061 1004                    	dw	1040			;AN000;message number
 42562                                  
 42563                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 42564                                  %if 0
 42565                                  	db	2			;AN000;number of subst
 42566                                  	db	parm_block_size ; 11 	;AN000;size of sublist
 42567                                  	db	0			;AN000;reserved
 42568                                  	dw	Major_Ver_Num		;AN000;offset of arg
 42569                                  	dw	0			;AN000;segment of arg
 42570                                  	db	1			;AN000;first subst
 42571                                  	db	0A1h ; Right_Align+Unsgn_Bin_Word
 42572                                  					;AN000;binary to decimal
 42573                                  	db	1			;AN000;maximum width
 42574                                  	db	1			;AN000;minimum width
 42575                                  	db	blank ; 20h		;AN000;pad character
 42576                                  	db	parm_block_size ; 11	;AN000;size of sublist
 42577                                  	db	0			;AN000;reserved
 42578                                  	dw	Minor_Ver_Num	;AN000;offset of arg
 42579                                  	dw	0			;AN000;segment of arg
 42580                                  	db	2			;AN000;second subst
 42581                                  	db	0A1h ; Right_Align+Unsgn_Bin_Word
 42582                                  					;AN000;binary to decimal
 42583                                  	db	2			;AN000;maximum width
 42584                                  	db	2			;AN000;minimum width
 42585                                  	db	'0' ; 30h		;AN000;pad character
 42586                                  %else
 42587 00009063 00                      	db	0	; no_subst
 42588                                  %endif
 42589                                  
 42590                                  ;  "Volume in drive %1 has no label",13,10
 42591                                  VolMes_Ptr_2:
 42592 00009064 1104                    	dw	1041			;AN000;message number
 42593 00009066 01                      	db	1			;AN000;number of subst
 42594 00009067 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 42595 00009068 00                      	db	0			;AN000;reserved
 42596 00009069 [909D]                  	dw	vol_drv			;AN000;offset of drive
 42597 0000906B 0000                    	dw	0			;AN000;segment of arg
 42598 0000906D 01                      	db	1			;AN000;first subst
 42599 0000906E 00                      	db	0 ; Char_field_Char 	;AN000;character
 42600 0000906F 80                      	db	128			;AN000;maximum width
 42601 00009070 01                      	db	1			;AN000;minimum width
 42602 00009071 20                      	db	blank ; 20h		;AN000;pad character
 42603                                  
 42604                                  ;  "Volume in drive %1 is %2",13,10
 42605                                  VolMes_Ptr:
 42606 00009072 1204                    	dw	1042			;AN000;message number
 42607 00009074 02                      	db	2			;AN000;number of subst
 42608 00009075 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42609 00009076 00                      	db	0			;AN000;reserved
 42610 00009077 [909D]                  	dw	vol_drv			;AN000;offset of drive
 42611 00009079 0000                    	dw	0			;AN000;segment of arg
 42612 0000907B 01                      	db	1			;AN000;first subst
 42613 0000907C 00                      	db	00000000b		;AN000;character
 42614 0000907D 80                      	db	128			;AN000;maximum width
 42615 0000907E 01                      	db	1			;AN000;minimum width
 42616 0000907F 20                      	db	blank ; 20h		;AN000;pad character
 42617 00009080 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42618 00009081 00                      	db	0			;AN000;reserved
 42619 00009082 [499C]                  	dw	CHARBUF			;AN000;offset of string
 42620 00009084 0000                    	dw	0			;AN000;segment of arg
 42621 00009086 02                      	db	2			;AN000;second subst
 42622 00009087 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42623 00009088 80                      	db	128			;AN000;maximum width
 42624 00009089 01                      	db	1			;AN000;minimum width
 42625 0000908A 20                      	db	blank ; 20h		;AN000;pad character
 42626                                  
 42627                                  ;  "Volume Serial Number is %1-%2",13,10
 42628                                  VolSerMes_Ptr:
 42629 0000908B 1304                    	dw	1043			;AN000;message number
 42630 0000908D 02                      	db	2			;AN000;number of subst
 42631 0000908E 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 42632 0000908F 00                      	db	0			;AN000;reserved
 42633 00009090 [FA9E]                  	dw	vol_serial+2		;AN000;offset of serial
 42634 00009092 0000                    	dw	0			;AN000;segment of arg
 42635 00009094 01                      	db	1			;AN000;first subst
 42636 00009095 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word 
 42637                                  					;AN000;binary to hex
 42638 00009096 04                      	db	4			;AN000;maximum width
 42639 00009097 04                      	db	4			;AN000;minimum width
 42640 00009098 30                      	db	'0' ; 30h		;AN000;pad character
 42641 00009099 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42642 0000909A 00                      	db	0			;AN000;reserved
 42643 0000909B [F89E]                  	dw	vol_serial		;AN000;offset of serial
 42644 0000909D 0000                    	dw	0			;AN000;segment of arg
 42645 0000909F 02                      	db	2			;AN000;second subst
 42646 000090A0 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word
 42647                                  					;AN000;binary to hex
 42648 000090A1 04                      	db	4			;AN000;maximum width
 42649 000090A2 04                      	db	4			;AN000;minimum width
 42650 000090A3 30                      	db	'0' ; 30h		;AN000;pad character
 42651                                  
 42652                                  ;  "Invalid directory",13,10
 42653                                  badcd_ptr:
 42654 000090A4 1404                    	dw	1044			;AN000;message number
 42655 000090A6 00                      	db	no_subst ; 0		;AN000;number of subst
 42656                                  
 42657                                  ;  "Unable to create directory",13,10
 42658                                  badmkd_ptr:
 42659 000090A7 1504                    	dw	1045			;AN000;message number
 42660 000090A9 00                      	db	no_subst ; 0		;AN000;number of subst
 42661                                  
 42662                                  ;  "Invalid path, not directory,",13,10
 42663                                  ;  "or directory not empty",13,10
 42664                                  badrmd_ptr:
 42665 000090AA 1604                    	dw	1046			;AN000;message number
 42666 000090AC 00                      	db	no_subst ; 0		;AN000;number of subst
 42667                                  
 42668                                  ;  "Must specify ON or OFF",13,10
 42669                                  bad_on_off_ptr:
 42670 000090AD 1704                    	dw	1047			;AN000;message number
 42671 000090AF 00                      	db	no_subst ; 0		;AN000;number of subst
 42672                                  
 42673                                  ;  "Directory of %1",13,10
 42674                                  dirhead_ptr:
 42675 000090B0 1804                    	dw	1048			;AN000;message number
 42676 000090B2 01                      	db	1			;AN000;number of subst
 42677 000090B3 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 42678 000090B4 00                      	db	0			;AN000;reserved
 42679 000090B5 [189D]                  	dw	BWDBUF			;AN000;offset of arg
 42680 000090B7 0000                    	dw	0			;AN000;segment of arg
 42681 000090B9 01                      	db	1			;AN000;first subst
 42682 000090BA 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42683 000090BB 80                      	db	128			;AN000;maximum width
 42684 000090BC 00                      	db	0			;AN000;minimum width
 42685 000090BD 20                      	db	blank ; 20h		;AN000;pad character
 42686                                  
 42687                                  ;  "No Path",13,10
 42688                                  NULLPATH_PTR:
 42689 000090BE 1904                    	dw	1049			;AN000;message number
 42690 000090C0 00                      	db	no_subst ; 0		;AN000;number of subst
 42691                                  
 42692                                  ;  "Invalid drive in search path",13,10
 42693                                  BADPMES_PTR:
 42694 000090C1 1A04                    	dw	1050			;AN000;message number
 42695 000090C3 00                      	db	no_subst ; 0		;AN000;number of subst
 42696                                  
 42697                                  ;  "Invalid device",13,10
 42698                                  BADDEV_PTR:
 42699 000090C4 1B04                    	dw	1051			;AN000;message number
 42700 000090C6 00                      	db	no_subst ; 0		;AN000;number of subst
 42701                                  
 42702                                  ;  "FOR cannot be nested",13,10
 42703                                  FORNESTMES_PTR:
 42704 000090C7 1C04                    	dw	1052			;AN000;message number
 42705 000090C9 00                      	db	no_subst ; 0		;AN000;number of subst
 42706                                  
 42707                                  ;  "Intermediate file error during pipe",13,10
 42708                                  PIPEEMES_PTR:
 42709 000090CA 1D04                    	dw	1053			;AN000;message number
 42710 000090CC 00                      	db	no_subst ; 0		;AN000;number of subst
 42711                                  
 42712                                  ;  "Cannot do binary reads from a device",13,10
 42713                                  INBDEV_PTR:
 42714 000090CD 1E04                    	dw	1054			;AN000;message number
 42715 000090CF 00                      	db	no_subst ; 0		;AN000;number of subst
 42716                                  
 42717                                  ;  "BREAK is %1",13,10
 42718                                  CtrlcMes_Ptr:
 42719 000090D0 1F04                    	dw	1055			;AN000;message number
 42720 000090D2 01                      	db	1			;AN000;number of subst
 42721 000090D3 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42722 000090D4 00                      	db	0			;AN000;reserved
 42723 000090D5 0000                    	dw	0			;AN000;offset of on/off (new)
 42724 000090D7 0000                    	dw	0			;AN000;segment of arg
 42725 000090D9 01                      	db	1			;AN000;first subst
 42726 000090DA 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42727 000090DB 80                      	db	128			;AN000;maximum width
 42728 000090DC 01                      	db	1			;AN000;minimum width
 42729 000090DD 20                      	db	blank ; 20h		;AN000;pad character
 42730                                  
 42731                                  ;  "VERIFY is %1",13,10
 42732                                  VeriMes_Ptr:
 42733 000090DE 2004                    	dw	1056			;AN000;message number
 42734 000090E0 01                      	db	1			;AN000;number of subst
 42735 000090E1 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42736 000090E2 00                      	db	0			;AN000;reserved
 42737 000090E3 0000                    	dw	0			;AN000;offset of on/off (new)
 42738 000090E5 0000                    	dw	0			;AN000;segment of arg
 42739 000090E7 01                      	db	1			;AN000;first subst
 42740 000090E8 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42741 000090E9 80                      	db	128			;AN000;maximum width
 42742 000090EA 01                      	db	1			;AN000;minimum width
 42743 000090EB 20                      	db	blank ; 20h		;AN000;pad character
 42744                                  
 42745                                  ;  "ECHO is %1",13,10
 42746                                  EchoMes_Ptr:
 42747 000090EC 2104                    	dw	1057			;AN000;message number
 42748 000090EE 01                      	db	1			;AN000;number of subst
 42749 000090EF 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42750 000090F0 00                      	db	0			;AN000;reserved
 42751 000090F1 0000                    	dw	0			;AN000;offset of on/off (new)
 42752 000090F3 0000                    	dw	0			;AN000;segment of arg
 42753 000090F5 01                      	db	1			;AN000;first subst
 42754 000090F6 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42755 000090F7 80                      	db	128			;AN000;maximum width
 42756 000090F8 01                      	db	1			;AN000;minimum width
 42757 000090F9 20                      	db	blank ; 20h		;AN000;pad character
 42758                                  
 42759                                  ;  "off"
 42760                                  OFFMES_PTR:
 42761 000090FA 2304                    	dw	1059			;AN000;message number
 42762 000090FC 00                      	db	no_subst		;AN000;number of subst
 42763                                  
 42764                                  ;  "on"
 42765                                  ONMES_PTR:
 42766 000090FD 2404                    	dw	1060			;AN000;message number
 42767 000090FF 00                      	db	no_subst ; 0		;AN000;number of subst
 42768                                  
 42769                                  ;  "Error writing to device",13,10
 42770                                  DEVWMES_PTR:
 42771 00009100 2504                    	dw	1061			;AN000;message number
 42772 00009102 00                      	db	no_subst ; 0		;AN000;number of subst
 42773                                  
 42774                                  ;  "Invalid path",13,10
 42775                                  INVAL_PATH_PTR:
 42776 00009103 2604                    	dw	1062			;AN000;message number
 42777 00009105 00                      	db	no_subst ; 0		;AN000;number of subst
 42778                                  
 42779                                  ;  unformatted string output
 42780                                  arg_buf_ptr:
 42781 00009106 2704                    	dw	1063			;AN000;message number
 42782 00009108 01                      	db	1			;AN000;number of subst
 42783 00009109 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42784 0000910A 00                      	db	0			;AN000;reserved
 42785 0000910B [73A3]                  	dw	Arg_Buf 		;AN000;offset of arg
 42786 0000910D 0000                    	dw	0			;AN000;segment of arg
 42787 0000910F 01                      	db	1			;AN000;first subst
 42788 00009110 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42789 00009111 80                      	db	128			;AN000;maximum width
 42790 00009112 00                      	db	0			;AN000;minimum width
 42791 00009113 20                      	db	blank ; 20h		;AN000;pad character
 42792                                  
 42793                                  ;  file name output
 42794                                  file_name_ptr:
 42795 00009114 2804                    	dw	1064			;AN000;message number
 42796 00009116 01                      	db	1			;AN000;number of subst
 42797 00009117 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42798 00009118 00                      	db	0			;AN000;reserved
 42799 00009119 [FE9D]                  	dw	SrcBuf			;AN000;offset of arg
 42800 0000911B 0000                    	dw	0			;AN000;segment of arg
 42801 0000911D 01                      	db	1			;AN000;first subst
 42802 0000911E 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42803 0000911F 80                      	db	128			;AN000;maximum width
 42804 00009120 00                      	db	0			;AN000;minimum width
 42805 00009121 20                      	db	blank ; 20h		;AN000;pad character
 42806                                  
 42807                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 42808                                  %if 0
 42809                                  
 42810                                  ;  file size output for dir
 42811                                  disp_file_size_ptr:
 42812                                  	dw	1065			;AN000;message number
 42813                                  	db	1			;AN000;number of subst
 42814                                  	db	parm_block_size ; 11 	;AN000;size of sublist
 42815                                  	db	0			;AN000;reserved
 42816                                  	dw	File_Size_Low		;AN000;offset of arg
 42817                                  	dw	0			;AN000;segment of arg
 42818                                  	db	1			;AN000;first subst
 42819                                  	; MSDOS 5.0 COMMAND.COM
 42820                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 42821                                  	; 17/06/2023
 42822                                  screen_f_1:
 42823                                  	db	0F1h ; MSDOS 6.22 COMMAND.COM
 42824                                  					;AN000;long binary to decimal
 42825                                  	; MSDOS 5.0 COMMAND.COM
 42826                                  	;db	10			;AN000;maximum width
 42827                                  	;db	10			;AN000;minimum width
 42828                                  screen_f_2:
 42829                                  	db	14 ; MSDOS 6.22 COMMAND.COM		
 42830                                  	db	14
 42831                                  	
 42832                                  	db	blank ; 20h		;AN000;pad character
 42833                                  %else
 42834                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 42835                                  	; PCDOS 7.1 COMMAND.COM
 42836                                  disp_file_size_ptr:
 42837 00009122 2904                    	dw	1065
 42838 00009124 01                      	db	1
 42839 00009125 0B                      	db	11
 42840 00009126 00                      	db	0
 42841 00009127 [7B9D]                  	dw	File_Size_Low
 42842 00009129 0000                    	dw	0
 42843 0000912B 01                      	db	1
 42844 0000912C F1                      	db	0F1h
 42845 0000912D 0C                      	db	12
 42846 0000912E 0C                      	db	12
 42847 0000912F 20                      	db	20h
 42848                                  disp_file_size_w_ptr:
 42849 00009130 2904                    	dw	1065
 42850 00009132 01                      	db	1
 42851 00009133 0B                      	db	11
 42852 00009134 00                      	db	0
 42853 00009135 [7B9D]                  	dw	File_Size_Low
 42854 00009137 0000                    	dw	0
 42855 00009139 01                      	db	1
 42856 0000913A F1                      	db	0F1h			; long binary to decimal
 42857 0000913B 0E                      	db	14
 42858 0000913C 0E                      	db	14
 42859 0000913D 20                      	db	20h
 42860                                  disp_file_size_n_ptr:
 42861 0000913E 2904                    	dw	1065
 42862 00009140 01                      	db	1
 42863 00009141 0B                      	db	11
 42864 00009142 00                      	db	0
 42865 00009143 [7B9D]                  	dw	File_Size_Low
 42866 00009145 0000                    	dw	0
 42867 00009147 01                      	db	1
 42868 00009148 B1                      	db	0B1h			; Right_Align+Unsgn_Bin_DWord
 42869 00009149 0A                      	db	10
 42870 0000914A 0A                      	db	10
 42871 0000914B 20                      	db	20h
 42872                                  %endif
 42873                                  
 42874                                  ;  unformatted string output
 42875                                  ; %s
 42876                                  string_buf_ptr:
 42877 0000914C 2A04                    	dw	1066			;AN000;message number
 42878 0000914E 01                      	db	1			;AN000;number of subst
 42879 0000914F 0B                      	db	parm_block_size 	;AN000;size of sublist
 42880 00009150 00                      	db	0			;AN000;reserved
 42881 00009151 [7F9D]                  	dw	string_ptr_2		;AN000;offset of arg
 42882 00009153 0000                    	dw	0			;AN000;segment of arg
 42883 00009155 01                      	db	1			;AN000;first subst
 42884 00009156 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42885 00009157 80                      	db	128			;AN000;maximum width
 42886 00009158 00                      	db	0			;AN000;minimum width
 42887 00009159 20                      	db	blank ; 20h		;AN000;pad character
 42888 0000915A 00                      	db	0			;AN000;
 42889                                  
 42890                                  ;  tab character
 42891                                  tab_ptr:
 42892 0000915B 2B04                    	dw	1067			;AN000;message number
 42893 0000915D 00                      	db	no_subst ; 0		;AN000;number of subst
 42894                                  
 42895                                  ;  " <DIR>   "
 42896                                  dmes_ptr:
 42897 0000915E 2C04                    	dw	1068			;AN000;message number
 42898 00009160 00                      	db	no_subst ; 0		;AN000;number of subst
 42899                                  
 42900                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 42901                                  space_4_ptr :
 42902 00009161 5104                    	dw	1105 
 42903 00009163 00                      	db	no_subst ; 0
 42904                                  
 42905                                  ;  destructive back space
 42906                                  dback_ptr:
 42907 00009164 2D04                    	dw	1069			;AN000;message number
 42908 00009166 00                      	db	no_subst ; 0		;AN000;number of subst
 42909                                  
 42910                                  ;  carriage return / line feed
 42911                                  acrlf_ptr:
 42912 00009167 2E04                    	dw	1070			;AN000;message number
 42913 00009169 00                      	db	no_subst ; 0		;AN000;number of subst
 42914                                  
 42915                                  ;  "mm-dd-yy"
 42916                                  usadat_ptr:
 42917 0000916A 3004                    	dw	1072			;AN000;message number
 42918 0000916C 00                      	db	no_subst ; 0		;AN000;number of subst
 42919                                  
 42920                                  ;  "dd-mm-yy"
 42921                                  eurdat_ptr:
 42922 0000916D 3104                    	dw	1073			;AN000;message number
 42923 0000916F 00                      	db	no_subst ; 0		;AN000;number of subst
 42924                                  
 42925                                  ;  "yy-mm-dd"
 42926                                  japdat_ptr:
 42927 00009170 3204                    	dw	1074			;AN000;message number
 42928 00009172 00                      	db	no_subst ; 0		;AN000;number of subst
 42929                                  
 42930                                  ;  date string for prompt
 42931                                  promptdat_ptr:
 42932 00009173 3304                    	dw	1075			;AN000;message number
 42933 00009175 02                      	db	2			;AN000;number of subst
 42934 00009176 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42935 00009177 00                      	db	0			;AN000;reserved
 42936 00009178 [73A3]                  	dw	Arg_Buf			;AN000;offset of arg
 42937 0000917A 0000                    	dw	0			;AN000;segment of arg
 42938 0000917C 01                      	db	1			;AN000;first subst
 42939 0000917D 10                      	db	10h ; Char_field_ASCIIZ ;AN000;character string
 42940 0000917E 03                      	db	3			;AN000;maximum width
 42941 0000917F 03                      	db	3			;AN000;minimum width
 42942 00009180 20                       	db	blank ; 20h		;AN000;pad character
 42943 00009181 0B                      	db	parm_block_size  ; 11	;AN000;size of sublist
 42944 00009182 00                      	db	0			;AN000;reserved
 42945                                  promptDat_yr:
 42946 00009183 0000                    	dw	0			;AN000;year
 42947                                  promptDat_moday:
 42948 00009185 0000                    	dw	0			;AN000;month,day
 42949 00009187 02                      	db	2			;AN000;second subst
 42950 00009188 34                       	db	34h ; DATE_MDY_4	;AN000;date
 42951 00009189 0A                      	db	10			;AN000;maximum width
 42952 0000918A 08                      	db	8			;AN000;minimum width
 42953 0000918B 20                      	db	blank ; 20h		;AN000;pad character
 42954                                  
 42955                                  ;  Time for prompt
 42956                                  promtim_ptr:
 42957 0000918C 3404                    	dw	1076			;AN000;message number
 42958 0000918E 01                      	db	1			;AN000;number of subst
 42959 0000918F 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42960 00009190 00                      	db	0			;AN000;reserved
 42961                                  PromTim_hr_min:
 42962 00009191 0000                    	dw	0			;AN000;hours,minutes
 42963                                  PromTim_Sec_hn:
 42964 00009193 0000                    	dw	0			;AN000;seconds,hundredths
 42965 00009195 01                      	db	1			;AN000;first subst
 42966 00009196 A6                      	db	0A6h ; Right_Align+TIME_HHMMSSHH_24
 42967                                  					;AC013;time
 42968 00009197 0B                      	db	11			;AN000;maximum width
 42969 00009198 0B                      	db	11			;AC013;minimum width
 42970 00009199 20                      	db	blank ; 20h		;AN000;pad character
 42971                                  
 42972                                  ;  Date and time for DIR
 42973                                  dirdattim_ptr:
 42974 0000919A 3504                    	dw	1077			;AN000;message number
 42975 0000919C 02                      	db	2			;AN000;number of subst
 42976 0000919D 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42977 0000919E 00                      	db	0			;AN000;reserved
 42978                                  DirDat_Yr:
 42979 0000919F 0000                    	dw	0			;AN000;year
 42980                                  DirDat_Mo_Day:
 42981 000091A1 0000                    	dw	0			;AN000;month,day
 42982 000091A3 01                      	db	1			;AN000;first subst
 42983                                  DirDat_form:	; 03/08/2024 - PCDOS 7.1
 42984 000091A4 A4                      	db	0A4h ; Right_Align+DATE_MDY_2
 42985                                  					;AN000;date
 42986                                  DirDat_width:	; 03/08/2024 - PCDOS 7.1	
 42987 000091A5 0A                      	db	10			;AN000;maximum width
 42988 000091A6 08                      	db	8			;AN000;minimum width
 42989 000091A7 20                      	db	blank ; 20h		;AN000;pad character
 42990 000091A8 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42991 000091A9 00                      	db	0			;AN000;reserved
 42992                                  DirTim_Hr_Min:
 42993 000091AA 0000                    	dw	0			;AN000;hours,minutes
 42994                                  DirTim_Sec_hn:
 42995 000091AC 0000                    	dw	0			;AN000;seconds,hundredths
 42996 000091AE 02                      	db	2			;AN000;second subst
 42997 000091AF 85                      	db	85h ; Right_align+TIME_HHMM_Cty
 42998                                  					;AN000;time
 42999 000091B0 06                      	db	6			;AN000;maximum width
 43000 000091B1 06                      	db	6			;AN000;minimum width
 43001 000091B2 20                      	db	blank ; 20h		;AN000;pad character
 43002                                  
 43003                                  ;  "Directory already exists"
 43004                                  MD_EXISTS_PTR:
 43005 000091B3 3604                    	dw	1078			;AN000;message number
 43006 000091B5 00                      	db	no_subst		;AN000;number of subst
 43007                                  
 43008                                  ;  "%1 bytes",13,10
 43009                                  
 43010                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 43011                                  %if 0
 43012                                  bytes_ptr:
 43013                                  	dw	1079			; message number
 43014                                  	db	1			; number of subst
 43015                                  	db	parm_block_size ; 11	; size of sublist
 43016                                  	db	0			; reserved
 43017                                  	dw	FileSiz			; offset of arg
 43018                                  	dw	0			; segment of arg
 43019                                  	db	1			; first subst
 43020                                  	; MSDOS 5.0 COMMAND.COM
 43021                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 43022                                  	; 17/06/2023
 43023                                  screen_f_4:
 43024                                  	db	0F1h ; MSDOS 6.22 COMMAND.COM
 43025                                  					; long binary to decimal
 43026                                  	; MSDOS 5.0 COMMAND.COM
 43027                                  	;db	10			; maximum width
 43028                                  	;db	10			; minimum width
 43029                                  screen_f_5:
 43030                                  	db	14 ; MSDOS 6.22 COMMAND.COM
 43031                                  	db	14	
 43032                                  	db	blank ; 20h		; pad character
 43033                                  %else
 43034                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43035                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:9718h
 43036                                  bytes_ptr:
 43037 000091B6 3704                    	dw	1079
 43038 000091B8 01                      	db	1
 43039 000091B9 0B                      	db	11
 43040 000091BA 00                      	db	0
 43041 000091BB [019C]                  	dw	FileSiz
 43042 000091BD 0000                    	dw	0
 43043 000091BF 01                      	db	1
 43044 000091C0 F1                      	db	0F1h
 43045 000091C1 0C                      	db	12
 43046 000091C2 0C                      	db	12
 43047 000091C3 20                      	db	20h
 43048                                  bytes_w_tr:
 43049 000091C4 3704                    	dw	1079
 43050 000091C6 01                      	db	1
 43051 000091C7 0B                      	db	11
 43052 000091C8 00                      	db	0
 43053 000091C9 [019C]                  	dw	FileSiz
 43054 000091CB 0000                    	dw	0
 43055 000091CD 01                      	db	1
 43056 000091CE F1                      	db	0F1h
 43057 000091CF 0E                      	db	14
 43058 000091D0 0E                      	db	14
 43059 000091D1 20                      	db	20h
 43060                                  bytes_n_ptr:
 43061 000091D2 3704                    	dw	1079
 43062 000091D4 01                      	db	1
 43063 000091D5 0B                      	db	11
 43064 000091D6 00                      	db	0
 43065 000091D7 B1                      	db	0B1h
 43066 000091D8 A0                      	db	160
 43067 000091D9 00                      	db	0
 43068 000091DA 00                      	db	0
 43069 000091DB 01                      	db	1
 43070 000091DC B1                      	db	0B1h
 43071 000091DD 0A                      	db	10
 43072 000091DE 0A                      	db	10
 43073 000091DF 20                      	db	20h
 43074                                  kbytes_ptr:
 43075 000091E0 5304                    	dw	1107
 43076 000091E2 01                      	db	1
 43077 000091E3 0B                      	db	11
 43078 000091E4 00                      	db	0
 43079 000091E5 B1                      	db	0B1h
 43080 000091E6 A0                      	db	160
 43081 000091E7 00                      	db	0
 43082 000091E8 00                      	db	0
 43083 000091E9 01                      	db	1
 43084 000091EA F1                      	db	0F1h
 43085 000091EB 0E                      	db	14
 43086 000091EC 0E                      	db	14
 43087 000091ED 20                      	db	20h
 43088                                  kybytes_n_ptr:
 43089 000091EE 5304                    	dw	1107
 43090 000091F0 01                      	db	1
 43091 000091F1 0B                      	db	11
 43092 000091F2 00                      	db	0
 43093 000091F3 [019C]                  	dw	FileSiz
 43094 000091F5 0000                    	dw	0
 43095 000091F7 01                      	db	1
 43096 000091F8 B1                      	db	0B1h
 43097 000091F9 0A                      	db	10
 43098 000091FA 0A                      	db	10
 43099 000091FB 20                      	db	20h
 43100                                  %endif
 43101                                  
 43102                                  ;  "Total:",13,10
 43103                                  total_ptr:
 43104 000091FC 3804                    	dw	1080			; message number
 43105 000091FE 00                      	db	no_subst ; 0		; number of subst
 43106                                  
 43107                                  ;  "Error parsing environment variable:",13,10
 43108                                  errparsenv_ptr:
 43109 000091FF 3904                    	dw	1081			; message number
 43110 00009201 00                      	db	no_subst ; 0		; number of subst
 43111                                  
 43112                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 43113                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:996Ah)
 43114                                  cox_Y_quest_ptr:
 43115 00009202 3A04                    	dw	1082
 43116 00009204 00                      	db	no_subst ; 0
 43117                                  cox_Y_answ_ptr:
 43118 00009205 3B04                    	dw	1083
 43119 00009207 00                      	db	no_subst ; 0
 43120                                  
 43121                                  ;  "(continuing %1)",13,10
 43122                                  dircont_ptr:
 43123 00009208 3C04                    	dw	1084			;AN000;message number
 43124 0000920A 01                      	db	1			;AN000;number of subst
 43125 0000920B 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43126 0000920C 00                      	db	0			;AN000;reserved
 43127 0000920D [189D]                  	dw	BWDBUF			;AN000;offset of arg
 43128 0000920F 0000                    	dw	0			;AN000;segment of arg
 43129 00009211 01                      	db	1			;AN000;first subst
 43130 00009212 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43131 00009213 80                      	db	128			;AN000;maximum width
 43132 00009214 00                      	db	0			;AN000;minimum width
 43133 00009215 20                      	db	blank ; 20h		;AN000;pad character
 43134                                  
 43135                                  ;  "Revision %1",CR,LF
 43136                                  dosrev_ptr:
 43137 00009216 4204                    	dw	1090
 43138 00009218 01                      	db	1			; one substitution
 43139 00009219 0B                      	db	parm_block_size ; 11
 43140 0000921A 00                      	db	0
 43141 0000921B [8E9D]                  	dw	One_Char_Val		; ptr to char
 43142 0000921D 0000                    	dw	0			; segment addr?
 43143 0000921F 01                      	db	1			; 1st substitution
 43144 00009220 00                      	db	0 ; CHAR_FIELD_CHAR	; character
 43145 00009221 01                      	db	1			; max width
 43146 00009222 01                      	db	1			; min width
 43147 00009223 20                      	db	blank ; 20h		; pad char
 43148                                  
 43149                                  ;  "DOS is in ROM"
 43150                                  DosRom_Ptr:
 43151 00009224 4304                    	dw	1091
 43152 00009226 00                      	db	no_subst ; 0		
 43153                                  
 43154                                  ;  "DOS is in HMA"
 43155                                  DosHma_Ptr:
 43156 00009227 4404                    	dw	1092
 43157 00009229 00                      	db	no_subst ; 0		
 43158                                  
 43159                                  ;  "DOS is in low memory"
 43160                                  DosLow_Ptr:
 43161 0000922A 4504                    	dw	1093
 43162 0000922C 00                      	db	no_subst ; 0		
 43163                                  
 43164                                  ;  "Cannot Loadhigh batch file" ;M016
 43165                                  NoExecBat_Ptr:
 43166 0000922D 4604                    	dw	1094			; M016
 43167 0000922F 00                      	db	no_subst ; 0		; M016
 43168                                  
 43169                                  ;  "LoadHigh: Invalid filename" ; M016
 43170                                  LhInvFil_Ptr:
 43171 00009230 4704                    	dw	1095			; M016
 43172 00009232 00                      	db	no_subst ; 0		; M016
 43173                                  
 43174                                  ;  "Could not open specified country information file" ; M045
 43175                                  NoCntry_Ptr:
 43176 00009233 4804                    	dw	1096			; M045
 43177 00009235 00                      	db	no_subst ; 0		; M045
 43178                                  
 43179                                  ; 15/04/2023
 43180                                  ; MSDOS 6.0 COMMAND.COM only !
 43181                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 43182                                  ;%if 0
 43183                                  
 43184                                  ;* The next four errors emulate those reported by the normal parse
 43185                                  ;  mechanism, with a little more accurate wording; that parser has been
 43186                                  ;  replaced with a custom routine (ParseVar) for LoadHigh and DeviceHigh.
 43187                                  ;  These errors aren't normally generated by LoadHigh except by the normal
 43188                                  ;  parser, so they've been added here.
 43189                                  
 43190                                  ;  "LoadHigh: Invalid argument"
 43191                                  LhInvArg_Ptr:
 43192 00009236 4904                    	dw	1097
 43193 00009238 00                      	db	no_subst ; 0		
 43194                                  
 43195                                  ;  "Required parameter missing"
 43196                                  ReqParmMiss:
 43197 00009239 4A04                    	dw	1098
 43198 0000923B 00                      	db	no_subst ; 0		
 43199                                  
 43200                                  ;  "Unrecognized switch"
 43201                                  LhInvSwt_Ptr:
 43202 0000923C 4B04                    	dw	1099
 43203 0000923E 00                      	db	no_subst ; 0		
 43204                                  
 43205                                  ;  "A bad UMB number has been specified"
 43206                                  LhBadUMB_Ptr:
 43207 0000923F 4C04                    	dw	1100
 43208 00009241 00                      	db	no_subst ; 0
 43209                                  ;%endif	
 43210                                  
 43211                                  ; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43212                                  %if 0
 43213                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 43214                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99AAh
 43215                                  
 43216                                  DirCompRatio_Ptr:
 43217                                  	dw	1101			;message number
 43218                                  	db	2			;number of subst
 43219                                  	db	parm_block_size ; 11	;size of sublist
 43220                                  	db	0			;reserved
 43221                                  	dw	Dir_CRatio_1		;offset of arg
 43222                                  	dw	0			;segment of arg
 43223                                  	db	1			;first subst
 43224                                  	db	91h			;format
 43225                                  	db	2			;maximum width
 43226                                  	db	2			;minimum width
 43227                                  	db	blank ; 20h		;pad character
 43228                                  	db	parm_block_size  ; 11	;size of sublist
 43229                                  	db	0			; reserved
 43230                                  	dw	Dir_CRatio_2		;offset of arg
 43231                                  	dw	0			;segment of arg
 43232                                  	db	2			;second subst
 43233                                  	db	11h			;format
 43234                                  	db	1			;maximum width
 43235                                  	db	1			;minimum width
 43236                                  	db	blank ; 20h		;pad character
 43237                                  
 43238                                  AveCompRatio_Ptr:
 43239                                  	dw	1102			;message number
 43240                                  	db	2			;number of subst
 43241                                  	db	parm_block_size ; 11	;size of sublist
 43242                                  	db	0			;reserved
 43243                                  	dw	Dir_CRatio_1		;offset of arg
 43244                                  	dw	0			;segment of arg
 43245                                  	db	1			;first subst
 43246                                  	db	91h			;format
 43247                                  	db	2			;maximum width
 43248                                  	db	2			;minimum width
 43249                                  	db	blank ; 20h		;pad character
 43250                                  	db	parm_block_size  ; 11	;size of sublist
 43251                                  	db	0			; reserved
 43252                                  	dw	Dir_CRatio_2		;offset of arg
 43253                                  	dw	0			;segment of arg
 43254                                  	db	2			;second subst
 43255                                  	db	11h			;format
 43256                                  	db	1			;maximum width
 43257                                  	db	1			;minimum width
 43258                                  	db	blank ; 20h		;pad character
 43259                                  %else
 43260                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43261                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:97A4h
 43262                                  kbytesf_ptr:
 43263 00009242 5204                    	dw	1106
 43264 00009244 01                      	db	1
 43265 00009245 0B                      	db	11
 43266 00009246 00                      	db	0
 43267 00009247 [869D]                  	dw	Bytes_Free
 43268 00009249 0000                    	dw	0
 43269 0000924B 01                      	db	1
 43270 0000924C F1                      	db	0F1h			; long binary to decimal
 43271 0000924D 1E                      	db	30
 43272 0000924E 1E                      	db	30
 43273 0000924F 20                      	db	20h
 43274                                  kbytesf_n_ptr:
 43275 00009250 5204                    	dw	1106
 43276 00009252 01                      	db	1
 43277 00009253 0B                      	db	11
 43278 00009254 00                      	db	0
 43279 00009255 [869D]                  	dw	Bytes_Free
 43280 00009257 0000                    	dw	0
 43281 00009259 01                      	db	1
 43282 0000925A B1                      	db	0B1h			; Right_Align+Unsgn_Bin_DWord
 43283 0000925B 1C                      	db	28
 43284 0000925C 1C                      	db	28
 43285 0000925D 20                      	db	20h
 43286                                  %endif
 43287                                  
 43288                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 43289                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8483h
 43290                                  
 43291                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 43292                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99DCh
 43293                                  
 43294                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43295                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:97C0h
 43296                                  
 43297                                  ; ---------------------------------------------------------------------------
 43298                                  
 43299                                  PATH_TEXT:
 43300 0000925E 504154483D              	db	"PATH="
 43301                                  PROMPT_TEXT:
 43302 00009263 50524F4D50543D          	db	"PROMPT="
 43303                                  COMSPECSTR:
 43304 0000926A 434F4D535045433D        	db	"COMSPEC="
 43305                                  DirEnvVar:
 43306 00009272 444952434D443D          	db	"DIRCMD="		; DIR's environment variable
 43307                                  
 43308                                  ; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43309                                  ; PCDOS 7.1 COMMAND.COM
 43310                                  %if 1
 43311                                  no_sep_text:
 43312 00009279 4E4F5F5345503D          	db	'NO_SEP='	; 1 = do not use commas as num separator
 43313                                  %endif
 43314                                  
 43315                                  ;============================================================================
 43316                                  ; TDATA.ASM, MSDOS 6.0, 1991
 43317                                  ;============================================================================
 43318                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 43319                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 43320                                  
 43321                                  	; 15/04/2023
 43322 00009280 00                      	db	0
 43323 00009281 90                      align 2
 43324                                  
 43325                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:849Eh
 43326                                  ; ---------------------------------------------------------------------------
 43327                                  	; 18/06/2023
 43328                                  	;db	0
 43329                                  
 43330                                  ; Lists of help message numbers for internal commands and /?
 43331                                  
 43332                                  	; 18/06/2023
 43333                                  ;;NoHelpMsgs:
 43334                                  	;dw	1200,0		;M014
 43335                                  
 43336                                  	; 18/06/2023
 43337                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99F7h
 43338                                  
 43339                                  BreakHelpMsgs:
 43340 00009282 14050000                	dw	1300,0
 43341                                  ChcpHelpMsgs:
 43342 00009286 280529050000            	dw	1320,1321,0
 43343                                  CdHelpMsgs:
 43344 0000928C 3C053D053E050000        	dw	1340,1341,1342,0
 43345                                  ClsHelpMsgs:
 43346 00009294 50050000                	dw	1360,0
 43347                                  CopyHelpMsgs:
 43348                                  	;dw	1400,1401,1402,1403,1404,0
 43349                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 43350 00009298 780579057A057B057C-     	dw	1400,1401,1402,1403,1404,1405,1406,1407,0
 43350 000092A1 057D057E057F050000 
 43351                                  CttyHelpMsgs:
 43352 000092AA 8C050000                	dw	1420,0
 43353                                  DateHelpMsgs:
 43354 000092AE A005A1050000            	dw	1440,1441,0
 43355                                  DelHelpMsgs:
 43356 000092B4 B405B505B6050000        	dw	1460,1461,1462,0
 43357                                  DirHelpMsgs:
 43358 000092BC C805C905CA05CB05CC-     	dw	1480,1481,1482,1483,1484,1485,1486,1487,1488
 43358 000092C5 05CD05CE05CF05D005 
 43359                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 43360                                  	; MSDOS 6.0 COMMAND.COM
 43361 000092CE D105D205D305D405        	dw	1489,1490,1491,1492
 43362 000092D6 0000                    	dw	0
 43363                                  ExitHelpMsgs:
 43364 000092D8 DC050000                	dw	1500,0
 43365                                  MdHelpMsgs:
 43366 000092DC F0050000                	dw	1520,0
 43367                                  PathHelpMsgs:
 43368 000092E0 0406050606060000        	dw	1540,1541,1542,0
 43369                                  PromptHelpMsgs:
 43370 000092E8 180619061A061B061C-     	dw	1560,1561,1562,1563,1564,1565,1566,1567,1568,0
 43370 000092F1 061D061E061F062006-
 43370 000092FA 0000               
 43371                                  RdHelpMsgs:
 43372 000092FC 2C060000                	dw	1580,0
 43373                                  RenHelpMsgs:
 43374 00009300 4006410642060000        	dw	1600,1601,1602,0
 43375                                  SetHelpMsgs:
 43376 00009308 5406550656060000        	dw	1620,1621,1622,0
 43377                                  TimeHelpMsgs:
 43378 00009310 680669060000            	dw	1640,1641,0
 43379                                  TypeHelpMsgs:
 43380 00009316 7C060000                	dw	1660,0
 43381                                  VerHelpMsgs:
 43382 0000931A 90060000                	dw	1680,0
 43383                                  VerifyHelpMsgs:
 43384 0000931E A4060000                	dw	1700,0
 43385                                  VolHelpMsgs:
 43386 00009322 B8060000                	dw	1720,0
 43387                                  CallHelpMsgs:
 43388 00009326 CC06CD060000            	dw	1740,1741,0	;M014
 43389                                  RemHelpMsgs:
 43390 0000932C E0060000                	dw	1760,0		;M014
 43391                                  PauseHelpMsgs:
 43392 00009330 F4060000                	dw	1780,0		;M014
 43393                                  EchoHelpMsgs:
 43394 00009334 080709070000            	dw	1800,1801,0	;M014
 43395                                  GotoHelpMsgs:
 43396 0000933A 1C071D070000            	dw	1820,1821,0	;M014
 43397                                  ShiftHelpMsgs:
 43398 00009340 30070000                	dw	1840,0		;M014
 43399                                  IfHelpMsgs:
 43400 00009344 440745074607470748-     	dw	1860,1861,1862,1863,1864,1865,1866,0	;M014
 43400 0000934D 0749074A070000     
 43401                                  ForHelpMsgs:
 43402 00009354 580759075A075B0700-     	dw	1880,1881,1882,1883,0 ;M014
 43402 0000935D 00                 
 43403                                  TruenameHelpMsgs:
 43404 0000935E 6C070000                	 dw	1900,0		;M014
 43405                                  LoadhighHelpMsgs:
 43406 00009362 800781078207            	dw	1920,1921,1922
 43407                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 43408                                  	; MSDOS 6.0 COMMAND.COM
 43409 00009368 830784078507860787-     	dw	1923,1924,1925,1926,1927 ;M014
 43409 00009371 07                 
 43410 00009372 0000                    	dw	0
 43411                                  
 43412                                  ; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43413                                  %if 1
 43414                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:98CEh
 43415                                  twospacechars:
 43416 00009374 202000                  	db	'  ',0
 43417                                  %endif
 43418                                  
 43419                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8578h
 43420                                  CLSSTRING:
 43421 00009377 041B5B324A              	db	4,1Bh,"[2J"		; ANSI Clear screen
 43422                                  
 43423                                  PROMPT_TABLE:
 43424 0000937C 42                      	db	"B"
 43425 0000937D [7321]                  	dw	Print_B
 43426 0000937F 44                      	db	"D"
 43427 00009380 [CA3A]                  	dw	PRINT_DATE
 43428 00009382 45                      	db	"E"
 43429 00009383 [6721]                  	dw	PRINT_ESC
 43430 00009385 47                      	db	"G"
 43431 00009386 [6B21]                  	dw	PRINT_G
 43432 00009388 48                      	db	"H"
 43433 00009389 [5D21]                  	dw	PRINT_BACK
 43434 0000938B 4C                      	db	"L"
 43435 0000938C [6F21]                  	dw	PRINT_L
 43436 0000938E 4E                      	db	"N"
 43437 0000938F [8421]                  	dw	PRINT_DRIVE
 43438 00009391 50                      	db	"P"
 43439 00009392 [8C21]                  	dw	build_dir_for_prompt
 43440 00009394 51                      	db	"Q"
 43441 00009395 [6321]                  	dw	PRINT_EQ
 43442 00009397 54                      	db	"T"
 43443 00009398 [7A33]                  	dw	PRINT_TIME
 43444 0000939A 56                      	db	"V"
 43445 0000939B [D620]                  	dw	PRINT_VERSION
 43446 0000939D 5F                      	db	"_"
 43447 0000939E [4029]                  	dw	CRLF2
 43448 000093A0 24                      	db	"$"
 43449 000093A1 [7521]                  	dw	PRINT_CHAR
 43450 000093A3 00                      	db	0			; NUL TERMINATED
 43451                                  
 43452                                  ; Table of IF conditionals
 43453                                  IFTAB:
 43454 000093A4 034E4F54                	db	3,"NOT"			; First byte is count
 43455 000093A8 [F80B]                  	dw	IFNOT
 43456 000093AA 0A4552524F524C4556-     	db	10,"ERRORLEVEL"
 43456 000093B3 454C               
 43457 000093B5 [B70C]                  	dw	IFERLEV
 43458 000093B7 054558495354            	db	5,"EXIST"
 43459 000093BD [4C0C]                  	dw	IFEXISTS
 43460 000093BF 00                      	db	0
 43461                                  
 43462                                  ; Table for internal command names
 43463                                  COMTAB:
 43464 000093C0 0344495203              	db	3,"DIR",fSwitchAllowed+fCheckDrive ; 3
 43465 000093C5 [8011]                  	dw	CATALOG			; In TCMD1.ASM
 43466 000093C7 [BC92]                  	dw	DirHelpMsgs
 43467                                  
 43468 000093C9 0443414C4C02            	db	4,"CALL",fSwitchAllowed	; 2
 43469 000093CF [2C0D]                  	dw	_$CALL			; In TBATCH2.ASM
 43470 000093D1 [2693]                  	dw	CallHelpMsgs
 43471                                  
 43472 000093D3 044348435002            	db	4,"CHCP",fSwitchAllowed ; 2
 43473 000093D9 [CF23]                  	dw	CHCP			; In TCMD2B.ASM
 43474 000093DB [8692]                  	dw	ChcpHelpMsgs
 43475                                  
 43476 000093DD 0652454E414D4503        	db	6,"RENAME",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 43477 000093E5 [8C1D]                  	dw	CRENAME			; In TCMD1.ASM
 43478 000093E7 [0093]                  	dw	RenHelpMsgs
 43479                                  
 43480 000093E9 0352454E03              	db	3,"REN",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 43481 000093EE [8C1D]                  	dw	CRENAME			; In TCMD1.ASM
 43482 000093F0 [0093]                  	dw	RenHelpMsgs
 43483                                  	
 43484 000093F2 05455241534503          	db	5,"ERASE",fSwitchAllowed+fCheckDrive	; 3
 43485 000093F9 [0A1D]                  	dw	ERASE			; In TCMD1.ASM
 43486 000093FB [B492]                  	dw	DelHelpMsgs
 43487                                  	
 43488 000093FD 0344454C03              	db	3,"DEL",fSwitchAllowed+fCheckDrive	; 3
 43489 00009402 [0A1D]                  	dw	ERASE			; In TCMD1.ASM
 43490 00009404 [B492]                  	dw	DelHelpMsgs
 43491                                  	
 43492 00009406 045459504503            	db	4,"TYPE",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 43493 0000940C [331E]                  	dw	TYPEFIL			; In TCMD1.ASM
 43494 0000940E [1693]                  	dw	TypeHelpMsgs
 43495                                  	
 43496 00009410 0352454D06              	db	3,"REM",fSwitchAllowed+fLimitHelp	; 6
 43497 00009415 [0401]                  	dw	TCOMMAND		; In TCODE.ASM
 43498 00009417 [2C93]                  	dw	RemHelpMsgs
 43499                                  	
 43500 00009419 04434F505903            	db	4,"COPY",fSwitchAllowed+fCheckDrive	; 3
 43501 0000941F [173B]                  	dw	COPY			; In COPY.ASM
 43502 00009421 [9892]                  	dw	CopyHelpMsgs
 43503                                  	
 43504 00009423 05504155534506          	db	5,"PAUSE",fSwitchAllowed+fLimitHelp	; 6
 43505 0000942A [FE1C]                  	dw	PAUSE			; In TCMD1.ASM
 43506 0000942C [3093]                  	dw	PauseHelpMsgs
 43507                                  	
 43508 0000942E 044441544502            	db	4,"DATE",fSwitchAllowed	; 2
 43509 00009434 [8D32]                  	dw	DATE			; In TPIPE.ASM
 43510 00009436 [AE92]                  	dw	DateHelpMsgs
 43511                                  	
 43512 00009438 0454494D4502            	db	4,"TIME",fSwitchAllowed ; 2		;AC018; P3903
 43513 0000943E [EC32]                  	dw	CTIME			; In TPIPE.ASM
 43514 00009440 [1093]                  	dw	TimeHelpMsgs
 43515                                  	
 43516 00009442 0356455202              	db	3,"VER",fSwitchAllowed ; 2
 43517 00009447 [6020]                  	dw	VERSION			; In TCMD2.ASM
 43518 00009449 [1A93]                  	dw	VerHelpMsgs
 43519                                  	
 43520 0000944B 03564F4C03              	db	3,"VOL",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 43521 00009450 [611F]                  	dw	VOLUME			; In TCMD1.ASM
 43522 00009452 [2293]                  	dw	VolHelpMsgs
 43523                                  	
 43524 00009454 02434403                	db	2,"CD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 43525 00009458 [0328]                  	dw	_$CHDIR			; In TENV.ASM
 43526 0000945A [8C92]                  	dw	CdHelpMsgs
 43527                                  	
 43528 0000945C 05434844495203          	db	5,"CHDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 43529 00009463 [0328]                  	dw	_$CHDIR			; In TENV.ASM
 43530 00009465 [8C92]                  	dw	CdHelpMsgs
 43531                                  	
 43532 00009467 024D4403                	db	2,"MD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 43533 0000946B [6928]                  	dw	_$MKDIR			; In TENV.ASM
 43534 0000946D [DC92]                  	dw	MdHelpMsgs
 43535                                  	
 43536 0000946F 054D4B44495203          	db	5,"MKDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 43537 00009476 [6928]                  	dw	_$MKDIR			; In TENV.ASM
 43538 00009478 [DC92]                  	dw	MdHelpMsgs
 43539                                  	
 43540 0000947A 02524403                	db	2,"RD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 43541 0000947E [AE28]                  	dw	_$RMDIR			; In TENV.ASM
 43542 00009480 [FC92]                  	dw	RdHelpMsgs
 43543                                  	
 43544 00009482 05524D44495203          	db	5,"RMDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 43545 00009489 [AE28]                  	dw	_$RMDIR			; In TENV.ASM
 43546 0000948B [FC92]                  	dw	RdHelpMsgs
 43547                                  	
 43548 0000948D 05425245414B02          	db	5,"BREAK",fSwitchAllowed ; 2		;AC018; P3903
 43549 00009494 [143A]                  	dw	CNTRLC			; In TUCODE.ASM
 43550 00009496 [8292]                  	dw	BreakHelpMsgs
 43551                                  	
 43552 00009498 0656455249465902        	db	6,"VERIFY",fSwitchAllowed ; 2		;AC018; P3903
 43553 000094A0 [563A]                  	dw	VERIFY			; In TUCODE.ASM
 43554 000094A2 [1E93]                  	dw	VerifyHelpMsgs
 43555                                  	
 43556 000094A4 0353455406              	db	3,"SET",fSwitchAllowed+fLimitHelp ; 6
 43557 000094A9 [6D25]                  	dw	ADD_NAME_TO_ENVIRONMENT	; In TENV.ASM
 43558 000094AB [0893]                  	dw	SetHelpMsgs
 43559                                  	
 43560 000094AD 0650524F4D505406        	db	6,"PROMPT",fSwitchAllowed+fLimitHelp ; 6
 43561 000094B5 [5325]                  	dw	ADD_PROMPT		; In TENV.ASM
 43562 000094B7 [E892]                  	dw	PromptHelpMsgs
 43563                                  	
 43564 000094B9 045041544802            	db	4,"PATH",fSwitchAllowed ; 2
 43565 000094BF [F321]                  	dw	PATH			; In TCMD2.ASM
 43566 000094C1 [E092]                  	dw	PathHelpMsgs
 43567                                  	
 43568 000094C3 044558495400            	db	4,"EXIT",0
 43569 000094C9 [C424]                  	dw	_$EXIT			; In TCMD2.ASM
 43570 000094CB [D892]                  	dw	ExitHelpMsgs
 43571                                  	
 43572 000094CD 044354545903            	db	4,"CTTY",fCheckDrive+fSwitchAllowed ; 3
 43573 000094D3 [3123]                  	dw	CTTY			; In TCMD2.ASM
 43574 000094D5 [AA92]                  	dw	CttyHelpMsgs
 43575                                  	
 43576 000094D7 044543484F06            	db	4,"ECHO",fSwitchAllowed+fLimitHelp ; 6
 43577 000094DD [DB39]                  	dw	_ECHO			; In TUCODE.ASM
 43578 000094DF [3493]                  	dw	EchoHelpMsgs
 43579                                  	
 43580 000094E1 04474F544F06            	db	4,"GOTO",fSwitchAllowed+fLimitHelp
 43581 000094E7 [600D]                  	dw	_GOTO			; In TBATCH.ASM
 43582 000094E9 [3A93]                  	dw	GotoHelpMsgs
 43583                                  	
 43584 000094EB 05534849465402          	db	5,"SHIFT",fSwitchAllowed ; 2
 43585 000094F2 [E50C]                  	dw	_SHIFT			; In TBATCH.ASM
 43586 000094F4 [4093]                  	dw	ShiftHelpMsgs
 43587                                  	
 43588 000094F6 02494606                	db	2,"IF",fSwitchAllowed+fLimitHelp ; 6
 43589 000094FA [910B]                  	dw	_$IF			; In TBATCH.ASM
 43590 000094FC [4493]                  	dw	IfHelpMsgs
 43591                                  	
 43592 000094FE 03464F5206              	db	3,"FOR",fSwitchAllowed+fLimitHelp ; 6
 43593 00009503 [1910]                  	dw	_$FOR			; In TBATCH.ASM
 43594 00009505 [5493]                  	dw	ForHelpMsgs
 43595                                  	
 43596 00009507 03434C5300              	db	3,"CLS",0
 43597 0000950C [9822]                  	dw	CLS			; In TCMD2.ASM
 43598 0000950E [9492]                  	dw	ClsHelpMsgs
 43599                                  	
 43600 00009510 08545255454E414D45-     	db	8,"TRUENAME",fSwitchAllowed+fCheckDrive	;AN000; P3903 changed
 43600 00009519 03                 
 43601 0000951A [4D24]                  	dw	TRUENAME		;AN000;
 43602 0000951C [5E93]                  	dw	TruenameHelpMsgs
 43603                                  	
 43604 0000951E 084C4F414448494748-     	db	8,"LOADHIGH",fSwitchAllowed ; 2	; M003
 43604 00009527 02                 
 43605 00009528 [D461]                  	dw	LoadHigh		; In loadhi.asm ; M003
 43606 0000952A [6293]                  	dw	LoadhighHelpMsgs	; M003
 43607                                  	
 43608 0000952C 024C4802                	db	2,"LH",fSwitchAllowed ; 2	; Short form; M003
 43609 00009530 [D461]                  	dw	LoadHigh		; In loadhi.asm ; M003
 43610 00009532 [6293]                  	dw	LoadhighHelpMsgs	; M003
 43611                                  	
 43612 00009534 00                      	db	0			; Terminate command table
 43613                                  
 43614                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8736h
 43615                                  
 43616 00009535 2E434F4D                comext:	db	".COM"
 43617 00009539 2E455845                exeext:	db	".EXE"
 43618 0000953D 2E424154                batext:	db	".BAT"
 43619                                  
 43620                                  switch_list:
 43621                                  	; MSDOS 5.0 (& 6.0) COMMAND.COM
 43622                                  	;db	"?VBAPW"		; flags we can recognize
 43623                                  	; 18/06/2023
 43624                                  	; MSDOS 6.22 COMMAND.COM
 43625 00009541 2D593F5642415057        	db "-Y?VBAPW"
 43626                                  
 43627                                  AttrLtrs:
 43628 00009549 524853764441            	db	"RHSvDA"		; attribute letters for DIR
 43629                                  
 43630                                  ;	Attribute letters in AttrLtrs must appear in the order that
 43631                                  ;	attribute bits occur in the attribute byte returned by
 43632                                  ;	directory searches, starting with bit 0.
 43633                                  ;	The volume label attribute is lowercased to keep it from
 43634                                  ;	being matched (by an uppercase comparison).
 43635                                  
 43636                                  OrderLtrs:
 43637                                  	; MSDOS 5.0
 43638                                  	;db	"NEDSG"			; sort order letters for DIR
 43639                                  	; 18/06/2023
 43640                                  	; MSDOS 6.0 COMMAND.COM
 43641 0000954F 4E4544534743            	db	"NEDSGC"		; sort order letters for DIR
 43642                                  
 43643                                  ;	Sort order letters stand for file name, extension,
 43644                                  ;	date/time, size, grouped (directory files before others),
 43645                                  ;	and compression ratio. DIR routines rely on the specific
 43646                                  ;	order of the letters in this list.
 43647                                  
 43648                                  comspec_flag:
 43649 00009555 00                      	db	0                       ;AN071;
 43650                                  
 43651                                  BATBUFLEN:
 43652 00009556 2000                    	dw	BatLen ; 32
 43653                                  
 43654                                  ; *****************************************************
 43655                                  ; EMG 4.00
 43656                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 43657                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 43658                                  ; *****************************************************
 43659                                  
 43660                                  ; COMMON PARSE BLOCKS
 43661                                  
 43662                                  ; Indicates no value list for PARSE.
 43663                                  
 43664                                  NO_VALUES:
 43665 00009558 0000                    	dw	0			;AN000;  no values
 43666                                  
 43667                                  NULL_VALUE_LIST:  ; for unvalidated value
 43668 0000955A 00                       	db	0                       ; no value lists
 43669                                  
 43670                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 43671                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8759h
 43672                                  
 43673                                  ; PARSE control block for a required file specification (upper cased)
 43674                                  
 43675                                  FILE_REQUIRED:
 43676 0000955B 0002                    	dw	0200h			;AN000;  filespec - required
 43677 0000955D 0100                    	dw	1			;AN000;  capitalize - file table
 43678 0000955F [C9A5]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 43679 00009561 [5895]                  	dw	NO_VALUES		;AN000;
 43680 00009563 00                      	db	0			;AN000;  no keywords
 43681                                  
 43682                                  ; PARSE control block for an optional file specification (upper cased)
 43683                                  ; or drive number
 43684                                  
 43685                                  FILE_OPTIONAL:
 43686 00009564 0103                    	dw	0301h			;AN000;  filespec or drive number
 43687                                  					;	 optional
 43688 00009566 0100                    	dw	1			;AN000;  capitalize - file table
 43689 00009568 [C9A5]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 43690 0000956A [5895]                  	dw	NO_VALUES		;AN000;
 43691 0000956C 00                      	db	0			;AN000;  no keywords
 43692                                  
 43693                                  ; PARSE control block for an optional file specification (upper cased)
 43694                                  
 43695                                  FILE_OPTIONAL2:
 43696 0000956D 0102                    	dw	0201h                   ;AN000;  filespec optional
 43697 0000956F 0100                    	dw	1                       ;AN000;  capitalize - file table
 43698 00009571 [C9A5]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 43699 00009573 [5895]                  	dw	NO_VALUES		;AN000;
 43700 00009575 00                      	db	0			;AN000;  no keywords
 43701                                  
 43702                                  ; PARSE control block for an optional /P switch
 43703                                  
 43704                                  SLASH_P_SWITCH:
 43705 00009576 0000                    	dw	0			;AN000;  no match flags
 43706 00009578 0200                    	dw	2			;AN000;  capitalize - char table
 43707 0000957A [C9A5]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 43708 0000957C [5895]                  	dw	NO_VALUES		;AN000;
 43709 0000957E 01                      	db	1			;AN000;  1 keyword
 43710                                  SLASH_P_SYN:
 43711 0000957F 2F5000                  	db	"/P",0                  ;AN000;  /P switch
 43712                                  
 43713                                  ; PARSE BLOCK FOR BREAK, VERIFY, ECHO
 43714                                  
 43715                                  ; The following parse control block can be used for any command which
 43716                                  ; needs only the optional "ON" and "OFF" keywords as operands. Allows
 43717                                  ; the equal sign as an additional delimiter. Returns verified result
 43718                                  ; in PARSE1_OUTPUT. Currently used for the BREAK, VERIFY, and ECHO
 43719                                  ; internal commands.
 43720                                  
 43721                                  PARSE_BREAK:
 43722 00009582 [8595]                  	dw	BREAK_PARMS		;AN000;
 43723 00009584 00                      	db	0			;AN032; no extra delimiter
 43724                                  
 43725                                  BREAK_PARMS:
 43726 00009585 0001                    	db	0,1			;AN000;  1 positional parm
 43727 00009587 [8B95]                  	dw	BREAK_CONTROL1		;AN000;
 43728 00009589 00                      	db	0			;AN000;  no switches
 43729 0000958A 00                      	db	0			;AN000;  no keywords
 43730                                  
 43731                                  BREAK_CONTROL1:
 43732 0000958B 0120                    	dw	2001h			;AN000;  string value - optional
 43733 0000958D 0200                    	dw	2			;AN000;  capitalize - char table
 43734 0000958F [C9A5]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 43735 00009591 [9495]                  	dw	BREAK_VALUES		;AN000;
 43736 00009593 00                      	db	0			;AN000;  no keywords
 43737                                  
 43738                                  BREAK_VALUES:
 43739 00009594 03                      	db	3			;AN000;
 43740 00009595 00                      	db	0			;AN000;  no ranges
 43741 00009596 00                      	db	0			;AN000;  no numeric values
 43742 00009597 02                      	db	2			;AN000;  2 string values
 43743 00009598 00                      	db	0			;AN000;  returned if ON
 43744 00009599 [9E95]                  	dw	BREAK_ON		;AN000;  point to ON string
 43745 0000959B 66                      	db	'f'                     ;AN000;  returned if OFF
 43746 0000959C [A195]                  	dw	BREAK_OFF		;AN000;  point to OFF string
 43747                                  
 43748                                  BREAK_ON:
 43749 0000959E 4F4E00                  	db	"ON",0                  ;AN000;
 43750                                  BREAK_OFF:
 43751 000095A1 4F464600                	db	"OFF",0                 ;AN000;
 43752                                  
 43753                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 43754                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:87A3h
 43755                                  
 43756                                  ; PARSE BLOCK FOR CHCP
 43757                                  
 43758                                  ; The following parse control block can be used for any command which
 43759                                  ; needs only one optional three digit decimal parameter for operands.
 43760                                  ; Returns verified result in PARSE1_OUTPUT. Currently used for the
 43761                                  ; CHCP internal command.
 43762                                  
 43763                                  CHCP_MINVAL	EQU	100			;AN000;
 43764                                  CHCP_MAXVAL	EQU	999			;AN000;
 43765                                  
 43766                                  PARSE_CHCP:
 43767 000095A5 [A895]                  	dw	CHCP_PARMS			;AN000;
 43768 000095A7 00                      	db	0				;AN000;  no extra delimiter
 43769                                  CHCP_PARMS:
 43770 000095A8 0001                    	db	0,1				;AN000;  1 positional parm
 43771 000095AA [AE95]                  	dw	CHCP_CONTROL1			;AN000;
 43772 000095AC 00                      	db	0				;AN000;  no switches
 43773 000095AD 00                      	db	0				;AN000;  no keywords
 43774                                  
 43775                                  CHCP_CONTROL1:
 43776 000095AE 0180                    	dw	8001h				;AN000;  numeric value - optional
 43777 000095B0 0000                    	dw	0				;AN000;  no function flags
 43778 000095B2 [C9A5]                  	dw	PARSE1_OUTPUT			;AN000;  result buffer
 43779 000095B4 [B795]                  	dw	CHCP_VALUES			;AN000;
 43780 000095B6 00                      	db	0				;AN000;  no keywords
 43781                                  
 43782                                  CHCP_VALUES:
 43783 000095B7 01                      	db	1				;AN000;
 43784 000095B8 01                      	db	1				;AN000;  1 range
 43785 000095B9 01                      	db	1				;AN000;  returned if result
 43786 000095BA 64000000E7030000        	dd	CHCP_MINVAL,CHCP_MAXVAL		;AN000;  minimum & maximum value
 43787 000095C2 00                      	db	0				;AN000;  no numeric values
 43788 000095C3 00                      	db	0				;AN000;  no string values
 43789                                  
 43790                                  ; PARSE BLOCK FOR DATE
 43791                                  
 43792                                  ; The following parse control block can be used for any command which
 43793                                  ; needs only an optional date string as an operand. Returns unverified
 43794                                  ; result in DATE_OUTPUT. Currently used for the DATE internal command.
 43795                                  
 43796                                  PARSE_DATE:
 43797 000095C4 [C795]                  	dw	DATE_PARMS			;AN000;
 43798 000095C6 00                      	db	0				;AN000;  no extra delimiter
 43799                                  DATE_PARMS:
 43800 000095C7 0001                    	db	0,1				;AN000;  1 positional parm
 43801 000095C9 [CD95]                  	dw	DATE_CONTROL1			;AN000;
 43802 000095CB 00                      	db	0				;AN000;  no switches
 43803 000095CC 00                      	db	0				;AN000;  no keywords
 43804                                  
 43805                                  DATE_CONTROL1:
 43806 000095CD 0110                    	dw	1001h				;AN000;  date - optional
 43807 000095CF 0000                    	dw	0				;AN000;  no function flags
 43808 000095D1 [D1A5]                  	dw	DATE_OUTPUT			;AN000;  result buffer
 43809 000095D3 [5895]                  	dw	NO_VALUES			;AN000;
 43810 000095D5 00                      	db	0				;AN000;  no keywords
 43811                                  
 43812                                  ; PARSE BLOCK FOR TIME
 43813                                  
 43814                                  ; The following parse control block can be used for any command which
 43815                                  ; needs only an optional time string as an operand. Returns unverified
 43816                                  ; result in TIME_OUTPUT. Currently used for the TIME internal command.
 43817                                  
 43818                                  PARSE_TIME:
 43819 000095D6 [D995]                  	dw	TIME_PARMS			;AN000;
 43820 000095D8 00                      	db	0				;AN000;  no extra delimiter
 43821                                  TIME_PARMS:
 43822 000095D9 0001                    	db	0,1				;AN000;  1 positional parm
 43823 000095DB [DF95]                  	dw	TIME_CONTROL1			;AN000;
 43824 000095DD 00                      	db	0				;AN000;  no switches
 43825 000095DE 00                      	db	0				;AN000;  no keywords
 43826                                  
 43827                                  TIME_CONTROL1:
 43828 000095DF 0108                    	dw	0801h				;AN000;  TIME - optional
 43829 000095E1 0000                    	dw	0				;AN000;  no function flags
 43830 000095E3 [D9A5]                  	dw	TIME_OUTPUT			;AN000;  result buffer
 43831 000095E5 [5895]                  	dw	NO_VALUES			;AN000;
 43832 000095E7 00                      	db	0				;AN000;  no keywords
 43833                                  
 43834                                  ; PARSE BLOCK FOR VOL
 43835                                  
 43836                                  ; The following parse control block can be used for any command which
 43837                                  ; needs only an optional drive letter as an operand.  Returns unverified
 43838                                  ; drive number (one based) in DRIVE_OUTPUT. Currently used for the VOL
 43839                                  ; internal command.
 43840                                  
 43841                                  PARSE_VOL:
 43842 000095E8 [EB95]                  	dw	VOL_PARMS			;AN000;
 43843 000095EA 00                      	db	0				;AN000;  no extra delimiter
 43844                                  VOL_PARMS:
 43845 000095EB 0001                    	db	0,1				;AN000;  1 positional parm
 43846 000095ED [F195]                  	dw	DRIVE_CONTROL1			;AN000;
 43847 000095EF 00                      	db	0				;AN000;  no switches
 43848 000095F0 00                      	db	0				;AN000;  no keywords
 43849                                  
 43850                                  DRIVE_CONTROL1:
 43851 000095F1 0101                    	dw	0101h				;AN000;  DRIVE - optional
 43852 000095F3 0100                    	dw	1				;AN000;  capitalize - file table
 43853 000095F5 [E1A5]                  	dw	DRIVE_OUTPUT			;AN000;  result buffer
 43854 000095F7 [5895]                  	dw	NO_VALUES			;AN000;
 43855 000095F9 00                      	db	0				;AN000;  no keywords
 43856                                  
 43857                                  ; PARSE BLOCK FOR MKDIR, RMDIR, TYPE
 43858                                  
 43859                                  ; The following parse control block can be used for any command which
 43860                                  ; needs only one required file specification as an operand. Returns a
 43861                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 43862                                  ; for the MKDIR, RMDIR, and TYPE internal commands.
 43863                                  
 43864                                  PARSE_MRDIR:
 43865 000095FA [FD95]                  	dw	MRDIR_PARMS			;AN000;
 43866 000095FC 00                      	db	0				;AN000;  no extra delimiter
 43867                                  MRDIR_PARMS:
 43868 000095FD 0101                    	db	1,1				;AN000;  1 positional parm
 43869 000095FF [5B95]                  	dw	FILE_REQUIRED			;AN000;
 43870 00009601 00                      	db	0				;AN000;  no switches
 43871 00009602 00                      	db	0				;AN000;  no keywords
 43872                                  
 43873                                  ; PARSE BLOCK FOR CHDIR, TRUENAME
 43874                                  
 43875                                  ; The following parse control block can be used for any command which
 43876                                  ; needs only one optional file specification an operand. Returns a
 43877                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 43878                                  ; for the CHDIR and TRUENAME internal commands.
 43879                                  
 43880                                  PARSE_CHDIR:
 43881 00009603 [0696]                  	dw	CHDIR_PARMS			;AN000;
 43882 00009605 00                      	db	0				;AN000;  no extra delimiter
 43883                                  CHDIR_PARMS:
 43884 00009606 0001                    	db	0,1				;AN000;  1 positional parm
 43885 00009608 [6495]                  	dw	FILE_OPTIONAL			;AN000;
 43886 0000960A 00                      	db	0				;AN000;  no switches
 43887 0000960B 00                      	db	0				;AN000;  no keywords
 43888                                  
 43889                                  ; PARSE BLOCK FOR ERASE
 43890                                  
 43891                                  ; The following parse control block is used for the DEL/ERASE internal
 43892                                  ; commands. This command has one required file specification and an
 43893                                  ; optional switch (/p) as operands. The verified switch or unverified
 43894                                  ; file specification is returned in PARSE1_OUTPUT.
 43895                                  
 43896                                  PARSE_ERASE:
 43897 0000960C [0F96]                  	dw	ERASE_PARMS			;AN000;
 43898 0000960E 00                      	db	0				;AN000;  no extra delimiter
 43899                                  
 43900                                  ERASE_PARMS:
 43901 0000960F 0101                    	db	1,1				;AN000;  1 positional parm
 43902 00009611 [5B95]                  	dw	FILE_REQUIRED			;AN000;
 43903 00009613 01                      	db	1				;AN000;  1 switch
 43904 00009614 [7695]                  	dw	SLASH_P_SWITCH			;AN000;
 43905 00009616 00                      	db	0				;AN000;  no keywords
 43906                                  
 43907                                  ; PARSE BLOCK FOR DIR
 43908                                  
 43909                                  ; The following parse control block is used for the DIR internal command.
 43910                                  ; This command has one optional file specification and several optional
 43911                                  ; switches. Switches, switch values, and the filespec are returned in 
 43912                                  ; PARSE1_OUTPUT.
 43913                                  ;
 43914                                  ; Switches are /a[value], /-a, /o[value], /-o, /s, /-s, /?, /b, /-b,
 43915                                  ; /w, /-w, /p, and /-p. The string values for /a and /o are optional,
 43916                                  ; do not require colons, and are not checked against a value list.
 43917                                  ;
 43918                                  ; Switch /h has been removed from the DIR command	;M008
 43919                                  ; Switch /? is no longer handled internally		;M008
 43920                                  ;
 43921                                  ; A list of pointers to all the switch synonyms is provided here to
 43922                                  ; help identify which switch has been matched.
 43923                                  
 43924                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 43925                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8815h
 43926                                  
 43927                                  PARSE_DIR:
 43928 00009617 [1A96]                  	dw	DIR_PARMS
 43929 00009619 00                      	db	0			; no extra delimiters
 43930                                  DIR_PARMS:
 43931 0000961A 0001                    	db	0,1			; 1 optional positional param
 43932 0000961C [6D95]                  	dw	FILE_OPTIONAL2
 43933 0000961E 02                      	db	2			; 2 kinds of switches
 43934 0000961F [2496]                  	dw	DIR_SW_VALUED
 43935 00009621 [3696]                  	dw	DIR_SW_UNVALUED
 43936 00009623 00                      	db	0			; no keywords
 43937                                  
 43938                                  DIR_SW_VALUED:
 43939 00009624 0120                    	dw	2001h			; optional string value
 43940 00009626 2100                    	dw	21h			; optional colon; capitalize 
 43941 00009628 [C9A5]                  	dw	PARSE1_OUTPUT		; result buffer
 43942 0000962A [5A95]                  	dw	NULL_VALUE_LIST		; don't validate value
 43943                                  
 43944                                  	; 18/06/2023
 43945                                  	;db	2
 43946                                  
 43947                                  ; MSDOS 6.0 COMMAND.COM
 43948                                  ;ifdef DBLSPACE_HOOKS
 43949                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 43950 0000962C 03                      	db	3		; 3 'synonyms'
 43951                                  ;else
 43952                                  ;	db	2		; 2 'synonyms'
 43953                                  ;endif
 43954                                  
 43955                                  DIR_SW_A:
 43956 0000962D 2F4100                  	db	"/A",0
 43957                                  DIR_SW_O:
 43958 00009630 2F4F00                  	db	"/O",0
 43959                                  
 43960                                  ; MSDOS 6.0 COMMAND.COM
 43961                                  ;ifdef DBLSPACE_HOOKS
 43962                                  	; 18/06/2023
 43963                                  DIR_SW_C:
 43964 00009633 2F4300                  	db	"/C",0
 43965                                  ;endif
 43966                                  
 43967                                  DIR_SW_UNVALUED:
 43968 00009636 0000                    	dw	0			; no value
 43969 00009638 0000                    	dw	0			; no format functions
 43970 0000963A [C9A5]                  	dw	PARSE1_OUTPUT		; result buffer
 43971 0000963C [5895]                  	dw	NO_VALUES
 43972                                  
 43973                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 43974                                  	;;db	12
 43975                                  	
 43976                                  	; 18/06/2023
 43977                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8839h
 43978                                  	;db	14		; 14 'synonyms' !?
 43979                                  
 43980                                  ; MSDOS 6.0 COMMAND.COM
 43981                                  ;ifdef DBLSPACE_HOOKS
 43982                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 43983                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DB0h
 43984 0000963E 0D                      	db	13		; 13 'synonyms'
 43985                                  ;else
 43986                                  ;	db	12		; 12 'synonyms'
 43987                                  ;endif
 43988                                  
 43989                                  DIR_SW_NEG_A:
 43990 0000963F 2F2D4100                	db	"/-A",0
 43991                                  DIR_SW_NEG_O:
 43992 00009643 2F2D4F00                	db	"/-O",0
 43993                                  DIR_SW_S:
 43994 00009647 2F5300                  	db	"/S",0
 43995                                  DIR_SW_NEG_S:
 43996 0000964A 2F2D5300                	db	"/-S",0
 43997                                  DIR_SW_B:
 43998 0000964E 2F4200                  	db	"/B",0
 43999                                  DIR_SW_NEG_B:
 44000 00009651 2F2D4200                	db	"/-B",0
 44001                                  DIR_SW_W:
 44002 00009655 2F5700                  	db	"/W",0
 44003                                  DIR_SW_NEG_W:
 44004 00009658 2F2D5700                	db	"/-W",0
 44005                                  DIR_SW_P:
 44006 0000965C 2F5000                  	db	"/P",0
 44007                                  DIR_SW_NEG_P:
 44008 0000965F 2F2D5000                	db	"/-P",0
 44009                                  DIR_SW_L:
 44010 00009663 2F4C00                  	db	"/L",0		;M010
 44011                                  DIR_SW_NEG_L:
 44012 00009666 2F2D4C00                	db	"/-L",0 	;M010
 44013                                  
 44014                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44015                                  ; MSDOS 6.0 COMMAND.COM (DBLSPACE_HOOKS)
 44016                                  DIR_SW_NEG_C:
 44017 0000966A 2F2D4300                	db	"/-C",0
 44018                                  
 44019                                  ; Here's a list of pointers to DIR's switch synonyms, for easier
 44020                                  ; identification. Order is critical - DIR routines rely on the
 44021                                  ; specific order in this list. Negated options appear at odd 
 44022                                  ; positions in the list, and simple on/off options appear first.
 44023                                  
 44024                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44025                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DE0h
 44026                                  Dir_Sw_Ptrs:			; list of ptrs to switch synonyms
 44027                                  	; 18/06/2023
 44028                                  	; MSDOS 6.0 COMMAND.COM ; *
 44029 0000966E [6A96]                  	dw	DIR_SW_NEG_C	; * 
 44030                                  Dir_Sw_Ptrs_2:
 44031 00009670 [3396]                  	dw	DIR_SW_C	; *
 44032                                  	; MSDOS 5.0 COMMAND.COM	
 44033                                  ;Dir_Sw_Ptrs:
 44034 00009672 [5896]                  	dw	DIR_SW_NEG_W
 44035                                  ;Dir_Sw_Ptrs_2:
 44036 00009674 [5596]                  	dw	DIR_SW_W
 44037 00009676 [5F96]                  	dw	DIR_SW_NEG_P
 44038 00009678 [5C96]                  	dw	DIR_SW_P
 44039 0000967A [4A96]                  	dw	DIR_SW_NEG_S
 44040 0000967C [4796]                  	dw	DIR_SW_S
 44041 0000967E [5196]                  	dw	DIR_SW_NEG_B
 44042 00009680 [4E96]                  	dw	DIR_SW_B
 44043 00009682 [6696]                  	dw	DIR_SW_NEG_L	;M010
 44044 00009684 [6396]                  	dw	DIR_SW_L	;M010
 44045 00009686 [4396]                  	dw	DIR_SW_NEG_O
 44046 00009688 [3096]                  	dw	DIR_SW_O
 44047 0000968A [3F96]                  	dw	DIR_SW_NEG_A
 44048 0000968C [2D96]                  	dw	DIR_SW_A
 44049                                  
 44050                                  ; PARSE BLOCK FOR RENAME
 44051                                  
 44052                                  ; The following parse control block can be used for any command which
 44053                                  ; needs only two required file specifications as operands. Returns
 44054                                  ; pointers to the unverified string in PARSE1_OUTPUT.
 44055                                  ; Currently used for the RENAME internal command.
 44056                                  
 44057                                  PARSE_RENAME:
 44058 0000968E [9196]                  	dw	RENAME_PARMS		;AN000;
 44059 00009690 00                      	db	0			;AN000;  no extra delimiter
 44060                                  RENAME_PARMS:
 44061 00009691 0202                    	db	2,2			;AN000;  2 positional parms
 44062 00009693 [5B95]                  	dw	FILE_REQUIRED		;AN000;
 44063 00009695 [5B95]                  	dw	FILE_REQUIRED		;AN000;
 44064 00009697 00                      	db	0			;AN000;  no switches
 44065 00009698 00                      	db	0			;AN000;  no keywords
 44066                                  
 44067                                  ; PARSE BLOCK FOR CTTY
 44068                                  
 44069                                  ; The following parse control block can be used for any command which
 44070                                  ; needs one required device name as an operand. Returns a pointer to
 44071                                  ; unverified string in PARSE1_OUTPUT. Currently used for the CTTY
 44072                                  ; internal command.
 44073                                  
 44074                                  PARSE_CTTY:
 44075 00009699 [9C96]                  	dw	CTTY_PARMS		;AN000;
 44076 0000969B 00                      	db	0			;AN000;  no extra delimiter
 44077                                  CTTY_PARMS:
 44078 0000969C 0101                    	db	1,1			;AN000;  1 positional parm
 44079 0000969E [A296]                  	dw	CTTY_CONTROL1		;AN000;
 44080 000096A0 00                      	db	0			;AN000;  no switches
 44081 000096A1 00                      	db	0			;AN000;  no keywords
 44082                                  CTTY_CONTROL1:
 44083 000096A2 0020                    	dw	2000h			;AN000;  string value - required
 44084 000096A4 1100                    	dw	11h			;AN000;  capitalize - file table
 44085                                  					;AN000;  remove colon at end
 44086 000096A6 [C9A5]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 44087 000096A8 [5895]                  	dw	NO_VALUES		;AN000;
 44088 000096AA 00                      	db	0			;AN000;  no keywords
 44089                                  
 44090                                  ; PARSE BLOCK FOR VER
 44091                                  
 44092                                  ; The following parse control block can be used for any command which
 44093                                  ; needs an optional switch "/debug". Currently used for the VER command.
 44094                                  
 44095                                  PARSE_VER:
 44096 000096AB [AE96]                  	dw	VER_PARMS
 44097 000096AD 00                      	db	0			; no extra delimiters
 44098                                  VER_PARMS:
 44099 000096AE 0000                    	db	0,0			; no positional parameters
 44100                                  ; 20/07/2024 - Retro DOS v5 COMMAND.COM
 44101                                  %if 0	; PCDOS 7.1 (& MSDOS 5.0-6.22) COMMAND.COM 
 44102                                  	db	1			; one switch
 44103                                  	dw	SLASH_R
 44104                                  %else
 44105                                  	; 20/07/2024 - Retro DOS v4-v5 COMMAND.COM
 44106 000096B0 02                      	db	2
 44107 000096B1 [B696]                  	dw	SLASH_R
 44108 000096B3 [C296]                  	dw	SLASH_T ; Retro DOS v4-v5 COMMAND.COM switch
 44109                                  %endif
 44110 000096B5 00                      	db	0			; no keywords
 44111                                  SLASH_R:
 44112 000096B6 0000                    	dw	0			; no values
 44113 000096B8 0200                    	dw	2			; capitalize by filename table
 44114 000096BA [C9A5]                  	dw	PARSE1_OUTPUT		; result buffer
 44115 000096BC [5895]                  	dw	NO_VALUES		; no values
 44116 000096BE 01                      	db	1			; one synonym
 44117                                  SLASH_R_SYN:
 44118 000096BF 2F5200                  	db	"/R",0
 44119                                  
 44120                                  ; 20/07/2024 - Retro DOS v5 COMMAND.COM
 44121                                  %if 1
 44122                                  SLASH_T:
 44123 000096C2 0000                    	dw	0			; no values
 44124 000096C4 0200                    	dw	2			; capitalize by filename table
 44125 000096C6 [C9A5]                  	dw	PARSE1_OUTPUT		; result buffer
 44126 000096C8 [5895]                  	dw	NO_VALUES		; no values
 44127 000096CA 01                      	db	1			; one synonym
 44128                                  SLASH_T_SYN:
 44129 000096CB 2F5400                  	db	"/T",0
 44130                                  %endif
 44131                                  
 44132                                  ; M003 ; Start of changes for LoadHigh support
 44133                                  
 44134                                  ;Parse Control Block for LOADHIGH command
 44135                                  
 44136                                  Parse_LoadHi:
 44137 000096CE [D196]                  	dw	LoadHi_Parms		;extended parm table
 44138 000096D0 00                      	db	0			;no extra delimiters
 44139                                  
 44140                                  LoadHi_Parms:
 44141 000096D1 0101                    	db	1,1			;min. 1 parm, max. 1 parm
 44142 000096D3 [5B95]                  	dw	FILE_REQUIRED		;control struc for filename
 44143 000096D5 00                      	db	0			;no switches
 44144 000096D6 00                      	db	0			;no keywords
 44145                                  
 44146                                  ; M003 ; End of changes for LoadHigh support
 44147                                  
 44148                                  TempVarName:
 44149 000096D7 54454D503D00            	db	"TEMP=",0
 44150                                  
 44151                                  	; 16/04/2023 - Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 44152                                  ;TRANDATAEND:		; TRANGROUP:88C2h
 44153                                  
 44154                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 44155                                  copycmd:
 44156 000096DD 434F5059434D443D        	db 'COPYCMD='
 44157                                  
 44158                                  ; 06/08/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 44159                                  %if 0
 44160                                  sCVFRoot:
 44161                                  	db '\DBLSPACE.'
 44162                                  %else
 44163                                  	; 06/08/2024
 44164                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:9C3Eh
 44165                                  REXX_EXE:
 44166 000096E5 524558582E45584500      	db 'REXX.EXE',0		
 44167                                  %endif
 44168                                  
 44169                                  ; ----------------------------------------------------------------------------
 44170                                  ; 20/07/2024 - Retro DOS v5.0 COMMAND.COM
 44171                                  %if 1
 44172 000096EE 0D0A                    RD5CMD_VER_MSG: db 0Dh, 0Ah
 44173 000096F0 526574726F20444F53-     		db 'Retro DOS v5 COMMAND.COM'
 44173 000096F9 20763520434F4D4D41-
 44173 00009702 4E442E434F4D       
 44174 00009708 0D0A                    		db 0Dh, 0Ah 
 44175 0000970A 32303234202D204572-     		db '2024 - Erdogan Tan'
 44175 00009713 646F67616E2054616E 
 44176 0000971C 0D0A                    		db 0Dh,0Ah
 44177 0000971E 24                      		db '$'
 44178                                  %endif
 44179                                  ; ----------------------------------------------------------------------------
 44180                                  
 44181                                  	; 18/06/2023
 44182                                  	; MSDOS 6.22 COMMAND.COM
 44183                                  TRANDATAEND:		; TRANGROUP:9E53h
 44184                                  
 44185                                  ;============================================================================
 44186                                  ; PSDATA.INC, MSDOS 6.0, 1991
 44187                                  ;============================================================================
 44188                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44189                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44190                                  
 44191                                  ; 18/04/2023
 44192                                  TRANSPACESTART:
 44193                                  
 44194                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:88C2h
 44195                                  	
 44196                                  	; 18/06/2023
 44197                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9E53h
 44198                                  
 44199                                  ;********************** Local Data *************************************
 44200                                  
 44201                                  $P_ORDINAL:
 44202 0000971F 0000                    	dw	0		;AN000; Operand ordinal save area
 44203                                  $P_RC:
 44204 00009721 0000                    	dw	0		;AN000; Return code from parser
 44205                                  $P_SI_Save:
 44206 00009723 0000                    	dw	0		;AN000; Pointer of command buffer
 44207                                  $P_DX:
 44208 00009725 0000                    	dw	0		;AN000; Return result buffer address
 44209                                  $P_Terminator:
 44210 00009727 00                      	db	0		;AN000; Terminator code (ASCII)
 44211                                  $P_DBCSEV_OFF:
 44212 00009728 0000                    	dw	0		;AN000; Offset of DBCS EV
 44213                                  $P_DBCSEV_SEG:
 44214 0000972A 0000                    	dw	0		;AN000; Segment of DBCS EV
 44215                                  $P_Flags:			;AN000; Parser internal flags
 44216                                  $P_Flags1:
 44217 0000972C 00                      	db	0		;AN038; to reference first byte flags
 44218                                  $P_Flags2:
 44219 0000972D 00                      	db	0		;AN038; to reference second byte flags only
 44220                                  $P_SaveSI_Cmpx:
 44221 0000972E 0000                    	dw	0		;AN000; save si for later use by complex
 44222                                  $P_KEYorSW_Ptr:
 44223 00009730 0000                    	dw	0		;AN000; points next to "=" or ":" code
 44224                                  $P_Save_EOB:
 44225 00009732 0000                    	dw	0		;AN000; save pointer to EOB
 44226                                  $P_Found_SYNONYM:
 44227 00009734 0000                    	dw	0		;AN000; es:@ points to found synonym
 44228                                  $P_STRING_BUF:
 44229 00009736 00<rep 80h>             	times  128 db 0		;AN000; Pick a operand from command line
 44230                                  $P_ORIG_ORD:
 44231 000097B6 0000                    	dw	0		;AN039; ORIGINAL ORDINAL FROM CX
 44232                                  $P_ORIG_STACK:
 44233 000097B8 0000                    	dw	0		;AN039; ORIGINAL VALUE OF STACK FROM SP
 44234                                  $P_ORIG_SI:
 44235 000097BA 0000                    	dw	0		;AN039; ORIGINAL START PARSE POINTER FROM SI
 44236                                  $P_Got_Time:
 44237 000097BC 00                      	db	0		;AN023; if 1, use Time delimiters
 44238                                  $P_Country_Info:
 44239 000097BD FFFF                    	dw	-1 ; 0FFFFh
 44240 000097BF 00<rep 20h>             	times	32 db 0	
 44241                                  $P_1st_Val:
 44242 000097DF 0000                    	dw	0		;AN000; used when process date or time
 44243                                  $P_2nd_Val:
 44244 000097E1 0000                    	dw	0		;AN000; used when process date or time
 44245                                  $P_3rd_Val:
 44246 000097E3 0000                    	dw	0		;AN000; used when process date or time
 44247                                  $P_4th_Val:
 44248 000097E5 0000                    	dw	0		;AN000; used when process date or time
 44249                                  $P_Char_CAP_Ptr:
 44250 000097E7 FF                      	db	0FFh		;AN000; info id
 44251 000097E8 0000                    	dw	0		;AN000; offset	of char case map table
 44252 000097EA 0000                    	dw	0		;AN000; segment of char case map table
 44253                                  $P_File_CAP_Ptr:
 44254 000097EC FF                      	db	0FFh		;AN000; info id
 44255 000097ED 0000                    	dw	0		;AN000; offset	of file case map table
 44256 000097EF 0000                    	dw	0		;AN000; segment of file case map table
 44257                                  
 44258                                  	; 18/04/2023
 44259                                  ;M029
 44260                                  ;!!!WARNING!!!
 44261                                  ; In routine SYSPARSE (parse.asm), $P_FileSp_Char is reinitialized using 
 44262                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 44263                                  ;changes need to be made in SYSPARSE
 44264                                  
 44265                                  $P_FileSp_Char:
 44266 000097F1 5B5D7C3C3E2B3D3B22      	db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 44267                                  $P_FileSp_Len equ $-$P_FileSp_Char ;AN000;
 44268                                  
 44269                                  ;filespec error flag
 44270                                  $P_err_flag:
 44271 000097FA 00                      	db	0		;AN033; flag set if filespec parsing error
 44272                                  				;AN033;  was detected.
 44273                                  
 44274                                  ;============================================================================
 44275                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 44276                                  ;============================================================================
 44277                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44278                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44279                                  
 44280                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:899Eh
 44281                                  
 44282                                  	; 18/06/2023
 44283                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9F2Fh
 44284                                  
 44285                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 44286                                  ;;
 44287                                  ;; STRUCTURE: $M_RES_ADDRS
 44288                                  ;;
 44289                                  ;; Resident data area definition of variables
 44290                                  ;;
 44291                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 44292                                  
 44293                                  $M_RT:
 44294 000097FB 00<rep 8Dh>             	times $M_RES_ADDRS_SZ db 0   ; times 141 db 0
 44295                                  
 44296                                  ;============================================================================
 44297                                  ; COPYRIGHT.INC, MSDOS 6.0, 1993
 44298                                  ;============================================================================
 44299                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44300                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44301                                  
 44302                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8A2Bh
 44303                                  ; ---------------------------------------------------------------------------
 44304                                  ;;M00 - changed to DOS 5.0 copyright - MD 9 Jul 90
 44305                                  ;;M031 - changed copyright to 1991
 44306                                  ;;9/16 - changed version to 6.0 and copyright to 1992
 44307                                  ;;9/21 - Added international translations, language passed through COUNTRY macro
 44308                                  ;;B49,50 - changed version to 6 and copyright to 1993
 44309                                  ; ---------------------------------------------------------------------------
 44310                                  	
 44311                                  	; 18/06/2023
 44312                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9FBCh
 44313                                  ;ifdef USA
 44314                                  MsDosVer6_CCopy:
 44315                                  	; MSDOS 6.0
 44316                                  	;db	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
 44317                                  	; 18/06/2023
 44318                                  	; MSDOS 6.22
 44319 00009888 4D5320444F53205665-     	db	"MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp "
 44319 00009891 7273696F6E20362028-
 44319 0000989A 4329436F7079726967-
 44319 000098A3 687420313938312D31-
 44319 000098AC 393934204D6963726F-
 44319 000098B5 736F667420436F7270-
 44319 000098BE 20                 
 44320 000098BF 4C6963656E73656420-     	db	"Licensed Material - Property of Microsoft "
 44320 000098C8 4D6174657269616C20-
 44320 000098D1 2D2050726F70657274-
 44320 000098DA 79206F66204D696372-
 44320 000098E3 6F736F667420       
 44321 000098E9 416C6C207269676874-     	db	"All rights reserved "
 44321 000098F2 732072657365727665-
 44321 000098FB 6420               
 44322                                  ;endif
 44323                                  
 44324                                  ; ---------------------------------------------------------------------------
 44325                                  ; 18/06/2023
 44326                                  ; 15/04/2023
 44327                                  ;MsDosVer5_CCopy:
 44328                                  	;db	"MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp "
 44329                                  	;db	"Licensed Material - Property of Microsoft "
 44330                                  	;db	"All rights reserved "
 44331                                  ; ---------------------------------------------------------------------------
 44332                                  ; 15/04/2023
 44333                                  	; 16/04/2023 - 21/04/2023
 44334                                  	;db 	0
 44335                                  	;db	0Dh,0Ah
 44336                                  	;db	'Retro DOS v4.0 (& v4.1) COMMAND.COM '
 44337                                  	;db	0
 44338                                  	;db	'by Erdogan Tan - 05/05/2023'
 44339                                  	;db	0
 44340                                  
 44341                                  	; 19/06/2023
 44342                                  	; 18/06/2023
 44343                                  	;db 	0
 44344                                  	;db	0Dh,0Ah
 44345                                  	;db	'Retro DOS v4.2 COMMAND.COM '
 44346                                  	;db	0
 44347                                  	;db	'by Erdogan Tan - 19/6/2023'
 44348                                  	;db	0
 44349                                  
 44350                                  ;============================================================================
 44351                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 44352                                  ;============================================================================
 44353                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44354                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44355                                  
 44356                                  PRINTF_HANDLE:
 44357 000098FD 0000                    	dw	0		;AC000;
 44358                                  
 44359                                  ;============================================================================
 44360                                  ; TSPC.ASM, MSDOS 6.0, 1991
 44361                                  ;============================================================================
 44362                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44363                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44364                                  
 44365                                  ;TITLE	COMMAND Transient Uninitialized DATA
 44366                                  
 44367                                  ;The TRANSPACE segment contains variable data that is considered
 44368                                  ;volatile between command cycles, and therefore is not included in the
 44369                                  ;transient checksum area. Contents of these variables MUST be
 44370                                  ;initialized before use, and must not be relied upon from command
 44371                                  ;cycle to command cycle.
 44372                                  ;
 44373                                  ;No constant data values should be stored here.
 44374                                  
 44375                                  ; ---------------------------------------------------------------------------
 44376                                  ; START OF UNITIALIZED DATA
 44377                                  ; ---------------------------------------------------------------------------
 44378                                  
 44379                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8AA5h
 44380                                  
 44381                                  	; 18/06/2023
 44382                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A033h
 44383                                  
 44384 000098FF 00<rep 57h>             SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 44385 00009956 00<rep 57h>             TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 44386 000099AD 00<rep 83h>             UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 44387 00009A30 00<rep 83h>             COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 44388 00009AB3 00<rep 46h>             USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 44389 00009AF9 00<rep 83h>             EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 44390 00009B7C 00<rep 53h>             RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 44391                                  
 44392                                  ; Variables passed up from resident	; in the Resident portion: (initial values)	
 44393                                  HEADCALL:
 44394 00009BCF 0000                    	dw 0			; TRANVARS  (dw THEADFIX)
 44395 00009BD1 0000                    RESSEG:	dw 0			; MYSEG     (dw 0) 	 	
 44396 00009BD3 0000                    TPA:	dw 0			; LTPA	    (dw 0)	
 44397                                  SWITCHAR:
 44398 00009BD5 00                      	db 0			; RSWITCHAR (db '-')
 44399                                  DIRCHAR:
 44400 00009BD6 00                      	db 0			; RDIRCHAR  (db '/')
 44401                                  EXEC_ADDR:
 44402 00009BD7 00000000                	dd 0			; 	    (dw EXT_EXEC)	 
 44403                                  				; MYSEG1    (dw 0)	
 44404                                  RCH_ADDR:
 44405 00009BDB 00000000                	dd 0			;	    (dw TREMCHECK) 	
 44406                                  				; MYSEG2    (dw 0)	
 44407 00009BDF 0000                    	dw 0			; RESTEST   (dw 0)	
 44408                                  TRAN_TPA:
 44409 00009BE1 0000                    	dw 0			; RES_TPA   (dw 0)	
 44410                                  
 44411 00009BE3 00                      CHKDRV:	db 0
 44412                                  IFNOTFLAG:
 44413                                  FILTYP:
 44414 00009BE4 00                      RDEOF:	db 0			; Misc flags
 44415 00009BE5 00                      CURDRV:	db 0
 44416                                  PARM1:
 44417 00009BE6 00                      Concat:	db 0
 44418                                  PARM2:
 44419 00009BE7 00                      ArgC:	db 0
 44420 00009BE8 0000                    COMSW:	dw 0			; Switches between command and 1st arg
 44421 00009BEA 0000                    ARG1S:	dw 0			; Switches between 1st and 2nd arg
 44422                                  ARG2S:				; Switches after 2nd arg		
 44423                                  DestSwitch:
 44424 00009BEC 0000                    	dw 0
 44425                                  ARGTS:
 44426                                  AllSwitch:
 44427 00009BEE 0000                    	dw 0			; ALL switches except for COMSW
 44428 00009BF0 00                      CFLAG:	db 0
 44429                                  DestClosed:
 44430                                  SPECDRV:
 44431 00009BF1 00                      	db 0
 44432 00009BF2 0000                    BYTCNT:	dw 0			; Size of buffer between RES and TRANS
 44433                                  
 44434                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 44435                                  ;ifdef DBLSPACE_HOOKS
 44436                                  savBytCnt: ; MSDOS 6.0
 44437 00009BF4 0000                    	dw 0
 44438                                  ;endif
 44439                                  	
 44440 00009BF6 0000                    NXTADD:	dw 0
 44441                                  FRSTSRCH:
 44442 00009BF8 00                      	db 0
 44443                                  ; 15/04/2023
 44444                                  LeftOnLine:
 44445 00009BF9 00                      	db 0			; entries left on line u.b. DIR
 44446                                  PerLine:
 44447 00009BFA 00                      	db 0			; entries/line u.b. DIR
 44448 00009BFB 00                      LINCNT:	db 0
 44449 00009BFC 00                      LINLEN:	db 0
 44450                                  LeftOnPage:
 44451 00009BFD 0000                    	dw 0			; lines left on page u.b. DIR
 44452                                  FileCnt:
 44453 00009BFF 0000                    	dw 0			; file count u.b. DIR
 44454                                  FileSiz:
 44455 00009C01 00000000                	dd 0			; file size u.b. DIR
 44456                                  
 44457                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM - TRANGROUP:A0B5h
 44458                                  %if 1
 44459 00009C05 00000000                	dd 0
 44460 00009C09 00                      narrow:	db 0
 44461                                  nocommas:
 44462 00009C0A 00                      	db 0
 44463                                  yeardigit4:
 44464 00009C0B 00                      	db 0
 44465                                  bfree_not_kilo:
 44466 00009C0C 00                      	db 0
 44467                                  efs_buffer:
 44468 00009C0D 000000000000000000-     	db 44 dup(0)  ; times 44 db 0
 44468 00009C16 000000000000000000-
 44468 00009C1F 000000000000000000-
 44468 00009C28 000000000000000000-
 44468 00009C31 0000000000000000   
 44469                                  efs_drive:
 44470 00009C39 433A5C00                	db 'C:\',0
 44471                                  %endif
 44472                                  
 44473                                  ; Note: keep FileCntTotal through csecUsedTotal together!
 44474                                  
 44475                                  FileCntTotal:
 44476 00009C3D 00000000                	dd 0			; total file count u.b. DIR
 44477                                  FileSizTotal:
 44478 00009C41 00000000                	dd 0			; total file size u.b. DIR
 44479                                  
 44480                                  ; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 44481                                  %if 1
 44482                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:A0F5h
 44483 00009C45 00000000                	dd 0
 44484                                  %else
 44485                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 44486                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A33Fh
 44487                                  	; MSDOS 6.0
 44488                                  ;ifdef DBLSPACE_HOOKS
 44489                                  ccluUsed:
 44490                                  	dw 0			; count of DOS clusters used
 44491                                  ccluUsedDir:
 44492                                  	dw 0			
 44493                                  ccluUsedTotal:
 44494                                  	dw 0			
 44495                                  csecUsed:
 44496                                  	dd 0			; count of comp sectors used
 44497                                  csecUsedDir:
 44498                                  	dd 0			
 44499                                  csecUsedTotal:
 44500                                  	dd 0			
 44501                                  
 44502                                  ; Note:  keep FileCntTotal through csecUsedTotal together!
 44503                                  
 44504                                  fhCVF:
 44505                                  	dw 0			; Compressed Volume File handle
 44506                                  szCVF:
 44507                                  	times	16 db 0		; "X:\\12345678.123\0"
 44508                                  MDBPB:
 44509                                  	;MD_BPB	<>		; Extended MagicDrv BPB
 44510                                  	times	64 db 0
 44511                                  csecPerCluster:
 44512                                  	db 0			; sectors/cluster for ratio calc
 44513                                  fUseHostSize:
 44514                                  	db 0			; NZ if using host cluster size
 44515                                  cFATEntries:
 44516                                  	dw 0			; # FAT entries in buffers
 44517                                  entInBuf:
 44518                                  	dw 0			; 1st entry # in FAT buffers
 44519                                  segFATBuf:
 44520                                  	dw 0			; seg of DOS & MD FAT buffers
 44521                                  pbufDOSFAT:
 44522                                  	dw 0			; off of DOS FAT buffer
 44523                                  pbufMDFAT:
 44524                                  	dw 0			; off of MD FAT buffer
 44525                                  bufDOSFAT:
 44526                                  	;times (cRES_FAT_ENTRIES*2) db 0
 44527                                  	times 64 db 0	 	; small DOS FAT buffer
 44528                                  bufMDFAT:
 44529                                  	;times (cRES_FAT_ENTRIES*4) db 0
 44530                                  	times 128 db 0		; small MD FAT buffer
 44531                                  ;endif
 44532                                  %endif
 44533                                  
 44534                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8DAFh
 44535                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A46Fh
 44536                                  	; 31/07/2024
 44537                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:A0F9h
 44538                                  CHARBUF:
 44539 00009C49 00<rep 50h>             	times	80 db 0		;line byte character buffer for xenix write
 44540                                  DESTFCB2:
 44541 00009C99 00                      IDLEN:	db 0
 44542 00009C9A 00<rep 8h>              ID:	times	8  db 0
 44543 00009CA2 00<rep 3h>              COM:	times	3  db 0 
 44544 00009CA5 00<rep 25h>             DEST:	times	37 db 0
 44545                                  DESTNAME:
 44546 00009CCA 00<rep Bh>              	times	11 db 0
 44547                                  DESTDIR:
 44548                                  DestFcb:
 44549 00009CD5 00<rep 43h>             	times DIRSTRLEN db 0 ; 67 ; Directory for PATH searches
 44550                                  GOTOLEN: ; word
 44551                                  BWDBUF:  ; byte
 44552                                  EXEFCB:  ; word
 44553 00009D18 00<rep 46h>             DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 44554                                  
 44555                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 44556                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 44557                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 44558                                  DIRBUF_FDATE   equ DIRBUF+32  ; word	
 44559                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 44560                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 44561                                  
 44562                                  	; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44563                                  
 44564                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44565                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A584h
 44566                                  SDIRBUF:
 44567 00009D5E 00<rep Ch>              	times 12 db 0	
 44568                                  _Bits:
 44569 00009D6A 0000                    	dw 0
 44570                                  PathCnt:
 44571 00009D6C 0000                    	dw 0
 44572                                  PathPos:
 44573 00009D6E 0000                    	dw 0
 44574 00009D70 0000                    PathSw:	dw 0
 44575                                  AttrSpecified:
 44576 00009D72 00                      	db 0			; attribute bits u.b. DIR
 44577                                  AttrSelect:
 44578 00009D73 00                      	db 0			; attribute bits u.b. DIR
 44579 00009D74 00                      comma:	db 0			; flag set if +,, occurs
 44580                                  plus_comma:
 44581 00009D75 00                      	db 0			; flag set if +,, occurs
 44582                                  DirFlag:
 44583 00009D76 00                       	db 0			;AN015; set when pathcrunch called from DIR
 44584                                  parse_last:
 44585 00009D77 0000                    	dw 0			;AN018; used to hold parsing position
 44586                                  system_cpage:
 44587 00009D79 0000                    	dw 0			;AC001; used for CHCP variable
 44588                                  
 44589                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 44590                                  %if 0
 44591                                  Arg_Buf:
 44592                                  	times 128 db 0	
 44593                                  %endif
 44594                                  
 44595                                  File_Size_Low:
 44596 00009D7B 0000                    	dw 0	
 44597                                  File_Size_High:
 44598 00009D7D 0000                    	dw 0		
 44599                                  string_ptr_2:
 44600 00009D7F 0000                    	dw 0	
 44601                                  Copy_num:
 44602 00009D81 0000                    	dw 0
 44603                                  cpyflag:
 44604 00009D83 00                      	db 0
 44605                                  Dir_Num:
 44606 00009D84 0000                    	dw 0
 44607                                  
 44608                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 44609                                  %if 0
 44610                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44611                                  	; MSDOS 6.0
 44612                                  ;ifdef DBLSPACE_HOOKS
 44613                                  Dir_CRatio_1:
 44614                                  	db 0
 44615                                  Dir_CRatio_2:
 44616                                  	db 0
 44617                                  ;endif
 44618                                  %endif
 44619                                  
 44620                                  Bytes_Free:
 44621 00009D86 00000000                	dd 0
 44622                                  
 44623                                  Major_Ver_Num:
 44624 00009D8A 0000                    	dw 0
 44625                                  Minor_Ver_Num:
 44626 00009D8C 0000                    	dw 0
 44627                                  
 44628                                  One_Char_Val:
 44629 00009D8E 00                      	db 0
 44630 00009D8F 00                      	db 0
 44631                                  vol_drv:
 44632 00009D90 00                      	db 0
 44633                                  ROM_CALL:
 44634 00009D91 00                      	db 0			; flag for rom function
 44635 00009D92 0000                    ROM_IP:	dw 0
 44636 00009D94 0000                    ROM_CS:	dw 0
 44637                                  
 44638                                  DestVars:
 44639                                  DestIsDir:
 44640 00009D96 00                      	db 0
 44641                                  DestSiz:
 44642 00009D97 00                      	db 0
 44643                                  DestTail:
 44644 00009D98 0000                    	dw 0
 44645                                  DestInfo:
 44646 00009D9A 00                      	db 0
 44647                                  DestBuf:
 44648 00009D9B 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 44649                                  EndDestBuf:
 44650                                  DESTHAND:
 44651 00009DF2 0000                    	dw 0
 44652                                  DESTISDEV:
 44653 00009DF4 00                      	db 0
 44654                                  FIRSTDEST:
 44655 00009DF5 00                      	db 0
 44656                                  MELCOPY:
 44657 00009DF6 00                      	db 0
 44658                                  MELSTART:
 44659 00009DF7 0000                    	dw 0
 44660                                  SrcVars:
 44661                                  SrcIsDir:
 44662 00009DF9 00                      	db 0
 44663 00009DFA 00                      SrcSiz:	db 0
 44664                                  SrcTail:
 44665 00009DFB 0000                    	dw 0
 44666                                  SrcInfo:
 44667 00009DFD 00                      	db 0
 44668                                  SrcBuf:
 44669 00009DFE 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 44670                                  SRCHAND:
 44671 00009E55 0000                    	dw 0
 44672                                  SRCISDEV:
 44673 00009E57 00                      	db 0
 44674                                  ScanBuf:
 44675 00009E58 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 44676                                  
 44677 00009EAF 0000                    SRCPT:	dw 0
 44678                                  INEXACT:
 44679 00009EB1 00                      	db 0
 44680                                  NOWRITE:
 44681 00009EB2 00                      	db 0
 44682                                  BINARY:
 44683 00009EB3 00                      	db 0
 44684                                  WRITTEN:
 44685 00009EB4 0000                    	dw 0
 44686                                  TERMREAD:
 44687 00009EB6 00                      	db 0
 44688 00009EB7 00                      ASCII:	db 0
 44689 00009EB8 00                      PLUS:	db 0
 44690 00009EB9 00                      objcnt:	db 0			; Used in copy
 44691 00009EBA 0000                    CPDATE:	dw 0
 44692 00009EBC 0000                    CPTIME:	dw 0
 44693                                  
 44694                                  OFilePtr_Lo:
 44695 00009EBE 0000                    	dw 0			; original file ptr for COPY when
 44696                                  OFilePtr_Hi:
 44697 00009EC0 0000                    	dw 0			; 1st source is also destination
 44698 00009EC2 00                      OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 44699                                  
 44700                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44701                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A76Bh
 44702                                  cox_sublist_buff:
 44703 00009EC3 00<rep Bh>              	times 11 db 0
 44704                                  cox_y_override:
 44705 00009ECE 00                      	db 0
 44706                                  cox_dest_file:
 44707 00009ECF 00                      	db 0
 44708                                  cox_src_file:
 44709 00009ED0 00                      	db 0
 44710                                  
 44711                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0A779h)
 44712                                  BATHAND:
 44713 00009ED1 0000                    	dw 0			; Batch handle
 44714                                  STARTEL:
 44715 00009ED3 0000                    	dw 0
 44716 00009ED5 00                      ELCNT:	db 0
 44717 00009ED6 00                      ELPOS:	db 0
 44718                                  
 44719                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 44720                                  ; MSDOS 5.0
 44721                                  SKPDEL:
 44722                                  	; 18/06/2023
 44723 00009ED7 00                      	db 0	; MSDOS 6.22 (& MSDOS 5.0)  	
 44724 00009ED8 00<rep Bh>              SOURCE:	times 11 db 0
 44725                                  
 44726                                  ext_entered:
 44727 00009EE3 00                      	db 0			;AN005;
 44728                                  
 44729                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:90BCh
 44730                                  
 44731                                  Display_Ioctl:
 44732 00009EE4 00                      	db 0			;AN000; info level
 44733 00009EE5 00                      	db 0			;AN000; reserved
 44734 00009EE6 0E00                    	dw crt_ioctl_ln		;AN000; length of data
 44735 00009EE8 0000                    	dw 0			;AN000; control flags
 44736                                  display_mode:
 44737 00009EEA 00                      	db 0			;AN000; display mode, colors
 44738 00009EEB 00                      	db 0			;AN000; reserved
 44739 00009EEC 0000                    	dw 0			;AN023; colors
 44740 00009EEE 0000                    	dw 0			;AN000; display width (PELS)
 44741 00009EF0 0000                    	dw 0			;AN000; display length (PELS)
 44742                                  display_width:
 44743 00009EF2 0000                    	dw 0			;AN000; display width
 44744                                  LinPerPag:
 44745 00009EF4 1900                    	dw LINESPERPAGE	; 25	;AN000; display length (default to linesperpage)
 44746                                  
 44747                                  vol_ioctl_buf:			;AN000; buffer for ioctl volume label/serial call
 44748 00009EF6 0000                    	dw 0			;AN000; info level
 44749                                  vol_serial:
 44750 00009EF8 00000000                	dd 0			;AN000; volume serial number
 44751                                  vol_label:
 44752 00009EFC 20<rep Bh>              	times 11 db 20h ; " "	;AN000; volume label - init to blanks
 44753 00009F07 20<rep 8h>              	times 8  db 20h ; " "	;AN000; file system type
 44754                                  
 44755                                  expand_star:
 44756 00009F0F 00                      	db 0
 44757                                  
 44758                                  msg_flag:
 44759 00009F10 00                      	db 0			;AN022; flag set if non-utility message issued
 44760                                  Msg_Numb:
 44761 00009F11 0000                    	dw 0			;AN022; set with extended error message issued
 44762                                  append_exec:
 44763 00009F13 00                      	db 0			;AN041; set if internal append executed
 44764                                  print_err_flag:
 44765 00009F14 0000                    	dw 0			;AN000; flag set if error during sysdispmsg
 44766                                  subst_buffer:
 44767 00009F16 00<rep 16h>             	times parm_block_size*2 db 0 ; times 22 db 0 
 44768                                  				;AN061;
 44769                                  ; 15/04/2023
 44770 00009F2C 00                      KPARSE:	db 0	; 3/3/KK	
 44771                                  
 44772                                  ; Data declarations taken out of parse.asm
 44773                                  
 44774                                  ; MSDOS 6.0
 44775                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 44776                                  ;argbufptr	dw	?		; index for argv[].argpointer
 44777                                  ;tpbuf		db	128 DUP (?)	; temporary buffer
 44778                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 44779                                  ;comptr		dw	?		; ptr into combuf
 44780                                  
 44781                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9105h
 44782                                  
 44783                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44784                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A7D5h
 44785                                  ARG:
 44786                                  ARG_ARGV:
 44787                                  ARGV0_ARGPOINTER:
 44788 00009F2D 0000                    	dw 0	; ARGV[0]
 44789                                  ARGV0_ARG_FLAGS:
 44790 00009F2F 00                      	db 0
 44791                                  ARGV0_ARGSTARTEL:
 44792 00009F30 0000                    	dw 0
 44793                                  ARGV0_ARGLEN:
 44794 00009F32 0000                    	dw 0
 44795                                  ARGV0_ARGSW_WORD:
 44796 00009F34 0000                    	dw 0
 44797                                  ARGV0_OCOMPTR:
 44798 00009F36 0000                    	dw 0
 44799                                  ARGV1_ARGPOINTER:
 44800 00009F38 0000                    	dw 0	; ARGV[1]	
 44801 00009F3A 00<rep 5h>              	times 5 db 0
 44802                                  ARGV1_ARGSW_WORD:
 44803 00009F3F 0000                    	dw 0
 44804 00009F41 0000                    	dw 0
 44805                                  ARGV2_ARGPOINTER:
 44806 00009F43 0000                    	dw 0	; ARGV[2]
 44807 00009F45 00<rep 5h>              	times 5 db 0
 44808                                  ARGV2_ARGSW_WORD:
 44809 00009F4A 0000                    	dw 0
 44810 00009F4C 0000                    	dw 0
 44811 00009F4E 00<rep 29Fh>            	times 671 db 0  ; ARGV[3] to ARGV[63]
 44812                                  ARG_ARGVCNT:
 44813 0000A1ED 0000                    	dw 0
 44814                                  ARG_ARGSWINFO:
 44815 0000A1EF 0000                    	dw 0
 44816                                  ARG_ARGBUF:
 44817                                  	;times 256 dw 0	; times ARGBLEN dw 0 
 44818                                  	; 27/07/2024 PCDOS 7.1 COMMAND.COM
 44819 0000A1F1 0000<rep 80h>           	times 128 dw 0	; times ARGBLEN dw 0 
 44820                                  ARG_ARGFORCOMBUF:
 44821 0000A2F1 00<rep 80h>             	times 128 db 0  ; times COMBUFLEN db 0 
 44822                                  
 44823                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9649h
 44824                                  	; 18/06/2023
 44825                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0AD19h
 44826                                  	; 03/08/2024
 44827                                  	; PCDOS 7.1 COMMAND.COM (2003) Transient portion offset 0A823h
 44828                                  ARGBUF_PTR:
 44829 0000A371 0000                    	dw 0			; index for argv[].argpointer
 44830                                  TPBUF:				; temporary buffer
 44831                                  Arg_Buf: ; 03/08/2024 - PCDOS 7.1 COMMAND.COM	
 44832 0000A373 00<rep 80h>             	times 128 db 0
 44833                                  LASTARG:
 44834 0000A3F3 0000                    	dw 0			; point at which to accumulate switch info
 44835 0000A3F5 0000                    COMPTR:	dw 0			; ptr into combuf
 44836                                  
 44837                                  ; Data declarations taken out of path.asm
 44838                                  ;fbuf	find_buf	<>		; dma buffer for findfirst/findnext
 44839                                  ;pathinfo	DW	3 DUP (?)	; ES, SI(old), and SI(new) of user path
 44840                                  ;psep_char	DB	?		; '/' or '\'
 44841                                  ;search_best	DB	(?)		; best code, best filename so far
 44842                                  ;fname_max_len	equ	13
 44843                                  ;search_best_buf DB	fname_max_len DUP (?)
 44844                                  ;search_curdir_buf DB	64 DUP (?)	; a place for CurDir info, if successful
 44845                                  ;search_error	DW	(?)		; address of error message to be printed
 44846                                  
 44847                                  FINDBUFLEN equ FIND_BUF.size ; 43
 44848                                  
 44849                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 96CFh
 44850                                  
 44851                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44852                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AD9Fh
 44853                                  
 44854 0000A3F7 00<rep 2Bh>             FBUF:	times FINDBUFLEN db 0	; times 43 db 0
 44855                                  FBUF_PNAME equ FBUF+30		; packed name, 13 bytes
 44856                                  pathinfo:
 44857                                  ;pathinfo_0:
 44858 0000A422 0000                    	dw 0
 44859                                  ;pathinfo_2:
 44860 0000A424 0000                    	dw 0
 44861                                  ;pathinfo_4:
 44862 0000A426 0000                    	dw 0
 44863                                  psep_char:
 44864 0000A428 00                      	db 0
 44865                                  search_best:
 44866 0000A429 00                      	db 0
 44867                                  FNAME_MAX_LEN equ 13
 44868                                  search_best_buf:
 44869 0000A42A 00<rep Dh>              	times FNAME_MAX_LEN db 0 ; times 13 db 0
 44870                                  search_curdir_buf:
 44871 0000A437 00<rep 40h>             	times 64 db 0
 44872                                  search_error:
 44873 0000A477 0000                    	dw 0
 44874                                  
 44875                                  ; Data declarations taken out of tbatch.asm
 44876                                  
 44877                                  ;if_not_count	DW	?
 44878                                  ;
 44879                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 44880                                  ;
 44881                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 44882                                  
 44883                                  ; 31/03/2023
 44884                                  ;STACK:	;LABEL	WORD
 44885                                  
 44886                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9751h
 44887                                  
 44888                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44889                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AE21h
 44890                                  
 44891                                  IF_NOT_COUNT:
 44892 0000A479 0000                    	dw 0
 44893 0000A47B 00                      zflag:	db 0
 44894                                  
 44895                                  align 2	; 18/06/2023
 44896                                  
 44897 0000A47C 00<rep 100h>            	times 256 db 0 
 44898                                  
 44899                                  	; 16/04/2023
 44900                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:9854h
 44901                                  
 44902                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44903                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AF24h
 44904                                  STACK:
 44905                                  
 44906                                  ;INTERNATVARS	internat_block <>
 44907                                  ;	db	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 44908                                  
 44909                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9854h
 44910                                  INTERNATVARS:
 44911                                  		; (24+8 = 32 bytes)
 44912                                  DATE_TIME_FORMAT:
 44913 0000A57C 0000                    	dw 0			; 0-USA, 1-EUR, 2-JAP
 44914                                  CURRENCY_SYM:
 44915 0000A57E 0000000000              	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 44916                                  THOUS_SEP:
 44917 0000A583 0000                    	db 0,0			; Thousands separator 2 bytes
 44918                                  DECIMAL_SEP:
 44919 0000A585 0000                    	db 0,0			; Decimal separator 2 bytes
 44920                                  DATE_SEP:
 44921 0000A587 0000                    	db 0,0			; Date separator 2 bytes
 44922                                  TIME_SEP:
 44923 0000A589 0000                    	db 0,0			; Time separator 2 bytes	
 44924                                  BIT_FIELD:
 44925 0000A58B 00                      	db 0			; Bit values
 44926                                  				;   Bit 0 = 0 if currency symbol first
 44927                                  				;	  = 1 if currency symbol last
 44928                                  				;   Bit 1 = 0 if No space after currency symbol
 44929                                  				;	  = 1 if space after currency symbol
 44930                                  CURRENCY_CENTS:
 44931 0000A58C 00                      	db 0			; Number of places after currency dec point
 44932                                  TIME_24:
 44933 0000A58D 00                      	db 0			; 1 if 24 hour time, 0 if 12 hour time
 44934                                  MAP_CALL:
 44935 0000A58E 00000000                	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 44936                                  				; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 44937                                  				;  in pieces.
 44938                                  DATA_SEP:
 44939 0000A592 0000                    	db 0,0			; Data list separator character		
 44940                                  
 44941 0000A594 00<rep 8h>              	times 8 db 0
 44942                                  
 44943                                  ; Max size of the block returned by the INTERNATIONAL call
 44944                                  
 44945                                  INTERNAT_BLOCK_SIZE EQU	32
 44946                                  
 44947                                  ;;	Buffer for DOS function 64h (Get extended country information)
 44948                                  ;;	subfunctions 2, 4, 6, or 7:
 44949                                  ;
 44950                                  ;CountryPtrInfo	label	byte
 44951                                  ;CountryPtrId	db	?
 44952                                  ;CountryPtr	dd	?
 44953                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 44954                                  	
 44955                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9874h
 44956                                  CountryPtrInfo:
 44957                                  CountryPtrId:	
 44958 0000A59C 00                      	db 0
 44959                                  CountryPtr:
 44960 0000A59D 00000000                	dd 0
 44961                                  
 44962                                  OldCtrlCHandler:
 44963 0000A5A1 00000000                	dd 0			; previous int 23 vector		
 44964                                  
 44965                                  BATLEN equ 32
 44966                                  
 44967                                  BATBUFPOS:
 44968 0000A5A5 0000                    	dw 0			; integer position in buffer of next byte
 44969                                  
 44970 0000A5A7 00<rep 20h>             BATBUF:	times BATLEN db 0 ; times 32 db 0
 44971                                  BATBUFEND:
 44972 0000A5C7 0000                    	dw 0
 44973                                  
 44974                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 44975                                  %if 0
 44976                                  TypeFilSiz:
 44977                                  	dd 0			; stores size of file to be typed
 44978                                  %endif
 44979                                  
 44980                                  ; *****************************************************
 44981                                  ; EMG 4.00
 44982                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 44983                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 44984                                  ; *****************************************************
 44985                                  ;
 44986                                  ; COMMON PARSE OUTPUT BLOCKS
 44987                                  
 44988                                  ; Common output blocks for PARSE number, complex, or string values.
 44989                                  
 44990                                  PARSE1_OUTPUT:
 44991                                  PARSE1_TYPE:
 44992 0000A5C9 00                      	db 0			;AN000;  type
 44993                                  PARSE1_CODE:
 44994 0000A5CA 00                      	db 0			;AN000;  return value
 44995                                  PARSE1_SYN:
 44996 0000A5CB 0000                    	dw 0			;AN000;  es offset of synonym
 44997                                  PARSE1_ADDR:
 44998 0000A5CD 00000000                	dd 0			;AN000;  numeric value / address
 44999                                  				;	 of string value
 45000                                  
 45001                                  ;  Common output block for PARSE date strings.
 45002                                  
 45003                                  DATE_OUTPUT:
 45004                                  DATE_TYPE:
 45005 0000A5D1 00                      	db 0			;AN000;  type
 45006 0000A5D2 00                      	db 0			;AN000;  return value
 45007 0000A5D3 0000                    	dw 0			;AN000;  es offset of synonym
 45008                                  DATE_YEAR:
 45009 0000A5D5 0000                    	dw 0			;AN000;  year
 45010                                  DATE_MONTH:
 45011 0000A5D7 00                      	db 0			;AN000;  month
 45012                                  DATE_DAY:
 45013 0000A5D8 00                      	db 0			;AN000;  day
 45014                                  
 45015                                  ;  Common output block for PARSE time strings.
 45016                                  
 45017                                  TIME_OUTPUT:
 45018                                  TIME_TYPE:
 45019 0000A5D9 00                      	db 0			;AN000;  type
 45020 0000A5DA 00                      	db 0			;AN000;  return value
 45021 0000A5DB 0000                    	dw 0			;AN000;  es offset of synonym
 45022                                  TIME_HOUR:
 45023 0000A5DD 00                      	db 0			;AN000;  hour
 45024                                  TIME_MINUTES:
 45025 0000A5DE 00                      	db 0			;AN000;  minutes
 45026                                  TIME_SECONDS:
 45027 0000A5DF 00                      	db 0			;AN000;  seconds
 45028                                  TIME_FRACTION:
 45029 0000A5E0 00                      	db 0			;AN000;  hundredths
 45030                                  
 45031                                  ;  Common output block for PARSE drive specifier (one based drive number).
 45032                                  
 45033                                  DRIVE_OUTPUT:
 45034                                  DRIVE_TYPE:
 45035 0000A5E1 00                      	db 0			;AN000;  type
 45036                                  DRIVE_VALUE:
 45037 0000A5E2 00                      	db 0			;AN000;  return value
 45038 0000A5E3 0000                    	dw 0			;AN000;  es offset of synonym
 45039                                  DRIVE_NUMBER:
 45040 0000A5E5 00                      	db 0			;AN000;  drive number
 45041 0000A5E6 000000                  	db 0,0,0		;AN000;  reserved
 45042                                  
 45043                                  	; 18/04/2023
 45044                                  	; 16/04/2023
 45045                                  ;TRANSPACEEND:	; 98C5h
 45046                                  		; End of MSDOS 5.0 COMMAND.COM (1991) Transient portion
 45047                                  
 45048                                  	; 18/06/2023
 45049                                  ;TRANSPACEEND:	; 0AF95h 
 45050                                  		; End of MSDOS 6.22 COMMAND.COM (1994) Transient portion
 45051                                  
 45052                                  ; ----------------------------------------------------------------------------
 45053                                  ; 18/06/2023
 45054                                  ; 20/04/2023
 45055                                  TRANSPACEEND equ ($-TRANSIENTSTART)	; Transient portion size
