     1                                  ; ****************************************************************************
     2                                  ; COMMAND.COM (MSDOS 6.22 Command Interpreter) - RETRO DOS v4.2 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update:  31/07/2024 (v6.22 - 2024 optimization)
     5                                  ;		19/06/2023 (v6.22) ((Previous: 05/05/2023 COMMAND.COM v5.0))
     6                                  ; ----------------------------------------------------------------------------
     7                                  ; Beginning: 21/04/2018 (COMMAND.COM v2.11) - 11/09/2018 (COMMAND.COM v3.30)
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15 (2.11)
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	    ((nasm command6.s -l command6.lst -o COMMAND.COM)) 	
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Derived from 'COMMAND.ASM' file of MSDOS 2.11 (IBM PCDOS v2.11) source code
    14                                  ; by Microsoft, 18/08/1983
    15                                  ; ****************************************************************************
    16                                  ; Modified from 'COMMAND5.S' (MSDOS 5.0 COMMAND.COM) source code
    17                                  ; in NASM syntax (by Erdogan Tan), 05/05/2023
    18                                  ; ----------------------------------------------------------------------------
    19                                  ; Modified from 'COMMAND3.S' (MSDOS 3.3 COMMAND.COM) source code
    20                                  ; in NASM syntax (by Erdogan Tan), 20/10/2018
    21                                  ; ----------------------------------------------------------------------------
    22                                  ;; 11/09/2018 - Erdogan Tan
    23                                  ; (Note: I haven't got MSDOS 3.3 COMMAND.COM src files; so, I need to continue
    24                                  ; by using disassembled COMMAND.COM -v3.30- and MSDOS 6.0 OS source files.)
    25                                  ; ----------------------------------------------------------------------------
    26                                  ; MSDOS 6.0 source files:
    27                                  ;;============================================================================
    28                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    29                                  ; (MSDOS 3.30 COMMAND.COM) output in TASM syntax (11/09/2018..29/09/2018)
    30                                  ;;============================================================================
    31                                  ;
    32                                  ; COMMAND.COM v6.0 source files:
    33                                  ;      command1.asm, command2.asm, rucode.asm, stub.asm, rdata.asm, init.asm,
    34                                  ;      iparse.asm, uinit.asm, tcode.asm, tbatch.asm, tbatch2.asm, tfor.asm,
    35                                  ;      dir.asm, cratio.asm, tcmd1b.asm, tcmd2a.asm, tcmd2b.asm, tenv.asm,
    36                                  ;      tenv2.asm, tmisc1.asm, tmisc2.asm, tpipe.asm, parse2.asm, path1.asm,
    37                                  ;      path2.asm, tucode.asm, copy.asm, copypr1.asm, copypr2.asm, cparse.asm,
    38                                  ;      tparse.asm, tprintf.asm, loadhi.asm, tdata.asm, tspc.asm
    39                                  ;
    40                                  ; COMMAND.COM v2.11 source files:
    41                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    42                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    43                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    44                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    45                                  ;
    46                                  ; ----------------------------------------------------------------------------
    47                                  ; 09/01/2023 - COMMAND.COM v5.0 (Multi Section Binary File Format)
    48                                  
    49                                  ;============================================================================
    50                                  ; MSDOS 6.22 COMMAND.COM, DISASSEMBLED by Erdogan Tan, 17/05/2023-05/06/2023
    51                                  ;============================================================================
    52                                  
    53                                  ; -=========================================================================¬
    54                                  ; ¦     This file is generated by The Interactive Disassembler (IDA)        ¦
    55                                  ; ¦     Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>           ¦
    56                                  ; ¦                      Licensed to: Freeware version                      ¦
    57                                  ; L=========================================================================-
    58                                  ;
    59                                  ; Input MD5   : FAF051453F215165981F10BD73071D88
    60                                  ;
    61                                  ; File Name   : C:\Users\Erdo­an\Desktop\COMMAND.COM
    62                                  ; Format      : MS-DOS COM-file
    63                                  ; Base Address: 0h Range: 100h-D675h Loaded length: D575h
    64                                  
    65                                  ;============================================================================
    66                                  ; SYSCALL.INC, MSDOS 6.0, 1991
    67                                  ;============================================================================
    68                                  ; 21/09/2018 - Retro DOS v3.0
    69                                  
    70                                  ;	SCCSID = @(#)syscall.asm	1.1 85/04/10
    71                                  ;BREAK <system call definitions>
    72                                  
    73                                  ;
    74                                  ;	Microsoft Confidential
    75                                  ;	Copyright (C) Microsoft Corporation 1991
    76                                  ;	All Rights Reserved.
    77                                  ;
    78                                  
    79                                  ;SUBTTL	system call definitions
    80                                  ;PAGE
    81                                  
    82                                  Abort				EQU 0	;  0	  0
    83                                  STD_CON_INPUT			EQU 1	;  1	  1
    84                                  Std_Con_Output			EQU 2	;  2	  2
    85                                  Std_Aux_Input			EQU 3	;  3	  3
    86                                  Std_Aux_Output			EQU 4	;  4	  4
    87                                  Std_Printer_Output		EQU 5	;  5	  5
    88                                  Raw_Con_IO			EQU 6	;  6	  6
    89                                  RAW_CON_INPUT			EQU 7	;  7	  7
    90                                  Std_Con_Input_No_Echo		EQU 8	;  8	  8
    91                                  STD_CON_STRING_OUTPUT		EQU 9	;  9	  9
    92                                  Std_Con_String_Input		EQU 10	; 10	  A
    93                                  Std_Con_Input_Status		EQU 11	; 11	  B
    94                                  STD_CON_INPUT_FLUSH		EQU 12	; 12	  C
    95                                  DISK_RESET			EQU 13	; 13	  D
    96                                  Set_Default_Drive		EQU 14	; 14	  E
    97                                  FCB_Open			EQU 15	; 15	  F
    98                                  FCB_Close			EQU 16	; 16	 10
    99                                  Dir_Search_First		EQU 17	; 17	 11
   100                                  Dir_Search_Next 		EQU 18	; 18	 12
   101                                  FCB_Delete			EQU 19	; 19	 13
   102                                  FCB_Seq_Read			EQU 20	; 20	 14
   103                                  FCB_Seq_Write			EQU 21	; 21	 15
   104                                  FCB_Create			EQU 22	; 22	 16
   105                                  FCB_Rename			EQU 23	; 23	 17
   106                                  GET_DEFAULT_DRIVE		EQU 25	; 25	 19
   107                                  Set_DMA 			EQU 26	; 26	 1A
   108                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   109                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   110                                  ;									   ;
   111                                  Get_Default_DPB 		EQU 31	; 31	 1F
   112                                  ;									   ;
   113                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   114                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   115                                  FCB_Random_Read 		EQU 33	; 33	 21
   116                                  FCB_Random_Write		EQU 34	; 34	 22
   117                                  Get_FCB_File_Length		EQU 35	; 35	 23
   118                                  Get_FCB_Position		EQU 36	; 36	 24
   119                                  SET_INTERRUPT_VECTOR		EQU 37	; 37	 25
   120                                  Create_Process_Data_Block	EQU 38	; 38	 26
   121                                  FCB_Random_Read_Block		EQU 39	; 39	 27
   122                                  FCB_Random_Write_Block		EQU 40	; 40	 28
   123                                  Parse_File_Descriptor		EQU 41	; 41	 29
   124                                  Get_Date			EQU 42	; 42	 2A
   125                                  Set_Date			EQU 43	; 43	 2B
   126                                  Get_Time			EQU 44	; 44	 2C
   127                                  Set_Time			EQU 45	; 45	 2D
   128                                  SET_VERIFY_ON_WRITE		EQU 46	; 46	 2E
   129                                  ; Extended functionality group
   130                                  Get_DMA 			EQU 47	; 47	 2F
   131                                  GET_VERSION			EQU 48	; 48	 30
   132                                  Keep_Process			EQU 49	; 49	 31
   133                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   134                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   135                                  ;									   ;
   136                                  Get_DPB 			EQU 50	; 50	 32
   137                                  ;									   ;
   138                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   139                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   140                                  Set_CTRL_C_Trapping		EQU 51	; 51	 33
   141                                  Get_InDOS_Flag			EQU 52	; 52	 34
   142                                  Get_Interrupt_Vector		EQU 53	; 53	 35
   143                                  Get_Drive_Freespace		EQU 54	; 54	 36
   144                                  CHAR_OPER			EQU 55	; 55	 37
   145                                  International			EQU 56	; 56	 38
   146                                  ;   Directory Group
   147                                  MKDir				EQU 57	; 57	 39
   148                                  RMDir				EQU 58	; 58	 3A
   149                                  CHDir				EQU 59	; 59	 3B
   150                                  ;   File Group
   151                                  Creat				EQU 60	; 60	 3C
   152                                  OPEN				EQU 61	; 61	 3D
   153                                  CLOSE				EQU 62	; 62	 3E
   154                                  READ				EQU 63	; 63	 3F
   155                                  Write				EQU 64	; 64	 40
   156                                  Unlink				EQU 65	; 65	 41
   157                                  LSEEK				EQU 66	; 66	 42
   158                                  CHMod				EQU 67	; 67	 43
   159                                  IOCTL				EQU 68	; 68	 44
   160                                  XDUP				EQU 69	; 69	 45
   161                                  XDup2				EQU 70	; 70	 46
   162                                  Current_Dir			EQU 71	; 71	 47
   163                                  ;    Memory Group
   164                                  ALLOC				EQU 72	; 72	 48
   165                                  DEALLOC				EQU 73	; 73	 49
   166                                  SETBLOCK			EQU 74	; 74	 4A
   167                                  ;    Process Group
   168                                  Exec				EQU 75	; 75	 4B
   169                                  EXIT				EQU 76	; 76	 4C
   170                                  WAITPROCESS			EQU 77	; 77	 4D
   171                                  Find_First			EQU 78	; 78	 4E
   172                                  ;   Special Group
   173                                  Find_Next			EQU 79	; 79	 4F
   174                                  ; SPECIAL SYSTEM GROUP
   175                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   176                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   177                                  ;									   ;
   178                                  SET_CURRENT_PDB 		EQU 80	; 80	 50
   179                                  GET_CURRENT_PDB 		EQU 81	; 81	 51
   180                                  Get_In_Vars			EQU 82	; 82	 52
   181                                  SetDPB				EQU 83	; 83	 53
   182                                  ;									   ;
   183                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   184                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   185                                  Get_Verify_On_Write		EQU 84	; 84	 54
   186                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   187                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   188                                  ;									   ;
   189                                  Dup_PDB 			EQU 85	; 85	 55
   190                                  ;									   ;
   191                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   192                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   193                                  Rename				EQU 86	; 86	 56
   194                                  File_Times			EQU 87	; 87	 57
   195                                  AllocOper			EQU 88	; 88	 58
   196                                  ; Network extention system calls
   197                                  GetExtendedError		EQU 89	; 89	 59
   198                                  CreateTempFile			EQU 90	; 90	 5A
   199                                  CreateNewFile			EQU 91	; 91	 5B
   200                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
   201                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   202                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   203                                  ;									   ;
   204                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
   205                                  					;	    CloseByName, CloseUser,
   206                                  					;	    CloseUserProcess,
   207                                  					;	    GetOpenFileList
   208                                  ;									   ;
   209                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   210                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   211                                  UserOper			EQU 94	; 94	 5E Get and Set
   212                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
   213                                  xNameTrans			EQU 96	; 96	 60
   214                                  PathParse			EQU 97	; 97	 61
   215                                  GetCurrentPSP			EQU 98	; 98	 62
   216                                  Hongeul 			EQU 99	; 99	 63
   217                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
   218                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   219                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   220                                  ;									   ;
   221                                  Set_Printer_Flag		EQU 100 ; 100	 64
   222                                  ;									   ;
   223                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   224                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   225                                  GetExtCntry			EQU 101 ; 101	 65
   226                                  GetSetCdPg			EQU 102 ; 102	 66
   227                                  ExtHandle			EQU 103 ; 103	 67
   228                                  Commit				EQU 104 ; 104	 68
   229                                  GetSetMediaID			EQU 105 ; 105	 69
   230                                  IFS_IOCTL			EQU 107 ; 107	 6B
   231                                  ExtOpen 			EQU 108 ; 108	 6C
   232                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   233                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   234                                  ;                                                                          ;
   235                                  ;ifdef ROMEXEC
   236                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
   237                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
   238                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
   239                                  ;endif
   240                                  ;                                                                          ;
   241                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   242                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   243                                  ;
   244                                  ;
   245                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
   246                                  OEM_C1				EQU 249 ; 249	 F9
   247                                  OEM_C2				EQU 250 ; 250	 FA
   248                                  OEM_C3				EQU 251 ; 251	 FB
   249                                  OEM_C4				EQU 252 ; 252	 FC
   250                                  OEM_C5				EQU 253 ; 253	 FD
   251                                  OEM_C6				EQU 254 ; 254	 FE
   252                                  OEM_C7				EQU 255 ; 255	 FF
   253                                  
   254                                  ;============================================================================
   255                                  ; DOSSYM.INC, MSDOS 6.0, 1991
   256                                  ;============================================================================
   257                                  ; 21/09/2018 - Retro DOS v3.0
   258                                  
   259                                  ;BREAK <Control character definitions>
   260                                  
   261                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   262                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   263                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   264                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   265                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   266                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   267                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   268                                  c_HT	    EQU     09h 	; ^I ASCII tab
   269                                  
   270                                  ;============================================================================
   271                                  ; DIRENT.INC, MSDOS 6.0, 1991
   272                                  ;============================================================================
   273                                  ; 21/09/2018 - Retro DOS v3.0
   274                                  
   275                                  ;Break <Directory entry>
   276                                  
   277                                  ;	NOTE:  These offsets are also used in the DTA for
   278                                  ;	extended FCB SearchFirst/Next. DIR_NAME lines up
   279                                  ;	with the FCB filename field, and the rest of the
   280                                  ;	DIR_ENTRY fields follow. -DavidOls
   281                                  
   282                                  ;**	DIRENT.INC - FAT Directory Entry Definition
   283                                  ;
   284                                  ;	+---------------------------+
   285                                  ;	|  (12 BYTE) filename/ext   |	    0	    0
   286                                  ;	+---------------------------+
   287                                  ;	|     (BYTE) attributes     |	    11	    B
   288                                  ;	+---------------------------+
   289                                  ;	|    (10 BYTE) reserved     |	    12	    C
   290                                  ;	+---------------------------+
   291                                  ;	| (WORD) time of last write |	    22	    16
   292                                  ;	+---------------------------+
   293                                  ;	| (WORD) date of last write |	    24	    18
   294                                  ;	+---------------------------+
   295                                  ;	|   (WORD) First cluster    |	    26	    1A
   296                                  ;	+---------------------------+
   297                                  ;	|     (DWORD) file size     |	    28	    1C
   298                                  ;	+---------------------------+
   299                                  ;
   300                                  ;   First byte of filename  = E5 -> free directory entry
   301                                  ;			    = 00 -> end of allocated directory
   302                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   303                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   304                                  ;
   305                                  
   306                                  STRUC DIR_ENTRY
   307 00000000 <res Bh>                .DIR_NAME:	RESB  11	; file name
   308 0000000B ??                      .DIR_ATTR:	RESB  1		; attribute bits
   309 0000000C ????                    .DIR_CODEPG:	RESW  1		; code page DOS 4.00
   310 0000000E ????                    .DIR_EXTCLUSTER: RESW 1		; extended attribute starting cluster
   311 00000010 ??                      .DIR_ATTR2:	RESB  1		; reserved
   312 00000011 ??????????              .DIR_PAD:	RESB  5		; reserved for expansion
   313 00000016 ????                    .DIR_TIME:	RESW  1		; time of last write
   314 00000018 ????                    .DIR_DATE:	RESW  1		; date of last write
   315 0000001A ????                    .DIR_FIRST:	RESW  1		; first allocation unit of file
   316 0000001C ????                    .DIR_SIZE_L:	RESW  1		; low 16 bits of file size
   317 0000001E ????                    .DIR_SIZE_H:	RESW  1		; high 16 bits of file size
   318                                  .size:
   319                                  
   320                                  ;	    Caution: An extended FCB SearchFirst/Next on a network
   321                                  ;	    drive under Novell Netware 286 or 386 returns the time/date
   322                                  ;	    in the SIZE fields for subdirectory files. Ordinarily,
   323                                  ;	    this field is zero for subdirectory files.
   324                                  
   325                                  ENDSTRUC
   326                                  
   327                                  ATTR_READ_ONLY	equ	 1h
   328                                  ATTR_HIDDEN	equ	 2h
   329                                  ATTR_SYSTEM	equ	 4h
   330                                  ATTR_VOLUME_ID	equ	 8h
   331                                  ATTR_DIRECTORY	equ	10h
   332                                  ATTR_ARCHIVE	equ	20h
   333                                  ATTR_DEVICE	equ	40h	; This is a VERY special bit.
   334                                  				;   NO directory entry on a disk EVER
   335                                  				;   has this bit set. It is set non-zero
   336                                  				;   when a device is found by GETPATH
   337                                  
   338                                  ATTR_ALL	equ	ATTR_HIDDEN+ATTR_SYSTEM+ATTR_DIRECTORY
   339                                  				; OR of hard attributes for FINDENTRY
   340                                  
   341                                  ATTR_IGNORE	equ	ATTR_READ_ONLY+ATTR_ARCHIVE+ATTR_DEVICE
   342                                  				; ignore this(ese) attribute(s) during
   343                                  				; search first/next
   344                                  
   345                                  ATTR_CHANGEABLE equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_SYSTEM+ATTR_ARCHIVE
   346                                  				; changeable via CHMOD
   347                                  
   348                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   349                                  
   350                                  ;============================================================================
   351                                  ; ERROR.INC, MSDOS 6.0, 1991
   352                                  ;============================================================================
   353                                  ; 21/09/2018 - Retro DOS v3.0
   354                                  
   355                                  ;**	ERROR.INC - DOS Error Codes
   356                                  ;
   357                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
   358                                  ;    return error codes through AX.	If an error occurred then
   359                                  ;    the carry bit will be set and the error code is in AX.	If no error
   360                                  ;    occurred then the carry bit is reset and AX contains returned info.
   361                                  ;
   362                                  ;    Since the set of error codes is being extended as we extend the operating
   363                                  ;    system, we have provided a means for applications to ask the system for a
   364                                  ;    recommended course of action when they receive an error.
   365                                  ;
   366                                  ;    The GetExtendedError system call returns a universal error, an error
   367                                  ;    location and a recommended course of action.	The universal error code is
   368                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
   369                                  ;    is issued.
   370                                  
   371                                  
   372                                  ;	2.0 error codes
   373                                  
   374                                  error_invalid_function		EQU	1
   375                                  ERROR_FILE_NOT_FOUND		EQU	2
   376                                  ERROR_PATH_NOT_FOUND		EQU	3
   377                                  ERROR_TOO_MANY_OPEN_FILES	EQU	4
   378                                  ERROR_ACCESS_DENIED		EQU	5
   379                                  error_invalid_handle		EQU	6
   380                                  error_arena_trashed		EQU	7
   381                                  ERROR_NOT_ENOUGH_MEMORY 	EQU	8
   382                                  error_invalid_block		EQU	9
   383                                  error_bad_environment		EQU	10
   384                                  ERROR_BAD_FORMAT		EQU	11
   385                                  error_invalid_access		EQU	12
   386                                  ERROR_INVALID_DATA		EQU	13
   387                                  ;**** reserved			EQU	14	; *****
   388                                  error_invalid_drive		EQU	15
   389                                  error_current_directory 	EQU	16
   390                                  error_not_same_device		EQU	17
   391                                  ERROR_NO_MORE_FILES		EQU	18
   392                                  
   393                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
   394                                  
   395                                  ERROR_WRITE_PROTECT		EQU	19
   396                                  error_bad_unit			EQU	20
   397                                  error_not_ready 		EQU	21
   398                                  error_bad_command		EQU	22
   399                                  error_CRC			EQU	23
   400                                  error_bad_length		EQU	24
   401                                  error_Seek			EQU	25
   402                                  error_not_DOS_disk		EQU	26
   403                                  error_sector_not_found		EQU	27
   404                                  error_out_of_paper		EQU	28
   405                                  error_write_fault		EQU	29
   406                                  error_read_fault		EQU	30
   407                                  ERROR_GEN_FAILURE		EQU	31
   408                                  
   409                                  ;	the new 3.0 error codes reported through INT 24
   410                                  
   411                                  error_sharing_violation 	EQU	32
   412                                  error_lock_violation		EQU	33
   413                                  error_wrong_disk		EQU	34
   414                                  ERROR_FCB_UNAVAILABLE		EQU	35
   415                                  ERROR_SHARING_BUFFER_EXCEEDED	EQU	36
   416                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00	;AN000;
   417                                  error_handle_EOF		EQU	38    ; DOS 4.00	;AN000;
   418                                  ERROR_HANDLE_DISK_FULL		EQU	39    ; DOS 4.00	;AN000;
   419                                  
   420                                  ;	New OEM network-related errors are 50-79
   421                                  
   422                                  error_not_supported		EQU	50
   423                                  
   424                                  error_net_access_denied		EQU	65	;M028
   425                                  
   426                                  ;	End of INT 24 reportable errors
   427                                  
   428                                  error_file_exists		EQU	80
   429                                  error_DUP_FCB			EQU	81	; *****
   430                                  error_cannot_make		EQU	82
   431                                  error_FAIL_I24			EQU	83
   432                                  
   433                                  ;	New 3.0 network related error codes
   434                                  
   435                                  error_out_of_structures 	EQU	84
   436                                  error_Already_assigned		EQU	85
   437                                  error_invalid_password		EQU	86
   438                                  error_invalid_parameter 	EQU	87
   439                                  error_NET_write_fault		EQU	88
   440                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00	;AN000;
   441                                  
   442                                  ;============================================================================
   443                                  ; DEVSYM.INC, MSDOS 6.0, 1991
   444                                  ;============================================================================
   445                                  ; 22/09/2018 - Retro DOS v3.0
   446                                  
   447                                  ;**	DevSym.inc - Device Symbols
   448                                  
   449                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   450                                  
   451                                  STRUC SYSDEV
   452 00000000 ????????                .NEXT:	RESD 1			;POINTER TO NEXT DEVICE HEADER
   453 00000004 ????                    .ATT:	RESW 1			;ATTRIBUTES OF THE DEVICE
   454 00000006 ????                    .STRAT:	RESW 1			;STRATEGY ENTRY POINT
   455 00000008 ????                    .INT:	RESW 1			;INTERRUPT ENTRY POINT
   456 0000000A ????????????????        .NAME:	RESB 8			;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   457                                  .size:
   458                                  ENDSTRUC
   459                                  
   460                                  ; 24/09/2018
   461                                  DEVTYP	EQU   8000H	; BIT 15 - 1  IF CHAR, 0 IF BLOCK
   462                                  
   463                                  ;============================================================================
   464                                  ; CURDIR.INC, MSDOS 6.0, 1991
   465                                  ;============================================================================
   466                                  ; 21/09/2018 - Retro DOS v3.0
   467                                  
   468                                  DIRSTRLEN	EQU	64+3	; Max length in bytes of directory strings
   469                                  
   470                                  ;============================================================================
   471                                  ; COMEQU.ASM, MSDOS 6.0, 1991
   472                                  ;============================================================================
   473                                  ; 21/09/2018 - Retro DOS v3.0
   474                                  
   475                                  ;/*
   476                                  ; *                      Microsoft Confidential
   477                                  ; *                      Copyright (C) Microsoft Corporation 1991
   478                                  ; *                      All Rights Reserved.
   479                                  ; */
   480                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   481                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   482                                  ;*************************************
   483                                  ; COMMAND EQUs which are not switch dependant
   484                                  
   485                                  ;		include	curdir.inc	; to get DIRSTRLEN
   486                                  ;		Note dossym.inc must already have been included!
   487                                  
   488                                  GET_COMMAND_STATE	equ	5500h	; check for existing COMMAND
   489                                  GET_ROMCOMMAND_STATE	equ	5501h	; check for existing ROM COMMAND
   490                                  
   491                                  SYM		EQU	">"
   492                                  
   493                                  LINESPERPAGE	EQU	25		;AC000; default lines per page
   494                                  
   495                                  NORMPERLIN	EQU	1
   496                                  WIDEPERLIN	EQU	5
   497                                  COMBUFLEN	EQU	128		; Length of commmand buffer
   498                                  BatLen		EQU	32		; buffer for batch files
   499                                  YES_ECHO	EQU	1		; echo line
   500                                  NO_ECHO 	EQU	0		; don't echo line
   501                                  No_Echo_Char	EQU	"@"             ; don't echo line if this is first char
   502                                  call_in_progress EQU	1		; indicate we're in the CALL command
   503                                  length_call	EQU	4		; length of CALL
   504                                  max_nest	EQU    10		; max # levels of batch nesting allowed
   505                                  FAIL_ALLOWED	EQU    00001000b	; critical error
   506                                  RETRY_ALLOWED	EQU    00010000b	; critical error
   507                                  IGNORE_ALLOWED	EQU    00100000b	; critical error
   508                                  nullcommand	EQU     1		; no command on command line
   509                                  END_OF_LINE	EQU    -1		;AN000; end of line return from parser
   510                                  END_OF_LINE_OUT EQU	0		;AN000; end of line for output
   511                                  END_OF_LINE_IN	EQU	0Dh		;AN000; end of line for input
   512                                  result_number	EQU	1		;AN000; number returned from parser
   513                                  result_string	EQU	3		;AN000; string returned from parser
   514                                  RESULT_FILESPEC EQU	5		;AN000; filespec returned from parser
   515                                  result_drive	EQU	6		;AN000; drive returned from parser
   516                                  result_date	EQU	7		;AN000; date returned from parser
   517                                  result_time	EQU	8		;AN000; time returned from parser
   518                                  RESULT_NO_ERROR EQU	0		;AN000; no error returned from parser
   519                                  no_cont_flag	EQU	0		;AN000; no control flags for message
   520                                  util_msg_class	EQU	-1		;AN000; message class for utility
   521                                  ext_msg_class	EQU	1		;AN000; message class for extended error
   522                                  parse_msg_class EQU	2		;AN000; message class for parse error
   523                                  crit_msg_class	EQU	3		;AN000; message class for critical error
   524                                  ext_crlf_class	EQU	081h		;AN054; message class for extended error with no CRLF
   525                                  colon_char	EQU	":"             ;AN000; colon character
   526                                  crt_ioctl_ln	EQU	14		;AN000; default length of data for display ioctl
   527                                  text_mode	EQU	1		;AN000; text mode return from ioctl
   528                                  get_generic	EQU	07Fh		;AN000; generic ioctl - get device info
   529                                  set_crit_dev	EQU	0100H		;AN000; device attribute for critical error on I/0
   530                                  mult_ansi	EQU	01Ah		;AC064; multiplex for ansi.sys
   531                                  mult_shell_get	EQU	01902h		;AC065; multiplex for Shell - get next command
   532                                  mult_shell_brk	EQU	01903h		;AN000; multiplex for Shell - ^C batch check
   533                                  shell_action	equ	0FFh		;AN000; SHELL - return for taking SHELL specific action
   534                                  bat_not_open	EQU	-1		;AN000; batch handle will be set to this if not open
   535                                  bat_open_handle EQU	19		;AN000; handle will be in this position in JFN table
   536                                  Ptr_seg_pos	equ	7		;AN000; Offset from start of message block for subst segment
   537                                  Ptr_off_pos	equ	5		;AN000; Offset from start of message block for subst offset
   538                                  %define Parm_off_pos	word [2]	;AN000; Offset from start of subst list for subst offset
   539                                  parm_block_size equ	11		;AN000; size of message subst block
   540                                  blank		equ	" "             ;AN000; blank character
   541                                  no_subst	equ	0		;AN000; no substitutions for messages
   542                                  one_subst	equ	1		;AN000; one substitution for messages
   543                                  no_handle_out	equ	-1		;AN000; use function 1 thru 12 for message retriever
   544                                  res_subst	equ	2		;AN000; offset from start of message definition to number of subst
   545                                  read_open_mode	equ   0000000000000000b ;AN024; extended open mode for read
   546                                  deny_write	equ   0000000000100000b	; deny write sharing mode ;M031
   547                                  deny_none	equ   0000000001000000b	; deny none sharing mode ;Myyy	
   548                                  read_open_flag	equ   0000000100000001b ;AN000; extended open flags for read
   549                                  write_open_mode equ   0000000000000001b ;AN024; extended open mode for read
   550                                  write_open_flag equ   0000000100000001b ;AN000; extended open flags for read
   551                                  creat_open_flag equ   0000000100010010b ;AN000; extended open flags for read
   552                                  capital_A	equ	'A'             ;AC000;
   553                                  vbar		equ	'|'             ;AC000;
   554                                  labracket	equ	'<'             ;AC000;
   555                                  rabracket	equ	'>'             ;AC000;
   556                                  dollar		equ	'$'             ;AC000;
   557                                  lparen		equ	'('             ;AC000;
   558                                  rparen		equ	')'             ;AC000;
   559                                  nullrparen	equ	29h		;AC000;
   560                                  in_word 	equ	4E49h		;AC000; 'NI'  ('IN' backwards)
   561                                  do_word 	equ	4F44h		;AC000; 'OD'  ('DO' backwards)
   562                                  star		equ	'*'             ;AC000;
   563                                  plus_chr	equ	'+'             ;AC000;
   564                                  small_a 	equ	'a'             ;AC000;
   565                                  small_z 	equ	'z'             ;AC000;
   566                                  dot_chr 	equ	'.'             ;AC000;
   567                                  tab_chr 	equ	9		;AN032;
   568                                  equal_chr	equ	'='             ;AN032;
   569                                  semicolon	equ	';'             ;AN049;
   570                                  dot_qmark	equ	2e3fh		;AC000; '.?'
   571                                  dot_colon	equ	2e3ah		;AC000; '.:'
   572                                  capital_n	equ	0		;AC000; result from Y/N call if N entered
   573                                  capital_y	equ	1		;AC000; result from Y/N call if Y entered
   574                                  AppendInstall	equ	0B700H		;AN020; append install check
   575                                  AppendDOS	equ	0B702H		;AN020; append DOS version check
   576                                  AppendGetState	equ	0B706H		;AN020; append get current state
   577                                  AppendSetState	equ	0B707H		;AN020; append set current state
   578                                  AppendTruename	equ	0B711H		;AN042; Get file's real location for Batch
   579                                  search_attr	equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_DIRECTORY  ;AC042;
   580                                  
   581                                  ;*************************************
   582                                  ;* PARSE ERROR MESSAGES
   583                                  ;*************************************
   584                                  
   585                                  MoreArgs_Ptr	equ	1		;AN000;"Too many parameters" message number
   586                                  LessArgs_Ptr	equ	2		;AN000;"Required parameter missing" message number
   587                                  BadSwt_Ptr	equ	3		;AN000;"Invalid switch" message number
   588                                  BadParm_Ptr	equ	10		;AN000;"Invalid parameter" message number
   589                                  
   590                                  ;*************************************
   591                                  ;* EQUATES FOR MESSAGE RETRIEVER
   592                                  ;*************************************
   593                                  
   594                                  GET_EXTENDED_MSG	EQU	0	;AN000;  get extended message address
   595                                  SET_EXTENDED_MSG	EQU	1	;AN000;  set extended message address
   596                                  GET_PARSE_MSG		EQU	2	;AN000;  get parse message address
   597                                  SET_PARSE_MSG		EQU	3	;AN000;  set parse message address
   598                                  GET_CRITICAL_MSG	EQU	4	;AN000;  get critical message address
   599                                  SET_CRITICAL_MSG	EQU	5	;AN000;  set critical message address
   600                                  MESSAGE_2F		EQU	46	;AN000;  minor code for message retriever
   601                                  
   602                                  ;*********************************
   603                                  ;* EQUATES FOR INT 10H
   604                                  ;*********************************
   605                                  
   606                                  VIDEO_IO_INT		EQU	10H	;AN000;  equate for int 10h
   607                                  SET_VIDEO_MODE		EQU	0	;AN000;  set video mode
   608                                  SET_CURSOR_POSITION	EQU	2	;AN000;  set new cursor position
   609                                  SCROLL_VIDEO_PAGE	EQU	6	;AN000;  scroll active page up
   610                                  VIDEO_ATTRIBUTE 	EQU	7	;AN000;  attribute to be used on blank line
   611                                  SET_COLOR_PALETTE	EQU	11	;AN000;  set color for video
   612                                  GET_VIDEO_STATE 	EQU	15	;AN000;  get current video state
   613                                  VIDEO_ALPHA		EQU	3	;AN000;  alpha video is 3 or below
   614                                  VIDEO_BW		EQU	7	;AN000;  mode for 80X25 black & white
   615                                  
   616                                  AltPipeChr	equ	"|"             ; alternate pipe character
   617                                  
   618                                  FCB		equ	5Ch
   619                                  
   620                                  STRUC VARSTRUC
   621 00000000 ??                      .ISDIR:		RESB	1
   622 00000001 ??                      .SIZ:		RESB	1
   623 00000002 ????                    .TTAIL:		RESW	1
   624 00000004 ??                      .INFO:		RESB	1
   625 00000005 <res 57h>               .BUF:		RESB	DIRSTRLEN + 20
   626                                  .size:
   627                                  ENDSTRUC
   628                                  ;
   629                                  ; Flags for internal command parsing
   630                                  ;
   631                                  fCheckDrive	equ	00000001b	; validate drive letter
   632                                  fSwitchAllowed	equ	00000010b	; switches allowed
   633                                  fLimitHelp	equ	00000100b	; /? must appear alone
   634                                  
   635                                  ;
   636                                  ; Test switches
   637                                  ;
   638                                  fParse		EQU	0001h		; display results of parseline
   639                                  
   640                                  ;
   641                                  ; Batch segment structure
   642                                  ;
   643                                  ;   BYTE    type of segment
   644                                  ;   BYTE    echo state of parent on entry to batch file
   645                                  ;   WORD    segment of last batch file
   646                                  ;   WORD    segment for FOR command
   647                                  ;   BYTE    FOR flag state on entry to batch file
   648                                  ;   DWORD   offset for next line
   649                                  ;   10 WORD pointers to parameters. -1 is empty parameter
   650                                  ;   ASCIZ   file name (with . and ..)
   651                                  ;   BYTES   CR-terminated parameters
   652                                  ;   BYTE    0 flag to indicate end of parameters
   653                                  ;
   654                                  
   655                                  BATCHTYPE   equ 0
   656                                  
   657                                  STRUC BATCHSEGMENT
   658 00000000 ??                      .BatType:	RESB	1		; signature
   659 00000001 ??                      .BatEchoFlag:	RESB	1		; G state of echo
   660                                  ; MSDOS 5.0 (& 6.0) - 11/01/2023
   661 00000002 ??                      .BatchEOF:	RESB	1		; records if EOF reached on file
   662 00000003 ????                    .BatLast: 	RESW	1		; G segment of last batch file
   663 00000005 ????                    .BatForPtr:	RESW	1		; G segment for FOR command
   664 00000007 ??                      .BatForFlag:	RESB	1		; G state of FOR
   665 00000008 ????????                .BatSeek:	RESD	1		; lseek position of next char
   666 0000000C <res 14h>               .BatParm:	RESW	10		; pointers to parameters
   667 00000020 ??                      .BatFile:	RESB	1		; beginning of batch file name
   668                                  .SIZE:
   669                                  ENDSTRUC
   670                                  
   671                                  ANULL		equ	0		; terminates an argv string
   672                                  ARGMAX		equ	64		; max args on a command line
   673                                  ;ARGBLEN 	equ	2*128		; 1char each plus term NUL
   674                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM ;*
   675                                  ARGBLEN 	equ	2*64
   676                                  tplen		equ	64		; max size of one argument
   677                                  arg_cnt_error	equ	1		; number of args > MAXARG
   678                                  arg_buf_ovflow	equ	2		; overflowed argbuffer
   679                                  
   680                                  STRUC ARGV_ELE				; elements in the argv array
   681 00000000 ????                    .argpointer:	RESW	1		; pointer to the argstring
   682 00000002 ??                      .argflags:	RESB	1		; cparse flags for this argstring
   683 00000003 ????                    .argstartel:	RESW	1		; the result of cparse's [STARTEL]
   684 00000005 ????                    .arglen:	RESW	1		; cparse's char count + one (for null)
   685 00000007 ????                    .argsw_word:	RESW	1		; any switches after this? what kinds?
   686 00000009 ????                    .arg_ocomptr:	RESW	1		; pointer into original command string
   687                                  .SIZE:	; 11 ; 27/07/2024
   688                                  ENDSTRUC
   689                                  
   690                                  STRUC ARG_UNIT
   691 00000000 <res 2C0h>              .argv:		RESB	ARGMAX * ARGV_ELE.SIZE
   692 000002C0 ????                    .argvcnt:	RESW	1		; number of arguments
   693 000002C2 ????                    .argswinfo:	RESW	1		; Switch information for entire line
   694 000002C4 <res 100h>              .argbuf:	RESW	ARGBLEN		; storage for argv strings
   695 000003C4 <res 80h>               .argforcombuf:	RESB	COMBUFLEN	; Original for loop command string
   696                                  .SIZE:	; 1092 ; 27/07/2024 ; (it was 1348 in MSDOS 5.0-6.22 COMMAND.COM) ;*
   697                                  ENDSTRUC
   698                                  
   699                                  ; Equates for initialization
   700                                  ;
   701                                  INITINIT	equ	01h		; initialization in progress
   702                                  INITSPECIAL	equ	02h		; in initialization time/date routine
   703                                  INITCTRLC	equ	04h		; already in ^C handler
   704                                  
   705                                  ;============================================================================
   706                                  ;  INTNAT.INC, MSDOS 6.0, 1991
   707                                  ;============================================================================
   708                                  ; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   709                                  
   710                                  ; Current structure of the data returned by the international call
   711                                  
   712                                  struc INTERNAT_BLOCK
   713 00000000 ????                    .date_tim_format: resw 1		; 0-USA, 1-EUR, 2-JAP
   714 00000002 ??????????              .currency_sym:	resb 5			; Currency Symbol 5 bytes
   715 00000007 ????                    .thous_sep:	resb 2			; Thousands separator 2 bytes
   716 00000009 ????                    .decimal_sep:	resb 2			; Decimal separator 2 bytes
   717 0000000B ????                    .date_sep:	resb 2			; Date separator 2 bytes
   718 0000000D ????                    .time_sep:	resb 2			; Decimal separator 2 bytes
   719 0000000F ??                      .bit_field:	resb 1			; Bit values
   720                                  					;   Bit 0 = 0 if currency symbol first
   721                                  					;	  = 1 if currency symbol last
   722                                  					;   Bit 1 = 0 if No space after currency symbol
   723                                  					;	  = 1 if space after currency symbol
   724                                  .currency_cents:
   725 00000010 ??                      		resb 1			; Number of places after currency dec point
   726 00000011 ??                      .time_24:	resb 1			; 1 if 24 hour time, 0 if 12 hour time
   727 00000012 ????????                .map_call:	resw 2			; Address of case mapping call (DWORD)
   728                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
   729                                  					;  in pieces.
   730 00000016 ??                      .data_sep:	resb 1			; Data list separator character
   731 00000017 ??                      		resb 1
   732                                  endstruc
   733                                  
   734                                  ; Max size of the block returned by the INTERNATIONAL call
   735                                  
   736                                  internat_block_max equ 32
   737                                  
   738                                  ;============================================================================
   739                                  ; FIND.INC (MSDOS 3.3, 1987) - REDIRSYM.INC (MSDOS 6.0, 1991) 
   740                                  ;============================================================================
   741                                  ; 13/10/2018 - Retro DOS v3.0
   742                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   743                                  
   744                                  ;Break	<find first/next buffer>
   745                                  
   746                                  	; MSDOS 3.3 & MSDOS 6.0
   747                                  
   748                                  struc FIND_BUF
   749 00000000 ??                      .DRIVE:	    resb 1	; drive of search
   750 00000001 <res Bh>                .NAME:	    resb 11	; formatted name
   751 0000000C ??                      .SATTR:	    resb 1	; attribute of search
   752 0000000D ????                    .LASTENT:   resw 1	; LastEnt
   753 0000000F ????                    .DIRSTART:  resw 1	; DirStart
   754 00000011 ????????                .NETID:	    resb 4	; Reserved for NET
   755 00000015 ??                      .ATTR:	    resb 1	; attribute found
   756 00000016 ????                    .TIMR:	    resw 1	; time
   757 00000018 ????                    .DATE:	    resw 1	; date
   758 0000001A ????                    .SIZE_L:    resw 1	; low(size)
   759 0000001C ????                    .SIZE_H:    resw 1	; high(size)
   760 0000001E <res Dh>                .PNAME:	    resb 13	; packed name
   761                                  .size:
   762                                  endstruc
   763                                  
   764                                  ;=============================================================================
   765                                  ; PDB.INC, MSDOS 6.0, 1991
   766                                  ;=============================================================================
   767                                  ; 24/09/2018 - Retro DOS v3.0 (08/07/2018, 'msdos3.s')
   768                                  
   769                                  ;**	Process data block (otherwise known as program header)
   770                                  
   771                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   772                                  ;	can be rearranged here, ever. Reserved areas are probably safe
   773                                  ;	for use.
   774                                  
   775                                  FILPERPROC	EQU     20
   776                                  
   777                                  struc PDB	; Process_data_block
   778 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   779 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   780 00000004 ??                                      resb 1
   781 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   782 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   783 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   784 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   785 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   786 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   787 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   788 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   789 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   790 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   791 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   792 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   793 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   794 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   795 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   796 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   797 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   798 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   799                                  				;  an extended FCB
   800                                  ;endstruc 	; MSDOS 3.3
   801                                  	  	; MSDOS 6.0
   802 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   803 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   804 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   805 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   806                                  endstruc
   807                                  
   808                                  ;=============================================================================
   809                                  ; VERSIONA.INC, MSDOS 6.0, 1991
   810                                  ;=============================================================================
   811                                  ; 24/09/2018 - Retro DOS v3.0
   812                                  
   813                                  ;major_version	equ 6		; Major DOS version
   814                                  ;minor_version	equ 0		; Minor DOS Version
   815                                  
   816                                  ;expected_version    equ     (MINOR_VERSION SHL 8)+MAJOR_VERSION
   817                                  
   818                                  ; MSDOS 3.3 COMMAND.COM
   819                                  ;MAJOR_VERSION	EQU 3
   820                                  ;MINOR_VERSION	EQU 30
   821                                  
   822                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
   823                                  ;MAJOR_VERSION	EQU 5		; Major DOS version
   824                                  ;MINOR_VERSION	EQU 0		; Minor DOS version
   825                                  
   826                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
   827                                  MAJOR_VERSION	EQU 6		; Major DOS version
   828                                  MINOR_VERSION	EQU 22		; Minor DOS version
   829                                  
   830                                  EXPECTED_VERSION EQU (MINOR_VERSION<<8)+MAJOR_VERSION	
   831                                  
   832                                  ;-----------------------------------------------------------------------------
   833                                  ; 21/09/2018
   834                                  ;-----------------------------------------------------------------------------
   835                                  ; Retro DOS v3.0 NOTE:  
   836                                  ;	Following source code is as disassembled code of MSDOS 3.3 COMMAND.COM
   837                                  ;	with minor modifications which are done by me (Erdogan Tan).
   838                                  ;	.. but comments and descriptions are from MSDOS 6.0 COMMAND.COM
   839                                  ;	source code files (written by using MASM syntax).
   840                                  ;-----------------------------------------------------------------------------
   841                                  ; All of this Retro DOS 3.0 (2018) source code has been written by using
   842                                  ; NASM (2.11) x86 assembly language/compiler syntax.	
   843                                  ;----------------------------------------------------------------------------- 	
   844                                  
   845                                  ;=============================================================================
   846                                  ; COMMAND1.ASM, MSDOS 6.0, 1991
   847                                  ;=============================================================================
   848                                  ; 21/09/2018 - Retro DOS v3.0
   849                                  
   850                                  ;	page ,132
   851                                  ;	title	COMMAND - resident code for COMMAND.COM
   852                                  ;	name	COMMAND
   853                                  
   854                                  ;/*
   855                                  ; *                      Microsoft Confidential
   856                                  ; *                      Copyright (C) Microsoft Corporation 1991
   857                                  ; *                      All Rights Reserved.
   858                                  ; */
   859                                  
   860                                  ;*****************************************************************************
   861                                  ;
   862                                  ; MODULE:	       COMMAND.COM
   863                                  ;
   864                                  ; DESCRIPTIVE NAME:    Default DOS command interpreter
   865                                  ;
   866                                  ; FUNCTION:	       This version of COMMAND is divided into three distinct
   867                                  ;		       parts.  First is the resident portion, which includes
   868                                  ;		       handlers for interrupts	23H (Cntrl-C), 24H (fatal
   869                                  ;		       error), and 2EH (command line execute); it also has
   870                                  ;		       code to test and, if necessary, reload the transient
   871                                  ;		       portion. Following the resident is the init code, which
   872                                  ;		       is overwritten after use.  Then comes the transient
   873                                  ;		       portion, which includes all command processing (whether
   874                                  ;		       internal or external).  The transient portion loads at
   875                                  ;		       the end of physical memory, and it may be overlayed by
   876                                  ;		       programs that need as much memory as possible. When the
   877                                  ;		       resident portion of command regains control from a user
   878                                  ;		       program, a check sum is performed on the transient
   879                                  ;		       portion to see if it must be reloaded.  Thus programs
   880                                  ;		       which do not need maximum memory will save the time
   881                                  ;		       required to reload COMMAND when they terminate.
   882                                  ;
   883                                  ; ENTRY POINT:	       PROGSTART
   884                                  ;
   885                                  ; INPUT:	       command line at offset 81H
   886                                  ;
   887                                  ; EXIT_NORMAL:	       No exit from root level command processor.  Can exit
   888                                  ;		       from a secondary command processor via the EXIT
   889                                  ;		       internal command.
   890                                  ;
   891                                  ; EXIT_ERROR:	       Exit to prior command processor if possible, otherwise
   892                                  ;		       hang the system.
   893                                  ;
   894                                  ; INTERNAL REFERENCES:
   895                                  ;
   896                                  ;     ROUTINES:        See the COMMAND Subroutine Description Document
   897                                  ;		       (COMMAND.DOC)
   898                                  ;
   899                                  ;     DATA AREAS:      See the COMMAND Subroutine Description Document
   900                                  ;		       (COMMAND.DOC)
   901                                  ;
   902                                  ; EXTERNAL REFERENCES:
   903                                  ;
   904                                  ;      ROUTINES:       none
   905                                  ;
   906                                  ;      DATA AREAS:     none
   907                                  ;
   908                                  ;*****************************************************************************
   909                                  ;
   910                                  ;			      REVISION HISTORY
   911                                  ;			      ----------------
   912                                  ;
   913                                  ; DOS 1.00 to DOS 3.30
   914                                  ; --------------------------
   915                                  ; SEE REVISION LOG IN COPY.ASM ALSO
   916                                  ;
   917                                  ; REV 1.17
   918                                  ;    05/19/82  Fixed bug in BADEXE error (relocation error must return to
   919                                  ;	       resident since the EXELOAD may have overwritten the transient.
   920                                  ;
   921                                  ; REV 1.18
   922                                  ;    05/21/82  IBM version always looks on drive A
   923                                  ;	       MSVER always looks on default drive
   924                                  ;
   925                                  ; REV 1.19
   926                                  ;    06/03/82  Drive spec now entered in command line
   927                                  ;    06/07/82  Added VER command (print DOS version number) and VOL command
   928                                  ;	       (print volume label)
   929                                  ;
   930                                  ; REV 1.20
   931                                  ;    06/09/82  Prints "directory" after directories
   932                                  ;    06/13/82  MKDIR, CHDIR, PWD, RMDIR added
   933                                  ;
   934                                  ; REV 1.50
   935                                  ;	       Some code for new 2.0 DOS, sort of HACKey.  Not enough time to
   936                                  ;	       do it right.
   937                                  ;
   938                                  ; REV 1.70
   939                                  ;	       EXEC used to fork off new processes
   940                                  ;
   941                                  ; REV 1.80
   942                                  ;	       C switch for single command execution
   943                                  ;
   944                                  ; REV 1.90
   945                                  ;	       Batch uses XENIX
   946                                  ;
   947                                  ; Rev 2.00
   948                                  ;	       Lots of neato stuff
   949                                  ;	       IBM 2.00 level
   950                                  ;
   951                                  ; Rev 2.01
   952                                  ;	       'D' switch for date time suppression
   953                                  ;
   954                                  ; Rev 2.02
   955                                  ;	       Default userpath is NUL rather than BIN
   956                                  ;		       same as IBM
   957                                  ;	       COMMAND split into pieces
   958                                  ;
   959                                  ; Rev 2.10
   960                                  ;	       INTERNATIONAL SUPPORT
   961                                  ;
   962                                  ; Rev 2.50
   963                                  ;	       all the 2.x new stuff -MU
   964                                  ;
   965                                  ; Rev 3.30     (Ellen G)
   966                                  ;	       CALL internal command (TBATCH2.ASM)
   967                                  ;	       CHCP internal command (TCMD2B.ASM)
   968                                  ;	       INT 24H support of abort, retry, ignore, and fail prompt
   969                                  ;	       @ sign suppression of batch file line
   970                                  ;	       Replaceable environment value support in batch files
   971                                  ;	       INT 2FH calls for APPEND
   972                                  ;	       Lots of PTR fixes!
   973                                  ;
   974                                  ; Beyond 3.30 to forever  (Ellen G)
   975                                  ; ----------------------
   976                                  ;
   977                                  ; A000 DOS 4.00  -	Use SYSPARSE for internal commands
   978                                  ;			Use Message Retriever services
   979                                  ;			/MSG switch for resident extended error msg
   980                                  ;			Convert to new capitalization support
   981                                  ;			Better error recovery on CHCP command
   982                                  ;			Code page file tag support
   983                                  ;			TRUENAME internal command
   984                                  ;			Extended screen line support
   985                                  ;			/P switch on DEL/ERASE command
   986                                  ;			Improved file redirection error recovery
   987                                  ;	(removed)	Improved batch file performance
   988                                  ;			Unconditional DBCS support
   989                                  ;			Volume serial number support
   990                                  ;	(removed)	COMMENT=?? support
   991                                  ;
   992                                  ; A001	PTM P20 	Move system_cpage from TDATA to TSPC
   993                                  ;
   994                                  ; A002	PTM P74 	Fix PRESCAN so that redirection symbols do not
   995                                  ;			require delimiters.
   996                                  ;
   997                                  ; A003	PTM P5,P9,P111	Included in A000 development
   998                                  ;
   999                                  ; A004	PTM P86 	Fix IF command to turn off piping before
  1000                                  ;			executing
  1001                                  ;
  1002                                  ; A005	DCR D17 	If user specifies an extension on the command
  1003                                  ;			line search for that extension only.
  1004                                  ;
  1005                                  ; A006	DCR D15 	New message for MkDir - "Directory already
  1006                                  ;			exists"
  1007                                  ;
  1008                                  ; A007	DCR D2		Change CTTY so that a write is done before XDUP
  1009                                  ;
  1010                                  ; A008	PTM P182	Change COPY to set default if invalid function
  1011                                  ;			returned from code page call.
  1012                                  ;
  1013                                  ; A009	PTM P179	Add CRLF to invalid disk change message
  1014                                  ;
  1015                                  ; A010	DCR D43 	Allow APPEND to do a far call to SYSPARSE in
  1016                                  ;			transient COMMAND.
  1017                                  ;
  1018                                  ; A011	DCR D130	Change redirection to overwrite an EOF mark
  1019                                  ;			before appending to a file.
  1020                                  ;
  1021                                  ; A012	PTM P189	Fix redirection error recovery.
  1022                                  ;
  1023                                  ; A013	PTM P330	Change date format
  1024                                  ;
  1025                                  ; A014	PTM P455	Fix echo parsing
  1026                                  ;
  1027                                  ; A015	PTM P517	Fix DIR problem with * vs *.
  1028                                  ;
  1029                                  ; A016	PTM P354	Fix extended error message addressing
  1030                                  ;
  1031                                  ; A017	PTM P448	Fix appending to 0 length files
  1032                                  ;
  1033                                  ; A018	PTM P566,P3903	Fix parse error messages to print out parameter
  1034                                  ;			the parser fails on. Fail on duplicate switches.
  1035                                  ;
  1036                                  ; A019	PTM P542	Fix device name to be printed correctly during
  1037                                  ;			critical error
  1038                                  ;
  1039                                  ; A020	DCR D43 	Set append state off while in DIR
  1040                                  ;
  1041                                  ; A021	PTM P709	Fix CTTY printing ascii characters.
  1042                                  ;
  1043                                  ; A022	DCR D209	Enhanced error recovery
  1044                                  ;
  1045                                  ; A023	PTM P911	Fix ANSI.SYS IOCTL structure.
  1046                                  ;
  1047                                  ; A024	PTM P899	Fix EXTOPEN open modes.
  1048                                  ;
  1049                                  ; A025	PTM P922	Fix messages and optimize PARSE switches
  1050                                  ;
  1051                                  ; A026	DCR D191	Change redirection error recovery support.
  1052                                  ;
  1053                                  ; A027	PTM P991	Fix so that KAUTOBAT & AUTOEXEC are terminated
  1054                                  ;			with a carriage return.
  1055                                  ;
  1056                                  ; A028	PTM P1076	Print a blank line before printing invalid
  1057                                  ;			date and invalid time messages.
  1058                                  ;
  1059                                  ; A029	PTM P1084	Eliminate calls to parse_check_eol in DATE
  1060                                  ;			and TIME.
  1061                                  ;
  1062                                  ; A030	DCR D201	New extended attribute format.
  1063                                  ;
  1064                                  ; A031	PTM P1149	Fix DATE/TIME add blank before prompt.
  1065                                  ;
  1066                                  ; A032	PTM P931	Fix =ON, =OFF for BREAK, VERIFY, ECHO
  1067                                  ;
  1068                                  ; A033	PTM P1298	Fix problem with system crashes on ECHO >""
  1069                                  ;
  1070                                  ; A034	PTM P1387	Fix COPY D:fname+,, to work
  1071                                  ;
  1072                                  ; A035	PTM P1407	Fix so that >> (appending) to a device does
  1073                                  ;			do a read to determine eof.
  1074                                  ;
  1075                                  ; A036	PTM P1406	Use 69h instead of 44h to get volume serial
  1076                                  ;			so that ASSIGN works correctly.
  1077                                  ;
  1078                                  ; A037	PTM P1335	Fix COMMAND /C with FOR
  1079                                  ;
  1080                                  ; A038	PTM P1635	Fix COPY so that it doesn't accept /V /V
  1081                                  ;
  1082                                  ; A039	DCR D284	Change invalid code page tag from -1 to 0.
  1083                                  ;
  1084                                  ; A040	PTM P1787	Fix redirection to cause error when no file is
  1085                                  ;			specified.
  1086                                  ;
  1087                                  ; A041	PTM P1705	Close redirected files after internal APPEND
  1088                                  ;			executes.
  1089                                  ;
  1090                                  ; A042	PTM P1276	Fix problem of APPEND paths changes in batch
  1091                                  ;			files causing loss of batch file.
  1092                                  ;
  1093                                  ; A043	PTM P2208	Make sure redirection is not set up twice for
  1094                                  ;			CALL'ed batch files.
  1095                                  ;
  1096                                  ; A044	PTM P2315	Set switch on PARSE so that 0ah is not used
  1097                                  ;			as an end of line character
  1098                                  ;
  1099                                  ; A045	PTM P2560	Make sure we don't lose parse, critical error,
  1100                                  ;			and extended message pointers when we EXIT if
  1101                                  ;			COMMAND /P is the top level process.
  1102                                  ;
  1103                                  ; A046	PTM P2690	Change COPY message "fn File not found" to
  1104                                  ;			"File not found - fn"
  1105                                  ;
  1106                                  ; A047	PTM P2819	Fix transient reload prompt message
  1107                                  ;
  1108                                  ; A048	PTM P2824	Fix COPY path to be upper cased.  This was broken
  1109                                  ;			when DBCS code was added.
  1110                                  ;
  1111                                  ; A049	PTM P2891	Fix PATH so that it doesn't accept extra characters
  1112                                  ;			on line.
  1113                                  ;
  1114                                  ; A050	PTM P3030	Fix TYPE to work properly on files > 64K
  1115                                  ;
  1116                                  ; A051	PTM P3011	Fix DIR header to be compatible with prior releases.
  1117                                  ;
  1118                                  ; A052	PTM P3063,P3228 Fix COPY message for invalid filename on target.
  1119                                  ;
  1120                                  ; A053	PTM P2865	Fix DIR to work in 40 column mode.
  1121                                  ;
  1122                                  ; A054	PTM P3407	Code reduction and critical error on single line
  1123                                  ;	PTM P3672	(Change to single parser exported under P3407)
  1124                                  ;
  1125                                  ; A055	PTM P3282	Reset message service variables in INT 23h to fix
  1126                                  ;			problems with breaking out of INT 24h
  1127                                  ;
  1128                                  ; A056	PTM P3389	Fix problem of environment overlaying transient.
  1129                                  ;
  1130                                  ; A057	PTM P3384	Fix COMMAND /C so that it works if there is no space
  1131                                  ;			before the "string".  EX: COMMAND /CDIR
  1132                                  ;
  1133                                  ; A058	PTM P3493	Fix DBCS so that CPARSE eats second character of
  1134                                  ;			DBCS switch.
  1135                                  ;
  1136                                  ; A059	PTM P3394	Change the TIME command to right align the display of
  1137                                  ;			the time.
  1138                                  ;
  1139                                  ; A060	PTM P3672	Code reduction - change PARSE and EXTENDED ERROR
  1140                                  ;			messages to be disk based.  Only keep them if /MSG
  1141                                  ;			is used.
  1142                                  ;
  1143                                  ; A061	PTM P3928	Fix so that transient doesn't reload when breaking
  1144                                  ;			out of internal commands, due to substitution blocks
  1145                                  ;			not being reset.
  1146                                  ;
  1147                                  ; A062	PTM P4079	Fix segment override for fetching address of environment
  1148                                  ;			of parent copy of COMMAND when no COMSPEC exists in
  1149                                  ;			secondary copy of environment.	Change default slash in
  1150                                  ;			default comspec string to backslash.
  1151                                  ;
  1152                                  ; A063	PTM P4140	REDIRECTOR and IFSFUNC changed interface for getting
  1153                                  ;			text for critical error messages.
  1154                                  ;
  1155                                  ; A064	PTM P4934	Multiplex number for ANSI.SYS changed due to conflict
  1156                                  ;	5/20/88 	with Microsoft product already shipped.
  1157                                  ;
  1158                                  ; A065	PTM P4935	Multiplex number for SHELL changed due to conflict
  1159                                  ;	 5/20/88	with Microsoft product already shipped.
  1160                                  ;
  1161                                  ; A066	PTM P4961	DIR /W /P scrolled first line off the screen in some
  1162                                  ;	 5/24/88	cases; where the listing would barely fit without the
  1163                                  ;			header and space remaining.
  1164                                  ;
  1165                                  ; A067	PTM P5011	For /E: values of 993 to 1024 the COMSPEC was getting
  1166                                  ;	 6/6/88 	trashed.  Turns out that the SETBLOCK for the new
  1167                                  ;			environment was putting a "Z block" marker in the old
  1168                                  ;			environment.  The fix is to move to the old environment
  1169                                  ;			to the new environment before doing the SETBLOCK.
  1170                                  ;
  1171                                  ; A068  PTM P5568       IR79754 APPEND /x:on not working properly with DIR/VOL
  1172                                  ;        09/19/88       because the check for APPEND needed to be performed
  1173                                  ;                       before the DIR's findfirst.
  1174                                  ;
  1175                                  ; A069  PTM P5726       IR80540 COMSPEC_flag not properly initialized and
  1176                                  ;        10/30/88       executed.  Causing AUSTIN problem testing LAN/DW4 re-
  1177                                  ;                       loading trans w/new comspec with no user change comspec.
  1178                                  ;
  1179                                  ; A070  PTM P5734       IR80484 Batch file causes sys workspace to be corrupted.
  1180                                  ;        11/05/88       Expansion of environment variables into batch line of
  1181                                  ;                       128 chars was not being counted and "%" which should be
  1182                                  ;                       ignored were being counted.
  1183                                  ;
  1184                                  ; A071  PTM P5854       IR82061 Invalid COMMAND.COM when Word Perfect, Prompt
  1185                                  ;        03/02/89       used.  Comspec_flag was not in protected data file be-
  1186                                  ;                       ing included in checksum and was being overwritten by
  1187                                  ;                       WP.  Moved var from Tspc to Tdata so Trans would reload.
  1188                                  ;                       Also removed fix A069 (because flag now protected).
  1189                                  ;
  1190                                  ; C001  VERSION 4.1     Add new internal command - SERVICE - to display the DOS
  1191                                  ;        07/25/89       version and CSD version in U.S. date format.  Files
  1192                                  ;                       changed - TRANMSG,.SKL,COMMAND1,TDATA,TCMD2A,USA.MSG
  1193                                  ;
  1194                                  ;***********************************************************************************
  1195                                  
  1196                                  ;
  1197                                  ;	Revision History
  1198                                  ;	================
  1199                                  ;
  1200                                  ;	M021	SR	08/23/90	Fixed Ctrl-C handler to handle Ctrl-C
  1201                                  ;					at init time (date/time prompt)
  1202                                  ;
  1203                                  
  1204                                  ;
  1205                                  ;.xcref
  1206                                  ;.xlist
  1207                                  ;	include dossym.inc		; basic DOS symbol set
  1208                                  ;	include syscall.inc		; DOS function names
  1209                                  ;	include comsw.asm		; build version info
  1210                                  ;	include comequ.asm		; common command.com symbols
  1211                                  ;	include resmsg.equ		; resident message names
  1212                                  ;
  1213                                  ;	include comseg.asm		;segment ordering
  1214                                  ;.list
  1215                                  ;.cref
  1216                                  
  1217                                  ;CODERES segment public byte
  1218                                  ;CODERES ends
  1219                                  ;
  1220                                  ;DATARES 	segment public byte
  1221                                  ;		extrn	AccDen:byte
  1222                                  ;		extrn	Batch:word
  1223                                  ;		extrn	EchoFlag:byte
  1224                                  ;		extrn	ExeBad:byte
  1225                                  ;		extrn	ExecEMes:byte
  1226                                  ;		extrn	ExecErrSubst:byte
  1227                                  ;		extrn	ExtCom:byte
  1228                                  ;		extrn	ForFlag:byte
  1229                                  ;		extrn	IfFlag:byte
  1230                                  ;		extrn	InitFlag:BYTE
  1231                                  ;		extrn	Nest:word
  1232                                  ;		extrn	PipeFlag:byte
  1233                                  ;		extrn	RBadNam:byte
  1234                                  ;		extrn	RetCode:word
  1235                                  ;		extrn	SingleCom:word
  1236                                  ;		extrn	TooBig:byte
  1237                                  ;
  1238                                  ;		extrn	OldDS:word
  1239                                  ;
  1240                                  ;DATARES 	ends
  1241                                  ;
  1242                                  ;
  1243                                  ;INIT		segment public para
  1244                                  ;		extrn	ConProc:near
  1245                                  ;		extrn	Init_Contc_SpecialCase:near
  1246                                  ;INIT		ends
  1247                                  
  1248                                  ; 09/01/2023 - Erdogan Tan - Istanbul
  1249                                  ; --------------------------------------
  1250                                  ; 'command5.s' source code reference(s):
  1251                                  
  1252                                  ;	1) MSDOS 6.0 COMMAND.COM source files
  1253                                  ;	2) Disassembled MSDOS 5.0 COMMAND.COM - 11/11/1991 - 47845 bytes  
  1254                                  ;	   (Disassembler: HEX-RAYS IDA Pro Freeware Version 5.0)
  1255                                  ; ----------------------------------------------------------------------				 	 	
  1256                                  
  1257                                  ; -----------------------------------------------------------------------------
  1258                                  ; START OF RESIDENT PORTION
  1259                                  ; -----------------------------------------------------------------------------
  1260                                  ; SEGMENT - DATARES
  1261                                  ; -----------------------------------------------------------------------------
  1262                                  
  1263                                  section .RESGROUP ; vstart=100h  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) 
  1264                                  
  1265                                  ; 09/01/2023 - Retro DOS v4.0 (Modified COMMAND.COM v5.0)
  1266                                  
  1267                                  ;==============================================================================
  1268                                  ; STUB.ASM - MSDOS 6.0 - 1991
  1269                                  ;==============================================================================
  1270                                  
  1271                                  ;This file contains the low memory stub for command.com which hooks all the
  1272                                  ;entry points into the resident command.com and directs the calls to the
  1273                                  ;appropriate routines in the resident code which may be located in HIMEM. 
  1274                                  ;
  1275                                  ;The stub has been made part of the resident data and will always
  1276                                  ;be duplicated on every invocation of command.com. However, the only stubs
  1277                                  ;that actually hook the interrupt vectors belong to either the first 
  1278                                  ;command.com or to any other command.com executed with the /p switch. 
  1279                                  ;
  1280                                  ;The stub also keeps track of the current active data segment. The 
  1281                                  ;INIT code of each command.com updates this variable via an int 2fh mechanism
  1282                                  ;with its own data segment. The INIT code also updates a pointer in its data
  1283                                  ;segment to the previous resident data segment. Whenever a command.com exits,
  1284                                  ;the exit code picks up the previous data segment pointer from the current
  1285                                  ;data segment and patches it into the CurResDataSeg variable in the stub.
  1286                                  ;
  1287                                  ;Right now the stub does not bother about A20 switching. We assume
  1288                                  ;A20 is always on. It just does a far jump to the resident code with the 
  1289                                  ;value of the current data segment in one of the registers. A20 toggle 
  1290                                  ;support maybe added as a future enhancement, if the need is felt.
  1291                                  
  1292                                  	; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1293                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1294                                  
  1295                                  	[ORG 100H]
  1296                                  
  1297                                  	; 21/09/2018 - Retro DOS v3.0
  1298                                  StartCode:
  1299 00000000 E9BD14                  	jmp	ConProc	; 10/01/2023 
  1300                                  
  1301                                  	; 09/01/2023
  1302                                  
  1303                                  ; Make following table word-aligned, and at the same time, provide a
  1304                                  ; signature that sysinit can use to (attempt to) validate the interpreter
  1305                                  
  1306                                  	;db	0	; MSDOS 5.0 COMMAND.COM - DATARESRES:0103h
  1307 00000003 66                      	db      ((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
  1308                                  
  1309                                  ;All the entry points declared below are patched in at INIT time with the
  1310                                  ;proper segment and offset values after the resident code segment has been
  1311                                  ;moved to its final location
  1312                                  
  1313                                  ;!!!WARNING!!!
  1314                                  ; All the dword ptrs from Int2f_Entry till MsgRetrv_Entry should be contiguous
  1315                                  ;because the init routine 'Patch_stub' (in init.asm) relies on this to patch
  1316                                  ;in the correct segments and offsets
  1317                                  
  1318                                  Int2f_Entry:
  1319 00000004 [D813]                  	dw	MsgInt2fHandler		; Address of int 2fh handler
  1320 00000006 0000                    	dw	0
  1321                                  Int2e_Entry:
  1322 00000008 [340E]                  	dw	Int_2e			; Address of int 2eh handler
  1323 0000000A 0000                    	dw	0
  1324                                  Ctrlc_Entry:
  1325 0000000C [F30C]                  	dw	ContC			; Address of Ctrl-C handler
  1326 0000000E 0000                    	dw	0
  1327                                  CritErr_Entry:
  1328 00000010 [F510]                  	dw	DSKERR			; Address of critical error handler
  1329 00000012 0000                    	dw	0
  1330                                  
  1331                                  Exec_Entry:
  1332 00000014 00000000                	dd	0			; Entry from transient to Ext_Exec
  1333                                  RemCheck_Entry:
  1334 00000018 00000000                	dd	0			; Entry from transient to TRemCheck
  1335                                  TrnLodCom1_Entry:
  1336 0000001C 00000000                	dd	0			; Entry from transient to LodCom1
  1337                                  LodCom_Entry:
  1338 00000020 00000000                	dd	0			; Entry after exit from command.com
  1339                                  MsgRetrv_Entry:
  1340 00000024 00000000                	dd	0			; Entry from external to MsgRetriever
  1341                                  HeadFix_Entry:
  1342 00000028 00000000                	dd	0			; Entry from trans to HeadFix
  1343                                  UMBOff_Entry:
  1344 0000002C 00000000                	dd	0			; Entry from here to UMBOff routine; M003
  1345                                  XMMCallAddr:
  1346 00000030 00000000                	dd	0			; Call address for XMM functions
  1347                                  ComInHMA:
  1348 00000034 00                      	db	0			; Flags if command.com in HMA
  1349                                  
  1350                                  Int2f_Trap:
  1351                                  	;sti	; 19/04/2023 (MSDOS 5.0 COMMAND.COM - RESGROUP:0135h)
  1352 00000035 E86400                  	call	CheckA20
  1353 00000038 1E                      	push	ds			; push current ds value
  1354 00000039 0E                      	push	cs			; push resident data segment value
  1355                                  	;jmp	cs:Int2f_Entry
  1356 0000003A 2EFF2E[0400]            	jmp	far [cs:Int2f_Entry]
  1357                                  
  1358                                  Int2e_Trap:
  1359 0000003F FB                      	sti
  1360 00000040 E85900                  	call	CheckA20
  1361 00000043 1E                      	push	ds			; push current ds value
  1362 00000044 0E                      	push	cs			; push resident data segment value
  1363                                  	;jmp	cs:Int2e_Entry
  1364 00000045 2EFF2E[0800]            	jmp	far [cs:Int2e_Entry]
  1365                                  
  1366                                  Ctrlc_Trap:
  1367 0000004A FB                      	sti
  1368 0000004B E84E00                  	call	CheckA20
  1369 0000004E 1E                      	push	ds			; push current ds value
  1370 0000004F 0E                      	push	cs			; push resident data segment value
  1371                                  	;jmp	cs:Ctrlc_Entry
  1372 00000050 2EFF2E[0C00]            	jmp	far [cs:Ctrlc_Entry]
  1373                                  
  1374                                  CritErr_Trap:
  1375 00000055 FB                      	sti
  1376 00000056 E84300                  	call	CheckA20
  1377 00000059 1E                      	push	ds			; push current ds value
  1378 0000005A 0E                      	push	cs			; push resident data segment value
  1379                                  	;jmp	cs:CritErr_Entry
  1380 0000005B 2EFF2E[1000]            	jmp	far [cs:CritErr_Entry]
  1381                                  
  1382                                  Exec_Trap:
  1383 00000060 E83900                  	call	CheckA20
  1384 00000063 1E                      	push	ds			; push current ds value
  1385 00000064 0E                      	push	cs			; push resident data segment value
  1386                                  	;jmp	cs:Exec_Entry
  1387 00000065 2EFF2E[1400]            	jmp	far [cs:Exec_Entry]
  1388                                  
  1389                                  RemCheck_Trap:
  1390 0000006A E82F00                  	call	CheckA20
  1391 0000006D 1E                      	push	ds			; push current ds value
  1392 0000006E 0E                      	push	cs			; push resident data segment value
  1393                                  	;jmp	cs:RemCheck_Entry
  1394 0000006F 2EFF2E[1800]            	jmp	far [cs:RemCheck_Entry]
  1395                                  
  1396                                  TrnLodCom1_Trap:
  1397 00000074 E82500                  	call	CheckA20
  1398 00000077 1E                      	push	ds			; push current ds value
  1399 00000078 0E                      	push	cs			; push resident data segment value
  1400                                  	;jmp	cs:TrnLodCom1_Entry
  1401 00000079 2EFF2E[1C00]            	jmp	far [cs:TrnLodCom1_Entry]
  1402                                  
  1403                                  LodCom_Trap:
  1404 0000007E E81B00                  	call	CheckA20
  1405 00000081 1E                      	push	ds			; push current ds value
  1406 00000082 0E                      	push	cs			; push resident data segment value
  1407                                  	;jmp	cs:LodCom_Entry
  1408 00000083 2EFF2E[2000]            	jmp	far [cs:LodCom_Entry]
  1409                                  
  1410                                  MsgRetrv_Trap:
  1411 00000088 E81100                  	call	CheckA20
  1412 0000008B 1E                      	push	ds			; push current ds value
  1413 0000008C 0E                      	push	cs			; push resident data segment value
  1414                                  	;jmp	cs:MsgRetrv_Entry
  1415 0000008D 2EFF2E[2400]            	jmp	far [cs:MsgRetrv_Entry]
  1416                                  
  1417                                  HeadFix_Trap:
  1418 00000092 E80700                  	call	CheckA20
  1419 00000095 1E                      	push	ds			; push current ds value
  1420 00000096 0E                      	push	cs			; push resident data segment value
  1421                                  	;jmp	cs:HeadFix_Entry
  1422 00000097 2EFF2E[2800]            	jmp	far [cs:HeadFix_Entry]
  1423                                  
  1424                                  ; ----------------------------------------------------------------------------
  1425                                  
  1426                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1427                                  %if 0
  1428                                  	; 09/01/2023
  1429                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:019Dh
  1430                                  
  1431                                  	; 05/06/2023
  1432                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:019Ch
  1433                                  CheckA20:
  1434                                  	pushf				; save current flags
  1435                                  	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1436                                  	jz	short A20_on		; no, jump to resident
  1437                                  
  1438                                  	call	QueryA20
  1439                                  	jnc	short A20_on		; A20 is on, jump to resident
  1440                                  
  1441                                  	call	EnableA20		; turn A20 on
  1442                                  A20_on:
  1443                                  	popf				; flags have to be unchanged
  1444                                  	retn
  1445                                  %else
  1446                                  	; 18/07/2024
  1447                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1448                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1449                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:01FFh
  1450                                  CheckA20:
  1451 0000009C 9C                      	pushf				; save current flags
  1452 0000009D 2E803E[3400]00          	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1453 000000A3 741A                    	jz	short A20_on		; no, jump to resident
  1454                                  	; 18/07/2024
  1455 000000A5 50                      	push	ax
  1456 000000A6 53                      	push	bx
  1457                                  QueryA20:
  1458                                  	;mov	ah,7
  1459 000000A7 B407                    	mov	ah,XMM_QUERY_A20
  1460                                  	;call	cs:XMMCallAddr
  1461 000000A9 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1462 000000AE 09C0                    	or	ax,ax
  1463                                  	; 16/04/2023
  1464 000000B0 750B                    	jnz	short QA20_ON		; A20 is on, jump to resident
  1465                                  	; 18/07/2024
  1466                                  EnableA20:
  1467                                  	;mov	ah,5
  1468 000000B2 B405                    	mov	ah,XMM_LOCAL_ENABLE_A20	; turn A20 on
  1469                                  	;call	cs:XMMCallAddr
  1470 000000B4 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1471 000000B9 09C0                    	or	ax,ax
  1472 000000BB 7404                    	jz	short XMMerror		; AX = 0 fatal error
  1473                                  QA20_ON:
  1474 000000BD 5B                      	pop	bx
  1475 000000BE 58                      	pop	ax
  1476                                  A20_on:
  1477 000000BF 9D                      	popf				; flags have to be unchanged
  1478 000000C0 C3                      	retn
  1479                                  ;If we get an error, we just loop forever
  1480                                  XMMerror:
  1481 000000C1 EBFE                    	jmp	short XMMerror
  1482                                  %endif
  1483                                  
  1484                                  ; ----------------------------------------------------------------------------
  1485                                  
  1486                                  ; M005; This is a far jump to the actual int 2fh entry point. The renormalized
  1487                                  ; M005; int 2fh cs:ip points here. We hardcode a far jump here to the int 2fh
  1488                                  ; M005; handler. Note that we have to hardcode a jump and we cannot use any
  1489                                  ; M005; pointers because our cs is going to be different. The segment to
  1490                                  ; M005; jump to is patched in at init time. (in init.asm)
  1491                                  
  1492                                  Carousel_i2f_Hook:			; M005
  1493 000000C3 EA                      	db	0EAh			; far jump opcode; M005
  1494 000000C4 [3500]                  	dw	Int2f_Trap ; DATARES	; int 2fh offset ; M005
  1495 000000C6 0000                    	dw	0			; int 2fh segment; M005
  1496                                  
  1497                                  ; ----------------------------------------------------------------------------
  1498                                  
  1499                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1500                                  %if 0
  1501                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1502                                  QueryA20:
  1503                                  	push	bx
  1504                                  	push	ax
  1505                                  	;mov	ah,7
  1506                                  	mov	ah,XMM_QUERY_A20
  1507                                  	;call	cs:XMMCallAddr
  1508                                  	call	far [cs:XMMCallAddr]
  1509                                  	or	ax,ax
  1510                                  	pop	ax
  1511                                  	pop	bx
  1512                                  	; 16/04/2023
  1513                                  	jnz	short QA20_ON	; cf = 0	; AX = 1 => ON
  1514                                  	stc					; OFF
  1515                                  	;retn
  1516                                  QA20_ON:
  1517                                  	;clc					; ON
  1518                                  	retn
  1519                                  %endif
  1520                                  
  1521                                  ; ----------------------------------------------------------------------------
  1522                                  
  1523                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1524                                  %if 0
  1525                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1526                                  EnableA20:
  1527                                  	push	bx
  1528                                  	push	ax
  1529                                  	;mov	ah,5
  1530                                  	mov	ah,XMM_LOCAL_ENABLE_A20
  1531                                  	;call	cs:XMMCallAddr
  1532                                  	call	far [cs:XMMCallAddr]
  1533                                  	or	ax,ax
  1534                                  	jz	short XMMerror			; AX = 0 fatal error
  1535                                  	pop	ax
  1536                                  	pop	bx
  1537                                  	retn
  1538                                  ;If we get an error, we just loop forever
  1539                                  XMMerror:
  1540                                  	jmp	short XMMerror
  1541                                  %endif
  1542                                  
  1543                                  ; -----------------------------------------------------------------------------
  1544                                  
  1545                                  ; 05/06/2023
  1546                                  ;HV_Extern	equ	1
  1547                                  ;HV_LoadHigh	equ	1
  1548                                  ;HV_Stub	equ	1
  1549                                  ;	include	highvar.inc	; Make high-memory variables external here
  1550                                  ;	include	highexit.inc	; And add code for UnHideUMBs
  1551                                  
  1552                                  ;==============================================================================
  1553                                  ; HIGHEXIT.INC, MSDOS 6.0, 1992
  1554                                  ;==============================================================================
  1555                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1556                                  
  1557                                  DOS_STRATEGY_GET equ  5800h	; Int 21h, Func 58h, Svc 0 = get alloc strategy
  1558                                  DOS_STRATEGY_SET equ  5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
  1559                                  DOS_UMBLINK_GET	equ   5802h	; Int 21h, Func 58h, Svc 2 = get link state
  1560                                  DOS_UMBLINK_SET	equ   5803h	; Int 21h, Func 58h, Svc 3 = set link state
  1561                                  DOS_GET_LISTS	equ     52h	; Int 21h, Func 52h = get list of lists
  1562                                  
  1563                                  UMB_HeadIdx	equ     8Ch	; Offset from ES (after func52h) to get UMBHead
  1564                                  
  1565                                  	; 05/06/2023
  1566                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:01D9h
  1567                                  
  1568                                  ; -----------------------------------------------------------------------------
  1569                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
  1570                                  ; -----------------------------------------------------------------------------
  1571                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
  1572                                  ;               very little to do, as no elelments will be marked as HIDDEN.
  1573                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
  1574                                  ; ERROR:  None
  1575                                  ; USES:   fInHigh (from highvar.inc), carry flag
  1576                                  ; -----------------------------------------------------------------------------
  1577                                  
  1578                                  UnHideUMBs:
  1579 000000C8 50                      	push	ax		; Save ax for what we're about to do
  1580                                  
  1581                                  ; -----------------------------------------------------------------------------
  1582                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
  1583                                  ;    length of time. Those six constitute a check of whether or not we should
  1584                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
  1585                                  ;    will destroy the current link-state and memory-allocation strategy after
  1586                                  ;    every command execution.
  1587                                  ; -----------------------------------------------------------------------------
  1588                                  
  1589                                  	; 05/06/2023
  1590                                  	;getdata al,fInHigh	; Get InHigh from data segment
  1591                                  	;
  1592                                  	;push	ds
  1593 000000C9 A0[D804]                	mov	al,[fInHigh]
  1594                                  	;pop	ds
  1595                                  
  1596                                  	;or	al, al
  1597                                  	;jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
  1598                                  
  1599                                  	;pop	ax		; then there's nothing to do here... so
  1600                                  	;stc			; restore everything and return.  Just like
  1601                                  	;retn			; that.
  1602                                  
  1603                                  	; 05/06/2023
  1604 000000CC 3C01                    	cmp	al,1
  1605 000000CE 720F                    	jb	short uhu20	; cf=1
  1606                                  uhu10:	
  1607 000000D0 E8A000                  	call	linkumb		; Make sure UMBs are linked in.
  1608 000000D3 E82000                  	call	FreeUMBs
  1609                                  
  1610                                  	;putdata fInHigh, 0	; We're leaving, so update fInHigh.
  1611                                  	;
  1612                                  	;push	es
  1613                                  	;mov	byte [es:fInHigh],0
  1614                                  	;pop	es
  1615                                  	; 05/06/2023
  1616 000000D6 C606[D804]00            	mov	byte [fInHigh],0
  1617                                  
  1618 000000DB E80300                  	call	he_unlink	; Unlink UMBs
  1619                                  
  1620                                  	;pop	ax
  1621                                  	;clc
  1622                                  	;retn
  1623                                  
  1624 000000DE F8                      	clc
  1625                                  uhu20:
  1626 000000DF 58                      	pop	ax
  1627 000000E0 C3                      	retn
  1628                                  
  1629                                  ; -----------------------------------------------------------------------------
  1630                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
  1631                                  ; -----------------------------------------------------------------------------
  1632                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
  1633                                  ; EXIT:     None
  1634                                  ; ERROR:    None
  1635                                  ; USES:     AX, BX
  1636                                  ; -----------------------------------------------------------------------------
  1637                                  
  1638                                  	; 05/06/2023
  1639                                  he_unlink:
  1640 000000E1 30FF                    	xor	bh, bh
  1641                                  	
  1642                                  	;getdata bl,fm_umb		; Restore original link-state
  1643                                  	;
  1644                                  	;push	ds
  1645 000000E3 8A1E[DD04]              	mov     bl,[fm_umb]
  1646                                  	;pop	ds
  1647                                  
  1648 000000E7 B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1649 000000EA CD21                    	int	21h
  1650                                  
  1651                                  	;xor	bh, bh
  1652                                  	
  1653                                  	;getdata bl,fm_strat		; Restore original mem-alloc strategy
  1654                                  	;push	ds
  1655 000000EC 8A1E[DE04]              	mov     bl,[fm_strat]
  1656                                  	;pop	ds
  1657                                  
  1658 000000F0 B80158                  	mov	ax,DOS_STRATEGY_SET ; 5801h
  1659 000000F3 CD21                    	int	21h
  1660                                  
  1661 000000F5 C3                      	retn
  1662                                  
  1663                                  ; -----------------------------------------------------------------------------
  1664                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
  1665                                  ; -----------------------------------------------------------------------------
  1666                                  ; ENTRY:    None
  1667                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
  1668                                  ; ERROR:    None (ignore CF)
  1669                                  ; USES:     Flags
  1670                                  ; -----------------------------------------------------------------------------
  1671                                  
  1672                                  	; 05/06/2023
  1673                                  arena_signature_end equ 5Ah ; 'Z'
  1674                                  arena_signature equ 0
  1675                                  arena_size equ 3
  1676                                  
  1677                                  FreeUMBs:
  1678 000000F6 50                      	push	ax
  1679 000000F7 06                      	push	es
  1680                                  
  1681 000000F8 E86900                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
  1682 000000FB 721C                    	jc	short fusX
  1683                                  fus10:
  1684 000000FD 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
  1685 000000FF E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
  1686 00000102 7503                    	jnz	short fus20
  1687 00000104 E84200                  	call	freeMCB
  1688                                  fus20:	
  1689 00000107 26A00000                	mov	al,[es:arena_signature] ; mov al,[es:0]
  1690 0000010B 3C5A                    	cmp	al,arena_signature_end ; 'Z' ; 5Ah
  1691 0000010D 740A                    	jz	short fusX	; That means this was the last MCB--that's it.
  1692                                  
  1693 0000010F 8CC0                    	mov	ax,es
  1694 00000111 2603060300              	add	ax,[es:arena_size] ; add ax,[es:3]
  1695 00000116 40                      	inc	ax
  1696                                  	;mov	es,ax		; Go on forward.
  1697                                  	;jmp	short fus10
  1698                                  	; 18/07/2024
  1699 00000117 EBE4                    	jmp	short fus10
  1700                                  fusX:
  1701 00000119 07                      	pop	es
  1702 0000011A 58                      	pop	ax
  1703 0000011B C3                      	retn
  1704                                  
  1705                                  ; -----------------------------------------------------------------------------
  1706                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
  1707                                  ; -----------------------------------------------------------------------------
  1708                                  ; ENTRY:    ES:0 should point to an MCB
  1709                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
  1710                                  ; ERROR:    None
  1711                                  ; USES:     Flags
  1712                                  ; -----------------------------------------------------------------------------
  1713                                  
  1714                                  	; 05/06/2023
  1715                                  SystemPSPOwner	equ 8
  1716                                  arena_owner	equ 1
  1717                                  arena_name	equ 8
  1718                                  
  1719                                  isHideMCB:
  1720 0000011C 50                      	push	ax
  1721                                  
  1722 0000011D 26833E010008            	cmp	word [es:arena_owner],SystemPSPOwner ; If the owner's SYSTEM
  1723 00000123 7522                    	jne	short ihm_x			     ; then check for HIDDEN
  1724                                  
  1725 00000125 26A10800                	mov	ax,[es:arena_name]   ; [es:8]
  1726 00000129 3D4849                  	cmp	ax,'HI' ; 4948h
  1727 0000012C 7519                    	jne	short ihm_x
  1728 0000012E 26A10A00                	mov	ax,[es:arena_name+2] ; [es:10]
  1729 00000132 3D4444                  	cmp	ax,'DD' ; 4444h
  1730 00000135 7510                    	jne	short ihm_x
  1731 00000137 26A10C00                	mov	ax,[es:arena_name+4] ; [es:12]
  1732 0000013B 3D454E                  	cmp	ax,'EN' ; 4E45h
  1733 0000013E 7507                    	jne	short ihm_x
  1734 00000140 26A10E00                	mov	ax,[es:arena_name+6] ; [es:14]
  1735 00000144 3D2020                  	cmp	ax,'  ' ; 2020h
  1736                                  ihm_x:
  1737 00000147 58                      	pop	ax
  1738 00000148 C3                      	retn
  1739                                  
  1740                                  ; -----------------------------------------------------------------------------
  1741                                  ;*** freeMCB - marks as free the MCB at ES:0
  1742                                  ; -----------------------------------------------------------------------------
  1743                                  ; ENTRY:    ES:0 should point to an MCB
  1744                                  ; EXIT:     None; MCB free'd
  1745                                  ; ERROR:    None
  1746                                  ; USES:     AX
  1747                                  ; -----------------------------------------------------------------------------
  1748                                  
  1749                                  	; 05/06/2023
  1750                                  freeMCB:
  1751 00000149 26C70601000000          	mov	word [es:arena_owner],0	; [es:1]
  1752 00000150 B82020                  	mov	ax,'  '
  1753 00000153 26A30800                	mov	[es:arena_name+0],ax	; [es:8]
  1754 00000157 26A30A00                	mov	[es:arena_name+2],ax
  1755 0000015B 26A30C00                	mov	[es:arena_name+4],ax
  1756 0000015F 26A30E00                	mov	[es:arena_name+6],ax	; [es:14]
  1757 00000163 C3                      	retn
  1758                                  
  1759                                  ; -----------------------------------------------------------------------------
  1760                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
  1761                                  ; -----------------------------------------------------------------------------
  1762                                  ; ENTRY:  Nothing
  1763                                  ; EXIT:   AX contains 0x9FFF for most systems
  1764                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
  1765                                  ; USES:   Flags, AX
  1766                                  ; -----------------------------------------------------------------------------
  1767                                  
  1768                                  	; 05/06/2023
  1769                                  HeadUmb:
  1770                                  	; 18/07/2024 - PCDOS 7.1 - RESGROUP:02CDh
  1771                                  	;push	si
  1772                                  	;push	ds
  1773 00000164 06                      	push	es
  1774                                  
  1775 00000165 B452                    	mov	ah,DOS_GET_LISTS	; Call int 21h, function 52h...
  1776 00000167 CD21                    	int	21h	; DOS - 2+ internal - GET LIST OF LISTS
  1777                                  			; Return: ES:BX -> DOS list of lists
  1778                                  
  1779 00000169 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008Ch
  1780 0000016D 83F8FF                  	cmp	ax,0FFFFh
  1781                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
  1782                                  	;clc				; Else, it isn't.
  1783                                  	;jmp	short xhu_x
  1784                                  ;xhu_e:
  1785                                  	;stc
  1786                                  	; 05/06/2023
  1787 00000170 F5                      	cmc	; cf=0 -> cf=1
  1788                                  ;xhu_x:
  1789 00000171 07                      	pop	es
  1790                                  	; 18/07/2024
  1791                                  	;pop	ds
  1792                                  	;pop	si
  1793 00000172 C3                      	retn
  1794                                  
  1795                                  ; -----------------------------------------------------------------------------
  1796                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
  1797                                  ; -----------------------------------------------------------------------------
  1798                                  ; ENTRY:    None
  1799                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
  1800                                  ; ERROR:    None
  1801                                  ; USES:     AX, BX, fm_umb
  1802                                  ; -----------------------------------------------------------------------------
  1803                                  
  1804                                  	; 05/06/2023
  1805                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:029Dh
  1806                                  linkumb:
  1807 00000173 B80258                  	mov	ax,DOS_UMBLINK_GET ; 5802h
  1808 00000176 CD21                    	int	21h			; Current link-state is now in al
  1809                                  
  1810 00000178 08C0                    	or	al,al			; BUGBUG: proper check?
  1811 0000017A 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
  1812                                  
  1813 0000017C B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1814 0000017F BB0100                  	mov	bx,1
  1815 00000182 CD21                    	int	21h
  1816                                  lumbX:
  1817 00000184 C3                      	retn
  1818                                  
  1819                                  ;==============================================================================
  1820                                  ; STUB.ASM, MSDOS 6.0, 1991
  1821                                  ;==============================================================================
  1822                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1823                                  
  1824                                  	; 09/01/2023 - Retro DOS v4.0 (& 4.1)
  1825                                  	; 05/06/2023 - Retro DOS 4.2
  1826                                  
  1827                                  ;The Exec call has to be issued from the data segment. The reason for this 
  1828                                  ;is TSRs. When a TSR does a call to terminate and stay resident, the call
  1829                                  ;returns with all registers preserved and so all our segment registers are
  1830                                  ;still set up. However, if the TSR unloads itself later on, it still 
  1831                                  ;comes back here. In this case the segment registers and the stack are
  1832                                  ;not set up and random things can happen. The only way to setup all the 
  1833                                  ;registers is to use the cs value and this can only be done when we are in
  1834                                  ;the data segment ourselves. So, this piece of code had to be moved from
  1835                                  ;the code segment to the data segment.
  1836                                  
  1837                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02AFh
  1838                                  Issue_Exec_Call:
  1839 00000185 CD21                    	int 	21h
  1840                                  
  1841                                  ;We disable interrupts while changing the stack because there is a bug in 
  1842                                  ;some old 8088 processors where interrupts are let through while ss & sp
  1843                                  ;are being changed.
  1844                                  
  1845 00000187 FA                      	cli
  1846 00000188 0E                      	push	cs
  1847 00000189 17                      	pop	ss
  1848                                  
  1849                                  	;;mov	sp,53Eh ; MSDOS 5.0 COMMAND.COM RESGROUP:01DFh
  1850                                  	;mov	sp,60Ah	; MSDOS 6.22 COMMAND.COM RESGROUP:02B4h
  1851                                  	;mov	sp,offset DATARES:RStack ; stack is set up
  1852 0000018A BC[D604]                	mov	sp,RStack		; stack is set up
  1853                                  
  1854                                  ; 05/06/2023	
  1855                                  %if 0	
  1856                                  	; 20/04/2023
  1857                                  	;sti
  1858                                  	;push	cs
  1859                                  	;pop	ds			; ds = DATARES
  1860                                  
  1861                                  ; M009; Restore UMB state to that before Exec
  1862                                  
  1863                                  	;pushf				;    This call frees HIDDEN umb's,
  1864                                  	;call	UnHideUMBs		; <- restores the memory-allocation
  1865                                  	;popf				;    strategy and link state, as app.
  1866                                  
  1867                                  	; 09/01/2023 - Retro DOS v4.0
  1868                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:01E2h
  1869                                  	; ----------------------
  1870                                  	sti
  1871                                  	push    cs
  1872                                  	pop     ds
  1873                                  	pushf
  1874                                  	;mov	al,[cs:fInHigh]
  1875                                  	; 18/04/2023
  1876                                  	mov	al,[fInHigh]
  1877                                  	test	al,80h
  1878                                  	jz      short uhu10
  1879                                  	and     al,7Fh
  1880                                  	;;call	cs:UMBOff_Entry
  1881                                  	;call	far [cs:UMBOff_Entry]
  1882                                  	call	far [UMBOff_Entry]
  1883                                  uhu10:
  1884                                  	;and	byte [cs:fInHigh],7Fh
  1885                                  	; 18/04/2023
  1886                                  	and	byte [fInHigh],7Fh
  1887                                  	popf
  1888                                  	; ----------------------
  1889                                  
  1890                                  %endif
  1891                                  	; 05/06/2023 - Retro DOS 4.2
  1892                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02B7h
  1893 0000018D FB                      	sti
  1894 0000018E 0E                      	push	cs
  1895 0000018F 1F                      	pop	ds			; ds = DATARES
  1896                                  
  1897                                  ; M009; Restore UMB state to that before Exec
  1898                                  
  1899 00000190 9C                      	pushf				;    This call frees HIDDEN umb's,
  1900 00000191 E834FF                  	call	UnHideUMBs		; <- restores the memory-allocation
  1901 00000194 9D                      	popf				;    strategy and link state, as app
  1902                                  
  1903                                  ;We now jump to the stub trap which returns us to the resident code. All
  1904                                  ;flags are preserved by the stub code.
  1905                                  
  1906 00000195 E9C8FE                  	jmp	Exec_Trap
  1907                                  
  1908                                  ;==============================================================================
  1909                                  ; RDATA.ASM, MSDOS 6.0, 1992
  1910                                  ;==============================================================================
  1911                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1912                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1913                                  
  1914                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:02C2h (DATARES:02C2h) (*)
  1915                                  ; -----------------------------------------------------------------------------
  1916 00000198 636F78                  cox_location:	db 'cox' ; (*)	
  1917 0000019B 0000                    cox_Y_option:	dw 0     ; (*)
  1918                                  ; -----------------------------------------------------------------------------
  1919                                  
  1920                                  ;***	Message substitution blocks
  1921                                  
  1922                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:01FFh (DATARES:01FFh)
  1923                                  
  1924                                  ;BlkDevErrSubst	label	byte
  1925                                  ;BlkDevErrRw	subst	<STRING,>		; "reading" or "writing"
  1926                                  ;		subst	<CHAR,DATARES:DrvLet>	; block device drive letter
  1927                                  
  1928 0000019D 02                      BlkDevErrSubst: db	2
  1929 0000019E 0000                    BlkDevErrRw:	dw	0
  1930 000001A0 01                      		db	1
  1931 000001A1 [A301]                  		dw	DrvLet
  1932                                  
  1933 000001A3 41                      DrvLet:		db	'A'			; drive letter
  1934                                  
  1935                                  
  1936                                  ;CharDevErrSubst label	byte
  1937                                  ;CharDevErrRw	subst	<STRING,>		 ; "reading" or "writing"
  1938                                  ;CharDevErrDev	subst	<STRING,DATARES:DevName> ; character device name
  1939                                  
  1940 000001A4 02                      CharDevErrSubst: db	2
  1941 000001A5 0000                    CharDevErrRw:	dw	0
  1942 000001A7 02                      		db	2
  1943 000001A8 [B601]                  		dw	DevName
  1944                                  
  1945                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0318h
  1946                                  ;DevName:	times 8 db 0  ; db 8 dup (?),0	; device name, asciiz
  1947                                  ;		db	0
  1948                                  
  1949                                  ;NeedVolSubst	label	byte
  1950                                  ;		subst	<STRING,DATARES:VolName> ; volume name
  1951                                  ;		subst	<HEX,DATARES:VolSer+2>	 ; hi word of serial #
  1952                                  ;		subst	<HEX,DATARES:VolSer>	 ; lo word of serial #
  1953                                  
  1954 000001AA 02                      NeedVolSubst:	db	2
  1955 000001AB [B301]                  		dw	VolName
  1956 000001AD 03                      		db	3
  1957 000001AE [C101]                  		dw	VolSer+2
  1958 000001B0 03                      		db	3
  1959 000001B1 [BF01]                  		dw	VolSer
  1960                                  
  1961                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0321h
  1962                                  	; NOTE:	VolName and VolSer must be adjacent
  1963                                  ;VolName:	times 11 db 0 ; db 11 dup (?),0	; volume name
  1964                                  		; 18/07/2024
  1965 000001B3 000000                  VolName:	db	3 dup(0)
  1966 000001B6 0000000000000000        DevName:	db	8 dup(0)
  1967                                  	
  1968 000001BE 00                      		db	0
  1969 000001BF 00000000                VolSer:		dd	0			; volume serial #
  1970                                  
  1971 000001C3 00                      CDevAt:		db	0
  1972                                  
  1973                                  ;BadFatSubst	label	byte
  1974                                  ;		subst	<CHAR,DATARES:DrvLet>	; drive letter
  1975                                  
  1976 000001C4 01                      BadFatSubst:	db	1
  1977 000001C5 [A301]                  		dw	DrvLet
  1978                                  
  1979                                  ;PutBackSubst	label	byte
  1980                                  ;PutBackComSpec	subst	<STRING,>		  ; comspec string
  1981                                  ;		subst	<CHAR,DATARES:PutBackDrv> ; drive to put it in
  1982                                  
  1983 000001C7 02                      PutBackSubst:	db	2
  1984 000001C8 0000                    PutBackComSpec:	dw	0
  1985 000001CA 01                      		db	1
  1986 000001CB [CD01]                  		dw	PutBackDrv
  1987                                  
  1988 000001CD 20                      PutBackDrv:	db	' '	; db 20h	; drive letter
  1989                                  
  1990                                  ;ExecErrSubst	subst	<STRING,DATARES:SafePathBuffer>
  1991                                  
  1992 000001CE 02                      ExecErrSubst:	db	2
  1993 000001CF [0204]                  		dw	SafePathBuffer
  1994                                  
  1995 000001D1 00000000                NeedVol:	dd	0	; ptr to volume name from get ext err
  1996 000001D5 00                      ErrType: 	db	0	; critical error message style, 0=old, 1=new
  1997                                  
  1998 000001D6 00000000                Int_2e_Ret:	dd	0	; magic command executer return address
  1999 000001DA 0000                    Save_Pdb:	dw	0
  2000 000001DC 0000                    Parent:		dw	0
  2001 000001DE 00000000                OldTerm:	dd	0
  2002 000001E2 0000                    ErrCd_24:	dw	0
  2003 000001E4 0000                    Handle01:	dw	0
  2004 000001E6 00                      Loading:	db	0
  2005 000001E7 0000                    Batch:		dw	0	; assume no batch mode initially
  2006                                  
  2007                                  ;;;;SR;
  2008                                  ;;;; This flag has been added for a gross hack introduced in batch processing. 
  2009                                  ;;;;We use it to indicate that this batch file has no CR-LF before EOF and that
  2010                                  ;;;;we need to fake the CR-LF for the line to be properly processed
  2011                                  ;;;;
  2012                                  ;;;BatchEOF:	db	0
  2013                                  
  2014                                  	; Bugbug: ComSpec should be 64+3+12+1?
  2015                                  	; What's this comspec_end about?
  2016 000001E9 00<rep 40h>             ComSpec:	times 64 db 0 ; db 64 dup (0)
  2017 00000229 0000                    ComSpec_End:	dw	0
  2018                                  
  2019                                  ;Trans		label	dword
  2020                                  ;		dw	TRANGROUP:Command
  2021                                  
  2022                                  Trans:		;dw	12Ch
  2023                                  		; MSDOS 5.0 COMMAND.COM RESGROUP:0296h (DATARES:0296h)
  2024 0000022B [2C01]                  		dw	COMMAND ; 16/04/2023
  2025 0000022D 0000                    TrnSeg:		dw	0
  2026                                  
  2027 0000022F 00                      TrnMvFlg:	db	0	; set if transient portion has been moved
  2028                                  
  2029 00000230 00                      In_Batch:	db	0	; set if we are in batch processing mode
  2030 00000231 00                      Batch_Abort:	db	0	; set if user wants to abort from batch mode
  2031                                  
  2032 00000232 00                      ComDrv:		db	0	; drive spec to load autoexec and command
  2033 00000233 0000                    MemSiz:		dw	0
  2034 00000235 0000                    Sum:		dw	0
  2035 00000237 01                      ExtCom:		db	1	; for init, pretend just did an external
  2036 00000238 0000                    RetCode: 	dw	0
  2037 0000023A 00                      Crit_Err_Info:	db	0	; hold critical error flags for r,i,f
  2038                                  
  2039                                  
  2040                                  ; The echo flag needs to be pushed and popped around pipes and batch files.
  2041                                  ; We implement this as a bit queue that is shr/shl for push and pop.
  2042                                  
  2043 0000023B 01                      EchoFlag:	db	00000001b ; low bit true => echo commands
  2044 0000023C 01                      Suppress:	db	1	; used for echo, 1=echo line
  2045 0000023D 0000                    Io_Save: 	dw	0
  2046 0000023F 00                      RestDir: 	db	0
  2047 00000240 00                      PermCom: 	db	0	; true => permanent command
  2048                                  ; 05/06/2023
  2049 00000241 FFFF                    SemiPermCom:	dw      -1	; MSDOS 6.0 COMMAND.COM 
  2050                                  				; true => semi-permanent command (/K)
  2051 00000243 0000                    SingleCom:	dw	0	; true => single command version
  2052 00000245 FFFF                    VerVal:		dw	-1
  2053 00000247 00                      fFail:		db	0	; true => fail all int 24s
  2054 00000248 00                      IfFlag:		db	0	; true => IF statement in progress
  2055                                  
  2056 00000249 00                      ForFlag: 	db	0	; true => FOR statement in progress
  2057 0000024A 0000                    ForPtr:		dw	0
  2058                                  
  2059 0000024C 0000                    Nest:		dw	0	; nested batch file counter
  2060 0000024E 00                      Call_Flag:	db	0	; no CALL (batch command) in progress
  2061 0000024F 00                      Call_Batch_Flag: db	0
  2062 00000250 0000                    Next_Batch:	dw	0	; address of next batch segment
  2063 00000252 00                      NullFlag:	db	0	; flag if no command on command line
  2064 00000253 00<rep 5h>              FUCase_Addr:	times 5 db 0 ; db 5 dup (0)
  2065                                  				; buffer for file ucase address
  2066                                  ; Bugbug: don't need crit_msg_ anymore?
  2067                                  
  2068 00000258 0000                    Crit_Msg_Off:	dw	0	; saved critical error message offset
  2069 0000025A 0000                    Crit_Msg_Seg:	dw	0	; saved critical error message segment
  2070 0000025C 0000                    Dbcs_Vector_Addr: dw	0	; DBCS vector offset
  2071 0000025E 0000                    		 dw	0	; DBCS vector segment
  2072 00000260 0000                    Append_State:	dw	0	; current state of append
  2073                                  				;  (if Append_Flag is set)
  2074 00000262 00                      Append_Flag:	db	0	; set if append state is valid
  2075 00000263 00                      Re_Out_App:	db	0
  2076 00000264 00<rep 50h>             Re_OutStr:	times 64+3+13 db 0 ; db 64+3+13 dup (?)
  2077                                  
  2078                                  ; We flag the state of COMMAND in order to correctly handle the ^Cs at
  2079                                  ; various times. Here is the breakdown:
  2080                                  ;
  2081                                  ;   INITINIT	We are in the init code.
  2082                                  ;   INITSPECIAL We are in the date/time prompt
  2083                                  ;   INITCTRLC	We are handling a ^C already.
  2084                                  ;
  2085                                  ; If we get a ^C in the initialization but not in the date/time prompt, we
  2086                                  ; ignore the ^C. This is so the system calls work on nested commands.
  2087                                  ;
  2088                                  ; If we are in the date/time prompt at initialization, we stuff the user's
  2089                                  ; input buffer with a CR to pretend an empty response.
  2090                                  ;
  2091                                  ; If we are already handling a ^C, we set the carry bit and return to the user
  2092                                  ; (ourselves). We can then detect the carry set and properly retry the
  2093                                  ; operation.
  2094                                  
  2095                                  InitFlag:	;db	1
  2096 000002B4 01                      		db	INITINIT
  2097                                  
  2098                                  ; Note: these two bytes are referenced as a word
  2099 000002B5 00                      PipeFlag:	db	0
  2100 000002B6 00                      PipeFiles:	db	0
  2101                                  
  2102                                  ; (rdata.asm, msdos 6.0, 1992)
  2103                                  ; ----------------------------------------------------------------------------
  2104                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:0320h (DATARES:0320h)
  2105                                  
  2106                                  ;;SR
  2107                                  ;; Pipe1 & Pipe2 now need to store full-fledged pathnames
  2108                                  ;;
  2109                                  ;
  2110                                  ;; Bugbug: can we find any way around maintaining these
  2111                                  ;; large buffers?
  2112                                  ;
  2113                                  ;Pipe1		db	67+12 dup (?)
  2114                                  ;Pipe2		db	67+12 dup (?)
  2115                                  ;
  2116                                  ;PipePtr 	dw	?
  2117                                  ;
  2118                                  ;PipeStr 	db	129 dup (?)
  2119                                  ;
  2120                                  ;EndPipe	label	byte	; marks end of buffers; M004
  2121                                  ;
  2122                                  ;;SR;
  2123                                  ;; We can move our EndInit code into above buffers. This way, the code will
  2124                                  ;;automatically be discarded after init.
  2125                                  ;;
  2126                                  ;; M004; We overlap our code with the Pipe buffers located above by changing
  2127                                  ;; M004; the origin.
  2128                                  ;;
  2129                                  ;	ORG	Pipe1	; M004
  2130                                  ;
  2131                                  ;; Bugbug: really need a procedure header for EndInit, describing
  2132                                  ;; what it expects, what it does.
  2133                                  ;
  2134                                  
  2135                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2136                                  
  2137                                  Pipe1	equ	EndInit
  2138                                  Pipe2	equ	Pipe1+67+12
  2139                                  PipePtr	equ	Pipe2+67+12
  2140                                  PipeStr	equ	PipePtr+2
  2141                                  EndPipe	equ	PipeStr+129	; EndInit+289
  2142                                  
  2143                                  ; Bugbug: really need a procedure header for EndInit, describing
  2144                                  ; what it expects, what it does.
  2145                                  
  2146                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0320h
  2147                                  
  2148                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (compatible with MSDOS 6.22)
  2149                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:03EAh 
  2150                                  
  2151                                  EndInit:
  2152 000002B7 1E                      	push	ds
  2153 000002B8 06                      	push	es		; save segments
  2154 000002B9 0E                      	push	cs
  2155 000002BA 1F                      	pop	ds		
  2156                                  	;assume	ds:RESGROUP
  2157                                  
  2158                                  ; M004; Save size of transient here before INIT segment is deallocated
  2159                                  
  2160 000002BB 8B16[D61E]              	mov	dx,[TrnSize]		; M004
  2161                                  ;M027
  2162                                  ; These variables are also defined in the INIT segment and need to be saved
  2163                                  ;before we resize
  2164                                  ;
  2165 000002BF A1[CA1E]                	mov	ax,[OldEnv]	; Old Environment seg ;M027
  2166 000002C2 8B1E[C61E]              	mov	bx,[EnvSiz]	; Size of new environment ;M027
  2167 000002C6 8B0E[CC1E]              	mov	cx,[UsedEnv]	; Size of old environment ;M027
  2168 000002CA 50                      	push	ax		; Save all these values ;M027
  2169 000002CB 53                      	push	bx		; M027
  2170 000002CC 51                      	push	cx		; M027
  2171                                  
  2172                                  
  2173                                  ; Bugbug: push ds, pop es here.
  2174                                  	;mov	bx,ds
  2175                                  	;mov	es,bx		; es = RESGROUP
  2176                                  	; 09/01/2023
  2177 000002CD 1E                      	push	ds
  2178 000002CE 07                      	pop	es
  2179                                  
  2180                                  ;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  2181                                  ; code + data for low COMMAND
  2182                                  
  2183 000002CF 8B1E[5804]              	mov	bx,[ResSize]	; Total size of resident
  2184 000002D3 B44A                    	mov	ah,4Ah
  2185                                  	;mov	ah,SETBLOCK
  2186 000002D5 CD21                    	int	21h		; Set block to resident size
  2187                                  
  2188                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  2189                                  		; ES = segment address of block to change
  2190                                  		; BX = new size in paragraphs
  2191                                  
  2192                                  ;We check if this is for autoexec.bat (PermCom = 1). If so, we then
  2193                                  ;allocate a new batch segment, copy the old one into new batchseg and free
  2194                                  ;the old batchseg. Remember that the old batchseg was allocated on top of the
  2195                                  ;transient and we will leave a big hole if TSRs are loaded by autoexec.bat
  2196                                  ;
  2197                                  ; Bugbug: also describe why we alloc & copy batch seg BEFORE environment.
  2198                                  	
  2199 000002D7 803E[4002]01            	cmp	byte [PermCom],1 ; permanent command.com?
  2200 000002DC 7530                    	jne	short adjust_env ; no, do not free batchseg
  2201                                  
  2202 000002DE 833E[E701]00            	cmp	word [Batch],0	 ; was there a valid batchseg?
  2203 000002E3 7429                    	je	short adjust_env ; no, dont juggle
  2204                                  
  2205                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0Fh)/16 ; batchseg size
  2206                                  	; 21/01/2023
  2207 000002E5 BB0400                  	mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  2208                                  	;mov	bx,4	; 09/01/2023
  2209                                  			; (MSDOS 5.0 COMMAND COM RESGROUP:0350h)
  2210 000002E8 B448                    	mov	ah,48h
  2211                                  	;mov	ah,ALLOC
  2212 000002EA CD21                    	int	21h
  2213                                  
  2214                                  		; DOS - 2+ - ALLOCATE MEMORY
  2215                                  		; BX = number of 16-byte paragraphs desired
  2216                                  
  2217                                  ; Bugbug: I just had a thought. If DOS or SHARE or somebody leaves
  2218                                  ; a hole, the batch segment COULD already be in the ideal place. We
  2219                                  ; could be making it worse! We're second-guessing where memory
  2220                                  ; allocations go, which might not be such a great idea. Is there
  2221                                  ; a strategy, short of doing something even worse like diddling
  2222                                  ; arena headers, where we can minimize the possibility of fragmentation
  2223                                  ; under all cases? Hmm..
  2224                                  	
  2225 000002EC 7220                    	jc	short adjust_env ; no memory, use old batchseg
  2226                                  
  2227 000002EE 8EC0                    	mov	es,ax		 ; es = New batch segment
  2228 000002F0 31FF                    	xor	di,di
  2229 000002F2 31F6                    	xor	si,si
  2230                                  
  2231 000002F4 1E                      	push	ds
  2232 000002F5 8E1E[E701]              	mov	ds,[Batch]	 ; ds = Old Batch Segment
  2233                                  	;assume	ds:nothing
  2234                                  	;mov	cx,SIZE BatchSegment
  2235                                  	; 23/01/2023
  2236                                  	;mov	cx,BATCHSEGMENT.SIZE
  2237                                  	;;mov	cx,33	; 09/01/2023
  2238                                  	;		; (MSDOS 5.0 COMMAND COM RESGROUP:0364h)
  2239                                  	;
  2240                                  	;add	cx,16		 ; for the filename
  2241                                  	; 20/04/2023
  2242 000002F9 B93100                  	mov	cx,BATCHSEGMENT.SIZE+16
  2243                                  
  2244                                  	; Bugbug: 16? Shouldn't this be a common equate or something?
  2245                                  	; It's sure be bad if we copied more bytes than the batch segment
  2246                                  	; holds!
  2247                                  	
  2248 000002FC FC                      	cld
  2249 000002FD F3A4                    	rep	movsb
  2250 000002FF 1F                      	pop	ds
  2251                                  	;assume	ds:RESGROUP
  2252                                  
  2253 00000300 8CC1                    	mov	cx,es		; save new batch segment 
  2254 00000302 8E06[E701]              	mov	es,[Batch]
  2255 00000306 B449                    	mov	ah,49h
  2256                                  	;mov	ah,DEALLOC
  2257 00000308 CD21                    	int	21h		; free the old batch segment
  2258                                  
  2259                                  	; Bugbug: should we check for error?
  2260                                  
  2261 0000030A 890E[E701]              	mov	[Batch],cx	; store new batch segment address
  2262                                  
  2263                                  adjust_env:
  2264 0000030E 59                      	pop	cx		; cx = size of old env ;M027
  2265 0000030F 5B                      	pop	bx		; bx = size of new env needed ;M027
  2266 00000310 5D                      	pop	bp		; bp = old env seg ;M027
  2267                                  
  2268                                  ;Allocate the correct size for the environment
  2269                                  
  2270 00000311 B448                    	mov	ah,48h
  2271                                  	;mov	ah,ALLOC
  2272 00000313 CD21                    	int	21h		; get memory
  2273 00000315 7264                    	jc	short nomem_err	; out of memory,signal error
  2274                                  	
  2275                                  	; Bugbug: why not continue, leaving environment where it is?
  2276                                  
  2277 00000317 A3[DC03]                	mov	[EnvirSeg],ax	; Store new environment segment
  2278                                  	;;mov	[ds:2Ch],ax
  2279                                  	;mov	[2Ch],ax
  2280                                  	;mov	[PDB_Environ],ax ; Put new env seg in PSP
  2281 0000031A A32C00                  	mov	[PDB.ENVIRON],ax
  2282 0000031D 8EC0                    	mov	es,ax		; es = address of allocated memory
  2283                                  	;assume	es:nothing
  2284                                  
  2285                                  ;Copy the environment to the newly allocated segment
  2286                                  
  2287 0000031F 1E                      	push	ds
  2288 00000320 8EDD                    	mov	ds,bp		; ds = Old environment segment
  2289                                  	;assume	ds:nothing
  2290                                  
  2291 00000322 31F6                    	xor	si,si
  2292 00000324 89F7                    	mov	di,si		; Start transfer from 0
  2293                                  
  2294 00000326 FC                      	cld
  2295 00000327 F3A4                    	rep	movsb		; Do the copy
  2296                                  
  2297 00000329 1F                      	pop	ds		; ds = RESGROUP
  2298                                  	;assume	ds:RESGROUP
  2299                                  
  2300                                  ; We have to free the old environment block if it was allocated by INIT
  2301                                  
  2302                                  ; Bugbug: is this only for the case when we were NOT passed an environment,
  2303                                  ; or does it also apply to passed environments?
  2304                                  
  2305                                  ;M036
  2306                                  ; Free up old env segment always because this is a copy passed by Exec and
  2307                                  ; takes up memory that is never used
  2308                                  
  2309                                  ;M044
  2310                                  ; Go back to the old strategy of not freeing the environment. Freeing it leaves
  2311                                  ; a hole behind that Ventura does not like. Basically, Ventura gives strange
  2312                                  ; errors if it gets a memory alloc that it is below its load segment. The
  2313                                  ; freed environment creates a large enough hole for some of its allocs to fit
  2314                                  ; in
  2315                                  
  2316                                  	;cmp	byte [AllocedEnv],0 ; has env been allocated by INIT?
  2317                                          ;je	short no_free	    ; no, do not free it
  2318                                  	; 21/01/2023
  2319                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0398h
  2320 0000032A 803E[8C1E]00            	cmp	byte [AllocedEnv],0 ; flag - old environment segment
  2321 0000032F 7506                    	jne	short no_free
  2322                                  
  2323 00000331 8EC5                    	mov	es,bp
  2324 00000333 B449                    	mov	ah,49h
  2325                                  	;mov	ah,DEALLOC
  2326 00000335 CD21                    	int	21h		    ; Free it
  2327                                  no_free:
  2328                                  
  2329                                  ; M004; Start of changes
  2330                                  
  2331                                  ; Move the transient now. We will allocate the biggest block available
  2332                                  ; now and move the transient to the top of the block. We will then
  2333                                  ; deallocate this block. When the resident starts executing, it will
  2334                                  ; hopefully allocate this block again and find the transient intact.
  2335                                  
  2336 00000337 C606[2F02]01            	mov	byte [TrnMvFlg],1 ; Indicate that transient has been moved
  2337 0000033C 06                      	push	es
  2338                                  	;;mov	si,offset ResGroup:TranStart
  2339                                  	; 09/01/2023
  2340                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM RESGROUP:03ABh
  2341                                  	; 05/06/2023
  2342                                  	;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM RESGROUP:0475h
  2343 0000033D BE5025                  	mov	si,TRANSTART	; (End of the resident portion)
  2344                                  	;mov	di,0
  2345 00000340 31FF                    	xor	di,di ; 0
  2346                                  	;;mov	cx,offset TranGroup:TranSpaceEnd ; size to move
  2347                                  	;mov	cx,98C5h
  2348                                  	; 05/06/2023 - MSDOS 6.22 COMMAND.COM RESGROUP:047Bh
  2349                                  	;mov	cx,0AF95h	; TRANSIENT portion size
  2350 00000342 B9A7AA                  	mov	cx,TRANSPACEEND
  2351                                  	
  2352                                  ; Find the largest block available
  2353                                  
  2354 00000345 BBFFFF                  	mov	bx,0FFFFh
  2355 00000348 B448                    	mov	ah,48h
  2356                                  	;mov	ah,ALLOC
  2357 0000034A CD21                    	int	21h
  2358                                  
  2359                                  ; dx = size of transient saved previously 
  2360                                  
  2361 0000034C 39D3                    	cmp	bx,dx		; enough memory?
  2362 0000034E 722B                    	jb	short nomem_err	; not enough memory for transient
  2363                                  
  2364 00000350 B448                    	mov	ah,48h
  2365                                  	;mov	ah,ALLOC
  2366 00000352 CD21                    	int	21h		; get the largest block
  2367 00000354 7225                    	jc	short nomem_err	; something is really screwed up
  2368                                  
  2369 00000356 50                      	push	ax		; save memory address
  2370 00000357 01D8                    	add	ax,bx		; ax = top of my memory block
  2371 00000359 29D0                    	sub	ax,dx		; less size of transient
  2372 0000035B A3[2D02]                	mov	[TrnSeg],ax	; save transient segment
  2373 0000035E 8EC0                    	mov	es,ax		;
  2374 00000360 58                      	pop	ax		; restore our seg addr
  2375                                  
  2376                                  ; Everything is set for a move. We need to move in the reverse direction to
  2377                                  ; make sure we dont overwrite ourselves while copying
  2378                                  
  2379 00000361 01CE                    	add	si,cx
  2380 00000363 4E                      	dec	si
  2381 00000364 01CF                    	add	di,cx
  2382 00000366 4F                      	dec	di
  2383 00000367 FD                      	std
  2384 00000368 F3A4                    	rep	movsb
  2385 0000036A FC                      	cld
  2386                                  
  2387                                  ; Now we have to free up this block so that resident can get hold of it
  2388                                  
  2389 0000036B 8EC0                    	mov	es,ax
  2390 0000036D B449                    	mov	ah,49h
  2391                                  	;mov	ah,DEALLOC
  2392 0000036F CD21                    	int	21h		; release the memory block
  2393                                  
  2394                                  ; M004; End of changes
  2395                                  
  2396                                  	;mov	InitFlag,FALSE	; indicate INIT is done
  2397                                  	; 09/01/2023
  2398 00000371 C606[B402]00            	mov	byte [InitFlag],0	
  2399                                  
  2400 00000376 07                      	pop	es
  2401 00000377 1F                      	pop	ds
  2402                                  	;assume	ds:nothing
  2403                                  	
  2404                                  	; Bugbug: did we need to save & restore seg reg's during EndInit?
  2405                                  	
  2406 00000378 E903FD                  	jmp	LodCom_Trap	; allocate transient
  2407                                  
  2408                                  nomem_err:
  2409                                  
  2410                                  ;We call the error routine which will never return. It will either exit
  2411                                  ;with an error ( if not the first COMMAND ) or just hang after an error 
  2412                                  ;message ( if first COMMAND )
  2413                                  
  2414 0000037B E97A1A                  	jmp	Alloc_error
  2415                                  
  2416                                  ;EndCodeInit:	; label	byte		; M004
  2417                                  
  2418                                  	; 16/04/2023
  2419                                  	EndCodeInit equ $
  2420                                  
  2421                                  ;; M004; Check if the EndInit code will fit into the Pipe buffers above.
  2422                                  ;; M004; If not, we signal an assembly error
  2423                                  ;
  2424                                  ;IF2
  2425                                  ;	IF ($ GT EndPipe)
  2426                                  ;		.err
  2427                                  ;		%out	"ENDINIT CODE TOO BIG"
  2428                                  ;	ENDIF
  2429                                  ;ENDIF
  2430                                  
  2431                                  ;; M004; Set the origin back to what it was at the end of the buffers
  2432                                  ;;
  2433                                  ;		ORG	EndPipe		; M004
  2434                                  
  2435                                  ; 09/01/2023
  2436                                  ; MSDOS 5.0 COMMAND.COM - CODERES:03EDh
  2437                                  ; 05/06/2023
  2438                                  ; MSDOS 6.22 COMMAND.COM - CODERES:04B7h
  2439                                  ;	times 84 db 0	; db (EndPipe-EndCodeInit) dup(0)
  2440                                  
  2441                                  ; 16/04/2023
  2442                                  	FillBytes equ EndPipe - EndCodeInit
  2443                                  
  2444                                  ;%if EndCodeInit<EndPipe ; if (EndCodeInit < (EndInit+289))
  2445                                  ; 16/04/2023
  2446                                  %if FillBytes>0
  2447                                  	;times EndPipe - EndCodeInit db 0
  2448 0000037E 00<rep 5Ah>             	times FillBytes db 0
  2449                                  %endif
  2450                                  
  2451                                  ; 09/01/2023 - Retrodos v4.0 (& v4.1)
  2452                                  ; MSDOS 5.0 COMMAND.COM - CODERES:0441h ; EndInit+289
  2453                                  
  2454                                  ; 05/06/2023 - Retrodos v4.2
  2455                                  ; MSDOS 6.22 COMMAND.COM - CODERES:050Bh ; EndInit+289
  2456                                  
  2457                                  ;InPipePtr	dw	offset DATARES:Pipe1	; 320h
  2458                                  ;OutPipePtr	dw	offset DATARES:Pipe2	; 36Fh
  2459                                  
  2460 000003D8 [B702]                  InPipePtr:	dw	Pipe1 ;; 320h for MSDOS 5.0 COMMAND.COM
  2461                                  			      ; 3EAh for MSDOS 6.22 COMMAND.COM
  2462 000003DA [0603]                  OutPipePtr:	dw	Pipe2 ;; 36Fh for MSDOS 5.0 COMMAND.COM
  2463                                  			      ; 439h for MSDOS 6.22 COMMAND.COM
  2464                                  
  2465                                  Exec_Block:	; label	byte	; the data block for exec calls
  2466 000003DC 0000                    EnvirSeg:	dw	0
  2467                                  Com_Ptr:	; label	dword
  2468 000003DE 8000                    		dw	80h	; point at unformatted parameters
  2469 000003E0 0000                    		dw	0
  2470                                  Com_Fcb1:	; label	dword
  2471 000003E2 5C00                    		dw	5Ch
  2472 000003E4 0000                    		dw	0
  2473                                  Com_Fcb2:	; label	dword
  2474 000003E6 6C00                    		dw	6Ch
  2475 000003E8 0000                    		dw	0
  2476                                  
  2477                                  ; variables passed to transient
  2478                                  TranVars:	; label	byte
  2479                                  		;dw	offset DATARES:HeadFix_Trap
  2480 000003EA [9200]                  		dw	HeadFix_Trap
  2481 000003EC 0000                    MySeg:		dw	0	; put our own segment here
  2482 000003EE 0000                    LTpa:		dw	0	; will store tpa segment here
  2483 000003F0 2F                      RSwitChar:	db	"/"
  2484 000003F1 5C                      RDirChar:	db	"\"
  2485                                  		;dw	offset DATARES:Issue_Exec_Call
  2486 000003F2 [8501]                  		dw	Issue_Exec_Call
  2487 000003F4 0000                    MySeg1:		dw	0
  2488                                  		;dw	offset DATARES:RemCheck_Trap
  2489 000003F6 [6A00]                  		dw	RemCheck_Trap
  2490 000003F8 0000                    MySeg2:		dw	0
  2491 000003FA 0000                    ResTest: 	dw	0
  2492 000003FC 0000                    Res_Tpa:	dw	0	; original tpa (not rounded to 64k)
  2493                                  
  2494                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  2495 000003FE 0000                    Y_Flag:		dw	0
  2496                                  
  2497                                  TranVarEnd:	; label	byte
  2498                                  
  2499 00000400 0000                    OldErrNo:	dw	0
  2500                                  
  2501                                  ;* NOTE: MsgBuffer and SafePathBuffer use the same memory.
  2502                                  ;  MsgBuffer is only used while a command is being executed.
  2503                                  ;  SafePathBuffer is no longer needed, since it is used for
  2504                                  ;  unsuccessful program launches.
  2505                                  
  2506                                  MsgBuffer:	; label	byte	; buffer for messages from disk
  2507                                  SafePathBuffer: ; label	byte	; resident pathname for EXEC
  2508                                  	;Bugbug: Why so big a buffer?
  2509                                  		;db	64+3+13 dup (0)	; path + 'd:\' 'file.ext' + null
  2510 00000402 00<rep 50h>             		times	64+3+13 db 0		
  2511                                  
  2512                                  LENMSGORPATHBUF	equ $ - MsgBuffer
  2513                                  
  2514 00000452 00000000                Int2fHandler:	dd	0	; address of next int 2f handler
  2515 00000456 0000                    ResMsgEnd:	dw	0	; holds offset of msg end (end of resident)
  2516                                  
  2517                                  ;SR;
  2518                                  ; The three vars below have been added for a pure COMMAND.COM
  2519                                  
  2520 00000458 0000                    ResSize:	dw	0
  2521                                  
  2522                                  ;SR;
  2523                                  ; Moved the stack here from the code segment
  2524                                  ;
  2525                                  ; bugbug: Why this odd stack size? And what should stack size be?
  2526                                  	
  2527                                  		;db	(80h - 3) dup (?)
  2528                                  align 2
  2529 0000045A 00<rep 7Ch>             		times	124 db 0		
  2530                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:053Eh (offset RStack)
  2531                                  ; 05/06/2023
  2532                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:060Ah (offset RStack)
  2533                                  RStack:		; label	word
  2534 000004D6 0000                    OldDS:		dw	0	; keeps old ds value when jumping to
  2535                                  				; resident code segments
  2536                                  ;LoadHiFlg	db	0	; Flag set to 1 if UMB loading enabled ; M003
  2537                                  
  2538                                  ; include highvar.inc		; Add variables for 6.0 loadhigh functionality
  2539                                  ; -------------------------------
  2540                                  
  2541                                  ; fInHigh  - Is set to 1 during HideUMBs(), and back to zero in UnHideUMBs().
  2542                                  ; fUmbTiny - Is set to 1 if the user has specified /S on the command line.
  2543                                  ; SegLoad  - Segment address for first UMB specified; set automatically.
  2544                                  ; UmbLoad  - The load UMB number; for example, this is 3 if the user has
  2545                                  ;            given a command-line like "/L:3,500;4"
  2546                                  ; UmbUsed  - An array of characters, each of which is 1 if the UMB
  2547                                  ;            matching its index number was specified on the command-line;
  2548                                  ;            for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
  2549                                  ;            will be set to 1. All others will be set to 0.
  2550                                  ; UmbSize  - An array of words, each of which is interpreted as a size
  2551                                  ;            specified by the user for a UMB (in the above example, all
  2552                                  ;            elements would be zero save UmbSize[3], which would be 500.
  2553                                  ; fm_umb   - Set to the old UMB link-state (0x80 or 0x00)
  2554                                  ; fm_strat - Set to the old memory-allocation strategy (0$00000???)
  2555                                  ; fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
  2556                                  ;            for details).
  2557                                  
  2558                                  ; - MSDOS 6.0 COMMAND.COM -
  2559                                  ;; To keep track of which UMBs were specified on the DH/LH command lines, and
  2560                                  ;; to keep track of the minimum sizes given for each, there're two arrays kept
  2561                                  ;; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
  2562                                  ;; big. 16 should be around 14 too many for most users, so there's no expected
  2563                                  ;; space problem (it's just such a nice round number, eh?).
  2564                                  
  2565                                  ; 05/06/2023
  2566                                  MAXUMB	equ	16
  2567                                  
  2568                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2569                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0540h (DATARES:0540h)
  2570                                  
  2571 000004D8 00                      fInHigh:	db	0
  2572                                  
  2573                                  ; MSDOS 6.0 COMMAND.COM
  2574                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2575                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:060Dh (DATARES:060Dh)
  2576 000004D9 00                      fUmbTiny:	db	0
  2577 000004DA 0000                    SegLoad:	dw	0
  2578 000004DC 00                      UmbLoad:	db	0
  2579                                  
  2580                                  ; 19/07/2024
  2581                                  ; PCDOS 7.1 COMMAND.COM
  2582                                  %if 0
  2583                                  UmbUsed:	times MAXUMB db 0 ; db MAXUMB dup (?)
  2584                                  UmbSize:	times MAXUMB dw 0 ; dw MAXUMB dup (?)
  2585                                  %else
  2586                                  	; 19/07/2024 - Retro DOS v5.0 (& v4.2) COMMAND.COM
  2587                                  	UmbUsed equ MsgBuffer	; 16 bytes
  2588                                  	UmbSize equ UmbUsed+MAXUMB ; UmbUsed+16; 16 words
  2589                                  %endif
  2590                                  
  2591 000004DD 00                      fm_umb:		db	0
  2592 000004DE 00                      fm_strat:	db	0
  2593 000004DF 00                      fm_argc:	db	0
  2594                                  
  2595                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
  2596                                  ; UmbLoad is set to the UMB number given.
  2597                                  
  2598                                  ;*** MESSAGES
  2599                                  ;    and other translatable text
  2600                                  
  2601                                  ; include comrmsg.inc	; M00
  2602                                  ; ------------------------------
  2603                                  
  2604                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2605                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0541h (DATARES:0541h)
  2606                                  
  2607                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2608                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0644h (DATARES:0644h)
  2609                                  
  2610 000004E0 41                      ABORT_CHAR:	db 'A'
  2611 000004E1 52                      RETRY_CHAR:	db 'R'
  2612 000004E2 49                      IGNORE_CHAR:	db 'I'
  2613 000004E3 46                      FAIL_CHAR:	db 'F'
  2614 000004E4 59                      YES_CHAR:	db 'Y'
  2615 000004E5 4E                      NO_CHAR:	db 'N'
  2616 000004E6 05                      REQ_ABORT:	db 5
  2617 000004E7 41626F7274              		db 'Abort'
  2618 000004EC 07                      REQ_RETRY:	db 7
  2619 000004ED 2C205265747279          		db ', Retry'
  2620 000004F4 08                      REQ_IGNORE:	db 8
  2621 000004F5 2C2049676E6F7265        		db ', Ignore'
  2622 000004FD 06                      REQ_FAIL:	db 6
  2623 000004FE 2C204661696C            		db ', Fail'
  2624 00000504 01                      REQ_END:	db 1
  2625 00000505 3F                      		db '?'
  2626 00000506 08                      MREAD:		db 8
  2627 00000507 72656164696E6700        		db 'reading', 0
  2628 0000050F 08                      MWRITE:		db 8
  2629 00000510 77726974696E6700        		db 'writing', 0
  2630 00000518 0E                      MDRIVE:		db 14
  2631 00000519 202531206472697665-     		db ' %1 drive %2',0Dh,0Ah
  2631 00000522 2025320D0A         
  2632 00000527 0F                      MDEVICE:	db 15
  2633 00000528 202531206465766963-     		db ' %1 device %2',0Dh,0Ah
  2633 00000531 652025320D0A       
  2634 00000537 26                      MVOLSERIAL:	db 38
  2635 00000538 506C6561736520696E-     		db 'Please insert volume %1 serial %2-%3',0Dh,0Ah
  2635 00000541 7365727420766F6C75-
  2635 0000054A 6D6520253120736572-
  2635 00000553 69616C2025322D2533-
  2635 0000055C 0D0A               
  2636 0000055E 25                      BADFATMSG:	db 37
  2637 0000055F 46696C6520616C6C6F-     		db 'File allocation table bad, drive %1',0Dh,0Ah
  2637 00000568 636174696F6E207461-
  2637 00000571 626C65206261642C20-
  2637 0000057A 64726976652025310D-
  2637 00000583 0A                 
  2638 00000584 15                      COMBAD:		db 21
  2639 00000585 496E76616C69642043-     		db 'Invalid COMMAND.COM',0Dh,0Ah
  2639 0000058E 4F4D4D414E442E434F-
  2639 00000597 4D0D0A             
  2640 0000059A 21                      PUTBACKMSG:	db 33
  2641 0000059B 496E73657274206469-     		db 'Insert disk with %1 in drive %2',0Dh,0Ah
  2641 000005A4 736B20776974682025-
  2641 000005AD 3120696E2064726976-
  2641 000005B6 652025320D0A       
  2642 000005BC 21                      PROMPT:		db 33
  2643 000005BD 507265737320616E79-     		db 'Press any key to continue . . .',0Dh,0Ah
  2643 000005C6 206B657920746F2063-
  2643 000005CF 6F6E74696E7565202E-
  2643 000005D8 202E202E0D0A       
  2644 000005DE 1C                      ENDBATMES:	db 28
  2645 000005DF 0D0A                    		db 0Dh,0Ah
  2646 000005E1 5465726D696E617465-     		db 'Terminate batch job (Y/N)?'
  2646 000005EA 206261746368206A6F-
  2646 000005F3 622028592F4E293F   
  2647 000005FB 13                      EXECEMES:	db 19
  2648 000005FC 43616E6E6F74206578-     		db 'Cannot execute %1',0Dh,0Ah
  2648 00000605 65637574652025310D-
  2648 0000060E 0A                 
  2649 0000060F 13                      EXEBAD:		db 19
  2650 00000610 4572726F7220696E20-     		db 'Error in EXE file',0Dh,0Ah
  2650 00000619 4558452066696C650D-
  2650 00000622 0A                 
  2651 00000623 22                      TOOBIG:		db 34
  2652 00000624 50726F6772616D2074-     		db 'Program too big to fit in memory',0Dh,0Ah
  2652 0000062D 6F6F2062696720746F-
  2652 00000636 2066697420696E206D-
  2652 0000063F 656D6F72790D0A     
  2653 00000646 16                      NOHANDMES:	db 22
  2654 00000647 0D0A                    		db 0Dh,0Ah
  2655 00000649 4E6F20667265652066-     		db 'No free file handles'
  2655 00000652 696C652068616E646C-
  2655 0000065B 6573               
  2656 0000065D 1A                      RBADNAM:	db 26
  2657 0000065E 42616420436F6D6D61-     		db 'Bad Command or file name',0Dh,0Ah
  2657 00000667 6E64206F722066696C-
  2657 00000670 65206E616D650D0A   
  2658                                  ACCDENIED:	; 14/01/2023
  2659                                  		; 10/01/2023
  2660                                  ACCDEN:		;db 14
  2661                                  		;db 'Access denied '
  2662                                  		; 19/07/2024 - PCDOS 7.1
  2663 00000678 0D                      		db 13
  2664 00000679 416363657373206465-     		db 'Access denied'
  2664 00000682 6E696564           
  2665 00000686 19                      BMEMMES:	db 25
  2666 00000687 0D0A4D656D6F727920-     		db 0Dh,0Ah,'Memory allocation error'
  2666 00000690 616C6C6F636174696F-
  2666 00000699 6E206572726F72     
  2667 000006A0 26                      HALTMES:	db 38
  2668 000006A1 0D0A                    		db 0Dh,0Ah
  2669 000006A3 43616E6E6F74206C6F-     		db 'Cannot load COMMAND, system halted',0Dh,0Ah
  2669 000006AC 616420434F4D4D414E-
  2669 000006B5 442C2073797374656D-
  2669 000006BE 2068616C7465640D0A 
  2670 000006C7 21                      FRETMES:	db 33
  2671 000006C8 0D0A                    		db 0Dh,0Ah,
  2672 000006CA 43616E6E6F74207374-     		db 'Cannot start COMMAND, exiting',0Dh,0Ah
  2672 000006D3 61727420434F4D4D41-
  2672 000006DC 4E442C206578697469-
  2672 000006E5 6E670D0A           
  2673 000006E9 2E                      PATRICIDE:	db 46
  2674 000006EA 0D0A                    		db 0Dh,0Ah
  2675 000006EC 546F70206C6576656C-     		db 'Top level process aborted, cannot continue'
  2675 000006F5 2070726F6365737320-
  2675 000006FE 61626F727465642C20-
  2675 00000707 63616E6E6F7420636F-
  2675 00000710 6E74696E7565       
  2676 00000716 0D0A                    		db 0Dh,0Ah
  2677 00000718 02                      NEWLINE:	db 2
  2678 00000719 0D0A                    		db 0Dh, 0Ah
  2679                                  
  2680                                  ; 10/01/2023
  2681                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:077Dh
  2682                                  ; 05/06/2023
  2683                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0880h
  2684                                  
  2685 0000071B [FF0B]                  MsgPtrLists:	dw EXTMSGPTRS		; extended error messages
  2686 0000071D 0100                    		dw 1
  2687 0000071F [BA09]                  		dw PARSMSGPTRS		; parse	error messages
  2688 00000721 0100                    		dw 1
  2689 00000723 [FF0B]                  		dw EXTMSGPTRS		; critical error messages
  2690 00000725 0100                    		dw 1
  2691 00000727 0000                    		dw 0			; File system error messages
  2692 00000729 0000                    		dw 0			; are not supported.
  2693 0000072B [8800]                  		dw MsgRetrv_Trap	; disk retriever routine
  2694 0000072D 0000                    MySeg3:		dw 0			; segment of retriever routine
  2695                                  
  2696                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0791h
  2697                                  ; 05/06/2023
  2698                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0894h
  2699                                  
  2700 0000072F 13                      CRMSG0:		db 19
  2701 00000730 57726974652070726F-     		db 'Write protect error'
  2701 00000739 74656374206572726F-
  2701 00000742 72                 
  2702 00000743 0C                      CRMSG1:		db 12
  2703 00000744 496E76616C69642075-     		db 'Invalid unit'
  2703 0000074D 6E6974             
  2704 00000750 09                      CRMSG2:		db 9
  2705 00000751 4E6F74207265616479      		db 'Not ready'
  2706 0000075A 16                      CRMSG3:		db 22
  2707 0000075B 496E76616C69642064-     		db 'Invalid device request'
  2707 00000764 657669636520726571-
  2707 0000076D 75657374           
  2708 00000771 0A                      CRMSG4:		db 10
  2709 00000772 44617461206572726F-     		db 'Data error'
  2709 0000077B 72                 
  2710 0000077C 21                      CRMSG5:		db 33
  2711 0000077D 496E76616C69642064-     		db 'Invalid device request parameters'
  2711 00000786 657669636520726571-
  2711 0000078F 756573742070617261-
  2711 00000798 6D6574657273       
  2712 0000079E 0A                      CRMSG6:		db 10
  2713 0000079F 5365656B206572726F-     		db 'Seek error'
  2713 000007A8 72                 
  2714 000007A9 12                      CRMSG7:		db 18
  2715 000007AA 496E76616C6964206D-     		db 'Invalid media type'
  2715 000007B3 656469612074797065 
  2716 000007BC 10                      CRMSG8:		db 16
  2717 000007BD 536563746F72206E6F-     		db 'Sector not found'
  2717 000007C6 7420666F756E64     
  2718 000007CD 1A                      CRMSG9:		db 26
  2719 000007CE 5072696E746572206F-     		db 'Printer out of paper error'
  2719 000007D7 7574206F6620706170-
  2719 000007E0 6572206572726F72   
  2720 000007E8 11                      CRMSG10:	db 17
  2721 000007E9 577269746520666175-     		db 'Write fault error'
  2721 000007F2 6C74206572726F72   
  2722 000007FA 10                      CRMSG11:	db 16
  2723 000007FB 52656164206661756C-     		db 'Read fault error'
  2723 00000804 74206572726F72     
  2724 0000080B 0F                      CRMSG12:	db 15
  2725 0000080C 47656E6572616C2066-     		db 'General failure'
  2725 00000815 61696C757265       
  2726 0000081B 11                      CRMSG13:	db 17
  2727 0000081C 53686172696E672076-     		db 'Sharing violation'
  2727 00000825 696F6C6174696F6E   
  2728 0000082D 0E                      CRMSG14:	db 14
  2729 0000082E 4C6F636B2076696F6C-     		db 'Lock violation'
  2729 00000837 6174696F6E         
  2730 0000083C 13                      CRMSG15:	db 19
  2731 0000083D 496E76616C69642064-     		db 'Invalid disk change'
  2731 00000846 69736B206368616E67-
  2731 0000084F 65                 
  2732 00000850 0F                      CRMSG16:	db 15
  2733 00000851 46434220756E617661-     		db 'FCB unavailable'
  2733 0000085A 696C61626C65       
  2734 00000860 19                      CRMSG17:	db 25
  2735 00000861 53797374656D207265-     		db 'System resource exhausted'
  2735 0000086A 736F75726365206578-
  2735 00000873 68617573746564     
  2736 0000087A 12                      CRMSG18:	db 18
  2737 0000087B 436F64652070616765-     		db 'Code page mismatch'
  2737 00000884 206D69736D61746368 
  2738 0000088D 0C                      CRMSG19:	db 12
  2739 0000088E 4F7574206F6620696E-     		db 'Out of input'
  2739 00000897 707574             
  2740 0000089A 17                      CRMSG20:	db 23
  2741 0000089B 496E73756666696369-     		db 'Insufficient disk space'
  2741 000008A4 656E74206469736B20-
  2741 000008AD 7370616365         
  2742                                  
  2743                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0914h
  2744                                  ; 05/06/2023
  2745                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0A17h
  2746                                  
  2747 000008B2 [2F07]                  CRITMSGPTRS:	dw CRMSG0
  2748 000008B4 [4307]                  		dw CRMSG1
  2749 000008B6 [5007]                  		dw CRMSG2
  2750 000008B8 [5A07]                  		dw CRMSG3
  2751 000008BA [7107]                  		dw CRMSG4
  2752 000008BC [7C07]                  		dw CRMSG5
  2753 000008BE [9E07]                  		dw CRMSG6
  2754 000008C0 [A907]                  		dw CRMSG7
  2755 000008C2 [BC07]                  		dw CRMSG8
  2756 000008C4 [CD07]                  		dw CRMSG9
  2757 000008C6 [E807]                  		dw CRMSG10
  2758 000008C8 [FA07]                  		dw CRMSG11
  2759 000008CA [0B08]                  		dw CRMSG12
  2760 000008CC [1B08]                  		dw CRMSG13
  2761 000008CE [2D08]                  		dw CRMSG14
  2762 000008D0 [3C08]                  		dw CRMSG15
  2763 000008D2 [5008]                  		dw CRMSG16
  2764 000008D4 [6008]                  		dw CRMSG17
  2765 000008D6 [7A08]                  		dw CRMSG18
  2766 000008D8 [8D08]                  		dw CRMSG19
  2767 000008DA [9A08]                  		dw CRMSG20
  2768                                  
  2769                                  		; 14/01/2023
  2770                                  ;DataresEnd:	;; MSDOS 5.0 COMMAND.COM - DATARES:093Eh (RESGROUP:093Eh)
  2771                                  		; 05/06/2023
  2772                                  DataresEnd:	; MSDOS 6.22 COMMAND.COM - DATARES:0A41h (RESGROUP:0A41h)
  2773                                  
  2774 000008DC 13                      PAERRMSG0:	db 19
  2775 000008DD 546F6F206D616E7920-     		db 'Too many parameters'
  2775 000008E6 706172616D65746572-
  2775 000008EF 73                 
  2776 000008F0 1A                      PAERRMSG1:	db 26
  2777 000008F1 526571756972656420-     		db 'Required parameter missing'
  2777 000008FA 706172616D65746572-
  2777 00000903 206D697373696E67   
  2778 0000090B 0E                      PAERRMSG2:	db 14
  2779 0000090C 496E76616C69642073-     		db 'Invalid switch'
  2779 00000915 7769746368         
  2780 0000091A 0F                      PAERRMSG3:	db 15
  2781 0000091B 496E76616C6964206B-     		db 'Invalid keyword'
  2781 00000924 6579776F7264       
  2782 0000092A 01                      PAERRMSG4:	db 1
  2783 0000092B 20                      		db 20h
  2784 0000092C 24                      PAERRMSG5:	db 36
  2785 0000092D 506172616D65746572-     		db 'Parameter value not in allowed range'
  2785 00000936 2076616C7565206E6F-
  2785 0000093F 7420696E20616C6C6F-
  2785 00000948 7765642072616E6765 
  2786                                  PAERRMSG6:	; 10/01/2023
  2787 00000951 1B                      PAERRMSG7:	db 27
  2788 00000952 506172616D65746572-     		db 'Parameter value not allowed'
  2788 0000095B 2076616C7565206E6F-
  2788 00000964 7420616C6C6F776564 
  2789                                  ;PAERRMSG7:	db 27
  2790                                  ;		db 'Parameter value not allowed'
  2791 0000096D 1C                      PAERRMSG8:	db 28
  2792 0000096E 506172616D65746572-     		db 'Parameter format not correct'
  2792 00000977 20666F726D6174206E-
  2792 00000980 6F7420636F72726563-
  2792 00000989 74                 
  2793 0000098A 11                      PAERRMSG9:	db 17
  2794 0000098B 496E76616C69642070-     		db 'Invalid parameter'
  2794 00000994 6172616D65746572   
  2795 0000099C 1D                      PAERRMSG10:	db 29
  2796 0000099D 496E76616C69642070-     		db 'Invalid parameter combination'
  2796 000009A6 6172616D6574657220-
  2796 000009AF 636F6D62696E617469-
  2796 000009B8 6F6E               
  2797                                  
  2798                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0A38h
  2799                                  ; 05/06/2023
  2800                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0B3Bh
  2801                                  
  2802 000009BA [DC08]                  PARSMSGPTRS:	dw PAERRMSG0
  2803 000009BC [F008]                  		dw PAERRMSG1
  2804 000009BE [0B09]                  		dw PAERRMSG2
  2805 000009C0 [1A09]                  		dw PAERRMSG3
  2806 000009C2 [2A09]                  		dw PAERRMSG4
  2807 000009C4 [2C09]                  		dw PAERRMSG5
  2808 000009C6 [5109]                  		dw PAERRMSG6
  2809 000009C8 [5109]                  		dw PAERRMSG7
  2810 000009CA [6D09]                  		dw PAERRMSG8
  2811 000009CC [8A09]                  		dw PAERRMSG9
  2812 000009CE [9C09]                  		dw PAERRMSG10
  2813                                  ; 21/04/2023
  2814                                  NUMPARSMSGS equ ($-PARSMSGPTRS)>>1 ; 14/01/2023
  2815                                  
  2816 000009D0 10                      INVLFUNCT:	db 16
  2817 000009D1 496E76616C69642066-     		db 'Invalid function'
  2817 000009DA 756E6374696F6E     
  2818 000009E1 0E                      FNOTFOUND:	db 14
  2819 000009E2 46696C65206E6F7420-     		db 'File not found'
  2819 000009EB 666F756E64         
  2820 000009F0 0E                      PNOTFOUND:	db 14
  2821 000009F1 50617468206E6F7420-     		db 'Path not found'
  2821 000009FA 666F756E64         
  2822 000009FF 13                      TOOMANYOF:	db 19
  2823 00000A00 546F6F206D616E7920-     		db 'Too many open files'
  2823 00000A09 6F70656E2066696C65-
  2823 00000A12 73                 
  2824                                  ; 14/01/2023
  2825                                  ;ACCDEN:	; 10/01/2023
  2826                                  ;ACCDENIED:	db 14
  2827                                  ;		db 'Access denied '
  2828 00000A13 0E                      INVHANDLE:	db 14
  2829 00000A14 496E76616C69642068-     		db 'Invalid handle'
  2829 00000A1D 616E646C65         
  2830 00000A22 1F                      MEMCBDEST:	db 31
  2831 00000A23 4D656D6F727920636F-     		db 'Memory control blocks destroyed'
  2831 00000A2C 6E74726F6C20626C6F-
  2831 00000A35 636B73206465737472-
  2831 00000A3E 6F796564           
  2832 00000A42 13                      INSUFFMEM:	db 19
  2833 00000A43 496E73756666696369-     		db 'Insufficient memory'
  2833 00000A4C 656E74206D656D6F72-
  2833 00000A55 79                 
  2834 00000A56 1C                      INVMEMBLA:	db 28
  2835 00000A57 496E76616C6964206D-     		db 'Invalid memory block address'
  2835 00000A60 656D6F727920626C6F-
  2835 00000A69 636B20616464726573-
  2835 00000A72 73                 
  2836 00000A73 13                      INVENVIRO:	db 19
  2837 00000A74 496E76616C69642045-     		db 'Invalid Environment'
  2837 00000A7D 6E7669726F6E6D656E-
  2837 00000A86 74                 
  2838 00000A87 0E                      INVFORMAT:	db 14
  2839 00000A88 496E76616C69642066-     		db 'Invalid format'
  2839 00000A91 6F726D6174         
  2840 00000A96 1A                      INVFNPARM:	db 26
  2841 00000A97 496E76616C69642066-     		db 'Invalid function parameter'
  2841 00000AA0 756E6374696F6E2070-
  2841 00000AA9 6172616D65746572   
  2842 00000AB1 0C                      INVLDDATA:	db 12
  2843 00000AB2 496E76616C69642064-     		db 'Invalid data'
  2843 00000ABB 617461             
  2844 00000ABE 1B                      INVDRVSPC:	db 27
  2845 00000ABF 496E76616C69642064-     		db 'Invalid drive specification'
  2845 00000AC8 726976652073706563-
  2845 00000AD1 696669636174696F6E 
  2846 00000ADA 23                      ATRCURDIR:	db 35
  2847 00000ADB 417474656D70742074-     		db 'Attempt to remove current directory'
  2847 00000AE4 6F2072656D6F766520-
  2847 00000AED 63757272656E742064-
  2847 00000AF6 69726563746F7279   
  2848 00000AFE 0F                      NOTSAMDEV:	db 15
  2849 00000AFF 4E6F742073616D6520-     		db 'Not same device'
  2849 00000B08 646576696365       
  2850 00000B0E 0D                      NOMOREFIL:	db 13
  2851 00000B0F 4E6F206D6F72652066-     		db 'No more files'
  2851 00000B18 696C6573           
  2852 00000B1C 0B                      FILEXISTS:	db 11
  2853 00000B1D 46696C652065786973-     		db 'File exists'
  2853 00000B26 7473               
  2854 00000B28 1B                      CANTMKDIR:	db 27
  2855 00000B29 43616E6E6F74206D61-     		db 'Cannot make directory entry'
  2855 00000B32 6B6520646972656374-
  2855 00000B3B 6F727920656E747279 
  2856 00000B44 0E                      FAILINT24:	db 14
  2857 00000B45 4661696C206F6E2049-     		db 'Fail on INT 24'
  2857 00000B4E 4E54203234         
  2858 00000B53 15                      TOOMANYRD:	db 21
  2859 00000B54 546F6F206D616E7920-     		db 'Too many redirections'
  2859 00000B5D 726564697265637469-
  2859 00000B66 6F6E73             
  2860 00000B69 15                      DUPLREDIR:	db 21
  2861 00000B6A 4475706C6963617465-     		db 'Duplicate redirection'
  2861 00000B73 207265646972656374-
  2861 00000B7C 696F6E             
  2862 00000B7F 10                      INVPASSWD:	db 16
  2863 00000B80 496E76616C69642070-     		db 'Invalid password'
  2863 00000B89 617373776F7264     
  2864 00000B90 11                      INVLDPARM:	db 17
  2865 00000B91 496E76616C69642070-     		db 'Invalid parameter'
  2865 00000B9A 6172616D65746572   
  2866 00000BA2 12                      NETDATFAU:	db 18
  2867 00000BA3 4E6574776F726B2064-     		db 'Network data fault'
  2867 00000BAC 617461206661756C74 
  2868 00000BB5 21                      FNOSUPNET:	db 33
  2869 00000BB6 46756E6374696F6E20-     		db 'Function not supported by network'
  2869 00000BBF 6E6F7420737570706F-
  2869 00000BC8 72746564206279206E-
  2869 00000BD1 6574776F726B       
  2870 00000BD7 27                      RSCNOTINS:	db 39
  2871 00000BD8 526571756972656420-     		db 'Required system component not installed'
  2871 00000BE1 73797374656D20636F-
  2871 00000BEA 6D706F6E656E74206E-
  2871 00000BF3 6F7420696E7374616C-
  2871 00000BFC 6C6564             
  2872                                  
  2873                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0C8Ch
  2874                                  ; 05/06/2023
  2875                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0D8Fh
  2876                                  
  2877 00000BFF [D009]                  EXTMSGPTRS:	dw INVLFUNCT
  2878 00000C01 [E109]                  		dw FNOTFOUND
  2879 00000C03 [F009]                  		dw PNOTFOUND
  2880 00000C05 [FF09]                  		dw TOOMANYOF
  2881 00000C07 [7806]                  		dw ACCDENIED
  2882 00000C09 [130A]                  		dw INVHANDLE
  2883 00000C0B [220A]                  		dw MEMCBDEST
  2884 00000C0D [420A]                  		dw INSUFFMEM
  2885 00000C0F [560A]                  		dw INVMEMBLA
  2886 00000C11 [730A]                  		dw INVENVIRO
  2887 00000C13 [870A]                  		dw INVFORMAT
  2888 00000C15 [960A]                  		dw INVFNPARM
  2889 00000C17 [B10A]                  		dw INVLDDATA
  2890 00000C19 0000                    		dw 0
  2891 00000C1B [BE0A]                  		dw INVDRVSPC
  2892 00000C1D [DA0A]                  		dw ATRCURDIR
  2893 00000C1F [FE0A]                  		dw NOTSAMDEV
  2894 00000C21 [0E0B]                  		dw NOMOREFIL
  2895 00000C23 [2F07]                  		dw CRMSG0
  2896 00000C25 [4307]                  		dw CRMSG1
  2897 00000C27 [5007]                  		dw CRMSG2
  2898 00000C29 [5A07]                  		dw CRMSG3
  2899 00000C2B [7107]                  		dw CRMSG4
  2900 00000C2D [7C07]                  		dw CRMSG5
  2901 00000C2F [9E07]                  		dw CRMSG6
  2902 00000C31 [A907]                  		dw CRMSG7
  2903 00000C33 [BC07]                  		dw CRMSG8
  2904 00000C35 [CD07]                  		dw CRMSG9
  2905 00000C37 [E807]                  		dw CRMSG10
  2906 00000C39 [FA07]                  		dw CRMSG11
  2907 00000C3B [0B08]                  		dw CRMSG12
  2908 00000C3D [1B08]                  		dw CRMSG13
  2909 00000C3F [2D08]                  		dw CRMSG14
  2910 00000C41 [3C08]                  		dw CRMSG15
  2911 00000C43 [5008]                  		dw CRMSG16
  2912 00000C45 [6008]                  		dw CRMSG17
  2913 00000C47 [7A08]                  		dw CRMSG18
  2914 00000C49 [8D08]                  		dw CRMSG19
  2915 00000C4B [9A08]                  		dw CRMSG20
  2916 00000C4D 0000<rep 28h>           		times 40 dw 0	; db 80 dup(0)
  2917 00000C9D [1C0B]                  		dw FILEXISTS
  2918 00000C9F 0000                    		dw 0
  2919 00000CA1 [280B]                  		dw CANTMKDIR
  2920 00000CA3 [440B]                  		dw FAILINT24
  2921 00000CA5 [530B]                  		dw TOOMANYRD
  2922 00000CA7 [690B]                  		dw DUPLREDIR
  2923 00000CA9 [7F0B]                  		dw INVPASSWD
  2924 00000CAB [900B]                  		dw INVLDPARM
  2925 00000CAD [A20B]                  		dw NETDATFAU
  2926 00000CAF [B50B]                  		dw FNOSUPNET
  2927 00000CB1 [D70B]                  		dw RSCNOTINS
  2928                                  ; ----------------------------------------------------------------------------
  2929                                  	; 17/04/2023
  2930                                  ExtMsgEnd:
  2931                                  
  2932                                  ; 21/04/2023
  2933                                  NUMEXTMSGS equ ($-EXTMSGPTRS)>>1 ; 14/01/2023
  2934                                  
  2935                                  ; ----------------------------------------------------------------------------
  2936                                  
  2937                                  ; 20/04/2023
  2938                                  
  2939 00000CB3 90<rep Dh>              align 16
  2940                                  
  2941                                  ; ----------------------------------------------------------------------------
  2942                                  
  2943                                  ; 10/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2944                                  ;; MSDOS 5.0 COMMAND.COM - RESGROUP:0D40h (CODERES:0000h)
  2945                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2946                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:0E50h (CODERES:0000h)
  2947                                  
  2948                                  ; ----------------------------------------------------------------------------
  2949                                  ; SEGMENT - CODERES
  2950                                  ; ----------------------------------------------------------------------------
  2951                                  
  2952                                  ; 11/01/2023
  2953                                  RCODE_START:	
  2954                                  
  2955                                  ; ----------------------------------------------------------------------------
  2956                                  ;***	EXEC error handling
  2957                                  ;
  2958                                  ;	COMMAND has issued an EXEC system call and it has returned an error.
  2959                                  ;	We examine the error code and select an appropriate message.
  2960                                  ; --------------------------
  2961                                  ;	Bugbug:	optimize reg usage in following code? Careful of DX!
  2962                                  ;	Condense the error scan?
  2963                                  ;	RBADNAM is checked by transient, no need here?
  2964                                  ;	Move below Ext_Exec.
  2965                                  ; ----------------------------------------------------------------------------
  2966                                  
  2967                                  Exec_Err:
  2968                                  ;SR;
  2969                                  ; ds,es are setup when the transient jumps to Ext_Exec. So segment regs are
  2970                                  ; in order here
  2971                                  
  2972                                  ;	Bugbug:	can we use byte compares here?
  2973                                  ;	Might be able to use byte msg#s, too.
  2974                                  
  2975                                  ;	Store errors in a 3 or 4 byte table. Msg #s in another.
  2976                                  ;	Speed not high priority here.
  2977                                  
  2978                                  ;	Move this to transient.
  2979                                  
  2980                                  	; 10/01/2023
  2981                                  
  2982                                  	;mov	bx,RBADNAM	; offset DATARES:RBadNam
  2983 00000CC0 BA[5D06]                	mov	dx,RBADNAM
  2984 00000CC3 3C02                    	cmp	al,ERROR_FILE_NOT_FOUND ; 2
  2985 00000CC5 741B                    	je	short GotExecEMes		; bad command
  2986                                  	;mov	bx,TOOBIG	; offset DATARES:TooBig
  2987 00000CC7 BA[2306]                	mov	dx,TOOBIG
  2988 00000CCA 3C08                    	cmp	al,ERROR_NOT_ENOUGH_MEMORY ; 8
  2989 00000CCC 7414                    	je	short GotExecEMes		; file not found
  2990                                  	;mov	bx,EXEBAD	; offset DATARES:ExeBad
  2991 00000CCE BA[0F06]                	mov	dx,EXEBAD
  2992 00000CD1 3C0B                    	cmp	al,ERROR_BAD_FORMAT ; 11 ; 0Bh
  2993 00000CD3 740D                    	je	short GotExecEMes		; bad exe file
  2994                                  	;mov	bx,ACCDEN	; offset DATARES:AccDen
  2995 00000CD5 BA[7806]                	mov	dx,ACCDEN
  2996 00000CD8 3C05                    	cmp	al,ERROR_ACCESS_DENIED ; 5
  2997 00000CDA 7406                    	je	short GotExecEMes		; access denied
  2998                                  
  2999                                  Default_Message:
  3000                                  	;mov	bx,EXECEMES	; offset DATARES:ExecEMes
  3001 00000CDC BA[FB05]                	mov	dx,EXECEMES
  3002                                  						; default message
  3003 00000CDF BE[CE01]                	mov	si,ExecErrSubst ; offset DATARES:ExecErrSubst
  3004                                  						; get address of subst block
  3005                                  GotExecEMes:
  3006                                  	;mov	dx,bx				; DX = ptr to msg
  3007 00000CE2 E85106                  	call	RPrint ; invoke	RPrint
  3008 00000CE5 EB09                    	jmp	short NoExec
  3009                                  
  3010                                  ; ----------------------------------------------------------------------------
  3011                                  ;***	EXEC call
  3012                                  ;
  3013                                  ;	The transient has set up everything for an EXEC system call.
  3014                                  ;	For cleanliness, we issue the EXEC here in the resident 
  3015                                  ;	so that we may be able to recover cleanly upon success.
  3016                                  ;
  3017                                  ;	CS,DS,ES,SS = DATARES seg addr
  3018                                  ; ----------------------------------------------------------------------------
  3019                                  
  3020                                  Ext_Exec:
  3021                                  ;SR;
  3022                                  ; The words put on the stack by the stub will be popped off when we finally
  3023                                  ;jump to LodCom (by LodCom).
  3024                                  
  3025                                  	; 10/01/2023
  3026                                  	;int	21h			; do the exec
  3027                                  	; 10/01/2023 - MSDOS 5.0 COMMAND.COM - RESGROUP:0D69h (CODERES:0029h)
  3028                                  Exec_Ret:
  3029 00000CE7 72D7                    	jc	short Exec_Err		; exec failed
  3030                                  
  3031                                  ;	The exec has completed. Retrieve the exit code.
  3032                                  
  3033                                  Exec_Wait:
  3034 00000CE9 B44D                    	mov	ah,4Dh
  3035                                  	;mov	ah,WAITPROCESS ; 4Dh	; get errorlevel
  3036 00000CEB CD21                    	int	21h			; get the return code
  3037                                  	;mov	[cs:RetCode],ax
  3038                                  	; 11/01/2023
  3039 00000CED A3[3802]                	mov	[RetCode],ax
  3040                                  
  3041                                  ;	See if we can reload the transient. The external command
  3042                                  ;	may have overwritten part of the transient.
  3043                                  
  3044                                  NoExec:
  3045                                  ;SR;
  3046                                  ; ds = es = ss = DATARES when we jump to LodCom
  3047                                  ;
  3048 00000CF0 E97801                  	jmp	LodCom
  3049                                  
  3050                                  ; ----------------------------------------------------------------------------
  3051                                  ;***	Int 23 (ctrl-c) handler
  3052                                  ;
  3053                                  ;	This is the default system INT 23 handler. All processes
  3054                                  ;	(including COMMAND) get it by default. There are some
  3055                                  ;	games that are played: We ignore ^C during most of the
  3056                                  ;	INIT code. This is because we may perform an ALLOC and
  3057                                  ;	diddle the header! Also, if we are prompting for date/time
  3058                                  ;	in the init code, we are to treat ^C as empty responses.
  3059                                  ; ---------------------------
  3060                                  ;	Bugbug:	put init ctrl-c handling in init module.
  3061                                  ; ----------------------------------------------------------------------------
  3062                                  
  3063                                  ;SR;
  3064                                  ;The stub has pushed the previous ds and DATARES onto the stack. We get
  3065                                  ;both these values off the stack now
  3066                                  ;
  3067                                  ;ContC	proc	far
  3068                                  
  3069                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  3070                                  
  3071                                  	; 11/01/2023 - Retro DOS v5.40 COMMAND.COM
  3072                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:0D75h (CODERES:0035h)
  3073                                  ContC:
  3074 00000CF3 1F                      	pop	ds			; ds = DATARES
  3075                                  ;	assume	ds:DATARES
  3076                                  ;;	pop	word [OldDS]		; OldDS = old ds
  3077                                  
  3078 00000CF4 F606[B402]01            	test	byte [InitFlag],INITINIT ; 1
  3079                                  	;test	byte [cs:INITFLAG],INITINIT ; 1	; in initialization?
  3080 00000CF9 740D                    	jz	short NotAtInit		; no
  3081 00000CFB F606[B402]02            	test	byte [InitFlag],INITSPECIAL ; 2 
  3082                                  	;test	byte [cs:INITFLAG],INITSPECIAL ; 2 ; doing special stuff?
  3083 00000D00 7404                    	jz	short CmdIret		; no, ignore ^C
  3084 00000D02 1F                      	pop	ds			; restore before jumping; M021
  3085                                  	;jmp	RESGROUP:Init_ContC_SpecialCase ; Yes, go handle it
  3086 00000D03 E92F0E                  	jmp	init_contc_specialcase
  3087                                  CmdIret:
  3088                                  ;SR;
  3089                                  ; Restore ds to its previous value
  3090                                  ;
  3091                                  
  3092                                  ;;	mov	ds,[OLdDS]		;
  3093 00000D06 1F                      	pop	ds
  3094 00000D07 CF                      	iret				; yes, ignore the ^C
  3095                                  
  3096                                  NotAtInit:
  3097 00000D08 F606[B402]04            	test	byte [InitFlag],INITCTRLC ; 4
  3098                                  	;test	byte [cs:INITFLAG],INITCTRLC ; 4 ; are we already in a ^C?
  3099 00000D0D 7411                    	jz	short NotInit 		; nope too.
  3100                                  
  3101                                  ;*	We are interrupting ourselves in this ^C handler. We need
  3102                                  ;	to set carry and return to the user sans flags only if the
  3103                                  ;	system call was a 1-12 one. Otherwise, we ignore the ^C.
  3104                                  
  3105                                  	;cmp	ah,1
  3106                                  	;jb	short CmdIret
  3107                                  	; 19/07/2024
  3108 00000D0F 84E4                    	test	ah,ah
  3109 00000D11 74F3                    	jz	short CmdIret
  3110                                  
  3111 00000D13 80FC0C                  	cmp	ah,12
  3112 00000D16 77EE                    	ja	short CmdIret
  3113                                  
  3114 00000D18 1F                      	pop	ds			;restore ds to old value
  3115 00000D19 83C406                  	add	sp,6			; remove int frame
  3116 00000D1C F9                      	stc
  3117                                  
  3118                                  ;;	mov	ds,[OldDS]		;restore ds to its old value
  3119 00000D1D CA0200                  	retf	2			; remove those flags...
  3120                                  
  3121                                  NotInit:
  3122                                  
  3123                                  ;*	We have now received a ^C for some process (maybe ourselves
  3124                                  ;	but not at INIT).
  3125                                  ;	
  3126                                  ;	Note that we are running on the user's stack!!! Bad news if
  3127                                  ;	any of the system calls below go and issue another INT
  3128                                  ;	24... Massive stack overflow! Another bad point is that
  3129                                  ;	SavHand will save an already saved handle, thus losing a
  3130                                  ;	possible redirection...
  3131                                  ;	
  3132                                  ;	All we need to do is set the flag to indicate nested ^C. 
  3133                                  ;	The above code will correctly flag the ^C diring the
  3134                                  ;	message output and prompting while ignoring the ^C the rest
  3135                                  ;	of the time.
  3136                                  ;	
  3137                                  ;	Clean up: flush disk. If we are in the middle of a batch
  3138                                  ;	file, we ask if he wants to terminate it. If he does, then
  3139                                  ;	we turn off all internal flags and let the DOS abort.
  3140                                  
  3141 00000D20 800E[B402]04            	or	byte [InitFlag],INITCTRLC ; 4
  3142                                  	;or	byte [cs:INITFLAG],INITCTRLC ; 4 ; nested ^c is on
  3143 00000D25 FB                      	sti
  3144                                  
  3145                                  ;	push	cs			; el yucko! change the user's ds!!
  3146                                  ;	pop	ds
  3147                                  
  3148                                  ;	assume	ds:RESGROUP
  3149                                  
  3150 00000D26 58                      	pop	ax			; discard the old ds value
  3151                                  
  3152 00000D27 A1[4302]                	mov	ax,[SingleCom]
  3153 00000D2A 09C0                    	or	ax,ax
  3154 00000D2C 7506                    	jnz	short NoReset
  3155 00000D2E 50                      	push	ax
  3156 00000D2F B40D                    	mov	ah,DISK_RESET ; 0Dh
  3157 00000D31 CD21                    	int	21h			; reset disks in case files were open
  3158 00000D33 58                      	pop	ax
  3159                                  
  3160                                  NoReset:
  3161                                  
  3162                                  ;	In the generalized version of FOR, PIPE and BATCH, we would
  3163                                  ;	walk the entire active list and free each segment. Here,
  3164                                  ;	we just free the single batch segment.
  3165                                  
  3166 00000D34 F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
  3167 00000D3A 7452                    	jz	short ContCTerm
  3168 00000D3C 09C0                    	or	ax,ax
  3169 00000D3E 754E                    	jnz	short ContCTerm
  3170 00000D40 E88502                  	call	SavHand
  3171 00000D43 E89303                  	call	AskEnd			; ask if user wants to end batch
  3172                                  
  3173                                  ;	If the carry flag is clear, we do NOT free up the batch file
  3174                                  
  3175 00000D46 7340                    	jnc	short ContBatch
  3176 00000D48 8A0E[3B02]              	mov	cl,[EchoFlag]		; get current echo flag
  3177 00000D4C 53                      	push	bx
  3178                                  
  3179                                  ClearBatch:
  3180 00000D4D 8E06[E701]              	mov	es,[Batch]		; get batch segment
  3181                                  	;mov	di,20h
  3182 00000D51 8B3E2000                	mov	di,[BATCHSEGMENT.BatFile] ; get offset of batch file name
  3183                                  	; MSDOS 5.0 & MSDOS 6.0 (ES:5)
  3184                                  	;mov	bx,es:BatForPtr		; get old FOR segment
  3185 00000D55 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
  3186                                  	; MSDOS 3.3 ([ES:4])
  3187                                  	;mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:4] ; get old FOR segment
  3188                                  	;
  3189                                  	; 19/07/2024
  3190                                  	;cmp	bx,0			; is a FOR in progress
  3191                                  	;je	short No_Bat_For	; no - don't deallocate
  3192 00000D5A 85DB                    	test	bx,bx
  3193 00000D5C 7408                    	jz	short No_Bat_For
  3194                                  
  3195 00000D5E 06                      	push	es			;
  3196 00000D5F 8EC3                    	mov	es,bx			; yes - free it up...
  3197 00000D61 B449                    	mov	ah,49h
  3198                                  	;mov	ah,DEALLOC ; 49h	;
  3199 00000D63 CD21                    	int	21h			;
  3200 00000D65 07                      	pop	es			; restore to batch segment
  3201                                  
  3202                                  No_Bat_For:
  3203                                  	;mov	cl,[es:1]
  3204 00000D66 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag] ; get old echo flag
  3205                                  	;mov	bx,[es:3]
  3206 00000D6B 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast] ; get old batch segment
  3207 00000D70 B449                    	mov	ah,49h
  3208                                  	;mov	ah,DEALLOC ; 49h	; free it up...
  3209 00000D72 CD21                    	int	21h
  3210 00000D74 891E[E701]              	mov	[Batch],bx		; get ready to deallocate next batch
  3211 00000D78 FF0E[4C02]              	dec	word [Nest]		; is there another batch file?
  3212 00000D7C 75CF                    	jnz	short ClearBatch	; keep going until no batch file
  3213                                  
  3214                                  ;	We are terminating a batch file; restore the echo status
  3215                                  
  3216                                  ;Shell_Bat_Cont: 			; continue batch for SHELL
  3217 00000D7E 5B                      	pop	bx
  3218 00000D7F 880E[3B02]              	mov	[EchoFlag],cl		; reset echo status
  3219                                  	; 29/05/2018
  3220 00000D83 C606[B502]00            	mov	byte [PipeFlag],0	; turn off pipeflag
  3221                                  
  3222                                  ContBatch:
  3223 00000D88 E8A805                  	call	crlf			; print out crlf before returning
  3224 00000D8B E86302                  	call	RestHand
  3225                                  
  3226                                  ;	Yes, we are terminating. Turn off flags and allow the DOS to abort.
  3227                                  
  3228                                  ContCTerm:
  3229 00000D8E 31C0                    	xor	ax,ax			; indicate no read
  3230 00000D90 89C5                    	mov	bp,ax
  3231                                  
  3232                                  ;	The following resetting of the state flags is good for the
  3233                                  ;	generalized batch processing.
  3234                                  
  3235 00000D92 A2[4802]                	mov	[IfFlag],al		; turn off iffing
  3236 00000D95 A2[4902]                	mov	[ForFlag],al		; turn off for processing
  3237 00000D98 E81C00                  	call	ResPipeOff
  3238 00000D9B 3906[4302]              	cmp	[SingleCom],ax		; see if we need to set SingleCom
  3239 00000D9F 7406                    	jz	short NoSetSing
  3240 00000DA1 C706[4302]FFFF          	mov	word [SingleCom],-1	; cause termination on 
  3241                                  					;  pipe, batch, for
  3242                                  NoSetSing:
  3243                                  
  3244                                  ;	If we are doing an internal command, go through the reload process.
  3245                                  ;	If we are doing an external, let DOS abort the process.
  3246                                  ;	In both cases, we are now done with the ^C processing.
  3247                                  
  3248 00000DA7 8026[B402]FB            	and	byte [InitFlag],~INITCTRLC ; 0FBh
  3249 00000DAC 3806[3702]              	cmp	[ExtCom],al
  3250 00000DB0 7503                    	jnz	short DoDAb		; internal ^c
  3251 00000DB2 E94501                  	jmp	LodCom1
  3252                                  DoDAb:
  3253 00000DB5 F9                      	stc				; tell dos to abort
  3254                                  
  3255                                  ;SR;
  3256                                  ;We dont need to restore ds here because we are forcing DOS to do an abort
  3257                                  ;by setting carry and leaving flags on the stack
  3258                                  
  3259 00000DB6 CB                      	retf				; Leave flags on stack
  3260                                  
  3261                                  ;ContC	endp
  3262                                  
  3263                                  ;SR;
  3264                                  ;ds = DATARES on entry. This routine is called from DskErr and LodCom1 and
  3265                                  ;both have ds = DATARES
  3266                                  
  3267                                  	; 11/01/2023
  3268                                  ResPipeOff:
  3269 00000DB7 50                      	push	ax
  3270 00000DB8 31C0                    	xor	ax,ax
  3271                                  	;xchg	al,[cs:PIPEFLAG]
  3272 00000DBA 8606[B502]              	xchg	al,[PipeFlag]
  3273 00000DBE 08C0                    	or	al,al
  3274 00000DC0 7404                    	jz	short NoPipePop
  3275                                  	;shr	byte [cs:ECHOFLAG],1
  3276 00000DC2 D02E[3B02]              	shr	byte [EchoFlag],1
  3277                                  NoPipePop:
  3278 00000DC6 58                      	pop	ax
  3279 00000DC7 C3                      	retn
  3280                                  
  3281                                  ;CODERES ends
  3282                                  
  3283                                  ;=============================================================================
  3284                                  ; COMMAND2.ASM, MSDOS 6.0, 1991
  3285                                  ;=============================================================================
  3286                                  ; 21/09/2018 - Retro DOS v3.0
  3287                                  
  3288                                  ;	title	COMMAND2 - resident code for COMMAND.COM part II
  3289                                  ;	name	COMMAND2
  3290                                  
  3291                                  ;/*
  3292                                  ; *                      Microsoft Confidential
  3293                                  ; *                      Copyright (C) Microsoft Corporation 1991
  3294                                  ; *                      All Rights Reserved.
  3295                                  ; */
  3296                                  
  3297                                  ;
  3298                                  ;	Revision History
  3299                                  ;	================
  3300                                  ;
  3301                                  ; M038	SR  11/5/90	Changed stuff for Novell RPL. These guys cannot
  3302                                  ;			reserve memory by changing int 12h and then give it
  3303                                  ;			back to DOS by changing arenas in autoexec.bat.
  3304                                  ;			This makes command.com reload transient and this
  3305                                  ;			cannot be done at this stage.
  3306                                  ;
  3307                                  
  3308                                  ;CODERES segment public byte
  3309                                  
  3310                                  ;*	If we cannot allocate enough memory for the transient or there
  3311                                  ;	was some other allocation error, we display a message and
  3312                                  ;	then die.
  3313                                  
  3314                                  ;SR;
  3315                                  ; We will have to make sure that at this entry point and at FatalC, 
  3316                                  ;ds = DATARES. All jumps to these points are made from only within this file
  3317                                  ;and so we should be able to do this
  3318                                  
  3319                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3320                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0E4Bh (CODERES:010Bh)
  3321                                  
  3322                                  	;assume	ds:DATARES
  3323                                  BadMemErr:
  3324 00000DC8 BA[8606]                	mov	dx,BMEMMES			; DX = ptr to msg
  3325                                  FatalC:
  3326                                  	; 12/01/2023
  3327                                  ;;	push	cs
  3328                                  ;;	pop	ds
  3329                                  ;;	assume	ds:ResGroup
  3330                                  ;	invoke	RPrint
  3331                                  
  3332                                  	; 12/01/2023
  3333                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3334 00000DCB E86805                  	call	RPrint
  3335                                  
  3336                                  	; MSDOS 3.3
  3337                                  	;call	RDISPMSG
  3338                                  
  3339                                  ;	If this is NOT a permanent (top-level) COMMAND, then we exit;
  3340                                  ;	we can't do anything else!
  3341                                  
  3342 00000DCE 803E[4002]00            	cmp	byte [PermCom],0
  3343 00000DD3 7410                    	je	short FatalRet
  3344                                  
  3345                                  ;	We are a permanent command. If we are in the process of the
  3346                                  ;	magic interrupt (Singlecom) then exit too.
  3347                                  
  3348 00000DD5 833E[4302]00            	cmp	word [SingleCom],0		; if PermCom and SingleCom
  3349 00000DDA 7509                    	jne	short FatalRet			; must take int_2e exit
  3350                                  
  3351                                  ;	Permanent command. We can't do ANYthing except halt.
  3352                                  
  3353 00000DDC BA[A006]                	mov	dx,HALTMES			; DX = ptr to msg
  3354                                  	;invoke	RPrint
  3355                                  	; 12/01/2023	
  3356                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3357 00000DDF E85405                  	call	RPrint	
  3358                                  	; MSDOS 3.3
  3359                                  	;call	RDISPMSG
  3360 00000DE2 FB                      	sti
  3361                                  Stall:
  3362 00000DE3 EBFE                    	jmp	short Stall			; crash the system nicely
  3363                                  
  3364                                  FatalRet:
  3365 00000DE5 BA[C706]                	mov	dx,FRETMES			; DX = ptr to msg
  3366                                  	;call	RDISPMSG
  3367                                  	; 12/01/2023	
  3368 00000DE8 E84B05                  	call	RPrint	
  3369                                  FatalRet2:
  3370 00000DEB 803E[4002]00            	cmp	byte [PermCom],0		; if we get here and PermCom,
  3371 00000DF0 7517                    	jne	short Ret_2e			; must be int_2e
  3372                                  
  3373                                  ;	Bugbug:	this is where we'd want to unhook int 2F, *if* we
  3374                                  ;	were a non-permanent COMMAND that had hooked it! (Just in 
  3375                                  ;	case we decide to do that.)
  3376                                  
  3377 00000DF2 A1[DC01]                	mov	ax,[Parent]
  3378                                  	;mov	[16h],ax
  3379 00000DF5 A31600                  	mov	[PDB.PARENT_PID],ax	; mov [cs:16h],ax
  3380 00000DF8 A1[DE01]                	mov	ax,[OldTerm]
  3381                                  	;mov	[0Ah],ax
  3382 00000DFB A30A00                  	mov	[PDB.EXIT],ax		; mov [cs:0Ah],ax
  3383 00000DFE A1[E001]                	mov	ax,[OldTerm+2]
  3384                                  	;mov	[0Ch],ax
  3385 00000E01 A30C00                  	mov	[PDB.EXIT+2],ax 	; mov [cs:0Ch],ax
  3386 00000E04 B8004C                  	mov	ax,4C00h
  3387                                  	;mov	ax,(EXIT<<8) ; 4C00h		; return to lower level
  3388 00000E07 CD21                    	int	21h
  3389                                  Ret_2e:
  3390                                  ;SR;
  3391                                  ; We will ensure that ds = DATARES for all entries to this place
  3392                                  ;
  3393                                  
  3394                                  ;;	push	cs
  3395                                  ;;	pop	ds
  3396                                  ;;	assume	ds:resgroup,es:nothing,ss:nothing
  3397                                    	
  3398                                  ;	assume	ds:DATARES
  3399                                  
  3400                                  	;PUSH	CS
  3401                                  	;POP	DS
  3402                                  
  3403 00000E09 C706[4302]0000          	mov	word [SingleCom],0	; turn off SingleCom
  3404 00000E0F 8E06[FC03]              	mov	es,[Res_Tpa]
  3405                                  	;mov	ah,49h	; 12/01/2023
  3406 00000E13 B449                    	mov	ah,DEALLOC
  3407 00000E15 CD21                    	int	21h			; free up space used by transient
  3408 00000E17 8B1E[DA01]              	mov	bx,[Save_Pdb]
  3409 00000E1B B450                    	mov	ah,50h
  3410                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3411 00000E1D CD21                    	int	21h			; current process is user
  3412 00000E1F A1[3802]                	mov	ax,[RetCode]
  3413 00000E22 803E[3702]00            	cmp	byte [ExtCom],0
  3414 00000E27 7502                    	jne	short GotECode
  3415 00000E29 31C0                    	xor	ax,ax			; internals always return 0
  3416                                  GotECode:
  3417 00000E2B C606[3702]01            	mov	byte [ExtCom],1		; force external
  3418                                  
  3419                                  ;SR; This is actually returning to the caller. However, the old code had
  3420                                  ;ds = RESGROUP so I guess we can keep ds = DATARES for us.
  3421                                  ;Yes, int 2eh can corrupt all registers so we are ok.
  3422                                  
  3423                                  	; 12/01/2023
  3424 00000E30 FF2E[D601]              	jmp	far [Int_2e_Ret]	; "iret"
  3425                                  
  3426                                  ;***	Int_2e, magic command executer
  3427                                  
  3428                                  Int_2e:
  3429                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  3430                                  ;SR;
  3431                                  ;We are going to come here from the stub with the old ds and DATARES value
  3432                                  ;pushed on the stack in that order. Pick up this stuff off the stack
  3433                                  
  3434                                  	; 12/01/2023 - Retro DOS v4.0 COMMAND.COM
  3435                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0EB7h (CODERES:0177h)
  3436                                  
  3437 00000E34 1F                      	pop	ds			; ds = DATARES
  3438                                  	;assume	ds:DATARES
  3439 00000E35 58                      	pop	ax
  3440                                  ;	;pop	ds:OldDS 		; Save old value of ds
  3441                                  
  3442                                  	;pop	word [cs:Int_2e_Ret]
  3443                                  	;pop	word [cs:Int_2e_Ret+2]	; store return address
  3444                                  	;pop	ax			; chuck flags
  3445 00000E36 8F06[D601]              	pop	word [Int_2e_Ret]
  3446 00000E3A 8F06[D801]              	pop	word [Int_2e_Ret+2]
  3447                                  	
  3448 00000E3E 83C402                  	add	sp,2
  3449                                  
  3450                                  ;;	push	cs
  3451                                  ;;	pop	es
  3452                                  
  3453 00000E41 1E                      	push	ds
  3454 00000E42 07                      	pop	es			; es = DATARES
  3455                                  ;	;mov	ds,OldDS
  3456 00000E43 8ED8                    	mov	ds,ax
  3457                                  	;assume	ds:nothing		; ds = old value
  3458                                  
  3459 00000E45 BF8000                  	mov	di,80h
  3460 00000E48 B94000                  	mov	cx,64
  3461                                  ;	Bugbug:	cld
  3462 00000E4B F3A5                    	rep	movsw
  3463 00000E4D B451                    	mov	ah,51h
  3464                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3465 00000E4F CD21                    	int	21h			; get user's header
  3466                                  	; 12/01/2023
  3467 00000E51 26891E[DA01]            	mov	[es:Save_Pdb],bx
  3468                                  	;mov	[cs:Save_Pdb],bx
  3469 00000E56 B450                    	mov	ah,50h
  3470                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3471                                  
  3472                                  ;;	mov	bx,cs
  3473                                  ;SR;
  3474                                  ;Set ds = DATARES because BadMemErr expects this
  3475                                  
  3476                                  	; 12/01/2023
  3477 00000E58 06                      	push	es
  3478 00000E59 1F                      	pop	ds
  3479                                  	;assume	ds:DATARES
  3480                                  
  3481 00000E5A 8CDB                    	mov	bx,ds			; es = our PSP now
  3482                                  	;mov	bx,cs
  3483                                  
  3484 00000E5C CD21                    	int	21h			; current process is me
  3485                                  	;mov	word [cs:SingleCom],81h
  3486                                  	;mov	byte [cs:ExtCom],1	; make sure this case forced
  3487                                  	; 12/01/2023
  3488 00000E5E C706[4302]8100          	mov	word [SingleCom],81h
  3489 00000E64 C606[3702]01            	mov	byte [ExtCom],1		; make sure this case forced
  3490                                  
  3491                                  ;SR;
  3492                                  ;We can enter LodCom directly after a command shell is terminated or we
  3493                                  ;can fall thru from above. When we enter directly from the stub, the stack
  3494                                  ;has the old ds value and the data seg value on the stack, so that ds can
  3495                                  ;be properly set. To fake this, we push dummy values here.
  3496                                  
  3497                                  	; 12/01/2023
  3498 00000E69 1E                      	push	ds			; old value of ds
  3499 00000E6A 1E                      	push	ds			; data seg value, ds = DATARES
  3500                                  LodCom: 				; termination handler
  3501 00000E6B 1F                      	pop	ds			; ds = DATARES
  3502                                  	;assume	ds:DATARES
  3503 00000E6C 83C402                  	add	sp,2
  3504                                  ;	;pop	OldDS			; store old ds
  3505                                  	;cmp	ExtCom,0
  3506 00000E6F 803E[3702]00            	cmp	byte [ExtCom],0
  3507                                  	;cmp	byte [cs:ExtCom],0
  3508                                  	;jne	short @f	 	; internal cmd - memory allocated
  3509                                  	; 16/04/2023
  3510 00000E74 7503                    	jne	short LodCom0 ; 24/09/2018
  3511 00000E76 E98100                  	jmp	LodCom1
  3512                                  	;je	short LodCom1 ; 25/09/2018	
  3513                                  ;@@:
  3514                                  LodCom0: ; 24/09/2018
  3515 00000E79 BBFFFF                  	mov	bx,0FFFFh
  3516 00000E7C B448                    	mov	ah,48h	; 12/01/2023
  3517                                  	;mov	ah,ALLOC ; 48h	
  3518 00000E7E CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  3519                                  				; BX = number of 16-byte paragraphs desired
  3520 00000E80 E80A00                  	call	SetSize
  3521 00000E83 83C020                  	add	ax,20h
  3522 00000E86 39C3                    	cmp	bx,ax
  3523 00000E88 730B                    	jnb	short MemOk		; > 512 byte buffer - good enough
  3524                                  BadMemErrJ:
  3525 00000E8A E93BFF                  	jmp	BadMemErr		; not enough memory
  3526                                  
  3527                                  ;***	SetSize - get transient size in paragraphs
  3528                                  
  3529                                  SetSize:
  3530                                  	; 12/01/2023
  3531                                  	;;;mov	ax,offset TRANGROUP:TranSpaceEnd + 15
  3532                                  	;;mov	ax,98D4h		; MSDOS 5.0 COMMAND.COM
  3533                                  	; 05/06/2023
  3534                                  	;mov	ax,0AFA4h		; MSDOS 6.22 COMMAND.COM
  3535 00000E8D B8B6AA                  	mov	ax,TRANSPACEEND+15	; mov AX,4D6Bh ; MSDOS 3.3
  3536 00000E90 B104                    	mov	cl,4
  3537 00000E92 D3E8                    	shr	ax,cl
  3538 00000E94 C3                      	retn
  3539                                  
  3540                                  MemOk:
  3541                                  	;assume	ds:DATARES		;we have set ds = DATARES 
  3542                                  
  3543 00000E95 B448                    	mov	ah,48h
  3544                                  	;mov	ah,ALLOC  ; 48h
  3545 00000E97 CD21                    	int	21h
  3546 00000E99 72EF                    	jc	short BadMemErrJ	; memory arenas probably trashed
  3547                                  	;mov	byte [cs:ExtCom],0
  3548                                  	;mov	[cs:Res_Tpa],ax
  3549                                  	; 12/01/2023
  3550 00000E9B C606[3702]00            	mov	byte [ExtCom],0		; flag not to alloc again
  3551 00000EA0 A3[FC03]                	mov	[Res_Tpa],ax		; save current tpa segment
  3552                                  
  3553 00000EA3 2500F0                  	and	ax,0F000h
  3554 00000EA6 050010                  	add	ax,1000h		; round up to next 64k boundary
  3555 00000EA9 7212                    	jc	short Bad_Tpa		; memory wrap if carry set
  3556                                  
  3557                                  ;	Make sure that new boundary is within allocated range
  3558                                  
  3559                                  	;mov	dx,[cs:Res_Tpa]
  3560                                  	; 12/01/2023
  3561 00000EAB 8B16[FC03]              	mov	dx,[Res_Tpa]
  3562 00000EAF 01DA                    	add	dx,bx			; compute maximum address
  3563 00000EB1 39C2                    	cmp	dx,ax			; is 64k address out of range?
  3564 00000EB3 7608                    	jbe	short Bad_Tpa
  3565                                  
  3566                                  ;	Must have 64K of usable space.
  3567                                  
  3568 00000EB5 29C2                    	sub	dx,ax			; compute the usable space
  3569 00000EB7 81FA0010                	cmp	dx,1000h		; is space >= 64k ?
  3570 00000EBB 7303                    	jae	short LTpaSet
  3571                                  Bad_Tpa:
  3572                                  	;mov	ax,[cs:Res_Tpa]
  3573                                  	; 12/01/2023
  3574 00000EBD A1[FC03]                	mov	ax,[Res_Tpa]
  3575                                  LTpaSet:
  3576                                  	;mov	[cs:LTPA],ax
  3577                                  	;mov	ax,[cs:Res_Tpa]
  3578                                  	; 12/01/2023
  3579 00000EC0 A3[EE03]                	mov	[LTpa],ax		; usable tpa is 64k buffer aligned
  3580 00000EC3 A1[FC03]                	mov	ax,[Res_Tpa]		; actual tpa is buffer allocated
  3581 00000EC6 01C3                    	add	bx,ax
  3582                                  	;mov	[cs:MemSiz],bx
  3583 00000EC8 891E[3302]              	mov	[MemSiz],bx
  3584 00000ECC E8BEFF                  	call	SetSize
  3585 00000ECF 29C3                    	sub	bx,ax
  3586                                  
  3587                                  	; MSDOS 6.0
  3588                                  
  3589                                  ;M038; Start of changes
  3590                                  ;Changes for Novell RPL. These guys reserve memory for themselves by
  3591                                  ;reducing int 12h size and add this memory to the system at autoexec time by
  3592                                  ;running a program that changes arenas. This changes the largest block that
  3593                                  ;command.com gets and so changes the transient segment. So, command.com does
  3594                                  ;a checksum at the wrong address and thinks that the transient is destroyed
  3595                                  ;and tries to reload it. At this point, no Comspec is defined and so the
  3596                                  ;reload fails, hanging the system. To get around this we just copy the
  3597                                  ;transient from the previous address to the new address(if changed) and
  3598                                  ;then let command.com do the checksum. So, if the transient area is not
  3599                                  ;corrupted, there will not be any reload. In Novell's case, the transient
  3600                                  ;is not really corrupted and so this should work.
  3601                                  
  3602                                  	; 12/01/2023
  3603                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0F5Ah (CODERES:021Ah)
  3604                                  
  3605 00000ED1 3B1E[2D02]              	cmp	bx,[TrnSeg]		; Segment still the same?
  3606 00000ED5 7423                    	je	short LodCom1		; yes, dont copy
  3607                                  
  3608                                  ;Check if the new segment is above or below the current move. If the new
  3609                                  ;segment is above (i.e new block is larger than previous block), then we
  3610                                  ;have to move in the reverse direction
  3611                                  
  3612                                  	;;mov	cx,98C5h
  3613                                  	; 05/06/2023
  3614                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:106Ah (CODERES:021Ah)
  3615                                  	;mov	cx,0AF95h
  3616 00000ED7 B9A7AA                  	mov	cx,TRANSPACEEND		; cx = length to move
  3617 00000EDA 7707                    	ja	short mov_down		; new seg > old seg, reverse move
  3618 00000EDC 31F6                    	xor	si,si			; normal move
  3619 00000EDE 89F7                    	mov	di,si
  3620 00000EE0 FC                      	cld
  3621 00000EE1 EB06                    	jmp	short copy_trans
  3622                                  mov_down:
  3623 00000EE3 89CE                    	mov	si,cx			; reverse move, start from end
  3624 00000EE5 4E                      	dec	si
  3625 00000EE6 89F7                    	mov	di,si
  3626 00000EE8 FD                      	std
  3627                                  copy_trans:
  3628 00000EE9 1E                      	push	ds
  3629 00000EEA 06                      	push	es
  3630 00000EEB 8EC3                    	mov	es,bx			; dest segment
  3631 00000EED 8E1E[2D02]              	mov	ds,[TrnSeg]		; source segment
  3632                                  	;assume	ds:nothing
  3633                                  
  3634 00000EF1 F3A4                    	rep	movsb			; copy transient
  3635 00000EF3 FC                      	cld
  3636 00000EF4 07                      	pop	es
  3637 00000EF5 1F                      	pop	ds
  3638                                  	;assume	ds:DATARES
  3639                                  
  3640                                  ;M038; End of changes
  3641                                  
  3642                                  	;mov	[cs:TrnSeg],bx		; new location of transient
  3643                                  	; 12/01/2023
  3644 00000EF6 891E[2D02]              	mov	[TrnSeg],bx
  3645                                  
  3646                                  LodCom1:
  3647                                  ;;	mov	ax,cs
  3648                                  ;;	mov	ss,ax
  3649                                  ;SR; At this point ds = DATARES which is where the stack is located
  3650                                  
  3651                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3652                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3653 00000EFA 8CD8                    	mov	ax,ds
  3654 00000EFC 8ED0                    	mov	ss,ax
  3655                                  	;assume	ss:DATARES
  3656                                  	;;;mov	sp,offset DATARES:RStack
  3657                                  	;;mov	sp,53Eh
  3658                                  	; 05/06/2023
  3659                                  	;mov	sp,60Ah ; MSDOS 6.22 COMMAND.COM
  3660 00000EFE BC[D604]                	mov	sp,RStack
  3661                                  
  3662                                  ;;	mov	ds,ax
  3663                                  
  3664                                  	;assume	ds:DATARES
  3665                                  	
  3666                                  	; MSDOS 3.3
  3667                                  	;mov	ax,cs
  3668                                  	;mov	ss,ax
  3669                                  	;mov	sp,RSTACK
  3670                                  	;mov	ds,ax
  3671                                  
  3672 00000F01 E87B00                  	call	HeadFix			; close files, restore stdin, stdout
  3673 00000F04 31ED                    	xor	bp,bp			; flag command ok
  3674 00000F06 B8FFFF                  	mov	ax,-1
  3675 00000F09 8706[4502]              	xchg	ax,[VerVal]
  3676 00000F0D 83F8FF                  	cmp	ax,-1
  3677 00000F10 7404                    	je	short NoSetVer
  3678 00000F12 B42E                    	mov	ah,2Eh
  3679                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh ; AL has correct value
  3680 00000F14 CD21                    	int	21h 		; DOS - SET VERIFY FLAG
  3681                                  				; DL = 00h, AL = 01h VERIFY on / 00h VERIFY off
  3682                                  NoSetVer:
  3683 00000F16 833E[4302]FF            	cmp	word [SingleCom],-1
  3684 00000F1B 7503                    	jne	short NoSng
  3685 00000F1D E9CBFE                  	jmp	FatalRet2		; we have finished the single command
  3686                                  NoSng:
  3687 00000F20 E87201                  	call	ChkSum			; check the transient
  3688                                  	;cmp	dx,[Sum]
  3689                                  	;je	short HavCom		; transient ok
  3690                                  	; 12/01/2023
  3691 00000F23 7412                    	jz	short HavCom
  3692                                  Bogus_Com:
  3693 00000F25 C606[E601]01            	mov	byte [Loading],1	; flag DskErr routine
  3694 00000F2A E81E01                  	call	LoadCom
  3695                                  ChkSame:
  3696 00000F2D E86501                  	call	ChkSum
  3697                                  	;cmp	dx,[Sum]
  3698                                  	;je	short HavCom		; same command
  3699                                  	; 12/01/2023
  3700 00000F30 7405                    	jz	short HavCom
  3701                                  Also_Bogus:
  3702 00000F32 E85801                  	call	WrongCom
  3703 00000F35 EBF6                    	jmp	short ChkSame
  3704                                  
  3705                                  	; 12/01/2023
  3706                                  ;HavCom:
  3707                                  ;	; 25/09/2018
  3708                                  ;	mov     ax,(CHAR_OPER*256) ; 3700h
  3709                                  ;	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  3710                                  ;			; Return: AL = FFh unsupported subfunction
  3711                                  ;			; DL = current switch character
  3712                                  ;	mov     [RSWITCHAR],dl
  3713                                  ;	cmp     dl,'/'
  3714                                  ;	jnz     short USESLASH
  3715                                  ;	;mov	cl,'\'
  3716                                  ;	;mov	[RDIRCHAR],cl
  3717                                  ;	mov	byte [RDIRCHAR],'\'
  3718                                  ;USESLASH:
  3719                                  
  3720                                  HavCom:
  3721                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3722 00000F37 C606[E601]00            	mov	byte [Loading],0		; flag to DskErr
  3723                                  	;;;mov	si,offset DATARES:TranVars
  3724                                  	;;mov	si,453h		; MSDOS 5.0 COMMAND.COM
  3725                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  3726                                  	;mov	si,51Dh		; MSDOS 6.22 COMMAND.COM
  3727 00000F3C BE[EA03]                	mov	si,TranVars
  3728                                  	;;;mov	di,offset TRANGROUP:HeadCall
  3729                                  	;;mov	di,8D75h	; MSDOS 5.0 COMMAND.COM
  3730                                  	; 05/06/2023
  3731                                  	;mov	di,0A303h	; MSDOS 6.22 COMMAND.COM
  3732 00000F3F BF[139E]                	mov	di,HEADCALL
  3733 00000F42 8E06[2D02]              	mov	es,[TrnSeg]
  3734 00000F46 FC                      	cld
  3735                                  	;;mov	cx,467h		; MSDOS 5.0 COMMAND.COM	
  3736                                  	;mov	cx,533h		; MSDOS 6.22 COMMAND.COM	
  3737 00000F47 B9[0004]                	mov	cx,TranVarEnd
  3738 00000F4A 29F1                    	sub	cx,si
  3739 00000F4C F3A4                    	rep	movsb			; transfer info to transient
  3740 00000F4E A1[3302]                	mov	ax,[MemSiz]
  3741 00000F51 A30200                  	mov	[PDB.BLOCK_LEN],ax ; mov [ds:2],ax ; adjust my own header
  3742                                  
  3743                                  ;***	TJmp - jump-off to transient
  3744                                  ;
  3745                                  ;	Public label so debugger can find this spot.
  3746                                  
  3747                                  TJmp:	; 12/01/2023
  3748 00000F54 FF2E[2B02]              	jmp	far [Trans]		; jmp dword ptr Trans
  3749                                  
  3750                                  ;***	TRemCheck - far version of RemCheck for transient
  3751                                  
  3752                                  TRemCheck:
  3753                                  	; 12/01/2023
  3754 00000F58 1F                      	pop	ds			; ds = DATARES
  3755 00000F59 83C402                  	add	sp,2			; discard old value of ds
  3756                                  
  3757 00000F5C E80100                  	call	RemCheck
  3758 00000F5F CB                      	retf
  3759                                  
  3760                                  ;***	RemCheck
  3761                                  ;
  3762                                  ;	ENTRY	AL = drive (0=default, 1=A, ...)
  3763                                  ;
  3764                                  ;	EXIT	ZR set if removeable media
  3765                                  ;		ZR clear if fixed media
  3766                                  ;
  3767                                  ;	USED	none
  3768                                  
  3769                                  	; 12/01/2023
  3770                                  RemCheck:
  3771 00000F60 50                      	push	ax
  3772 00000F61 53                      	push	bx
  3773 00000F62 89C3                    	mov	bx,ax
  3774 00000F64 B80844                  	mov	ax,4408h
  3775                                  	;mov	ax,(IOCTL<<8)+8 ; 4408h
  3776 00000F67 CD21                    	int	21h		; DOS - 2+ - IOCTL -
  3777 00000F69 7304                    	jnc	short rcCont		
  3778                                  
  3779                                  ;	If an error occurred, assume the media is non-removable.
  3780                                  ;	AX contains the non-zero error code from the int 21, so
  3781                                  ;	'or ax,ax; sets non-zero. This behavior makes network drives
  3782                                  ;	appear to be non-removable.				
  3783                                  					
  3784 00000F6B 09C0                    	or	ax,ax			
  3785 00000F6D EB05                    	jmp	short ResRegs
  3786                                  rcCont:
  3787 00000F6F 83E001                  	and	ax,1
  3788 00000F72 F7D0                    	not	ax
  3789                                  ResRegs:
  3790 00000F74 5B                      	pop	bx
  3791 00000F75 58                      	pop	ax
  3792 00000F76 C3                      	retn
  3793                                  
  3794                                  ;***	THeadFix
  3795                                  ;
  3796                                  ;	Far version of HeadFix, called from transient.
  3797                                  
  3798                                  THeadFix:
  3799                                  	; 12/01/2023
  3800 00000F77 1F                      	pop	ds			; ds = DATARES
  3801 00000F78 83C402                  	add	sp,2			; discard old ds value on stack
  3802                                  
  3803 00000F7B E80100                  	call	HeadFix
  3804 00000F7E CB                      	retf
  3805                                  
  3806                                  ;***	HeadFix
  3807                                  
  3808                                  	; 12/01/2023
  3809                                  HeadFix:
  3810 00000F7F E83101                  	call	SetVect			; set vectors to our values
  3811                                  
  3812                                  ;	Clean up header
  3813                                  
  3814                                  ;	Bugbug:	optimize:
  3815                                  ;	mov	word ptr ds:Pdb_Jfn_Table,cx  instead of separate bytes
  3816                                  
  3817 00000F82 31DB                    	xor	bx,bx			; BX = handle = 0
  3818 00000F84 8B0E[3D02]              	mov	cx,[Io_Save]		; CX = original stdin, stdout
  3819                                  	;mov	dx,[18h] 
  3820 00000F88 8B161800                	mov	dx,[PDB.JFN_TABLE]	; DX = current stdin, stdout
  3821 00000F8C 38D1                    	cmp	cl,dl
  3822 00000F8E 7408                    	je	short Chk1		; stdin matches
  3823 00000F90 B43E                    	mov	ah,3Eh
  3824                                  	;mov	ah,CLOSE  ; 3Eh
  3825 00000F92 CD21                    	int	21h			; close stdin
  3826                                  	;mov	[18h],cl
  3827 00000F94 880E1800                	mov	[PDB.JFN_TABLE],cl	; restore stdin
  3828                                  Chk1:
  3829 00000F98 43                      	inc	bx			; BX = handle = 1
  3830 00000F99 38F5                    	cmp	ch,dh			
  3831 00000F9B 7408                    	je	short ChkOtherHand	; stdout matches
  3832 00000F9D B43E                    	mov	ah,3Eh
  3833                                  	;mov	ah,CLOSE
  3834 00000F9F CD21                    	int	21h			; close stdout
  3835                                  	;mov	[19h],ch
  3836 00000FA1 882E1900                	mov	[PDB.JFN_TABLE+1],ch	; restore stdout
  3837                                  ChkOtherHand:
  3838 00000FA5 83C304                  	add	bx,4			; skip handles 2,3,4
  3839 00000FA8 B90F00                  	mov	cx,FILPERPROC-5	; 15	; CX = # handles to close
  3840                                  					; (handles 0-4 already done)
  3841                                  CloseLoop:
  3842 00000FAB B43E                    	mov	ah,3Eh
  3843                                  	;mov	ah,CLOSE ; 3Eh
  3844 00000FAD CD21                    	int	21h			; close each handle
  3845 00000FAF 43                      	inc	bx			; BX = next handle
  3846 00000FB0 E2F9                    	loop	CloseLoop
  3847                                  
  3848                                  	; MSDOS 6.0
  3849                                  ;	Bugbug:	since this is for transient code, move it there
  3850                                  	
  3851                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3852                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:103Dh)
  3853                                  
  3854                                  ;	M012: remove this CS -> DS. Must've been missed during
  3855                                  ;	purification.
  3856                                  ;;	push	ds			; save data segment
  3857                                  ;;	push	cs			; get local segment into DS
  3858                                  ;;	pop	ds			;
  3859 00000FB2 803E[6202]FF            	cmp	byte [Append_Flag],-1	; do we need to reset APPEND?
  3860 00000FB7 750E                    	jne	short Append_Fix_End	; no - just exit
  3861 00000FB9 B807B7                  	mov	ax,0B707h
  3862                                  	;mov	ax,AppendSetState	; set the state of Append
  3863 00000FBC 8B1E[6002]              	mov	bx,[Append_State] 	; back to the original state
  3864 00000FC0 CD2F                    	int	2Fh			;
  3865 00000FC2 C606[6202]00            	mov	byte [Append_Flag],0	; set append flag to invalid
  3866                                  Append_Fix_End: 			;
  3867                                  ;;	pop	ds			; get data segment back
  3868 00000FC7 C3                      	retn
  3869                                  
  3870                                  	; MSDOS 3.3
  3871                                  	;retn
  3872                                  
  3873                                  ;***	SavHand - save current program's stdin/out & set to our stderr
  3874                                  ;
  3875                                  ;	ENTRY	nothing
  3876                                  ;
  3877                                  ;	EXIT	nothing
  3878                                  ;
  3879                                  ;	USED	flags
  3880                                  ;
  3881                                  ;	EFFECTS
  3882                                  ;	  Handle01 = current program's stdin,stdout JFN entries
  3883                                  ;	  current program's stdin,stdout set to our stderr
  3884                                  ;
  3885                                  
  3886                                  ;SR;
  3887                                  ; Changed ds = DATARES. We need it to access our JFN_Table
  3888                                  ; Called from ContC ( ds = DATARES ) and DskErr ( ds = DATARES ).
  3889                                  
  3890                                  SavHand:
  3891                                  	;assume	ds:DATARES,es:NOTHING,ss:NOTHING
  3892                                  
  3893                                  	; 12/01/2023
  3894                                  	;push	ds ; MSDOS 3.3
  3895                                  
  3896 00000FC8 53                      	push	bx			;preserve registers
  3897 00000FC9 50                      	push	ax
  3898                                  	; 12/01/2023
  3899 00000FCA 06                      	push	es
  3900 00000FCB 1E                      	push	ds			; save DATARES value
  3901                                  
  3902 00000FCC B451                    	mov	ah,51h
  3903                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3904 00000FCE CD21                    	int	21h			; BX = user's header seg addr
  3905 00000FD0 8EDB                    	mov	ds,bx			; DS = user's header seg addr
  3906                                  	;lds	bx,[34h]	
  3907 00000FD2 C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to JFN table
  3908 00000FD6 8B07                    	mov	ax,[bx]			; AX = stdin,stdout JFN's
  3909                                  	; 12/01/2023
  3910 00000FD8 07                      	pop	es			; es = DATARES
  3911 00000FD9 06                      	push	es			; save it back on stack
  3912 00000FDA 26A3[E401]              	mov	[es:Handle01],ax	; save user's stdin, stdout
  3913                                  	;mov	[cs:HANDLE01],ax
  3914                                  
  3915                                  ;SR;
  3916                                  ; Use es to address Handle01 & our JFN_Table
  3917                                  
  3918                                  	; 12/01/2023
  3919                                  	;mov	al,[es:1Ah]
  3920 00000FDE 26A01A00                	mov	al,[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr
  3921                                  	;mov	al,[cs:PDB.JFN_TABLE+2] ; mov al,[cs:1Ah]
  3922 00000FE2 88C4                    	mov	ah,al			; AH = COMMAND stderr
  3923 00000FE4 8907                    	mov	[bx],ax			; set user's stdin/out to our stderr
  3924                                  	; 12/01/2023
  3925 00000FE6 1F                      	pop	ds			; restore registers
  3926 00000FE7 07                      	pop	es
  3927 00000FE8 58                      	pop	ax
  3928 00000FE9 5B                      	pop	bx
  3929                                  	;pop	ds ; MSDOS 3.3
  3930 00000FEA C3                      	retn
  3931                                  
  3932                                  	;assume	ds:DATARES
  3933                                  GetComDsk2:
  3934 00000FEB E81F00                  	call	GetComDsk
  3935 00000FEE E909FF                  	jmp	LodCom1			; memory already allocated
  3936                                  
  3937                                  RestHand:
  3938 00000FF1 1E                      	push	ds
  3939 00000FF2 53                      	push	bx			; restore stdin, stdout to user
  3940 00000FF3 50                      	push	ax
  3941                                  	; 12/01/2023
  3942 00000FF4 B451                    	mov	ah,51h
  3943                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3944 00000FF6 CD21                    	int	21h			; point to user's header
  3945 00000FF8 A1[E401]                	mov	ax,[Handle01]
  3946 00000FFB 8EDB                    	mov	ds,bx
  3947                                  	;assume ds:NOTHING
  3948                                  	;lds	bx,[34h] 
  3949 00000FFD C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to jfn table
  3950 00001001 8907                    	mov	[bx],ax			; stuff his old 0 and 1
  3951 00001003 58                      	pop	ax
  3952 00001004 5B                      	pop	bx
  3953 00001005 1F                      	pop	ds
  3954 00001006 C3                      	retn
  3955                                  
  3956                                  	;assume ds:DATARES,ss:DATARES
  3957                                  Hopeless:
  3958 00001007 BA[8405]                	mov	dx,COMBAD
  3959 0000100A E9BEFD                  	jmp	FatalC
  3960                                  
  3961                                  GetComDsk:
  3962 0000100D A0[3202]                	mov	al,[ComDrv]
  3963 00001010 E84DFF                  	call	RemCheck
  3964 00001013 75F2                    	jnz	short Hopeless		; non-removable media
  3965                                  GetComDsk3:
  3966 00001015 81FA[8405]              	cmp	dx,COMBAD		; cmp dx,offset DATARES:ComBad
  3967 00001019 7503                    	jne	short GetComDsk4
  3968                                  	;;mov	dx,offset DATARES:ComBad ; DX = ptr to msg
  3969                                  	; 12/01/2023
  3970                                  	;;mov	dx,COMBAD ; (MSDOS 5.0 COMMAND.COM - RESGROUP:10A6h)
  3971                                  	; 05/06/2023
  3972                                  	;mov	dx,COMBAD ; (MSDOS 6.22 COMMAND.COM - RESGROUP:11B6h)
  3973                                  	;invoke	RPrint			; say COMMAND is invalid
  3974 0000101B E81803                  	call	RPrint
  3975                                  	;call	RDISPMSG
  3976                                  
  3977                                  GetComDsk4:
  3978                                  
  3979                                  ;	Bugbug:	there's always a drive here? No need to check?
  3980                                  
  3981 0000101E 803E[CD01]00            	cmp	byte [PutBackDrv],0	; is there a drive in the comspec?
  3982 00001023 7509                    	jne	short Users_Drive	; yes - use it
  3983 00001025 B419                    	mov	ah,19h
  3984                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h ; use default drive
  3985 00001027 CD21                    	int	21h
  3986 00001029 0441                    	add	al,"A"                  ; convert to ascii
  3987 0000102B A2[CD01]                	mov	[PutBackDrv],al		; put in message to print out
  3988                                  
  3989                                  Users_Drive:
  3990                                  	; 12/01/2023
  3991                                  	; MSDOS 6.0
  3992 0000102E BA[9A05]                	mov	dx,PUTBACKMSG		; prompt for diskette
  3993                                  	;mov	si,offset DATARES:PutBackSubst
  3994                                  	;invoke	RPrint
  3995 00001031 BE[C701]                	mov	si,PutBackSubst		; containing COMMAND
  3996 00001034 E8FF02                  	call	RPrint
  3997                                  	;mov	dx,offset DATARES:Prompt
  3998                                  	;invoke	RPrint
  3999 00001037 BA[BC05]                	mov	dx,PROMPT		; "Press any key"
  4000 0000103A E8F902                  	call	RPrint
  4001                                  
  4002                                  	; MSDOS 3.3
  4003                                  	;mov	dx,PUTBACKMSG		; prompt for diskette
  4004                                  	;call	RDISPMSG
  4005                                  	;mov	dx,[PUTBACKSUBSTPTR]
  4006                                  	;mov	si,[COMSPEC_END]
  4007                                  	;mov	byte [si+1],'$'
  4008                                  	;call	RDISPMSG
  4009                                  	;mov	byte [si+1],0
  4010                                  	;mov	dx,PROMPT
  4011                                  	;call	RDISPMSG
  4012                                  
  4013                                  	;call	GetRawFlushedByte
  4014                                  	;retn
  4015                                  	; 12/01/2023
  4016                                  	;jmp	short GetRawFlushedByte
  4017                                  
  4018                                  ;***	GetRawFlushedByte - flush world and get raw input
  4019                                  
  4020                                  GetRawFlushedByte:
  4021                                  	; 12/01/2023
  4022 0000103D B8070C                  	mov	ax,0C07h
  4023                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT ; 0C07h
  4024 00001040 CD21                    	int	21h			; get char without testing or echo
  4025 00001042 B8000C                  	mov	ax,0C00h
  4026                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + 0 ; 0C00h
  4027 00001045 CD21                    	int	21h
  4028                                  
  4029                                  ;	Bugbug:	get rid of this return and the following retz.
  4030                                  
  4031                                  LoadCom_retn:
  4032 00001047 C3                      	retn
  4033                                  
  4034                                  	; 21/04/2023
  4035                                  TryDoOpen:
  4036 00001048 E8C2FF                  	call	GetComDsk
  4037                                  	;jmp	short LoadCom
  4038                                  
  4039                                  ;***	LoadCom - load in transient
  4040                                  
  4041                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4042                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:10DAh - CODERES:039Ah)
  4043                                  
  4044                                  LoadCom:
  4045                                  	;assume	ds:DATARES
  4046                                  	
  4047 0000104B 45                      	inc	bp				; flag command read
  4048                                  
  4049 0000104C BA[E901]                	mov	dx,ComSpec
  4050 0000104F B8003D                  	mov	ax,3D00h
  4051                                  	;mov	ax,OPEN<<8	; 3D00h
  4052 00001052 CD21                    	int	21h				; open command.com
  4053 00001054 730B                    	jnc	short ReadCom
  4054                                  	;cmp	ax,4
  4055 00001056 83F804                  	cmp	ax,ERROR_TOO_MANY_OPEN_FILES
  4056 00001059 75ED                    	jnz	short TryDoOpen
  4057 0000105B BA[4606]                	mov	dx,NOHANDMES
  4058 0000105E E96AFD                  	jmp	FatalC				; will never find a handle
  4059                                  
  4060                                  	; 21/04/2023
  4061                                  ;TryDoOpen:
  4062                                  	;call	GetComDsk
  4063                                  	;jmp	short LoadCom
  4064                                  
  4065                                  ReadCom:
  4066 00001061 89C3                    	mov	bx,ax				; BX = handle
  4067                                  	;mov	dx,offset RESGROUP:TranStart
  4068                                  	; 05/06/2023
  4069                                  	;mov	dx,26E0h ; MSDOS 6.22 COMMAND.COM
  4070 00001063 BA5025                  	mov	dx,TRANSTART
  4071 00001066 31C9                    	xor	cx,cx				; CX:DX = seek loc
  4072 00001068 B80042                  	mov	ax,4200h
  4073                                  	;mov	ax,LSEEK<<8	; 4200h
  4074 0000106B CD21                    	int	21h
  4075 0000106D 7210                    	jc	short WrongCom1
  4076                                  	; 12/01/2023
  4077                                  	;;mov	cx,offset TRANGROUP:TranSpaceEnd - 100h
  4078                                  	;mov	cx,97C5h		 ; MSDOS 5.0 COMMAND.COM
  4079                                  	; 05/06/2023
  4080                                  	;mov	cx,0AE95h		 ; MSDOS 6.22 COMMAND.COM
  4081 0000106F B9A7A9                  	mov	cx,TRANSPACEEND-100h ; 4C5Ch (for original MSDOS 3.3!)
  4082 00001072 1E                      	push	ds
  4083 00001073 8E1E[2D02]              	mov	ds,[TrnSeg]
  4084                                  	;assume	ds:NOTHING
  4085 00001077 BA0001                  	mov	dx,100h
  4086 0000107A B43F                    	mov	ah,3Fh
  4087                                  	;mov	ah,READ	; 3Fh	
  4088 0000107C CD21                    	int     21h	; DOS - 2+ - READ FROM FILE WITH HANDLE
  4089                                  			; BX = file handle, CX = number of bytes to read
  4090                                  			; DS:DX -> buffer
  4091 0000107E 1F                      	pop	ds
  4092                                  	;assume	ds:DATARES
  4093                                  WrongCom1:
  4094 0000107F 9C                      	pushf
  4095 00001080 50                      	push	ax
  4096 00001081 B43E                    	mov	ah,3Eh
  4097                                  	;mov	ah,CLOSE ; 3Eh
  4098 00001083 CD21                    	int	21h			; close command.com
  4099 00001085 58                      	pop	ax
  4100 00001086 9D                      	popf
  4101 00001087 7204                    	jc	short WrongCom		; error on read
  4102 00001089 39C8                    	cmp	ax,cx
  4103                                  	;retz				; size matched
  4104 0000108B 74BA                    	jz	short LoadCom_retn
  4105                                  WrongCom:
  4106 0000108D BA[8405]                	mov	dx,COMBAD
  4107 00001090 E87AFF                  	call	GetComDsk
  4108 00001093 EBB6                    	jmp	short LoadCom		; try again
  4109                                  
  4110                                  ;***	ChkSum - compute transient checksum
  4111                                  
  4112                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4113                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1129h
  4114                                  	
  4115                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4116                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1239h
  4117                                  ChkSum:
  4118 00001095 1E                      	push	ds
  4119 00001096 8E1E[2D02]              	mov	ds,[TrnSeg]
  4120 0000109A BE0001                  	mov	si,100h
  4121                                  	;;;mov	cx,offset TRANGROUP:TranDataEnd - 100h
  4122                                  	;;mov	cx,87C2h ; MSDOS 5.0
  4123                                  	; 05/06/2023
  4124                                  	;mov	cx,9D53h ; MSDOS 6.22
  4125 0000109D B9[6398]                	mov	cx,TRANDATAEND-100h	; 3E44h (for original MSDOS 3.3!)
  4126                                  Check_Sum:
  4127 000010A0 FC                      	cld
  4128 000010A1 D1E9                    	shr	cx,1
  4129 000010A3 31D2                    	xor	dx,dx
  4130                                  Chk:
  4131 000010A5 AD                      	lodsw
  4132 000010A6 01C2                    	add	dx,ax
  4133 000010A8 83D200                  	adc	dx,0
  4134 000010AB E2F8                    	loop	Chk
  4135                                  
  4136                                  	; 04/05/2023
  4137 000010AD 1F                      	pop	ds
  4138                                  
  4139                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4140 000010AE 3B16[3502]              	cmp	dx,[Sum]
  4141                                  
  4142                                  	;pop	ds ; 04/05/2023
  4143 000010B2 C3                      	retn
  4144                                  
  4145                                  ;***	SetVect - set interrupt vectors
  4146                                  
  4147                                  SetVect:
  4148                                  	;mov	dx,offset DATARES:LodCom_Trap 
  4149                                  	; 12/01/2023
  4150 000010B3 BA[7E00]                	mov	dx,LodCom_Trap
  4151                                  	;mov	dx,LODCOM ; MSDOS 3.3
  4152 000010B6 B82225                  	mov	ax,2522h
  4153                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8) | 22h  ; 2522h
  4154 000010B9 89160A00                	mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  4155 000010BD 8C1E0C00                	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4156 000010C1 CD21                    	int	21h
  4157                                  	;mov	dx,offset DATARES:Ctrlc_Trap
  4158 000010C3 BA[4A00]                	mov	dx,Ctrlc_Trap
  4159                                  	;mov	dx,CONTC ; MSDOS 3.3
  4160 000010C6 FEC0                    	inc	al	; 23h
  4161 000010C8 CD21                    	int	21h
  4162                                  	;mov	dx,offset DATARES:CritErr_Trap
  4163 000010CA BA[5500]                	mov	dx,CritErr_Trap
  4164                                  	;mov	dx,CRITERR ; MSDOS 3.3
  4165 000010CD FEC0                    	inc	al	; 24h
  4166 000010CF CD21                    	int	21h
  4167 000010D1 C3                      	retn
  4168                                  
  4169                                  ; ---------------------------
  4170                                  
  4171                                  	; MSDOS 6.0
  4172                                  ;;SR;
  4173                                  ;We have this to take care of the extra values pushed on the stack by
  4174                                  ;the stub before jumping to LodCom1. We set up ds here and then jump to
  4175                                  ;Lodcom1
  4176                                  
  4177                                  ;public	TrnLodCom1
  4178                                  	; 12/01/2023
  4179                                  TrnLodCom1:
  4180 000010D2 1F                      	pop	ds			; ds = DATARES
  4181 000010D3 83C402                  	add	sp,2
  4182                                  ;	pop	ds:OldDS
  4183 000010D6 E921FE                  	jmp	LodCom1
  4184                                  
  4185                                  ;=============================================================================
  4186                                  ; RUCODE.ASM, MSDOS 6.0, 1991
  4187                                  ;=============================================================================
  4188                                  ; 22/09/2018 - Retro DOS v3.0
  4189                                  
  4190                                  ;	title	Localizable code for resident COMMAND
  4191                                  
  4192                                  	;assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  4193                                  
  4194                                  ; ----------------------------------------------------------------------------
  4195                                  ;***	AskEnd - ask user to confirm batch file termination
  4196                                  ;
  4197                                  ;	Confirm with user before freeing batch ...
  4198                                  ;
  4199                                  ;	ENTRY	nothing
  4200                                  ;
  4201                                  ;	EXIT	CY = set if batch termination is confirmed
  4202                                  ;
  4203                                  ;		CY = clear if batch should continue
  4204                                  ;
  4205                                  ;	USED	AX,DX,...
  4206                                  ;
  4207                                  ;	Bugbug:	move this to transient, copy to batch segment.
  4208                                  ;	Bugbug:	or move it to command1 1st.
  4209                                  ;
  4210                                  ;	Bugbug: No_Char and Yes_Char should be constants.
  4211                                  ; ----------------------------------------------------------------------------
  4212                                  
  4213                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4214                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1169h (CODERES:0429h)
  4215                                  
  4216                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4217                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1279h (CODERES:0429h)
  4218                                  AskEnd:
  4219                                  	;assume	ds:DATARES
  4220                                  
  4221 000010D9 BA[DE05]                	mov	dx,ENDBATMES			; DX = message #
  4222 000010DC E85702                  	call	RPrint
  4223                                  	;call	RDISPMSG  ; MSDOS 3.3
  4224 000010DF B8010C                  	mov	ax,0C01h
  4225                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT  ;0C01h
  4226 000010E2 CD21                    	int     21h             ; DOS - CLEAR KEYBOARD BUFFER
  4227                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
  4228 000010E4 E8E802                  	call	CharToUpper			; change to upper case
  4229 000010E7 3A06[E504]              	cmp	al,[NO_CHAR]
  4230 000010EB 7407                    	je	short aeRet			; answer is no (CY is clear)
  4231 000010ED 3A06[E404]              	cmp	al,[YES_CHAR]
  4232 000010F1 75E6                    	jne	short AskEnd			; invalid response, try again
  4233 000010F3 F9                      	stc					; answer is yes
  4234                                  aeRet:	
  4235 000010F4 C3                      	retn
  4236                                  
  4237                                  ; ----------------------------------------------------------------------------
  4238                                  ;***	DskErr - critical error handler
  4239                                  ;
  4240                                  ;	Default critical error handler unless user intercepts int 24h.
  4241                                  ;
  4242                                  ;	ENTRY	int 24h
  4243                                  ;
  4244                                  ;	EXIT
  4245                                  ;
  4246                                  ;	USED
  4247                                  ;
  4248                                  ;	EFFECTS
  4249                                  ; ----------------------------------------------------------------------------
  4250                                  
  4251                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4252                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1185h (CODERES:0445h)
  4253                                  
  4254                                  ;SR; 
  4255                                  ;The stub is going to push the old ds value and the resident data segment
  4256                                  ;onto the stack in that order. Get it off the stack
  4257                                  
  4258                                  ;DskErr	proc	far
  4259                                  DSKERR:
  4260                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  4261                                  	; 12/01/2023
  4262 000010F5 1F                      	pop	ds			; ds = DATARES
  4263                                  	;assume ds:DATARES
  4264 000010F6 8F06[D604]              	pop	word [OldDS]		; save old ds value
  4265                                  
  4266                                  ;CRITERR: ; MSDOS 3.3
  4267 000010FA FB                      	sti
  4268                                  	; 12/01/2023
  4269                                  	;push	ds ; 25/09/2018
  4270 000010FB 06                      	push	es
  4271 000010FC 56                      	push	si
  4272 000010FD 51                      	push	cx
  4273 000010FE 57                      	push	di
  4274 000010FF 51                      	push	cx
  4275 00001100 50                      	push	ax
  4276                                  
  4277 00001101 1E                      	push	ds			;save our data segment
  4278                                  	;push	cs ; 25/09/2018
  4279 00001102 07                      	pop	es			;es = DATARES
  4280                                  
  4281 00001103 8EDD                    	mov	ds,bp
  4282                                  	;assume	ds:nothing
  4283                                  
  4284                                  	;mov	ax,[si].SDEVATT
  4285 00001105 8B4404                  	mov	ax,[si+SYSDEV.ATT] ; mov ax,[si+4]	
  4286 00001108 268826[C301]            	mov	[es:CDevAt],ah
  4287                                  
  4288                                  	;push	cs
  4289                                  	;pop	es
  4290                                  
  4291 0000110D BF[B601]                	mov	di,DevName
  4292 00001110 B90800                  	mov	cx,8
  4293                                  	;add	si,SDEVNAME  ; add si,10
  4294 00001113 83C60A                  	add	si,SYSDEV.NAME	; save device name (even for block device)
  4295                                  				
  4296 00001116 FC                      	cld
  4297 00001117 F3A4                    	rep	movsb
  4298 00001119 58                      	pop	ax
  4299 0000111A 59                      	pop	cx
  4300 0000111B 5F                      	pop	di
  4301                                  
  4302                                  ;	Stack still contains DS and ES.
  4303                                  
  4304                                  ;SR;
  4305                                  ;We need ds = DATARES for SavHand
  4306                                  
  4307                                  	 ;12/01/2023
  4308 0000111C 06                      	push	es
  4309 0000111D 1F                      	pop	ds
  4310                                  	;assume	ds:DATARES
  4311                                  
  4312                                  	;invoke	SavHand		; save user's stdin/out, set to our stderr
  4313 0000111E E8A7FE                  	call	SavHand
  4314                                  
  4315                                  	; 12/01/2023
  4316                                  	; 25/09/2018
  4317                                  	;;push	cs
  4318                                  	;push	es
  4319                                  	;pop	ds		; set up local data segment
  4320                                  	;assume	ds:resgroup
  4321                                  
  4322 00001121 52                      	push	dx
  4323 00001122 E80E02                  	call	crlf
  4324 00001125 5A                      	pop	dx
  4325                                  
  4326                                  ;	Bugbug:	rename Crit_Err_Info to CritErrAH?
  4327                                  
  4328 00001126 8826[3A02]              	mov	[Crit_Err_Info],ah	; save critical error flags
  4329                                  
  4330                                  ;	Compute and save ASCII drive letter (nonsense for char devices)
  4331                                  
  4332 0000112A 0441                    	add	al,'A'
  4333 0000112C A2[A301]                	mov	[DrvLet],al
  4334                                  
  4335                                  ;	Bugbug:	These labels are awful. Change, especially 'NoHardE'.
  4336                                  
  4337 0000112F F6C480                  	test	ah,80h
  4338 00001132 740A                    	jz	short NoHardE		; it's a disk-device error
  4339 00001134 F606[C301]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4340 00001139 7503                    	jnz	short NoHardE		; it's a character device
  4341 0000113B E9E801                  	jmp	FatErr			; it's a FAT error
  4342                                  
  4343                                  NoHardE:
  4344 0000113E BE[0605]                	mov	si,MREAD		; SI = "read" msg #
  4345 00001141 F6C401                  	test	ah,1
  4346 00001144 7403                    	jz	short SavMes		; it's a read error
  4347 00001146 BE[0F05]                	mov	si,MWRITE		; SI = "write" msg #
  4348                                  SavMes:
  4349 00001149 893E[0004]              	mov	[OldErrNo],di		; save critical error code
  4350                                  
  4351                                  ;	Bugbug:	don't need to save/restore all here?
  4352                                  
  4353 0000114D 06                      	push	es
  4354                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4355                                  	;push	ds			; GetExtendedError likes to STOMP
  4356                                  	; 12/01/2023
  4357                                  	; (all registers are changed -in dos service- except bp) *
  4358                                  	;push	bp
  4359                                  	; 19/07/2024
  4360                                  	;push	si
  4361                                  	;push	dx
  4362 0000114E 51                      	push	cx
  4363 0000114F 53                      	push	bx
  4364                                  	; 05/06/2023
  4365 00001150 B459                    	mov	ah,59h ; *
  4366                                  	;mov	ah,GetExtendedError ; 59h ; get extended error info
  4367 00001152 CD21                    	int	21h
  4368 00001154 5B                      	pop	bx
  4369 00001155 59                      	pop	cx
  4370                                  	; 19/07/2024
  4371                                  	;pop	dx
  4372                                  	;pop	si
  4373                                  	; 12/01/2023
  4374                                  	;pop	bp
  4375                                  	; 19/07/2024
  4376                                  	;pop	ds
  4377 00001156 893E[D101]              	mov	[NeedVol],di		; save possible ptr to volume label
  4378 0000115A 8C06[D301]              	mov	[NeedVol+2],es
  4379 0000115E 07                      	pop	es
  4380                                  
  4381                                  ;	Bugbug:	AX has extended error code, so no need to zero AH?
  4382                                  
  4383                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4384                                  	;xor	ah,ah
  4385 0000115F 89C7                    	mov	di,ax			; DI = error code
  4386                                  
  4387                                  ; Bugbug: somewhat obsolete documentation?
  4388                                  ;
  4389                                  ; DI is now the correct error code. Classify things to see what we are
  4390                                  ; allowed to report. We convert DI into a 0-based index into a message table.
  4391                                  ; This presumes that the int 24 errors (oldstyle) and new errors (sharing and
  4392                                  ; the like) are contiguous.
  4393                                  
  4394                                  ;	Bugbug:	simplify following code by cmp'ing instead of sub'ing.
  4395                                  ;	Check use of ErrCd_24, though.
  4396                                  
  4397 00001161 83EF13                  	sub	di,ERROR_WRITE_PROTECT ; 13h
  4398 00001164 7303                    	jae	short HavCod
  4399                                  
  4400                                  ;	Bugbug:	wouldn't it be better to display the original error msg,
  4401                                  ;	even though it's not a critical error?
  4402                                  
  4403 00001166 BF0C00                  	mov	di,ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT ; mov di,0Ch
  4404                                  
  4405                                  ; DI now has the mapped error code. Old style errors are:
  4406                                  ;   FOOBAR <read|writ>ing drive ZZ.
  4407                                  ; New style errors are:
  4408                                  ;   FOOBAR
  4409                                  ; We need to figure out which the particular error belongs to.
  4410                                  
  4411                                  HavCod:
  4412 00001169 C606[D501]00            	mov	byte [ErrType],0	; assume old style
  4413 0000116E 83FF10                  	cmp	di,ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT  ; cmp di,10h
  4414 00001171 7405                    	je	short SetStyle
  4415 00001173 83FF11                  	cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4416 00001176 7504                    	jne	short GotStyle
  4417                                  
  4418                                  SetStyle:
  4419                                  ;	Bugbug:	use INC
  4420                                  	;mov	byte [ErrType],1		; must be new type
  4421 00001178 FE06[D501]              	inc	byte [ErrType] ; Retro DOS v3.0 COMMAND.COM - 22/09/2018
  4422                                  
  4423                                  GotStyle:
  4424 0000117C 893E[E201]              	mov	[ErrCd_24],di
  4425                                  	; 12/01/2023
  4426                                  	; 25/09/2018
  4427                                  	; MSDOS 6.0
  4428 00001180 83FF14                  	cmp	di,ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT ; cmp di,14h
  4429                                  	; MSDOS 3.3
  4430                                  	;cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4431                                  
  4432                                  						; If the error message is unknown
  4433 00001183 7641                    	jbe	short NormalError		;  redirector, continue. Otherwise,
  4434                                  
  4435                                  ; We do not know how to handle this error. Ask IFSFUNC if she knows
  4436                                  ; how to handle things
  4437                                  
  4438                                  ;input to IFSFUNC:    AL=1
  4439                                  ;		      BX=extended error number
  4440                                  ;
  4441                                  ;output from IFSFUNC: AL=error type (0 or 1)
  4442                                  ;			 0=<message> error (read/writ)ing (drive/device) xxx
  4443                                  ;			   Abort, Retry, Ignore
  4444                                  ;			 1=<message>
  4445                                  ;			   Abort, Retry, Ignore
  4446                                  ;		      ES:DI=pointer to message text
  4447                                  ;		      carry set=>no message
  4448                                  
  4449 00001185 89C7                    	mov	di,ax			; retrieve correct extended error...
  4450 00001187 B80005                  	mov	ax,0500h		; is the redir there?
  4451 0000118A CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
  4452                                  			; Return: AL = 00h not installed, OK to install
  4453                                  			; 01h not installed, can't install
  4454                                  			; FFh installed
  4455 0000118C 3CFF                    	cmp	al,0FFh
  4456 0000118E 7529                    	jne	short NoHandler		; no, go to NoHandler
  4457                                  
  4458                                  	; 12/01/2023
  4459                                  	; MSDOS 6.0
  4460 00001190 53                      	push	bx
  4461 00001191 89FB                    	mov	bx,di			; get ErrType and ptr to error msg
  4462 00001193 B80105                  	mov	ax,0501h
  4463 00001196 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4464 00001198 5B                      	pop	bx 
  4465 00001199 721E                    	jc	short NoHandler
  4466                                  	
  4467                                  	; MSDOS 3.3
  4468                                  	;mov     ax,di
  4469                                  	;mov     ah,5
  4470                                  	;int     2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4471                                  	;jc      short NOHANDLER
  4472                                  
  4473                                  ;	Bugbug:	need to record error type?
  4474                                  
  4475 0000119B A2[D501]                	mov	[ErrType],al
  4476                                  
  4477 0000119E 1E                      	push	ds
  4478 0000119F 06                      	push	es
  4479 000011A0 1F                      	pop	ds
  4480 000011A1 89FA                    	mov	dx,di
  4481 000011A3 B9FFFF                  	mov	cx,-1			; find end of msg
  4482 000011A6 30C0                    	xor	al,al
  4483                                  
  4484 000011A8 FC                      	cld
  4485 000011A9 F2AE                    	repnz	scasb
  4486                                  
  4487                                  ;	Bugbug:	we can do better than this.
  4488                                  
  4489                                  	;mov	byte [di-1],'$'
  4490                                  	; 19/07/2024
  4491 000011AB 4F                      	dec	di
  4492 000011AC C60524                  	mov	byte [di],'$'
  4493                                  	
  4494                                  	;CALL	RDISPMSG ; MSDOS 3.3
  4495                                  	
  4496 000011AF B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9	; print the message
  4497 000011B1 CD21                    	int	21h
  4498                                  
  4499                                  	;mov	byte [di-1],0			; restore terminal byte
  4500                                  	; 19/07/2024
  4501 000011B3 C60500                  	mov	byte [di],0
  4502                                  
  4503 000011B6 1F                      	pop	ds				; clean up and continue
  4504 000011B7 EB15                    	jmp	short CheckErrType
  4505                                  
  4506                                  ;*	Redir isn't available or doesn't recognize the error.
  4507                                  ;	Restore regs to unextended error.
  4508                                  
  4509                                  NoHandler:
  4510 000011B9 C606[D501]00            	mov	byte [ErrType],0
  4511                                  ;	Bugbug:	won't this break, since we add error_write_protect back in?
  4512 000011BE 8B3E[0004]              	mov	di,[OldErrNo]
  4513 000011C2 893E[E201]              	mov	[ErrCd_24],di
  4514                                  
  4515                                  NormalError:
  4516                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4517                                  	; MSDOS 6.0
  4518 000011C6 83C713                  	add	di,ERROR_WRITE_PROTECT
  4519 000011C9 87FA                    	xchg	di,dx			; may need dx later
  4520 000011CB E88101                  	call	RPrintCrit		; print error type
  4521                                  
  4522                                  	; MSDOS 3.3
  4523                                  	;shl     di,1
  4524                                  	;mov     di,[CRMSGTBL+di]
  4525                                  	;xchg    di,dx
  4526                                  	;call    RDISPMSG
  4527                                  
  4528                                  CheckErrType:
  4529 000011CE 803E[D501]00            	cmp	byte [ErrType],0	; Check error style...
  4530 000011D3 7405                    	je	short ContOld
  4531 000011D5 E85B01                  	call	crlf			; if new style then done printing
  4532 000011D8 EB31                    	jmp	short Ask
  4533                                  
  4534                                  ContOld:
  4535                                  	; 12/01/2023
  4536                                  	; MSDOS 6.0
  4537 000011DA 46                      	inc	si			; DS:SI = ptr to asciiz string
  4538                                  
  4539                                  ;	Bugbug:	combine some of the following two sections?
  4540                                  
  4541                                  	; 12/01/2023
  4542 000011DB F606[C301]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4543                                  	;test	byte [CDevAt],DEVTYP shr 8 ; 80h
  4544 000011E0 740F                    	jz	short BlkErr
  4545                                  	;;mov	dx,offset DATARES:CharDevErr	; DX = ptr to device message
  4546                                  	;mov	dx,ChardevErr
  4547 000011E2 BA[2705]                	mov	dx,MDEVICE
  4548                                  	;mov	[CharDevErrRw.SubstPtr],si	; point to read/write string
  4549 000011E5 8936[A501]              	mov	[CharDevErrRw],si
  4550                                  	;mov	si,offset DATARES:CharDevErrSubst; SI = ptr to subst block
  4551 000011E9 BE[A401]                	mov	si,CharDevErrSubst
  4552                                  
  4553 000011EC E84701                  	call	RPrint				; print the message
  4554 000011EF EB1A                    	jmp	short Ask			; don't ralph on command
  4555                                  
  4556                                  	; 12/01/2023
  4557                                  	; MSDOS 3.3
  4558                                  	;mov	dx,ERRMES
  4559                                  	;call	RDISPMSG
  4560                                  	;mov	dx,si
  4561                                  	;call	RDISPMSG
  4562                                  	;
  4563                                  	;test	byte [CDevAt],80h
  4564                                  	;jz	short BLKERR
  4565                                  	;mov	dx,CHARDEVERR	; " device "
  4566                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4567                                  	;int	21h		; DOS - PRINT STRING
  4568                                  	;			; DS:DX -> string terminated by "$"
  4569                                  	;jmp	short ASK
  4570                                  
  4571                                  BlkErr:
  4572                                  	; 12/01/2023
  4573                                  	; MSDOS 6.0
  4574                                  	;;mov	dx,offset DATARES:BlkDevErr	; DX = error msg #
  4575                                  	;mov	dx,BlkDevErr
  4576 000011F1 BA[1805]                	mov	dx,MDRIVE
  4577                                  	;mov	[BlkDevErrRw.SubstPtr],si	; "reading","writing" ptr
  4578 000011F4 8936[9E01]              	mov	[BlkDevErrRw],si
  4579                                  	;mov	si,offset DATARES:BlkDevErrSubst ; SI = ptr to subst block
  4580 000011F8 BE[9D01]                	mov	si,BlkDevErrSubst
  4581 000011FB E83801                  	call	RPrint
  4582                                  
  4583                                  	; MSDOS 3.3
  4584                                  	;mov	dx,BLKDEVERR
  4585                                  	;call	RDISPMSG
  4586                                  
  4587 000011FE 803E[E601]00            	cmp	byte [Loading],0
  4588 00001203 7406                    	jz	short Ask
  4589 00001205 E8E9FD                  	call	RestHand
  4590 00001208 E9E0FD                  	jmp	GetComDsk2		; if error loading COMMAND, re-prompt
  4591                                  Ask:
  4592 0000120B 833E[E201]0F            	cmp	word [ErrCd_24],15	; error 15 has an extra message
  4593 00001210 751E                    	jne	short Not15		; not error 15
  4594                                  
  4595                                  ;*	For error 15, tell the user which volume/serial # are needed.
  4596                                  
  4597 00001212 51                      	push	cx
  4598                                  
  4599                                  ;	Bugbug:	does this push/pop need to be done?
  4600                                  
  4601 00001213 1E                      	push	ds
  4602 00001214 07                      	pop	es
  4603 00001215 C536[D101]              	lds	si,[NeedVol]
  4604                                  	;assume	ds:NOTHING
  4605 00001219 57                      	push	di
  4606 0000121A BF[B301]                	mov	di,VolName
  4607                                  	; 12/01/2023
  4608                                  	; MSDOS 6.0
  4609 0000121D B91000                  	mov	cx,16			; copy volume name & serial #
  4610                                  	; MSDOS 3.3
  4611                                  	;mov	cx,11			; copy volume name
  4612 00001220 FC                      	cld
  4613 00001221 F3A4                    	rep	movsb
  4614 00001223 5F                      	pop	di
  4615 00001224 06                      	push	es
  4616 00001225 1F                      	pop	ds
  4617 00001226 59                      	pop	cx
  4618                                  	;assume	ds:DATARES
  4619                                  	; 12/01/2023
  4620                                  	; MSDOS 6.0
  4621                                  	;mov	dx,offset DATARES:NeedVolMsg	; DX = ptr to msg
  4622                                  	;mov	si,offset DATARES:NeedVolSubst	; DS:SI = ptr to subst block
  4623                                  	;mov	dx,NeedVolMsg
  4624 00001227 BA[3705]                	mov	dx,MVOLSERIAL
  4625 0000122A BE[AA01]                	mov	si,NeedVolSubst
  4626 0000122D E80601                  	call	RPrint
  4627                                  
  4628                                  	; MSDOS 3.3
  4629                                  	;mov	dx,NEEDVOLMSG
  4630                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4631                                  	;int	21h		; DOS - PRINT STRING
  4632                                  	;			; DS:DX -> string terminated by "$"
  4633                                  Not15:
  4634                                  ;*	Print abort, retry, ignore, fail message.
  4635                                  ;	Print only options that are valid.
  4636                                  
  4637                                  ;	Bugbug:	sizzle this.
  4638                                  
  4639                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4640 00001230 BA[E604]                	mov	dx,REQ_ABORT
  4641 00001233 E80001                  	call	RPrint
  4642                                  	;call	RDISPMSG
  4643 00001236 F606[3A02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED  ; 10h
  4644 0000123B 7406                    	jz	short Try_Ignore
  4645 0000123D BA[EC04]                	mov	dx,REQ_RETRY
  4646 00001240 E8F300                  	call	RPrint
  4647                                  	;call	RDISPMSG
  4648                                  Try_Ignore:
  4649 00001243 F606[3A02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h
  4650 00001248 7406                    	jz	short Try_Fail
  4651 0000124A BA[F404]                	mov	dx,REQ_IGNORE
  4652 0000124D E8E600                  	call	RPrint
  4653                                  	;call	RDISPMSG
  4654                                  Try_Fail:
  4655 00001250 F606[3A02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED   ; 08h
  4656 00001255 7406                    	jz	short Term_Question
  4657 00001257 BA[FD04]                	mov	dx,REQ_FAIL
  4658 0000125A E8D900                  	call	RPrint
  4659                                  	;call	RDISPMSG
  4660                                  Term_Question:
  4661 0000125D BA[0405]                	mov	dx,REQ_END
  4662 00001260 E8D300                  	call	RPrint
  4663                                  	;call	RDISPMSG
  4664                                  
  4665                                  ;	If the /f switch was given, we fail all requests.
  4666                                  
  4667 00001263 F606[4702]FF            	test	byte [fFail],-1
  4668 00001268 741B                    	jz	short DoPrompt
  4669 0000126A B403                    	mov	ah,3				; signal fail
  4670 0000126C E9A800                  	jmp	EExit
  4671                                  
  4672                                  	; 16/04/2023
  4673                                  Abort_Process:
  4674 0000126F F606[B402]01            	test	byte [InitFlag],INITINIT ; 1	; COMMAND init interrupted?
  4675 00001274 745D                    	jz	short AbortCont			; no, handle it normally
  4676 00001276 803E[4002]00            	cmp	byte [PermCom],0		; are we top level process?
  4677 0000127B 744B                    	jz	short JustExit			; yes, just exit
  4678                                  
  4679 0000127D BA[E906]                	mov	dx,PATRICIDE			; no, load ptr to error msg
  4680                                  	; 12/01/2023
  4681 00001280 E8B300                  	call	RPrint				; print it
  4682                                  	;call	RDISPMSG
  4683                                  DeadInTheWater:
  4684 00001283 EBFE                    	jmp	short DeadInTheWater		; loop until the user reboots
  4685                                  
  4686                                  DoPrompt:
  4687                                  	; 12/01/2023
  4688 00001285 B8010C                  	mov	ax,0C01h
  4689                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT ; 0C01h
  4690 00001288 CD21                    	int	21h				; get response
  4691                                  
  4692 0000128A E8A600                  	call	crlf
  4693 0000128D E83F01                  	call	CharToUpper			; convert to upper case
  4694 00001290 B400                    	mov	ah,0				; return code for ignore
  4695 00001292 F606[3A02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h ; is ignore allowed?
  4696 00001297 7406                    	jz	short User_Retry
  4697 00001299 3A06[E204]              	cmp	al,[IGNORE_CHAR]		; ignore?
  4698                                  	;jz	short EExitJ
  4699                                  	; 16/04/2023
  4700 0000129D 7478                    	jz	short EExit
  4701                                  
  4702                                  ;	Bugbug:	optimize following code.
  4703                                  
  4704                                  User_Retry:
  4705 0000129F FEC4                    	inc	ah				; return code for retry
  4706 000012A1 F606[3A02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED ; 10h ; is retry allowed?
  4707 000012A6 7406                    	jz	short User_Abort
  4708 000012A8 3A06[E104]              	cmp	al,[RETRY_CHAR]			; retry?
  4709                                  	;jz	short EExitJ
  4710                                  	; 16/04/2023
  4711 000012AC 7469                    	jz	short EExit
  4712                                  User_Abort:
  4713 000012AE FEC4                    	inc	ah				; return code for abort
  4714                                  						;  (abort always allowed)
  4715 000012B0 3A06[E004]              	cmp	al,[ABORT_CHAR]			; abort?
  4716 000012B4 74B9                    	jz	short Abort_Process		; exit user program
  4717 000012B6 FEC4                    	inc	ah				; return code for fail
  4718 000012B8 F606[3A02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED ; 08h ; is fail allowed?
  4719 000012BD 7406                    	jz	short AskJ
  4720 000012BF 3A06[E304]              	cmp	al,[FAIL_CHAR]			; fail?
  4721                                  	;jz	short EExitJ
  4722                                  	; 16/04/2023
  4723 000012C3 7452                    	jz	short EExit
  4724                                  AskJ:
  4725 000012C5 E943FF                  	jmp	Ask
  4726                                  
  4727                                  	; 12/01/2023
  4728                                  ;EExitJ:
  4729                                  	;jmp	short EExit
  4730                                  
  4731                                  JustExit:
  4732                                  	;assume	ds:DATARES
  4733                                  	; 12/01/2023
  4734 000012C8 A1[DC01]                	mov	ax,[Parent]			; load real parent pid
  4735                                  	;mov	[16h],ax
  4736 000012CB A31600                  	mov	[PDB.PARENT_PID],ax		; put it back where it belongs
  4737 000012CE B8FF4C                  	mov	ax,4CFFh
  4738                                  	;mov	ax,(EXIT<<8) | 255 ; 4CFFh
  4739 000012D1 CD21                    	int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
  4740                                  				; AL = exit code
  4741                                  AbortCont:
  4742 000012D3 F606[3002]FF            	test	byte [In_Batch],-1		; Are we accessing a batch file?
  4743 000012D8 7405                    	jz	short Not_Batch_Abort
  4744 000012DA C606[3102]01            	mov	byte [Batch_Abort],1		; set flag for abort
  4745                                  
  4746                                  Not_Batch_Abort:
  4747 000012DF 8A16[B502]              	mov	dl,[PipeFlag]
  4748 000012E3 E8D1FA                  	call	ResPipeOff
  4749 000012E6 08D2                    	or	dl,dl
  4750 000012E8 740D                    	je	short CheckForA
  4751 000012EA 833E[4302]00            	cmp	word [SingleCom],0
  4752 000012EF 7406                    	je	short CheckForA
  4753 000012F1 C706[4302]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4754                                  
  4755                                  CheckForA:
  4756 000012F7 833E[E201]00            	cmp	word [ErrCd_24],0		; write protect?
  4757 000012FC 7407                    	je	short abortfor
  4758 000012FE 833E[E201]02            	cmp	word [ErrCd_24],2		; drive not ready?
  4759 00001303 7512                    	jne	short EExit			; don't abort the FOR
  4760                                  
  4761                                  abortfor:
  4762 00001305 C606[4902]00            	mov	byte [ForFlag],0		; abort a FOR in progress
  4763 0000130A 833E[4302]00            	cmp	word [SingleCom],0
  4764 0000130F 7406                    	je	short EExit
  4765 00001311 C706[4302]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4766                                  
  4767                                  EExit:
  4768 00001317 88E0                    	mov	al,ah
  4769 00001319 89FA                    	mov	dx,di
  4770                                  RestHd:
  4771 0000131B E8D3FC                  	call    RestHand
  4772 0000131E 59                      	pop	cx
  4773 0000131F 5E                      	pop	si				; restore registers
  4774 00001320 07                      	pop	es
  4775                                  
  4776                                  	; 12/01/2023	
  4777                                  	; MSDOS 6.0
  4778                                  ;;	pop	ds
  4779                                  ;SR;
  4780                                  ;ds has to be got from the variable we saved it in
  4781                                  
  4782 00001321 8E1E[D604]               	mov	ds,[OldDS]			; restore old value of ds
  4783                                  
  4784                                  ;	pop	ds
  4785                                  ;	assume	ds:nothing
  4786                                  
  4787                                  	; MSDOS 3.3
  4788                                  	;pop	ds
  4789                                  
  4790 00001325 CF                      	iret
  4791                                  
  4792                                  FatErr:
  4793                                  	; 12/01/2023
  4794                                  	; MSDOS 6.0
  4795                                  	;mov	dx,offset DATARES:BadFatMsg
  4796                                  	;mov	si,offset DATARES:BadFatSubst
  4797 00001326 BA[5E05]                	mov	dx,BADFATMSG
  4798 00001329 BE[C401]                	mov	si,BadFatSubst
  4799 0000132C E80700                  	call	RPrint
  4800                                  
  4801                                  	; MSDOS 3.3
  4802                                  	;mov	dx,BADFATMSG
  4803                                  	;call	RDISPMSG
  4804                                  	;mov	dx,BLKDEVERR
  4805                                  	;call	RDISPMSG
  4806                                  
  4807 0000132F B002                    	mov	al,2				; abort
  4808 00001331 EBE8                    	jmp	short RestHd
  4809                                  
  4810                                  ;DskErr	endp
  4811                                  
  4812                                  	; MSDOS 6.0
  4813                                  ; ----------------------------------------------------------------------------
  4814                                  ;***	RPrint - print message
  4815                                  ;***	Crlf - display cr/lf
  4816                                  ;
  4817                                  ;	ENTRY	DS:DX = ptr to count byte, followed by message text
  4818                                  ;		DS:SI = ptr to 1st substitution block for this msg, if any
  4819                                  ;		variable fields related to substitution blocks are set
  4820                                  ;
  4821                                  ;	EXIT	nothing
  4822                                  ;
  4823                                  ;	USED	flags
  4824                                  ;
  4825                                  ;	EFFECTS
  4826                                  ;	  Message is displayed on stdout.
  4827                                  ;
  4828                                  ;	NOTE
  4829                                  ;	  Number of substitutions (%1, %2,...) in message text must not
  4830                                  ;	  be greater than number of substition blocks present.
  4831                                  ; ----------------------------------------------------------------------------
  4832                                  
  4833                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4834                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:13D1h (CODERES:0691h)
  4835                                  
  4836                                  crlf: 
  4837                                  	;mov	dx,offset DATARES:Newlin ; cheap newline
  4838                                  	; 14/01/2023
  4839 00001333 BA[1807]                	mov	dx,NEWLINE
  4840                                  
  4841                                  ;RPrint	proc
  4842                                  ;
  4843                                  ;	assume	ds:DATARES,ss:DATARES
  4844                                  ;
  4845                                  	; 14/01/2023
  4846                                  RPrint:
  4847                                  
  4848                                  ;	Bugbug:	do we need to save all reg's?
  4849                                  
  4850 00001336 56                      	push	si			; preserve registers
  4851 00001337 50                      	push	ax
  4852 00001338 53                      	push	bx
  4853 00001339 51                      	push	cx
  4854 0000133A 52                      	push	dx
  4855                                  
  4856 0000133B 89F3                    	mov	bx,si			; DS:BX = ptr to subst block
  4857 0000133D 89D6                    	mov	si,dx			; DS:SI = ptr to count byte
  4858 0000133F AC                      	lodsb				; AL = message length
  4859                                  					; DS:SI = ptr to message text
  4860 00001340 31C9                    	xor	cx,cx
  4861 00001342 88C1                    	mov	cl,al			; CX = message length
  4862 00001344 E303                    	jcxz	rpRet
  4863                                  
  4864 00001346 E81900                  	call	RDispMsg
  4865                                  
  4866 00001349 5A                      rpRet:	pop	dx
  4867 0000134A 59                      	pop	cx
  4868 0000134B 5B                      	pop	bx
  4869 0000134C 58                      	pop	ax
  4870 0000134D 5E                      	pop	si
  4871 0000134E C3                      	retn
  4872                                  
  4873                                  ;RPrint	endp
  4874                                  
  4875                                  	; 14/01/2023
  4876                                  ;	; MSDOS 3.3
  4877                                  ;CRLF:
  4878                                  ;	mov     dx,NEWLIN
  4879                                  ;
  4880                                  ;RDISPMSG: ; Display message/text
  4881                                  ;	; DS:DX = ($ terminated) Message/Text address 
  4882                                  ;	push    ax
  4883                                  ;	mov     ah,STD_CON_STRING_OUTPUT ; 9
  4884                                  ;	clc
  4885                                  ;	int     21h             ; DOS - PRINT STRING
  4886                                  ;				; DS:DX -> string terminated by "$"
  4887                                  ;	pop     ax
  4888                                  ;	retn
  4889                                  
  4890                                  
  4891                                  	; MSDOS 6.0
  4892                                  ; ----------------------------------------------------------------------------
  4893                                  ;***	RPrintCrit - print critical error message
  4894                                  ;
  4895                                  ;	ENTRY	DX = extended error # (19-39)
  4896                                  ;
  4897                                  ;	EXIT	nothing
  4898                                  ;
  4899                                  ;	USED	flags
  4900                                  ;
  4901                                  ;	EFFECTS
  4902                                  ;	  Message is displayed on stdout
  4903                                  ; ----------------------------------------------------------------------------
  4904                                  
  4905                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4906                                  
  4907                                  ;RPrintCrit	proc
  4908                                  ;	assume	ds:DATARES,ss:DATARES
  4909                                  
  4910                                  	; 14/01/2023
  4911                                  RPrintCrit:
  4912 0000134F 52                      	push	dx			; preserve DX
  4913 00001350 87DA                    	xchg	bx,dx			; BX = extended error #
  4914                                  					; DX = saved BX
  4915 00001352 83EB13                  	sub	bx,19			; BX = critical error index, from 0
  4916 00001355 D1E3                    	shl	bx,1			; BX = offset in word table
  4917 00001357 8B9F[B208]              	mov	bx,[bx+CRITMSGPTRS]	; BX = ptr to error msg
  4918 0000135B 87DA                    	xchg	bx,dx			; DX = ptr to error msg
  4919                                  					; BX = restored
  4920 0000135D E8D6FF                  	call	RPrint			; print the message
  4921 00001360 5A                      	pop	dx			; restore DX
  4922 00001361 C3                      	retn
  4923                                  
  4924                                  ;RPrintCrit	endp
  4925                                  
  4926                                  ; ----------------------------------------------------------------------------
  4927                                  ;***	RDispMsg - display message
  4928                                  ;
  4929                                  ;	Display message, with substitutions, for RPrint.
  4930                                  ;
  4931                                  ;	ENTRY	DS:SI = ptr to message text
  4932                                  ;		CX = message length
  4933                                  ;		DS:BX = ptr to substitution block, if any
  4934                                  ;
  4935                                  ;	EXIT	nothing
  4936                                  ;
  4937                                  ;	USED	AX,CX,DX,SI
  4938                                  ; ----------------------------------------------------------------------------
  4939                                  
  4940                                  ;RDispMsg	proc
  4941                                  ;	assume	ds:DATARES,ss:DATARES
  4942                                  
  4943                                  RDispMsg:
  4944                                  	; 14/01/2023
  4945                                  rdNextChar:
  4946 00001362 AC                      	lodsb				; AL = next char
  4947 00001363 3C25                    	cmp	al,'%'
  4948 00001365 7511                    	jne	short rdOutChar		; not a substitution
  4949 00001367 8A14                    	mov	dl,[si]			; DL = possible '1' - '9'
  4950 00001369 80EA31                  	sub	dl,'1'			; DL = 0 - 8 = '1' - '9'
  4951 0000136C 80FA09                  	cmp	dl,9
  4952 0000136F 7307                    	jae	short rdOutChar		; not a substitution
  4953                                  
  4954                                  ;*	A substitution code %1 - %9 has been encountered.
  4955                                  ;	DL = 0-8, indicating %1-%9
  4956                                  ;	DS:BX = ptr to substitution block
  4957                                  
  4958 00001371 E80D00                  	call	SubstMsg		; display the substitution
  4959 00001374 46                      	inc	si			; SI = ptr past %n
  4960 00001375 49                      	dec	cx			; count extra character in %n
  4961 00001376 EB06                    	jmp	short rdCharDone
  4962                                  
  4963                                  ;*	Normal character output.
  4964                                  
  4965                                  rdOutChar:
  4966 00001378 88C2                    	mov	dl,al			; DL = char
  4967 0000137A B402                    	mov	ah,2			; AH = DOS Character Output code
  4968 0000137C CD21                    	int	21h			; call DOS
  4969                                  rdCharDone:
  4970 0000137E E2E2                    	loop	rdNextChar
  4971 00001380 C3                      	retn
  4972                                  
  4973                                  ;RDispMsg	endp
  4974                                  
  4975                                  ; ----------------------------------------------------------------------------
  4976                                  ;***	SubstMsg - display message substitution
  4977                                  ;
  4978                                  ;	Display a substitution string within a message.
  4979                                  ;	Substitution can be a char, an ASCIIZ string, or
  4980                                  ;	a word to be displayed as hex digits.
  4981                                  ;
  4982                                  ;	ENTRY	DL = substitution index 0-8 (for codes %1-%9)
  4983                                  ;		DS:BX = ptr to substitution block
  4984                                  ;
  4985                                  ;	EXIT	nothing
  4986                                  ;
  4987                                  ;	USED	AX,DX
  4988                                  ; ----------------------------------------------------------------------------
  4989                                  
  4990                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4991                                  
  4992                                  ;SubstMsg	proc
  4993                                  ;	assume	ds:DATARES,ss:DATARES
  4994                                  	
  4995                                  	; 14/01/2023
  4996                                  SubstMsg:
  4997 00001381 53                      	push	bx			; preserve BX
  4998 00001382 51                      	push	cx			; preserve CX
  4999                                  
  5000                                  	;mov	al,size SUBST		; AL = size of substitution block
  5001 00001383 B003                    	mov	al,3
  5002 00001385 F6E2                    	mul	dl			; AX = offset of desired subst block
  5003 00001387 01C3                    	add	bx,ax			; DS:BX = ptr to desired subst block
  5004                                  
  5005                                  	;mov	al,[bx].SubstType	; AX = substitution type flag
  5006 00001389 8A07                    	mov	al,[bx]
  5007                                  	;mov	bx,[bx].SubstPtr	; BX = ptr to char, str, or hex value
  5008 0000138B 8B5F01                  	mov	bx,[bx+1]
  5009                                  
  5010                                  ;	AL = 1, 2, or 3 for char, string, or hex type
  5011                                  
  5012 0000138E FEC8                    	dec	al
  5013 00001390 7428                    	jz	short smChar
  5014 00001392 FEC8                    	dec	al
  5015 00001394 742C                    	jz	short smStr
  5016                                  
  5017                                  ;*	Hex number substitution.
  5018                                  
  5019                                  	;mov	ax,ds:[bx]		; AX = word value
  5020 00001396 8B07                    	mov	ax,[bx]
  5021 00001398 B90400                  	mov	cx,4			; CX = # digits to display
  5022                                  smDigit:
  5023 0000139B D1C0                    	rol	ax,1
  5024 0000139D D1C0                    	rol	ax,1
  5025 0000139F D1C0                    	rol	ax,1
  5026 000013A1 D1C0                    	rol	ax,1			; AL<3:0> = next digit
  5027                                  
  5028 000013A3 50                      	push	ax			; save other digits
  5029 000013A4 240F                    	and	al,0Fh			; AL = binary digit
  5030 000013A6 0430                    	add	al,'0'			; AL = ascii digit if 0-9
  5031 000013A8 3C39                    	cmp	al,'9'
  5032 000013AA 7602                    	jbe	short smDigit09		; it's 0-9
  5033                                  	;add	al,7
  5034 000013AC 0407                    	add	al,('A' - '0') - 10	; AL = ascii digit A-F
  5035                                  smDigit09:
  5036 000013AE 88C2                    	mov	dl,al			; DL = ascii digit
  5037 000013B0 B402                    	mov	ah,2
  5038 000013B2 CD21                    	int	21h			; output the ascii digit
  5039 000013B4 58                      	pop	ax			; restore all digits
  5040                                  
  5041 000013B5 E2E4                    	loop	smDigit
  5042                                  	;jmp	short smRet
  5043                                  	; 14/01/2023
  5044                                  smRet:	
  5045 000013B7 59                      	pop	cx
  5046 000013B8 5B                      	pop	bx
  5047 000013B9 C3                      	retn
  5048                                  
  5049                                  ;*	Char substitution.
  5050                                  
  5051                                  smChar:
  5052                                  	;mov	dl,ds:[bx]		; DL = char to output
  5053 000013BA 8A17                    	mov	dl,[bx]
  5054 000013BC B402                    	mov	ah,2
  5055 000013BE CD21                    	int	21h
  5056 000013C0 EBF5                    	jmp	short smRet
  5057                                  
  5058                                  ;*	String substitution.
  5059                                  
  5060                                  smStr:
  5061                                  	;mov	dl,ds:[bx]		; DL = next char
  5062 000013C2 8A17                    	mov	dl,[bx]
  5063 000013C4 08D2                    	or	dl,dl
  5064 000013C6 74EF                    	jz	short smRet		; null char - we're done
  5065 000013C8 B402                    	mov	ah,2
  5066 000013CA CD21                    	int	21h			; display char
  5067 000013CC 43                      	inc	bx			; DS:BX = ptr to next char
  5068 000013CD EBF3                    	jmp	short smStr
  5069                                  
  5070                                  ;smRet:	pop	cx
  5071                                  ;	pop	bx
  5072                                  ;	retn
  5073                                  
  5074                                  ;SubstMsg	endp
  5075                                  
  5076                                  	; MSDOS 6.0
  5077                                  ; ----------------------------------------------------------------------------
  5078                                  ;***	CharToUpper - convert character to uppercase
  5079                                  ;
  5080                                  ;	ENTRY	AL = char
  5081                                  ;
  5082                                  ;	EXIT	AL = uppercase char
  5083                                  ;
  5084                                  ;	USED	AX
  5085                                  ; ----------------------------------------------------------------------------
  5086                                  
  5087                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5088                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  5089                                  
  5090                                  ;CharToUpper	proc
  5091                                  ;	assume	ds:DATARES
  5092                                  CharToUpper:
  5093 000013CF 50                      	push	ax		; put char on stack as arg to int 2F
  5094 000013D0 B81312                  	mov	ax,1213h	; AX = DOS int 2F 'Convert Char to Uppercase'
  5095 000013D3 CD2F                    	int	2Fh
  5096 000013D5 44                      	inc	sp		; throw away old char on stack
  5097 000013D6 44                      	inc	sp
  5098 000013D7 C3                      	retn
  5099                                  
  5100                                  ;CharToUpper	endp
  5101                                  
  5102                                  	; 14/01/2023
  5103                                  ;	; MSDOS 3.3
  5104                                  ;CHARTOUPPER:
  5105                                  ;	cmp	al,80h
  5106                                  ;	jb	short CHARTOUPPER1
  5107                                  ;	sub	al,80h
  5108                                  ;	push	ds
  5109                                  ;	push	bx
  5110                                  ;	lds	bx,[UPPERCASETBL]
  5111                                  ;	add	bx,2
  5112                                  ;	xlat
  5113                                  ;	pop	bx
  5114                                  ;	pop	ds
  5115                                  ;	jmp	short CHARTOUPPER_RETN
  5116                                  ;CHARTOUPPER1:
  5117                                  ;	cmp	al,'a'
  5118                                  ;	jb	short CHARTOUPPER_RETN
  5119                                  ;	cmp	al,'z'
  5120                                  ;	ja	short CHARTOUPPER_RETN
  5121                                  ;	sub	al,20h
  5122                                  ;CHARTOUPPER_RETN:
  5123                                  ;	retn
  5124                                  
  5125                                  ;public	EndCode
  5126                                  ;EndCode label byte
  5127                                  
  5128                                  	; MSDOS 6.0
  5129                                  ; ----------------------------------------------------------------------------
  5130                                  ;***	MsgInt2fHandler - int 2f handler for message retrieval
  5131                                  ;
  5132                                  ;	ENTRY	If we handle it -
  5133                                  ;		  AX = ((MULTDOS shl 8) or MESSAGE_2F) = 122Eh
  5134                                  ;		  DL = operation =
  5135                                  ;		     0 = get extended error messages
  5136                                  ;		     1 = set extended error messages
  5137                                  ;		     2 = get parse error messages
  5138                                  ;		     3 = set parse error messages
  5139                                  ;		     4 = get critical error messages
  5140                                  ;		     5 = set critical error messages
  5141                                  ;		     6 = get file system error messages
  5142                                  ;		     7 = set file system error messages
  5143                                  ;		     8 = get disk retriever routine
  5144                                  ;		     9 = set disk retriever routine
  5145                                  ;		  ES:DI = address for 'set' operations
  5146                                  ;
  5147                                  ;	EXIT	ES:DI = ptr to list of message ptrs, for 'get' operations
  5148                                  ;
  5149                                  ;	NOTE
  5150                                  ;	  This handler replaces the one that used to reside in DOS.
  5151                                  ;	  'Set' operations are ignored.
  5152                                  ;	  'File system error messages' are not supported.
  5153                                  ; ----------------------------------------------------------------------------
  5154                                  
  5155                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5156                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1478h (CODERES:0738h)
  5157                                  
  5158                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  5159                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1588h (CODERES:0738h)
  5160                                  
  5161                                  ;SR;
  5162                                  ;At the int 2fh entry point we push the old ds value and the resident data
  5163                                  ;segment address. Get them off the stack
  5164                                  
  5165                                  ;MsgInt2fHandler proc	far
  5166                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5167                                  
  5168                                  	; 14/01/2023
  5169                                  MsgInt2fHandler:
  5170 000013D8 1F                      	pop	ds			; ds = DATARES
  5171                                  	;assume	ds:DATARES
  5172                                  ;	pop	word [OldDS]		; save old value of ds
  5173                                  
  5174 000013D9 3D2E12                  	cmp	ax,122Eh
  5175                                  	;cmp	ax,(MULTDOS<<8)|MESSAGE_2F
  5176                                  	;;cmp	ax,(MULTDOS shl 8) or MESSAGE_2F
  5177 000013DC 742A                    	je	short miOurs		; it's ours
  5178                                  
  5179                                  ;ifndef ROMDOS
  5180                                  	;cmp	ax,5500h
  5181 000013DE 3D0055                  	cmp	ax,GET_COMMAND_STATE	; is it first COMMAND query?
  5182                                  ;else
  5183                                  ;	cmp	ax,GET_ROMCOMMAND_STATE	; is it first ROM COMMAND query?
  5184                                  ;endif	;ROMDOS
  5185 000013E1 741C                    	je	short fcOurs
  5186                                  
  5187                                  ;SR;
  5188                                  ;We cannot do a far jump any more because cs cannot be used. Push the cs:ip
  5189                                  ;onto the stack and do a far return to jump to the next 2fh handler. 
  5190                                  ;Our old ds is on the stack. We need to restore it but we cannot lose the
  5191                                  ;current value of ds as it points at the data segment. So we do some kinky
  5192                                  ;stack manipulations.
  5193                                  
  5194 000013E3 50                      	push	ax
  5195 000013E4 50                      	push	ax			; create 2 words on stack for retf
  5196                                  
  5197 000013E5 55                      	push	bp
  5198 000013E6 50                      	push	ax
  5199                                  
  5200 000013E7 89E5                    	mov	bp,sp			; bp can be used to address stack
  5201                                  
  5202                                  ;Swap the old ds value with the second dummy word on the stack. Now, we can
  5203                                  ;do a 'pop ds' at the end to restore our ds
  5204                                  
  5205 000013E9 8B4608                  	mov	ax,[bp+8]		; ax = old ds value
  5206 000013EC 894604                  	mov	[bp+4],ax
  5207                                  	
  5208                                  	;mov	ax,word ptr ds:Int2fHandler+2
  5209 000013EF A1[5404]                	mov	ax,[Int2fHandler+2]
  5210 000013F2 894608                  	mov	[bp+8],ax		; put segment address
  5211                                  	;mov	ax,word ptr ds:Int2fHandler
  5212 000013F5 A1[5204]                	mov	ax,[Int2fHandler]
  5213 000013F8 894606                  	mov	[bp+6],ax		; put offset address
  5214                                  
  5215 000013FB 58                      	pop	ax
  5216 000013FC 5D                      	pop	bp
  5217 000013FD 1F                      	pop	ds
  5218                                  
  5219 000013FE CB                      	retf				; chain on to next handler
  5220                                  
  5221                                  ;;	jmp	Int2fHandler		; hand off to next 2f handler
  5222                                  
  5223                                  fcOurs:
  5224                                  
  5225                                  ;We have to clear ax, and return in ds:si a pointer to the stub jump table
  5226                                  
  5227 000013FF 58                      	pop	ax			; discard ds currently on stack
  5228 00001400 1E                      	push	ds			; store our data segment
  5229                                  
  5230                                  	;mov	si,offset DATARES:Int2f_Entry ; start of table
  5231 00001401 BE[0400]                	mov	si,Int2f_Entry
  5232                                  
  5233 00001404 31C0                    	xor	ax,ax			; indicate COMMAND present
  5234 00001406 EB11                    	jmp	short miRet		; return to caller
  5235                                  
  5236                                  miOurs:
  5237 00001408 F6C201                  	test	dl,1
  5238 0000140B 750C                    	jnz	short miRet		; ignore 'set' operations
  5239                                  
  5240 0000140D 53                      	push	bx			; preserve BX
  5241 0000140E 89D3                    	mov	bx,dx
  5242 00001410 30FF                    	xor	bh,bh			; BX = index in word table
  5243 00001412 D1E3                    	shl	bx,1			; BX = index in dword table
  5244                                  	;les	di,MsgPtrLists[bx]	; ES:DI = ptr to msg ptr list
  5245 00001414 C4BF[1B07]              	les	di,[bx+MsgPtrLists]
  5246 00001418 5B                      	pop	bx			; restore BX
  5247                                  miRet:
  5248                                  ;	mov	ds,[OldDS]		; restore ds
  5249 00001419 1F                      	pop	ds
  5250                                  	;assume	ds:nothing
  5251                                  
  5252 0000141A CF                      	iret
  5253                                  
  5254                                  ;MsgInt2fHandler endp
  5255                                  
  5256                                  	; MSDOS 6.0
  5257                                  ; ----------------------------------------------------------------------------
  5258                                  ;***	MsgRetriever - message retrieval routine for utilities
  5259                                  ;
  5260                                  ;	Address of this routine is passed to utility programs via 
  5261                                  ;	message services int 2f. We try to find the desired message
  5262                                  ;	in memory or in our disk image.
  5263                                  ;
  5264                                  ;	ENTRY	AX = message #
  5265                                  ;		DI = offset in RESGROUP of msg ptr list
  5266                                  ;		ComSpec = asciiz pathname to our disk image
  5267                                  ;
  5268                                  ;	EXIT	CY clear for success
  5269                                  ;		ES:DI = ptr to count byte, followed by message text
  5270                                  ;
  5271                                  ;		CY set for failure
  5272                                  ;		ES,DI undefined
  5273                                  ;
  5274                                  ;	USED	flags
  5275                                  ;
  5276                                  ;	NOTE
  5277                                  ;	  The message # in AX is used to compute an offset into
  5278                                  ;	  the message ptr list pointed to by DI. The lists must
  5279                                  ;	  start with message # 1 and proceed through consecutive
  5280                                  ;	  message #'s.  
  5281                                  ;
  5282                                  ;	  It is assumed that the msg ptr list is either ParsMsgPtrs or
  5283                                  ;	  ExtMsgPtrs. We use NUMPARSEMSGS and NUMEXTMSGS to check for
  5284                                  ;	  valid message #.  ;M033
  5285                                  ;
  5286                                  ;	  List positions with no corresponding message text are
  5287                                  ;	  indicated by null pointers, which this routine detects.
  5288                                  ; ----------------------------------------------------------------------------
  5289                                  
  5290                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5291                                  
  5292                                  ;SR; This routine will be called directly by the utilities. So, we have
  5293                                  ; trap for it in the stub. The stub pushes the old value of ds and the 
  5294                                  ; DATARES value on the stack. We get them off the stack to setup ds here
  5295                                  
  5296                                  ;MsgRetriever	proc	far
  5297                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5298                                  
  5299                                  	; 14/01/2023
  5300                                  MsgRetriever:
  5301 0000141B 1F                      	pop	ds			; ds = DATARES
  5302                                  	;assume	ds:DATARES
  5303                                  ;	pop	word [OldDS]		; save old ds
  5304                                  
  5305 0000141C 50                      	push	ax			; preserve registers
  5306 0000141D 53                      	push	bx
  5307 0000141E 51                      	push	cx
  5308 0000141F 52                      	push	dx
  5309 00001420 56                      	push	si
  5310                                  
  5311                                  ;;	push	ds
  5312                                  ;;	push	cs
  5313                                  ;;	pop	ds			; DS = DATARES seg addr
  5314                                  ;;	assume	ds:RESGROUP
  5315                                  ;;	push	cs
  5316                                  
  5317 00001421 1E                      	push	ds			; get es from ds
  5318 00001422 07                      	pop	es			; ES = DATARES seg addr
  5319                                  
  5320                                  ;	Begin modification M033.
  5321                                  
  5322                                  ;	Make sure msg # is valid.
  5323                                  ;	Assume msg ptr list is either ParsMsgPtrs or ExtMsgPtrs.
  5324                                  
  5325                                  	;mov	bx,11
  5326 00001423 BB0B00                  	mov	bx,NUMPARSMSGS		; BX = # parse error msgs in list
  5327                                  	;cmp	di,offset DATARES:ParsMsgPtrs
  5328 00001426 81FF[BA09]              	cmp	di,PARSMSGPTRS
  5329 0000142A 7403                    	je	short chkmsgnum		; it's ParsMsgPtrs
  5330                                  	;mov	bx,90
  5331 0000142C BB5A00                  	mov	bx,NUMEXTMSGS		; BX = # extended error msgs in list
  5332                                  chkmsgnum:
  5333 0000142F 39C3                    	cmp	bx,ax
  5334 00001431 725A                    	jc	short mrRet		; msg # too high, return carry
  5335                                  
  5336                                  ;	Msg # is valid.
  5337                                  
  5338                                  ;	End modification M033.
  5339                                  
  5340 00001433 48                      	dec	ax
  5341 00001434 D1E0                    	shl	ax,1			; AX = offset into msg ptr list
  5342 00001436 01C7                    	add	di,ax			; DI = ptr to msg ptr
  5343                                  
  5344 00001438 81FF[5604]              	cmp	di,ResMsgEnd
  5345 0000143C 7247                    	jb	short mrInMem		; ptr (and message) in memory
  5346                                  
  5347                                  ;*	Retrieve message from disk (or ROM) image.
  5348                                  ;	Read once to get the ptr to the message, then again for the message.
  5349                                  
  5350                                  ;ifndef	ROMDOS
  5351                                  	; 14/01/2023
  5352                                  	;mov	si,offset DATARES:ComSpec	; DS:SI = ptr to pathname
  5353 0000143E BE[E901]                	mov	si,ComSpec
  5354 00001441 BA0100                  	mov	dx,1 ; EXT_EXISTS_OPEN		; DX = 'open existing file'
  5355 00001444 BB0020                  	mov	bx,2000h ; INT_24_ERROR		; BX = 'fail on crit error'
  5356 00001447 B8006C                  	mov	ax,6C00h
  5357                                  	;mov	ax,ExtOpen shl 8		; AX = 'Extended Open File'
  5358 0000144A CD21                    	int	21h				; call DOS
  5359 0000144C 723F                    	jc	short mrRet			; return failure
  5360                                  
  5361 0000144E 89C3                    	mov	bx,ax				; BX = file handle
  5362 00001450 89FA                    	mov	dx,di				; DX = ptr to msg ptr
  5363 00001452 31F6                    	xor	si,si				; SI = read count
  5364                                  mrRead:
  5365 00001454 81EA0001                	sub	dx,100h				; DX = LSW of file offset
  5366 00001458 31C9                    	xor	cx,cx				; CX = MSW of file offset
  5367 0000145A B80042                  	mov	ax,4200h
  5368                                  	;mov	ax,LSEEK shl 8			; AX = 'Set File Pointer'
  5369 0000145D CD21                    	int	21h				; call DOS
  5370 0000145F 721A                    	jc	short mrCloseFile		; handle error
  5371                                  
  5372                                  	;mov	dx,offset DATARES:MsgBuffer	; DS:DX = input buffer
  5373 00001461 BA[0204]                	mov	dx,MsgBuffer
  5374 00001464 B94000                  	mov	cx,64				; CX = # bytes to read
  5375 00001467 B43F                    	mov	ah,3Fh
  5376                                  	;mov	ah,READ				; AH = 'Read File'
  5377 00001469 CD21                    	int	21h				; call DOS
  5378 0000146B 720E                    	jc	short mrCloseFile		; handle error
  5379                                  
  5380 0000146D 09F6                    	or	si,si				; (CY cleared)
  5381 0000146F 750A                    	jnz	short mrCloseFile		; 2nd time thru - we're done
  5382 00001471 46                      	inc	si				; mark one read done
  5383 00001472 8B16[0204]              	mov	dx,[MsgBuffer]			; DX = ptr to message
  5384 00001476 09D2                    	or	dx,dx
  5385 00001478 75DA                    	jnz	short mrRead			; go read the message
  5386 0000147A F9                      	stc					; null ptr found- no msg
  5387                                  
  5388                                  mrCloseFile:
  5389 0000147B 9C                      	pushf				; save success/failure (CY)
  5390 0000147C B43E                    	mov	ah,3Eh
  5391                                  	;mov	ah,CLOSE		; AH = 'Close File'
  5392 0000147E CD21                    	int	21h			; call DOS
  5393                                  ;	Bugbug: should we avoid this popf?
  5394 00001480 9D                      	popf				; CY = success/failure
  5395 00001481 89D7                    	mov	di,dx			; ES:DI = ptr to msg, if successful
  5396 00001483 EB08                    	jmp	short mrRet		; we're done
  5397                                  
  5398                                  ;else	;ROMDOS
  5399                                  ;
  5400                                  ;;	DI = ptr to msg ptr
  5401                                  ;
  5402                                  ;	mov	si,di			; SI = ptr to msg ptr
  5403                                  ;	sub	si,100h			; SI = offset into image of msg ptr
  5404                                  ;	mov	cx,2			; CX = # bytes to copy from image
  5405                                  ;
  5406                                  ;;	ASSUME ES:NOTHING is still in effect.
  5407                                  ;
  5408                                  ;	push	ds
  5409                                  ;	pop	es				; ES = DATARES seg addr
  5410                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to buffer
  5411                                  ;	invoke	LoadFromROM			; copy msg ptr from ROM
  5412                                  ;	mov	si,word ptr MsgBuffer		; SI = ptr to message
  5413                                  ;	or	si,si
  5414                                  ;	jz	mrNoMsg			; null ptr- no message text
  5415                                  ;
  5416                                  ;	sub	si,100h			; SI = offset into image of msg
  5417                                  ;	mov	cx,64			; CX = # bytes to copy from image
  5418                                  ;	mov	di,offset DATARES:MsgBuffer
  5419                                  ;	invoke	LoadFromROM
  5420                                  ;	clc					; success
  5421                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to msg
  5422                                  ;	jmp	short mrRet
  5423                                  ;
  5424                                  ;mrNoMsg:
  5425                                  ;	stc
  5426                                  ;	jmp	short mrRet
  5427                                  ;
  5428                                  ;;;	mov	ax,COMMAND_SEG-10h	; AX = seg addr of COMMAND image
  5429                                  ;;;	mov	es,ax			; ES:DI = ptr to msg ptr in image
  5430                                  ;	assume	es:NOTHING
  5431                                  ;
  5432                                  ;endif	;ROMDOS
  5433                                  
  5434                                  ;*	Message ptr is in memory.
  5435                                  ;	If ptr is in memory, assume message is in memory (/msg).
  5436                                  
  5437                                  mrInMem:
  5438                                  	; 14/01/2023
  5439 00001485 268B3D                  	mov	di,[es:di]		; ES:DI = ptr to msg
  5440 00001488 09FF                    	or	di,di			; (CY cleared)
  5441 0000148A 7501                    	jnz	short mrRet		; found message
  5442 0000148C F9                      	stc				; null ptr found - no message
  5443                                  mrRet:	
  5444 0000148D 5E                      	pop	si			; restore all registers
  5445 0000148E 5A                      	pop	dx
  5446 0000148F 59                      	pop	cx
  5447 00001490 5B                      	pop	bx
  5448 00001491 58                      	pop	ax
  5449                                  
  5450                                  ;	mov	ds,[OldDS]		; restore ds
  5451 00001492 1F                      	pop	ds
  5452                                  	;assume	ds:nothing
  5453                                  
  5454 00001493 CB                      	retf	; 21/04/2023
  5455                                  
  5456                                  ;MsgRetriever endp
  5457                                  
  5458                                  ; M003; Start of changes for UMB support
  5459                                  
  5460                                  ; ----------------------------------------------------------------------------
  5461                                  ;***	Lh_OffUnlink -- Restore allocation strat and link state
  5462                                  ;
  5463                                  ;	ENTRY	al = Saved alloc strat and link state
  5464                                  ;			b0 = 1 if alloc strat to restore is HighFirst
  5465                                  ;			b1 = 1 if link state to restore is Linked
  5466                                  ;
  5467                                  ;	EXIT	None
  5468                                  ;
  5469                                  ;	USED	ax, bx, cx
  5470                                  ; ----------------------------------------------------------------------------
  5471                                  
  5472                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5473                                  
  5474                                  ;public	Lh_OffUnlink
  5475                                  Lh_OffUnlink:	; proc	far
  5476                                  	; 14/01/2023
  5477 00001494 88C5                    	mov	ch,al
  5478 00001496 88C1                    	mov	cl,al
  5479                                  	;;mov	ax,(ALLOCOPER shl 8) OR 0
  5480                                  	;mov	ax,(ALLOCOPER<<8)
  5481 00001498 B80058                  	mov	ax,5800h
  5482 0000149B CD21                    	int	21h
  5483 0000149D 89C3                    	mov	bx,ax
  5484 0000149F D0C9                    	ror	cl,1				; b7 = HighFirst bit
  5485 000014A1 80E180                  	and	cl,80h				; mask off b6-b0
  5486 000014A4 80E37F                  	and	bl,7fh				; mask off HighFirst bit
  5487 000014A7 08CB                    	or	bl,cl				; set HighFirst bit state
  5488                                  	;;mov	ax,(ALLOCOPER shl 8) OR 1
  5489                                  	;mov	ax,(ALLOCOPER<<8)|1
  5490 000014A9 B80158                  	mov	ax,5801h
  5491 000014AC CD21                    	int	21h				; set alloc strat
  5492                                  
  5493 000014AE 88EB                    	mov	bl,ch
  5494 000014B0 D0EB                    	shr	bl,1
  5495 000014B2 30FF                    	xor	bh,bh				; bx = linkstate
  5496                                  	;mov	ax,(ALLOCOPER shl 8) OR 3
  5497                                  	;mov	ax,(ALLOCOPER<<8)|3
  5498 000014B4 B80358                  	mov	ax,5803h
  5499 000014B7 CD21                    	int	21h				; set linkstate
  5500                                  
  5501 000014B9 CB                      	retf
  5502                                  
  5503                                  ;Lh_OffUnlink endp
  5504                                  
  5505                                  ; M003; End of changes for UMB support
  5506                                  ;public	EndCode
  5507                                  ; 14/01/2023
  5508                                  ;EndCode: ; label byte
  5509                                  ; 06/06/2023
  5510                                  ; 16/04/2023
  5511                                  EndCode equ ($-StartCode)+100h
  5512                                  ; 06/06/2023
  5513                                  ;EndCode equ $-StartCode
  5514                                  
  5515                                  ;CODERES ends
  5516                                  ;	end
  5517                                  
  5518                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5519                                  
  5520 000014BA 00<rep 6h>              	times	(((EndCode+15)>>4)<<4)-EndCode db 0
  5521                                  
  5522                                  ;align 16
  5523                                  
  5524                                  ;=============================================================================
  5525                                  ; INIT.ASM, MSDOS 6.0 (COMMAND.COM), 1991
  5526                                  ;=============================================================================
  5527                                  ; 22/09/2018 - Retro DOS v3.0 ('command3.s')
  5528                                  
  5529                                  ; INIT.ASM (MSDOS 2.11 COMMAND.COM, Retro DOS v2.0, 30/04/2018)
  5530                                  
  5531                                  ;TITLE   COMMAND Initialization
  5532                                  
  5533                                  ;ENVIRONSIZ EQU  0A0H		; Must agree with values in ENVIRONMENT segment
  5534                                  ;ENVIRONSIZ2 EQU 092H
  5535                                  ;MAX_COMSPEC EQU ENVIRONSIZ2 ; = 146  ; 22/09/2018
  5536                                  
  5537                                  ; UINIT.ASM, MSDOS 6.0, 1991
  5538                                  ; 23/09/2018
  5539                                  ENVBIG	EQU 32768		;AN000; maximum environment size
  5540                                  ; 14/01/2023
  5541                                  ;ENVSML	EQU 160			;AN000; minimum environment size
  5542                                  
  5543                                  ; ----------------------------------------------------------------------------
  5544                                  
  5545                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5546                                  
  5547                                  ; 06/06/2023
  5548                                  ; (MSDOS 5.0 COMMAND.COM -initial- Environment Structure size)
  5549                                  ;ENVIRONSIZ equ 160
  5550                                  
  5551                                  ENVSML	equ 256	; minimum environment size
  5552                                  ;MAX_COMSPEC equ ENVIRONSIZ - Env_ComSpec
  5553                                  MAX_COMSPEC equ 146
  5554                                  ECOMSPEC equ 14
  5555                                  
  5556                                  ; 14/01/2023
  5557                                  TAB_CHAR equ 09h
  5558                                  SPACE_CHAR equ 20h	
  5559                                  
  5560                                  ; 06/06/2023
  5561                                  ; (MSDOS 6.22 COMMAND.COM -initial- Environment Structure size)
  5562                                  ENVIRONSIZ equ 180	; SIZE Environment 
  5563                                  
  5564                                  ;----------------------------------------------------
  5565                                  ; MSDOS 6.0 - ENVDATA.ASM - 1991
  5566                                  ;----------------------------------------------------
  5567                                  ;Environment Struc	; Default COMMAND environment
  5568                                  ;
  5569                                  ;Env_PathString  db	"path="
  5570                                  ;Env_PathSpec	 db	"c:\msdos"
  5571                                  ;                db	0
  5572                                  ;Env_PrmptString db	"prompt="
  5573                                  ;Env_PrmptSpec   db	"$p$g"
  5574                                  ;                db	0
  5575                                  ;Env_ComString   db	"comspec="
  5576                                  ;Env_ComSpec     db	"\command.com"
  5577                                  ;		 db	134 dup (0)
  5578                                  ;
  5579                                  ;Environment ends
  5580                                  ;----------------------------------------------------
  5581                                  
  5582                                  ;-----------------------------------------------------------------------------
  5583                                  
  5584                                  ;-----------------------------------------------------------------------------
  5585                                  ; START OF INIT PORTION
  5586                                  ; This code is deallocated after initialization.
  5587                                  ;-----------------------------------------------------------------------------
  5588                                  
  5589                                  ;INIT	SEGMENT PUBLIC PARA
  5590                                  
  5591                                  ; 	EXTRN   HEADER:BYTE
  5592                                  ;	EXTRN   BADCOMLKMES:BYTE
  5593                                  
  5594                                  ;	PUBLIC  CONPROC
  5595                                  
  5596                                  ;ASSUME  CS:RESGROUP,DS:RESGROUP,ES:RESGROUP,SS:RESGROUP
  5597                                  
  5598                                          ;ORG 0
  5599                                  ;ZERO = $
  5600                                  	; 23/09/2018
  5601                                  ZERO equ $	; Offset 0E30h for original MSDOS 3.3 COMMAND.COM
  5602                                  
  5603                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5604                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1560h (CODERES:0820h)
  5605                                  
  5606                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  5607                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1670h (CODERES:0820h)
  5608                                  ConProc:
  5609                                  	;mov	sp,offset ResGroup:RStack	; must be first instruction
  5610 000014C0 BC[D604]                	mov	sp,RStack
  5611                                  
  5612                                  ; We need to set the PSP to us right at start because Carousel needs
  5613                                  ; to be lied to and it does not set PSP when it transfers control to
  5614                                  ; us after loading us as an overlay. By setting PSP, we ensure that
  5615                                  ; command.com is also not lied to.
  5616                                  
  5617                                  	; 14/01/2023
  5618                                  	; MSDOS 6.0
  5619 000014C3 B450                            mov	ah,50h
  5620                                  	;mov	ah,SET_CURRENT_PDB
  5621 000014C5 8CC3                            mov	bx,es
  5622 000014C7 CD21                            int	21h
  5623                                  
  5624                                  	; 14/01/2023
  5625                                  	;mov	ah,30h 
  5626                                  	;;mov	ax,GET_VERSION<<8 ; 3000h
  5627                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5628 000014C9 B80030                  	mov	ax,3000h
  5629 000014CC CD21                    	int	21h
  5630                                  	;;;cmp	ax,EXPECTED_VERSION ; 1E03h
  5631                                  	;;cmp	ax,5
  5632                                  	;cmp	ax,EXPECTED_VERSION ; 0005h
  5633                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5634 000014CE 3D0616                  	cmp	ax,EXPECTED_VERSION ; 1606h
  5635 000014D1 7411                    	je	short okdos			; DOS version is ok
  5636                                  
  5637 000014D3 BA[8C1F]                	mov	dx,BADVERMSG			; DX = ptr to msg
  5638 000014D6 E85DFE                  	call	RPrint
  5639                                  
  5640                                  	; MSDOS 3.3
  5641                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  5642                                  	;int	21h             ; DOS - PRINT STRING
  5643                                  				; DS:DX -> string terminated by "$"
  5644 000014D9 8CC0                    	mov	ax,es
  5645 000014DB 2639061600              	cmp	[es:PDB.PARENT_PID],ax
  5646                                  	;cmp	[es:16h],ax			; if COMMAND is own parent,
  5647                                  Here:	
  5648 000014E0 74FE                    	jz	short Here			;  loop forever
  5649                                  	
  5650 000014E2 CD20                    	int	20h				; otherwise, exit
  5651                                  okdos:
  5652                                  	; 23/09/2018
  5653                                  
  5654                                  ;  Calculate and save the end of the INIT segment (which is also
  5655                                  ;  the beginning of TRANGROUP).
  5656                                  
  5657                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5658                                  	; MSDOS 3.3
  5659                                  	;mov	ah,65h
  5660                                  	;mov	al,2
  5661                                  	;mov	dx,-1
  5662                                  	;mov	bx,-1
  5663                                  	;mov	cx,5
  5664                                  	;mov	di,UCASE_ADDR
  5665                                  	;int	21h	; AH = 65h : GET EXTENDED COUNTRY INFORMATION (DOS 3.3+)
  5666                                  	;		; AL = 02h : Get pointer to character translation table
  5667                                  	;		; BX = code page (-1 = current global code page)
  5668                                  	;		; DX = country ID (-1 = current country)
  5669                                  	;		; CX = amount of data to return
  5670                                  	;; ES:DI = pointer to output buffer
  5671                                  	;; Buffer offset :
  5672                                  	;;	00h -  byte,  country Id
  5673                                  	;;  	01h -  dword, pointer to uppercase table	
  5674                                  
  5675                                  	; 14/01/2023
  5676                                  	; MSDOS 6.0 (& MSDOS 3.3)
  5677                                    	;mov	dx,232Fh     ; MSDOS 5.0 COMMAND.COM
  5678                                  	; 06/06/2023
  5679                                  	;mov	dx,26EFh     ; MSDOS 6.22 COMMAND.COM       	
  5680 000014E4 BA5F25                  	mov	dx,TRANSTART+15			; get end of init code
  5681                                  	; 27/09/2018
  5682                                  	;mov	dx,TRANSTART ; (paragraph aligned address)
  5683 000014E7 B104                    	mov	cl,4				; change to paragraphs
  5684 000014E9 D3EA                            shr	dx,cl				;
  5685 000014EB 8CC8                            mov     ax,cs                           ; get current segment
  5686 000014ED 01D0                            add     ax,dx                           ; calculate segment of end of init
  5687 000014EF A3[D41E]                        mov     [initend],ax			; save this
  5688                                  
  5689                                  	; 14/01/2023
  5690                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1591h 
  5691                                  
  5692                                  ;  Check for /? on the command line. If found, display help text and exit.
  5693                                  ;  NOTE: this routine may terminate the program, never returning.
  5694                                  
  5695 000014F2 E8B006                  	call	CheckHelp
  5696                                  
  5697                                  ; We have to patch the segment values for the various interrupt entry points.
  5698                                  ; This is because we need to have the default addresses of the handlers in our
  5699                                  ; stub before the relocation is done. These values will then be changed once
  5700                                  ; the resident is relocated
  5701                                  
  5702 000014F5 E81E09                  	call	patch_segs
  5703                                  
  5704                                  ;  Turn APPEND off during initialization processing
  5705                                  
  5706                                  	; 14/01/2023
  5707 000014F8 B800B7                  	mov     ax,0B700h
  5708                                  	;mov	ax,APPENDINSTALL                ; see if append installed
  5709 000014FB CD2F                    	int	2Fh				;
  5710                                  	;cmp	al,0				; append installed?
  5711 000014FD 08C0                    	or	al,al
  5712 000014FF 7418                    	jz	short set_msg_addr		; no - continue
  5713                                  	
  5714 00001501 B802B7                  	mov	ax,0B702h
  5715                                  	;mov	ax,APPENDDOS			; see if append DOS version right
  5716 00001504 CD2F                    	int	2Fh				;
  5717                                  	;cmp	ax,-1				; append version correct?
  5718                                  	;jne	short set_msg_addr		; no - continue
  5719 00001506 40                      	inc	ax ; -1 -> 0
  5720 00001507 7510                    	jnz	short set_msg_addr        
  5721                                  	
  5722 00001509 B806B7                  	mov     ax,0B706h
  5723                                  	;mov	ax,APPENDGETSTATE               ; Get the state of Append
  5724 0000150C CD2F                    	int	2Fh				;
  5725 0000150E 891E[6002]                      mov     [Append_State],bx		; save append state
  5726                                         
  5727 00001512 31DB                    	xor	bx,bx                           ; clear out state
  5728 00001514 B807B7                  	mov	ax,0B707h
  5729                                  	;mov	ax,APPENDSETSTATE               ; Set the state of Append
  5730 00001517 CD2F                    	int	2Fh				; set everything off
  5731                                  
  5732                                  set_msg_addr:
  5733                                  	; 14/01/2023
  5734                                  	;;mov	di,offset resgroup:DataresEnd 	; get address of resident end
  5735                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:15BAh) 
  5736                                  	;mov	di,093Eh  ; mov di,PAERRMSG0 ; MSDOS 5.0 COMMAND.COM
  5737                                  	; 06/06/2023
  5738                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:16CBh) 
  5739                                  	;mov	di,0A41h  ; mov di,PAERRMSG0 ; MSDOS 6.22 COMMAND.COM
  5740 00001519 BF[DC08]                	mov	di,DataresEnd
  5741 0000151C 893E[5604]              	mov	[ResMsgEnd],di			; save it
  5742                                  
  5743 00001520 E80509                          call    get_XMMAddr                     ; get XMM call address
  5744                                  
  5745                                  ; Check if this is the first instance of command.com. If not, we just exit
  5746                                  ; this routine without moving any code.
  5747                                  ; After the int 2fh, ds:si points at the resident jump table in the previous
  5748                                  ; stub. We just have to copy this over
  5749                                  	
  5750                                  ;ifndef ROMDOS
  5751 00001523 B80055                  	mov	ax,5500h
  5752                                  	;mov	ax,GET_COMMAND_STATE	
  5753                                  ;else
  5754                                  ;	mov	ax,GET_ROMCOMMAND_STATE	
  5755                                  ;endif ; ROMDOS
  5756                                  
  5757 00001526 CD2F                    	int	2Fh	;  (Int 2Fh/AX=5500h - DOS 5+ - COMMAND.COM INTERFACE)
  5758                                  	;assume	ds:nothing
  5759                                  
  5760                                  	; 03/05/2023
  5761                                  	; Return:
  5762                                  	;   AX = 0000h if an instance of COMMAND.COM is already running
  5763                                  	;   DS:SI -> entry point table
  5764                                  
  5765                                  	; (si = offset Int2f_Entry)  ; (('MsgInt2fHandler:', 'fcOurs:'))
  5766                                  
  5767 00001528 09C0                    	or	ax,ax
  5768 0000152A 750C                    	jnz	short first_com			; this is the first instance
  5769                                  
  5770                                  	; 14/01/2023
  5771 0000152C 268936[1024]            	mov	[es:ResJmpTable],si		; save old stub jump table
  5772 00001531 268C1E[1224]            	mov	[es:ResJmpTable+2],ds
  5773 00001536 EB06                    	jmp	short init_cntry
  5774                                  
  5775                                  first_com:
  5776 00001538 26C606[1424]01          	mov	byte [es:FirstCom],1		; indicate first command.com
  5777                                  
  5778                                  init_cntry:
  5779                                  	; 14/01/2023
  5780 0000153E 06                      	push	es
  5781 0000153F 1F                      	pop	ds
  5782                                  	;assume	ds:RESGROUP
  5783                                  
  5784 00001540 B465                    	mov	ah,65h
  5785                                  	;mov	ah,GETEXTCNTRY			; get extended country info
  5786 00001542 B004                    	mov	al,4				; get file ucase table
  5787 00001544 BAFFFF                  	mov	dx,-1				;
  5788                                  	;mov	bx,-1				;
  5789 00001547 89D3                    	mov	bx,dx
  5790 00001549 B90500                  	mov	cx,5				; number of bytes we want
  5791                                  	;mov	di,offset resgroup:FUCase_Addr	; buffer for address
  5792 0000154C BF[5302]                	mov	di,FUCase_Addr
  5793 0000154F CD21                    	int	21h
  5794                                  		; DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
  5795                                  		; AL = function -
  5796                                  
  5797                                  ;	Bugbug:	conditionalize dbcs_vector stuff?
  5798                                  
  5799 00001551 1E                      	push	ds				;
  5800 00001552 B80063                  	mov	ax,6300h
  5801                                  	;mov	ax,(ECS_CALL shl 8) or GETLEADBTBL ;
  5802 00001555 CD21                    	int	21h				;
  5803                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
  5804                                  			
  5805 00001557 8CDB                    	mov	bx,ds				; get segment to bx
  5806 00001559 1F                      	pop	ds				;
  5807 0000155A 8936[5C02]              	mov	[Dbcs_Vector_Addr],si		; save address of
  5808 0000155E 891E[5E02]              	mov	[Dbcs_Vector_Addr+2],bx		; dbcs vector
  5809                                  
  5810                                  	;mov	ax,[16h]
  5811 00001562 A11600                  	mov	ax,[PDB.PARENT_PID]
  5812                                  				; mov ax,ds:16h	; Init PARENT so we can exit
  5813 00001565 A3[DC01]                	mov	[Parent],ax			;  correctly.
  5814 00001568 A10A00                  	mov	ax,[PDB.EXIT]   ; mov ax,ds:0Ah
  5815 0000156B A3[DE01]                	mov	[OldTerm],ax
  5816 0000156E A10C00                  	mov	ax,[PDB.EXIT+2] ; mov ax,ds:0Ch
  5817 00001571 A3[E001]                	mov	[OldTerm+2],ax
  5818                                  
  5819                                  	; 14/01/2023
  5820                                  	;;;mov	ax,offset ResGroup:EndCode + 15
  5821                                  	;;mov	ax,1569h	; MSDOS 5.0 COMMAND.COM
  5822                                  	; 06/06/2023
  5823                                  	;mov	ax,1679h	; MSDOS 6.22 COMMAND.COM
  5824                                  	;mov	ax,EndCode+15
  5825                                  	;;mov	ax,INITSTART+15 ; 24/09/2018
  5826                                  	; 14/01/2023
  5827                                  	;mov	cl,4				; ax = size of resident part of
  5828                                  	;shr	ax,cl				;  command in paragraphs. Add
  5829                                  	;mov	cx,cs				;  this to CS and you get the
  5830                                  	;add	ax,cx				;  segment of the TPA.
  5831                                  
  5832 00001574 8CC8                    	mov	ax,cs
  5833 00001576 055C01                  	add	ax,(EndCode+15)>>4
  5834                                  	
  5835 00001579 A3[FC03]                	mov     [Res_Tpa],ax			; Temporarily save the TPA segment
  5836 0000157C 2500F0                  	and     ax,0F000h
  5837 0000157F 050010                  	add     ax,1000h			; Round up to next 64K boundary
  5838 00001582 7303                    	jnc     short TpaSet			; Memory wrap if carry set
  5839 00001584 A1[FC03]                	mov     ax,[Res_Tpa]
  5840                                  TpaSet:
  5841 00001587 A3[EE03]                	mov	[LTpa],ax			; Good enough for the moment
  5842                                  	;mov	ax,[2]
  5843 0000158A A10200                  	mov	ax,[PDB.BLOCK_LEN]		; ax = # of paras given to command
  5844                                  
  5845 0000158D 8C1E[F403]              	mov	[MySeg1],ds			; These 3 variables are used as part of
  5846 00001591 8C1E[F803]              	mov	[MySeg2],ds			;  3 long ptrs that the transient will
  5847 00001595 8C1E[EC03]              	mov	[MySeg],ds			;  use to call resident routines.
  5848                                  	; 19/04/2023
  5849                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1641h
  5850 00001599 8C1E[2D07]              	mov	[MySeg3],ds			; segment of msg retriever routine 
  5851                                  
  5852 0000159D A3[3302]                	mov	[MemSiz],ax			; Needed for execing other programs
  5853                                  
  5854                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5855                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1648h
  5856                                  
  5857                                  ; First reallocate the COMMAND size to its memory image
  5858                                  	
  5859 000015A0 50                      	push	ax    
  5860                                    	;;;mov	bx,2320h  ; MSDOS 5.0 COMMAND.COM
  5861                                  	;;mov	bx,offset RESGROUP:TranStart    ;
  5862                                  	;mov	bx,TRANSTART
  5863                                  	;;add	bx,98C5h  ; MSDOS 5.0 COMMAND.COM
  5864                                          ;add	bx,offset TRANGROUP:TranSpaceEnd;
  5865                                  	;add	bx,15 ; *			; round up the size
  5866                                  	; 06/06/2023
  5867                                  	;mov	bx,26E0h  ; MSDOS 6.22 COMMAND.COM ; mov bx,offset RESGROUP:TranStart
  5868                                  	;add	bx,0AF95h ; MSDOS 6.22 COMMAND.COM ; add bx,offset TRANGROUP:TranSpaceEnd
  5869                                  	;add	bx,15 ; *			; round up the size
  5870                                  
  5871                                  	; 03/05/2023
  5872                                  	;mov	bx,TRANSTART+15 ; * ; 14/01/2023
  5873                                  	;add	bx,TRANSPACEEND
  5874                                  	; 06/06/2023
  5875                                  	;mov	bx,TRANSTART+TRANSPACEEND+15 
  5876                                          ;mov	cl,4				;
  5877                                          ;shr	bx,cl				; size of command.com
  5878 000015A1 BB000D                  	mov	bx,(TRANSTART+TRANSPACEEND+15)>>4	
  5879                                  
  5880 000015A4 B44A                    	mov	ah,4Ah
  5881                                  	;mov	ah,SETBLOCK			; free all memory above pgm
  5882 000015A6 CD21                            int     21h				;
  5883 000015A8 58                              pop     ax				;
  5884                                  	
  5885                                  ; Compute maximum size of environment
  5886                                  
  5887                                  	;;mov	word [ENVMAX],69 ; = (160/16)+(973/16)-1 ; (11EEh-0E30h+0Fh/10h) = 3Ch
  5888                                          ;mov	word [ENVMAX],((ENVIRONSIZ+15)/16) + ((ENVMAXIMUM-ZERO+15)/16) - 1
  5889                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5890                                  	;mov	word [EnvMax],81	; 10+72-1  ; MSDOS 5.0 COMMAND.COM
  5891                                  	;mov	word [EndMax],90	; 12+79-1  ; MSDOS 6.22 COMMAND.COM	
  5892 000015A9 C706[C81E]5300          	mov	word [EnvMax],((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1
  5893                                  					; 12+(((1B53h-1670h)+15)/16)-1 = 90	
  5894                                  ;
  5895                                  ; Compute minimum size of environment
  5896                                  ;
  5897                                  	;;mov	word [EnvSiz],10 ; = 160/16	; MSDOS 3.3 COMMAND.COM
  5898                                  	;mov	word [EnvSiz],16 ; = 256/16	; MSDOS 5.0 COMMAND.COM
  5899 000015AF C706[C61E]1000          	mov	word [EnvSiz],ENVSML/16 ; 256/16
  5900                                  
  5901                                  	;;;mov	dx,offset TranGroup:Transpaceend + 15 ; dx = size of transient
  5902                                  	;;mov	dx,98D4h	; MSDOS 5.0 COMMAND.COM
  5903                                  	; 06/06/2023
  5904                                  	;;mov	dx,0AFA4h	; MSDOS 6.22 COMMAND.COM
  5905                                  	;mov	dx,TRANSPACEEND+15 ; 4D5Ch+0Fh (for MSDOS 3.3 COMMAND.COM)
  5906                                  	;mov	cl,4				;  in paragraphs.
  5907                                  	;shr	dx,cl
  5908 000015B5 BAAB0A                  	mov	dx,(TRANSPACEEND+15)>>4
  5909                                  
  5910 000015B8 8916[D61E]                      mov     [TrnSize],dx			; save size of transient in paragraphs
  5911                                  
  5912 000015BC 29D0                    	sub	ax,dx				; max seg addr - # para's needed for transient
  5913 000015BE A3[2D02]                	mov	[TrnSeg],ax			;  = seg addr to load the transient at.
  5914                                  	;mov	ax,[2Ch]
  5915 000015C1 A12C00                  	mov	ax,[PDB.ENVIRON]		; ax = environment segment
  5916                                  
  5917                                  	; 14/01/2023
  5918                                          ; MSDOS 6.0
  5919                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5920 000015C4 A3[DC03]                	mov	[EnvirSeg],ax
  5921                                          
  5922                                  	; 21/01/2023
  5923 000015C7 09C0                    	or	ax,ax				; if there is no environment segment,
  5924 000015C9 7407                    	jz	short buildenv			; make one
  5925                                    
  5926                                  	; 21/01/2023
  5927                                  	; MSDOS 3.3 & MSDOS 5.0
  5928                                  	;;inc	byte [CHUCKENV]
  5929                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5930                                  	;inc	byte [AllocedEnv]		; Flag - old environment segment
  5931                                  	
  5932                                  	; MSDOS 3.3 & MSDOS 5.0
  5933                                  	; 06/06/2023
  5934                                  	;jmp	short environpassed
  5935                                  	
  5936                                  	; MSDOS 6.0
  5937                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM	
  5938 000015CB 803E[1424]00            	cmp	byte [FirstCom],0		; if this is the first command.com,
  5939 000015D0 7403                    	je	short environpassed		; do a merge job (make sure COMSPEC exists)
  5940                                  
  5941                                  	; MSDOS 6.0
  5942                                  
  5943                                  ; We allocate a buffer here just large enough to hold the 'PATH=' and
  5944                                  ; the COMSPEC. After parsing, we will allocate an environment of the right
  5945                                  ; size and free this buffer. We need this buffer because we no longer have an
  5946                                  ; ENVIRONMENT segment but need a place to store the COMSPEC which can be
  5947                                  ; given on the command line before we know the environment size. This routine
  5948                                  ; will not return in case of an allocation error. It will either exit or hang
  5949                                  ; depending on whether or not this is the first COMMAND.COM or not.
  5950                                  
  5951                                  	; 14/01/2023
  5952                                  buildenv:
  5953 000015D2 E8BC06                  	call	alloc_env                       ; try to allocate buffer
  5954                                  environpassed:
  5955                                  	; 14/01/2023 - MSDOS 5.0 COMMAND.COM
  5956                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5957                                  	;mov	[EnvirSeg],ax
  5958                                  	;
  5959 000015D5 8EC0                    	mov	es,ax                           ; and it load into es.
  5960                                  	;assume	es:nothing
  5961                                  
  5962                                  gottheenvir:
  5963                                  
  5964                                  ; Initialize the command drive
  5965                                  
  5966                                  	; 14/01/2023
  5967                                  	; MSDOS 3.3 & MSDOS 6.0
  5968 000015D7 B419                    	mov	ah,19h
  5969                                  	;mov	ah,GET_DEFAULT_DRIVE	; 19h
  5970 000015D9 CD21                    	int	21h
  5971 000015DB FEC0                    	inc	al
  5972 000015DD A2[3202]                	mov	[ComDrv],al
  5973                                  
  5974                                          ;mov	al,byte ptr ds:[FCB]	; al = default drive number for command
  5975 000015E0 A05C00                          mov	al,[FCB]
  5976 000015E3 08C0                    	or	al,al
  5977 000015E5 7433                    	jz	short nocomdrv		; no drive specified
  5978                                  
  5979 000015E7 B43A                    	mov	ah,':'
  5980 000015E9 A2[3202]                	mov	[ComDrv],al
  5981 000015EC 0440                    	add	al,40h			; convert number to uppercase character
  5982                                  
  5983 000015EE FD                      	std
  5984                                  
  5985                                  	; MSDOS 6.0
  5986                                  	; 06/06/2023
  5987                                  	; MSDOS 6.22 - COMMAND.COM - RESGROUP:17B7h
  5988 000015EF 803E[8C1E]00            	cmp	byte [AllocedEnv],0	; if a new environment is being built,
  5989 000015F4 7420                    	je	short notwidenv		;  move the default comspec string in it
  5990                                  	; 14/01/2023
  5991                                  	; MSDOS 5.0 COMMAND.COM
  5992 000015F6 8B3E[AF1E]              	mov	di,[ComspOffset]
  5993 000015FA 26807D013A                      cmp	byte [es:di+1],':'	; drive specifier already exist?
  5994 000015FF 7415                            je	short notwidenv		; yes, must have been inherited that way
  5995                                  
  5996                                  	; 06/06/2023
  5997                                  	; MSDOS 3.3
  5998                                  	;;cmp	byte [CHUCKENV],0
  5999                                  	;;jne	short NOTWIDENV
  6000                                  	; 21/01/2021
  6001                                  	; MSDOS 5.0 - COMMAND.COM - RESGROUP:16A5h
  6002                                   	;cmp	byte [AllocedEnv],0
  6003                                  	;ja	short notwidenv
  6004                                  
  6005 00001601 1E                        	push	ds			;  2 bytes to make room for a drivespec.
  6006 00001602 06                      	push	es			;  the drivespec is in ax and is copied
  6007 00001603 1F                      	pop	ds			;  on to the front of the string.
  6008                                  
  6009                                  ; 06/06/2023
  6010                                  %if 0
  6011                                  	; 21/01/2023
  6012                                  	; 14/01/2023
  6013                                  	; MSDOS 5.0 COMMAND.COM
  6014                                  	; MSDOS 3.3
  6015                                  	; 23/09/2018
  6016                                  	; 30/04/2018
  6017                                  	;mov	di,159
  6018                                  	;;MOV	DI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-1-10H
  6019                                  	;mov	di,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-1 ; mov di,9Fh
  6020                                  	mov	di,ENVIRONSIZ-1 ; 21/01/2023
  6021                                  	;mov	si,157
  6022                                  	;;MOV	SI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-3-10H
  6023                                          ;mov	si,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-3 ; mov si,9Dh 
  6024                                  	mov	si,ENVIRONSIZ-3 ; 21/01/2023 	
  6025                                  	;MOV	CX,ENVIRONSIZ2-2 ; mov cx,90h
  6026                                  	mov	cx,MAX_COMSPEC-2 ; 144
  6027                                  %endif
  6028                                  
  6029                                  	; MSDOS 6.0
  6030                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM - RESGROUP:17CCh
  6031 00001604 8DB58F00                        lea	si,[di+MAX_COMSPEC-3]	; lea si,[di+143]
  6032 00001608 8DBD9100                        lea	di,[di+MAX_COMSPEC-1]	; lea di,[di+145]
  6033                                  
  6034 0000160C B99000                          mov	cx,MAX_COMSPEC-2 ; 144
  6035                                  
  6036 0000160F F3A4                    	rep	movsb
  6037 00001611 1F                      	pop	ds
  6038                                  
  6039                                  	; MSDOS 6.0
  6040                                  	; 06/06/2023
  6041 00001612 268945FF                	mov	[es:di-1],ax
  6042                                  
  6043                                  	; MSDOS 3.3
  6044                                  	;mov	[es:0Eh],ax
  6045                                  	;;;MOV	WORD PTR ES:[ECOMSPEC-10H],AX
  6046                                  	;;MOV	[es:(ECOMSPEC-ENVIRONMENT)],ax	; mov [es:0Eh],ax
  6047                                  	; 14/01/2023
  6048                                  	; 06/06/2023
  6049                                  	;mov	[es:ECOMSPEC],ax ; mov [es:0Eh],ax
  6050                                  
  6051                                  	; MSDOS 3.3 & MSDOS 6.0
  6052                                  notwidenv:
  6053 00001616 FC                      	cld
  6054 00001617 A3[6E1E]                	mov	[AUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6055                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6056                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C3h)
  6057                                  	
  6058                                  	; 22/07/2024
  6059                                  	; 06/06/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6060                                  	;mov	[KAUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6061                                  
  6062                                  nocomdrv:
  6063 0000161A E896FA                  	call	SetVect        ; Set the vectors
  6064                                  
  6065                                  ; parsing starts here
  6066                                  
  6067                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6068                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:16C9h - CODERES:0989h)
  6069                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6070                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:17E8h - CODERES:0998h)
  6071                                  	; MSDOS 6.0
  6072 0000161D 0E                      	push	cs
  6073 0000161E 0E                      	push	cs
  6074 0000161F 1F                      	pop	ds
  6075 00001620 07                      	pop	es
  6076                                  	;assume ds:ResGroup,es:ResGroup
  6077                                  
  6078 00001621 BE8000                  	mov	si,80h				; get command line
  6079 00001624 AC                      	lodsb					; get length of line
  6080 00001625 89F7                    	mov	di,si				; get line position in di
  6081 00001627 30E4                    	xor	ah,ah				; ax = length of command line
  6082                                  
  6083                                  ; insure that the command line correctly ends with a cr
  6084                                  
  6085 00001629 01C7                    	add	di,ax				; go to end of command line
  6086 0000162B C6050D                          mov	byte [di],0Dh			; insert a carriage return
  6087 0000162E 31C9                    	xor	cx,cx				; clear cx
  6088 00001630 890E[881F]                      mov	[num_positionals],cx		; initialize positionals
  6089                                  
  6090                                  ; Scan the command line looking for the parameters
  6091                                  
  6092                                  Parse_command_line:
  6093                                  	;mov	di,offset ResGroup:Parse_Command; Get address of parse_command
  6094 00001634 BF[DE1E]                	mov	di,PARSE_COMMAND
  6095 00001637 8B0E[881F]              	mov	cx,[num_positionals]		; Get number of positionals
  6096 0000163B 31D2                    	xor	dx,dx				; clear dx
  6097 0000163D 8936[8A1F]                      mov	[old_parse_ptr],si		; save position before calling parser
  6098                                  	;call	dword ptr Init_Parse
  6099 00001641 FF1E[D21E]              	call	far [Init_Parse]		; call parser
  6100 00001645 890E[881F]                      mov     [num_positionals],cx		; Save number of positionals
  6101                                  	; 29/01/2023
  6102                                  	;;cmp	ax,END_OF_LINE ; 0FFFFh ; -1 	; are we at end of line?
  6103                                          ;cmp	ax,-1
  6104                                  	;jne	short t1
  6105                                  	; 10/06/2023
  6106 00001649 40                      	inc	ax	 ; cmp ax,-1
  6107 0000164A 7503                    	jnz	short t1 ; 0FFFFh -> 0
  6108                                  	; ax = 0
  6109 0000164C E93202                  	jmp     ArgsDone                        ; yes - exit
  6110                                  t1:	
  6111                                  	;;cmp	ax,RESULT_NO_ERROR ; 0		; did an error occur
  6112                                  	;;cmp	ax,0
  6113                                  	;and	ax,ax
  6114                                  	; 10/06/2023
  6115 0000164F 48                      	dec	ax  ; cmp ax,0
  6116 00001650 7450                    	jz	short parse_cont  ; 1 -> 0	; no - continue
  6117                                  
  6118                                  ; Before issuing error message - make sure switch is not /C
  6119                                  
  6120                                  parse_line_error:
  6121                                  	; 14/01/2023
  6122                                  	;push	si				; save line position
  6123                                  	;push	ax				; save error number
  6124                                  	;cmp	ax,3
  6125 00001652 83F803                  	cmp	ax,BadSwt_Ptr ; 3		; Was error invalid switch?
  6126                                          ;jnz	short parse_line_error_disp	; No - just issue message
  6127 00001655 7533                    	jne	short parse_line_error_disp2
  6128 00001657 56                      	push	si ; **				; save line position
  6129 00001658 50                      	push	ax ; *				; save error number
  6130 00001659 89F7                    	mov	di,si				; Get terminating pointer in DI
  6131 0000165B 8B36[8A1F]                      mov     si,[old_parse_ptr]		; Get starting pointer in SI
  6132                                  
  6133                                  init_chk_delim:
  6134 0000165F 39FE                    	cmp	si,di				; at end of parsed parameter?
  6135 00001661 7425                            je	short parse_line_error_disp	; Yes - just display message
  6136 00001663 AC                      	lodsb					;
  6137 00001664 3C20                    	cmp	al,20h ; ' ' ; 16/04/2023
  6138                                  	;cmp	al,space_chr ; 14/01/2023
  6139                                  	;;cmp	al,[space]			; Skip blank spaces
  6140 00001666 74F7                    	je	short init_chk_delim		;
  6141                                  	;cmp	al,9
  6142 00001668 3C09                    	cmp	al,tab_chr ; 9			; Skip tab characters
  6143 0000166A 74F3                    	je	short init_chk_delim		;
  6144                                  
  6145 0000166C 3A06[F003]              	cmp	al,[RSwitChar]	; '/'		; Switch?
  6146 00001670 7516                            jne	short parse_line_error_disp	; No - just issue message
  6147 00001672 AC                      	lodsb					; Get the char after the switch
  6148                                  
  6149 00001673 E8A004                  	call	iupconv 			; upper case it
  6150                                  
  6151                                  	;cmp	al,[scswitch]	; 'C'		; it is /C?
  6152                                          ;jne	short check_k_too ; MSDOS 6.0	;
  6153                                  	; 16/04/2023
  6154 00001676 3C43                    	cmp	al,'C' ; scswitch
  6155                                  	;jne	short parse_line_error_disp  ; MSDOS 5.0 COMMAND.COM
  6156                                  	; 06/06/2023
  6157                                  	; MSDOS 6.22 COMMAND.COM
  6158 00001678 7505                    	jne	short check_k_too
  6159 0000167A 5A                      	pop	dx ; *				; even up stack
  6160 0000167B 5A                      	pop	dx ; **				; even up stack
  6161 0000167C E9B100                  	jmp	SetSSwitch			; Yes - go set COMMAND /C
  6162                                  
  6163                                  	; MSDOS 6.0
  6164                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6165                                  check_k_too:
  6166                                  	;cmp	al,[skswitch]	; 'K'		; it is /K?
  6167                                          ;jne	short parse_line_error_disp	;
  6168                                  	; 06/06/2023
  6169 0000167F 3C4B                    	cmp	al,'K'
  6170 00001681 7505                    	jne	short parse_line_error_disp
  6171 00001683 5A                      	pop	dx ; *				; even up stack
  6172 00001684 5A                      	pop	dx ; **				; even up stack
  6173 00001685 E9A100                          jmp	SetKSwitch			; Yes - go set COMMAND /K
  6174                                  
  6175                                  parse_line_error_disp:
  6176                                  	; 14/01/2023
  6177 00001688 58                      	pop	ax ; *				; restore error number
  6178 00001689 5E                      	pop	si ; **				; restore line position
  6179                                  parse_line_error_disp2:
  6180 0000168A 89C2                    	mov	dx,ax				; get message number
  6181 0000168C E82B04                  	call	RPrintParse
  6182 0000168F E8A1FC                  	call	crlf
  6183 00001692 EBA0                            jmp     short Parse_command_line        ; continue parsing
  6184                                  
  6185                                  ; 16/04/2023
  6186                                  %if 1
  6187                                  SetMSwitch:
  6188                                          ;cmp	byte [ext_msg],1
  6189 00001694 803E[D91E]01            	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6190                                  	; 16/04/2023
  6191                                  	;jnz	short setMswitchok		; no - set it
  6192                                  	;;mov	ax,1
  6193                                  	;mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6194                                  	;jmp	parse_line_error                ; go issue error message
  6195                                  	; 16/04/2023
  6196 00001699 7458                    	je	short parse_line_error_j
  6197                                  setMswitchok:
  6198                                          ;mov	byte [ext_msg],1
  6199 0000169B C606[D91E]01            	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6200                                  	; 06/06/2023
  6201 000016A0 EB92                    	jmp	short Parse_command_line	; keep parsing
  6202                                  %endif
  6203                                  
  6204                                  parse_cont:
  6205                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6206                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:173Ch - CODERES:09FCh)
  6207                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6208                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:1869h - CODERES:0A19h)
  6209                                  
  6210                                  	; MSDOS 6.0
  6211                                  
  6212                                  ; See if a switch was entered
  6213                                  ;
  6214                                  ; Bugbug: See if Comnd1_Syn can be moved into a reg. before the compare
  6215                                  
  6216 000016A2 813E[811F][191F]        	cmp	word [COMND1_SYN],COMMAND_F_SYN ; was /F entered?
  6217 000016A8 7433                    	je	short SetFSwitch		; yes go set fail switch
  6218 000016AA 813E[811F][0D1F]        	cmp	word [COMND1_SYN],COMMAND_P_SYN ; was /P entered?
  6219 000016B0 743A                    	je	short SetPSwitch		; yes go set up PERMCOM
  6220 000016B2 813E[811F][251F]        	cmp	word [COMND1_SYN],COMMAND_D_SYN ; was /D entered?
  6221 000016B8 745C                    	je	short SetDSwitch		; yes go set date switch
  6222 000016BA 813E[811F][4A1F]        	cmp	word [COMND1_SYN],COMMAND_C_SYN ; was /C entered?
  6223 000016C0 746E                    	je	short SetSSwitch		; yes go set up SINGLECOM
  6224                                  	; 06/06/2023
  6225                                  	; MSDOS 6.0 only!
  6226 000016C2 813E[811F][701F]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; was /K entered?
  6227 000016C8 745F                            je	short SetKSwitch		; yes go set up SINGLECOM
  6228                                  	;
  6229 000016CA 813E[811F][311F]        	cmp	word [COMND1_SYN],COMMAND_E_SYN ; was /E entered?
  6230 000016D0 746F                    	je	short SetESwitch		; yes go set up environment
  6231 000016D2 813E[811F][561F]        	cmp	word [COMND1_SYN],COMMAND_M_SYN	; was /MSG entered?
  6232                                  	;je	short SetMSwitchjmp		; yes go set up message flag
  6233                                  	; 15/01/2023
  6234 000016D8 74BA                    	je	short SetMSwitch 
  6235 000016DA E98200                  	jmp	ChkOtherArgs		; Must be something else
  6236                                  
  6237                                  	; MSDOS 6.0
  6238                                  ;SetMSwitchjmp:
  6239                                  	;jmp	SetMSwitch
  6240                                  	
  6241                                  	; MSDOS 6.0
  6242                                  SetFSwitch:
  6243 000016DD 803E[4702]FF            	cmp	byte [fFail],-1		; has fail switch been set?
  6244                                  	; 16/04/2023
  6245                                  	;jne	short failok		; no - set it
  6246                                  	;;mov	ax,1
  6247                                  	;mov	ax,MoreArgs_Ptr         ; set up too many arguments
  6248                                          ;jmp	parse_line_error        ; go issue error 
  6249                                  	; 16/04/2023
  6250 000016E2 740F                    	je	short parse_line_error_j
  6251                                  
  6252                                  	; MSDOS 3.3 & MSDOS 6.0
  6253                                  failok:
  6254 000016E4 C606[4702]FF            	mov	byte [fFail],-1		; fail all INT 24s.
  6255                                  	; MSDOS 3.3
  6256                                  	;jmp	short CHKARG
  6257                                  	; MSDOS 6.0
  6258 000016E9 E948FF                  	jmp	Parse_command_line
  6259                                  
  6260                                  ;CHECKPSWITCH:
  6261                                  	;;cmp	al,'p'			; Permanent COMMAND switch
  6262                                  	;cmp	al,[letter_p]
  6263                                          ;jnz	short CHECKDSWITCH
  6264                                  
  6265                                  SetPSwitch:
  6266                                  
  6267                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6268                                  ; termination address.
  6269                                  
  6270                                  	; MSDOS 6.0
  6271 000016EC 803E[4002]00            	cmp	byte [PermCom],0	; has /p switch been set?
  6272 000016F1 7406                    	jz	short permcomok		; no - set it
  6273                                  	; 16/04/2023
  6274                                  parse_line_error_j:
  6275                                          ;mov	ax,1
  6276 000016F3 B80100                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6277 000016F6 E959FF                          jmp	parse_line_error	; go issue error 
  6278                                  
  6279                                  permcomok:
  6280                                  	; MSDOS 3.3 & MSDOS 6.0
  6281 000016F9 FE06[4002]              	inc	byte [PermCom]
  6282                                  	;mov	word [OLDTERM],LODCOM
  6283 000016FD C706[DE01][7E00]        	mov	word [OldTerm],LodCom_Trap
  6284                                  	;mov	[OLDTERM+2],ds
  6285 00001703 8C1E[E001]              	mov	[OldTerm+2],ds
  6286                                  
  6287                                  ; make sure that we display the date and time. if the flag was not
  6288                                  ; initialized, set it to indicate yes, do prompt.
  6289                                  
  6290                                  	; MSDOS 3.3
  6291                                  	;cmp	byte [PRDATTM],-1
  6292                                  	;jnz	short CHKARG
  6293                                  	;mov	byte [PRDATTM],0
  6294                                  	;jmp	short CHKARG
  6295                                  
  6296                                  	; MSDOS 6.0
  6297 00001707 803E[7F1E]FF            	cmp	byte [PRDATTM],-1
  6298 0000170C 7505                    	jne	short Parse_command_line_jmp
  6299 0000170E C606[7F1E]00            	mov	byte [PRDATTM],0
  6300                                  Parse_command_line_jmp:
  6301 00001713 E91EFF                  	jmp     Parse_command_line	; keep parsing
  6302                                  
  6303                                  ;COMRETURNSJ:
  6304                                  ;	; MSDOS 3.3
  6305                                  ;	JMP	ARGSDONE
  6306                                  
  6307                                  ;CHECKDSWITCH:
  6308                                  	;;cmp	al,'d'
  6309                                          ;cmp	al,[letter_d]
  6310                                  	;jnz	short CHECKCSWITCH
  6311                                  
  6312                                  SetDSwitch:
  6313                                  
  6314                                  ; Flag no date/time prompting.
  6315                                  
  6316                                  	; MSDOS 6.0
  6317 00001716 803E[DB1E]00            	cmp	byte [dswitch],0	; has /D switch been set?
  6318                                  	; 16/04/2023
  6319                                  	;jz	short setdateok		; no - set it
  6320                                          ;;mov	ax,1
  6321                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6322                                          ;jmp	parse_line_error	; go issue error message
  6323                                  	; 16/04/2023
  6324 0000171B 75D6                    	jnz	short parse_line_error_j
  6325                                  setdateok:
  6326 0000171D FE06[DB1E]              	inc	byte  [dswitch]		; indicate /D entered
  6327                                  
  6328                                  	; MSDOS 3.3 & MSDOS 6.0
  6329 00001721 C606[7F1E]01                    mov	byte [PRDATTM],1	; User explicitly says no date time
  6330                                  	; MSDOS 3.3
  6331                                  	;jmp	short CHKARG
  6332                                  	; MSDOS 6.0
  6333 00001726 E90BFF                  	jmp     Parse_command_line	; continue parsing
  6334                                  
  6335                                  	; 15/01/2023
  6336                                  	; MSDOS 6.0 
  6337                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6338                                  SetKSwitch:
  6339 00001729 C606[4102]00            	mov	byte [SemiPermCom],0
  6340 0000172E EB05                    	jmp	short SetSorKSwitch
  6341                                  
  6342                                  ;CHECKCSWITCH:
  6343                                  	;;cmp	al,'c'
  6344                                  	;cmp	al,[letter_c]
  6345                                          ;jnz	short CHECKESWITCH
  6346                                  
  6347                                  SetSSwitch:
  6348                                  ;SETCSWITCH:
  6349                                  
  6350                                  ; Set up pointer to command line, flag no date/time and turn off SingleCom.
  6351                                  
  6352 00001730 C606[4002]00            	mov	byte [PermCom],0	; A SingleCom must not be a PermCom
  6353                                  SetSorKSwitch:	; 06/06/2023
  6354 00001735 8936[4302]              	mov	[SingleCom],si		; Point to the rest of the command line
  6355 00001739 C606[7F1E]01            	mov	byte [PRDATTM],1	; no date or time either, explicit
  6356                                  ;COMRETURNSJ: ; 24/09/2018
  6357 0000173E E94001                  	jmp     ArgsDone
  6358                                  
  6359                                  ;CHECKESWITCH:
  6360                                  	;cmp	al,'e'
  6361                                  	;jnz	short CHKARG
  6362                                  
  6363                                  ; Look for environment-size setting switch
  6364                                  
  6365                                  ; The environment size is represented in decimal bytes and is
  6366                                  ; converted into paragraphs (rounded up to the next paragraph).
  6367                                  
  6368                                  SetESwitch:
  6369                                  	; MSDOS 6.0
  6370 00001741 803E[DA1E]00            	cmp	byte [eswitch],0	; has environment size switch been set?
  6371                                  	; 16/04/2023
  6372                                  	;jz	short eswitchok		; no - set it
  6373                                  	;;mov	ax,1
  6374                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6375                                          ;jmp	parse_line_error	; go issue error message
  6376                                  	; 16/04/2023
  6377 00001746 75AB                    	jnz	short parse_line_error_j
  6378                                  eswitchok:
  6379 00001748 FE06[DA1E]              	inc	byte [eswitch]		; indicate /E entered 	
  6380                                  
  6381                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6382                                  	; 15/01/2023 - Retro DOS v4.1 (& v4.1) - MSDOS 5.0 COMMAND.COM
  6383                                  	; MSDOS 6.0
  6384                                  	;mov	di,offset ResGroup:Comnd1_Addr	; get number returned
  6385 0000174C BF[831F]                        mov	di,COMND1_ADDR
  6386 0000174F 8B1D                    	mov     bx,[di]				; into bx
  6387                                  
  6388 00001751 83C30F                  	add	bx,0Fh				; Round up to next paragraph
  6389 00001754 B104                    	mov	cl,4				; convert to pargraphs
  6390 00001756 D3EB                    	shr	bx,cl				; by right 4
  6391                                  
  6392 00001758 891E[C61E]              	mov	[EnvSiz],bx			; EnvSiz is in paragraphs
  6393 0000175C E9D5FE                  	jmp	Parse_command_line		; continue parsing command line
  6394                                  
  6395                                  ; 16/04/2023
  6396                                  %if 0
  6397                                  SetMSwitch:
  6398                                          ;cmp	byte [ext_msg],1
  6399                                  	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6400                                  	jnz	short setMswitchok		; no - set it
  6401                                  	;mov	ax,1
  6402                                  	mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6403                                  	jmp	parse_line_error                ; go issue error message
  6404                                  setMswitchok:
  6405                                          ;mov	byte [ext_msg],1
  6406                                  	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6407                                  	jmp	Parse_command_line              ; keep parsing
  6408                                  %endif
  6409                                  
  6410                                  ;ArgsDoneJ:
  6411                                  	;jmp	ArgsDone
  6412                                  
  6413                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6414                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:181Dh - CODERES:0ADDh)
  6415                                  
  6416                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6417                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:196Dh - CODERES:0B1Dh)
  6418                                  ChkOtherArgs:
  6419                                  
  6420                                  ; We have a non-switch character here.
  6421                                  
  6422                                  	; MSDOS 6.0
  6423 0000175F 1E                      	push	ds ; ****			;
  6424 00001760 56                      	push	si ; *** 			; save place in command line
  6425 00001761 C536[831F]              	lds	si,[COMND1_ADDR]		; get address of filespec
  6426                                  	;assume	ds:nothing			;
  6427                                  
  6428 00001765 89F2                    	mov	dx,si				; put in dx also
  6429 00001767 B8023D                  	mov	ax,3D02h
  6430                                  	;mov	ax,(OPEN shl 8) or 2            ; Read and write
  6431 0000176A CD21                    	int	21h
  6432 0000176C 7260                    	jc	short ChkSrchSpec		; Wasn't a file
  6433 0000176E 89C3                    	mov	bx,ax
  6434 00001770 B80044                  	mov	ax,4400h
  6435                                  	;mov	ax,IOCTL shl 8
  6436 00001773 CD21                    	int	21h
  6437 00001775 F6C280                  	test	dl,80h
  6438 00001778 7506                    	jnz	short IsaDevice
  6439                                  BadSetCon:
  6440 0000177A B43E                    	mov	ah,3Eh
  6441                                  	;mov	ah,CLOSE		; Close initial handle, wasn't a device
  6442 0000177C CD21                    	int	21h
  6443 0000177E EB4E                    	jmp	short ChkSrchSpec
  6444                                  
  6445                                  	; 15/01/2023
  6446                                  IsaDevice:
  6447                                  	; MSDOS 3.3 & MSDOS 6.0
  6448 00001780 30F6                    	xor	dh,dh
  6449 00001782 80CA03                  	or	dl,3				; Make sure has CON attributes
  6450                                  	;mov	ax,(IOCTL shl 8) or 1
  6451 00001785 B80144                  	mov	ax,(IOCTL*256)|1 ; 4401h
  6452 00001788 CD21                    	int	21h
  6453                                  	;
  6454                                  	; 15/01/2023
  6455 0000178A 72EE                    	jc	short BadSetCon	; MSDOS 6.0 (& 5.0)
  6456                                  	; 25/09/2018
  6457                                  	;pop	dx ; *
  6458                                  	;pop	dx ; **
  6459                                  	;
  6460                                  	;jc	short BADSETCON	; MSDOS 6.0	; Can't set attributes - quit
  6461                                  	
  6462 0000178C 89DA                    	mov	dx,bx				; Save new handle
  6463                                  
  6464                                  	; MSDOS 6.0
  6465 0000178E 26803E[1524]01          	cmp	byte [es:DevFlag],1
  6466 00001794 742A                    	jz	short DevErr
  6467                                  
  6468                                  	; MSDOS 3.3
  6469                                          ;pop	bx ; *				; Throw away saved SI
  6470                                          ;pop	bx ; **				; Throw away saved CX
  6471                                  
  6472                                  	; MSDOS 3.3 & MSDOS 6.0
  6473 00001796 51                      	push	cx ; **
  6474 00001797 B90300                  	mov	cx,3
  6475 0000179A 31DB                    	xor	bx,bx
  6476                                  
  6477                                  	; 15/01/2023
  6478                                  rcclloop:
  6479 0000179C B43E                    	mov	ah,3Eh
  6480                                  	;mov	ah,CLOSE ; 3Eh
  6481 0000179E CD21                    	int	21h
  6482 000017A0 43                      	inc	bx
  6483 000017A1 E2F9                    	loop	rcclloop
  6484                                  
  6485 000017A3 89D3                    	mov	bx,dx				; New device handle
  6486 000017A5 B445                    	mov	ah,45h
  6487                                  	;mov	ah,XDUP ; 45h
  6488 000017A7 CD21                    	int	21h				; Dup to 0
  6489 000017A9 B445                    	mov	ah,45h
  6490                                  	;mov	ah,XDUP
  6491 000017AB CD21                    	int	21h				; Dup to 1
  6492 000017AD B445                    	mov	ah,45h
  6493                                  	;mov	ah,XDUP
  6494 000017AF CD21                    	int	21h				; Dup to 2
  6495 000017B1 B43E                    	mov	ah,3Eh
  6496                                  	;mov	ah,CLOSE
  6497 000017B3 CD21                    	int	21h				; Close initial handle
  6498                                  	
  6499 000017B5 59                      	pop	cx ; **
  6500                                  	
  6501                                  	; MSDOS 6.0
  6502 000017B6 5E                      	pop	si ; ***			; restore position of command line
  6503 000017B7 1F                      	pop	ds ; ****			;
  6504                                  
  6505                                  ; Register the fact that we already have redirected the output
  6506                                  ; and can not do it again
  6507                                  
  6508 000017B8 26FE06[1524]            	inc	byte [es:DevFlag]		
  6509 000017BD E974FE                  	jmp	Parse_command_line		; continue parsing
  6510                                  
  6511                                  	; MSDOS 3.3
  6512                                  	;jcxz	ARGSDONEJ2
  6513                                  	;jmp	CHKARG
  6514                                  
  6515                                  	; MSDOS 6.0
  6516                                  DevErr:
  6517 000017C0 5E                      	pop	si ; ***
  6518 000017C1 1F                      	pop	ds ; ****
  6519 000017C2 BA0100                  	mov	dx,1
  6520 000017C5 E8F202                          call	RPrintParse                     ; "Too many parameters"
  6521 000017C8 E868FB                          call	crlf
  6522 000017CB E966FE                  	jmp	Parse_command_line
  6523                                  
  6524                                  ChkSrchSpec:				; Not a device, so must be directory spec
  6525                                  	; MSDOS 6.0
  6526 000017CE 26803E[1624]01                  cmp	byte [es:PathFlag],1		; already set COMSPEC?
  6527 000017D4 74EA                            jz	short DevErr			; yes, error
  6528                                  	
  6529 000017D6 26FE06[1624]                    inc	byte [es:PathFlag]		; mark that we have a path
  6530                                  
  6531                                  ; We have to override the passed environment. Allocate a buffer for use now.
  6532                                  ; This buffer will later be replaced by a proper environment
  6533                                  
  6534                                  	; 15/01/2023 - Retro DOS v4.0 COMMAND.COM
  6535                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1899h
  6536                                  	; 06/06/2023
  6537                                  	;mov	ax,[ss:EnvirSeg]
  6538                                  	
  6539                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6540                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19E9h
  6541                                  	;
  6542                                  	; MSDOS 6.0
  6543 000017DB E8B304                  	call	alloc_env                       ; environment buffer
  6544                                  
  6545                                  ; 06/06/2023
  6546                                  %if 0
  6547                                  	; 15/01/2023
  6548                                  	; MSDOS 5.0
  6549                                  	cmp	byte [ss:AllocedEnv],1
  6550                                  	mov	byte [ss:AllocedEnv],0
  6551                                  	jne     short env_alloced
  6552                                  	call	alloc_env
  6553                                  	mov	[ss:EnvirSeg],ax
  6554                                  %endif
  6555                                  
  6556                                  env_alloced:
  6557                                  	; MSDOS 5.0 & MSDOS 6.0
  6558 000017DE 8EC0                    	mov	es,ax
  6559                                  	;assume	es:nothing
  6560 000017E0 56                      	push	si ; **				; remember location of file
  6561 000017E1 31C9                    	xor	cx,cx				; clear cx for counting
  6562                                  	
  6563                                  	; 15/01/2023
  6564                                  countloop:
  6565 000017E3 AC                      	lodsb					; get a character
  6566 000017E4 41                      	inc	cx				; increment counter
  6567                                          ;;cmp	al,0
  6568                                  	;cmp	al,END_OF_LINE_OUT              ; are we at end of line?
  6569                                  	;jne	short countloop			; no - keep counting
  6570 000017E5 08C0                    	or	al,al	
  6571 000017E7 75FA                    	jnz	short countloop
  6572                                  	; 06/03/2023
  6573                                  	; al = 0 ; (*) 
  6574                                  
  6575                                  	;;;;mov	al,[Space]
  6576                                  	;;;mov	al,[ss:Space] ; 15/01/2023 - MSDOS 5.0 COMMAND.COM
  6577                                  	;;mov	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6578                                  	; 16/04/2023
  6579                                  	;mov	al,20h ; ' ' 
  6580 000017E9 4E                      	dec	si				; move back one
  6581                                          ;mov	[si],al				; put a space at end of line
  6582 000017EA C60420                  	mov	byte [si],20h ; ' ' ; space_chr
  6583                                  
  6584                                  ; We now know how long the new pathspec for command.com is. Time to
  6585                                  ; figure out how long the current COMSPEC setting is, and then to move
  6586                                  ; all the environment data up, throwing that COMSPEC setting away, and
  6587                                  ; preparing to append the new COMSPEC. ComspOffset (the offset of
  6588                                  ; where the filespec exists in the environment) is updated as well.
  6589                                  
  6590                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6591                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19FEh
  6592                                  
  6593                                  	; MSDOS 6.0
  6594 000017ED 51                      	push	cx ; * 				;
  6595 000017EE B90080                          mov	cx,ENVBIG ; 32768		;
  6596 000017F1 368B3E[AF1E]                    mov	di,[ss:ComspOffset]		; get location of COMSPEC
  6597                                          ;mov	al,0                            ;
  6598                                  	; 06/06/2023
  6599                                  	; al = 0 ; (*)
  6600 000017F6 F2AE                    	repne	scasb                           ; find the end of COMSPEC
  6601 000017F8 89FE                            mov	si,di                           ;
  6602                                  comp_endenv:					;
  6603 000017FA AE                      	scasb					; end of env?
  6604 000017FB 7404                    	je	short got_endenv		; yes
  6605 000017FD F2AE                    	repne	scasb				;
  6606 000017FF EBF9                    	jmp	short comp_endenv		;
  6607                                  got_endenv:					;
  6608 00001801 89F9                    	mov	cx,di				;
  6609 00001803 29F1                    	sub	cx,si				;
  6610 00001805 368B3E[AF1E]            	mov	di,[ss:ComspOffset]		;
  6611 0000180A 83EF08                  	sub	di,ComspStrLen	; sub di,8	;
  6612 0000180D 1E                      	push	ds ; +				;
  6613 0000180E 06                      	push	es				;
  6614 0000180F 1F                      	pop	ds				;
  6615 00001810 F3A4                    	rep	movsb				;
  6616 00001812 4F                      	dec	di				; copy in new COMSPEC=
  6617 00001813 0E                      	push	cs				;
  6618 00001814 1F                      	pop	ds				;
  6619                                          ;assume ds:RESGROUP			;
  6620                                  	;mov    si,offset RESGROUP:ComspString	;
  6621 00001815 BE[B11E]                	mov	si,ComspString			; "COMSPEC=\COMMAND.COM"
  6622                                  	;mov	cx,ComspStrLen	; mov cx,8	;
  6623 00001818 B108                            mov	cl,ComspStrLen	; mov cl,8
  6624 0000181A F3A4                    	rep	movsb				;
  6625 0000181C 893E[AF1E]              	mov	[ComspOffset],di		;
  6626 00001820 1F                      	pop	ds ; + 				;
  6627                                          ;assume ds:nothing			;
  6628 00001821 59                      	pop	cx ; *				;
  6629                                  	;
  6630 00001822 5E                      	pop	si ; **				; get new comspec location back
  6631                                  
  6632                                  	;; MSDOS 3.3 COMMAND.COM
  6633                                  	;;mov	byte [CHUCKENV],0		; If search specified -- no inheritance
  6634                                  	;;mov	ax,PATHSTRING	; "PATH="	; Figure environment pointer
  6635                                  	;;mov	cl,4
  6636                                  	;;shr	ax,cl
  6637                                  	;;mov	dx,ds
  6638                                  	;;add	ax,dx
  6639                                  	;;mov	[ENVIRSEG],ax
  6640                                  	;;mov	es,ax
  6641                                  	;;;mov	al,' '
  6642                                  	;;mov	al,[SPACE_CHR]
  6643                                  	;;mov	[si-1],al
  6644                                  	;;pop	si ; **				; Remember location
  6645                                  	;;pop	cx ; *				; and count
  6646                                  	;;;mov	di,[ECOMLOC]
  6647                                  	;;mov	di,[COMSPOFFSET]
  6648                                  
  6649                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6650                                  	;; 15/01/2023
  6651                                  	;; MSDOS 5.0 COMMAND.COM
  6652                                  	;pop	si ; **
  6653                                  	;;mov	di,14
  6654                                  	;mov	di,ECOMSPEC ; mov di,0Eh
  6655                                  
  6656                                  ComtrLoop:
  6657                                  	; MSDOS 3.3 & MSDOS 6.0
  6658 00001823 AC                      	lodsb
  6659 00001824 49                      	dec	cx
  6660                                  	;;;;cmp	al,' '
  6661                                  	;;;cmp	al,[space_chr]
  6662                                  	;;cmp	al,[ss:Space] ;  MSDOS 5.0 COMMAND.COM
  6663                                  	;cmp	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6664                                  	; 16/04/2023
  6665 00001825 3C20                    	cmp	al,20h ; ' ' ; space_chr
  6666 00001827 7405                    	je	short SetComsr
  6667                                  	; MSDOS 3.3
  6668                                  	;cmp	al,9
  6669                                  	;je	short SetComsr
  6670                                  	; MSDOS 3.3 & MSDOS 6.0
  6671 00001829 AA                      	stosb
  6672 0000182A E302                    	jcxz	SetComsr
  6673 0000182C EBF5                    	jmp	short ComtrLoop
  6674                                  
  6675                                  SetComsr:
  6676                                  	; 15/01/2023
  6677                                  	; MSDOS 6.0
  6678 0000182E 51                      	push	cx ; **
  6679 0000182F 0E                      	push	cs				; Get local segment
  6680 00001830 1F                      	pop	ds				;
  6681                                  	;assume	ds:ResGroup			;
  6682 00001831 1E                      	push	ds ; *
  6683                                  	;mov	si,offset ResGroup:ComSpect
  6684 00001832 BE[601E]                	mov	si,COMSPECT ; "\COMMAND.COM"
  6685 00001835 B90E00                  	mov	cx,14
  6686 00001838 268A45FF                	mov	al,[es:di-1]
  6687 0000183C 3A06[F103]              	cmp	al,[RDirChar]
  6688 00001840 7502                    	jne	short iNotRoot
  6689 00001842 46                      	inc	si				; Don't make a double /
  6690 00001843 49                      	dec	cx
  6691                                  	
  6692                                  	; MSDOS 3.3
  6693                                  	;push	si
  6694                                  	;push	cx
  6695                                  	;push	ds
  6696                                  	;mov	si,COMSPECT ; "/COMMAND.COM"
  6697                                  	;mov	cx,14
  6698                                  	;mov	al,[es:di-1]
  6699                                  	;call	PATHCHRCMPR
  6700                                  	;jnz	short INOTROOT			
  6701                                  	;inc	si				; Don't make a double /
  6702                                  	;dec	cx
  6703                                  
  6704                                  iNotRoot:
  6705                                  	; MSDOS 3.3 & MSDOS 6.0
  6706 00001844 F3A4                    	rep	movsb
  6707                                  
  6708                                  	;;mov	dx,[ECOMLOC]			; Now lets make sure its good!
  6709                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6710                                  	; MSDOS 6.0 
  6711 00001846 8B16[AF1E]              	mov	dx,[ComspOffset] ; [COMSPOFFSET]
  6712                                  	; 15/01/2023
  6713                                  	;;mov	dx,14
  6714                                  	;mov	dx,ECOMSPEC ; mov dx,0Eh ; MSDOS 5.0 COMMAND.COM
  6715                                  
  6716 0000184A 06                      	push	es
  6717 0000184B 1F                      	pop	ds
  6718                                  	;;mov	ax,OPEN shl 8
  6719                                  	;mov	ax,OPEN*256 ; 3D00h
  6720 0000184C B8003D                  	mov	ax,3D00h ; 15/01/2023
  6721 0000184F CD21                    	int	21h				; Open COMMAND.COM
  6722 00001851 1F                      	pop	ds ; *
  6723 00001852 720E                    	jc	short SetComsrBad		; No COMMAND.COM here
  6724 00001854 89C3                    	mov	bx,ax				; Handle
  6725 00001856 B43E                    	mov	ah,3Eh ; 15/01/2023
  6726                                  	;mov	ah,CLOSE ; 3Eh
  6727 00001858 CD21                    	int	21h				; Close COMMAND.COM
  6728                                  SetComsrRet:
  6729                                  	; 15/01/2023
  6730 0000185A 59                      	pop	cx ; **
  6731 0000185B 5E                      	pop	si ; ***
  6732                                  
  6733                                  	; MSDOS 6.0
  6734 0000185C 1F                      	pop	ds ; ****			;
  6735                                  	;assume	ds:ResGroup			;
  6736                                  	;
  6737 0000185D 0E                      	push	cs				; Make sure local ES is
  6738 0000185E 07                      	pop	es				;  restored
  6739 0000185F E9D2FD                  	jmp	Parse_command_line		; continue parsing command line
  6740                                  
  6741                                  	; MSDOS 3.3
  6742                                  ;ARGSDONEJ2:
  6743                                  	;jcxz	ARGSDONE
  6744                                  	;jmp	CHKARG
  6745                                  
  6746                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6747                                  SetComsrBad:
  6748                                  	; MSDOS 3.3 & MSDOS 6.0
  6749                                  	;mov	dx,offset ResGroup:BadComlkMsg	; dx = ptr to msg
  6750 00001862 BA[1E20]                	mov	dx,BADCOMLKMES
  6751                                  
  6752                                  ;	Note: we're about to make a near call to TriageError, which
  6753                                  ;	lives in a different segment and group. Some linkers will
  6754                                  ;	generate a warning like "Possible fix-up overflow". We're
  6755                                  ;	ok, though, because we all fit in 64 KB and, at init time,
  6756                                  ;	we're still all together.
  6757                                  
  6758                                  	; 16/01/2023
  6759                                  	;TRIAGEERROR equ TRANSTART+TriageError
  6760                                  	;(MSDOS 5.0 COMMAND.COM, 2320h+2D92h)
  6761                                  
  6762                                  	; 06/06/2023
  6763                                  	TRIAGEERROR equ TRANSTART+TriageError
  6764                                  	;(MSDOS 6.22 COMMAND.COM, 26E0h+333Ch)
  6765                                  
  6766                                  	;;call	50B2h ; MSDOS 5.0 COMMAND.COM
  6767                                  	;call	5A1Ch ; MSDOS 6.22 COMMAND.COM
  6768 00001865 E8(1E57)                	call	TRIAGEERROR	; TRIAGEERROR procedure is at offset 354Eh
  6769                                  				; in original MSDOS 3.3 COMMAND.COM
  6770                                  
  6771                                  			; TriageError procedure is at offset 50B2h
  6772                                  			; in original MSDOS 5.0 COMMAND.COM	
  6773 00001868 83F841                  	cmp	ax,65
  6774 0000186B 7503                    	jne	short doprt
  6775                                  	;mov	dx,offset ResGroup:BadComaccMsg	; dx = ptr to msg
  6776 0000186D BA[4720]                	mov	dx,BADCOMACCMSG
  6777                                  doprt:
  6778 00001870 E8C3FA                  	call	RPrint
  6779                                  	;mov	si,offset ResGroup:ComSpect
  6780 00001873 BE[601E]                	mov     si,COMSPECT ; "\COMMAND.COM"
  6781                                  	;;mov	di,[ECOMLOC]
  6782                                  	; 06/06/2023
  6783 00001876 8B3E[AF1E]              	mov	di,[ComspOffset] ; MSDOS 6.22 COMMAND.COM
  6784                                  	; 16/01/2023
  6785                                  	;mov	di,ECOMSPEC ; mov di,0Eh ; MSDOS 5.0 COMMAND.COM
  6786 0000187A B90E00                  	mov	cx,14
  6787 0000187D F3A4                    	rep	movsb				; get my default back
  6788                                  
  6789 0000187F EBD9                    	jmp	short SetComsrRet
  6790                                  
  6791                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6792                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1927h (CODERES:0BE7h)
  6793                                  
  6794                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6795                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1A99h (CODERES:0C49h)
  6796                                  ArgsDone:
  6797                                  	; MSDOS 6.0
  6798 00001881 8E06[DC03]              	mov	es,[EnvirSeg]			; get environment back
  6799                                  	;assume	es:nothing			;
  6800                                  
  6801                                  	; MSDOS 3.3 & MSDOS 6.0
  6802 00001885 803E[4002]00                    cmp	byte [PermCom],0
  6803 0000188A 742E                            jz	short ComReturns
  6804                                  
  6805 0000188C 06                      	push	es				; Save environment pointer
  6806 0000188D B450                    	mov	ah,50h
  6807                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  6808 0000188F 8CDB                    	mov	bx,ds
  6809 00001891 8EC3                    	mov	es,bx
  6810 00001893 CD21                    	int	21h				; current process is me
  6811 00001895 BF0A00                  	mov	di,PDB.EXIT ; mov di,0Ah	; Diddle the addresses in my header
  6812                                  	;;mov	ax,offset RESGROUP:LODCOM
  6813                                  	;mov	ax,LODCOM
  6814                                  	; 16/01/2023
  6815 00001898 B8[7E00]                	mov	ax,LodCom_Trap
  6816 0000189B AB                              stosw
  6817 0000189C 8CD8                            mov	ax,ds
  6818 0000189E AB                              stosw
  6819                                  	;;mov	ax,offset RESGROUP:CONTC
  6820                                  	;mov	ax,CONTC
  6821                                  	; 16/01/2023
  6822 0000189F B8[4A00]                	mov	ax,Ctrlc_Trap
  6823 000018A2 AB                              stosw
  6824 000018A3 8CD8                            mov	ax,ds
  6825 000018A5 AB                              stosw
  6826                                  	;;mov	ax,offset DATARES:CritErr_Trap  ; MSDOS 6.0
  6827                                  	;mov	ax,CRITERR
  6828                                  	; 16/01/2023
  6829 000018A6 B8[5500]                	mov	ax,CritErr_Trap
  6830 000018A9 AB                      	stosw
  6831 000018AA 8CD8                    	mov     ax,ds
  6832 000018AC AB                      	stosw
  6833                                  	;;mov	word ptr ds:16h,ds
  6834                                  	;mov	word ptr ds:[Pdb_Parent_Pid],ds ; Parent is me forever
  6835 000018AD 8C1E1600                	mov	[PDB.PARENT_PID],ds
  6836                                          ;;mov	dx,offset RESGROUP:Int_2e
  6837                                  	;mov	dx,Int_2e
  6838                                          ; 16/01/2023
  6839 000018B1 BA[3F00]                	mov	dx,Int2e_Trap
  6840 000018B4 B82E25                  	mov	ax,252Eh
  6841                                  	;;mov	ax,(SET_INTERRUPT_VECTOR SHL 8) OR 2Eh
  6842                                  	;mov	ax,(SET_INTERRUPT_VECTOR*256) | 2Eh ; 252Eh
  6843 000018B7 CD21                    	int     21h	; DOS - SET INTERRUPT VECTOR
  6844                                  			; AL = interrupt number
  6845                                  			; DS:DX = new vector to be used for specified interrupt
  6846 000018B9 07                              pop	es				; Remember environment
  6847                                  	
  6848                                  ComReturns:
  6849                                          ;mov	ax,word ptr ds:Pdb_Parent_Pid
  6850 000018BA A11600                  	mov	ax,[PDB.PARENT_PID] ; mov ax,ds:16h
  6851                                  	; 16/01/2023
  6852 000018BD A3[DC01]                	mov	[Parent],ax			; Save parent
  6853                                          ;mov	word ptr ds:Pdb_Parent_Pid,ds 	; Parent is me
  6854 000018C0 8C1E1600                        mov	[PDB.PARENT_PID],ds ; mov word ptr ds:16h,ds
  6855                                          ;mov	ax,word ptr ds:PDB_Jfn_Table
  6856 000018C4 A11800                          mov	ax,[PDB.JFN_TABLE] ; mov ax,ds:18h
  6857 000018C7 A3[3D02]                        mov	[Io_Save],ax		; Get the default stdin and out
  6858 000018CA 8C1E[E003]                      mov	[Com_Ptr+2],ds		; Set all these to resident
  6859 000018CE 8C1E[E403]                      mov	[Com_Fcb1+2],ds
  6860 000018D2 8C1E[E803]              	mov	[Com_Fcb2+2],ds
  6861                                          ;mov	di,offset ResGroup:ComSpec
  6862 000018D6 BF[E901]                        mov	di,ComSpec
  6863                                  
  6864                                  	;;mov	si,[ECOMLOC]
  6865                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6866 000018D9 8B36[AF1E]              	mov	si,[ComspOffset]
  6867                                  	; 16/01/2023 - MSDOS 5.0 COMMAND.COM
  6868                                  	;mov	si,ECOMSPEC ; mov si,0Eh
  6869                                  
  6870 000018DD 803E[8C1E]00            	cmp	byte [AllocedEnv],0 ; MSDOS 6.0
  6871                                          ;cmp	byte [CHUCKENV],0 ; MSDOS 3.3
  6872                                  	
  6873 000018E2 8CD8                    	mov	ax,ds				; Xchg es,ds
  6874 000018E4 06                      	push	es
  6875 000018E5 1F                      	pop	ds
  6876 000018E6 8EC0                    	mov	es,ax
  6877                                  
  6878                                  	; 06/06/2023
  6879 000018E8 7517                    	jne	short CopyComsp ; MSDOS 6.0
  6880                                  	; 16/01/2023	
  6881                                  	;je	short CopyComsp ; MSDOS 5.0
  6882                                  	;;je	short COPYCOMSP	; MSDOS 3.3	; All set up for copy
  6883                                  
  6884 000018EA 0E                              push	cs
  6885 000018EB 1F                              pop	ds
  6886                                  
  6887                                          ;mov	si,offset ResGroup:ComspString
  6888 000018EC BE[B11E]                	mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  6889 000018EF 06                      	push	es
  6890 000018F0 57                      	push	di
  6891 000018F1 E8D701                  	call	IfindE
  6892 000018F4 89FE                    	mov	si,di
  6893 000018F6 06                      	push	es
  6894 000018F7 1F                      	pop	ds
  6895 000018F8 5F                      	pop	di
  6896 000018F9 07                      	pop	es
  6897 000018FA 7305                            jnc	short CopyComsp
  6898                                  
  6899                                  	; 06/06/2023
  6900                                  	; MSDOS 6.0
  6901                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1B04h
  6902                                  ComSpecNofnd:
  6903                                  	;;mov	si,offset ResGroup:ComspString
  6904                                  	;mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  6905                                  	;add	si,ComspStrLen ; add si,8
  6906 000018FC BE[B91E]                	mov	si,ComspString+ComspStrLen
  6907                                  	
  6908                                  	;; 21/01/2023
  6909                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:19A1h
  6910                                  	;;mov	si,0Eh
  6911                                  	;mov	si,ECOMSPEC
  6912                                  	
  6913 000018FF 0E                      	push	cs
  6914 00001900 1F                      	pop	ds	
  6915                                  
  6916                                  	; 21/01/2023
  6917                                  ;COMSPECNOFND:
  6918                                  	; MSDOS 3.3
  6919                                          ;;mov	si,[es:ECOMLOC]
  6920                                          ;mov	si,[es:COMSPOFFSET]
  6921                                  	;;add	si,offset RESGROUP:PATHSTRING
  6922                                          ;add	si,PATHSTRING ; "PATH="
  6923                                  	;push	cs
  6924                                  	;pop	ds
  6925                                  
  6926                                  CopyComsp:
  6927                                  	; 21/01/2023
  6928                                  ;COPYCOMSP:
  6929                                  	; MSDOS 3.3 & MSDOS 6.0
  6930                                  	;;mov	es:PutBackComSpec.SubstPtr,di
  6931                                  	;mov	[es:PUTBACKSUBSTPTR],di		; Save ptr to beginning of comspec path
  6932 00001901 26893E[C801]            	mov	[es:PutBackComSpec],di
  6933 00001906 807C013A                	cmp	byte [si+1],':'			; Is there a drive specifier in comspec
  6934 0000190A 7506                    	jne	short CopyComspLoop		; If not, do not skip over first 2 bytes
  6935                                  	;;add	es:PutBackComSpec.SubstPtr,2
  6936                                  	;add	word [es:PUTBACKSUBSTPTR],2
  6937 0000190C 268306[C801]02          	add	word [es:PutBackComSpec],2
  6938                                  CopyComspLoop:
  6939 00001912 AC                      	lodsb
  6940 00001913 AA                      	stosb
  6941 00001914 08C0                    	or	al,al
  6942 00001916 75FA                    	jnz	short CopyComspLoop
  6943                                  
  6944 00001918 26893E[2902]            	mov	[es:ComSpec_End],di		; Save ptr to end of comspec path
  6945 0000191D 26FF0E[2902]            	dec	word [es:ComSpec_End]
  6946 00001922 268A26[3202]            	mov	ah,[es:ComDrv]
  6947 00001927 80C440                  	add	ah,'A'-1 ; 40h
  6948 0000192A 268826[CD01]            	mov	[es:PutBackDrv],ah		; save drive letter
  6949                                  
  6950                                  	; 21/01/2023 - Retrro DOS v4.0 (& v4.1) COMMAND.COM
  6951                                  	
  6952                                  	; MSDOS 6.0
  6953 0000192F E81002                  	call	setup_for_messages		; set up parse and extended error messages
  6954                                  
  6955                                  ; The routine below sets up the exact resident size of COMMAND. If this is not
  6956                                  ; the first COMMAND, then the resident code is not duplicated and the resident
  6957                                  ; size is just the data. If we are the first COMMAND, it checks if we are to
  6958                                  ; be loaded into HIMEM. If not, then the resident size includes the code and
  6959                                  ; the data otherwise it is just the data.
  6960                                   
  6961 00001932 E8AF02                  	call	Setup_res_end			; put resident size in ResSize
  6962                                  
  6963 00001935 0E                      	push	cs
  6964 00001936 1F                      	pop	ds
  6965                                  	;assume	ds:RESGROUP
  6966                                  
  6967                                  ;Public EnvMaximum
  6968                                          ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6969                                  EnvMaximum:	; MSDOS 5.0 COMMAND.COM - RESGROUP:19DCh
  6970                                          ; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6971                                  		; MSDOS 6.22 COMMAND.COM - RESGROUP:1B53h
  6972                                  
  6973                                  	; 21/01/2023
  6974                                  	; MSDOS 6.0
  6975                                  	;;mov	si,offset RESGROUP:TranStart
  6976                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM
  6977                                  	; 06/06/2023
  6978                                  	;;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM
  6979                                  	;mov	si,TRANSTART
  6980                                  	;add	si,100h
  6981                                  	; 23/04/2023
  6982 00001937 BE5026                  	mov	si,TRANSTART+100h
  6983                                  
  6984                                  	;;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  6985                                  	;;mov	cx,87C2h	; MSDOS 5.0 COMMAND.COM
  6986                                  	; 06/06/2023
  6987                                  	;;mov	cx,9D53h	; MSDOS 6.22 COMMAND.COM	
  6988 0000193A B9[6398]                	mov	cx,TRANDATAEND-100h
  6989                                  
  6990 0000193D FC                      	cld
  6991 0000193E D1E9                    	shr	cx,1
  6992 00001940 31D2                    	xor	dx,dx
  6993                                  Ichksum:
  6994 00001942 AD                      	lodsw
  6995 00001943 01C2                    	add	dx,ax
  6996 00001945 83D200                  	adc	dx,0
  6997 00001948 E2F8                    	loop	Ichksum
  6998                                  
  6999 0000194A 8916[3502]                      mov	[Sum],dx			; store checksum
  7000                                  
  7001 0000194E 803E[7F1E]00                    cmp     byte [PRDATTM],0
  7002 00001953 750C                            jne	short NoBatchSeg		; don't do autoexec or date time
  7003                                  	
  7004                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  7005                                  
  7006                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0fh)/16
  7007                                  	; 21/01/2023
  7008                                  	;mov	bx,4
  7009 00001955 BB0400                          mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  7010 00001958 B448                    	mov	ah,48h
  7011                                  	;mov	ah,ALLOC                        ;
  7012 0000195A CD21                            int	21h                             ;
  7013 0000195C 7203                    	jc	short NoBatchSeg		; didn't allocate - pretend no batch
  7014 0000195E A3[E701]                        mov	[Batch],ax			; save batch segment
  7015                                  
  7016                                  NoBatchSeg:
  7017                                  	; 21/01/2023
  7018                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7019 00001961 8B1E[DC03]              	mov	bx,[EnvirSeg]			; get old environment segment
  7020 00001965 891E[CA1E]              	mov	[OldEnv],bx			; save it
  7021 00001969 C706[CC1E]0000          	mov	word [UsedEnv],0		; initialize env size counter
  7022 0000196F 8EDB                    	mov	ds,bx
  7023                                  	;assume	ds:nothing
  7024                                  	
  7025 00001971 31F6                    	xor	si,si
  7026 00001973 89F7                    	mov	di,si
  7027                                  
  7028                                  ; This is the maximum allowed size for the environment
  7029                                  
  7030                                  	; 21/01/2023
  7031                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1A1Eh
  7032                                  	;mov	bx,4096 - 1 ; 0FFFh		; max. allowed env. size
  7033                                  	;;mov	[ss:EnvMax],bx
  7034                                  	;shl	bx,1
  7035                                  	;shl	bx,1
  7036                                  	;shl	bx,1
  7037                                  	;shl	bx,1
  7038 00001975 BBF0FF                  	mov	bx,(4096-1)<<4 ; mov bx,0FFF0h
  7039 00001978 36891E[C81E]            	mov	[ss:EnvMax], bx			; convert envmax to bytes
  7040 0000197D 4B                      	dec	bx				; dec by one to leave room for double 0
  7041 0000197E 31D2                    	xor	dx,dx				; use dx to indicate that there was
  7042                                  						; no environment size error.
  7043                                  ;public NxtStr
  7044                                  NxtStr:
  7045 00001980 E81E01                  	call	GetStrLen			; get the size of the current env string
  7046                                  
  7047                                  ;Bugbug: Can use ss here to address UsedEnv
  7048                                  
  7049 00001983 1E                      	push	ds                              ; get addressability to environment
  7050 00001984 0E                              push	cs                              ;                       counter
  7051 00001985 1F                              pop	ds                              ;
  7052                                  	;assume	ds:ResGroup
  7053 00001986 010E[CC1E]                      add	[UsedEnv],cx			; add the string length to env size
  7054 0000198A 1F                      	pop	ds                              ;
  7055                                  	;assume	ds:nothing
  7056                                  	
  7057 0000198B 83F901                  	cmp	cx,1				; end of environment was encountered.
  7058 0000198E 7405                    	je	short EnvExit
  7059 00001990 29CB                    	sub	bx,cx
  7060                                  	;jae	short OkCpyStr			; can't fit in all of enviroment.
  7061                                  	; 21/01/2023
  7062 00001992 73EC                    	jae	short NxtStr
  7063 00001994 42                      	inc	dx				; out of env space msg must be displayed
  7064                                  	;jmp	short EnvExit
  7065                                  
  7066                                  ;OkCpyStr:
  7067                                  	;jmp	short NxtStr
  7068                                  
  7069                                  EnvExit:
  7070 00001995 0E                      	push	cs
  7071 00001996 1F                      	pop	ds
  7072                                  	;assume	ds:ResGroup
  7073 00001997 09D2                    	or	dx,dx				; dx will be non-zero if error
  7074 00001999 7406                    	jz	short EnvNoErr
  7075                                  	;mov	dx,offset ResGroup:OutEnvMsg	; dx = ptr to msg
  7076 0000199B BA[A41F]                	mov	dx,OUTENVMSG
  7077 0000199E E895F9                  	call 	RPrint
  7078                                  EnvNoErr:
  7079 000019A1 A1[C61E]                	mov	ax,[EnvSiz]			; env size previously set
  7080 000019A4 B104                    	mov	cl,4
  7081 000019A6 D3E0                    	shl	ax,cl				; get size in bytes
  7082 000019A8 3B06[CC1E]              	cmp	ax,[UsedEnv]			; is it a new env?
  7083 000019AC 7706                    	ja	short st_envsize		; yes, store the size
  7084 000019AE A1[CC1E]                	mov	ax,[UsedEnv]
  7085 000019B1 83C00F                  	add	ax,15				; round up
  7086                                  st_envsize:	
  7087 000019B4 D3E8                    	shr	ax,cl
  7088 000019B6 A3[C61E]                	mov	[EnvSiz],ax			; store env size needed(paras)
  7089                                  
  7090                                  ;if MSVER
  7091                                  	;cmp	SingleCom,0
  7092                                  	;jnz	nophead 			; don't print header if SingleCom
  7093                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7094                                  	;call	RPrint
  7095                                  ;nophead:
  7096                                  ;endif
  7097                                  	; 21/01/2023
  7098                                  
  7099                                  	; MSDOS 3.3 & 6.0
  7100 000019B9 833E[E701]00            	cmp     word [Batch],0		; did we set up a batch segment?
  7101 000019BE 7503                    	jnz     short DoDate		; yes - go initialize it
  7102 000019C0 E99300                  	jmp     NoDttm			; don't do autoexec or date time
  7103                                  
  7104                                  DoDate:
  7105                                  
  7106                                  ; allocate batch segment for d:/autoexec.bat + no arguments
  7107                                  
  7108 000019C3 A1[E701]                	mov	ax,[Batch]		; get batch segment
  7109 000019C6 C606[3B02]03            	mov	byte [EchoFlag],3	; set batch echo
  7110 000019CB C706[4C02]0100          	mov	word [Nest],1		; set nest flag to 1 batch
  7111 000019D1 8EC0                    	mov	es,ax
  7112                                  
  7113                                  ; initialize the segment
  7114                                  
  7115 000019D3 31FF                    	xor	di,di
  7116                                  	;;mov	al,0
  7117                                  	;mov	al,BATCHTYPE ; 0
  7118                                  	; 06/06/2023
  7119 000019D5 31C0                    	xor	ax,ax
  7120 000019D7 AA                      	stosb
  7121                                  	;mov	al,1			; initialize echo for batch exit
  7122                                  	;inc	al
  7123                                  	; 22/07/2024
  7124 000019D8 40                      	inc	ax
  7125 000019D9 AA                      	stosb
  7126                                  
  7127                                  ; Hosebag! This guy does not use the struct fields to init the BatchSegment
  7128                                  
  7129                                  	;xor	ax,ax			; initialize to zero
  7130                                  	; 06/06/2023
  7131                                  	;dec	al ; ax = 0
  7132                                  	; 22/07/2024
  7133 000019DA 48                      	dec	ax
  7134                                  
  7135                                  	; 21/01/2023
  7136 000019DB AA                      	stosb	; MSDOS 6.0 		; clear out BatchEOF
  7137                                  
  7138 000019DC AB                      	stosw				; batch segment of last job - batlast
  7139 000019DD AB                      	stosw				; segment for FOR
  7140 000019DE AA                      	stosb				; FOR flag
  7141 000019DF AB                      	stosw				; position in file - batseek
  7142 000019E0 AB                      	stosw
  7143                                  
  7144                                  ; clean out the parameters
  7145                                  
  7146                                  	;mov	ax,-1			; initialize to no parameters
  7147                                  	; 06/06/2023
  7148 000019E1 48                      	dec	ax ; ax = -1
  7149                                  
  7150 000019E2 B90A00                  	mov	cx,10
  7151 000019E5 F3AB                    	rep	stosw
  7152                                  
  7153                                  ; decide whether we should grab the default drive
  7154                                  
  7155 000019E7 803E[6E1E]00            	cmp	byte [AUTOBAT],0 ; ":\AUTOEXEC.BAT"
  7156 000019EC 7509                    	jne	short NoAutSet
  7157 000019EE B419                    	mov	ah,19h	; 21/01/2023
  7158                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  7159 000019F0 CD21                    	int	21h
  7160                                  	;;add	al,'A'
  7161                                  	;add	al,[letter_A] ; Ucasea
  7162                                  	;add	al,[ucasea] ; 21/01/2023
  7163                                  	; 21/01/2023
  7164 000019F2 0441                    	add	al,'A'
  7165 000019F4 A2[6E1E]                	mov	[AUTOBAT],al
  7166                                  	; 22/07/2024
  7167                                  	; 21/01/2023
  7168                                  	; 06/06/2023
  7169                                  	;mov	[KAUTOBAT],al
  7170                                  NoAutSet:
  7171                                  
  7172                                  ; copy in the batch file name (including nul)
  7173                                  
  7174                                  	;mov	si,offset ResGroup:AutoBat
  7175 000019F7 BE[6E1E]                	mov	si,AUTOBAT
  7176 000019FA B90800                  	mov	cx,8
  7177 000019FD F3A5                    	rep	movsw
  7178                                  	; 23/04/2023
  7179 000019FF A4                      	movsb	; MSDOS 6.0		; move in carriage return to terminate string
  7180                                  
  7181                                  	;mov	dx,offset ResGroup:AutoBat
  7182 00001A00 BA[6E1E]                	mov     dx,AUTOBAT ; ":\AUTOEXEC.BAT"
  7183                                  
  7184                                  	;;mov	ax,OPEN shl 8
  7185 00001A03 B8003D                  	mov	ax,3D00h ; 21/01/2023
  7186                                  	;mov	ax,OPEN*256 ; 3D00h	; open for read
  7187 00001A06 CD21                    	int	21h			; see if autoexec.bat exists
  7188 00001A08 7208                    	jc	short noabat
  7189 00001A0A 89C3                    	mov	bx,ax
  7190 00001A0C B43E                    	mov	ah,3Eh ; 21/01/2023
  7191                                  	;mov	ah,CLOSE  ; 3Eh
  7192 00001A0E CD21                    	int	21h
  7193                                  	;jmp	Drv0			; go process autoexec
  7194                                  	; 22/07/2024
  7195 00001A10 EB51                    	jmp	short Drv0
  7196                                  
  7197                                  noabat:
  7198 00001A12 50                      	push	ax
  7199 00001A13 E89400                  	call	Setup_Seg
  7200 00001A16 A3[8A1E]                	mov	[triage_add+2],ax
  7201 00001A19 58                      	pop	ax
  7202 00001A1A FF1E[881E]              	call	far [triage_add]	; get extended error
  7203 00001A1E 83F841                  	cmp	ax,65			; network access denied?
  7204                                  	;jne	short OPENERR		; no - go deallocate batch
  7205                                  	; 21/01/2023
  7206                                  	;;je	short AccDenErr
  7207                                  	; 22/07/2024
  7208 00001A21 7506                    	jne	short OpenErr 
  7209                                  	; 06/06/2023
  7210                                  	;je	short AccDenErr
  7211                                  
  7212                                  	; 21/01/2023
  7213                                  ;_ACCDENERROR:					; yes - put out message
  7214                                  ;	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7215                                  ;	mov	dx,ACCDENERR
  7216                                  ;	call	RPRINT
  7217                                  
  7218                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7219                                  
  7220                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7221                                  
  7222                                  ; 22/07/2024
  7223                                  ; 06/06/2023
  7224                                  ; 21/01/2023
  7225                                  %if 0
  7226                                  
  7227                                  ; If AUTOEXEC.BAT is not found, then check for KAUTOEXE.BAT. Changed
  7228                                  ; by Ellen to check only when in Korea. The country information
  7229                                  ; returned will overlay the old parse data area, but we don't care
  7230                                  ; since we won't need the parse information or country information.
  7231                                  ; We only care about the country code returned in BX.
  7232                                  
  7233                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1AE7h
  7234                                  	; 06/06/2023
  7235                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1C5Eh
  7236                                  
  7237                                  	;mov	dx,offset ResGroup:Internat_Info ; set up internat vars
  7238                                  	mov	dx,INTERNAT_INFO
  7239                                  	mov	ax,3800h
  7240                                  	;mov	ax,INTERNATIONAL<<8
  7241                                  	;;mov	ax,INTERNATIONAL shl 8		; get country dependent info
  7242                                  	int	21h				;
  7243                                  	jc	short NoKabat 			; error - don't bother with it
  7244                                  	cmp	bx,52h
  7245                                  	;cmp	bx,KOREA_COUNTRY_CODE		; are we speaking korean?
  7246                                  	jne	short OpenErr 			; no, don't check for kautoexe
  7247                                  
  7248                                  	;mov	di,BatFile			; 3/3/kk
  7249                                  	mov	di,20h
  7250                                  	;mov	si,offset ResGroup:KautoBat	; another trial to do	3/3/kk
  7251                                  	mov	si,KAUTOBAT
  7252                                  	mov	cx,8				; auto execution for the 3/3/kk
  7253                                  	rep	movsw				; non-english country	3/3/kk
  7254                                  	movsb					; move in carraige return to terminate string
  7255                                  	;mov	dx,offset ResGroup:KautoBat	; 3/3/kk
  7256                                  	mov	dx,KAUTOBAT
  7257                                  	mov	ax,3D00h
  7258                                  	;mov	ax,OPEN<<8
  7259                                  	;;mov	ax,OPEN shl 8			; 3/3/kk
  7260                                  	int	21h				; see if kautoexe.bat exists  3/3/kk
  7261                                  	jc	short NoKabat 			; 3/3/kk
  7262                                  	mov	bx,ax				; 3/3/kk
  7263                                  	mov	ah,3Eh
  7264                                  	;mov	ah,CLOSE			; 3/3/kk
  7265                                  	int	21h				; 3/3/kk
  7266                                  	jmp	short Drv0			; 3/3/kk
  7267                                  
  7268                                  NoKabat:					; 3/3/kk
  7269                                  	call	far [triage_add]		; get extended error
  7270                                  	cmp	ax,65				; network access denied?
  7271                                  	jnz	short OpenErr 			; no - go deallocate batch
  7272                                  
  7273                                  	; 22/07/2024
  7274                                  %endif	; 06/06/2023 - Retro DOS 4.2 COMMAND.COM
  7275                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7276                                  
  7277                                  AccDenErr:					; yes - put out message
  7278                                  	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7279 00001A23 BA[7806]                	mov	dx,ACCDEN
  7280 00001A26 E80DF9                  	call	RPrint
  7281                                  OpenErr:
  7282                                  ;OPENERR:
  7283 00001A29 8E06[E701]              	mov	es,[Batch]		; not found--turn off batch job
  7284 00001A2D B449                    	mov	ah,49h
  7285                                  	;mov	ah,DEALLOC ; 49h
  7286 00001A2F CD21                    	int	21h
  7287 00001A31 C706[E701]0000          	mov	word [Batch],0		; after dealloc in case of ^c
  7288 00001A37 C606[3B02]01            	mov	byte [EchoFlag],1
  7289 00001A3C C706[4C02]0000          	mov	word [Nest],0		; indicate no batch in progress
  7290                                  ;DoDttm:
  7291                                  	;mov	ax,offset TranGroup:Datinit
  7292 00001A42 B8[B533]                	mov	ax,DATINIT
  7293 00001A45 A3[801E]                	mov	[INITADD],ax
  7294                                  
  7295                                  	; MSDOS 6.0
  7296                                  ;;M004;;mov	ax,TrnSeg	
  7297                                  ;
  7298                                  ; M004; We cant use TrnSeg now because it is not initialized. We now that
  7299                                  ; M004; the transient starts on a para boundary at the label TranStart.
  7300                                  ; M004; We use TranStart to get the start of the transient segment.
  7301                                  
  7302                                  	; 21/01/2023
  7303                                  	;mov	ax,offset RESGROUP:TranStart	; M004
  7304                                  	;;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7305                                  	; 06/06/2023
  7306                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7307                                  	;
  7308                                  	;mov	ax,TRANSTART
  7309                                  	;mov	cl,4				; M004
  7310                                  	;shr	ax,cl				; get relative seg ; M004
  7311                                  	; 06/06/2023
  7312 00001A48 B85502                  	mov	ax,TRANSTART>>4	
  7313                                  
  7314 00001A4B 8CC9                    	mov	cx,cs
  7315 00001A4D 01C8                    	add	ax,cx				; ax = transient seg ; M004
  7316                                  
  7317                                  	; 21/01/2023
  7318                                  	; MSDOS 3.3
  7319                                  	; 25/09/2018
  7320                                  	;mov     ax,[TrnSeg]	; COMMAND.COM (MSDOS 3.3) - Offset 1387h
  7321                                  
  7322                                  	; MSDOS 3.3 & MSDOS 6.0
  7323 00001A4F A3[821E]                	mov	[INITADD+2],ax
  7324                                  	;call	dword ptr InitAdd
  7325 00001A52 FF1E[801E]              	call	far [INITADD]
  7326                                  
  7327                                  NoDttm:
  7328                                  	; MSDOS 6.0
  7329                                  	; 21/01/2023
  7330                                  ;Copyright:
  7331                                  	;public	Copyright
  7332                                  ;	Bugbug:	remove Copyright label.
  7333                                  
  7334                                  ;if IBMVER
  7335 00001A56 833E[4302]00            	cmp	word [SingleCom],0
  7336 00001A5B 7506                    	jnz	short Drv0			; don't print header if SingleCom
  7337                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7338 00001A5D BA[BF1F]                	mov	dx,COPYRIGHTMSG
  7339 00001A60 E8D3F8                  	call	RPrint
  7340                                  ;endif
  7341                                  	; 21/01/2023
  7342                                  	; MSDOS 3.3
  7343                                  	;cmp	word [SingleCom],0	; don't print header if SingleCom
  7344                                  	;jnz	short DRV0
  7345                                  	;mov	dx,HEADERPTR	; dx = ptr to msg
  7346                                  	;call	RPRINT
  7347                                  ;DRV0:
  7348                                  	; MSDOS 3.3
  7349                                  	;mov	byte [INITFLAG],0
  7350                                  	;jmp	ENDINIT
  7351                                  
  7352                                  	; 21/01/2023
  7353                                  	; MSDOS 6.0
  7354                                  Drv0:						; Reset APPEND state
  7355 00001A63 1E                      	push	ds				; save data segment
  7356 00001A64 0E                      	push	cs				; Get local segment into DS
  7357 00001A65 1F                      	pop	ds				;
  7358 00001A66 B807B7                  	mov	ax,0B707h ; 21/01/2023
  7359                                  	;mov	ax,APPENDSETSTATE		; Set the state of Append
  7360 00001A69 8B1E[6002]              	mov	bx,[Append_State] 		;  back to the original state
  7361 00001A6D CD2F                    	int	2Fh				;
  7362 00001A6F 1F                      	pop	ds				; get data segment back
  7363                                  
  7364                                  ;Check FirstCom set previously to see if this is the first instance of
  7365                                  ;command.com. If not, we do not move command.com. Instead, we copy over the
  7366                                  ;jump table from the previous stub to the current stub.
  7367                                  
  7368 00001A70 803E[1424]01            	cmp	byte [FirstCom],1		; first command.com?
  7369 00001A75 7424                    	jz	short move_code			; yes, move it
  7370                                  
  7371 00001A77 06                      	push	es
  7372 00001A78 1E                      	push	ds
  7373                                  
  7374 00001A79 1E                      	push	ds
  7375 00001A7A 07                      	pop	es
  7376                                  	;mov	di,offset DATARES:Int2f_Entry
  7377 00001A7B BF[0400]                	mov	di,Int2f_Entry	
  7378                                  
  7379                                  	;mov	ds,[es:ResJmpTable+2]		; get segment address
  7380                                  	;mov	si,[es:ResJmpTable]		; get offset address
  7381                                  	; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7382 00001A7E 26C536[1024]            	lds	si,[es:ResJmpTable]
  7383                                  
  7384                                  	;mov	cx,11
  7385                                  	;;mov 	cx,NUM_RELOC_ENTRIES 		; number of dword ptrs
  7386                                  	;shl	cx,1
  7387                                  	;shl	cx,1				; size of table in bytes
  7388                                  	; 21/01/2023
  7389 00001A83 B92C00                  	mov	cx,44				; size of table in bytes
  7390                                  
  7391 00001A86 FC                      	cld
  7392 00001A87 F3A4                    	rep	movsb				; copy the jump table
  7393                                  
  7394                                  ;Check if the resident code is in HMA. We assume that it is in HMA if its 
  7395                                  ;code segment > 0f000h. If in HMA, we set the ComInHMA flag
  7396                                  
  7397 00001A89 26817DFE00F0            	cmp	word [es:di-2],0F000h		; is resident code in HMA?
  7398 00001A8F 7206                    	jb	short res_low			; no, dont set flag
  7399                                  
  7400 00001A91 26C606[3400]01          	mov	byte [es:ComInHMA],1		; indicate code in HMA
  7401                                  res_low:
  7402 00001A97 1F                      	pop	ds
  7403 00001A98 07                      	pop	es
  7404 00001A99 EB03                    	jmp	short finish_init
  7405                                  
  7406                                  ;Now, we can move the resident code to its final location, either to HIMEM
  7407                                  ;or to overlay the messages in the data segment if the user has not used the
  7408                                  ;/msg switch.
  7409                                  
  7410                                  move_code:
  7411 00001A9B E88D01                  	call	Move_res_code			; move the code
  7412                                  
  7413                                  finish_init:
  7414                                  	;jmp	RESGROUP:EndInit 		; finish initializing
  7415 00001A9E E916E8                  	jmp	EndInit
  7416                                  
  7417                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7418                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1BA8h (CODERES:0E68h)
  7419                                  
  7420                                  GetStrLen:
  7421                                  ;	Get length of string pointed to by DS:SI. Length includes NULL.
  7422                                  ;	Length is returned in CX
  7423                                  
  7424                                  	; MSDOS 3.3 & MSDOS 6.0
  7425 00001AA1 31C9                    	xor	cx,cx
  7426                                  NxtChar:
  7427 00001AA3 AC                      	lodsb
  7428 00001AA4 41                      	inc	cx
  7429 00001AA5 08C0                    	or	al,al
  7430 00001AA7 75FA                    	jnz	short NxtChar
  7431 00001AA9 C3                      	retn
  7432                                  
  7433                                  	; 29/01/2023
  7434                                  Setup_Seg:
  7435                                  
  7436                                  ; If the transient has been loaded in TranSeg, then we need to use that
  7437                                  ; segment for calls to routines in the transient area. Otherwise, the current
  7438                                  ; code segment is used
  7439                                  ; Segment returned in AX.
  7440                                  
  7441                                  	; MSDOS 3.3 & MSDOS 6.0
  7442 00001AAA A1[2D02]                	mov	ax,[TrnSeg]
  7443 00001AAD 803E[2F02]01            	cmp	byte [TrnMvFlg],1	; Has transient portion been moved
  7444 00001AB2 7405                    	je	short setup_end
  7445                                  
  7446                                  ;06/06/2023
  7447                                  %if 0
  7448                                  	push	bx
  7449                                  	mov	bx,cs
  7450                                  	;mov	ax,offset ResGroup:TranStart
  7451                                  	;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7452                                  	; 06/06/2023
  7453                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7454                                  	;mov	ax,TRANSTART
  7455                                  	;shr	ax,1
  7456                                  	;shr	ax,1
  7457                                  	;shr	ax,1
  7458                                  	;shr	ax,1
  7459                                  	; 29/01/2023
  7460                                  	mov	ax,TRANSTART>>4
  7461                                  	add	ax,bx
  7462                                  	pop	bx
  7463                                  %endif
  7464                                  	; 06/06/2023
  7465 00001AB4 8CC8                    	mov	ax,cs
  7466 00001AB6 055502                  	add	ax,TRANSTART>>4
  7467                                  
  7468                                  setup_end:
  7469 00001AB9 C3                      	retn
  7470                                  
  7471                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7472                                  ;RPRINT:
  7473                                  	; MSDOS 3.3
  7474                                  	;push	ax
  7475                                  	;call	SETUP_SEG
  7476                                  	;mov	[PRINTADD+2], ax
  7477                                  	;;call	dword ptr PRINTADD
  7478                                  	;call	far [PRINTADD]
  7479                                  	;pop	ax
  7480                                  	;retn
  7481                                  
  7482                                  	; 29/01/2023
  7483                                  	; MSDOS 6.0
  7484                                  ;***	RPrintParse - display parse error message
  7485                                  ;
  7486                                  ;	ENTRY	DX = parse error #
  7487                                  ;
  7488                                  ;	EXIT	nothing
  7489                                  ;
  7490                                  ;	USED	flags
  7491                                  ;
  7492                                  ;	EFFECTS
  7493                                  ;	  Message is displayed on stdout.
  7494                                  
  7495                                  RPrintParse:	;proc
  7496                                  	;assume	ds:ResGroup,ss:ResGroup
  7497                                  
  7498 00001ABA 52                      	push	dx				; preserve DX
  7499 00001ABB 87DA                    	xchg	bx,dx				; bx = parse error #
  7500                                  						; dx = saved BX
  7501 00001ABD 4B                      	dec	bx				; bx = parse error index, from 0
  7502 00001ABE D1E3                    	shl	bx,1				; bx = offset in word table
  7503                                  	;mov	bx,ParsMsgPtrs[bx]		; bx = ptr to error msg
  7504 00001AC0 8B9F[BA09]              	mov	bx,[bx+PARSMSGPTRS]
  7505 00001AC4 87DA                    	xchg	bx,dx				; dx = ptr to error msg
  7506                                  						; bx = restored
  7507 00001AC6 E86DF8                  	call	RPrint				; print the message
  7508 00001AC9 5A                      	pop	dx				; restore DX
  7509 00001ACA C3                      	retn
  7510                                  
  7511                                  ;RPrintParse	endp
  7512                                  
  7513                                  	; 29/01/2023
  7514                                  ;PATHCHRCMPR:
  7515                                  	; MSDOS 3.3
  7516                                  	;push	dx
  7517                                  	;mov	dl,[slash_chr]
  7518                                  	;;cmp	byte [RSWITCHAR],'/'
  7519                                          ;cmp	[RSWITCHAR],dl
  7520                                  	;je	short RNOSLASHT
  7521                                  	;;cmp	al,'/'
  7522                                  	;cmp	al,dl
  7523                                  	;je	short RET41 ; zf = 1 
  7524                                  ;RNOSLASHT:
  7525                                          ;;cmp	al,'\'
  7526                                  	;cmp	al,[bslash_chr]
  7527                                  ;RET41:
  7528                                  	;pop	dx
  7529                                  	;retn
  7530                                  
  7531                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7532                                  IfindE:
  7533                                  	; MSDOS 3.3 & MSDOS 6.0
  7534 00001ACB E80300                  	call	ifind				; find the name
  7535                                  	;jc	short ifind2			; carry means not found
  7536                                  	;jmp	short Iscasb1 			; scan for = sign
  7537                                  	; 29/01/2023
  7538 00001ACE 733A                    	jnc	short Iscasb1
  7539                                  ifind2:
  7540 00001AD0 C3                      	retn
  7541                                  
  7542                                  	; 29/01/2023
  7543                                  
  7544                                  ; on return of find1, es:di points to beginning of name
  7545                                  
  7546                                  ifind:
  7547 00001AD1 FC                      	cld
  7548 00001AD2 E82700                  	call	Icount0				; cx = length of name
  7549 00001AD5 8E06[DC03]              	mov	es,[EnvirSeg]
  7550 00001AD9 31FF                    	xor	di,di
  7551                                  ifind1:
  7552 00001ADB 51                      	push	cx
  7553 00001ADC 56                      	push	si
  7554 00001ADD 57                      	push	di
  7555                                  ifind11:
  7556 00001ADE AC                      	lodsb
  7557 00001ADF E83400                  	call	iupconv
  7558 00001AE2 47                      	inc	di
  7559 00001AE3 263A45FF                	cmp	al,[es:di-1]
  7560 00001AE7 7502                    	jnz	short ifind12
  7561 00001AE9 E2F3                    	loop	ifind11
  7562                                  ifind12:
  7563 00001AEB 5F                      	pop	di
  7564 00001AEC 5E                      	pop	si
  7565 00001AED 59                      	pop	cx
  7566 00001AEE 74E0                    	jz	short ifind2
  7567 00001AF0 51                      	push	cx
  7568 00001AF1 E81A00                  	call	Iscasb2 			; scan for a nul
  7569 00001AF4 59                      	pop	cx
  7570                                  	;cmp	byte [es:di],0
  7571                                  	;jnz	short ifind1
  7572                                  	;stc					; indicate not found
  7573 00001AF5 26803D01                	cmp	byte [es:di],1
  7574 00001AF9 73E0                    	jnb	short ifind1
  7575                                  	; cf=1					; indicate not found
  7576                                  ;ifind2:
  7577 00001AFB C3                      	retn
  7578                                  
  7579                                  	; 29/01/2023
  7580                                  Icount0:
  7581 00001AFC 1E                      	push	ds
  7582 00001AFD 07                      	pop	es
  7583 00001AFE 89F7                    	mov	di,si
  7584                                  
  7585 00001B00 57                      	push	di				; count number of chars until "="
  7586 00001B01 E80600                  	call	Iscasb1
  7587                                  	; 25/09/2018
  7588                                  	;jmp	short Icountx
  7589                                  	;push	di				; count number of chars until nul
  7590                                  	;call	Iscasb2
  7591                                  ;Icountx:
  7592 00001B04 59                      	pop	cx
  7593 00001B05 29CF                    	sub	di,cx
  7594 00001B07 87F9                    	xchg	di,cx
  7595 00001B09 C3                      	retn
  7596                                  
  7597                                  Iscasb1:
  7598                                  	; 29/01/2023
  7599 00001B0A B03D                    	mov	al,"="
  7600                                  	;mov	al,[equalsign] ; [equal_sign]	; scan for an =
  7601 00001B0C EB02                    	jmp	short Iscasbx
  7602                                  Iscasb2:
  7603 00001B0E 30C0                    	xor	al,al				; scan for a nul
  7604                                  Iscasbx:
  7605 00001B10 B90001                  	mov	cx,256 ; 100h
  7606 00001B13 F2AE                    	repnz	scasb
  7607 00001B15 C3                      	retn
  7608                                  
  7609                                  	; 29/01/2023
  7610                                  ;IUPCONV:
  7611                                  	; MSDOS 3.3
  7612                                          ;;cmp	al,"a"
  7613                                  	;cmp	al,[letter_a]
  7614                                          ;jb	short IRET22
  7615                                          ;;cmp	al,"z"
  7616                                          ;cmp	al,[letter_z]
  7617                                  	;ja	short IRET22
  7618                                          ;sub	al,20h			; Lower-case changed to upper-case
  7619                                  ;IRET22:
  7620                                  	;retn
  7621                                  
  7622                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7623                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C32h
  7624                                  
  7625                                  	; MSDOS 6.0
  7626                                  ; *****************************************************************
  7627                                  ; *
  7628                                  ; * ROUTINE:	 IUPCONV    (ADDED BY EMG 4.00)
  7629                                  ; *
  7630                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
  7631                                  ; *		 the character in AL from the file upper case table
  7632                                  ; *		 in DOS if character if above ascii 128, else
  7633                                  ; *		 subtracts 20H if between "a" and "z".
  7634                                  ; *
  7635                                  ; * INPUT:	 DS	      set to resident
  7636                                  ; *		 AL	      char to be upper cased
  7637                                  ; *		 FUCASE_ADDR  set to the file upper case table
  7638                                  ; *
  7639                                  ; * OUTPUT:	 AL	      upper cased character
  7640                                  ; *
  7641                                  ; *****************************************************************
  7642                                  
  7643                                  iupconv:	;proc	near				
  7644                                  	;assume	ds:ResGroup			;
  7645                                  
  7646 00001B16 3C80                    	cmp	al,80h				; see if char is > ascii 128
  7647 00001B18 7210                    	jb	short other_fucase		; no - upper case math
  7648 00001B1A 2C80                    	sub	al,80h				; only upper 128 chars in table
  7649 00001B1C 1E                      	push	ds				;
  7650 00001B1D 53                      	push	bx				;
  7651                                  	;lds	bx,dword ptr FUCase_Addr+1	; get table address
  7652 00001B1E C51E[5402]              	lds     bx,[FUCase_Addr+1]
  7653 00001B22 83C302                  	add	bx,2				; skip over first word
  7654                                  	;xlat	ds:byte ptr [bx]		; convert to upper case
  7655 00001B25 D7                      	xlat
  7656 00001B26 5B                      	pop	bx				;
  7657 00001B27 1F                      	pop	ds				;
  7658 00001B28 EB0A                    	jmp	short iupconv_end		; we finished - exit
  7659                                  
  7660                                  other_fucase:					;
  7661                                  	;cmp	al,[lcasea] ; [letter_a]	; if between "a" and "z",
  7662 00001B2A 3C61                    	cmp	al,'a'
  7663 00001B2C 7206                    	jb	short iupconv_end		;     subtract 20h to get
  7664                                  	;cmp	al,[lcasez] ; [letter_z]	; upper case equivalent.
  7665 00001B2E 3C7A                    	cmp	al,'z'
  7666 00001B30 7702                    	ja	short iupconv_end		;
  7667 00001B32 2C20                    	sub	al,20h				; Change lower-case to upper
  7668                                  iupconv_end:					;
  7669 00001B34 C3                      	retn
  7670                                  
  7671                                  ;iupConv endp
  7672                                  
  7673                                  	; 29/01/2023
  7674                                  init_contc_specialcase:
  7675                                  	; MSDOS 3.3 & MSDOS 6.0
  7676                                  						; This routine is called if control-C
  7677 00001B35 83C406                  	add	sp,6				;  is type during the date/time prompt
  7678 00001B38 56                      	push	si				;  at initialization time.  The desired
  7679 00001B39 89D6                    	mov	si,dx				;  response is to make it look like the
  7680 00001B3B C74401000D              	mov	word [si+1],0D00h		;  user typed <CR> by "popping" the
  7681 00001B40 5E                      	pop	si				;  INT 21h stuff off the stack, putting
  7682 00001B41 CF                      	iret					;  a <CR> in the user's buffer, and
  7683                                  						;  returning directly to the user.
  7684                                  						; In this case the user is TCODE.
  7685                                  
  7686                                  ; ----------------------------------------------------------------------------
  7687                                  
  7688                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7689                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C62h (CODERES:0F22h)
  7690                                  
  7691                                  	; MSDOS 6.0
  7692                                  ; ****************************************************************
  7693                                  ; *
  7694                                  ; * ROUTINE:	 Setup_for_messages
  7695                                  ; *
  7696                                  ; * FUNCTION:	 Sets up system for PARSE and EXTENDED ERROR
  7697                                  ; *		 messages as follows:
  7698                                  ; *
  7699                                  ; *		 IF /P and /MSG are entered
  7700                                  ; *		    keep PARSE and EXTENDED ERRORS in memory
  7701                                  ; *		 ELSE IF /P is entered
  7702                                  ; *		    use PARSE and EXTENDED ERRORS on disk
  7703                                  ; *		    remove PARSE ERRORS from memory
  7704                                  ; *		 ELSE
  7705                                  ; *		    remove PARSE ERRORS from memory
  7706                                  ; *		 ENDIF
  7707                                  ; *
  7708                                  ; * INPUT:	 PERMCOM	Set up with user input
  7709                                  ; *		 EXT_MSG	Set up with user input
  7710                                  ; *		 System set up to retain PARSE ERRORS
  7711                                  ; *
  7712                                  ; * OUTPUT:	 registers unchanged
  7713                                  ; *
  7714                                  ; ****************************************************************
  7715                                  
  7716                                  setup_for_messages: ;proc near		
  7717                                  
  7718 00001B42 53                      	push	bx
  7719 00001B43 1E                      	push	ds				; save data segment
  7720 00001B44 06                      	push	es				; save environment segment
  7721 00001B45 50                      	push	ax				;
  7722 00001B46 52                      	push	dx				;
  7723 00001B47 57                      	push	di				;
  7724 00001B48 8CC8                    	mov	ax,cs				; get local segment to ES and DS
  7725 00001B4A 8ED8                    	mov	ds,ax				;
  7726 00001B4C 8EC0                    	mov	es,ax				;
  7727                                  
  7728 00001B4E 803E[4002]00            	cmp	byte [PermCom],0		; was permcom set?
  7729 00001B53 743C                    	jz	short no_permcom		; No - don't worry about messages
  7730                                  
  7731                                  ;*	We're permanent. Install our message services int 2f handler.
  7732                                  
  7733 00001B55 06                      	push	es
  7734                                  	;mov	ax,(GET_INTERRUPT_VECTOR shl 8) or 2Fh
  7735 00001B56 B82F35                  	mov	ax,352Fh
  7736 00001B59 CD21                    	int	21h
  7737                                  			; DOS - 2+ - GET INTERRUPT VECTOR
  7738                                  			; AL = interrupt number
  7739                                  			; Return: ES:BX = value of interrupt vector
  7740 00001B5B 891E[5204]              	mov	[Int2fHandler],bx
  7741 00001B5F 8C06[5404]              	mov	[Int2fHandler+2],es
  7742 00001B63 07                      	pop	es
  7743                                  
  7744                                  ;	DS = RESGROUP seg addr
  7745                                  
  7746                                  ; M005; We will not hook int 2fh on any command.com other than the first.
  7747                                  ; M005; Carousel loads as a permanent command.com and when we exit Carousel,
  7748                                  ; M005; it just wipes our arena out. So, int 2fh is still hooked and the
  7749                                  ; M005; first int 2fh call after exit from Carousel (from the DOS terminate
  7750                                  ; M005; call) goes off into space.
  7751                                  
  7752 00001B64 803E[1424]00            	cmp	byte [FirstCom],0		; M005
  7753 00001B69 7416                    	je	short no_msg_hook		; M005
  7754                                  ;
  7755                                  ; M005; !!!SLIMIEST CAROUSEL HACK OFF ALL!!!
  7756                                  ; M005; Carousel plays around with the interrupt vector tables. He saves it
  7757                                  ; M005; before loading a new command.com. Then, it takes hold of the current
  7758                                  ; M005; command.com's PSP and then looks at all interrupt vectors whose
  7759                                  ; M005; segment matches the command.com PSP and then updates these segments
  7760                                  ; M005; to the new command.com's PSP in his saved vector table. Whenever we
  7761                                  ; M005; we pop into his menu, he puts this saved table into the vector table.
  7762                                  ; M005; If we now quit, Carousel just wipes out command.com's arena and then
  7763                                  ; M005; issues a terminate. Unfortunately, the int 2fh vector is pointing at
  7764                                  ; M005; the command.com that was wiped out and so the next int 2fh call will
  7765                                  ; M005; bomb. To prevent Carousel from doing this clever(1**$$#) patching, we
  7766                                  ; M005; renormalize our int 2fh pointer so that its cs is not the same as the
  7767                                  ; M005; command.com PSP. Now, he does no such patching and our int 2fh vector
  7768                                  ; M005; remains nice and happy. The renormalized pointer points at a far 
  7769                                  ; M005; jump to the actual int 2fh entry point.
  7770                                  ;
  7771 00001B6B 1E                      	push	ds				; M005
  7772                                  	;mov	dx,offset DATARES:Carousel_i2f_Hook ; M005
  7773 00001B6C BA[C300]                	mov     dx,Carousel_i2f_Hook
  7774 00001B6F 83EA10                  	sub	dx,10h				; renormalize offset; M005
  7775 00001B72 8CD8                    	mov	ax,ds				; M005
  7776 00001B74 40                      	inc	ax				; Relocated cs ; M005
  7777 00001B75 8ED8                    	mov	ds,ax				; M005
  7778                                  	;mov	ax,(SET_INTERRUPT_VECTOR shl 8) or 2Fh
  7779 00001B77 B82F25                  	mov	ax,252Fh
  7780 00001B7A CD21                    	int	21h
  7781                                  			; DOS - SET INTERRUPT VECTOR
  7782                                  			; AL = interrupt number
  7783                                  			; DS:DX = new vector to be used for specified interrupt
  7784 00001B7C 1F                      	pop	ds				; M005
  7785                                  	;mov	word ptr Carousel_i2f_Hook+3,ds	; M005
  7786 00001B7D 8C1E[C600]              	mov	[Carousel_i2f_Hook+3],ds
  7787                                  						; patch in the cs for jump
  7788                                  no_msg_hook:					; M005
  7789 00001B81 803E[D91E]01            	cmp	byte [ext_msg],1 ; SET_EXTENDED_MSG
  7790 00001B86 7516                    	jne	short permcom_end		; no /msg - exit
  7791                                  
  7792                                  permcom_slash_msg:				; Keep messages in memory
  7793                                  	;mov	di,offset ResGroup:ExtMsgEnd 	; get address of resident end
  7794 00001B88 BF[B30C]                	mov     di,ExtMsgEnd
  7795 00001B8B 893E[5604]              	mov	[ResMsgEnd],di			; save it
  7796 00001B8F EB0D                    	jmp	short permcom_end		; exit
  7797                                  
  7798                                  no_permcom:					
  7799                                  	;cmp	byte [ext_msg],SET_EXTENDED_MSG	; was /msg specified?
  7800 00001B91 803E[D91E]01            	cmp	byte [ext_msg],1
  7801 00001B96 7506                    	jne	short permcom_end		; no - no error
  7802                                  	;mov	dx,LessArgs_Ptr			; get message number for "Required parameter missing"
  7803 00001B98 BA0200                  	mov	dx,2
  7804 00001B9B E81CFF                  	call	RPrintParse
  7805                                  
  7806                                  permcom_end:
  7807 00001B9E 5F                      	pop	di				;
  7808 00001B9F 5A                      	pop	dx				;
  7809 00001BA0 58                      	pop	ax				;
  7810 00001BA1 07                      	pop	es				; get environment back
  7811 00001BA2 1F                      	pop	ds				;
  7812 00001BA3 5B                      	pop	bx
  7813                                  
  7814 00001BA4 C3                      	retn					;
  7815                                  
  7816                                  ;setup_for_messages	endp
  7817                                  
  7818                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7819                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1CC5h
  7820                                  
  7821                                  	; MSDOS 6.0
  7822                                  
  7823                                  ;***	CheckHelp - print help text and exit if /? is on command line
  7824                                  ;
  7825                                  ;	ENTRY	command-line tail at 81h
  7826                                  ;
  7827                                  ;	EXIT	return if /? not found
  7828                                  ;		terminate if /? found
  7829                                  ;
  7830                                  ;	USED	AX,BX,CX,DX,SI,DI
  7831                                  ;
  7832                                  ;	EFFECTS	Help text displayed if /? found on command line
  7833                                  
  7834                                  CheckHelp:	; proc
  7835                                  	;assume	cs:RESGROUP,ds:RESGROUP,es:RESGROUP,ss:RESGROUP
  7836                                  
  7837 00001BA5 BE8100                  	mov	si,81h			; DS:SI = ptr to command-line tail
  7838                                  	;mov	di,offset RESGROUP:Parse_Command
  7839 00001BA8 BF[DE1E]                	mov	di,PARSE_COMMAND
  7840                                  					; ES:DI = ptr to primary parse block
  7841 00001BAB 31C9                    	xor	cx,cx			; CX = # positional param's found
  7842 00001BAD 31D2                    	xor	dx,dx			; DX will be ptr to result buffer
  7843                                  chParse:
  7844                                  	;call	dword ptr Init_Parse
  7845 00001BAF FF1E[D21E]              	call	far [Init_Parse]	; call system parser
  7846                                  
  7847                                  	;;cmp	ax,END_OF_LINE
  7848                                  	;cmp	ax,-1 ; 0FFFFh	
  7849                                  	;je	short chRet		; end of command line, no /? found
  7850                                  	;;cmp	ax,RESULT_NO_ERROR
  7851                                  	;;cmp	ax,0
  7852                                  	;;je	short chWhich		; valid syntax element found
  7853                                  	;;jmp	short chParse		; go parse more
  7854                                  	;and	ax,ax ; cmp ax,0
  7855                                  	;jnz	short chParse ; jne
  7856                                  	; 10/06/2023
  7857 00001BB3 40                      	inc	ax	; cmp ax,-1
  7858 00001BB4 741B                    	jz	short chRet   ; 0FFFFh -> 0
  7859 00001BB6 48                      	dec	ax	; cmp ax,0
  7860 00001BB7 75F6                    	jnz	short chParse ; 1 -> 0
  7861                                  	; ax = 0
  7862                                  chWhich:
  7863                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_?_Syn
  7864 00001BB9 813E[811F][641F]        	cmp     word [COMND1_SYN],COMMAND_?_SYN ; "/?"
  7865 00001BBF 7411                    	je	short chHelp		; /? found - display help & exit
  7866                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_C_Syn
  7867 00001BC1 813E[811F][4A1F]        	cmp     word [COMND1_SYN],COMMAND_C_SYN ; "/C"
  7868                                  	; 06/06/2023
  7869 00001BC7 7408                    	je	short chRet		; /c found - ignore rest of line
  7870                                  	; 29/01/2023
  7871                                  	;jne	short chParse
  7872                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  7873                                  	; MSDOS 6.0
  7874                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_K_Syn
  7875 00001BC9 813E[811F][701F]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; "/K"
  7876                                  	;je	short chRet		; /k found - ignore rest of line
  7877                                  	;jmp	short chParse		; anything else - ignore, keep looking
  7878                                  	; 06/06/2023
  7879 00001BCF 75DE                    	jne	short chParse
  7880                                  chRet:
  7881 00001BD1 C3                      	retn
  7882                                  chHelp:
  7883                                  	;mov	si,offset RESGROUP:HelpMsgs	; SI = ptr to msg ptr list
  7884 00001BD2 BE[DE23]                	mov	si,HelpMsgs
  7885                                  chHelpNext:
  7886 00001BD5 AD                      	lodsw					; AX = ptr to msg
  7887 00001BD6 09C0                    	or	ax,ax
  7888 00001BD8 7407                    	jz	short chHelpDone		; end of list - all done
  7889 00001BDA 89C2                    	mov	dx,ax				; DX = ptr to msg
  7890 00001BDC E857F7                  	call	RPrint				; display msg
  7891 00001BDF EBF4                    	jmp	short chHelpNext		; go do next msg
  7892                                  
  7893                                  chHelpDone:
  7894 00001BE1 CD20                    	int	20h				; terminate program
  7895                                  ;chRet:
  7896 00001BE3 C3                      	retn
  7897                                  
  7898                                  ;CheckHelp	endp
  7899                                  
  7900                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7901                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D03h
  7902                                  
  7903                                  	; MSDOS 6.0
  7904                                  
  7905                                  ;***** Setup_res_end -- This routine determines the resident size of COMMAND.
  7906                                  ;
  7907                                  ; It determines based on 2 factors:
  7908                                  ;	1. Is this is the first COMMAND?
  7909                                  ;	2. Is COMMAND to be loaded into HIMEM?
  7910                                  ;   The strategy works as follows:
  7911                                  ;
  7912                                  ;	if (First COMMAND)
  7913                                  ;	then if (COMMAND in HIMEM)
  7914                                  ;		ResSize = resident_data;
  7915                                  ;	     else
  7916                                  ;		ResSize = resident_data + resident_code;
  7917                                  ;	else
  7918                                  ;	   ResSize = resident_data;
  7919                                  ;
  7920                                  ; Int 2fh calls have been added to determine whether or not we are the first
  7921                                  ; COMMAND and whether DOS is in HIMEM.
  7922                                  ;
  7923                                  ;	ENTRY: ResMsgEnd = resident size of data in paras
  7924                                  ;
  7925                                  ;	EXIT:  ResSize = resident size in low memory
  7926                                  ;
  7927                                  ;	REGISTERS AFFECTED: ax,cx,dx
  7928                                  ;
  7929                                  
  7930                                  GET_HMA_ADDR	equ	4A02h
  7931                                  
  7932                                  Setup_res_end:	;proc near
  7933                                  	
  7934 00001BE4 1E                      	push	ds
  7935 00001BE5 8CC8                    	mov	ax,cs
  7936 00001BE7 8ED8                    	mov	ds,ax				;ds = RESGROUP
  7937                                  	;assume	ds:RESGROUP
  7938                                  
  7939 00001BE9 8B0E[5604]              	mov	cx,[ResMsgEnd]			;set resident size = data
  7940                                  
  7941                                  ;ifndef	ROMDOS
  7942                                  
  7943                                  ;M042 -- Begin changes
  7944                                  ;If messages are to be kept behind, we need to round up the messages to
  7945                                  ;the next para boundary. This is because we have a dummy segment between the
  7946                                  ;data and the resident code segment so that the code segment starts on a
  7947                                  ;para boundary
  7948                                  
  7949                                  	;cmp	cx,offset RESGROUP:ExtMsgEnd	;messages to be resident?
  7950 00001BED 81F9[B30C]              	cmp	cx,ExtMsgEnd
  7951 00001BF1 7506                    	jne	short calc_res			;no, continue
  7952 00001BF3 83C10F                  	add	cx,15				;round up
  7953 00001BF6 83E1F0                  	and	cx,0FFF0h
  7954                                  calc_res:
  7955                                  
  7956                                  ;M042 -- End changes
  7957                                  
  7958                                  	; 18/07/2024
  7959                                  	;xor	ax,ax
  7960                                         	
  7961 00001BF9 803E[1424]01            	cmp	byte [FirstCom],1		;is it first command.com?
  7962                                  	;jne	short not_first			;no, do not keep code
  7963                                  	; 06/06/2023
  7964 00001BFE 751A                    	jne	short not_first2
  7965                                  
  7966                                  ;We issue a version check call with al=01 to detect if DOS is in HMA. If so,
  7967                                  ;bit 4 of dh is set
  7968                                  
  7969 00001C00 53                      	push	bx
  7970 00001C01 51                      	push	cx
  7971                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ;is DOS in HIMEM? ;M013
  7972 00001C02 B80633                  	mov	ax,3306h
  7973 00001C05 CD21                    	int	21h
  7974                                  		; DOS - 5+ Get TRUE Version Number
  7975                                  		; (BL major, BH minor, DL revision, DH flags)
  7976 00001C07 59                      	pop	cx
  7977                                  
  7978                                  ;bugbug: remove version check after testing
  7979                                  
  7980 00001C08 80FB05                  	cmp	bl,5				;bl has true version ; M013
  7981 00001C0B 7207                    	jb	short oldver
  7982                                  
  7983 00001C0D 31C0                    	xor	ax,ax
  7984 00001C0F 80E610                  	and	dh,10h				;is DOS in HMA ; M013
  7985                                  	;pop	bx
  7986                                  	;jnz	short not_first			;DOS in HIMEM, code not
  7987                                  						;	resident
  7988                                  	; 29/01/2023
  7989 00001C12 7503                    	jnz	short not_first_pop
  7990                                  oldver:
  7991                                  	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  7992                                  	; 06/06/2023
  7993                                  	;;mov	ax,81Ah ; MSDOS 5.0 and MSDOS 6.22 COMMAND.COM
  7994                                  	; 06/06/2023
  7995                                  	; 29/01/2023
  7996                                  	;mov	ax,EndCode-(RCODE_START+100h) ; 23/04/2023
  7997                                  	; 03/05/2023
  7998 00001C14 B8(FA08)                	mov	ax,EndCode-RCODE_START	; 06/06/2023
  7999                                  
  8000                                  not_first_pop:
  8001                                  	; 29/01/2023
  8002 00001C17 5B                      	pop	bx
  8003                                  
  8004                                  not_first:
  8005                                  
  8006                                  ;Note that ax = 0 (side effect of int 2fh), if the code is not to be retained
  8007                                  
  8008 00001C18 01C1                    	add	cx,ax
  8009                                  
  8010                                  not_first2:	; 06/06/2023
  8011                                  
  8012                                  ;endif	;not ROMDOS
  8013                                  
  8014 00001C1A 83C10F                  	add	cx,15				;round up to next para
  8015 00001C1D D1E9                    	shr	cx,1
  8016 00001C1F D1E9                    	shr	cx,1
  8017 00001C21 D1E9                    	shr	cx,1
  8018 00001C23 D1E9                    	shr	cx,1				;ax = para size of res code
  8019 00001C25 890E[5804]              	mov	[ResSize],cx			;store resident size
  8020                                  
  8021 00001C29 1F                      	pop	ds
  8022                                  	;assume	ds:nothing
  8023 00001C2A C3                      	retn
  8024                                  
  8025                                  ;ifndef	ROMDOS
  8026                                  
  8027                                  ;bugbug: remove this code (for version independent COMMAND) after testing
  8028                                  
  8029                                  	; 29/01/2023
  8030                                  ;oldver:
  8031                                  ;	pop	bx
  8032                                  ;	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8033                                  ;	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8034                                  ;	; 29/01/2023
  8035                                  ;	mov	ax,EndCode-RCODE_START
  8036                                  ;	jmp	short not_first
  8037                                  
  8038                                  ;endif	;not ROMDOS
  8039                                  
  8040                                  ;setup_res_end	endp
  8041                                  
  8042                                  ;ifndef	ROMDOS
  8043                                  
  8044                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8045                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8046                                  
  8047                                  	; MSDOS 6.0
  8048                                  ;*** Move_res_code -- This routine moves the resident code to its final 
  8049                                  ; location. We check if DOS is in HIMEM. If so, we try to load ourselves
  8050                                  ; in HIMEM. If we fail, then we remain low and update ResSize to reflect
  8051                                  ; the correct resident size. When remaining low, we have to check if we 
  8052                                  ; need to overlay the messages part of the data segment which is determined
  8053                                  ; by the /msg switch.
  8054                                  ;
  8055                                  ;	ENTRY: ResMsgEnd = end of resident data
  8056                                  ;
  8057                                  ;	EXIT:  The resident code is either up high or in its final location
  8058                                  ;		down low.
  8059                                  ;
  8060                                  ;	REGISTERS AFFECTED: ax,bx,cx,dx,si,di
  8061                                  	
  8062                                  Move_res_code:	;proc near
  8063                                  
  8064 00001C2B 1E                      	push	ds
  8065 00001C2C 06                      	push	es
  8066                                  
  8067 00001C2D 8CC8                    	mov	ax,cs
  8068 00001C2F 8ED8                    	mov	ds,ax
  8069                                  	;assume	ds:RESGROUP
  8070                                  
  8071                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ; M013
  8072 00001C31 B80633                  	mov	ax,3306h
  8073 00001C34 CD21                    	int	21h				;DOS in HIMEM?
  8074                                  		; DOS - 5+ Get TRUE Version Number
  8075                                  		; (BL major, BH minor, DL revision, DH flags)
  8076                                  
  8077 00001C36 80E610                  	and	dh,10h				; M013
  8078 00001C39 750E                    	jnz	short move_high			;yes, move code high
  8079                                  
  8080                                  ;Check if messages have been discarded or not
  8081                                  
  8082                                  load_low:
  8083 00001C3B 1E                      	push	ds
  8084 00001C3C 07                      	pop	es				;es = RESGROUP
  8085 00001C3D 8B3E[5604]              	mov	di,[ResMsgEnd]			;end offset in DATARES
  8086                                  	;;mov	bx,offset RESGROUP:ExtMsgEnd	;end offset of messages
  8087                                  	;mov	bx,ExtMsgEnd
  8088                                  	; 29/01/2023
  8089 00001C41 81FF[B30C]              	cmp	di,ExtMsgEnd
  8090                                  	;cmp	di,bx				;are messages to be kept?
  8091 00001C45 7431                    	je	short no_move			;yes, dont move code
  8092                                  
  8093 00001C47 EB37                    	jmp	short setup_move		;es:di points at dest.
  8094                                  
  8095                                  move_high:
  8096                                  
  8097                                  ;We have to call DOS to get the load address in HIMEM for COMMAND
  8098                                  ;We pass in bx the number of bytes we need
  8099                                  
  8100                                  	;mov	bx,offset CODERES:EndCode
  8101                                  	; 29/01/2023
  8102                                  	;;mov	bx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8103                                  	; 06/06/2023
  8104                                  	;mov	bx,EndCode-(RCODE_START+100h) ; 23/04/2023 ; 06/06/2023
  8105                                  	; 03/05/2023
  8106 00001C49 BB(FA08)                	mov	bx,EndCode-RCODE_START ; 06/06/2023
  8107                                  
  8108                                  ;M030;
  8109                                  ; Set di=0ffffh so that we load low in case no one answers this int 2fh
  8110                                  
  8111 00001C4C BFFFFF                  	mov	di,0FFFFh			;DT - in case no-one handles
  8112                                  						;this ; M030
  8113 00001C4F B8024A                  	mov	ax,GET_HMA_ADDR ; 4A02h
  8114 00001C52 CD2F                    	int	2Fh
  8115                                  
  8116                                  ;If the offset = 0xffff, then no HMA available
  8117                                  
  8118 00001C54 83FFFF                  	cmp	di,0FFFFh			;HMA available?
  8119 00001C57 C606[3400]01            	mov	byte [ComInHMA],1		;assume command.com in HMA
  8120 00001C5C 7522                    	jne	short setup_move		;no error, es:di = memory
  8121                                  
  8122                                  	;mov	byte [ComInHMA],0		;could not load in HMA
  8123                                  	; 29/01/2023	
  8124 00001C5E FE0E[3400]              	dec	byte [ComInHMA] ; 1 -> 0
  8125                                  
  8126                                  ;Zero means that we do not have enough HIMEM. Remain low and update
  8127                                  ;ResSize to reflect this
  8128                                  
  8129 00001C62 8B0E[5604]              	mov	cx,[ResMsgEnd]			;size of data in bytes
  8130                                  	;;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8131                                  	;;mov	ax,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8132                                  	;mov	ax,EndCode-RCODE_START
  8133                                  	;add	cx,ax
  8134                                  	; 06/06/2023
  8135                                  	; 29/01/2023
  8136                                  	;add	cx,(EndCode-(RCODE_START+100h))+15 ; 23/04/2023 ; 06/06/2023
  8137                                  	;add	cx,15				;round up to next para
  8138                                  	; 03/05/2023
  8139 00001C66 81C1(0909)              	add	cx,(EndCode-RCODE_START)+15 ; 06/06/2023
  8140 00001C6A D1E9                    	shr	cx,1
  8141 00001C6C D1E9                    	shr	cx,1
  8142 00001C6E D1E9                    	shr	cx,1
  8143 00001C70 D1E9                    	shr	cx,1				;ax = para size of res code
  8144 00001C72 890E[5804]              	mov	[ResSize],cx			;store resident size
  8145 00001C76 EBC3                    	jmp	short load_low			;let code remain low
  8146                                  
  8147                                  no_move:
  8148                                  	; 05/05/2023
  8149                                  	;mov	cl,4
  8150 00001C78 83C70F                  	add	di,0Fh
  8151 00001C7B 83E7F0                  	and	di,0FFF0h			;round it to a para offset
  8152 00001C7E EB0B                    	jmp	short patch_up
  8153                                  
  8154                                  setup_move:
  8155                                  	;mov	si,offset RESGROUP:StartCode
  8156                                  	; 03/05/2023
  8157 00001C80 BE[C00C]                	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8158                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8159                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8160                                  	;mov	cx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8161                                  	; 06/06/2023
  8162                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8163                                  	; 03/05/2023
  8164 00001C83 B9(FA08)                	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8165                                  
  8166 00001C86 FC                      	cld
  8167 00001C87 57                      	push	di				;need di for patching offset
  8168 00001C88 F3A4                    	rep	movsb
  8169 00001C8A 5F                      	pop	di
  8170                                  
  8171                                  patch_up:
  8172 00001C8B E86D01                  	call	patch_stub
  8173 00001C8E 07                      	pop	es
  8174 00001C8F 1F                      	pop	ds
  8175                                  	;assume	ds:nothing
  8176 00001C90 C3                      	retn
  8177                                  
  8178                                  ;Move_res_code endp
  8179                                  
  8180                                  ;else	;ROMDOS
  8181                                  ;
  8182                                  ;;***	Move_res_code - ROMDOS version - locate ROM resident
  8183                                  ;
  8184                                  ;Move_res_code	proc
  8185                                  ;
  8186                                  ;	push	es
  8187                                  ;
  8188                                  ;	invoke	FindROMRes		; ES:DI = ptr to ROM resident code
  8189                                  ;	call	patch_stub
  8190                                  ;
  8191                                  ;	pop	es
  8192                                  ;	ret
  8193                                  ;
  8194                                  ;Move_res_code	endp
  8195                                  ;
  8196                                  ;	assume	ds:NOTHING		; to match ending assume above
  8197                                  ;
  8198                                  ;endif	;ROMDOS
  8199                                  
  8200                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8201                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8202                                  
  8203                                  	; MSDOS 6.0
  8204                                  ;*** Alloc_env -- This routine allocates the temporary environment for the
  8205                                  ; Init code to initialize the COMSPEC. This is not a complete environment. 
  8206                                  ; Later on, at EndInit time, a proper sized environment is allocated and
  8207                                  ; the contents of this temporary environment are copied to it. This routine
  8208                                  ; will not be called in case a valid environment is passed to command.com
  8209                                  ;
  8210                                  ;       ENTRY:  FirstCom and initial EnvirSeg set
  8211                                  ;
  8212                                  ;       EXIT:   ax = EnvirSeg = segment of newly allocated environment segment
  8213                                  ;
  8214                                  ;       REGISTERS AFFECTED: ax,bx,cx,dx
  8215                                  
  8216                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8217                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1F3Fh
  8218                                  
  8219                                  alloc_env:	;proc near
  8220                                  	;assume ds:nothing
  8221                                  	
  8222 00001C91 1E                              push    ds
  8223 00001C92 06                      	push	es
  8224 00001C93 56                      	push	si
  8225 00001C94 57                      	push	di
  8226                                  
  8227                                  ; 07/06/2023
  8228                                  ; 29/01/2023 - MSDOS 6.0 COMMAND.COM
  8229                                  ;%if 0
  8230                                  %if 1 
  8231 00001C95 16                              push    ss
  8232 00001C96 1F                              pop     ds
  8233                                  	;assume ds:RESGROUP
  8234                                  
  8235 00001C97 A1[DC03]                        mov     ax,[EnvirSeg]
  8236                                  
  8237 00001C9A 803E[8C1E]00                    cmp	byte [AllocedEnv],0
  8238 00001C9F 7403                            je	short alloc_cont
  8239 00001CA1 E94C01                          jmp     alloc_done
  8240                                  
  8241                                  alloc_cont:
  8242 00001CA4 29FF                            sub     di,di                           ; default start
  8243                                          ;mov	bx,SIZE Environment             ; default size needed
  8244                                  	; 29/01/2023
  8245 00001CA6 BBB400                  	mov	bx,ENVIRONSIZ	; mov bx,180 ; 07/06/2023
  8246                                  
  8247 00001CA9 803E[1424]00                    cmp	byte [FirstCom],0		; first COMMAND.COM?
  8248 00001CAE 747E                            je	short alloc_seg			; no
  8249                                  
  8250                                  ;   Check EnvirSeg; if non-zero, then scan it for PATH and COMSPEC;
  8251                                  ;   Record their respective locations and do not add the default vars.
  8252                                  
  8253 00001CB0 09C0                    	or      ax,ax
  8254 00001CB2 7476                    	jz	short alloc_new			; no previous environment
  8255                                  
  8256 00001CB4 8EC0                            mov     es,ax
  8257                                  	;assume es:nothing
  8258                                  
  8259                                  _find_path:
  8260 00001CB6 B000                            mov     al,0
  8261 00001CB8 29FF                            sub     di,di
  8262                                  comp_path:
  8263 00001CBA AE                              scasb                                   ; end of env?
  8264 00001CBB 7417                    	je	short _find_prompt		; yes
  8265 00001CBD 4F                              dec     di
  8266 00001CBE B90500                          mov     cx,PathStrLen ; mov cx,5 ; "PATH="
  8267                                          ;mov	si,offset RESGROUP:PathString
  8268 00001CC1 BE[8D1E]                	mov	si,PathString	; "PATH="
  8269 00001CC4 F3A6                            repe    cmpsb
  8270 00001CC6 7407                            je	short got_path
  8271 00001CC8 B90001                          mov	cx,256
  8272 00001CCB F2AE                            repne   scasb                           ; find next NULL
  8273 00001CCD EBEB                            jmp     short comp_path
  8274                                  
  8275                                  got_path:
  8276 00001CCF C606[8D1E]00                    mov	byte [PathString],0		; don't add it
  8277                                  
  8278                                  _find_prompt:
  8279 00001CD4 29FF                            sub     di,di
  8280                                  comp_prompt:
  8281 00001CD6 AE                      	scasb                                   ; end of env?
  8282 00001CD7 7417                    	je	short find_comspec		; yes
  8283 00001CD9 4F                      	dec     di
  8284 00001CDA B90700                  	mov     cx,PrmptStrLen2	; mov cx,7
  8285                                  	;mov	si,offset RESGROUP:PrmptString
  8286 00001CDD BE[A31E]                	mov	si,PrmptString	; "PROMPT=$P$G"   
  8287 00001CE0 F3A6                            repe    cmpsb
  8288 00001CE2 7407                            je	short got_prompt
  8289 00001CE4 B90001                          mov     cx,256
  8290 00001CE7 F2AE                            repne   scasb                           ; find next NULL
  8291 00001CE9 EBEB                            jmp	short comp_prompt
  8292                                  
  8293                                  got_prompt:
  8294 00001CEB C606[A31E]00            	mov	byte [PrmptString],0		; don't add it
  8295                                  
  8296                                  find_comspec:
  8297 00001CF0 29FF                            sub     di,di
  8298                                  comp_comspec:
  8299 00001CF2 AE                              scasb                                   ; end of env?
  8300 00001CF3 7423                            je	short got_envend		; yes
  8301 00001CF5 4F                              dec     di
  8302 00001CF6 B90800                          mov	cx,ComspStrLen	; mov cx,8
  8303                                  	;mov	si,offset RESGROUP:ComspString
  8304 00001CF9 BE[B11E]                	mov	si,ComspString	; "COMSPEC=\COMMAND.COM"
  8305 00001CFC F3A6                            repe    cmpsb
  8306 00001CFE 7407                            je	short got_comspec
  8307 00001D00 B90001                          mov     cx,256
  8308 00001D03 F2AE                            repne   scasb                           ; find next NULL
  8309 00001D05 EBEB                            jmp	short comp_comspec
  8310                                  
  8311                                  got_comspec:
  8312 00001D07 893E[AF1E]                      mov     [ComspOffset],di
  8313                                  
  8314                                  find_envend:
  8315 00001D0B 29FF                            sub     di,di
  8316 00001D0D B90080                          mov     cx,ENVBIG	; 32768		; max env size
  8317                                  comp_envend:
  8318 00001D10 49                              dec     cx                              ;
  8319 00001D11 AE                              scasb                                   ; end of env?
  8320 00001D12 7404                            je	short got_envend		; yes
  8321 00001D14 F2AE                            repne   scasb
  8322 00001D16 EBF8                            jmp	short comp_envend
  8323                                  
  8324                                  got_envend:
  8325 00001D18 4F                              dec     di
  8326                                  	; 07/06/2023
  8327 00001D19 8D9DB400                	lea     bx,[di+ENVIRONSIZ]		; add room for the basics
  8328                                  
  8329                                  ;   We want to fall through to alloc_new and set up default
  8330                                  ;   path and prompt ONLY IF this is the first process;  in all other
  8331                                  ;   cases, we assume it is a bad idea to try editing the user's environment
  8332                                  
  8333 00001D1D 1E                              push    ds
  8334                                          ;mov	ds,ds:[PDB_Parent_Pid]
  8335 00001D1E 8E1E1600                        mov	ds,[PDB.PARENT_PID]
  8336                                  	;cmp	ds:[PDB_Parent_Pid],0           ; is parent's parent pid field 0?
  8337 00001D22 833E160000              	cmp	word [PDB.PARENT_PID],0
  8338 00001D27 1F                      	pop     ds
  8339 00001D28 7504                            jne	short alloc_seg			; no, we're not the first process
  8340                                                                                  ; so don't muck with the env.
  8341                                  alloc_new:
  8342 00001D2A FE06[8C1E]              	inc	byte [AllocedEnv]		; note we have virgin env.
  8343                                  
  8344                                  alloc_seg:
  8345                                  
  8346                                  ; Allocate default environment size
  8347                                  
  8348 00001D2E 89D9                            mov     cx,bx                           ; save byte-granular size in CX
  8349 00001D30 83C30F                          add     bx,15
  8350 00001D33 D1EB                            shr     bx,1
  8351 00001D35 D1EB                            shr     bx,1
  8352 00001D37 D1EB                            shr     bx,1
  8353 00001D39 D1EB                            shr     bx,1                            ; BX = # paras
  8354 00001D3B B448                    	mov	ah,ALLOC ; 48h
  8355 00001D3D CD21                    	int	21h
  8356 00001D3F 7303                            jnc	short init_ok
  8357 00001D41 E9B100                          jmp     init_nomem                      ; insufficient memory, error
  8358                                  
  8359                                  ; If a previous environment existed (ie, DI != 0), then copy it into
  8360                                  ; the new buffer
  8361                                  
  8362                                  init_ok:
  8363 00001D44 8EC0                    	mov	es,ax
  8364                                  	;assume	es:nothing                      ; es = temp env segment
  8365                                  
  8366 00001D46 09FF                    	or      di,di
  8367 00001D48 7412                            jz	short copy_path
  8368                                  
  8369 00001D4A 51                              push    cx
  8370 00001D4B 1E                              push    ds
  8371 00001D4C 8E1E[DC03]                      mov     ds,[EnvirSeg]
  8372                                          ;assume ds:nothing
  8373 00001D50 29F6                            sub     si,si
  8374 00001D52 89F9                            mov     cx,di
  8375 00001D54 29FF                            sub     di,di
  8376 00001D56 F3A4                            rep     movsb
  8377 00001D58 1F                              pop     ds
  8378                                          ;assume ds:RESGROUP
  8379 00001D59 59                              pop     cx
  8380 00001D5A 29F9                            sub     cx,di
  8381                                  
  8382                                  copy_path:
  8383                                  
  8384                                  ; First clear out (the rest of) the buffer
  8385                                  
  8386 00001D5C 57                              push    di
  8387 00001D5D 29C0                            sub     ax,ax
  8388 00001D5F F3AA                            rep     stosb
  8389 00001D61 5F                              pop     di
  8390                                  
  8391                                  ; Initialize the path string (PATH=) first
  8392                                  
  8393                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8394 00001D62 BE[8D1E]                	mov	si,PathString
  8395 00001D65 3804                            cmp     byte [si],al			; add it?
  8396 00001D67 7450                            je	short init_prompt		; no
  8397                                  	;mov	cx,PathStrLen+1                 ;
  8398 00001D69 B90600                  	mov	cx,6 ; db "PATH=",0
  8399 00001D6C F3A4                            rep     movsb                           ;
  8400 00001D6E 3806[8C1E]                      cmp     [AllocedEnv],al			; virgin env?
  8401 00001D72 7445                            je	short init_prompt		; no
  8402                                  
  8403                                  ; Establish a more reasonable default for the PATH
  8404                                  
  8405                                  	;mov	ah,GET_DEFAULT_DRIVE
  8406 00001D74 B419                    	mov	ah,19h
  8407 00001D76 CD21                    	int	21h
  8408 00001D78 0441                            add     al,'A'                          ; convert to letter
  8409 00001D7A A2[931E]                        mov     [DefPathString],al              ;
  8410 00001D7D A2[9C1E]                        mov     [DefPath2String],al             ; now our default paths are complete
  8411                                  
  8412 00001D80 B200                            mov     dl,0                            ; get dir for default drive
  8413 00001D82 1E                              push    ds                              ;
  8414 00001D83 06                              push    es                              ;
  8415 00001D84 1F                              pop     ds                              ;
  8416 00001D85 C6055C                          mov     byte [di],'\'			;
  8417 00001D88 8D7501                          lea     si,[di+1]                       ; set DS:SI -> available space
  8418                                  	;mov	ah,Current_Dir                  ;
  8419 00001D8B B447                            mov	ah,47h
  8420 00001D8D CD21                    	int     21h                             ;
  8421 00001D8F 1F                              pop     ds                              ;
  8422                                  
  8423                                  	;mov	cx,DefPathStrLen+1              ;
  8424 00001D90 B90900                  	mov	cx,9 ; db "C:\MSDOS",0
  8425                                  	;mov	dx,offset RESGROUP:DefPathString
  8426 00001D93 BA[931E]                	mov	dx,DefPathString	; "C:\MSDOS"
  8427 00001D96 89D6                    	mov	si,dx                           ;
  8428                                          ;mov	ah,CHDir                        ;
  8429 00001D98 B43B                            mov	ah,3Bh
  8430 00001D9A CD21                    	int     21h                             ;
  8431 00001D9C 730E                            jnc	short init_setpath		; DefPathString exists!
  8432                                  
  8433                                  	;mov	cx,DefPath2StrLen+1		;
  8434 00001D9E B90700                          mov	cx,7 ; db "C:\DOS",0
  8435                                  	;mov	dx,offset RESGROUP:DefPath2String
  8436 00001DA1 BA[9C1E]                	mov	dx,DefPath2String	; "C:\DOS"
  8437 00001DA4 89D6                            mov     si,dx                           ;
  8438                                          ;mov	ah,CHDir                        ;
  8439 00001DA6 B43B                            mov	ah,3Bh
  8440 00001DA8 CD21                            int     21h                             ;
  8441 00001DAA 720D                            jc	short init_prompt		; DefPath2String doesn't exist
  8442                                  
  8443                                  init_setpath:
  8444 00001DAC 89FA                            mov     dx,di                           ; success
  8445 00001DAE 1E                              push    ds                              ; so restore prev dir
  8446 00001DAF 06                              push    es                              ;
  8447 00001DB0 1F                              pop     ds                              ; DS:DX -> prev dir
  8448                                          ;mov	ah,CHDir                        ;
  8449 00001DB1 B43B                            mov	ah,3Bh			
  8450 00001DB3 CD21                            int     21h                             ;
  8451 00001DB5 1F                              pop     ds                              ;
  8452                                  
  8453 00001DB6 4F                              dec     di                              ; then copy in DefPathString
  8454 00001DB7 F3A4                            rep     movsb                           ; DS:SI -> "C:\\DOS\0"
  8455                                  
  8456                                  ; Initialize the default prompt
  8457                                  
  8458                                  init_prompt:
  8459 00001DB9 57                              push    di                              ;
  8460 00001DBA 29C0                            sub     ax,ax                           ;
  8461 00001DBC B94000                          mov     cx,64                           ; insure any data read in
  8462 00001DBF F3AA                            rep     stosb                           ; from Current_Dir is zapped
  8463 00001DC1 5F                              pop     di                              ;
  8464                                  
  8465 00001DC2 3806[8C1E]              	cmp	[AllocedEnv],al			; virgin env?
  8466 00001DC6 740B                            je	short init_comspec		; no
  8467                                          ;mov	si,offset RESGROUP:PrmptString  ; DS:SI -> "PROMPT=$P$G\0"
  8468 00001DC8 BE[A31E]                        mov	si,PrmptString
  8469 00001DCB 3804                    	cmp     [si],al				; add it?
  8470 00001DCD 7404                            je      short init_comspec		; no
  8471                                  	;mov	cx,PrmptStrLen+1                ;
  8472 00001DCF B10C                            mov	cl,12  ; db "PROMPT=$P$G",0
  8473 00001DD1 F3A4                    	rep     movsb                           ;
  8474                                  
  8475                                  ; Initialize the Comspec string
  8476                                  
  8477                                  init_comspec:
  8478 00001DD3 3906[AF1E]                      cmp	[ComspOffset],ax		; add it?
  8479 00001DD7 750E                            jne	short init_done			; no
  8480                                          ;lea	ax,[di+8]
  8481 00001DD9 8D4508                  	lea     ax,[di+ComspStrLen]             ;
  8482 00001DDC A3[AF1E]                        mov	[ComspOffset],ax		;
  8483                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8484 00001DDF BE[B11E]                        mov	si,ComspString
  8485                                  	;mov	cx,ComspStrLen2+1               ;
  8486 00001DE2 B91500                          mov	cx,21 ; db "COMSPEC=\COMMAND.COM",0
  8487 00001DE5 F3A4                    	rep     movsb                           ;
  8488                                  
  8489                                  init_done:
  8490 00001DE7 8CC0                            mov     ax,es                           ; return env seg in ax
  8491 00001DE9 A3[DC03]                        mov     [EnvirSeg],ax			; save env seg
  8492 00001DEC FE06[8C1E]                      inc	byte [AllocedEnv]		; remember that *we* alloced it
  8493                                  %endif
  8494                                  
  8495                                  ; 07/06/2023
  8496                                  ; 29/01/2023 - MSDOS 5.0 COMMAND.COM (RESGROUP:1DC4h)
  8497                                  ;%if 1
  8498                                  %if 0
  8499                                  	;mov	bx,10
  8500                                  	mov	bx,ENVIRONSIZ>>4 ; 160/16
  8501                                  	mov	ah,48h
  8502                                  	int	21h    	; DOS - 2+ - ALLOCATE MEMORY
  8503                                  			; BX = number of 16-byte paragraphs desired
  8504                                  	jc	short init_nomem
  8505                                  
  8506                                  init_ok:
  8507                                  	mov	es,ax
  8508                                  	;assume	es:nothing                      ; es = temp env segment
  8509                                  
  8510                                  	xor	di,di
  8511                                  	mov	ax,di
  8512                                  	;mov	cx,160	
  8513                                          mov     cx,ENVIRONSIZ
  8514                                          rep	stosb
  8515                                  
  8516                                  init_pathstr:
  8517                                  
  8518                                  ; Initialize the path string (PATH=) first
  8519                                  
  8520                                  	push	ss
  8521                                  	pop	ds
  8522                                  
  8523                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8524                                  	mov	si,PathString
  8525                                  	mov	di,0
  8526                                  init_cp_pathstr:
  8527                                  	lodsb
  8528                                  	stosb
  8529                                  	or	al,al
  8530                                  	jnz	short init_cp_pathstr
  8531                                  
  8532                                  ; Initialize the Comspec string
  8533                                  
  8534                                  init_comspec:
  8535                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8536                                          mov	si,ComspString
  8537                                  	; 05/05/2023
  8538                                  	mov	di,6
  8539                                  init_cp_compstr:
  8540                                  	lodsb
  8541                                  	stosb
  8542                                  	or	al,al
  8543                                  	jnz	short init_cp_compstr
  8544                                  
  8545                                  init_done:
  8546                                          mov     ax,es                           ; return env seg in ax
  8547                                          ;mov	[EnvirSeg],ax			; save env seg
  8548                                          ;inc	byte [AllocedEnv]		; remember that *we* alloced it
  8549                                  %endif	
  8550                                  
  8551                                  	; 29/01/2023
  8552                                  alloc_done:
  8553 00001DF0 5F                      	pop	di
  8554 00001DF1 5E                      	pop	si
  8555 00001DF2 07                      	pop	es
  8556 00001DF3 1F                              pop     ds
  8557                                  	;assume	ds:nothing
  8558 00001DF4 C3                      	retn
  8559                                  
  8560                                  	; 29/01/2023
  8561                                  init_nomem:
  8562                                  
  8563                                  ;We call the error routine from here. This routine never returns. It either
  8564                                  ;terminates COMMAND with error( if it is not the first invocation ) or hangs
  8565                                  ;the system ( if it is the first COMMAND.COM ).
  8566                                  
  8567 00001DF5 E80000                  	call	Alloc_error
  8568                                  
  8569                                  ;Alloc_env	endp
  8570                                  
  8571                                  ;*** Alloc_error: This routine just jumps to the actual label where we 
  8572                                  ; check if this is a permanent or secondary command.com and take the 
  8573                                  ; appropriate action.
  8574                                  ;
  8575                                  ;	ENTRY:	ds = RESGROUP = DATARES
  8576                                  ;
  8577                                  ;	EXIT:	None - does not return
  8578                                  ;
  8579                                  ;	REGISTERS AFFECTED: Does not matter
  8580                                  ;
  8581                                  
  8582                                  ;public Alloc_error
  8583                                  Alloc_error:	;proc	near
  8584                                  
  8585                                  	;jmp	RESGROUP:BadMemErr
  8586                                  	; 29/01/2023
  8587 00001DF8 E9CDEF                  	jmp	BadMemErr	
  8588                                  	
  8589                                  ;Alloc_error	endp
  8590                                  
  8591                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8592                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1DFFh
  8593                                  
  8594                                  	; MSDOS 6.0
  8595                                  ;*** Patch_stub -- This routine patches in the segment and offset values in
  8596                                  ; the stub table of the various entry points in the resident code segment.
  8597                                  ; Some of them are interrupt entry points and some of them are entries from
  8598                                  ; the transient to the resident code segment.
  8599                                  ;
  8600                                  ;	ENTRY:	ds = RESGROUP
  8601                                  ;		es:di = segment:offset of final location of resident code
  8602                                  ;
  8603                                  ;	EXIT:	All segments and offsets patched into the stub table
  8604                                  ;
  8605                                  ;	REGISTERS AFFECTED: ax, bx, cx, dx, si, di
  8606                                  
  8607                                  patch_stub:	;proc near
  8608                                  	;assume	ds:RESGROUP
  8609                                  	
  8610 00001DFB 06                      	push	es
  8611                                  
  8612 00001DFC 8CC3                    	mov	bx,es			;bx = resident code segment
  8613 00001DFE 89FA                    	mov	dx,di
  8614                                  	;mov	di,offset DATARES:Int2f_Entry
  8615 00001E00 BF[0400]                	mov	di,Int2f_Entry
  8616                                  	;mov	si,offset RESGROUP:Reloc_Table
  8617 00001E03 BE[FA23]                	mov	si,Reloc_Table
  8618 00001E06 1E                      	push	ds
  8619 00001E07 07                      	pop	es			;es = RESGROUP = DATARES
  8620                                  
  8621                                  ;bx:dx = segment:offset of resident code segment
  8622                                  ;es:di = entry point table in stub
  8623                                  ;ds:si = offset table in INIT segment -- offsets of code entry points now
  8624                                  
  8625                                  	;mov	cx,NUM_RELOC_ENTRIES	;number of entry points
  8626 00001E08 B90B00                  	mov	cx,11 ; MSDOS 5.0 COMMAND.COM
  8627                                  patchlp:
  8628 00001E0B AD                      	lodsw				;get current offset
  8629 00001E0C 01D0                    	add	ax,dx			;offset it by code seg location 
  8630 00001E0E AB                      	stosw				;store offset
  8631 00001E0F 89D8                    	mov	ax,bx			
  8632 00001E11 AB                      	stosw				;store segment 
  8633 00001E12 E2F7                    	loop	patchlp
  8634                                  
  8635 00001E14 07                      	pop	es
  8636 00001E15 C3                      	retn
  8637                                  
  8638                                  ;Patch_stub	endp
  8639                                  
  8640                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8641                                  
  8642                                  	; MSDOS 6.0
  8643                                  ;*** Patch_segs -- This routine patches the segment values in the dword 
  8644                                  ; pointers that the stub uses to jump to the actual handler. These values 
  8645                                  ; are temporarily needed to handle these interrupts if they occur before
  8646                                  ; the resident is relocated to its final position and all the addresses of
  8647                                  ; the handlers have been updated.
  8648                                  ;
  8649                                  ;	ENTRY:	es = PSP segment = code segment
  8650                                  ;
  8651                                  ;	EXIT:	Current segment values patched into the jump table in the
  8652                                  ;		stub.
  8653                                  ;
  8654                                  ;	REGISTERS AFFECTED: ax, cx, di
  8655                                  
  8656                                  patch_segs:	;proc near
  8657                                  
  8658                                  	;mov	di,offset RESGROUP:Int2f_Entry
  8659 00001E16 BF[0400]                	mov	di,Int2f_Entry 
  8660 00001E19 B90400                  	mov	cx,4			;we have to patch 4 handlers
  8661 00001E1C 83C702                  	add	di,2
  8662 00001E1F 8CC0                    	mov	ax,es
  8663                                  pseglp:
  8664 00001E21 AB                      	stosw				;store the segment value
  8665 00001E22 83C702                  	add	di,2			;skip the next offset value
  8666 00001E25 E2FA                    	loop	pseglp
  8667                                  
  8668 00001E27 C3                      	retn
  8669                                  
  8670                                  ;Patch_segs	endp
  8671                                  
  8672                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8673                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E2Ch
  8674                                  
  8675                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8676                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:20D8h
  8677                                  
  8678                                  	; MSDOS 6.0
  8679                                  ;*** get_XMMAddr -- This routine gets the call address for the XMM driver
  8680                                  ; by issuing the appropriate int 2fh. This is stored in a stub variable 
  8681                                  ; and is used by the stub when we have to jump to the resident in HMA
  8682                                  ;
  8683                                  ;	ENTRY:	ds = RESGROUP
  8684                                  ;
  8685                                  ;	EXIT:	XMMCallAddr = XMM driver far call address
  8686                                  ;
  8687                                  ;	REGISTERS AFFECTED:
  8688                                  ;
  8689                                  
  8690                                  get_XMMAddr:	;proc near
  8691                                  	;assume	ds:RESGROUP
  8692                                  
  8693 00001E28 06                      	push	es
  8694                                  
  8695                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK
  8696 00001E29 B80043                  	mov	ax,4300h
  8697 00001E2C CD2F                    	int	2Fh
  8698                                  		; - Multiplex - XMS - INSTALLATION CHECK
  8699                                  		; Return: AL = 80h XMS driver installed
  8700                                  		; AL <> 80h no driver
  8701 00001E2E 3C80                    	cmp	al,80h			; Q: installed
  8702 00001E30 750D                    	jne	short cXMMexit		; N: set error, quit
  8703                                  ;
  8704                                  ; get the XMM control functions entry point, save it, we
  8705                                  ; need to call it later.
  8706                                  ;
  8707                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR
  8708 00001E32 B81043                  	mov	ax,4310h
  8709 00001E35 CD2F                    	int	2Fh
  8710                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
  8711                                  		; Return: ES:BX -> driver entry point
  8712                                  
  8713 00001E37 891E[3000]              	mov	[XMMCallAddr], bx
  8714 00001E3B 8C06[3200]              	mov	[XMMCallAddr+2],es
  8715                                  cXMMexit:
  8716 00001E3F 07                      	pop	es
  8717 00001E40 C3                      	retn				; done
  8718                                  
  8719                                  ;get_XMMAddr	endp
  8720                                  
  8721                                  ;=============================================================================
  8722                                  ; UNINIT.ASM, MSDOS 6.0, 1991
  8723                                  ;=============================================================================
  8724                                  ; 24/09/2018 - Retro DOS v3.0
  8725                                  
  8726                                  ; (30/04/2018 - Retro DOS v2.0, MSDOS 2.11 COMMAND.COM)
  8727                                  
  8728                                  ; TITLE	COMMAND Initialization messages
  8729                                  
  8730                                  ;INIT	SEGMENT PUBLIC PARA
  8731                                  
  8732                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8733                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8734                                  
  8735                                  	; 25/09/2018
  8736                                  	; (15 bytes filler)
  8737 00001E41 00                      	db 0
  8738                                  	;db "25/9/2018 ETAN"
  8739                                  	; 30/01/2023
  8740                                  	;db "30/1/2023 ETAN"	
  8741                                  	; 19/06/2023
  8742 00001E42 31392F362F32303233-     	db "19/6/2023 ETAN"	
  8742 00001E4B 204554414E         
  8743 00001E50 00                      	db 0
  8744                                  
  8745                                  ; 30/01/2023
  8746                                  %if 0
  8747                                  	; MSDOS 3.3 COMMAND.COM - offset 145Eh
  8748                                  	;dw 0
  8749                                  COPYRIGHTMSG:	; MSDOS 3.3 COMMAND.COM - offset 1460h
  8750                                  	db 0Dh,0Ah
  8751                                  	db 0Dh,0Ah
  8752                                  	db 'Microsoft(R) MS-DOS(R)  Version 3.30'
  8753                                  	db 0Dh,0Ah
  8754                                  	db '             (C)Copyright Microsoft Corp 1981-1987               '
  8755                                  	db ' ',0Dh,0Ah
  8756                                  	db '                                                   ',
  8757                                  	db 0Dh,0Ah,0
  8758                                  
  8759                                  	times	43 db 20h
  8760                                  
  8761                                  _152Fh:	db 'Specified COMMAND search directory bad',0Dh,0Ah,0
  8762                                  BADCOMLKMES:
  8763                                  	dw _152Fh
  8764                                  
  8765                                  _155Ah:	db 'Specified COMMAND search directory bad access denied',0Dh,0Ah,0
  8766                                  BADCOMACCMSG:
  8767                                  	dw _155Ah
  8768                                  
  8769                                  _1593h:	db 'Access denied',0Dh,0Ah,0
  8770                                  ACCDENERR:
  8771                                  	dw _1593h
  8772                                  
  8773                                  _15A5h:	db 'Out of environment space',0Dh,0Ah,0
  8774                                  OUTENVMSG:
  8775                                  	dw _15A5h
  8776                                  
  8777                                  BADVERMSG:
  8778                                  	db 'Incorrect DOS version',0Dh,0Ah,'$'
  8779                                  
  8780                                  BADENVSIZMSG:
  8781                                  	db 'Invalid environment size specified',0Dh,0Ah,'$'
  8782                                  
  8783                                  HEADERPTR:
  8784                                  	dw COPYRIGHTMSG
  8785                                  %endif
  8786                                  
  8787                                  ; 30/01/2023
  8788                                  ;align 16
  8789                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8790                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E50h 
  8791                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8792                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:2100h 
  8793                                  ICONDEV:
  8794 00001E51 2F4445562F                      db '/DEV/'
  8795 00001E56 434F4E000000000000      	db 'CON',0,0,0,0,0,0	; Room for 8 char device	
  8796                                  BADCSPFL:
  8797 00001E5F 00                      	db 0
  8798                                  COMSPECT:
  8799 00001E60 5C434F4D4D414E442E-     	db '\COMMAND.COM',0
  8799 00001E69 434F4D00           
  8800 00001E6D 00                      	db 0
  8801                                  AUTOBAT:
  8802 00001E6E 003A5C4155544F4558-     	db 0,':\AUTOEXEC.BAT',0,0Dh
  8802 00001E77 45432E424154000D   
  8803                                  
  8804                                  ; 22/07/2024
  8805                                  ; 07/06/2023
  8806                                  ;KAUTOBAT:
  8807                                  ;	db 0,':\KAUTOEXEC.BAT',0,0Dh
  8808                                   
  8809                                  PRDATTM:
  8810 00001E7F FF                      	db -1 ; 0FFh		; Init not to prompt for date time
  8811                                  INITADD:
  8812 00001E80 00000000                	dd 0
  8813                                  print_add:
  8814 00001E84 [1B55]                  	dw Printf_Init
  8815 00001E86 0000                    	dw 0
  8816                                  triage_add:
  8817 00001E88 [F531]                  	dw Triage_Init
  8818 00001E8A 0000                    	dw 0
  8819                                  ;CHUCKENV:
  8820                                  AllocedEnv:
  8821 00001E8C 00                      	db 0
  8822                                  
  8823                                  ; 30/01/2023 - MSDOS 3.3
  8824                                  ;COMSPOFFSET:
  8825                                  ;ECOMLOC:
  8826                                  ;	;dw 0Eh
  8827                                  ;	;dw offset ENVIRONMENT:ECOMSPEC-10h
  8828                                  ;	dw ECOMSPEC-ENVIRONMENT ; 30/04/2018	
  8829                                  ;COMSPSTRING:
  8830                                  ;	db 'COMSPEC='
  8831                                  
  8832                                  ; 30/01/2023 - MSDOS 5.0 & MSDOS 6.0
  8833                                  PathString:
  8834 00001E8D 504154483D00            	db 'PATH=',0
  8835                                  PathStrLen equ $-PathString-1
  8836                                  ;;;
  8837                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8838                                  ; MSDOS 6.0
  8839                                  DefPathString:
  8840 00001E93 433A5C4D53444F5300      	db 'C:\MSDOS',0
  8841                                  DefPathStrLen equ $-DefPathString-1
  8842                                  DefPath2String:
  8843 00001E9C 433A5C444F5300          	db 'C:\DOS',0
  8844                                  DefPath2StrLen equ $-DefPath2String-1
  8845                                  
  8846                                  PrmptString:
  8847 00001EA3 50524F4D50543D2450-     	db 'PROMPT=$P$G',0
  8847 00001EAC 244700             
  8848                                  PrmptStrLen equ $-PrmptString-1
  8849                                  PrmptStrLen2 equ 7		; length of PROMPT=
  8850                                  ComspOffset:
  8851 00001EAF 0000                    	dw 0
  8852                                  ;;;
  8853                                  ComspString:
  8854 00001EB1 434F4D535045433D5C-     	db 'COMSPEC=\COMMAND.COM',0
  8854 00001EBA 434F4D4D414E442E43-
  8854 00001EC3 4F4D00             
  8855                                  ComspStrLen equ 8		; length of COMSPEC=
  8856                                  ComspStrLen2 equ $-ComspString-1
  8857                                  				; length of full COMSPEC
  8858                                  	; 29/01/2023
  8859                                  ;equal_sign:
  8860                                  ;equalsign:
  8861                                  ;	db '='
  8862                                  ;letter_a:
  8863                                  ;lcasea:
  8864                                  ;	db 'a'
  8865                                  ;letter_z:
  8866                                  ;lcasez:
  8867                                  ;	db 'z'
  8868                                  	; 30/01/2023
  8869                                  ;;slash_chr:
  8870                                  ;;	db '/'
  8871                                  ;;bslash_chr:
  8872                                  ;;	db '\'
  8873                                  ;space_chr:
  8874                                  ;;space:
  8875                                  ;	db 20h
  8876                                  ;;letter_p:
  8877                                  ;;	db 'p'
  8878                                  ;;letter_d:
  8879                                  ;;	db 'd'
  8880                                  ;;letter_c:
  8881                                  ;;	db 'c'
  8882                                  	; 16/04/2023
  8883                                  ; MSDOS 5.0 & MSDOS 6.0
  8884                                  ;scswitch:
  8885                                  ;	db 'C'		; Single command
  8886                                  ;;skswitch:
  8887                                  ;	db 'K' ; MSDOS 6.0
  8888                                  ;;letter_A:
  8889                                  ;ucasea: ; 21/01/2023 
  8890                                  ;	db 'A'
  8891                                  
  8892                                  	; 30/01/2023
  8893                                  EnvSiz:
  8894 00001EC6 0000                    	dw 0		; size user wants to allocate
  8895                                  EnvMax:
  8896 00001EC8 0000                    	dw 0		; maximum size allowed
  8897                                  OldEnv:
  8898 00001ECA 0000                    	dw 0		; envirseg at initialization
  8899                                  UsedEnv:
  8900 00001ECC 0000                    	dw 0		; amount of envirseg used
  8901                                  	; MSDOS 5.0 & MSDOS 6.0
  8902                                  PARS_MSG_OFF:
  8903 00001ECE 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE OFFSET
  8904                                  PARS_MSG_SEG:
  8905 00001ED0 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE SEGMENT
  8906                                  
  8907                                  ;Do not separate the following two words. Used to call transient PARSE routine
  8908                                  
  8909                                  Init_Parse:
  8910                                  	;dw 4FFBh	; MSDOS 5.0 COMMAND.COM (TRANGROUP:APPEND_PARSE)
  8911                                  init_p:
  8912 00001ED2 [1755]                  	dw append_parse
  8913                                  initend:
  8914 00001ED4 0000                    	dw 0		; segment address of end of init
  8915                                  TrnSize:
  8916 00001ED6 0000                    	dw 0		; size of transient in paragraphs
  8917                                  
  8918                                  ; 23/07/2024 - Retro DOS v4.2 COMMAND.COM
  8919                                  ;%if 0
  8920                                  resetenv:
  8921                                  	;dw 0		; set if we need to setblck env at endinit
  8922                                  	; 23/07/2024
  8923 00001ED8 00                      	db 0
  8924                                  ;%endif
  8925                                  
  8926                                  ext_msg:
  8927 00001ED9 00                      	db 0		; set if /MSG switch entered
  8928                                  eswitch:
  8929 00001EDA 00                      	db 0		; set if /e was entered
  8930                                  dswitch:
  8931 00001EDB 00                      	db 0		; set if /d was entered
  8932                                  parsemes_ptr:
  8933 00001EDC 0000                    	dw 0		; word to store parse error number
  8934                                  
  8935                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8936                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1ED6h
  8937                                  
  8938                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8939                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:21A5h 
  8940                                  
  8941                                  	; MSDOS 6.0 (UINIT.ASM, 1991)
  8942                                  ;  The following parse control block is used for COMMAND. This block is
  8943                                  ;  used for parsing during initialization. The syntax for COMMAND is:
  8944                                  ;  COMMAND [/?] [d:][path][/P][/F][/D][/E:xxxxx][/MSG][/C executable]
  8945                                  ;
  8946                                  ;  Anything on the command line after the /C switch will be passed to the
  8947                                  ;  executable command, so if /C is used, it must be specified last. The
  8948                                  ;  /MSG switch can only be specified if the /P switch is specified.
  8949                                  ;
  8950                                  ;  The /? switch causes help text to be displayed. Any other options
  8951                                  ;  on the command line are ignored. Command.com will not load if /?
  8952                                  ;  is specified.
  8953                                  
  8954                                  INTERNAT_INFO:		; used for country info after parsing is completed
  8955                                  PARSE_COMMAND:
  8956 00001EDE [E11E]                  	dw COMMAND_PARMS
  8957 00001EE0 00                      	db 0			; no extra delimiter
  8958                                  COMMAND_PARMS:
  8959 00001EE1 0002                    	db 0,2			; 1 positional parm
  8960 00001EE3 [FB1E]                  	dw COMMAND_FILE
  8961 00001EE5 [FB1E]                  	dw COMMAND_FILE
  8962                                          ; MSDOS 5.0
  8963                                  	;db 7			; 7 switches
  8964                                  	; MSDOS 6.0
  8965                                  	;db 8 			; 8 switches
  8966                                  	; 07/06/2023
  8967                                  	; MSDOS 6.22
  8968 00001EE7 09                      	db 9			; 9 switches
  8969 00001EE8 [041F]                  	dw COMMAND_SWITCH1
  8970 00001EEA [101F]                  	dw COMMAND_SWITCH2
  8971 00001EEC [1C1F]                  	dw COMMAND_SWITCH3
  8972 00001EEE [281F]                  	dw COMMAND_SWITCH4
  8973 00001EF0 [411F]                  	dw COMMAND_SWITCH5
  8974 00001EF2 [4D1F]                  	dw COMMAND_SWITCH6
  8975 00001EF4 [5B1F]                  	dw COMMAND_SWITCH7
  8976                                  	; 07/06/2023
  8977 00001EF6 [671F]                  	dw COMMAND_SWITCH8 ; MSDOS 6.0
  8978 00001EF8 [731F]                  	dw COMMAND_SWITCH9 ; MSDOS 6.22
  8979 00001EFA 00                      	db 0			; no keywords
  8980                                  
  8981                                  COMMAND_FILE:
  8982 00001EFB 0102                    	dw 0201h		; filespec - optional
  8983 00001EFD 0100                    	dw 1			; capitalize - file table
  8984 00001EFF [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  8985 00001F01 [871F]                  	dw NO_VAL 		;
  8986 00001F03 00                      	db 0			; no keywords
  8987                                  
  8988                                  COMMAND_SWITCH1:
  8989 00001F04 0000                    	dw 0			; no match flags
  8990 00001F06 0200                    	dw 2			; capitalize by char table
  8991 00001F08 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  8992 00001F0A [871F]                  	dw NO_VAL 		;
  8993 00001F0C 01                      	db 1			; 1 keyword
  8994                                  COMMAND_P_SYN:
  8995 00001F0D 2F5000                  	db '/P',0		; /P switch
  8996                                  
  8997                                  COMMAND_SWITCH2:
  8998 00001F10 0000                    	dw 0			; no match flags
  8999 00001F12 0200                    	dw 2			; capitalize by char table
  9000 00001F14 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9001 00001F16 [871F]                  	dw NO_VAL 		;
  9002 00001F18 01                      	db 1			; 1 keyword
  9003                                  COMMAND_F_SYN:
  9004 00001F19 2F4600                  	db '/F',0		; /F switch
  9005                                  
  9006                                  COMMAND_SWITCH3:
  9007 00001F1C 0000                    	dw 0			; no match flags
  9008 00001F1E 0200                    	dw 2			; capitalize by char table
  9009 00001F20 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9010 00001F22 [871F]                  	dw NO_VAL 		;
  9011 00001F24 01                      	db 1			; 1 keyword
  9012                                  COMMAND_D_SYN:
  9013 00001F25 2F4400                  	db '/D',0		; /D switch
  9014                                  
  9015                                  COMMAND_SWITCH4:
  9016 00001F28 0080                    	dw 8000h		; numeric value - required
  9017 00001F2A 0000                    	dw 0			; no function flags
  9018 00001F2C [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9019 00001F2E [341F]                  	dw COMMAND_E_VAL	; pointer to value list
  9020 00001F30 01                      	db 1			; 1 keyword
  9021                                  COMMAND_E_SYN:
  9022 00001F31 2F4500                  	db '/E',0		; /E switch
  9023                                  
  9024                                  COMMAND_E_VAL:
  9025 00001F34 01                      	db 1			;
  9026 00001F35 01                      	db 1			; 1 range
  9027 00001F36 01                      	db 1			; returned if result
  9028                                  	;dd ENVSML,ENVBIG	; minimum & maximum value
  9029                                  	; MSDOS 5.0 COMMAND.COM
  9030                                  	; (RESGROUP:1F2Bh)
  9031 00001F37 A0000000                	dd 160	 ; ENVSML
  9032 00001F3B 00800000                	dd 32768 ; ENVBIG
  9033 00001F3F 00                      	db 0			; no numeric values
  9034 00001F40 00                      	db 0			; no string values
  9035                                  
  9036                                  COMMAND_SWITCH5:
  9037 00001F41 0000                    	dw 0			; no match flags
  9038 00001F43 0200                    	dw 2			; capitalize by char table
  9039 00001F45 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9040 00001F47 [871F]                  	dw NO_VAL 		;
  9041 00001F49 01                      	db 1			; 1 keyword
  9042                                  COMMAND_C_SYN:
  9043 00001F4A 2F4300                  	db '/C',0		; /C switch
  9044                                  
  9045                                  COMMAND_SWITCH6:
  9046 00001F4D 0000                    	dw 0			; no match flags
  9047 00001F4F 0200                    	dw 2			; capitalize by char table
  9048 00001F51 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9049 00001F53 [871F]                  	dw NO_VAL 		;
  9050 00001F55 01                      	db 1			; 1 keyword
  9051                                  COMMAND_M_SYN:
  9052 00001F56 2F4D534700              	db '/MSG',0		; /MSG switch
  9053                                  
  9054                                  COMMAND_SWITCH7:
  9055 00001F5B 0000                    	dw 0			; no match flags
  9056 00001F5D 0200                    	dw 2			; capitalize by char table
  9057 00001F5F [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9058 00001F61 [871F]                  	dw NO_VAL 		;
  9059 00001F63 01                      	db 1			; 1 keyword
  9060                                  COMMAND_?_SYN:
  9061 00001F64 2F3F00                  	db '/?',0 		; /? switch
  9062                                  
  9063                                  	; 07/06/2023
  9064                                  	; MSDOS 6.0
  9065                                  COMMAND_SWITCH8:
  9066 00001F67 0000                    	dw 0			; no match flags
  9067 00001F69 0200                    	dw 2			; capitalize by char table
  9068 00001F6B [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9069 00001F6D [871F]                  	dw NO_VAL 		;
  9070 00001F6F 01                      	db 1			; 1 keyword
  9071                                  COMMAND_K_SYN:
  9072 00001F70 2F4B00                  	db '/K',0		; /K switch
  9073                                  
  9074                                  	; 07/06/2023
  9075                                  	; MSDOS 6.22
  9076                                  COMMAND_SWITCH9:
  9077 00001F73 0000                    	dw 0			; no match flags
  9078 00001F75 0200                    	dw 2			; capitalize by char table
  9079 00001F77 [7F1F]                  	dw COMND1_OUTPUT	; result buffer
  9080 00001F79 [871F]                  	dw NO_VAL 		;
  9081 00001F7B 01                      	db 1			; 1 keyword
  9082                                  COMMAND_Y_SYN:
  9083 00001F7C 2F5900                  	db '/Y',0		; /Y switch
  9084                                  
  9085                                  COMND1_OUTPUT:
  9086                                  COMND1_TYPE:
  9087 00001F7F 00                      	db 0			; type
  9088                                  COMND1_CODE:
  9089 00001F80 00                      	db 0			; return value
  9090                                  COMND1_SYN:
  9091 00001F81 0000                    	dw 0			; synonym pointer
  9092                                  COMND1_ADDR:
  9093 00001F83 00000000                	dd 0			; numeric value / address
  9094                                  				; of string value
  9095                                  NO_VAL:
  9096 00001F87 00                      	db 0			; no values
  9097                                  num_positionals:
  9098 00001F88 0000                    	dw 0			; counter for positionals
  9099                                  old_parse_ptr:
  9100 00001F8A 0000                    	dw 0			; SI position before calling parser
  9101                                  
  9102                                  	; 30/01/2023
  9103                                  ;***	INITIALIZATION MESSAGES
  9104                                  ;	-------------------------
  9105                                  ;	include	comimsg.inc	;M00
  9106                                  ;-----------------------------------------------------------------------------	
  9107                                  
  9108                                  BADVERMSG:
  9109 00001F8C 17                      	db 23
  9110 00001F8D 496E636F7272656374-     	db 'Incorrect DOS version',0Dh,0Ah
  9110 00001F96 20444F532076657273-
  9110 00001F9F 696F6E0D0A         
  9111                                  OUTENVMSG:
  9112 00001FA4 1A                      	db 26
  9113 00001FA5 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
  9113 00001FAE 7669726F6E6D656E74-
  9113 00001FB7 2073706163650D0A   
  9114                                  
  9115                                  ; 07/06/2023
  9116                                  ;COPYRIGHTMSG:
  9117                                  ;	db 94
  9118                                  ;	db 0Dh,0Ah
  9119                                  ;	db 0Dh,0Ah
  9120                                  ;	db 'Microsoft(R) MS-DOS(R) Version 5.00',0Dh,0Ah
  9121                                  ;	db '             (C)Copyright Microsoft Corp 1981-1991.',0Dh,0Ah
  9122                                  
  9123                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9124                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:2286h
  9125                                  COPYRIGHTMSG:
  9126 00001FBF 5E                      	db 94
  9127 00001FC0 0D0A                    	db 0Dh,0Ah
  9128 00001FC2 0D0A                    	db 0Dh,0Ah
  9129 00001FC4 4D6963726F736F6674-     	db 'Microsoft(R) MS-DOS(R) Version 6.22',0Dh,0Ah
  9129 00001FCD 285229204D532D444F-
  9129 00001FD6 532852292056657273-
  9129 00001FDF 696F6E20362E32320D-
  9129 00001FE8 0A                 
  9130 00001FE9 202020202020202020-     	db '             (C)Copyright Microsoft Corp 1981-1994.',0Dh,0Ah
  9130 00001FF2 20202020284329436F-
  9130 00001FFB 70797269676874204D-
  9130 00002004 6963726F736F667420-
  9130 0000200D 436F72702031393831-
  9130 00002016 2D313939342E0D0A   
  9131                                  
  9132                                  BADCOMLKMES:
  9133 0000201E 28                      	db 40
  9134 0000201F 537065636966696564-     	db 'Specified COMMAND search directory bad',0Dh,0Ah
  9134 00002028 20434F4D4D414E4420-
  9134 00002031 736561726368206469-
  9134 0000203A 726563746F72792062-
  9134 00002043 61640D0A           
  9135                                  	; 07/06/2023
  9136                                  BADCOMACCMSG:
  9137 00002047 37                      	db 55
  9138 00002048 537065636966696564-     	db 'Specified COMMAND search directory bad, access denied',0Dh,0Ah
  9138 00002051 20434F4D4D414E4420-
  9138 0000205A 736561726368206469-
  9138 00002063 726563746F72792062-
  9138 0000206C 61642C206163636573-
  9138 00002075 732064656E6965640D-
  9138 0000207E 0A                 
  9139                                  HELPMSG1:
  9140 0000207F 38                      	db 56
  9141 00002080 537461727473206120-     	db 'Starts a new copy of the MS-DOS command interpreter.',0Dh,0Ah
  9141 00002089 6E657720636F707920-
  9141 00002092 6F6620746865204D53-
  9141 0000209B 2D444F5320636F6D6D-
  9141 000020A4 616E6420696E746572-
  9141 000020AD 7072657465722E0D0A 
  9142 000020B6 0D0A                    	db 0Dh,0Ah
  9143                                  
  9144                                  ;HELPMSG2:
  9145                                  ;	db 70
  9146                                  ;	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P] [/C string] [/MSG]'
  9147                                  ;	db 0Dh,0Ah
  9148                                  ;	db 0Dh,0Ah
  9149                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9150                                  HELPMSG2:
  9151 000020B8 38                      	db 56
  9152 000020B9 434F4D4D414E44205B-     	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P [/MSG]]',0Dh,0Ah
  9152 000020C2 5B64726976653A5D70-
  9152 000020CB 6174685D205B646576-
  9152 000020D4 6963655D205B2F453A-
  9152 000020DD 6E6E6E6E6E5D205B2F-
  9152 000020E6 50205B2F4D53475D5D-
  9152 000020EF 0D0A               
  9153                                  HELPMSG3:
  9154 000020F1 2A                      	db 42
  9155 000020F2 20202020202020205B-     	db '        [/Y [/C command | /K command]]',0Dh,0Ah
  9155 000020FB 2F59205B2F4320636F-
  9155 00002104 6D6D616E64207C202F-
  9155 0000210D 4B20636F6D6D616E64-
  9155 00002116 5D5D0D0A           
  9156 0000211A 0D0A                    	db 0Dh,0Ah
  9157                                  
  9158                                  ;HELPMSG3:
  9159                                  HELPMSG4:
  9160 0000211C 48                              db 72
  9161 0000211D 20205B64726976653A-     	db '  [drive:]path    Specifies the directory containing COMMAND.COM '
  9161 00002126 5D7061746820202020-
  9161 0000212F 537065636966696573-
  9161 00002138 207468652064697265-
  9161 00002141 63746F727920636F6E-
  9161 0000214A 7461696E696E672043-
  9161 00002153 4F4D4D414E442E434F-
  9161 0000215C 4D20               
  9162 0000215E 66696C652E0D0A          	db 'file.',0Dh,0Ah
  9163                                  ;HELPMSG4:
  9164                                  HELPMSG5:
  9165 00002165 4D                      	db 77
  9166 00002166 202064657669636520-     	db '  device          Specifies the device to use for command input and '
  9166 0000216F 202020202020202020-
  9166 00002178 537065636966696573-
  9166 00002181 207468652064657669-
  9166 0000218A 636520746F20757365-
  9166 00002193 20666F7220636F6D6D-
  9166 0000219C 616E6420696E707574-
  9166 000021A5 20616E6420         
  9167 000021AA 6F75747075742E0D0A      	db 'output.',0Dh,0Ah
  9168                                  ;HELPMSG5:
  9169                                  HELPMSG6:
  9170 000021B3 45                      	db 69
  9171 000021B4 20202F453A6E6E6E6E-     	db '  /E:nnnnn        Sets the initial environment size to nnnnn bytes.'
  9171 000021BD 6E2020202020202020-
  9171 000021C6 536574732074686520-
  9171 000021CF 696E697469616C2065-
  9171 000021D8 6E7669726F6E6D656E-
  9171 000021E1 742073697A6520746F-
  9171 000021EA 206E6E6E6E6E206279-
  9171 000021F3 7465732E           
  9172 000021F7 0D0A                    	db 0Dh,0Ah
  9173                                  ;HELPMSG6:
  9174                                  HELPMSG7:
  9175 000021F9 4D                      	db 77
  9176 000021FA 20202F502020202020-     	db '  /P              Makes the new Command Interpreter permanent '
  9176 00002203 202020202020202020-
  9176 0000220C 4D616B657320746865-
  9176 00002215 206E657720436F6D6D-
  9176 0000221E 616E6420496E746572-
  9176 00002227 707265746572207065-
  9176 00002230 726D616E656E7420   
  9177 00002238 2863616E2774206578-     	db '(can',27h,'t exit).',0Dh,0Ah
  9177 00002241 6974292E0D0A       
  9178                                  ;HELPMSG7:
  9179                                  HELPMSG8:
  9180                                  	;db 80
  9181                                  	;db '  /C string       Carries out the command specified by string, and '
  9182                                  	;db 'then stops.',0Dh,0Ah
  9183                                  	; 07/06/2023
  9184 00002247 46                      	db 70
  9185 00002248 20202F4D5347202020-     	db '  /MSG            Stores all error messages in memory (requires /P).'
  9185 00002251 202020202020202020-
  9185 0000225A 53746F72657320616C-
  9185 00002263 6C206572726F72206D-
  9185 0000226C 657373616765732069-
  9185 00002275 6E206D656D6F727920-
  9185 0000227E 287265717569726573-
  9185 00002287 202F50292E         
  9186 0000228C 0D0A                    	db 0Dh,0Ah
  9187                                  ;HELPMSG8:
  9188                                  HELPMSG9:
  9189                                  	;db 78
  9190                                  	;db '  /MSG            Specifies that all error messages be stored in '
  9191                                  	;db 'memory. You',0Dh,0Ah
  9192                                  ;HELPMSG9:
  9193                                  	;db 56
  9194                                  	;db '                  need to specify /P with this switch.',0Dh,0Ah
  9195 0000228E 4A                      	db 74
  9196 0000228F 20202F592020202020-     	db '  /Y              Steps through the batch program specified by /C'
  9196 00002298 202020202020202020-
  9196 000022A1 537465707320746872-
  9196 000022AA 6F7567682074686520-
  9196 000022B3 62617463682070726F-
  9196 000022BC 6772616D2073706563-
  9196 000022C5 696669656420627920-
  9196 000022CE 2F43               
  9197 000022D0 206F72202F4B2E0D0A      	db ' or /K.',0Dh,0Ah
  9198                                  
  9199                                  	; 07/06/2023
  9200                                  HELPMSG10:
  9201 000022D9 3F                      	db 63
  9202 000022DA 20202F4320636F6D6D-     	db '  /C command      Executes the specified command and returns.',0Dh,0Ah
  9202 000022E3 616E64202020202020-
  9202 000022EC 457865637574657320-
  9202 000022F5 746865207370656369-
  9202 000022FE 6669656420636F6D6D-
  9202 00002307 616E6420616E642072-
  9202 00002310 657475726E732E0D0A 
  9203                                  HELPMSG11:
  9204 00002319 4B                      	db 75
  9205 0000231A 20202F4B20636F6D6D-     	db '  /K command      Executes the specified command and continues running.'
  9205 00002323 616E64202020202020-
  9205 0000232C 457865637574657320-
  9205 00002335 746865207370656369-
  9205 0000233E 6669656420636F6D6D-
  9205 00002347 616E6420616E642063-
  9205 00002350 6F6E74696E75657320-
  9205 00002359 72756E6E696E672E   
  9206 00002361 0D0A                    	db 0Dh,0Ah
  9207 00002363 0D0A                    	db 0Dh,0Ah
  9208                                  HELPMSG12:
  9209 00002365 4C                      	db 76
  9210 00002366 546865202F5020616E-     	db 'The /P and /MSG switches may be used only when COMMAND is started'
  9210 0000236F 64202F4D5347207377-
  9210 00002378 697463686573206D61-
  9210 00002381 792062652075736564-
  9210 0000238A 206F6E6C7920776865-
  9210 00002393 6E20434F4D4D414E44-
  9210 0000239C 206973207374617274-
  9210 000023A5 6564               
  9211 000023A7 206279207573696E67-     	db ' by using',0Dh,0Ah
  9211 000023B0 0D0A               
  9212                                  HELPMSG13:
  9213 000023B2 2B                      	db 43
  9214 000023B3 746865205348454C4C-     	db 'the SHELL command in the CONFIG.SYS file.',0Dh,0Ah
  9214 000023BC 20636F6D6D616E6420-
  9214 000023C5 696E2074686520434F-
  9214 000023CE 4E4649472E53595320-
  9214 000023D7 66696C652E0D0A     
  9215                                  
  9216                                  HelpMsgs:
  9217 000023DE [7F20]                          dw HELPMSG1
  9218 000023E0 [B820]                  	dw HELPMSG2
  9219 000023E2 [F120]                  	dw HELPMSG3
  9220 000023E4 [1C21]                  	dw HELPMSG4
  9221 000023E6 [6521]                  	dw HELPMSG5
  9222 000023E8 [B321]                  	dw HELPMSG6
  9223 000023EA [F921]                  	dw HELPMSG7
  9224 000023EC [4722]                  	dw HELPMSG8
  9225 000023EE [8E22]                  	dw HELPMSG9
  9226                                  
  9227                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9228 000023F0 [D922]                  	dw HELPMSG10
  9229 000023F2 [1923]                  	dw HELPMSG11
  9230 000023F4 [6523]                  	dw HELPMSG12
  9231 000023F6 [B223]                  	dw HELPMSG13
  9232                                  
  9233                                  	; 23/04/2023
  9234 000023F8 0000                    	dw 0
  9235                                  
  9236                                  ;-----------------------------------------------------------------------------
  9237                                  
  9238                                  ;SR;
  9239                                  ; This table of offsets is used by the init code to calculate the new offsets
  9240                                  ;for these labels after the resident code has been relocated
  9241                                  
  9242                                  ;Reloc_Table:
  9243                                  	;dw offset CODERES:MsgInt2fHandler
  9244                                  	;dw offset CODERES:Int_2e
  9245                                  	;dw offset CODERES:ContC
  9246                                  	;dw offset CODERES:DskErr
  9247                                  	;dw offset CODERES:Exec_Ret
  9248                                  	;dw offset CODERES:TRemCheck
  9249                                  	;dw offset CODERES:TrnLodCom1
  9250                                  	;dw offset CODERES:LodCom
  9251                                  	;dw offset CODERES:MsgRetriever
  9252                                  	;dw offset CODERES:THeadFix
  9253                                  	;dw offset CODERES:Lh_OffUnlink	; M003
  9254                                  
  9255                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9256                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:22F6h
  9257                                  
  9258                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9259                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26C1h
  9260                                  
  9261                                  Reloc_Table:			          ; MSDOS 5.0 - 6.22 CODERES address
  9262 000023FA 1807                    	dw MsgInt2fHandler - RCODE_START  ; 738h (RESGROUP:738h+X) *
  9263 000023FC 7401                    	dw Int_2e - RCODE_START		  ; 177h (RESGROUP:177h+X) *	
  9264 000023FE 3300                    	dw ContC - RCODE_START		  ; 035h (RESGROUP:035h+X) *
  9265 00002400 3504                    	dw DSKERR - RCODE_START		  ; 445h (RESGROUP:445h+X) *
  9266 00002402 2700                    	dw Exec_Ret - RCODE_START	  ; 029h (RESGROUP:029h+X) *
  9267 00002404 9802                    	dw TRemCheck - RCODE_START	  ; 2A3h (RESGROUP:2A3h+X) *
  9268 00002406 1204                    	dw TrnLodCom1 - RCODE_START	  ; 422h (RESGROUP:422h+X) *
  9269 00002408 AB01                    	dw LodCom - RCODE_START		  ; 1AEh (RESGROUP:1AEh+X) *
  9270 0000240A 5B07                    	dw MsgRetriever - RCODE_START	  ; 77Bh (RESGROUP:77Bh+X) *
  9271 0000240C B702                    	dw THeadFix - RCODE_START	  ; 2C2h (RESGROUP:2C2h+X) *
  9272 0000240E D407                    	dw Lh_OffUnlink - RCODE_START	  ; 7F4h (RESGROUP:7F4h+X) *
  9273                                  
  9274                                  	; 07/06/2023
  9275                                  	; X = 0D40h for MSDOS 5.0 COMMAND.COM
  9276                                  	; X = 0E50h for MSDOS 6.22 COMMAND.COM
  9277                                  	;; example:
  9278                                  	;;	MsgIn2FHandler is at RESGROUP:1588h or at CODERES:0738h
  9279                                  	;;				(in MSDOS 6.22 COMMAND.COM)
  9280                                  
  9281                                  NUM_RELOC_ENTRIES equ ($-Reloc_Table)/2
  9282                                  
  9283                                  ResJmpTable:
  9284 00002410 00000000                	dd 0			; stores prev stub jump table addr
  9285                                  FirstCom:
  9286 00002414 00                      	db 0			; flag set if first command.com
  9287                                  DevFlag:
  9288 00002415 00                      	db 0
  9289                                  PathFlag:
  9290 00002416 00                      	db 0
  9291                                  
  9292                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:2313h
  9293                                  	;;times 13 db 0
  9294                                  
  9295                                  	; 07/06/2023
  9296                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26DEh
  9297                                  	;times 2 db 0
  9298                                  
  9299                                  ; 30/01/2023
  9300                                  coderes_end equ $
  9301                                  
  9302                                  ;INIT	ENDS
  9303                                  
  9304                                  ;	END
  9305                                  
  9306                                  ;-----------------------------------------------------------------------------
  9307                                  ; 14/10/2018 (Retro DOS v3.0 COMMAND.COM Signature)
  9308                                  ;-----------------------------------------------------------------------------
  9309                                  
  9310                                  ;db	"Retro DOS v3.0 COMMAND.COM by Erdogan Tan [2018]"
  9311                                  	; 30/01/2023
  9312 00002417 00                      db	0
  9313                                  ;db	"Retro DOS v4.0 COMMAND.COM by Erdogan Tan [2023]"		
  9314                                  	; 07/06/2023
  9315                                  ;db	"Retro DOS v4.2 COMMAND.COM by Erdogan Tan [2023]"
  9316 00002418 526574726F20444F53-     db	"Retro DOS v4.2 COMMAND.COM by Erdogan Tan [2024]" ; 21/07/2024
  9316 00002421 2076342E3220434F4D-
  9316 0000242A 4D414E442E434F4D20-
  9316 00002433 6279204572646F6761-
  9316 0000243C 6E2054616E205B3230-
  9316 00002445 32345D             
  9317 00002448 00                      db	0
  9318                                  
  9319                                  ;-----------------------------------------------------------------------------
  9320                                  ; 24/09/2018 (Retro DOS v3.0 COMMAND)
  9321                                  ;-----------------------------------------------------------------------------
  9322                                  
  9323                                  ;TAIL    SEGMENT PUBLIC PARA
  9324                                  ;        ORG     0
  9325                                  ;TRANSTART LABEL WORD
  9326                                  ;TAIL    ENDS
  9327                                  
  9328                                  ;ALIGN 16  ; 25/09/2018
  9329                                  
  9330                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9331                                  
  9332                                  numbertodiv equ ($-StartCode)+100h ; 16/04/2023
  9333                                  numbertomod equ (numbertodiv % 16)
  9334                                  
  9335                                  %if numbertomod>0 & numbertomod<16
  9336 00002449 00<rep 7h>              	times (16-numbertomod) db 0
  9337                                  %endif
  9338                                  
  9339                                  ; 30/01/2023
  9340                                  ;TRANSTART:
  9341                                  
  9342                                  ; 21/04/2018 (Retro DOS v2.0 COMMAND)
  9343                                  ;	times	128 db 0	
  9344                                  
  9345                                  ;-----------------------------------------------------------------------------
  9346                                  ; SEGMENT - TRANSCODE
  9347                                  ;-----------------------------------------------------------------------------
  9348                                  
  9349                                  ;TRANGROUP: ; 21/04/2018
  9350                                  
  9351                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9352                                  ;-----------------------------------------------------------------------------
  9353                                  
  9354                                  ; MSDOS 3.3 COMMAND.COM Transient Portion Addresses
  9355                                  
  9356                                  ; 21/04/2018 - Retro DOS v2.0
  9357                                  ; transcom.s (COMMAND.COM source file 2 of 2) code/data addresses 
  9358                                  ; (these values must be changed when transcom.s source code is changed
  9359                                  ; and data offsets are changed)
  9360                                  ;
  9361                                  ; 30/04/2018
  9362                                  ; 29/04/2018
  9363                                  
  9364                                  ; 24/09/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9365                                  ;COMMAND      EQU  012CH
  9366                                  ;DATINIT      EQU  2091H
  9367                                  ;HEADCALL     EQU  428FH
  9368                                  ;TRANSPACEEND EQU  4D5CH
  9369                                  ;TRANDATAEND  EQU  3F44H
  9370                                  
  9371                                  ; 29/04/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9372                                  ;TRIAGE_INIT  EQU  1F15H
  9373                                  ;PRINTF_INIT  EQU  34E0H 
  9374                                  
  9375                                  ;GETEXTERRNUM EQU  1EEEH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr	
  9376                                  
  9377                                  ;TPA	EQU  4293H
  9378                                  ;TRNLEN	EQU  04D6H
  9379                                  
  9380                                  ; 20/10/2018 - Retro DOS v3.0 COMMAND.COM transient portion addresses
  9381                                  ;COMMAND      EQU  012CH
  9382                                  ;DATINIT      EQU  206FH
  9383                                  ;HEADCALL     EQU  426FH
  9384                                  ; 09/01/2023
  9385                                  ;TRANSPACEEND EQU  4D3CH
  9386                                  ;TRANDATAEND  EQU  3F24H
  9387                                  ;TRIAGE_INIT  EQU  1EF3H
  9388                                  ;PRINTF_INIT  EQU  34BFH 
  9389                                  ;
  9390                                  ;GETEXTERRNUM EQU  1ECCH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr
  9391                                  
  9392                                  ;-----------------------------------------------------------------------------
  9393                                  ; ARENA.INC, MSDOS 6.0, 1991
  9394                                  ;-----------------------------------------------------------------------------
  9395                                  ; 13/10/2018 - Retro DOS 3.0
  9396                                  ; 17/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9397                                  
  9398                                  ;BREAK <Memory arena structure>
  9399                                  
  9400                                  ; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  9401                                  
  9402                                  ; arena item
  9403                                  
  9404                                  struc ARENA
  9405 00000000 ??                        .signature:	resb 1		; 4D for valid item, 5A for last item
  9406 00000001 ????                      .owner:	resw 1		; owner of arena item
  9407 00000003 ????                      .size:	resw 1		; size in paragraphs of item
  9408                                  endstruc
  9409                                  
  9410                                  ;-----------------------------------------------------------------------------
  9411                                  ;START OF TRANSIENT PORTION
  9412                                  ;This code is loaded at the end of memory and may be overwritten by
  9413                                  ;memory-intensive user programs.
  9414                                  ;-----------------------------------------------------------------------------
  9415                                  
  9416                                  ; 16/04/2023
  9417                                  TRANSTART EQU ($-StartCode)+100h ; 18/04/2023
  9418                                  ; 29/09/2018
  9419                                  ; 31/01/2023 
  9420                                  ;TRANSTART:	; Offset 1660h in original MSDOS 3.3 COMMAND.COM
  9421                                  			
  9422                                  		; 09/01/2023
  9423                                  		; Offset 2320h in original MSDOS 5.0 COMMAND.COM
  9424                                  			
  9425                                  		; 07/06/2023
  9426                                  		; Offset 26E0h in original MSDOS 6.22 COMMAND.COM
  9427                                  
  9428                                  ; 25/09/2018
  9429                                  ; (original MSDOS 3.3 COMMAND.COM TRIAGEERROR offset address)
  9430                                  ;
  9431                                  ; 'GET_EXT_ERR_NUMBER' ('TRIAGEERROR') procedure is at offset 354Eh 
  9432                                  ; in MSDOS 3.3 COMMAND.COM (It is at offset 1EEEh in transient porsion).	 	
  9433                                  ;
  9434                                  ;TRIAGEERROR EQU TRANSTART+GETEXTERRNUM-100H
  9435                                  ;
  9436                                  ;
  9437                                  ;COMTRANS:
  9438                                  ;
  9439                                  ; 20/10/2018 - Retro DOS v3.0	
  9440                                  ;INCBIN	"TRANCOM3.BIN"
  9441                                  ;
  9442                                  ;COMLEN	EQU $-COMTRANS ; End of COMMAND load.
  9443                                  ;
  9444                                  ; 29/04/2018
  9445                                  ;BSS_SIZE EQU TRANSPACEEND-TRANDATAEND	
  9446                                  ;
  9447                                  ;TIMES BSS_SIZE db 0
  9448                                  ;
  9449                                  ;COMLEN	EQU $-COMTRANS ; 30/04/2018
  9450                                  
  9451                                  ;COMMANDCOMSIZE equ $ - 100h
  9452                                  
  9453                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9454                                  ; ============================================================================
  9455                                  ; --- ('trancom5.s', 31/01/2023 - modified from 'trancom3.s', 20/10/2018) ----
  9456                                  ; ============================================================================
  9457                                  
  9458                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22 COMMAND.COM)
  9459                                  
  9460                                  ; ----------------------------------------------------------------------------
  9461                                  ; START OF TRANSIENT PORTION
  9462                                  ; ----------------------------------------------------------------------------
  9463                                  ; SEGMENT - TRANSCODE
  9464                                  ; ----------------------------------------------------------------------------
  9465                                  
  9466                                  ; 18/04/2023
  9467                                  section .TRANGROUP  vstart=0  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) 
  9468                                  
  9469                                  ; 18/04/2023
  9470                                  ;-----------------------------------------------------------------------------
  9471                                  ; TRANSCODE segment offset 0
  9472                                  TRANSIENTSTART:
  9473                                  
  9474                                  	; 31/01/2023
  9475 00000000 00<rep 100h>            	times 256 db 0		; Allow for 100H parameter area
  9476                                  
  9477                                  ;============================================================================
  9478                                  ; TCODE.ASM, MSDOS 6.0, 1991
  9479                                  ;============================================================================
  9480                                  ; 12/10/2018 - Retro DOS v3.0
  9481                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1)
  9482                                  
  9483                                  ;[ORG 100h]
  9484                                  
  9485                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0100h
  9486                                  
  9487                                  ; ---------------------------------------------------------------------------
  9488                                  		
  9489                                  	; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9490                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:0100h)
  9491                                  
  9492                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9493                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0100h)
  9494                                  SETDRV:
  9495 00000100 B40E                    	mov	ah,0Eh
  9496                                  	;mov	ah,SET_DEFAULT_DRIVE ; 0Eh
  9497 00000102 CD21                    	int	21h	; DOS -	SELECT DISK
  9498                                  			; DL = new default drive number
  9499                                  			;		(0 = A, 1 = B, ..)
  9500                                  			; Return: AL = number of logical drives
  9501                                  
  9502                                  ; ---------------------------------------------------------------------------
  9503                                  
  9504                                  ; TCOMMAND is the recycle point in COMMAND. Nothing is known here.
  9505                                  ; No registers (CS:IP) no flags, nothing.
  9506                                  
  9507                                  TCOMMAND:
  9508 00000104 2E8E1E[159E]            	mov	ds,[cs:RESSEG]
  9509 00000109 B8FFFF                  	mov	ax,-1
  9510 0000010C 8706[4502]              	xchg	ax,[VerVal]
  9511 00000110 83F8FF                  	cmp	ax,-1
  9512 00000113 7404                    	je	short NOSETVER2
  9513 00000115 B42E                    	mov	ah,2Eh
  9514                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh
  9515 00000117 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
  9516                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
  9517                                  NOSETVER2:
  9518 00000119 2EFF1E[139E]            	call	far [cs:HEADCALL]   ; Make sure header fixed
  9519 0000011E 31ED                    	xor	bp,bp		    ; Flag transient not read
  9520 00000120 833E[4302]FF            	cmp	word [SingleCom],-1
  9521 00000125 7505                    	jne	short COMMAND
  9522                                  _$EXITPREP:
  9523 00000127 0E                      	push	cs
  9524 00000128 1F                      	pop	ds
  9525 00000129 E97225                  	jmp	_$EXIT		; Have finished the single command
  9526                                  
  9527                                  ; ---------------------------------------------------------------------------
  9528                                  ;
  9529                                  ; Main entry point from resident portion.
  9530                                  ;
  9531                                  ;   If BP <> 0, then we have just loaded transient portion otherwise we are
  9532                                  ;   just beginning the processing of another command.
  9533                                  ;
  9534                                  ; ---------------------------------------------------------------------------
  9535                                  
  9536                                  ; We are not always sure of the state of the world at this time. We presume
  9537                                  ; worst case and initialize the relevant registers: segments and stack.
  9538                                  
  9539                                  COMMAND:
  9540 0000012C FC                      	cld
  9541 0000012D 8CC8                    	mov	ax,cs
  9542 0000012F FA                      	cli
  9543 00000130 8ED0                    	mov	ss,ax
  9544                                  	;mov	sp,offset TRANGROUP:STACK
  9545                                  				; 07/06/2023
  9546 00000132 BC[36AA]                	mov	sp,STACK	; 0AF24h for MSDOS 6.22 COMMAND.COM
  9547                                  				; 09854h for MSDOS 5.0 COMMAND.COM
  9548 00000135 FB                      	sti
  9549                                  		
  9550 00000136 8EC0                    	mov	es,ax
  9551                                  		
  9552                                  	; MSDOS 6.0
  9553 00000138 8ED8                    	mov	ds,ax		;AN000; set DS to transient
  9554                                  	;ASSUME	ES:TRANGROUP,DS:TRANGROUP ;AC000;
  9555                                  	;invoke	TSYSLOADMSG	;AN000; preload messages
  9556                                  	; 31/01/2023
  9557 0000013A E8CF54                  	call	TSYSLOADMSG
  9558 0000013D C606[CDA2]00            	mov	byte [append_exec],0 ;AN041; set internal append state off
  9559                                  
  9560                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9561                                  	;mov	ds,[ss:RESSEG]
  9562                                  	; 31/01/2023
  9563 00000142 8E1E[159E]              	mov	ds,[RESSEG]
  9564 00000146 36C606[F19B]80          	mov	byte [ss:UCOMBUF],128 ; Init UCOMBUF	
  9565 0000014C 36C606[749C]80          	mov	byte [ss:COMBUF],128  ; Init COMBUF (Autoexec doing DATE)
  9566                                  
  9567                                  ; If we have just loaded the transient, then we do NOT need to initialize the
  9568                                  ; command buffer. ????  DO WE NEED TO RESTORE THE USERS DIRECTORY ????
  9569                                  ; I guess not: the only circumstances in which we reload the command processor
  9570                                  ; is after a transient program execution. In this case, we let the current
  9571                                  ; directory lie where it may.
  9572                                  
  9573 00000152 09ED                    	or	bp,bp		; See if just read
  9574 00000154 7409                    	jz	short TESTRDIR	; Not read, check user directory
  9575 00000156 36C706[F29B]010D        	mov	word [ss:UCOMBUF+1],0D01h ; Reset buffer
  9576 0000015D EB17                    	jmp	short NOSETBUF
  9577                                  TESTRDIR:
  9578 0000015F 803E[3F02]00            	cmp	byte [RestDir],0
  9579 00000164 7410                    	jz	short NOSETBUF	; User directory OK
  9580 00000166 1E                      	push	ds
  9581                                  
  9582                                  ; We have an unusual situation to handle. The user *may* have changed his
  9583                                  ; directory as a result of an internal command that got aborted. Restoring it
  9584                                  ; twice may not help us: the problem may never go away. We just attempt it
  9585                                  ; once and give up.
  9586                                  
  9587 00000167 C606[3F02]00            	mov	byte [RestDir],0 ; Flag users dirs OK
  9588                                  
  9589                                  	; Restore users directory
  9590 0000016C 0E                      	push	cs
  9591 0000016D 1F                      	pop	ds
  9592 0000016E BA[F79C]                	mov	dx,USERDIR1
  9593 00000171 B43B                    	mov	ah,3Bh
  9594                                  	;mov	ah,CHDir ; 3Bh
  9595 00000173 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
  9596                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
  9597 00000175 1F                      	pop	ds
  9598                                  NOSETBUF:
  9599 00000176 803E[B602]00            	cmp	byte [PipeFiles],0
  9600 0000017B 740A                    	jz	short NOPCLOSE	; Don't bother if they don't exist
  9601 0000017D 803E[B502]00            	cmp	byte [PipeFlag],0
  9602 00000182 7503                    	jnz	short NOPCLOSE	; Don't del if still piping
  9603 00000184 E8BA30                  	call	PIPEDEL
  9604                                  NOPCLOSE:
  9605                                  	;mov	byte [0BE9h],0	; MSDOS 3.3
  9606                                  	; 31/01/2023
  9607 00000187 C606[3702]00            	mov	byte [ExtCom],0 ; Flag internal command
  9608 0000018C 8CC8                    	mov	ax,cs		; Get segment we're in
  9609 0000018E 8ED8                    	mov	ds,ax
  9610 00000190 50                      	push	ax
  9611                                  			; 07/06/2023 (INTERNATVARS addr = STACK addr)
  9612 00000191 BA[36AA]                	mov	dx,INTERNATVARS ; 0AF24h for MSDOS 6.22 COMMAND.COM
  9613                                  				; 09854h for MSDOS 5.0 COMMAND.COM
  9614 00000194 B80038                  	mov	ax,3800h
  9615                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
  9616 00000197 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
  9617                                  			; get current-country info
  9618                                  			; DS:DX	-> buffer for returned info
  9619 00000199 58                      	pop	ax
  9620 0000019A 2B06[179E]              	sub	ax,[TPA]	; AX=size of TPA in paragraphs
  9621 0000019E 53                      	push	bx
  9622 0000019F BB1000                  	mov	bx,16
  9623 000001A2 F7E3                    	mul	bx		; DX:AX=size of TPA in bytes
  9624 000001A4 5B                      	pop	bx
  9625 000001A5 09D2                    	or	dx,dx		; See if over 64K
  9626 000001A7 7403                    	jz	short SAVSIZ	; OK if not
  9627 000001A9 B8FFFF                  	mov	ax,-1		; If so, limit to 65535 bytes
  9628                                  SAVSIZ:
  9629                                  
  9630                                  ; AX is the number of bytes free in the buffer between the resident and the
  9631                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
  9632                                  
  9633 000001AC 3D0002                  	cmp	ax,512
  9634 000001AF 7603                    	jbe	short GOTSIZE
  9635                                  	;and	ax,~1FFh
  9636 000001B1 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FF
  9637                                  GOTSIZE:
  9638 000001B4 A3[369E]                	mov	[BYTCNT],ax	; Max no. of bytes that can be buffered
  9639 000001B7 8E1E[159E]              	mov	ds,[RESSEG]	; All batch work must use resident seg.
  9640                                  
  9641 000001BB F606[3B02]01            	test	byte [EchoFlag],1 
  9642 000001C0 741E                    	jz	short GETCOM	; Don't do the CRLF
  9643 000001C2 E85B30                  	call	SINGLETEST
  9644 000001C5 7219                    	jb	short GETCOM
  9645 000001C7 F606[B502]FF            	test	byte [PipeFlag],0FFh ; -1
  9646 000001CC 7512                    	jnz	short GETCOM
  9647                                  				; G  Don't print prompt in FOR
  9648 000001CE F606[4902]FF            	test	byte [ForFlag],0FFh ; -1
  9649 000001D3 750B                    	jnz	short GETCOM
  9650                                  				; G  Don't print prompt if in batch
  9651 000001D5 F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1
  9652 000001DB 7503                    	jnz	short GETCOM
  9653 000001DD E84329                  	call	CRLF2
  9654                                  
  9655                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9656                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:01E0h
  9657                                  GETCOM:
  9658 000001E0 833E[4302]00            	cmp     word [SingleCom],0
  9659 000001E5 750D                    	jnz     short GETCOM2
  9660 000001E7 F706[E701]FFFF          	test    word [Batch],0FFFFh
  9661 000001ED 7505                    	jnz     short GETCOM2
  9662 000001EF 8026[FE03]EF            	and     byte [Y_Flag],0EFh ; Y/N question overwrite flag ; ~10h
  9663                                  
  9664                                  ;GETCOM:	; MSDOS 5.0 COMMAND.COM
  9665                                  GETCOM2:
  9666 000001F4 C606[4E02]00            	mov	byte [Call_Flag],0 ; G Reset call flags
  9667 000001F9 C606[4F02]00            	mov	byte [Call_Batch_Flag],0
  9668 000001FE B419                    	mov	ah,19h
  9669                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  9670 00000200 CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
  9671 00000202 36A2[299E]              	mov	[ss:CURDRV],al
  9672 00000206 F606[B502]FF            	test	byte [PipeFlag],0FFh ; -1 ; Pipe has highest presedence
  9673 0000020B 7403                    	jz	short NOPIPE
  9674 0000020D E9FC30                  	jmp	PIPEPROC	; Continue the pipeline
  9675                                  NOPIPE:
  9676 00000210 F606[3B02]01            	test	byte [EchoFlag],1
  9677 00000215 7417                    	jz	short NOPDRV	; No prompt if echo off
  9678 00000217 E80630                  	call	SINGLETEST
  9679 0000021A 7212                    	jb	short NOPDRV
  9680 0000021C F606[4902]FF            	test	byte [ForFlag],0FFh ; G  Don't print prompt in FOR	
  9681 00000221 750B                    	jnz	short NOPDRV
  9682 00000223 F706[E701]FFFF          	test	word [Batch],0FFFFh ; G  Don't print prompt if in batch
  9683 00000229 750D                    	jnz	short TESTFORBAT
  9684 0000022B E8B720                  	call	PRINT_PROMPT	; Prompt the user
  9685                                  NOPDRV:
  9686 0000022E F606[4902]FF            	test	byte [ForFlag],0FFh ; FOR has next highest precedence
  9687 00000233 7403                    	jz	short TESTFORBAT
  9688 00000235 E9760C                  	jmp	FORPROC		; Continue the FOR
  9689                                  
  9690                                  TESTFORBAT:
  9691 00000238 36C606[C09D]00          	mov	byte [ss:RE_INSTR],0 ; Turn redirection back off	
  9692 0000023E C606[6402]00            	mov	byte [Re_OutStr],0  ; [0C09h] for MSDOS 3.3 
  9693 00000243 C606[6302]00            	mov	byte [Re_Out_App],0 ; [0C08h] for MSDOS 3.3
  9694 00000248 C606[4802]00            	mov	byte [IfFlag],0	; no more ifs...
  9695 0000024D F706[E701]FFFF          	test	word [Batch],0FFFFh ; Batch has lowest precedence
  9696 00000253 7441                    	jz	short ISNOBAT
  9697                                  
  9698                                  	; 31/01/2023
  9699                                  
  9700                                  	; MSDOS 6.0
  9701                                  
  9702                                  ;	Bugbug:	MULT_SHELL_GET no longer used?
  9703                                  
  9704 00000255 06                      	push	es			;AN000; save ES
  9705 00000256 1E                      	push	ds			;AN000; save DS
  9706                                  	;mov	ax,mult_shell_get	;AN000; check to see if SHELL has command
  9707                                  	; 05/02/2023
  9708 00000257 B80219                  	mov	ax,1902h
  9709 0000025A 8E06[E701]              	mov	es,[Batch]		;AN000; get batch segment
  9710                                  	;mov	di,20h
  9711 0000025E BF2000                  	mov	di,BATCHSEGMENT.BatFile	;AN000; get batch file name
  9712 00000261 0E                      	push	cs			;AN000; get local segment to DS
  9713 00000262 1F                      	pop	ds			;AN000;
  9714                                  	;mov	dx,offset trangroup:combuf ;AN000; pass communications buffer
  9715 00000263 BA[749C]                	mov	dx,COMBUF
  9716 00000266 CD2F                    	int	2Fh			;AN000; call the shell
  9717                                  		; - Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE
  9718                                  		; ES:DI -> ASCIZ full filename of current batch file, with at least the
  9719                                  		; final filename element uppercased
  9720                                  		; DS:DX -> buffer for results
  9721                                  	;cmp	al,0FFh
  9722 00000268 3CFF                    	cmp	al,shell_action		;AN000; does shell have a commmand?
  9723 0000026A 1F                      	pop	ds			;AN000; restore DS
  9724 0000026B 07                      	pop	es			;AN000; restore ES
  9725 0000026C 7424                    	jz	short JDOCOM1		;AN000; yes - go process command
  9726                                  
  9727                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9728 0000026E 1E                      	push	ds
  9729 0000026F E8D503                  	call	READBAT			; Continue BATCH
  9730 00000272 1F                      	pop	ds
  9731 00000273 C606[5202]00            	mov	byte [NullFlag],0	;G reset no command flag
  9732 00000278 F706[E701]FFFF          	test	word [Batch],0FFFFh
  9733 0000027E 7512                    	jnz	short JDOCOM1		;G if batch still in progress continue
  9734 00000280 8B1E[5002]              	mov	bx,[Next_Batch]
  9735                                  	; 31/01/2023
  9736 00000284 09DB                    	or	bx,bx
  9737                                  	;cmp	bx,0			;G see if there is a new batch file
  9738 00000286 740A                    	jz	short JDOCOM1		;G no - go do command
  9739 00000288 891E[E701]              	mov	[Batch],bx		;G get segment of next batch file
  9740 0000028C C706[5002]0000          	mov	word [Next_Batch],0	;G reset next batch
  9741                                  JDOCOM1:
  9742 00000292 0E                      	push	cs
  9743 00000293 1F                      	pop	ds
  9744                                  	;jmp	short DOCOM1
  9745                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9746 00000294 EB5D                    	jmp	short DOCOM0
  9747                                  ISNOBAT:
  9748 00000296 833E[4302]00            	cmp	word [SingleCom],0
  9749 0000029B 741D                    	jz	short REGCOM
  9750                                  	; 07/06/2023 - MSDOS 6.22 COMMAND.COM
  9751 0000029D 8B36[4102]              	mov	si,[SemiPermCom] ;  MSDOS 6.0
  9752                                  	;mov	si,0FFFFh 	 ;  MSDOS 3.3 & MSDOS 5.0
  9753 000002A1 8736[4302]              	xchg	si,[SingleCom]
  9754 000002A5 BF[769C]                	mov	di,COMBUF+2
  9755 000002A8 31C9                    	xor	cx,cx
  9756                                  SINGLELOOP:
  9757 000002AA AC                      	lodsb
  9758 000002AB AA                      	stosb
  9759 000002AC 41                      	inc	cx
  9760 000002AD 3C0D                    	cmp	al,0Dh
  9761 000002AF 75F9                    	jnz	short SINGLELOOP
  9762 000002B1 49                      	dec	cx
  9763 000002B2 0E                      	push	cs
  9764 000002B3 1F                      	pop	ds
  9765 000002B4 880E[759C]              	mov	[COMBUF+1],cl
  9766                                  
  9767                                  ; do NOT issue a trailing CRLF...
  9768                                  
  9769                                  	;jmp	short DOCOM1
  9770                                  	; 07/06/2023
  9771                                  	; MSDOS 6.22 COMMAND.COM
  9772 000002B8 EB39                    	jmp	short DOCOM0
  9773                                  
  9774                                  	;nop
  9775                                  
  9776                                  	; 31/01/2023 - Retro DOS v4.0 COMMAND.COM
  9777                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:02A6h
  9778                                  
  9779                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9780                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02BBh
  9781                                  
  9782                                  ; We have a normal command.  
  9783                                  ; Printers are a bizarre quantity. Sometimes they are a stream and
  9784                                  ; sometimes they aren't. At this point, we automatically close all spool
  9785                                  ; files and turn on truncation mode.
  9786                                  
  9787                                  REGCOM:
  9788                                  	;mov	ax,(ServerCall shl 8) + 9
  9789                                  	; 31/01/2023
  9790 000002BA B8095D                  	mov	ax,5D09h
  9791                                  	;mov	ax,(SERVERCALL<<8)+9
  9792 000002BD CD21                    	int	21h	; DOS -	3.1+ internal -	FLUSH REDIRECTED PRINTER OUTPUT
  9793                                  	;mov	ax,(ServerCall shl 8) + 8
  9794 000002BF B8085D                  	mov	ax,5D08h
  9795                                  	;mov	ax,(SERVERCALL<<8)+8
  9796 000002C2 B201                    	mov	dl,1
  9797 000002C4 CD21                    	int	21h	; DOS -	3.1+ internal -	SET REDIRECTED PRINTER MODE
  9798                                  			; DL = 00h redirected output is	combined
  9799                                  			;      01h redirected output placed in separate	jobs
  9800                                  			; start	new print job now
  9801 000002C6 0E                      	push	cs
  9802 000002C7 1F                      	pop	ds	; Need local segment to point to buffer
  9803 000002C8 BA[F19B]                	mov	dx,UCOMBUF
  9804                                  
  9805                                  	; MSDOS 6.0
  9806                                  ;	Try to read interactive command line via DOSKey.
  9807                                  ;	If that fails, use DOS Buffered Keyboard Input.
  9808                                  
  9809                                  	; 31/01/2023
  9810 000002CB B81048                  	mov	ax,4810h	; AX = DOSKey Read Line function
  9811 000002CE CD2F                    	int	2Fh
  9812 000002D0 09C0                    	or	ax,ax
  9813 000002D2 7404                    	jz	short GOTCOM	; DOSKey gave us a command line
  9814                                  
  9815 000002D4 B40A                    	mov	ah,0Ah
  9816                                  	;mov	ah,Std_Con_String_Input	; AH = DOS Buffered Keyboard Input
  9817 000002D6 CD21                    	int	21h	; DOS -	BUFFERED KEYBOARD INPUT
  9818                                  			; DS:DX	-> buffer
  9819                                  GOTCOM:
  9820 000002D8 8A0E[F19B]              	mov	cl,[UCOMBUF]
  9821 000002DC 30ED                    	xor	ch,ch
  9822 000002DE 83C103                  	add	cx,3
  9823 000002E1 BE[F19B]                	mov	si,UCOMBUF
  9824 000002E4 BF[749C]                	mov	di,COMBUF
  9825 000002E7 F3A4                    	rep	movsb		; Transfer it to the cooked buffer
  9826                                  
  9827                                  	; -------------
  9828                                  
  9829                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9830                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02EDh
  9831                                  
  9832 000002E9 E83728                  	call	CRLF2
  9833 000002EC 31C0                    	xor	ax,ax
  9834 000002EE EB06                    	jmp	short DOCOM2
  9835                                  	; -------------
  9836                                  
  9837                                  DOCOM:
  9838 000002F0 E83028                  	call	CRLF2
  9839                                  
  9840                                  	; -------------
  9841                                  
  9842                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9843                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02F4h
  9844                                  DOCOM0:
  9845 000002F3 B80100                  	mov	ax,1
  9846                                  DOCOM2:
  9847 000002F6 1E                      	push	ds
  9848 000002F7 8E1E[159E]              	mov     ds,[RESSEG]
  9849 000002FB A3[9B01]                	mov	[cox_Y_option],ax
  9850 000002FE 1F                      	pop	ds
  9851 000002FF BE[749C]                	mov	si,COMBUF
  9852 00000302 8A4C01                  	mov	cl,[si+1]
  9853 00000305 30ED                    	xor	ch,ch
  9854 00000307 83C602                  	add	si,2
  9855 0000030A E82501                  	call	get_cox_y_n_opt
  9856 0000030D 7303                    	jnc	short DOCOM1    ; YES answer
  9857                                  	; 07/06/2023
  9858                                  NULLCOMJ:
  9859 0000030F E90201                  	jmp	NULLCOM         ; NO answer
  9860                                  	; -------------
  9861                                  
  9862                                  	; MSDOS 5.0 & MSDOS 6.0 COMMAND.COM
  9863                                  DOCOM1:
  9864 00000312 E8952B                  	call	PRESCAN		; Cook the input buffer
  9865 00000315 7403                    	jz	short NOPIPEPROC
  9866 00000317 E9712F                  	jmp	PIPEPROCSTRT	; Fire up the pipe
  9867                                  
  9868                                  	; 07/06/2023
  9869                                  ;NULLCOMJ:
  9870                                  	;jmp	NULLCOM
  9871                                  
  9872                                  NOPIPEPROC:
  9873 0000031A E86C32                  	call	PARSELINE
  9874 0000031D 730B                    	jnb	short OKPARSE	; user error? or maybe we goofed?
  9875                                  BADPARSE:
  9876 0000031F 0E                      	push	cs
  9877 00000320 1F                      	pop	ds
  9878 00000321 BA[1692]                	mov	dx,BADNAM_PTR	; 31/01/2023
  9879 00000324 E8FE51                  	call	std_eprintf
  9880 00000327 E9DAFD                  	jmp	TCOMMAND
  9881                                  
  9882                                  OKPARSE:
  9883                                  	;test	byte [ARGV0_ARG_FLAGS],2
  9884                                  	;test	byte [ARG+ARGV_ELE.argflags],2 ; wildcard
  9885                                  	; 01/02/2023
  9886 0000032A F606[E9A2]02            	test	byte [ARG+ARGV_ELE.argflags],2
  9887 0000032F 75EE                    	jnz	short BADPARSE	; ambiguous commands not allowed
  9888                                  	;cmp	word [ARG_ARGVCNT],0  ; there WAS a command, wasn't there?
  9889 00000331 833E[A7A5]00            	cmp	word [ARG+ARG_UNIT.argvcnt],0
  9890 00000336 74D7                    	jz	short NULLCOMJ
  9891                                  	;cmp	word [ARGV0_ARGLEN],0 ; probably an unnecessary check...
  9892 00000338 833E[ECA2]00            	cmp	word [ARG+ARGV_ELE.arglen],0
  9893 0000033D 74D0                    	jz	short NULLCOMJ	; guarantees argv[0] at least x<NULL>
  9894                                  
  9895 0000033F BE[769C]                	mov	si,COMBUF+2
  9896 00000342 BF[D19F]                	mov	di,IDLEN
  9897                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9898                                  				; Make FCB with blank scan-off
  9899                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9900 00000345 B80129                  	mov	ax,2901h
  9901 00000348 CD21                    	int	21h	; DOS -	PARSE FILENAME
  9902                                  			; DS:SI	-> string to parse
  9903                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9904                                  			; AL = bit mask	to control parsing
  9905                                  	;mov	bx,[ARG_ARGV]
  9906 0000034A 8B1E[E7A2]              	mov	bx,[ARG+ARG_UNIT.argv] ; mov bx,[ARG]
  9907 0000034E 807F013A                	cmp	byte [bx+1],':'	; was a drive specified?
  9908 00000352 751B                    	jne	short DRVGD	; no, use default of zero...
  9909 00000354 8A17                    	mov	dl,[bx]		; pick-up drive letter
  9910                                  	;mov	dl,[bx+ARGV_ELE.argpointer] ; mov dl,[bx+0]
  9911                                  	;and	dl,~20h
  9912 00000356 80E2DF                  	and	dl,0DFh		; uppercase the sucker
  9913                                  	;sub	dl,[CAPITAL_A]	; convert it to a drive number, A=0
  9914                                  	; 31/01/2023
  9915 00000359 80EA41                  	sub	dl,'A'
  9916 0000035C 3CFF                    	cmp	al,-1		; See what PARSE said about our drive letter.
  9917 0000035E 740C                    	je	short DRVBADJ	; It was invalid.
  9918                                  	;mov	di,[ARGV0_ARGSTARTEL]
  9919 00000360 8B3E[EAA2]              	mov	di,[ARG+ARGV_ELE.argstartel]
  9920 00000364 803D00                  	cmp	byte [di],0	; is there actually a command there?
  9921 00000367 7506                    	jne	short DRVGD	; if not, we have:  "d:", "d:\", "d:/"
  9922 00000369 E994FD                  	jmp	SETDRV		; and set drive to new drive spec
  9923                                  DRVBADJ:
  9924 0000036C E93D2A                  	jmp	DRVBAD
  9925                                  DRVGD:
  9926 0000036F 8A05                    	mov	al,[di]
  9927 00000371 A2[359E]                	mov	[SPECDRV],al
  9928 00000374 B020                    	mov	al,' '
  9929 00000376 B90900                  	mov	cx,9
  9930 00000379 47                      	inc	di
  9931 0000037A F2AE                    	repne	scasb		; Count number of letters in command name
  9932 0000037C B008                    	mov	al,8
  9933 0000037E 28C8                    	sub	al,cl
  9934 00000380 A2[D19F]                	mov	[IDLEN],al	; IDLEN is truly the length
  9935 00000383 BF8100                  	mov	di,81h
  9936 00000386 56                      	push	si
  9937 00000387 BE[769C]                	mov	si,COMBUF+2	; Skip over all leading delims
  9938 0000038A E8A327                  	call	scanoff
  9939                                  
  9940                                  	; 01/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9941                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0356h
  9942                                  
  9943                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9944                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0391h
  9945                                  
  9946                                  	; MSDOS 6.0
  9947                                  ;SR;
  9948                                  ; We are going to skip over the first char always. The logic is that the
  9949                                  ;command tail can never start from the first character. The code below is 
  9950                                  ;trying to figure out the command tail and copy it to the command line 
  9951                                  ;buffer in the PSP. However, if the first character happens to be a switch
  9952                                  ;character and the user given command line is a full 128 bytes, we try to
  9953                                  ;copy 128 bytes to the PSP while it can take only 127 chars. This extra
  9954                                  ;char overwrites the code and leads to a crash on future commands.
  9955                                  
  9956 0000038D 46                      	inc	si ;  MSDOS 6.0
  9957                                  
  9958                                  DO_SKIPCOM:
  9959 0000038E AC                      	lodsb			; move command line pointer over
  9960 0000038F E8A627                  	call	DELIM		; pathname -- have to do it ourselves
  9961 00000392 740A                    	jz	short DO_SKIPPED ; 'cause parse_file_descriptor is dumb
  9962 00000394 3C0D                    	cmp	al,0Dh		; can't always depend on argv[0].arglen
  9963 00000396 7406                    	jz	short DO_SKIPPED ; to be the same length as the user-
  9964 00000398 3A06[199E]              	cmp	al,[SWITCHAR]	; specified command string
  9965 0000039C 75F0                    	jnz	short DO_SKIPCOM 
  9966                                  DO_SKIPPED:
  9967 0000039E 4E                      	dec	si
  9968 0000039F 31C9                    	xor	cx,cx
  9969                                  COMTAIL:
  9970 000003A1 AC                      	lodsb
  9971 000003A2 AA                      	stosb			; Move command tail to 80h
  9972 000003A3 3C0D                    	cmp	al,0Dh
  9973 000003A5 E0FA                    	loopne	COMTAIL
  9974 000003A7 4F                      	dec	di
  9975 000003A8 89FD                    	mov	bp,di
  9976 000003AA F6D1                    	not	cl
  9977 000003AC 880E8000                	mov	[80h],cl
  9978 000003B0 5E                      	pop	si
  9979                                  ;-----
  9980                                  ; Some of these comments are sadly at odds with this brave new code.
  9981                                  ;-----
  9982                                  ; If the command has 0 parameters must check here for
  9983                                  ; any switches that might be present.
  9984                                  ; SI -> first character after the command.
  9985                                  
  9986                                  	;mov	di,arg.argv[0].argsw_word
  9987                                  	;mov	di,[ARGV0_ARGSW_WORD]
  9988 000003B1 8B3E[EEA2]              	mov	di,[ARG+ARGV_ELE.argsw_word]
  9989 000003B5 893E[2C9E]              	mov	[COMSW],di	; ah yes, the old addressing mode problem...
  9990                                  	;mov	SI,arg.argv[1 * SIZE argv_ele].argpointer  
  9991                                  				; s = argv[1];
  9992                                  	;mov	si,[ARGV1_ARGPOINTER]
  9993 000003B9 8B36[F2A2]              	mov	si,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]
  9994 000003BD 09F6                    	or	si,si		;   if (s == NULL)
  9995 000003BF 7502                    	jnz	short DOPARSE	;	s = bp; (buffer end)
  9996 000003C1 89EE                    	mov	si,bp
  9997                                  DOPARSE:
  9998 000003C3 BF5C00                  	mov	di,FCB ; 5Ch
  9999                                  	;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10000                                  	; 01/02/2023
 10001 000003C6 B80129                  	mov	ax,2901h
 10002                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10003 000003C9 CD21                    	int	21h	; DOS -	PARSE FILENAME
 10004                                  			; DS:SI	-> string to parse
 10005                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10006                                  			; AL = bit mask	to control parsing
 10007 000003CB A2[2A9E]                	mov	[PARM1],al	; Save result of parse
 10008                                  	;mov	di,arg.argv[1*SIZE argv_ele].argsw_word
 10009                                  	;mov	di,[ARGV1_ARGSW_WORD]
 10010 000003CE 8B3E[F9A2]              	mov	di,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]
 10011 000003D2 893E[2E9E]              	mov	[ARG1S],di
 10012                                  	;mov	si,arg.argv[2*SIZE argv_ele].argpointer    
 10013                                  				; s = argv[2];
 10014                                  	;mov	si,[ARGV2_ARGPOINTER]
 10015 000003D6 8B36[FDA2]              	mov	si,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argpointer]
 10016 000003DA 09F6                    	or	si,si		; if (s == NULL)
 10017 000003DC 7502                    	jnz	short DOPARSE2
 10018 000003DE 89EE                    	mov	si,bp		;     s = bp; (buffer end)
 10019                                  DOPARSE2:			
 10020 000003E0 BF6C00                  	mov	di,FCB+10h ; 6Ch
 10021                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10022 000003E3 B80129                  	mov	ax,2901h
 10023                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10024 000003E6 CD21                    	int	21h	; DOS -	PARSE FILENAME
 10025                                  			; DS:SI	-> string to parse
 10026                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10027                                  			; AL = bit mask	to control parsing
 10028 000003E8 A2[2B9E]                	mov	[PARM2],al	; Save result
 10029                                  	;mov	di,[ARGV2_ARGSW_WORD]
 10030                                  	;mov	di,arg.argv[2*SIZE argv_ele].argsw_word
 10031 000003EB 8B3E[04A3]              	mov	di,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]
 10032 000003EF 893E[309E]              	mov	[ARG2S],di
 10033                                  	;mov	di,[ARGV0_ARGSW_WORD]
 10034                                  	;mov	di,arg.argv[0].argsw_word
 10035 000003F3 8B3E[EEA2]              	mov	di,[ARG+ARGV_ELE.argsw_word]
 10036 000003F7 F7D7                    	not	di		; ARGTS doesn't include the flags
 10037                                  	;and	di,[ARG_ARGSWINFO] ; from COMSW...
 10038                                  	;and	di,arg.argswinfo	
 10039 000003F9 233E[A9A5]              	and	di,[ARG+ARG_UNIT.argswinfo]
 10040 000003FD 893E[329E]              	mov	[ARGTS],di
 10041                                  
 10042 00000401 A0[D19F]                	mov	al,[IDLEN]
 10043 00000404 8A16[359E]              	mov	dl,[SPECDRV]
 10044 00000408 08D2                    	or	dl,dl		; if a drive was specified...
 10045 0000040A 7505                    	jnz	short EXTERNALJ1 ; it MUST be external, by this time
 10046 0000040C FEC8                    	dec	al		; (I don't know why -- old code did it)
 10047 0000040E E9EE28                  	jmp	FNDCOM		; otherwise, check internal com table
 10048                                  EXTERNALJ1:
 10049 00000411 E9F029                  	jmp	EXTERNAL
 10050                                  NULLCOM:
 10051 00000414 8E1E[159E]              	mov	ds,[RESSEG]
 10052 00000418 F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1 ;G Are we in a batch file?
 10053 0000041E 7405                    	jz	short NOSETFLAG	  ;G only set flag if in batch
 10054 00000420 C606[5202]01            	mov	byte [NullFlag],1 ;G set flag to indicate no command
 10055                                  	;mov	byte [NullFlag],nullcommand ; 1
 10056                                  NOSETFLAG:
 10057 00000425 833E[4302]FF            	cmp	word [SingleCom],0FFFFh ; -1
 10058 0000042A 7403                    	je	short EXITJ
 10059 0000042C E9B1FD                  	jmp	GETCOM
 10060                                  EXITJ:
 10061 0000042F E9F5FC                  	jmp	_$EXITPREP
 10062                                  
 10063                                  ; 07/06/2023
 10064                                  ; ---------------------------------------------------------------------------
 10065                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 10066                                  ; -----------------------------------------
 10067                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 10068                                  ; ---------------------------------------------------------------------------
 10069                                  
 10070                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10071                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0436h
 10072                                  
 10073                                  get_cox_y_n_opt:
 10074 00000432 E339                    	jcxz	ccydp4		; empty	input buffer
 10075                                  ccydp0:
 10076 00000434 803C0D                  	cmp	byte [si],0Dh
 10077 00000437 7434                    	je	short ccydp4
 10078 00000439 803C0A                  	cmp	byte [si],0Ah
 10079 0000043C 742F                    	je	short ccydp4
 10080 0000043E 06                      	push	es
 10081 0000043F 8E06[159E]              	mov	es,[RESSEG]
 10082 00000443 26A0[FE03]              	mov	al,[es:Y_Flag]
 10083 00000447 A810                    	test	al,10h		; bit 1	= 1 -> Y/N answer is needed
 10084 00000449 7421                    	jz	short ccydp3 ; cf=0 ; 07/06/2023
 10085 0000044B 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],1 ; (in) Batch file ?
 10086 00000451 7419                    	je	short ccydp3	; yes, don't check for ESCAPE
 10087 00000453 A840                    	test	al,40h		; ESCAPE status
 10088                                  				; (bit 4 is zero if Y/N	is escaped)
 10089 00000455 7417                    	jz	short ccydp5
 10090                                  ccydp1:
 10091 00000457 26F706[E701]FFFF        	test	word [es:Batch],0FFFFh
 10092 0000045E 740B                    	jz	short ccydp2
 10093 00000460 268E06[E701]            	mov	es,[es:Batch]
 10094                                  	;mov	byte [es:2],1 ; [es:BATCHSEGMENT.BatchEOF]
 10095 00000465 26C606020001            	mov	byte [es:BATCHSEGMENT.BatchEOF],1
 10096                                  ccydp2:
 10097 0000046B F9                      	stc
 10098                                  ccydp3:		; 07/06/2023 ; cf = 0
 10099 0000046C 07                      	pop	es
 10100                                  ccydp4:		; 07/06/2023 ; cf = 0
 10101 0000046D C3                      	retn
 10102                                  
 10103                                  ;ccydp3:
 10104                                  ;	pop	es
 10105                                  ;ccydp4:
 10106                                  ;	clc
 10107                                  ;	retn
 10108                                  
 10109                                  ccydp5:
 10110 0000046E 89F2                    	mov	dx,si
 10111 00000470 BB0200                  	mov	bx,2
 10112 00000473 B440                    	mov	ah,40h
 10113 00000475 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 10114                                  			; BX = file handle, CX = number	of bytes to write
 10115                                  			; DS:DX -> buffer
 10116 00000477 BA[3894]                	mov	dx,cox_Y_quest_ptr ; msg number	pointer	of ' [Y/N]?'
 10117                                  				   ; (is 1082)
 10118 0000047A E8A850                  	call	std_eprintf
 10119 0000047D 1E                      	push	ds
 10120 0000047E B83B04                  	mov	ax,1083	; cox_Y_answer number (overwrite Y/N answer letter)
 10121 00000481 B6FF                    	mov	dh,0FFh		; utility_msg_class
 10122 00000483 E88C51                  	call	TSYSGETMSG
 10123                                  	;mov	cx,'NY' ; MASM word format
 10124                                  	; NASM word format
 10125 00000486 B9594E                  	mov	cx,'YN'        ; 'YN' Yes/No (CL=Y)
 10126 00000489 7202                    	jc	short ccydp6
 10127 0000048B 8B0C                    	mov	cx,[si]
 10128                                  ccydp6:
 10129 0000048D 1F                      	pop	ds
 10130                                  ccydp7:
 10131 0000048E B408                    	mov	ah,8
 10132 00000490 CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 10133                                  			; Return: AL = character
 10134 00000492 84C0                    	test	al,al
 10135 00000494 7510                    	jnz	short ccydp8
 10136 00000496 B408                    	mov	ah,8
 10137 00000498 CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 10138                                  			; Return: AL = character
 10139 0000049A 3C3F                    	cmp	al,'?'
 10140 0000049C 75F0                    	jne	short ccydp7
 10141 0000049E 26800E[FE03]40          	or	byte [es:Y_Flag],40h ; bit 4, question flag
 10142 000004A4 EBB1                    	jmp	short ccydp1
 10143                                  ccydp8:
 10144 000004A6 3C1B                    	cmp	al,1Bh		; ESCAPE ?
 10145 000004A8 7509                    	jne	short ccydp9
 10146 000004AA 268026[FE03]EF          	and	byte [es:Y_Flag],0EFh ; (ESCAPE) Clear bit 4 ; ~10h
 10147                                  	;jmp	short ccydp12
 10148                                  	; 07/06/2023
 10149 000004B0 9C                      	pushf
 10150 000004B1 EB14                    	jmp	short ccydp12
 10151                                  ccydp9:
 10152 000004B3 24DF                    	and	al,0DFh		; uppercase
 10153 000004B5 38E8                    	cmp	al,ch		; NO character (N)
 10154 000004B7 7503                    	jne	short ccydp10
 10155 000004B9 F9                      	stc
 10156 000004BA EB04                    	jmp	short ccydp11	; cf = 1 -> overwrite NO answer
 10157                                  ccydp10:
 10158 000004BC 38C8                    	cmp	al,cl		; YES character	(Y)
 10159 000004BE 75CE                    	jne	short ccydp7
 10160                                  ccydp11:
 10161 000004C0 9C                      	pushf			; cf = 0 -> overwrite YES answer
 10162 000004C1 88C2                    	mov	dl,al
 10163 000004C3 B402                    	mov	ah,2
 10164 000004C5 CD21                    	int	21h	; DOS -	DISPLAY	OUTPUT
 10165                                  			; DL = character to send to standard output
 10166                                  	; 07/06/2023
 10167                                  	;popf
 10168                                  ccydp12:
 10169                                  	;pushf
 10170 000004C7 E85926                  	call	CRLF2
 10171 000004CA 9D                      	popf
 10172 000004CB 07                      	pop	es
 10173 000004CC C3                      	retn
 10174                                  
 10175                                  ;============================================================================
 10176                                  ; MSHALO.ASM, MSDOS 6.0, 1991
 10177                                  ;============================================================================
 10178                                  ; 12/10/2018 - Retro DOS v3.0
 10179                                  
 10180                                  ; 05/02/2023 - Retro DOS v5.0 (& v4.1) COMMAND.COM
 10181                                  
 10182                                  ;	SCCSID = @(#)ibmhalo.asm	1.1 85/04/10
 10183                                  ;   On 2K (800h) boundaries beginning at address C0000h and ending at EF800h
 10184                                  ;   there is a header that describes a block of rom program.  This header
 10185                                  ;   contains information needed to initialize a module and to provide PCDOS
 10186                                  ;   with a set of reserved names for execution.
 10187                                  ;
 10188                                  ;   This header has the following format:
 10189                                  ;
 10190                                  ;   rom_header	STRUC
 10191                                  ;	Signature1  DB	55h
 10192                                  ;	Signature2  DB	AAh
 10193                                  ;	rom_length  DB	?		; number of 512 byte pieces
 10194                                  ;	init_jmp    DB	3 dup (?)
 10195                                  ;	name_list   name_struc <>
 10196                                  ;   rom_header	ENDS
 10197                                  ;
 10198                                  ;   name_struc	STRUC
 10199                                  ;	name_len    DB	?
 10200                                  ;	name_text   DB	? DUP (?)
 10201                                  ;	name_jmp    DB	3 DUP (?)
 10202                                  ;   name_struc	ENDS
 10203                                  ;
 10204                                  ;   The name list is a list of names that are reserved by a particular section
 10205                                  ;   of a module.  This list of names is terminated by a null name (length
 10206                                  ;   is zero).
 10207                                  ;
 10208                                  ;   Consider now, the PCDOS action when a user enters a command:
 10209                                  ;
 10210                                  ;	COMMAND.COM has control.
 10211                                  ;	o   If location FFFFEh has FDh then
 10212                                  ;	o	Start scanning at C0000h, every 800h for a byte 55h followed
 10213                                  ;		    by AAh, stop scan if we get above or = F0000H
 10214                                  ;	o	When we've found one, compare the name entered by the user
 10215                                  ;		    with the one found in the rom.  If we have a match, then
 10216                                  ;		    set up the environment for execution and do a long jump
 10217                                  ;		    to the near jump after the found name.
 10218                                  ;	o	If no more names in the list, then continue scanning the module
 10219                                  ;		    for more 55h followed by AAh.
 10220                                  ;	o   We get to this point only if there is no matching name in the
 10221                                  ;		rom.  We now look on disk for the command.
 10222                                  ;
 10223                                  ;   This gives us the flexibility to execute any rom cartridge without having
 10224                                  ;   to 'hard-code' the name of the cartridge into PCDOS.  Rom modules that
 10225                                  ;   want to be invisible to the DOS should not have any names in their lists
 10226                                  ;   (i.e. they have a single null name).
 10227                                  ;
 10228                                  ;   Consider a new release of BASIC, say, that patches bugs in the ROM version.
 10229                                  ;   Clearly this version will be available on disk.  How does a user actually
 10230                                  ;   invoke this new BASIC??  He cannot call it BASIC on the disk because the
 10231                                  ;   EXEC loader will execute the ROM before it even looks at the disk!	Only
 10232                                  ;   solution:
 10233                                  ;
 10234                                  ;   o	Keep things consistent and force the user to have his software named
 10235                                  ;	differently from the ROM names (BASIC1, BASIC2, etc).
 10236                                  
 10237                                  struc ROM_HEADER
 10238 00000000 ??                          .signature1: resb 1
 10239 00000001 ??                          .signature2: resb 1
 10240 00000002 ??                          .rom_length: resb 1
 10241 00000003 ??????                      .init_jmp:	 resb 3
 10242 00000006 ??                          .name_list:	 resb 1
 10243                                      .size:
 10244                                  endstruc
 10245                                  
 10246                                  struc NAME_STRUC
 10247 00000000 ??                          .name_len:	resb 1
 10248 00000001 ??                          .name_text:	resb 1
 10249 00000002 ??????                      .name_jmp:	resb 3
 10250                                      .size:	
 10251                                  endstruc
 10252                                  
 10253                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 03D1h
 10254                                  
 10255                                  ; =============== S U B	R O U T	I N E =======================================
 10256                                  
 10257                                  ;ASSUME	CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
 10258                                  
 10259                                  ; 05/02/2023
 10260                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:03FBh
 10261                                  
 10262                                  ; 07/06/2023
 10263                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:04D5h
 10264                                  
 10265                                  ; Check for IBM PC Jr rom cartrides. DS:DX is a pointer to name
 10266                                  
 10267                                  ROM_SCAN:
 10268 000004CD 06                      	push	es
 10269 000004CE 56                      	push	si
 10270 000004CF 57                      	push	di
 10271 000004D0 51                      	push	cx
 10272 000004D1 50                      	push	ax
 10273 000004D2 53                      	push	bx
 10274                                  
 10275                                  	; check for PC Jr signature in rom
 10276                                  
 10277 000004D3 B800F0                  	mov	ax,0F000h
 10278 000004D6 8EC0                    	mov	es,ax
 10279 000004D8 26803EFEFFFD            	cmp	byte [es:0FFFEh],0FDh
 10280 000004DE 7408                    	je	short SCAN_IT
 10281                                  NO_ROM:
 10282 000004E0 F8                      	clc
 10283                                  ROM_RET:
 10284 000004E1 5B                      	pop	bx
 10285 000004E2 58                      	pop	ax
 10286 000004E3 59                      	pop	cx
 10287 000004E4 5F                      	pop	di
 10288 000004E5 5E                      	pop	si
 10289 000004E6 07                      	pop	es
 10290 000004E7 C3                      	retn
 10291                                  
 10292                                  	; start scanning at C000h
 10293                                  SCAN_IT:
 10294 000004E8 B800C0                  	mov	ax,0C000h
 10295                                  SCAN_ONE:
 10296 000004EB 8EC0                    	mov	es,ax
 10297 000004ED 31FF                    	xor	di,di
 10298                                  
 10299                                  	; check for a valid header
 10300                                  SCAN_MODULE:
 10301 000004EF 26813D55AA              	cmp	word [es:di],0AA55h
 10302 000004F4 740A                    	je	short SCAN_LIST
 10303 000004F6 058000                  	add	ax,80h
 10304                                  SCAN_END:
 10305 000004F9 3D00F0                  	cmp	ax,0F000h
 10306 000004FC 72ED                    	jb	short SCAN_ONE
 10307 000004FE EBE0                    	jmp	short NO_ROM
 10308                                  
 10309                                  	; trundle down list of names
 10310                                  SCAN_LIST:
 10311                                  	;mov	bl,[es:di+2]	; number of 512-byte jobbers
 10312 00000500 268A5D02                	mov	bl,[es:di+ROM_HEADER.rom_length]
 10313 00000504 30FF                    	xor	bh,bh		; nothing in the high byte
 10314 00000506 D1E3                    	shl	bx,1
 10315 00000508 D1E3                    	shl	bx,1		; number of paragraphs
 10316 0000050A 83C37F                  	add	bx,7Fh
 10317 0000050D 83E380                  	and	bx,0FF80h	; round to 2k
 10318                                  	;mov	di,6
 10319                                  	; 05/05/2023
 10320 00000510 BF0600                  	mov	di,ROM_HEADER.name_list
 10321                                  	;nop
 10322                                  SCAN_NAME:
 10323 00000513 268A0D                  	mov	cl,[es:di]	; length of name
 10324 00000516 47                      	inc	di		; point to name
 10325 00000517 30ED                    	xor	ch,ch
 10326 00000519 09C9                    	or	cx,cx		; zero length name
 10327 0000051B 7504                    	jnz	short SCAN_TEST	; nope... compare
 10328 0000051D 01D8                    	add	ax,bx		; yep, skip to next block
 10329 0000051F EBD8                    	jmp	short SCAN_END
 10330                                  
 10331                                  	; compare a single name
 10332                                  SCAN_TEST:
 10333 00000521 89D6                    	mov	si,dx
 10334 00000523 46                      	inc	si
 10335 00000524 F3A6                    	repe	cmpsb		 ; compare name
 10336 00000526 7407                    	jz	short SCAN_FOUND ; success!
 10337                                  SCAN_NEXT:
 10338 00000528 01CF                    	add	di,cx		; failure, next name piece
 10339 0000052A 83C703                  	add	di,3
 10340 0000052D EBE4                    	jmp	short SCAN_NAME
 10341                                  
 10342                                  	; found a name. save entry location
 10343                                  SCAN_FOUND:	
 10344 0000052F 803C3F                  	cmp	byte [si],'?'
 10345 00000532 7405                    	je	short SCAN_SAVE
 10346 00000534 803C20                  	cmp	byte [si],' '
 10347 00000537 75EF                    	jne	short SCAN_NEXT
 10348                                  SCAN_SAVE:
 10349 00000539 2E8C06[4EA1]            	mov	[cs:ROM_CS],es
 10350 0000053E 2E893E[4CA1]            	mov	[cs:ROM_IP],di
 10351 00000543 F9                      	stc
 10352 00000544 EB9B                    	jmp	short ROM_RET
 10353                                  
 10354                                  ; ---------------------------------------------------------------------------
 10355                                  
 10356                                  ; execute a rom-placed body of code. allocate largest block
 10357                                  
 10358                                  ROM_EXEC:
 10359 00000546 BBFFFF                  	mov	bx,0FFFFh
 10360                                  	; 05/02/2023
 10361 00000549 B448                    	mov	ah,48h
 10362                                  	;mov	ah,ALLOC ; 48h
 10363 0000054B CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10364                                  			; BX = number of 16-byte paragraphs desired
 10365 0000054D B448                    	mov	ah,48h
 10366                                  	;mov	ah,ALLOC ; 48h
 10367 0000054F CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10368                                  			; BX = number of 16-byte paragraphs desired
 10369 00000551 53                      	push	bx
 10370 00000552 50                      	push	ax
 10371                                  
 10372                                  	; set terminate addresses
 10373                                  
 10374 00000553 B82225                  	mov	ax,2522h
 10375                                  	;;mov	ax,(set_interrupt_vector SHL 8) + int_terminate
 10376                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE
 10377 00000556 1E                      	push	ds
 10378 00000557 2E8E1E[159E]            	mov	ds,[cs:RESSEG]
 10379                                  	;mov	dx,offset RESGROUP:EXEC_WAIT
 10380                                  	;mov	dx,131h ; MSDOS 3.3
 10381                                  	; 05/02/2023
 10382                                  	;mov	dx,0D6Bh ; MSDOS 5.0
 10383 0000055C BA[E90C]                	mov	dx,Exec_Wait
 10384 0000055F CD21                    	int	21h	; DOS -	SET INTERRUPT VECTOR
 10385                                  			; AL = interrupt number
 10386                                  			; DS:DX	= new vector to	be used	for specified interrupt
 10387 00000561 8CDA                    	mov	dx,ds
 10388 00000563 8EC2                    	mov	es,dx
 10389 00000565 1F                      	pop	ds
 10390                                  		
 10391                                  	; and create program header and dup all jfn's
 10392                                  
 10393 00000566 5A                      	pop	dx
 10394 00000567 B455                    	mov	ah,55h
 10395                                  	;mov	ah,DUP_PDB ; 55h
 10396 00000569 CD21                    	int	21h	; DOS -	2+ internal - CREATE PSP
 10397                                  			; DX = segment number at which to set up PSP
 10398                                  			; SI = (DOS 3+)	value to place in memory size field at DX:[0002h]
 10399                                  		
 10400                                  	; set up dma address
 10401                                  
 10402 0000056B 8EDA                    	mov	ds,dx
 10403 0000056D BA8000                  	mov	dx,80h
 10404 00000570 B41A                    	mov	ah,1Ah
 10405                                  	;mov	ah,Set_DMA ; 1Ah
 10406 00000572 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 10407                                  			; DS:DX	-> disk	transfer buffer
 10408                                  
 10409                                  	; copy in environment info
 10410                                  
 10411 00000574 26A1[DC03]              	mov	ax,[es:EnvirSeg]
 10412                                  	;mov	[2Ch],ax
 10413 00000578 A32C00                  	mov	[PDB.ENVIRON],ax
 10414                                  
 10415                                  	; set up correct size of block
 10416                                  
 10417 0000057B 5B                      	pop	bx		; BX has size, DS has segment
 10418 0000057C 8CDA                    	mov	dx,ds
 10419 0000057E 01DA                    	add	dx,bx
 10420                                  	;mov	[2],dx
 10421 00000580 89160200                	mov	[PDB.BLOCK_LEN],dx
 10422                                  
 10423                                  	; change ownership of block
 10424                                  
 10425 00000584 8CDA                    	mov	dx,ds
 10426 00000586 4A                      	dec	dx
 10427 00000587 8EDA                    	mov	ds,dx
 10428 00000589 42                      	inc	dx	
 10429                                  	;mov	[1],dx
 10430 0000058A 89160100                	mov	[ARENA.owner],dx
 10431 0000058E 8EDA                    	mov	ds,dx
 10432                                  
 10433                                  	; set up correct stack
 10434                                  
 10435 00000590 81FB0010                	cmp	bx,1000h
 10436 00000594 7202                    	jb	short GOT_STACK
 10437 00000596 31DB                    	xor	bx,bx
 10438                                  GOT_STACK:
 10439 00000598 B104                    	mov	cl,4
 10440 0000059A D3E3                    	shl	bx,cl
 10441 0000059C 8CDA                    	mov	dx,ds
 10442 0000059E 8ED2                    	mov	ss,dx
 10443 000005A0 89DC                    	mov	sp,bx
 10444 000005A2 31C0                    	xor	ax,ax
 10445 000005A4 50                      	push	ax
 10446                                  
 10447                                  	; set up initial registers and go to the guy
 10448                                  
 10449 000005A5 F7D0                    	not	ax
 10450 000005A7 2EFF36[4EA1]            	push	word [cs:ROM_CS]
 10451 000005AC 2EFF36[4CA1]            	push	word [cs:ROM_IP]
 10452 000005B1 8EC2                    	mov	es,dx
 10453 000005B3 CB                      	retf	; far return
 10454                                  
 10455                                  ;============================================================================
 10456                                  ; TBATCH.ASM, MSDOS 6.0, 1991
 10457                                  ;============================================================================
 10458                                  ; 12/10/2018 - Retro DOS v3.0
 10459                                  
 10460                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 04B9h
 10461                                  
 10462                                  ; =============== S U B	R O U T	I N E =======================================
 10463                                  
 10464                                  ;Break	<PromptBat - Open or wait for batch file>
 10465                                  
 10466                                  ; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10467                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:04E2h
 10468                                  
 10469                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10470                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:05BCh
 10471                                  
 10472                                  ; Open the batch file. If we cannot find the batch file. If the media is
 10473                                  ; changeable, we prompt for the change. Otherwise, we terminate the batch
 10474                                  ; file. Leave segment registers alone.
 10475                                  
 10476                                  PROMPTBAT:
 10477 000005B4 E84808                  	call	BATOPEN
 10478 000005B7 7201                    	jc	short PROMPTBAT1
 10479 000005B9 C3                      	retn
 10480                                  PROMPTBAT1:
 10481                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10482                                  	; MSDOS 6.0 COMMAND.COM
 10483 000005BA 83FA02                  	cmp	dx,ERROR_FILE_NOT_FOUND ;AN022; Ask for diskette if file not found
 10484 000005BD 740A                    	je	short BAT_REMCHECK	;AN022;
 10485 000005BF 83FA03                  	cmp	dx,ERROR_PATH_NOT_FOUND ;AN022; Ask for diskette if path not found
 10486 000005C2 7405                    	je	short BAT_REMCHECK	;AN022; Otherwise, issue message and exit
 10487                                  	;invoke	output_batch_name	;AN022; set up batch name in bwdbuf
 10488 000005C4 E83500                  	call	output_batch_name
 10489 000005C7 EB13                    	jmp	short BATDIE		;AN022;
 10490                                  
 10491                                  	; 05/02/2023
 10492                                  	; MSDOS 3.3 COMMAND.COM
 10493                                  	;cmp	dx,ACCDENPTR
 10494                                  	;jz	short BATDIE
 10495                                  
 10496                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10497                                  BAT_REMCHECK:				;AN022; Go see if media is removable
 10498 000005C9 2EFF1E[1F9E]            	call	far [cs:RCH_ADDR]	; DX has error number
 10499 000005CE 7417                    	jz	short ASKFORBAT		; Media is removable
 10500                                  
 10501                                  ; The media is not changeable. Turn everything off.
 10502                                  
 10503 000005D0 E83D0B                  	call	FOROFF
 10504 000005D3 E8E62E                  	call	PipeOff
 10505 000005D6 A2[4802]                	mov	[IfFlag],al	; No If in progress.	
 10506 000005D9 BA[1092]                	mov	dx,BADBAT_PTR
 10507                                  BATDIE:
 10508 000005DC E8F003                  	call	BATCHOFF
 10509 000005DF 0E                      	push	cs
 10510 000005E0 1F                      	pop	ds
 10511                                  	;invoke	std_eprintf	;AC022; display message ;  MSDOS 6.0
 10512                                  	; 05/02/2023
 10513 000005E1 E8414F                  	call	std_eprintf	; MSDOS 6.0
 10514                                  	;call	STD_PRINTF	; MSDOS 3.3
 10515                                  
 10516                                  ; TCOMMAND resets the stack. This is the equivalent of a non-local goto.
 10517                                  
 10518 000005E4 E91DFB                  	jmp	TCOMMAND
 10519                                  
 10520                                  ; Ask the user to reinsert the batch file
 10521                                  
 10522                                  ASKFORBAT:
 10523 000005E7 1E                      	push	ds
 10524 000005E8 0E                      	push	cs
 10525 000005E9 1F                      	pop	ds
 10526                                  
 10527                                  	; MSDOS 6.0
 10528                                  	;mov	dx,offset TRANGROUP:NEEDBAT_ptr  ;AN022;
 10529 000005EA BA[1392]                	mov	dx,NEEDBAT_PTR
 10530                                  	;invoke	std_eprintf	 	;Prompt for batch file on stderr
 10531                                  	; 05/02/2023
 10532 000005ED E8354F                  	call	std_eprintf
 10533                                  	;mov	dx,offset trangroup:pausemes_ptr
 10534 000005F0 BA[8592]                	mov	dx,PAUSEMES_PTR
 10535                                  	;invoke std_eprintf		;AN000; get second part of message
 10536 000005F3 E82F4F                  	call	std_eprintf
 10537                                  					;AN000; print it to stderr
 10538                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10539                                  	;call	STD_EPRINTF
 10540 000005F6 E82E00                  	call	GETKEYSTROKE
 10541 000005F9 1F                      	pop	ds
 10542 000005FA EBB8                    	jmp	short PROMPTBAT
 10543                                  
 10544                                  
 10545                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10546                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:052Ah
 10547                                  
 10548                                  	; MSDOS 6.0
 10549                                  ;****************************************************************
 10550                                  ;*
 10551                                  ;* ROUTINE:	Output_batch_name
 10552                                  ;*
 10553                                  ;* FUNCTION:	Sets up batch name to be printed on extended error
 10554                                  ;*
 10555                                  ;* INPUT:	DX - extended error number
 10556                                  ;*
 10557                                  ;* OUTPUT:	Ready to call print routine
 10558                                  ;*
 10559                                  ;****************************************************************
 10560                                  ;
 10561                                  ;public	output_batch_name		;AN022;
 10562                                  
 10563                                  output_batch_name:	;proc near	;AN022;
 10564                                  
 10565 000005FC 1E                      	push	ds			;AN022; save resident segment
 10566 000005FD 8E1E[E701]              	mov	ds,[Batch]		;AN022; get batch file segment
 10567                                  	;assume	DS:nothing		;AN022;
 10568                                  	;;mov	SI,BatFile		;AN022; get offset of batch file
 10569                                  	; 05/02/2023
 10570                                  	;mov	si,20h
 10571                                  	; 24/04/2023
 10572 00000601 BE2000                  	mov	si,BATCHSEGMENT.BatFile
 10573                                  	;invoke	dstrlen 		;AN022; get length of string
 10574 00000604 E8B92B                  	call	dstrlen
 10575                                  	;mov	di,offset Trangroup:bwdbuf
 10576                                  					;AN022; target for batch name
 10577 00000607 BF[50A0]                	mov	di,BWDBUF
 10578 0000060A F3A4                    	rep	movsb			;AN022; move the name
 10579                                  
 10580 0000060C 0E                      	push	cs			;AN022; get local segment
 10581 0000060D 1F                      	pop	ds			;AN022;
 10582                                  	;assume	DS:trangroup		;AN022;
 10583                                  	; 05/02/2023
 10584 0000060E 8916[F391]              	mov	[extend_buf_ptr],dx	;AN022; put message number in block
 10585                                  	;mov	byte [msg_disp_class],1
 10586 00000612 C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class
 10587                                  					;AN022; set up extended error msg class
 10588                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 10589 00000617 BA[F391]                	mov	dx,extend_buf_ptr	
 10590                                  					;AN022; get extended message pointer
 10591                                  	;mov	string_ptr_2,offset trangroup:bwdbuf 
 10592 0000061A C706[37A1][50A0]        	mov	word [string_ptr_2],BWDBUF	
 10593                                  					;AN022; point to substitution
 10594                                  	;mov	byte [extend_buf_sub],1
 10595 00000620 C606[F591]01            	mov	byte [extend_buf_sub],one_subst
 10596                                  					;AN022; set up for one subst
 10597 00000625 1F                      	pop	ds			;AN022; restore data segment
 10598 00000626 C3                      	retn				;AN022; return
 10599                                  
 10600                                  ;output_batch_name    endp		;AN022;
 10601                                  
 10602                                  
 10603                                  ; =============== S U B	R O U T	I N E =======================================
 10604                                  
 10605                                  ;Break	<GetKeystroke - get a keystroke and flush queue>
 10606                                  
 10607                                  ; Read the next keystroke. Since there may be several characters in the queue
 10608                                  ; after the one we ask for (function keys/Kanji), we need to flush the queue
 10609                                  ; AFTER waiting.
 10610                                  
 10611                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10612                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0555h
 10613                                  
 10614                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10615                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:062Fh
 10616                                  
 10617                                  GETKEYSTROKE:
 10618                                  	; 05/02/2023
 10619                                  	; MSDOS 3.3
 10620                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_NO_ECHO
 10621                                  	;;mov	ax,0C08h
 10622                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT_NO_ECHO
 10623                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10624                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10625                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10626                                  	;;mov	ax,0C00h
 10627                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)+0
 10628                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10629                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10630                                  	;retn
 10631                                  
 10632                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10633                                  	; MSDOS 6.0
 10634 00000627 52                      	push	dx			;AN000;  3/3/KK
 10635                                  	;mov	ax,(ECS_call SHL 8) OR GetInterimMode
 10636                                  					;AN000;  3/3/KK
 10637 00000628 B80263                  	mov	ax,6302h
 10638 0000062B CD21                    	int	21h			;AN000;  3/3/KK
 10639                                  		; DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE
 10640                                  	
 10641 0000062D 52                      	push	dx			;AN000;  save interim state 3/3/KK
 10642                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10643                                  					;AN000;  3/3/KK
 10644 0000062E B80163                  	mov	ax,6301h
 10645 00000631 B201                    	mov	dl,1
 10646                                  	;mov	dl,InterimMode		;AN000;  3/3/KK
 10647 00000633 CD21                    	int	21h			;AN000;  3/3/KK
 10648                                  		; DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE
 10649                                  		; DL = new mode
 10650                                  		; 00h return only full characters on DOS keyboard input functions
 10651                                  		; 01h return partially-formed characters also
 10652                                  	
 10653                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo
 10654 00000635 B8080C                  	mov	ax,0C08h
 10655 00000638 CD21                    	int	21h			; Get character with KB buffer flush
 10656                                  		; DOS - CLEAR KEYBOARD BUFFER
 10657                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10658                                  
 10659                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10660 0000063A B8000C                  	mov	ax,0C00h
 10661 0000063D CD21                    	int	21h
 10662                                  		; DOS - CLEAR KEYBOARD BUFFER
 10663                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10664                                  
 10665                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10666                                  					;AN000;  3/3/KK
 10667 0000063F B80163                  	mov	ax,6301h
 10668 00000642 5A                      	pop	dx			;AN000;  restore interim state 3/3/KK
 10669 00000643 CD21                    	int	21h			;AN000;  3/3/KK
 10670 00000645 5A                      	pop	dx			;AN000;  3/3/KK
 10671                                  	
 10672 00000646 C3                      	retn
 10673                                  
 10674                                  ; =============== S U B	R O U T	I N E =======================================
 10675                                  
 10676                                  ; Break	<ReadBat - read 1 line from batch file>
 10677                                  
 10678                                  ; ReadBat - read a single line from the batch file. 
 10679                                  ; Perform all substitutions as appropriate.
 10680                                  
 10681                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10682                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0575h
 10683                                  
 10684                                  READBAT:
 10685                                  	;ASSUME	DS:ResGroup,ES:TranGroup
 10686                                  		
 10687                                  	;mov	byte [Suppress],1
 10688                                  				; initialize line suppress status
 10689 00000647 C606[3C02]01            	mov	byte [Suppress],YES_ECHO
 10690 0000064C F606[3102]FF            	test	byte [Batch_Abort],-1 ; 0FFh
 10691 00000651 751F                    	jnz	short TRYING_TO_ABORT
 10692 00000653 C606[3002]01            	mov	byte [In_Batch],1 ; set flag to indicate batch job
 10693                                  
 10694                                  	; MSDOS 6.0
 10695                                  
 10696                                  ;M037; Start of changes
 10697                                  ; We check here if we have set the flag indicating that the batchfile is at
 10698                                  ;EOF. In this case, we do not want to continue with the normal processing.
 10699                                  ;We call GetBatByt once more so that the batch segment gets freed up, the
 10700                                  ;batch file gets closed etc. and then return as if everything is done.
 10701                                  
 10702                                  	; 05/02/2023
 10703 00000658 1E                      	push	ds
 10704 00000659 8E1E[E701]              	mov	ds,[Batch]
 10705                                  	;cmp	byte [2],0
 10706 0000065D 803E020000              	cmp	byte [BATCHSEGMENT.BatchEOF],0
 10707                                  				; are we at EOF in batchfile
 10708 00000662 1F                      	pop	ds
 10709 00000663 740A                    	jz	short CONTBAT	; no, continue normal processing
 10710                                  	;invoke	GetBatByt	; frees up batchseg
 10711 00000665 E8D303                  	call	GETBATBYT
 10712 00000668 26A2[769C]              	mov	[es:COMBUF+2],al
 10713                                  				; stuff CR into command buffer
 10714                                  				; as a dummy command
 10715                                  	;;invoke CrLf2		; print a CR-LF
 10716                                  	;call	CRLF2
 10717                                  	;;return		; done batch processing
 10718                                  	;retn
 10719                                  	; 24/04/2023
 10720 0000066C E9B424                  	jmp	CRLF2
 10721                                  
 10722                                  ;M037; End of changes
 10723                                  		
 10724                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10725                                  CONTBAT:
 10726 0000066F E842FF                  	call	PROMPTBAT
 10727                                  
 10728                                  TRYING_TO_ABORT:
 10729 00000672 BF[769C]                	mov	di,COMBUF+2
 10730                                  
 10731                                  ; Save position and try to scan for first non delimiter.
 10732                                  
 10733                                  TESTNOP:
 10734 00000675 8CD8                    	mov	ax,ds
 10735 00000677 8E1E[E701]              	mov	ds,[Batch]
 10736 0000067B FF360800                	push	word [BATCHSEGMENT.BatSeek]
 10737 0000067F FF360A00                	push	word [BATCHSEGMENT.BatSeek+2]
 10738                                  				; save current location.
 10739 00000683 8ED8                    	mov	ds,ax
 10740 00000685 E84B06                  	call	SKIPDELIM	; skip to first non-delim
 10741                                  
 10742                                  ; If the first non-delimiter is not a : (label), we reseek back to the
 10743                                  ; beginning and read the line.
 10744                                  
 10745 00000688 3C3A                    	cmp	al,':'		; is it a label?
 10746 0000068A 59                      	pop	cx
 10747 0000068B 5A                      	pop	dx		; restore position in bat file
 10748 0000068C 7431                    	jz	short NOPLINE	; yes, resync everything.
 10749 0000068E F706[E701]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10750 00000694 7438                    	jz	short RDBAT	; no, go read batch file
 10751                                  
 10752                                  	;cmp	al,'@'
 10753 00000696 3C40                    	cmp	al,No_Echo_Char	; see if user wants to suppress line
 10754 00000698 7507                    	jne	short SET_BAT_POS ; no - go and set batch file position
 10755                                  	;mov	byte [Suppress],0
 10756 0000069A C606[3C02]00            	mov	byte [Suppress],NO_ECHO ; yes set flag to indicate
 10757 0000069F EB2D                    	jmp	short RDBAT	; go read batch file
 10758                                  	;nop
 10759                                  SET_BAT_POS:
 10760 000006A1 1E                      	push	ds
 10761 000006A2 8E1E[E701]              	mov	ds,[Batch]
 10762                                  	;mov	[8],dx
 10763 000006A6 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; reseek back to beginning
 10764                                  	;mov	[10],cx
 10765 000006AA 890E0A00                	mov	[BATCHSEGMENT.BatSeek+2],cx
 10766 000006AE 1F                      	pop	ds
 10767                                  	;;mov	ax,(LSEEK SHL 8) + 0
 10768                                  	; 05/02/2023
 10769 000006AF B80042                  	mov	ax,4200h
 10770                                  	;mov	ax,(LSEEK*256) ; 4200h ; seek back
 10771 000006B2 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 10772                                  			; AL = method: offset from beginning of	file
 10773                                  	;mov	word [cs:BATBUFPOS],0FFFFh
 10774                                  	; 24/04/2023
 10775                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:05E3h
 10776 000006B4 26C706[5FAA]FFFF        	mov	word [es:BATBUFPOS],-1; 0FFFFh
 10777                                  	;mov	word [cs:BATBUFPOS],-1 ; nuke batch buffer position
 10778 000006BB 31C9                    	xor	cx,cx		; Initialize line length to zero
 10779 000006BD EB0F                    	jmp	short RDBAT
 10780                                  
 10781                                  	;nop
 10782                                  
 10783                                  ; The first non-delimiter is a :. This line is not echoed and is ignored.
 10784                                  ; We eat characters until a CR is seen.
 10785                                  
 10786                                  NOPLINE:
 10787 000006BF E80501                  	call	SKIPTOEOL
 10788 000006C2 E87603                  	call	GETBATBYT	; eat trailing LF
 10789                                  	;test	word [Batch],0FFFFh
 10790 000006C5 F706[E701]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10791 000006CB 75A8                    	jnz	short TESTNOP	; no, go get another line
 10792                                  READBAT_RETN:			; Hit EOF
 10793 000006CD C3                      	retn
 10794                                  
 10795                                  ; ---------------------------------------------------------------------------
 10796                                  
 10797                                  ; Read a line into the buffer pointed to by ES:DI. If any %s are seen in the
 10798                                  ; input, we are to consider two special cases:
 10799                                  ;
 10800                                  ;   %0 to %9	These represent replaceable parameters from the batch segment
 10801                                  ;   %sym%	This is a symbol from the environment
 10802                                  
 10803                                  RDBAT:
 10804 000006CE E86A03                  	call	GETBATBYT
 10805 000006D1 41                      	inc	cx		; Inc the line length
 10806                                  
 10807                                  	; 05/02/2023
 10808                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0601h
 10809 000006D2 E83C22                  	call	testkanj
 10810 000006D5 740C                    	jz	short RDBAT1
 10811                                  	;cmp	cx,127
 10812 000006D7 83F97F                  	cmp	cx,COMBUFLEN-1
 10813 000006DA 7350                    	jnb	short TOOLONG
 10814 000006DC AA                      	stosb
 10815 000006DD E85B03                  	call    GETBATBYT
 10816 000006E0 41                      	inc	cx
 10817 000006E1 EB0A                    	jmp	short SAVBATBYT
 10818                                  RDBAT1:
 10819 000006E3 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10820 000006E7 7343                    	jnb	short TOOLONG	   ; Yes - handle it, handle it
 10821                                  
 10822                                  ; See if we have a parameter character.
 10823                                  
 10824 000006E9 3C25                    	cmp	al,'%'		; Check for parameter
 10825 000006EB 7449                    	je	short NEEDPARM
 10826                                  
 10827                                  ; no parameter character. Store it as usual and see if we are done.
 10828                                  
 10829                                  SAVBATBYT:
 10830 000006ED AA                      	stosb			; End of line found?
 10831 000006EE 3C0D                    	cmp	al,0Dh
 10832 000006F0 75DC                    	jne	short RDBAT	; no, go for more
 10833                                  
 10834                                  ; We have read in an entire line. 
 10835                                  ; Decide whether we should echo the command line or not.
 10836                                  
 10837                                  FOUND_EOL:
 10838 000006F2 81EF[779C]              	sub	di,COMBUF+3
 10839 000006F6 89F8                    	mov	ax,di		; remember that we've not counted the CR
 10840 000006F8 26A2[759C]              	mov	[es:COMBUF+1],al
 10841                                  				; Set length of line
 10842 000006FC E83C03                  	call	GETBATBYT	; Eat linefeed
 10843 000006FF E8E906                  	call	BATCLOSE
 10844 00000702 803E[3C02]00            	cmp	byte [Suppress],NO_ECHO ; 0
 10845 00000707 7407                    	jz	short RESET
 10846 00000709 F606[3B02]01            	test	byte [EchoFlag],1  ; To echo or not to echo, that is the
 10847 0000070E 7504                    	jnz	short TRY_NEXTFLAG ; question. (Profound, huh?)
 10848                                  RESET:
 10849 00000710 0E                      	push	cs
 10850 00000711 1F                      	pop	ds		; Go back to local segment
 10851 00000712 74B9                    	jz	short READBAT_RETN ; no echoing here...
 10852                                  TRY_NEXTFLAG:
 10853 00000714 803E[5202]01            	cmp	byte [NullFlag],nullcommand ; 1
 10854                                  				;G was there a command last time?
 10855 00000719 7403                    	jz	short NO_CRLF_PRINT
 10856                                  				;G no - don't print crlf
 10857 0000071B E80524                  	call	CRLF2		;G Print out prompt
 10858                                  NO_CRLF_PRINT:
 10859 0000071E E8C41B                  	call	PRINT_PROMPT
 10860 00000721 0E                      	push	cs		;G change data segment
 10861 00000722 1F                      	pop	ds
 10862 00000723 BA[769C]                	mov	dx,COMBUF+2	; get command line for echoing
 10863 00000726 E85324                  	call	CRPRINT
 10864                                  	;call	CRLF2
 10865                                  	;retn
 10866                                  	; 06/02/2023
 10867 00000729 E9F723                  	jmp	CRLF2
 10868                                  
 10869                                  ; The line was too long. Eat remainder of input text up until the CR
 10870                                  
 10871                                  TOOLONG:
 10872 0000072C 3C0D                    	cmp	al,0Dh		; Has the end of the line been reached?
 10873 0000072E 7403                    	jz	short LTLCONT	; Yes, continue
 10874 00000730 E89400                  	call	SKIPTOEOL	; Eat remainder of line	
 10875                                  LTLCONT:
 10876 00000733 AA                      	stosb			; Terminate the command
 10877 00000734 EBBC                    	jmp	short FOUND_EOL	; Go process the valid part of the line
 10878                                  
 10879                                  ; We have found a parameter lead-in character. Check for the 0-9 case first
 10880                                  
 10881                                  NEEDPARM:
 10882 00000736 E80203                  	call	GETBATBYT	; get next character
 10883 00000739 3C25                    	cmp	al,'%'		; Check for two consecutive %
 10884 0000073B 74B0                    	je	short SAVBATBYT	; if so, replace with a single %
 10885 0000073D 3C0D                    	cmp	al,0Dh		; Check for end-of-line
 10886 0000073F 74AC                    	je	short SAVBATBYT	; yes, treat it normally
 10887                                  
 10888                                  ; We have found %<something>. If the <something> is in the range 0-9, we
 10889                                  ; retrieve the appropriate parameter from the batch segment. Otherwise we
 10890                                  ; see if the <something> has a terminating % and then look up the contents
 10891                                  ; in the environment.
 10892                                  
 10893                                  PAROK:
 10894 00000741 2C30                    	sub	al,'0'
 10895 00000743 7239                    	jb	short NEEDENV	; look for parameter in the environment
 10896 00000745 3C09                    	cmp	al,9
 10897 00000747 7735                    	ja	short NEEDENV
 10898                                  
 10899                                  ; We have found %<number>. This is taken from the parameters in the
 10900                                  ; allocated batch area.
 10901                                  
 10902 00000749 98                      	cbw
 10903 0000074A 89C3                    	mov	bx,ax		; move index into AX
 10904 0000074C D1E3                    	shl	bx,1		; convert word index into byte ptr
 10905 0000074E 06                      	push	es
 10906 0000074F 8E06[E701]              	mov	es,[Batch]
 10907                                  
 10908                                  ; The structure of the batch area is:
 10909                                  ;
 10910                                  ;   BYTE    type of segment
 10911                                  ;   DWORD   offset for next line
 10912                                  ;   10 WORD pointers to parameters. -1 is empty parameter
 10913                                  ;   ASCIZ   file name (with . and ..)
 10914                                  ;   BYTES   CR-terminated parameters
 10915                                  ;   BYTE    0 flag to indicate end of parameters
 10916                                  ;
 10917                                  ; Get pointer to BX'th argument
 10918                                  
 10919                                  	;;mov	si,[es:bx+0Bh]
 10920                                  	; 05/02/2023
 10921                                  	;mov	si,[es:bx+0Ch] 	; MSDOS 5.0 COMMAND.COM
 10922 00000753 268B770C                	mov	si,[es:bx+BATCHSEGMENT.BatParm]
 10923 00000757 07                      	pop	es
 10924                                  
 10925                                  ; Is there a parameter here?
 10926                                  
 10927 00000758 83FEFF                  	cmp	si,-1		; Check if parameter exists
 10928 0000075B 7503                    	jnz	short YES_THERE_IS ; Yes go get it
 10929 0000075D E96EFF                  	jmp	RDBAT		; Ignore if it doesn't
 10930                                  
 10931                                  ; Copy in the found parameter from batch segment
 10932                                  
 10933                                  YES_THERE_IS:
 10934 00000760 1E                      	push	ds
 10935 00000761 8E1E[E701]              	mov	ds,[Batch]
 10936 00000765 49                      	dec	cx		; Don't count '%' in line length
 10937                                  COPYPARM:
 10938 00000766 AC                      	lodsb			; From resident segment
 10939 00000767 3C0D                    	cmp	al,0Dh		; Check for end of parameter
 10940 00000769 740F                    	je	short ENDPARAM
 10941 0000076B 41                      	inc	cx		; Inc the line length
 10942 0000076C 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10943 00000770 7303                    	jnb	short LINETOOL	; Yes - handle it, handle it
 10944 00000772 AA                      	stosb
 10945 00000773 EBF1                    	jmp	short COPYPARM
 10946                                  
 10947                                  ; We have copied up to the limit. Stop copying and eat remainder of batch
 10948                                  ; line. We need to make sure that the tooLong code isn't fooled into
 10949                                  ; believing that we are at EOL. Clobber AL too.
 10950                                  
 10951                                  LINETOOL:
 10952 00000775 30C0                    	xor	al,al
 10953 00000777 1F                      	pop	ds
 10954 00000778 EBB2                    	jmp	short TOOLONG
 10955                                  
 10956                                  ; We have copied in an entire parameter. Go back for more
 10957                                  
 10958                                  ENDPARAM:
 10959 0000077A 1F                      	pop	ds
 10960 0000077B E950FF                  	jmp	RDBAT
 10961                                  
 10962                                  ; We have found % followed by something other than 0-9. We presume that there
 10963                                  ; will be a following % character. In between is an environment variable that
 10964                                  ; we will fetch and replace in the batch line with its value.
 10965                                  
 10966                                  NEEDENV:
 10967                                  	; MSDOS 6.0 COMMAND.COM
 10968                                  	; 05/02/2023 
 10969 0000077E 49                      	dec     cx 		;AN070; Don't count "%"
 10970                                  
 10971                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10972 0000077F 1E                      	push	ds
 10973 00000780 57                      	push	di
 10974                                  				; temp spot for name
 10975 00000781 BF[D29F]                	mov	di,ID
 10976 00000784 0430                    	add	al,'0'		; reconvert character
 10977 00000786 AA                      	stosb			; store it in appropriate place
 10978                                  
 10979                                  ; loop getting characters until the next % is found or until EOL
 10980                                  
 10981                                  GETENV1:
 10982 00000787 E8B102                  	call	GETBATBYT	; get the byte
 10983 0000078A AA                      	stosb			; store it
 10984 0000078B 3C0D                    	cmp	al,0Dh		; EOL?
 10985 0000078D 7514                    	jne	short GETENV15	; no, see if it the term char
 10986                                  
 10987                                  ; The user entered a string with a % but no trailing %. We copy the string.
 10988                                  
 10989 0000078F 26C645FF00              	mov	byte [es:di-1],0 ; nul terminate the string
 10990 00000794 BE[D29F]                	mov	si,ID 		; point to buffer
 10991 00000797 5F                      	pop	di		; point to line buffer
 10992 00000798 0E                      	push	cs
 10993 00000799 1F                      	pop	ds
 10994 0000079A E88B02                  	call	STRCPY
 10995                                  	; 05/02/2023
 10996 0000079D 72D6                    	jc	short LINETOOL	;  MSDOS 6.0 COMMAND.COM
 10997                                  	; 24/04/2023
 10998                                  	;dec	di  		;  MSDOS 3.3 COMMAND.COM	
 10999 0000079F 1F                      	pop	ds
 11000 000007A0 E94AFF                  	jmp	SAVBATBYT
 11001                                  GETENV15:
 11002 000007A3 3C25                    	cmp	al,'%'		; terminating %?
 11003 000007A5 75E0                    	jne	short GETENV1	; no, go suck out more characters
 11004                                  
 11005                                  ; M017 - following DEC is wrong, because we replace the % with a = here.
 11006                                  ; This was the source of bug #1.
 11007                                  ;	dec	cx		;AN070; Don't count "%"
 11008                                  
 11009 000007A7 B03D                    	mov	al,'='		; terminate  with =
 11010 000007A9 268845FF                	mov	[es:di-1],al
 11011                                  
 11012                                  ; ID now either has a =-terminated string which we are to find in the
 11013                                  ; environment or a non =-terminated string which will not be found in the
 11014                                  ; environment.
 11015                                  
 11016                                  GETENV2:
 11017 000007AD BE[D29F]                	mov	si,ID
 11018 000007B0 0E                      	push	cs
 11019 000007B1 1F                      	pop	ds		; DS:SI points to name
 11020 000007B2 51                      	push	cx
 11021 000007B3 E8B120                  	call	find_name_in_environment
 11022 000007B6 59                      	pop	cx
 11023 000007B7 06                      	push	es
 11024 000007B8 1F                      	pop	ds
 11025 000007B9 0E                      	push	cs
 11026 000007BA 07                      	pop	es
 11027 000007BB 89FE                    	mov	si,di
 11028 000007BD 5F                      	pop	di		; get back pointer to command line
 11029                                  
 11030                                  ; If the parameter was not found, there is no need to perform any replacement.
 11031                                  ; We merely pretend that we've copied the parameter.
 11032                                  
 11033 000007BE 7203                    	jc	short GETENV6
 11034                                  
 11035                                  ; ES:DI points to command line being built
 11036                                  ; DS:SI points either to nul-terminated environment object AFTER =
 11037                                  
 11038 000007C0 E86502                  	call	STRCPY		; (let RdBat handle overflow)
 11039                                  	; 24/04/2022
 11040                                  	;dec	di 		; MSDOS 3.3 COMMAND.COM
 11041                                  GETENV6:
 11042 000007C3 1F                      	pop	ds
 11043 000007C4 E907FF                  	jmp	RDBAT		; go back to batch file
 11044                                  
 11045                                  ; =============== S U B	R O U T	I N E =======================================
 11046                                  
 11047                                  ;   SkipToEOL - read from batch file until end of line
 11048                                  
 11049                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11050                                  SKIPTOEOL:
 11051 000007C7 F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
 11052                                  	;jnz	short SKIPTOEOL1  	
 11053                                  	;retn			; no batch file in effect
 11054                                  	
 11055 000007CD 7407                    	jz	short SKIPTOEOL2 ; Retro DOS v3.0 COMMAND.COM
 11056                                  SKIPTOEOL1:
 11057 000007CF E86902                  	call	GETBATBYT
 11058 000007D2 3C0D                    	cmp	al,0Dh		; eol character?
 11059 000007D4 75F1                    	jnz	short SKIPTOEOL	; no, go eat another
 11060                                  SKIPTOEOL2:
 11061 000007D6 C3                      	retn
 11062                                  
 11063                                  ; =============== S U B	R O U T	I N E =======================================
 11064                                  
 11065                                  ;Break	<Allocate and deallocate the transient portion>
 11066                                  
 11067                                  ; Free Transient. Modify ES,AX,flags
 11068                                  
 11069                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11070                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0708h
 11071                                  FREE_TPA:
 11072 000007D7 06                      	push	es
 11073 000007D8 8E06[159E]              	mov	es,[RESSEG]
 11074 000007DC 268E06[FC03]            	mov	es,[es:Res_Tpa]
 11075 000007E1 B449                    	mov	ah,49h
 11076                                  	;mov	ah,DEALLOC ; 49h
 11077 000007E3 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11078                                  			; ES = segment address of area to be freed
 11079 000007E5 07                      	pop	es
 11080 000007E6 C3                      	retn
 11081                                  
 11082                                  ; =============== S U B	R O U T	I N E =======================================
 11083                                  
 11084                                  ; Allocate transient. Modify AX,BX,DX,flags
 11085                                  
 11086                                  	; 06/02/2023
 11087                                  ALLOC_TPA:
 11088 000007E7 06                      	push	es
 11089 000007E8 8E06[159E]              	mov	es,[RESSEG]
 11090 000007EC BBFFFF                  	mov	bx,0FFFFh 	; Re-allocate the transient	
 11091 000007EF B448                    	mov	ah,48h
 11092                                  	;mov	ah,ALLOC ; 48h
 11093 000007F1 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11094                                  			; BX = number of 16-byte paragraphs desired
 11095 000007F3 53                      	push	bx	  	; Save size of block
 11096 000007F4 B448                    	mov	ah,48h
 11097                                  	;mov	ah,ALLOC ; 48h
 11098 000007F6 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11099                                  			; BX = number of 16-byte paragraphs desired
 11100                                  
 11101                                  ; Attempt to align TPA on 64K boundary
 11102                                  
 11103 000007F8 5B                      	pop	bx		; Restore size of block
 11104 000007F9 26A3[FC03]              	mov	[es:Res_Tpa],ax
 11105                                  				; Save segment to beginning of block
 11106 000007FD A3[259E]                	mov	[TRAN_TPA],ax
 11107                                  
 11108                                  ; Is the segment already aligned on a 64K boundary
 11109                                  
 11110 00000800 89C2                    	mov	dx,ax		; Save segment
 11111 00000802 25FF0F                  	and	ax,0FFFh	; Test if above boundary
 11112 00000805 7507                    	jnz	short CALC_TPA
 11113 00000807 89D0                    	mov	ax,dx
 11114 00000809 2500F0                  	and	ax,0F000h	; Test if multiple of 64K
 11115 0000080C 7523                    	jnz	short NOROUND
 11116                                  CALC_TPA:
 11117 0000080E 89D0                    	mov	ax,dx
 11118 00000810 2500F0                  	and	ax,0F000h
 11119 00000813 050010                  	add	ax,1000h	; Round up to next 64K boundary
 11120 00000816 7219                    	jc	short NOROUND	; Memory wrap if carry set
 11121                                  
 11122                                  ; Make sure that new boundary is within allocated range
 11123                                  
 11124 00000818 268B16[FC03]            	mov	dx,[es:Res_Tpa]
 11125 0000081D 01DA                    	add	dx,bx		; Compute maximum address
 11126 0000081F 39C2                    	cmp	dx,ax		; Is 64K address out of range?
 11127 00000821 720E                    	jb	short NOROUND
 11128                                  
 11129                                  ; Make sure that we won't overwrite the transient
 11130                                  
 11131 00000823 8CCB                    	mov	bx,cs		; CS is beginning of transient
 11132 00000825 39C3                    	cmp	bx,ax
 11133 00000827 7208                    	jb	short NOROUND
 11134                                  
 11135                                  ; The area from the 64K boundary to the beginning of the transient must
 11136                                  ; be at least 64K.
 11137                                  
 11138 00000829 29C3                    	sub	bx,ax
 11139                                  	;cmp	bx,4096
 11140 0000082B 81FB0010                	cmp	bx,1000h	; Size greater than 64K?	
 11141 0000082F 7304                    	jnb	short ROUNDDONE
 11142                                  NOROUND:
 11143 00000831 26A1[FC03]              	mov	ax,[es:Res_Tpa]
 11144                                  ROUNDDONE:
 11145 00000835 26A3[EE03]              	mov	[es:LTpa],ax	; Re-compute everything
 11146 00000839 A3[179E]                	mov	[TPA],ax
 11147 0000083C 89C3                    	mov	bx,ax
 11148 0000083E 8CC8                    	mov	ax,cs
 11149 00000840 29D8                    	sub	ax,bx
 11150 00000842 53                      	push	bx
 11151 00000843 BB1000                  	mov	bx,16
 11152 00000846 F7E3                    	mul	bx
 11153 00000848 5B                      	pop	bx
 11154 00000849 09D2                    	or	dx,dx
 11155 0000084B 7403                    	jz	short SAVSIZ2
 11156 0000084D B8FFFF                  	mov	ax,-1
 11157                                  SAVSIZ2:
 11158                                  
 11159                                  ; AX is the number of bytes free in the buffer between the resident and the
 11160                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 11161                                  
 11162 00000850 3D0002                  	cmp	ax,512
 11163 00000853 7603                    	jbe	short GOTSIZE2
 11164                                  	;and	ax,~1FFh
 11165 00000855 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FFh
 11166                                  GOTSIZE2:
 11167 00000858 A3[369E]                	mov	[BYTCNT],ax
 11168 0000085B 07                      	pop	es
 11169 0000085C C3                      	retn
 11170                                  
 11171                                  ; =============== S U B	R O U T	I N E =======================================
 11172                                  
 11173                                  ;Break	<BatCom - enter a batch file>
 11174                                  
 11175                                  ; The exec search has determined that the user has requested a batch file for
 11176                                  ; execution. We parse the arguments, create the batch segment, and signal
 11177                                  ; batch processing.
 11178                                  
 11179                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11180                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:078Eh
 11181                                  
 11182                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11183                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0868h
 11184                                  BATCOM:	
 11185                                  
 11186                                  ;ASSUME	DS:TRANGROUP, ES:NOTHING
 11187                                  
 11188                                  ; Batch parameters are read with ES set to segment of resident part
 11189                                  
 11190                                  	; MSDOS 6.0
 11191 0000085D 8E06[159E]              	mov	es,[RESSEG]
 11192                                  	;ASSUME	ES:RESGROUP
 11193                                  	;cmp	byte [es:Call_Batch_Flag],1
 11194 00000861 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11195                                  					;AN043; If in CALL,
 11196 00000867 7403                    	jz	short skip_ioset	;AN043; redirection was already set up
 11197                                  	;invoke	IOSET			; Set up any redirection
 11198 00000869 E86328                  	call	IOSET
 11199                                  skip_ioset:				;AN043;
 11200 0000086C E868FF                  	call	FREE_TPA		; G
 11201                                  	;cmp	byte [es:Call_Batch_Flag],1
 11202 0000086F 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11203 00000875 7403                    	jz	short GETECHO 		; G if we're in a call, don't execute
 11204                                  
 11205                                  	; 12/02/2023
 11206                                  	; MSDOS 3.3
 11207                                  	;call	IOSET
 11208                                  	;mov	es,[RESSEG]
 11209                                  	;call	FREE_TPA
 11210                                  	;;cmp	byte [es:CALL_BATCH_FLAG],1
 11211                                  	;cmp	byte [es:CALL_BATCH_FLAG],call_in_progress
 11212                                  	;jz	short GETECHO		; G if we're in a call, don't execute
 11213                                  
 11214                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11215                                  
 11216                                  ; Since BATCH has lower precedence than PIPE or FOR. If a new BATCH file is
 11217                                  ; being started it MUST be true that no FOR or PIPE is currently in progress.
 11218                                  ; Don't execute if in call
 11219                                  
 11220 00000877 E89608                  	call	FOROFF
 11221                                  GETECHO:
 11222 0000087A E83F2C                  	call	PipeOff
 11223 0000087D 26A0[3B02]              	mov	al,[es:EchoFlag]	; preserve echo state for chaining
 11224 00000881 2401                    	and	al,1			; Save current echo state
 11225                                  
 11226 00000883 50                      	push	ax
 11227 00000884 31C0                    	xor	ax,ax
 11228 00000886 26F706[E701]FFFF        	test	word [es:Batch],-1 	; Are we in a batch file?
 11229 0000088D 7414                    	jz	short LEAVEBAT	   	; No, nothing to save
 11230 0000088F 26A1[E701]              	mov	ax,[es:Batch] 		; Get current batch segment
 11231                                  	;cmp	byte [es:Call_Batch_Flag],1
 11232 00000893 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11233 00000899 7408                    	jz	short LEAVEBAT
 11234                                  
 11235                                  ;  We are in a chained batch file, save batlast from previous batch segment
 11236                                  ;  so that if we're in a CALL, we will return to the correct batch file.
 11237                                  
 11238 0000089B 06                      	push	es
 11239 0000089C 8EC0                    	mov	es,ax		; Get current batch segment
 11240                                  	;mov	ax,[es:02h] ; MSDOS 3.3 COMMAND.COM
 11241                                  				; Get previous batch segment
 11242                                  	; 12/02/2023
 11243                                  	;mov	ax,[es:03h] ; MSDOS 6.0 (&5.0) COMMAND.COM	
 11244 0000089E 26A10300                	mov	ax,[es:BATCHSEGMENT.BatLast]
 11245 000008A2 07                      	pop	es
 11246                                  LEAVEBAT:
 11247 000008A3 50                      	push	ax		; Keep segment until new one created
 11248                                  	;cmp	byte [es:Call_Batch_Flag],1
 11249 000008A4 26803E[4F02]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11250 000008AA 7403                    	jz	short STARTBAT
 11251 000008AC E82001                  	call	BATCHOFF
 11252                                  
 11253                                  ; Find length of batch file
 11254                                  
 11255                                  STARTBAT:
 11256 000008AF 26C606[4F02]00          	mov	byte [es:Call_Batch_Flag],0 ; Reset call flag
 11257 000008B5 BE[3D9D]                	mov	si,EXECPATH
 11258                                  
 11259                                  	; 12/02/2023
 11260                                  	; MSDOS 6.0
 11261 000008B8 B811B7                  	mov	ax,0B711h
 11262                                  	;mov	ax,AppendTruename
 11263                                  				;AN042; Get the real path where the batch file
 11264 000008BB CD2F                    	int	2Fh		;AN042;    was found with APPEND
 11265 000008BD B44E                    	mov	ah,4Eh
 11266                                  	;mov	ah,Find_First	;AN042; The find_first will return it
 11267 000008BF 89F2                    	mov	dx,si		;AN042; Get the string
 11268 000008C1 B91300                  	mov	cx,13h
 11269                                  	;mov	cx,search_attr	;AN042; filetypes to search for
 11270 000008C4 CD21                    	int	21h		;AN042;
 11271                                  
 11272                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11273 000008C6 E8F728                  	call	dstrlen
 11274                                  ;
 11275                                  ; Allocate batch area:
 11276                                  ;   BYTE    type of segment
 11277                                  ;   WORD    segment of last batch file
 11278                                  ;   WORD    segment for FOR command
 11279                                  ;   BYTE    FOR flag state on entry to batch file
 11280                                  ;   DWORD   offset for next line
 11281                                  ;   10 WORD pointers to parameters.  -1 is empty parameter
 11282                                  ;   ASCIZ   file name (with . and ..)
 11283                                  ;   BYTES   CR-terminated parameters
 11284                                  ;   BYTE    0 flag to indicate end of parameters
 11285                                  ;
 11286                                  ; We allocate the maximum size for the command line and use setblock to shrink
 11287                                  ; later when we've squeezed out the extra
 11288                                  ;
 11289 000008C9 89CB                    	mov	bx,cx		; length of file name.
 11290                                  	;add	bx,190	; MSDOS 3.3 (BATCHSEGMENT struc size = 32)
 11291                                  	; 12/02/2023
 11292                                  	;add	bx,191	; MSDOS 6.0 (BATCHSEGMENT struc size = 33) 
 11293                                  	; 25/04/2023
 11294 000008CB 81C3BF00                	add	bx,15+BATCHSEGMENT.SIZE+COMBUFLEN+15
 11295                                  					; structure + max len + round up
 11296 000008CF 51                      	push	cx
 11297 000008D0 B104                    	mov	cl,4
 11298 000008D2 D3EB                    	shr	bx,cl		; convert to paragraphs
 11299 000008D4 53                      	push	bx		; Save size of batch segment
 11300 000008D5 B448                    	mov	ah,48h
 11301                                  	;mov	ah,ALLOC ; 48h ; Allocate batch segment
 11302 000008D7 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11303                                  				; BX = number of 16-byte paragraphs desired
 11304 000008D9 5B                      	pop	bx		; Get size of batch segment
 11305                                  
 11306                                  ; This should *NEVER* return an error. The transient is MUCH bigger than
 11307                                  ; the batch segment. This may not be true, however, in a multitasking system.
 11308                                  ; G This error will occur with nesting of batch files. We also need to
 11309                                  ; G make sure that we don't overlay the transient.
 11310                                  
 11311 000008DA 7221                    	jc	short MEM_ERROR	;G not enough memory - exit
 11312                                  
 11313 000008DC 50                      	push	ax		;G save batch segment
 11314 000008DD 01D8                    	add	ax,bx		;G get end of batch segment
 11315 000008DF 83C020                  	add	ax,20h		;G add some tpa work area
 11316 000008E2 8CCB                    	mov	bx,cs		;G get the transient segment
 11317                                  
 11318                                  	; MSDOS 6.0
 11319                                  ; M006; We cant check just for above. If the batchseg goes into a UMB, the
 11320                                  ; M006; batchseg is always above the transient. We need to change this code
 11321                                  ; M006; to only check for an overlap
 11322                                  
 11323                                  	;;mov	dx,offset TRANGROUP:TranSpaceEnd ; M006
 11324                                  	; 12/02/2023
 11325                                  	;;mov	dx,98C5h ; MSDOS 5.0 COMMAND.COM
 11326                                  	;mov	dx,TRANSPACEEND		
 11327                                  	;add	dx,15		;round up para; M006
 11328 000008E4 BAB6AA                  	mov	dx,TRANSPACEEND+15
 11329                                  
 11330 000008E7 D3EA                    	shr	dx,cl		;para size of transient; M006
 11331 000008E9 01DA                    	add	dx,bx		;dx = top of transient; M006
 11332                                  
 11333 000008EB 39D8                    	cmp	ax,bx		; M006
 11334 000008ED 7211                    	jb	short ENOUGH_MEM
 11335                                  				; Batchseg below transient
 11336                                  				; enough memory ; M006
 11337 000008EF 39D0                    	cmp	ax,dx		; M006
 11338 000008F1 770D                    	ja	short ENOUGH_MEM	
 11339                                  				; Batchseg above transient
 11340                                  				; enough memory ; M006
 11341                                  
 11342                                  ; M006; Batchseg overlaps transient -- insufficient memory
 11343                                  
 11344 000008F3 58                      	pop	ax		; restore ax; M006
 11345                                  
 11346                                  	; 12/02/2023
 11347                                  	; MSDOS 3.3
 11348                                  ; M006;	cmp	ax,bx		;G do we end before the transient
 11349                                  ; M006;	pop	ax		;G get batch segment back
 11350                                  ; M006;	jb	short ENOUGH_MEM ;G we have enough memory - continue
 11351                                  
 11352                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11353 000008F4 06                      	push	es		;G no we're hitting the transient
 11354 000008F5 8EC0                    	mov	es,ax
 11355 000008F7 B80049                  	mov	ax,4900h
 11356                                  	;mov	ax,DEALLOC*256 ; 4900h ;G deallocate the batch segment
 11357 000008FA CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11358                                  			; ES = segment address of area to be freed
 11359 000008FC 07                      	pop	es
 11360                                  MEM_ERROR:
 11361 000008FD E9B800                  	jmp	NO_MEMORY	;G Set up for message and exit
 11362                                  
 11363                                  ENOUGH_MEM:
 11364                                  	; 12/02/2023 - Retro DOS v4.0 COMMAND.COM
 11365                                  	; MSDOS 6.0
 11366 00000900 58                      	pop	ax		; restore ax; M006
 11367                                  
 11368                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11369 00000901 26A3[E701]              	mov	[es:Batch],ax
 11370 00000905 E8DFFE                  	call	ALLOC_TPA
 11371                                  
 11372                                  ; Initialize batch segment
 11373                                  
 11374 00000908 5A                      	pop	dx		; length of name
 11375 00000909 58                      	pop	ax		;G get saved batch segment back
 11376 0000090A 26FF06[4C02]            	inc	word [es:Nest]	;G increment # batch files in progress
 11377 0000090F 06                      	push	es
 11378 00000910 268E06[E701]            	mov	es,[es:Batch]
 11379                                  	;mov	byte [ES:0],0
 11380                                  				; signal batch file type
 11381 00000915 26C606000000            	mov	byte [es:BATCHSEGMENT.BatType],BATCHTYPE ; 0
 11382                                  	;;mov	[es:2],ax	; MSDOS 3.3
 11383                                  				;G save segment of last batch file
 11384                                  	;mov	[es:3],ax	; MSDOS 6.0
 11385 0000091B 26A30300                	mov	[es:BATCHSEGMENT.BatLast],ax
 11386 0000091F 1E                      	push	ds
 11387 00000920 8E1E[159E]              	mov	ds,[RESSEG]	;G set to resident data
 11388                                  
 11389 00000924 31C0                    	xor	ax,ax
 11390 00000926 8A1E[4902]              	mov	bl,[ForFlag]	;G get the current FOR state
 11391                                  	;;mov	[es:6],bl	; MSDOS 3.3
 11392                                  				;G save it in the batch segment
 11393                                  	;mov	[es:7],bl	; MSDOS 6.0 	
 11394 0000092A 26881E0700              	mov	[es:BATCHSEGMENT.BatForFlag],bl
 11395 0000092F F6C3FF                  	test	bl,-1 ; 0FFh	;G are we in a FOR?
 11396 00000932 7406                    	jz	short FOR_NOT_ON ;G no, for segment set to 0	
 11397                                  	;mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11398                                  	;mov	byte [ForFlag],0 ;G reset forflag
 11399                                  	; 26/07/2024
 11400 00000934 A2[4902]                	mov	[ForFlag],al ; 0
 11401 00000937 A1[4A02]                	mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11402                                  FOR_NOT_ON:
 11403                                  	;;mov	[es:4],ax	; MSDOS 3.3
 11404                                  				;G save FOR segment in batch segment
 11405                                  	;mov	[es:5],ax	; MSDOS 6.0		
 11406 0000093A 26A30500                	mov	[es:BATCHSEGMENT.BatForPtr],ax	
 11407 0000093E 31C0                    	xor	ax,ax
 11408 00000940 A3[4A02]                	mov	[ForPtr],ax	;G make sure for segment is not active
 11409 00000943 8A1E[3B02]              	mov	bl,[EchoFlag]
 11410 00000947 1F                      	pop	ds
 11411                                  	;mov	[es:1],bl 
 11412                                  				 ;G save echo state of parent
 11413 00000948 26881E0100              	mov	[es:BATCHSEGMENT.BatEchoFlag],bl
 11414                                  ;SR;
 11415                                  ; Initialize the new BatchEOF flag we have added to 0
 11416                                  
 11417                                  	; MSDOS 6.0
 11418                                  	;mov	byte [es:2],0
 11419 0000094D 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 11420                                  
 11421                                  	;mov	[es:08h],ax  ; MSDOS 6.0
 11422 00000953 26A30800                	mov	[es:BATCHSEGMENT.BatSeek],ax ; point to beginning of file
 11423                                  	;mov	[es:0Ah],ax  ; MSDOS 6.0	
 11424 00000957 26A30A00                	mov	[es:BATCHSEGMENT.BatSeek+2],ax
 11425                                  
 11426                                  ; Initialize pointers
 11427                                  
 11428 0000095B 48                      	dec	ax		; put -1 into AX
 11429                                  	;;mov	di,0Bh  ; MSDOS 3.3
 11430                                  				; point to parm area
 11431                                  	;mov	di,0Ch	; MSDOS 6.0
 11432 0000095C BF0C00                  	mov	di,BATCHSEGMENT.BatParm
 11433 0000095F 89FB                    	mov	bx,di
 11434 00000961 B90A00                  	mov	cx,10
 11435 00000964 F3AB                    	rep stosw		; Init to no parms
 11436                                  
 11437                                  ; Move in batch file name
 11438                                  
 11439 00000966 89D1                    	mov	cx,dx
 11440 00000968 F3A4                    	rep	movsb
 11441                                  
 11442                                  ; Now copy the command line into batch segment, parsing the arguments along
 11443                                  ; the way. Segment will look like this:
 11444                                  ;
 11445                                  ;   <arg0>CR<arg1>CR...<arg9>CR<arg10>CR...<ARGn>CR 0
 11446                                  ;
 11447                                  ; or, in the case of fewer arguments:
 11448                                  ;
 11449                                  ;   <arg0>CR<arg1>CR...<arg6>CR CR CR ... CR 0
 11450                                  
 11451 0000096A BE[769C]                	mov	si,COMBUF+2
 11452                                  	;mov	cx,10		; at most 10 arguments
 11453                                  	; 07/06/2023
 11454 0000096D B10A                    	mov	cl,10
 11455                                  EACHPARM:
 11456 0000096F E8BE21                  	call	scanoff		; skip to argument
 11457                                  
 11458                                  ; AL is first non-delimiter. DS:SI points to char = AL
 11459                                  
 11460 00000972 3C0D                    	cmp	al,0Dh		; end of road?
 11461 00000974 741D                    	jz	short HAVPARM	; yes, no more arguments
 11462                                  
 11463                                  ; If CX = 0 then we have stored the most parm we can. Skip store
 11464                                  
 11465 00000976 E306                    	jcxz	MOVPARM		; Only first 10 parms get pointers
 11466                                  
 11467                                  ; Go into allocated piece and stick in new argument pointer.
 11468                                  
 11469 00000978 26893F                  	mov	[es:bx],di	; store batch pointer
 11470 0000097B 83C302                  	add	bx,2		; advance arg counter
 11471                                  
 11472                                  ; Move the parameter into batch segment
 11473                                  
 11474                                  MOVPARM:
 11475 0000097E AC                      	lodsb			; get byte
 11476 0000097F E8B621                  	call	DELIM		; if delimiter
 11477 00000982 7407                    	jz	short ENDPARM	; then done with parm
 11478 00000984 AA                      	stosb			; store byte
 11479 00000985 3C0D                    	cmp	al,0Dh		; if CR then not delimiter
 11480 00000987 740A                    	jz	short HAVPARM	; but end of parm list, finish
 11481 00000989 EBF3                    	jmp	short MOVPARM
 11482                                  
 11483                                  ; We have copied a parameter up until the first separator.
 11484                                  ; Terminate it with CR.
 11485                                  
 11486                                  ENDPARM:
 11487 0000098B B00D                    	mov	al,0Dh
 11488 0000098D AA                      	stosb
 11489 0000098E E3DF                    	jcxz	EACHPARM	; if no parameters, don't dec
 11490 00000990 49                      	dec	cx		; remember that we've seen one.	
 11491 00000991 EBDC                    	jmp	short EACHPARM
 11492                                  
 11493                                  ; We have parsed the entire line. Terminate the arg list
 11494                                  
 11495                                  HAVPARM:
 11496 00000993 30C0                    	xor	al,al		; Nul terminate the parms
 11497 00000995 AA                      	stosb
 11498                                  
 11499                                  ; Now we know EXACTLY how big the BATCH segment is. Round up size (from DI)
 11500                                  ; into paragraphs and setblock to the appropriate size
 11501                                  
 11502 00000996 8D5D0F                  	lea	bx,[di+15]
 11503 00000999 B104                    	mov	cl,4
 11504 0000099B D3EB                    	shr	bx,cl
 11505 0000099D B44A                    	mov	ah,4Ah
 11506                                  	;mov	ah,SETBLOCK ; 4Ah
 11507 0000099F CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 11508                                  			; ES = segment address of block	to change
 11509                                  			; BX = new size	in paragraphs
 11510 000009A1 07                      	pop	es
 11511 000009A2 06                      	push	es
 11512 000009A3 1F                      	pop	ds		; Simply batch FCB setup
 11513 000009A4 833E[4302]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 11514 000009A9 7506                    	jne	short NOBATSING
 11515 000009AB C706[4302]F0FF          	mov	word [SingleCom],0FFF0h ; Flag single command BATCH job
 11516                                  
 11517                                  NOBATSING:
 11518                                  
 11519                                  ; Enter the batch file with the current echo state
 11520                                  
 11521 000009B1 58                      	pop	ax		; Get original echo state
 11522 000009B2 A2[3B02]                	mov	[EchoFlag],al	; restore it
 11523 000009B5 E94CF7                  	jmp	TCOMMAND
 11524                                  
 11525                                  ; The following is executed if there isn't enough memory for batch segment
 11526                                  
 11527                                  NO_MEMORY:
 11528 000009B8 5A                      	pop	dx		; even up our stack 
 11529 000009B9 58                      	pop	ax
 11530 000009BA 58                      	pop	ax
 11531 000009BB E829FE                  	call	ALLOC_TPA	; reallocate memory
 11532                                  
 11533                                  	; 12/02/2023
 11534                                  	; MSDOS 3.3
 11535                                  	;mov	dx,INSFMEMMESPTR
 11536                                  	;jmp	CERROR
 11537                                  
 11538                                  	; MSDOS 6.0
 11539                                  	;mov	byte [msg_disp_class],1
 11540 000009BE C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class
 11541                                  				;AN000; set up extended error msg class
 11542                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 11543 000009C3 BA[F391]                	mov	dx,extend_buf_ptr
 11544                                  	;			;AC000; get extended message pointer
 11545                                  	;mov	word [extend_buf_ptr],8
 11546 000009C6 C706[F391]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 11547                                  				;AN000; get message number in control block
 11548 000009CC E9D524                  	jmp	cerror		;g print error message and go...
 11549                                  
 11550                                  ; =============== S U B	R O U T	I N E =======================================
 11551                                  
 11552                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11553                                  BATCHOFF:
 11554 000009CF 50                      	push	ax
 11555 000009D0 06                      	push	es
 11556 000009D1 1E                      	push	ds
 11557 000009D2 53                      	push	bx
 11558                                  
 11559 000009D3 2E8E06[159E]            	mov	es,[cs:RESSEG]
 11560                                  	;mov	ds,[cs:RESSEG]
 11561                                  	; 26/07/2024
 11562 000009D8 06                      	push	es
 11563 000009D9 1F                      	pop	ds
 11564                                  
 11565 000009DA A1[E701]                	mov	ax,[Batch]	; Free the batch segment
 11566 000009DD 09C0                    	or	ax,ax
 11567 000009DF 7442                    	jz	short NOTFREE
 11568                                  
 11569 000009E1 06                      	push	es
 11570 000009E2 8EC0                    	mov	es,ax
 11571 000009E4 F606[3B02]01            	test	byte [EchoFlag],1
 11572                                  				;G Is echo on?
 11573 000009E9 7505                    	jnz	short ECHO_LAST_LINE
 11574                                  				;G Yes - echo last line in file
 11575                                  	;mov	byte [SUPPRESS],0
 11576 000009EB C606[3C02]00            	mov	byte [Suppress],NO_ECHO
 11577                                  				;G no - don't echo last line in file	
 11578                                  ECHO_LAST_LINE:
 11579                                  	;mov	bl,[es:1]
 11580 000009F0 268A1E0100              	mov	bl,[es:BATCHSEGMENT.BatEchoFlag]
 11581                                  				; G get echo state
 11582 000009F5 881E[3B02]              	mov	[EchoFlag],bl
 11583                                  				; G  and restore it
 11584                                  	;;mov	bx,[es:4]  ; MSDOS 3.3
 11585                                  	;mov	bx,[es:5]  ; MSDOS 6.0
 11586 000009F9 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr]
 11587                                  				;G Get FOR segment
 11588 000009FE 891E[4A02]              	mov	[ForPtr],bx	;G  and restore it
 11589                                  	;;mov	bl,[es:6]  ; MSDOS 3.3
 11590                                  	;mov	bl,[es:7]  ; MSDOS 6.0	
 11591 00000A02 268A1E0700              	mov	bl,[es:BATCHSEGMENT.BatForFlag]
 11592                                  				;G Get FOR flag
 11593 00000A07 881E[4902]              	mov	[ForFlag],bl
 11594                                  				;G  and restore it
 11595                                  	;;mov	bx,[es:2] ; MSDOS 3.3
 11596                                  	;mov	bx,[es:3] ; MSDOS 6.0	
 11597 00000A0B 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 11598                                  				;G  Get old batch segment
 11599                                  
 11600 00000A10 B449                    	mov	ah,49h
 11601                                  	;mov	ah,DEALLOC ; 49h
 11602 00000A12 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11603                                  			; ES = segment address of area to be freed
 11604 00000A14 07                      	pop	es
 11605 00000A15 891E[5002]              	mov	[Next_Batch],bx	;G reset batch segment	
 11606 00000A19 26FF0E[4C02]            	dec	word [es:Nest]
 11607 00000A1E 31C0                    	xor	ax,ax
 11608 00000A20 A3[E701]                	mov	[Batch],ax	; No batch in progress
 11609                                  NOTFREE:
 11610 00000A23 5B                      	pop	bx
 11611 00000A24 1F                      	pop	ds
 11612 00000A25 07                      	pop	es
 11613 00000A26 58                      	pop	ax
 11614 00000A27 C3                      	retn
 11615                                  
 11616                                  ; =============== S U B	R O U T	I N E =======================================
 11617                                  
 11618                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11619                                  
 11620                                  ; StrCpy - copy string, checking count in CX against COMBUFLEN
 11621                                  ;	Entry : DS:SI ==> source string
 11622                                  ;		ES:DI ==> destination string
 11623                                  ;		CX = current length of destination string
 11624                                  ;	Exit  : string copied, CX updated, Carry set if length limit exceeded
 11625                                  
 11626                                  	; 12/02/2023	
 11627                                  	; MSDOS 3.3
 11628                                  ;STRCPY:
 11629                                  	;push	ax
 11630                                  ;CCYCLE:
 11631                                  	;lodsb
 11632                                  	;stosb
 11633                                  	;or	al,al
 11634                                  	;jnz	short CCYCLE
 11635                                  	;pop	ax
 11636                                  	;retn
 11637                                  
 11638                                  ;Procedure StrCpy,NEAR
 11639                                  
 11640                                  	; 12/02/2023
 11641                                  	; MSDOS 6.0
 11642                                  STRCPY:
 11643 00000A28 50                      	push	ax
 11644                                  ccycle:
 11645 00000A29 AC                      	lodsb
 11646 00000A2A 41                      	inc	cx
 11647                                  	;cmp	cx,128
 11648 00000A2B 81F98000                	cmp	cx,COMBUFLEN
 11649                                  	;jb	short ccopy
 11650                                  	;stc			; set carry to signal error
 11651                                  	;jmp	short ccend
 11652                                  	; 12/02/2023
 11653 00000A2F F5                      	cmc
 11654 00000A30 7205                    	jc	short ccend
 11655                                  ccopy:
 11656 00000A32 AA                      	stosb
 11657 00000A33 08C0                    	or	al,al
 11658 00000A35 75F2                    	jnz	short ccycle
 11659                                  ccend:
 11660 00000A37 49                      	dec	cx		; discount extra byte
 11661 00000A38 4F                      	dec	di		; back up pointer
 11662 00000A39 58                      	pop	ax
 11663 00000A3A C3                      	retn			; return carry clear
 11664                                  
 11665                                  ;EndProc StrCpy
 11666                                  
 11667                                  ;============================================================================
 11668                                  ; TBATCH2.ASM, MSDOS 6.0, 1991
 11669                                  ;============================================================================
 11670                                  ; 12/10/2018 - Retro DOS v3.0
 11671                                  
 11672                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0892h
 11673                                  
 11674                                  ; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11675                                  
 11676                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 0977h
 11677                                  
 11678                                  ; =============== S U B	R O U T	I N E =======================================
 11679                                  
 11680                                  ;Break	<GetBatByt - retrieve a byte from the batch file>
 11681                                  
 11682                                  ; Get one byte from the batch file and return it in AL. End-of-file returns
 11683                                  ; <CR> and ends batch mode. DS must be set to resident segment.
 11684                                  ; AH, DX destroyed.
 11685                                  
 11686                                  GETBATBYT:
 11687 00000A3B 53                      	push	bx
 11688 00000A3C 51                      	push	cx
 11689 00000A3D 1E                      	push	ds
 11690 00000A3E F606[3102]FF            	test	byte [Batch_Abort],-1
 11691                                  	;jnz	short BATEOF
 11692                                  	; 14/02/2023
 11693 00000A43 7403                    	jz	short getbatbyt1
 11694 00000A45 E9D100                  	jmp	BATEOF
 11695                                  getbatbyt1:
 11696 00000A48 F706[E701]FFFF          	test	word [Batch],-1
 11697                                  	;jz	short BATEOF
 11698                                  	; 14/02/2023
 11699 00000A4E 7503                    	jnz	short getbatbyt2
 11700 00000A50 E9C600                  	jmp	BATEOF
 11701                                  getbatbyt2:
 11702 00000A53 06                      	push	es
 11703 00000A54 8E06[E701]              	mov	es,[Batch]
 11704                                  
 11705                                  	; MSDOS 6.0
 11706                                  ;M020;
 11707                                  ;Check if we have already reached EOF (BatchEOF flag set. Then, we do not
 11708                                  ;try to read from the batchfile again.
 11709                                  
 11710                                  	;cmp	byte [es:2],0
 11711 00000A58 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11712                                  				;already reached EOF?	;M020
 11713 00000A5E 7403                    	jz	short not_eof	;no, read batch file	;M020
 11714 00000A60 E99C00                  	jmp	At_EOF		;yes, no more reads	;M020
 11715                                  not_eof:						;M020
 11716                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11717                                  	;add	word [es:8],1	; MSDOS 6.0
 11718 00000A63 268306080001            	add	word [es:BATCHSEGMENT.BatSeek],1
 11719                                  	;adc	word [es:10],0	; MSDOS 6.0
 11720 00000A69 2683160A0000            	adc	word [es:BATCHSEGMENT.BatSeek+2],0
 11721 00000A6F 07                      	pop	es
 11722                                  
 11723                                  ; See if we have bytes buffered...
 11724                                  
 11725 00000A70 8CC8                    	mov	ax,cs
 11726 00000A72 8ED8                    	mov	ds,ax
 11727 00000A74 8B1E[5FAA]              	mov	bx,[BATBUFPOS]
 11728 00000A78 83FBFF                  	cmp	bx,-1
 11729 00000A7B 7540                    	jnz	short UNBUF
 11730                                  
 11731                                  ; There are no bytes in the buffer. Let's try to fill it up.
 11732                                  
 11733 00000A7D BA[61AA]                	mov	dx,BATBUF
 11734 00000A80 8B0E[9797]              	mov	cx,[BATBUFLEN] ; max to read.
 11735 00000A84 8B1E[8BA2]              	mov	bx,[BATHAND]
 11736                                  	; 14/02/2023
 11737 00000A88 B43F                    	mov	ah,3Fh
 11738                                  	;mov	ah,READ ; 3Fh	; Get one more byte from batch file
 11739 00000A8A CD21                    	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 11740                                  			; BX = file handle,CX = number	of bytes to read
 11741                                  			; DS:DX	-> buffer
 11742                                  	; MSDOS 6.0
 11743 00000A8C 7321                    	jnc	short bat_read_ok	;AN022; if no error - continue
 11744                                  	;invoke	get_ext_error_number	;AN022; get the error
 11745 00000A8E E8B317                  	call	get_ext_error_number
 11746 00000A91 1E                      	push	ds			;AN022; save local segment
 11747 00000A92 8E1E[159E]              	mov	ds,[RESSEG]		;AN022; get resident segment
 11748                                  	;assume ds:resgroup		;AN022;
 11749 00000A96 89C2                    	mov	dx,ax			;AN022; put error in DX
 11750                                  	;invoke	output_batch_name	;AN022; set up to print the error
 11751 00000A98 E861FB                  	call	output_batch_name
 11752 00000A9B 1F                      	pop	ds			;AN022;
 11753                                  	;assume	ds:trangroup		;AN022;
 11754                                  	;invoke	std_eprintf		;AN022; print out the error
 11755 00000A9C E8864A                  	call	std_eprintf
 11756                                  	;mov	byte ptr combuf+2,end_of_line_in
 11757 00000A9F C606[769C]0D            	mov	byte [COMBUF+2],END_OF_LINE_IN ; 0Dh
 11758                                  	;				;AN022; terminate the batch line for parsing
 11759                                  	;mov	byte ptr combuf+3,end_of_line_out 
 11760 00000AA4 C606[779C]00            	mov	byte [COMBUF+3],END_OF_LINE_OUT ; 0
 11761                                  	;				;AN022; terminate the batch line for output
 11762                                  ;M020;
 11763                                  ;Old bug! We jump to BatEof from here without ds=RESGROUP. Probably, this
 11764                                  ;error is never hit (and it shouldn't be)
 11765                                  
 11766 00000AA9 8E1E[159E]              	mov	ds,[RESSEG]		; ds = RESGROUP ; M020
 11767 00000AAD EB6A                    	jmp	short BATEOF		;AN022; terminate the batch file
 11768                                  bat_read_ok:				;AN022;
 11769                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11770 00000AAF 89C1                    	mov	cx,ax
 11771                                  	;jcxz	TURN_OFF ; MSDOS 3.3
 11772                                  	; 14/02/2023
 11773 00000AB1 E320                    	jcxz	BATEOFDS ; MSDOS 6.0
 11774 00000AB3 890E[81AA]              	mov	[BATBUFEND],cx
 11775 00000AB7 31DB                    	xor	bx,bx
 11776 00000AB9 891E[5FAA]              	mov	[BATBUFPOS],bx
 11777                                  
 11778                                  	; Buffered bytes!
 11779                                  UNBUF:
 11780 00000ABD 8A87[61AA]              	mov	al,[BATBUF+bx]		; get next byte
 11781 00000AC1 43                      	inc	bx
 11782 00000AC2 3B1E[81AA]              	cmp	bx,[BATBUFEND]		; beyond end of buffer?
 11783 00000AC6 7203                    	jb	short SETBUFPOS
 11784 00000AC8 BBFFFF                  	mov	bx,-1
 11785                                  SETBUFPOS:
 11786 00000ACB 891E[5FAA]              	mov	[BATBUFPOS],bx
 11787 00000ACF 3C1A                    	cmp	al,1Ah			; ^Z for termination?
 11788 00000AD1 7575                    	jne	short GETBYTEDONE
 11789                                  
 11790                                  ;We get here only when we hit an EOF
 11791                                  	
 11792                                  	; MSDOS 6.0
 11793                                  BATEOFDS:
 11794                                  ;SR;
 11795                                  ; HACK!!! A massive hack being put in here to get batch processing to work
 11796                                  ;properly on EOF. Previously, a CR was returned and batch processing turned
 11797                                  ;off the moment we hit an EOF. Unfortunately, if the last line had no CR-LF,
 11798                                  ;batch processing is turned off before the last line is processed and so 
 11799                                  ;this line would never be executed. 
 11800                                  ;   	To fix this, a new flag BatchEOF has been introduced. This flag is
 11801                                  ;set to 4 if there is no CR-LF before the EOF -- this is determined by looking
 11802                                  ;at the buffer contents. If there is no LF ( we assume that presence of LF
 11803                                  ;indicated a CR-LF combination), then we set BatchEOF to 4 and return a 
 11804                                  ;fake CR to the caller. This decrements BatchEOF. On the next call to this
 11805                                  ;routine, BatchEOF is decremented to 2 and a fake lF is returned. On the 
 11806                                  ;third call, BatchEOF becomes zero and batch processing is turned off,
 11807                                  ;now that the last line has been processed. If the EOF is the first char read into the buffer 
 11808                                  ;during this call, and there was a CR-LF previously, we are going to fake
 11809                                  ;another redundant CR-LF. There is no work-around I can think of.
 11810                                  ; 	I would love to restructure this entire routine and its caller to
 11811                                  ;make the flow really easy to understand but I guess this will have to wait.
 11812                                  ;
 11813 00000AD3 06                      	push	es
 11814 00000AD4 8E06[159E]              	mov	es,[RESSEG]
 11815                                  ;SR;
 11816                                  ; If we had already set the BatchEOF flag on a previous call (BatchEOF == 2
 11817                                  ;or BatchEOF == 1 now), then do not do the LF check.
 11818                                  ;
 11819 00000AD8 268E06[E701]            	mov	es,[es:Batch]
 11820                                  	;cmp	byte [es:2],0
 11821 00000ADD 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11822 00000AE3 7516                    	jnz	short crpresent
 11823                                  
 11824                                  	;inc	byte [es:2]
 11825 00000AE5 26FE060200              	inc	byte [es:BATCHSEGMENT.BatchEOF]
 11826                                  					;match the dec following
 11827 00000AEA 8B1E[81AA]              	mov	bx,[BATBUFEND]
 11828 00000AEE 80BF[60AA]0A            	cmp	byte [bx+BATBUF-1],0Ah	;was a LF present?
 11829 00000AF3 7406                    	je	short crpresent		;yes, no need to fake it
 11830                                  
 11831                                  	;add	byte [es:2],3
 11832 00000AF5 268006020003            	add	byte [es:BATCHSEGMENT.BatchEOF],3
 11833                                  					;BatchEOF == 4 to fake CR-LF
 11834                                  crpresent:
 11835                                  ;;	;pop	es
 11836                                  
 11837                                  	;ASSUME	DS:TranGroup
 11838                                  	; 14/02/2023
 11839 00000AFB 8E1E[159E]              	mov	ds,[RESSEG]
 11840                                  	;ASSUME	DS:ResGroup
 11841                                  ;SR;
 11842                                  ; The shift operation is done here to replace the decrement. This is because
 11843                                  ;we can jump to this label directly from above when bogus calls are made to
 11844                                  ;this routine even after batch processing is turned off. The shift ensures
 11845                                  ;maintains the following invariance : 4 -> 2; 2 -> 1 ; 1 -> 0; 0 -> 0. Thus,
 11846                                  ;it is used as a decrement and also as a NOP to just fall through on bogus 
 11847                                  ;calls.
 11848                                  ;	We turn batch processing off if BatchEOF == 1 or BatchEOF == 0.
 11849                                  ;BatchEOF == 1 when we fall through from BatEOFDS and BatchEOF == 0 on a 
 11850                                  ;direct jump to BATEOF. If BatchEOF == 4, we return a fake CR-LF without 
 11851                                  ;turning batch processing off.
 11852                                  
 11853                                  At_EOF:					;new label added ;M020
 11854                                  	;shr	byte [es:2],1
 11855 00000AFF 26D02E0200              	shr	byte [es:BATCHSEGMENT.BatchEOF],1
 11856                                  					;decrement the flag
 11857 00000B04 7412                    	jz	short turn_off		;zero,turn batch off
 11858                                  	;cmp	byte [es:2],1
 11859 00000B06 26803E020001            	cmp	byte [es:BATCHSEGMENT.BatchEOF],1				
 11860 00000B0C 7405                    	jz	short ret_lf		;BatchEOF was 2, return LF
 11861                                  ;
 11862                                  ;BatchEOF == 4, indicates return fake CR now and fake LF next.
 11863                                  ;
 11864 00000B0E B00D                    	mov	al,0Dh			;return fake CR.
 11865 00000B10 07                      	pop	es
 11866 00000B11 EB35                    	jmp	short GETBYTEDONE
 11867                                  ret_lf:
 11868 00000B13 B00A                    	mov	al,0Ah			;return fake LF
 11869 00000B15 07                      	pop	es
 11870 00000B16 EB30                    	jmp	short GETBYTEDONE		
 11871                                  turn_off:
 11872 00000B18 07                      	pop	es
 11873                                  ;BATEOF:
 11874                                  	; MSDOS 3.3
 11875                                  ;TURN_OFF:
 11876                                  	;mov	ds,[RESSEG]
 11877                                  
 11878                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11879                                  BATEOF:
 11880 00000B19 E8B3FE                  	call	BATCHOFF
 11881 00000B1C E8CC02                  	call	BATCLOSE
 11882                                  
 11883                                  ;;;	mov	BatchEOF,0	;make sure BatchEOF = 0
 11884                                  
 11885                                  ;SR; BugBug
 11886                                  ; There is a good reason why this carriage return is being returned here. 
 11887                                  ;This was part of the old code, thanks to some brain-damaged coding. Because,
 11888                                  ;of the way the caller is structured, a fake CR has to be returned again on
 11889                                  ;EOF to ensure the termination of the caller's loop. If echo is on, this
 11890                                  ;results in an extra linefeed after the batchfile is run if the last line of
 11891                                  ;the batchfile already had a CR-LF. 
 11892                                  ;NB: Do not confuse this with the faked CR. The fake CR-LF was to mark
 11893                                  ;the end-of-line. This CR is to mark the end-of-file.
 11894                                  
 11895 00000B1F B00D                    	mov	al,0Dh			; If end-of-file, then end of line
 11896 00000B21 F606[3102]FF            	test	byte [Batch_Abort],-1
 11897 00000B26 C606[3102]00            	mov	byte [Batch_Abort],0
 11898 00000B2B 7407                    	jz	short CONT_GET_BYT
 11899 00000B2D BF[769C]                	mov	di,COMBUF+2		; reset pointer to beginning of buffer
 11900 00000B30 31C9                    	xor	cx,cx			; zero line length
 11901 00000B32 EB14                    	jmp	short GETBYTEDONE
 11902                                  CONT_GET_BYT:
 11903 00000B34 833E[4302]F0            	cmp	word [SingleCom],0FFF0h ; See if we need to set SINGLECOM
 11904 00000B39 750D                    	jne	short GETBYTEDONE
 11905 00000B3B 833E[4C02]00            	cmp	word [Nest],0		;G See if we have nested batch files
 11906 00000B40 7506                    	jnz	short GETBYTEDONE	;G Yes - don't exit just yet
 11907 00000B42 C706[4302]FFFF          	mov	word [SingleCom],0FFFFh	; -1 ; Cause termination
 11908                                  GETBYTEDONE:
 11909 00000B48 1F                      	pop	ds
 11910 00000B49 59                      	pop	cx
 11911 00000B4A 5B                      	pop	bx
 11912 00000B4B C3                      	retn
 11913                                  
 11914                                  ; ---------------------------------------------------------------------------
 11915                                  
 11916                                  ;break	<$If - conditional execution>
 11917                                  
 11918                                  	; 17/04/2023
 11919                                  ;IFERRORP:
 11920                                  ;	pop	ax
 11921                                  ;IFERROR:
 11922                                  ;	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 11923                                  ;FORERROR:
 11924                                  ;	mov	dx,SYNTMES_PTR
 11925                                  ;	jmp	cerror
 11926                                  
 11927                                  ; ---------------------------------------------------------------------------
 11928                                  
 11929                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11930                                  	;
 11931                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11932                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0B69h
 11933                                  _$IF:
 11934                                  	; MSDOS 6.0
 11935                                  ; Turn off any pipes in progress.
 11936 00000B4C 1E                      	push	ds			;AN004; save local DS
 11937 00000B4D 8E1E[159E]              	mov	ds,[RESSEG]		;AN004; get resident segment
 11938                                  	;assume	ds:resgroup		;AN004;
 11939 00000B51 803E[B602]00            	cmp	byte [PipeFiles],0	;AN004; Only turn off if present.
 11940 00000B56 7403                    	jz	short IFNoPipe		;AN004; no pipe - continue
 11941                                  	;invoke	PipeDel 		;AN004; turn off piping
 11942 00000B58 E8E626                  	call	PIPEDEL	
 11943                                  IFNoPipe:				;AN004;
 11944 00000B5B 1F                      	pop	ds			;AN004; get local DS back
 11945                                  	;assume	ds:trangroup		;AN004;
 11946                                  
 11947                                  	; MSDOS 3.3 (&MSDOS 6.0)
 11948 00000B5C C606[289E]00            	mov	byte [IFNOTFLAG],0
 11949 00000B61 C706[33A9]0000          	mov	word [IF_NOT_COUNT],0
 11950 00000B67 BE8100                  	mov	si,81h
 11951                                  IFREENT:
 11952 00000B6A E8C31F                  	call	scanoff
 11953 00000B6D 3C0D                    	cmp	al,0Dh
 11954 00000B6F 743C                    	je	short IFERROR
 11955 00000B71 89F5                    	mov	bp,si
 11956 00000B73 BF[E595]                	mov	di,IFTAB		; Prepare to search if table	
 11957                                  	;mov	ch,0
 11958                                  	; 17/04/2023
 11959 00000B76 30ED                    	xor	ch,ch
 11960                                  IFINDCOM:
 11961 00000B78 89EE                    	mov	si,bp
 11962 00000B7A 8A0D                    	mov	cl,[di]
 11963 00000B7C 47                      	inc	di
 11964 00000B7D E33E                    	jcxz	IFSTRING
 11965 00000B7F EB02                    	jmp	short FIRSTCOMP
 11966                                  IFCOMP:
 11967 00000B81 7510                    	jnz	short IF_DIF
 11968                                  FIRSTCOMP:
 11969 00000B83 AC                      	lodsb
 11970 00000B84 268A25                  	mov	ah,[es:di]
 11971 00000B87 47                      	inc	di
 11972 00000B88 38E0                    	cmp	al,ah
 11973 00000B8A 7405                    	je	short IFLP
 11974 00000B8C 80CC20                  	or	ah,20h			; Try lower case
 11975 00000B8F 38E0                    	cmp	al,ah
 11976                                  IFLP:
 11977 00000B91 E2EE                    	loop	IFCOMP
 11978                                  IF_DIF:
 11979 00000B93 9F                      	lahf
 11980 00000B94 01CF                    	add	di,cx			; Bump to next position without affecting flags
 11981 00000B96 8B1D                    	mov	bx,[di]			; Get handler address
 11982 00000B98 47                      	inc	di
 11983 00000B99 47                      	inc	di
 11984 00000B9A 9E                      	sahf
 11985 00000B9B 75DB                    	jnz	short IFINDCOM
 11986 00000B9D AC                      	lodsb
 11987 00000B9E 3C0D                    	cmp	al,0Dh
 11988                                  IFERRJ:
 11989 00000BA0 740B                    	jz	short IFERROR
 11990 00000BA2 E8931F                  	call	DELIM
 11991 00000BA5 75D1                    	jnz	short IFINDCOM
 11992 00000BA7 E8861F                  	call	scanoff
 11993 00000BAA FFE3                    	jmp	bx
 11994                                  
 11995                                  	; 17/04/2023
 11996                                  IFERRORP:
 11997 00000BAC 58                      	pop	ax
 11998                                  IFERROR:
 11999                                  	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 12000                                  FORERROR:
 12001 00000BAD BA[8B92]                	mov	dx,SYNTMES_PTR
 12002 00000BB0 E9F122                  	jmp	cerror
 12003                                  
 12004                                  IFNOT:
 12005 00000BB3 F616[289E]              	not	byte [IFNOTFLAG]
 12006 00000BB7 FF06[33A9]              	inc	word [IF_NOT_COUNT]
 12007 00000BBB EBAD                    	jmp	short IFREENT
 12008                                  
 12009                                  ; We are comparing two strings for equality. First, find the end of the
 12010                                  ; first string.
 12011                                  
 12012                                  IFSTRING:
 12013 00000BBD 56                      	push	si			; save away pointer for later compare
 12014 00000BBE 31C9                    	xor	cx,cx			; count of chars in first string
 12015                                  FIRST_STRING:
 12016 00000BC0 AC                      	lodsb				; get character
 12017 00000BC1 3C0D                    	cmp	al,0Dh			; end of line?
 12018 00000BC3 74E7                    	jz	short IFERRORP		; yes => error
 12019 00000BC5 E8701F                  	call	DELIM			; is it a delimiter?
 12020 00000BC8 7403                    	jz	short EQUAL_CHECK 	; yes, go find equal sign
 12021 00000BCA 41                      	inc	cx			; remember 1 byte for the length
 12022 00000BCB EBF3                    	jmp	short FIRST_STRING 	; go back for more
 12023                                  EQUAL_CHECK:
 12024 00000BCD 3C3D                    	cmp	al,'='			; is char we have an = sign?
 12025 00000BCF 7407                    	je	short EQUAL_CHECK2 	; yes, go find second one.
 12026 00000BD1 3C0D                    	cmp	al,0Dh			; end of line?
 12027 00000BD3 74D7                    	je	short IFERRORP		; yes, syntax error
 12028 00000BD5 AC                      	lodsb				; get next char
 12029 00000BD6 EBF5                    	jmp	short EQUAL_CHECK
 12030                                  
 12031                                  ; The first = has been found. The next char had better be an = too.
 12032                                  
 12033                                  EQUAL_CHECK2:
 12034 00000BD8 AC                      	lodsb				; get potential = char
 12035 00000BD9 3C3D                    	cmp	al,'='			; is it good?	
 12036                                  	;jnz	short IFERRPJ		; no, error
 12037                                  	; 17/04/2023
 12038 00000BDB 75CF                    	jne	short IFERRORP
 12039                                  
 12040                                  ; Find beginning of second string.
 12041                                  
 12042 00000BDD E8501F                  	call	scanoff
 12043 00000BE0 3C0D                    	cmp	al,0Dh
 12044                                  	;jz	short IFERRPJ
 12045                                  	; 17/04/2023
 12046 00000BE2 74C8                    	je	short IFERRORP
 12047 00000BE4 5F                      	pop	di
 12048                                  
 12049                                  ; DS:SI points to second string
 12050                                  ; CX has number of chars in first string
 12051                                  ; ES:DI points to first string
 12052                                  
 12053 00000BE5 F3A6                    	repe	cmpsb
 12054 00000BE7 7414                    	jz	short MATCH		; match found!
 12055                                  
 12056                                  ; No match. Let's find out what was wrong. The character that did not match
 12057                                  ; has been advanced over. Let's back up to it.
 12058                                  
 12059 00000BE9 4E                      	dec	si
 12060                                  
 12061                                  ; If it is EOL, then syntax error
 12062                                  
 12063 00000BEA 803C0D                  	cmp	byte [si],0Dh
 12064                                  	;jz	short IFERRJ
 12065                                  	; 17/04/2023
 12066 00000BED 74BE                    	je	short IFERROR
 12067                                  
 12068                                  ; Advance pointer over remainder of unmatched text to next delimiter
 12069                                  
 12070                                  SKIPSTRINGEND:
 12071 00000BEF AC                      	lodsb
 12072                                  NOTMATCH:
 12073 00000BF0 3C0D                    	cmp	al,0Dh
 12074                                  IFERRORJ2:
 12075                                  	;jz	short IFERRJ
 12076                                  	; 17/04/2023
 12077 00000BF2 74B9                    	jz	short IFERROR
 12078 00000BF4 E8411F                  	call	DELIM
 12079 00000BF7 75F6                    	jnz	short SKIPSTRINGEND
 12080                                  
 12081                                  ; Signal that we did NOT have a match
 12082                                  
 12083 00000BF9 B0FF                    	mov	al,-1	 ; 0FFh
 12084 00000BFB EB37                    	jmp	short IFRET
 12085                                  
 12086                                  	; 17/04/2023
 12087                                  ;IFERRPJ:
 12088                                  	;jmp	IFERRORP
 12089                                  
 12090                                  ; The compare succeeded. Was the second string longer than the first?
 12091                                  ; We do this by seeing if the next char is a delimiter.
 12092                                  
 12093                                  MATCH:
 12094 00000BFD AC                      	lodsb
 12095 00000BFE E8371F                  	call	DELIM
 12096 00000C01 75ED                    	jnz	short NOTMATCH ; not same.
 12097 00000C03 30C0                    	xor	al,al
 12098 00000C05 EB2D                    	jmp	short IFRET
 12099                                  
 12100                                  ; ---------------------------------------------------------------------------
 12101                                  
 12102                                  IFEXISTS:
 12103                                  
 12104                                  IFEXIST_ATTR	EQU	ATTR_HIDDEN+ATTR_SYSTEM  ; 2+4 = 6
 12105                                  
 12106                                  ;MOREDELIM:
 12107 00000C07 AC                      	lodsb
 12108 00000C08 E82D1F                  	call	DELIM
 12109 00000C0B 75FA                    	jnz	short IFEXISTS
 12110                                  	;jnz	short MOREDELIM
 12111                                  
 12112 00000C0D BA[50A0]                	mov	dx,DIRBUF
 12113 00000C10 B8001A                  	mov	ax,1A00h
 12114                                  	;mov	ax,Set_DMA*256 ; 1A00h
 12115 00000C13 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 12116                                  			; DS:DX	-> disk	transfer buffer
 12117 00000C15 BB0200                  	mov	bx,2	; if(0) [|not](|1) exist[1|2] file(2|3)
 12118 00000C18 031E[33A9]              	add	bx,[IF_NOT_COUNT]
 12119                                  	;mov	ax,ARG_ARGV
 12120                                  	;mov	ax,ARG+ARG_UNIT.argv
 12121 00000C1C B8[E7A2]                	mov	ax,ARG
 12122 00000C1F E8802A                  	call	argv_calc		; convert arg index to pointer
 12123 00000C22 8B17                    	mov	dx,[bx]
 12124                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 12125                                  	;mov	cx,6
 12126 00000C24 B90600                  	mov	cx,IFEXIST_ATTR ; filetypes to search for
 12127 00000C27 B8004E                  	mov	ax,4E00h
 12128                                  	;mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 12129 00000C2A CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 12130                                  			; CX = search attributes
 12131                                  			; DS:DX	-> ASCIZ filespec
 12132                                  			; (drive,path, and wildcards allowed)
 12133 00000C2C 7204                    	jc	short IF_EX_C ; carry is how to determine error
 12134 00000C2E 30C0                    	xor	al,al
 12135 00000C30 EB02                    	jmp	short IFRET
 12136                                  
 12137                                  	;nop
 12138                                  IF_EX_C:
 12139 00000C32 B0FF                    	mov	al,-1	; 0FFh	; false 'n' fall through...
 12140                                  IFRET:
 12141 00000C34 F606[289E]FF            	test	byte [IFNOTFLAG],-1 ; 0FFh
 12142 00000C39 7402                    	jz	short REALTEST
 12143 00000C3B F6D0                    	not	al
 12144                                  REALTEST:
 12145 00000C3D 08C0                    	or	al,al
 12146 00000C3F 7403                    	jz	short IFTRUE
 12147 00000C41 E9C0F4                  	jmp	TCOMMAND
 12148                                  
 12149                                  IFTRUE:
 12150 00000C44 E8E91E                  	call	scanoff
 12151 00000C47 89F1                    	mov	cx,si
 12152 00000C49 81E98100                	sub	cx,81h
 12153 00000C4D 280E8000                	sub	[80h],cl
 12154 00000C51 8A0E8000                	mov	cl,[80h]
 12155 00000C55 880E[759C]              	mov	[COMBUF+1],cl
 12156 00000C59 BF[769C]                	mov	di,COMBUF+2
 12157 00000C5C FC                      	cld
 12158 00000C5D F3A4                    	rep	movsb
 12159 00000C5F B00D                    	mov	al,0Dh
 12160 00000C61 AA                      	stosb
 12161                                  
 12162                                  ; Signal that an IF was done. 
 12163                                  ; This prevents the redirections from getting lost.
 12164                                  
 12165 00000C62 1E                      	push	ds
 12166 00000C63 8E1E[159E]              	mov	ds,[RESSEG]
 12167 00000C67 C606[4802]FF            	mov	byte [IfFlag],-1
 12168 00000C6C 1F                      	pop	ds
 12169                                  
 12170                                  ; Go do the command
 12171                                  
 12172                                  	;jmp	DOCOM1 ; MSDOS 5.0 COMMAND.COM
 12173                                  	; 07/06/2023
 12174                                  	; Retro DOS v4.2 COMMAND.COM
 12175 00000C6D E983F6                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 12176                                  
 12177                                  ; ---------------------------------------------------------------------------
 12178                                  
 12179                                  IFERRORJ3:
 12180 00000C70 EB80                    	jmp	IFERRORJ2
 12181                                  
 12182                                  IFERLEV:
 12183 00000C72 B70A                    	mov	bh,10
 12184 00000C74 30DB                    	xor	bl,bl
 12185                                  GETNUMLP:
 12186 00000C76 AC                      	lodsb
 12187 00000C77 3C0D                    	cmp	al,0Dh
 12188 00000C79 74F5                    	je	short IFERRORJ3
 12189 00000C7B E8BA1E                  	call	DELIM
 12190 00000C7E 740C                    	jz	short GOTNUM
 12191 00000C80 2C30                    	sub	al,'0'
 12192 00000C82 86C3                    	xchg	al,bl
 12193 00000C84 F6E7                    	mul	bh
 12194 00000C86 00D8                    	add	al,bl
 12195 00000C88 86C3                    	xchg	al,bl
 12196 00000C8A EBEA                    	jmp	short GETNUMLP
 12197                                  GOTNUM:
 12198 00000C8C 1E                      	push	ds
 12199 00000C8D 8E1E[159E]              	mov	ds,[RESSEG]
 12200 00000C91 8A26[3802]              	mov	ah,[RetCode]
 12201 00000C95 1F                      	pop	ds
 12202 00000C96 30C0                    	xor	al,al
 12203 00000C98 38DC                    	cmp	ah,bl
 12204 00000C9A 7398                    	jnb	short IFRET
 12205 00000C9C FEC8                    	dec	al
 12206 00000C9E EB94                    	jmp	short IFRET
 12207                                  
 12208                                  ; ---------------------------------------------------------------------------
 12209                                  
 12210                                  ; Shift the parameters in the batch structure by 1 and set up the new argument.
 12211                                  ; This is a NOP if no batch in progress.
 12212                                  
 12213                                  _SHIFT:
 12214 00000CA0 8E1E[159E]              	mov	ds,[RESSEG]
 12215 00000CA4 A1[E701]                	mov	ax,[Batch]		; get batch pointer
 12216 00000CA7 09C0                    	or	ax,ax			; in batch mode?
 12217 00000CA9 7501                    	jnz	short SHIFT1		; yes, operate in batch segment	
 12218                                  SHIFT_RETN:				; no, done.
 12219 00000CAB C3                      	retn
 12220                                  SHIFT1:
 12221 00000CAC 8EC0                    	mov	es,ax
 12222 00000CAE 8ED8                    	mov	ds,ax
 12223                                  
 12224                                  ; Now move the batch args down by 1 word
 12225                                  
 12226                                  	;;mov	di,0Bh ; MSDOS 3.3 COMMAND.COM
 12227                                  	;mov	di,0Ch ; MSDOS 5.0 COMMAND.COM
 12228 00000CB0 BF0C00                  	mov	di,BATCHSEGMENT.BatParm ; point to parm table
 12229 00000CB3 8D7502                  	lea	si,[di+2]		; make source = dest + 2
 12230 00000CB6 B90900                  	mov	cx,9			; move 9 parameters
 12231 00000CB9 F3A5                    	rep	movsw			; SHIFT down
 12232                                  
 12233                                  ; If the last parameter (the one not moved) is empty (= -1) then we are done.
 12234                                  ; We have copied it into the previous position.
 12235                                  
 12236 00000CBB 833DFF                  	cmp	word [di],-1	; if last one was not in use then
 12237 00000CBE 74EB                    	je	short SHIFT_RETN ; No new parm
 12238                                  
 12239                                  ; This last pointer is NOT nul. Get it and scan to find the next argument.
 12240                                  ; Assume, first, that there is no next argument.
 12241                                   
 12242 00000CC0 8B35                    	mov	si,[di]
 12243 00000CC2 C705FFFF                	mov	word [di],-1		; Assume no parm
 12244                                  
 12245                                  ; The parameters are CR separated. Scan for end of this parm.
 12246                                  
 12247                                  SKIPCRLP:
 12248 00000CC6 AC                      	lodsb
 12249 00000CC7 3C0D                    	cmp	al,0Dh
 12250 00000CC9 75FB                    	jne	short SKIPCRLP
 12251                                  
 12252                                  ; We are now pointing at next arg. If it is 0 (end of original line) then we
 12253                                  ; are finished. There are no more parms and the pointer has been previously
 12254                                  ; initialized to indicate it.
 12255                                  
 12256 00000CCB 803C00                  	cmp	byte [si],0
 12257 00000CCE 74DB                    	jz	short SHIFT_RETN 	; End of parms
 12258 00000CD0 8935                    	mov	[di],si			; Pointer to next parm as %9
 12259 00000CD2 C3                      	retn
 12260                                  
 12261                                  ; =============== S U B	R O U T	I N E =======================================
 12262                                  
 12263                                  ; Skip delim reads bytes from the batch file until a non-delimiter is seen.
 12264                                  ; returns char in AL, carry set -> eof
 12265                                  
 12266                                  SKIPDELIM:
 12267 00000CD3 F706[E701]FFFF          	test	word [Batch],-1		; batch file empty. OOPS!
 12268 00000CD9 740A                    	jz	short SKIPERR
 12269 00000CDB E85DFD                  	call	GETBATBYT		; get a char
 12270 00000CDE E8571E                  	call	DELIM			; check for ignoreable chars
 12271 00000CE1 74F0                    	jz	short SKIPDELIM		; ignore this char.
 12272 00000CE3 F8                      	clc
 12273 00000CE4 C3                      	retn
 12274                                  SKIPERR:
 12275 00000CE5 F9                      	stc
 12276                                  GOTO_RETN:
 12277 00000CE6 C3                      	retn
 12278                                  
 12279                                  ; ---------------------------------------------------------------------------
 12280                                  
 12281                                  ;  CALL is an internal command that transfers control to a .bat, .exe, or
 12282                                  ;  .com file. This routine strips the CALL off the command line, sets
 12283                                  ;  the CALL_FLAG to indicate a call in progress, and returns control to
 12284                                  ;  DOCOM1 in TCODE to reprocess the command line and execute the file
 12285                                  ;  being CALLed.
 12286                                  
 12287                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12288                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0C27h
 12289                                  
 12290                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12291                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0D01h
 12292                                  _$CALL:
 12293                                  
 12294                                  ;  strip off CALL from command line
 12295                                  
 12296                                  	;ASSUME DS:trangroup,ES:trangroup
 12297                                  
 12298 00000CE7 56                      	push	si
 12299 00000CE8 57                      	push	di
 12300 00000CE9 50                      	push	ax
 12301 00000CEA 51                      	push	cx
 12302 00000CEB BE[769C]                	mov	si,COMBUF+2
 12303 00000CEE E83F1E                  	call	scanoff			;get to first non-delimeter
 12304                                  	;add	si,4
 12305 00000CF1 83C604                  	add	si,length_call		;point to char past CALL
 12306 00000CF4 BF[769C]                	mov	di,COMBUF+2
 12307                                  	;mov	cx,124		
 12308 00000CF7 B97C00                  	mov	cx,COMBUFLEN-length_call 
 12309                                  					;get length of buffer
 12310 00000CFA F3A4                    	rep	movsb			;move it
 12311 00000CFC 59                      	pop	cx
 12312 00000CFD 58                      	pop	ax
 12313 00000CFE 5F                      	pop	di
 12314 00000CFF 5E                      	pop	si
 12315                                  
 12316                                  ;  set call flag to indicate call in progress
 12317                                  
 12318 00000D00 1E                      	push	ds
 12319 00000D01 8E1E[159E]              	mov	ds,[RESSEG]
 12320 00000D05 C606[4E02]01            	mov	byte [Call_Flag],call_in_progress ; 1
 12321 00000D0A C606[4F02]01            	mov	byte [Call_Batch_Flag],call_in_progress ; 1
 12322                                  
 12323                                  ; Turn off any pipes in progress.
 12324                                  
 12325 00000D0F 803E[B602]00            	cmp	byte [PipeFiles],0 	; Only turn off if present.
 12326 00000D14 7403                    	jz	short _NOPIPE
 12327 00000D16 E82825                  	call	PIPEDEL
 12328                                  _NOPIPE:
 12329 00000D19 1F                      	pop	ds
 12330 00000D1A C3                      	retn
 12331                                  
 12332                                  ; ---------------------------------------------------------------------------
 12333                                  
 12334                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12335                                  _GOTO:
 12336 00000D1B 8E1E[159E]              	mov	ds,[RESSEG]
 12337 00000D1F F706[E701]FFFF          	test	word [Batch],-1	; If not in batch mode, a nop
 12338 00000D25 74BF                    	jz	short GOTO_RETN
 12339 00000D27 31D2                    	xor	dx,dx
 12340 00000D29 1E                      	push	ds
 12341 00000D2A 8E1E[E701]              	mov	ds,[Batch]
 12342                                  	;mov	[8],dx	; MSDOS 5.0 COMMAND.COM
 12343 00000D2E 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; Back to start
 12344                                  	;mov	[10],dx	; MSDOS 5.0 COMMAND.COM
 12345 00000D32 89160A00                	mov	[BATCHSEGMENT.BatSeek+2],dx ; Back to start
 12346                                  
 12347                                  	; MSDOS 6.0
 12348                                  ;M037
 12349                                  ; Clear EOF indicator because we have reseeked to the beginning of the file.
 12350                                  ;
 12351 00000D36 C606020000              	mov	byte [BATCHSEGMENT.BatchEOF],0
 12352                                  					; clear eof indicator ;M037
 12353                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12354 00000D3B 1F                      	pop	ds
 12355                                  GOTOOPEN:
 12356 00000D3C E875F8                  	call	PROMPTBAT
 12357                                  	;mov	di,5Dh
 12358 00000D3F BF5D00                  	mov	di,FCB+1		; Get the label
 12359 00000D42 B90B00                  	mov	cx,11
 12360 00000D45 B020                    	mov	al,' '
 12361 00000D47 F2AE                    	repne	scasb
 12362 00000D49 7501                    	jnz	short NOINC
 12363 00000D4B 41                      	inc	cx
 12364                                  NOINC:
 12365 00000D4C 83E90B                  	sub	cx,11
 12366 00000D4F F7D9                    	neg	cx
 12367                                  	;mov	[cs:GOTOLEN],cx
 12368                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12369 00000D51 26890E[50A0]            	mov	[es:GOTOLEN],cx	; MSDOS 5.0 (& 6.0)
 12370                                  
 12371                                  ; At beginning of file. Skip to first non-delimiter char
 12372                                  
 12373 00000D56 E87AFF                  	call	SKIPDELIM
 12374 00000D59 721C                    	jb	short BADGOTO
 12375 00000D5B 3C3A                    	cmp	al,':'
 12376 00000D5D 7426                    	jz	short CHKLABEL
 12377                                  LABLKLP:				; Look for the label
 12378 00000D5F E8D9FC                  	call	GETBATBYT
 12379 00000D62 3C0A                    	cmp	al,0Ah
 12380 00000D64 7509                    	jne	short LABLKTST
 12381                                  
 12382                                  ; At beginning of line. Skip to first non-delimiter char
 12383                                  
 12384 00000D66 E86AFF                  	call	SKIPDELIM
 12385 00000D69 720C                    	jb	short BADGOTO
 12386 00000D6B 3C3A                    	cmp	al,':'
 12387 00000D6D 7416                    	je	short CHKLABEL
 12388                                  LABLKTST:
 12389 00000D6F F706[E701]FFFF          	test	word [Batch],0FFFFh ; -1
 12390 00000D75 75E8                    	jnz	short LABLKLP
 12391                                  BADGOTO:
 12392 00000D77 E87100                  	call	BATCLOSE
 12393                                  
 12394                                  	; MSDOS 6.0
 12395                                  ;SR;
 12396                                  ; At this point we are terminating without freeing up any nested batch 
 12397                                  ;segments i.e if the error occurred within a called batch file. This routine
 12398                                  ;will traverse the linked list of batch segments and free all of them.
 12399                                  ;
 12400 00000D7A E8BB00                  	call	free_batch		; free up nested batch segments
 12401                                  
 12402                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12403 00000D7D 0E                      	push	cs
 12404 00000D7E 1F                      	pop	ds
 12405 00000D7F BA[8892]                	mov	dx,BADLAB_PTR
 12406 00000D82 E91F21                  	jmp	cerror
 12407                                  
 12408                                  ; Found the :.	Skip to first non-delimiter char
 12409                                  
 12410                                  CHKLABEL:
 12411 00000D85 E84BFF                  	call	SKIPDELIM
 12412 00000D88 72ED                    	jb	short BADGOTO
 12413 00000D8A BF5D00                  	mov	di,FCB+1 ; 5Dh
 12414                                  	;mov	cx,[cs:GOTOLEN]
 12415                                  	; 14/02/2023
 12416 00000D8D 268B0E[50A0]            	mov	cx,[es:GOTOLEN]	 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12417 00000D92 EB05                    	jmp	short GOTBYTE
 12418                                  
 12419                                  NEXTCHRLP:
 12420 00000D94 51                      	push	cx
 12421 00000D95 E8A3FC                  	call	GETBATBYT
 12422 00000D98 59                      	pop	cx
 12423                                  GOTBYTE:
 12424                                  	; 18/03/2023
 12425                                  	; 14/02/2023
 12426                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CD9h
 12427 00000D99 E8751B                  	call	testkanj
 12428 00000D9C 7413                    	jz	short NOTKANJ1
 12429 00000D9E 263A05                  	cmp	al,[es:di]
 12430 00000DA1 75CC                    	jne	short LABLKTST
 12431 00000DA3 47                      	inc	di
 12432 00000DA4 49                      	dec	cx
 12433 00000DA5 E3C8                    	jcxz	LABLKTST
 12434 00000DA7 51                      	push	cx
 12435 00000DA8 E890FC                  	call	GETBATBYT
 12436 00000DAB 59                      	pop	cx
 12437 00000DAC 263A05                  	cmp	al,[es:di]
 12438 00000DAF EB0C                    	jmp	short KNEXTLABCHR
 12439                                  NOTKANJ1:
 12440                                  	; 14/02/2023
 12441                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CF1h
 12442 00000DB1 0C20                    	or	al,20h
 12443 00000DB3 263A05                  	cmp	al,[es:di]
 12444                                  	;jne	short TRYUPPER
 12445                                  	;jmp	short NEXTLABCHR
 12446                                  	; 25/04/2023
 12447 00000DB6 7407                    	je	short NEXTLABCHR 
 12448                                  TRYUPPER:
 12449 00000DB8 2C20                    	sub	al,20h
 12450 00000DBA 263A05                  	cmp	al,[es:di]
 12451                                  KNEXTLABCHR:
 12452 00000DBD 75B0                    	jnz	short LABLKTST
 12453                                  NEXTLABCHR:
 12454 00000DBF 47                      	inc	di
 12455 00000DC0 E2D2                    	loop	NEXTCHRLP
 12456 00000DC2 E876FC                  	call	GETBATBYT
 12457                                  	; 14/02/2023
 12458 00000DC5 26833E[50A0]08          	cmp	word [es:GOTOLEN],8 ;  MSDOS 5.0 (& 6.0) COMMAND.COM
 12459                                  	;cmp	word [cs:GOTOLEN],8 ; Is the label at least 8 chars long?
 12460 00000DCB 7D04                    	jge	short GOTOCONT	; Yes, then the next char doesn't matter
 12461 00000DCD 3C20                    	cmp	al,' '
 12462 00000DCF 779E                    	ja	short LABLKTST
 12463                                  GOTOCONT:
 12464 00000DD1 3C0D                    	cmp	al,0Dh
 12465 00000DD3 7407                    	je	short SKIPLFEED
 12466                                  TONEXTBATLIN:
 12467 00000DD5 E863FC                  	call	GETBATBYT
 12468 00000DD8 3C0D                    	cmp	al,0Dh
 12469 00000DDA 75F9                    	jne	short TONEXTBATLIN
 12470                                  SKIPLFEED:
 12471 00000DDC E85CFC                  	call	GETBATBYT
 12472                                  
 12473                                  	; MSDOS 6.0
 12474                                  ;SR;
 12475                                  ; The BatchEOF flag is set in GetBatByt to indicate that we are faking a 
 12476                                  ;CR-LF for the last line. On a goto, this flag has to be cleared, because
 12477                                  ;BatchEOF == 1 now, after returning a CR-LF. The next call to GetBatByt
 12478                                  ;to get the EOF has not been made yet because we encountered the Goto. On
 12479                                  ;all other cases, EOF will be hit while trying to read the next line and
 12480                                  ;we are fine. I know, I know, what a massive hack from hell!! God help us!!
 12481                                  ;
 12482 00000DDF 06                      	push	es
 12483 00000DE0 8E06[E701]              	mov	es,[Batch]
 12484 00000DE4 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 12485                                  					;invalidate fake CR-LF flag
 12486 00000DEA 07                      	pop	es
 12487                                  
 12488                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12489                                  	;call	BATCLOSE
 12490                                  	;retn
 12491                                  	; 14/02/2023
 12492                                  	;jmp	short BATCLOSE
 12493                                  
 12494                                  ; =============== S U B	R O U T	I N E =======================================
 12495                                  
 12496                                  BATCLOSE:
 12497 00000DEB 2E8B1E[8BA2]            	mov	bx,[cs:BATHAND]
 12498 00000DF0 83FB05                  	cmp	bx,5
 12499 00000DF3 7204                    	jb	short CLOSERETURN
 12500                                  	; 14/02/2023
 12501 00000DF5 B43E                    	mov	ah,3Eh
 12502                                  	;mov	ah,CLOSE ; 3Eh
 12503 00000DF7 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 12504                                  			; BX = file handle
 12505                                  CLOSERETURN:
 12506 00000DF9 C606[3002]00            	mov	byte [In_Batch],0 ; reset flag	
 12507 00000DFE C3                      	retn
 12508                                  
 12509                                  ; =============== S U B	R O U T	I N E =======================================
 12510                                  
 12511                                  ; Open the BATCH file, If open fails, AL is drive of batch file (A=1)
 12512                                  ; Also, fills internal batch buffer. If access denied, then AX = -1
 12513                                  
 12514                                  	; 14/02/2023
 12515                                  BATOPEN:
 12516 00000DFF 1E                      	push	ds
 12517 00000E00 8E1E[E701]              	mov	ds,[Batch]
 12518                                  	;;mov	dx,1Fh	; MSDOS 3.3 COMMAND.COM
 12519                                  	;mov	dx,20h	; MSDOS 5.0 COMMAND.COM
 12520 00000E04 BA2000                  	mov	dx,BATCHSEGMENT.BatFile
 12521 00000E07 B8003D                  	mov	ax,3D00h
 12522                                  	;mov	ax,(OPEN<<8) ; 3D00h ; Open the batch file
 12523 00000E0A CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 12524                                  			; DS:DX	-> ASCIZ filename
 12525                                  			; AL = access mode
 12526                                  			; 0 - read
 12527 00000E0C 721C                    	jc	short SETERRDL
 12528                                  	;mov	dx,[8]
 12529 00000E0E 8B160800                	mov	dx,[BATCHSEGMENT.BatSeek]
 12530                                  	;mov	cx,[10]
 12531 00000E12 8B0E0A00                	mov	cx,[BATCHSEGMENT.BatSeek+2]
 12532 00000E16 1F                      	pop	ds
 12533                                  	;mov	[cs:BATHAND],ax
 12534 00000E17 26A3[8BA2]              	mov	[es:BATHAND],ax ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12535 00000E1B 89C3                    	mov	bx,ax
 12536 00000E1D B80042                  	mov	ax,4200h
 12537                                  	;mov	ax,(LSEEK<<8) ; 4200h ; Go to the right spot
 12538 00000E20 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 12539                                  			; AL = method: offset from beginning of	file
 12540                                  
 12541                                  	;mov	word [cs:BATBUFPOS],-1 ; 0FFFFh
 12542                                  					; nuke batch buffer position
 12543 00000E22 26C706[5FAA]FFFF        	mov	word [es:BATBUFPOS],-1 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12544                                  BATOPEN_RETN:
 12545 00000E29 C3                      	retn
 12546                                  
 12547                                  SETERRDL:
 12548 00000E2A 89D3                    	mov	bx,dx
 12549                                  	; MSDOS 6.0
 12550                                  	;invoke	get_ext_error_number 	;AN022; get the extended error
 12551                                  	; 14/02/2023
 12552 00000E2C E81514                  	call	get_ext_error_number
 12553 00000E2F 89C2                    	mov	dx,ax		     	;AN022; save extended error in DX
 12554                                  
 12555                                  	; MSDOS 3.3
 12556                                  	;mov	dx,INSERTDSKPTR
 12557                                  	;call	GET_EXT_ERR_NUMBER
 12558                                  
 12559                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12560 00000E31 8A07                    	mov	al,[bx]			; Get drive spec
 12561 00000E33 2C40                    	sub	al,'@'	; sub al,40h	; A = 1
 12562 00000E35 1F                      	pop	ds
 12563 00000E36 F9                      	stc				; SUB mucked over carry
 12564 00000E37 C3                      	retn
 12565                                  
 12566                                  ; =============== S U B	R O U T	I N E =======================================
 12567                                  
 12568                                  ;Free_batch : This routine traverses the linked batch segments freeing all
 12569                                  ;the batch and FOR segments until all of them are freed. It also restores
 12570                                  ;the old state of the EchoFlag.
 12571                                  ;
 12572                                  ;	ENTRY:	ds = RESGROUP
 12573                                  ;
 12574                                  ;	EXIT: 	All batch & FOR segments freed.
 12575                                  ;		EchoFlag restored to old state before batch process.
 12576                                  ;
 12577                                  ;	REGISTERS AFFECTED: bx, cx
 12578                                  
 12579                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12580                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0D7Eh
 12581                                  
 12582                                  free_batch: ;proc near
 12583                                  	;assume	ds:RESGROUP,es:nothing
 12584                                  
 12585 00000E38 06                      	push	es
 12586 00000E39 8B1E[5002]              	mov	bx,[Next_Batch]
 12587 00000E3D 09DB                    	or	bx,bx
 12588 00000E3F 7431                    	jz	short fb_ret
 12589                                  _ClearBatch:
 12590 00000E41 8EC3                    	mov	es,bx			; get batch segment
 12591                                  	;mov	bx,es:BatForPtr		; get old FOR segment
 12592 00000E43 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
 12593                                  	;cmp	bx,0			; is a FOR in progress
 12594                                  	; 27/07/2024
 12595 00000E48 21DB                    	and	bx,bx
 12596 00000E4A 7408                    	jz	short no_bat_for	; no - don't deallocate
 12597 00000E4C 06                      	push	es			;
 12598 00000E4D 8EC3                    	mov	es,bx			; yes - free it up...
 12599 00000E4F B449                    	mov	ah,49h
 12600                                  	;mov	ah,DEALLOC		;
 12601 00000E51 CD21                    	int	21h			;
 12602 00000E53 07                      	pop	es			; restore to batch segment
 12603                                  no_bat_for:
 12604                                  	;mov	cl,[es:1]
 12605 00000E54 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag]
 12606                                  					; get old echo flag
 12607                                  	;mov	bx,[es:3]
 12608 00000E59 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 12609                                  					; get old batch segment
 12610 00000E5E B449                    	mov	ah,49h
 12611                                  	;mov	ah,DEALLOC		; free it up...
 12612 00000E60 CD21                    	int	21h
 12613                                  	; 14/02/2023
 12614                                  	;mov	[Batch],bx		; get ready to deallocate next batch
 12615 00000E62 FF0E[4C02]              	dec	word [Nest]		; is there another batch file?
 12616 00000E66 75D9                    	jnz	short _ClearBatch	; keep going until no batch file
 12617                                  	
 12618 00000E68 880E[3B02]              	mov	[EchoFlag],cl		;restore echo status
 12619 00000E6C C706[E701]0000          	mov	word [Batch],0		;no batch process in progress
 12620                                  fb_ret:
 12621 00000E72 07                      	pop	es
 12622 00000E73 C3                      	ret
 12623                                  
 12624                                  ;free_batch endp
 12625                                  
 12626                                  ;============================================================================
 12627                                  ; TFOR.ASM, MSDOS 6.0, 1991
 12628                                  ;============================================================================
 12629                                  ; 10/10/2018 - Retro DOS v3.0
 12630                                  
 12631                                  ; All batch proccessing has DS set to segment of resident portion
 12632                                  ;ASSUME DS:RESGROUP,ES:TRANGROUP
 12633                                  
 12634                                  ; MSDOS 3.3 COMMAND.COM, transient portion/segment offset 0BE9h
 12635                                  
 12636                                  ; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12637                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:0DBFh
 12638                                  
 12639                                  ; ---------------------------------------------------------------------------
 12640                                  
 12641                                  	; 15/02/2023
 12642                                  FORTERM:
 12643                                  	; MSDOS 6.0
 12644 00000E74 0E                      	push	cs			;AN037; Get local segment into
 12645 00000E75 1F                      	pop	ds			;AN037;  DS, ES
 12646 00000E76 0E                      	push	cs			;AN037;
 12647 00000E77 07                      	pop	es			;AN037;
 12648                                  
 12649                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12650 00000E78 E89502                  	call	FOROFF
 12651                                  	;mov	ds,[cs:RESSEG]
 12652 00000E7B 268E1E[159E]            	mov	ds,[es:RESSEG] ; 15/02/2023 - MSDOS 5.0
 12653 00000E80 813E[4302]00FF          	cmp	word [SingleCom],0FF00h
 12654 00000E86 750F                    	jne	short BAT_CRLF
 12655 00000E88 833E[4C02]00            	cmp	word [Nest],0		;See if we have nested batch files
 12656 00000E8D 7508                    	jne	short BAT_CRLF		;Yes - don't exit just yet
 12657 00000E8F C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause a terminate
 12658 00000E95 EB12                    	jmp	short NOFORP2
 12659                                  BAT_CRLF:
 12660 00000E97 F606[3B02]01            	test	byte [EchoFlag],1 	; Is echo on?
 12661 00000E9C 740B                    	jz	short NOFORP2		; no - exit
 12662 00000E9E F706[E701]FFFF          	test	word [Batch],-1 ; 0FFFFh
 12663                                  					; print CRLF if in batch
 12664 00000EA4 7403                    	jz	short NOFORP2
 12665 00000EA6 E87A1C                  	call	CRLF2
 12666                                  NOFORP2:
 12667 00000EA9 E958F2                  	jmp	TCOMMAND
 12668                                  
 12669                                  ; ---------------------------------------------------------------------------
 12670                                  
 12671                                  ;------
 12672                                  ;   For-loop processing. For loops are of the form:
 12673                                  ;	    for %<loop-variable> in (<list>) do <command>
 12674                                  ; where <command> may contain references of the form %<variable>, which are
 12675                                  ; later substituted with the items in <list>. The for-loop structure is
 12676                                  ; set-up by the procedure '$for'; successive calls to 'forproc' execute
 12677                                  ; <command> once for each item in <list>. All of the information needed for
 12678                                  ; loop processing is stored on a piece of memory gotten from 'alloc'. This
 12679                                  ; structure is actually fairly large, on the order of 700 bytes, and includes
 12680                                  ; a complete copy of the original command-line structure as parsed by
 12681                                  ; 'parseline', loop control variables, and a dma buffer for the
 12682                                  ; 'FindFirst/FindNext' expansion of wildcard filenames in <list>. When loop
 12683                                  ; processing has completed, this chunk of memory is returned to the system.
 12684                                  ;
 12685                                  ;   All of the previously defined variables, in 'datares', used for loop
 12686                                  ; processing may be erased. Only one, (DW) ForPtr, need be allocated.
 12687                                  ;
 12688                                  ;   The error message, 'for_alloc_mes', should be moved into the file
 12689                                  ; containing all of the other error messages.
 12690                                  ;
 12691                                  ;   Referencing the allocated for-loop structure is a little tricky.
 12692                                  ; At the moment, a byte is defined as part of a new segment, 'for_segment'.
 12693                                  ; When 'forproc' actually runs, ES and DS are set to point to the base of the
 12694                                  ; new chunk of memory.	References to this byte, 'f', thus assemble correctly
 12695                                  ; as offsets of ES or DS. 'f' would not be necessary, except that the
 12696                                  ; assembler translates an instruction such as 'mov AX, [for_minarg]' as an
 12697                                  ; immediate move of the offset of 'for_minarg' into AX. In other words, in
 12698                                  ; terms of PDP-11 mnemonics, the assembler ACTUALLY assembles
 12699                                  ;	mov  AX, #for_minarg 	; AX := 02CA (for example)
 12700                                  ; instead of
 12701                                  ;	mov  AX, for_minarg	; AX := [02CA] (contents of 02CA)
 12702                                  ; By using 'f', we pretend that we are actually referencing an allocated
 12703                                  ; structure, and the assembler coughs up the code we want. Notice that it
 12704                                  ; doesn't matter whether we put brackets around the location or not -- the
 12705                                  ; assembler is "smart" enough to know that we want an address instead of the
 12706                                  ; contents of that location.
 12707                                  ;
 12708                                  ;   Finally, there now exists the potential to easily implement nested loops.
 12709                                  ; One method would be to have a link field in each for-structure pointing to
 12710                                  ; its parent.  Variable references that couldn't be resolved in the local
 12711                                  ; frame would cause a search of prior frames. For-structures would still be
 12712                                  ; allocated and released in exactly the same fashion. The only limit on the
 12713                                  ; number of nested loops would be memory size (although at 700 bytes a pop,
 12714                                  ; memory wouldn't last THAT long). Alternately, a small structure could be
 12715                                  ; maintained in the resident data area. This structure would be an array of
 12716                                  ; control-variable names and pointers to for-structure blocks. This would
 12717                                  ; greatly speed up the resolution of non-local variable references. However,
 12718                                  ; since space in the resident is precious, we would have to compromise on a
 12719                                  ; "reasonable" level of nesting -- 10, 16, 32 levels, whatever. For-structure
 12720                                  ; allocation and de-allocation would have to be modified slightly to take this
 12721                                  ; new structure into account.
 12722                                  ;
 12723                                  ;   Oops, just one more thing. Forbuf need not be a part of the for-structure.
 12724                                  ; It could just as well be one structure allocated in 'transpace'. Actually,
 12725                                  ; it may be easier to allocate it as part of 'for_segment'.
 12726                                  ;------
 12727                                  		; include fordata.asm
 12728                                  
 12729                                  ; Data structure definitions included by tfor.asm
 12730                                  
 12731                                  struc FOR_INFO
 12732 00000000 <res 444h>                .FOR_ARGS:	  resb  ARG_UNIT.SIZE	; argv[] structure 
 12733 00000444 ??                        .FOR_COM_START: resb  1		; beginning of <command>
 12734 00000445 ????                      .FOR_EXPAND:	  resw  1		; * or ? item in <list>?
 12735 00000447 ????                      .FOR_MINARG:	  resw  1		; beginning of <list>
 12736 00000449 ????                      .FOR_MAXARG:	  resw  1		; end of <list>
 12737 0000044B <res 80h>                 .FORBUF:	  resw  64		; temporary buffer
 12738 000004CB <res 80h>                 .FORDMA:	  resw  64		; FindFirst/Next buffer
 12739 0000054B ??                        .FOR_VAR:	  resb  1		; loop control variable
 12740                                    .size:
 12741                                  endstruc
 12742                                  					; ARG_UNIT.SIZE = 1348 (544h)
 12743                                  					; ARG_UNIT.SIZE = 1092 ; 27/07/2024
 12744                                  _$FOR_EXIT:
 12745 00000EAC EBC6                    	jmp	short FORTERM		; exceeding maxarg means all done
 12746                                  
 12747                                  ; ---------------------------------------------------------------------------
 12748                                  
 12749                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12750                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12751                                  	;	     & Retro DOS v4.2 COMMAND.COM (2024 modification)
 12752                                  FORPROC:
 12753 00000EAE A1[4A02]                	mov	ax,[ForPtr]
 12754 00000EB1 8ED8                    	mov	ds,ax
 12755 00000EB3 8EC0                    	mov	es,ax			; operate in for-info area
 12756                                  	;;mov	dx,5CBh	; MSDOS 5.0 & 6.22
 12757                                  	;mov	dx,4CBh ; PCDOS 7.1 ; 27/07/2024
 12758 00000EB5 BACB04                  	mov	dx,FOR_INFO.FORDMA	; 1348+1+2+2+2+128 = 1483 = 5CBh
 12759                                  		; PCDOS 7.1 COMMAND.COM ; 1092+1+2+2+2+128 = 1227 = 4CBh
 12760 00000EB8 B8001A                  	mov	ax,1A00h
 12761                                  	;mov	ax,Set_DMA*256 ; 1A00h
 12762 00000EBB CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 12763                                  			; DS:DX	-> disk	transfer buffer
 12764                                  FOR_BEGIN:
 12765                                  	;;cmp	word [545h],0
 12766                                  	;cmp	word [445h] ; 27/07/2024
 12767 00000EBD 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12768 00000EC2 7404                    	jz	short FOR_BEGIN1
 12769                                  					; non-zero for_expand equals FALSE
 12770                                  	;;inc	word [547h]
 12771                                  	;inc	word [447h] ; 27/07/2024
 12772 00000EC4 FF064704                	inc	word [FOR_INFO.FOR_MINARG]
 12773                                  FOR_BEGIN1:
 12774                                  	;mov	bx,[447h] ; 27/07/2024
 12775 00000EC8 8B1E4704                	mov	bx,[FOR_INFO.FOR_MINARG] ; current item in <list> to examine
 12776                                  	;cmp	bx,[449h] ; 27/07/2024
 12777 00000ECC 3B1E4904                	cmp	bx,[FOR_INFO.FOR_MAXARG]
 12778 00000ED0 7FDA                     	jg	short _$FOR_EXIT	; exceeding maxarg means all done
 12779                                  	;mov	ax,0
 12780 00000ED2 B80000                  	mov	ax,FOR_INFO.FOR_ARGS ; 0 
 12781 00000ED5 E8CA27                  	call	argv_calc		; compute argv[x] address
 12782                                  	;mov	cx,[bx+3]
 12783 00000ED8 8B4F03                  	mov	cx,[bx+ARGV_ELE.argstartel]
 12784 00000EDB 8B17                    	mov	dx,[bx]
 12785                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 12786                                  	;test	byte [bx+2],4		; Is there a path separator in this arg?
 12787 00000EDD F6470204                	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 12788 00000EE1 7512                    	jnz	short FORSUB		; Yes, argstartel should be correct
 12789 00000EE3 8B37                    	mov	si,[bx]
 12790                                  	;mov	si,[bx+ARGV_ELE.argpointer]
 12791                                  
 12792                                  	;mov	al,[cs:LPAREN]
 12793                                  	; 15/02/2023
 12794                                  	; MSDOS 6.0 (& 5.0) COMMAND.com
 12795                                  	;mov	al,'('	; mov al,lparen
 12796                                  	;cmp	[si-1],	al		; If the current token is the first
 12797                                  	; 27/07/2024
 12798 00000EE5 807CFF28                	cmp	byte [si-1],'('
 12799 00000EE9 750A                    	jne	short FORSUB		;  one in the list and originally had
 12800 00000EEB 41                      	inc	cx			;  the opening paren as its first char,
 12801                                  					;  the argstartel ptr needs to be
 12802                                  					;  advanced passed it before the prefix
 12803                                  					;  length is computed.
 12804                                  	;mov	al,':'
 12805                                  	;cmp	[si+1],	al		; If the token begins with "(d:",
 12806                                  	; 27/07/2024
 12807 00000EEC 807C013A                	cmp	byte [si+1],':'
 12808 00000EF0 7503                    	jne	short FORSUB		;  argstartel has to be moved over the
 12809 00000EF2 83C102                  	add	cx,2			;  rest of the prefix as well.
 12810                                  FORSUB:
 12811 00000EF5 29D1                    	sub	cx,dx			; compute length of pathname prefix
 12812                                  	;;cmp	word [545h],0
 12813                                  	;cmp	word [445h],0 ; 27/07/2024
 12814 00000EF7 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12815                                  					; are we still expanding a name?
 12816 00000EFC 7416                    	jz	short FOR_FIND_NEXT
 12817                                  					; if so, get next matching filename
 12818                                  	;test	byte [bx+2],2
 12819 00000EFE F6470202                	test	byte [bx+ARGV_ELE.argflags],2 ; wildcard
 12820 00000F02 7505                    	jnz	short FOR_FIND_FIRST
 12821                                  					; should we expand THIS (new) arg?
 12822                                  	;mov	cx,[bx+5]
 12823                                  					; else, just copy all of it directly
 12824 00000F04 8B4F05                  	mov	cx,[bx+ARGV_ELE.arglen]
 12825 00000F07 EB1D                    	jmp	short FOR_SMOOSH
 12826                                  
 12827                                  	;nop
 12828                                  	; 15/02/2023
 12829                                  FOR_FIND_FIRST:
 12830 00000F09 51                      	push	cx
 12831 00000F0A 31C9                    	xor	cx,cx
 12832 00000F0C B8004E                  	mov	ax,4E00h
 12833                                  	;mov	ax,Find_First*256 ; 4E00h
 12834 00000F0F CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 12835                                  			; CX = search attributes
 12836                                  			; DS:DX	-> ASCIZ filespec
 12837                                  			; (drive,path, and wildcards allowed)
 12838 00000F11 59                      	pop	cx
 12839 00000F12 EB05                    	jmp	short FOR_RESULT
 12840                                  
 12841                                  	;nop
 12842                                  FOR_FIND_NEXT:
 12843 00000F14 B8004F                  	mov	ax,4F00h
 12844                                  	;mov	ax,Find_Next*256 ;4F00h
 12845 00000F17 CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 12846                                  			; [DTA]	= data block from
 12847                                  			; last AH = 4Eh/4Fh call
 12848                                  FOR_RESULT:
 12849 00000F19 B8FFFF                  	mov	ax,-1 ; 0FFFFh		; assume worst case
 12850 00000F1C 7201                    	jc	short FOR_CHECK
 12851                                  	; 15/02/2023
 12852 00000F1E 40                      	inc	ax ; ax = 0
 12853                                  	;mov	ax,0			; Find* returns 0 for SUCCESS
 12854                                  FOR_CHECK:				; record success of findfirst/next
 12855                                  	;;mov	[545h],ax
 12856                                  	;mov	[445h],ax ; 27/07/2024
 12857 00000F1F A34504                  	mov	[FOR_INFO.FOR_EXPAND],ax
 12858 00000F22 09C0                    	or	ax,ax			; anything out there?
 12859 00000F24 7597                    	jnz	short FOR_BEGIN		; if not, try next arg
 12860                                  FOR_SMOOSH:
 12861                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 12862 00000F26 8B37                    	mov	si,[bx] 		; copy argv[arg][0,CX] into destbuf
 12863                                  	;;mov	di,54Bh	; MSDOS 5.0 & 6.22 COMMAND.COM
 12864                                  	;mov	di,44Bh ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12865 00000F28 BF4B04                  	mov	di,FOR_INFO.FORBUF	; some days this will be the entire
 12866 00000F2B F3A4                    	rep	movsb			; arg, some days just the path prefix
 12867                                  					
 12868 00000F2D 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12869                                  					; if we're not expanding, we can
 12870 00000F32 7509                    	jnz	short FOR_MAKE_COM 	; skip the following
 12871                                  	; 15/02/2023
 12872                                  	;;mov	si,05E9h ; MSDOS 3.3 & 5.0 & 6.22 COMMAND.COM ; 27/07/2024
 12873                                  	; 27/07/2024
 12874                                  	;mov	si,04E9h ; PCDOS 7.1 COMMAND.COM
 12875 00000F34 BEE904                  	mov	si,FOR_INFO.FORDMA+FIND_BUF.PNAME ; 14/10/2018
 12876                                  FOR_MORE:
 12877                                  	;cmp	byte [si],0		; tack on matching filename
 12878                                  	;jz	short FOR_MAKE_COM
 12879                                  	;movsb
 12880                                  	;jnz	short FOR_MORE
 12881                                  	; 25/04/2023
 12882 00000F37 AC                      	lodsb
 12883 00000F38 AA                      	stosb
 12884 00000F39 08C0                    	or	al,al
 12885 00000F3B 75FA                    	jnz	short FOR_MORE
 12886                                  FOR_MAKE_COM:
 12887                                  	; 25/04/2023
 12888                                  	;xor	al,al			; tack a null byte onto the end
 12889                                  	;stosb				; of the substitute string
 12890 00000F3D 31C9                    	xor	cx,cx			; character count for command line
 12891 00000F3F F7D1                    	not	cx			; negate it -- take advantage of loopnz
 12892 00000F41 31DB                    	xor	bx,bx			; argpointer
 12893 00000F43 BF[769C]                	mov	di,COMBUF+2
 12894                                  	; 15/02/2023
 12895                                  	;;mov	bl,[544h] ; MSDOS 5.0-6.22 ; 27/07/2024
 12896                                  	; 27/07/2024
 12897                                  	;mov	bl,[444h] ; PCDOS 7.1 COMMAND.COM 
 12898 00000F46 8A1E4404                	mov	bl,[FOR_INFO.FOR_COM_START] ; argindex
 12899                                  	;;mov	dh,[64Bh]
 12900                                  	;mov	dh,[54Bh] ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12901 00000F4A 8A364B05                	mov	dh,[FOR_INFO.FOR_VAR]
 12902                                  					; %<for-var> is replaced by [forbuf]
 12903 00000F4E 0E                      	push	cs			; time to form the <command> string
 12904 00000F4F 07                      	pop	es
 12905                                  	;assume ES:trangroup
 12906                                  	;mov	ax,FOR_INFO.FOR_ARGS
 12907 00000F50 B80000                  	mov	ax,0			; translate offset to pointer
 12908 00000F53 E84C27                  	call	argv_calc
 12909                                  	;mov	si,[bx+9]
 12910 00000F56 8B7709                  	mov	si,[bx+ARGV_ELE.arg_ocomptr]
 12911                                  					; mov ptr passed beginning space
 12912 00000F59 46                      	inc	si
 12913                                  FOR_MAKE_LOOP:
 12914 00000F5A 8A04                    	mov	al,[si]			; the <command> arg, byte by byte
 12915 00000F5C 46                      	inc	si
 12916 00000F5D 3C25                    	cmp	al,'%'			; looking for %<control-variable>
 12917 00000F5F 7514                    	jne	short FOR_STOSB 	; no % ... add byte to string
 12918 00000F61 3834                    	cmp	[si],dh			; got the right <variable>?
 12919 00000F63 7510                    	jnz	short FOR_STOSB		; got a %, but wrong <variable>
 12920 00000F65 46                      	inc	si			; skip over <for-variable>
 12921                                  
 12922 00000F66 56                      	push	si
 12923                                  	; 15/02/2023
 12924                                  	;;mov	si,54Bh	; MSDOS 5.0-6.22 ; 27/07/2024
 12925                                  	; 27/07/2024
 12926                                  	;mov	si,44Bh ; PCDOS 7.1 COMMAND.COM
 12927 00000F67 BE4B04                  	mov	si,FOR_INFO.FORBUF
 12928                                  					; substitute the <item> for <variable>
 12929                                  					; to make a final <command> to execute
 12930                                  SLOOP:					
 12931 00000F6A AC                      	lodsb				; grab all those <item> bytes, and
 12932 00000F6B AA                      	stosb				; add 'em to the <command> string,
 12933 00000F6C 08C0                    	or	al,al			; until we run into a null
 12934 00000F6E E0FA                    	loopne	SLOOP
 12935 00000F70 4F                      	dec	di			; adjust length and <command> pointer
 12936 00000F71 41                      	inc	cx			; so we can overwrite the null
 12937 00000F72 5E                      	pop	si
 12938 00000F73 EBE5                    	jmp	short FOR_MAKE_LOOP
 12939                                  					; got back for more <command> bytes
 12940                                  FOR_STOSB:
 12941 00000F75 AA                      	stosb				; take a byte from the <command> arg
 12942 00000F76 49                      	dec	cx			; and put it into the <command> to be
 12943                                  					; executed (and note length, too)
 12944 00000F77 3C0D                    	cmp	al,0Dh
 12945 00000F79 75DF                    	jne	short FOR_MAKE_LOOP	; If not done, loop.
 12946                                  FOR_MADE_COM:
 12947 00000F7B F6D1                    	not	cl
 12948                                  	;mov	[cs:COMBUF+1],cl
 12949                                  	;mov	ds,[cs:RESSEG]
 12950                                  	; 15/02/2023 - Retro DOS v4.0 COMMAND.COM
 12951                                  	; MSDOS 5.0 COMMAND.COM
 12952 00000F7D 26880E[759C]            	mov	[es:COMBUF+1],cl
 12953 00000F82 268E1E[159E]            	mov	ds,[es:RESSEG]
 12954                                  	;assume DS:resgroup
 12955 00000F87 F606[3B02]01            	test	byte [EchoFlag],1 	; shall we echo this <command>, dearie?
 12956 00000F8C 742F                    	jz	short NOECHO3
 12957                                  	;cmp	byte [NullFlag],nullcommand
 12958 00000F8E 803E[5202]01            	cmp	byte [NullFlag],1 	;G was there a command last time?
 12959 00000F93 7403                    	jz	short NO_CRLF_PR  	;G no - don't print crlf
 12960                                  
 12961 00000F95 E88B1B                  	call	CRLF2		  	;G Print out prompt
 12962                                  NO_CRLF_PR:
 12963 00000F98 C606[5202]00            	mov	byte [NullFlag],0 	;G reset no command flag
 12964 00000F9D 0E                      	push	cs
 12965 00000F9E 1F                      	pop	ds
 12966 00000F9F 57                      	push	di
 12967 00000FA0 E84213                  	call	PRINT_PROMPT	  	;G Prompt the user
 12968 00000FA3 5F                      	pop	di
 12969                                  
 12970 00000FA4 26C645FF00              	mov	byte [es:di-1],0  	; yeah, PRINT it out...	
 12971 00000FA9 C706[37A1][769C]        	mov	word [string_ptr_2],COMBUF+2
 12972                                  	; 17/04/2023
 12973 00000FAF BA[BA93]                	mov	dx,string_buf_ptr
 12974 00000FB2 E87845                  	call	std_printf
 12975 00000FB5 26C645FF0D              	mov	byte [es:di-1],0Dh
 12976 00000FBA E933F3                  	jmp	DOCOM		  	; run silent, run deep...
 12977                                  NOECHO3:
 12978 00000FBD C606[5202]00            	mov	byte [NullFlag],0
 12979 00000FC2 0E                      	push	cs
 12980 00000FC3 1F                      	pop	ds
 12981                                  	;jmp	DOCOM1
 12982                                  	; 07/06/2023
 12983                                  	; Retro DOS v4.2 COMMAND.COM
 12984 00000FC4 E92CF3                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 12985                                  
 12986                                  FORNESTERRJ:				; no multi-loop processing... yet!
 12987 00000FC7 E84601                  	call	FOROFF
 12988 00000FCA E92901                  	jmp	FORNESTERR
 12989                                  
 12990                                  ; ---------------------------------------------------------------------------
 12991                                  
 12992                                  FORERRORJ:
 12993 00000FCD E9DDFB                  	jmp	FORERROR
 12994                                  
 12995                                  ; ---------------------------------------------------------------------------
 12996                                  
 12997                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F24h
 12998                                  
 12999                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 13000                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0FFEh
 13001                                  
 13002                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13003                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1040h
 13004                                  _$FOR:
 13005 00000FD0 8E06[159E]              	mov	es,[RESSEG]
 13006 00000FD4 26803E[4902]00          	cmp	byte [es:ForFlag],0 ; is another one already running?
 13007 00000FDA 75EB                    	jnz	short FORNESTERRJ   ; if flag is set.... boom!
 13008                                  
 13009                                  ; Turn off any pipes in progress.
 13010                                  
 13011 00000FDC 26803E[B602]00          	cmp	byte [es:PipeFiles],0 ; Only turn off if present.
 13012 00000FE2 7403                    	jz	short NO_PIPE
 13013 00000FE4 E85A22                  	call	PIPEDEL
 13014                                  NO_PIPE:
 13015 00000FE7 31D2                    	xor	dx,dx			; counter (0 <= DX < argvcnt)
 13016 00000FE9 E8F400                  	call	NEXTARG			; move to next argv[n]
 13017 00000FEC 72DF                    	jc	short FORERRORJ		; no more args -- bad forloop
 13018 00000FEE 3C25                    	cmp	al,'%'			; next arg MUST start with '%'...
 13019 00000FF0 75DB                    	jne	short FORERRORJ
 13020 00000FF2 89C5                    	mov	bp,ax			; save forloop variable
 13021 00000FF4 AC                      	lodsb
 13022 00000FF5 08C0                    	or	al,al			; and MUST end immediately...
 13023 00000FF7 75D4                    	jnz	short FORERRORJ
 13024 00000FF9 E8E400                  	call	NEXTARG			; let's make sure the next arg is 'in'
 13025 00000FFC 72CF                    	jb	short FORERRORJ
 13026                                  	;and	ax,0DFDFh
 13027 00000FFE 25DFDF                  	and	ax,~2020h		; uppercase the letters
 13028                                  	; 15/02/2023
 13029                                  	;cmp	ax,4E49h  	; MSDOS 5.0
 13030                                  	;cmp	ax,[IN_WORD] 	; MSDOS 3.3
 13031                                  	;cmp	ax,in_word	; MSDOS 5.0
 13032 00001001 3D494E                  	cmp	ax,'IN'
 13033 00001004 75C7                    	jnz	short FORERRORJ
 13034 00001006 AC                      	lodsb
 13035                                  
 13036                                  	; 15/02/2023
 13037                                  	; MSDOS 3.3
 13038                                  	;or	al,al			; it, too, must end right away
 13039                                  	;jz	short CHECKLPAREN
 13040                                  	;cmp	al,[LPAREN]
 13041                                  	;jnz	short FORERRORJ
 13042                                  	;;add	word [bx+ARGV_ELE.argpointer],2 ; add word [bx+0],2
 13043                                  	;add	word [bx],2
 13044                                  	;;add	word [bx+9],2
 13045                                  	;add	word [bx+ARGV_ELE.arg_ocomptr],2
 13046                                  	;;sub	word [bx+5],2
 13047                                  	;sub	word [bx+ARGV_ELE.arglen],2
 13048                                  	;mov	ax,[si-1]
 13049                                  	;jmp	short LPCHECK
 13050                                  
 13051                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13052                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Bh
 13053                                  
 13054                                  	; MSDOS 6.0
 13055                                  ; Compaq bug fix -- exit from this loop on error
 13056                                  
 13057 00001007 08C0                    	or	al,al
 13058 00001009 75C2                    	jne	short FORERRORJ		; jump on error
 13059                                  
 13060                                  ;	je	short CHECKLPAREN
 13061                                  ;
 13062                                  ; Not null. Perhaps there are no spaces between this and the (:
 13063                                  ;   FOR %i in(foo bar...
 13064                                  ; Check for the Lparen here
 13065                                  ;
 13066                                  ;;	cmp	al,lparen
 13067                                  ;;	jnz	short FORERRORJ
 13068                                  ;
 13069                                  ; The token was in(... We strip off the "in" part to simulate a separator
 13070                                  ; being there in the first place.
 13071                                  ;
 13072                                  ;;	add	word [bx+ARGV_ELE.argpointer],2 ; advance source pointer
 13073                                  ;;	add	word [bx+ARGV_ELE.arg_ocomptr],2
 13074                                  ;;						; advance original string
 13075                                  ;;	sub	word [bx+ARGV_ELE.arglen],2 	; decrement the appropriate length
 13076                                  ;
 13077                                  ; SI now points past the in(.  Simulate a nextarg call that results in the
 13078                                  ; current value.
 13079                                  ;
 13080                                  ;;	mov	ax,[si-1]		; get lparen and next char
 13081                                  ;;	jmp	short LPCHECK
 13082                                  ;
 13083                                  ; end of Compaq bug fix
 13084                                  
 13085                                  ; ---------------------------------------------------------------------------
 13086                                  
 13087                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13088                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Fh
 13089                                  
 13090                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13091                                  CHECKLPAREN:
 13092 0000100B E8D200                  	call	NEXTARG			; lparen delimits beginning of <list>
 13093 0000100E 72BD                    	jc	short FORERRORJ
 13094                                  LPCHECK:
 13095                                  	; 15/02/2023
 13096                                  	; MSDOS 5.0 (% MSDOS 6.0)
 13097                                  	;;cmp	al,[LPAREN]
 13098                                  	;cmp	al,lparen
 13099 00001010 3C28                    	cmp	al,'('
 13100 00001012 75B9                    	jne	short FORERRORJ
 13101 00001014 80FC00                  	cmp	ah,0
 13102 00001017 7410                    	je	short FOR_PAREN_TOKEN
 13103                                  	;;cmp	ah,[RPAREN]		; special case:  null list
 13104                                  	;cmp	ah,rparen
 13105 00001019 80FC29                  	cmp	ah,')'
 13106 0000101C 7503                    	jne	short FOR_LIST_NOT_EMPTY
 13107 0000101E E953FE                  	jmp	FORTERM
 13108                                  FOR_LIST_NOT_EMPTY:
 13109                                  	;inc	word [bx+ARGV_ELE.argpointer] ; inc word [bx+0]
 13110 00001021 FF07                    	inc	word [bx]		; Advance ptr past "("
 13111                                  	;dec	word [bx+5]		; Adjust the rest of this argv entry
 13112 00001023 FF4F05                  	dec	word [bx+ARGV_ELE.arglen] ; to agree.
 13113 00001026 46                      	inc	si			; Inc si so check for ")" works
 13114 00001027 EB0D                    	jmp	short FOR_LIST
 13115                                  
 13116                                  	;nop
 13117                                  FOR_PAREN_TOKEN:
 13118 00001029 E8B400                  	call	NEXTARG			; what have we in our <list>?
 13119 0000102C 729F                    	jc	short FORERRORJ
 13120                                  	; 15/02/2023
 13121                                  	;;;cmp	ax,[RPAREN+1]
 13122                                  	;;cmp	ax,[NULLRPAREN]		; special case:  null list
 13123                                  	;cmp	ax,nullrparen
 13124 0000102E 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 13125 00001031 7503                    	jne	short FOR_LIST
 13126 00001033 E93EFE                  	jmp	FORTERM
 13127                                  
 13128                                  ;FORERORJJ:
 13129                                  	;jmp	FORERROR
 13130                                  
 13131                                  FOR_LIST:				; skip over rest of <list>
 13132 00001036 89D1                    	mov	cx,dx			; first arg of <list>
 13133                                  
 13134                                  SKIP_LIST:
 13135                                  	;add	si,[bx+5]
 13136 00001038 037705                  	add	si,[bx+ARGV_ELE.arglen]
 13137 0000103B 83EE03                  	sub	si,3			; si = ptr to last char of token
 13138                                  	; 15/02/2023
 13139                                  	;;mov	al,[RPAREN]
 13140                                  	;mov	al,rparen
 13141 0000103E B029                    	mov	al,')'
 13142 00001040 3804                    	cmp	[si],al			; Is this the last element in <list>
 13143 00001042 7408                    	je	short FOR_END_LIST 	; Yes, exit loop.
 13144 00001044 E89900                  	call	NEXTARG			; No, get next arg <list>
 13145                                  	;jc	short FORERORJJ		; If no more and no rparen, error.
 13146                                  	;jmp	short SKIP_LIST
 13147                                  	; 15/02/2023
 13148 00001047 73EF                    	jnc	short SKIP_LIST
 13149                                  
 13150                                  	; 15/02/2023
 13151                                  FORERORJJ:
 13152 00001049 E961FB                  	jmp	FORERROR
 13153                                  
 13154                                  FOR_END_LIST:
 13155 0000104C 89D7                    	mov	di,dx			; record position of last arg in <list>
 13156 0000104E C60400                  	mov	byte [si],0		; Zap the rparen
 13157                                  	; 15/02/2023
 13158                                  	;;;cmp	ax,[RPAREN+1]
 13159                                  	;;cmp	ax,[NULLRPAREN] 	; Was this token only a rparen
 13160                                  	;cmp	ax,nullparen
 13161 00001051 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 13162 00001054 7401                    	je	short FOR_DO		; Yes, continue
 13163 00001056 47                      	inc	di			; No, inc position of last arg
 13164                                  FOR_DO:
 13165 00001057 E88600                  	call	NEXTARG			; now we had BETTER find a 'do'...
 13166 0000105A 72ED                    	jc	short FORERORJJ
 13167                                  	;and	ax,0DFDFh
 13168 0000105C 25DFDF                  	and	ax,~2020h		; uppercase the letters
 13169                                  	; 15/02/2023
 13170                                  	;;cmp	ax,[DO_WORD]
 13171                                  	;cmp	ax,do_word ; 4F44h
 13172 0000105F 3D444F                  	cmp	ax,'DO'	 ; 4F44h
 13173 00001062 75E5                    	jne	short FORERORJJ
 13174 00001064 AC                      	lodsb
 13175 00001065 08C0                    	or	al,al			; and it had BETTER be ONLY a 'do'...
 13176 00001067 75E0                    	jnz	short FORERORJJ
 13177                                  		
 13178 00001069 E87400                  	call	NEXTARG			; on to the beginning of <command>
 13179 0000106C 72DB                    	jc	short FORERORJJ		; null <command> not legal
 13180                                  
 13181 0000106E 50                      	push	ax
 13182 0000106F 53                      	push	bx
 13183 00001070 51                      	push	cx
 13184 00001071 52                      	push	dx			; preserve registers against disaster
 13185 00001072 57                      	push	di
 13186 00001073 56                      	push	si
 13187 00001074 55                      	push	bp
 13188 00001075 E85FF7                  	call	FREE_TPA		; need to make free memory, first
 13189 00001078 E89500                  	call	FOROFF
 13190                                  	;mov	bx,264
 13191 0000107B BB0801                  	mov	bx,FOR_INFO.size-ARG_UNIT.SIZE
 13192 0000107E E84229                  	call	SAVE_ARGS		; extra bytes needed for for-info
 13193 00001081 9C                      	pushf
 13194 00001082 26A3[4A02]              	mov	[es:ForPtr],ax
 13195 00001086 E85EF7                  	call	ALLOC_TPA		; ALLOC_TPA clobbers registers...
 13196 00001089 9D                      	popf
 13197 0000108A 5D                      	pop	bp
 13198 0000108B 5E                      	pop	si
 13199 0000108C 5F                      	pop	di
 13200 0000108D 5A                      	pop	dx
 13201 0000108E 59                      	pop	cx
 13202 0000108F 5B                      	pop	bx
 13203 00001090 58                      	pop	ax
 13204 00001091 723C                    	jc	short FOR_ALLOC_ERR
 13205                                  
 13206 00001093 06                      	push	es			; save resgroup seg...
 13207 00001094 26FF36[4A02]            	push	word [es:ForPtr]
 13208 00001099 07                      	pop	es
 13209                                  	;assume es:for_segment
 13210 0000109A 49                      	dec	cx			; forproc wants min pointing before
 13211 0000109B 4F                      	dec	di			; first arg, max right at last one
 13212                                  	; 15/02/2023
 13213                                  	;;mov	[547h],cx
 13214                                  	; 27/07/2024
 13215                                  	;mov	[447h],cx ; PCDOS 7.1 COMMAND.COM
 13216 0000109C 26890E4704              	mov	[es:FOR_INFO.FOR_MINARG],cx
 13217                                  	;;mov	[549h],di
 13218                                  	;mov	[449h],di ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13219 000010A1 26893E4904              	mov	[es:FOR_INFO.FOR_MAXARG],di
 13220                                  	;;mov	[544h],dl
 13221                                  	;mov	[444h],dl ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13222 000010A6 2688164404              	mov	[es:FOR_INFO.FOR_COM_START],dl
 13223                                  	;;mov	word [545h],0FFFFh ; -1
 13224                                  	;mov	[445h],0FFFFh ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 13225 000010AB 26C7064504FFFF          	mov	word [es:FOR_INFO.FOR_EXPAND],-1
 13226                                  					; non-zero means FALSE
 13227 000010B2 89E8                    	mov	ax,bp
 13228                                  	;;mov	[64Bh],ah
 13229                                  	;mov	[54Bh],ah ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 13230 000010B4 2688264B05              	mov	[es:FOR_INFO.FOR_VAR],ah
 13231 000010B9 07                      	pop	es
 13232                                  	;assume es:resgroup
 13233 000010BA 26FE06[4902]            	inc	byte [es:ForFlag]
 13234 000010BF 26833E[4302]FF          	cmp	word [es:SingleCom],-1
 13235 000010C5 7507                    	jne	short FOR_RET
 13236 000010C7 26C706[4302]00FF        	mov	word [es:SingleCom],0FF00h
 13237                                  FOR_RET:
 13238 000010CE C3                      	retn
 13239                                  
 13240                                  FOR_ALLOC_ERR:
 13241                                  	; 15/02/2023
 13242                                  	; MSDOS 3.3
 13243                                  	;mov	dx,INSFMEMMESPTR
 13244                                  	;jmp	CERROR
 13245                                  
 13246                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13247                                  	; MSDOS 6.0
 13248                                  	;mov	byte [msg_disp_class],1
 13249 000010CF C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class
 13250                                  					;AN000; set up extended error msg class
 13251                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 13252 000010D4 BA[F391]                	mov	dx,extend_buf_ptr
 13253                                  					;AC000; get extended message pointer
 13254                                  	;mov	word [extend_buf_ptr],8
 13255 000010D7 C706[F391]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 13256                                  					;AN000; get message number in control block
 13257 000010DD E9C41D                  	jmp	cerror
 13258                                  
 13259                                  
 13260                                  ; =============== S U B	R O U T	I N E =======================================
 13261                                  
 13262                                  NEXTARG:
 13263 000010E0 42                      	inc	dx			; next argv[n]
 13264                                  	;cmp	dx,[ARG_ARGVCNT]
 13265 000010E1 3B16[A7A5]              	cmp	dx,[ARG+ARG_UNIT.argvcnt]
 13266                                  					; make sure we don't run off end
 13267 000010E5 7D0D                    	jge	short NEXTARG_ERR 	;  of argv[]...	
 13268 000010E7 89D3                    	mov	bx,dx
 13269                                  	;mov	ax,ARG_ARGV
 13270                                  	;mov	ax,ARG+ARG_UNIT.argv
 13271 000010E9 B8[E7A2]                	mov	ax,ARG
 13272 000010EC E8B325                  	call	argv_calc		; convert array index to pointer
 13273 000010EF 8B37                    	mov	si,[bx]			; load pointer to argstring
 13274                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 13275 000010F1 AD                      	lodsw				; and load first two chars
 13276 000010F2 F8                      	clc
 13277 000010F3 C3                      	retn
 13278                                  NEXTARG_ERR:
 13279 000010F4 F9                      	stc
 13280 000010F5 C3                      	retn
 13281                                  
 13282                                  ; ---------------------------------------------------------------------------
 13283                                  
 13284                                  FORNESTERR:
 13285 000010F6 1E                      	push	ds
 13286 000010F7 8E1E[159E]              	mov	ds,[RESSEG]
 13287                                  	;ASSUME DS:RESGROUP
 13288 000010FB BA[5193]                	mov	dx,FORNESTMES_PTR
 13289 000010FE 813E[4302]00FF          	cmp	word [SingleCom],0FF00h
 13290 00001104 7506                    	jne	short NOFORP3
 13291 00001106 C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause termination
 13292                                  NOFORP3:
 13293 0000110C 1F                      	pop	ds
 13294 0000110D E9941D                  	jmp	cerror
 13295                                  
 13296                                  ; =============== S U B	R O U T	I N E =======================================
 13297                                  
 13298                                  ; General routine called to free the for segment. We also clear the forflag
 13299                                  ; too. Change no registers.
 13300                                  
 13301                                  FOROFF:
 13302 00001110 50                      	push	ax
 13303 00001111 06                      	push	es
 13304 00001112 2E8E06[159E]            	mov	es,[cs:RESSEG]
 13305 00001117 26A1[4A02]              	mov	ax,[es:ForPtr]
 13306 0000111B 09C0                    	or	ax,ax
 13307 0000111D 7408                    	jz	short FREEDONE
 13308 0000111F 06                      	push	es
 13309 00001120 8EC0                    	mov	es,ax
 13310                                  	; 15/02/2023
 13311 00001122 B449                    	mov	ah,49h
 13312                                  	;mov	ah,DEALLOC ; 49h
 13313 00001124 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 13314                                  			; ES = segment address of area to be freed
 13315 00001126 07                      	pop	es
 13316                                  FREEDONE:
 13317 00001127 26C706[4A02]0000        	mov	word [es:ForPtr],0
 13318 0000112E 26C606[4902]00          	mov	byte [es:ForFlag],0
 13319 00001134 07                      	pop	es
 13320 00001135 58                      	pop	ax
 13321 00001136 C3                      	retn
 13322                                  
 13323                                  ;============================================================================
 13324                                  ; TCMD1A.ASM, MSDOS 6.0, 1991
 13325                                  ;============================================================================
 13326                                  ; 09/10/2018 - Retro DOS v3.0
 13327                                  
 13328                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0ECBh
 13329                                  
 13330                                  ; ---------------------------------------------------------------------------
 13331                                  
 13332                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13333                                  
 13334                                  %if 0
 13335                                  
 13336                                  ; The DIR command displays the contents of a directory.
 13337                                  ;
 13338                                  ; ****************************************************************
 13339                                  ; *
 13340                                  ; * ROUTINE:	 CATALOG - display file(s) in directory
 13341                                  ; *
 13342                                  ; * FUNCTION:	 PARSE command line for drive, file, or path name.
 13343                                  ; *		 DIR allows two switches, /P (pause) and /W (wide).
 13344                                  ; *		 If an error occurs issue and error message and
 13345                                  ; *		 transfer control to CERROR.
 13346                                  ; *
 13347                                  ; * INPUT:	 command line at offset 81H
 13348                                  ; *
 13349                                  ; * OUTPUT:	 none
 13350                                  ; *
 13351                                  ; ****************************************************************
 13352                                  
 13353                                  CATALOG:
 13354                                  	; MSDOS 3.3
 13355                                  
 13356                                  	;mov	ax,ARG_ARGV
 13357                                  	;mov	ax,ARG+ARG_UNIT.argv
 13358                                  	mov	ax,ARG
 13359                                  	mov	dx,0FFFFh
 13360                                  	xor	cx,cx
 13361                                  	xor	si,si
 13362                                  DIR1:
 13363                                  	;cmp	cx,[ARG_ARGVCNT]
 13364                                  	cmp	cx,[ARG+ARG_UNIT.argvcnt]
 13365                                  	jnb	short DIR6 ; No more arguments
 13366                                  	mov	bx,cx
 13367                                  	call	ARGV_CALC
 13368                                  	;or	si,[bx+7]
 13369                                  	or	si,[bx+ARGV_ELE.argsw_word]
 13370                                  	test	si,7FFCh  ; test si,~8003
 13371                                  	jnz	short DIR2  ; /A,/B,/V switches (are invalid)
 13372                                  	;test	byte [bx+2],1
 13373                                  	test	byte [bx+ARGV_ELE.argflags],sw_flag  ; 1
 13374                                  	jz	short DIR3
 13375                                  	jmp	short DIR5
 13376                                  DIR2:
 13377                                  	mov	dx,BADPARMPTR
 13378                                  	jmp	CERROR
 13379                                  DIR3:
 13380                                  	or	cx,cx
 13381                                  	jnz	short DIR4	
 13382                                  	;cmp	word [bx+5],3
 13383                                  	cmp	word [bx+ARGV_ELE.arglen],3
 13384                                  	jz	short DIR5
 13385                                  	;add	word [bx+ARGV_ELE.argpointer],3 ; add word [bx+0],3
 13386                                  	add	word [bx],3
 13387                                  	;add	word [bx+9],3
 13388                                  	add	word [bx+ARGV_ELE.arg_ocomptr],3
 13389                                  	;add	word [bx+3],3
 13390                                  	add	word [bx+ARGV_ELE.argstartel],3
 13391                                  	;sub	word [bx+5],3
 13392                                  	sub	word [bx+ARGV_ELE.arglen],3
 13393                                  DIR4:
 13394                                  	cmp	dx,0FFFFh
 13395                                  	jnz	short DIR2
 13396                                  	mov	dx,bx
 13397                                  DIR5:
 13398                                  	inc	cx
 13399                                  	jmp	short DIR1
 13400                                  DIR6:
 13401                                  	mov	[COMSW],si
 13402                                  	push	dx
 13403                                  	xor	al,al
 13404                                  	cmp	dx,0FFFFh
 13405                                  	jz	short DIR7
 13406                                  	mov	bx,dx
 13407                                  	;mov	di,[bx+ARGV_ELE.argpointer]  ;mov di,[bx+0]
 13408                                  	mov	di,[bx]
 13409                                  	cmp	byte [di+1],':'
 13410                                  	jnz	short DIR7
 13411                                  	mov	al,[di]
 13412                                  	or	al,20h		; Lowercase drive name	
 13413                                  	sub	al,'a'-1 ; 60h  ; Convert to drive number (0,1..)
 13414                                  DIR7:
 13415                                  	;mov	[5CH],al
 13416                                  	mov	[FCB],al
 13417                                  	call	OKVOLARG
 13418                                  	mov	al,'?'		; *.* is default file spec.
 13419                                  	;mov	di,5Dh
 13420                                  	mov	di,FCB+1
 13421                                  	mov	cx,11
 13422                                  	rep stosb
 13423                                  
 13424                                  ; Begin by processing any switches that may have been specified.
 13425                                  ; BITS will contain any information about switches that was
 13426                                  ; found when the command line was parsed.
 13427                                  
 13428                                  	mov	ax,[COMSW]	; Get switches from command
 13429                                  	mov	[_BITS],ax	; initialize switches
 13430                                  	mov	word [COMSW],0	; initialize flags
 13431                                  	mov	byte [LINPERPAG],23 ; Set default for lines per page
 13432                                  	;test	al,1
 13433                                  	test	al,SWITCHW	; /W ?
 13434                                  	;mov	al,1
 13435                                  	mov	al,NORMPERLIN
 13436                                  	jz	short DIR8
 13437                                  	;mov	al,5
 13438                                  	mov	al,WIDEPERLIN
 13439                                  DIR8:
 13440                                  	mov	[LINLEN],al	; Set number of entries per line
 13441                                  	mov	[LINCNT],al
 13442                                  	mov	word [FILECNT],0 ; Keep track of how many files found
 13443                                  	mov	dx,DIRBUF
 13444                                  	mov	ah,Set_DMA ; 1Ah
 13445                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13446                                  			; DS:DX	-> disk	transfer buffer
 13447                                  	;mov	dl,[5Ch]
 13448                                  	mov	dl,[FCB]
 13449                                  	call	SAVUDIR
 13450                                  	pop	bx
 13451                                  	cmp	bx,0FFFFh
 13452                                  	jz	short DIR9
 13453                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13454                                  	mov	dx,[bx]
 13455                                  
 13456                                  ; The user may have specified a device. Search for the path and see if the
 13457                                  ; attributes indicate a device.
 13458                                  
 13459                                  	mov	ah,Find_First ; 4Eh
 13460                                  	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13461                                  			; CX = search attributes
 13462                                  			; DS:DX	-> ASCIZ filespec
 13463                                  			; (drive,path, and wildcards allowed)
 13464                                  	jc	short DIR10
 13465                                  			; Check device atrribute..
 13466                                  	;test	byte [DIRBUF_ATTRIB2],40h
 13467                                  	;test	byte [DIRBUF_ATTRIB2],ATTR_DEVICE
 13468                                  	; 14/10/2018
 13469                                  	;test	byte [DIRBUF+21],40h
 13470                                  	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 13471                                  	jz	short DIR10	; no, go do normal operation
 13472                                  	mov	word [COMSW],-2 ; 0FFFEh  ; Signal device
 13473                                  DIR9:
 13474                                  	jmp	short DOHEADER
 13475                                  DIR10:
 13476                                  	;mov	dx,[bx+ARGV_ELE.argpointer]
 13477                                  	mov	dx,[bx]
 13478                                  	mov	ah,CHDir ; 3Bh
 13479                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13480                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13481                                  	jnc	short DOHEADER
 13482                                  	;mov	si,[bx+3]
 13483                                  	mov	si,[bx+ARGV_ELE.argstartel]
 13484                                  	cmp	dx,si
 13485                                  	jz	short DIR_NO_DRIVE
 13486                                  	xor	cl,cl
 13487                                  	xchg	cl,[si]
 13488                                  	mov	ah,CHDir ; 3Bh
 13489                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13490                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13491                                  	xchg	cl,[si]
 13492                                  	jnc	short DIR_NO_DRIVE
 13493                                  	mov	al,[si-1]
 13494                                  	call	PATHCHRCMP
 13495                                  	jnz	short DIR11
 13496                                  	mov	al,[si-2]
 13497                                  	call	PATHCHRCMP
 13498                                  	jz	short DIR12
 13499                                  	xchg	cl,[si-1]
 13500                                  	mov	ah,CHDir ; 3Bh
 13501                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13502                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13503                                  	xchg	cl,[si-1]
 13504                                  	jnc	short DIR_NO_DRIVE
 13505                                  DIR11:
 13506                                  	mov	ch,':'
 13507                                  	cmp	ch,[si-1]
 13508                                  	jnz	short DIR12
 13509                                  	;mov	cx,[bx+ARGV_ELE.argpointer] ; mov cx,[bx+0]
 13510                                  	mov	cx,[bx]
 13511                                  	xchg	cx,si
 13512                                  	sub	cx,si
 13513                                  	cmp	cx,2
 13514                                  	jz	short DIR_NO_DRIVE
 13515                                  DIR12:
 13516                                  	mov	dx,BADCDPTR
 13517                                  	;test	byte [bx+2],4
 13518                                  	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 13519                                  	jnz	short DIRERROR
 13520                                  DIRNF:
 13521                                  	mov	dx,FNOTFOUNDPTR
 13522                                  DIRERROR:
 13523                                  	jmp	CERROR
 13524                                  DIR_NO_DRIVE:
 13525                                  	cmp	word [si],'..'
 13526                                  	jnz	short DOREALPARSE
 13527                                  	cmp	byte [si+2],0
 13528                                  	jnz	short DOREALPARSE
 13529                                  	inc	word [COMSW]
 13530                                  	jmp	short DOHEADER
 13531                                  DOREALPARSE:
 13532                                  	mov	di,FCB ; 5Ch	
 13533                                  	;mov	ax,290Eh
 13534                                  	mov	ax,(Parse_File_Descriptor<<8)|0Eh
 13535                                  	int	21h	; DOS -	PARSE FILENAME
 13536                                  			; DS:SI	-> string to parse
 13537                                  			; ES:DI	-> buffer to fill with unopened	FCB
 13538                                  			; AL = bit mask	to control parsing
 13539                                  	cmp	byte [si],0
 13540                                  	jz	short DOHEADER
 13541                                  	dec	word [COMSW]
 13542                                  DOHEADER:
 13543                                  		
 13544                                  ; Display the header
 13545                                  
 13546                                  	push	bx
 13547                                  	call	BUILD_DIR_STRING
 13548                                  	mov	dx,DIRBUF
 13549                                  	mov	[VOL_DIR],dx
 13550                                  	mov	dx,DIRHEADPTR
 13551                                  	call	PRINTF_CRLF
 13552                                  	pop	bx
 13553                                  	cmp	bx,0FFFFh
 13554                                  	jz	short DOSEARCH
 13555                                  
 13556                                  ; If there were chars left after parse or device, then invalid file name
 13557                                  
 13558                                  	cmp	word [COMSW],0
 13559                                  	jz	short DOSEARCH	; nothing left; good parse
 13560                                  	jl	short DIRNFFIX	; not .. => error file not found
 13561                                  	call	RESTUDIR
 13562                                  	mov	dx,BADCDPTR
 13563                                  	jmp	CERROR		; was .. => error directory not found
 13564                                  DIRNFFIX:
 13565                                  	call	RESTUDIR
 13566                                  	jmp	short DIRNF
 13567                                  
 13568                                  ; We are assured that everything is correct. Let's go and search. Use
 13569                                  ; attributes that will include finding directories. Perform the first search
 13570                                  ; and reset our directory afterward.
 13571                                  
 13572                                  DOSEARCH:
 13573                                  	;mov	byte [55h],0FFh
 13574                                  	mov	byte [FCB-7],0FFh
 13575                                  	;mov	byte [5Bh],10h
 13576                                  	mov	byte [FCB-1],10h
 13577                                  
 13578                                  ; Caution! Since we are using an extended FCB, we will *also* be returning
 13579                                  ; the directory information as an extended FCB. We must bias all fetches into
 13580                                  ; DIRBUF by 8 (Extended FCB part + drive)
 13581                                  
 13582                                  	mov	ah,Dir_Search_First ; 11h
 13583                                  	mov	dx,FCB-7 ; 55h
 13584                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 13585                                  			; DS:DX	-> FCB
 13586                                  
 13587                                  ; Restore the user's directory. We preserve, though, the return from the
 13588                                  ; previous system call for later checking.
 13589                                  
 13590                                  FOUND_FIRST_FILE:
 13591                                  	push	ax		; save return state
 13592                                  	call	RESTUDIR	; restore user's dir	
 13593                                  	pop	ax		; get return state back
 13594                                  
 13595                                  ; Main scanning loop. Entry has AL = Search first/next error code. Test for
 13596                                  ; no more.
 13597                                  
 13598                                  DIRSTART:
 13599                                  	inc	al		; 0FFh = file not found
 13600                                  	jnz	short DISPLAY	; Either an error or we are finished
 13601                                  	jmp	CHKCNT
 13602                                  DISPLAY:
 13603                                  	inc	word [FILECNT]	; Keep track of how many we find
 13604                                  	mov	si,DIRBUF+8	; SI -> information returned by sys call
 13605                                  	;call	SHONAME
 13606                                  	call	DISPLAYNAME
 13607                                  	;test	byte [_BITS],1
 13608                                  	test	byte [_BITS],SWITCHW ; W switch set?
 13609                                  	jz	short DIRTEST	; If so, no size, date, or time
 13610                                  	jmp	NEXENT
 13611                                  DIRTEST:
 13612                                  	;test	byte [DIRBUF_ATTRIB1],10h
 13613                                  	; 14/10/2018
 13614                                  	;test	byte [DIRBUF_ATTRIB1],ATTR_DIRECTORY
 13615                                  	;test	byte [DIRBUF+19],10h
 13616                                  	test	byte [DIRBUF+8+DIR_ENTRY.DIR_ATTR],ATTR_DIRECTORY
 13617                                  	jz	short FILEENT
 13618                                  	mov	dx,DMESPTR
 13619                                  	call	STD_PRINTF
 13620                                  	jmp	short NOFSIZ
 13621                                  FILEENT:
 13622                                  	;mov	dx,[DIRBUF_FSIZ_L]
 13623                                  	;mov	dx,[DIRBUF+36]
 13624                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_L]
 13625                                  	mov	[FILESIZE_L],dx
 13626                                  	;mov	dx,[DIRBUF_FSIZ_H]
 13627                                  	;mov	dx,[DIRBUF+38]
 13628                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_H]
 13629                                  	mov	[FILESIZE_H],dx
 13630                                  	mov	dx,FSIZEMESPTR
 13631                                  	call	STD_PRINTF	; Print size of file
 13632                                  NOFSIZ:
 13633                                  	;mov	ax,[DIRBUF_FDATE]  ; Get date
 13634                                  	;mov	ax,[DIRBUF+32]
 13635                                  	mov	ax,[DIRBUF+8+DIR_ENTRY.DIR_DATE]
 13636                                  	or	ax,ax
 13637                                  	jz	short NEXENT	; Skip if no date
 13638                                  	mov	di,CHARBUF
 13639                                  	push	ax
 13640                                  	mov	ax,'  '
 13641                                  	stosw
 13642                                  	pop	ax
 13643                                  	mov	bx,ax
 13644                                  	and	ax,1Fh		; Get day
 13645                                  	mov	dl,al
 13646                                  	mov	ax,bx
 13647                                  	mov	cl,5
 13648                                  	shr	ax,cl		; Align month
 13649                                  	and	al,0Fh		; Get month
 13650                                  	mov	dh,al
 13651                                  	mov	cl,bh
 13652                                  	shr	cl,1		; Align year
 13653                                  	xor	ch,ch
 13654                                  	add	cx,80		; Relative 1980
 13655                                  	cmp	cl,100
 13656                                  	jb	short MILLENIUM
 13657                                  	sub	cl,100
 13658                                  MILLENIUM:
 13659                                  	call	DATE_CXDX
 13660                                  	;mov	cx,[DIRBUF_FTIME]
 13661                                  	;mov	cx,[DIRBUF+30]
 13662                                  	mov	cx,[DIRBUF+8+DIR_ENTRY.DIR_TIME]
 13663                                  	jcxz	PRBUF		; Time field present?
 13664                                  	mov	ax,2020h
 13665                                  	stosw
 13666                                  	shr	cx,1
 13667                                  	shr	cx,1
 13668                                  	shr	cx,1
 13669                                  	shr	cl,1
 13670                                  	shr	cl,1		; Hours in CH, minutes in CL
 13671                                  	mov	bl,[TIME_24]
 13672                                  	or	bl,80h		; Tell P_TIME called from DIR
 13673                                  	call	P_TIME		; Don't care about DX, never used with DIR
 13674                                  PRBUF:
 13675                                  	xor	ax,ax
 13676                                  	stosb
 13677                                  	mov	dx,CHARBUF
 13678                                  	mov	[STRING_PTR_2],dx
 13679                                  	mov	dx,STRINGBUF2PTR
 13680                                  	call	STD_PRINTF
 13681                                  NEXENT:
 13682                                  	dec	byte [LINCNT]
 13683                                  	jnz	short SAMLIN
 13684                                  NEXLIN:
 13685                                  	mov	al,[LINLEN]
 13686                                  	mov	[LINCNT],al
 13687                                  	call	CRLF2
 13688                                  	dec	byte [LINPERPAG]
 13689                                  	jnz	short SCROLL
 13690                                  	;test	byte [_BITS],2
 13691                                  	test	byte [_BITS],SWITCHP ; P switch present?
 13692                                  	jz	short SCROLL	; If not, just continue
 13693                                  	mov	byte [LINPERPAG],23
 13694                                  	call	PAUSE
 13695                                  	jmp	short SCROLL
 13696                                  SAMLIN:
 13697                                  	mov	dx,TABPTR	; Output a tab
 13698                                  	call	STD_PRINTF
 13699                                  SCROLL:
 13700                                  	mov	ah,Dir_Search_Next ; 12h
 13701                                  	;mov	dx,55h
 13702                                  	mov	dx,FCB-7	; DX -> Unopened FCB
 13703                                  	int	21h	; DOS -	SEARCH NEXT USING FCB
 13704                                  			; DS:DX	-> FCB
 13705                                  			; Return: AL = status
 13706                                  	jmp	DIRSTART
 13707                                  CHKCNT:
 13708                                  	test	word [FILECNT],0FFFFh ; -1
 13709                                  	jnz	short TRAILER
 13710                                  	jmp	DIRNF
 13711                                  TRAILER:
 13712                                  	mov	al,[LINLEN]
 13713                                  	cmp	al,[LINCNT]
 13714                                  	jz	short MMESSAGE
 13715                                  	call	CRLF2
 13716                                  MMESSAGE:
 13717                                  	mov	dx,DIRMESPTR
 13718                                  	mov	si,[FILECNT]
 13719                                  	mov	[DIR_NUM],si
 13720                                  	call	STD_PRINTF
 13721                                  DTFREE:
 13722                                  	mov	ah,GET_DRIVE_FREESPACE ; 36h
 13723                                  	;mov	dl,[5Ch]
 13724                                  	mov	dl,[FCB]
 13725                                  	int	21h	; DOS -	2+ - GET DISK SPACE
 13726                                  			; DL = drive code (0 = default,	1 = A,2 = B,etc.)
 13727                                  	cmp	ax,-1
 13728                                  	jnz	short DTFREE1
 13729                                  DTRET:
 13730                                  	retn
 13731                                  DTFREE1:
 13732                                  	mul	cx
 13733                                  	mul	bx
 13734                                  	mov	[BYTES_FREE],ax
 13735                                  	mov	[BYTES_FREE+2],dx
 13736                                  	mov	dx,BYTEMESPTR
 13737                                  	jmp	STD_PRINTF
 13738                                  
 13739                                  ; =============== S U B	R O U T	I N E =======================================
 13740                                  
 13741                                  SHONAME:
 13742                                  DISPLAYNAME:
 13743                                  	; MSDOS 3.3
 13744                                  	mov	di,CHARBUF
 13745                                  	mov	cx,8
 13746                                  	rep	movsb
 13747                                  	mov	al,' '
 13748                                  	stosb
 13749                                  	mov	cx,3
 13750                                  	rep	movsb
 13751                                  	xor	ax,ax
 13752                                  	stosb
 13753                                  	push	dx
 13754                                  	mov	dx,CHARBUF
 13755                                  	mov	[STRING_PTR_2],dx
 13756                                  	mov	dx,STRINGBUF2PTR
 13757                                  	call	STD_PRINTF
 13758                                  	pop	dx
 13759                                  	retn
 13760                                  
 13761                                  %endif
 13762                                  
 13763                                  ;============================================================================
 13764                                  ; DIR.ASM, MSDOS 6.0, 1991
 13765                                  ;============================================================================
 13766                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13767                                  
 13768                                  	; MSDOS 6.0
 13769                                  %if 0
 13770                                  
 13771                                  ;***	DIR.ASM - DIR internal command
 13772                                  
 13773                                  comment	% =================================================================
 13774                                  
 13775                                  This module replaces TCMD1A.ASM.  The old module was titled 
 13776                                  "PART4 COMMAND Transient routines".
 13777                                  
 13778                                  From residual documentation, I surmise that TCMD.ASM originally
 13779                                  contained the internal commands DIR, PAUSE, ERASE, TYPE, VOL, and
 13780                                  VER.  The file seems to have been successively split:
 13781                                  
 13782                                    TCMD -> TCMD1,TCMD2 -> TCMD1A,TCMD1B,TCMD2A,TCMD2B
 13783                                  
 13784                                  TCMD1A.ASM contained only the DIR command.
 13785                                  
 13786                                  Usage:
 13787                                  ------
 13788                                  
 13789                                  DIR <filespec> /w /p /b /s /l /c /o<sortorder> /a<attriblist>
 13790                                  
 13791                                  DIR /?
 13792                                  
 13793                                  
 13794                                  <filespec> may include any or none of:  drive; directory path;
 13795                                             wildcarded filename.  If drive or directory path are
 13796                                  	   omitted, the current defaults are used.  If the
 13797                                  	   file name or extension is omitted, wildcards are
 13798                                  	   assumed.
 13799                                  
 13800                                  /w	Wide listing format.  Files are displayed in compressed
 13801                                  	'name.ext' format.  Subdirectory files are enclosed in
 13802                                  	brackets, '[dirname]'.
 13803                                  
 13804                                  /p	Paged, or prompted listing.  A screenful is displayed
 13805                                  	at a time.  The name of the directory being listed appears
 13806                                  	at the top of each page.
 13807                                  
 13808                                  	Bugbug:  pages nead to be uniform length..?
 13809                                  
 13810                                  /b	Bare listing format.  Turns off /w or /p.  Files are 
 13811                                  	listed in compressed 'name.ext' format, one per line,
 13812                                  	without additional information.  Good for making batch
 13813                                  	files or for piping.  When used with /s, complete
 13814                                  	pathnames are listed.
 13815                                  
 13816                                  /s	Descend subdirectory tree.  Performs command on current
 13817                                  	or specified directory, then for each subdirectory below
 13818                                  	that directory.  Directory header and footer is displayed
 13819                                  	for each directory where matching files are found, unless
 13820                                  	used with /b.  /b suppresses headers and footers.
 13821                                  
 13822                                  	Tree is explored depth first, alphabetically within the
 13823                                  	same level.
 13824                                  
 13825                                  	Bugbug:  hidden directories aren't searched.
 13826                                  
 13827                                  /l	Display file names, extensions and paths in lowercase.	;M010
 13828                                  
 13829                                  /c	Display file compression ratio, if the file is on a MagicDrv
 13830                                  	compressed volume.
 13831                                  
 13832                                  /o	Sort order.  /o alone sorts by default order (dirs-first, name,
 13833                                  	extension).  A sort order may be specified after /o.  Any of
 13834                                  	the following characters may be used: nedsgc (name, extension,
 13835                                  	date/time, size, group-dirs-first, compression ratio).	Placing
 13836                                  	a '-' before any letter causes a downward sort on that field.
 13837                                  	E.g., /oe-d means sort first by extension in alphabetical order,
 13838                                  	then within each extension sort by date and time in reverse
 13839                                  	chronological order.
 13840                                  
 13841                                  /a	Attribute selection.  Without /a, hidden and system files
 13842                                  	are suppressed from the listing.  With /a alone, all files
 13843                                  	are listed.  An attribute list may follow /a, consisting of
 13844                                  	any of the following characters:  hsdar (hidden, system,
 13845                                  	directory, archive, read-only).  A '-' before any letter
 13846                                  	means 'not' that attribute.  E.g., /ar-d means files that
 13847                                  	are marked read-only and are not directory files.  Note
 13848                                  	that hidden or system files may be included in the listing.
 13849                                  	They are suppressed without /a but are treated like any other
 13850                                  	attribute with /a.
 13851                                  
 13852                                  /?	Help listing.  Display DIR useage information.	;M008;Handled externally
 13853                                  
 13854                                  /h has been removed.					;M008
 13855                                  
 13856                                  DIRCMD	An environment variable named DIRCMD is parsed before the
 13857                                  	DIR command line.  Any command line options may be specified
 13858                                  	in DIRCMD, and become defaults.  /? will be ignored in DIRCMD.
 13859                                  	A filespec may be specified in DIRCMD and will be used unless
 13860                                  	a filespec is specified on the command line.  Any switch
 13861                                  	specified in DIRCMD may be overridden on the command line.
 13862                                  	If the original DIR default action is desired for a particular
 13863                                  	switch, the switch letter may be preceded by a '-' on the
 13864                                  	command line.  E.g.,
 13865                                  
 13866                                  	  /-w	use long listing format
 13867                                  	  /-p	don't page the listing
 13868                                  	  /-b	don't use bare format
 13869                                  	  /-s	don't descend subdirectory tree
 13870                                  	  /-o	display files in disk order
 13871                                  	  /-a	suppress hidden and system files
 13872                                  
 13873                                  Notes:
 13874                                  ------
 13875                                  
 13876                                  For sorted listings, file entries are loaded into the TPA buffer, which
 13877                                  is usually about 64K in size.  This allows sorts of up to 3000 files at
 13878                                  a time.  Each entry takes up 21 bytes in the buffer (see EntryStruc below).
 13879                                  The byte after the last entry is 0FFh.  The first byte of each entry is
 13880                                  a flag byte which is made zero when the entry is loaded, and made one
 13881                                  when the entry is used.
 13882                                  
 13883                                  Revision History
 13884                                  ================
 13885                                  M01	md	7/13/90 	Use ROM BIOS data area to obtain screen height
 13886                                  				in the absence of ANSI.SYS
 13887                                  
 13888                                  M007	sa	8/1/90		Allow /p/b combination
 13889                                  
 13890                                  M008	sa	8/1/90		Remove /h parameter.  Eliminate code used
 13891                                  				to internally handle /? message.
 13892                                  
 13893                                  M010	sa	8/5/90		Add support for /l (lowercase) option.
 13894                                  
 13895                                  M011	sa	8/5/90		Patch up bug where MS-DOS does not load the
 13896                                  				first FCB with the drive number when the drive
 13897                                  				letter in the command line is preceded by a
 13898                                  				switch.  Now dir manually loads the drive
 13899                                  				number after parsing.
 13900                                  
 13901                                  M018	md	8/12/90 	Increment the screen height by 1 when obtained
 13902                                  				from the ROM BIOS.
 13903                                  
 13904                                  M023	sa	8/31/90		Prevent DIR from failing if it encounters
 13905                                  				a subdirectory having len(pathname)>MAXPATH.
 13906                                  				Just skip over that subdirectory.
 13907                                  
 13908                                  M028	dbo	9/24/90		When country=US, sort by strict character
 13909                                  				byte value, rather than collating table.
 13910                                  				This to match MS-DOS Shell's sort order.
 13911                                  
 13912                                  ========================================================================= %
 13913                                  
 13914                                  %endif
 13915                                  
 13916                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22)
 13917                                  ;ifdef DBLSPACE_HOOKS
 13918                                  NUM_DIR_SWS	equ	16	; # of dir switch synonyms in Dir_Sw_Ptrs list
 13919                                  ;else
 13920                                  ; 16/02/2023 - Retro DOS v4.0 (v4.1) COMMAND.COM (MSDOS 5.0)
 13921                                  ;NUM_DIR_SWS	equ	14	; # of dir switch synonyms in Dir_Sw_Ptrs list
 13922                                  ;endif
 13923                                  
 13924                                  ;OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 13925                                  ;
 13926                                  ;		on/off bit record for /l, /b, /s, /p, /w, /c options
 13927                                  ;		(order is hard-coded; see OnOffSw)
 13928                                  ;		Inmem is set when entries are loaded in memory.
 13929                                  
 13930                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13931                                  ;mask.wide  equ 1
 13932                                  ;mask.pagd  equ 2
 13933                                  ;mask.subd  equ 4
 13934                                  ;mask.bare  equ 8
 13935                                  ;mask.lcase equ 16
 13936                                  ;mask.inmem equ 32
 13937                                  
 13938                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 13939                                  ;ifdef DBLSPACE_HOOKS
 13940                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1,cratio:1
 13941                                  ;else
 13942                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 13943                                  ;endif
 13944                                  mask.cratio equ 1
 13945                                  mask.wide   equ 2
 13946                                  mask.pagd   equ 4
 13947                                  mask.subd   equ 8
 13948                                  mask.bare   equ 16
 13949                                  mask.lcase  equ 32
 13950                                  mask.inmem  equ 64
 13951                                  ;
 13952                                  mask.dev    equ 1
 13953                                  mask.baddir equ 2	
 13954                                  
 13955                                  NUM_ATTR_LTRS	equ	6	; length of attribute letter list
 13956                                  
 13957                                  ; 05/06/2023
 13958                                  ;ifdef DBLSPACE_HOOKS
 13959                                  NUM_ORDER_LTRS	equ	6	; length of sort order letter list
 13960                                  CRATIO_ORDER	equ	6	; position of 'C' in ORDER_LTRS
 13961                                  ;else
 13962                                  ;NUM_ORDER_LTRS	equ	5	; length of sort order letter list
 13963                                  ;endif
 13964                                  
 13965                                  ;ResultBuffer	struc		; structure of parse result buffer
 13966                                  ;ValueType	db	?
 13967                                  ;ValueTag	db	?
 13968                                  ;SynPtr		dw	?
 13969                                  ;ValuePtr	dd	?
 13970                                  ;ResultBuffer	ends
 13971                                  
 13972                                  ;ErrorRec	record	baddir:1,dev:1
 13973                                  ;
 13974                                  ;		Error bits are:
 13975                                  ;		  Invalid directory format
 13976                                  ;		  File is device
 13977                                  
 13978                                  ;EntryStruc	struc			; our private directory entry structure
 13979                                  ;used		db	?		; =0 until entry used, then =1
 13980                                  ;filename	db	8 dup (?)	; filename
 13981                                  ;fileext	db	3 dup (?)	; extension
 13982                                  ;fileattr	db	?		; file attributes
 13983                                  ;filetime	dw	?		; file time
 13984                                  ;filedate	dw	?		; file date
 13985                                  ;filesize	dd	?		; file size
 13986                                  ; 05/06/2023
 13987                                  ;;ifdef DBLSPACE_HOOKS
 13988                                  ;compratio	db	?		; compression ratio
 13989                                  ;;endif
 13990                                  ;EntryStruc	ends
 13991                                  
 13992                                  ;shove	macro	val		; hose-bag 8086 doesn't push immediate
 13993                                  ;	mov	ax,val		; invisible, dangerous use of AX!
 13994                                  ;	push	ax
 13995                                  ;	endm
 13996                                  
 13997                                  ;	public	Catalog		; our entry point
 13998                                  ;
 13999                                  ;	break	<DIR (Catalog) principal routines>
 14000                                  ;
 14001                                  ;	assume	cs:TRANGROUP,ds:TRANGROUP,es:nothing,ss:TRANGROUP
 14002                                  ; ---------------------------------------------------------------------------
 14003                                  ;	Bugbug:	Each routine should start with it's own ASSUME.
 14004                                  
 14005                                  ;----------------------------------------------------------------------------
 14006                                  ;----------------------------------------------------------------------------
 14007                                  
 14008                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14009                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:108Dh
 14010                                  
 14011                                  ;***	Catalog - DIR command main routine
 14012                                  ;
 14013                                  ;	ENTRY	FCB #1 in PSP has drive# from cmd-line or default
 14014                                  ;		Cmd-line tail text is at 81h, terminated by 0Dh
 14015                                  ;		CS, DS, ES, SS = TRANGROUP seg addr
 14016                                  ;		Tpa = TPA buffer seg addr
 14017                                  ;		BytCnt = # bytes in TPA buffer
 14018                                  ;
 14019                                  ;	EXIT	nothing
 14020                                  ;
 14021                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 14022                                  ;
 14023                                  ;	ERROR EXITS
 14024                                  ;
 14025                                  ;	  Errors are handled by setting up error message pointers
 14026                                  ;	   for Std_EPrintf and jumping to CError. Syntax errors in
 14027                                  ;	   the environment variable, however, are handled by printing
 14028                                  ;	   an error message and continuing.
 14029                                  ;
 14030                                  ;	EFFECTS
 14031                                  ;
 14032                                  ;	  Directory listing is displayed (on standard output).
 14033                                  ;	  APPEND is disabled. HeadFix routine is expected to
 14034                                  ;	   restore APPEND state.
 14035                                  ;	  Working directory may be changed. The user's default
 14036                                  ;	   directory is saved and flagged for restoration by RestUDir
 14037                                  ;	   during COMMAND cycle.
 14038                                  ;	  Lots of variables may be changed in TRANSPACE segment.
 14039                                  ;
 14040                                  ;	NOTES
 14041                                  ;
 14042                                  ;	  ES = TRANGROUP seg addr except when used to address the
 14043                                  ;	   the TPA buffer, where directory entries are loaded from disk.
 14044                                  
 14045                                  	; 16/02/2023
 14046                                  
 14047                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14048                                  ;----------------------------------------------------------------------------
 14049                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:1167h
 14050                                  
 14051                                  CATALOG:
 14052                                  	; 07/06/2023
 14053                                  	; MSDOS 6.22 COMMAND COM feature only !
 14054 00001137 E82D0A                  	call    screen_f_set	; set display parameters for video/text mode
 14055                                  	;			; (different depending on scr width/columns)
 14056 0000113A E8C900                  	call	SetDefaults
 14057 0000113D E8ED00                  	call	ParseEnvironment
 14058 00001140 E80501                  	call	ParseCmdLine
 14059 00001143 7303                    	jnc	short catalog1	; no parse error
 14060                                  	;jmp	catErr		; error msg is set up
 14061                                  	; 07/06/2023
 14062                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMANBD.COM
 14063 00001145 E9B100                  	jmp	catExtErr2 
 14064                                  catalog1:
 14065 00001148 E82E01                  	call	SetOptions
 14066 0000114B E80401                  	call	SetCollatingTable
 14067                                  
 14068                                  ;	Drive # to operate on has already been placed in FCB by
 14069                                  ;	COMMAND preprocessing. OkVolArg & PathCrunch depend on that.
 14070                                  
 14071                                  	;;;test	Bits,mask bare
 14072                                  	;;test 	word [_Bits],8
 14073                                  	;test	byte [_Bits],8
 14074                                  	; 07/06/2023
 14075 0000114E F606[A2A0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 14076 00001153 750A                    	jnz	short catalog2	; don't display volume info for /b
 14077                                  	;invoke	OkVolArg	; find & display volume info
 14078 00001155 E85E10                  	call	OkVolArg
 14079                                  	;sub	byte [LeftOnpage],2
 14080 00001158 832E[419E]02            	sub	word [LeftOnPage],2
 14081                                  				; record display lines used by volume info
 14082 0000115D EB14                    	jmp	short catCrunch
 14083                                  
 14084                                  ;	OkVolArg side effects:
 14085                                  ;	APPEND is disabled;
 14086                                  ;	DTA established at DirBuf;
 14087                                  ;	Filename fields in FCB are wildcarded.
 14088                                  
 14089                                  catalog2:
 14090                                  ;	OkVolArg wasn't executed, so we have to do these ourselves.
 14091                                  
 14092                                  	;invoke	DisAppend	; disable APPEND
 14093 0000115F E82110                  	call	DisAppend
 14094                                  
 14095                                  	;mov	dx,offset TRANGROUP:DirBuf
 14096 00001162 BA[50A0]                	mov	dx,DIRBUF
 14097 00001165 B41A                    	mov	ah,1Ah
 14098                                  	;mov	ah,Set_DMA
 14099 00001167 CD21                    	int	21h		; set DTA
 14100                                  
 14101                                  	;mov	di,FCB	; 5Ch	; ES:DI = ptr to FCB
 14102                                  	;inc	di		; ES:DI = ptr to filename field of FCB
 14103                                  	; 28/07/2024
 14104 00001169 BF5D00                  	mov	di,FCB+1 ; 5Dh
 14105 0000116C B03F                    	mov	al,'?'		; AL = wildcard character
 14106 0000116E B90B00                  	mov	cx,11
 14107 00001171 F3AA                    	rep	stosb		; wildcard filename field
 14108                                  
 14109                                  catCrunch:
 14110 00001173 E86A01                  	call	CrunchPath	; crunch pathname to get directory and filename
 14111 00001176 724B                    	jc	short catRecErr	; handle recorded or extended error
 14112                                  
 14113                                  ;	User's directory has been saved, we've changed to specified directory.
 14114                                  ;	ComSw = error bits for later use
 14115                                  ;	FCB contains parsed filename
 14116                                  
 14117                                  	;cmp	byte [COMSW],0
 14118 00001178 833E[2C9E]00            	cmp	word [COMSW],0
 14119 0000117D 7544                    	jne	short catRecErr	; handle recorded error
 14120                                  
 14121 0000117F E8B801                  	call	InstallCtrlC	; install control-C handler
 14122                                  
 14123                                  	; 07/06/2023
 14124                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14125                                  	; MSDOS 6.0 (DBLSPACE/DRVSPACE)
 14126                                  
 14127                                   	;test	word [_Bits],1	; mask.cratio
 14128 00001182 F606[A2A0]01            	test	byte [_Bits],mask.cratio ; compression ratio wanted?
 14129 00001187 740A                    	jz      short catalog4
 14130 00001189 E8370A                  	call    OpenCVF         ; yes, try to open CVF file
 14131 0000118C 7305                    	jnc     short catalog4
 14132                                  
 14133                                  	;and	word [_Bits],0FFFEh ; not (mask cratio)
 14134 0000118E 8026[A2A0]FE            	and	byte [_Bits],~mask.cratio ; 0FEh
 14135                                  
 14136                                  catalog4:	; 07/06/2023
 14137 00001193 E89509                  	call	ZeroTotals	; zero grand totals
 14138 00001196 E88304                  	call	ListDir		; list main directory
 14139                                  	;jc	short catExtErr
 14140                                  	; 07/06/2023
 14141                                  	; MSDOS 6.22 COMMAND.COM
 14142 00001199 724E                    	jc      short catExtErr1
 14143                                  
 14144                                  	;;;test	Bits,mask subd
 14145                                  	;;test	word [_Bits],4
 14146                                  	;test	byte [_Bits],4
 14147                                  	; 07/06/2023
 14148 0000119B F606[A2A0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0 
 14149 000011A0 7405                    	jz	short catalog3	; subdirectories option not set
 14150 000011A2 E8AD01                  	call	ListSubds	; list subdirectories
 14151                                  	;jc	short catExtErr
 14152                                  	; 07/06/2023
 14153                                  	; MSDOS 6.22 COMMAND.COM
 14154 000011A5 7242                    	jc      short catExtErr1
 14155                                  
 14156                                  catalog3:
 14157                                  ;	Check if any files were found.
 14158                                  
 14159                                  	;;;test	Bits,mask bare
 14160                                  	;;test	word [_Bits],8
 14161                                  	;test	byte [_Bits],8
 14162                                  	; 07/06/2023
 14163 000011A7 F606[A2A0]10            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0
 14164 000011AC 750A                    	jnz	short catRet	; don't bother for bare format
 14165                                  
 14166 000011AE A1[499E]                	mov	ax,[FileCntTotal]
 14167 000011B1 09C0                    	or	ax,ax
 14168 000011B3 7421                    	jz	short catNoFiles ; no files found
 14169                                  
 14170 000011B5 E8D202                  	call	DisplayTotals	; display trailing grand totals
 14171                                  	;jmp	short catRet	; all done
 14172                                  	; 25/04/2023
 14173                                  	; 07/06/2023
 14174                                  catRet:
 14175                                  	;retn	; MSDOS 5.0 COMMAND.COM
 14176                                  	
 14177                                  	; 07/06/2023
 14178                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14179                                  
 14180                                  	;test	word [_Bits],1	; mask.cratio
 14181 000011B8 F606[A2A0]01            	test	byte [_Bits],mask.cratio
 14182 000011BD 7403                    	jz      short catRetn
 14183 000011BF E81E0B                  	call    CloseCVF
 14184                                  catRetn:
 14185 000011C2 C3                      	retn
 14186                                  
 14187                                  catRecErr:
 14188                                  
 14189                                  ;	ComSw may have error bit set. If not, do extended error.
 14190                                  
 14191                                  	;;;test	ComSw,mask dev
 14192                                  	;;test	word [COMSW],1
 14193                                  	;test	byte [COMSW],1
 14194 000011C3 F606[2C9E]01            	test	byte [COMSW],mask.dev
 14195 000011C8 750C                    	jnz	short catNoFiles 
 14196                                  				; filename is device, respond 'file not found'
 14197                                  	;;test	ComSw,mask baddir
 14198                                  	;;test	word [COMSW],2
 14199                                  	;test	byte [COMSW],2
 14200 000011CA F606[2C9E]02            	test	byte [COMSW],mask.baddir
 14201                                  	;jz	short catExtErr	; no ComSw error bits, must be extended error
 14202                                  	; 07/06/2023
 14203                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM 
 14204 000011CF 7418                    	jz	short catExtErr1
 14205                                  
 14206                                  	;mov	dx,offset TRANGROUP:BadCd_Ptr
 14207                                  				; invalid directory
 14208 000011D1 BA[2E93]                	mov	dx,badcd_ptr
 14209                                  	;jmp	short catErr
 14210                                  	; 07/06/2023
 14211                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 14212 000011D4 EB23                    	jmp	short catExtErr2	
 14213                                  
 14214                                  catNoFiles:
 14215                                  
 14216                                  ;	Display header and force 'file not found' message.
 14217                                  
 14218 000011D6 E89A07                  	call	DisplayHeader
 14219 000011D9 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 14220 000011DC C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 14221 000011E1 BA[F391]                	mov	dx,extend_buf_ptr
 14222 000011E4 A3[F391]                	mov	[extend_buf_ptr],ax
 14223                                  	;jmp	short catErr
 14224                                  	; 07/06/2023
 14225                                  	; MSDOS 6.22 COMMAND.COM
 14226 000011E7 EB10                    	jmp	short catExtErr2
 14227                                  
 14228                                  catExtErr:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 14229                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 14230                                  catExtErr1:
 14231                                  
 14232                                  ;	DOS has returned an error status. Get the extended error#, and
 14233                                  ;	set up an error message, changing 'No more files' error 
 14234                                  ;	to 'File not found' error.
 14235                                  
 14236 000011E9 E84810                  	call	Set_Ext_Error_Msg
 14237 000011EC 833E[F391]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 14238                                  	;jne	short catalog4  ; catErr ; MSDOS 5.0 COMMAND.COM
 14239                                  	; 07/06/2023
 14240                                  	; MSDOS 6.22 COMMAND.COM
 14241 000011F1 7506                    	jne	short catExtErr2	
 14242                                  
 14243 000011F3 C706[F391]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 14244                                  
 14245                                  ;catalog4:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 14246                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 14247                                  catExtErr2:
 14248                                  	;test	word [_Bits],1	; mask.cratio
 14249 000011F9 F606[A2A0]01            	test	byte [_Bits],mask.cratio
 14250                                  				; close Compressed Volume File if cratio
 14251 000011FE 7403                    	jz      short catErr
 14252 00001200 E8DD0A                  	call    CloseCVF
 14253                                  
 14254                                  ;	Error exit. Error message information has been set up
 14255                                  ;	for Std_EPrintf.
 14256                                  
 14257                                  catErr:
 14258 00001203 E99E1C                  	jmp	cerror		; go to COMMAND error recycle point
 14259                                  
 14260                                  	; 25/04/2023
 14261                                  ;catRet:
 14262                                  	;retn
 14263                                  
 14264                                  ; ---------------------------------------------------------------------------
 14265                                  
 14266                                  ;***	SetDefaults - set default pathname, options
 14267                                  ;
 14268                                  ;	ENTRY	DS = TRANGROUP seg addr
 14269                                  ;
 14270                                  ;	EXIT	nothing
 14271                                  ;
 14272                                  ;	USED	AX,DI
 14273                                  ;
 14274                                  ;	EFFECTS
 14275                                  ;	  SrcBuf = '*',EOL - default pathname
 14276                                  ;	  PathPos = ptr to pathname
 14277                                  ;	  PathCnt = length of pathname
 14278                                  
 14279                                  	; 16/02/2023
 14280                                  SetDefaults:
 14281 00001206 BF[B8A1]                	mov	di,SrcBuf		; DI = ptr to pathname buffer
 14282 00001209 893E[A6A0]              	mov	[PathPos],di		; PathPos = ptr to pathname
 14283                                  	;mov	al,STAR
 14284 0000120D B02A                    	mov	al,'*'
 14285 0000120F AA                      	stosb
 14286                                  	;mov	al,END_OF_LINE_IN
 14287 00001210 B00D                    	mov	al,0Dh ; cr
 14288 00001212 AA                      	stosb				; SrcBuf = '*',0Dh
 14289 00001213 C706[A4A0]0100          	mov	word [PathCnt],1	; PathCnt = pathname length
 14290                                  
 14291 00001219 31C0                    	xor	ax,ax			; AX = 0
 14292 0000121B A3[2C9E]                	mov	[COMSW],ax		; = no error
 14293 0000121E A3[A2A0]                	mov	[_Bits],ax		; = options off
 14294 00001221 A2[55A1]                	mov	[DestBuf],al		; = no sort
 14295 00001224 C606[AAA0]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM ; 6
 14296 00001229 A2[ABA0]                	mov	[AttrSelect],al		; exclude hidden, system files
 14297                                  peRet:	; 25/04/2023
 14298 0000122C C3                      	retn
 14299                                  
 14300                                  ; ---------------------------------------------------------------------------
 14301                                  
 14302                                  ;***	ParseEnvironment - find and parse our environment variable
 14303                                  ;
 14304                                  ;	Find our environment variable and parse it. If a parse
 14305                                  ;	error occurs, issue an error message. The parse results
 14306                                  ;	up to the error will still have effect. Always leave
 14307                                  ;	the option variables in a useable state.
 14308                                  ;
 14309                                  ;	ENTRY	DS = TRANGROUP seg addr
 14310                                  ;
 14311                                  ;	EXIT	nothing
 14312                                  ;
 14313                                  ;	USED	AX,BX,CX,DX,SI,DI
 14314                                  ;
 14315                                  ;	EFFECTS
 14316                                  ;
 14317                                  ;	  Bits may contain new option settings.
 14318                                  ;	  DestBuf may contain new series of sort codes.
 14319                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 14320                                  ;	  SrcBuf may contain a new default pathname/filespec.
 14321                                  ;	  PathPos, PathCnt updated for new pathname.
 14322                                  ;
 14323                                  ;	  If a parse error occurred, an error message will be issued.
 14324                                  
 14325                                  	; 16/02/2023
 14326                                  ParseEnvironment:
 14327 0000122D E8A203                  	call	GetEnvValue		; get environment variable value
 14328 00001230 72FA                    	jc	short peRet		; name not found in environment
 14329                                  
 14330                                  ;	SI = ptr to value of environment variable, in TRANGROUP seg
 14331                                  
 14332 00001232 E80E05                  	call	Parse_Line		; parse environment value
 14333 00001235 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 14334                                  	;cmp	ax,END_OF_LINE
 14335 00001238 74F2                    	je	short peRet		; successful completion
 14336                                  
 14337                                  ;	Some kind of parse error occurred.
 14338                                  ;	We're set up for a Std_EPrintf call.
 14339                                  
 14340 0000123A E8E842                  	call	std_eprintf		; display the parse error
 14341                                  	;mov	byte [Msg_Disp_Class],util_msg_class ; -1
 14342                                  					; restore default msg class
 14343 0000123D C606[F191]FF            	mov	byte [msg_disp_class],0FFh ; -1
 14344                                  	;mov	dx,offset TRANGROUP:ErrParsEnv_Ptr
 14345 00001242 BA[3594]                	mov	dx,errparsenv_ptr
 14346                                  	;;invoke Printf_Crlf		; "(Error occurred in environment.."
 14347                                  	;call	Printf_Crlf
 14348                                  	; 25/04/2023
 14349                                  	;retn
 14350 00001245 E9D742                  	jmp	Printf_Crlf
 14351                                  					;M008;Internal handling of /? removed
 14352                                  ;peOk:	and	Bits,not mask help	; disallow /h in environment variable
 14353                                  	; 25/04/2023
 14354                                  ;peRet:
 14355                                  	;retn
 14356                                  
 14357                                  ; ---------------------------------------------------------------------------
 14358                                  
 14359                                  ;***	ParseCmdLine - parse and record command line parameters
 14360                                  ;
 14361                                  ;	ENTRY	PSP offset 81h is beginning of cmd line buffer
 14362                                  ;		DS, ES, CS = TRANGROUP seg addr
 14363                                  ;
 14364                                  ;	EXIT	CY = set if parse error occurred
 14365                                  ;
 14366                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 14367                                  ;		AX = system parser error code
 14368                                  ;		DX = ptr to message block
 14369                                  ;
 14370                                  ;	USED	AX,BX,CX,DX,SI,DI
 14371                                  ;
 14372                                  ;	EFFECTS
 14373                                  ;
 14374                                  ;	  Bits may contain new option settings.
 14375                                  ;	  DestBuf may contain new series of sort codes.
 14376                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 14377                                  ;	  SrcBuf may contain a new default pathname/filespec.
 14378                                  ;	  PathPos, PathCnt updated for new pathname.
 14379                                  ;
 14380                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 14381                                  ;	  Msg_Disp_Class = parse error class
 14382                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 14383                                  ;	  Message block (see DX) is set up for parse error message
 14384                                  
 14385                                  	; 16/02/2023
 14386                                  ParseCmdLine:
 14387 00001248 BE8100                  	mov	si,81h			; SI = ptr to cmd-line tail text
 14388 0000124B E8F504                  	call	Parse_Line		; parse cmd line tail
 14389 0000124E 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 14390                                  	;;cmp	ax,END_OF_LINE
 14391                                  	; 25/04/2023
 14392                                  	;je	short pcOk		; parse completed successfully
 14393                                  
 14394                                  ;	A parse error occurred. We're all set up for message output.
 14395                                  
 14396                                  	; 25/04/2023
 14397                                  	; cf = 1 (ax < 0FFFFh)
 14398                                  	;stc		   		; return failure
 14399                                  	;jmp	short pcRet
 14400                                  	; 25/04/2023
 14401                                  	;retn
 14402                                  pcOk:
 14403                                  	; 25/04/2023
 14404                                  	;cf = 0 (ax = 0FFFFh)
 14405                                  	;clc				; return success
 14406                                  pcRet:
 14407 00001251 C3                      	retn
 14408                                  
 14409                                  ; ---------------------------------------------------------------------------
 14410                                  
 14411                                  ;***	SetCollatingTable - set up character collating table for sorting
 14412                                  ;
 14413                                  ;	If country is other than USA, try to get a collating table
 14414                                  ;	for character sorting. For USA, use straight byte values.
 14415                                  ;	This is so DIR behaves like the MS-DOS Shell, which sorts
 14416                                  ;	by straight byte values in the USA for better performance.
 14417                                  ;
 14418                                  ;	ENTRY	ES = TRANGROUP seg addr
 14419                                  ;
 14420                                  ;	EXIT	nothing
 14421                                  ;
 14422                                  ;	USED	AX,BX,CX,DX,DI
 14423                                  ;
 14424                                  ;	EFFECTS
 14425                                  ;
 14426                                  ;	  If collating table is set -
 14427                                  ;	    CountryPtrId = 6.
 14428                                  ;	    CountryPtr points to collating table.
 14429                                  ;
 14430                                  ;	  Otherwise -
 14431                                  ;	    CountryPtrId = 0.
 14432                                  
 14433                                  SetCollatingTable:
 14434                                  
 14435                                  ;	Begin modification M028
 14436                                  
 14437                                  	;mov	dx,offset TRANGROUP:InternatVars
 14438                                  	;			; DS:DX = ptr to international info buffer
 14439 00001252 BA[36AA]                	mov	dx,INTERNATVARS
 14440 00001255 B80038                  	mov	ax,3800h
 14441                                  	;mov	ax,INTERNATIONAL << 8
 14442                                  	;;mov	ax,INTERNATIONAL shl 8
 14443                                  				; AX = 'Get current country info'
 14444 00001258 CD21                    	int	21h		; call DOS
 14445 0000125A 7217                    	jc	short scNoTable	; error - so don't collate
 14446                                  
 14447                                  ;	BX = country code
 14448                                  
 14449 0000125C 83FB01                  	cmp	bx,1
 14450 0000125F 7412                    	je	short scNoTable	; we're in USA, don't collate
 14451                                  
 14452                                  ;	End modification M028
 14453                                  
 14454                                  ;*	Country code is other than USA. Try to get a collating table.
 14455                                  
 14456 00001261 B80665                  	mov	ax,6506h
 14457                                  	;mov	ax,(GETEXTCNTRY << 8) + SETCOLLATE
 14458                                  	;;mov	ax,(GETEXTCNTRY shl 8) + SETCOLLATE
 14459                                  				; AH = 'Get Extended Country Info'
 14460                                  				; AL = 'Get Pointer to Collating Table'
 14461 00001264 BBFFFF                  	mov	bx,-1		; BX = code page of interest = CON
 14462 00001267 B90500                  	mov	cx,5		; CX = length of info buffer
 14463 0000126A 89DA                    	mov	dx,bx		; DX = country ID = default
 14464                                  	;mov	di,offset TRANGROUP:CountryPtrInfo
 14465 0000126C BF[56AA]                	mov	di,CountryPtrInfo
 14466                                  				; ES:DI = ptr to info buffer
 14467 0000126F CD21                    	int	21h		; call DOS
 14468 00001271 7305                    	jnc	short scRet	; success
 14469                                  
 14470                                  ;*	Set CountryPtrId = 0 to signal no collating table.
 14471                                  
 14472                                  scNoTable:			;M028
 14473 00001273 C606[56AA]00            	mov	byte [CountryPtrId],0
 14474                                  scRet:
 14475 00001278 C3                      	retn
 14476                                  
 14477                                  ; ---------------------------------------------------------------------------
 14478                                  
 14479                                  ;***	SetOptions - check and set options
 14480                                  ;
 14481                                  ;	ENTRY	nothing
 14482                                  ;
 14483                                  ;	EXIT	nothing
 14484                                  ;
 14485                                  ;	USED	AX,BX,CX,DX
 14486                                  ;
 14487                                  ;	EFFECTS
 14488                                  ;
 14489                                  ;	  Bits may contain modified option settings.
 14490                                  ;	  Display_Ioctl table, including LinPerPag variable, is filled in.
 14491                                  ;	  LeftOnPage is initialized to # lines till end of page is handled.
 14492                                  ;	  PerLine is set according to /w presence.
 14493                                  
 14494                                  	; 16/02/2023
 14495                                  
 14496                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14497                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:12BEh
 14498                                  
 14499                                  SetOptions:
 14500                                  
 14501                                  ;	If bare listing requested, cancel wide listings.
 14502                                  
 14503                                  	;;;test	Bits,mask bare
 14504                                  	;;test	word [_Bits],8
 14505                                  	;test	byte [_Bits],8
 14506                                  	; 07/06/2023
 14507 00001279 F606[A2A0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 14508 0000127E 7411                    	jz	short setopts1
 14509                                  	;;;and	Bits,not mask wide	;M007;Allow /p with /b
 14510                                  	;;and	word [_Bits],0FFFEh
 14511                                  	;;and	byte [_Bits],0FEh
 14512                                  	; 07/06/2023
 14513 00001280 8026[A2A0]FD            	and	byte [_Bits],~mask.wide ; 0FDh ; MSDOS 6.0
 14514                                  
 14515                                  ;setopts1:	; MSDOS 5.0 COMMAND.COM
 14516                                  	; 07/06/2023
 14517                                   	; MSDOS 6.22 COMMAND.COM
 14518                                  setopts0:
 14519                                  	;test	word [_Bits],12h  ; (mask bare) or (mask wide)
 14520 00001285 F606[A2A0]12            	test	byte [_Bits],(mask.bare|mask.wide)
 14521 0000128A 7405                    	jz      short setopts1
 14522                                  	;and 	word [_Bits],0FFFEh ; not mask cratio
 14523 0000128C 8026[A2A0]FE            	and	byte [_Bits],~mask.cratio
 14524                                  
 14525                                  setopts1:
 14526                                  ;	Set # lines per display page.
 14527                                  
 14528                                  ;M01  Obtain screen height from ROM BIOS data area
 14529                                  ;
 14530                                  ;M01	mov	LinPerPag,LINESPERPAGE	; default value
 14531                                  
 14532 00001291 1E                      	push	ds
 14533                                  	;mov	ax,ROMBIOS_DATA 	; Get ROM Data segment
 14534 00001292 B84000                  	mov	ax,40h
 14535 00001295 8ED8                    	mov	ds,ax			;
 14536                                  	;Assume	DS:ROMBIOS_DATA
 14537                                  
 14538                                  	;mov	al,[CRT_Rows] ; [84h]	; Get max rows
 14539 00001297 A08400                  	mov	al,[84h]
 14540 0000129A 1F                      	pop	ds			;
 14541                                  	;Assume	DS:Trangroup
 14542                                  
 14543 0000129B 08C0                    	or	al,al			; If zero specified
 14544 0000129D 7502                    	jnz	short setopts2		;
 14545                                  
 14546                                  	;mov	al,LINESPERPAGE 	; assume 24 rows
 14547 0000129F B019                    	mov	al,25	; MSDOS 5.0 COMMAND.COM (TRANGROUP:11D1h)
 14548                                  setopts2:
 14549 000012A1 30E4                    	xor	ah,ah
 14550                                  setopts3:
 14551 000012A3 FEC0                    	inc	al			; height + 1 ;M018
 14552                                  
 14553 000012A5 A3[AEA2]                	mov	[LinPerPag],ax		; set the rows now
 14554                                  
 14555                                  ; Now the console driver can change the rows if it knows better (M01 end)
 14556                                  
 14557                                  	;mov	ax,(IOCTL shl 8)+GENERIC_IOCTL_HANDLE
 14558                                  					; IOCTL for handles
 14559 000012A8 B80C44                  	mov	ax,440Ch
 14560                                  	;mov	bx,STDOUT		; handle #
 14561 000012AB BB0100                  	mov	bx,1
 14562                                  	;mov	ch,IOC_SC		; screen
 14563 000012AE B503                    	mov	ch,3
 14564                                  	;mov	cl,get_generic		; get display info
 14565 000012B0 B17F                    	mov	cl,7Fh
 14566 000012B2 BA[9EA2]                	mov	dx,Display_Ioctl	; info block
 14567 000012B5 CD21                    	int	21h			; call DOS
 14568                                  
 14569 000012B7 A1[AEA2]                	mov	ax,[LinPerPag]		; AX = # lines per page
 14570 000012BA A3[419E]                	mov	[LeftOnPage],ax		; initialize # lines left on page
 14571                                  
 14572                                  ;	Set # entries per line.
 14573                                  
 14574                                  	;mov	byte [PerLine],NORMPERLIN
 14575                                  					; # entries per line without /w
 14576 000012BD C606[3E9E]01            	mov	byte [PerLine],1
 14577                                  	;;;test	Bits,mask wide
 14578                                  	;;test	word [_Bits],1
 14579                                  	;test	byte [_Bits],1
 14580                                  	; 07/06/2023
 14581 000012C2 F606[A2A0]02            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 14582 000012C7 7405                    	jz	short setopts4
 14583                                  	;mov	byte [PerLine],WIDEPERLIN
 14584                                  					; # entries per line with /w
 14585 000012C9 C606[3E9E]05            	mov	byte [PerLine],5
 14586                                  setopts4:
 14587                                  				;M011;start;The following code checks if a drive
 14588                                  				;letter has been parsed into SrcBuf, and if
 14589                                  				;so, the correct drive number is loaded into
 14590                                  				;the first FCB, at offset 5C.
 14591                                  
 14592                                  	;cmp	TRANGROUP:[SrcBuf+1],COLON_CHAR	; is this a drive letter?
 14593 000012CE 803E[B9A1]3A            	cmp	byte [SrcBuf+1],':'
 14594 000012D3 750A                    	jne	short soRet
 14595                                  	;mov	al,TRANGROUP:[SrcBuf]		; load drive letter into al
 14596 000012D5 A0[B8A1]                	mov	al,[SrcBuf]
 14597                                  	;and	al,not 20h			; capitalize ASCII drive letter (LowerCase-32)-->UpperCase
 14598 000012D8 24DF                    	and	al,0DFh ; ~20h ; not 20h
 14599 000012DA 2C40                    	sub	al,'@'	; 40h			; convert to 1-based number (1=A)
 14600 000012DC A25C00                  	mov	[FCB],al  ; [5Ch]		; store in first FCB
 14601                                  						;M011;end
 14602                                  soRet:
 14603 000012DF C3                      	retn
 14604                                  
 14605                                  ; ---------------------------------------------------------------------------
 14606                                  
 14607                                  ;***	CrunchPath - analyze supplied or default pathname
 14608                                  ;
 14609                                  ;	ENTRY	PathPos = ptr to pathname buffer
 14610                                  ;		PathCnt = length of pathname, not incl trailing delimiter
 14611                                  ;		Pathname in buffer must end in delimiter (like CR) and
 14612                                  ;		 must have space for another char after the delimiter.
 14613                                  ;
 14614                                  ;	EXIT	CY = clear if no error
 14615                                  ;		We are changed to directory found in pathname
 14616                                  ;		Previous directory ready to be restored via RestUDir
 14617                                  ;		FCB filename fields contain filename (possibly w/ wildcards)
 14618                                  ;
 14619                                  ;		If error occurred,
 14620                                  ;		CY = set
 14621                                  ;		ComSw = error bits (see ErrorRec)
 14622                                  ;		If ComSw not set,
 14623                                  ;		Ready for DOS Get Extended Error call
 14624                                  
 14625                                  	; 16/02/2023
 14626                                  CrunchPath:
 14627 000012E0 E80102                  	call	FileIsDevice
 14628 000012E3 7507                    	jne	short crpath1	; not a device, skip ahead
 14629                                  	;;;or	ComSw,mask dev	; signal file is device
 14630                                  	;;or	word [COMSW],1
 14631                                  	;or	byte [COMSW],1
 14632 000012E5 800E[2C9E]01            	or	byte [COMSW],mask.dev
 14633 000012EA EB2F                    	jmp	short cpErr	; return error
 14634                                  crpath1:
 14635 000012EC FF36[A6A0]              	push	word [PathPos]	; save ptr to pathname
 14636 000012F0 C606[AEA0]FF            	mov	byte [DirFlag],-1
 14637                                  				; tell PathCrunch not to parse file into FCB
 14638 000012F5 E8D418                  	call	PathCrunch	; change to directory in pathname
 14639 000012F8 C606[AEA0]00            	mov	byte [DirFlag],0
 14640                                  				; reset our little flag
 14641 000012FD 5E                      	pop	si		; SI = ptr to pathname
 14642 000012FE 7208                    	jc	short cpNoDir	; didn't find directory path
 14643 00001300 741A                    	jz	short cpRet	; found directory path w/ no filename
 14644                                  				;  - leave wildcard default in FCB and return
 14645                                  
 14646                                  ;*	We found a directory, and there was a filename attached.
 14647                                  ;	DestTail = ptr to ASCIIZ filename
 14648                                  
 14649 00001302 8B36[52A1]              	mov	si,[DestTail]	; SI = ptr to filename
 14650 00001306 EB28                    	jmp	short cpFile	; go parse the file into FCB
 14651                                  
 14652                                  ;*	PathCrunch failed to find a directory in the pathname.
 14653                                  ;
 14654                                  ;	Msg_Numb = error code
 14655                                  ;	DestIsDir = nonzero if path delimiter char's occur in pathname
 14656                                  ;	SI = ptr to pathname (now an ASCIIZ string)
 14657                                  
 14658                                  cpNoDir:
 14659 00001308 A1[CBA2]                	mov	ax,[Msg_Numb]	  ; AX = error code from PathCrunch
 14660 0000130B 09C0                    	or	ax,ax
 14661 0000130D 750C                    	jnz	short cpErr	  ; error occurred - return it
 14662 0000130F 803E[50A1]00            	cmp	byte [DestIsDir],0
 14663 00001314 7407                    	je	short cpMaybe	  ; no path delimiters seen, maybe it's a file
 14664                                  crpath3:
 14665                                  	;;;or	ComSw,mask baddir ; signal invalid directory name
 14666                                  	;;or	word [COMSW],2
 14667                                  	;or	byte [COMSW],2
 14668 00001316 800E[2C9E]02            	or	byte [COMSW],mask.baddir
 14669                                  	;jmp	short cpErr	  ; return error
 14670                                  	; 16/02/2023
 14671                                  cpErr:
 14672 0000131B F9                      	stc			  ; return error
 14673                                  cpRet:
 14674 0000131C C3                      	retn
 14675                                  
 14676                                  cpMaybe:
 14677                                  ;	SI = ptr to pathname
 14678                                  
 14679                                  	;cmp	byte [si+1],COLON_CHAR
 14680 0000131D 807C013A                	cmp	byte [si+1],':'
 14681 00001321 7501                    	jne	short crpath2	  ; no drive specifier, skip ahead
 14682 00001323 AD                      	lodsw			  ; SI = ptr past drive specifier "d:"
 14683                                  crpath2:
 14684 00001324 813C2E2E                	cmp	word [si],".."
 14685 00001328 7506                    	jne	short cpFile	  ; if not "..", treat as a file
 14686 0000132A 807C0200                	cmp	byte [si+2],0
 14687                                  	;jne	short cpFile	  ; or if there's more after "..", treat as file
 14688                                  	;;;;or	ComSw,mask baddir ; signal invalid directory
 14689                                  	;;;or	word [COMSW],2
 14690                                  	;;or	byte [COMSW],2
 14691                                  	;or	byte [COMSW],mask.baddir
 14692                                  	;jmp	short cpErr	  ; return error
 14693                                  	; 16/02/2023
 14694 0000132E 74E6                    	je	short crpath3
 14695                                  
 14696                                  ;	The preceding code was taken from the old DIR routine.
 14697                                  ;	It's garbage, I'm afraid. It's meant to check for ".."
 14698                                  ;	occurring when we're at the root directory. Too bad it
 14699                                  ;	doesn't handle problems with "..\..", etc.
 14700                                  
 14701                                  ;	We're ready to parse a filename into the FCB.
 14702                                  ;	SI = ptr to ASCIIZ filename
 14703                                  
 14704                                  cpFile:	
 14705 00001330 BF5C00                  	mov	di,FCB	; 5Ch	; DI = ptr to FCB
 14706 00001333 B80E29                  	mov	ax,290Eh
 14707                                  	;mov	ax,(Parse_File_Descriptor<<8)|0Eh
 14708                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 0Eh
 14709                                  				; wildcards already in FCB used as defaults
 14710 00001336 CD21                    	int	21h
 14711 00001338 F8                      	clc			; return success
 14712                                  	;jmp	short cpRet
 14713                                  	; 16/02/2023
 14714 00001339 C3                      	retn
 14715                                  
 14716                                  ;cpErr:
 14717                                  ;	stc			; return error
 14718                                  ;cpRet:
 14719                                  ;	retn
 14720                                  
 14721                                  ; ---------------------------------------------------------------------------
 14722                                  
 14723                                  ;***	InstallCtrlC - install our private control-C handler
 14724                                  ;
 14725                                  ;	Put our control-c handler in front of command.com's default
 14726                                  ;	handler, to make sure the user's default directory gets restored.
 14727                                  ;	This shouldn't be necessary, but, for now, there are situations
 14728                                  ;	where the TDATA segment is left in a modified state when a
 14729                                  ;	control-c occurs.  This means that the transient will be
 14730                                  ;	reloaded, and the user's directory cannot be restored.
 14731                                  ;
 14732                                  ;	Bugbug:  fix the wider problem?  Involves message services.  Ugly.
 14733                                  ;
 14734                                  ;	ENTRY	nothing
 14735                                  ;
 14736                                  ;	EXIT	nothing
 14737                                  ;
 14738                                  ;	USED	AX,BX,DX
 14739                                  ;
 14740                                  ;	EFFECTS
 14741                                  ;
 14742                                  ;	  CtrlCHandler address placed in int 23 vector.
 14743                                  ;
 14744                                  ;	NOTE
 14745                                  ;
 14746                                  ;	  Command.com's basic control-c handler will be restored
 14747                                  ;	  to the int 23 vector by the HeadFix routine, after DIR finishes.
 14748                                  
 14749                                  	; 16/02/2023
 14750                                  InstallCtrlC:
 14751 0000133A 06                      	push	es			; preserve ES
 14752 0000133B B82335                  	mov	ax,3523h
 14753                                  	;mov	ax,(GET_INTERRUPT_VECTOR<<8)+23h
 14754                                  	;;mov	ax,(GET_INTERRUPT_VECTOR shl 8) + 23h
 14755 0000133E CD21                    	int	21h
 14756 00001340 891E[5BAA]              	mov	[OldCtrlCHandler],bx	; save old int 23 vector
 14757 00001344 8C06[5DAA]              	mov	[OldCtrlCHandler+2],es	 
 14758 00001348 07                      	pop	es			; restore ES
 14759                                  
 14760 00001349 BA[361B]                	mov	dx,CtrlCHandler 	; DS:DX = ptr to CtrlCHandler
 14761 0000134C B82325                  	mov	ax,2523h
 14762                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+23h
 14763                                  	;;mov	ax,(SET_INTERRUPT_VECTOR shl 8) + 23h
 14764 0000134F CD21                    	int	21h
 14765 00001351 C3                      	retn
 14766                                  
 14767                                  ; ---------------------------------------------------------------------------
 14768                                  
 14769                                  ;***	ListSubds - search and list files in subdirectories
 14770                                  ;
 14771                                  ;	ENTRY	Current directory (on selected drive) is top of subdir tree
 14772                                  ;		FCB is still set up for file searches
 14773                                  ;		Bits, AttrSpecified, AttrSelect, DestBuf all still set up
 14774                                  ;
 14775                                  ;	EXIT	CY = clear if no error
 14776                                  ;		FileCnt = # files found & displayed
 14777                                  ;		FileSiz = total size of files found
 14778                                  ;
 14779                                  ;		If error,
 14780                                  ;		CY = set
 14781                                  ;		Ready for DOS Get Extended Error call
 14782                                  ;
 14783                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 14784                                  ;
 14785                                  ;	EFFECTS
 14786                                  ;
 14787                                  ;	  FileCntTotal, FileSizTotal are updated.
 14788                                  ;	  Subdirectories may be listed on standard output device.
 14789                                  ;
 14790                                  ;	NOTES
 14791                                  ;
 14792                                  ;	  ListSubds seeds the recursive entry point lsNode with a ptr
 14793                                  ;	   to a buffer where we'll stack up subdirectory filenames.
 14794                                  ;	   Each name is stored ASCIIZ.
 14795                                  
 14796                                  	; 16/02/2023
 14797                                  ListSubds:
 14798                                  	;invoke	SetRest1		; make sure user's dir gets restored
 14799 00001352 E8E01E                  	call	SetRest1
 14800                                  
 14801 00001355 BB[12A2]                	mov	bx,ScanBuf   		; BX = ptr to child name buffer
 14802                                  lsNode:
 14803 00001358 C60700                  	mov	byte [bx],0		; start with null child name
 14804                                  lsLoop:
 14805 0000135B E81002                  	call	FindNextChild		; search for next subdirectory
 14806 0000135E 7235                    	jc	short lsErr		; search failed - examine error
 14807                                  
 14808 00001360 89DA                    	mov	dx,bx			; DX = ptr to child's name
 14809 00001362 E8A904                  	call	ChangeDir		; enter child directory
 14810                                  
 14811                                  					; M023;start
 14812 00001365 7306                    	jnc	short lstsd1		; check for error
 14813                                  	;cmp	ax,3
 14814 00001367 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND	; error due to len(pathname)>MAXPATH?
 14815 0000136A 74EF                    	je	short lsLoop		; yes, skip over this subdirectory
 14816                                  	;jmp	short lsRet		; no, other error: DIR must fail
 14817                                  	; 16/02/2023			; M023;end
 14818 0000136C C3                      	retn
 14819                                  lstsd1:	
 14820 0000136D 53                      	push	bx
 14821 0000136E E8AB02                  	call	ListDir			; list the directory
 14822 00001371 5B                      	pop	bx
 14823                                  
 14824                                  ;	Note we're ignoring errors returned here.
 14825                                  
 14826 00001372 89DF                    	mov	di,bx			; DI = ptr to child's name
 14827 00001374 B90D00                  	mov	cx,13			; CX = max name length w/ null
 14828 00001377 30C0                    	xor	al,al			; AL = zero byte to look for
 14829 00001379 F2AE                    	repne	scasb			; DI = ptr to next name pos'n in buf
 14830 0000137B 53                      	push	bx			; save ptr to child's name
 14831 0000137C 89FB                    	mov	bx,di			; BX = ptr to next name pos'n in buf
 14832 0000137E E8D7FF                  	call	lsNode			; recurse from new node
 14833 00001381 5B                      	pop	bx			; BX = ptr to child's name
 14834 00001382 9C                      	pushf				; save error condition
 14835                                  	
 14836                                  	;;shove	0
 14837                                  	;mov	ax,0
 14838 00001383 29C0                    	sub	ax,ax ; 0
 14839 00001385 50                      	push	ax
 14840                                  	;shove	".."
 14841 00001386 B82E2E                  	mov	ax,'..'  ; 2E2Eh
 14842 00001389 50                      	push	ax
 14843 0000138A 89E2                    	mov	dx,sp			; DX = ptr to "..",0 on stack
 14844 0000138C E87F04                  	call	ChangeDir		; return to parent directory
 14845 0000138F 58                      	pop	ax			; restore stack
 14846 00001390 58                      	pop	ax
 14847                                  
 14848 00001391 9D                      	popf				; restore error condition from child
 14849                                  	;jc	short lsRet		; return error
 14850                                  	;jmp	short lsLoop		; look for more children
 14851                                  	; 16/02/2023
 14852 00001392 73C7                    	jnc	short lsLoop
 14853 00001394 C3                      	retn
 14854                                  lsErr:
 14855 00001395 E8AC0E                  	call	get_ext_error_number	; AX = extended error code
 14856                                  	;cmp	ax,2
 14857 00001398 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 14858 0000139B 7406                    	je	short lsRet		; file not found, we're ok
 14859                                  	;cmp	ax,18
 14860 0000139D 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 14861 000013A0 7401                    	je	short lsRet		; no more files, we're ok
 14862 000013A2 F9                      	stc				; return other errors
 14863                                  lsRet:	
 14864 000013A3 C3                      	retn
 14865                                  
 14866                                  ; ---------------------------------------------------------------------------
 14867                                  
 14868                                  	;break	<DIR support routines>
 14869                                  
 14870                                  ;***	SUPPORT ROUTINES
 14871                                  
 14872                                  ; ----------------------
 14873                                  
 14874                                  ;***	CheckChild - check potential subdirectory name for FindNextChild
 14875                                  ;
 14876                                  ;	ENTRY	DirBuf contains DOS Find-buffer with potential child
 14877                                  ;		BX = ptr to last child's name
 14878                                  ;		BP = ptr to temp child's name
 14879                                  ;
 14880                                  ;	EXIT	nothing
 14881                                  ;
 14882                                  ;	USED	AX,CX,SI,DI
 14883                                  ;
 14884                                  ;	EFFECTS
 14885                                  ;
 14886                                  ;	  Filename pointed to by BP may be changed.
 14887                                  ;
 14888                                  ;	NOTES
 14889                                  ;
 14890                                  ;	  Potential filename replaces temp filename if:
 14891                                  ;	   it's a subdirectory file;
 14892                                  ;	   it doesn't start with a '.';
 14893                                  ;	   it's alphanumerically greater than last child's name;
 14894                                  ;	   and it's alphanumerically less than temp name.
 14895                                  
 14896                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14897                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14898                                  CheckChild:
 14899                                  	;test	DirBuf.find_buf_attr,ATTR_DIRECTORY
 14900 000013A4 F606[65A0]10            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY ; 10h
 14901 000013A9 741D                    	jz	short ccRet	; not a subdirectory file- return
 14902                                  
 14903                                  	; 16/02/2023
 14904 000013AB BE[6EA0]                	mov	si,DIRBUF+FIND_BUF.PNAME
 14905 000013AE 803C2E                  	cmp	byte [si],'.'
 14906                                  	;;cmp	DirBuf.find_buf_pname,'.'
 14907                                  	;cmp	byte [DIRBUF+FIND_BUF.PNAME],'.'
 14908 000013B1 7415                    	je	short ccRet	; starts with a dot- return
 14909                                  
 14910                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14911                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14912 000013B3 89DF                    	mov	di,bx
 14913 000013B5 E86D04                  	call	CmpAscz		; compare candidate to last child's name
 14914 000013B8 760E                    	jna	short ccRet	; it's not above it- return
 14915                                  
 14916                                  	; 07/06/2023
 14917                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14918                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14919                                  	; si = DIRBUF+FIND_BUF.PNAME
 14920 000013BA 89EF                    	mov	di,bp
 14921 000013BC E86604                  	call	CmpAscz		; compare candidate to temp name
 14922 000013BF 7307                    	jnb	short ccRet	; it's not below it- return
 14923                                  
 14924                                  ;	New kid is alright. Copy to temp.
 14925                                  
 14926                                  	; 07/06/2023
 14927                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14928                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14929                                  	; si = DIRBUF+FIND_BUF.PNAME
 14930 000013C1 89EF                    	mov	di,bp
 14931 000013C3 B90D00                  	mov	cx,13
 14932 000013C6 F3A4                    	rep	movsb
 14933                                  ccRet:
 14934 000013C8 C3                      	retn
 14935                                  
 14936                                  ; ---------------------------------------------------------------------------
 14937                                  
 14938                                  ;***	CmpEntry - compare one directory entry to another in sort order
 14939                                  ;
 14940                                  ;	Compare one directory entry against another according to
 14941                                  ;	the sort codes in DestBuf. One or more comparisons
 14942                                  ;	may be made of file name, extension, time/date, and
 14943                                  ;	size.  Comparisons may be made for upward or downward
 14944                                  ;	sort order.
 14945                                  ;
 14946                                  ;	ENTRY	ES:BX = ptr to entry to compare
 14947                                  ;		ES:BP = ptr to entry to be compared against
 14948                                  ;		DestBuf contains sort codes (see DestBuf)
 14949                                  ;		DS = TRANGROUP seg addr
 14950                                  ;
 14951                                  ;	EXIT	BX = unchanged
 14952                                  ;		BP = unchanged
 14953                                  ;		Condition flags set for same, above, or below
 14954                                  ;		 comparing BX entry against BP entry.
 14955                                  ;		 'Same, above, below' translate to 'same, after, before'.
 14956                                  ;
 14957                                  ;	USED:	AX,CX,DX,SI,DI
 14958                                  
 14959                                  	; 16/02/2023
 14960                                  CmpEntry:
 14961 000013C9 BE[55A1]                	mov	si,DestBuf	; (DS:SI) = ptr to sort codes
 14962                                  ceLoop:
 14963 000013CC 31C0                    	xor	ax,ax		; AX = 0
 14964 000013CE 8A04                    	mov	al,[si]		; AL = sort code
 14965 000013D0 08C0                    	or	al,al
 14966 000013D2 741C                    	jz	short ceDone	; sort code is zero, we're done
 14967 000013D4 46                      	inc	si		; DS:SI = ptr to next sort code
 14968 000013D5 56                      	push	si		; save ptr to next sort code
 14969 000013D6 FEC8                    	dec	al
 14970 000013D8 D0E0                    	shl	al,1
 14971                                  	;sal	al,1		; AX = index into cmp call table
 14972                                  				; CY set for downward sort order
 14973 000013DA 89C6                    	mov	si,ax		; SI = index into cmp call table
 14974 000013DC 2E8B84[F113]            	mov	ax,[cs:si+FieldCmps]
 14975                                  				; AX = addr of compare routine
 14976 000013E1 7204                    	jc	short ceDn	; downwards sort - go swap entries
 14977 000013E3 FFD0                    	call	ax 		; do upwards sort
 14978 000013E5 EB06                    	jmp	short ceNs
 14979                                  ceDn:
 14980 000013E7 87DD                    	xchg	bx,bp		; swap entry ptrs for downward sort order
 14981 000013E9 FFD0                    	call	ax		; do sort
 14982 000013EB 87DD                    	xchg	bx,bp		; swap ptrs back
 14983                                  ceNs:
 14984 000013ED 5E                      	pop	si		; SI = ptr to next sort code
 14985 000013EE 74DC                    	je	short ceLoop	; compare showed no difference, keep trying
 14986                                  ceDone:
 14987                                  
 14988                                  ;	Get here either from unequal compare or sort code = 0.
 14989                                  ;	In the latter case, condition codes indicate equality,
 14990                                  ;	which is correct.
 14991                                  
 14992 000013F0 C3                      	retn
 14993                                  
 14994                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14995                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:1339h)
 14996                                  
 14997                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 14998                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:144Eh)
 14999                                  
 15000                                  FieldCmps:		; call table of entry comparisons
 15001 000013F1 [FD13]                  	dw	CmpName
 15002 000013F3 [0814]                  	dw	CmpExt
 15003 000013F5 [4614]                  	dw	CmpTime
 15004 000013F7 [6214]                  	dw	CmpSize
 15005 000013F9 [6714]                  	dw	CmpType
 15006                                  	; 05/06/2023 - Retro DOS 4.2 COMMAND.COM
 15007 000013FB [7514]                  	dw	CmpCratio
 15008                                  
 15009                                  ; ---------------------------------------------------------------------------
 15010                                  
 15011                                  ;***	CmpName - compare file name of two entries
 15012                                  ;***	CmpExt - compare extension of two entries
 15013                                  ;
 15014                                  ;	ENTRY	ES:BX = ptr to one entry
 15015                                  ;		ES:BP = ptr to another entry
 15016                                  ;
 15017                                  ;	EXIT	BX = unchanged
 15018                                  ;		BP = unchanged
 15019                                  ;		Condition flags set for same, above, or below
 15020                                  ;		comparing BX entry to BP entry.
 15021                                  ;
 15022                                  ;	USED:	AX,CX,DX,SI,DI
 15023                                  
 15024                                  	; 16/02/2023
 15025                                  CmpName:
 15026 000013FD 89DE                    	mov	si,bx		; ES:SI = ptr to BX entry
 15027 000013FF 89EF                    	mov	di,bp		; ES:DI = ptr to BP entry
 15028                                  	;;add	si,filename	; ES:SI = ptr to BX name
 15029                                  	;add	si,1
 15030                                  	; 25/04/2023
 15031 00001401 46                      	inc	si
 15032                                  	;;add	di,filename	; ES:DI = ptr to BP name
 15033                                  	;add	di,1
 15034                                  	; 25/04/2023
 15035 00001402 47                      	inc	di
 15036                                  	;mov	cx,size filename
 15037                                  				; CX = length of name
 15038 00001403 B90800                  	mov	cx,8
 15039 00001406 EB0C                    	jmp	short CmpStr
 15040                                  
 15041                                  CmpExt:
 15042                                  	; 07/06/2023
 15043                                  	;mov	si,bx		; ES:SI = ptr to BX entry
 15044                                  	;mov	di,bp		; ES:DI = ptr to BP entry
 15045                                  	;;add	si,fileext	; ES:SI = ptr to BX extension
 15046                                  	;add	si,9
 15047                                  	;;add	di,fileext	; ES:DI = ptr to BP extension
 15048                                  	;add	di,9
 15049                                  	;
 15050 00001408 BE0900                  	mov	si,9
 15051 0000140B 89F7                    	mov	di,si ; mov di,9
 15052 0000140D 01DE                    	add	si,bx
 15053 0000140F 01EF                    	add	di,bp
 15054                                  	;
 15055                                  	;mov	cx,size fileext	; CX = length of extension field
 15056 00001411 B90300                  	mov	cx,3
 15057                                  
 15058                                  ;	Bugbug:	use symbol for subfunction code.
 15059                                  
 15060                                  CmpStr:	
 15061 00001414 803E[56AA]06            	cmp	byte [CountryPtrId],6
 15062 00001419 7527                    	jne	short cnNoCollTable
 15063                                  				; no collating table available
 15064                                  
 15065                                  ;*	Compare strings using collating table.
 15066                                  ;
 15067                                  ;	ES:SI = ptr to 1st string
 15068                                  ;	ES:DI = ptr to 2nd string
 15069                                  ;	CX = length
 15070                                  
 15071 0000141B 55                      	push	bp		; preserve BP
 15072 0000141C 53                      	push	bx		; preserve BX
 15073 0000141D 1E                      	push	ds		; preserve DS
 15074 0000141E C51E[57AA]              	lds	bx,[CountryPtr]	; DS:BX = ptr to collating table
 15075                                  	;assume	ds:NOTHING
 15076 00001422 8B2F                    	mov	bp,[bx]		; BP = size of collating table
 15077 00001424 43                      	inc	bx
 15078 00001425 43                      	inc	bx		; DS:BX = ptr to collating values
 15079                                  				; DS:[BX]-2 = size of table
 15080 00001426 31C0                    	xor	ax,ax		; AX = 0 for starters
 15081                                  
 15082                                  ;	Bugbug:	Investigate removing collating table length checks.
 15083                                  
 15084                                  cnNextChar:
 15085 00001428 268A05                  	mov	al,[es:di]	; AL = AX = char from 2nd string
 15086 0000142B 47                      	inc	di		; ES:DI = ptr to next char 2nd string
 15087 0000142C 39E8                    	cmp	ax,bp		; compare to collating table length
 15088 0000142E 7301                    	jae	short cn1 	; char not in table
 15089 00001430 D7                      	xlat				
 15090                                  cn1:				; AL = AX = collating value
 15091 00001431 89C2                    	mov	dx,ax		; DX = collating value from 2nd string
 15092                                  	;lods	byte ptr es:[si]
 15093 00001433 26AC                    	es	lodsb		; AL = AX = char from 1st string
 15094                                  				; ES:SI = ptr to next char 1st string
 15095 00001435 39E8                    	cmp	ax,bp		; compare to collating table length
 15096 00001437 7301                    	jae	short cn2	; char not in table
 15097 00001439 D7                      	xlat				
 15098                                  cn2:				; AL = AX = collating value
 15099 0000143A 39D0                    	cmp	ax,dx		; compare collating values
 15100 0000143C E1EA                    	loope	cnNextChar	; until unequal or no more left
 15101                                  
 15102 0000143E 1F                      	pop	ds		; restore DS
 15103                                  	;assume	ds:TRANGROUP
 15104 0000143F 5B                      	pop	bx		; restore BX
 15105 00001440 5D                      	pop	bp		; restore BP
 15106 00001441 C3                      	retn
 15107                                  
 15108                                  ;*	If no collating table is available, simply compare raw ASCII values.
 15109                                  ;	Don't we wish we could just do this all the time?  Sigh.
 15110                                  
 15111                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15112                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:138Dh)
 15113                                  cnNoCollTable:
 15114                                  	;repe	cmps byte ptr es:[si],[di]
 15115                                  				;db 0F3h,26h,0A6h,0C3h
 15116 00001442 F3                      	repe	; 0F3h
 15117 00001443 26                      	es	; 26h
 15118 00001444 A6                      	cmpsb	; 0A6h
 15119 00001445 C3                      	retn	; 0C3h
 15120                                  
 15121                                  ; ---------------------------------------------------------------------------
 15122                                  
 15123                                  ;***	CmpTime - compare entries by date/time
 15124                                  ;
 15125                                  ;	ENTRY	ES:BX = ptr to one entry
 15126                                  ;		ES:BP = ptr to another entry
 15127                                  ;
 15128                                  ;	EXIT	BX = unchanged
 15129                                  ;		BP = unchanged
 15130                                  ;		Condition flags set for same, above, or below
 15131                                  ;		 comparing BX entry to BP entry.
 15132                                  ;
 15133                                  ;	USED:	CX,SI,DI
 15134                                  ;
 15135                                  ;	NOTE	Filetime and filedate fields in our private entry
 15136                                  ;		structure must be adjacent and in that order.
 15137                                  
 15138                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15139                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15140                                  CmpTime:
 15141 00001446 89DE                    	mov	si,bx
 15142 00001448 89EF                    	mov	di,bp
 15143                                  	;add	si,filedate + size filedate - 1
 15144 0000144A 83C610                  	add	si,16 ; 15+2-1
 15145                                  	;add	di,filedate + size filedate - 1
 15146 0000144D 83C710                  	add	di,16 ; 15+2-1
 15147                                  	; 07/06/2023
 15148 00001450 BE1000                  	mov	si,16
 15149                                  CmpST2:		; 07/06/2023
 15150 00001453 89F7                    	mov	di,si	; mov di,16
 15151 00001455 01DE                    	add	si,bx
 15152 00001457 01EF                    	add	di,bp
 15153                                  
 15154                                  	;mov	cx,size filetime + size filedate
 15155 00001459 B90400                  	mov	cx,4 ; 2+2
 15156 0000145C FD                      	std
 15157                                  	;repe	cmps byte ptr es:[si],[di]
 15158                                  				;db 0F3h,26h,0A6h, 0FCh,0C3h
 15159 0000145D F3                      	repe	; 0F3h
 15160 0000145E 26                      	es	; 26h
 15161 0000145F A6                      	cmpsb	; 0A6h
 15162                                  	
 15163 00001460 FC                      	cld	; 0FCh
 15164 00001461 C3                      	retn	; 0C3h
 15165                                  
 15166                                  ; ---------------------------------------------------------------------------
 15167                                  
 15168                                  ;***	CmpSize - compare entries by size
 15169                                  ;
 15170                                  ;	ENTRY	ES:BX = ptr to one entry
 15171                                  ;		ES:BP = ptr to another entry
 15172                                  ;
 15173                                  ;	EXIT	BX = unchanged
 15174                                  ;		BP = unchanged
 15175                                  ;		Condition flags set for same, above, or below
 15176                                  ;		 comparing BX entry to BP entry.
 15177                                  ;
 15178                                  ;	USED:	CX,SI,DI
 15179                                  
 15180                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15181                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15182                                  CmpSize:
 15183                                  	;mov	si,bx
 15184                                  	;mov	di,bp
 15185                                  	;;add	si,filesize + size filesize - 1
 15186                                  	;add	si,20  ; 17+4-1
 15187                                  	;;add	di,filesize + size filesize - 1
 15188                                  	;add	di,20  ; 17+4-1
 15189                                  	; 07/06/2023
 15190 00001462 BE1400                  	mov	si,20
 15191                                  	;;;
 15192 00001465 EBEC                    	jmp	short CmpST2 ; 07/06/2023
 15193                                  	;;;
 15194                                  ;CmpST2:
 15195                                  ;	mov	di,si	; mov di,20
 15196                                  ;	add	si,bx
 15197                                  ;	add	di,bp
 15198                                  ;
 15199                                  ;	;mov	cx,size filesize
 15200                                  ;	mov	cx,4
 15201                                  ;	std
 15202                                  ;	;repe	cmps byte ptr es:[si],[di]
 15203                                  ;				;db 0F3h,26h,0A6h
 15204                                  ;	repe	; 0F3h
 15205                                  ;	es	; 26h
 15206                                  ;	cmpsb	; 0A6h
 15207                                  ;
 15208                                  ;	cld
 15209                                  ;	retn
 15210                                  
 15211                                  ; ---------------------------------------------------------------------------
 15212                                  
 15213                                  ;***	CmpType - compare entries by file type (subdirectory or not)
 15214                                  ;
 15215                                  ;	ENTRY	ES:BX = ptr to one entry
 15216                                  ;		ES:BP = ptr to another entry
 15217                                  ;
 15218                                  ;	EXIT	BX = unchanged
 15219                                  ;		BP = unchanged
 15220                                  ;		Condition flags set for same, above, or below
 15221                                  ;		 comparing BX entry to BP entry.
 15222                                  ;
 15223                                  ;	USED:	AX
 15224                                  
 15225                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 15226                                  CmpType:
 15227                                  	;mov	al,es:[bx].fileattr
 15228 00001467 268A470C                	mov	al,[es:bx+12]
 15229                                  	;mov	ah,es:[bp].fileattr
 15230 0000146B 268A660C                	mov	ah,[es:bp+12]
 15231                                  	;and	ax,(ATTR_DIRECTORY shl 8) + ATTR_DIRECTORY
 15232                                  	;and	ax,1010h
 15233 0000146F 251010                  	and	ax,(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY
 15234 00001472 38C4                    	cmp	ah,al
 15235 00001474 C3                      	retn
 15236                                  
 15237                                  ; ---------------------------------------------------------------------------
 15238                                  
 15239                                  ;***	CmpCratio - compare entries by compression ratio
 15240                                  ;
 15241                                  ;	ENTRY	ES:BX = ptr to one entry
 15242                                  ;		ES:BP = ptr to another entry
 15243                                  ;
 15244                                  ;	EXIT	BX = unchanged
 15245                                  ;		BP = unchanged
 15246                                  ;		Condition flags set for same, above, or below
 15247                                  ;		 comparing BX entry to BP entry.
 15248                                  ;
 15249                                  ;	USED:	AX
 15250                                  
 15251                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 15252                                  CmpCratio:
 15253                                  	;mov	al,es:[bx].compratio
 15254 00001475 268A4715                	mov	al,[es:bx+21]	
 15255                                  	;cmp	al,es:[bp].compratio
 15256 00001479 263A4615                	cmp     al,[es:bp+21]
 15257 0000147D C3                      	retn
 15258                                  
 15259                                  ; ---------------------------------------------------------------------------
 15260                                  
 15261                                  ;***	DefaultAttr - set default attribute conditions
 15262                                  ;
 15263                                  ;	ENTRY	nothing
 15264                                  ;
 15265                                  ;	EXIT	CY clear
 15266                                  ;
 15267                                  ;	USED
 15268                                  ;
 15269                                  ;	EFFECTS
 15270                                  ;
 15271                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 15272                                  
 15273                                  	; 16/02/2023
 15274                                  DefaultAttr:
 15275                                  	;mov	byte [AttrSpecified],6
 15276 0000147E C606[AAA0]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM
 15277                                  					; specify H and S
 15278 00001483 C606[ABA0]00            	mov	byte [AttrSelect],0	; H and S must be off
 15279 00001488 F8                      	clc				; return success
 15280                                  dtRet:	; 18/02/2023
 15281 00001489 C3                      	retn
 15282                                  
 15283                                  ; ---------------------------------------------------------------------------
 15284                                  
 15285                                  ;***	DisplayTotals - display grand total stats
 15286                                  ;
 15287                                  ;	If we searched subdirectories, display the total # files found
 15288                                  ;	 and total size of files found.
 15289                                  ;	Display disk space remaining.
 15290                                  ;
 15291                                  ;	ENTRY	FileCntTotal, FileSizTotal contain correct values
 15292                                  ;		Bits contains setting of /s
 15293                                  ;		FCB contains drive #
 15294                                  ;
 15295                                  ;	EXIT	nothing
 15296                                  ;
 15297                                  ;	USES	AX,DX
 15298                                  ;		FileSiz
 15299                                  
 15300                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15301                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:13D1h
 15302                                  
 15303                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15304                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:14F1h
 15305                                  
 15306                                  DisplayTotals:
 15307                                  	;;;test	Bits,mask subd
 15308                                  	;;test	word [_Bits],4
 15309                                  	;test	byte [_Bits],4
 15310                                  	; 07/06/2023
 15311 0000148A F606[A2A0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 15312 0000148F 7432                    	jz	short dtFree		; no subdirectories- do bytes free
 15313                                  
 15314 00001491 E88F16                  	call	CRLF2			; start on new line
 15315 00001494 E82204                  	call	UseLine
 15316                                  
 15317 00001497 BA[3294]                	mov	dx,total_ptr
 15318 0000149A E89040                  	call	std_printf		; "Total:",cr,lf
 15319 0000149D E81904                  	call	UseLine
 15320                                  	;;;
 15321                                  	; 07/06/2023
 15322                                  	; MSDOS 6.22 COMMAND.COM
 15323                                  	;test	word [_Bits],1		; mask.cratio
 15324 000014A0 F606[A2A0]01            	test	byte [_Bits],mask.cratio
 15325 000014A5 740E                    	jz      short dtCntSize
 15326 000014A7 A1[559E]                	mov     ax,[ccluUsedTotal]
 15327 000014AA A3[539E]                	mov     [ccluUsedDir],ax
 15328 000014AD BE[5F9E]                	mov     si,csecUsedTotal
 15329 000014B0 BF[5B9E]                	mov     di,csecUsedDir
 15330 000014B3 A5                      	movsw
 15331 000014B4 A5                      	movsw
 15332                                  dtCntSize:    
 15333                                  	;;;
 15334 000014B5 A1[499E]                	mov	ax,[FileCntTotal]	; AX = # files found mod 64K
 15335 000014B8 BE[4D9E]                	mov	si,FileSizTotal
 15336 000014BB BF[459E]                	mov	di,FileSiz
 15337 000014BE A5                      	movsw
 15338 000014BF A5                      	movsw				; move total size to size variable
 15339 000014C0 E8FC05                  	call	DisplayCntSiz		; display file count & size &
 15340                                  dtFree: 				;   (maybe) compression ratio
 15341 000014C3 B436                    	mov	ah,36h
 15342                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 15343 000014C5 8A165C00                	mov	dl,[FCB] ; [5Ch]	; DL = drive#
 15344 000014C9 CD21                    	int	21h			; call DOS
 15345 000014CB 83F8FF                  	cmp	ax,-1			; check 'invalid drive' return code
 15346 000014CE 74B9                    	jz	short dtRet		; can't get drive space - return
 15347 000014D0 F7E1                    	mul	cx
 15348 000014D2 F7E3                    	mul	bx
 15349 000014D4 A3[40A1]                	mov	[Bytes_Free],ax
 15350 000014D7 8916[42A1]              	mov	[Bytes_Free+2],dx
 15351 000014DB BA[4192]                	mov	dx,bytmes_ptr
 15352 000014DE E84C40                  	call	std_printf		; "nnn bytes free",cr,lf
 15353                                  	;call	UseLine
 15354                                  ;dtRet:
 15355                                  	;retn
 15356                                  	; 18/02/2023
 15357 000014E1 E9D503                  	jmp	UseLine
 15358                                  
 15359                                  ; ---------------------------------------------------------------------------
 15360                                  
 15361                                  ;***	FileIsDevice - see if file looks like a device
 15362                                  ;
 15363                                  ;	ENTRY	PathPos = ptr to pathname
 15364                                  ;		PathCnt = length of pathname w/o terminating char
 15365                                  ;		DirBuf is DOS DTA
 15366                                  ;
 15367                                  ;	EXIT	ZR = set if file looks like a device
 15368                                  ;
 15369                                  ;	USED	AX,BX,CX,DX,DI
 15370                                  ;
 15371                                  ;	EFFECTS
 15372                                  ;
 15373                                  ;	  DTA buffer holds results of Find First function
 15374                                  ;
 15375                                  ;	NOTES
 15376                                  ;
 15377                                  ;	  We try to flag devices in two ways. First, we try
 15378                                  ;	  the DOS Find First function. It returns attribute bit 6
 15379                                  ;	  set on a successful find if it identifies a device name.
 15380                                  ;	  Unfortunately, it returns 'path not found' for a device
 15381                                  ;	  name terminated with colon, such as "CON:". So, we look
 15382                                  ;	  for any colon in the pathname after the 2nd character,
 15383                                  ;	  and flag the pathname as a device if we find one.
 15384                                  
 15385                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15386                                  FileIsDevice:
 15387 000014E4 8B16[A6A0]              	mov	dx,[PathPos]	 ; DX = ptr to pathname
 15388                                  
 15389 000014E8 89D7                    	mov	di,dx
 15390 000014EA 033E[A4A0]              	add	di,[PathCnt]	 ; DI = ptr to byte after pathname
 15391 000014EE 30DB                    	xor	bl,bl		 ; BL = NUL to terminate pathname with
 15392 000014F0 861D                    	xchg	bl,[di] 	 ; BL = saved pathname terminating char
 15393                                  
 15394 000014F2 31C9                    	xor	cx,cx		 ; CX = attribute mask (normal search)
 15395 000014F4 B44E                    	mov	ah,4Eh
 15396                                  	;mov	ah,Find_First	 ; AH = DOS Find First function code
 15397 000014F6 CD21                    	int	21h	 	 ; call DOS
 15398 000014F8 861D                    	xchg	bl,[di]		 ; restore pathname terminating char
 15399 000014FA 720A                    	jc	short piCol	 ; didn't find a dir entry, check for colon
 15400                                  
 15401                                  ;	Found a dir entry, see if Find First thinks it's a device.
 15402                                  
 15403                                  	;test	byte [DIRBUF+21],40h
 15404 000014FC F606[65A0]40            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 15405 00001501 7403                    	jz	short piCol	 ; device attribute not set, look for colon
 15406 00001503 31C9                    	xor	cx,cx		 ; it's a device, return ZR flag
 15407                                  	;jmp	short piRet
 15408                                  	; 25/04/2023
 15409                                  piRet:
 15410 00001505 C3                      	retn
 15411                                  
 15412                                  ;	Device attribute not returned by Find First function. But
 15413                                  ;	let's check for a colon anywhere in the pathname after the
 15414                                  ;	second byte.
 15415                                  ;
 15416                                  ;	DI = ptr to byte after pathname
 15417                                  
 15418                                  piCol:
 15419 00001506 4F                      	dec	di		 ; DI = ptr to last char in pathname
 15420 00001507 B03A                    	mov	al,':'
 15421                                  	;mov	al,COLON_CHAR	 ; AL = colon char to search for
 15422 00001509 8B0E[A4A0]              	mov	cx,[PathCnt]	 ; CX = # chars to scan
 15423 0000150D 49                      	dec	cx
 15424 0000150E 49                      	dec	cx		 ; ignore 1st two chars of pathname
 15425 0000150F 09C9                    	or	cx,cx
 15426 00001511 78F2                    	js	short piRet	 ; if < 2 chars in pathname, just return
 15427 00001513 09FF                    	or	di,di		 ; clear ZR in case CX = 0
 15428 00001515 FD                      	std			 ; scan downward
 15429 00001516 F2AE                    	repne	scasb
 15430 00001518 FC                      	cld			 ; restore default upward direction
 15431                                  
 15432                                  ;	After scanning, the ZR flag is set to indicate presence of a colon.
 15433                                  ;piRet:
 15434 00001519 C3                      	retn
 15435                                  
 15436                                  ;FileIsDevice endp
 15437                                  
 15438                                  ; ---------------------------------------------------------------------------
 15439                                  
 15440                                  ;***	FindFirst - find first directory entry to display
 15441                                  ;***	FindNext - find next directory entry to display
 15442                                  ;
 15443                                  ;	ENTRY	Bits<inmem> = set if entries are loaded in TPA
 15444                                  ;		AttrSpecified, AttrSelect are set
 15445                                  ;
 15446                                  ;	EXIT	CY = clear if successful
 15447                                  ;		BX = offset in TPA buffer of directory entry found
 15448                                  ;
 15449                                  ;		If unsuccessful,
 15450                                  ;		CY = set
 15451                                  ;		AX = DOS error code
 15452                                  ;		DOS Get Extended Error call will get error code
 15453                                  ;
 15454                                  ;		NOTE: if entries were loaded into TPA, AX contains
 15455                                  ;		ERROR_NO_MORE_FILES when no more entries are available,
 15456                                  ;		but DOS Get Extended Error call WON'T return the correct
 15457                                  ;		error. That's ok, because we'll see the value in AX
 15458                                  ;		and recognize it as a non-error condition.
 15459                                  ;
 15460                                  ;	USED	AX,CX,DX,SI,DI
 15461                                  ;
 15462                                  ;	EFFECTS
 15463                                  ;
 15464                                  ;	  Entries in memory may be marked as output.
 15465                                  ;	  If not sorted, entry is loaded at TPA.
 15466                                  ;
 15467                                  ;	NOTES
 15468                                  ;
 15469                                  ;	  If we don't find a qualifying file, we return after the final
 15470                                  ;	   DOS Find File call. A DOS Get Extended Error call will then
 15471                                  ;	   indicate an appropriate condition.
 15472                                  
 15473                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15474                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15475                                  
 15476                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15477                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1585h
 15478                                  	
 15479                                  FindFirst:
 15480                                  	;mov	ax,offset TRANGROUP:GetFirst
 15481 0000151A B8[F115]                	mov	ax,GetFirst
 15482 0000151D EB03                    	jmp	short ffFindEntry
 15483                                  
 15484                                  	; 18/02/2023
 15485                                  FindNext:
 15486                                  	;mov	ax,offset TRANGROUP:GetNext
 15487 0000151F B8[FF15]                	mov	ax,GetNext
 15488                                  
 15489                                  ;	AX = address of correct disk get routine to use.
 15490                                  
 15491                                  ffFindEntry:
 15492 00001522 06                      	push	es			; save TRANGROUP seg addr
 15493                                  	;;;test	Bits,mask inmem
 15494                                  	;;test	word [_Bits],20h
 15495                                  	;test	byte [_Bits],20h
 15496                                  	; 07/06/2023
 15497 00001523 F606[A2A0]40            	test	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0
 15498 00001528 7405                    	jz	short ffDisk		; entries not in memory, search disk
 15499                                  
 15500                                  ;	Entries are loaded in memory to sort out. Find the first one.
 15501                                  ;	There will always be one, or LoadEntries would've failed.
 15502                                  
 15503 0000152A E81A00                  	call	FindInMem		; find first entry in TPA
 15504 0000152D EB16                    	jmp	short ffRet		; return what TPA search returns
 15505                                  
 15506                                  ;	Get entry from disk.
 15507                                  
 15508                                  ffDisk:
 15509 0000152F FFD0                    	call	ax			; get entry from disk
 15510 00001531 720E                    	jc	short ffGetErr		; get & return error
 15511 00001533 8E06[179E]              	mov	es,[TPA]		; ES = seg addr of TPA
 15512 00001537 31FF                    	xor	di,di			; ES:DI = ptr to TPA
 15513 00001539 89FB                    	mov	bx,di			; BX = offset of entry in TPA
 15514 0000153B E85F01                  	call	LoadEntry		; load entry to TPA
 15515 0000153E F8                      	clc				; return success
 15516 0000153F EB04                    	jmp	short ffRet
 15517                                  
 15518                                  ffGetErr:
 15519 00001541 E8000D                  	call	 get_ext_error_number	; AX = DOS error code
 15520 00001544 F9                      	stc
 15521                                  ffRet:
 15522 00001545 07                      	pop	es			; ES = TRANGROUP seg addr again
 15523 00001546 C3                      	retn
 15524                                  
 15525                                  ; ---------------------------------------------------------------------------
 15526                                  
 15527                                  ;***	FindInMem - find next directory entry in TPA buffer
 15528                                  ;
 15529                                  ;	ENTRY	TPA is loaded (see LoadEntries)
 15530                                  ;
 15531                                  ;	EXIT	BX = offset in TPA of entry found
 15532                                  ;
 15533                                  ;		If no more files,
 15534                                  ;		CY = set
 15535                                  ;		AX = DOS 'no more files' error code
 15536                                  ;
 15537                                  ;	USED	AX,BX,CX,DX,SI,DI,BP,ES
 15538                                  ;
 15539                                  ;	EFFECTS
 15540                                  ;
 15541                                  ;	  Entry found is flagged as 'used' (see EntryStruc).
 15542                                  
 15543                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15544                                  FindInMem:
 15545 00001547 8E06[179E]              	mov	es,[TPA]		; ES = TPA seg addr
 15546 0000154B 31DB                    	xor	bx,bx			; ES:BX = ptr to 1st entry in TPA
 15547 0000154D FC                      	cld				; make sure default string direction is up
 15548                                  	
 15549 0000154E E86D00                  	call	FindOneInMem		; locate an entry
 15550 00001551 720E                    	jc	short fiNoMore		; none left, set up 'no more files' error
 15551                                  
 15552                                  ;	BX = ptr to entry in TPA
 15553                                  
 15554                                  fiBest:
 15555 00001553 89DD                    	mov	bp,bx			; BP = ptr to best entry so far
 15556                                  fiNext:
 15557 00001555 E87300                  	call	FindNextInMem		; locate next entry
 15558 00001558 720C                    	jc	short fiFound		; no more, best entry so far wins
 15559                                  
 15560                                  ;	BX = ptr to next entry
 15561                                  
 15562 0000155A E86CFE                  	call	CmpEntry		; compare it to best found so far (BP)
 15563 0000155D 73F6                    	jnb	short fiNext		; it's not better, go look at next one
 15564 0000155F EBF2                    	jmp	short fiBest		; it's better, go mark it as best so far
 15565                                  
 15566                                  fiNoMore:
 15567                                  
 15568                                  ;	No more entries available in TPA. Set up 'no more files' error.
 15569                                  
 15570                                  	;mov	ax,18
 15571 00001561 B81200                  	mov	ax,ERROR_NO_MORE_FILES	; AX = 'no more files' error code
 15572 00001564 F9                      	stc				; return error
 15573                                  	;jmp	short fiRet
 15574                                  	; 18/02/2023
 15575 00001565 C3                      	retn
 15576                                  
 15577                                  fiFound:
 15578 00001566 89EB                    	mov	bx,bp			; BX = ptr to best entry found
 15579 00001568 26C60701                	mov	byte [es:bx],1		; mark entry 'used'
 15580 0000156C F8                      	clc				; return success
 15581                                  fiRet:
 15582 0000156D C3                      	retn
 15583                                  
 15584                                  ; ---------------------------------------------------------------------------
 15585                                  
 15586                                  ;***	FindNextChild - find next subdirectory in current directory
 15587                                  ;
 15588                                  ;	ENTRY	BX = ptr to last child found, ASCIIZ filename
 15589                                  ;		DirBuf is established DTA
 15590                                  ;
 15591                                  ;	EXIT	BX = ptr (same addr) to next child found, ASCIIZ filename
 15592                                  ;
 15593                                  ;		If failure,
 15594                                  ;		CY = set
 15595                                  ;		DOS Get Extended Error call will get error
 15596                                  ;
 15597                                  ;	USED	AX,CX,DX,SI,DI,BP
 15598                                  ;
 15599                                  ;	EFFECTS
 15600                                  ;
 15601                                  ;	  DirBuf is used for find first/next calls.
 15602                                  ;
 15603                                  ;	NOTES
 15604                                  ;
 15605                                  ;	  We keep on checking files until DOS returns an error. If
 15606                                  ;	  the error is 'no more files' and the temp filename is not
 15607                                  ;	  the initial high tag, copy the temp to the child's name spot
 15608                                  ;	  and return success. Otherwise, send the error back to caller.
 15609                                  ;
 15610                                  ;	  This routine depends on DS,ES,CS, & SS all being equal.
 15611                                  
 15612                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15613                                  FindNextChild:
 15614 0000156E 83EC0C                  	sub	sp,12			; make temp filename buf on stack
 15615                                  	;shove	00FFh			; temp filename = high tag
 15616 00001571 B8FF00                  	mov	ax,0FFh
 15617 00001574 50                      	push	ax
 15618 00001575 89E5                    	mov	bp,sp			; BP = ptr to temp filename buf
 15619                                  	;shove	"*"	
 15620 00001577 B02A                    	mov	al,'*'  ; ax = 002Ah
 15621 00001579 50                      	push	ax
 15622                                  	;;shove	".*" 
 15623                                  	;mov	ax,"*."
 15624                                  	;mov	ax,2E2Ah
 15625 0000157A B42E                    	mov	ah,'.'
 15626 0000157C 50                      	push	ax
 15627 0000157D E87F05                  	call	GetDriveLtr		; AX = "d:"
 15628 00001580 50                      	push	ax
 15629 00001581 89E2                    	mov	dx,sp			; DX = ptr to "d:*.*",0 on stack
 15630                                  
 15631                                  ;	See that the stack is restored properly at the end of this proc.
 15632                                  
 15633                                  	;mov	cx,10h
 15634 00001583 B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15635 00001586 B44E                    	mov	ah,4Eh
 15636                                  	;mov	ah,Find_First
 15637 00001588 CD21                    	int	21h			; DOS- Find First matching file
 15638 0000158A 722C                    	jc	short fcRet		; return error
 15639                                  
 15640 0000158C E815FE                  	call	CheckChild		; check child against last, temp
 15641                                  fcNext:	
 15642                                  	;mov	cx,10h
 15643 0000158F B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15644 00001592 B44F                    	mov	ah,4Fh
 15645                                  	;mov	ah,Find_Next
 15646 00001594 CD21                    	int	21h			; DOS- Find Next matching file
 15647 00001596 7205                    	jc	short fcErr		; examine error
 15648                                  
 15649 00001598 E809FE                  	call	CheckChild		; check child against last, temp
 15650 0000159B EBF2                    	jmp	short fcNext		; go find another child
 15651                                  
 15652                                  fcErr:
 15653 0000159D E8A40C                  	call	get_ext_error_number	; AX = extended error code
 15654                                  	;cmp	ax,18
 15655 000015A0 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	; no more files?
 15656 000015A3 7512                    	jne	short fcNope		; some other error- return it
 15657                                  
 15658                                  ;	We ran out of files. See if we qualified at least one.
 15659                                  
 15660 000015A5 807E00FF                	cmp	byte [bp],0FFh
 15661 000015A9 740C                    	je	short fcNope		; temp filename is unused- no child
 15662                                  
 15663                                  ;	Move temp filename to child name position.
 15664                                  
 15665 000015AB 89EE                    	mov	si,bp			; SI = ptr to temp filename
 15666 000015AD 89DF                    	mov	di,bx			; DI = ptr to child name pos'n
 15667                                  fcMove:
 15668 000015AF AC                      	lodsb				; AL = next byte of filename
 15669 000015B0 AA                      	stosb				; store byte
 15670 000015B1 08C0                    	or	al,al
 15671 000015B3 7403                    	jz	short fcRet		; byte was zero, return success (CY clear)
 15672 000015B5 EBF8                    	jmp	short fcMove		; go move another byte
 15673                                  fcNope:
 15674 000015B7 F9                      	stc				; return error
 15675                                  fcRet:
 15676 000015B8 9F                      	lahf
 15677 000015B9 83C414                  	add	sp,20			; restore stack
 15678 000015BC 9E                      	sahf
 15679 000015BD C3                      	retn
 15680                                  
 15681                                  ; ---------------------------------------------------------------------------
 15682                                  
 15683                                  ;***	FindOneInMem - find the first available entry in TPA
 15684                                  ;***	FindNextInMem - find the next available entry in TPA
 15685                                  ;
 15686                                  ;	ENTRY	ES = TPA seg addr
 15687                                  ;		BX = ptr to entry in TPA
 15688                                  ;
 15689                                  ;	EXIT	BX = ptr to entry found
 15690                                  ;		CY = set if no more entries available in TPA
 15691                                  ;
 15692                                  ;	USED	AL
 15693                                  
 15694                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15695                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15696                                  FindOneInMem:
 15697 000015BE 268A07                  	mov	al,[es:bx]		; examine 'used' byte of starting entry
 15698 000015C1 3C01                    	cmp	al,1
 15699 000015C3 7406                    	je	short FindNextInMem	; entry has already been used
 15700 000015C5 3CFF                    	cmp	al,0FFh
 15701 000015C7 7407                    	je	short foNoMore		; 0FFh, we're at the end of the list
 15702                                  
 15703                                  ;	BX = ptr to entry that hasn't been output yet.
 15704                                  
 15705 000015C9 F8                      	clc				; return success
 15706 000015CA C3                      	retn
 15707                                  
 15708                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15709                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:163Ah
 15710                                  FindNextInMem:
 15711                                  	; 07/06/2023
 15712                                  	;add	bx,21 ; MSDOS 5.0
 15713                                  	; 07/06/2023
 15714 000015CB 83C316                  	add	bx,22 ; MSDOS 6.0  ; size EntryStruc (22 = 21 + compratio)
 15715                                  	;add	bx,size EntryStruc	; BX = ptr to next entry
 15716 000015CE EBEE                    	jmp	short FindOneInMem	; go look at it
 15717                                  foNoMore:
 15718 000015D0 F9                      	stc				; ran out of entries, return failure
 15719 000015D1 C3                      	retn
 15720                                  
 15721                                  ; ---------------------------------------------------------------------------
 15722                                  
 15723                                  ;***	GetEnvValue - get value of our environment variable
 15724                                  ;
 15725                                  ;	ENTRY	DS, ES = TRANGROUP seg addr
 15726                                  ;
 15727                                  ;	EXIT	CY = set if environment variable not in environment
 15728                                  ;
 15729                                  ;		Otherwise:
 15730                                  ;		SI = ptr to environment variable asciiz value in TRANGROUP
 15731                                  ;
 15732                                  ;	USED	AX,BX,CX,DX,DI
 15733                                  ;		(We assume the (almost) worst, since we don't know about
 15734                                  ;		Find_Name_In_Environment.)
 15735                                  ;
 15736                                  ;	EFFECTS
 15737                                  ;
 15738                                  ;	  ScanBuf is loaded with value text
 15739                                  
 15740                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15741                                  GetEnvValue:
 15742 000015D2 06                      	push	es				; save ES
 15743                                  	;mov	si,offset TRANGROUP:DirEnvVar	; DS:SI = ptr to variable name
 15744 000015D3 BE[BE94]                	mov	si,DirEnvVar	; "DIRCMD="
 15745                                  	;invoke	Find_Name_In_Environment
 15746 000015D6 E88E12                  	call	find_name_in_environment
 15747 000015D9 7214                    	jc	short geRet			; name not found in environment
 15748                                  
 15749                                  ;	ES:DI = ptr to value of environment variable
 15750                                  ;	We're assuming DS, CS, and SS are unchanged.
 15751                                  
 15752 000015DB 1E                      	push	ds
 15753 000015DC 06                      	push	es
 15754 000015DD 1F                      	pop	ds
 15755 000015DE 07                      	pop	es
 15756                                  
 15757                                  	;assume	ds:nothing
 15758                                  
 15759                                  ;	DS = seg addr of environment variable value (in environment segment)
 15760                                  ;	ES = TRANGROUP seg addr
 15761                                  
 15762 000015DF 89FE                    	mov	si,di				; DS:SI = ptr to value string
 15763                                  	;mov	di,offset TRANGROUP:ScanBuf	; ES:DI = ptr to dest buffer
 15764 000015E1 BF[12A2]                	mov	di,ScanBuf
 15765                                  geLoop:
 15766                                  ;@@:	
 15767 000015E4 AC                      	lodsb
 15768 000015E5 08C0                    	or	al,al
 15769 000015E7 AA                      	stosb
 15770                                  	;loopnz	@B		; move the string, including trailing null
 15771 000015E8 E0FA                    	loopnz	geLoop
 15772                                  
 15773 000015EA 06                      	push	es
 15774 000015EB 1F                      	pop	ds		; DS = TRANGROUP seg addr again
 15775                                  	;assume	ds:TRANGROUP
 15776                                  
 15777                                  	;mov	si,offset TRANGROUP:ScanBuf	; SI = ptr to var value
 15778 000015EC BE[12A2]                	mov	si,ScanBuf
 15779                                  geRet:
 15780 000015EF 07                      	pop	es				; restore ES
 15781 000015F0 C3                      	retn
 15782                                  
 15783                                  ; ---------------------------------------------------------------------------
 15784                                  
 15785                                  ;***	GetFirst - get first directory entry from disk
 15786                                  ;
 15787                                  ;	ENTRY	DOS DTA established at DirBuf
 15788                                  ;		FCB contains drive # and filename
 15789                                  ;		Current directory (on selected drive) is the one to search
 15790                                  ;		AttrSpecified & AttrSelect masks set
 15791                                  ;
 15792                                  ;	EXIT	CY = clear if success
 15793                                  ;		DirBuf contains extended FCB for file found
 15794                                  ;
 15795                                  ;		If unsuccessful,
 15796                                  ;		CY = set
 15797                                  ;		Ready for DOS Get Extended Error call
 15798                                  ;
 15799                                  ;	USED	AX,DX
 15800                                  ;
 15801                                  ;	EFFECTS
 15802                                  ;
 15803                                  ;	  FCB-7 = 0FFh to mark extended FCB
 15804                                  ;	  FCB-1 = attribute mask to find all files
 15805                                  ;	  These fields should remain unmodified for GetNext calls.
 15806                                  ;
 15807                                  ;***	GetNext - get next directory entry from disk
 15808                                  ;
 15809                                  ;	ENTRY	As for GetFirst, plus
 15810                                  ;		FCB-7 set up as extended FCB w/ find-all attribute byte
 15811                                  ;
 15812                                  ;	EXIT	As for GetFirst
 15813                                  ;
 15814                                  ;	USED	AX,DX
 15815                                  
 15816                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15817                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15818                                  
 15819                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15820                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1660h
 15821                                  GetFirst:
 15822                                  	;mov	byte [55h],0FFh	; -1
 15823 000015F1 C6065500FF              	mov	byte [FCB-7],0FFh	; signal extended FCB
 15824                                  	;mov	byte [5Bh],16h
 15825 000015F6 C6065B0016              	mov	byte [FCB-1],ATTR_ALL ; 16h
 15826                                  					; find any file
 15827                                  	; 07/06/2023
 15828                                  	;mov	dx,FCB-7 ; 55h		; DX = ptr to extended FCB
 15829 000015FB B411                    	mov	ah,11h
 15830                                  	;mov	ah,Dir_Search_First	; AH = DOS Find First function code
 15831                                  	; 07/06/2023
 15832                                  	;int	21h			; call DOS
 15833                                  	;shl	al,1			; CY = set if error
 15834                                  	;jc	short gfRet		; return error
 15835                                  	;jmp	short gfFound		; go look at attr's
 15836                                  	; 07/06/2023
 15837 000015FD EB02                    	jmp	short GetFrstNxt
 15838                                  GetNext:
 15839                                  	; 07/06/2023
 15840                                  	;;mov	dx,55h
 15841                                  	;mov	dx,FCB-7		; DX = ptr to extended FCB
 15842 000015FF B412                    	mov	ah,12h
 15843                                  	;mov	ah,Dir_Search_Next	; AH = DOS Find Next function code
 15844                                  GetFrstNxt:
 15845                                  	; 07/06/2023
 15846 00001601 BA5500                  	mov	dx,FCB-7 ; mov dx,55h
 15847                                  	;
 15848 00001604 CD21                    	int	21h			; call DOS
 15849 00001606 D0E0                    	shl	al,1			; CY = set if error
 15850 00001608 7211                    	jc	short gfRet		; return error
 15851                                  
 15852                                  ;*	Found an entry. Check attributes.
 15853                                  gfFound:
 15854                                  	;;mov	al,[DirBuf+8].dir_attr	; AL = file attributes
 15855                                  	;mov	al,[DIRBUF+19]
 15856 0000160A A0[63A0]                	mov	al,[DIRBUF+8+DIR_ENTRY.DIR_ATTR]
 15857 0000160D 8A26[AAA0]              	mov	ah,[AttrSpecified]	; AH = mask of pertinent attr's
 15858 00001611 20E0                    	and	al,ah			; AL = pertinent attr's of file
 15859 00001613 2226[ABA0]              	and	ah,[AttrSelect]		; AH = attr settings to match
 15860 00001617 38E0                    	cmp	al,ah
 15861 00001619 75E4                    	jne	short GetNext		; attr's don't match, look for another
 15862                                  gfRet:
 15863 0000161B C3                      	retn
 15864                                  
 15865                                  ; ---------------------------------------------------------------------------
 15866                                  
 15867                                  ;***	ListDir - search for and list files in the current directory
 15868                                  ;
 15869                                  ;	List header, files, and trailer for current directory on selected
 15870                                  ;	drive. Header & trailer are listed if at least one file is found.
 15871                                  ;	If no qualifying files are found, no display output occurs.
 15872                                  ;
 15873                                  ;	ENTRY	Current directory (on selected drive) is the one to be listed
 15874                                  ;		FCB contains selected drive # and filename spec
 15875                                  ;		Option bits, attribute masks, and sort codes set up
 15876                                  ;
 15877                                  ;	EXIT	CY = clear if no error
 15878                                  ;		FileCnt = # files found & displayed
 15879                                  ;
 15880                                  ;		If error,
 15881                                  ;		CY = set
 15882                                  ;		Ready for DOS Get Extended Error call
 15883                                  ;
 15884                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15885                                  ;		FileSiz
 15886                                  ;
 15887                                  ;	EFFECTS
 15888                                  ;
 15889                                  ;	  FileCntTotal, FileSizTotal are updated.
 15890                                  ;	  Files found are listed. A directory header and trailer are
 15891                                  ;	   displayed only if files are found.
 15892                                  
 15893                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15894                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:155Eh
 15895                                  
 15896                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 15897                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1694h
 15898                                  ListDir:
 15899 0000161C 31C0                    	xor	ax,ax ; 0
 15900 0000161E A3[439E]                	mov	[FileCnt],ax		; zero file count
 15901 00001621 A3[459E]                	mov	[FileSiz],ax		; zero file size accumulator
 15902 00001624 A3[479E]                	mov	[FileSiz+2],ax
 15903                                  
 15904                                  	; 08/06/2023
 15905                                  	; MSDOS 6.0
 15906                                  ;ifdef DBLSPACE_HOOKS
 15907 00001627 A3[539E]                	mov	[ccluUsedDir],ax 	; zero count clusters used
 15908 0000162A A3[5B9E]                	mov	[csecUsedDir],ax	; zero count compressed sectors used
 15909 0000162D A3[5D9E]                	mov	[csecUsedDir+2],ax
 15910                                  ;endif	
 15911                                  	;cmp	byte [DestBuf],0	; check for sort code
 15912                                  	; 31/07/2024
 15913 00001630 3806[55A1]              	cmp	[DestBuf],al ; 0
 15914 00001634 740A                    	je	short ld1		; no sort
 15915 00001636 E83000                  	call	LoadEntries		; load entries for sorted listing
 15916 00001639 7305                    	jnc	short ld1		; no error - continue
 15917 0000163B E8060C                  	call	get_ext_error_number	; AX = DOS error code
 15918                                  	; 19/02/2023
 15919                                  	;stc
 15920 0000163E EB12                    	jmp	short ldErr		; return error
 15921                                  ld1:
 15922 00001640 E8D7FE                  	call	FindFirst		; find first file
 15923 00001643 720D                    	jc	short ldErr		; not found, return error
 15924                                  
 15925                                  ;	BX = offset in TPA buffer of entry found
 15926                                  
 15927 00001645 E82B03                  	call	DisplayHeader		; if at least one file, display header
 15928                                  ldNext:
 15929 00001648 E8F902                  	call	DisplayFile		; display the file entry
 15930                                  ;ldNext:
 15931 0000164B E8D1FE                  	call	FindNext		; find another file
 15932 0000164E 7202                    	jc	short ldErr		; not found
 15933                                  	;call	DisplayFile		; display entry
 15934                                  	;jmp	short ldNext		; go find another one
 15935                                  	; 19/02/2023
 15936 00001650 EBF6                    	jmp	short ldNext
 15937                                  ldErr:
 15938                                  	;cmp	ax,2
 15939 00001652 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 15940 00001655 7407                    	je	short ldDone		; file not found, we're done
 15941                                  	;cmp	ax,18
 15942 00001657 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 15943 0000165A 7402                    	je	short ldDone		; no more files, we're done
 15944 0000165C F9                      	stc
 15945                                  	;jmp	short ldRet
 15946                                  	; 19/02/2023
 15947 0000165D C3                      	retn
 15948                                  ldDone:
 15949 0000165E 833E[439E]00            	cmp	word [FileCnt],0
 15950                                  	;je	short ld2		; no files found, just return
 15951                                  	; 25/04/2023
 15952 00001663 7403                    	jz	short ldRet
 15953 00001665 E84704                  	call	DisplayTrailer		; display trailing info
 15954                                  	; 08/06/2023
 15955                                  	; cf=0
 15956                                  ;ld2:	
 15957                                  	;clc				; return success
 15958                                  ldRet:
 15959 00001668 C3                      	retn
 15960                                  
 15961                                  ; ---------------------------------------------------------------------------
 15962                                  
 15963                                  ;***	LoadEntries - attempt to load entries from current directory
 15964                                  ;
 15965                                  ;	Load all qualifying directory entries from the current directory
 15966                                  ;	into the TPA. If an error is returned by FindFirst/FindNext calls
 15967                                  ;	other than 'no more files', return to caller with carry flag set.
 15968                                  ;	If we run out of buffer space, display a message that we haven't
 15969                                  ;	enough memory to sort this directory, but return without error.
 15970                                  ;	Other routines know whether or not entries have been loaded by
 15971                                  ;	the 'inmem' flag bit, which we set here.
 15972                                  ;
 15973                                  ;	The TPA is usually 64K - 512 bytes long. At 20 bytes per entry,
 15974                                  ;	this allows sorting over 3000 entries in a directory.
 15975                                  ;
 15976                                  ;	ENTRY	Tpa = buffer seg addr
 15977                                  ;		BytCnt = buffer length, in bytes
 15978                                  ;		Current directory (on selected drive) is the one to load
 15979                                  ;		FCB contains drive # and filespec
 15980                                  ;		Bits, AttrSpecified, AttrSelect, & DestBuf (sort codes) are set
 15981                                  ;
 15982                                  ;	EXIT	CY = set if error
 15983                                  ;		If error, DOS Get Extended Error will get error info
 15984                                  ;
 15985                                  ;	USED	AX,CX,DX,SI,DI
 15986                                  ;
 15987                                  ;	EFFECTS
 15988                                  ;
 15989                                  ;	  Inmem bit of Bits = set if load succeeded.
 15990                                  ;	  Tpa buffer contains directory entries.
 15991                                  ;	  Byte after last entry = 0FFh.
 15992                                  
 15993                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15994                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 15995                                  LoadEntries:
 15996 00001669 06                      	push	es			; save TRANGROUP seg addr
 15997 0000166A 8E06[179E]              	mov	es,[TPA]		; ES = TPA seg addr
 15998 0000166E 31FF                    	xor	di,di			; ES:DI = destination ptr
 15999                                  	;;;and	Bits,not mask inmem	; signal entries not loaded
 16000                                  	; MSDOS 5.0
 16001                                  	;;and	word [_Bits],0FFDFh
 16002                                  	;and	byte [_Bits],0DFh	; not 20h
 16003                                  	; 08/06/2023
 16004                                  	;and	byte [_Bits],0BFh	; ~20h ; MSDOS 6.0
 16005 00001670 8026[A2A0]BF            	and	byte [_Bits],~mask.inmem ; 0BFh ; MSDOS 6.0
 16006                                  
 16007 00001675 E879FF                  	call	GetFirst		; look for first file
 16008 00001678 7221                    	jc	short leRet		; return any error
 16009 0000167A E82000                  	call	LoadEntry		; load entry into TPA
 16010                                  leNext:
 16011 0000167D E87FFF                  	call	GetNext			; get another file
 16012 00001680 720F                    	jc	short leLoaded		; assume any error is no more files
 16013 00001682 A1[369E]                	mov	ax,[BYTCNT]		; AX = size of TPA
 16014 00001685 29F8                    	sub	ax,di			; AX = bytes left in TPA
 16015                                  	; 08/06/2023
 16016                                  	;;cmp	ax,size EntryStruc+2	; insist on entry size + 2 bytes
 16017                                  	;cmp	ax,23 ; 21+2 ; MSDOS 5.0
 16018 00001687 83F818                  	cmp	ax,24 ; 22+2 ; MSDOS 6.0
 16019 0000168A 720E                    	jb	short leOk		; not enough memory left, give up
 16020 0000168C E80E00                  	call	LoadEntry		; load entry into TPA
 16021 0000168F EBEC                    	jmp	short leNext		; go get another file
 16022                                  
 16023                                  leLoaded:
 16024 00001691 26C605FF                	mov	byte [es:di],0FFh	; mark end of entry list
 16025                                  	;;;or	Bits,mask inmem		; signal entries loaded in memory
 16026                                  	; MSDOS 5.0
 16027                                  	;;or	word [_Bits],20h
 16028                                  	;or	byte [_Bits],20h
 16029                                  	; 08/06/2023
 16030                                  	;or	byte [_Bits],40h	; MSDOS 6.0
 16031 00001695 800E[A2A0]40            	or	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0 
 16032                                  	; 25/04/2023
 16033                                  	; cf = 0
 16034                                  leOk:
 16035 0000169A F8                      	clc				; return no error
 16036                                  leRet:
 16037 0000169B 07                      	pop	es			; ES = TRANGROUP seg addr again
 16038 0000169C C3                      	retn
 16039                                  
 16040                                  ; ---------------------------------------------------------------------------
 16041                                  
 16042                                  ;***	LoadEntry - load directory entry from DirBuf ext'd FCB
 16043                                  ;
 16044                                  ;	ENTRY	ES:DI = ptr to load point in TPA
 16045                                  ;		DirBuf contains extended FCB of entry to load
 16046                                  ;
 16047                                  ;	EXIT	ES:DI = ptr to next byte available in TPA
 16048                                  ;
 16049                                  ;	USED	AX,CX,SI
 16050                                  ;
 16051                                  ;	NOTES
 16052                                  ;
 16053                                  ;	  I could've used symbolic offsets and sizes of fields from
 16054                                  ;	   the dir_entry struc to do this, but this is time-critical,
 16055                                  ;	   so I hard-wired the structure of the DOS 4.x returned FCB,
 16056                                  ;	   as well as our private directory entry structure.
 16057                                  ;
 16058                                  ;	  We force a zero size for subdirectory files. A zero size is
 16059                                  ;	   ordinarily returned for subdirectories, but with Novell
 16060                                  ;	   Netware 286 or 386 loaded, we can't depend on it. Bug #1594.
 16061                                  
 16062                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16063                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:15DDh
 16064                                  	
 16065                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16066                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:171Ch
 16067                                  LoadEntry:
 16068                                  	;mov	si,offset TRANGROUP:Dirbuf+8	; DS:SI = ptr to filename
 16069 0000169D BE[58A0]                	mov	si,DIRBUF+8
 16070 000016A0 30C0                    	xor	al,al				; AL = 0
 16071 000016A2 AA                      	stosb					; 'used' byte = false
 16072 000016A3 B90B00                  	mov	cx,11
 16073 000016A6 F3A4                    	rep	movsb				; transfer filename & extension
 16074 000016A8 AC                      	lodsb					; AL = attrib byte
 16075 000016A9 AA                      	stosb					; store attrib byte
 16076                                  	;add	si,10 ; 22-11-1
 16077                                  	;add	si,dir_time-dir_attr-1		; skip to time field
 16078 000016AA 83C60A                  	add	si,(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1
 16079 000016AD A5                      	movsw					; transfer time
 16080 000016AE A5                      	movsw					; transfer date
 16081                                  
 16082                                  ; 08/06/2023
 16083                                  ; MSDOS 5.0
 16084                                  %if 0
 16085                                  	inc	si				; skip alloc unit
 16086                                  	inc	si
 16087                                  	;and	al,10h
 16088                                  	and	al,ATTR_DIRECTORY
 16089                                  	jnz	short leSetDirSize		; force zero size for subdir
 16090                                  	movsw
 16091                                  	movsw					; transfer size
 16092                                  	retn
 16093                                  leSetDirSize:
 16094                                  	xor	ax,ax ; 0
 16095                                  	stosw
 16096                                  	stosw					; store zero size
 16097                                  	retn
 16098                                  %endif
 16099                                  
 16100                                  ; 08/06/2023
 16101                                  ; MSDOS 6.0
 16102                                  %if 1
 16103                                  ;ifdef DBLSPACE_HOOKS
 16104 000016AF 88C1                    	mov	cl,al				; attrib to cl
 16105 000016B1 AD                      	lodsw					; allocation unit (cluster
 16106                                  	;and	cl,10h
 16107 000016B2 80E110                  	and	cl,ATTR_DIRECTORY
 16108 000016B5 751E                    	jnz	short leSetDirSize		; force zero size for subdir
 16109 000016B7 A5                      	movsw
 16110 000016B8 A5                      	movsw					; transfer size
 16111                                  	
 16112                                  	;;test	word [_Bits],1
 16113                                  	;test	word [_Bits],mask.cratio	; compression ratio report?
 16114 000016B9 F606[A2A0]01            	test	byte [_Bits],mask.cratio
 16115 000016BE 7504                    	jnz	short leCalcRatio		; yup
 16116                                  
 16117 000016C0 31C0                    	xor	ax,ax
 16118 000016C2 AA                      	stosb					; dummy compression ratio
 16119 000016C3 C3                      	retn
 16120                                  leCalcRatio:
 16121 000016C4 E83306                  	call	CalcCompRatio			; takes cluster in AX
 16122 000016C7 09C0                    	or	ax,ax				;   returns ratio in AX
 16123 000016C9 740E                    	jz	short leNoRatio			; 0 means couldn't calculate
 16124 000016CB FECC                    	dec	ah				; pack 1.0 - 16.0 comp ratio
 16125 000016CD B104                    	mov	cl,4				;   into 2 nibbles.  Store
 16126 000016CF D2E4                    	shl	ah,cl				;   1-16 as 0-15 in hi nibble,
 16127 000016D1 08E0                    	or	al,ah				;   tenths (0-9) in low nibble
 16128 000016D3 AA                      	stosb
 16129 000016D4 C3                      	retn
 16130                                  leSetDirSize:
 16131 000016D5 31C0                    	xor	ax,ax ; 0
 16132 000016D7 AB                      	stosw
 16133 000016D8 AB                      	stosw					; store zero size
 16134                                  leNoRatio:
 16135 000016D9 FEC8                    	dec	al				; al = FFh = special invalid
 16136 000016DB AA                      	stosb					; compression ratio
 16137 000016DC C3                      	retn
 16138                                  ;endif
 16139                                  %endif
 16140                                  
 16141                                  ; ---------------------------------------------------------------------------
 16142                                  
 16143                                  ;***	NoOrder - turn sorting off
 16144                                  ;
 16145                                  ;	ENTRY	nothing
 16146                                  ;
 16147                                  ;	EXIT	CY clear
 16148                                  ;
 16149                                  ;	USED	AX
 16150                                  ;
 16151                                  ;	EFFECTS
 16152                                  ;
 16153                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 16154                                  
 16155                                  	; 19/02/2023
 16156                                  NoOrder:
 16157 000016DD C606[55A1]00            	mov	byte [DestBuf],0
 16158                                  				; no sort
 16159 000016E2 F8                      	clc			; no error
 16160 000016E3 C3                      	retn
 16161                                  
 16162                                  ; ---------------------------------------------------------------------------
 16163                                  
 16164                                  ;***	OnOffSw - record occurence of on/off option switch
 16165                                  ;
 16166                                  ;	ENTRY	DI = index into word list of switches
 16167                                  ;
 16168                                  ;	EXIT	CY clear
 16169                                  ;
 16170                                  ;	USED	AX,CX
 16171                                  ;
 16172                                  ;	EFFECTS
 16173                                  ;
 16174                                  ;	  Bits modified to indicate option state.
 16175                                  
 16176                                  	; 19/02/2023
 16177                                  OnOffSw:
 16178 000016E4 89F9                    	mov	cx,di		; CX = index into word list of options
 16179 000016E6 D1E9                    	shr	cx,1
 16180 000016E8 D1E9                    	shr	cx,1		; CX = bit position of option
 16181 000016EA B80100                  	mov	ax,1		
 16182 000016ED D3E0                    	shl	ax,cl		; AX = bit mask of option
 16183 000016EF F7C70200                	test	di,2		; check if it is a negated option
 16184 000016F3 7405                    	jz	short oo1	; it's negated
 16185                                  	;or	Bits,ax		; turn option on
 16186 000016F5 0906[A2A0]              	or	[_Bits],ax
 16187                                  	;jmp	short ooRet
 16188                                  	; 19/02/2023
 16189                                  	;cf=0
 16190 000016F9 C3                      	retn
 16191                                  oo1:	
 16192 000016FA F7D0                    	not	ax		; AX = complemented bit mask of option
 16193                                  	;and	Bits,ax		; turn option off
 16194 000016FC 2106[A2A0]              	and	[_Bits],ax
 16195                                  ooRet:
 16196                                  	; 19/02/2023
 16197                                  	;cf=0
 16198                                  	;clc			; always return success
 16199 00001700 C3                      	retn
 16200                                  
 16201                                  ; ---------------------------------------------------------------------------
 16202                                  
 16203                                  ;***	ParseAttr - parse and record /A option
 16204                                  ;
 16205                                  ;	ENTRY	BX = ptr to system parser result buffer for /A occurence
 16206                                  ;
 16207                                  ;	EXIT	CY = set if error occurs parsing attribute conditions
 16208                                  ;
 16209                                  ;		For parse error, we set up for Std_EPrintf call:
 16210                                  ;		AX = parse error code, like system parser
 16211                                  ;		DX = ptr to message block
 16212                                  ;
 16213                                  ;	USED	AX,CX,DX,DI
 16214                                  ;
 16215                                  ;	EFFECTS
 16216                                  ;
 16217                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 16218                                  ;	  If parse error occurs, attribute conditions parsed so far hold.
 16219                                  ;
 16220                                  ;	  For parse error, we set up for Std_EPrintf call:
 16221                                  ;	  Msg_Disp_Class = parse error message class
 16222                                  ;	  Message block (see DX) is set up for parse error message
 16223                                  
 16224                                  	; 19/02/2023
 16225                                  ParseAttr:
 16226 00001701 56                      	push	si			; save SI
 16227 00001702 C606[AAA0]00            	mov	byte [AttrSpecified],0	; cancel all attribute conditions
 16228                                  
 16229                                  ;	Each /A invocation starts by assuming all files are to be listed.
 16230                                  
 16231                                  	;;mov	si,word ptr [bx].ValuePtr
 16232                                  					; SI = ptr to string after /A
 16233                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16234 00001707 8B7704                  	mov	si,[bx+4]
 16235                                  paLoop:	
 16236 0000170A BA0100                  	mov	dx,1			; DX = 1 (for un-negated attribute)
 16237 0000170D AC                      	lodsb				; AL = next char in string
 16238 0000170E 08C0                    	or	al,al
 16239                                  	;jz	short paOk		; it's terminating null, we're done
 16240                                  	; 19/02/2023
 16241 00001710 742F                    	jz	short paRet ; cf=0
 16242 00001712 3C2D                    	cmp	al,'-'
 16243 00001714 7502                    	jne	short pa1		; not '-', go look for letter
 16244 00001716 4A                      	dec	dx			; DX = 0 (for negated attribute)
 16245 00001717 AC                      	lodsb				; AL = next char
 16246                                  pa1:	
 16247                                  	;mov	di,offset TRANGROUP:AttrLtrs 
 16248                                  					; DI = ptr to attrib letter list
 16249 00001718 BF[8A97]                	mov	di,AttrLtrs ; "RHSvDA"
 16250                                  	;mov	cx,6
 16251 0000171B B90600                  	mov	cx,NUM_ATTR_LTRS ; 6	; CX = length of attrib letter list
 16252 0000171E F2AE                    	repne	scasb			; look for our letter in the list
 16253 00001720 751B                    	jne	short paErr		; not found, return error
 16254                                  
 16255 00001722 F7D1                    	not	cx
 16256                                  	;add	cx,6
 16257 00001724 83C106                  	add	cx,NUM_ATTR_LTRS	; CX = attrib bit #, 0-5
 16258                                  
 16259                                  ;	Note that we rely on AttrLtrs to be in the attribute bit order,
 16260                                  ;	starting from bit 0.
 16261                                  
 16262                                  ;	Record this attribute bit in AttrSpecified.
 16263                                  
 16264 00001727 B001                    	mov	al,1
 16265 00001729 D2E0                    	shl	al,cl			; AL = mask for our bit
 16266 0000172B 0806[AAA0]              	or	[AttrSpecified],al	; set it in the 'specified' mask
 16267                                  
 16268                                  ;	Record the selected state for this attribute in AttrSelect.
 16269                                  ;	DX = 0 or 1, the selected state for this attribute.
 16270                                  
 16271 0000172F F6D0                    	not	al			; AL = mask for all other bits
 16272 00001731 2006[ABA0]              	and	[AttrSelect],al		; clear our bit
 16273 00001735 D2E2                    	shl	dl,cl			; DL = our bit state in position
 16274 00001737 0816[ABA0]              	or	[AttrSelect],dl		; set selected attr state
 16275 0000173B EBCD                    	jmp	short paLoop		; go look at next char
 16276                                  
 16277                                  ;	The attribute letter string is invalid.
 16278                                  
 16279                                  paErr:	
 16280 0000173D E8D003                  	call	SetupParamError		; set message up for Std_EPrintf
 16281 00001740 F9                      	stc		   		; return error
 16282                                  	; 19/02/2023
 16283                                  	;jmp	short paRet
 16284                                  ;paOk:
 16285                                  	;clc				; return success		
 16286                                  paRet:	
 16287 00001741 5E                      	pop	si			; restore SI
 16288 00001742 C3                      	retn
 16289                                  
 16290                                  ; ---------------------------------------------------------------------------
 16291                                  
 16292                                  ;***	ParseLine - parse a line of text
 16293                                  ;
 16294                                  ;	Parse text until an EOL (CR or NUL) is found, or until a parse
 16295                                  ;	error occurs.
 16296                                  ;
 16297                                  ;	ENTRY	DS:SI = ptr to text
 16298                                  ;		CS, DS, ES = TRANGROUP seg addr
 16299                                  ;
 16300                                  ;	EXIT	AX = last return code from system parser
 16301                                  ;		CX = # positional parameters (pathnames) found - 0 or 1
 16302                                  ;
 16303                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 16304                                  ;		DX = ptr to message block
 16305                                  ;
 16306                                  ;	USED	BX,CX,DX,SI,DI
 16307                                  ;
 16308                                  ;	EFFECTS
 16309                                  ;
 16310                                  ;	  Bits may contain new option settings.
 16311                                  ;	  DestBuf may contain new series of sort codes.
 16312                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 16313                                  ;	  SrcBuf may contain a new default pathname/filespec.
 16314                                  ;	  PathPos, PathCnt updated for new pathname.
 16315                                  ;
 16316                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 16317                                  ;	  Msg_Disp_Class = parse error class
 16318                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 16319                                  ;	  Message block (see DX) is set up for parse error message
 16320                                  
 16321                                  	; 19/02/2023
 16322                                  Parse_Line:
 16323                                  	; 04/05/2023
 16324 00001743 BF[5898]                	mov	di,PARSE_DIR		; ES:DI = ptr to parse block
 16325 00001746 31C9                    	xor	cx,cx			; CX = # positionals found
 16326                                  plPars:
 16327 00001748 E8C00F                  	call	Parse_With_Msg		; call parser
 16328 0000174B 83F8FF                  	cmp	ax,-1
 16329                                  	;cmp	ax,END_OF_LINE ; 0FFFFh ; -1
 16330 0000174E 7411                    	je	short plRet		; EOL encountered, return
 16331 00001750 83F800                  	cmp	ax,RESULT_NO_ERROR ; 0
 16332 00001753 750C                    	jne	short plRet		; parse error occurred, return
 16333                                  
 16334                                  ;	Parse call succeeded. We have a filespec or a switch.
 16335                                  ;	DX = ptr to result buffer
 16336                                  
 16337 00001755 89D3                    	mov	bx,dx			; BX = ptr to parse result buffer
 16338 00001757 803F05                  	cmp	byte [bx],RESULT_FILESPEC ; 5
 16339 0000175A 7406                    	je	short plFil		; we have a filespec
 16340                                  
 16341 0000175C E87500                  	call	ParseSwitch		; else we have a switch
 16342                                  	;jc	short plRet		; error parsing switch, return
 16343                                  	;jmp	short plPars		; parse more
 16344                                  	; 19/02/2023
 16345 0000175F 73E7                    	jnc	short plPars
 16346                                  plRet:
 16347 00001761 C3                      	retn	
 16348                                  plFil:	
 16349 00001762 E8D200                  	call	CopyPathname		; copy pathname into our buffer
 16350 00001765 EBE1                    	jmp	short plPars		; parse more
 16351                                  ;plRet:
 16352                                  ;	retn
 16353                                  
 16354                                  ; ---------------------------------------------------------------------------
 16355                                  
 16356                                  ;***	ParseOrder - parse and record /O option
 16357                                  ;
 16358                                  ;	ENTRY	BX = ptr to system parser result buffer for /O occurence
 16359                                  ;
 16360                                  ;	EXIT	CY = set if error occurs parsing order
 16361                                  ;
 16362                                  ;		For parse error, we set up for Std_EPrintf call:
 16363                                  ;		AX = parse error code, like system parser
 16364                                  ;		DX = ptr to message block
 16365                                  ;
 16366                                  ;	USED	AX,CX,DX,DI
 16367                                  ;
 16368                                  ;	EFFECTS
 16369                                  ;
 16370                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 16371                                  ;
 16372                                  ;	  For parse error, we set up for Std_EPrintf call:
 16373                                  ;	  Msg_Disp_Class = parse error message class
 16374                                  ;	  Message block (see DX) is set up for parse error message
 16375                                  
 16376                                  	; 19/02/2023 - Retro DOS v4.0 COMMAND.COM
 16377                                  	;
 16378                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16379                                  	; MSDOS 6.22 COMMAND.COM
 16380                                  ParseOrder:
 16381 00001767 56                      	push	si			; save SI
 16382 00001768 53                      	push	bx			; save ptr to result buffer
 16383                                  
 16384                                  	;;mov	si,word ptr [bx].ValuePtr
 16385                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16386 00001769 8B7704                  	mov	si,[bx+4]		; SI = ptr to order letters
 16387                                  	;mov	bx,offset TRANGROUP:DestBuf
 16388                                  	; 08/06/2023
 16389 0000176C BB[55A1]                	mov	bx,DestBuf		; BX = ptr to sort code buffer
 16390 0000176F 8A04                    	mov	al,[si]			; AL = 1st char of order string
 16391 00001771 08C0                    	or	al,al
 16392 00001773 750E                    	jnz	short poLtr		; not NUL, go parse letters
 16393                                  
 16394                                  ;	We have /O alone. Set standard sort order.
 16395                                  ;	Note hardwired dependency on character order in OrderLtrs.
 16396                                  
 16397 00001775 C60705                  	mov	byte [bx],5		; sort 1st by group (subdirs 1st)
 16398 00001778 43                      	inc	bx
 16399 00001779 C60701                  	mov	byte [bx],1		; then by name
 16400 0000177C 43                      	inc	bx
 16401 0000177D C60702                  	mov	byte [bx],2		; then by extension
 16402 00001780 43                      	inc	bx
 16403 00001781 EB2F                    	jmp	short poOk		; return success
 16404                                  
 16405                                  ;	We have /O<something>. Parse sort order letters.
 16406                                  
 16407                                  poLtr:	
 16408 00001783 30D2                    	xor	dl,dl			; DL = 0 (upward sort)
 16409 00001785 AC                      	lodsb				; AL = next sort order letter
 16410 00001786 08C0                    	or	al,al
 16411 00001788 7428                    	jz	short poOk		; NUL found, return success
 16412                                  
 16413 0000178A 3C2D                    	cmp	al,'-'
 16414 0000178C 7503                    	jne	short po1		; not '-', go look for letter
 16415 0000178E B280                    	mov	dl,80h			; DL = downward sort mask
 16416 00001790 AC                      	lodsb				; AL = next char
 16417                                  po1:
 16418                                  	;mov	di,offset TRANGROUP:OrderLtrs
 16419                                  	; 08/06/2023
 16420 00001791 BF[9097]                	mov	di,OrderLtrs ;"NEDSGC"	; DI = ptr to list of letters
 16421                                  	; (NUM_ORDER_LTRS = 6 for MSDOS 6.22 COMMAND.COM)
 16422                                  	; ((N,E,D,S,G for MSDOS 5.0 and N,E,D,S,G,C for MSDOS 6.22)) 
 16423                                  	;mov	cx,6 ; 08/06/2023
 16424 00001794 B90600                  	mov	cx,NUM_ORDER_LTRS ; 5	; CX = length of list
 16425 00001797 F2AE                    	repne	scasb			; look for our letter in the list
 16426 00001799 7510                    	jne	short poErr		; not found, return error
 16427                                  
 16428 0000179B F7D9                    	neg	cx
 16429                                  	;add	cx,6 ; 08/06/2023
 16430 0000179D 83C106                  	add	cx,NUM_ORDER_LTRS ; 5	; CL = sort order code, 1-6
 16431                                  
 16432 000017A0 08D1                    	or	cl,dl			; CL = sort code with up/dn bit
 16433 000017A2 880F                    	mov	[bx],cl			; store sort order code in buffer
 16434 000017A4 43                      	inc	bx			; BX = ptr to next spot in buffer
 16435                                  	;cmp	bx,offset TRANGROUP:EndDestBuf
 16436 000017A5 81FB[ACA1]              	cmp	bx,EndDestBuf
 16437                                  	;jae	short poErr		; too many letters
 16438                                  	;
 16439                                  	;jmp	short poLtr		; go look at next char
 16440                                  	; 19/02/2023
 16441 000017A9 72D8                    	jb	short poLtr
 16442                                  
 16443                                  ;	The sort order string is invalid.  
 16444                                  
 16445                                  poErr:
 16446 000017AB 5B                      	pop	bx			; BX = ptr to result buffer
 16447 000017AC E86103                  	call	SetupParamError		; set message up for Std_EPrintf
 16448 000017AF F9                      	stc				; return failure
 16449 000017B0 EB04                    	jmp	short poRet
 16450                                  poOk:	
 16451 000017B2 C60700                  	mov	byte [bx],0		; mark end of sort code list
 16452 000017B5 5B                      	pop	bx			; BX = ptr to result buffer
 16453                                  	; 19/02/2023
 16454                                  	;cf=0
 16455                                  	;clc				; return success
 16456                                  poRet:
 16457 000017B6 5E                      	pop	si			; restore SI
 16458 000017B7 C3                      	retn
 16459                                  
 16460                                  ; ---------------------------------------------------------------------------
 16461                                  ; MSDOS 6.0
 16462                                  	; 08/06/2023
 16463                                  
 16464                                  ;ifdef DBLSPACE_HOOKS
 16465                                  
 16466                                  ;***	ParseRatio - parse and record /C[H] option
 16467                                  ;
 16468                                  ;	ENTRY	BX = ptr to system parser result buffer for /C occurence
 16469                                  ;		DI = index into word list of switches
 16470                                  ;
 16471                                  ;	EXIT	CY = set if error occurs parsing order
 16472                                  ;
 16473                                  ;		For parse error, we set up for Std_EPrintf call:
 16474                                  ;		AX = parse error code, like system parser
 16475                                  ;		DX = ptr to message block
 16476                                  ;
 16477                                  ;	USED	AX,CX,DX,DI
 16478                                  ;
 16479                                  ;	EFFECTS
 16480                                  ;
 16481                                  ;	  Bits modified to indicate option state.
 16482                                  ;	  fUseHostSize is set to zero for /C, non-zero for /CH.
 16483                                  ;
 16484                                  ;	  For parse error, we set up for Std_EPrintf call:
 16485                                  ;	  Msg_Disp_Class = parse error message class
 16486                                  ;	  Message block (see DX) is set up for parse error message
 16487                                  
 16488                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16489                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:184Ch
 16490                                  
 16491                                  ParseRatio:	;proc
 16492 000017B8 E829FF                  	call	OnOffSw			; turn on option bit
 16493 000017BB 56                      	push	si			; save SI
 16494                                  	;;mov	si,word ptr [bx].ValuePtr
 16495                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16496 000017BC 8B7704                  	mov	si,[bx+4]		; SI = ptr to possible H option
 16497 000017BF 8A04                    	mov	al,[si] 		; AL = null or 'H'
 16498 000017C1 08C0                    	or	al,al
 16499 000017C3 740A                    	jz	short prDone		; if null, no H option to check
 16500 000017C5 3C48                    	cmp	al,'H' 			; only H is allowed, make sure that's
 16501 000017C7 7406                    	je	short prDone		;   what it is
 16502 000017C9 E84403                  	call	SetupParamError		; set message up for Std_EPrintf
 16503 000017CC F9                      	stc				; return failure
 16504 000017CD EB03                    	jmp	short prRet
 16505                                  prDone:
 16506 000017CF A2[B69E]                	mov	[fUseHostSize],al	; set Host cluster size flag
 16507                                  	; 08/06/2023
 16508                                  	;clc
 16509                                  	;;cf = 0
 16510                                  prRet:	
 16511 000017D2 5E                      	pop	si
 16512 000017D3 C3                      	retn
 16513                                  
 16514                                  ;ParseRatio	;endp
 16515                                  ;endif
 16516                                  
 16517                                  ; ---------------------------------------------------------------------------
 16518                                  
 16519                                  ;***	ParseSwitch - parse a switch
 16520                                  ;
 16521                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 16522                                  ;		     a switch
 16523                                  ;
 16524                                  ;	EXIT	CY = set if parse error occurred
 16525                                  ;
 16526                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 16527                                  ;		AX = parse error code, like system parser
 16528                                  ;		DX = ptr to message block
 16529                                  ;
 16530                                  ;	USED	AX,BX,DX
 16531                                  ;
 16532                                  ;	EFFECTS
 16533                                  ;
 16534                                  ;	  Bits may contain new option settings.
 16535                                  ;	  DestBuf may contain new series of sort codes.
 16536                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 16537                                  ;
 16538                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 16539                                  ;	  Msg_Disp_Class = parse error class
 16540                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 16541                                  ;	  Message block (see DX) is set up for parse error message
 16542                                  
 16543                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16544                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16E2h
 16545                                  
 16546                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16547                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1869h
 16548                                  ParseSwitch:
 16549 000017D4 51                      	push	cx			; save CX
 16550 000017D5 57                      	push	di			; save DI
 16551                                  
 16552                                  	;;mov	ax,[bx].SynPtr		; AX = synonym ptr
 16553                                  	;mov	ax,[bx+ResultBuffer.SynPtr]
 16554 000017D6 8B4702                  	mov	ax,[bx+2]
 16555                                  	;mov	di,offset TRANGROUP:Dir_Sw_Ptrs
 16556 000017D9 BF[AF98]                	mov	di,Dir_Sw_Ptrs		; ES:DI = ptr to list of synonym ptrs
 16557                                  	; 08/06/2023
 16558                                  	; (NUM_DIR_SWS = 16 for MSDOS 6.0)
 16559                                  	;mov	cx,16
 16560 000017DC B91000                  	mov	cx,NUM_DIR_SWS ; 14	; CX = # of dir switches in list
 16561 000017DF FC                      	cld				; scan direction = upward
 16562 000017E0 F2AF                    	repne	scasw			; locate synonym ptr in list
 16563                                  	;sub	di,offset TRANGROUP:Dir_Sw_Ptrs + 2
 16564 000017E2 81EF[B198]              	sub	di,Dir_Sw_Ptrs+2
 16565                                  
 16566                                  ;	DI = index into word list of synonym ptrs
 16567                                  
 16568 000017E6 2EFF95[EE17]            	call	word [cs:di+SwHandler]	; use same index into call table
 16569                                  
 16570 000017EB 5F                      	pop	di			; restore DI
 16571 000017EC 59                      	pop	cx			; restore CX
 16572                                  
 16573 000017ED C3                      	retn
 16574                                  
 16575                                  ; ---------------------------------------------------------------------------
 16576                                  
 16577                                  ;	Order in this table must correspond to order in Dir_Sw_Ptrs list.
 16578                                  ;	Simple on/off switches must occur first in both lists, and must be
 16579                                  ;	  in order of option bits in Bits, starting with bit 0.
 16580                                  
 16581                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16582                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16FCh
 16583                                  
 16584                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16585                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1883h
 16586                                  SwHandler:
 16587                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 16588                                  		; ifdef DBLSPACE_HOOKS
 16589 000017EE [E416]                  	dw	OnOffSw 	; /-C
 16590 000017F0 [B817]                  	dw	ParseRatio	; /C[H]
 16591                                  	;	; endif	
 16592 000017F2 [E416]                  	dw	OnOffSw		; /-W
 16593 000017F4 [E416]                  	dw	OnOffSw		; /W
 16594 000017F6 [E416]                  	dw	OnOffSw		; /-P
 16595 000017F8 [E416]                  	dw	OnOffSw		; /P
 16596 000017FA [E416]                  	dw	OnOffSw		; /-S
 16597 000017FC [E416]                  	dw	OnOffSw		; /S
 16598 000017FE [E416]                  	dw	OnOffSw		; /-B
 16599 00001800 [E416]                  	dw	OnOffSw		; /B
 16600 00001802 [E416]                  	dw	OnOffSw		; /-L	;M010
 16601 00001804 [E416]                  	dw	OnOffSw		; /L	;M010
 16602 00001806 [DD16]                  	dw	NoOrder		; /-O
 16603 00001808 [6717]                  	dw	ParseOrder	; /O
 16604 0000180A [7E14]                  	dw	DefaultAttr	; /-A
 16605 0000180C [0117]                  	dw	ParseAttr	; /A
 16606                                  
 16607                                  ; ---------------------------------------------------------------------------
 16608                                  
 16609                                  	;break	<DIR utility routines>
 16610                                  
 16611                                  ;***	UTILITY ROUTINES
 16612                                  ; ---------------------- 
 16613                                  
 16614                                  ; ---------------------------------------------------------------------------
 16615                                  
 16616                                  ;***	ChangeDir - change directory on target drive
 16617                                  ;
 16618                                  ;	ENTRY	FCB contains drive #
 16619                                  ;		DS:DX = ptr to ASCIIZ string w/o drive specifier
 16620                                  ;
 16621                                  ;	EXIT	Changed current directory on drive
 16622                                  ;
 16623                                  ;		If error,
 16624                                  ;		CY = set
 16625                                  ;		DOS Get Extended Error call will get error
 16626                                  ;
 16627                                  ;	USED	AX,DX,SI,DI
 16628                                  ;
 16629                                  ;	EFFECTS
 16630                                  ;
 16631                                  ;	  DirBuf is used to build "d:string".
 16632                                  
 16633                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16634                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1718h
 16635                                  
 16636                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16637                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:18A3h
 16638                                  ChangeDir:
 16639                                  	;mov	di,offset TRANGROUP:DirBuf
 16640 0000180E BF[50A0]                	mov	di,DIRBUF
 16641 00001811 E8EB02                  	call	GetDriveLtr	; AX = "d:"
 16642 00001814 AB                      	stosw			; put drive specifier in buffer
 16643 00001815 89D6                    	mov	si,dx		; SI = ptr to argument string
 16644                                  cdLoop:
 16645 00001817 AC                      	lodsb
 16646 00001818 AA                      	stosb			; move byte to buffer
 16647 00001819 08C0                    	or	al,al
 16648 0000181B 75FA                    	jne	short cdLoop	; continue until null transferred
 16649                                  
 16650                                  	;mov	dx,offset TRANGROUP:DirBuf
 16651 0000181D BA[50A0]                	mov	dx,DIRBUF	; DX = ptr to "d:string"
 16652                                  	;mov	ah,CHDir
 16653 00001820 B43B                    	mov	ah,3Bh
 16654 00001822 CD21                    	int	21h		; change directory
 16655 00001824 C3                      	retn			; return what CHDIR returns
 16656                                  
 16657                                  ; ---------------------------------------------------------------------------
 16658                                  
 16659                                  ;***	CmpAscz - compare two ASCIIZ strings alphanumerically
 16660                                  ;
 16661                                  ;	ENTRY	DS:SI = ptr to one ASCIIZ string
 16662                                  ;		ES:DI = ptr to another ASCIIZ string
 16663                                  ;
 16664                                  ;	EXIT	flags set after REPE CMPSB
 16665                                  ;
 16666                                  ;	USED	AL,CX,SI,DI
 16667                                  ;
 16668                                  ;	NOTES
 16669                                  ;
 16670                                  ;	Maximum run of comparison is length of DS:SI string.
 16671                                  ;	This ensures that two identical strings followed by
 16672                                  ;	random characters will compare correctly.
 16673                                  
 16674                                  	; 19/02/2023
 16675                                  CmpAscz:
 16676                                  	; 07/06/2023
 16677 00001825 56                      	push	si ; *
 16678                                  	;
 16679 00001826 57                      	push	di
 16680                                  
 16681 00001827 89F7                    	mov	di,si
 16682 00001829 30C0                    	xor	al,al
 16683 0000182B B9FFFF                  	mov	cx,0FFFFh
 16684 0000182E F2AE                    	repne	scasb
 16685 00001830 F7D1                    	not	cx
 16686                                  
 16687 00001832 5F                      	pop	di
 16688 00001833 F3A6                    	repe	cmpsb
 16689                                  
 16690                                  	; 07/06/2023
 16691 00001835 5E                      	pop	si ; *
 16692                                  	;
 16693 00001836 C3                      	retn
 16694                                  
 16695                                  ; ---------------------------------------------------------------------------
 16696                                  
 16697                                  ;***	CopyPathname - copy pathname to our buffer
 16698                                  ;
 16699                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 16700                                  ;		     a filespec
 16701                                  ;
 16702                                  ;	EXIT	nothing
 16703                                  ;
 16704                                  ;	USED	AX
 16705                                  ;
 16706                                  ;	EFFECTS
 16707                                  ;
 16708                                  ;	  SrcBuf may contain a new pathname/filespec.
 16709                                  ;	  PathPos, PathCnt updated for new pathname.
 16710                                  
 16711                                  	; 19/02/2023
 16712                                  CopyPathname:
 16713 00001837 56                      	push	si
 16714                                  	;;lds	si,dword ptr [bx].ValuePtr  ; load far ptr from result buffer
 16715                                  	;lds	si,[bx+ResultBuffer.ValuePtr]
 16716 00001838 C57704                  	lds	si,[bx+4]
 16717                                  	;invoke	Move_To_SrcBuf		    ; copy pathname to SrcBuf
 16718 0000183B E8BB19                  	call	Move_To_SrcBuf
 16719 0000183E 5E                      	pop	si
 16720 0000183F C3                      	retn
 16721                                  
 16722                                  ; ---------------------------------------------------------------------------
 16723                                  
 16724                                  ;***	CountFile - update counters with current file
 16725                                  ;
 16726                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16727                                  ;
 16728                                  ;	EXIT	nothing
 16729                                  ;
 16730                                  ;	USED	AX,DX
 16731                                  ;
 16732                                  ;	EFFECTS
 16733                                  ;
 16734                                  ;	  FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 16735                                  
 16736                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16737                                  CountFile:
 16738 00001840 06                      	push	es			; save TRANGROUP seg addr
 16739 00001841 8E06[179E]              	mov	es,[TPA]		; ES = TPA seg addr
 16740                                  
 16741 00001845 FF06[439E]              	inc	word [FileCnt]		; # files this directory
 16742 00001849 FF06[499E]              	inc	word [FileCntTotal]	; # files total
 16743 0000184D 7504                    	jnz	short cntf1
 16744 0000184F FF06[4B9E]              	inc	word [FileCntTotal+2]
 16745                                  cntf1:
 16746                                  	;mov	ax,word ptr es:[bx].filesize
 16747                                  					; AX = low word of file size
 16748                                  	;mov	dx,word ptr es:[bx].filesize+2
 16749                                  					; DX = high word of file size
 16750 00001853 268B4711                	mov	ax,[es:bx+17] ; [es:bx+EntryStruc.filesize]
 16751 00001857 268B5713                	mov	dx,[es:bx+19] ; [es:bx+EntryStruc.filesize+2]
 16752 0000185B 0106[459E]              	add	[FileSiz],ax
 16753 0000185F 1116[479E]              	adc	[FileSiz+2],dx		; size of this directory
 16754 00001863 0106[4D9E]              	add	[FileSizTotal],ax
 16755 00001867 1116[4F9E]              	adc	[FileSizTotal+2],dx	; total size of files listed
 16756                                  
 16757 0000186B 07                      	pop	es			; ES = TRANGROUP seg addr again
 16758                                  dbRet:	; 19/02/2023
 16759 0000186C C3                      	retn
 16760                                  
 16761                                  ; ---------------------------------------------------------------------------
 16762                                  
 16763                                  ;***	DisplayBare - display filename in bare format
 16764                                  ;
 16765                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16766                                  ;
 16767                                  ;	EXIT	DX = # char's displayed, including dot
 16768                                  ;
 16769                                  ;	USED	AX,CX,SI,DI
 16770                                  ;
 16771                                  ;	EFFECTS
 16772                                  ;
 16773                                  ;	  Filename is displayed in name.ext format, followed by cr/lf.
 16774                                  ;	  If /s is on, complete pathname is displayed.
 16775                                  ;
 16776                                  ;	NOTE
 16777                                  ;
 16778                                  ;	  Directory pseudofiles . and .. and suppressed in bare listing.
 16779                                  
 16780                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16781                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1775h
 16782                                  
 16783                                  
 16784                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16785                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1900h
 16786                                  
 16787                                  DisplayBare:
 16788                                  ;	Suppress . and .. files from bare listing.
 16789                                  
 16790 0000186D 8CD9                    	mov	cx,ds			; CX = saved TRANGROUP seg addr
 16791 0000186F 8E1E[179E]              	mov	ds,[TPA]		; DS:BX = ptr to file entry
 16792                                  	;assume	ds:NOTHING
 16793                                  	;cmp	ds:[bx].filename,'.'	; check 1st char of filename
 16794 00001873 807F012E                	cmp	byte [bx+1],'.' ; [bx+EntrStruc.filename]
 16795 00001877 8ED9                    	mov	ds,cx			; DS = TRANGROUP seg addr again
 16796                                  	;assume	ds:TRANGROUP
 16797 00001879 74F1                    	je	short dbRet		; it's . or .. - don't display
 16798                                  
 16799                                  	;;;test	Bits,mask subd
 16800                                  	;;test	word [_Bits],4
 16801                                  	;test	byte [_Bits],4
 16802                                  	; 08/06/2023
 16803 0000187B F606[A2A0]08            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 16804 00001880 7431                    	jz	short dbNameExt		; not /s - display filename only
 16805                                  
 16806                                  	;invoke	Build_Dir_String
 16807 00001882 E8190B                  	call	build_dir_string
 16808                                  	;mov	di,offset TRANGROUP:BwdBuf
 16809 00001885 BF[50A0]                	mov	di,BWDBUF		; ES:DI = ptr to dir string
 16810                                     
 16811                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16812                                  	;;test	word [_Bits],10h
 16813                                  	;test	byte [_Bits],10h
 16814                                  	; 08/06/2023
 16815 00001888 F606[A2A0]20            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 16816                                  	;jz	@F			;M010;lowercase not needed
 16817 0000188D 7405                    	jz	short dbare1
 16818 0000188F 89FE                    	mov	si,di			;M010;DS:SI --> ASCIIZ string in BwdBuf	
 16819 00001891 E8C202                  	call	LowercaseString		;M010;path string is in BwdBuf
 16820                                  dbare1:
 16821                                  ;@@:	
 16822                                  	;xor	al,al			; AL = 0
 16823                                  	; 19/02/2023
 16824 00001894 31C0                    	xor	ax,ax
 16825 00001896 B9FFFF                  	mov	cx,0FFFFh
 16826 00001899 FC                      	cld
 16827 0000189A F2AE                    	repne	scasb			; ES:DI = ptr to byte after null
 16828 0000189C 4F                      	dec	di			; ES:DI = ptr to null byte
 16829                                  
 16830 0000189D 26807DFF5C              	cmp	byte [es:di-1],'\'
 16831                                  	;je	@F
 16832 000018A2 7403                    	je	short dbare2		; already terminated w/ '\'
 16833                                  
 16834                                  	;mov	ax,'\'			; AX = '\',0
 16835 000018A4 B05C                    	mov	al,'\'
 16836 000018A6 AB                      	stosw				; add to dir string
 16837                                  ;@@:
 16838                                  dbare2:
 16839                                  	;mov	String_Ptr_2,offset TRANGROUP:BwdBuf
 16840 000018A7 C706[37A1][50A0]        	mov	word [string_ptr_2],BWDBUF
 16841                                  	;mov	dx,offset TRANGROUP:String_Buf_Ptr
 16842 000018AD BA[BA93]                	mov	dx,string_buf_ptr
 16843                                  	;invoke	Std_Printf		; display device & directory path
 16844 000018B0 E87A3C                  	call	std_printf
 16845                                  dbNameExt:
 16846 000018B3 E82D00                  	call	DisplayDotForm		; display name.ext
 16847                                  	;invoke	CrLf2			; display cr/lf
 16848 000018B6 E86A12                  	call	CRLF2
 16849                                  	; 19/02/2023
 16850                                  	;call	UseLine			;M007;Allow /p with /b
 16851                                  ;dbRet:
 16852                                  	;retn
 16853                                  
 16854                                  	; 19/02/2023
 16855                                  	;jmp	short UseLine
 16856                                  
 16857                                  ; ---------------------------------------------------------------------------
 16858                                  
 16859                                  ;***	UseLine - use a display line, start a new page if none left
 16860                                  ;
 16861                                  ;	ENTRY	nothing
 16862                                  ;
 16863                                  ;	EXIT	nothing
 16864                                  ;
 16865                                  ;	USED	flags
 16866                                  
 16867                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16868                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A04h
 16869                                  UseLine:
 16870 000018B9 FF0E[419E]              	dec	word [LeftOnPage]
 16871 000018BD 833E[419E]02            	cmp	word [LeftOnPage],2
 16872 000018C2 771E                    	ja	short ulRet
 16873                                  	; 19/02/2023
 16874                                  	;call	EndPage
 16875                                  ;ulRet:
 16876                                  	;retn
 16877                                  
 16878                                  	; 19/02/2023
 16879                                  	;jmp	short EndPage
 16880                                  
 16881                                  ; ---------------------------------------------------------------------------
 16882                                  
 16883                                  ;***	EndPage - end the current display page
 16884                                  ;
 16885                                  ;	ENTRY	LeftOnPage = # lines left on display page
 16886                                  ;		Current directory (on selected drive) is the one being listed
 16887                                  ;		Bits contains /p setting
 16888                                  ;
 16889                                  ;	EXIT	LeftOnPage = # lines left for next page
 16890                                  ;
 16891                                  ;	USED	AX,DX
 16892                                  ;
 16893                                  ;	EFFECTS
 16894                                  ;
 16895                                  ;	  Pause is invoked to display a message and wait for a keystroke.
 16896                                  ;	  BwdBuf (same as DirBuf) used to build directory string.
 16897                                  
 16898                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16899                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19B8h
 16900                                  
 16901                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16902                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1BADh
 16903                                  EndPage:
 16904                                  	;;;test	Bits,mask pagd
 16905                                  	;;test	word [_Bits],2
 16906                                  	;test	byte [_Bits],2
 16907                                  	; 08/06/2023
 16908 000018C4 F606[A2A0]04            	test	byte [_Bits],mask.pagd ; 4 ; MSDOS 6.0
 16909 000018C9 7410                    	jz	short epNew		; paged display isn't enabled
 16910                                  
 16911 000018CB 53                      	push	bx			; save BX
 16912 000018CC 51                      	push	cx			; save CX
 16913                                  
 16914                                  	;invoke	Pause			; "Press any key to continue..."
 16915 000018CD E83706                  	call	PAUSE
 16916                                  
 16917                                  	;invoke	Build_Dir_String
 16918 000018D0 E8CB0A                  	call	build_dir_string
 16919                                  	;mov	dx,offset TRANGROUP:DirCont_Ptr
 16920 000018D3 BA[3E94]                	mov	dx,dircont_ptr
 16921                                  	;invoke	Printf_Crlf		; "(continuing <dir>)", cr/lf
 16922 000018D6 E8463C                  	call	Printf_Crlf
 16923                                  
 16924 000018D9 59                      	pop	cx			; restore CX
 16925 000018DA 5B                      	pop	bx			; restore BX
 16926                                  epNew:	
 16927 000018DB A1[AEA2]                	mov	ax,[LinPerPag]		; AX = # lines per page
 16928 000018DE 48                      	dec	ax			; AX = # lines till next EndPage
 16929 000018DF A3[419E]                	mov	[LeftOnPage],ax		; LeftOnPage = countdown variable
 16930                                  ulRet:	
 16931                                  	; 19/02/2023
 16932 000018E2 C3                      	retn
 16933                                  
 16934                                  ; ---------------------------------------------------------------------------
 16935                                  
 16936                                  ;***	DisplayDotForm - display filename in compressed dot format
 16937                                  ;
 16938                                  ;	Display name.ext, with no cr/lf's. Dot is displayed only
 16939                                  ;	if the filename has a nonblank extension.
 16940                                  ;
 16941                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16942                                  ;
 16943                                  ;	EXIT	DX = # char's displayed, including dot
 16944                                  ;
 16945                                  ;	USED	AX,CX,SI,DI
 16946                                  ;
 16947                                  ;	EFFECTS
 16948                                  ;
 16949                                  ;	  Filename is displayed in name.ext format.
 16950                                  ;
 16951                                  ;	NOTE
 16952                                  ;
 16953                                  ;	  We allow for bogus filenames that have blanks embedded
 16954                                  ;	  in the name or extension.
 16955                                  
 16956                                  ;	Bugbug:	might be a good performance gain if we buffered
 16957                                  ;	up the output and used DOS function 9.
 16958                                  
 16959                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16960                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:17C8h
 16961                                  
 16962                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 16963                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1953h
 16964                                  DisplayDotForm:
 16965 000018E3 1E                      	push	ds			; save TRANGROUP seg addr
 16966 000018E4 06                      	push	es			; save ES
 16967 000018E5 2EA1[179E]              	mov	ax,[cs:TPA]		; AX = TPA seg addr
 16968 000018E9 8ED8                    	mov	ds,ax			; DS:BX = ptr to entry
 16969                                  	;assume	ds:nothing
 16970 000018EB 8EC0                    	mov	es,ax			; ES:BX = ptr to entry
 16971                                  
 16972                                  	; 08/06/2023
 16973                                  	;mov	di,bx			; ES:DI = ptr to entry
 16974                                  	;;;add	di,filename + size filename - 1
 16975                                  	;add	di,8 ; 1+8-1		; ES:DI = ptr to last char in name field
 16976                                  	;;mov	cx,size filename	; CX = length of name field
 16977                                  	;mov	cx,8
 16978                                  	; 08/06/2023
 16979 000018ED B90800                  	mov	cx,8
 16980 000018F0 89CF                    	mov	di,cx
 16981 000018F2 01DF                    	add	di,bx	
 16982                                  
 16983 000018F4 B020                    	mov	al,' '
 16984 000018F6 FD                      	std				; scan down
 16985 000018F7 F3AE                    	repe	scasb			; scan for nonblank
 16986                                  
 16987                                  ;	Assume file name has at least one character.
 16988                                  
 16989 000018F9 41                      	inc	cx			; CX = # chars in name
 16990 000018FA 89CA                    	mov	dx,cx			; DX = # chars to be displayed
 16991                                  
 16992 000018FC 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 16993                                  	;;add	si,filename		; DS:SI = ptr to name
 16994                                  	;add	si,1 
 16995                                  	;		; add si,EntryStruc.filename
 16996                                  	; 25/04/2023
 16997 000018FE 46                      	inc	si
 16998                                  NextNameChar:
 16999 000018FF FC                      	cld
 17000 00001900 AC                      	lodsb				; AL = next char
 17001                                  
 17002                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 17003                                  	;;test	word [ss:_Bits],10h
 17004                                  	;test	byte [ss:_Bits],10h
 17005                                  	; 08/06/2023
 17006 00001901 36F606[A2A0]20          	test	byte [ss:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17007                                  	;jz	short @F		;M010;lowercase not required
 17008 00001907 7403                    	jz	short ddf1
 17009 00001909 E83F02                  	call	LowerCase		;M010;filename char is in AL
 17010                                  ddf1:
 17011                                  ;@@:	
 17012                                  	;invoke	Print_Char		; display it
 17013 0000190C E8400A                  	call	PRINT_CHAR
 17014 0000190F E2EE                    	loop	NextNameChar
 17015                                  
 17016                                  ;	Now do extension.
 17017                                  
 17018 00001911 89DF                    	mov	di,bx			; ES:DI = ptr to entry
 17019                                  	;add	di,fileext + size fileext - 1
 17020 00001913 83C70B                  	add	di,11 ; 9+3-1		; ES:DI = ptr to last char in ext field
 17021                                  	;mov	cx,size fileext		; CX = length of ext field
 17022 00001916 B90300                  	mov	cx,3
 17023 00001919 B020                    	mov	al,' '
 17024 0000191B FD                      	std				; scan down
 17025 0000191C F3AE                    	repe	scasb			; scan for nonblank
 17026 0000191E 7420                    	je	short ddDone		; no nonblank chars in ext
 17027                                  
 17028 00001920 41                      	inc	cx			; CX = # chars in ext
 17029 00001921 01CA                    	add	dx,cx			; DX = total # chars to be displayed
 17030 00001923 42                      	inc	dx			;      including dot
 17031                                  
 17032 00001924 B02E                    	mov	al,'.'
 17033 00001926 E8260A                  	call	PRINT_CHAR
 17034 00001929 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 17035                                  	;add	si,fileext		; DS:SI = ptr to ext
 17036 0000192B 83C609                  	add	si,9
 17037                                  
 17038                                  NextExtChar:
 17039 0000192E FC                      	cld
 17040 0000192F AC                      	lodsb				; AL = next char
 17041                                  
 17042                                  	;;;test	CS:Bits,mask lcase	;M010;check for lowercase option
 17043                                  	;;test	word [cs:_Bits],10h
 17044                                  	;test	byte [cs:_Bits],10h
 17045                                  	; 08/06/2023
 17046 00001930 2EF606[A2A0]20          	test	byte [cs:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17047                                  	;jz	short @F		;M010;lowercase not required
 17048 00001936 7403                    	jz	short ddf2
 17049 00001938 E81002                  	call	LowerCase		;M010;fileext char is in AL
 17050                                  ;@@:	
 17051                                  ddf2:
 17052                                  	;invoke	Print_Char		; display it
 17053 0000193B E8110A                  	call	PRINT_CHAR
 17054 0000193E E2EE                    	loop	NextExtChar
 17055                                  ddDone:
 17056 00001940 07                      	pop	es			; restore ES
 17057 00001941 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17058                                  	;assume	ds:TRANGROUP
 17059 00001942 FC                      	cld				; leave direction flag = up
 17060 00001943 C3                      	retn
 17061                                  
 17062                                  ; ---------------------------------------------------------------------------
 17063                                  
 17064                                  ;***	DisplayFile - display file entry, update counters
 17065                                  ;
 17066                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17067                                  ;		Bits contains /w, /p settings
 17068                                  ;
 17069                                  ;	EXIT	nothing
 17070                                  ;
 17071                                  ;	USED	AX,CX,DX,SI,DI,BP
 17072                                  ;
 17073                                  ;	EFFECTS
 17074                                  ;
 17075                                  ;	  Entry is displayed.  
 17076                                  ;	  If not /b,
 17077                                  ;	    Cursor is left at end of entry on screen.
 17078                                  ;	    FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 17079                                  ;	  If /b,
 17080                                  ;	    Cursor is left at beginning of next line.
 17081                                  ;	    Cnt's and Siz's aren't updated.
 17082                                  
 17083                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17084                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:182Eh
 17085                                  	
 17086                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17087                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:19B9h
 17088                                  
 17089                                  DisplayFile:
 17090                                  	;;;test	Bits,mask bare
 17091                                  	;;test	word [_Bits],8
 17092                                  	;test	byte [_Bits],8
 17093                                  	; 08/06/2023
 17094 00001944 F606[A2A0]10            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0 
 17095 00001949 7405                    	jz	short dfNorm		; not /b - do normal display
 17096                                  
 17097 0000194B E81FFF                  	call	DisplayBare		; display file in bare format
 17098 0000194E EB22                    	jmp	short dfRet
 17099                                  dfNorm:	
 17100 00001950 E88200                  	call	DisplayNext		; pos'n cursor for next entry
 17101                                  	;;;test	Bits,mask wide
 17102                                  	;;test	word [_Bits],1
 17103                                  	;test	byte [_Bits],1
 17104                                  	; 08/06/2023
 17105 00001953 F606[A2A0]02            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0 
 17106 00001958 7405                    	jz	short dfFull		; full format
 17107 0000195A E87401                  	call	DisplayWide		; wide format
 17108 0000195D EB10                    	jmp	short dfCnt
 17109                                  dfFull:	
 17110 0000195F E83E00                  	call	DisplayName		; display filename & extension
 17111 00001962 E89700                  	call	DisplayTheRest		; display size, date, time
 17112                                  	
 17113                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 17114                                  	; MSDOS 6.0
 17115                                  ;ifdef DBLSPACE_HOOKS
 17116                                  	;;test	Bits,mask cratio
 17117                                  	;test	word [_Bits],1		
 17118 00001965 F606[A2A0]01            	test	byte [_Bits],mask.cratio 
 17119                                  					; display compression ratio
 17120 0000196A 7403                    	jz	short dfCnt
 17121 0000196C E81A01                  	call	DisplayCompRatio
 17122                                  ;endif
 17123                                  
 17124                                  dfCnt:
 17125 0000196F E8CEFE                  	call	CountFile		; update file counters
 17126                                  dfRet:
 17127                                  dhRet:	; 19/02/2023
 17128 00001972 C3                      	retn
 17129                                  
 17130                                  ; ---------------------------------------------------------------------------
 17131                                  
 17132                                  ;***	DisplayHeader - display directory header of working directory
 17133                                  ;
 17134                                  ;	ENTRY	Current directory (on selected drive) is the one to display
 17135                                  ;		LeftOnPage = # lines left on display page
 17136                                  ;
 17137                                  ;	EXIT	nothing
 17138                                  ;
 17139                                  ;	ERROR EXIT
 17140                                  ;
 17141                                  ;	  Build_Dir_String will exit through CError with "Invalid drive
 17142                                  ;	   specification" if there's a problem obtaining the current 
 17143                                  ;	   directory pathname.
 17144                                  ;
 17145                                  ;	USED	AX,DX,SI,DI
 17146                                  ;
 17147                                  ;	EFFECTS
 17148                                  ;
 17149                                  ;	  BwdBuf (which is really the same buffer as DirBuf, which
 17150                                  ;	   we are using for the DTA) contains the directory string.
 17151                                  ;	  LeftOnPage is adjusted.
 17152                                  
 17153                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17154                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17155                                  
 17156                                  DisplayHeader:
 17157                                  	;;;test	Bits,mask bare
 17158                                  	;;test	word [_Bits],8
 17159                                  	;test	byte [_Bits],8
 17160                                  	; 08/06/2023
 17161 00001973 F606[A2A0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 17162 00001978 75F8                    	jnz	short dhRet		; /b - don't display header
 17163                                  
 17164                                  	;;;test	Bits,mask subd
 17165                                  	;;test	word [_Bits],4
 17166                                  	;test	byte [_Bits],4
 17167                                  	; 08/06/2023
 17168 0000197A F606[A2A0]08            	test	byte [_Bits],mask.subd ; 8  ;MSDOS 6.0
 17169 0000197F 7408                    	jz	short dhNorm		; not /s
 17170                                  
 17171                                  ;	For subdirectory listings, put a blank line before the header.
 17172                                  
 17173                                  	;invoke	Crlf2			; start with a blank line
 17174 00001981 E89F11                  	call	CRLF2
 17175 00001984 E832FF                  	call	UseLine
 17176 00001987 EB05                    	jmp	short dhCom
 17177                                  dhNorm:
 17178 00001989 B020                    	mov	al,' ' ; 20h
 17179                                  	;mov	al,BLANK		; if not /s, precede by a blank
 17180 0000198B E8C109                  	call	PRINT_CHAR		; print a leading blank
 17181                                  dhCom:
 17182 0000198E E80D0A                  	call	build_dir_string
 17183 00001991 BA[3A93]                	mov	dx,dirhead_ptr
 17184 00001994 E8963B                  	call	std_printf		; print header & cr/lf
 17185 00001997 E81FFF                  	call	UseLine
 17186 0000199A E88611                  	call	CRLF2			; another cr/lf
 17187                                  	;call	UseLine
 17188                                  ;dhRet:
 17189                                  	;retn
 17190                                  
 17191                                  	; 19/02/2023
 17192 0000199D E919FF                  	jmp	UseLine
 17193                                  
 17194                                  ; ---------------------------------------------------------------------------
 17195                                  
 17196                                  ;***	DisplayName - display file name & extension
 17197                                  ;
 17198                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17199                                  ;
 17200                                  ;	EXIT	nothing
 17201                                  ;
 17202                                  ;	USED	AX,CX,DX,SI,DI
 17203                                  ;
 17204                                  ;	EFFECTS
 17205                                  ;
 17206                                  ;	  Filename & extension are displayed in spread format.
 17207                                  ;	  Cursor is left at end of extension.
 17208                                  
 17209                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17210                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17211                                  
 17212                                  DisplayName:
 17213 000019A0 1E                      	push	ds			; save TRANGROUP seg addr
 17214 000019A1 8E1E[179E]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 17215                                  	;assume	ds:nothing
 17216 000019A5 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 17217                                  	;;add	si,filename		; DS:SI = ptr to filename
 17218                                  	;add	si,1  ; EntryStruc.filename
 17219                                  	; 08/06/2023
 17220 000019A7 46                      	inc	si
 17221 000019A8 BF[819F]                	mov	di,CHARBUF		; ES:DI = ptr to CharBuf
 17222                                  
 17223 000019AB B90800                  	mov	cx,8
 17224 000019AE FC                      	cld
 17225 000019AF F3A4                    	rep	movsb			; move filename to CharBuf
 17226 000019B1 B020                    	mov	al,' '
 17227 000019B3 AA                      	stosb				; add a blank
 17228                                  	;mov	cx,3
 17229                                  	; 08/06/2023
 17230 000019B4 B103                    	mov	cl,3
 17231 000019B6 F3A4                    	rep	movsb			; add extension
 17232 000019B8 30C0                    	xor	al,al
 17233 000019BA AA                      	stosb				; add a NULL
 17234                                  
 17235 000019BB 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17236                                  	;assume	ds:TRANGROUP
 17237                                  
 17238                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 17239                                  	;;test	word [_Bits],10h
 17240                                  	;test	byte [_Bits],10h
 17241                                  	; 08/06/2023
 17242 000019BC F606[A2A0]20            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 17243 000019C1 7406                    	jz	short dn1		;M010;lowercase not required
 17244 000019C3 BE[819F]                	mov	si,CHARBUF		;M010;DS:SI --> ASCIIZ string
 17245 000019C6 E88D01                  	call	LowercaseString		;M010;filename.ext string is in CharBuf
 17246                                  dn1:	
 17247 000019C9 C706[37A1][819F]        	mov	word [string_ptr_2],CHARBUF
 17248 000019CF BA[BA93]                	mov	dx,string_buf_ptr
 17249                                  	;call	std_printf		; print filename & extension
 17250                                  	;retn
 17251                                  	; 19/02/2023
 17252 000019D2 E9583B                  	jmp	std_printf
 17253                                  
 17254                                  ; ---------------------------------------------------------------------------
 17255                                  
 17256                                  ;***	DisplayNext - move display cursor to next entry position
 17257                                  ;
 17258                                  ;	ENTRY	LeftOnLine = # entries can still be printed on this line
 17259                                  ;		LeftOnPage = # lines can still be printed for this page
 17260                                  ;		FileCnt = # files in this dir displayed before this one
 17261                                  ;		Bits contains /w setting
 17262                                  ;
 17263                                  ;	EXIT	nothing
 17264                                  ;
 17265                                  ;	USED	AX,DX
 17266                                  ;
 17267                                  ;	EFFECTS
 17268                                  ;
 17269                                  ;	  LeftOnLine will be updated to reflect the entry about to be
 17270                                  ;	   displayed.
 17271                                  ;	  LeftOnPage may be updated.
 17272                                  
 17273                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17274                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17275                                  	
 17276                                  DisplayNext:
 17277 000019D5 833E[439E]00            	cmp	word [FileCnt],0
 17278 000019DA 7415                    	je	short dn1st		; 1st file in directory
 17279 000019DC 803E[3D9E]00            	cmp	byte [LeftOnLine],0
 17280 000019E1 7E08                    	jng	short dnEol	; jle	; no more room on this line
 17281                                  
 17282                                  ;	We are in wide mode (LeftOnLine is always 0 otherwise) and
 17283                                  ;	we still have room for more on this line.
 17284                                  ;	Tab to next position.
 17285                                  
 17286 000019E3 BA[C993]                	mov	dx,tab_ptr
 17287 000019E6 E8443B                  	call	std_printf
 17288 000019E9 EB0C                    	jmp	short dnDone
 17289                                  dnEol:	
 17290                                  ;	Start this entry on a new line.
 17291                                  
 17292 000019EB E83511                  	call	CRLF2		; start on new line
 17293 000019EE E8C8FE                  	call	UseLine
 17294                                  dn1st:
 17295 000019F1 A0[3E9E]                	mov	al,[PerLine]
 17296 000019F4 A2[3D9E]                	mov	[LeftOnLine],al	; reset # entries left on line
 17297                                  
 17298                                  dnDone:
 17299 000019F7 FE0E[3D9E]              	dec	byte [LeftOnLine]
 17300                                  				; reflect the entry about to be displayed
 17301 000019FB C3                      	retn
 17302                                  
 17303                                  ; ---------------------------------------------------------------------------
 17304                                  
 17305                                  ;***	DisplayTheRest - display file size/dir, date, time
 17306                                  ;
 17307                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17308                                  ;		Display cursor is at end of file extension
 17309                                  ;
 17310                                  ;	EXIT	nothing
 17311                                  ;
 17312                                  ;	USED	AX,CX,DX,SI,DI,BP
 17313                                  ;
 17314                                  ;	EFFECTS
 17315                                  ;
 17316                                  ;	  File size, date, & time are displayed.
 17317                                  
 17318                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17319                                  
 17320                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17321                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1A7Ch
 17322                                  DisplayTheRest	:
 17323 000019FC 06                      	push	es			; save TRANGROUP seg addr
 17324 000019FD 8E06[179E]              	mov	es,[TPA]		; ES = TPA seg addr
 17325 00001A01 89DD                    	mov	bp,bx			; BP = offset of entry in TPA
 17326                                  	;;test	es:[bp].fileattr,ATTR_DIRECTORY
 17327                                  	;test	byte [es:bp+EntryStruc.fileattr],10h
 17328 00001A03 26F6460C10              	test	byte [es:bp+12],ATTR_DIRECTORY
 17329 00001A08 7415                    	jz	short drNonDir		; not a directory file
 17330                                  
 17331                                  ;	For a directory file, display <DIR> instead of size.
 17332                                  
 17333 00001A0A BA[CC93]                	mov	dx,dmes_ptr
 17334 00001A0D E81D3B                  	call	std_printf
 17335                                  	; 08/06/2023
 17336                                  	;jmp	short drCom
 17337                                  
 17338                                  	; 08/06/2023
 17339                                  	; MSDOS 6.22 COMMAND.COM (disassembled source code)
 17340 00001A10 F606[B693]40            	test    byte [screen_f_1],40h	; 80 columns ?
 17341 00001A15 7406                    	jz      short dr_0      	; no
 17342 00001A17 BA[CF93]                	mov     dx,space_4_ptr		; 4 space chars
 17343 00001A1A E8103B                  	call    std_printf
 17344                                  dr_0:
 17345 00001A1D EB16                    	jmp	short drCom		; skip to common fields
 17346                                  
 17347                                  drNonDir:
 17348                                  ;	For a non-directory file, display file size.
 17349                                  
 17350                                  	;;mov	dx,word ptr es:[bp].filesize
 17351                                  	;mov	dx,[es:bp+EntryStruc.filesize]
 17352 00001A1F 268B5611                	mov	dx,[es:bp+17]
 17353 00001A23 8916[33A1]              	mov	[File_Size_Low],dx
 17354                                  	;;mov	dx,word ptr es:[bp].filesize+2
 17355                                  	;mov	dx,[es:bp+EntryStruc.filesize+2]
 17356 00001A27 268B5613                	mov	dx,[es:bp+19]
 17357 00001A2B 8916[35A1]              	mov	[File_Size_High],dx
 17358 00001A2F BA[AC93]                	mov	dx,disp_file_size_ptr
 17359 00001A32 E8F83A                  	call	std_printf
 17360                                  drCom:
 17361                                  ;	For all files, display date & time.
 17362                                  
 17363                                  	;;mov	ax,es:[bp].filedate	; AX = date word
 17364                                  	;mov	ax,[es:bp+EntryStruc.filedate]
 17365 00001A35 268B460F                	mov	ax,[es:bp+15]
 17366 00001A39 09C0                    	or	ax,ax			; test for null date (DOS 1.x)
 17367 00001A3B 7448                    	jz	short drDone		; no date, skip date/time display
 17368 00001A3D 89C3                    	mov	bx,ax			; BX = date word
 17369 00001A3F 83E01F                  	and	ax,1Fh			; AX = day of month
 17370 00001A42 88C2                    	mov	dl,al			; DL = day of month
 17371 00001A44 89D8                    	mov	ax,bx			; AX = date word
 17372 00001A46 B105                    	mov	cl,5
 17373 00001A48 D3E8                    	shr	ax,cl			; shift day out
 17374 00001A4A 240F                    	and	al,0Fh			; AL = month
 17375 00001A4C 88C6                    	mov	dh,al			; DH = month
 17376 00001A4E 88F9                    	mov	cl,bh
 17377 00001A50 D0E9                    	shr	cl,1			; CL = year - 1980
 17378 00001A52 30ED                    	xor	ch,ch			; CX = year - 1980
 17379 00001A54 83C150                  	add	cx,80			; CX = 2-digit year
 17380 00001A57 80F964                  	cmp	cl,100
 17381 00001A5A 7203                    	jb	short dr_1		; not year 2000 yet, skip ahead
 17382 00001A5C 80E964                  	sub	cl,100			; adjust for 21st century
 17383                                  dr_1:	
 17384 00001A5F 86F2                    	xchg	dh,dl			; DX = month/day
 17385 00001A61 890E[0D94]              	mov	[DirDat_Yr],cx		; move year to msg block
 17386 00001A65 8916[0F94]              	mov	[DirDat_Mo_Day],dx	; move month/day to msg block
 17387                                  	;;mov	cx,es:[bp].filetime	; CX = file time
 17388                                  	;mov	cx,[es:bp+EntryStruc.filetime]
 17389 00001A69 268B4E0D                	mov	cx,[es:bp+13]
 17390 00001A6D E310                    	jcxz	drPrint			; no time field - go print
 17391 00001A6F D1E9                    	shr	cx,1
 17392 00001A71 D1E9                    	shr	cx,1
 17393 00001A73 D1E9                    	shr	cx,1			; CH = hours
 17394 00001A75 D0E9                    	shr	cl,1
 17395 00001A77 D0E9                    	shr	cl,1			; CL = minutes
 17396 00001A79 86E9                    	xchg	ch,cl			; CX = hr/min
 17397 00001A7B 890E[1894]              	mov	[DirTim_Hr_Min],cx	; move time to msg block
 17398                                  drPrint:
 17399 00001A7F BA[0894]                	mov	dx,dirdattim_ptr
 17400 00001A82 E8A83A                  	call	std_printf		; print date & time
 17401                                  drDone:
 17402 00001A85 07                      	pop	es			; ES = TRANGROUP seg addr again	
 17403 00001A86 89EB                    	mov	bx,bp			; BX = offset of entry in TPA again
 17404                                  ;dtrRet:
 17405                                  	; 19/02/2023
 17406 00001A88 C3                      	retn
 17407                                  
 17408                                  ; ---------------------------------------------------------------------------
 17409                                  ; MSDOS 6.0
 17410                                  
 17411                                  ;ifdef DBLSPACE_HOOKS
 17412                                  
 17413                                  ;***	DisplayCompRatio - display compression ratio
 17414                                  ;
 17415                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17416                                  ;
 17417                                  ;	EXIT	nothing
 17418                                  ;
 17419                                  ;	USED	AX,CX,DX
 17420                                  ;
 17421                                  ;	EFFECTS
 17422                                  ;
 17423                                  ;	  File compression ratio is displayed.
 17424                                  
 17425                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17426                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1B09h
 17427                                  
 17428                                  DisplayCompRatio:	;proc
 17429 00001A89 06                      	push	es			; save TRANGROUP seg addr
 17430 00001A8A 8E06[179E]              	mov	es,[TPA]		; ES = TPA seg addr
 17431                                  	;;mov	al,es:[bx].compratio
 17432                                  	;mov	al,[es:bx+EntryStruc.compratio]
 17433 00001A8E 268A4715                	mov	al,[es:bx+15h]
 17434 00001A92 3CFF                    	cmp	al,0FFh			; invalid/no compression ratio?
 17435 00001A94 7417                    	je	short dcrRet
 17436                                  
 17437 00001A96 88C4                    	mov	ah,al			; unpack compression ratio
 17438 00001A98 B104                    	mov	cl,4
 17439 00001A9A D2EC                    	shr	ah,cl			; isolate whole number portion
 17440 00001A9C FEC4                    	inc	ah			; 0-15 = 1-16
 17441 00001A9E 240F                    	and	al,0Fh 			; isolate tenths
 17442                                  
 17443 00001AA0 8826[3EA1]              	mov	[Dir_CRatio_1],ah
 17444 00001AA4 A2[3FA1]                	mov	[Dir_CRatio_2],al
 17445                                  	;mov	dx,offset TRANGROUP:DirCompRatio_Ptr
 17446                                  	;invoke	Std_Printf
 17447 00001AA7 BA[7894]                	mov	dx,DirCompRatio_Ptr
 17448 00001AAA E8803A                  	call	std_printf	
 17449                                  dcrRet:
 17450 00001AAD 07                      	pop	es
 17451                                  dtrRet:		; 08/06/2023
 17452 00001AAE C3                      	retn
 17453                                  
 17454                                  ;DisplayCompRatio	;endp
 17455                                  
 17456                                  ;endif
 17457                                  
 17458                                  ; ---------------------------------------------------------------------------
 17459                                  
 17460                                  ;***	DisplayTrailer - display trailing lines for directory listing
 17461                                  ;
 17462                                  ;	ENTRY	LeftOnPage = # lines left on display page
 17463                                  ;		FileCnt = # files listed
 17464                                  ;		FileSiz = total size of files listed
 17465                                  ;
 17466                                  ;	EXIT	nothing
 17467                                  ;
 17468                                  ;	USED
 17469                                  ;
 17470                                  ;	EFFECTS
 17471                                  ;
 17472                                  ;	  Trailing info lines are displayed
 17473                                  
 17474                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17475                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17476                                  
 17477                                  DisplayTrailer:
 17478                                  	;;;test	Bits,mask bare
 17479                                  	;;test	word [_Bits],8
 17480                                  	;test	byte [_Bits],8
 17481                                  	; 08/06/2023
 17482 00001AAF F606[A2A0]10            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 17483 00001AB4 75F8                    	jnz	short dtrRet		; /b - don't display trailer
 17484                                  
 17485 00001AB6 E86A10                  	call	CRLF2			; start on new line
 17486 00001AB9 E8FDFD                  	call	UseLine
 17487 00001ABC A1[439E]                	mov	ax,[FileCnt]		; AX = # files found
 17488                                  
 17489                                  ;	DisplayTotals uses this entry point.
 17490                                  ;
 17491                                  DisplayCntSiz:
 17492                                  ;	AX = # files
 17493                                  ;	FileSiz = dword total size of files
 17494                                  
 17495 00001ABF A3[3CA1]                	mov	[Dir_Num],ax		; load # files
 17496 00001AC2 BA[3392]                	mov	dx,dirmes_ptr		; DX = ptr to message block
 17497 00001AC5 E8653A                  	call	std_printf		; "nnn File(s)"
 17498                                  
 17499 00001AC8 BA[2494]                	mov	dx,bytes_ptr
 17500 00001ACB E85F3A                  	call	std_printf		; "nnn bytes",cr,lf
 17501                                  	; 19/02/2023
 17502                                  	;call	UseLine
 17503                                  ;dtrRet:
 17504                                  	;retn
 17505                                  
 17506                                  	; 19/02/2023
 17507 00001ACE E9E8FD                  	jmp	UseLine
 17508                                  
 17509                                  ; ---------------------------------------------------------------------------
 17510                                  
 17511                                  ;***	DisplayWide - display filename in wide format
 17512                                  ;
 17513                                  ;	ENTRY	BX = offset of entry in TPA buffer
 17514                                  ;
 17515                                  ;	EXIT	nothing
 17516                                  ;
 17517                                  ;	USED	AX,CX,DX,SI,DI
 17518                                  ;
 17519                                  ;	EFFECTS
 17520                                  ;
 17521                                  ;	  Name.ext is displayed. Cursor left at end of field (padded
 17522                                  ;	  with blanks). Subdirectory files are displayed as [name.ext].
 17523                                  
 17524                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17525                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:198Ah
 17526                                  
 17527                                  DisplayWide:
 17528 00001AD1 1E                      	push	ds			; save TRANGROUP seg addr
 17529 00001AD2 8E1E[179E]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 17530                                  	;assume	ds:nothing
 17531                                  
 17532                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 17533                                  	;test	byte [bx+EntryStruc.fileattr],10h
 17534 00001AD6 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 17535 00001ADA 7405                    	jz	short dw1		; not a subdirectory file
 17536 00001ADC B05B                    	mov	al,'['
 17537 00001ADE E86E08                  	call	PRINT_CHAR		; prefix subdirectory
 17538                                  dw1:	
 17539 00001AE1 E8FFFD                  	call	DisplayDotForm		; display name.ext
 17540                                  
 17541                                  ;	DX = # chars displayed in name.ext
 17542                                  
 17543                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 17544                                  	;test	byte [bx+EntryStruc.fileattr],10h
 17545 00001AE4 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 17546 00001AE8 7405                    	jz	short dw2		; not a subdirectory file
 17547 00001AEA B05D                    	mov	al,']'
 17548 00001AEC E86008                  	call	PRINT_CHAR		; postfix subdirectory
 17549                                  dw2:
 17550                                  ;	Pad field with blanks.
 17551                                  
 17552                                  	;mov	cx,size filename + size fileext + 1
 17553 00001AEF B90C00                  	mov	cx,12 ; 8+3+1
 17554                                  					; CX = field size
 17555 00001AF2 29D1                    	sub	cx,dx			; CX = # pad char's
 17556 00001AF4 E307                    	jcxz	dwDone
 17557 00001AF6 B020                    	mov	al,' '
 17558                                  dw3:	
 17559 00001AF8 E85408                  	call	PRINT_CHAR
 17560 00001AFB E2FB                    	loop	dw3
 17561                                  dwDone:	
 17562 00001AFD 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 17563                                  	;assume	ds:TRANGROUP
 17564 00001AFE C3                      	retn
 17565                                  
 17566                                  ; ---------------------------------------------------------------------------
 17567                                  
 17568                                  ;***	GetDriveLtr - get target drive letter
 17569                                  ;
 17570                                  ;	ENTRY	FCB contains drive #
 17571                                  ;
 17572                                  ;	EXIT	AX = "d:"
 17573                                  ;
 17574                                  ;	USED	nothing
 17575                                  
 17576                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17577                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19D8h
 17578                                  GetDriveLtr:
 17579 00001AFF A05C00                  	mov	al,[FCB] ; 5Ch	; AL = target drive #
 17580 00001B02 08C0                    	or	al,al
 17581 00001B04 7505                    	jnz	short gdl1	; not current drive default, skip ahead
 17582 00001B06 A0[299E]                	mov	al,[CURDRV]	; AL = current drive #
 17583 00001B09 FEC0                    	inc	al		; AL = 1-based drive #
 17584                                  gdl1:	
 17585 00001B0B 0440                    	add	al,'A'-1 ; 40h	; AL = target drive letter
 17586 00001B0D B43A                    	mov	ah,':'		; AX = "d:"
 17587 00001B0F C3                      	retn
 17588                                  
 17589                                  ; ---------------------------------------------------------------------------
 17590                                  
 17591                                  ;***	SetupParamError - set up for Std_EPrintf parameter parse error message
 17592                                  ;
 17593                                  ;	Do for our /O and /A string parsers what Parse_With_Msg does
 17594                                  ;	for system parser calls. Set up a message substitution block,
 17595                                  ;	etc. for invalid value strings. I copied the procedure from
 17596                                  ;	Setup_Parse_Error_Msg.
 17597                                  ;
 17598                                  ;	ENTRY	BX = ptr to system parser result buffer (contains ptr to str)
 17599                                  ;		
 17600                                  ;
 17601                                  ;	EXIT	AX = system parser error return code for bad param format
 17602                                  ;		DX = ptr to message description block for Std_EPrintf
 17603                                  ;
 17604                                  ;	USED	SI
 17605                                  ;
 17606                                  ;	EFFECTS
 17607                                  ;
 17608                                  ;	  Msg_Disp_Class = parse error message class
 17609                                  ;	  Message block (see DX) is set up for parse error message
 17610                                  
 17611                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17612                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19E9h
 17613                                  SetupParamError:
 17614 00001B10 B80900                  	mov	ax,9			; parse error #
 17615 00001B13 C606[F191]02            	mov	byte [msg_disp_class],parse_msg_class
 17616                                  	;mov	byte [msg_disp_class],2
 17617 00001B18 A3[F391]                	mov	[extend_buf_ptr],ax
 17618                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17619 00001B1B 8B7704                  	mov	si,[bx+4]
 17620 00001B1E 8936[37A1]              	mov	[string_ptr_2],si
 17621 00001B22 C606[F591]01            	mov	byte [extend_buf_sub],one_subst
 17622                                  	;mov	byte [extend_buf_sub],1
 17623 00001B27 BA[F391]                	mov	dx,extend_buf_ptr
 17624 00001B2A C3                      	retn
 17625                                  
 17626                                  ; ---------------------------------------------------------------------------
 17627                                  
 17628                                  ;***	ZeroTotals - zero grand total file count, size
 17629                                  ;
 17630                                  ;	ENTRY	nothing
 17631                                  ;
 17632                                  ;	EXIT	nothing
 17633                                  ;
 17634                                  ;	USED	AX
 17635                                  ;
 17636                                  ;	EFFECTS
 17637                                  ;
 17638                                  ;	  FileCntTotal & FileSizTotal are zeroed.
 17639                                  ;
 17640                                  ;	NOTES
 17641                                  ;
 17642                                  ;	  FileCntTotal throuth csecUsedTotal must be together!
 17643                                  
 17644                                  ; 05/06/2023
 17645                                  ;ifdef DBLSPACE_HOOKS
 17646                                  ;csecSIZE EQU size csecUsed + size csecUsedDir + size csecUsedTotal
 17647                                  ;ccluSIZE EQU size ccluUsed + size ccluUsedDir + size ccluUsedTotal
 17648                                  ;endif
 17649                                  
 17650                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17651                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A13h
 17652                                  
 17653                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17654                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C08h	
 17655                                  ZeroTotals:
 17656 00001B2B BF[499E]                	mov	di,FileCntTotal
 17657                                  
 17658                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17659                                  	;;mov	cx,size FileCntTotal+size FileSizTotal
 17660                                  	;mov	cx,8
 17661                                  	;ifdef DBLSPACE_HOOKS
 17662                                  	;mov	cx,size FileCntTotal+size FileSizTotal+csecSIZE+ccluSIZE
 17663                                  	;endif
 17664 00001B2E B91A00                  	mov	cx,26
 17665                                  
 17666 00001B31 30C0                    	xor	al,al
 17667 00001B33 F3AA                    	rep	stosb
 17668 00001B35 C3                      	retn	
 17669                                  
 17670                                  ; ---------------------------------------------------------------------------
 17671                                  
 17672                                  ;***	CtrlCHandler - our own control-c handler
 17673                                  ;
 17674                                  ;	Make sure user's default directory gets restored. See notes
 17675                                  ;	at InstallCtrlCHandler.
 17676                                  ;
 17677                                  ;	ENTRY	control-c
 17678                                  ;
 17679                                  ;	EXIT	to OldCtrlCHandler
 17680                                  ;
 17681                                  ;	USED	DS,flags
 17682                                  ;
 17683                                  ;	EFFECTS
 17684                                  ;
 17685                                  ;	  Restore user's default directory.
 17686                                  ;
 17687                                  ;	NOTES
 17688                                  ;
 17689                                  ;	  This handler is only installed after calling PathCrunch,
 17690                                  ;	  which sets UserDir1, so the restoration will work.
 17691                                  ;
 17692                                  ;	  The original control-c vector will be restored, whether
 17693                                  ;	  or not this one is invoked, in the HeadFix routine.
 17694                                  
 17695                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17696                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A1Eh
 17697                                  
 17698                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 17699                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C13h ; *
 17700                                  
 17701                                  CtrlCHandler:	;proc far
 17702                                  
 17703                                  ;SR;
 17704                                  ; Save all registers used: ds, dx, ax. I know ax is being used by the 
 17705                                  ;CtrlC handler, am not sure about ds & dx. Save them to be safe
 17706                                  ;
 17707 00001B36 1E                      	push	ds
 17708 00001B37 0E                      	push	cs
 17709 00001B38 1F                      	pop	ds			; DS = TRANGROUP seg addr
 17710 00001B39 50                      	push	ax
 17711 00001B3A 53                      	push	bx ; *
 17712 00001B3B 52                      	push	dx
 17713 00001B3C E8A101                  	call	CloseCVF ; * 		; close CVF file if open
 17714 00001B3F E89E0E                  	call	RestUDir		; restore user's default directory
 17715 00001B42 5A                      	pop	dx
 17716 00001B43 5B                      	pop	bx ; *
 17717 00001B44 58                      	pop	ax
 17718 00001B45 1F                      	pop	ds
 17719 00001B46 2EFF2E[5BAA]            	jmp	far [cs:OldCtrlCHandler]
 17720                                  					; go to previous int 23 handler
 17721                                  
 17722                                  ; ---------------------------------------------------------------------------
 17723                                  
 17724                                  ;M010;start
 17725                                  ;***	LowerCase - convert ASCII character in AL to lowercase
 17726                                  ;
 17727                                  ;	ENTRY	AL = character to be displayed
 17728                                  ;
 17729                                  ;	EXIT	AL is lowercase
 17730                                  ;
 17731                                  ;	USED	nothing
 17732                                  
 17733                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17734                                  LowerCase:
 17735 00001B4B 3C41                    	cmp	al,'A'		; ensure AL is in range 'A'-'Z'
 17736 00001B4D 7206                    	jb	short lcRet
 17737 00001B4F 3C5A                    	cmp	al,'Z'
 17738 00001B51 7702                    	ja	short lcRet
 17739                                  
 17740 00001B53 0C20                    	or	al,20h		; convert to ASCII lowercase (UpperCase+32)-->LowerCase
 17741                                  lcRet:
 17742 00001B55 C3                      	retn
 17743                                  
 17744                                  ; ---------------------------------------------------------------------------
 17745                                  
 17746                                  ;***	LowercaseString - convert ASCIIZ string at DS:SI to lowercase
 17747                                  ;
 17748                                  ;	ENTRY	DS:SI points to start of ASCIIZ string
 17749                                  ;		ES = DS
 17750                                  ;
 17751                                  ;	EXIT	nothing
 17752                                  ;	
 17753                                  ;	USED	AL,SI
 17754                                  
 17755                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17756                                  LowercaseString:
 17757 00001B56 57                      	push	di			; save di
 17758 00001B57 89F7                    	mov	di,si			; ES:DI --> ASCIIZ string
 17759 00001B59 FC                      	cld
 17760                                  NextChar: 
 17761 00001B5A AC                      	lodsb				; get character from string into al
 17762 00001B5B 08C0                    	or	al,al			; are we at end of string?
 17763 00001B5D 7406                    	jz	short EndOfString
 17764                                  
 17765 00001B5F E8E9FF                  	call	LowerCase		; convert character to lowercase
 17766 00001B62 AA                      	stosb				; store character back into buffer
 17767 00001B63 EBF5                    	jmp	short NextChar		; repeat until end of string
 17768                                  
 17769                                  EndOfString:
 17770 00001B65 5F                      	pop	di			; restore di
 17771 00001B66 C3                      	retn
 17772                                  
 17773                                  ;M010;end
 17774                                  
 17775                                  
 17776                                  ; 08/06/2023
 17777                                  ; ---------------------------------------------------------------------------
 17778                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 17779                                  ; -----------------------------------------
 17780                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 17781                                  ; ---------------------------------------------------------------------------
 17782                                  
 17783                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17784                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C44h
 17785                                  screen_f_set:
 17786                                  	; set dir display parameters depending on screen width (# of columns)
 17787 00001B67 1E                      	push	ds
 17788 00001B68 B84000                  	mov	ax,40h
 17789 00001B6B 8ED8                    	mov	ds,ax
 17790 00001B6D 833E4A0028              	cmp	word [4Ah],40	; Check ROMBIOS DATA colums per row
 17791                                  				; value (80 or 40)
 17792 00001B72 1F                      	pop	ds
 17793 00001B73 7527                    	jnz	short columns_80 ; 80 columns per line (video mode 3)
 17794 00001B75 8026[B693]BF            	and	byte [screen_f_1],0BFh ; ~40h
 17795 00001B7A C706[B793]0A0A          	mov	word [screen_f_2],0A0Ah ; 10 bytes (file size field)
 17796 00001B80 8026[3D92]BF            	and	byte [screen_f_3],0BFh
 17797 00001B85 8026[2E94]BF            	and	byte [screen_f_4],0BFh
 17798 00001B8A C706[2F94]0A0A          	mov	word [screen_f_5],0A0Ah ; 10 bytes (file size field)
 17799 00001B90 8026[4B92]BF            	and	byte [screen_f_6],0BFh
 17800 00001B95 C706[4C92]1C1C          	mov	word [screen_f_7],1C1Ch ; 28 bytes (free bytes field)
 17801                                  	;jmp	short screen_f_set_retn
 17802 00001B9B C3                      	retn
 17803                                  columns_80:
 17804 00001B9C 800E[B693]40            	or	byte [screen_f_1],40h
 17805 00001BA1 C706[B793]0E0E          	mov	word [screen_f_2],0E0Eh ; 14 bytes (file size field)
 17806 00001BA7 800E[3D92]40            	or	byte [screen_f_3],40h
 17807 00001BAC 800E[2E94]40            	or	byte [screen_f_4],40h
 17808 00001BB1 C706[2F94]0E0E          	mov	word [screen_f_5],0E0Eh ; 14 bytes (file size field)
 17809 00001BB7 800E[4B92]40            	or	byte [screen_f_6],40h
 17810 00001BBC C706[4C92]2020          	mov	word [screen_f_7],2020h ; 32 bytes (free bytes field)
 17811                                  screen_f_set_retn:
 17812 00001BC2 C3                      	retn
 17813                                  
 17814                                  ;============================================================================
 17815                                  ; CRATIO.ASM, MSDOS 6.0, 1992
 17816                                  ;============================================================================
 17817                                  ; 08/06/2023 - Retro DOS v4.2
 17818                                  
 17819                                  ; The code to calculate compression ratios requires access to the drive's
 17820                                  ; (DOS) FAT and MagicDrv FAT regions.  Two buffers are used (one for each
 17821                                  ; FAT type).  pbufDOSFAT and pbufMDFAT contain the offset to the buffers,
 17822                                  ; segFATBuf contains the segment (both buffers are in the same segment).
 17823                                  ; The buffers are of variable size: cFATEntries contains the size of the
 17824                                  ; buffers in terms of the number of FAT entries they can contain.
 17825                                  
 17826                                  ; ---------------------------------------------------------------------------
 17827                                  
 17828                                  ;***	OpenCVF - open Compressed Volume File for compression ratio report
 17829                                  ;
 17830                                  ;	ENTRY
 17831                                  ;		FCB setup with drive for DIR
 17832                                  ;
 17833                                  ;	EXIT	If successful, CY clear, CVF file open, fhCVF has file handle,
 17834                                  ;		szCVF has \0 terminated CVF file name, MDBPB loaded.
 17835                                  ;
 17836                                  ;		If unsuccessful, CY set
 17837                                  ;
 17838                                  ;	USED	AX, BX, CX, DX, SI, DI
 17839                                  
 17840                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17841                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1CA1h
 17842                                  OpenCVF:
 17843 00001BC3 B8FFFF                  	mov	ax,-1
 17844 00001BC6 A3[639E]                	mov	[fhCVF],ax		;indicate CVF not open
 17845 00001BC9 A3[B99E]                	mov	[entInBuf],ax		;  and no FAT entries in buffers
 17846                                  
 17847 00001BCC 8A165C00                	mov	dl,[FCB] ; mov dl,5Ch	;target drive of DIR cmd
 17848 00001BD0 08D2                    	or	dl,dl			;default drive?
 17849 00001BD2 7404                    	jz	short ocvf_default
 17850 00001BD4 FECA                    	dec	dl			;no, from 1=A to 0=A
 17851 00001BD6 EB04                    	jmp	short ocvf_swap_info
 17852                                  
 17853                                  ocvf_default:
 17854 00001BD8 8A16[299E]              	mov	dl,[CURDRV]		;0=A, 1=B, ...
 17855                                  
 17856                                  ocvf_swap_info:
 17857 00001BDC B8114A                  	mov	ax,4A11h ; multMagicDrv	;magicdrv Int 2Fh multiplex ID
 17858 00001BDF BB0100                  	mov	bx,1	 ; MD_DRIVE_MAP	;get drive swap info
 17859 00001BE2 CD2F                    	int	2fh
 17860                                  
 17861 00001BE4 09C0                    	or	ax,ax			;0 if okay
 17862 00001BE6 7573                    	jnz	short ocvf_error
 17863                                  
 17864 00001BE8 F6C380                  	test	bl,80h 			;80h set if compressed volume
 17865 00001BEB 746E                    	jz	short ocvf_error
 17866                                  
 17867 00001BED 80E37F                  	and	bl,7Fh 			;bl = host drive, bh = seq #
 17868                                  
 17869                                  	; The CVF may have been mounted from a swapped host drive, in which
 17870                                  	; case the host drive returned in BL is the original host (now
 17871                                  	; swapped with a CVF).	Make a second drive swap info call on the
 17872                                  	; returned host to see if it must be accessed by a different drive
 17873                                  	; letter.
 17874                                  
 17875 00001BF0 53                      	push	bx
 17876 00001BF1 52                      	push	dx			;save dl, orig drive letter
 17877                                  
 17878 00001BF2 B8114A                  	mov	ax,4A11h ; mov ax,multMagicDrv
 17879 00001BF5 88DA                    	mov	dl,bl
 17880 00001BF7 BB0100                  	mov	bx,1	 ; mov bx,MD_DRIVE_MAP
 17881 00001BFA CD2F                    	int	2fh
 17882                                  
 17883 00001BFC 5A                      	pop	dx
 17884 00001BFD 59                      	pop	cx			;bx from 1st drive swap info call
 17885                                  
 17886 00001BFE 09C0                    	or	ax,ax			;0 if okay
 17887 00001C00 7559                    	jnz	short ocvf_error
 17888                                  
 17889 00001C02 80E37F                  	and	bl,7Fh
 17890 00001C05 87D9                    	xchg	bx,cx			;bx = 1st, cx = 2nd swap results
 17891                                  
 17892 00001C07 38CA                    	cmp	dl,cl			;2nd swap info call return orig drive?
 17893 00001C09 7402                    	je	short ocvf_got_host	;yes, 1st swap info call returned host
 17894                                  
 17895 00001C0B 88CB                    	mov	bl,cl			;no, use swapped host, orig seq #
 17896                                  ocvf_got_host:
 17897                                  	; Build the filename of the Compressed Volume File
 17898                                  
 17899                                  	;mov	di,offset TRANGROUP:szCVF
 17900                                  					;CVF name buffer
 17901 00001C0D BF[659E]                	mov	di,szCVF
 17902                                  
 17903 00001C10 88D8                    	mov	al,bl
 17904 00001C12 0441                    	add	al,'A'
 17905 00001C14 B43A                    	mov	ah,':'
 17906 00001C16 FC                      	cld
 17907 00001C17 AB                      	stosw				; drive:
 17908                                  
 17909                                  	;mov	si,offset TRANGROUP:sCVFRoot
 17910                                  					; \name.
 17911 00001C18 BE[2699]                	mov	si,sCVFRoot	; "\DBLSPACE"
 17912                                  	;mov	cx,cbCVFRoot
 17913 00001C1B B90A00                  	mov	cx,10
 17914 00001C1E F3A4                    	rep	movsb
 17915                                  
 17916 00001C20 83C703                  	add	di,3			; point past extension
 17917 00001C23 30C0                    	xor	al,al
 17918 00001C25 FD                      	std
 17919 00001C26 AA                      	stosb				; null terminate
 17920                                  
 17921 00001C27 88F8                    	mov	al,bh			; seq #
 17922 00001C29 B30A                    	mov	bl,10
 17923                                  	;mov	cx,3			; 3 digit ext/seq #
 17924 00001C2B B103                    	mov	cl,3
 17925                                  ;@@:
 17926 00001C2D 30E4                    ocvf_1:	xor	ah,ah			; convert seq # to ascii
 17927 00001C2F F6F3                    	div	bl			;   and store as CVF extension
 17928 00001C31 80C430                  	add	ah,'0'
 17929 00001C34 86E0                    	xchg	ah,al
 17930 00001C36 AA                      	stosb
 17931 00001C37 88E0                    	mov	al,ah
 17932                                  	;loop	@b
 17933 00001C39 E2F2                    	loop	ocvf_1
 17934                                  
 17935 00001C3B FC                      	cld
 17936                                  
 17937                                  	; Now open the Compressed Volume File
 17938                                  
 17939                                  	; 08/06/2023
 17940                                  	; MSDOS 6.22 COMMAND.COM code only !
 17941                                  	;;;
 17942 00001C3C BF[659E]                	mov	di,szCVF ; *
 17943 00001C3F C745045256              	mov	word [di+4],5652h ; 'RV' (DRVSPACE)
 17944 00001C44 B8003D                  	mov	ax,3D00h
 17945                                  	;mov	dx,szCVF
 17946 00001C47 89FA                    	mov	dx,di ; *
 17947 00001C49 CD21                    	int	21h     ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17948                                  			; DS:DX -> ASCIZ filename
 17949                                  			; AL = access mode
 17950                                  			; 0 - read
 17951 00001C4B 7310                    	jnb     short ocvf_2
 17952 00001C4D C74504424C              	mov	word [di+4],4C42h ; 'BL' (DBLSPACE)
 17953                                  	;;;
 17954                                  
 17955                                  	;mov	ax,(OPEN shl 8) or 00h 	;compatibility mode/read access
 17956 00001C52 B8003D                  	mov	ax,3D00h
 17957                                  	;;mov	dx,offset TRANGROUP:szCVF
 17958                                  	;mov	dx,szCVF
 17959 00001C55 89FA                    	mov	dx,di ; *
 17960 00001C57 CD21                    	int	21h
 17961                                  	;jc	short ocvf_error
 17962                                  	; 18/06/2023
 17963 00001C59 7302                    	jnc	short ocvf_2
 17964                                  ocvf_error:	; 18/06/2023
 17965 00001C5B F9                      	stc				;indicate failure
 17966 00001C5C C3                      	retn
 17967                                  ocvf_2:
 17968 00001C5D A3[639E]                	mov	[fhCVF],ax		; success, save CVF file handle
 17969                                  
 17970                                  	; Read the extended MagicDrv BPB
 17971                                  
 17972 00001C60 89C3                    	mov	bx,ax
 17973                                  	;mov	ah,READ
 17974 00001C62 B43F                    	mov	ah,3Fh
 17975                                  	;mov	cx,size MD_BPB
 17976 00001C64 B94000                  	mov	cx,64
 17977                                  	;mov	dx,offset TRANGROUP:MDBPB
 17978 00001C67 BA[759E]                	mov	dx,MDBPB
 17979 00001C6A CD21                    	int	21h
 17980 00001C6C 7204                    	jc	short ocvf_error1
 17981                                  
 17982 00001C6E 39C8                    	cmp	ax,cx			; get it all?
 17983 00001C70 7405                    	je	short ocvf_pick_cluster_size
 17984                                  					; yes...
 17985                                  ocvf_error1:
 17986 00001C72 E86B00                  	call	CloseCVF
 17987                                  	; 18/06/2023
 17988                                  ;ocvf_error:
 17989 00001C75 F9                      	stc				;indicate failure
 17990                                  	;jmp	short ocvf_ret
 17991 00001C76 C3                      	retn
 17992                                  
 17993                                  	; Determine the cluster size to use for ratio calculation
 17994                                  
 17995                                  ocvf_pick_cluster_size:
 17996 00001C77 803E[B69E]00            	cmp	byte [fUseHostSize],0 	; user want Host drive cluster size?
 17997 00001C7C 7411                    	je	short ovcf_use_CVF_size	; no, use CVF cluster size
 17998                                  
 17999                                  	;mov	ah,Get_Drive_Data	; get the host drive cluster size
 18000 00001C7E B41C                    	mov	ah,1Ch
 18001 00001C80 8A16[659E]              	mov	dl,[szCVF]
 18002                                  	;sub	dl,40h	
 18003 00001C84 80EA40                  	sub	dl,'A'-1		; 1 = A, 2 = B, ...
 18004 00001C87 1E                      	push	ds
 18005 00001C88 CD21                    	int	21h
 18006 00001C8A 1F                      	pop	ds
 18007                                  
 18008 00001C8B 3CFF                    	cmp	al,0FFh			; host drive cluster size in AL if okay,
 18009 00001C8D 7503                    	jne	short ovcf_set_size	;   failed = 0FFh
 18010                                  
 18011                                  ovcf_use_CVF_size:
 18012                                  	;mov	al,[MDBPB.dos_bpb.csecPerClu]
 18013 00001C8F A0[829E]                	mov	al,[MDBPB+0Dh]		; using CVF cluster size
 18014                                  
 18015                                  ovcf_set_size:
 18016 00001C92 A2[B59E]                	mov	[csecPerCluster],al
 18017                                  
 18018                                  	; Lastly, setup the FAT buffers
 18019                                  ocvf_set_buf:
 18020 00001C95 A1[369E]                	mov	ax,[BYTCNT]		; if >= 32k TPA space available,
 18021 00001C98 A3[389E]                	mov	[savBytCnt],ax		;   setup larger FAT buffers
 18022 00001C9B 3D0080                  	cmp	ax,32*1024  ; 8000h
 18023 00001C9E 7318                    	jae	short ocvf_big_buf
 18024                                  
 18025                                  	; small TPA, use small resident buffers
 18026                                  
 18027                                  	;mov	word ptr [cFATEntries],cRES_FAT_ENTRIES
 18028 00001CA0 C706[B79E]2000          	mov	word [cFATEntries],32 ; cRES_FAT_ENTRIES
 18029 00001CA6 8C1E[BB9E]              	mov	[segFATBuf],ds
 18030                                  	;mov	word ptr [pbufDOSFAT],offset TRANGROUP:bufDOSFAT
 18031                                  	;mov	word ptr [pbufMDFAT],offset TRANGROUP:bufMDFAT
 18032 00001CAA C706[BD9E][C19E]        	mov	word [pbufDOSFAT],bufDOSFAT
 18033 00001CB0 C706[BF9E][019F]        	mov	word [pbufMDFAT],bufMDFAT
 18034                                  	;jmp	short ocvf_success
 18035                                  	; 08/06/2023
 18036                                  	; cf = 1
 18037 00001CB6 F8                      	clc
 18038 00001CB7 C3                      	retn
 18039                                  
 18040                                  ocvf_big_buf:
 18041                                  	;mov	bx,cBIG_FAT_ENTRIES
 18042 00001CB8 BB0001                  	mov	bx,256
 18043 00001CBB 891E[B79E]              	mov	[cFATEntries],bx
 18044                                  
 18045 00001CBF D1E3                    	shl	bx,1			; 6 bytes per entry (2 for DOS FAT, 4 MD FAT)
 18046 00001CC1 89D9                    	mov	cx,bx			; entries * 2
 18047 00001CC3 D1E3                    	shl	bx,1
 18048 00001CC5 01CB                    	add	bx,cx			; bx = # entries * 6
 18049                                  
 18050 00001CC7 29D8                    	sub	ax,bx			; reduce TPA size by size of FAT buffers
 18051 00001CC9 2500FE                  	and	ax,0FE00h		; init code rounds BytCnt down to multiple of
 18052 00001CCC A3[369E]                	mov	[BYTCNT],ax		;   512 bytes -- a no-op with some buf sizes.
 18053                                  
 18054 00001CCF 8B1E[179E]              	mov	bx,[TPA]		; buffers in the TPA
 18055 00001CD3 891E[BB9E]              	mov	[segFATBuf],bx
 18056 00001CD7 A3[BD9E]                	mov	[pbufDOSFAT],ax		; DOS FAT buffer offset
 18057 00001CDA 01C8                    	add	ax,cx			;   + DOS FAT buffer size
 18058 00001CDC A3[BF9E]                	mov	[pbufMDFAT],ax 		;   = MD FAT buffer offset
 18059                                  	; 08/06/2023
 18060                                  	; cf = 0
 18061                                  ;ocvf_success:
 18062                                  	;clc				;indicate success
 18063                                  ocvf_ret:
 18064 00001CDF C3                      	retn
 18065                                  
 18066                                  ; ---------------------------------------------------------------------------
 18067                                  
 18068                                  ;***	CloseCVF - close Compressed Volume File
 18069                                  ;
 18070                                  ;	ENTRY	fhCVF has file handle
 18071                                  ;
 18072                                  ;	EXIT
 18073                                  ;
 18074                                  ;	USED	AX, BX, CX, DX
 18075                                  
 18076                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18077                                  CloseCVF:
 18078 00001CE0 8B1E[639E]              	mov	bx,[fhCVF]		; -1 unless file is open
 18079 00001CE4 83FBFF                  	cmp	bx,-1 ; 0FFFFh
 18080 00001CE7 7410                    	je	short ccvf_ret
 18081                                  
 18082                                  	;mov	ah,CLOSE
 18083 00001CE9 B43E                    	mov	ah,3Eh
 18084 00001CEB CD21                    	int	21h
 18085                                  
 18086 00001CED C706[639E]FFFF          	mov	word [fhCVF],-1 ; 0FFFFh ; don't try to close again
 18087                                  
 18088 00001CF3 A1[389E]                	mov	ax,[savBytCnt]		; 'deallocate' DOS & MD FAT buffers
 18089 00001CF6 A3[369E]                	mov	[BYTCNT],ax		;   by restoring old TPA byte count
 18090                                  ccvf_ret:
 18091 00001CF9 C3                      	retn
 18092                                  
 18093                                  ; ---------------------------------------------------------------------------
 18094                                  
 18095                                  ;***	CalcCompRatio - calculate file compression ratio
 18096                                  ;
 18097                                  ;	ENTRY	AX = starting cluster of file to get compression ratio of
 18098                                  ;
 18099                                  ;	EXIT	AX = compression ratio.  Example: a ratio of 2.7 to 1.0
 18100                                  ;		     will return AH = 02h & AL = 07h
 18101                                  ;		ccluUsed set to # DOS clusters used by file
 18102                                  ;		csecUsed set to # compressed sectors used by file
 18103                                  ;		ccluUsedDir, ccluUsedTotal, csecUsedDir, csecUsedTotal updated
 18104                                  ;	USED	none
 18105                                  
 18106                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18107                                  CalcCompRatio:
 18108 00001CFA 53                      	push	bx
 18109 00001CFB 51                      	push	cx
 18110 00001CFC 52                      	push	dx
 18111 00001CFD 06                      	push	es
 18112 00001CFE 8E06[BB9E]              	mov	es,[segFATBuf]		; es is pointer to FAT buffers
 18113                                  	;assume	es:nothing
 18114                                  
 18115 00001D02 31DB                    	xor	bx,bx			; zero count of sectors & clusters used
 18116 00001D04 891E[519E]              	mov	[ccluUsed],bx
 18117 00001D08 891E[579E]              	mov	[csecUsed],bx
 18118 00001D0C 891E[599E]              	mov	[csecUsed+2],bx
 18119                                  ccr_next:
 18120 00001D10 83F802                  	cmp	ax,2			; sanity check the DOS FAT value
 18121 00001D13 7250                    	jb	short ccr_screwy
 18122                                  
 18123 00001D15 83F8F0                  	cmp	ax,0FFF0h		; end of file?
 18124 00001D18 7352                    	jae	short ccr_eof
 18125                                  
 18126 00001D1A E84701                  	call	CheckFATBuffers 	; make sure buffers contain target
 18127 00001D1D 7246                    	jc	short ccr_screwy	;   FAT entries
 18128                                  
 18129 00001D1F E82901                  	call	GetMDFATEntry		; returns corresponding entry in BX:CX
 18130 00001D22 7241                    	jc	short ccr_screwy
 18131                                  
 18132 00001D24 D1E3                    	shl	bx,1			; used bit to CY
 18133 00001D26 733D                    	jnc	short ccr_screwy	; better be used!
 18134                                  
 18135 00001D28 88FD                    	mov	ch,bh			; save uncompressed count
 18136                                  
 18137 00001D2A D1E3                    	shl	bx,1			; get count into position
 18138 00001D2C 81E3000F                	and	bx,0F00h		; bh = count of compressed sectors used
 18139 00001D30 86FB                    	xchg	bh,bl			; bx = count
 18140 00001D32 43                      	inc	bx			; 0 - 15 means 1 - 16 used
 18141                                  
 18142 00001D33 011E[579E]              	add	[csecUsed],bx
 18143 00001D37 8316[599E]00            	adc	word [csecUsed+2],0
 18144                                  
 18145 00001D3C 89C2                    	mov	dx,ax			; save cluster # in dx
 18146                                  
 18147 00001D3E 88E8                    	mov	al,ch			; uncompressed count to al
 18148 00001D40 B103                    	mov	cl,3
 18149 00001D42 D2E8                    	shr	al,cl			; get uncompressed count into position
 18150 00001D44 83E00F                  	and	ax,000Fh		; ax = uncompressed count (0 - 15)
 18151 00001D47 4B                      	dec	bx			; bx = compressed count (0 - 15)
 18152 00001D48 39D8                    	cmp	ax,bx			; if the compressed cnt > uncompressed
 18153                                  	;jae	@f			;   fudge a little and use the larger
 18154 00001D4A 7302                    	jae	short ccr_1 ; jnb
 18155 00001D4C 89D8                    	mov	ax,bx
 18156                                  ;@@:	
 18157                                  ccr_1:
 18158 00001D4E 8A0E[B59E]              	mov	cl,[csecPerCluster]	; round up to the number of clusters
 18159 00001D52 30ED                    	xor	ch,ch			;   required for uncompressed
 18160 00001D54 01C8                    	add	ax,cx			;   sectors
 18161 00001D56 F6F1                    	div	cl
 18162 00001D58 30E4                    	xor	ah,ah
 18163 00001D5A 0106[519E]              	add	[ccluUsed],ax
 18164                                  
 18165 00001D5E 89D0                    	mov	ax,dx			; restore cluster #
 18166 00001D60 E8A900                  	call	GetDOSFATEntry		; retuns next DOS FAT entry in AX
 18167                                  	;jc	short ccr_screwy
 18168                                  	;jmp	short ccr_next
 18169                                  	; 08/06/2023
 18170 00001D63 73AB                    	jnc	short ccr_next
 18171                                  ccr_screwy:
 18172 00001D65 31C0                    	xor	ax,ax			; something screwy happened, set
 18173                                  					;   ratio to 0.0 and exit
 18174                                  ccr_ret:
 18175 00001D67 07                      	pop	es
 18176 00001D68 5A                      	pop	dx
 18177 00001D69 59                      	pop	cx
 18178 00001D6A 5B                      	pop	bx
 18179 00001D6B C3                      	retn
 18180                                  
 18181                                  	; Reached the end-of-file, now calculate the ratio as the
 18182                                  	; number of DOS sectors used / number of compressed sectors used.
 18183                                  
 18184                                  ccr_eof:
 18185 00001D6C A1[519E]                	mov	ax,[ccluUsed]
 18186 00001D6F 0106[539E]              	add	[ccluUsedDir],ax	; update cluster used totals
 18187 00001D73 0106[559E]              	add	[ccluUsedTotal],ax
 18188                                  
 18189 00001D77 8B0E[599E]              	mov	cx,[csecUsed+2]
 18190 00001D7B 8B1E[579E]              	mov	bx,[csecUsed]		; cx:bx = # compressed sectors used
 18191                                  
 18192 00001D7F 011E[5B9E]              	add	[csecUsedDir],bx	; update sector used totals
 18193 00001D83 110E[5D9E]              	adc	[csecUsedDir+2],cx
 18194 00001D87 011E[5F9E]              	add	[csecUsedTotal],bx
 18195 00001D8B 110E[619E]              	adc	[csecUsedTotal+2],cx
 18196                                  
 18197 00001D8F E80200                  	call	ComputeRatio		; ax=clusters used, cx:bx=sectors used
 18198                                  
 18199 00001D92 EBD3                    	jmp	short ccr_ret
 18200                                  
 18201                                  	; 08/06/2023
 18202                                  ;ccr_screwy:
 18203                                  ;	xor	ax,ax			; something screwy happened, set
 18204                                  ;					;   ratio to 0.0 and exit
 18205                                  ;ccr_ret:
 18206                                  ;	pop	es
 18207                                  ;	pop	dx
 18208                                  ;	pop	cx
 18209                                  ;	pop	bx
 18210                                  ;	retn
 18211                                  
 18212                                  ; ---------------------------------------------------------------------------
 18213                                  
 18214                                  ;***	ComputeRatio - calculate ratio of compressed sectors used to
 18215                                  ;		       (would be) DOS sectors used
 18216                                  ;
 18217                                  ;	Entry
 18218                                  ;		AX = DOS clusters used, cx:bx = compressed sectors used
 18219                                  ;	Exit
 18220                                  ;		ah = whole portion, al = tenths
 18221                                  ;
 18222                                  ;	Used	BX, CX, DX
 18223                                  
 18224                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18225                                  ComputeRatio:
 18226 00001D94 56                      	push	si
 18227 00001D95 57                      	push	di
 18228                                  
 18229 00001D96 89DE                    	mov	si,bx
 18230 00001D98 89CF                    	mov	di,cx			; save cx:bx in di:si
 18231                                  
 18232 00001D9A 8A1E[B59E]              	mov	bl,[csecPerCluster]
 18233 00001D9E 30FF                    	xor	bh,bh
 18234 00001DA0 F7E3                    	mul	bx			; dx:ax = # DOS sectors used
 18235 00001DA2 89F3                    	mov	bx,si			; restore bx
 18236                                  
 18237 00001DA4 E83800                  	call	Div32			; dx:ax = quotient, cx:bx = remainder
 18238                                  
 18239 00001DA7 50                      	push	ax			; save quotient
 18240                                  
 18241 00001DA8 89D8                    	mov	ax,bx			; if no remainder, tenths will be 0
 18242 00001DAA 09C8                    	or	ax,cx			;   which is in AX so skip following
 18243 00001DAC 7423                    	jz	short cr_got_tenths	;   (happens frequently)
 18244                                  
 18245                                  	; Multiply the reminder by 10, add half the divisor so result is
 18246                                  	; rounded up, and divide again to get tenths digit
 18247                                  
 18248 00001DAE 89C8                    	mov	ax,cx
 18249 00001DB0 31D2                    	xor	dx,dx
 18250 00001DB2 89D9                    	mov	cx,bx
 18251 00001DB4 BB0A00                  	mov	bx,10
 18252 00001DB7 F7E3                    	mul	bx
 18253 00001DB9 91                      	xchg	ax,cx
 18254 00001DBA F7E3                    	mul	bx
 18255 00001DBC 01CA                    	add	dx,cx			; dx:ax = remainder * 10
 18256                                  
 18257 00001DBE 89F9                    	mov	cx,di
 18258 00001DC0 89F3                    	mov	bx,si
 18259 00001DC2 D1E9                    	shr	cx,1
 18260 00001DC4 D1DB                    	rcr	bx,1			; cx:bx = 1/2 divisor
 18261 00001DC6 01D8                    	add	ax,bx
 18262 00001DC8 11CA                    	adc	dx,cx			; dx:ax = remainder * 10 + 1/2 divisor
 18263                                  
 18264 00001DCA 89F9                    	mov	cx,di
 18265 00001DCC 89F3                    	mov	bx,si
 18266                                  
 18267 00001DCE E80E00                  	call	Div32
 18268                                  
 18269                                  cr_got_tenths:
 18270 00001DD1 5B                      	pop	bx			; original quotient
 18271 00001DD2 88DC                    	mov	ah,bl
 18272                                  
 18273 00001DD4 3C0A                    	cmp	al,10			; if the tenths rounded up to the
 18274 00001DD6 7204                    	jb	short cr_exit 		;   next whole number, adjust the
 18275                                  					;   whole number part and 0 the
 18276 00001DD8 FEC4                    	inc	ah			;   tenths  (i.e. round 1.97 to 2.0)
 18277 00001DDA 30C0                    	xor	al,al
 18278                                  cr_exit:
 18279 00001DDC 5F                      	pop	di
 18280 00001DDD 5E                      	pop	si
 18281                                  
 18282 00001DDE C3                      	retn
 18283                                  
 18284                                  ; --------------------------------------------------------------------------- 
 18285                                  
 18286                                  ;***	Div32 - 32 bit divide for computing ratios
 18287                                  ;
 18288                                  ;	Entry	DX:AX = dividend, CX:BX = divisor
 18289                                  ;
 18290                                  ;	Exit	DX:AX = quotient, CX:BX = reminder
 18291                                  
 18292                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18293                                  Div32:
 18294 00001DDF E322                    	jcxz	d32_16bit		; differently if 16bit divisor
 18295                                  
 18296 00001DE1 56                      	push	si
 18297 00001DE2 57                      	push	di
 18298                                  
 18299                                  	; Brute force divide by subtraction. This is okay because worse case
 18300                                  	; the dividend will only be 16 times greater, and typically about 2
 18301                                  	; times
 18302                                  
 18303 00001DE3 31F6                    	xor	si,si
 18304 00001DE5 89F7                    	mov	di,si			; di:si is quotient
 18305                                  ;@@:
 18306                                  div32_1:
 18307 00001DE7 29D8                    	sub	ax,bx			; subtract divisor
 18308 00001DE9 19CA                    	sbb	dx,cx
 18309 00001DEB 7208                    	jc	short d32_too_far
 18310                                  
 18311 00001DED 83C601                  	add	si, 1			; accumulate quotient
 18312 00001DF0 83D700                  	adc	di, 0
 18313                                  	;jmp	short @b
 18314 00001DF3 EBF2                    	jmp	short div32_1
 18315                                  
 18316                                  d32_too_far:
 18317 00001DF5 01D8                    	add	ax,bx			; fix the last subtraction
 18318 00001DF7 11CA                    	adc	dx,cx
 18319                                  
 18320 00001DF9 89F9                    	mov	cx,di
 18321 00001DFB 89F3                    	mov	bx,si			; dx:ax = remainder, cx:bx = quoient
 18322                                  
 18323 00001DFD 93                      	xchg	ax,bx
 18324 00001DFE 87D1                    	xchg	dx,cx			; dx:ax = quoient, cx:bx = remainder
 18325                                  
 18326 00001E00 5F                      	pop	di
 18327 00001E01 5E                      	pop	si
 18328                                  
 18329 00001E02 C3                      	retn
 18330                                  
 18331                                  d32_16bit:
 18332 00001E03 F7F3                    	div	bx			; divide dx:ax by bx
 18333                                  
 18334 00001E05 89D3                    	mov	bx,dx			; remainder to cx:bx
 18335 00001E07 31D2                    	xor	dx,dx			; quotient to dx:ax
 18336 00001E09 89D1                    	mov	cx,dx
 18337 00001E0B C3                      	retn
 18338                                  
 18339                                  ; --------------------------------------------------------------------------- 
 18340                                  
 18341                                  ;***	GetDOSFATEntry - returns next cluster in file's FAT chain
 18342                                  ;
 18343                                  ;	Entry	AX = current cluster number
 18344                                  ;		ES = segment of FAT buffer
 18345                                  ;		Entry should be in FAT buffer
 18346                                  ;
 18347                                  ;	Exit	AX = next cluster number
 18348                                  ;		CY set if error
 18349                                  ;
 18350                                  ;	Uses	BX
 18351                                  
 18352                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18353                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1EF2h
 18354                                  GetDOSFATEntry:
 18355 00001E0C 2B06[B99E]              	sub	ax,[entInBuf]		; calc entry # in buffer
 18356 00001E10 7212                    	jc	short gdf_ret 		; CY already set for error
 18357                                  
 18358 00001E12 89C3                    	mov	bx,ax
 18359                                  
 18360                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 18361 00001E14 803E[B29E]00            	cmp	byte [MDBPB+3Dh],0
 18362 00001E19 750A                    	jnz	short gdf_12		; go do 12
 18363                                  
 18364 00001E1B D1E3                    	shl	bx,1			; offset = entry * 2
 18365 00001E1D 031E[BD9E]              	add	bx,[pbufDOSFAT]
 18366 00001E21 268B07                  	mov	ax,[es:bx]
 18367                                  	; 08/06/2023
 18368                                  	; cf = 0
 18369                                  ;gdf_success:
 18370                                  	;clc				; success
 18371                                  gdf_ret:
 18372 00001E24 C3                      	retn
 18373                                  
 18374                                  gdf_12:
 18375 00001E25 D1EB                    	shr	bx,1
 18376 00001E27 01C3                    	add	bx,ax			; offset to entry = entry * 1.5
 18377 00001E29 031E[BD9E]              	add	bx,[pbufDOSFAT]
 18378                                  
 18379                                  ;	ES:BX points to the word containing the desired 12 bit FAT entry.
 18380                                  ;	For odd entries, the upper 12 bits are valid, for even entries
 18381                                  ;	the low 12 bits are valid.  odd: OOOx  even: xEEE
 18382                                  
 18383 00001E2D A801                    	test	al,1			; is current entry odd?
 18384                                  
 18385 00001E2F 268B07                  	mov	ax,[es:bx]		; word with FAT entry
 18386 00001E32 7505                    	jnz	short gdf_odd
 18387                                  
 18388 00001E34 25FF0F                  	and	ax,0FFFh		; keep low 12 bits for even
 18389 00001E37 EB08                    	jmp	short gdf_testEOF
 18390                                  
 18391                                  gdf_odd:
 18392 00001E39 89CB                    	mov	bx,cx			; (save cx in bx)
 18393 00001E3B B104                    	mov	cl,4
 18394 00001E3D D3E8                    	shr	ax,cl			; upper 12 bits for odd
 18395 00001E3F 89D9                    	mov	cx,bx			; (restore cx)
 18396                                  
 18397                                  gdf_testEOF:
 18398 00001E41 3DF00F                  	cmp	ax,0FF0h		; valid entry?
 18399                                  	;jb	short gdf_success
 18400 00001E44 F5                      	cmc	; cf = 1 <--> cf = 0
 18401 00001E45 73DD                    	jnc	short gdf_ret	
 18402                                  
 18403 00001E47 80CCF0                  	or	ah,0F0h			; caller expects 16 bit special values
 18404                                  	;jmp	short gdf_success
 18405                                  	; cf = 0
 18406 00001E4A C3                      	retn
 18407                                  
 18408                                  ; --------------------------------------------------------------------------- 
 18409                                  
 18410                                  ;***	GetMDFATEntry - returns requested MD FAT entry
 18411                                  ;
 18412                                  ;	Entry	AX = current DOS cluster number
 18413                                  ;		ES = segment of FAT buffer
 18414                                  ;		Entry should be in FAT buffer
 18415                                  ;
 18416                                  ;	Exit	BX:CX = corresponding MD FAT entry
 18417                                  ;		CY set if error
 18418                                  ;
 18419                                  ;	Uses	None
 18420                                  
 18421                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18422                                  GetMDFATEntry:
 18423 00001E4B 89C3                    	mov	bx,ax
 18424 00001E4D 2B1E[B99E]              	sub	bx,[entInBuf]		; calc entry # in buffer
 18425 00001E51 7210                    	jc	short gmf_ret 		; CY already set for error return
 18426                                  
 18427 00001E53 D1E3                    	shl	bx,1
 18428 00001E55 D1E3                    	shl	bx,1			; * 4 bytes per MDFAT entry
 18429                                  
 18430 00001E57 031E[BF9E]              	add	bx,[pbufMDFAT]
 18431 00001E5B 268B0F                  	mov	cx,[es:bx]
 18432 00001E5E 268B5F02                	mov	bx,[es:bx+2]
 18433                                  
 18434 00001E62 F8                      	clc
 18435                                  gmf_ret:
 18436 00001E63 C3                      	retn
 18437                                  
 18438                                  ; --------------------------------------------------------------------------- 
 18439                                  
 18440                                  ;***	CheckFATBuffers - check that target FAT entry is in FAT buffers.  If
 18441                                  ;			  not, fill the buffers starting with the requested
 18442                                  ;			  entry.
 18443                                  ;
 18444                                  ;	ENTRY	AX = FAT entry #
 18445                                  ;		ES = segment of FAT buffers
 18446                                  ;
 18447                                  ;	EXIT	FAT buffers contain target entry, or CY set if error
 18448                                  ;		entInBuf updated
 18449                                  ;
 18450                                  ;	USED	BX
 18451                                  
 18452                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18453                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1F4Bh
 18454                                  
 18455                                  CheckFATBuffers:
 18456 00001E64 89C3                    	mov	bx,ax
 18457 00001E66 2B1E[B99E]              	sub	bx,[entInBuf]
 18458 00001E6A 7208                    	jb	short cfb_load_fat
 18459                                  
 18460 00001E6C 2B1E[B79E]              	sub	bx,[cFATEntries]
 18461 00001E70 7302                    	jae	short cfb_load_fat ; jnb
 18462                                  
 18463 00001E72 F8                      	clc
 18464 00001E73 C3                      	retn
 18465                                  
 18466                                  	; Desired entry isn't in the FAT buffers, reload the buffers to
 18467                                  	; include it
 18468                                  
 18469                                  cfb_load_fat:
 18470 00001E74 50                      	push	ax
 18471 00001E75 51                      	push	cx
 18472 00001E76 52                      	push	dx
 18473                                  
 18474                                  	; Start with the DOS FAT buffer
 18475                                  
 18476 00001E77 31C9                    	xor	cx,cx			; zero high offset to FAT file position
 18477                                  
 18478                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 18479 00001E79 803E[B29E]00            	cmp	byte [MDBPB+3Dh],0
 18480 00001E7E 7509                    	jnz	short cfb_12		; go do 12
 18481                                  
 18482 00001E80 A3[B99E]                	mov	[entInBuf],ax		; this entry is first
 18483                                  
 18484 00001E83 D1E0                    	shl	ax,1			; 2 bytes per cluster #
 18485 00001E85 D1D1                    	rcl	cx,1			; cx:ax = offset to FAT entry
 18486                                  
 18487 00001E87 EB0B                    	jmp	short cfb_common
 18488                                  
 18489                                  cfb_12:
 18490                                  	;and	al,not 1 ; 0FEh		; start with even # entry
 18491 00001E89 24FE                    	and	al,~1
 18492 00001E8B A3[B99E]                	mov	[entInBuf],ax
 18493                                  
 18494 00001E8E 89C3                    	mov	bx,ax
 18495 00001E90 D1EB                    	shr	bx,1
 18496 00001E92 01D8                    	add	ax,bx			; ax = offset to FAT entry
 18497                                  					;      (entry # * 1.5)
 18498                                  cfb_common:
 18499 00001E94 89C3                    	mov	bx,ax			; cx:bx = offset to FAT entry
 18500                                  
 18501                                  	;mov	ax,[MDBPB.csecMDReserved] ; # magicDrv reserved sectors
 18502 00001E96 A1[9C9E]                	mov	ax,[MDBPB+27h]
 18503                                  	;add	ax,[MDBPB.dos_bpb.csecReserved]
 18504 00001E99 0306[839E]              	add	ax,[MDBPB+0Eh]
 18505                                  
 18506                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 18507 00001E9D F726[809E]              	mul	word [MDBPB+0Bh]	; DX:AX = DOS FAT file origin
 18508 00001EA1 01D8                    	add	ax,bx
 18509 00001EA3 11CA                    	adc	dx,cx			; DX:AX = file offset to read from
 18510                                  
 18511 00001EA5 8B0E[B79E]              	mov	cx,[cFATEntries]	; size to read
 18512 00001EA9 D1E1                    	shl	cx,1
 18513 00001EAB 8B1E[BD9E]              	mov	bx,[pbufDOSFAT]		; es:bx = location to read
 18514                                  
 18515 00001EAF E83500                  	call	ReadCVFile
 18516 00001EB2 722F                    	jc	short cfb_error
 18517                                  
 18518                                  	; Now read the corresponding MagicDrv FAT entries
 18519                                  
 18520                                  	;mov	ax,[MDBPB.secMDFATStart]
 18521 00001EB4 A1[999E]                	mov	ax,[MDBPB+24h]
 18522 00001EB7 40                      	inc	ax
 18523                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 18524 00001EB8 F726[809E]              	mul	word [MDBPB+0Bh]	; DX:AX = MDFAT file offset
 18525                                  
 18526 00001EBC 8B1E[B99E]              	mov	bx,[entInBuf]
 18527 00001EC0 31C9                    	xor	cx,cx			; CX:BX = 32 bit cluster #
 18528                                  	;add	bx,[MDBPB.cluFirstData]
 18529 00001EC2 031E[A29E]              	add	bx,[MDBPB+2Dh]
 18530 00001EC6 11C9                    	adc	cx,cx			; CX:BX = MDFAT entry #
 18531                                  
 18532 00001EC8 D1E3                    	shl	bx,1
 18533 00001ECA D1D1                    	rcl	cx,1
 18534 00001ECC D1E3                    	shl	bx,1
 18535 00001ECE D1D1                    	rcl	cx,1			; * 4 bytes per MDFAT entry
 18536                                  
 18537 00001ED0 01D8                    	add	ax,bx
 18538 00001ED2 11CA                    	adc	dx,cx			; DX:AX = file offset of MDFAT entry
 18539                                  
 18540 00001ED4 8B0E[B79E]              	mov	cx,[cFATEntries]
 18541 00001ED8 D1E1                    	shl	cx,1
 18542 00001EDA D1E1                    	shl	cx,1			; size to read
 18543 00001EDC 8B1E[BF9E]              	mov	bx,[pbufMDFAT]		; es:bx = location to read into
 18544                                  
 18545 00001EE0 E80400                  	call	ReadCVFile
 18546                                  	;jnc	short cfb_ret ; cf = 0 ; 08/06/2023
 18547                                  	; 08/06/2023
 18548                                  	; cf = 1
 18549                                  cfb_error:
 18550                                  	;stc
 18551                                  cfb_ret:
 18552 00001EE3 5A                      	pop	dx
 18553 00001EE4 59                      	pop	cx
 18554 00001EE5 58                      	pop	ax
 18555 00001EE6 C3                      	retn
 18556                                  
 18557                                  ; --------------------------------------------------------------------------- 
 18558                                  
 18559                                  ;***	ReadCVFile - read from the Compressed Volume File
 18560                                  ;
 18561                                  ;	Entry	DX:AX file offset, ES:BX buffer location, CX length in bytes
 18562                                  ;
 18563                                  ;	Exit	CY set if error, else data read
 18564                                  ;
 18565                                  ;	Uses	AX, BX, CX, DX
 18566                                  
 18567                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18568                                  ReadCVFile:
 18569 00001EE7 53                      	push	bx			; save buffer loc
 18570 00001EE8 51                      	push	cx			; save read length
 18571                                  
 18572 00001EE9 89D1                    	mov	cx,dx
 18573 00001EEB 89C2                    	mov	dx,ax			; cx:dx = file offset of fat entry
 18574                                  	;mov	ax,(LSEEK shl 8) or 0
 18575 00001EED B80042                  	mov	ax,4200h
 18576 00001EF0 8B1E[639E]              	mov	bx,[fhCVF]
 18577 00001EF4 CD21                    	int	21h
 18578 00001EF6 720E                    	jc	short rcf_ret 		; CY set for error return
 18579                                  
 18580                                  	;mov	ah,READ
 18581 00001EF8 B43F                    	mov	ah,3Fh
 18582 00001EFA 59                      	pop	cx			; read length
 18583 00001EFB 5A                      	pop	dx			; buffer loc offset
 18584 00001EFC 1E                      	push	ds
 18585 00001EFD 06                      	push	es
 18586 00001EFE 1F                      	pop	ds			; buffer loc segment
 18587 00001EFF CD21                    	int	21h
 18588 00001F01 1F                      	pop	ds
 18589 00001F02 7202                    	jc	short rcf_ret 		; CY set for error return
 18590                                  
 18591 00001F04 39C8                    	cmp	ax,cx			; read it all?
 18592                                  	;je	short rcf_ret 		; yes, CY clear
 18593                                  	; 08/06/2023	
 18594                                  	; ax < cx
 18595                                  	;stc				; end-of-file?
 18596                                  rcf_ret:
 18597 00001F06 C3                      	retn
 18598                                  
 18599                                  ;============================================================================
 18600                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 18601                                  ;============================================================================
 18602                                  ; 09/10/2018 - Retro DOS v3.0
 18603                                  
 18604                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1195h
 18605                                  
 18606                                  ; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18607                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1A4Ah
 18608                                  
 18609                                  ; =============== S U B	R O U T	I N E =======================================
 18610                                  
 18611                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18612                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1FF4h
 18613                                  PAUSE:
 18614 00001F07 BA[8592]                	mov	dx,PAUSEMES_PTR ; 19/02/2023
 18615 00001F0A E82036                  	call	std_printf
 18616 00001F0D E817E7                  	call	GETKEYSTROKE
 18617                                  	;call	CRLF2
 18618                                  	;retn
 18619                                  	; 19/02/2023
 18620 00001F10 E9100C                  	jmp	CRLF2
 18621                                  
 18622                                  ; ---------------------------------------------------------------------------
 18623                                  
 18624                                  ;****************************************************************
 18625                                  ;*
 18626                                  ;* ROUTINE:	DEL/ERASE - erase file(s)
 18627                                  ;*
 18628                                  ;* FUNCTION:	PARSE command line for file or path name and /P
 18629                                  ;*		and invoke PATHCRUNCH. If an error occurs, set
 18630                                  ;*		up an error message and transfer control to CERROR.
 18631                                  ;*		Otherwise, transfer control to NOTEST2 if /P not
 18632                                  ;*		entered or SLASHP_ERASE if /P entered.
 18633                                  ;*
 18634                                  ;* INPUT:	command line at offset 81H
 18635                                  ;*
 18636                                  ;* OUTPUT:	if no error:
 18637                                  ;*		FCB at 5ch set up with filename(s) entered
 18638                                  ;*		Current directory set to entered directory
 18639                                  ;*
 18640                                  ;****************************************************************
 18641                                  
 18642                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18643                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A57h
 18644                                  
 18645                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18646                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2001h
 18647                                  ERASE:
 18648                                  	; MSDOS 6.0
 18649                                  
 18650                                  	;assume	ds:trangroup,es:trangroup
 18651                                  
 18652 00001F13 BE8100                  	mov	si,81h		;AC000; get command line
 18653 00001F16 C706[2C9E]0000          	mov	word [COMSW],0 	;AN000; clear switch indicator
 18654 00001F1C BF[4D98]                	mov	di,PARSE_ERASE
 18655                                  				;AN000; Get address of PARSE_ERASE
 18656 00001F1F 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18657                                  erase_scan:
 18658 00001F21 31D2                    	xor	dx,dx		;AN000;
 18659 00001F23 E8E507                  	call	Parse_With_Msg	;AC018; call parser
 18660                                  	
 18661                                  	;cmp	ax,-1  ; 0FFFFh
 18662                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 18663                                  	;je	short good_line	;AN000; yes - done parsing
 18664                                  	;;cmp	ax,0
 18665                                  	;;cmp	ax,RESULT_NO_ERROR ; 0
 18666                                  	;and	ax,ax		;AC000; did we have an error?
 18667                                  	;jnz	short errj2	;AC000; yes exit
 18668                                  	; 10/06/2023
 18669 00001F26 40                      	inc	ax  ; cmp ax,-1
 18670 00001F27 743C                    	jz	short good_line ; 0FFFFh -> 0
 18671 00001F29 48                      	dec	ax  ; cmp ax,0	
 18672 00001F2A 7566                    	jnz	short errj2  ; 1 -> 0
 18673                                  	; ax = 0
 18674                                  
 18675 00001F2C 813E[89AA][C097]        	cmp	word [PARSE1_SYN],SLASH_P_SYN ; "/P"
 18676                                  				;AN000; was /P entered?
 18677 00001F32 741C                    	je	short set_erase_prompt
 18678                                  				;AN000; yes - go set prompt
 18679                                  ;
 18680                                  ; Must be filespec since no other matches occurred. move filename to srcbuf
 18681                                  ;
 18682 00001F34 56                      	push	si		;AC000; save position in line
 18683 00001F35 C536[8BAA]              	lds	si,[PARSE1_ADDR]
 18684                                  				;AC000; get address of filespec
 18685                                  	;cmp	byte [si+1],colon_char
 18686 00001F39 807C013A                	cmp	byte [si+1],':'	;AC000; drive specified?
 18687 00001F3D 750B                    	jne	short erase_drive_ok
 18688                                  				;AC000; no - continue
 18689                                  	;cmp	byte [si+2],END_OF_LINE_OUT	
 18690 00001F3F 807C0200                	cmp	byte [si+2],0	;AC000; was only drive entered?
 18691 00001F43 7505                    	jne	short erase_drive_ok
 18692                                  				;AC000; no - continue
 18693 00001F45 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2 
 18694                                  				;AN022; get message number in control block
 18695 00001F48 EB3D                    	jmp	short extend_setup
 18696                                  				;AC000; exit
 18697                                  erase_drive_ok:
 18698 00001F4A E8AC12                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 18699 00001F4D 5E                      	pop	si		;AC000; get position back
 18700 00001F4E EBD1                    	jmp	short erase_scan
 18701                                  				;AN000; continue parsing
 18702                                  set_erase_prompt:
 18703 00001F50 833E[2C9E]00            	cmp	word [COMSW],0 	;AN018; was /P already entered?
 18704 00001F55 7408                    	jz	short ok_to_set_erase_prompt
 18705                                  				;AN018; no go set switch
 18706                                  	;mov	ax,1
 18707 00001F57 B80100                  	mov	ax,MoreArgs_Ptr 
 18708                                  				;AN018; set up too many arguments
 18709 00001F5A E8BD07                  	call	setup_parse_error_msg
 18710                                  				;AN018; set up an error message
 18711 00001F5D EB33                    	jmp	short errj2	;AN018; exit
 18712                                  
 18713                                  ok_to_set_erase_prompt: 	;AN018;
 18714 00001F5F FF06[2C9E]              	inc	word [COMSW]	;AN000; indicate /p specified
 18715 00001F63 EBBC                    	jmp	short erase_scan
 18716                                  				;AN000; continue parsing
 18717                                  good_line:			;G  We know line is good
 18718 00001F65 E8640C                  	call	PathCrunch
 18719 00001F68 730D                    	jnc	short checkdr
 18720 00001F6A A1[CBA2]                	mov	ax,[Msg_Numb]	;AN022; get message number
 18721                                  	;cmp	ax,0		;AN022; was message flag set?
 18722 00001F6D 09C0                    	or	ax,ax
 18723 00001F6F 7516                    	jnz	short extend_setup
 18724                                  				;AN022; yes - print out message
 18725                                  	;cmp	byte [DestIsDir],0
 18726 00001F71 3806[50A1]              	cmp	[DestIsDir],al 	; No CHDIRs worked
 18727 00001F75 750D                    	jnz	short badpath_err
 18728                                  				;AC022; see if they should have
 18729                                  checkdr:
 18730 00001F77 833E[2C9E]00            	cmp	word [COMSW],0 	;AN000; was /p specified
 18731 00001F7C 7403                    	jz	short notest2j	;AN000; no - go to notest2
 18732 00001F7E E9051B                  	jmp	slashp_erase	;AN000; yes - go to slashp_erase
 18733                                  notest2j:
 18734 00001F81 E99D1A                  	jmp	notest2
 18735                                  
 18736                                  badpath_err:			;AN022; "Path not found" message
 18737 00001F84 B80300                  	mov	ax,ERROR_PATH_NOT_FOUND ; 3
 18738                                  				;AN022; set up error number
 18739                                  extend_setup:			;AN022;
 18740                                  	;mov	byte [msg_disp_class],1
 18741 00001F87 C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class
 18742                                  				;AN022; set up extended error msg class
 18743 00001F8C BA[F391]                	mov	dx,extend_buf_ptr
 18744                                  				;AC022; get extended message pointer
 18745 00001F8F A3[F391]                	mov	[extend_buf_ptr],ax
 18746                                  				;AN022; get message number in control block
 18747                                  errj2:				;AC022; exit jump
 18748 00001F92 E90F0F                  	jmp	cerror		;AN022;
 18749                                  
 18750                                  ; ---------------------------------------------------------------------------
 18751                                  
 18752                                  ; ****************************************************************
 18753                                  ; *
 18754                                  ; * ROUTINE:	 CRENAME - rename file(s)
 18755                                  ; *
 18756                                  ; * FUNCTION:	 PARSE command line for one full filespec and one
 18757                                  ; *		 filename. Invoke PATHCRUNCH on the full filespec.
 18758                                  ; *		 Make sure the second filespec only contains a
 18759                                  ; *		 filename. If both openands are valid, attempt
 18760                                  ; *		 to rename the file.
 18761                                  ; *
 18762                                  ; * INPUT:	 command line at offset 81H
 18763                                  ; *
 18764                                  ; * OUTPUT:	 none
 18765                                  ; *
 18766                                  ; ****************************************************************
 18767                                  
 18768                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18769                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18770                                  CRENAME:
 18771                                  	; MSDOS 6.0
 18772                                  	;assume	ds:trangroup,es:trangroup
 18773                                  
 18774 00001F95 BE8100                  	mov	si,81h		;AC000; Point to command line
 18775 00001F98 BF[CF98]                	mov	di,PARSE_RENAME
 18776                                  				;AN000; Get address of PARSE_RENAME
 18777 00001F9B 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18778 00001F9D 31D2                    	xor	dx,dx		;AN000;
 18779 00001F9F E86907                  	call	Parse_With_Msg	;AC018; call parser
 18780                                  	;cmp	ax,RESULT_NO_ERROR ; 0
 18781 00001FA2 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 18782                                  ;	jz	short crename_no_parse_error
 18783                                  				;AC000; no - continue
 18784 00001FA4 752C                    	jnz	short crename_parse_error
 18785                                  				;AC000; Yes, fail. (need long jump)
 18786                                  ;
 18787                                  ;  Get first file name returned from parse into our buffer
 18788                                  ;
 18789                                  crename_no_parse_error:
 18790 00001FA6 56                      	push	si		;AN000; save position in line
 18791 00001FA7 C536[8BAA]              	lds	si,[PARSE1_ADDR]
 18792                                  				;AN000; get address of filespec
 18793 00001FAB E84B12                  	call    Move_To_SrcBuf	;AN000; move to srcbuf
 18794 00001FAE 5E                      	pop	si		;AN000; restore position in line
 18795                                  
 18796 00001FAF 31D2                    	xor	dx,dx		;AN000; clear dx
 18797 00001FB1 E85707                  	call	Parse_With_Msg	;AC018; call parser
 18798                                  	;cmp	ax,RESULT_NO_ERROR
 18799 00001FB4 21C0                    	and	ax,ax ; 0 ?	;AN000; did we have an error?
 18800 00001FB6 751A                    	jnz	short crename_parse_error
 18801                                  				;AN000; Yes, fail.
 18802                                  ;
 18803                                  ;  Check the second file name for drive letter colon
 18804                                  ;
 18805 00001FB8 56                      	push	si		;AN000; save position in line
 18806 00001FB9 C536[8BAA]              	lds	si,[PARSE1_ADDR]
 18807                                  				;AC000; get address of path
 18808                                  	;mov	al,':'		;AC000;
 18809                                  	;cmp	[si+1],al	;AC000; Does the 2nd parm have a drive spec?
 18810 00001FBD 807C013A                	cmp	byte [si+1],':'
 18811 00001FC1 7511                    	jnz	short ren_no_drive
 18812                                  				;AN000; Yes, error
 18813                                  	;mov	byte [msg_disp_class],2
 18814 00001FC3 C606[F191]02            	mov	byte [msg_disp_class],parse_msg_class
 18815                                  				;AN000; set up parse error msg class
 18816 00001FC8 BA[F391]                	mov	dx,extend_buf_ptr
 18817                                  				;AC000; get extended message pointer
 18818                                  	;mov	word [extend_buf_ptr],0Ah
 18819 00001FCB C706[F391]0A00          	mov	word [extend_buf_ptr],BadParm_Ptr
 18820                                  				;AN000; get "Invalid parameter" message number
 18821 00001FD1 5E                      	pop	si		;AN000;
 18822                                  crename_parse_error:		;AC022;
 18823 00001FD2 EB64                    	jmp	short errj	;AC000;
 18824                                  
 18825                                  ;  Get second file name returned from parse into the fCB. Save
 18826                                  ;  character after file name so we can later check to make sure it
 18827                                  ;  isn't a path character.
 18828                                  
 18829                                  ren_no_drive:
 18830 00001FD4 BF6C00                  	mov	di,FCB+10h ; 6Ch
 18831                                  				;AC000; set up to parse second file name
 18832                                  	;mov	ax,(Parse_File_Descriptor SHL 8) OR 01H ;AC000;
 18833 00001FD7 B80129                  	mov	ax,2901h
 18834 00001FDA CD21                    	int	21h		;AC000; do the function
 18835 00001FDC AC                      	lodsb			;AC000; Load char after filename
 18836 00001FDD A2[48A1]                	mov	[One_Char_Val],al
 18837                                  				;AN000; save char after filename
 18838 00001FE0 5E                      	pop	si		;AN000; get line position back
 18839                                  ;
 18840                                  ; We have source and target. See if any args beyond.
 18841                                  ;
 18842 00001FE1 BF[CF98]                	mov	di,PARSE_RENAME
 18843                                  				;AC000; get address of parse_rename
 18844 00001FE4 E80E07                  	call	parse_check_eol ;AC000; are we at end of line?
 18845 00001FE7 75E9                    	jnz	short crename_parse_error
 18846                                  				;AN000; no, fail.
 18847 00001FE9 E8E00B                  	call	PathCrunch
 18848 00001FEC BA[0492]                	mov	dx,BADCPMES_PTR
 18849 00001FEF 74A1                    	jz	short errj2	; If 1st parm a dir, print error msg
 18850 00001FF1 730F                    	jnc	short notest3
 18851 00001FF3 A1[CBA2]                	mov	ax,[Msg_Numb]	;AN022; get message number
 18852                                  	;cmp	ax,0		;AN022; was message flag set?
 18853 00001FF6 21C0                    	and	ax,ax ; 0 ?
 18854 00001FF8 758D                    	jnz	short extend_setup
 18855                                  				;AN022; yes - print out message
 18856                                  	;cmp	byte [DestIsDir],0
 18857 00001FFA 3806[50A1]              	cmp	[DestIsDir],al	; No CHDIRs worked
 18858 00001FFE 7402                    	jz	short notest3 	; see if they should have
 18859 00002000 EB82                    	Jmp	badpath_err	;AC022; set up error
 18860                                  notest3:
 18861 00002002 A0[48A1]                	mov	al,[One_Char_Val]
 18862                                  				;AN000; move char into AX
 18863 00002005 BA[2292]                	mov	dx,INORNOT_PTR 
 18864                                  				; Load invalid fname error ptr
 18865 00002008 E8B30B                  	call	pathchrcmp	; Is the char in al a path sep?
 18866 0000200B 742B                    	jz	short errj	; Yes, error - 2nd arg must be
 18867                                  				;  filename only.
 18868                                  	;mov	ah,FCB_Rename
 18869 0000200D B417                    	mov	ah,17h
 18870 0000200F BA5C00                  	mov	dx,FCB ; 5Ch
 18871 00002012 CD21                    	int	21h
 18872 00002014 3CFF                    	cmp	al,0FFh		; Did an error occur??
 18873 00002016 7506                    	jne	short renameok
 18874                                  
 18875 00002018 E82902                  	call	get_ext_error_number
 18876                                  				;AN022; get extended error
 18877 0000201B 50                      	push	ax		;AC022; Save results
 18878 0000201C B0FF                    	mov	al,0FFh		; Restore original error state
 18879                                  renameok:
 18880 0000201E 50                      	push	ax
 18881 0000201F E8BE09                  	call	RestUDir
 18882 00002022 58                      	pop	ax
 18883 00002023 FEC0                    	inc	al
 18884                                  	;;retnz
 18885                                  	;jz	short rn1
 18886                                  	;retn	
 18887 00002025 7514                    	jnz	short ret56
 18888                                  rn1:
 18889 00002027 58                      	pop	ax		;AC022; get the error number back
 18890 00002028 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2 
 18891                                  				;AN022; error file not found?
 18892 0000202B 7408                    	je	short use_renerr
 18893                                  				;AN022; yes - use generic error message
 18894 0000202D 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5 
 18895                                  				;AN022; error file not found?
 18896 00002030 7403                    	je	short use_renerr
 18897                                  				;AN022; yes - use generic error message
 18898 00002032 E952FF                  	jmp	extend_setup	;AN022; need long jump - use extended error
 18899                                  
 18900                                  use_renerr:
 18901 00002035 BA[0192]                	mov	dx,RENERR_PTR	;AC022;
 18902                                  errj:
 18903 00002038 E9690E                  	jmp	cerror
 18904                                  ret56:
 18905                                  ;typefil_ret:	; 20/02/2023 ; 17/04/2023	
 18906 0000203B C3                      	retn
 18907                                  
 18908                                  ; ---------------------------------------------------------------------------
 18909                                  
 18910                                  ;****************************************************************
 18911                                  ;*
 18912                                  ;* ROUTINE:	TYPEFIL - Display the contents of a file to the
 18913                                  ;*		standard output device
 18914                                  ;*
 18915                                  ;* SYNTAX:	TYPE filespec
 18916                                  ;*
 18917                                  ;* FUNCTION:	If a valid filespec is found, read the file until
 18918                                  ;*		1Ah and display the contents to STDOUT.
 18919                                  ;*
 18920                                  ;* INPUT:	command line at offset 81H
 18921                                  ;*
 18922                                  ;* OUTPUT:	none
 18923                                  ;*
 18924                                  ;****************************************************************
 18925                                  
 18926                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18927                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18928                                  TYPEFIL:
 18929                                  	; MSDOS 6.0	
 18930                                  	;assume	ds:trangroup,es:trangroup
 18931                                  
 18932 0000203C BE8100                  	mov	si,81h
 18933 0000203F BF[3B98]                	mov	di,PARSE_MRDIR
 18934                                  				;AN000; Get address of PARSE_MRDIR
 18935 00002042 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 18936 00002044 31D2                    	xor	dx,dx		;AN000;
 18937 00002046 E8C206                  	call	Parse_With_Msg	;AC018; call parser
 18938                                  	;cmp	ax,RESULT_NO_ERROR
 18939 00002049 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 18940 0000204B 751E                    	jnz	short typefil_parse_error
 18941                                  				;AN000; yes - issue error message
 18942                                  
 18943 0000204D 56                      	push	si		;AC000; save position in line
 18944 0000204E C536[8BAA]              	lds	si,[PARSE1_ADDR]
 18945                                  				;AC000; get address of filespec
 18946 00002052 E8A411                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 18947 00002055 5E                      	pop	si		;AC000; get position back
 18948 00002056 BF[3B98]                	mov	di,PARSE_MRDIR
 18949                                  				;AC000; get address of parse_mrdir
 18950 00002059 E89906                  	call	parse_check_eol ;AC000; are we at end of line?
 18951                                  	;jz	short gottarg 	;AC000; yes - continue
 18952                                  	; 20/02/2023
 18953                                  ;typefil_parse_error:		;AN000; no - set up error message and exit
 18954                                  	;jmp	cerror
 18955 0000205C 750D                    	jnz	short typefil_parse_error
 18956                                  gottarg:
 18957 0000205E E8DD0F                  	call	SETPATH
 18958 00002061 F606[54A1]02            	test	byte [DestInfo],00000010b ; 2
 18959                                  				; Does the filespec contain wildcards
 18960 00002066 7406                    	jz	short nowilds 	; No, continue processing
 18961 00002068 BA[2292]                	mov	dx,INORNOT_PTR	; Yes, report error
 18962                                  	; 20/02/2023
 18963                                  typefil_parse_error:
 18964 0000206B E9360E                  	jmp	cerror
 18965                                  nowilds:
 18966                                  	;mov	ax,ExtOpen SHL 8 ;AC000; open the file
 18967 0000206E B8006C                  	mov	ax,6C00h
 18968                                  	;mov	bx,read_open_mode ; 0
 18969                                  				;AN000; get open mode for TYPE
 18970 00002071 31C9                    	xor	cx,cx		;AN000; no special files
 18971 00002073 89CB                    	mov	bx,cx ; 20/02/2023
 18972 00002075 BA0101                  	mov	dx,101h
 18973                                  	;mov	dx,read_open_flag ; 101h
 18974                                  				;AN000; set up open flags
 18975 00002078 BE[B8A1]                	mov	si,SrcBuf	;AN030; get file name
 18976 0000207B CD21                    	int	21h
 18977 0000207D 7313                    	jnc	short typecont	; If open worked, continue. Otherwise load
 18978                                  
 18979                                  typerr: 			;AN022;
 18980 0000207F 0E                      	push	cs		;AN022; make sure we have local segment
 18981 00002080 1F                      	pop	ds		;AN022;
 18982 00002081 E8B001                  	call	Set_Ext_Error_Msg ;AN022;
 18983 00002084 C706[37A1][B8A1]        	mov	word [string_ptr_2],SrcBuf 
 18984                                  				;AC022; get address of failed string
 18985                                  	;mov	byte [extend_buf_sub],1
 18986 0000208A C606[F591]01            	mov	byte [extend_buf_sub],one_subst
 18987                                  				;AC022; put number of subst in control block
 18988 0000208F E9120E                  	jmp	cerror		;AC022; exit
 18989                                  
 18990                                  typecont:
 18991 00002092 89C3                    	mov	bx,ax		;AC000; get Handle
 18992                                  ;M043
 18993                                  ; We should do the LSEEK for filesize only if this handle belongs to a file
 18994                                  ;and not if it belongs to a device. If device, set TypeFilSiz+2 to -1 to
 18995                                  ;indicate it is a device.
 18996                                  ;
 18997                                  	;mov	ax,(IOCTL shl 8) or 0
 18998 00002094 B80044                  	mov	ax,4400h
 18999 00002097 CD21                    	int	21h
 19000                                  
 19001 00002099 F6C280                  	test	dl,80h		;is it a device?
 19002 0000209C 7408                    	jz	short not_device
 19003                                  				;no, a file
 19004                                  
 19005 0000209E C706[85AA]FFFF          	mov	word [TypeFilSiz+2],-1 ; 0FFFFh
 19006                                  				;indicate it is a device
 19007 000020A4 EB17                    	jmp	short dotype
 19008                                  not_device:
 19009                                  ;SR;
 19010                                  ; Find the filesize by seeking to the end and then reset file pointer to
 19011                                  ;start of file
 19012                                  
 19013                                  	;mov	ax,(LSEEK shl 8) or 2
 19014 000020A6 B80242                  	mov	ax,4202h
 19015 000020A9 31D2                    	xor	dx,dx
 19016 000020AB 89D1                    	mov	cx,dx		;seek  to end of file
 19017 000020AD CD21                    	int	21h
 19018                                  
 19019 000020AF A3[83AA]                	mov	[TypeFilSiz],ax
 19020 000020B2 8916[85AA]              	mov	[TypeFilSiz+2],dx ;store filesize
 19021                                  	;mov	ax,(LSEEK shl 8) or 0
 19022 000020B6 B80042                  	mov	ax,4200h
 19023 000020B9 31D2                    	xor	dx,dx
 19024 000020BB CD21                    	int	21h	        ;reset file pointer to start
 19025                                  dotype:				;M043
 19026 000020BD C606[35A9]00            	mov	byte [zflag],0 	; Reset ^Z flag
 19027 000020C2 8E1E[179E]              	mov	ds,[TPA]
 19028 000020C6 31D2                    	xor	dx,dx
 19029                                  	;ASSUME	DS:NOTHING
 19030                                  typelp:
 19031 000020C8 2E803E[35A9]00          	cmp	byte [cs:zflag],0
 19032                                  				;AC050; Is the ^Z flag set?
 19033                                  	;retnz			; Yes, return
 19034                                  	; 17/04/2023
 19035 000020CE 7401                    	jz	short tf1
 19036 000020D0 C3                      	retn
 19037                                  tf1:
 19038 000020D1 2E8B0E[369E]            	mov	cx,[cs:BYTCNT]	;AC056; No, continue
 19039                                  
 19040                                  ;Update the filesize left to read
 19041                                  
 19042 000020D6 2E833E[85AA]FF          	cmp	word [cs:TypeFilSiz+2],-1
 19043                                  				;is it a device? M043
 19044 000020DC 7431                    	je	short typ_read	;yes, just read from it; M043
 19045                                  
 19046 000020DE 2E833E[85AA]00          	cmp	word [cs:TypeFilSiz+2],0
 19047                                  				;more than 64K left?
 19048 000020E4 740D                    	jz	short lt64k	;no, do word subtraction
 19049 000020E6 2E290E[83AA]            	sub	[cs:TypeFilSiz],cx
 19050 000020EB 2E831E[85AA]00          	sbb	word [cs:TypeFilSiz+2],0
 19051                                  				;update filesize
 19052 000020F1 EB1C                          	jmp	short typ_read	;do the read
 19053                                  lt64k:
 19054 000020F3 2E3B0E[83AA]            	cmp	cx,[cs:TypeFilSiz]
 19055                                  				;readsize <= buffer?
 19056 000020F8 7610                    	jbe	short gtbuf	; yes, just update readsize
 19057                                  
 19058                                  ;Buffer size is larger than bytes to read
 19059                                  
 19060 000020FA 2E8B0E[83AA]            	mov	cx,[cs:TypeFilSiz]
 19061 000020FF E361                    	jcxz	typelp_ret
 19062 00002101 2EC706[83AA]0000        	mov	word [cs:TypeFilSiz],0
 19063 00002108 EB05                    	jmp	short typ_read
 19064                                  gtbuf:
 19065 0000210A 2E290E[83AA]            	sub	[cs:TypeFilSiz],cx
 19066                                  				;update filesize remaining
 19067                                  typ_read:
 19068                                  	;mov	ah,read
 19069 0000210F B43F                    	mov	ah,3Fh
 19070 00002111 CD21                    	int	21h		
 19071 00002113 7303                    	jnc	short tf2	;M043
 19072 00002115 E967FF                  	jmp	typerr		;M043
 19073                                  tf2:				;M043
 19074                                  ;M043;	jc	typerr		;AN022; Exit if error
 19075                                  
 19076 00002118 89C1                    	mov	cx,ax
 19077 0000211A E346                    	jcxz	typelp_ret	;AC000; exit if nothing read
 19078 0000211C 1E                      	push	ds
 19079 0000211D 07                      	pop	es		; Check to see if a ^Z was read.
 19080                                  	;assume es:nothing
 19081 0000211E 31FF                    	xor	di,di
 19082 00002120 50                      	push	ax
 19083 00002121 B01A                    	mov	al,1Ah
 19084 00002123 F2AE                    	repnz	scasb
 19085 00002125 58                      	pop	ax
 19086 00002126 91                      	xchg	ax,cx
 19087                                  	;cmp	ax,0
 19088 00002127 21C0                    	and	ax,ax
 19089 00002129 7506                    	jnz	short foundz	; Yes, handle it
 19090 0000212B 807DFF1A                	cmp	byte [di-1],1Ah	; No, double check
 19091 0000212F 750A                    	jnz	short typecont2	; No ^Z, continue
 19092                                  foundz:
 19093 00002131 29C1                    	sub	cx,ax		; Otherwise change cx so that only those
 19094 00002133 49                      	dec	cx		;  bytes up to but NOT including the ^Z
 19095 00002134 0E                      	push	cs		;  will be typed.
 19096 00002135 07                      	pop	es
 19097                                  	;assume es:trangroup
 19098 00002136 26F616[35A9]            	not	byte [es:zflag]	; Turn on ^Z flag so that the routine
 19099                                  typecont2:			;  will quit after this write.
 19100 0000213B 53                      	push	bx
 19101 0000213C BB0100                  	mov	bx,1
 19102                                  	;mov	ah,Write
 19103 0000213F B440                    	mov	ah,40h
 19104 00002141 CD21                    	int	21h
 19105 00002143 5B                      	pop	bx
 19106 00002144 720C                    	jc	short Error_outputj
 19107 00002146 39C8                    	cmp	ax,cx
 19108 00002148 7503                    	jnz	short tf3	;M043
 19109 0000214A E97BFF                  	jmp	typelp		;M043
 19110                                  tf3:				;M043
 19111                                  ;M043;	jz	short typelp
 19112 0000214D 49                      	dec	cx
 19113 0000214E 39C8                    	cmp	ax,cx
 19114                                  	;;retz			; One less byte OK (^Z)
 19115                                  	;jnz	short Error_outputj
 19116                                  ;tf4:
 19117                                  	;retn
 19118 00002150 7410                    	jz	short typelp_ret ; 20/02/2023
 19119                                  
 19120                                  Error_outputj:
 19121 00002152 BB0100                  	mov	bx,1
 19122                                  	;mov	ax,IOCTL SHL 8
 19123 00002155 B80044                  	mov	ax,4400h
 19124 00002158 CD21                    	int	21h
 19125 0000215A F6C280                  	test	dl,80h
 19126                                  	;test	dl,devid_ISDEV
 19127                                  	;;retnz			; If device, no error message
 19128                                  	;jnz	short tf4
 19129 0000215D 7503                    	jnz	short typelp_ret
 19130 0000215F E9420A                  	jmp	error_output
 19131                                  typelp_ret:
 19132 00002162 C3                      	retn
 19133                                  
 19134                                  ; ---------------------------------------------------------------------------
 19135                                  
 19136                                  ; VOLUME command displays the volume ID on the specified drive
 19137                                  
 19138                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19139                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19140                                  	; 10/06/2023
 19141                                  VOLUME:
 19142                                  	; MSDOS 6.0
 19143 00002163 BE8100                  	mov	si,81h
 19144 00002166 BF[2998]                	mov	di,PARSE_VOL
 19145                                  				;AN000; Get address of PARSE_VOL
 19146 00002169 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 19147 0000216B 31D2                    	xor	dx,dx		;AN000;
 19148 0000216D E89B05                  	call	Parse_With_Msg	;AC018; call parser
 19149                                  
 19150                                  	;cmp	ax,-1 ; 0FFFFh
 19151                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 19152                                  	;je	short OkVolArg	;AC000; Yes, display default volume ID
 19153                                  	;;cmp	ax,RESULT_NO_ERROR
 19154                                  	;;cmp	ax,0		;AC000; did we have an error?
 19155                                  	;or	ax,ax ; 0?
 19156                                  	;jnz	short badvolarg	;AC000; Yes, fail.
 19157                                  	; 10/06/2023
 19158 00002170 40                      	inc	ax  ; cmp ax,-1
 19159 00002171 7443                    	jz	short OkVolArg ; 0FFFFh -> 0
 19160 00002173 48                      	dec	ax  ; cmp ax,0
 19161 00002174 750A                    	jnz	short badvolarg ; 1 -> 0
 19162                                  	; ax = 0
 19163                                  
 19164                                  ; We have parsed off the drive. See if there are any more chars left
 19165                                  
 19166 00002176 BF[2998]                	mov	di,PARSE_VOL
 19167                                  				;AC000; get address of parse_vol
 19168 00002179 31D2                    	xor	dx,dx		;AC000;
 19169 0000217B E87705                  	call	parse_check_eol ;AC000; call parser
 19170 0000217E 7436                    	jz	short OkVolArg	;AC000; yes, end of road
 19171                                  
 19172                                  ; The line was not interpretable. Report an error.
 19173                                  
 19174                                  badvolarg:
 19175 00002180 E9210D                  	jmp	cerror
 19176                                  
 19177                                  ; ---------------------------------------------------------------------------
 19178                                  
 19179                                  ;***	DisAppend - disable APPEND
 19180                                  ;
 19181                                  ;	ENTRY	nothing
 19182                                  ;
 19183                                  ;	EXIT	nothing
 19184                                  ;
 19185                                  ;	USED	AX,BX
 19186                                  ;
 19187                                  ;	EFFECTS
 19188                                  ;
 19189                                  ;	  APPEND is disabled. If it was active, it will be re-enabled
 19190                                  ;	  after the command finishes, by the HeadFix routine.
 19191                                  ;
 19192                                  ;	NOTE
 19193                                  ;
 19194                                  ;	  This routine must not be called more than once during a single
 19195                                  ;	  command cycle. The second call would permanently disable APPEND.
 19196                                  
 19197                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19198                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1CDFh
 19199                                  	
 19200                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19201                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2289h
 19202                                  
 19203                                  	; MSDOS 6.0
 19204                                  DisAppend:
 19205 00002183 1E                      	push	ds			; save DS
 19206 00002184 06                      	push	es			; save ES
 19207 00002185 57                      	push	di
 19208                                  
 19209                                  	;mov	ax,APPENDINSTALL	; AX = Append Installed Check code
 19210 00002186 B800B7                  	mov	ax,0B700h
 19211 00002189 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19212 0000218B 08C0                    	or	al,al
 19213 0000218D 7423                    	jz	short daRet		; APPEND not installed, return
 19214                                  
 19215                                  	;mov	ax,APPENDDOS		; AX = Get Append Version code
 19216 0000218F B802B7                  	mov	ax,0B702h
 19217 00002192 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19218 00002194 83F8FF                  	cmp	ax,0FFFFh
 19219 00002197 7519                    	jne	short daRet		; it's not a local version, return
 19220                                  
 19221                                  	;mov	ax,APPENDGETSTATE	; AX = Get Function State code
 19222 00002199 B806B7                  	mov	ax,0B706h
 19223 0000219C CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19224                                  
 19225 0000219E 8E1E[159E]              	mov	ds,[RESSEG]		; DS = resident seg addr
 19226                                  
 19227 000021A2 891E[6002]              	mov	[Append_State],bx	; Append_State = saved APPEND state
 19228 000021A6 C606[6202]FF            	mov	byte [Append_Flag],-1	; Append_Flag = true, restore state
 19229                                  
 19230 000021AB 31DB                    	xor	bx,bx			; BX = APPEND state = off
 19231                                  	;mov	ax,APPENDSETSTATE	; AX = Set Append State code
 19232 000021AD B807B7                  	mov	ax,0B707h
 19233 000021B0 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 19234                                  daRet:	
 19235 000021B2 5F                      	pop	di
 19236 000021B3 07                      	pop	es			; restore ES
 19237 000021B4 1F                      	pop	ds			; restore DS
 19238                                  
 19239 000021B5 C3                      	retn
 19240                                  
 19241                                  ; ---------------------------------------------------------------------------
 19242                                  
 19243                                  ; Find the Volume ID on the disk.
 19244                                  
 19245                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19246                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19247                                  	
 19248                                  	; MSDOS 6.0
 19249                                  OkVolArg:
 19250 000021B6 E8CAFF                  	call	DisAppend		; disable APPEND
 19251 000021B9 E86709                  	call	CRLF2
 19252                                  	;mov	al,blank			
 19253 000021BC B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 19254 000021BE E88E01                  	call	PRINT_CHAR		;AN051;  before volume message
 19255 000021C1 1E                      	push	ds
 19256 000021C2 07                      	pop	es
 19257                                  
 19258                                  ; Volume IDs are only findable via extended FCBs or find_first with attributes
 19259                                  ; of volume_id ONLY.
 19260                                  
 19261 000021C3 BF5500                  	mov	di,FCB-7 ; 55h		; Point to extended FCB beginning
 19262 000021C6 B0FF                    	mov	al,-1 ; 0FFh		; Tag to indicate Extention
 19263 000021C8 AA                      	stosb
 19264 000021C9 31C0                    	xor	ax,ax			; Zero padding to volume label
 19265 000021CB AB                      	stosw
 19266 000021CC AB                      	stosw
 19267 000021CD AA                      	stosb
 19268 000021CE B008                    	mov	al,ATTR_VOLUME_ID ; 8	; Look for volume label
 19269 000021D0 AA                      	stosb
 19270 000021D1 47                      	inc	di			; Skip drive byte; it is already set
 19271 000021D2 B90B00                  	mov	cx,11			; fill in remainder of file
 19272 000021D5 B03F                    	mov	al,'?'
 19273 000021D7 F3AA                    	rep	stosb
 19274                                  
 19275                                  ; Set up transfer address (destination of search first information)
 19276                                  
 19277 000021D9 BA[50A0]                	mov	dx,DIRBUF
 19278                                  	;mov	ah,Set_DMA
 19279 000021DC B41A                    	mov	ah,1Ah
 19280 000021DE CD21                    	int	21h
 19281                                  
 19282                                  ; Do the search
 19283                                  
 19284 000021E0 BA5500                  	mov	dx,FCB-7 ; 55h
 19285                                  	;mov	ah,Dir_Search_First
 19286 000021E3 B411                    	mov	ah,11h
 19287 000021E5 CD21                    	int	21h
 19288                                  
 19289                                  ;********************************
 19290                                  ; Print volume ID info
 19291                                  
 19292 000021E7 50                      	push	ax			;AC000; AX return from SEARCH_FIRST for VOL ID
 19293 000021E8 A05C00                  	mov	al,[FCB]  ; [5Ch]	;AC000; get drive letter
 19294 000021EB 0440                    	add	al,'@'  ; add al,40h
 19295 000021ED 3C40                    	cmp	al,'@'
 19296 000021EF 7505                    	jne	short drvok
 19297 000021F1 A0[299E]                	mov	al,[CURDRV]
 19298                                  	;add	al,capital_A
 19299 000021F4 0441                    	add	al,'A'
 19300                                  drvok:
 19301 000021F6 A2[4AA1]                	mov	[vol_drv],al		;AC000; get drive letter into argument
 19302 000021F9 58                      	pop	ax			;AC000; get return code back
 19303 000021FA 08C0                    	or	al,al			;AC000; volume label found?
 19304 000021FC 7405                    	jz	short Get_vol_name	;AC000; volume label exists - go get it
 19305 000021FE BA[EE92]                	mov	dx,VolMes_Ptr_2		;AC000; set up no volume message
 19306 00002201 EB13                    	jmp	short print_serial	;AC000; go print it
 19307                                  
 19308                                  Get_vol_name:
 19309 00002203 BF[819F]                	mov	di,CHARBUF
 19310 00002206 89FA                    	mov	dx,di
 19311 00002208 BE[58A0]                	mov	si,DIRBUF+8		;AN000;  3/3/KK
 19312 0000220B B90B00                  	mov	cx,11			;AN000;  3/3/KK
 19313 0000220E F3A4                    	rep	movsb			;AN000;  3/3/KK
 19314                                  
 19315 00002210 30C0                    	xor	al,al			;AC000; store a zero to terminate the string
 19316 00002212 AA                      	stosb
 19317 00002213 BA[FC92]                	mov	dx,VolMes_Ptr		;AC000; set up message
 19318                                  
 19319                                  print_serial:
 19320                                  
 19321                                  ; Attempt to get the volume serial number from the disk. If an error
 19322                                  ; occurs, do not print volume serial number.
 19323                                  
 19324 00002216 52                      	push	dx			;AN000; save message offset
 19325                                  	;mov	ax,(GetSetMediaID SHL 8)
 19326 00002217 B80069                  	mov	ax,6900h		;AC036; Get the volume serial info
 19327 0000221A 8A1E5C00                	mov	bl,[FCB] ; [5Ch]	;AN000; get drive number from FCB
 19328 0000221E BA[B0A2]                	mov	dx,vol_ioctl_buf	;AN000;target buffer
 19329 00002221 CD21                    	int	21h			;AN000; do the call
 19330                                  			; DOS - 4.0 internal - GET/SET DISK SERIAL NUMBER
 19331                                  			; AL = 00h get serial number / 01h set serial number
 19332                                  			; BL = drive (0=default, 1=A, 2=B, etc)
 19333                                  			; DS:DX -> disk info
 19334 00002223 5A                      	pop	dx			;AN000; get message offset back
 19335 00002224 720B                    	jc	short printvol_end	;AN000; if error, just go print label
 19336 00002226 E80433                  	call	std_printf		;AC000; go print volume message
 19337                                  	;mov	al,blank				
 19338 00002229 B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 19339 0000222B E82101                  	call	PRINT_CHAR		;AN051;  before volume message
 19340 0000222E BA[1593]                	mov	dx,VolSerMes_Ptr 	;AN000; get serial number message
 19341                                  printvol_end:
 19342 00002231 E9F932                  	jmp	std_printf		;AC000; go print and exit
 19343                                  
 19344                                  ; ---------------------------------------------------------------------------
 19345                                  
 19346                                  ;****************************************************************
 19347                                  ;*
 19348                                  ;* ROUTINE:	Set_ext_error_msg
 19349                                  ;*
 19350                                  ;* FUNCTION:	Sets up extended error message for printing
 19351                                  ;*
 19352                                  ;* INPUT:	return from INT 21
 19353                                  ;*
 19354                                  ;* OUTPUT:	extended error message set up in extended error
 19355                                  ;*		buffer.
 19356                                  ;*
 19357                                  ;****************************************************************
 19358                                  	
 19359                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19360                                  
 19361                                  	; MSDOS 6.0
 19362                                  Set_Ext_Error_Msg:			;AN000;
 19363 00002234 E80D00                  	call	get_ext_error_number	;AC022; get the extended error
 19364 00002237 C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class
 19365                                  	;mov	byte [msg_disp_class],1	;AN000; set up extended error msg class
 19366 0000223C BA[F391]                	mov	dx,extend_buf_ptr 	;AC000; get extended message pointer
 19367 0000223F A3[F391]                	mov	[extend_buf_ptr],ax	;AN000; get message number in control block
 19368 00002242 F9                      	stc				;AN000; make sure carry is set
 19369 00002243 C3                      	retn				;AN000; return
 19370                                  
 19371                                  ; ---------------------------------------------------------------------------
 19372                                  
 19373                                  ;****************************************************************
 19374                                  ;*
 19375                                  ;* ROUTINE:	Get_ext_error_number
 19376                                  ;*
 19377                                  ;* FUNCTION:	Does get extended error function call
 19378                                  ;*
 19379                                  ;* INPUT:	return from INT 21
 19380                                  ;*
 19381                                  ;* OUTPUT:	AX - extended error number
 19382                                  ;*
 19383                                  ;****************************************************************
 19384                                  
 19385                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19386                                  
 19387                                  	; MSDOS 6.0
 19388                                  get_ext_error_number:			;AN022;
 19389                                  
 19390                                  	;SaveReg <BX,CX,DX,SI,DI,BP,ES,DS>
 19391                                  					;AN022; save registers
 19392 00002244 53                      	push	bx
 19393 00002245 51                      	push	cx
 19394 00002246 52                      	push	dx
 19395 00002247 56                      	push	si
 19396 00002248 57                      	push	di
 19397 00002249 55                      	push	bp
 19398 0000224A 06                      	push	es
 19399 0000224B 1E                      	push	ds
 19400                                  	;mov	ah,GetExtendedError	;AN022; get extended error
 19401 0000224C B459                    	mov	ah,59h
 19402 0000224E 31DB                    	xor	bx,bx			;AN022; clear BX
 19403 00002250 CD21                    	int	21h			;AN022;
 19404                                  			; DOS - 3+ - GET EXTENDED ERROR CODE
 19405                                  			; BX = version code (0000h for DOS 3.x)
 19406                                  
 19407                                  	;RestoreReg  <DS,ES,BP,DI,SI,DX,CX,BX>
 19408                                  					;AN022; restore registers
 19409 00002252 1F                      	pop	ds
 19410 00002253 07                      	pop	es
 19411 00002254 5D                      	pop	bp
 19412 00002255 5F                      	pop	di
 19413 00002256 5E                      	pop	si
 19414 00002257 5A                      	pop	dx
 19415 00002258 59                      	pop	cx
 19416 00002259 5B                      	pop	bx
 19417                                  
 19418 0000225A C3                      	retn				;AN022; return
 19419                                  
 19420                                  ;============================================================================
 19421                                  ; TCMD2A.ASM, MSDOS 6.0, 1991
 19422                                  ;============================================================================
 19423                                  ; 08/10/2018 - Retro DOS v3.0
 19424                                  
 19425                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1379h
 19426                                  
 19427                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 19428                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1DB7h
 19429                                  
 19430                                  ; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19431                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 2361h
 19432                                  
 19433                                  ; ---------------------------------------------------------------------------
 19434                                  
 19435                                  ; MSDOS 6.0
 19436                                  ;***	Version - display DOS version
 19437                                  ;
 19438                                  ;	SYNTAX	ver [/debug]
 19439                                  ;
 19440                                  ;		/debug - display additional DOS configuration info
 19441                                  ;
 19442                                  ;	ENTRY	command-line tail is in PSP
 19443                                  ;
 19444                                  ;	EXIT	if successful, nothing
 19445                                  ;		if parse fails,
 19446                                  ;		  parse error message is set up (for Std_EPrintf)
 19447                                  ;		    AX = system parser error code
 19448                                  ;		    DX = ptr to message block
 19449                                  ;		  we jump to CError
 19450                                  ;
 19451                                  ;	EFFECTS
 19452                                  ;	  If parse fails, a parse error message is displayed.
 19453                                  ;	  Otherwise, version message is displayed.
 19454                                  ;	  If /debug is specified, additional DOS info is displayed.
 19455                                  
 19456                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19457                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19458                                  VERSION:
 19459                                  	;assume	ds:TRANGROUP,es:TRANGROUP
 19460                                  
 19461                                  ;	Parse command line for /debug switch.
 19462                                  
 19463 0000225B BE8100                  	mov	si,81h			; DS:SI = ptr to command tail
 19464 0000225E BF[EC98]                	mov	di,PARSE_VER		; ES:DI = ptr to parse block
 19465 00002261 31C9                    	xor	cx,cx			; CX = # positional param's found
 19466 00002263 E8A504                  	call	Parse_With_Msg
 19467                                  
 19468 00002266 B301                    	mov	bl,1			; BL = flag = /debug present
 19469                                  	;cmp	ax,RESULT_NO_ERROR
 19470                                  	;cmp	ax,0
 19471                                  	;je	short verPrintVer	; something parsed - must be /debug
 19472 00002268 09C0                    	or	ax,ax
 19473 0000226A 740A                    	jz	short verPrintVer 
 19474 0000226C FECB                    	dec	bl			; BL = flag = no /debug present
 19475                                  	;cmp	ax,END_OF_LINE ; -1
 19476 0000226E 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 19477                                  
 19478                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 19479                                  %if 0
 19480                                  	je	short verPrintVer	; reached end of line - ok
 19481                                  %else
 19482 00002271 7414                    	je	short not_truever_sw
 19483                                  %endif
 19484                                  
 19485                                  ;	The parse failed. Error message has been set up.
 19486                                  
 19487 00002273 E92E0C                  	jmp	cerror
 19488                                  
 19489                                  verPrintVer:
 19490                                  
 19491                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 19492                                  %if 1
 19493                                  check_t_switch:
 19494 00002276 813E[89AA][0C99]        	cmp	word [PARSE1_SYN],SLASH_T_SYN ; "/T" ; /t switch
 19495 0000227C 7509                    	jne	short not_truever_sw
 19496 0000227E BA[3099]                	mov	dx,RD4CMD_VER_MSG
 19497 00002281 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9 ; print the message
 19498 00002283 CD21                    	int	21h
 19499 00002285 EB43                    	jmp	short verDone
 19500                                  not_truever_sw:
 19501                                  %endif
 19502 00002287 53                      	push	bx			; save /debug flag
 19503 00002288 E89808                  	call	CRLF2
 19504 0000228B E83F00                  	call	PRINT_VERSION
 19505 0000228E E89208                  	call	CRLF2
 19506 00002291 5B                      	pop	bx   			; BL = /debug flag
 19507 00002292 08DB                    	or	bl,bl
 19508 00002294 7434                    	jz	short verDone		; /debug is false - we're done
 19509                                  
 19510                                  ;*	For /debug, display DOS internal revision and DOS location
 19511                                  ;	(low memory, HMA, or ROM).
 19512                                  
 19513                                  ;	Bugbug:	use symbols for bitmasks below.
 19514                                  
 19515                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) + 6 ; M013
 19516 00002296 B80633                  	mov	ax,3306h
 19517 00002299 CD21                    	int	21h
 19518                                  		; DOS - 5+ Get TRUE Version Number
 19519                                  		; (BL major, BH minor, DL revision, DH flags)
 19520 0000229B 88D0                    	mov	al,dl			;revision number in dl; M013
 19521 0000229D 88F7                    	mov	bh,dh			;flags in dh now; M013
 19522                                  ;M032	and	al,7			; AL = DOS internal revision
 19523 0000229F 3C19                    	cmp	al,'Z'-'A' ; 25	 ;M032	; revision in A-to-Z range?
 19524                                  	;jbe	short @f	 ;M032	; A-to-Z revision ok
 19525 000022A1 7602                    	jbe	short ver1
 19526 000022A3 B0E9                    	mov	al,'*'-'A' ; -23 ;M032	; beyond Z, just say revision *
 19527                                  ;@@:
 19528                                  ver1:
 19529 000022A5 0441                    	add	al,'A' ; 41h		; AL = DOS internal rev letter
 19530 000022A7 A2[48A1]                	mov	[One_Char_Val],al
 19531 000022AA BA[4C94]                	mov	dx,dosrev_ptr
 19532 000022AD E87D32                  	call	std_printf		; print DOS internal revision
 19533                                  
 19534 000022B0 B104                    	mov	cl,4
 19535 000022B2 D2EF                    	shr	bh,cl			; CY = DOS in ROM
 19536 000022B4 7209                    	jc	short verRom
 19537 000022B6 D0EF                    	shr	bh,1			; CY = DOS in HMA
 19538 000022B8 720A                    	jc	short verHma
 19539                                  
 19540                                  ;	DOS isn't in ROM or HMA, so it must be in lower memory.
 19541                                  
 19542                                  	;mov	dx,offset TRANGROUP:DosLow_Ptr
 19543 000022BA BA[6094]                	mov	dx,DosLow_Ptr
 19544 000022BD EB08                    	jmp	short verPrintLoc
 19545                                  verRom: 
 19546                                  	;mov	dx,offset TRANGROUP:DosRom_Ptr
 19547 000022BF BA[5A94]                	mov	dx,DosRom_Ptr
 19548 000022C2 EB03                    	jmp	short verPrintLoc
 19549                                  verHma: 
 19550                                  	;mov	dx,offset TRANGROUP:DosHma_Ptr
 19551 000022C4 BA[5D94]                	mov	dx,DosHma_Ptr
 19552                                  verPrintLoc:
 19553 000022C7 E86332                  	call	std_printf
 19554                                  verDone:
 19555 000022CA E95608                  	jmp	CRLF2
 19556                                  
 19557                                  ; 21/02/2023
 19558                                  ;	; MSDOS 3.3
 19559                                  ;VERSION:
 19560                                  ;	call	CRLF2
 19561                                  ;	call	PRINT_VERSION
 19562                                  ;	jmp	CRLF2
 19563                                  
 19564                                  ; =============== S U B	R O U T	I N E =======================================
 19565                                  
 19566                                  	; 21/02/2023 - Retro DOS v4.0
 19567                                  PRINT_VERSION:
 19568                                  	;mov	ah,GET_VERSION ; 30h
 19569 000022CD B430                    	mov	ah,30h
 19570 000022CF CD21                    	int	21h	; DOS -	GET DOS	VERSION
 19571                                  			; Return: AL = major version number (00h for DOS 1.x)
 19572 000022D1 50                      	push	ax
 19573 000022D2 30E4                    	xor	ah,ah
 19574 000022D4 A3[44A1]                	mov	[Major_Ver_Num],ax
 19575 000022D7 58                      	pop	ax
 19576 000022D8 86E0                    	xchg	ah,al
 19577 000022DA 30E4                    	xor	ah,ah
 19578 000022DC A3[46A1]                	mov	[Minor_Ver_Num],ax
 19579 000022DF BA[D592]                	mov	dx,VerMes_Ptr
 19580 000022E2 E94832                  	jmp	std_printf
 19581                                  
 19582                                  ; =============== S U B	R O U T	I N E =======================================
 19583                                  
 19584                                  	; 21/02/2023 - Retro DOS v4.0
 19585                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19586                                  PRINT_PROMPT:
 19587 000022E5 1E                      	push	ds
 19588 000022E6 0E                      	push	cs
 19589 000022E7 1F                      	pop	ds		; Make sure DS is in TRANGROUP
 19590 000022E8 06                      	push	es
 19591 000022E9 E87805                  	call	find_prompt	; Look for prompt string
 19592 000022EC 7206                    	jc	short PP0	; Can't find one	
 19593 000022EE 26803D00                	cmp	byte [es:di],0
 19594 000022F2 7524                    	jnz	short PP1
 19595                                  PP0:				; Use default prompt
 19596 000022F4 E86700                  	call	PRINT_DRIVE
 19597 000022F7 B03E                    	mov	al,'>'
 19598                                  	;mov	al,SYM
 19599 000022F9 E85300                  	call	PRINT_CHAR
 19600 000022FC EB36                    	jmp	short PP5
 19601                                  ;PP1:
 19602                                  ;	mov	al,[es:di]	; Get a char
 19603                                  ;	inc	di
 19604                                  ;	or	al,al
 19605                                  ;	jz	short PP5	; Nul terminated
 19606                                  ;	; 21/02/2023
 19607                                  ;	cmp	al,'$' ; 24h
 19608                                  ;	;cmp	al,[DOLLAR]	; Meta character
 19609                                  ;	jz	short PP2	; Nope
 19610                                  ;	call	PRINT_CHAR
 19611                                  ;	jmp	short PP1
 19612                                  PP2:
 19613 000022FE 268A05                  	mov	al,[es:di]
 19614 00002301 47                      	inc	di
 19615                                  	;mov	bx,CLSSTRING+2	; "[2J"
 19616 00002302 BB[BA95]                	mov	bx,PROMPT_TABLE-3
 19617 00002305 08C0                    	or	al,al
 19618 00002307 742B                    	jz	short PP5
 19619                                  PP3:
 19620 00002309 83C303                  	add	bx,3
 19621                                  	; 21/02/2023
 19622 0000230C E82C06                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 19623                                  	;call	UPCONV_MAPCALL  ; MSDOS 3.3
 19624 0000230F 3A07                    	cmp	al,[bx]
 19625 00002311 7416                    	jz	short PP4
 19626 00002313 803F00                  	cmp	byte [bx],0
 19627 00002316 75F1                    	jnz	short PP3
 19628                                  	;jmp	short PP1
 19629                                  	; 21/02/2023
 19630                                  PP1:
 19631 00002318 268A05                  	mov	al,[es:di]	; Get a char
 19632 0000231B 47                      	inc	di
 19633 0000231C 08C0                    	or	al,al
 19634 0000231E 7414                    	jz	short PP5	; Nul terminated
 19635                                  	; 21/02/2023
 19636 00002320 3C24                    	cmp	al,'$' ; 24h
 19637                                  	;cmp	al,[DOLLAR]	; Meta character
 19638 00002322 74DA                    	jz	short PP2	; Nope
 19639 00002324 E82800                  	call	PRINT_CHAR
 19640 00002327 EBEF                    	jmp	short PP1
 19641                                  PP4:
 19642 00002329 06                      	push	es
 19643 0000232A 57                      	push	di
 19644 0000232B 0E                      	push	cs
 19645 0000232C 07                      	pop	es
 19646 0000232D FF5701                  	call	word [bx+1]
 19647 00002330 5F                      	pop	di
 19648 00002331 07                      	pop	es
 19649 00002332 EBE4                    	jmp	short PP1
 19650                                  PP5:
 19651 00002334 07                      	pop	es		; Restore segments
 19652 00002335 1F                      	pop	ds
 19653 00002336 C3                      	retn
 19654                                  
 19655                                  ; ---------------------------------------------------------------------------
 19656                                  
 19657                                  PRINT_BACK:
 19658                                  	; 21/02/2023
 19659 00002337 BA[D293]                	mov	dx,dback_ptr
 19660 0000233A E9F031                  	jmp	std_printf
 19661                                  
 19662                                  ; ---------------------------------------------------------------------------
 19663                                  
 19664                                  PRINT_EQ:
 19665 0000233D B03D                    	mov	al,'='
 19666 0000233F EB0E                    	jmp	short PRINT_CHAR
 19667                                  
 19668                                  ; ---------------------------------------------------------------------------
 19669                                  
 19670                                  PRINT_ESC:
 19671 00002341 B01B                    	mov	al,1Bh
 19672 00002343 EB0A                    	jmp	short PRINT_CHAR
 19673                                  
 19674                                  ; ---------------------------------------------------------------------------
 19675                                  
 19676                                  	; 21/02/2023
 19677                                  PRINT_G:
 19678                                  	;mov	al,[RABRACKET]
 19679 00002345 B03E                    	mov	al,'>' ; 3Eh
 19680 00002347 EB06                    	jmp	short PRINT_CHAR
 19681                                  
 19682                                  ; ---------------------------------------------------------------------------
 19683                                  
 19684                                  	; 21/02/2023
 19685                                  PRINT_L:
 19686                                  	;mov	al,[LABRACKET]
 19687 00002349 B03C                    	mov	al,'<' ; 3Ch
 19688 0000234B EB02                    	jmp	short PRINT_CHAR
 19689                                  
 19690                                  ; ---------------------------------------------------------------------------
 19691                                  
 19692                                  	; 21/02/2023
 19693                                  Print_B:
 19694                                  	;mov	al,[VBAR]
 19695 0000234D B07C                    	mov	al,'|' ; 7Ch
 19696                                  
 19697                                  ; =============== S U B	R O U T	I N E =======================================
 19698                                  
 19699                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19700                                  PRINT_CHAR:
 19701                                  	; MSDOS 6.0
 19702                                  
 19703                                  ;	Bugbug:	Why bother with ds,es here?
 19704                                  		
 19705 0000234F 06                      	push	es
 19706 00002350 1E                      	push	ds
 19707 00002351 07                      	pop	es
 19708 00002352 57                      	push	di
 19709 00002353 52                      	push	dx
 19710 00002354 88C2                    	mov	dl,al		;AC000; Get char into al
 19711                                  	;mov	ah,STD_CON_OUTPUT
 19712                                  				;AC000; print the char to stdout
 19713 00002356 B402                    	mov	ah,2
 19714 00002358 CD21                    	int	21h		;AC000;
 19715 0000235A 5A                      	pop	dx
 19716 0000235B 5F                      	pop	di
 19717 0000235C 07                      	pop	es
 19718 0000235D C3                      	retn
 19719                                  
 19720                                  ; ---------------------------------------------------------------------------
 19721                                  
 19722                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19723                                  PRINT_DRIVE:
 19724                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 19725 0000235E B419                    	mov	ah,19h
 19726 00002360 CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 19727 00002362 0441                    	add	al,'A'
 19728                                  	;add	al,[CAPITAL_A]
 19729                                  	;call	PRINT_CHAR
 19730                                  	;retn
 19731                                  	; 21/02/2023
 19732 00002364 EBE9                    	jmp	short PRINT_CHAR
 19733                                  
 19734                                  ; ---------------------------------------------------------------------------
 19735                                  
 19736                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19737                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EB6h
 19738                                  
 19739                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19740                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2460h
 19741                                  
 19742                                  build_dir_for_prompt:
 19743 00002366 30D2                    	xor	dl,dl
 19744 00002368 BE[50A0]                	mov	si,BWDBUF
 19745 0000236B 89F7                    	mov	di,si
 19746 0000236D A0[299E]                	mov	al,[CURDRV]
 19747 00002370 0441                    	add	al,'A'
 19748 00002372 B43A                    	mov	ah,':'
 19749 00002374 AB                      	stosw
 19750 00002375 A0[1A9E]                	mov	al,[DIRCHAR]
 19751 00002378 AA                      	stosb
 19752 00002379 87F7                    	xchg	si,di
 19753 0000237B 893E[37A1]              	mov	[string_ptr_2],di
 19754                                  	;mov	ah,CURRENT_DIR ; 47h
 19755 0000237F B447                    	mov	ah,47h
 19756 00002381 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 19757                                  			; DL = drive (0=default,1=A,etc.)
 19758                                  			; DS:SI	points to 64-byte buffer area
 19759                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 19760 00002383 BA[BA93]                	mov	dx,string_buf_ptr
 19761 00002386 7303                    	jnc	short doprint
 19762                                  	;mov	dx,BADCURDRVPTR	; MSDOS 3.3
 19763 00002388 BA[8292]                	mov	dx,BADCURDRV
 19764                                  doprint:
 19765                                  	;call	std_printf
 19766                                  	;retn
 19767 0000238B E99F31                  	jmp	std_printf
 19768                                  
 19769                                  ; =============== S U B	R O U T	I N E =======================================
 19770                                  
 19771                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19772                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EDFh
 19773                                  
 19774                                  build_dir_for_chdir:
 19775 0000238E E80D00                  	call	build_dir_string
 19776 00002391 BA[50A0]                	mov	dx,DIRBUF
 19777 00002394 8916[37A1]              	mov	[string_ptr_2],dx
 19778                                  	;mov	dx,offset trangroup:string_buf_ptr ; MSDOS 6.0
 19779                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 19780 00002398 BA[BA93]                	mov	dx,string_buf_ptr
 19781                                  	;call	std_printf
 19782                                  	;retn
 19783                                  	; 21/02/2023
 19784                                  	;jmp	short doprint
 19785 0000239B E98F31                  	jmp	std_printf
 19786                                  
 19787                                  
 19788                                  ; =============== S U B	R O U T	I N E =======================================
 19789                                  
 19790                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19791                                  build_dir_string:
 19792 0000239E 8A165C00                	mov	dl,[FCB] ; mov dl,[5Ch]
 19793 000023A2 88D0                    	mov	al,dl
 19794 000023A4 0440                    	add	al,'@'	; 40h
 19795 000023A6 3C40                    	cmp	al,'@'
 19796 000023A8 7506                    	jne	short gotdrive
 19797 000023AA 0206[299E]              	add	al,[CURDRV]
 19798 000023AE FEC0                    	inc	al
 19799                                  gotdrive:
 19800 000023B0 50                      	push	ax
 19801 000023B1 BE[53A0]                	mov	si,BWDBUF+3
 19802                                  	;mov	ah,CURRENT_DIR ; 47h
 19803 000023B4 B447                    	mov	ah,47h
 19804 000023B6 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 19805                                  			; DL = drive (0=default,1=A,etc.)
 19806                                  			; DS:SI	points to 64-byte buffer area
 19807 000023B8 7305                    	jnc	short dpbisok
 19808 000023BA 0E                      	push	cs
 19809 000023BB 1F                      	pop	ds
 19810 000023BC E9ED09                  	jmp	DRVBAD
 19811                                  dpbisok:
 19812 000023BF BF[50A0]                	mov	di,BWDBUF
 19813 000023C2 89FA                    	mov	dx,di
 19814 000023C4 58                      	pop	ax
 19815 000023C5 B43A                    	mov	ah,':'
 19816 000023C7 AB                      	stosw
 19817 000023C8 A0[1A9E]                	mov	al,[DIRCHAR]
 19818 000023CB AA                      	stosb
 19819 000023CC C3                      	retn
 19820                                  
 19821                                  ; ---------------------------------------------------------------------------
 19822                                  
 19823                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19824                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1F1Fh
 19825                                  
 19826                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19827                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:24C9h
 19828                                  PATH:
 19829                                  	; MSDOS 6.0
 19830 000023CD 30C0                    	xor	al,al			;AN049; Set up holding buffer
 19831 000023CF BF[439B]                	mov	di,SRCXNAME		;AN049;  for PATH while parsing
 19832 000023D2 AA                      	stosb				;AN049; Initialize PATH to null
 19833 000023D3 4F                      	dec	di			;AN049; point to the start of buffer
 19834 000023D4 E8DE0C                  	call	PGETARG 		; Pre scan for arguments
 19835 000023D7 7460                    	jz	short disppath		; Print the current path
 19836                                  	;cmp	al,semicolon		;AC049; NUL path argument?
 19837 000023D9 3C3B                    	cmp	al,';' ; 3Bh
 19838 000023DB 7503                    	jne	short pathslp 		;AC049;
 19839 000023DD 46                      	inc	si			;AN049; point past semicolon
 19840 000023DE EB1B                    	jmp	short scan_white	;AC049; Yes - make sure nothing else on line
 19841                                  pathslp:					; Get the user specified path
 19842 000023E0 AC                      	lodsb				; Get a character
 19843 000023E1 3C0D                    	cmp	al,0Dh
 19844                                  	;cmp	al,END_OF_LINE_IN	;AC049; Is it end of line?
 19845 000023E3 7434                    	je	short path_eol		;AC049; yes - end of command
 19846 000023E5 E82905                  	call	testkanj		;See if DBCS
 19847 000023E8 7405                    	jz	short notkanj2		;No - continue
 19848 000023EA AA                      	stosb				;AC049; Yes - store the first byte
 19849 000023EB AC                      	lodsb				;skip second byte of DBCS
 19850                                  path_hold:				;AN049;
 19851 000023EC AA                      	stosb				;AC049; Store a byte in the PATH buffer
 19852 000023ED EBF1                    	jmp	short pathslp		;continue parsing
 19853                                  notkanj2:
 19854 000023EF E84905                  	call	UPCONV			;upper case the character
 19855                                  
 19856 000023F2 3C3B                    	cmp	al,';' ; 3Bh
 19857                                  	;cmp	al,semicolon		;AC049; ';' not a delimiter on PATH
 19858 000023F4 74F6                    	je	short path_hold		;AC049; go store it
 19859 000023F6 E83F07                  	call	DELIM			;delimiter?
 19860 000023F9 75F1                    	jnz	short path_hold		;AC049; no - go store character
 19861                                  scan_white:				;AN049; make sure were at EOL
 19862 000023FB AC                      	lodsb				;AN049; get a character
 19863 000023FC 3C0D                    	cmp	al,0Dh
 19864                                  	;cmp	al,END_OF_LINE_IN	;AN049; end of line?
 19865 000023FE 7419                    	je	short path_eol		;AN049; yes - go set path
 19866 00002400 3C20                    	cmp	al,' ' ; 20h
 19867                                  	;cmp	al,blank		;AN049; whitespace?
 19868 00002402 74F7                    	je	short scan_white	;AN049; yes - continue scanning
 19869                                  	;cmp	al,9
 19870 00002404 3C09                    	cmp	al,tab_chr ; 9		;AN049; whitespace?
 19871 00002406 74F3                    	je	short scan_white	;AN049; yes - continue scanning
 19872                                  
 19873 00002408 BA[F391]                	mov	dx,extend_buf_ptr 	;AN049; no - set up error message
 19874                                  	;mov	word [extend_buf_ptr],1	;AN049; get "Too many parameters" message number
 19875 0000240B C706[F391]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 19876                                  	;mov	byte [msg_disp_class],2		
 19877                                  					;AN049; set up parse error msg class
 19878 00002411 C606[F191]02            	mov	byte [msg_disp_class],parse_msg_class
 19879 00002416 E98B0A                  	jmp	cerror			;AN049;
 19880                                  path_eol:				;AN049; Parsing was clean
 19881 00002419 30C0                    	xor	al,al			;AN049; null terminate the PATH
 19882 0000241B AA                      	stosb				;AN049;    buffer
 19883 0000241C E84004                  	call	find_path		;AN049; Find PATH in environment
 19884 0000241F E81404                  	call	delete_path		;AC049; Delete any offending name
 19885 00002422 E8CA04                  	call	scan_double_null	;AC049; Scan to end of environment
 19886 00002425 E89A04                  	call	move_name		;AC049; move in PATH=
 19887 00002428 BE[439B]                	mov	si,SRCXNAME		;AN049; Set up source as PATH buffer
 19888                                  store_path:				;AN049; Store the PATH in the environment
 19889 0000242B AC                      	lodsb				;AN049; Get a character
 19890                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN049; null character?
 19891 0000242C 20C0                    	and	al,al ; al=0 ?
 19892 0000242E 7405                    	jz	short got_paths		;AN049; yes - exit
 19893 00002430 E82A05                  	call	store_char		;AN049; no - store character
 19894 00002433 EBF6                    	jmp	short store_path	;AN049; continue
 19895                                  got_paths:				;AN049; we're finished
 19896 00002435 31C0                    	xor	ax,ax			;	null terminate the PATH in
 19897 00002437 AB                      	stosw				;    	the environment
 19898 00002438 C3                      	retn
 19899                                  disppath:
 19900 00002439 E82304                  	call	find_path		;AN049;
 19901 0000243C E80300                  	call	print_path
 19902                                  	;call	CRLF2
 19903                                  	;retn
 19904                                  	; 21/02/2023
 19905 0000243F E9E106                  	jmp	CRLF2
 19906                                  
 19907                                  ; =============== S U B	R O U T	I N E =======================================
 19908                                  
 19909                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19910                                  print_path:
 19911 00002442 26803D00                	cmp	byte [es:di],0
 19912 00002446 750A                    	jnz	short path1
 19913                                  path0:
 19914 00002448 BA[4893]                	mov	dx,NULLPATH_PTR
 19915 0000244B 0E                      	push	cs
 19916 0000244C 07                      	pop	es
 19917 0000244D 0E                      	push	cs
 19918 0000244E 1F                      	pop	ds
 19919 0000244F E9DB30                  	jmp	std_printf
 19920                                  path1:
 19921 00002452 06                      	push	es
 19922 00002453 1F                      	pop	ds
 19923 00002454 83EF05                  	sub	di,5
 19924 00002457 89FE                    	mov	si,di
 19925 00002459 E8AD04                  	call	SCASB2		; Look for null
 19926                                  	;cmp	cx,0FFh ; 255
 19927                                  	; 21/02/2023
 19928                                  	;ch = 0
 19929 0000245C 80F9FF                  	cmp	cl,255
 19930 0000245F 74E7                    	je	short path0
 19931 00002461 0E                      	push	cs
 19932 00002462 07                      	pop	es
 19933 00002463 BF[B3A0]                	mov	di,Arg_Buf
 19934                                  	;mov	dx,100h ; 256
 19935                                  	;sub	dx,cx
 19936                                  	;xchg	dx,cx
 19937                                  	; 21/02/2023
 19938 00002466 F6D9                    	neg	cl ; 256-cl
 19939 00002468 F3A4                    	rep	movsb
 19940 0000246A BA[9093]                	mov	dx,arg_buf_ptr
 19941 0000246D 0E                      	push	cs
 19942 0000246E 1F                      	pop	ds
 19943 0000246F E9BB30                  	jmp	std_printf
 19944                                  
 19945                                  ; ---------------------------------------------------------------------------
 19946                                  
 19947                                  ; ****************************************************************
 19948                                  ; *
 19949                                  ; * ROUTINE:	 CLS
 19950                                  ; *
 19951                                  ; * FUNCTION:	 Clear the screen using INT 10h. If ANSI.SYS is
 19952                                  ; *		 installed, send a control string to clear the
 19953                                  ; *		 screen.
 19954                                  ; *
 19955                                  ; * INPUT:	 command line at offset 81H
 19956                                  ; *
 19957                                  ; * OUTPUT:	 none
 19958                                  ; *
 19959                                  ; ****************************************************************
 19960                                  
 19961                                  	; MSDOS 6.0
 19962                                  
 19963                                  ANSI_installed	equ 0FFh
 19964                                  
 19965                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19966                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19967                                  CLS:
 19968                                  	;;mov	ah,Mult_ANSI		;AN000; see if ANSI.SYS installed
 19969                                  	;mov	ah,1Ah
 19970                                  	;mov	al,0			;AN000;
 19971 00002472 B8001A                  	mov	ax,1A00h
 19972 00002475 CD2F                    	int	2Fh			;AN000;
 19973                                  		; - Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK
 19974                                  		; Return: AL = FFh if installed
 19975 00002477 3CFF                    	cmp	al,ANSI_installed	;AN000;
 19976 00002479 7429                    	je	short ansicls 		;AN000; installed - go do ANSI CLS
 19977                                  
 19978                                  check_lines:
 19979                                  	;mov	ax,(IOCTL SHL 8) + generic_ioctl_handle ; 440Ch
 19980 0000247B B80C44                  	mov	ax,440Ch		;AN000; get lines per page on display
 19981                                  	;mov	bx,stdout		;AN000; lines for stdout
 19982 0000247E BB0100                  	mov	bx,1   ; handle
 19983                                  	;;mov	ch,ioc_sc		;AN000; type is display
 19984                                  	;mov	ch,3   ; CON device	
 19985                                  	;;mov	cl,get_generic		;AN000; get information
 19986                                  	;mov	cl,7Fh ; minor function, get display info
 19987                                  	; 25/04/2023
 19988 00002481 B97F03                  	mov	cx,037Fh
 19989 00002484 BA[9EA2]                	mov	dx,Display_Ioctl	;AN000;
 19990 00002487 CD21                    	int	21h			;AN000;
 19991 00002489 720A                    	jc	short no_variable	;AN000; function had error, use default
 19992                                  		; 21/02/2023
 19993                                  		; ds:dx = parameter block
 19994                                  		; --- https://stanislavs.org/helppc/int_21-44-c.html ---
 19995                                  		; offset 00h  byte  level (0 for DOS 4.0)
 19996                                  		;   	 01h  byte  reserved
 19997                                  		;   	 02h  word  length of following data
 19998                                  		;   	 04h  word  control flags
 19999                                  		;	       bit 0 set for blink, clear for intensity
 20000                                  		;	       bits 1 to 15 reserved
 20001                                  		;   	 06h  byte  mode type (1=text, 2=graphics)
 20002                                  		;   	 07h  byte  reserved
 20003                                  		;   	 08h  word  colors; 0=monochrome, n=bits per pixel
 20004                                  		;   	 0Ah  word  pixel columns
 20005                                  		;   	 0Ch  word  pixel rows
 20006                                  		;   	 0Eh  word  character columns
 20007                                  		;   	 10h  word  character rows
 20008                                  	
 20009                                  	;mov	ax,[LinPerPag] ; [Display_Ioctl+10h]
 20010                                  	;				;AN000; get number of rows returned
 20011                                  	;mov	dh,al			;AN000; set number of rows
 20012                                  	;mov	ax,[display_width] ; [Display_Ioctl+0Eh]
 20013                                  	;				;AN000; get number of columns returned
 20014                                  	;mov	dl,al			;AN000; set number of columns
 20015                                  	; 21/02/2023
 20016 0000248B 8A16[ACA2]              	mov	dl,[display_width]
 20017 0000248F 8A36[AEA2]              	mov	dh,[LinPerPag]
 20018 00002493 EB3B                    	jmp	short regcls		;AN000; go do cls
 20019                                  
 20020                                  no_variable:
 20021                                  	;;mov	bx,stdout		;AC000; set handle as stdout
 20022                                  	;mov	bx,1
 20023                                  	; bx = 1
 20024                                  	;mov	ax,IOCTL SHL 8		;AC000; do ioctl - get device info
 20025 00002495 B80044                  	mov	ax,4400h
 20026 00002498 CD21                    	int	21h			;AC000;
 20027 0000249A F6C280                  	test	dl,80h
 20028                                  	;test	dl,devid_ISDEV		;AC000; is handle a device
 20029 0000249D 7405                    	jz	short ansicls 		;AC000; If a file put out ANSI
 20030 0000249F F6C210                  	test	dl,10h
 20031                                  	;test	dl,devid_SPECIAL	;AC000;
 20032 000024A2 7505                    	jnz	short cls_normal	;AC000; If not special CON, do ANSI
 20033                                  
 20034                                  ansicls:
 20035 000024A4 E85200                  	call	ansi_cls		;AN000; clear the screen
 20036 000024A7 EB2C                    	jmp	short cls_ret		;AN000; exit
 20037                                  
 20038                                  ; Get video mode
 20039                                  
 20040                                  cls_normal:				;AC000;
 20041                                  	;mov	ah,get_video_state	;AC000; set up to get video state
 20042 000024A9 B40F                    	mov	ah,0Fh
 20043                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 20044 000024AB CD10                    	int	10h
 20045 000024AD 3C03                    	cmp	al,3
 20046                                  	;cmp	al,video_alpha		;AC000; see if in text mode
 20047 000024AF 760A                    	jbe	short DoAlpha
 20048 000024B1 3C07                    	cmp	al,7
 20049                                  	;cmp	al,video_bw		;AC000; see if black & white card
 20050 000024B3 7406                    	je	short DoAlpha
 20051                                  
 20052                                  ; We are in graphics mode. Bogus IBM ROM does not scroll correctly. We will
 20053                                  ; be just as bogus and set the mode that we just got. This will blank the
 20054                                  ; screen too.
 20055                                  
 20056                                  	;mov	ah,set_video_mode	;AC000; set video mode call
 20057 000024B5 B400                    	mov	ah,0
 20058                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 20059 000024B7 CD10                    	int	10h
 20060 000024B9 EB1A                    	jmp	short cls_ret		;AC000; exit
 20061                                  
 20062                                  DoAlpha:
 20063                                  
 20064                                  ; Get video mode and number of columns to scroll
 20065                                  
 20066                                  ;M01 - INT 10 Function 0F doesn't reliably return the number of rows on some
 20067                                  ;M01   adaptors. We circumvent this by reaching directly into the BIOS data
 20068                                  ;M01   area
 20069                                  ;M01   Commented out code here is the original
 20070                                  ;M01	mov	ah,get_video_state	;AC000; set up to get current video state
 20071                                  ;M01	int	video_io_int		;AC000; do int 10h - BIOS video IO
 20072                                  ;M01	mov	dl,ah
 20073                                  ;M01	mov	dh,linesperpage 	;AC000; have 25 rows on the screen
 20074                                  
 20075                                  ;M01   Following code lifted from a fix Compaq applied to ANSI
 20076                                  
 20077 000024BB 1E                      	push	ds
 20078                                  	;mov	ax,ROMBIOS_DATA 	; GET ROM Data segment	M01
 20079 000024BC B84000                  	mov	ax,40h
 20080 000024BF 8ED8                    	mov	ds,ax			;  *			M01
 20081                                  
 20082                                  	;mov	dx,[CRT_Cols]		; Get Columns - assume < 256 M01
 20083 000024C1 8A164A00                	mov	dl,[4Ah]
 20084                                  	;mov	dh,[CRT_Rows]		; GET MAX NUM OF ROWS	M01
 20085 000024C5 8A368400                	mov	dh,[84h]
 20086 000024C9 1F                      	pop	ds			;			M01
 20087                                  
 20088 000024CA 08F6                    	or	dh,dh			; Q:ZERO		M01
 20089 000024CC 7502                    	jnz	short regcls		;  *JMP IF NO		M01
 20090                                  
 20091                                  	;mov	dh,LINESPERPAGE 	; SET TO 24 ROWS	M01
 20092                                  	; 25/04/2023
 20093 000024CE B619                    	mov	dh,25
 20094                                  regcls:
 20095 000024D0 FEC6                    	inc	dh			; height+1		M018
 20096 000024D2 E80100                  	call	reg_cls 		; go clear the screen
 20097                                  cls_ret:
 20098 000024D5 C3                      	retn				; exit
 20099                                  
 20100                                  ; ---------------------------------------------------------------------------
 20101                                  
 20102                                  ; MSDOS 6.0
 20103                                  
 20104                                  ; ****************************************************************
 20105                                  ; *
 20106                                  ; * ROUTINE:	 REG_CLS
 20107                                  ; *
 20108                                  ; * FUNCTION:	 Clear the screen using INT 10H.
 20109                                  ; *
 20110                                  ; * INPUT:	 DL = NUMBER OF COLUMNS
 20111                                  ; *		 DH = NUMBER OF ROWS
 20112                                  ; *
 20113                                  ; * OUTPUT:	 none
 20114                                  ; *
 20115                                  ; ****************************************************************
 20116                                  
 20117                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20118                                  reg_cls:
 20119                                  ; Set overscan to black.
 20120                                  
 20121 000024D6 FECE                    	dec	dh			; decrement rows and columns
 20122 000024D8 FECA                    	dec	dl			;  to zero base
 20123 000024DA 52                      	push	dx			; save rows,columns
 20124                                  	;mov	ah,set_color_palette	; set up to set the color to blank
 20125 000024DB B40B                    	mov	ah,0Bh
 20126 000024DD 31DB                    	xor	bx,bx
 20127                                  	;int	video_io_int		; do int 10h - BIOS video IO
 20128 000024DF CD10                    	int	10h
 20129 000024E1 5A                      	pop	dx			;  restore rows,colums
 20130                                  
 20131 000024E2 31C0                    	xor	ax,ax			; zero out ax
 20132 000024E4 89C1                    	mov	cx,ax			;  and cx
 20133                                  
 20134                                  ; Scroll active page
 20135                                  
 20136                                  	;mov	ah,scroll_video_page	; set up to scroll page up
 20137 000024E6 B406                    	mov	ah,6
 20138                                  	;mov	bh,video_attribute	; attribute for blank line
 20139 000024E8 B707                    	mov	bh,7
 20140 000024EA 30DB                    	xor	bl,bl			; set BL to 0
 20141                                  	;int	video_io_int		; do int 10h - BIOS video IO
 20142 000024EC CD10                    	int	10h
 20143                                  
 20144                                  ; Seek to cursor to 0,0
 20145                                  
 20146                                  ;M022 following two lines added
 20147                                  	;mov	ah,get_video_state	; get current video page in BH
 20148 000024EE B40F                    	mov	ah,0Fh
 20149                                  	;int	video_io_int
 20150 000024F0 CD10                    	int	10h
 20151                                  	;mov	ah,set_cursor_position	; set up to set cursor position
 20152 000024F2 B402                    	mov	ah,2
 20153 000024F4 31D2                    	xor	dx,dx			; row and column 0
 20154                                  ;M022	mov	bh,0
 20155                                  	;int	video_io_int		; do into 10h - BIOS video IO
 20156 000024F6 CD10                    	int	10h
 20157                                  
 20158 000024F8 C3                      	retn
 20159                                  
 20160                                  ; ---------------------------------------------------------------------------
 20161                                  
 20162                                  ; MSDOS 6.0
 20163                                  
 20164                                  ; ****************************************************************
 20165                                  ; *
 20166                                  ; * ROUTINE:	 ANSI_CLS
 20167                                  ; *
 20168                                  ; * FUNCTION:	 Clear the screen using by writing a control code
 20169                                  ; *		 to STDOUT.
 20170                                  ; *
 20171                                  ; * INPUT:	 none
 20172                                  ; *
 20173                                  ; * OUTPUT:	 none
 20174                                  ; *
 20175                                  ; ****************************************************************
 20176                                  
 20177                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20178                                  ansi_cls:			;AC000;
 20179 000024F9 BE[B895]                	mov	si,CLSSTRING
 20180                                  			; db 4,1Bh,'[2J'
 20181 000024FC AC                      	lodsb
 20182 000024FD 88C1                    	mov	cl,al	; al = 4
 20183 000024FF 30ED                    	xor	ch,ch
 20184                                  	;mov	ah,Raw_CON_IO
 20185 00002501 B406                    	mov	ah,6
 20186                                  clrloop:
 20187 00002503 AC                      	lodsb
 20188 00002504 88C2                    	mov	dl,al
 20189 00002506 CD21                    	int	21h
 20190                                  		; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
 20191 00002508 E2F9                    	loop	clrloop
 20192 0000250A C3                      	retn
 20193                                  
 20194                                  ;============================================================================
 20195                                  ; TCMD2B.ASM, MSDOS 6.0, 1991
 20196                                  ;============================================================================
 20197                                  ; 08/10/2018 - Retro DOS v3.0
 20198                                  
 20199                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 156Dh
 20200                                  
 20201                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 20202                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 206Bh
 20203                                  
 20204                                  ; ---------------------------------------------------------------------------
 20205                                  
 20206                                  ; ****************************************************************
 20207                                  ; *
 20208                                  ; * ROUTINE:	 CTTY - Change console
 20209                                  ; *
 20210                                  ; * SYNTAX:	 CTTY device
 20211                                  ; *
 20212                                  ; * FUNCTION:	 If a valid console device is specified, CTTY will
 20213                                  ; *		 duplicate the device handle to STDIN, STDOUT and
 20214                                  ; *		 STDERR. This routine returns to LODCOM1.
 20215                                  ; *
 20216                                  ; * INPUT:	 command line at offset 81H
 20217                                  ; *
 20218                                  ; * OUTPUT:	 none
 20219                                  ; *
 20220                                  ; ****************************************************************
 20221                                  
 20222                                  	; 21/02/2023 - Retro DOS v4.0
 20223                                  	; 08/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 20224                                  	; 10/06/2023
 20225                                  CTTY:
 20226                                  	; MSDOS 6.0
 20227 0000250B 1E                      	push	ds			;AN000; Get local ES
 20228 0000250C 07                      	pop	es			;AN000;
 20229 0000250D BE8100                  	mov	si,81h			;AC000; Get command argument for CTTY
 20230 00002510 BF[DA98]                	mov	di,PARSE_CTTY
 20231                                  					;AC000; Get address of PARSE_CTTY
 20232 00002513 31C9                    	xor	cx,cx			;AC000; clear cx,dx
 20233 00002515 31D2                    	xor	dx,dx			;AC000;
 20234 00002517 E84225                  	call	cmd_parse		;AC000; call parser
 20235                                  
 20236                                  	;cmp	ax,-1 ; 0FFFFh
 20237                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 20238                                  	;je	short ctty_error	;AN000; yes - error
 20239                                  	;;cmp	ax,RESULT_NO_ERROR ; 0	;AN000; did an error occur
 20240                                  	;and	ax,ax ; ax > 0 ?
 20241                                  	;jnz	short ctty_error	;AN000; YES -ERROR
 20242                                  	; 10/06/2023
 20243 0000251A 40                      	inc	ax  ; cmp ax,-1
 20244 0000251B 7434                    	jz	short ctty_error  ; 0FFFFh -> 0
 20245 0000251D 48                      	dec	ax  ; cmp ax,0
 20246 0000251E 7531                    	jnz	short ctty_error  ; 1 -> 0
 20247                                  	; ax = 0
 20248                                  
 20249 00002520 56                      	push	si			;AN000; save position in line
 20250 00002521 C536[8BAA]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 20251 00002525 BF[B8A1]                	mov	di,SrcBuf		;AN000; get address of srcbuf
 20252                                  ctty_move_filename:			;AN000; put filespec in srcbuf
 20253 00002528 AC                      	lodsb				;AN000; get a char from buffer
 20254 00002529 AA                      	stosb				;AN000; store in srcbuf
 20255                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN000; it char a terminator?
 20256 0000252A 08C0                    	or	al,al ; al = 0 ?
 20257 0000252C 75FA                    	jnz	short ctty_move_filename ; 26/04/2023
 20258                                  					;AN000; no - keep moving
 20259 0000252E 5E                      	pop	si			;AN000; get line position back
 20260 0000252F BF[DA98]                	mov	di,PARSE_CTTY		;AC000; Get address of PARSE_CTTY
 20261 00002532 E8C001                  	call	parse_check_eol 	;AN000; are we at end of line?
 20262                                  	;jz	short nocolon 		;AN000; yes - continue
 20263                                  	; 21/02/2023
 20264 00002535 751A                    	jnz	short ctty_error
 20265                                  ;ctty_error:
 20266                                  	;jmp	short isbaddev		;AC000; yes - exit
 20267                                  
 20268                                  	; 21/02/2023
 20269                                  	; MSDOS 3.3
 20270                                  	;call	SETPATH
 20271                                  	;dec	si
 20272                                  	;dec	si
 20273                                  	;cmp	byte [si],':'
 20274                                  	;jnz	short NOCOLON
 20275                                  	;mov	byte [si],0
 20276                                  nocolon:
 20277                                  	; 21/02/2023
 20278                                  	; MSDOS 6.0
 20279 00002537 BA[B8A1]                	mov	dx,SrcBuf
 20280                                  ;NOCOLON:
 20281                                  	; MSDOS 3.3 & MSDOS 6.0
 20282                                  	;;mov	ax,(OPEN SHL 8) OR 2 ; Read and write
 20283                                  	;mov	ax,(OPEN<<8)|2 ; 3D02h
 20284 0000253A B8023D                  	mov	ax,3D02h ; 21/02/2023
 20285 0000253D CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 20286                                  			; DS:DX	-> ASCIZ filename
 20287                                  			; AL = access mode
 20288                                  			; 2 - read & write
 20289 0000253F 7210                    	jc	short isbaddev
 20290 00002541 89C3                    	mov	bx,ax
 20291                                  	;mov	ax,IOCTL*256 ; 4400h
 20292 00002543 B80044                  	mov	ax,4400h
 20293 00002546 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 20294                                  			; BX = file or device handle
 20295 00002548 F6C280                  	test	dl,80h
 20296 0000254B 750C                    	jnz	short devisok
 20297                                  closedev:
 20298                                  	;mov	ah,CLOSE ; 3Eh ; Close initial handle
 20299 0000254D B43E                    	mov	ah,3Eh
 20300 0000254F CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20301                                  			; BX = file handle
 20302                                  ctty_error:
 20303                                  isbaddev:
 20304 00002551 BA[4E93]                	mov	dx,BADDEV_PTR
 20305 00002554 E8D62F                  	call	std_printf
 20306 00002557 EB40                    	jmp	short resret
 20307                                  
 20308                                  	;nop
 20309                                  devisok:
 20310                                  	; 21/02/2023
 20311                                  	; MSDOS 6.0
 20312 00002559 52                      	push	dx		;AN007; save device info
 20313                                  	; 08/06/2023
 20314 0000255A A1[D593]                	mov	ax,[acrlf_ptr]	;AN021; get message number for 0d, 0a
 20315                                  	;mov	dh,util_msg_class
 20316 0000255D B6FF                    	mov	dh,-1 ; 0FFh	;AN021; this is a utility message
 20317 0000255F 53                      	push	bx		;AN021; save handle
 20318 00002560 E8AF30                  	call	TSYSGETMSG	;AN021; get the address of the message
 20319 00002563 89F2                    	mov	dx,si		;AN021; get address into dx
 20320                                  	;mov	ax,(Write shl 8)
 20321 00002565 B80040                  	mov	ax,4000h	;AN007; write to device
 20322 00002568 B90200                  	mov	cx,2		;AN007; write two bytes
 20323 0000256B CD21                    	int	21h		;AN007;
 20324 0000256D 5B                      	pop	bx		;AN021; get back handle
 20325 0000256E 5A                      	pop	dx		;AN007; get back device info
 20326 0000256F 72DC                    	jc	short closedev	;AN007; if error, quit
 20327                                  
 20328                                  	; MSDOS 3.3 & MSDOS 6.0
 20329 00002571 30F6                    	xor	dh,dh
 20330 00002573 80CA03                  	or	dl,3
 20331                                  	;;mov	ax,(IOCTL SHL 8) OR 1
 20332                                  	;mov	ax,(IOCTL<<8)|1 ; 4401h
 20333 00002576 B80144                  	mov	ax,4401h
 20334 00002579 CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 20335                                  			; BX = device handle,DH = 0
 20336                                  			; DL = device information to set 
 20337                                  			;	(bits 0-7 from	function 0)
 20338 0000257B 53                      	push	bx
 20339 0000257C B90300                  	mov	cx,3
 20340 0000257F 31DB                    	xor	bx,bx
 20341                                  iclloop:			; Close basic handles
 20342                                  	;mov	ah,CLOSE ; 3Eh
 20343 00002581 B43E                    	mov	ah,3Eh
 20344 00002583 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20345                                  			; BX = file handle
 20346 00002585 43                      	inc	bx
 20347 00002586 E2F9                    	loop	iclloop
 20348 00002588 5B                      	pop	bx		; Get handle
 20349                                  	;mov	ah,XDUP ; 45h
 20350 00002589 B445                    	mov	ah,45h
 20351 0000258B CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20352                                  			; BX = file handle to duplicate
 20353                                  	;mov	ah,XDUP ; 45h
 20354 0000258D B445                    	mov	ah,45h
 20355 0000258F CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20356                                  			; BX = file handle to duplicate
 20357                                  	;mov	ah,XDUP ; 45h
 20358 00002591 B445                    	mov	ah,45h
 20359 00002593 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 20360                                  			; BX = file handle to duplicate
 20361                                  	;mov	ah,CLOSE ; 3Eh
 20362 00002595 B43E                    	mov	ah,3Eh
 20363 00002597 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 20364                                  			; BX = file handle
 20365                                  resret:
 20366 00002599 8E1E[159E]              	mov	ds,[RESSEG]
 20367 0000259D 1E                      	push	ds
 20368                                  	;mov	ax,[18h]
 20369 0000259E A11800                  	mov	ax,[PDB.JFN_TABLE] ; Get new 0 and 1
 20370 000025A1 A3[3D02]                	mov	[Io_Save],ax
 20371                                  	;;;mov	ax,31Eh ; MSDOS 3.3
 20372                                  	;;mov	ax,LODCOM1
 20373                                  	;;mov	ax,offset DATARES:TrnLodCom1_Trap  ; MSDOS 6.0
 20374                                  	;mov	ax,175h ; MSDOS 6.0
 20375 000025A4 B8[7400]                	mov	ax,TrnLodCom1_Trap
 20376 000025A7 50                      	push	ax
 20377                                  
 20378 000025A8 CB                      	retf		; Far return
 20379                                  
 20380                                  ; ---------------------------------------------------------------------------
 20381                                  
 20382                                  ;****************************************************************
 20383                                  ;*
 20384                                  ;* ROUTINE:	CHCP - Change code page internal command
 20385                                  ;*		(added DOS 3.30 07/21/86)
 20386                                  ;*
 20387                                  ;* SYNTAX:	CHCP [xxx]
 20388                                  ;*		where xxx is a valid code page
 20389                                  ;*
 20390                                  ;* FUNCTION:	If xxx is specified, CHCP will use INT 21H function
 20391                                  ;*		6402H to set the code page to xxxx. If no parameters
 20392                                  ;*		are specified, CHCP will use INT 21H function 6401H
 20393                                  ;*		to get global code page and display it to the user.
 20394                                  ;*
 20395                                  ;* INPUT:	command line at offset 81H
 20396                                  ;*
 20397                                  ;* OUTPUT:	none
 20398                                  ;*
 20399                                  ;****************************************************************
 20400                                  
 20401                                  NLSFUNC_installed equ  0FFh
 20402                                  set_global_cp	  equ  2
 20403                                  get_global_cp	  equ  1
 20404                                  
 20405                                  	; 21/02/2023 - Retro DOS v4.0
 20406                                  	; 09/06/2023 - Retro DOS v4.2 COMMAND.COM
 20407                                  	; 10/06/2023
 20408                                  CHCP:
 20409                                  	; MSDOS 6.0
 20410 000025A9 1E                      	push	ds		;AN000; Get local ES
 20411 000025AA 07                      	pop	es		;AN000;
 20412 000025AB BE8100                  	mov	si,81h		;AC000; Get command argument for CHCP
 20413 000025AE BF[E697]                	mov	di,PARSE_CHCP
 20414                                  				;AN000; Get address of PARSE_CHCP
 20415 000025B1 31C9                    	xor	cx,cx		;AC000; clear cx,dx
 20416 000025B3 31D2                    	xor	dx,dx		;AC000;
 20417 000025B5 E85301                  	call    Parse_With_Msg	;AC018; call parser
 20418                                  
 20419                                  	;cmp	ax,-1
 20420                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 20421                                  	;;jne	short setcp	;AC000; no go get number & set code page
 20422                                  	;je	short getcp	;AC000; yes - no parm - get code page
 20423                                  ;setcp:
 20424                                  	;;cmp	ax,0
 20425                                  	;;cmp	ax,RESULT_NO_ERROR
 20426                                  	;			;AN000; did we have an error?
 20427                                  	;;jne	short cp_error	;AC018; yes - go issue message
 20428                                  	;and	ax,ax ; ax > 0 ?
 20429                                  	;jnz	short cp_error	
 20430                                  	; 10/06/2023
 20431 000025B8 40                      	inc	ax  ; cmp ax,-1	
 20432 000025B9 745C                    	jz	short getcp ; 0FFFFh -> 0
 20433 000025BB 48                      	dec	ax  ; cmp ax,0
 20434 000025BC 7556                    	jnz	short cp_error ; 1 -> 0
 20435                                  	; ax = 0
 20436                                  
 20437                                  	;;push	cx		;AN000; save positional count
 20438                                  	;mov	bx,PARSE1_ADDR	;AN000; get number returned
 20439                                  	;;mov	cx,[bx]		;AN000;  into cx
 20440                                  	;;mov	[system_cpage],cx
 20441                                  	;			;AN000; save user input number
 20442                                  	;;pop	cx		;AC000; restore positional count
 20443                                  	;; 21/02/2023
 20444                                  	;mov	di,[bx]
 20445                                  	;mov	[system_cpage],di
 20446                                  	; 09/06/2023	
 20447 000025BE 8B1E[8BAA]              	mov	bx,[PARSE1_ADDR]
 20448 000025C2 891E[B1A0]              	mov	[system_cpage],bx
 20449                                  	;
 20450 000025C6 BF[E697]                	mov	di,PARSE_CHCP	;AN000; Get address of PARSE_CHCP
 20451 000025C9 E82901                  	call	parse_check_eol ;AN000; are we at end of line?
 20452 000025CC 7546                    	jnz	short cp_error	;AC000; no - exit
 20453                                  okset:
 20454                                  	;;mov	ah,NLSFUNC	;AN000; see if NLSFUNC installed
 20455                                  	;mov	ah,14h
 20456                                  	;mov	al,0		;AN000;
 20457 000025CE B80014                  	mov	ax,1400h
 20458 000025D1 CD2F                    	int	2Fh		;AN000;
 20459                                  	;cmp	al,0FFh
 20460 000025D3 3CFF                    	cmp	al,NLSFUNC_installed
 20461                                  				;AN000;
 20462 000025D5 7405                    	je	short got_NLS 	;AN000; Yes - continue
 20463 000025D7 BA[7C92]                	mov	dx,NLSFUNC_PTR
 20464                                  				;AN000; no - set up error message
 20465 000025DA EB38                    	jmp	short cp_error	;AN000; error exit
 20466                                  
 20467                                  	; 21/02/2023
 20468                                  got_NLS:
 20469                                  	; MSDOS 6.0
 20470 000025DC 8B1E[B1A0]              	mov	bx,[system_cpage]
 20471                                  				;AN000; get user input code page
 20472                                  ;SET_CP_TBL_NUM:
 20473                                  	;mov	[SYSTEM_CPAGE],bx ; MSDOS 3.3
 20474                                  	;
 20475                                  	; MSDOS 3.3 & MSDOS 6.0
 20476                                  	;;mov	ah,GETSETCDPG 	;get/set global code page function
 20477                                  	;mov	ah,66h
 20478                                  	;;mov	al,set_global_cp 
 20479                                  	;mov	al,2		;minor - set
 20480                                  	; 26/04/2023
 20481 000025E0 B80266                  	mov	ax,6602h
 20482 000025E3 CD21                    	int	21h
 20483                                  		; DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE
 20484                                  		; BX = active code page
 20485                                  		; DX = system code page (active page at boot time)
 20486                                  
 20487 000025E5 733F                    	jnc	short chcp_return
 20488                                  				;no error - exit
 20489                                  
 20490 000025E7 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2
 20491 000025EA 7515                    	jnz	short chcp_other_error
 20492                                  
 20493                                  	;mov	ah,GETEXTENDEDERROR ; 59h
 20494 000025EC B459                    	mov	ah,59h
 20495 000025EE 31DB                    	xor	bx,bx
 20496 000025F0 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 20497                                  			; BX = version code (0000h for DOS 3.x)
 20498                                  
 20499 000025F2 83F80D                  	cmp	ax,ERROR_INVALID_DATA ; 0Dh ; invalid code page
 20500 000025F5 7505                    	jne	short no_countrysys ; 26/04/2023
 20501                                  	;mov	dx,FNOTFOUNDPTR ; MSDOS 3.3
 20502 000025F7 BA[7F92]                	mov	dx,INV_CODE_PAGE
 20503                                  	;jmp	cerror
 20504 000025FA EB18                    	jmp	short cp_error
 20505                                  
 20506                                  	; 21/02/2023
 20507                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 20508                                  no_countrysys:
 20509                                  ;M045;	mov	byte [msg_disp_class],ext_msg_class	   
 20510                                  ;					;AN000; set up extended error msg class
 20511                                  ;M045;	mov	dx,extend_buf_ptr	;AC000; get extended message pointer
 20512                                  ;M045;	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND
 20513                                  					;AN000; get message number in control block
 20514 000025FC BA[6994]                	mov	dx,NoCntry_Ptr
 20515 000025FF EB13                    	jmp	short cp_error
 20516                                  
 20517                                  chcp_other_error:		; end of p716
 20518                                  	;mov	ah,GETEXTENDEDERROR ; 59h ;error - see what it is
 20519 00002601 B459                    	mov	ah,59h
 20520 00002603 31DB                    	xor	bx,bx
 20521 00002605 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 20522                                  			; BX = version code (0000h for DOS 3.x)
 20523 00002607 83F841                  	cmp	ax,65		;was it access denied?
 20524 0000260A 7505                    	jne	short none_set	;no - assume all failed
 20525 0000260C BA[6092]                	mov	dx,cp_not_all_ptr
 20526                                  				;set up message
 20527                                  	;jmp	cerror		;AC000; error exit
 20528 0000260F EB03                    	jmp     short cp_error
 20529                                  none_set:
 20530 00002611 BA[5292]                	mov	dx,cp_not_set_ptr
 20531                                  				;set up message
 20532                                  cp_error:
 20533 00002614 E98D08                  	jmp	cerror		;exit
 20534                                  getcp:
 20535                                  	;;mov	ah,GETSETCDPG ; 66h
 20536                                  	;mov	ah,66h		;get/set global code page function	
 20537                                  	;;mov	al,get_global_cp ; 1
 20538                                  	;mov	al,1		;minor - get
 20539                                  	; 26/04/2023
 20540 00002617 B80166                  	mov	ax,6601h
 20541 0000261A CD21                    	int	21h	; DOS -	3.3+ - GET GLOBAL CODE PAGE TABLE
 20542 0000261C 891E[B1A0]              	mov	[system_cpage],bx
 20543                                  				;get active cp for output
 20544 00002620 BA[6E92]                	mov	dx,cp_active_ptr
 20545 00002623 E8072F                  	call	std_printf	;print it out
 20546                                  chcp_return:
 20547 00002626 C3                      	retn
 20548                                  
 20549                                  ; ---------------------------------------------------------------------------
 20550                                  
 20551                                  ; ****************************************************************
 20552                                  ; *
 20553                                  ; * ROUTINE:	 TRUENAME
 20554                                  ; *
 20555                                  ; * FUNCTION:	 Entry point for the internal TRUENAME command.
 20556                                  ; *		 Parses the command line. If a path is found, set
 20557                                  ; *		 SRCXNAME to path. If only a drive letter is found,
 20558                                  ; *		 set SRCXNAME to the drive letter. If no path
 20559                                  ; *		 is found, set the path of SRCXNAME to dot (.) for
 20560                                  ; *		 current directory. Use the NAME TRANSLATE system
 20561                                  ; *		 call to get the real name and  then display the 
 20562                                  ; *		 real name. If an error occurs issue an error
 20563                                  ; *		 message and transfer control to  CERROR.
 20564                                  ; *
 20565                                  ; * INPUT:	 command line at offset 81H
 20566                                  ; *
 20567                                  ; * OUTPUT:	 none
 20568                                  ; *
 20569                                  ; ****************************************************************
 20570                                  
 20571                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20572                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2197h
 20573                                  
 20574                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20575                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2741h
 20576                                  
 20577                                  TRUENAME:				;AN000; TRUENAME entry point
 20578 00002627 1E                      	push	ds			;AN000; Get local ES
 20579 00002628 07                      	pop	es			;AN000;
 20580 00002629 BE8100                  	mov	si,81h			;AN000; Get command line
 20581 0000262C BF[4498]                	mov	di,PARSE_CHDIR		;AN000; Get address of PARSE_CHDIR
 20582 0000262F 31C9                    	xor	cx,cx			;AN000; clear cx,dx
 20583 00002631 31D2                    	xor	dx,dx			;AN000;
 20584 00002633 E8D500                  	call	Parse_With_Msg		;AC018; call parser
 20585                                  
 20586 00002636 BF[439B]                	mov	di,SRCXNAME		;AN000; get address of srcxname
 20587                                  	;cmp	ax,0FFFFh
 20588                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 20589                                  	;je	short tn_eol		;AN000; yes - go process
 20590                                  	;; 22/02/2023
 20591                                  	;;cmp	ax,0
 20592                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 20593                                  	;;jne	short tn_parse_error	;AN000; yes - go issue message
 20594                                  	;and	ax,ax ; ax = 0 ?
 20595                                  	;jnz	short tn_parse_error ; no, parse error	
 20596                                  	; 10/06/2023
 20597 00002639 40                      	inc	ax  ; 0FFFFh -> 0 ; cmp ax,0FFFFh
 20598 0000263A 7433                    	jz	short tn_eol ; ah = 0 ; *
 20599 0000263C 48                      	dec	ax  ; 1 -> 0 ; cmp ax, 0
 20600 0000263D 752D                    	jnz	short tn_parse_error
 20601                                  	
 20602                                  	;cmp	byte [PARSE1_TYPE],6
 20603 0000263F 803E[87AA]06            	cmp	byte [PARSE1_TYPE],result_drive
 20604                                  					;AN000; was a drive entered?
 20605                                  	;je	short tn_drive		;AN000; yes - go process
 20606                                  	;jmp	short tn_filespec	;AN000; nothing else - must be filespec
 20607                                  	; 23/02/2023
 20608 00002644 7512                    	jne	short tn_filespec
 20609                                  
 20610                                  ;tn_eol: 
 20611                                  ;	;mov	ah,0			;AN000; no parameters on line
 20612                                  ;	mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 20613                                  ;	;mov	al,dot_chr		;AN000;   for current dir
 20614                                  ;	mov	al,'.'
 20615                                  ;	stosw				;AN000; store in srcxname
 20616                                  ;	jmp	short tn_doit		;AN000; go do command
 20617                                  
 20618                                  tn_drive:				;AN000; a drive was entered
 20619 00002646 56                      	push	si			;AN000; save position in line
 20620 00002647 BE[8BAA]                	mov	si,PARSE1_ADDR		;AN000; get address of drive
 20621 0000264A AC                      	lodsb				;AN000; get the drive number
 20622 0000264B 0440                    	add	al,"A"-1 ; 40h		;AN000; convert it to char
 20623 0000264D AA                      	stosb				;AN000; store it in srcxname
 20624                                  	;mov	ax,dot_colon		;AN000; get colon and . and
 20625 0000264E B83A2E                  	mov	ax,':.' ; 2E3Ah ; ah=".", al=":"
 20626 00002651 AB                      	stosw				;AN000;  store in srcxname
 20627                                  	;mov	al,0
 20628 00002652 B000                    	mov	al,END_OF_LINE_OUT	;AN000; put a terminator char
 20629 00002654 AA                      	stosb				;AN000;
 20630 00002655 5E                      	pop	si			;AN000; get line position back
 20631 00002656 EB0C                    	jmp	short tn_check_eol	;AN000; check to make sure eol
 20632                                  
 20633                                  tn_filespec:				;AN000; a filespec was entered
 20634 00002658 56                      	push	si			;AN000; save position in line
 20635 00002659 C536[8BAA]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 20636                                  
 20637                                  tn_move_filename:			;AN000; put filespec in srcxname
 20638 0000265D AC                      	lodsb				;AN000; get a char from buffer
 20639 0000265E AA                      	stosb				;AN000; store in srcxname
 20640                                  	;;cmp	al,0
 20641                                  	;cmp	al,END_OF_LINE_OUT	;AN000; it char a terminator?
 20642 0000265F 08C0                    	or	al,al ; al = 0 ?
 20643 00002661 75FA                    	jnz	short tn_move_filename	;AN000; no - keep moving
 20644 00002663 5E                      	pop	si			;AN000; get line position back
 20645                                  
 20646                                  tn_check_eol:				;AN000; make sure no extra parms
 20647 00002664 BF[4498]                	mov	di,PARSE_CHDIR		;AN000; get address of parse_chdir
 20648 00002667 E88B00                  	call	parse_check_eol 	;AN000; are we at end of line?
 20649 0000266A 7406                    	jz	short tn_doit 		;AN000; Yes - do the command
 20650                                  tn_parse_error: 			;AN000; A parse error occurred
 20651 0000266C E93508                  	jmp	cerror			;AN000; Go to error routine
 20652                                  
 20653                                  tn_eol: 
 20654                                  	;23/02/2023
 20655                                  	;;mov	ah,0			;AN000; no parameters on line
 20656                                  	;mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 20657                                  	;;mov	al,dot_chr		;AN000;   for current dir
 20658                                  	;mov	al,'.'
 20659                                  	; 10/06/2023
 20660                                  	;mov	ax,002Eh
 20661                                  	; ah = 0 ; *
 20662 0000266F B02E                    	mov	al,'.'  ;dot_chr ; 2Eh
 20663                                  	;	
 20664 00002671 AB                      	stosw				;AN000; store in srcxname
 20665                                  	; 23/02/2023
 20666                                  	;jmp	short tn_doit		;AN000; go do command
 20667                                  
 20668                                  tn_doit:				;AN000;
 20669 00002672 BE[439B]                	mov	si,SRCXNAME		;AN000; set up srcxname as source
 20670 00002675 BF[749C]                	mov	di,COMBUF		;AN000; set up combuf as target (need big target)
 20671 00002678 B460                    	mov	ah,xNameTrans		;AN000; do name translate call
 20672                                  	;mov	ah,60h
 20673 0000267A CD21                    	int	21h			;AN000;
 20674 0000267C 7311                    	jnc	short tn_print_xname	;AN000; If no error - print result
 20675                                  
 20676 0000267E E8B3FB                  	call	Set_Ext_Error_Msg	;AN000; get extended message
 20677 00002681 C706[37A1][439B]        	mov	word [string_ptr_2],SRCXNAME
 20678                                  					;AN000; get address of failed string
 20679                                  	;mov	byte [extend_buf_sub],1
 20680 00002687 C606[F591]01            	mov	byte [extend_buf_sub],one_subst
 20681                                  					;AN000; put number of subst in control block
 20682 0000268C E91508                  	jmp	cerror			;AN000; Go to error routine
 20683                                  
 20684                                  tn_print_xname: 			;AN000;
 20685 0000268F C706[37A1][749C]        	mov	word [string_ptr_2],COMBUF
 20686                                  					;AN000; Set up address of combuf
 20687 00002695 BA[BA93]                	mov	dx,string_buf_ptr	;AN000; Set up address of print control block
 20688 00002698 E88804                  	call	CRLF2			;AN000; print a crlf
 20689                                  	;call	Printf_Crlf		;AN000; print it out
 20690                                  	;retn				;AN000;
 20691                                  	; 23/02/2023
 20692 0000269B E9812E                  	jmp	Printf_Crlf
 20693                                  
 20694                                  ; ---------------------------------------------------------------------------
 20695                                  
 20696                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20697                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2219h
 20698                                  
 20699                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20700                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:27C3h
 20701                                  _$EXIT:
 20702                                  	; MSDOS 6.0
 20703 0000269E 1E                      	push	ds			;AN000; save data segment
 20704 0000269F 8E1E[159E]              	mov	ds,[RESSEG]		;AN000; get resident data segment
 20705                                  	;assume	ds:resgroup		;AN000;
 20706                                  
 20707 000026A3 803E[4002]00            	cmp	byte [PermCom],0	;AN045; is this a permanent COMMAND?
 20708 000026A8 740A                    	jz	short free_com		;AN045; no - free everything
 20709                                  
 20710                                  ;	We're a permanent command.
 20711                                  ;	Unless this is a singlecom (int 2Eh), don't deallocate transient.
 20712                                  
 20713 000026AA 833E[4302]FF            	cmp	word [SingleCom],-1	;M034
 20714 000026AF 7412                    	je	short no_reset		;M034 ; exit singlecom
 20715 000026B1 E950DA                  	jmp	TCOMMAND		;permanent command, recycle
 20716                                  
 20717                                  free_com:
 20718                                  	;mov	ax,(multdos shl 8 or message_2f)
 20719 000026B4 B82E12                  	mov	ax,122Eh		;AN060; reset parse message pointers
 20720                                  	;mov	dl,SET_CRITICAL_MSG	;AN000; set up critical error message address
 20721 000026B7 B205                    	mov	dl,5
 20722 000026B9 8B3E[5802]              	mov	di,[Crit_Msg_Off] 	;AN000; old offset of critical messages
 20723 000026BD 8E06[5A02]              	mov	es,[Crit_Msg_Seg] 	;AN000; old segment of critical messages
 20724 000026C1 CD2F                    	int	2Fh			;AN000; go set it
 20725                                  no_reset:				;AN045;
 20726 000026C3 1F                      	pop	ds			;AN000; restore local data segment
 20727                                  	;assume	ds:trangroup		;AN000;
 20728                                  ;M040
 20729                                  ; Restore user directory if the restore flag is set. RestUDir1 checks for
 20730                                  ;this, restores user dir if flag is set and resets the flag.
 20731                                  
 20732                                  	;invoke	RestUDir1		;restore user dir if needed ;M040
 20733 000026C4 E80C03                  	call	RestUDir1
 20734 000026C7 8E06[159E]              	mov	es,[RESSEG]
 20735                                  	;assume	es:resgroup
 20736                                  
 20737 000026CB 26A1[DC01]              	mov	ax,[es:Parent]
 20738                                  	;mov	[es:16h],ax
 20739                                  	;mov	[es:PDB_Parent_PID],ax
 20740 000026CF 26A31600                	mov	[es:PDB.PARENT_PID],ax
 20741 000026D3 26A1[DE01]              	mov	ax,[es:OldTerm]
 20742                                  	;mov	[es:0Ah],ax
 20743                                  	;mov	[es:PDB_Exit],ax
 20744 000026D7 26A30A00                	mov	[es:PDB.EXIT],ax
 20745 000026DB 26A1[E001]              	mov	ax,[es:OldTerm+2]
 20746                                  	;mov	[es:0Ch],ax
 20747                                  	;mov	[es:PDB_Exit+2],ax
 20748 000026DF 26A30C00                	mov	[es:PDB.EXIT+2],ax
 20749                                  
 20750 000026E3 06                      	push	es
 20751 000026E4 8E06[259E]              	mov	es,[TRAN_TPA]
 20752                                  	;mov	ah,DEALLOC
 20753 000026E8 B449                    	mov	ah,49h
 20754 000026EA CD21                    	int	21h			; Now running in "free" space
 20755 000026EC 07                      	pop	es
 20756                                  
 20757                                  	;mov	ah,Exit
 20758 000026ED B44C                    	mov	ah,4Ch
 20759                                  	;mov	al,byte ptr RetCode
 20760 000026EF 26A0[3802]              	mov	al,[es:RetCode]
 20761 000026F3 CD21                    	int	21h
 20762                                  
 20763                                  ; ---------------------------------------------------------------------------
 20764                                  
 20765                                  ; MSDOS 6.0
 20766                                  ; ****************************************************************
 20767                                  ; *
 20768                                  ; * ROUTINE:	 PARSE_CHECK_EOL
 20769                                  ; *
 20770                                  ; * FUNCTION:	 Calls parser to see if end of line occurred.
 20771                                  ; *		 If not end of line, set up to print parse
 20772                                  ; *		 error message. ASSUMES NO MORE PARAMETERS ARE
 20773                                  ; *		 EXPECTED!
 20774                                  ; *
 20775                                  ; * INPUT:	 DS:SI	  last output from parser
 20776                                  ; *		 ES:DI	  points to parse block
 20777                                  ; *		 CX	  last output from parser
 20778                                  ; *
 20779                                  ; * OUTPUT:	 AX	  parser return code
 20780                                  ; *
 20781                                  ; *		 if end of line found
 20782                                  ; *		     zero flag set
 20783                                  ; *		 else
 20784                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 20785                                  ; *
 20786                                  ; ****************************************************************
 20787                                  
 20788                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20789                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2270h
 20790                                  
 20791                                  parse_check_eol:
 20792 000026F5 31D2                    	xor	dx,dx			;AN000;
 20793 000026F7 8936[AFA0]              	mov	[parse_last],si 	;AN018; save start of parameter
 20794 000026FB E85E23                  	call	cmd_parse		;AN000; call parser
 20795 000026FE 3CFF                    	cmp	al,-1 ; 0FFh
 20796                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN000; Are we at end of line?
 20797 00002700 7408                    	je	short parse_good_eol	;AN000; yes - no problem
 20798                                  	;cmp	ax,0
 20799                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; was any error found?
 20800 00002702 21C0                    	and	ax,ax ; ax = 0 ?
 20801 00002704 7501                    	jnz	short ok_to_setup_pmsg	;AN018; yes - continue
 20802 00002706 40                      	inc	ax			;AN018; set AX to 1 and turn off zero flag
 20803                                  ok_to_setup_pmsg:
 20804 00002707 E81000                  	call	setup_parse_error_msg	;AN018; go set up error message
 20805                                  parse_good_eol:
 20806                                  parse_msg_good:	; 23/02/2023
 20807 0000270A C3                      	retn				;AN000;
 20808                                  
 20809                                  ; ---------------------------------------------------------------------------
 20810                                  
 20811                                  ; MSDOS 6.0
 20812                                  ; ****************************************************************
 20813                                  ; *
 20814                                  ; * ROUTINE:	 PARSE_WITH_MSG
 20815                                  ; *
 20816                                  ; * FUNCTION:	 Calls parser. If an error occurred, the error
 20817                                  ; *		 message is set up.
 20818                                  ; *
 20819                                  ; * INPUT:	 DS:SI	  last output from parser
 20820                                  ; *		 ES:DI	  points to parse block
 20821                                  ; *		 CX	  last output from parser
 20822                                  ; *
 20823                                  ; * OUTPUT:	 AX	  parser return code
 20824                                  ; *
 20825                                  ; *		 if no error
 20826                                  ; *		     outputs from parser
 20827                                  ; *		 else
 20828                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 20829                                  ; *		     error message set up for STD_PRINTF
 20830                                  ; *
 20831                                  ; ****************************************************************
 20832                                  
 20833                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20834                                  Parse_With_Msg:
 20835 0000270B 8936[AFA0]              	mov	[parse_last],si 	;AN018; save start of parameter
 20836 0000270F E84A23                  	call	cmd_parse		;AN018; call parser
 20837 00002712 3CFF                    	cmp	al,-1 ; 0FFh
 20838                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN018; Are we at end of line?
 20839 00002714 74F4                    	je	short parse_msg_good	;AN018; yes - no problem
 20840                                  	;cmp	ax,0
 20841                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; did an error occur
 20842 00002716 09C0                    	or	ax,ax ; ax = 0 ?
 20843 00002718 74F0                    	jz	short parse_msg_good	;AN018; yes - no problem
 20844                                  	; 23/02/2023
 20845                                  	;call	setup_parse_error_msg	;AN018; go set up error message
 20846                                  ;parse_msg_good:
 20847                                  	;retn				;AN018;
 20848                                  	; 23/02/2023
 20849                                  	;jmp	short setup_parse_error_msg	
 20850                                  
 20851                                  ; ---------------------------------------------------------------------------
 20852                                  
 20853                                  ; MSDOS 6.0
 20854                                  ; ****************************************************************
 20855                                  ; *
 20856                                  ; * ROUTINE:	 SETUP_PARSE_ERROR_MSG
 20857                                  ; *
 20858                                  ; * FUNCTION:	 Calls parser.	If an error occurred, the error
 20859                                  ; *		 message is set up.
 20860                                  ; *
 20861                                  ; * INPUT:	 AX	     Parse error number
 20862                                  ; *		 SI	     Set to past last parameter
 20863                                  ; *		 Parse_last  Set to start of last parameter
 20864                                  ; *
 20865                                  ; * OUTPUT:	 MSG_DISPLAY_CLASS set to parse error
 20866                                  ; *		 error message set up for STD_PRINTF
 20867                                  ; *
 20868                                  ; ****************************************************************
 20869                                  
 20870                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20871                                  setup_parse_error_msg:
 20872 0000271A C606[F191]02            	mov	byte [msg_disp_class],parse_msg_class
 20873                                  	;mov	byte [msg_disp_class],2	;AC018; Set up parse message class
 20874 0000271F BA[F391]                	mov	dx,extend_buf_ptr	;AC018; get extended message pointer
 20875 00002722 C60400                  	mov	byte [si],END_OF_LINE_OUT ; 0
 20876                                  					;AC018; terminate the parameter string
 20877 00002725 A3[F391]                	mov	[extend_buf_ptr],ax	;AC018; get message number in control block
 20878 00002728 83F802                  	cmp	ax,2
 20879                                  	;cmp	ax,LessArgs_Ptr 	;AC018; if required parameter missing
 20880 0000272B 740D                    	je	short setup_parse_msg_ret
 20881                                  					;AN018;    no subst
 20882 0000272D 8B36[AFA0]              	mov	si,[parse_last] 	;AC018; get start of parameter
 20883 00002731 8936[37A1]              	mov	[string_ptr_2],si 	;AC018; get address of failed string
 20884 00002735 C606[F591]01            	mov	byte [extend_buf_sub],one_subst
 20885                                  					;AC018; put number of subst in control block
 20886                                  	;mov	byte [extend_buf_sub],1
 20887                                  setup_parse_msg_ret:
 20888 0000273A 46                      	inc	si			;AN018; make sure zero flag not set
 20889 0000273B C3                      	retn				;AC018;
 20890                                  
 20891                                  ;============================================================================
 20892                                  ; TENV.ASM, MSDOS 6.0, 1991
 20893                                  ;============================================================================
 20894                                  ; 08/10/2018 - Retro DOS v3.0
 20895                                  
 20896                                  ; TITLE	Part6 COMMAND Transient routines.
 20897                                  
 20898                                  ;	Environment utilities and misc. routines
 20899                                  
 20900                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1690h
 20901                                  
 20902                                  ; 23/02/2023 - Retro DOS v4.0 (& v4.1)
 20903                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 22BDh
 20904                                  
 20905                                  ; ---------------------------------------------------------------------------
 20906                                  
 20907                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20908                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 20909                                  ADD_PROMPT:
 20910 0000273C E8FC00                  	call	delete_prompt	; Delete any existing prompt
 20911 0000273F E8AD01                  	call	scan_double_null
 20912                                  
 20913                                  ADD_PROMPT2:
 20914 00002742 56                      	push	si
 20915 00002743 E89B01                  	call	GETARG
 20916 00002746 5E                      	pop	si
 20917 00002747 7501                    	jnz	short ADD_PROMPT3
 20918                                  ADD_PROMPT_RETN:
 20919 00002749 C3                      	retn
 20920                                  ADD_PROMPT3:			; Pre scan for arguments
 20921 0000274A E87501                  	call	move_name	; Move in name
 20922 0000274D E89101                  	call	GETARG
 20923 00002750 56                      	push	si
 20924 00002751 EB53                    	jmp	short ADD_NAME
 20925                                  
 20926                                  ;break	The SET command
 20927                                  
 20928                                  ; Input: DS:SI points to a CR terminated string
 20929                                  ; Output: carry flag is set if no room
 20930                                  ;	  otherwise name is added to environment
 20931                                  
 20932                                  DISP_ENVJ:
 20933 00002753 E9BC00                  	jmp	DISP_ENV
 20934                                  
 20935                                  ADD_NAME_TO_ENVIRONMENT:
 20936 00002756 E88801                  	call	GETARG
 20937 00002759 74F8                    	jz	short DISP_ENVJ
 20938                                  
 20939                                  ; check if line contains exactly one equals sign
 20940                                  
 20941 0000275B 31DB                    	xor	bx,bx		; = count is 0
 20942 0000275D 56                      	push	si		; Save pointer to beginning of line
 20943                                  EQLP:
 20944 0000275E AC                      	lodsb			; Get a char
 20945 0000275F 3C0D                    	cmp	al,13 ; 0Dh	; IF CR we're all done
 20946 00002761 740F                    	je	short QUEQ	
 20947 00002763 3C3D                    	cmp	al,'='		; Look for = sign	
 20948 00002765 75F7                    	jne	short EQLP	; not there, get next char
 20949 00002767 FEC3                    	inc	bl		; Otherwise increment EQ count
 20950 00002769 803C0D                  	cmp	byte [si],13	; Look for CR following = sign
 20951 0000276C 75F0                    	jne	short EQLP
 20952 0000276E FEC7                    	inc	bh		; Set BH=1 means no parameters
 20953 00002770 EBEC                    	jmp	short EQLP	; And look for more
 20954                                  QUEQ:
 20955 00002772 5E                      	pop	si		; Restore beginning of line
 20956 00002773 FECB                    	dec	bl		; Zero flag means only one EQ
 20957 00002775 7406                    	jz	short ONEQ	; Good line
 20958 00002777 BA[8B92]                	mov	dx,SYNTMES_PTR
 20959 0000277A E92707                  	jmp	cerror
 20960                                  ONEQ:
 20961 0000277D 53                      	push	bx
 20962 0000277E E8BD00                  	call	delete_name_in_environment
 20963 00002781 5B                      	pop	bx
 20964 00002782 FECF                    	dec	bh
 20965 00002784 74C3                    	jz	short ADD_PROMPT_RETN
 20966 00002786 E86601                  	call	scan_double_null
 20967 00002789 89FB                    	mov	bx,di		; Save ptr to beginning of env var name
 20968 0000278B E83401                  	call	move_name
 20969 0000278E 56                      	push	si
 20970 0000278F 87DF                    	xchg	bx,di		; Switch ptrs to beginning and end of
 20971                                  				;  env var name
 20972                                  		
 20973                                  ; We want to special-case COMSPEC. This is to reduce the amount of code
 20974                                  ; necessary in the resident for re-reading the transient. Let's look for
 20975                                  ; COMSPEC=
 20976                                  
 20977 00002791 C606[9697]00            	mov	byte [comspec_flag],0 ; MSDOS 6.0 ; clear flag ; M024
 20978 00002796 BE[B694]                	mov	si,COMSPECSTR ; "COMSPEC="
 20979 00002799 B90400                  	mov	cx,4
 20980 0000279C F3A7                    	repe	cmpsw
 20981 0000279E 7504                    	jnz	short NOT_COMSPEC
 20982                                  				; Zero set => exact match
 20983 000027A0 FE06[9697]              	inc	byte [comspec_flag] ; MSDOS 6.0 ; comspec is changing ; M024
 20984                                  	;mov	byte [COMSPEC_FLAG],1
 20985                                  NOT_COMSPEC:
 20986 000027A4 89DF                    	mov	di,bx		; Load ptr to end of env var name
 20987                                  ADD_NAME:
 20988 000027A6 5E                      	pop	si		; Add the value of the new env var
 20989 000027A7 56                      	push	si		;  to the environment.
 20990                                  ADD_NAME1:
 20991 000027A8 AC                      	lodsb
 20992 000027A9 3C0D                    	cmp	al,13 ; 0Dh
 20993 000027AB 7405                    	je	short ADD_NAME_RET
 20994 000027AD E8AD01                  	call	store_char
 20995 000027B0 EBF6                    	jmp	short ADD_NAME1
 20996                                  ADD_NAME_RET:
 20997 000027B2 5E                      	pop	si
 20998 000027B3 803E[9697]00            	cmp	byte [comspec_flag],0
 20999                                  				; If the new env var is comspec,	
 21000                                  ADD_NAME_JZ_RET:
 21001 000027B8 748F                    	jz	short ADD_PROMPT_RETN 
 21002                                  				;  copy the value into the
 21003                                  				;  comspec var in the resident
 21004                                  
 21005                                  ; We have changed the COMSPEC variable. We need to update the resident
 21006                                  ; pieces necessary to reread in the info. First, skip all delimiters
 21007                                  
 21008 000027BA E87303                  	call	scanoff
 21009 000027BD 8E06[159E]              	mov	es,[RESSEG]	;  comspec var in the resident
 21010                                  
 21011                                  ; Make sure that the printer knows where the beginning of the string is
 21012                                  
 21013 000027C1 BF[E901]                	mov	di,ComSpec
 21014 000027C4 89FB                    	mov	bx,di
 21015                                  
 21016                                  ; Generate drive letter for display
 21017                                  
 21018 000027C6 31C0                    	xor	ax,ax		;g assume no drive first
 21019 000027C8 26A2[3202]              	mov	[es:ComDrv],al
 21020                                  	; 23/02/2023
 21021                                  	; MSDOS 6.0 (& 5.0)
 21022 000027CC 50                      	push	ax		;AN000; 3/3/KK
 21023 000027CD 8A04                    	mov	al,[si]		;AN000; 3/3/KK
 21024 000027CF E83F01                  	call	testkanj	;AN000; 3/3/KK	
 21025 000027D2 58                      	pop	ax		;AN000; 3/3/KK
 21026 000027D3 7518                    	jnz	short _GOTDRIVE
 21027                                  	;
 21028 000027D5 807C013A                	cmp	byte [si+1],':'	; drive specified?
 21029 000027D9 7512                    	jne	short _GOTDRIVE
 21030 000027DB 8A04                    	mov	al,[si]		; get his specified drive
 21031                                  	; 23/02/2023
 21032 000027DD E85B01                  	call	UPCONV
 21033                                  	;call	UPCONV_MAPCALL	; convert to uppercase
 21034 000027E0 2C41                    	sub	al,'A'		; convert to 0-based
 21035 000027E2 83C702                  	add	di,2
 21036 000027E5 FEC0                    	inc	al		; convert to 1-based number
 21037 000027E7 26A2[3202]              	mov	[es:ComDrv],al
 21038                                  
 21039                                  ; Stick the drive letter in the prompt message. Nothing special needs to be
 21040                                  ; done here..
 21041                                  	;add	al,40h
 21042 000027EB 0440                    	add	al,'A'-1
 21043                                  _GOTDRIVE:
 21044                                  	; 23/02/2023
 21045                                  	;;mov	[es:0BD9h],di	; MSDOS 3.3 COMMAND.COM offset 1734h
 21046                                  	;mov	[es:PUTBACKSUBSTPTR],di
 21047                                  	;mov	[es:0233h],di	; MSDOS 5.0 COMMAND.COM offset 236Eh
 21048 000027ED 26893E[C801]            	mov	[es:PutBackComSpec],di
 21049                                  				;g point to beginning of name after drive
 21050                                  	;;mov	[es:0A21h],al	; MSDOS 3.3 COMMAND.COM offset 1739h
 21051                                  	;mov	[es:PUTBACKDRV],al
 21052                                  	;mov	[es:0238h],al	; MSDOS 5.0 COMMAND.COM offset 2373h
 21053 000027F2 26A2[CD01]              	mov	[es:PutBackDrv],al
 21054                                  
 21055                                  ; Copy chars until delim      	
 21056                                  
 21057 000027F6 89DF                    	mov	di,bx
 21058                                  COPY_COMSPEC:
 21059 000027F8 AC                      	lodsb
 21060 000027F9 E83C03                  	call	DELIM
 21061 000027FC 7407                    	jz	short COPYDONE
 21062 000027FE 3C0D                    	cmp	al,13 ; 0Dh
 21063 00002800 7403                    	je	short COPYDONE
 21064 00002802 AA                      	stosb
 21065 00002803 EBF3                    	jmp	short COPY_COMSPEC
 21066                                  COPYDONE:
 21067 00002805 30C0                    	xor	al,al		; Null terminate the string and quit
 21068 00002807 AA                      	stosb
 21069                                  	;mov	byte [comspec_flag],0
 21070 00002808 A2[9697]                	mov	[comspec_flag],al ; 0 ; 23/02/2023
 21071 0000280B 4F                      	dec	di
 21072 0000280C 26893E[2902]            	mov	[es:ComSpec_End],di
 21073 00002811 C3                      	retn
 21074                                  
 21075                                  DISP_ENV:
 21076 00002812 8E1E[159E]              	mov	ds,[RESSEG]
 21077 00002816 8E1E[DC03]              	mov	ds,[EnvirSeg]
 21078                                  	; assume ds:nothing
 21079 0000281A 31F6                    	xor	si,si
 21080                                  PENVLP:
 21081 0000281C 803C00                  	cmp	byte [si],0
 21082 0000281F 7497                    	jz	short ADD_NAME_JZ_RET
 21083 00002821 BF[B3A0]                	mov	di,Arg_Buf
 21084                                  PENVLP2:
 21085 00002824 AC                      	lodsb
 21086 00002825 AA                      	stosb
 21087 00002826 08C0                    	or	al,al
 21088 00002828 75FA                    	jnz	short PENVLP2
 21089 0000282A BA[9093]                	mov	dx,arg_buf_ptr
 21090 0000282D 1E                      	push	ds
 21091 0000282E 06                      	push	es
 21092 0000282F 1F                      	pop	ds
 21093                                  	; assume ds:nothing
 21094 00002830 E8EC2C                  	call	Printf_Crlf
 21095 00002833 1F                      	pop	ds
 21096 00002834 EBE6                    	jmp	short PENVLP
 21097                                  
 21098                                  ; =============== S U B	R O U T	I N E =======================================
 21099                                  
 21100                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21101                                  delete_path:
 21102 00002836 BE[AA94]                	mov	si,PATH_TEXT ; "PATH="
 21103 00002839 EB03                    	jmp	short delete_name_in_environment
 21104                                  
 21105                                  ; =============== S U B	R O U T	I N E =======================================
 21106                                  
 21107                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21108                                  delete_prompt:
 21109 0000283B BE[AF94]                	mov	si,PROMPT_TEXT ; "PROMPT="
 21110                                  
 21111                                  ; ---------------------------------------------------------------------------
 21112                                  
 21113                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21114                                  delete_name_in_environment:
 21115                                  
 21116                                  ; Input: DS:SI points to a "=" terminated string
 21117                                  ; Output: carry flag is set if name not found
 21118                                  ;	  otherwise name is deleted
 21119                                  
 21120 0000283E 56                      	push	si
 21121 0000283F 1E                      	push	ds
 21122 00002840 E82C00                  	call	FIND		; ES:DI points to name
 21123 00002843 7217                    	jc	short del1
 21124 00002845 89FE                    	mov	si,di		; Save it
 21125 00002847 E8BF00                  	call	SCASB2		; Scan for the nul
 21126 0000284A 87F7                    	xchg	si,di
 21127                                  ;SR;
 21128                                  ; If we have only one env string, then the double null is lost when the last
 21129                                  ;string is deleted and we have an invalid empty environment with only a 
 21130                                  ;single null. To avoid this, we will look for the double null case and then
 21131                                  ;move an extra null char.
 21132                                  ; Bugbug: The only possible problem is that the last pathstring 
 21133                                  ;will be followed by a triple null. Is this really a problem?
 21134                                  
 21135                                  	; MSDOS 6.0
 21136 0000284C 26803C00                	cmp	byte [es:si],0	;null char?
 21137 00002850 7501                    	jnz	short not_dnull	;no, we are at a double null
 21138 00002852 4E                      	dec	si		;point at the double null
 21139                                  not_dnull:
 21140                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21141 00002853 E86901                  	call	GETENVSIZ
 21142 00002856 29F1                    	sub	cx,si
 21143 00002858 06                      	push	es
 21144 00002859 1F                      	pop	ds		; ES:DI points to name
 21145                                  				; DS:SI points to next name
 21146 0000285A F3A4                    	rep	movsb
 21147                                  del1:
 21148 0000285C 1F                      	pop	ds
 21149 0000285D 5E                      	pop	si
 21150                                  find_retn:
 21151 0000285E C3                      	retn
 21152                                  
 21153                                  ; =============== S U B	R O U T	I N E =======================================
 21154                                  
 21155                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21156                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:23E2h
 21157                                  find_path:
 21158 0000285F BE[AA94]                	mov	si,PATH_TEXT ; "PATH="
 21159 00002862 EB03                    	jmp	short find_name_in_environment
 21160                                  
 21161                                  ; =============== S U B	R O U T	I N E =======================================
 21162                                  
 21163                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21164                                  find_prompt:
 21165 00002864 BE[AF94]                	mov	si,PROMPT_TEXT ; "PROMPT="
 21166                                  
 21167                                  ; ---------------------------------------------------------------------------
 21168                                  
 21169                                  find_name_in_environment:
 21170                                  
 21171                                  ; Input: DS:SI points to a "=" terminated string
 21172                                  ; Output: ES:DI points to the arguments in the environment
 21173                                  ;	  zero is set if name not found
 21174                                  ;	  carry flag is set if name not valid format
 21175                                  
 21176 00002867 E80500                  	call	FIND		; Find the name
 21177 0000286A 72F2                    	jc	short find_retn	; Carry means not found	
 21178 0000286C E99600                  	jmp	SCASB1		; Scan for = sign
 21179                                  
 21180                                  ; ---------------------------------------------------------------------------
 21181                                  	;nop
 21182                                  
 21183                                  ; =============== S U B	R O U T	I N E =======================================
 21184                                  
 21185                                  ; On return of FIND1, ES:DI points to beginning of name
 21186                                  
 21187                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21188                                  FIND:
 21189 0000286F FC                      	cld
 21190 00002870 E84100                  	call	COUNT0		; CX = Length of name
 21191 00002873 8E06[159E]              	mov	es,[RESSEG]
 21192                                  	;assume es:RESGROUP
 21193 00002877 268E06[DC03]            	mov	es,[es:EnvirSeg]
 21194                                  	;assume es:NOTHING
 21195 0000287C 31FF                    	xor	di,di
 21196                                  find1:	
 21197 0000287E 51                      	push	cx
 21198 0000287F 56                      	push	si
 21199 00002880 57                      	push	di
 21200                                  find11:
 21201 00002881 AC                      	lodsb
 21202                                  	; 23/02/2023 
 21203                                  	; MSDOS 6.0 (& 5.0)
 21204 00002882 E88C00                  	call	testkanj	
 21205 00002885 740F                    	jz	short notkanj3
 21206 00002887 4E                      	dec	si
 21207 00002888 AD                      	lodsw
 21208 00002889 47                      	inc	di
 21209 0000288A 47                      	inc	di
 21210 0000288B 263B45FE                	cmp	ax,[es:di-2]
 21211 0000288F 7511                    	jne	short find12
 21212 00002891 49                      	dec	cx
 21213 00002892 E2ED                    	loop	find11
 21214 00002894 EB0C                    	jmp	short find12
 21215                                  notkanj3:
 21216 00002896 E8A200                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 21217                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 21218 00002899 47                      	inc	di
 21219 0000289A 263A45FF                	cmp	al,[es:di-1]
 21220 0000289E 7502                    	jne	short find12
 21221 000028A0 E2DF                    	loop	find11
 21222                                  find12:
 21223 000028A2 5F                      	pop	di
 21224 000028A3 5E                      	pop	si
 21225 000028A4 59                      	pop	cx
 21226 000028A5 74B7                    	jz	short find_retn
 21227 000028A7 51                      	push	cx
 21228 000028A8 E85E00                  	call	SCASB2		; Scan for a nul
 21229 000028AB 59                      	pop	cx
 21230 000028AC 26803D00                	cmp	byte [es:di],0
 21231 000028B0 75CC                    	jnz	short find1
 21232 000028B2 F9                      	stc			; Indicate not found
 21233 000028B3 C3                      	retn
 21234                                  
 21235                                  ; =============== S U B	R O U T	I N E =======================================
 21236                                  
 21237                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21238                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2437h
 21239                                  COUNT0:
 21240 000028B4 1E                      	push	ds
 21241 000028B5 07                      	pop	es
 21242                                  	;assume es:nothing
 21243 000028B6 89F7                    	mov	di,si
 21244                                  ;COUNT1:
 21245 000028B8 57                      	push	di		; Count number of chars until "="
 21246 000028B9 E84900                  	call	SCASB1
 21247                                  	; 23/02/2023
 21248                                  ;	jmp	short COUNTX
 21249                                  ;COUNT2:
 21250                                  ;	push	di		; Count number of chars until nul
 21251                                  ;	call	SCASB2
 21252                                  ;COUNTX:
 21253 000028BC 59                      	pop	cx
 21254 000028BD 29CF                    	sub	di,cx
 21255 000028BF 87F9                    	xchg	di,cx
 21256                                  move_name_retn:
 21257 000028C1 C3                      	retn
 21258                                  
 21259                                  ; =============== S U B	R O U T	I N E =======================================
 21260                                  
 21261                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21262                                  move_name:
 21263 000028C2 803C0D                  	cmp	byte [si],13 ; 0Dh
 21264 000028C5 74FA                    	je	short move_name_retn
 21265 000028C7 AC                      	lodsb
 21266                                  	; 23/02/2023 
 21267                                  	; MSDOS 6.0 (& 5.0)
 21268 000028C8 E84600                  	call	testkanj		
 21269 000028CB 7409                    	jz	short notkanj1
 21270 000028CD E88D00                  	call	store_char
 21271 000028D0 AC                      	lodsb
 21272 000028D1 E88900                  	call	store_char
 21273 000028D4 EBEC                    	jmp	short move_name
 21274                                  notkanj1: 
 21275 000028D6 E86200                  	call	UPCONV
 21276                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3
 21277 000028D9 E88100                  	call	store_char
 21278 000028DC 3C3D                    	cmp	al,'='
 21279 000028DE 75E2                    	jne	short move_name
 21280                                  getarg_retn:
 21281 000028E0 C3                      	retn
 21282                                  
 21283                                  ; =============== S U B	R O U T	I N E =======================================
 21284                                  
 21285                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21286                                  GETARG:
 21287 000028E1 BE8000                  	mov	si,80h
 21288 000028E4 AC                      	lodsb
 21289 000028E5 08C0                    	or	al,al
 21290 000028E7 74F7                    	jz	short getarg_retn
 21291 000028E9 E84402                  	call	scanoff
 21292 000028EC 3C0D                    	cmp	al,13 ; 0Dh
 21293                                  sdn_retn:
 21294 000028EE C3                      	retn
 21295                                  
 21296                                  ; =============== S U B	R O U T	I N E =======================================
 21297                                  
 21298                                  ; Point ES:DI to the final NULL string. Note that in an empty environment,
 21299                                  ; there is NO double NULL, merely a string that is empty.
 21300                                  
 21301                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21302                                  scan_double_null:
 21303 000028EF 8E06[159E]              	mov	es,[RESSEG]
 21304 000028F3 268E06[DC03]            	mov	es,[es:EnvirSeg]
 21305 000028F8 31FF                    	xor	di,di
 21306                                  
 21307                                  ; Top cycle-point. If the string here is empty, then we are done
 21308                                  
 21309                                  sdn1:
 21310 000028FA 26803D00                	cmp	byte [es:di],0	; nul string?
 21311 000028FE 74EE                    	jz	short sdn_retn	; yep, all done
 21312 00002900 E80600                  	call	SCASB2
 21313 00002903 EBF5                    	jmp	short sdn1
 21314                                  
 21315                                  ; =============== S U B	R O U T	I N E =======================================
 21316                                  
 21317                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21318                                  SCASB1:
 21319 00002905 B03D                    	mov	al,'='		; Scan for an =
 21320 00002907 EB02                    	jmp	short SCASBX
 21321                                  
 21322                                  ; =============== S U B	R O U T	I N E =======================================
 21323                                  
 21324                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21325                                  SCASB2:
 21326 00002909 30C0                    	xor	al,al		; Scan for a nul
 21327                                  
 21328                                  ; ---------------------------------------------------------------------------
 21329                                  
 21330                                  	; 23/02/2023
 21331                                  SCASBX:
 21332 0000290B B90001                  	mov	cx,256
 21333 0000290E F2AE                    	repne	scasb
 21334 00002910 C3                      	retn
 21335                                  
 21336                                  ; =============== S U B	R O U T	I N E =======================================
 21337                                  
 21338                                  ; MSDOS 6.0
 21339                                  
 21340                                  ;Bugbug: This is Kanji stuff - put it in conditionals
 21341                                  
 21342                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 21343                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:249Ah
 21344                                  testkanj:
 21345 00002911 1E                      	push	ds			;AN000;  3/3/KK
 21346 00002912 56                      	push	si			;AN000;  3/3/KK
 21347 00002913 50                      	push	ax			;AN000;  3/3/KK
 21348 00002914 2E8E1E[159E]            	mov	ds,[cs:RESSEG]		;AN000;  Get resident segment
 21349 00002919 C536[5C02]              	lds	si,[Dbcs_Vector_Addr]	;AN000;  get DBCS vector
 21350                                  ktlop:					;AN000;  3/3/KK
 21351 0000291D 833C00                  	cmp	word [si],0		;AN000;  end of Table 3/3/KK
 21352 00002920 740E                    	je	short notlead 		;AN000;  3/3/KK
 21353 00002922 58                      	pop	ax			;AN000;  3/3/KK
 21354 00002923 50                      	push	ax			;AN000;  3/3/KK
 21355 00002924 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 21356 00002926 7208                    	jb	short notlead 		;AN000;  3/3/KK
 21357 00002928 46                      	inc	si			;AN000;  3/3/KK
 21358 00002929 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 21359 0000292B 7607                    	jbe	short islead		;AN000;  3/3/KK
 21360 0000292D 46                      	inc	si			;AN000;  3/3/KK
 21361 0000292E EBED                    	jmp	short ktlop		;AN000;  try another range ; 3/3/KK
 21362                                  notlead:				;AN000;  3/3/KK
 21363 00002930 31C0                    	xor	ax,ax			;AN000;  set zero 3/3/KK
 21364 00002932 EB03                    	jmp	short ktret		;AN000;  3/3/KK
 21365                                  islead: 				;AN000;  3/3/KK
 21366 00002934 31C0                    	xor	ax,ax			;AN000;  reset zero 3/3/KK
 21367 00002936 40                      	inc	ax			;AN000;  3/3/KK
 21368                                  ktret:					;AN000;  3/3/KK
 21369 00002937 58                      	pop	ax			;AN000;  3/3/KK
 21370 00002938 5E                      	pop	si			;AN000;  3/3/KK
 21371 00002939 1F                      	pop	ds			;AN000;  3/3/KK
 21372 0000293A C3                      	retn				;AN000;  3/3/KK
 21373                                  
 21374                                  ; =============== S U B	R O U T	I N E =======================================
 21375                                  
 21376                                  ; MSDOS 6.0
 21377                                  
 21378                                  ; ****************************************************************
 21379                                  ; *
 21380                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 21381                                  ; *
 21382                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 21383                                  ; *		 the character in AL from the file upper case table
 21384                                  ; *		 in DOS if character if above  ascii 128, else
 21385                                  ; *		 subtracts 20H if between "a" and "z".
 21386                                  ; *
 21387                                  ; * INPUT:	 AL	      char to be upper cased
 21388                                  ; *		 FUCASE_ADDR  set to the file upper case table
 21389                                  ; *
 21390                                  ; * OUTPUT:	 AL	      upper cased character
 21391                                  ; *
 21392                                  ; ****************************************************************
 21393                                  
 21394                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21395                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:24C4h
 21396                                  
 21397                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21398                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2A6Eh
 21399                                  UPCONV:
 21400 0000293B 3C80                    	cmp	al,80h			;AN000;  see if char is > ascii 128
 21401 0000293D 7213                    	jb	short oth_fucase	;AN000;  no - upper case math
 21402 0000293F 2C80                    	sub	al,80h			;AN000;  only upper 128 chars in table
 21403 00002941 1E                      	push	ds			;AN000;
 21404 00002942 53                      	push	bx			;AN000;
 21405 00002943 8E1E[159E]              	mov	ds,[RESSEG]		;AN000;  get resident data segment
 21406                                  	;lds	bx,dword ptr FUCase_Addr+1
 21407 00002947 C51E[5402]              	lds	bx,[FUCase_Addr+1]	;AN000;  get table address
 21408 0000294B 83C302                  	add	bx,2			;AN000;  skip over first word
 21409                                  	;xlat	ds:byte ptr [bx]	;AN000;  convert to upper case
 21410 0000294E D7                      	xlat
 21411 0000294F 5B                      	pop	bx			;AN000;
 21412 00002950 1F                      	pop	ds			;AN000;
 21413                                  	;jmp	short upconv_end	;AN000;  we finished - exit
 21414                                  	; 10/06/2023
 21415                                  upconv_end:
 21416                                  	; 24/02/2023
 21417 00002951 C3                      	retn
 21418                                  oth_fucase:				;AN000;
 21419 00002952 3C61                    	cmp	al,'a' ; small_a	;AC000; if between "a" and "z",
 21420 00002954 72FB                    	jb	short upconv_end	;AC000;    subtract 20h to get
 21421 00002956 3C7A                    	cmp	al,'z' ; small_z	;AC000;    upper case equivalent.
 21422 00002958 77F7                    	ja	short upconv_end	;AC000;
 21423 0000295A 2C20                    	sub	al,20h			;AC000; Change lower-case to upper
 21424                                  ;upconv_end:	; 10/06/2023		;AN000;
 21425 0000295C C3                      	retn
 21426                                  
 21427                                  ; ---------------------------------------------------------------------------
 21428                                  
 21429                                  ; MSDOS 3.3
 21430                                  
 21431                                  	; 24/02/2023
 21432                                  ;UPCONV_MAPCALL:
 21433                                  	;			; If between "a" and "z"
 21434                                  	;cmp	al,[small_a]
 21435                                  	;jb	short UPCONV_END
 21436                                  	;cmp	al,[small_z]
 21437                                  	;ja	short UPCONV_END
 21438                                  	;sub	al,20h		; Change lower-case to upper
 21439                                  ;UPCONV_END:
 21440                                  	;call	far [cs:MAP_CALL] ; (far) call to char mapping routine 
 21441                                  	;			  ; 	  for (current) country
 21442                                  	;retn
 21443                                  
 21444                                  ; =============== S U B	R O U T	I N E =======================================
 21445                                  
 21446                                  ; STORE A CHAR IN environment, GROWING IT IF NECESSARY
 21447                                  
 21448                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21449                                  store_char:
 21450 0000295D 51                      	push	cx
 21451 0000295E 53                      	push	bx
 21452                                  
 21453                                  	; 24/02/2023
 21454                                  	;;16/10/2018
 21455                                  	; MSDOS 6.0
 21456 0000295F 06                      	push	es		;AN056;*
 21457 00002960 1E                      	push	ds		;AN056; Save local DS
 21458 00002961 8E1E[159E]              	mov	ds,[RESSEG]	;AN056; Get resident segment
 21459 00002965 8E06[DC03]              	mov	es,[EnvirSeg]	;AN056; Get environment segment
 21460 00002969 1F                      	pop	ds		;AN056; Get local segment back
 21461                                  
 21462                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21463 0000296A E85200                  	call	GETENVSIZ
 21464 0000296D 89CB                    	mov	bx,cx		; Save room for double nul	
 21465 0000296F 83EB02                  	sub	bx,2
 21466 00002972 39DF                    	cmp	di,bx
 21467 00002974 723F                    	jb	short store1
 21468 00002976 50                      	push	ax
 21469 00002977 51                      	push	cx
 21470 00002978 53                      	push	bx		; Save Size of environment
 21471 00002979 E85BDE                  	call	FREE_TPA
 21472 0000297C 5B                      	pop	bx
 21473 0000297D 83C302                  	add	bx,2		; Recover true environment size
 21474                                  
 21475 00002980 81FB0080                	cmp	bx,8000h	; Don't let environment grow > 32K	
 21476 00002984 7203                    	jb	short envsiz_ok
 21477                                  bad_env_size:			;AN056;
 21478 00002986 F9                      	stc
 21479 00002987 EB16                    	jmp	short envnoset
 21480                                  	;nop
 21481                                  envsiz_ok:
 21482 00002989 B104                    	mov	cl,4
 21483 0000298B D3EB                    	shr	bx,cl		; Convert back to paragraphs
 21484 0000298D 43                      	inc	bx
 21485                                  	; 24/02/2023
 21486                                  	; MSDOS 6.0
 21487 0000298E 8CC1                    	mov	cx,es		;AN056; Get environment segment
 21488 00002990 01D9                    	add	cx,bx		;AN056; Add in size of environment
 21489 00002992 83C120                  	add	cx,20h		;AN056; Add in some TPA
 21490 00002995 8CC8                    	mov	ax,cs		;AN056; Get the transient segment
 21491 00002997 39C1                    	cmp	cx,ax		;AN056; Are we hitting the transient?
 21492 00002999 73EB                    	jnb	short bad_env_size
 21493                                  				;AN056; Yes - don't do it!!!
 21494                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21495 0000299B B44A                    	mov	ah,4Ah
 21496                                  	;mov	ah,SETBLOCK ; 4Ah
 21497 0000299D CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21498                                  			; ES = segment address of block	to change
 21499                                  			; BX = new size	in paragraphs
 21500                                  envnoset:
 21501 0000299F 9C                      	pushf
 21502 000029A0 06                      	push	es
 21503 000029A1 8E06[159E]              	mov	es,[RESSEG]
 21504 000029A5 E83FDE                  	call	ALLOC_TPA
 21505 000029A8 07                      	pop	es
 21506 000029A9 9D                      	popf
 21507 000029AA 59                      	pop	cx
 21508 000029AB 58                      	pop	ax
 21509                                  	; 10/06/2023
 21510 000029AC 7307                    	jnc	short store1
 21511                                  	; 24/02/2023
 21512 000029AE 07                      	pop	es ; MSDOS 6.0	;AN056;*	
 21513                                  	;jnc	short store1
 21514 000029AF BA[0A92]                	mov	dx,ENVERR_PTR
 21515 000029B2 E9EF04                  	jmp	cerror
 21516                                  store1:	
 21517 000029B5 AA                      	stosb
 21518 000029B6 26C7050000              	mov	word [es:di],0	; NULL IS AT END
 21519                                  	; 24/02/2023
 21520 000029BB 07                      	pop	es ; MSDOS 6.0	;AN056;*
 21521 000029BC 5B                      	pop	bx
 21522 000029BD 59                      	pop	cx
 21523 000029BE C3                      	retn
 21524                                  
 21525                                  ; =============== S U B	R O U T	I N E =======================================
 21526                                  
 21527                                  	; 24/02/2023
 21528                                  GETENVSIZ:
 21529                                  
 21530                                  ;Get size of environment in bytes, rounded up to paragraph boundry
 21531                                  ;ES has environment segment
 21532                                  ;Size returned in CX, all other registers preserved
 21533                                  
 21534 000029BF 06                      	push	es
 21535 000029C0 50                      	push	ax
 21536 000029C1 8CC0                    	mov	ax,es
 21537 000029C3 48                      	dec	ax		;Point at arena	
 21538 000029C4 8EC0                    	mov	es,ax
 21539                                  	;mov	ax,[es:3]
 21540 000029C6 26A10300                	mov	ax,[es:ARENA.size]
 21541 000029CA B104                    	mov	cl,4
 21542 000029CC D3E0                    	shl	ax,cl		;Convert to bytes
 21543 000029CE 89C1                    	mov	cx,ax
 21544 000029D0 58                      	pop	ax
 21545 000029D1 07                      	pop	es
 21546                                  getenvsiz_retn:
 21547 000029D2 C3                      	retn
 21548                                  
 21549                                  ; =============== S U B	R O U T	I N E =======================================
 21550                                  
 21551                                  	; 24/02/2023
 21552                                  RestUDir1:
 21553 000029D3 1E                      	push	ds
 21554 000029D4 8E1E[159E]              	mov	ds,[RESSEG]
 21555 000029D8 803E[3F02]00            	cmp	byte [RestDir],0
 21556 000029DD 1F                      	pop	ds
 21557 000029DE 74F2                    	jz	short getenvsiz_retn
 21558                                  
 21559                                  ; =============== S U B	R O U T	I N E =======================================
 21560                                  
 21561                                  	; 24/02/2023
 21562                                  RestUDir:
 21563 000029E0 BA[F79C]                	mov	dx,USERDIR1
 21564 000029E3 B43B                    	mov	ah,3Bh
 21565                                  	;mov	ah,CHDir ; 3Bh
 21566 000029E5 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21567                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21568 000029E7 30C0                    	xor	al,al
 21569                                  	;call	SETREST
 21570                                  	;retn
 21571                                  	; 24/02/2023
 21572 000029E9 E94B08                  	jmp	SETREST	
 21573                                  
 21574                                  ;============================================================================
 21575                                  ; TENV2.ASM, MSDOS 6.0, 1991
 21576                                  ;============================================================================
 21577                                  ; 07/10/2018 - Retro DOS v3.0
 21578                                  
 21579                                  ; TITLE	Part6 COMMAND Transient routines.
 21580                                  
 21581                                  ;	Environment utilities and misc. routines
 21582                                  
 21583                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 18C2h
 21584                                  
 21585                                  ; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21586                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2577h
 21587                                  
 21588                                  ; ---------------------------------------------------------------------------
 21589                                  
 21590                                  ; ****************************************************************
 21591                                  ; *
 21592                                  ; * ROUTINE:	 $CHDIR
 21593                                  ; *
 21594                                  ; * FUNCTION:	 Entry point for CHDIR command. Parse the command
 21595                                  ; *		 line. If path is found, CHDIR to path. If a drive
 21596                                  ; *		 letter is found, get and display the current dir
 21597                                  ; *		 of the specified drive. If nothing is found, get
 21598                                  ; *		 and display the current dir of the default drive.
 21599                                  ; *
 21600                                  ; * INPUT:	 command line at offset 81H
 21601                                  ; *
 21602                                  ; * OUTPUT:	 none
 21603                                  ; *
 21604                                  ; ****************************************************************
 21605                                  
 21606                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21607                                  
 21608                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 21609                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B21h
 21610                                  _$CHDIR:
 21611                                  	; MSDOS 6.0
 21612 000029EC BE8100                  	mov	si,81h
 21613 000029EF BF[4498]                	mov	di,PARSE_CHDIR
 21614                                  				;AN000; Get address of PARSE_CHDIR
 21615 000029F2 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 21616 000029F4 31D2                    	xor	dx,dx		;AN000;
 21617 000029F6 E812FD                  	call	Parse_With_Msg	;AC018; call parser
 21618                                  	
 21619                                  	;cmp	ax,-1
 21620                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 21621                                  	;je	short bwdj	; No args
 21622                                  	;;cmp	ax,0
 21623                                  	;;cmp	ax,RESULT_NO_ERROR
 21624                                  	;			;AC000; did we have an error?
 21625                                  	;or	ax,ax ; ax = 0 ?
 21626                                  	;jnz	short ChDirErr	;AC018; yes - exit
 21627                                  	
 21628                                  	; 10/06/2023
 21629 000029F9 40                      	inc	ax	; cmp ax,-1
 21630 000029FA 7414                    	jz	short bwdj ; 0FFFFh -> 0
 21631 000029FC 48                      	dec	ax	; cmp ax,0
 21632 000029FD 756D                    	jnz	short ChDirErr ; 1 -> 0
 21633                                  	; ax = 0
 21634                                  
 21635                                  	;cmp	byte [PARSE1_TYPE],6
 21636 000029FF 803E[87AA]06            	cmp	byte [PARSE1_TYPE],result_drive
 21637                                  				;AC000; was a drive entered?
 21638 00002A04 7511                    	jne	short REALCD	; no
 21639                                  
 21640                                  ; D: was found. See if there is anything more.
 21641                                  
 21642 00002A06 BF[4498]                	mov	di,PARSE_CHDIR
 21643                                  				;AC000; get address of parse_chdir
 21644 00002A09 31D2                    	xor	dx,dx		;AC000;
 21645 00002A0B E8E7FC                  	call	parse_check_eol ;AC000; call parser
 21646 00002A0E 755C                    	jnz	short ChDirErr	;AC000;
 21647                                  bwdj:
 21648 00002A10 E87BF9                  	call	build_dir_for_chdir
 21649                                  				; Drive only specified
 21650 00002A13 E80D01                  	call	CRLF2
 21651                                  chdir_retn:
 21652 00002A16 C3                      	retn
 21653                                  
 21654                                  	; 24/02/2023
 21655                                  	; MSDOS 3.3
 21656                                  	;mov	ax,[COMSW]
 21657                                  	;or	ax,[ALLSWITCH]
 21658                                  	;mov	dx,BADPARMPTR
 21659                                  	;jnz	short CHDIR_ERR
 21660                                  	;mov	si,81h
 21661                                  	;call	SCANOFF
 21662                                  	;cmp	al,0Dh		; are we at end of line?
 21663                                  	;je	short BWDJ	; No args
 21664                                  	;inc	si
 21665                                  	;lodsb
 21666                                  	;cmp	al,':'
 21667                                  	;jne	short REALCD
 21668                                  	;push	si
 21669                                  	;call	SCANOFF
 21670                                  	;pop	si
 21671                                  	;cmp	al,0Dh		; was a drive entered?
 21672                                  	;jne	short REALCD	; no
 21673                                  ;BWDJ:
 21674                                  	;call	BUILD_DIR_FOR_CHDIR ; Drive only specified
 21675                                  	;call	CRLF2
 21676                                  ;CHDIR_RETN:
 21677                                  	;retn
 21678                                  
 21679                                  	; 24/02/2023
 21680                                  	; MSDOS 6.0
 21681                                  REALCD:
 21682 00002A17 56                      	push	si		;AN000; save position in line
 21683 00002A18 C536[8BAA]              	lds	si,[PARSE1_ADDR]
 21684                                  				;AN000; get address of filespec
 21685 00002A1C E8DA07                  	call	Move_To_SrcBuf	;AN000; move to srcbuf
 21686 00002A1F 5E                      	pop	si		;AN000; restore position in line
 21687 00002A20 BF[4498]                	mov	di,PARSE_CHDIR	;AC000; get address of parse_chdir
 21688 00002A23 31D2                    	xor	dx,dx		;AC000;
 21689 00002A25 E8CDFC                  	call	parse_check_eol ;AC000; call parser
 21690 00002A28 7542                    	jnz	short ChDirErr	;AC000;
 21691                                  	
 21692 00002A2A E81106                  	call	SETPATH
 21693 00002A2D F606[54A1]02            	test	byte [DestInfo],2
 21694 00002A32 7518                    	jnz	short BadChDir
 21695                                  
 21696                                  	; 26/04/2023
 21697 00002A34 B43B                    	mov	ah,3Bh
 21698                                  	;mov	ah,CHDir
 21699 00002A36 CD21                    	int	21h
 21700 00002A38 73DC                    	jnc	short chdir_retn
 21701                                  	
 21702 00002A3A E807F8                  	call	get_ext_error_number
 21703                                  				;AN022; get the extended error
 21704 00002A3D 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21705                                  				;AN022; see if path not found
 21706 00002A40 740A                    	je	short BadChDir	;AN022; yes - issue old message
 21707                                  ;SR;
 21708                                  ; We want to issue "Invalid Directory" message even if the path is valid
 21709                                  ;but is not a directory. The extended error returns "Access denied" which
 21710                                  ;is kind of confusing. Issue the old message if access denied error is 
 21711                                  ;returned
 21712                                  
 21713 00002A42 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21714 00002A45 7405                    	je	short BadChDir
 21715                                  	
 21716 00002A47 E89E00                  	call	set_ext_error_subst ;AN022;
 21717 00002A4A EB20                    	jmp	short ChDirErr	;AN022;
 21718                                  
 21719                                  BadChDir:
 21720 00002A4C BA[2E93]                	mov	dx,badcd_ptr
 21721                                  ;ChDirErr:
 21722                                  ;	call	std_eprintf
 21723                                  ;mkdir_retn:
 21724                                  	;retn
 21725                                  	; 24/02/2023
 21726 00002A4F EB1B                    	jmp	short ChDirErr	;AN022;
 21727                                  
 21728                                  	; 24/02/2023
 21729                                  	; MSDOS 3.3
 21730                                  ;REALCD:
 21731                                  	;call	SETPATH
 21732                                  	;test	byte [DESTINFO],2
 21733                                  	;jnz	short BADCHDIR
 21734                                  	;mov	ah,CHDir ; 3Bh
 21735                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21736                                  	;		; DS:DX	-> ASCIZ directory name	(may include drive)
 21737                                  	;jnc	short CHDIR_RETN
 21738                                  ;BADCHDIR:
 21739                                  	;mov	dx,BADCDPTR
 21740                                  ;CHDIR_ERR:
 21741                                  	;call	STD_EPRINTF
 21742                                  ;MKDIR_RETN:
 21743                                  	;retn
 21744                                  
 21745                                  ; =============== S U B	R O U T	I N E =======================================
 21746                                  
 21747                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21748                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:25E2h
 21749                                  
 21750                                  	; 11/06/2023 - Retro DOS v4.2
 21751                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B8Ch
 21752                                  _$MKDIR:
 21753                                  	; MSDOS 6.0
 21754 00002A51 E86300                  	call	SETRMMK
 21755 00002A54 7216                    	jc	short MkDirErr
 21756                                  
 21757 00002A56 B439                    	mov	ah,39h
 21758                                  	;mov	ah,MKDIR
 21759 00002A58 CD21                    	int	21h
 21760 00002A5A 7313                    	jnc	short mkdir_retn
 21761                                  
 21762 00002A5C E8E5F7                  	call	get_ext_error_number	
 21763                                  				;AN022; get the extended error
 21764 00002A5F 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21765                                  				;AN022; see if path not found
 21766 00002A62 742A                    	je	short MD_other_err
 21767                                  				;AN022; yes - issue old message
 21768 00002A64 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21769                                  				;AN022; access denied?
 21770 00002A67 7407                    	je	short badmderr	;AN022; yes - see if file exists
 21771                                  	
 21772 00002A69 E87C00                  	call	set_ext_error_subst
 21773                                  				;AN022;
 21774                                  	;jmp	short MkDirerr	;AC022; yes - go print it
 21775                                  	; 24/02/2023
 21776                                  ChDirErr:
 21777                                  MkDirErr:
 21778                                  RmDirErr:
 21779 00002A6C E8B62A                  	call	std_eprintf
 21780                                  mkdir_retn:
 21781                                  rmdir_retn:
 21782 00002A6F C3                      	retn
 21783                                  	
 21784                                  badmderr:
 21785 00002A70 BA[439B]                	mov	dx,SRCXNAME	;AN006; Set Disk transfer address
 21786 00002A73 B41A                    	mov	ah,1Ah
 21787                                  	;mov	ah,Set_DMA	;AN006;
 21788 00002A75 CD21                    	int	21h		;AN006;
 21789                                  	
 21790 00002A77 B44E                    	mov	ah,4Eh
 21791                                  	;mov	ah,Find_First	;AN006; see if file/dir exists
 21792                                  	;mov	cx,10h
 21793 00002A79 B91000                  	mov	cx,ATTR_DIRECTORY
 21794                                  				;AN006;   search for directory
 21795 00002A7C CD21                    	int	21h		;AN006;
 21796 00002A7E 720E                    	jc	short MD_other_err
 21797                                  				;AN006; doesn't exist - must be something else
 21798                                  	;;mov	dl,SRCXNAME.find_buf_attr
 21799                                  				;AN006; we found a file/dir
 21800                                  	;mov	dl,[SRCXNAME+21] 
 21801 00002A80 8A16[589B]              	mov	dl,[SRCXNAME+FIND_BUF.ATTR]
 21802 00002A84 F6C210                  	test	dl,ATTR_DIRECTORY
 21803                                  				;AN006; was it a directory?
 21804 00002A87 7405                    	jz	short MD_other_err
 21805                                  				;AN006; no - must have been a file
 21806 00002A89 BA[2194]                	mov	dx,MD_EXISTS_PTR
 21807                                  				;AN006; set up already exists error
 21808 00002A8C EBDE                    	jmp	short MkDirErr	;AN006; make sure we didn't have network error
 21809                                  MD_other_err:			;AN006;
 21810 00002A8E BA[3193]                	mov	dx,badmkd_ptr
 21811                                  ;MkDirErr:
 21812                                  	;call	std_eprintf
 21813                                  	;retn
 21814                                  	; 24/02/2023
 21815 00002A91 EBD9                    	jmp	short MkDirErr
 21816                                  
 21817                                  	; 24/02/2023
 21818                                  	; MSDOS 3.3
 21819                                  	;call	SETRMMK
 21820                                  	;jb	short MKDIRERR
 21821                                  	;mov	ah,MKDIR ; 39h
 21822                                  	;int	21h	; DOS -	2+ - CREATE A SUBDIRECTORY (MKDIR)
 21823                                  	;		; DS:DX	-> ASCIZ pathname (may include drive)
 21824                                  	;jnc	short MKDIR_RETN
 21825                                  	;mov	dx,BADMKDPTR
 21826                                  	;call	GET_EXT_ERR_NUMBER
 21827                                  ;MKDIRERR:
 21828                                  	;call	STD_EPRINTF
 21829                                  	;retn
 21830                                  
 21831                                  ; =============== S U B	R O U T	I N E =======================================
 21832                                  
 21833                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21834                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2656h
 21835                                  	; 11/06/2023 - Retro DOS v4.2
 21836                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2C00h
 21837                                  _$RMDIR:
 21838 00002A93 E82100                  	call	SETRMMK
 21839 00002A96 72D4                    	jb	short RmDirErr
 21840 00002A98 7518                    	jnz	short badrderr
 21841                                  
 21842 00002A9A B43A                    	mov	ah,3Ah
 21843                                  	;mov	ah,RMDIR ; 3Ah
 21844 00002A9C CD21                    	int	21h	; DOS -	2+ - REMOVE A DIRECTORY	ENTRY (RMDIR)
 21845                                  			; DS:DX	-> ASCIZ pathname (may include drive)
 21846 00002A9E 73CF                    	jnc	short rmdir_retn ; 24/02/2023
 21847                                  
 21848                                  	; 24/02/2023
 21849                                  	; MSDOS 6.0
 21850 00002AA0 E8A1F7                  	call	get_ext_error_number
 21851                                  				;AN022; get the extended error
 21852 00002AA3 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 21853                                  				;AN022; see if path not found
 21854 00002AA6 740A                    	je	short badrderr	;AN022; yes - issue old message
 21855 00002AA8 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 21856                                  				;AN022; access denied?
 21857 00002AAB 7405                    	je	short badrderr	;AN022; yes - issue old message
 21858                                  
 21859 00002AAD E83800                  	call	set_ext_error_subst
 21860                                  				;AN022;
 21861 00002AB0 EBBA                    	jmp	short RmDirErr	;AC022; yes - go print it
 21862                                  
 21863                                  	; MSDOS 6.0
 21864                                  badrderr:
 21865                                  	; 24/02/2023
 21866 00002AB2 BA[3493]                	mov	dx,badrmd_ptr
 21867 00002AB5 EBB5                    	jmp	short RmDirErr
 21868                                  ;RmDirErr:
 21869                                  	;call	std_eprintf
 21870                                  ;;rmdir_retn
 21871                                  	;retn
 21872                                  
 21873                                  	; 24/02/2023
 21874                                  	; MSDOS 3.3
 21875                                  	;mov	dx,BADRMDPTR
 21876                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 21877                                  ;RMDIRERR:
 21878                                  	;call	STD_EPRINTF
 21879                                  ;RMDIR_RETN:
 21880                                  	;retn
 21881                                  
 21882                                  ; =============== S U B	R O U T	I N E =======================================
 21883                                  
 21884                                  ; 	<Common MkDir/RmDir set up code>
 21885                                  ;****************************************************************
 21886                                  ;*
 21887                                  ;* ROUTINE:	SETRMMK
 21888                                  ;*
 21889                                  ;* FUNCTION:	Parse routine for the internal MKDIR and RMDIR
 21890                                  ;*		commands. Parses the command line for a required
 21891                                  ;*		filespec.
 21892                                  ;*
 21893                                  ;* INPUT:	command line at offset 81H
 21894                                  ;*
 21895                                  ;* OUTPUT:	carry clear
 21896                                  ;*		    DS:DX points to ASCIIZ argument
 21897                                  ;*		carry set
 21898                                  ;*		    DS:DX has error message pointer
 21899                                  ;*
 21900                                  ;****************************************************************
 21901                                  
 21902                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21903                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2624h
 21904                                  	; 11/06/2023 - Retro DOS v4.2
 21905                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2BCEh
 21906                                  SETRMMK:
 21907                                  	; MSDOS 6.0
 21908 00002AB7 BE8100                  	mov	si,81h
 21909 00002ABA BF[3B98]                	mov	di,PARSE_MRDIR 	;AN000; Get address of PARSE_MRDIR
 21910 00002ABD 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 21911 00002ABF 31D2                    	xor	dx,dx		;AN000;
 21912                                  	;invoke	Parse_With_Msg	;AC000; call parser
 21913 00002AC1 E847FC                  	call	Parse_With_Msg
 21914                                  	;cmp	ax,0
 21915                                  	;cmp	ax,RESULT_NO_ERROR
 21916 00002AC4 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 21917 00002AC6 7519                    	jnz	short noargerr	;AC000; yes - exit
 21918                                  
 21919 00002AC8 BF[439B]                	mov	di,SRCXNAME
 21920                                  				;AN000; get address of srcxname
 21921 00002ACB 57                      	push	di		;AN000; save address
 21922 00002ACC 56                      	push	si		;AN000; save position in line
 21923 00002ACD C536[8BAA]              	lds	si,[PARSE1_ADDR]
 21924                                  				;AN000; get address of path
 21925                                  mrdir_move_filename:		;AN000; put filespec in srcxname
 21926 00002AD1 AC                      	lodsb			;get a char from buffer
 21927 00002AD2 AA                      	stosb			;AN000; store in srcxname
 21928                                  	;cmp	al,0
 21929                                  	;cmp	al,END_OF_LINE_OUT
 21930 00002AD3 20C0                    	and	al,al ; 0 ?	;AC000; it char a terminator?
 21931 00002AD5 75FA                    	jnz	short mrdir_move_filename
 21932                                  				;AC000; no - keep moving
 21933 00002AD7 5E                      	pop	si		;AN000; get line position back
 21934                                  
 21935                                  ; we have scanned an argument.	See if any args beyond.
 21936                                  
 21937 00002AD8 BF[3B98]                	mov	di,PARSE_MRDIR
 21938 00002ADB E817FC                  	call	parse_check_eol ;AC000; are we at end of line?
 21939 00002ADE 5A                      	pop	dx		;AC000; get address of SRCXNAME
 21940                                  	;retz			;yes - return no error
 21941 00002ADF 7406                    	jz	short setrmmk_retn
 21942                                  noargerr:
 21943 00002AE1 BA[F391]                	mov	dx,extend_buf_ptr
 21944                                  				;AC000; get extended message pointer
 21945 00002AE4 31C0                    	xor	ax,ax
 21946 00002AE6 F9                      	stc
 21947                                  setrmmk_retn:
 21948 00002AE7 C3                      	retn
 21949                                  
 21950                                  	; 24/02/2023
 21951                                  	; MSDOS 3.3
 21952                                  ;SETRMMK:
 21953                                  	;mov	si,81h
 21954                                  	;call	SCANOFF
 21955                                  	;cmp	al,0Dh
 21956                                  	;je	short NOARGERR
 21957                                  	;mov	dx,si
 21958                                  ;SETRMMK1:
 21959                                  	;lodsb
 21960                                  	;call	DELIM
 21961                                  	;jz	short SETRMMK3
 21962                                  	;cmp	al,0Dh
 21963                                  	;jne	short SETRMMK1
 21964                                  	;mov	byte [si-1],0
 21965                                  ;SETRMMK2:
 21966                                  	;retn
 21967                                  ;SETRMMK3:
 21968                                  	;mov	byte [si-1],0
 21969                                  	;push	si
 21970                                  	;call	SCANOFF
 21971                                  	;pop	si
 21972                                  	;cmp	al,0Dh
 21973                                  	;je	short SETRMMK2
 21974                                  ;NOARGERR:
 21975                                  	;mov	dx,BADARGSPTR
 21976                                  	;xor	ax,ax
 21977                                  	;stc
 21978                                  ;SETRMMK_RETN:
 21979                                  	;retn
 21980                                  
 21981                                  ; =============== S U B	R O U T	I N E =======================================
 21982                                  
 21983                                  ; MSDOS 6.0
 21984                                  
 21985                                  ;****************************************************************
 21986                                  ;*
 21987                                  ;* ROUTINE:	Set_ext_error_subst
 21988                                  ;*
 21989                                  ;* FUNCTION:	Sets up substitution for extended error
 21990                                  ;*
 21991                                  ;* INPUT:	AX - extended error number
 21992                                  ;*		DX - offset of string
 21993                                  ;*
 21994                                  ;* OUTPUT:	Extend_Buf_Ptr set up for STD_EPRINTF
 21995                                  ;*
 21996                                  ;****************************************************************
 21997                                  
 21998                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21999                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:267Ch
 22000                                  set_ext_error_subst:
 22001                                  	;mov	byte [msg_disp_class],1
 22002 00002AE8 C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class
 22003                                  					;AN022; set up extended error msg class
 22004 00002AED 8916[37A1]              	mov	[string_ptr_2],dx 	;AN022; get address of failed string
 22005                                  	;mov	byte [extend_buf_sub],1
 22006 00002AF1 C606[F591]01            	mov	byte [extend_buf_sub],one_subst 
 22007                                  	;AN022; put number of subst in control block
 22008 00002AF6 BA[F391]                	mov	dx,extend_buf_ptr 	;AN022; get extended message pointer
 22009 00002AF9 A3[F391]                	mov	[extend_buf_ptr],ax	;AN022; get message number in control block
 22010                                  savudir_err_retn: ; 24/02/2023
 22011 00002AFC C3                      	retn				;AN022; return
 22012                                  
 22013                                  ; =============== S U B	R O U T	I N E =======================================
 22014                                  
 22015                                  ; <SavUDir - preserve the users current directory on a particular drive>
 22016                                  
 22017                                  ; SavUDir - move the user's current directory on a drive into UserDir1
 22018                                  ; SavUDir1 - move the user's current directory on a drive into a specified
 22019                                  ;   buffer
 22020                                  ;
 22021                                  ;   Inputs:	DL has 1-based drive number
 22022                                  ;		ES:DI has destination buffer (SavUDir1 only)
 22023                                  ;   Outputs:	Carry Clear
 22024                                  ;		    DS = TranGroup
 22025                                  ;		Carry Set
 22026                                  ;		    AX has error code
 22027                                  ;   Registers Modified: AX, SI
 22028                                  
 22029                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22030                                  SAVUDIR:
 22031 00002AFD BF[F79C]                	mov	di,USERDIR1
 22032                                  ; --------------
 22033                                  SAVUDIR1:
 22034 00002B00 88D0                    	mov	al,dl
 22035 00002B02 0440                    	add	al,'@' ; 40h
 22036 00002B04 3C40                    	cmp	al,'@' ; 40h
 22037 00002B06 7506                    	jne	short GOTUDRV
 22038 00002B08 0206[299E]              	add	al,[CURDRV]
 22039 00002B0C FEC0                    	inc	al		; A = 1
 22040                                  GOTUDRV:
 22041 00002B0E AA                      	stosb
 22042 00002B0F 8A26[1A9E]              	mov	ah,[DIRCHAR]
 22043 00002B13 B03A                    	mov	al,':' ; 3Ah
 22044 00002B15 AB                      	stosw
 22045 00002B16 06                      	push	es
 22046 00002B17 1F                      	pop	ds
 22047 00002B18 89FE                    	mov	si,di
 22048 00002B1A B447                    	mov	ah,47h ; 24/02/2023
 22049                                  	;mov	ah,CURRENT_DIR	; 47h
 22050 00002B1C CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 22051                                  			; DL = drive (0=default,1=A,etc.)
 22052                                  			; DS:SI	points to 64-byte buffer area
 22053 00002B1E 72DC                    	jc	short savudir_err_retn ; 24/02/2023
 22054 00002B20 0E                      	push	cs
 22055 00002B21 1F                      	pop	ds
 22056 00002B22 C3                      	retn
 22057                                  
 22058                                  ; =============== S U B	R O U T	I N E =======================================
 22059                                  
 22060                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22061                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:26B7h
 22062                                  CRLF2:
 22063 00002B23 52                      	push	dx
 22064 00002B24 BA[D593]                	mov	dx,acrlf_ptr
 22065 00002B27 1E                      	push	ds
 22066 00002B28 0E                      	push	cs
 22067 00002B29 1F                      	pop	ds
 22068 00002B2A E8002A                  	call	std_printf
 22069 00002B2D 1F                      	pop	ds
 22070 00002B2E 5A                      	pop	dx
 22071 00002B2F C3                      	retn
 22072                                  
 22073                                  ; =============== S U B	R O U T	I N E =======================================
 22074                                  
 22075                                  ; These routines (SCANOFF, DELIM) are called in batch processing when DS
 22076                                  ; may NOT be TRANGROUP
 22077                                  
 22078                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22079                                  scanoff:
 22080 00002B30 AC                      	lodsb
 22081 00002B31 E80400                  	call	DELIM
 22082 00002B34 74FA                    	jz	short scanoff
 22083 00002B36 4E                      	dec	si		; Point to first non-delimiter
 22084                                  scanoff_retn:
 22085 00002B37 C3                      	retn
 22086                                  
 22087                                  ; =============== S U B	R O U T	I N E =======================================
 22088                                  
 22089                                  ; Input:    AL is character to classify
 22090                                  ; Output:   Z set if delimiter
 22091                                  ;	    NZ set otherwise
 22092                                  ; Registers modified: none
 22093                                  
 22094                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22095                                  DELIM:
 22096 00002B38 3C20                    	cmp	al,' '	 ;20h
 22097 00002B3A 74FB                    	je	short scanoff_retn
 22098 00002B3C 3C3D                    	cmp	al,'='  ; 3Dh
 22099 00002B3E 74F7                    	je	short scanoff_retn
 22100 00002B40 3C2C                    	cmp	al,','	; 2Ch
 22101 00002B42 74F3                    	je	short scanoff_retn
 22102 00002B44 3C3B                    	cmp	al,';'	 ;3Bh
 22103 00002B46 74EF                    	je	short scanoff_retn
 22104 00002B48 3C09                    	cmp	al,9		; Check for TAB character
 22105 00002B4A 74EB                    	je	short scanoff_retn
 22106 00002B4C 3C0A                    	cmp	al,0Ah		; Check for line feed character - BAS
 22107 00002B4E C3                      	retn
 22108                                  
 22109                                  
 22110                                  ; =============== S U B	R O U T	I N E =======================================
 22111                                  
 22112                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22113                                  FCB_TO_ASCZ:			
 22114                                  	; Convert DS:SI to ASCIZ ES:DI
 22115 00002B4F B90800                  	mov	cx,8
 22116                                  MAINNAME:
 22117 00002B52 AC                      	lodsb
 22118 00002B53 3C20                    	cmp	al,' ' ; 20h
 22119 00002B55 7401                    	jz	short SKIPSPC
 22120 00002B57 AA                      	stosb
 22121                                  SKIPSPC:
 22122 00002B58 E2F8                    	loop	MAINNAME
 22123 00002B5A AC                      	lodsb
 22124 00002B5B 3C20                    	cmp	al,' '
 22125 00002B5D 740F                    	je	short GOTNAME
 22126 00002B5F 88C4                    	mov	ah,al
 22127                                  	; 24/02/2023
 22128 00002B61 B02E                    	mov	al,'.' ; 2Eh  ; MSDOS 5.0 (& 6.0)
 22129                                  	;mov	al,[DOT_CHR]  ; MSDOS 3.3
 22130                                  	;stosb
 22131                                  	;xchg	al,ah
 22132                                  	;stosb
 22133                                  	; 24/02/2023
 22134 00002B63 AB                      	stosw
 22135 00002B64 B102                    	mov	cl,2
 22136                                  EXTNAME:
 22137 00002B66 AC                      	lodsb
 22138 00002B67 3C20                    	cmp	al,' '
 22139 00002B69 7403                    	je	short GOTNAME
 22140 00002B6B AA                      	stosb
 22141 00002B6C E2F8                    	loop	EXTNAME
 22142                                  GOTNAME:
 22143 00002B6E 30C0                    	xor	al,al
 22144 00002B70 AA                      	stosb
 22145                                  STRCOMP_RETN:
 22146 00002B71 C3                      	retn
 22147                                  
 22148                                  ; =============== S U B	R O U T	I N E =======================================
 22149                                  
 22150                                  ; Compare ASCIZ DS:SI with ES:DI.
 22151                                  ; SI,DI destroyed.
 22152                                  
 22153                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22154                                  STRCOMP:	
 22155 00002B72 A6                      	cmpsb
 22156 00002B73 75FC                    	jnz	short STRCOMP_RETN ; Strings not equal
 22157 00002B75 807CFF00                	cmp	byte [si-1],0	; Hit NUL terminator?	
 22158                                  	;jz	short STRCOMP_RETN ; Yes, strings equal
 22159                                  	;jmp	short STRCOMP	; Equal so far, keep going
 22160                                  	; 24/02/2023
 22161 00002B79 75F7                    	jnz	short STRCOMP
 22162 00002B7B C3                      	retn
 22163                                  
 22164                                  ; =============== S U B	R O U T	I N E =======================================
 22165                                  
 22166                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22167                                  CRPRINT:
 22168 00002B7C 50                      	push	ax
 22169                                  	;mov	al,13	; 0Dh
 22170 00002B7D B00D                    	mov	al,0Dh
 22171 00002B7F 51                      	push	cx
 22172 00002B80 57                      	push	di
 22173 00002B81 89D7                    	mov	di,dx
 22174 00002B83 B9FFFF                  	mov	cx,65535 ; 0FFFFh
 22175 00002B86 06                      	push	es
 22176 00002B87 1E                      	push	ds
 22177 00002B88 07                      	pop	es
 22178 00002B89 F2AE                    	repne	scasb		; LOOK FOR TERMINATOR
 22179 00002B8B C645FF00                	mov	byte [di-1],0	; nul terminate the string
 22180 00002B8F 07                      	pop	es
 22181 00002B90 8916[37A1]              	mov	[string_ptr_2],dx
 22182                                  	;mov	dx,STRINGBUF2PTR  ; MSDOS 3.3 (Retro DOS v3.0 COMMAND.COM)
 22183 00002B94 BA[BA93]                	mov	dx,string_buf_ptr ; MSDOS 5.0 (& 6.0)
 22184 00002B97 E89329                  	call	std_printf
 22185                                  	;mov	byte [di-1],13
 22186 00002B9A C645FF0D                	mov	byte [di-1],0Dh	; now put the CR back
 22187 00002B9E 7204                    	jb	short error_output
 22188 00002BA0 5F                      	pop	di
 22189 00002BA1 59                      	pop	cx
 22190 00002BA2 58                      	pop	ax
 22191 00002BA3 C3                      	retn
 22192                                  
 22193                                  ; ---------------------------------------------------------------------------
 22194                                  
 22195                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22196                                  error_output:
 22197 00002BA4 0E                      	push	cs
 22198 00002BA5 1F                      	pop	ds
 22199 00002BA6 8E06[159E]              	mov	es,[RESSEG]
 22200 00002BAA BA[0792]                	mov	dx,NOSPACE_PTR
 22201 00002BAD 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 22202 00002BB3 7406                    	jz	short go_to_error
 22203 00002BB5 E80409                  	call	PipeOff
 22204 00002BB8 BA[5493]                	mov	dx,PIPEEMES_PTR
 22205                                  go_to_error:
 22206 00002BBB E9E602                  	jmp	cerror
 22207                                  
 22208                                  ; =============== S U B	R O U T	I N E =======================================
 22209                                  
 22210                                  ;---- Mod for path invocation ----
 22211                                  
 22212                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 22213                                  pathchrcmp:
 22214                                  	; 18/03/2023	
 22215                                  	;push	ax
 22216                                  	;mov	ah,'/' ; 2Fh
 22217                                  	;cmp	[SWITCHAR],ah
 22218 00002BBE 803E[199E]2F            	cmp	byte [SWITCHAR],'/' ; 2Fh
 22219 00002BC3 7404                    	je	short noslasht
 22220 00002BC5 3C2F                    	cmp	al,'/'
 22221 00002BC7 7402                    	je	short pccont
 22222                                  noslasht:
 22223 00002BC9 3C5C                    	cmp	al,'\' ; 5Ch
 22224                                  pccont:	
 22225                                  	;pop	ax
 22226 00002BCB C3                      	retn
 22227                                  
 22228                                  ; =============== S U B	R O U T	I N E =======================================
 22229                                  
 22230                                  ; PATHCRUNCH -
 22231                                  ;
 22232                                  ; ENTRY FCB (in PSP) contains drive # to crunch on
 22233                                  ;       PathPos = ptr to string with pathname in it
 22234                                  ;       PathCnt = length of string
 22235                                  ;
 22236                                  ; EXIT  PathPos = ptr after pathname (w/ NULL) in string
 22237                                  ;       PathCnt = length left in string
 22238                                  ;       DestIsDir = nonzero if pathname delimiter char's found in pathname
 22239                                  ;       DestInfo<bit1> = set if wildcard char's found in pathname
 22240                                  ;       If path crunched successfully,
 22241                                  ;         CY = clear
 22242                                  ;         Current directory is changed to directory in pathname
 22243                                  ;         UserDir1 contains previous directory for use by RestUDir
 22244                                  ;         RestDir = nonzero to flag later restoration of user's dir
 22245                                  ;         DestTail = ptr to beginning of filename
 22246                                  ;         If filename found in pathname,
 22247                                  ;           ZR = clear
 22248                                  ;           FCB filename fields contain filename
 22249                                  ;         If filename not found (pure directory path),
 22250                                  ;           ZR = set
 22251                                  ;           FCB filename fields are wildcarded with ?'s
 22252                                  ;       If pathcrunch failed (no ChDir's worked),
 22253                                  ;         CY = set
 22254                                  ;         Msg_Numb = extended error code
 22255                                  ;
 22256                                  ; NOTE  DIR asks PathCrunch to forego parsing the filename into the
 22257                                  ;       FCB by setting DirFlag. In this case, the FCB is returned
 22258                                  ;       with the filename wildcarded.
 22259                                  
 22260                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 22261                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2767h
 22262                                  
 22263                                  	; 11/06/2023 - Retro DOS v4.2
 22264                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2D11h
 22265                                  PathCrunch:
 22266                                  	; MSDOS 6.0
 22267 00002BCC C706[CBA2]0000          	mov     word [Msg_Numb],0
 22268                                  				;AN022; Set up message flag
 22269                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22270                                  	;mov	dl,[5Ch]
 22271 00002BD2 8A165C00                	mov	dl,[FCB]	; DL = drive # (1 = A)
 22272 00002BD6 E824FF                  	call	SAVUDIR		; save current directory in UserDir1
 22273                                  	; MSDOS 6.0
 22274 00002BD9 7233                     	jc	short pcrunch_cderrj
 22275                                  				;AN022; if error on current dir - report
 22276 00002BDB E86004                  	call	SETPATH		; scan past switches, whitespace
 22277                                  
 22278                                  ;       DX = ptr to pathname, NULL-terminated
 22279                                  ;       PathPos = ptr to byte after NULL at end of pathname
 22280                                  
 22281                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22282 00002BDE F606[54A1]02            	test	byte [DestInfo],2 ; test if wildcards (? or *) seen
 22283 00002BE3 752C                    	jnz	short trypeel	; wildcard seen, peel filename
 22284                                  
 22285                                  	;mov	ah,CHDir ; 3Bh
 22286 00002BE5 B43B                    	mov	ah,3Bh
 22287 00002BE7 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22288                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22289                                  	; MSDOS 6.0
 22290 00002BE9 7313                    	jnc	short chdir_worked	;AN022; no error - continue
 22291                                  	
 22292 00002BEB E856F6                  	call	get_ext_error_number    ;AN022; get the extended error
 22293 00002BEE 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found
 22294 00002BF1 741E                    	je	short trypeel		;AC022;    keep trying
 22295 00002BF3 83F805                  	cmp	ax,ERROR_ACCESS_DENIED  ;AN022; if access denied
 22296 00002BF6 7419                    	je	short trypeel		;AC022;    keep trying
 22297 00002BF8 A3[CBA2]                	mov	[Msg_Numb],ax           ;AN022; set up message flag
 22298 00002BFB E99C00                  	jmp	peelfail                ;AN022; exit with other error
 22299                                  
 22300                                  	; MSDOS 3.3
 22301                                  	;jc	short trypeel
 22302                                  chdir_worked:
 22303                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22304 00002BFE E83406                  	call	SetRest1	; set 'Restore Directory' flag true
 22305 00002C01 B03F                    	mov	al,'?'		; if pure dir, wildcard filename in FCB
 22306 00002C03 BF5D00                  	mov	di,5Dh  ; FCB+1
 22307 00002C06 B90B00                  	mov	cx,11
 22308 00002C09 F3AA                    	rep	stosb
 22309 00002C0B 30C0                    	xor	al,al		; return carry clear, zero set
 22310 00002C0D C3                      	retn
 22311                                  
 22312                                  pcrunch_cderrj: 		;AN022; need this for long jmp
 22313 00002C0E E98100                  	jmp	pcrunch_cderr	;AN022;
 22314                                  
 22315                                  trypeel:
 22316 00002C11 8B36[A6A0]              	mov	si,[PathPos]
 22317 00002C15 4E                      	dec	si		; SI = ptr to NULL at end of pathname
 22318 00002C16 8A44FF                  	mov	al,[si-1]	; AL = last char of pathname
 22319                                  	; 25/02/2023
 22320                                  	; MSDOS 5.0 (& 6.0)
 22321 00002C19 803E[E6A2]00            	cmp	byte [KPARSE],0
 22322 00002C1E 7505                    	jnz	short delstrt	; Last char is 2nd KANJI byte, might be '\'
 22323                                  	
 22324 00002C20 E89BFF                  	call	pathchrcmp
 22325 00002C23 7475                    	jz	short peelfail	; Trailing '/'
 22326                                  delstrt:
 22327 00002C25 89F1                    	mov	cx,si		; CX = ptr to NULL at end of pathname
 22328 00002C27 89D6                    	mov	si,dx		; SI = ptr to start of pathname
 22329 00002C29 52                      	push	dx		; save ptr to pathname
 22330                                  delloop:
 22331 00002C2A 39CE                    	cmp	si,cx
 22332                                  	;jz	short BADRET
 22333                                  	; 25/02/2023
 22334 00002C2C 7413                    	je	short gotdele	; no char's left, we have what we have
 22335 00002C2E AC                      	lodsb			; AL = next char of pathname
 22336 00002C2F E8DFFC                  	call	testkanj
 22337 00002C32 7403                    	jz	short notkanj8	; not Kanji, move along
 22338 00002C34 46                      	inc	si
 22339 00002C35 EBF3                    	jmp	short delloop	
 22340                                  
 22341                                  	; 25/02/2023
 22342                                  	; MSDOS 3.3
 22343                                  	;mov	al,[si]
 22344                                  	;call	PATHCHRCMP
 22345                                  	;jz	short TRYCD
 22346                                  	;dec	si
 22347                                  	;jmp	short delloop
 22348                                  
 22349                                  notkanj8:
 22350 00002C37 E884FF                  	call	pathchrcmp
 22351 00002C3A 75EE                    	jnz	short delloop	; not a path delimiter, keep looking
 22352 00002C3C 89F2                    	mov	dx,si
 22353 00002C3E 4A                      	dec	dx		; DX = ptr to last delimiter found	
 22354 00002C3F EBE9                    	jmp	short delloop	; go look for more
 22355                                  
 22356                                  	; 25/02/2023
 22357                                  	; MSDOS 5.0 (& 6.0)
 22358                                  gotdele:
 22359 00002C41 89D6                    	mov	si,dx		; SI = ptr to pathname or last delim
 22360 00002C43 5A                      	pop	dx		; DX = ptr to pathname
 22361 00002C44 39D6                    	cmp	si,dx
 22362 00002C46 7454                    	je	short badret	; didn't find path delim
 22363 00002C48 89F1                    	mov	cx,si		; CX = ptr to last path delimiter
 22364 00002C4A 89D6                    	mov	si,dx		; SI = ptr to pathname
 22365                                  delloop2:			; Set value of KPARSE
 22366 00002C4C 39CE                    	cmp	si,cx
 22367 00002C4E 7412                    	je	short trycd	; roll up till SI meets CX
 22368 00002C50 C606[E6A2]00            	mov	byte [KPARSE],0
 22369 00002C55 AC                      	lodsb
 22370 00002C56 E8B8FC                  	call	testkanj
 22371 00002C59 74F1                    	jz	short delloop2
 22372 00002C5B 46                      	inc	si
 22373 00002C5C FE06[E6A2]              	inc	byte [KPARSE]
 22374 00002C60 EBEA                    	jmp	short delloop2
 22375                                  
 22376                                  trycd:
 22377 00002C62 50                      	push	ax
 22378                                  	; 25/02/2023
 22379 00002C63 B02E                    	mov	al,'.'
 22380                                  	;mov	al,[DOT_CHR]	; AL = '.'
 22381                                  	; MSDOS 6.0
 22382 00002C65 384401                  	cmp	[si+1],al	; check for '.' after path delim
 22383                                  				;M019; allow continuation if '. ' or 
 22384                                  				;M019; '..' is not found.
 22385 00002C68 7509                    	jne	short trycd1	;M019; '.' not found
 22386 00002C6A 384402                  	cmp	[si+2],al	;M019; check for '..'
 22387 00002C6D 7404                    	je	short trycd1	;M019; found '..'
 22388 00002C6F 807C0200                	cmp	byte [si+2],0	;M019; check for '. ' (null terminated)
 22389                                  trycd1:	
 22390 00002C73 58                      	pop     ax
 22391 00002C74 7424                    	jz	short peelfail	; if . or .., pure cd should have worked
 22392                                  
 22393                                  	; 25/02/2023
 22394                                  	; MSDOS 3.3
 22395                                  	;cmp	[si+1],	al	; check for '.' after path delim
 22396                                  	;pop	ax
 22397                                  	;jz	short PEELFAIL	; if . or .., pure cd should have worked
 22398                                  
 22399                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22400 00002C76 8A44FF                  	mov	al,[si-1]
 22401 00002C79 3C3A                    	cmp	al,':' 		; Special case d:\file
 22402 00002C7B 741F                    	je	short badret
 22403                                  	; 25/02/2023
 22404                                  	; MSDOS 6.0
 22405 00002C7D 803E[E6A2]00            	cmp	byte [KPARSE],0
 22406 00002C82 7505                    	jnz	short notdoublesl
 22407 00002C84 E837FF                  	call	pathchrcmp
 22408                                  	;jnz	short notdoublesl
 22409                                  				; Last char is 2nd KANJI byte, might be '\'
 22410                                  	; 25/02/2023
 22411 00002C87 7411                    	jz	short peelfail 
 22412                                  ;peelfail:
 22413                                  	;stc
 22414                                  	;retn
 22415                                  
 22416                                  notdoublesl:
 22417 00002C89 C60400                  	mov	byte [si],0
 22418                                  	;mov	ah,CHDir ; 3Bh
 22419 00002C8C B43B                    	mov	ah,3Bh
 22420 00002C8E CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22421                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22422 00002C90 7320                    	jnc	short cdsucc
 22423                                  
 22424                                  	; 25/02/2023
 22425                                  	; MSDOS 6.0
 22426                                  pcrunch_cderr:
 22427 00002C92 E8AFF5                  	call	get_ext_error_number
 22428                                  				;AN022; get the extended error
 22429 00002C95 A3[CBA2]                	mov	[Msg_Numb],ax	;AN022; set up message flag
 22430 00002C98 09F6                    	or	si,si		;AN022; set up zero flag to not zero
 22431                                  peelfail: ; 25/02/2023
 22432 00002C9A F9                      	stc			;AN022; set up carry flag
 22433                                  pcrunch_retn:
 22434 00002C9B C3                      	retn
 22435                                  
 22436                                  badret:
 22437                                  	; MSDOS 3.3 & MSDOS 6.0
 22438 00002C9C 8A04                    	mov	al,[si]
 22439 00002C9E E81DFF                  	call	pathchrcmp	; Special case 'DIRCHAR'file
 22440 00002CA1 F9                      	stc
 22441 00002CA2 75F7                    	jnz	short pcrunch_retn
 22442 00002CA4 30DB                    	xor	bl,bl
 22443 00002CA6 865C01                  	xchg	bl,[si+1]
 22444                                  	;mov	ah,CHDir ; 3Bh
 22445 00002CA9 B43B                    	mov	ah,3Bh
 22446 00002CAB CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 22447                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 22448                                  	;jc	short pcrunch_retn ; MSDOS 3.3
 22449                                  	; 25/02/2023
 22450 00002CAD 72E3                    	jc	short pcrunch_cderr
 22451                                  				;AN022; go to error exit 
 22452 00002CAF 885C01                  	mov	[si+1],bl
 22453                                  cdsucc:
 22454 00002CB2 E88005                  	call	SetRest1
 22455 00002CB5 46                      	inc	si		; Reset zero
 22456 00002CB6 8936[52A1]              	mov	[DestTail],si
 22457                                  	; 25/02/2023
 22458                                  	; MSDOS 6.0
 22459 00002CBA 9C                      	pushf			;AN015; save flags
 22460 00002CBB 803E[AEA0]FF            	cmp	byte [DirFlag],-1
 22461                                  				;AN015; don't do parse if in DIR
 22462 00002CC0 7408                    	je	short pcrunch_end
 22463                                  				;AN015;
 22464                                  	; MSDOS 3.3 & MSDOS 6.0
 22465 00002CC2 BF5C00                  	mov	di,FCB  ; 5Ch
 22466                                  	;mov	ax,(Parse_File_Descriptor<<8)|2 ; 2902h
 22467 00002CC5 B80229                  	mov	ax,2902h	
 22468 00002CC8 CD21                    	int	21h		; Parse with default drive
 22469                                  			; DOS -	PARSE FILENAME
 22470                                  			; DS:SI	-> string to parse
 22471                                  			; ES:DI	-> buffer to fill with unopened	FCB
 22472                                  			; AL = bit mask	to control parsing
 22473                                  	; MSDOS 3.3
 22474                                  	;retn
 22475                                  
 22476                                  pcrunch_end:
 22477 00002CCA 9D                      	popf			;AN015; get flags back
 22478 00002CCB C3                      	retn
 22479                                  
 22480                                  ;============================================================================
 22481                                  ; TMISC1.ASM, MSDOS 6.0, 1991
 22482                                  ;============================================================================
 22483                                  ; 05/10/2018 - Retro DOS v3.0
 22484                                  
 22485                                  ;TITLE	Part7 COMMAND Transient Routines
 22486                                  
 22487                                  ;	More misc routines
 22488                                  
 22489                                  ;---------------------------
 22490                                  ; We can get rid of this switch processing code if we can take
 22491                                  ; care of the remaining two calls to switch, later in the file.
 22492                                  ; However, I have not checked whether or not any other files use
 22493                                  ; switch -- after all, it IS public!
 22494                                  ;---------------------------
 22495                                  
 22496                                  ; 14/06/2023
 22497                                  SWCOUNT	EQU 8	; MSDOS 6.22		; Length of switch_list
 22498                                  ; 28/03/2023
 22499                                  ;SWCOUNT  EQU  6  ; MSDOS 6.0 (& MSDOS 5.0)
 22500                                  ;;SWCOUNT EQU  5  ; MSDOS 3.3	
 22501                                  
 22502                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1AC2h
 22503                                  
 22504                                  ; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 22505                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2869h
 22506                                  
 22507                                  ; ---------------------------------------------------------------------------
 22508                                  
 22509                                  	; 25/02/2023
 22510                                  RETSW:
 22511 00002CCC 93                      	xchg	ax,bx		; Put switches in AX
 22512 00002CCD C3                      	retn
 22513                                  
 22514                                  ; =============== S U B	R O U T	I N E =======================================
 22515                                  
 22516                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22517                                  	; 11/06/2023 - Retro DOS 4.2 COMMAND.COM
 22518                                  SWITCH:
 22519 00002CCE 31DB                    	xor	bx,bx		; Initialize - no switches set
 22520                                  SWLOOP:
 22521 00002CD0 E85DFE                  	call	scanoff		; Skip any delimiters
 22522 00002CD3 3A06[199E]              	cmp	al,[SWITCHAR]	; Is it a switch specifier?
 22523 00002CD7 75F3                    	jnz	short RETSW	; No -- we're finished
 22524 00002CD9 81CB0080                	or	bx,8000h
 22525                                  	;or	bx,FSWITCH	; Indicate there is a switch specified
 22526 00002CDD 46                      	inc	si		; Skip over the switch character
 22527 00002CDE E84FFE                  	call	scanoff
 22528 00002CE1 3C0D                    	cmp	al,0Dh
 22529 00002CE3 74E7                    	je	short RETSW	; Oops
 22530 00002CE5 46                      	inc	si
 22531                                  
 22532                                  	; Convert lower case input to upper case
 22533                                  
 22534 00002CE6 E852FC                  	call	UPCONV
 22535                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 22536                                  
 22537 00002CE9 BF[8297]                	mov	di,switch_list	; "-Y?VBAPW" (for MSDOS 6.22) ; 11/06/2023
 22538                                  				; "?VBAPW" (for MSDOS 6.0)
 22539                                  				; ("VBAPW" (for MSDOS 3.3))
 22540                                  	; 11/06/2023
 22541                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2E33h
 22542 00002CEC B90800                  	mov	cx,8  ; MSDOS 6.22	   	
 22543                                  	;mov	cx,6  ; MSDOS 6.0 (& MSDOS 5.0)
 22544                                  	;;mov	cx,5  ; MSDOS 3.3
 22545                                  	;;mov	cx,SWCOUNT ; 5 (for MSDOS 3.3), (6 (for MSDOS 6.0))
 22546                                  		
 22547                                  	;nop
 22548                                  		
 22549 00002CEF F2AE                    	repne	scasb		; Look for matching switch
 22550 00002CF1 7507                    	jnz	short BADSW
 22551 00002CF3 B80100                  	mov	ax,1
 22552 00002CF6 D3E0                    	shl	ax,cl		; Set a bit for the switch
 22553 00002CF8 09C3                    	or	bx,ax
 22554                                  BADSW: 				; Retro DOS v3.0 COMMAND.COM modificiation
 22555 00002CFA EBD4                    	jmp	short SWLOOP
 22556                                  ;BADSW:
 22557                                  	;jmp	short SWLOOP
 22558                                  ;DRVBAD:
 22559                                  ;	mov	dx,baddrv_ptr
 22560                                  ;	jmp	cerror
 22561                                  EXTERNALJ:
 22562 00002CFC E90501                  	jmp	EXTERNAL
 22563                                  FNDCOM:				; search the internal command table
 22564 00002CFF 08C0                    	or	al,al		; Get real length of first arg
 22565 00002D01 74F9                    	jz	short EXTERNALJ	; If 0, it must begin with "\" so has
 22566                                  				;  to be external.
 22567                                  ; barryf code starts here
 22568                                  
 22569 00002D03 E82703                  	call	test_append	; see if APPEND installed
 22570 00002D06 7429                    	jz	short CONTCOM	; not loaded
 22571                                  
 22572                                  APPEND_INTERNAL:
 22573 00002D08 8A0E[D19F]              	mov	cl,[IDLEN]
 22574 00002D0C B500                    	mov	ch,0
 22575 00002D0E 890E[A6A0]              	mov	[PathPos],cx
 22576                                  	
 22577                                  	; 25/02/2023	
 22578                                  	; MSDOS 6.0
 22579 00002D12 FE06[CDA2]              	inc 	byte [append_exec]
 22580                                  				;AN041; set APPEND to ON
 22581 00002D16 E8B603                  	call	IOSET		; re-direct the o'l io
 22582                                  
 22583 00002D19 BE[D19F]                	mov	si,IDLEN	; address command name, DS already set	
 22584 00002D1C BAFFFF                  	mov	dx,-1 ; 0FFFFh	; set invoke function
 22585                                  		
 22586                                  	; MSDOS 6.0
 22587 00002D1F BF[1755]                	mov	di,append_parse
 22588                                  				;AN010; Get the entry point for PARSE for APPEND
 22589                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22590 00002D22 B801AE                  	mov	ax,0AE01h
 22591 00002D25 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal
 22592                                  			; - INSTALLABLE	COMMAND	- EXECUTE
 22593                                  			; DX = FFFFh, DS:SI -> buffer
 22594                                  			; Return: buffer at DS:SI filled with a	length byte
 22595                                  			; followed by the uppercase internal command
 22596                                  			; to execute (if length not 0)
 22597                                  	; 25/02/2023
 22598                                  	; INT 2Fh
 22599                                  	; 	AX = AE01h
 22600                                  	; entry:
 22601                                  	; 	DX = magic value FFFFh
 22602                                  	; 	CH = 00h
 22603                                  	; 	CL = length of command name
 22604                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 22605                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 22606                                  	; return:
 22607                                  	;	DS:SI buffer updated
 22608                                  	;	if length byte is nonzero, the following bytes contain
 22609                                  	;	the uppercase internal command to execute and the command line
 22610                                  	; 	buffer contains the command's parameters
 22611                                  	;	(the first DS:[SI] bytes are ignored)
 22612                                  	;
 22613                                  	; Format of COMMAND.COM command line buffer:
 22614                                  	;	Offset  Size    Description
 22615                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 22616                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 22617                                  	;	N BYTEs command line text, terminated by 0Dh
 22618                                  	;
 22619                                  	; Format of command name buffer:
 22620                                  	;	Offset  Size    Description
 22621                                  	;	00h     BYTE    length of command name
 22622                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 22623                                  
 22624 00002D27 803E[D19F]00            	cmp	byte [IDLEN],0 ; execute requested
 22625 00002D2C 7503                    	jne	short CONTCOM
 22626 00002D2E E9A300                  	jmp	CMD_DONE
 22627                                  
 22628                                  	;nop
 22629                                  CONTCOM:			; continue with internal scan
 22630 00002D31 BF[0196]                	mov	di,COMTAB
 22631 00002D34 31C9                    	xor	cx,cx
 22632                                  FINDCOM:
 22633 00002D36 BE[D29F]                	mov	si,ID		; pointer to command argument
 22634 00002D39 8A0D                    	mov	cl,[di]		; load length of internal command
 22635 00002D3B 47                      	inc	di		; advance past length
 22636 00002D3C E3BE                    	jcxz	EXTERNALJ 	; if it's zero, we're out of internals
 22637 00002D3E 3A0E[D19F]              	cmp	cl,[IDLEN]	; that of the command argument
 22638 00002D42 7506                    	jne	short ABCD	; lengths not equal ==> strings not eq
 22639 00002D44 890E[A6A0]              	mov	[PathPos],cx	; store length of command
 22640 00002D48 F3A6                    	repe	cmpsb
 22641                                  ABCD:					
 22642 00002D4A 9F                      	lahf			; save the good ol' flags
 22643 00002D4B 01CF                    	add	di,cx		; skip over remaining internal, if any
 22644 00002D4D 8A05                    	mov	al,[di]		; load drive-check indicator byte (DCIB)
 22645 00002D4F A2[279E]                	mov	[CHKDRV],al	; save command flag byte in chkdrv
 22646 00002D52 47                      	inc	di		; increment DI (OK, OK, I'll stop)
 22647 00002D53 8B1D                    	mov	bx,[di]		; load internal command address
 22648 00002D55 47                      	inc	di		; skip over the puppy
 22649 00002D56 47                      	inc	di
 22650                                  		
 22651                                  	; MSDOS 6.0
 22652 00002D57 8B15                    	mov	dx,[di]		; load ptr to help msg #s
 22653 00002D59 47                      	inc	di
 22654 00002D5A 47                      	inc	di
 22655 00002D5B 9E                      	sahf			; remember those flags?
 22656 00002D5C 75D8                    	jnz	short FINDCOM	; well, if all the cmps worked...
 22657                                  
 22658                                  ; All messages get redirected.
 22659                                  
 22660 00002D5E 803E[CDA2]00            	cmp     byte [append_exec],0
 22661                                  				;AN041; APPEND just executed?
 22662 00002D63 7503                    	jnz 	short DONT_SET_IO
 22663                                  				;AN041; Yes - this junk is already set
 22664 00002D65 E86703                  	call	IOSET		; re-direct the ol' i/o
 22665                                  
 22666                                  DONT_SET_IO:			;AN041;
 22667                                  
 22668                                  ; Check for /?. Certain commands, flagged fLimitHelp,
 22669                                  ; respond to /? only if it is the only command-line argument.
 22670                                  
 22671 00002D68 A1[2C9E]                	mov	ax,[COMSW]	; AX = switches after command
 22672 00002D6B 0B06[329E]              	or	ax,[AllSwitch]	; AX = all switches
 22673                                  	;and	ax,SwitchQues	
 22674 00002D6F 83E020                  	and	ax,20h
 22675 00002D72 7426                    	jz	short DRIVE_CHECK
 22676                                  				; /? not in command line
 22677 00002D74 F606[279E]04            	test	byte [CHKDRV],4	
 22678                                  	;test	byte [CHKDRV],fLimitHelp
 22679 00002D79 7407                    	jz	short DO_HELP	; /? allowed in combination
 22680                                  
 22681                                  ; Make sure /? is the only argument on the command line.
 22682                                  
 22683 00002D7B 833E[A7A5]02            	cmp	word [ARG+ARG_UNIT.argvcnt],2
 22684 00002D80 7518                    	jne	short DRIVE_CHECK
 22685                                  				; /? not only arg - ignore
 22686                                  
 22687                                  ; Note: this is all the check we need, even against things like /??.
 22688                                  ; Our argv parser breaks /?? into two args, /? and ?.
 22689                                  
 22690                                  DO_HELP:
 22691                                  ; DX = ptr to word list of msg #s, terminated by zero word
 22692                                  
 22693 00002D82 89D6                    	mov	si,dx		; SI = ptr to list of msg #s
 22694                                      	;mov	ax,no_subst	; AL = no subst's code
 22695 00002D84 B80000                  	mov	ax,0
 22696 00002D87 50                      	push	ax		; build subst block on stack
 22697                                  
 22698                                  NEXT_HELP_MSG:
 22699 00002D88 AD                      	lodsw			; AX = help msg # or zero
 22700 00002D89 09C0                    	or	ax,ax
 22701 00002D8B 7409                    	jz	short HELP_DONE
 22702 00002D8D 50                      	push	ax		; SS:SP = ptr to subst block
 22703                                  				; (msg # and no_subst byte)
 22704                                  ;; We assume DS = SS.
 22705                                  	
 22706 00002D8E 89E2                    	mov     dx,sp		; DS:DX = ptr to subst block
 22707 00002D90 E89A27                  	call	std_printf	; display help message	
 22708 00002D93 58                      	pop	ax		; remove msg # from stack
 22709 00002D94 EBF2                    	jmp	short NEXT_HELP_MSG
 22710                                  
 22711                                  HELP_DONE:
 22712 00002D96 58                      	pop	ax		; clean up stack
 22713 00002D97 E96AD3                  	jmp	TCOMMAND	
 22714                                  
 22715                                  	; 25/02/2023
 22716                                  	; MSDOS 3.3
 22717                                  	;sahf			; remember those flags?
 22718                                  	;jnz	short FINDCOM	; well, if all the cmps worked...
 22719                                  	;call	IOSET		; re-direct the ol' i/o
 22720                                  
 22721                                  DRIVE_CHECK:
 22722 00002D9A F606[279E]01            	test	byte [CHKDRV],1
 22723                                  	;test	byte [CHKDRV],FCHECKDRIVE 
 22724                                  				; did we wanna check those drives?
 22725 00002D9F 7411                    	jz	short NOCHECK
 22726 00002DA1 A0[2A9E]                	mov	al,[PARM1]	; parse_file_descriptor results tell
 22727 00002DA4 0A06[2B9E]              	or	al,[PARM2]	; us whether those drives were OK
 22728 00002DA8 3CFF                    	cmp	al,-1
 22729 00002DAA 7506                    	jne	short NOCHECK
 22730                                  	;jmp	DRVBAD
 22731                                  	; 25/02/2023
 22732                                  DRVBAD:
 22733 00002DAC BA[4F92]                	mov	dx,baddrv_ptr
 22734 00002DAF E9F200                  	jmp	cerror
 22735                                  
 22736                                  ; The user may have omitted the space between the command and its arguments.
 22737                                  ; We need to copy the remainder of the user's command line into the buffer.
 22738                                  ; Note that thisdoes not screw up the arg structure; it points into COMBUF not
 22739                                  ; into the command line at 80.
 22740                                  
 22741                                  NOCHECK:
 22742 00002DB2 E85B02                  	call	cmd_copy
 22743                                  SWITCHECK:
 22744                                  	;test	byte [CHKDRV],2
 22745 00002DB5 F606[279E]02            	test	byte [CHKDRV],fSwitchAllowed 
 22746                                  				; Does the command take switches
 22747 00002DBA 7516                    	jnz	short REALWORK	; Yes, process the command
 22748 00002DBC E82F00                  	call	noswit		; No, check to see if any switches
 22749 00002DBF 7511                    	jnz	short REALWORK	; None, process the command
 22750                                  
 22751                                  	; MSDOS 6.0
 22752                                  	;mov	byte [msg_disp_class],2
 22753 00002DC1 C606[F191]02            	mov	byte [msg_disp_class],parse_msg_class
 22754                                  				;AN000; set up parse error msg class
 22755 00002DC6 BA[F391]                	mov	dx,extend_buf_ptr	
 22756                                  				;AC000; get extended message pointer
 22757                                  	;mov	word [extend_buf_ptr],3
 22758 00002DC9 C706[F391]0300          	mov	word [extend_buf_ptr],BadSwt_Ptr
 22759                                  				;AN000; get "Invalid switch" message number
 22760 00002DCF E9D200                  	jmp	cerror		; Print error and chill out...
 22761                                  
 22762                                  	; 25/02/2023
 22763                                  	; MSDOS 3.3
 22764                                  	;mov	dx,BADPARMPTR
 22765                                  	;jmp	CERROR
 22766                                  
 22767                                  REALWORK:
 22768 00002DD2 FFD3                    	call	bx		; do some real work, at last
 22769                                  
 22770                                  ; See if we're in a batch CALL command. If we are, reprocess the command line,
 22771                                  ; otherwise, go get another command.
 22772                                  
 22773                                  CMD_DONE:
 22774 00002DD4 0E                      	push	cs		; g  restore data segment
 22775 00002DD5 1F                      	pop	ds		; g
 22776 00002DD6 1E                      	push	ds
 22777 00002DD7 8E1E[159E]              	mov	ds,[RESSEG]	; g  save data segment
 22778                                  	;cmp	byte [Call_Flag],1
 22779                                  				; G  Is a call in progress?
 22780 00002DDB 803E[4E02]01            	cmp	byte [Call_Flag],call_in_progress
 22781 00002DE0 C606[4E02]00            	mov	byte [Call_Flag],0
 22782                                  				; G  Either way, reset flag
 22783 00002DE5 1F                      	pop	ds		; g  get data segment back
 22784 00002DE6 7403                    	jz	short INCALL	; G
 22785 00002DE8 E919D3                  	jmp	TCOMMAND	; chill out...
 22786                                  INCALL:
 22787                                  	;jmp	DOCOM1
 22788                                  	; 11/06/2023
 22789                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 22790 00002DEB E905D5                  	jmp	DOCOM0
 22791                                  
 22792                                  ; =============== S U B	R O U T	I N E =======================================
 22793                                  
 22794                                  	; 25/02/2023
 22795                                  noswit:
 22796 00002DEE 57                      	push	di		; Save di
 22797 00002DEF BF8100                  	mov	di,81h		; di = ptr to command args
 22798 00002DF2 BE8000                  	mov	si,80h		; Get address of length of command args
 22799 00002DF5 AC                      	lodsb			; Load length
 22800 00002DF6 88C1                    	mov	cl,al		; Move length to cl
 22801 00002DF8 30ED                    	xor	ch,ch		; Zero ch
 22802 00002DFA 2EA0[199E]              	mov	al,[cs:SWITCHAR] ; al = switch character
 22803                                  	;cmp	al,0		; Turn off ZF
 22804                                  	; 25/02/2023
 22805 00002DFE 20C0                    	and	al,al
 22806 00002E00 F2AE                    	repne	scasb		; Scan for a switch character and return
 22807 00002E02 5F                      	pop	di		;  with ZF set if one was found
 22808 00002E03 C3                      	retn
 22809                                  
 22810                                  ; ---------------------------------------------------------------------------
 22811                                  
 22812                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22813                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:29A6h
 22814                                  
 22815                                  EXTERNAL:
 22816 00002E04 E82602                  	call	test_append	; check to see if append installed
 22817 00002E07 7403                    	jz	short NOT_BARRYF
 22818                                  				; no - truly external command
 22819 00002E09 E9FCFE                  	jmp	APPEND_INTERNAL	; yes - go to Barryf code
 22820                                  
 22821                                  NOT_BARRYF:
 22822 00002E0C 2EC606[289E]00          	mov	byte [cs:FILTYP],0
 22823 00002E12 2E8A16[359E]            	mov	dl,[cs:SPECDRV]
 22824 00002E17 2E8816[D19F]            	mov	[cs:IDLEN],dl
 22825 00002E1C 2EC606[4BA1]00          	mov	byte [cs:ROM_CALL],0
 22826 00002E22 52                      	push	dx
 22827 00002E23 BA[D19F]                	mov	dx,IDLEN
 22828 00002E26 E8A4D6                  	call	ROM_SCAN
 22829 00002E29 5A                      	pop	dx
 22830                                  	;jnc	short POSTSAVE
 22831 00002E2A 7305                    	jnc	short DO_SCAN
 22832 00002E2C 2EFE06[4BA1]            	inc	byte [cs:ROM_CALL]
 22833                                  	;jmp	short POSTSAVE
 22834                                  
 22835                                  	;nop
 22836                                  DO_SCAN:
 22837                                  POSTSAVE:
 22838 00002E31 BF[3D9D]                	mov	di,EXECPATH
 22839 00002E34 C60500                  	mov	byte [di],0	; Initialize to current directory
 22840                                  	
 22841 00002E37 2E803E[4BA1]00          	cmp	byte [cs:ROM_CALL],0
 22842                                  	;jz	short RESEARCH
 22843                                  	; 25/02/2023
 22844                                  	;jmp	short NEOEXECUTE
 22845 00002E3D 750F                    	jnz	short NEOEXECUTE	
 22846                                  
 22847                                  	;nop
 22848                                  RESEARCH:
 22849 00002E3F E86E08                  	call	path_search	; find the mother (result in execpath)
 22850 00002E42 09C0                    	or	ax,ax		; did we find anything?
 22851                                  	;jz	short BADCOMJ45	; null means no (sob)
 22852                                  	; 25/02/2023
 22853 00002E44 7459                    	jz	short BADCOM
 22854 00002E46 83F804                  	cmp	ax,4		; 04H and 08H are .exe and .com
 22855                                  				; fuckin' sixteen-bit machine ought
 22856                                  	;jl	short BATCOMJ	; to be able to handle a SIXTEEN-BIT
 22857                                  				; DISPLACEMENT!!
 22858                                  	;;jmp	short NEOEXECUTE
 22859                                  	;jmp	short EXECUTE	
 22860                                  	; 25/02/2023
 22861 00002E49 7D03                    	jnl	short EXECUTE ; jge
 22862                                  
 22863                                  	; 02H is .bat
 22864                                  
 22865                                  	;nop
 22866                                  BATCOMJ:
 22867 00002E4B E90FDA                  	jmp	BATCOM
 22868                                  
 22869                                  	; 25/02/2023
 22870                                  ;BADCOMJ45:
 22871                                  	;jmp	short BADCOM
 22872                                  
 22873                                  	;nop
 22874                                  EXECUTE:
 22875                                  NEOEXECUTE:
 22876 00002E4E E87E02                  	call	IOSET
 22877                                  
 22878                                  ; MSDOS 6.0
 22879                                  ;M051
 22880                                  ; Previously LoadHigh was jumping to the execute label above. This was wrong
 22881                                  ;because IOSET was getting invoked twice resulting in 2 sets of redirections.
 22882                                  ;After a close, this would still leave one open active resulting in sharing
 22883                                  ;errors on subsequent opens of the redirected file.
 22884                                  
 22885                                  LH_EXECUTE:			;M051	
 22886 00002E51 8E06[259E]              	mov	es,[TRAN_TPA]
 22887                                  	;mov	ah,DEALLOC ; 49h
 22888 00002E55 B449                    	mov	ah,49h
 22889 00002E57 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 22890                                  			; ES = segment address of area to be freed
 22891                                  				; Now running in "free" space
 22892 00002E59 8E06[159E]              	mov	es,[RESSEG]
 22893 00002E5D 26FE06[3702]            	inc	byte [es:ExtCom] ; Indicate external command
 22894 00002E62 26C606[3F02]00          	mov	byte [es:RestDir],0 
 22895                                  				; Since USERDIR1 is in transient, insure
 22896                                  				; this flag value for re-entry to COMMAND
 22897                                  	; MSDOS 6.0
 22898 00002E68 BE[3D9D]                	mov	si,EXECPATH	  ; offset TRANGROUP:EXECPATH	
 22899 00002E6B BF[0204]                	mov	di,SafePathBuffer ; offset RESGROUP:SAFEPATHBUFFER
 22900                                  	;mov	cx,LENMSGORPATHBUF
 22901 00002E6E B95000                  	mov	cx,80
 22902 00002E71 FC                      	cld
 22903 00002E72 F3A4                    	rep	movsb		; copy program pathname to resident
 22904                                  
 22905                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22906 00002E74 BF5C00                  	mov	di,FCB ; 5Ch
 22907 00002E77 89FE                    	mov	si,di
 22908                                  	;mov	cx,82 ; 52h	; moving (100h-5Ch)/2 = 80h-2Eh
 22909 00002E79 B152                    	mov	cl,82 ; 25/02/2023
 22910 00002E7B F3A5                    	rep	movsw		; Transfer parameters to resident header
 22911                                  	
 22912                                  	; 25/02/2023
 22913                                  	;mov	dx,EXECPATH  ; MSDOS 3.3
 22914                                  	; MSDOS 6.0 (& 5.0)
 22915                                  	;mov	dx,offset RESGROUP:SAFEPATHBUFFER
 22916 00002E7D BA[0204]                	mov	dx,SafePathBuffer
 22917 00002E80 06                      	push	es
 22918 00002E81 1F                      	pop	ds
 22919                                  
 22920                                  	;mov	bx,offset RESGROUP:EXEC_BLOCK
 22921 00002E82 BB[DC03]                	mov	bx,Exec_Block  ; = offset EnvirSeg
 22922                                  	;mov	ax,EXEC*256 ; 4B00h
 22923 00002E85 B8004B                  	mov	ax,4B00h
 22924                                  	;test	byte [ROM_CALL],-1 ; 0FFh ; MSDOS 3.3
 22925 00002E88 2EF606[4BA1]FF          	test	byte [cs:ROM_CALL],-1 ; MSDOS 6.0 (& 5.0)
 22926 00002E8E 7403                    	jz	short OK_EXEC
 22927 00002E90 E9B3D6                  	jmp	ROM_EXEC
 22928                                  
 22929                                  OK_EXEC:
 22930                                  
 22931                                  ; we are now running in free space. Anything we do from here on may get
 22932                                  ; trashed. Move the stack (also in free space) to allocated space because
 22933                                  ; since EXEC restores the stack, somebody may trash what is on the stack.
 22934                                  
 22935 00002E93 8CC1                    	mov	cx,es
 22936 00002E95 8ED1                    	mov	ss,cx
 22937 00002E97 BC[D604]                	mov	sp,RStack
 22938                                  	; MSDOS 3.3
 22939                                  	;jmp	far [EXEC_ADDR]	; Jmp to the EXEC in the resident
 22940                                  	; 25/02/2023
 22941                                  	; MSDOS 6.0
 22942 00002E9A 2EFF2E[1B9E]            	jmp	far [cs:EXEC_ADDR] ; Jmp to the EXEC in the resident
 22943                                  
 22944                                  ; ---------------------------------------------------------------------------
 22945                                  
 22946                                  	;  25/02/2023 - Retro DOS v4.0 COMMAND.COM
 22947                                  BADCOM:
 22948 00002E9F 0E                      	push	cs
 22949 00002EA0 1F                      	pop	ds
 22950 00002EA1 BA[1692]                	mov	dx,BADNAM_PTR
 22951                                  cerror:		
 22952 00002EA4 E87E26                  	call	std_eprintf
 22953 00002EA7 E95AD2                  	jmp	TCOMMAND
 22954                                  
 22955                                  ; =============== S U B	R O U T	I N E =======================================
 22956                                  
 22957                                  ; Prescan converts the input buffer into a canonicalized form.
 22958                                  ; All redirections and pipes are removed.
 22959                                  
 22960                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22961                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2A51h
 22962                                  
 22963                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 22964                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2FFBh
 22965                                  
 22966                                  PRESCAN:
 22967 00002EAA 31C9                    	xor	cx,cx
 22968 00002EAC 8E06[159E]              	mov	es,[RESSEG]
 22969 00002EB0 BE[769C]                	mov	si,COMBUF+2
 22970 00002EB3 89F7                    	mov	di,si
 22971                                  COUNTQUOTES:
 22972 00002EB5 AC                      	lodsb			; get a byte
 22973 00002EB6 3C22                    	cmp	al,22h	; '"'	; is it a quote?
 22974 00002EB8 7504                    	jne	short COUNTEND	; no, try for end of road
 22975 00002EBA FEC5                    	inc	ch		; bump count
 22976 00002EBC EBF7                    	jmp	short COUNTQUOTES
 22977                                  				; go get next char
 22978                                  COUNTEND:
 22979 00002EBE 3C0D                    	cmp	al,0Dh	; 13	; end of road?
 22980 00002EC0 75F3                    	jne	short COUNTQUOTES
 22981                                  				; no, go back for next char
 22982                                  	; 26/02/2023
 22983                                  	; MSDOS 5.0 (& 6.0)
 22984 00002EC2 51                      	push	cx		; save count
 22985 00002EC3 89FE                    	mov	si,di		; restore pointer to begining
 22986                                  KanjiScan:
 22987 00002EC5 AC                      	lodsb			; get a byte
 22988 00002EC6 E848FA                  	call	testkanj	; is it a leadin byte
 22989 00002EC9 740F                    	jz	short KanjiQuote
 22990                                  				; no, check for quotes
 22991 00002ECB 88C4                    	mov	ah,al		; save leadin
 22992 00002ECD AC                      	lodsb			; get trailing byte
 22993 00002ECE 3D2020                  	cmp	ax,2020h
 22994                                  	;cmp	ax,DB_SPACE	; is it Kanji space
 22995 00002ED1 75F2                    	jne	short KanjiScan	; no, go get next
 22996 00002ED3 C744FE2020              	mov	word [si-2],2020h
 22997                                  				; replace with spaces
 22998 00002ED8 EBEB                    	jmp	short KanjiScan	; go get next char
 22999                                  	
 23000                                  KanjiQuote:
 23001 00002EDA 3C22                    	cmp	al,22h	; '"'	; beginning of quoted string
 23002 00002EDC 750D                    	jne	short KanjiEnd	; no, check for end
 23003 00002EDE FECD                    	dec	ch		; drop count
 23004 00002EE0 74E3                    	jz	short KanjiScan	; if count is zero, no quoting
 23005                                  KanjiQuoteLoop:
 23006 00002EE2 AC                      	lodsb			; get next byte
 23007 00002EE3 3C22                    	cmp	al,22h	; '"'	; is it another quote
 23008 00002EE5 75FB                    	jne	short KanjiQuoteLoop
 23009                                  				; no, get another
 23010 00002EE7 FECD                    	dec	ch		; yes, drop count
 23011 00002EE9 EBDA                    	jmp	short KanjiScan	; go get next char
 23012                                  KanjiEnd:
 23013 00002EEB 3C0D                    	cmp	al,13 ; 0Dh	; end of line character?
 23014 00002EED 75D6                    	jne	short KanjiScan	; go back to beginning
 23015 00002EEF 59                      	pop	cx		; get back original count
 23016                                  	; 26/04/2023
 23017 00002EF0 89FE                    	mov	si,di		; restore pointer to beginning
 23018                                  	
 23019                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23020                                  PRESCANLP:
 23021 00002EF2 AC                      	lodsb
 23022                                  	; 26/02/2023
 23023 00002EF3 E81BFA                  	call	testkanj
 23024 00002EF6 740C                    	jz	short NOTKANJ6
 23025                                  	; MSDOS 6.0
 23026 00002EF8 8805                    	mov	[di],al
 23027 00002EFA 47                      	inc	di		; fake STOSB into DS
 23028 00002EFB AC                      	lodsb			; grab second byte
 23029 00002EFC 8805                    	mov	[di],al		; fake stosb into DS
 23030 00002EFE FEC1                    	inc	cl
 23031 00002F00 FEC1                    	inc	cl
 23032 00002F02 EBEE                    	jmp	short PRESCANLP
 23033                                  
 23034                                  NOTKANJ6:
 23035                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23036 00002F04 3C22                    	cmp	al,'"'	; 22h	; " character
 23037 00002F06 7510                    	jne	short TRYGREATER
 23038 00002F08 FECD                    	dec	ch
 23039 00002F0A 740C                    	jz	short TRYGREATER
 23040                                  QLOOP:
 23041 00002F0C 8805                    	mov	[di],al
 23042 00002F0E 47                      	inc	di
 23043 00002F0F FEC1                    	inc	cl
 23044 00002F11 AC                      	lodsb
 23045 00002F12 3C22                    	cmp	al,'"'		; " character
 23046 00002F14 75F6                    	jne	short QLOOP
 23047 00002F16 FECD                    	dec	ch
 23048                                  TRYGREATER:
 23049 00002F18 3C3E                    	cmp	al,'>' ; 3Eh
 23050                                  	;cmp	al,rabracket	; MSDOS 6.0 (& 5.0)
 23051                                  	;;cmp	al,[RABRACKET]	; MSDOS 3.3
 23052 00002F1A 7557                    	jne	short NOOUT
 23053                                  
 23054                                  ; We have found a ">" char. We need to see if there is another ">"
 23055                                  ; following it.
 23056                                  
 23057 00002F1C 3804                    	cmp	[si],al
 23058 00002F1E 7506                    	jne	short NOAPPND
 23059 00002F20 AC                      	lodsb
 23060 00002F21 26FE06[6302]            	inc	byte [es:Re_Out_App] ; Flag >>
 23061                                  NOAPPND:
 23062                                  ; Now we attempt to find the file name. First, scan off all whitespace
 23063                                  
 23064 00002F26 E807FC                  	call	scanoff
 23065                                  
 23066                                  	; 26/02/2023
 23067                                  	; MSDOS 6.0
 23068 00002F29 3C3C                    	cmp	al,'<' ; 3Ch
 23069                                  	;cmp	al,labracket	;AN040; was there no filename?
 23070 00002F2B 7404                    	je	short REOUT_ERRSET
 23071                                  				;AN040; yes - set up error
 23072                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23073 00002F2D 3C0D                    	cmp	al,0Dh
 23074 00002F2F 750D                    	jnz	short GOTREOFIL
 23075                                  
 23076                                  ; There was no file present. Set us up at end-of-line.
 23077                                  
 23078                                  REOUT_ERRSET:			;AN040; set up for an error
 23079 00002F31 C6050D                  	mov	byte [di],0Dh	; Clobber first ">"
 23080 00002F34 26C706[6402]0900        	mov	word [es:Re_OutStr],9
 23081                                  				; Cause an error later
 23082 00002F3B E9A900                  	jmp	PRESCANEND
 23083                                  
 23084                                  GOTREOFIL:
 23085 00002F3E 57                      	push	di
 23086                                  	;mov	di,offset RESGROUP:RE_OUTSTR
 23087 00002F3F BF[6402]                	mov	di,Re_OutStr
 23088 00002F42 89FB                    	mov	bx,di
 23089 00002F44 06                      	push	es
 23090                                  
 23091                                  	; 26/02/2023
 23092                                  	; MSDOS 6.0
 23093                                  SETREOUTSTR:			; Get the output redirection name
 23094                                  				; MSKK06 07/14/89
 23095 00002F45 51                      	push	cx		; save cx
 23096 00002F46 B94D00                  	mov	cx,64+13	; CX = max string length
 23097                                  SETREOUTSTR_LOOP:
 23098 00002F49 AC                      	lodsb
 23099 00002F4A 3C0D                    	cmp	al,0Dh
 23100 00002F4C 741A                    	je	short GOTRESTR_J
 23101 00002F4E E8E7FB                  	call	DELIM
 23102 00002F51 7415                    	jz	short GOTRESTR_J
 23103 00002F53 3A06[199E]              	cmp	al,[SWITCHAR]
 23104 00002F57 740F                    	je	short GOTRESTR_J
 23105 00002F59 3C22                    	cmp	al,'"' ; 22h 	;AN033; Is the character a quote?
 23106 00002F5B 7413                    	je	short PIPEERRSYNJ5_J
 23107                                  				;AN033; Yes - get out quick - or system crashes
 23108 00002F5D 3C3C                    	cmp	al,'<' ; 3Ch
 23109                                  	;cmp	al,labracket	;AN002; Is char for input redirection
 23110 00002F5F 7404                    	je	short ABRACKET_TERM
 23111                                  				;AN002; yes - end of string
 23112 00002F61 3C3E                    	cmp	al,'>' ; 3Eh
 23113                                  	;cmp	al,rabracket	;AN002; Is char for output redirection
 23114 00002F63 7506                    	jne	short NO_ABRACKET
 23115                                  				;AN002; no - not end of string
 23116                                  ABRACKET_TERM:			;AN002; have end of string by < or >
 23117 00002F65 4E                      	dec	si		;AN002; back up over symbol
 23118 00002F66 B020                    	mov	al,20h ; BLANK	;AN002; show delimiter as char
 23119                                  GOTRESTR_J:
 23120 00002F68 59                      	pop	cx		; MSKK06 07/14/89
 23121 00002F69 EB58                    	jmp	short GOTRESTR	;AN002; go process it
 23122                                  NO_ABRACKET:			;AN002; NOT AT END OF STRING
 23123 00002F6B AA                      	stosb			; store it into resgroup
 23124 00002F6C E2DB                    	loop	SETREOUTSTR_LOOP
 23125                                  				; MSKK06 07/14/89
 23126 00002F6E EBF8                    	jmp	short GOTRESTR_J
 23127                                  PIPEERRSYNJ5_J:
 23128 00002F70 59                      	pop	cx		; recover CX
 23129 00002F71 EB4B                    	jmp	short PIPEERRSYNJ5
 23130                                  
 23131                                  	; 26/02/2023
 23132                                  ;	; MSDOS 3.3
 23133                                  ;SETREOUTSTR_LOOP:		; Get the output redirection name
 23134                                  ;	lodsb
 23135                                  ;	cmp	al,0Dh
 23136                                  ;	jz	short GOTRESTR
 23137                                  ;	call	DELIM
 23138                                  ;	jz	short GOTRESTR
 23139                                  ;	cmp	al,[SWITCHAR]
 23140                                  ;	je	short GOTRESTR
 23141                                  ;	cmp	al,'"'
 23142                                  ;	jne	short NO_ABRACKET
 23143                                  ;	dec	ch
 23144                                  ;NO_ABRACKET:
 23145                                  ;	stosb
 23146                                  ;	jmp	short SETREOUTSTR_LOOP
 23147                                  
 23148                                  NOOUT:
 23149                                  	; 26/02/2023
 23150                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23151 00002F73 3C3C                    	cmp	al, '<' ; 3Ch
 23152                                  	;cmp	al,labracket	; MSDOS 6.0
 23153                                  	;;cmp	al,[LABRACKET]  ; MSDOS 3.3
 23154 00002F75 7523                    	jne	short CHKPIPE
 23155 00002F77 89F3                    	mov	bx,si		; Save loc of "<"
 23156 00002F79 E8B4FB                  	call	scanoff
 23157                                  	; MSDOS 6.0
 23158 00002F7C 3C3E                    	cmp	al,'>' ; 3Eh
 23159                                  	;cmp	al,rabracket	;AN040; was there no filename?
 23160 00002F7E 7404                    	je	short REIN_ERRSET ;AN040; yes - set up error
 23161                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23162 00002F80 3C0D                    	cmp	al,0Dh
 23163 00002F82 750B                    	jne	short GOTREIFIL
 23164                                  REIN_ERRSET:			;AN040; set up for error
 23165 00002F84 C6050D                  	mov	byte [di],0Dh	; Clobber "<"
 23166 00002F87 C706[C09D]0900          	mov	word [RE_INSTR],9 
 23167                                  				; Cause an error later
 23168 00002F8D EB58                    	jmp	short PRESCANEND
 23169                                  GOTREIFIL:
 23170 00002F8F 57                      	push	di
 23171 00002F90 BF[C09D]                	mov	di,RE_INSTR
 23172 00002F93 89FB                    	mov	bx,di
 23173 00002F95 06                      	push	es
 23174 00002F96 0E                      	push	cs
 23175 00002F97 07                      	pop	es		; store in TRANGROUP
 23176                                  	; 26/04/2023
 23177                                  	;jmp	short SETREOUTSTR_LOOP  ; MSDOS 3.3 COMMAND.COM
 23178 00002F98 EBAB                    	jmp	short SETREOUTSTR ; MSDOS 5.0 (& 6.0) COMMAND.COM
 23179                                  				; Get the input redirection name
 23180                                  CHKPIPE:
 23181 00002F9A 88C4                    	mov	ah,al
 23182                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23183 00002F9C 80FC7C                  	cmp	ah,'|' ; 7Ch
 23184                                  	;cmp	ah,ALTPIPECHR ; 7Ch
 23185                                  	;je	short ISPIPE3
 23186                                  	;; MSDOS 6.0
 23187                                  	;cmp	ah,'|' ; 7Ch
 23188                                  	;;cmp	al,vbar ; 7Ch
 23189                                  	;;;cmp	ah,[VBAR]  ; MSDOS 3.3
 23190 00002F9F 7539                    	jne	short CONTPRESCAN
 23191                                  ISPIPE3:
 23192                                  ; Only push the echo flag if we are entering the pipe for the first time.
 23193                                  
 23194 00002FA1 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23195 00002FA7 7505                    	jne	short NOECHOPUSH
 23196 00002FA9 26D026[3B02]            	shl	byte [es:EchoFlag],1 ; push echo state and turn it off
 23197                                  NOECHOPUSH:
 23198 00002FAE 26FE06[B502]            	inc	byte [es:PipeFlag]
 23199 00002FB3 E87AFB                  	call	scanoff
 23200 00002FB6 3C0D                    	cmp	al,0Dh
 23201 00002FB8 7404                    	je	short PIPEERRSYNJ5
 23202                                  	; 26/02/2023
 23203 00002FBA 3C7C                    	cmp	al,'|' ; 7Ch
 23204                                  	;cmp	al,ALTPIPECHR ; 7Ch
 23205                                  	;je	short PIPEERRSYNJ5
 23206                                  	;; MSDOS 6.0
 23207                                  	;cmp	al,'|' ; 7Ch
 23208                                  	;;cmp	al,vbar ; 7Ch
 23209                                  	;;;cmp	al,[VBAR]  ; MSDOS 3.3	
 23210 00002FBC 751C                    	jne	short CONTPRESCAN
 23211                                  
 23212                                  PIPEERRSYNJ5:
 23213 00002FBE 06                      	push	es
 23214 00002FBF 1F                      	pop	ds
 23215 00002FC0 E99E02                  	jmp	PIPEERRSYN
 23216                                  
 23217                                  ; Trailing :s are allowed on devices. Check to be sure that there is more
 23218                                  ; than just a : in the redir string.
 23219                                  
 23220                                  GOTRESTR:
 23221 00002FC3 86E0                    	xchg	ah,al
 23222 00002FC5 B03A                    	mov	al,':' ; 3Ah
 23223 00002FC7 29FB                    	sub	bx,di		; compute negative of number of chars
 23224 00002FC9 83FBFF                  	cmp	bx,-1		; is there just a :?
 23225 00002FCC 7407                    	je	short NOTRAILCOL ; yep, don't change
 23226 00002FCE 263845FF                	cmp	[es:di-1],al	; Trailing ':' OK on devices
 23227 00002FD2 7501                    	jne	short NOTRAILCOL
 23228 00002FD4 4F                      	dec	di		; Back up over trailing ':'
 23229                                  NOTRAILCOL:
 23230 00002FD5 30C0                    	xor	al,al
 23231 00002FD7 AA                      	stosb			; NUL terminate the string
 23232 00002FD8 07                      	pop	es
 23233 00002FD9 5F                      	pop	di		; Remember the start
 23234                                  CONTPRESCAN:
 23235 00002FDA 8825                    	mov	[di],ah		; "delete" the redirection string
 23236 00002FDC 47                      	inc	di
 23237 00002FDD 80FC0D                  	cmp	ah,0Dh
 23238 00002FE0 7405                    	je	short PRESCANEND
 23239 00002FE2 FEC1                    	inc	cl
 23240 00002FE4 E90BFF                  	jmp	PRESCANLP
 23241                                  PRESCANEND:
 23242 00002FE7 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23243 00002FED 7414                    	jz	short ISNOPIPE
 23244                                  
 23245                                  	; 11/06/2023
 23246                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:314Ah
 23247                                  	;mov	di,48Ah		; PipeStr ; RESGROUP:EndInit+160
 23248                                  	;mov	[es:488h],di	; [es:PipePtr],di
 23249                                  				; (RESGROUP:EndInit+158)
 23250                                  	; 26/02/2023
 23251                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA0h
 23252                                  	;;mov	di,3C0h		; offset RESGROUP:PIPESTR
 23253                                  	;;			; (EndInit+160]
 23254                                  	;mov	di,offset RESGROUP:PIPESTR
 23255 00002FEF BF[5703]                	mov	di,PipeStr	; RESGROUP:EndInit+160
 23256                                  
 23257                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA3h
 23258                                  	;;mov	[es:3BEh],di	; [es:EndInit+158]
 23259 00002FF2 26893E[5503]            	mov	[es:PipePtr],di	; RESGROUP:EndInit+158
 23260                                  	
 23261 00002FF7 BE[769C]                	mov	si,COMBUF+2
 23262 00002FFA E833FB                  	call	scanoff
 23263                                  PIPESETLP:			; Transfer the pipe into the resident
 23264 00002FFD AC                      	lodsb			; pipe buffer
 23265 00002FFE AA                      	stosb
 23266 00002FFF 3C0D                    	cmp	al,0Dh
 23267 00003001 75FA                    	jnz	short PIPESETLP
 23268                                  ISNOPIPE:
 23269 00003003 880E[759C]              	mov	[COMBUF+1],cl
 23270 00003007 26803E[B502]00          	cmp	byte [es:PipeFlag],0
 23271 0000300D 0E                      	push	cs
 23272 0000300E 07                      	pop	es
 23273 0000300F C3                      	retn
 23274                                  
 23275                                  ; =============== S U B	R O U T	I N E =======================================
 23276                                  
 23277                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23278                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2BC1h
 23279                                  cmd_copy:
 23280 00003010 BE[769C]                	mov	si,COMBUF+2
 23281 00003013 E81AFB                  	call	scanoff		; advance past separators...
 23282 00003016 0336[A6A0]              	add	si,[PathPos]
 23283 0000301A BF8100                  	mov	di,81h
 23284 0000301D 31C9                    	xor	cx,cx
 23285                                  cmdcopy:
 23286 0000301F AC                      	lodsb
 23287 00003020 AA                      	stosb
 23288 00003021 3C0D                    	cmp	al,0Dh
 23289 00003023 7403                    	je	short copy_done
 23290 00003025 41                      	inc	cx
 23291 00003026 EBF7                    	jmp	short cmdcopy
 23292                                  copy_done:
 23293 00003028 880E8000                	mov	[80h],cl
 23294 0000302C C3                      	retn
 23295                                  
 23296                                  ; =============== S U B	R O U T	I N E =======================================
 23297                                  
 23298                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23299                                  test_append:
 23300 0000302D BB[749C]                	mov	bx,COMBUF	; barry can address
 23301 00003030 BE[D19F]                	mov	si,IDLEN	; address command name, DS already set 	
 23302 00003033 BAFFFF                  	mov	dx,-1
 23303 00003036 B800AE                  	mov	ax,0AE00h
 23304 00003039 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal 
 23305                                  			; - INSTALLABLE	COMMAND	- INSTALL CHECK
 23306                                  			; DX = FFFFh,[BX -> command line
 23307                                  			; Return: AL = FFh if this command is a TSR extension 
 23308                                  			;		   to COMMAND.COM
 23309                                  			; AL = 00h if the command should be executed as	usual
 23310                                  	;cmp	al,0
 23311 0000303B 08C0                    	or	al,al ; 25/02/2023
 23312 0000303D C3                      	retn
 23313                                  
 23314                                  	; 25/02/2023
 23315                                  	; INT 2Fh
 23316                                  	; 	AX = AE00h
 23317                                  	; entry:
 23318                                  	; 	DX = magic value FFFFh
 23319                                  	; 	CH = FFh
 23320                                  	; 	CL = length of command line tail
 23321                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 23322                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 23323                                  	; return:
 23324                                  	;	AL = FFh if this command is a TSR extension to COMMAND.COM
 23325                                  	;	AL = 00h if the command should be executed as usual
 23326                                  	;
 23327                                  	; Format of COMMAND.COM command line buffer:
 23328                                  	;	Offset  Size    Description
 23329                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 23330                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 23331                                  	;	N BYTEs command line text, terminated by 0Dh
 23332                                  	;
 23333                                  	; Format of command name buffer:
 23334                                  	;	Offset  Size    Description
 23335                                  	;	00h     BYTE    length of command name
 23336                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 23337                                  
 23338                                  ;============================================================================
 23339                                  ; TMISC2.ASM, MSDOS 6.0, 1991
 23340                                  ;============================================================================
 23341                                  ; 05/10/2018 - Retro DOS v3.0
 23342                                  
 23343                                  ;	More misc routines
 23344                                  
 23345                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1D9Bh
 23346                                  
 23347                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23348                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2BEFh
 23349                                  
 23350                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23351                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3199h
 23352                                  
 23353                                  ; =============== S U B	R O U T	I N E =======================================
 23354                                  
 23355                                  SETPATH:
 23356                                  
 23357                                  ; ENTRY PathPos = ptr to string
 23358                                  ;       PathCnt = length of string
 23359                                  ;
 23360                                  ; EXIT  PathPos = ptr to string after pathname
 23361                                  ;       PathCnt = length of rest of string
 23362                                  ;       DX = ptr to pathname in string, made ASCIIZ
 23363                                  ;       DestIsDir = 1 if pathname delimiters appeared in pathname, 0 otherwise
 23364                                  ;       DestInfo = 2 if wildcards (?, *) appeared in pathname, 0 otherwise
 23365                                  ;
 23366                                  ;       A null character is dropped at the end of the pathname. If the
 23367                                  ;       character in that spot previously was CR, it is copied into the
 23368                                  ;       following byte. So there must be at least two two character 
 23369                                  ;       positions in the buffer following the pathname.
 23370                                  
 23371                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23372                                  	
 23373                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23374                                  	; MSDOS 6.0
 23375                                  	;mov	ax,[PathCnt]	;AC000; get length of string
 23376                                  	;mov	si,[PathPos]	;AC000; get start of source buffer
 23377                                  
 23378                                  	; 26/02/2023
 23379                                  	; MSDOS 3.3
 23380                                  	;mov	si,80h
 23381                                  	;lodsb
 23382                                  	;xor	ah,ah
 23383                                  	;mov	[PATCNT],ax
 23384                                  	;mov	[PATHPOS],si
 23385                                  GETPATH:
 23386                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23387 0000303E C606[54A1]00            	mov	byte [DestInfo],0
 23388 00003043 C606[50A1]00            	mov	byte [DestIsDir],0
 23389 00003048 8B36[A6A0]              	mov	si,[PathPos]	; SI = ptr to string
 23390 0000304C 8B0E[A4A0]              	mov	cx,[PathCnt]	; CX = string length
 23391 00003050 89F2                    	mov	dx,si		; DX = ptr to string
 23392 00003052 E34D                    	jcxz	PATHDONE	; string length is zero, we're done
 23393 00003054 51                      	push	cx		; save string length
 23394 00003055 56                      	push	si		; save ptr to string
 23395 00003056 E875FC                  	call	SWITCH
 23396                                  
 23397                                  ;       After Switch, SI has been scanned past any switches, and
 23398                                  ;       switches that COMMAND intrinsically recognizes are recorded in AX.
 23399                                  
 23400 00003059 A3[A8A0]                	mov	[PathSw],ax	; PathSw = switch occurrence mask
 23401 0000305C 5B                      	pop	bx		; BX = ptr to original string
 23402 0000305D 29F3                    	sub	bx,si		; BX = -(# chars scanned by Switch)
 23403 0000305F 59                      	pop	cx		; CX = string length
 23404 00003060 01D9                    	add	cx,bx		; CX = string length from current SI
 23405 00003062 89F2                    	mov	dx,si		; DX = ptr to current string
 23406                                  SKIPPATH:
 23407                                  	; 26/02/2023
 23408                                  	; MSDOS 6.0
 23409 00003064 C606[E6A2]00            	mov	byte [KPARSE],0
 23410                                  SKIPPATH2:
 23411 00003069 E336                    	jcxz	PATHDONE	; string length is zero, we're done
 23412 0000306B 49                      	dec	cx		; CX = length left after next char
 23413 0000306C AC                      	lodsb			; AL = next char of string
 23414                                  				; SI = ptr to char after this one
 23415                                  	; 26/02/2023
 23416 0000306D E8A1F8                  	call	testkanj
 23417 00003070 7408                    	jz	short TESTPPSEP
 23418 00003072 49                      	dec	cx
 23419 00003073 46                      	inc	si
 23420 00003074 FE06[E6A2]              	inc	byte [KPARSE]
 23421 00003078 EBEF                    	jmp	short SKIPPATH2
 23422                                  TESTPPSEP:
 23423 0000307A E841FB                  	call	pathchrcmp	; compare AL to path delimiter char
 23424 0000307D 7504                    	jnz	short TESTPMETA	; it's not a path delim
 23425 0000307F FE06[50A1]              	inc	byte [DestIsDir]
 23426                                  				; DestIsDir = 1, signalling path char
 23427                                  TESTPMETA:
 23428 00003083 3C3F                    	cmp	al,'?'
 23429 00003085 7505                    	jne	short TESTPSTAR	; char is not '?'
 23430 00003087 800E[54A1]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 23431                                  TESTPSTAR:
 23432 0000308C 3C2A                    	cmp	al,'*'
 23433                                  	;cmp	al,[STAR] ; MSDOS 3.3	
 23434 0000308E 7505                    	jne	short TESTPDELIM ; char is not '*'
 23435 00003090 800E[54A1]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 23436                                  TESTPDELIM:
 23437 00003095 E8A0FA                  	call	DELIM		; compare AL to all delimiters
 23438 00003098 7406                    	jz	short PATHDONEDEC ; delimiter found, back up & leave
 23439 0000309A 3A06[199E]              	cmp	al,[SWITCHAR]
 23440 0000309E 75C4                    	jne	short SKIPPATH	; char isn't switch, go get next char
 23441                                  PATHDONEDEC:
 23442 000030A0 4E                      	dec	si		; SI = ptr to char after pathname
 23443                                  PATHDONE:
 23444 000030A1 30C0                    	xor	al,al		; AL = NULL
 23445 000030A3 8604                    	xchg	al,[si]		; place NULL after pathname
 23446 000030A5 46                      	inc	si		; SI = ptr to byte after NULL
 23447 000030A6 3C0D                    	cmp	al,0Dh		; were we at end of line?
 23448 000030A8 7502                    	jne	short NOPSTORE	; not EOL, finish up
 23449 000030AA 8804                    	mov	[si],al		; save EOL after NULL
 23450                                  NOPSTORE:
 23451 000030AC 8936[A6A0]              	mov	[PathPos],si	; PathPos = ptr to char after NULL
 23452 000030B0 890E[A4A0]              	mov	[PathCnt],cx	; PathCnt = length of string left
 23453                                  SETPATH_RETN:
 23454 000030B4 C3                      	retn
 23455                                  
 23456                                  ; ---------------------------------------------------------------------------
 23457                                  
 23458                                  PGETARG:
 23459 000030B5 BE8000                  	mov	si,80h
 23460 000030B8 AC                      	lodsb
 23461 000030B9 08C0                    	or	al,al
 23462 000030BB 74F7                    	jz	short SETPATH_RETN
 23463 000030BD E80300                  	call	PSCANOFF
 23464 000030C0 3C0D                    	cmp	al,0Dh
 23465 000030C2 C3                      	retn
 23466                                  
 23467                                  ; ---------------------------------------------------------------------------
 23468                                  
 23469                                  PSCANOFF:
 23470 000030C3 AC                      	lodsb
 23471 000030C4 E871FA                  	call	DELIM
 23472 000030C7 7504                    	jnz	short PSCANOFFD
 23473 000030C9 3C3B                    	cmp	al,';' ; 3Bh
 23474 000030CB 75F6                    	jne	short PSCANOFF	; ';' is not a delimiter
 23475                                  PSCANOFFD:
 23476 000030CD 4E                      	dec	si		; Point to first non-delimiter
 23477 000030CE C3                      	retn
 23478                                  
 23479                                  ; =============== S U B	R O U T	I N E =======================================
 23480                                  
 23481                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23482                                  IOSET:
 23483                                  	; ALL REGISTERS PRESERVED
 23484 000030CF 1E                      	push	ds
 23485 000030D0 52                      	push	dx
 23486 000030D1 50                      	push	ax
 23487 000030D2 53                      	push	bx
 23488 000030D3 51                      	push	cx
 23489 000030D4 2E8E1E[159E]            	mov	ds,[cs:RESSEG]
 23490 000030D9 803E[B502]00            	cmp	byte [PipeFlag],0
 23491 000030DE 750D                    	jne	short NOREDIR
 23492 000030E0 F606[4802]FF            	test	byte [IfFlag],0FFh
 23493 000030E5 7506                    	jnz	short NOREDIR
 23494 000030E7 E88E00                  	call	TESTDOREIN
 23495 000030EA E80600                  	call	TESTDOREOUT
 23496                                  NOREDIR:
 23497 000030ED 59                      	pop	cx
 23498 000030EE 5B                      	pop	bx
 23499 000030EF 58                      	pop	ax
 23500 000030F0 5A                      	pop	dx
 23501 000030F1 1F                      	pop	ds
 23502 000030F2 C3                      	retn
 23503                                  
 23504                                  ; =============== S U B	R O U T	I N E =======================================
 23505                                  
 23506                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23507                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CF3h
 23508                                  TESTDOREOUT:
 23509 000030F3 803E[6402]00            	cmp	byte [Re_OutStr],0
 23510                                  	;je	short NOREOUT  ; MSDOS 3.3
 23511                                  	; 26/02/2023
 23512 000030F8 7502                    	jne	short REOUTEXISTS
 23513 000030FA EB7B                    	jmp	NOREOUT 
 23514                                  REOUTEXISTS:
 23515 000030FC 803E[6302]00            	cmp	byte [Re_Out_App],0
 23516 00003101 745D                    	je	short REOUTCRT
 23517                                  
 23518 00003103 BA[6402]                	mov	dx,Re_OutStr
 23519                                  
 23520                                  	; 26/02/2023
 23521                                  	; MSDOS 6.0
 23522                                  	;mov	ax,(OPEN SHL 8) OR 2 ;AC011; Open for read/write
 23523 00003106 B8023D                  	mov	ax,3D02h
 23524                                  	; MSDOS 3.3
 23525                                  	;mov	ax,(OPEN<<8)|1  ; 3D01h ; Open for write
 23526                                  	
 23527                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23528 00003109 50                      	push	ax
 23529 0000310A CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 23530                                  			; DS:DX	-> ASCIZ filename
 23531                                  			; AL = access mode
 23532                                  			; 1 - write
 23533 0000310C 5B                      	pop	bx
 23534 0000310D 724B                    	jc	short OpenWriteError
 23535                                  
 23536                                  	; 26/02/2023
 23537                                  	; MSDOS 6.0
 23538 0000310F 89C3                    	mov	bx,ax
 23539                                  	;mov	ax,IOCTL<<8		;AN035; Get attributes of handle
 23540 00003111 B80044                  	mov	ax,4400h
 23541 00003114 CD21                    	int	21h			;AN035;
 23542                                  			; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 23543                                  			; BX = file or device handle
 23544 00003116 F6C280                  	test	dl,80h
 23545                                  	;test	dl,devid_ISDEV		;AN035; Is it a device?
 23546 00003119 7554                    	jnz	short SET_REOUT		;AN035; Yes, don't read from it
 23547                                  	
 23548                                  	;mov	ax,(LSEEK SHL 8) OR 2
 23549 0000311B B80242                  	mov	ax,4202h
 23550 0000311E B9FFFF                  	mov	cx,-1			;AC011; MOVE TO EOF -1
 23551 00003121 89CA                    	mov	dx,cx			;AC011;
 23552 00003123 CD21                    	int	21h
 23553                                  			; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 23554                                  			; AL = method: offset from end of file
 23555 00003125 0E                      	push	cs			;AN011; Get transient seg to DS
 23556 00003126 1F                      	pop	ds			;AN011;
 23557                                  	
 23558                                  	;mov	ax,(READ SHL 8) 	;AN011; Read one byte from the
 23559 00003127 B8003F                  	mov	ax,3F00h
 23560 0000312A B90100                  	mov	cx,1			;AN011;  file into one_char_val
 23561 0000312D BA[48A1]                	mov	dx,One_Char_Val		;AN011;
 23562 00003130 CD21                    	int	21h			;AN011;
 23563                                  			; DOS - 2+ - READ FROM FILE WITH HANDLE
 23564                                  			; BX = file handle, CX = number of bytes to read
 23565                                  			; DS:DX -> buffer
 23566 00003132 7226                    	jc	short OpenWriteError	;AN011; If error, exit
 23567 00003134 39C8                    	cmp	ax,cx			;AN017; Did we read 1 byte?
 23568 00003136 7517                    	jnz	short reout_0_length	;AN017; No - file must be 0 length
 23569                                  	
 23570 00003138 803E[48A1]1A            	cmp	byte [One_Char_Val],1Ah	;AN011; Was char an eof mark?
 23571 0000313D 8E1E[159E]              	mov	ds,[RESSEG]		;AN011; Get resident segment back
 23572 00003141 752C                    	jne	short SET_REOUT		;AN011; No, just continue
 23573                                  	
 23574                                  	;mov	ax,(LSEEK<<8)|1		;AN011; EOF mark found
 23575 00003143 B80142                  	mov	ax,4201h
 23576 00003146 B9FFFF                  	mov	cx,-1			;AN011; LSEEK back one byte
 23577                                  setreout_p:	; 26/02/2023
 23578 00003149 89CA                    	mov	dx,cx			;AN011;
 23579 0000314B CD21                    	int	21h			;AN011;
 23580 0000314D EB20                    	jmp	short SET_REOUT
 23581                                  reout_0_length: 			;AN017; We have a 0 length file
 23582                                  	; ds = cs ; 26/02/2023
 23583                                  	;mov	ds,[cs:RESSEG] ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2D50h
 23584                                  					;AN017; Get resident segment back
 23585                                  	; 26/02/2023
 23586 0000314F 8E1E[159E]              	mov	ds,[RESSEG]
 23587                                  	;mov	ax,(LSEEK SHL 8)	;AN017; Move to beginning of file
 23588 00003153 B80042                  	mov	ax,4200h
 23589 00003156 31C9                    	xor	cx,cx			;AN017; Offset is 0
 23590                                  	;mov	dx,cx			;AN017;
 23591                                  	;int	21h			;AN017;
 23592                                  	;jmp	short SET_REOUT 	;AN017; now finish setting up redirection
 23593                                  	; 26/02/2023
 23594 00003158 EBEF                    	jmp	short setreout_p
 23595                                  
 23596                                  	; 26/02/2023
 23597                                  	; MSDOS 3.3
 23598                                  	;xor	dx,dx
 23599                                  	;xor	cx,cx
 23600                                  	;mov	bx,ax
 23601                                  	;mov	ax,(LSEEK<<8)|2 ; 4202h
 23602                                  	;int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 23603                                  	;		; AL = method: offset from end of file
 23604                                  	;jmp	short SET_REOUT
 23605                                  		
 23606                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23607                                  OpenWriteError:	
 23608                                  	;cmp	ax,5
 23609 0000315A 83F805                  	cmp	ax,ERROR_ACCESS_DENIED
 23610 0000315D F9                      	stc
 23611                                  	;;je	short REDIRERR ; MSDOS 3.3
 23612                                  	; 26/02/2023
 23613                                  	;jnz	short REOUTCRT
 23614                                  	;jmp	REDIRERR
 23615 0000315E 743B                    	je	short REDIRERR
 23616                                  
 23617                                  REOUTCRT:	
 23618 00003160 BA[6402]                	mov	dx,Re_OutStr
 23619 00003163 31C9                    	xor	cx,cx
 23620                                  	;mov	ah,CREAT ; 3Ch
 23621 00003165 B43C                    	mov	ah,3Ch
 23622 00003167 50                      	push	ax
 23623 00003168 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 23624                                  			; CX = attributes for file
 23625                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 23626 0000316A 5B                      	pop	bx
 23627                                  	;jc	short REDIRERR ; MSDOS 3.3
 23628                                  	; 26/02/2023
 23629                                  	;jnc	short NOREDIRERR
 23630                                  	;jmp	REDIRERR
 23631 0000316B 722E                    	jc	short REDIRERR
 23632                                  	
 23633                                  NOREDIRERR:
 23634 0000316D 89C3                    	mov	bx,ax
 23635                                  SET_REOUT:
 23636                                  
 23637                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdout
 23638                                  ; spot. We invalidate the new JFN we got.
 23639                                  
 23640 0000316F B0FF                    	mov	al,0FFh
 23641                                  	;xchg	al,[bx+18h]
 23642 00003171 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23643 00003174 A21900                  	mov	[PDB.JFN_TABLE+1],al
 23644                                  NOREOUT:
 23645                                  IOSET_RETN:	; 17/04/2023
 23646 00003177 C3                      	retn
 23647                                  
 23648                                  ; =============== S U B	R O U T	I N E =======================================
 23649                                  
 23650                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23651                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 23652                                  TESTDOREIN:
 23653 00003178 2E803E[C09D]00          	cmp	byte [cs:RE_INSTR],0
 23654 0000317E 74F7                    	jz	short IOSET_RETN
 23655 00003180 1E                      	push	ds
 23656 00003181 0E                      	push	cs
 23657 00003182 1F                      	pop	ds
 23658 00003183 BA[C09D]                	mov	dx,RE_INSTR
 23659                                  	;mov	ax,OPEN*256 ; 3D00h
 23660 00003186 B8003D                  	mov	ax,3D00h
 23661 00003189 89C3                    	mov	bx,ax
 23662 0000318B CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 23663                                  			; DS:DX	-> ASCIZ filename
 23664                                  			; AL = access mode
 23665                                  			; 0 - read
 23666 0000318D 1F                      	pop	ds
 23667                                  
 23668 0000318E 720B                    	jc	short REDIRERR
 23669                                  
 23670 00003190 89C3                    	mov	bx,ax
 23671 00003192 B0FF                    	mov	al,0FFh
 23672                                  
 23673                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdin
 23674                                  ; spot. We invalidate the new JFN we got.
 23675                                  
 23676                                  	;xchg	al,[bx+18h]
 23677 00003194 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23678 00003197 A21800                  	mov	[PDB.JFN_TABLE],al
 23679 0000319A C3                      	retn
 23680                                  
 23681                                  ; ---------------------------------------------------------------------------
 23682                                  
 23683                                  ; We had some kind of error on the redirection. Figure out what the
 23684                                  ; appropriate message should be; BX has the system call that failed
 23685                                  
 23686                                  REDIRERR:
 23687 0000319B 0E                      	push	cs
 23688 0000319C 1F                      	pop	ds
 23689 0000319D E82E00                  	call	TriageError  ; MSDOS 6.0
 23690                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 23691                                  
 23692                                  ; At this point, we have recognized the network-generated access denied error.
 23693                                  ; The correct message is in DX
 23694                                  
 23695 000031A0 83F841                  	cmp	ax,65
 23696 000031A3 7408                    	je	short _CERRORJ	;AC000; just issue message returned
 23697 000031A5 80FF3D                  	cmp	bh,OPEN ; 3Dh
 23698 000031A8 7406                    	je	short OpenError
 23699 000031AA BA[0D92]                	mov	dx,FULLDIR_PTR
 23700                                  _CERRORJ:
 23701 000031AD E9F4FC                  	jmp	cerror
 23702                                  
 23703                                  OpenError:
 23704                                  ; The system call was an OPEN. Report either file not found or path not found.
 23705                                  
 23706                                  	; 26/02/2023
 23707                                  	; MSDOS 6.0
 23708                                  	;mov	byte [cs:msg_disp_class],1
 23709 000031B0 2EC606[F191]01          	mov	byte [cs:msg_disp_class],ext_msg_class
 23710                                  				;AN000; set up extended error msg class
 23711 000031B6 BA[F391]                	mov	dx,extend_buf_ptr
 23712                                  				;AC000; get extended message pointer
 23713 000031B9 2EA3[F391]              	mov	[cs:extend_buf_ptr],ax
 23714                                  				;AN000; get message number in control block
 23715 000031BD E9E4FC                  	jmp	cerror
 23716                                  
 23717                                  	; 26/02/2023
 23718                                  	; MSDOS 3.3
 23719                                  	;mov	dx,FNOTFOUNDPTR
 23720                                  	;;cmp	ax,2
 23721                                  	;cmp	ax,ERROR_FILE_NOT_FOUND
 23722                                  	;je	short _CERRORJ
 23723                                  	;mov	dx,ACCDENPTR
 23724                                  	;;cmp	ax,5 ; Access denied error
 23725                                  	;cmp	ax,ERROR_ACCESS_DENIED
 23726                                  	;je	short _CERRORJ
 23727                                  	;	; ERROR_PATH_NOT_FOUND
 23728                                  	;mov	dx,PNOTFOUNDPTR
 23729                                  	;jmp	CERROR
 23730                                  
 23731                                  ; =============== S U B	R O U T	I N E =======================================
 23732                                  
 23733                                  ; Compute length of string (including NUL) in DS:SI into CX. Change no other
 23734                                  ; registers
 23735                                  
 23736                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 23737                                  dstrlen:
 23738 000031C0 50                      	push	ax
 23739 000031C1 31C9                    	xor	cx,cx
 23740 000031C3 FC                      	cld
 23741                                  dloop:
 23742 000031C4 AC                      	lodsb
 23743 000031C5 41                      	inc	cx
 23744 000031C6 08C0                    	or	al,al
 23745 000031C8 75FA                    	jnz	short dloop
 23746 000031CA 29CE                    	sub	si,cx
 23747 000031CC 58                      	pop	ax
 23748                                  TRIAGEERR_RETN:
 23749 000031CD C3                      	retn
 23750                                  
 23751                                  ; =============== S U B	R O U T	I N E =======================================
 23752                                  
 23753                                  ;Break	<Extended error support>
 23754                                  
 23755                                  TriageError:  ; MSDOS 6.0
 23756                                  
 23757                                  ; TriageError will examine the return from a carry-set system call and
 23758                                  ; return the correct error if applicable.
 23759                                  ;
 23760                                  ;   Inputs:	outputs from a carry-settable system call
 23761                                  ;		No system calls may be done in the interrim
 23762                                  ;   Outputs:	If carry was set on input
 23763                                  ;		   carry set on output
 23764                                  ;		   DX contains trangroup offset to printf message
 23765                                  ;		else
 23766                                  ;		   No registers changed
 23767                                  
 23768                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1EEEh
 23769                                  
 23770                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23771                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2D92h
 23772                                  
 23773                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23774                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 333Ch
 23775                                  
 23776                                  GET_EXT_ERR_NUMBER:  ; MSDOS 3.3
 23777 000031CE 73FD                    	jnc	short TRIAGEERR_RETN ; no carry => do nothing...
 23778 000031D0 9C                      	pushf
 23779 000031D1 53                      	push	bx
 23780 000031D2 51                      	push	cx
 23781 000031D3 56                      	push	si
 23782 000031D4 57                      	push	di
 23783 000031D5 55                      	push	bp
 23784 000031D6 06                      	push	es
 23785 000031D7 1E                      	push	ds
 23786 000031D8 50                      	push	ax
 23787 000031D9 52                      	push	dx
 23788 000031DA B459                    	mov	ah,59h
 23789                                  	;mov	ah,GETEXTENDEDERROR
 23790 000031DC CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 23791                                  			; BX = version code (0000h for DOS 3.x)
 23792 000031DE 59                      	pop	cx
 23793 000031DF 5B                      	pop	bx		; restore original AX
 23794 000031E0 BA[1992]                	mov	dx,ACCDEN_PTR
 23795 000031E3 83F841                  	cmp	ax,65		; network access denied?
 23796 000031E6 7404                    	je	short NoMove	; Yes, return it.
 23797 000031E8 89D8                    	mov	ax,bx
 23798 000031EA 89CA                    	mov	dx,cx
 23799                                  NoMove:
 23800 000031EC 1F                      	pop	ds
 23801 000031ED 07                      	pop	es
 23802 000031EE 5D                      	pop	bp
 23803 000031EF 5F                      	pop	di
 23804 000031F0 5E                      	pop	si
 23805 000031F1 59                      	pop	cx
 23806 000031F2 5B                      	pop	bx
 23807 000031F3 9D                      	popf
 23808 000031F4 C3                      	retn
 23809                                  
 23810                                  ; =============== S U B	R O U T	I N E =======================================
 23811                                  
 23812                                  	; Far call from resident portion/segment of COMMAND.COM
 23813                                  
 23814                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F15h
 23815                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DB9h
 23816                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3363h
 23817                                  
 23818                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23819                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23820                                  Triage_Init:
 23821 000031F5 E8D6FF                  	call	TriageError	 ; MSDOS 6.0
 23822                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 23823 000031F8 CB                      	retf
 23824                                  
 23825                                  ; =============== S U B	R O U T	I N E =======================================
 23826                                  
 23827                                  ; MSDOS 6.0
 23828                                  
 23829                                  ; ****************************************************************
 23830                                  ; *
 23831                                  ; * ROUTINE:	 MOVE_TO_SRCBUF
 23832                                  ; *
 23833                                  ; * FUNCTION:	 Move ASCIIZ string from DS:SI to SRCBUF.  Change
 23834                                  ; *		 terminating 0 to 0dH.	Set PATHCNT to length of
 23835                                  ; *		 string.  Set PATHPOS to start of SRCBUF.
 23836                                  ; *
 23837                                  ; * INPUT:	 DS:SI points to ASCIIZ string
 23838                                  ; *		 ES    points to TRANGROUP
 23839                                  ; *
 23840                                  ; * OUTPUT:	 SRCBUF filled in with string terminated by 0dH
 23841                                  ; *		 PATHCNT set to length of string
 23842                                  ; *		 PATHPOS set to start of SRCBUF
 23843                                  ; *		 CX,AX	 changed
 23844                                  ; *
 23845                                  ; ****************************************************************
 23846                                  
 23847                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23848                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 23849                                  Move_To_SrcBuf:
 23850 000031F9 56                      	push	si			;AN000;  save si,di
 23851 000031FA 57                      	push	di			;AN000;
 23852 000031FB 51                      	push	cx			;AN000;
 23853 000031FC BF[B8A1]                	mov	di,SrcBuf		;AN000;  set ES:DI to srcbuf
 23854 000031FF 31C9                    	xor	cx,cx			;AN000; clear cx for counint
 23855 00003201 89C8                    	mov	ax,cx			;AN000; clear ax
 23856 00003203 57                      	push	di			;AN000; save start of srcbuf
 23857 00003204 AC                      	lodsb				;AN000; get a character from DS:SI
 23858                                  mts_get_chars:				;AN000;
 23859                                  	;cmp	al,0			;AN000; was it a null char?
 23860 00003205 20C0                    	and 	al,al ; al = 0 ?
 23861 00003207 7405                    	jz	short mts_end_string	;AN000; yes - exit
 23862 00003209 AA                      	stosb				;AN000; no - store it in srcbuf
 23863 0000320A 41                      	inc	cx			;AN000; increment length count
 23864 0000320B AC                      	lodsb				;AN000; get a character from DS:SI
 23865 0000320C EBF7                    	jmp	short mts_get_chars	;AN000; go check it
 23866                                  mts_end_string: 			;AN000; we've reached the end of line
 23867                                  	;mov	al,END_OF_LINE_IN	;AN000; store 0Dh in srcbuf
 23868 0000320E B00D                    	mov	al,0Dh
 23869 00003210 AA                      	stosb				;AN000;
 23870 00003211 5F                      	pop	di			;AN000; restore start of srcbuf
 23871 00003212 0E                      	push	cs			;AN000; set DS to local segment
 23872 00003213 1F                      	pop	ds			;AN000;
 23873 00003214 890E[A4A0]              	mov	[PathCnt],cx		;AN000; set patchcnt to length count
 23874 00003218 893E[A6A0]              	mov	[PathPos],di		;AN000; set pathpos to start of srcbuf
 23875 0000321C 59                      	pop	cx			;AN000; restore cx,di,si
 23876 0000321D 5F                      	pop	di			;AN000;
 23877 0000321E 5E                      	pop	si			;AN000;
 23878 0000321F C3                      	retn				;AN000; exit
 23879                                  
 23880                                  ;============================================================================
 23881                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 23882                                  ;============================================================================
 23883                                  ; 03/10/2018 - Retro DOS v3.0
 23884                                  
 23885                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F19h
 23886                                  
 23887                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23888                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DE4h
 23889                                  
 23890                                  ; =============== S U B	R O U T	I N E =======================================
 23891                                  
 23892                                  	; 26/02/2023
 23893                                  SINGLETEST:
 23894 00003220 1E                      	push	ds
 23895 00003221 2E8E1E[159E]            	mov	ds,[cs:RESSEG]
 23896 00003226 833E[4302]00            	cmp	word [SingleCom],0
 23897 0000322B 7406                    	jz	short TESTDONE
 23898 0000322D 813E[4302]FFEF          	cmp	word [SingleCom],0EFFFh
 23899                                  TESTDONE:
 23900 00003233 1F                      	pop	ds
 23901 00003234 C3                      	retn
 23902                                  
 23903                                  ; =============== S U B	R O U T	I N E =======================================
 23904                                  
 23905                                  	; 26/02/2023
 23906                                  SetRest1:
 23907 00003235 B001                    	mov	al,1
 23908                                  
 23909                                  ; ---------------------------------------------------------------------------
 23910                                  
 23911                                  SETREST:
 23912 00003237 1E                      	push	ds
 23913 00003238 8E1E[159E]              	mov	ds,[RESSEG]
 23914 0000323C A2[3F02]                	mov	[RestDir],al
 23915 0000323F 1F                      	pop	ds
 23916 00003240 C3                      	retn
 23917                                  
 23918                                  ; =============== S U B	R O U T	I N E =======================================
 23919                                  
 23920                                  ; Note that we need to handle the same thing that RestDir handles: the
 23921                                  ; requirement that we try only once to restore the user's environment after
 23922                                  ; and INT 24 or the like. If the condition that causes the INT 24 does not
 23923                                  ; disappear, we just give up.
 23924                                  
 23925                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 23926                                  	;
 23927                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23928                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33AFh 
 23929                                  PIPEDEL:
 23930 00003241 1E                      	push	ds
 23931 00003242 52                      	push	dx
 23932 00003243 2E8E1E[159E]            	mov	ds,[cs:RESSEG]
 23933                                  	;mov	dx,3EAh	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33B1h
 23934                                  	;;mov	dx,320h	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E0Ch
 23935                                  			; Pipe1 = offset RESGROUP:EndInit
 23936 00003248 BA[B702]                	mov	dx,Pipe1	; Clean up in case ^C
 23937                                  	;mov	ah,Unlink ; 41h 
 23938 0000324B B441                    	mov	ah,41h
 23939 0000324D CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 23940                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 23941                                  			;		(no wildcards allowed)
 23942                                  
 23943                                  	;mov	dx,439h	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33BDh
 23944                                  	;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E13h
 23945                                  			; Pipe2 = offset RESGROUP:EndInit+79
 23946 0000324F BA[0603]                	mov	dx,Pipe2
 23947                                  	;mov	ah,Unlink ; 41h
 23948 00003252 B441                    	mov	ah,41h
 23949 00003254 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 23950                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 23951                                  			;		(no wildcards allowed)
 23952 00003256 5A                      	pop	dx
 23953 00003257 E86202                  	call	PipeOff
 23954 0000325A C606[B602]00            	mov	byte [PipeFiles],0
 23955 0000325F 1F                      	pop	ds
 23956 00003260 C3                      	retn
 23957                                  
 23958                                  ; ---------------------------------------------------------------------------
 23959                                  
 23960                                  	; 26/02/2023
 23961                                  PIPEERRSYN:
 23962 00003261 BA[8B92]                	mov	dx,SYNTMES_PTR
 23963 00003264 E8DAFF                  	call	PIPEDEL
 23964 00003267 0E                      	push	cs
 23965 00003268 1F                      	pop	ds
 23966 00003269 E938FC                  	jmp	cerror
 23967                                  
 23968                                  ; ---------------------------------------------------------------------------
 23969                                  
 23970                                  	; 26/02/2023
 23971                                  PIPERR:
 23972 0000326C 9C                      	pushf
 23973 0000326D E85EFF                  	call    TriageError
 23974                                  	;call	GET_EXT_ERR_NUMBER  ; MSDOS 3.3
 23975 00003270 50                      	push	ax		; Save results from TriageError
 23976 00003271 52                      	push	dx
 23977 00003272 BA[5493]                	mov	dx,PIPEEMES_PTR
 23978 00003275 E8C9FF                  	call	PIPEDEL
 23979 00003278 0E                      	push	cs
 23980 00003279 1F                      	pop	ds
 23981 0000327A E8A822                  	call	std_eprintf
 23982 0000327D 5A                      	pop	dx		; Restore results from TriageError
 23983 0000327E 58                      	pop	ax
 23984 0000327F 9D                      	popf
 23985 00003280 83F841                  	cmp	ax,65
 23986 00003283 7503                    	jne	short TCOMMANDJ
 23987 00003285 E91CFC                  	jmp	cerror
 23988                                  
 23989                                  TCOMMANDJ:
 23990 00003288 E979CE                  	jmp	TCOMMAND
 23991                                  
 23992                                  ; ---------------------------------------------------------------------------
 23993                                  
 23994                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 23995                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 23996                                  PIPEPROCSTRT:
 23997 0000328B 8E1E[159E]              	mov	ds,[RESSEG]
 23998 0000328F FE06[B602]              	inc	byte [PipeFiles] ; Flag that the pipe files exist
 23999                                  
 24000                                  	; MSDOS 6.0
 24001 00003293 06                      	push	es
 24002 00003294 57                      	push	di
 24003 00003295 1E                      	push	ds
 24004 00003296 56                      	push	si
 24005                                  	
 24006 00003297 1E                      	push	ds
 24007 00003298 06                      	push	es
 24008 00003299 1F                      	pop	ds			;ds = TRANGROUP
 24009 0000329A BE[1899]                	mov	si,TempVarName		;ds:si = "TEMP="
 24010                                  
 24011                                  ;Some hideous code in Find_Name_In_Environment. Expects ds = TRANGROUP and
 24012                                  ;so the routine is not really general
 24013                                  
 24014 0000329D E8C7F5                  	call	find_name_in_environment
 24015                                  					;es:di points at path
 24016 000032A0 1F                      	pop	ds			;ds = DATARES again
 24017 000032A1 721F                    	jc	short no_temp_path
 24018                                  	
 24019 000032A3 1E                      	push	ds
 24020 000032A4 06                      	push	es
 24021 000032A5 1F                      	pop	ds
 24022 000032A6 07                      	pop	es			;swap ds and es
 24023 000032A7 89FE                    	mov	si,di			;ds:si points at path
 24024                                  	
 24025 000032A9 E8AA02                  	call	skip_white		;skip white space chars
 24026                                  
 24027                                  ;This copies the path into both buffers -- Pipe1 & Pipe2
 24028                                  
 24029 000032AC E8B302                  	call	copy_pipe_path		;copy the pipe path
 24030                                  	
 24031                                  ;Check if the TEMP path is valid
 24032                                  
 24033 000032AF 06                      	push	es
 24034 000032B0 1F                      	pop	ds			;ds = DATARES
 24035                                  	;mov	dx,offset DATARES:Pipe1	;ds:dx = path to look for
 24036                                  	;;mov	dx,320h ; MSDOS 5.0 - offset EndInit
 24037                                  	;mov	dx,3EAh	; MSDOS 6.22 - offset EndInit
 24038 000032B1 BA[B702]                	mov	dx,Pipe1
 24039                                  	;mov	ax,(CHMOD shl 8) or 0
 24040 000032B4 B80043                  	mov	ax,4300h
 24041 000032B7 CD21                    	int	21h
 24042 000032B9 7207                    	jc	short no_temp_path
 24043                                  	
 24044 000032BB F7C11000                	test	cx,10h			;is it a directory?
 24045 000032BF 7501                    	jnz	short no_temp_path	;yes, continue (carry clear)
 24046                                  	
 24047 000032C1 F9                      	stc				;no, indicate fail
 24048                                  no_temp_path:
 24049 000032C2 5E                      	pop	si
 24050 000032C3 1F                      	pop	ds
 24051 000032C4 5F                      	pop	di
 24052 000032C5 07                      	pop	es
 24053 000032C6 730B                    	jnc	short crt_temp		;path found, create tempfiles
 24054                                  
 24055                                  	; 27/02/2023
 24056                                  	; MSDOS 3.3
 24057                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 24058                                  	;				; Get current drive
 24059                                  	;int	21h ; DOS - GET DEFAULT DISK NUMBER
 24060                                  	;add	al,[cs:CAPITAL_A]
 24061                                  	;mov	byte [PIPE2],al		; Make pipe files in root of def drv
 24062                                  	;mov	bx,PIPE1
 24063                                  	;mov	[bx],al
 24064                                  	;xor	ah,ah			; nul terminate path names
 24065                                  	;mov	byte [PIPE1+3],ah
 24066                                  	;mov	byte [PIPE2+3],ah
 24067                                  
 24068                                  	; MSDOS 6.0
 24069                                  ;SR;
 24070                                  ; We want to create temp files in the current directory rather than in the 
 24071                                  ;root of the drive. This is because the number of files that can be present
 24072                                  ;in the root directory is fixed, whereas it is not so in subdirectories.
 24073                                  
 24074                                  	;mov	ah,'.'
 24075                                  	;mov	[Pipe1],ah	; = RESGROUP:EndInit
 24076                                  	;mov	[Pipe2],ah	; = RESGROUP:EndInit+79
 24077                                  	;xor	ah,ah
 24078                                  	;mov	[Pipe1+1],ah	; = RESGROUP:EndInit+1
 24079                                  	;mov	[Pipe2+1],ah		;create files in current dir
 24080                                  	; 27/02/2023
 24081 000032C8 B92E00                  	mov	cx,002Eh
 24082 000032CB 890E[B702]              	mov	[Pipe1],cx
 24083 000032CF 890E[0603]              	mov	[Pipe2],cx
 24084                                  crt_temp:
 24085                                  	; MSDOS 6.0
 24086                                  	;mov	dx,offset DATARES:Pipe1	; = RESGROUP:EndInit
 24087                                  	;;mov	dx,320h ; MSDOS 5.0 COMMAND.COM
 24088                                  	;mov	dx,3EAh ; MSDOS 6.22 COMMAND.COM	
 24089 000032D3 BA[B702]                	mov	dx,Pipe1
 24090                                  	; MSDOS 3.3
 24091                                  	;mov	dx,bx
 24092                                  	
 24093                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24094 000032D6 31C9                    	xor	cx,cx
 24095                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 24096 000032D8 B45A                    	mov	ah,5Ah
 24097 000032DA CD21                    	int	21h
 24098                                  		; DOS -	3+ - CREATE UNIQUE FILE
 24099                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 24100                                  		; receive generated filename
 24101                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 24102 000032DC 728E                    	jc	short PIPERR	; Couldn't create
 24103                                  
 24104 000032DE 89C3                    	mov	bx,ax
 24105                                  	;mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 24106 000032E0 B43E                    	mov	ah,3Eh
 24107 000032E2 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 24108                                  			; BX = file handle
 24109                                  	;;;mov	dx,PIPE2
 24110                                  	;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM
 24111                                  	;mov	dx,439h ; MSDOS 6.22 COMMAND.COM
 24112 000032E4 BA[0603]                	mov	dx,Pipe2
 24113                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 24114 000032E7 B45A                    	mov	ah,5Ah
 24115 000032E9 CD21                    	int	21h
 24116                                  		; DOS -	3+ - CREATE UNIQUE FILE
 24117                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 24118                                  		; receive generated filename
 24119                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 24120                                  	; 17/04/2023
 24121                                  	;jc	short PIPERR
 24122                                  	; 27/02/2023
 24123 000032EB 7303                    	jnc	short pps1
 24124 000032ED E97CFF                  	jmp	PIPERR
 24125                                  pps1:
 24126 000032F0 89C3                    	mov	bx,ax
 24127 000032F2 B43E                    	mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 24128 000032F4 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 24129                                  				; BX = file handle
 24130                                  	;call	near ptr TESTDOREIN ; Set up a redirection if specified
 24131 000032F6 E87FFE                  	call	TESTDOREIN
 24132                                  	;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24133 000032F9 8B36[5503]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 24134 000032FD 833E[4302]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 24135 00003302 7506                    	jne	short NOSINGP
 24136 00003304 C706[4302]00F0          	mov	word [SingleCom],0F000h ; Flag single command pipe
 24137                                  NOSINGP:
 24138 0000330A EB29                    	jmp	short FIRSTPIPE
 24139                                  
 24140                                  ; ---------------------------------------------------------------------------
 24141                                  
 24142                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 24143                                  	; 11/06/2026 - Retro DOS v4.2 COMMAND.COM
 24144                                  PIPEPROC:
 24145 0000330C 8026[3B02]FE            	and	byte [EchoFlag],0FEh  ; force current echo to be off
 24146                                  	;;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24147 00003311 8B36[5503]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 24148 00003315 AC                      	lodsb
 24149                                  	; 27/02/2023
 24150 00003316 3C7C                    	cmp	al,'|'		
 24151                                  	;;cmp	al,ALTPIPECHR	; Alternate pipe char? 	
 24152                                  	;je	short ISPIPE1	; Yes
 24153                                  	;cmp	al,'|'
 24154                                  	;;cmp	al,[cs:VBAR]
 24155 00003318 7403                    	je	short ISPIPE1
 24156 0000331A E98400                  	jmp	PIPEEND		; Pipe done
 24157                                  ISPIPE1:
 24158 0000331D 8B16[D803]              	mov	dx,[InPipePtr]	; Get the input file name
 24159                                  	;mov	ax,OPEN*256 ; 3D00h
 24160 00003321 B8003D                  	mov	ax,3D00h
 24161 00003324 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 24162                                  			; DS:DX	-> ASCIZ filename
 24163                                  			; AL = access mode
 24164                                  			; 0 - read
 24165                                  PIPEERRJ:
 24166 00003326 7303                    	jnc	short NO_PIPEERR
 24167 00003328 E941FF                  	jmp	PIPERR		; Lost the pipe file
 24168                                  NO_PIPEERR:
 24169 0000332B 89C3                    	mov	bx,ax
 24170 0000332D B0FF                    	mov	al,0FFh
 24171                                  	;xchg	al,[bx+18h]
 24172 0000332F 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 24173 00003332 A21800                  	mov	[PDB.JFN_TABLE],al	; Redirect
 24174                                  FIRSTPIPE:
 24175 00003335 BF[769C]                	mov	di,COMBUF+2
 24176 00003338 31C9                    	xor	cx,cx
 24177 0000333A 803C0D                  	cmp	byte [si],0Dh	; '|<CR>'
 24178 0000333D 7503                    	jne	short PIPEOK1
 24179                                  PIPEERRSYNJ:
 24180 0000333F E91FFF                  	jmp	PIPEERRSYN
 24181                                  PIPEOK1:
 24182                                  	;;;mov	al,[cs:VBAR]
 24183                                  	; 27/02/2023
 24184                                  	;;mov	al,vbar
 24185                                  	;mov	al,'|'
 24186                                  	;cmp	[si],al		; '||'
 24187                                  	;je	short PIPEERRSYNJ
 24188 00003342 803C7C                  	cmp	byte [si],'|'
 24189                                  	;cmp	byte [si],ALTPIPECHR ; '##' or '|#'?
 24190 00003345 74F8                    	je	short PIPEERRSYNJ
 24191                                  PIPECOMLP:
 24192 00003347 AC                      	lodsb
 24193 00003348 AA                      	stosb
 24194                                  	; 27/02/2023
 24195 00003349 E8C5F5                  	call	testkanj
 24196 0000334C 7405                    	jz	short NOTKANJ5
 24197 0000334E A4                      	movsb
 24198                                  ;  Added following 2 commands to the fix pipe bug.
 24199 0000334F 41                      	inc	cx		;AN000;  3/3/KK
 24200 00003350 41                      	inc	cx		;AN000;  3/3/KK
 24201 00003351 EBF4                    	jmp	short PIPECOMLP
 24202                                  NOTKANJ5:
 24203 00003353 3C0D                    	cmp	al,0Dh
 24204 00003355 7438                    	je	short LASTPIPE
 24205 00003357 41                      	inc	cx
 24206                                  	; 27/02/2023
 24207 00003358 3C7C                    	cmp	al,'|'
 24208                                  	;cmp	al,ALTPIPECHR
 24209                                  	;je	short ISPIPE2
 24210                                  	;;cmp	al,[cs:VBAR]
 24211                                  	;cmp	al,vbar
 24212 0000335A 75EB                    	jne	short PIPECOMLP
 24213                                  ISPIPE2:
 24214 0000335C 26C645FF0D              	mov	byte [es:di-1],0Dh
 24215 00003361 49                      	dec	cx
 24216                                  	;mov	[cs:COMBUF+1],cl
 24217                                  	; 27/02/2023
 24218 00003362 26880E[759C]            	mov	[es:COMBUF+1],cl
 24219 00003367 4E                      	dec	si
 24220                                  	;;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 24221                                  	; 11/06/2023 - MSDOS 6.22 COMMAND.COM
 24222                                  	;mov	[488h],si ; [PipePtr] = [EndInit+158]
 24223 00003368 8936[5503]              	mov	[PipePtr],si		; On to next pipe element
 24224                                  			; mov [EndInit+158],si
 24225 0000336C 8B16[DA03]              	mov	dx,[OutPipePtr]
 24226 00003370 51                      	push	cx
 24227 00003371 31C9                    	xor	cx,cx
 24228                                  	;mov	ax,CREAT*256 ; 3C00h
 24229 00003373 B8003C                  	mov	ax,3C00h
 24230 00003376 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 24231                                  			; CX = attributes for file
 24232                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 24233 00003378 59                      	pop	cx
 24234 00003379 72AB                    	jc	short PIPEERRJ		; Lost the file
 24235 0000337B 89C3                    	mov	bx,ax
 24236 0000337D B0FF                    	mov	al,0FFh
 24237                                  	;xchg	al,[bx+18h]
 24238 0000337F 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 24239 00003382 A21900                  	mov	[PDB.JFN_TABLE+1],al
 24240 00003385 8716[D803]              	xchg	dx,[InPipePtr]	; Swap for next element of pipe
 24241 00003389 8916[DA03]              	mov	[OutPipePtr],dx
 24242 0000338D EB0D                    	jmp	short PIPECOM
 24243                                  LASTPIPE:
 24244                                  	;mov	[cs:COMBUF+1],cl 
 24245                                  	; 27/02/2023
 24246 0000338F 26880E[759C]            	mov	[es:COMBUF+1],cl
 24247 00003394 4E                      	dec	si
 24248                                  	;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 24249                                  	;mov	[488h],si ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24250 00003395 8936[5503]              	mov	[PipePtr],si	; Point at the CR (anything not '|' will do)
 24251                                  		; mov [EndInit+158],si
 24252 00003399 E857FD                  	call	TESTDOREOUT	; Set up the redirection if specified
 24253                                  PIPECOM:
 24254 0000339C 0E                      	push	cs
 24255 0000339D 1F                      	pop	ds
 24256 0000339E E979CF                  	jmp	NOPIPEPROC	; Process the pipe element
 24257                                  PIPEEND:
 24258 000033A1 E89DFE                  	call	PIPEDEL
 24259 000033A4 813E[4302]00F0          	cmp	word [SingleCom],0F000h
 24260 000033AA 7506                    	jnz	short NOSINGP2
 24261 000033AC C706[4302]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Make it return
 24262                                  NOSINGP2:
 24263 000033B2 E94FCD                  	jmp	TCOMMAND
 24264                                  
 24265                                  ; =============== S U B	R O U T	I N E =======================================
 24266                                  
 24267                                  ; Date and time are set during initialization and use
 24268                                  ; this routines since they need to do a long return
 24269                                  
 24270                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 24271                                  DATINIT:
 24272 000033B5 2E8C1E[159E]            	mov	[cs:RESSEG],ds	; SetInitFlag needs resseg initialized
 24273 000033BA 06                      	push	es
 24274 000033BB 1E                      	push	ds		; Going to use the previous stack
 24275 000033BC 8CC8                    	mov	ax,cs		; Set up the appropriate segment registers
 24276 000033BE 8EC0                    	mov	es,ax
 24277 000033C0 8ED8                    	mov	ds,ax
 24278 000033C2 E84722                  	call	TSYSLOADMSG ; MSDOS 6.0 ; AN000; preload messages
 24279 000033C5 BA[36AA]                	mov	dx,INTERNATVARS
 24280 000033C8 B80038                  	mov	ax,3800h
 24281                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 24282 000033CB CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 24283                                  			; get current-country info
 24284                                  			; DS:DX	-> buffer for returned info
 24285                                  	; 20/10/2018
 24286 000033CD C70681000D00            	mov	word [81h],0Dh ; Want to prompt for date during initialization
 24287 000033D3 C606[749C]80            	mov	byte [COMBUF],128 ; Init COMBUF
 24288 000033D8 C706[759C]010D          	mov	word [COMBUF+1],0D01h
 24289 000033DE E80600                  	call	DATE
 24290 000033E1 E86200                  	call	CTIME
 24291 000033E4 1F                      	pop	ds
 24292 000033E5 07                      	pop	es
 24293 000033E6 CB                      	retf	; far return
 24294                                  
 24295                                  ; =============== S U B	R O U T	I N E =======================================
 24296                                  
 24297                                  ; MSDOS 6.0
 24298                                  
 24299                                  ; ****************************************************************
 24300                                  ; *
 24301                                  ; * ROUTINE:	 DATE - Set system date
 24302                                  ; *
 24303                                  ; * FUNCTION:	 If a date is specified, set the system date,
 24304                                  ; *		 otherwise display the current system date and
 24305                                  ; *		 prompt the user for a new date.  If an invalid
 24306                                  ; *		 date is specified, issue an error message and
 24307                                  ; *		 prompt for a new date.  If the user enters
 24308                                  ; *		 nothing when prompted for a date, terminate.
 24309                                  ; *
 24310                                  ; * INPUT:	 command line at offset 81H
 24311                                  ; *
 24312                                  ; * OUTPUT:	 none
 24313                                  ; *
 24314                                  ; ****************************************************************
 24315                                  
 24316                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24317                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2FC4h
 24318                                  
 24319                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24320                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:356Eh
 24321                                  DATE:
 24322 000033E7 BE8100                  	mov	si,81h			; Accepting argument for date inline
 24323 000033EA BF[0598]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24324 000033ED 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 24325 000033EF 31D2                    	xor	dx,dx			;AN000;
 24326 000033F1 E86816                  	call	cmd_parse		;AC000; call parser
 24327                                  
 24328                                  	; 27/02/2023
 24329                                  	;cmp	ax,-1
 24330                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24331                                  	;je	short PRMTDAT 		;AC000; yes - go ask for date
 24332                                  	;;cmp	ax,0
 24333                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24334                                  	;;jne	short DATERR		;AN000; yes - go issue message
 24335                                  	; 26/04/2023
 24336                                  	;or	ax,ax ; ax = 0 ?
 24337                                  	;jnz	short DATERR
 24338                                  	;;jmp	short COMDAT		;AC000; we have a date
 24339                                  	; 11/06/2023
 24340 000033F4 40                      	inc	ax  ; cmp ax,-1
 24341 000033F5 7428                    	jz	short PRMTDAT ; 0FFFFh -> 0
 24342 000033F7 48                      	dec	ax  ; cmp ax,0
 24343 000033F8 7541                    	jnz	short DATERR ; 1 -> 0
 24344                                  	; ax = 0
 24345                                  
 24346                                  	; 27/02/2023
 24347                                  COMDAT:
 24348 000033FA 8B0E[93AA]              	mov	cx,[DATE_YEAR]		;AC000; get parts of date in
 24349 000033FE 8A36[95AA]              	mov	dh,[DATE_MONTH]		;AC000;  cx and dx for set
 24350 00003402 8A16[96AA]              	mov	dl,[DATE_DAY]		;AC000;  date function call.
 24351 00003406 51                      	push	cx			;AC000; save date
 24352 00003407 52                      	push	dx			;AC000;
 24353 00003408 B90100                  	mov	cx,1			;AC000; set 1 positional entered
 24354 0000340B 31D2                    	xor	dx,dx			;AN029;
 24355 0000340D E84C16                  	call	cmd_parse		;AN029; call parser
 24356 00003410 3CFF                    	cmp	al,0FFh ; -1
 24357                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 24358 00003412 5A                      	pop	dx			;AC000; retrieve date
 24359 00003413 59                      	pop	cx			;AC000;
 24360 00003414 7525                    	jnz	short DATERR		;AC000; extra stuff on line - try again
 24361                                  	; 26/04/2023
 24362                                  	;mov	ah,SET_DATE		;yes - set date
 24363 00003416 B42B                    	mov	ah,2Bh
 24364 00003418 CD21                    	int	21h
 24365                                  			; DOS - SET CURRENT DATE
 24366                                  			; DL = day, DH = month, CX = year
 24367                                  			; Return: AL = 00h if no error /= FFh if bad value sent to routine
 24368 0000341A 08C0                    	or	al,al
 24369 0000341C 751D                    	jnz	short DATERR
 24370                                  date_end:
 24371 0000341E C3                      	retn
 24372                                  
 24373                                  PRMTDAT:
 24374                                  	; Print "Current date is
 24375 0000341F E81208                  	call	GetDate 		;AN000; get date for output
 24376                                  
 24377 00003422 86F2                    	xchg	dh,dl			;AN000; switch month & day
 24378 00003424 890E[A192]              	mov	[CurDat_yr],cx		;AC000; put year into message control block
 24379 00003428 8916[A392]              	mov	[CurDat_mo_day],dx	;AC000; put month and day into message control block
 24380 0000342C BA[9192]                	mov	dx,CurDat_Ptr		;AC000; set up message for output
 24381 0000342F E8FB20                  	call	std_printf
 24382                                  
 24383                                  ;AD061; mov	word [CurDat_yr],0	;AC000; reset year, month and day
 24384                                  ;AD061; mov	word [CurDat_mo_day],0 	;AC000;  pointers in control block
 24385                                  
 24386                                  GET_NEW_DATE:				;AN000;
 24387 00003432 E8BC00                  	call	GETDAT			;AC000; prompt user for date
 24388                                  	
 24389                                  	; 11/06/2023
 24390                                  	;cmp	ax,0FFFFh ; -1
 24391                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24392                                  	;je	short date_end		;AC000; yes - exit
 24393                                  	; 26/04/2023
 24394                                  	;;cmp	ax,0
 24395                                  	;;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24396                                  	;;;jnz	short DATERR		;AN000; yes - go issue message
 24397                                  	;; 27/02/2023
 24398                                  	;;jz	short COMDAT
 24399                                  	; 26/04/2023
 24400                                  	;and	ax,ax ; 0 ?
 24401                                  	;jz	short COMDAT
 24402                                  
 24403                                  	; 11/06/2023
 24404 00003435 40                      	inc	ax  ; cmp ax,-1
 24405 00003436 74E6                    	jz	short date_end ; 0FFFFh -> 0
 24406 00003438 48                      	dec	ax  ; cmp ax,0
 24407 00003439 74BF                    	jz	short COMDAT ; 1 -> 0
 24408                                  	; ax > 0
 24409                                  
 24410                                  ;COMDAT:
 24411                                  ;	....
 24412                                  DATERR:
 24413 0000343B E8E5F6                  	call	CRLF2			;AN028; print out a blank line
 24414 0000343E BA[8E92]                	mov	dx,BADDAT_PTR
 24415 00003441 E8E920                  	call	std_printf
 24416 00003444 EBEC                    	jmp	short GET_NEW_DATE	;AC000; get date again
 24417                                  
 24418                                  ; =============== S U B	R O U T	I N E =======================================
 24419                                  
 24420                                  ; MSDOS 6.0
 24421                                  
 24422                                  ; TIME gets and sets the time
 24423                                  
 24424                                  ; ****************************************************************
 24425                                  ; *
 24426                                  ; * ROUTINE:	 TIME - Set system time
 24427                                  ; *
 24428                                  ; * FUNCTION:	 If a time is specified, set the system time,
 24429                                  ; *		 otherwise display the current system time and
 24430                                  ; *		 prompt the user for a new time.  If an invalid
 24431                                  ; *		 time is specified, issue an error message and
 24432                                  ; *		 prompt for a new time.  If the user enters
 24433                                  ; *		 nothing when prompted for a time, terminate.
 24434                                  ; *
 24435                                  ; * INPUT:	 command line at offset 81H
 24436                                  ; *
 24437                                  ; * OUTPUT:	 none
 24438                                  ; *
 24439                                  ; ****************************************************************
 24440                                  
 24441                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24442                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:302Dh
 24443                                  
 24444                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24445                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:35D7h
 24446                                  CTIME:
 24447 00003446 BE8100                  	mov	si,81h			; Accepting argument for time inline
 24448 00003449 BF[1798]                	mov	di,PARSE_TIME		;AN000; Get address of PARSE_time
 24449 0000344C 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 24450 0000344E 31D2                    	xor	dx,dx			;AN000;
 24451 00003450 E80916                  	call	cmd_parse		;AC000; call parser
 24452                                  	
 24453                                  	; 27/02/2023
 24454                                  	;cmp	ax,-1
 24455                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24456                                  	;je	short PRMTTIM 		;AC000; yes - prompt for time
 24457                                  	;;cmp	ax,0
 24458                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24459                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 24460                                  	;and	ax,ax ; ax = 0 ?
 24461                                  	;jnz	short TIMERR
 24462                                  	;;jmp	short COMTIM		;AC000; we have a time
 24463                                  	; 11/06/2023
 24464 00003453 40                      	inc	ax  ; cmp ax,-1
 24465 00003454 742C                    	jz	short PRMTTIM ; 0FFFFh -> 0
 24466 00003456 48                      	dec	ax  ; cmp ax,0
 24467 00003457 7548                    	jnz	short TIMERR ; 1 -> 0
 24468                                  	; ax = 0
 24469                                  	
 24470                                  	; 27/02/2023
 24471                                  COMTIM:
 24472 00003459 8A2E[9BAA]              	mov	ch,[TIME_HOUR]		;AC000; get parts of time in
 24473 0000345D 8A0E[9CAA]              	mov	cl,[TIME_MINUTES]	;AC000;  cx and dx for set
 24474 00003461 8A36[9DAA]              	mov	dh,[TIME_SECONDS]	;AC000;  time function call
 24475 00003465 8A16[9EAA]              	mov	dl,[TIME_FRACTION]	;AC000;
 24476 00003469 51                      	push	cx			;AC000; save time
 24477 0000346A 52                      	push	dx			;AC000;
 24478 0000346B B90100                  	mov	cx,1			;AC000; set 1 positional parm entered
 24479 0000346E 31D2                    	xor	dx,dx			;AN029;
 24480 00003470 E8E915                  	call	cmd_parse		;AN029; call parser
 24481 00003473 3CFF                    	cmp	al, -1
 24482                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 24483 00003475 5A                      	pop	dx			;AC000; retieve time
 24484 00003476 59                      	pop	cx			;AC000;
 24485 00003477 7528                    	jnz	short TIMERR		;AC000; extra stuff on line - try again
 24486                                  SAVTIM:
 24487                                  	;mov	ah,SET_TIME
 24488 00003479 B42D                    	mov	ah,2Dh
 24489 0000347B CD21                    	int	21h
 24490 0000347D 08C0                    	or	al,al
 24491 0000347F 7520                    	jnz	short TIMERR		;AC000; if an error occured, try again
 24492                                  time_end:
 24493 00003481 C3                      	retn
 24494                                  
 24495                                  PRMTTIM:
 24496                                  	;Printf "Current time is ... "
 24497                                  
 24498                                  	;mov	ah,Get_Time		;AC000; get the current time
 24499 00003482 B42C                    	mov	ah,2Ch
 24500 00003484 CD21                    	int	21h			;AC000;   Get time in CX:DX
 24501 00003486 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 24502 00003488 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 24503 0000348A 890E[C392]              	mov	[CurTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 24504 0000348E 8916[C592]              	mov	[CurTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 24505 00003492 BA[BE92]                	mov	dx,CurTim_Ptr		;AC000; set up message for output
 24506 00003495 E89520                  	call	std_printf
 24507                                  
 24508                                  ;AD061; mov	word [CurTim_hr_min],0 	;AC000; reset hour, minutes, seconds, and hundredths
 24509                                  ;AD061; mov	word [CurTim_Sec_hn],0 	;AC000;  pointers in control block
 24510                                  
 24511                                  GET_NEW_TIME:
 24512 00003498 E8AE00                  	call	GETTIM			;AC000;
 24513                                  	
 24514                                  	; 11/06/2023
 24515                                  	;cmp	ax,-1
 24516                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 24517                                  	;je	short time_end		;AC000;
 24518                                  	;;cmp	ax,0
 24519                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 24520                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 24521                                  	;or	ax,ax  ; ax = 0 ?
 24522                                  	;;jnz	short TIMERR
 24523                                  	; 27/02/2023
 24524                                  	;jz	short COMTIM
 24525                                  
 24526                                  	; 11/06/2023
 24527 0000349B 40                      	inc	ax  ; cmp ax,-1
 24528 0000349C 74E3                    	jz	short time_end ; 0FFFFh -> 0
 24529 0000349E 48                      	dec	ax  ; cmp ax,0
 24530 0000349F 74B8                    	jz	short COMTIM ; 1 -> 0
 24531                                  	; ax > 0
 24532                                  
 24533                                  ;COMTIM:
 24534                                  ;	....
 24535                                  TIMERR:
 24536 000034A1 E87FF6                  	call	CRLF2			;AN028; print out a blank line
 24537 000034A4 BA[BB92]                	mov	dx,BadTim_Ptr
 24538 000034A7 E88320                  	call	std_printf		; Print error message
 24539 000034AA EBEC                    	jmp	short GET_NEW_TIME	;AC000; Try again
 24540                                  
 24541                                  ; =============== S U B	R O U T	I N E =======================================
 24542                                  
 24543                                  ; MSDOS 6.0
 24544                                  
 24545                                  ; Set the special flag in the INIT flag to the value in CX.
 24546                                  
 24547                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24548                                  SetInitFlag:
 24549 000034AC 8E1E[159E]              	mov	ds,[RESSEG]
 24550                                  
 24551 000034B0 8026[B402]FD            	and	byte [InitFlag],~INITSPECIAL ; 0FDh ; not initspecial
 24552                                  	;and	byte [InitFlag],0FDh
 24553 000034B5 080E[B402]              	or	byte [InitFlag],cl
 24554 000034B9 0E                      	push	cs
 24555 000034BA 1F                      	pop	ds
 24556 000034BB C3                      	retn
 24557                                  
 24558                                  ; =============== S U B	R O U T	I N E =======================================
 24559                                  
 24560                                  ; MSDOS 6.0
 24561                                  
 24562                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24563                                  PipeOff:
 24564 000034BC 1E                      	push	ds
 24565 000034BD 50                      	push	ax
 24566 000034BE 2E8E1E[159E]            	mov	ds,[cs:RESSEG]
 24567 000034C3 30C0                    	xor	al,al
 24568 000034C5 8606[B502]              	xchg	[PipeFlag],al
 24569 000034C9 08C0                    	or	al,al
 24570 000034CB 7404                    	jz	short PipeOffDone
 24571 000034CD D02E[3B02]              	shr	byte [EchoFlag],1
 24572                                  PipeOffDone:
 24573 000034D1 58                      	pop	ax
 24574 000034D2 1F                      	pop	ds
 24575 000034D3 C3                      	retn
 24576                                  
 24577                                  ; =============== S U B	R O U T	I N E =======================================
 24578                                  
 24579                                  ; MSDOS 6.0
 24580                                  
 24581                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24582                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24583                                  PRINT_TIME:
 24584                                  	;mov	ah,Get_Time
 24585 000034D4 B42C                    	mov	ah,2Ch
 24586 000034D6 CD21                    	int	21h			; Get time in CX:DX
 24587                                  
 24588 000034D8 06                      	push	es
 24589 000034D9 0E                      	push	cs
 24590 000034DA 07                      	pop	es
 24591 000034DB 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 24592 000034DD 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 24593 000034DF 2E890E[FF93]            	mov	[cs:PromTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 24594 000034E4 2E8916[0194]            	mov	[cs:PromTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 24595 000034E9 BA[FA93]                	mov	dx,promtim_ptr		;AC000; set up message for output
 24596 000034EC E83E20                  	call	std_printf
 24597                                  
 24598                                  ;AD061; mov	word [cs:PromTim_hr_min],0
 24599                                  					;AC000; reset hour, minutes, seconds, and hundredths
 24600                                  ;AD061; mov	word [cs:PromTim_Sec_hn],0
 24601                                  					;AC000;  pointers in control block
 24602 000034EF 07                      	pop	es
 24603 000034F0 C3                      	retn
 24604                                  
 24605                                  ; =============== S U B	R O U T	I N E =======================================
 24606                                  
 24607                                  ; MSDOS 6.0
 24608                                  
 24609                                  ; ****************************************************************
 24610                                  ; *
 24611                                  ; * ROUTINE:	 GETDAT - Prompt user for date
 24612                                  ; *
 24613                                  ; * FUNCTION:	 Gets the date format from the COUNTRY DEPENDENT
 24614                                  ; *		 INFORMATION and issues the "Enter new date"
 24615                                  ; *		 message with the proper date format. COMBUF
 24616                                  ; *		 is reset to get a date from the command line.
 24617                                  ; *		 The PARSE_DATE blocks are then reset and the
 24618                                  ; *		 PARSE function call is issued.
 24619                                  ; *
 24620                                  ; * INPUT:	 NONE
 24621                                  ; *
 24622                                  ; * OUTPUT:	 COMBUF
 24623                                  ; *		 PARSER RETURN CODES
 24624                                  ; *
 24625                                  ; ****************************************************************
 24626                                  
 24627                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24628                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:30E2h
 24629                                  
 24630                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24631                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:368Ch
 24632                                  GETDAT:
 24633                                  	;mov	ax,(International SHL 8)
 24634 000034F1 B80038                  	mov	ax,3800h
 24635                                  					; Determine what format the date
 24636 000034F4 BA5C00                  	mov	dx,5Ch			;  should be entered in and
 24637 000034F7 CD21                    	int	21h			;  print a message describing it
 24638                                  			; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 24639                                  			; get current-country info
 24640                                  			; DS:DX -> buffer for returned info
 24641 000034F9 89D6                    	mov	si,dx
 24642 000034FB AD                      	lodsw
 24643 000034FC 2E8B16[D893]            	mov	dx,[cs:usadat_ptr]	;AC000; get mm-dd-yy
 24644 00003501 48                      	dec	ax
 24645 00003502 780C                    	js	short printformat
 24646 00003504 2E8B16[DB93]            	mov	dx,[cs:eurdat_ptr]	;AC000; get dd-mm-yy
 24647 00003509 7405                    	jz	short printformat
 24648 0000350B 2E8B16[DE93]            	mov	dx,[cs:japdat_ptr]	;AC000; get yy-mm-dd
 24649                                  printformat:
 24650 00003510 89D0                    	mov	ax,dx			;AN000; get message number of format
 24651                                  	;mov	dh,util_msg_class	;AN000; this is a utility message
 24652 00003512 B6FF                    	mov	dh,-1 ; 0FFh
 24653 00003514 E8FB20                  	call	TSYSGETMSG		;AN000; get the address of the message
 24654 00003517 2E8936[B292]            	mov	[cs:NewDat_Format],si	;AN000; put the address in subst block
 24655 0000351C BA[AD92]                	mov	dx,NewDat_Ptr		;AC000; get address of message to print
 24656 0000351F E80B20                  	call	std_printf
 24657                                  	;mov	word [cs:NewDat_Format],no_subst
 24658                                  					;AN000; reset subst block
 24659 00003522 2EC706[B292]0000        	mov	word [cs:NewDat_Format],0
 24660                                  
 24661                                  	; 28/02/2023
 24662 00003529 BF[0598]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24663                                  ; 28/02/2023
 24664                                  gettim_p:	
 24665                                  	;mov	ah,Std_Con_String_Input
 24666 0000352C B40A                    	mov	ah,0Ah
 24667 0000352E BA[749C]                	mov	dx,COMBUF
 24668 00003531 B90200                  	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 24669 00003534 E875FF                  	call	SetInitFlag		;  prompting for date.
 24670 00003537 CD21                    	int	21h			; Get input line
 24671 00003539 31C9                    	xor	cx,cx			; Reset bit in InitFlag that indicates
 24672 0000353B E86EFF                  	call	SetInitFlag		;  prompting for date.
 24673 0000353E E8E2F5                  	call	CRLF2
 24674                                  	; 28/02/2023
 24675                                  	;mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 24676                                  ;gettim_p: ; 28/02/2023
 24677 00003541 BE[769C]                	mov	si,COMBUF+2
 24678                                  	;xor	cx,cx	 ; cx = 0	;AN000; clear counter for positionals
 24679 00003544 31D2                    	xor	dx,dx			;AN000;
 24680                                  	;call	cmd_parse		;AC000; call parser
 24681                                  	;retn
 24682                                  	; 28/02/2023
 24683 00003546 E91315                  	jmp	cmd_parse
 24684                                  
 24685                                  ; =============== S U B	R O U T	I N E =======================================
 24686                                  
 24687                                  ; MSDOS 6.0
 24688                                  
 24689                                  ; ****************************************************************
 24690                                  ; *
 24691                                  ; * ROUTINE:	 GETTIME - Prompt user for time
 24692                                  ; *
 24693                                  ; * FUNCTION:	 Gets the time format from the COUNTRY DEPENDENT
 24694                                  ; *		 INFORMATION and issues the "Enter new time"
 24695                                  ; *		 message. COMBUF is reset to get a time from the
 24696                                  ; *		 command line. The PARSE_TIME blocks are then
 24697                                  ; *		 reset and the PARSE function call is issued.
 24698                                  ; *
 24699                                  ; * INPUT:	 NONE
 24700                                  ; *
 24701                                  ; * OUTPUT:	 COMBUF
 24702                                  ; *		 PARSER RETURN CODES
 24703                                  ; *
 24704                                  ; ****************************************************************
 24705                                  
 24706                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24707                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:313Dh
 24708                                  
 24709                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24710                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:36E7h
 24711                                  GETTIM:
 24712 00003549 31C9                    	xor	cx,cx			; Initialize hours and minutes to zero
 24713 0000354B BA[CC92]                	mov	dx,NewTim_Ptr
 24714 0000354E E8DC1F                  	call	std_printf
 24715                                  
 24716                                  	; 28/02/2023
 24717 00003551 BF[1798]                	mov	di,PARSE_TIME
 24718 00003554 EBD6                    	jmp	short gettim_p
 24719                                  
 24720                                  ; 28/02/2023
 24721                                  ;	;mov	ah,Std_Con_String_Input
 24722                                  ;	mov	ah,0Ah
 24723                                  ;	mov	dx,COMBUF
 24724                                  ;	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 24725                                  ;	call	SetInitFlag		;  prompting for time.
 24726                                  ;	int	21h			; Get input line
 24727                                  ;	; 28/02/2023
 24728                                  ;	xor	cx,cx			; Reset bit in InitFlag that indicates
 24729                                  ;	call	SetInitFlag		;  prompting for time.
 24730                                  ;	call	CRLF2
 24731                                  ;	; 28/02/2023
 24732                                  ;	;mov	si,COMBUF+2
 24733                                  ;	; 28/02/2023
 24734                                  ;	mov	di,PARSE_TIME		;AN000; Get address of PARSE_TIME
 24735                                  ;	; 28/02/2023
 24736                                  ;	jmp	short gettim_p	
 24737                                  ;	; 28/02/2023
 24738                                  ;	;;xor	cx,cx			;AN000; clear counter for positionals
 24739                                  ;	;xor	dx,dx			;AN000;
 24740                                  ;	;call	cmd_parse		;AC000; call parser
 24741                                  ;	;retn
 24742                                  
 24743                                  
 24744                                  ; =============== S U B	R O U T	I N E =======================================
 24745                                  
 24746                                  ; MSDOS 6.0
 24747                                  
 24748                                  ;Skip_white: Skips over the whitespace chars that could be present after
 24749                                  ;the '=' sign in the environment variable before the actual path.
 24750                                  ;
 24751                                  ;	ENTRY:	ds:si = arguments of the environment variable
 24752                                  ;
 24753                                  ;	EXIT:	ds:si = start of the path
 24754                                  ;
 24755                                  ;	REGISTERS AFFECTED: ax
 24756                                  
 24757                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24758                                  skip_white:
 24759 00003556 FC                      	cld
 24760                                  skw_lp:
 24761 00003557 AC                      	lodsb
 24762 00003558 3C20                    	cmp	al,' '			;blank char?
 24763 0000355A 74FB                    	jz	short skw_lp		;yes, skip it
 24764 0000355C 3C09                    	cmp	al,9			;tab char?
 24765 0000355E 74F7                    	jz	short skw_lp		;yes, skip it
 24766 00003560 4E                      	dec	si			;point at first non-white
 24767 00003561 C3                      	retn
 24768                                  
 24769                                  ; =============== S U B	R O U T	I N E =======================================
 24770                                  
 24771                                  ; MSDOS 6.0
 24772                                  
 24773                                  ;Copy_pipe_path: This routine copies the path from the TEMP environment
 24774                                  ;variable into the path buffers Pipe1 & Pipe2.
 24775                                  ;
 24776                                  ;	ENTRY:	ds:si = path to be copied
 24777                                  ;		es = RESGROUP
 24778                                  ;
 24779                                  ;	EXIT:	Path copied into Pipe1 and Pipe2.
 24780                                  ;
 24781                                  ;	REGISTERS AFFECTED: si, di, cx, ax
 24782                                  
 24783                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24784                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3174h
 24785                                  
 24786                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 24787                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:371Eh
 24788                                  copy_pipe_path:
 24789 00003562 B9FFFF                  	mov	cx,0FFFFh ; 65535
 24790 00003565 30C0                    	xor	al,al
 24791                                  
 24792 00003567 89F7                    	mov	di,si
 24793 00003569 06                      	push	es			;save es
 24794 0000356A 1E                      	push	ds
 24795 0000356B 07                      	pop	es			;es:di = path to be copied
 24796                                  	
 24797 0000356C FC                      	cld
 24798 0000356D 57                      	push	di
 24799 0000356E F2AE                    	repnz	scasb			;look for the null char
 24800 00003570 5F                      	pop	di
 24801                                  
 24802 00003571 07                      	pop	es			;es = RESGROUP again
 24803                                  
 24804 00003572 F7D1                    	not	cx			;length including the null
 24805                                  
 24806                                  	;;;mov	di,320h ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit)
 24807                                  	;;mov	di,3EAh ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24808                                  	;mov	di,offset DATARES:Pipe1
 24809 00003574 BF[B702]                	mov	di,Pipe1  ; (offset RESGROUP:EndInit)
 24810 00003577 57                      	push	di
 24811 00003578 51                      	push	cx			
 24812 00003579 F3A4                    	rep	movsb			;copy path into Pipe1
 24813 0000357B 59                      	pop	cx
 24814 0000357C 5F                      	pop	di
 24815                                  
 24816 0000357D 1E                      	push	ds
 24817 0000357E 06                      	push	es
 24818 0000357F 1F                      	pop	ds			;ds:si = Pipe1
 24819 00003580 89FE                    	mov	si,di
 24820                                  	;;;mov	di,36Fh ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit+79)
 24821                                  	;;mov	di,439h ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 24822                                  	;mov	di,offset DATARES:Pipe2	;es:di = Pipe2
 24823 00003582 BF[0603]                	mov	di,Pipe2  ; (offset RESGROUP:EndInit+79)
 24824 00003585 F3A4                    	rep	movsb			;copy path into Pipe2
 24825 00003587 1F                      	pop	ds
 24826 00003588 C3                      	retn
 24827                                  
 24828                                  ;============================================================================
 24829                                  ; PARSE2.ASM, MSDOS 6.0, 1991
 24830                                  ;============================================================================
 24831                                  ; 03/10/2018 - Retro DOS v3.0
 24832                                  
 24833                                  ;----------------------------------------------------------------------------
 24834                                  ; PARSELINE takes an MSDOS command line and maps it into a UNIX-style
 24835                                  ; argv[argvcnt] array. The most important difference between this array and
 24836                                  ; the tradition UNIX format is the extra cparse information included with
 24837                                  ; each argument element.
 24838                                  ;---------------
 24839                                  ; ENTRY:
 24840                                  ;	BL	     special delimiter for cparse -- not implemented)
 24841                                  ;---------------
 24842                                  ; EXIT:
 24843                                  ;	CF	    set if error
 24844                                  ;	AL	    error code (carry set). Note AH clobbered in any event.
 24845                                  ;	argv[]	    array of cparse flags and pointers to arguments
 24846                                  ;	argvcnt     argument count
 24847                                  ;---------------
 24848                                  ; NOTE(S):
 24849                                  ;	*   BL (special delimiter) is ignored, for now (set to space).
 24850                                  ;	*   Parseflags record contains cparse flags, as follows:
 24851                                  ;		sw_flag 	--	was this arg a switch?
 24852                                  ;		wildcard	--	whether or not it contained a * or ?
 24853                                  ;		path_sep	--	maybe it was a pathname
 24854                                  ;		unused		--	for future expansion
 24855                                  ;		special_delim	--	was there an initial special delimiter?
 24856                                  ;	*   argv[] and argvcnt are undefined if CF/AL indicates an error.
 24857                                  ;	*   Relationship between input, cparse output, and comtail can be
 24858                                  ;	    found in the following chart. Despite the claim of the cparse
 24859                                  ;	    documentation that, "Token buffer always starts d: for non switch
 24860                                  ;	    tokens", such is not the case (see column two, row two).
 24861                                  ;	    Similarly, [STARTEL] is not null when the command line is one of
 24862                                  ;	    the forms, "d:", "d:\", or "d:/". In fact, *STARTEL (i.e., what
 24863                                  ;	    STARTEL addresses) will be null. This is clearly just a
 24864                                  ;	    documentation error.
 24865                                  ;	*   cparse also returns a switch code in BP for each switch it
 24866                                  ;	    recognizes on the command line.
 24867                                  ;	*   arglen for each token does NOT include the terminating null.
 24868                                  ;	*   Finally, note that interesting constructions like 'foodir/*.exe'
 24869                                  ;	    parse as three separate tokens, and the asterisk is NOT a wildcard.
 24870                                  ;	    For example, 'for %i in (foodir/*.exe) do echo %i' will first
 24871                                  ;	    echo 'foodir', then '*', then '.exe'. Using cparse for command-
 24872                                  ;	    line parsing may result in slightly different behavior than
 24873                                  ;	    previously observed with the old COMMAND.COM command-line parser.
 24874                                  ;
 24875                                  ;	    Input		    Cparse		Command Line (80H)
 24876                                  ;	\alan\foo.bat		c:\alan\foo.bat 	\alan\foo.bat
 24877                                  ;	alan\foo.bat		alan\foo.bat		alan\foo.bat
 24878                                  ;	foo.bat 		foo.bat 		foo.bat
 24879                                  ;	c:\alan\foo.bat 	c:\alan\foo.bat 	c:\alan\foo.bat
 24880                                  ;	c:alan\foo.bat		c:alan\foo.bat		c:alan\foo.bat
 24881                                  ;	c:foo.bat		c:foo.bat		c:foo.bat
 24882                                  
 24883                                  ; =============== S U B	R O U T	I N E =======================================
 24884                                  
 24885                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23D0h
 24886                                  
 24887                                  ; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24888                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 319Bh
 24889                                  
 24890                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 24891                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3745h
 24892                                  
 24893                                  ; 27/07/2024 - Retro DOS v4.0-v4.1-v4.2-v5.0 COMMAND.COM (PARSELINE)
 24894                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 35F5h
 24895                                  
 24896                                  PARSELINE:
 24897 00003589 50                      	push	ax			; most of these are clobbered
 24898 0000358A 53                      	push	bx			; by cparse...
 24899 0000358B 51                      	push	cx
 24900 0000358C 52                      	push	dx
 24901 0000358D 57                      	push	di
 24902 0000358E 56                      	push	si
 24903 0000358F 9C                      	pushf
 24904                                  	;mov	byte [cpyflag],0  ; Turn "CPARSE called from COPY flag" off
 24905 00003590 C706[ADA8]FFFF          	mov	word [LASTARG],-1 ; last argument at which to accumulate
 24906 00003596 31C0                    	xor	ax,ax
 24907                                  	;;mov	cx,1348
 24908                                  	; 27/07/2024
 24909                                  	;mov	cx,1092  ; PCDOS 7.1 COMMAND.COM
 24910 00003598 B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092
 24911 0000359B A2[3BA1]                	mov	[cpyflag],al ; 0 ; 27/07/2024
 24912 0000359E BF[E7A2]                	mov	di,ARG
 24913 000035A1 F3AA                    	rep	stosb
 24914                                  	;mov	word [ARGBUF_PTR],ARG_ARGBUF
 24915 000035A3 C706[2BA8][ABA5]        	mov	word [ARGBUF_PTR],ARG+ARG_UNIT.argbuf
 24916                                  	;mov	word [ARG_ARGSWINFO],0 ; switch information, and info to date
 24917                                  	;mov	word [ARG+ARG_UNIT.argswinfo],0
 24918 000035A9 A3[A9A5]                	mov	[ARG+ARG_UNIT.argswinfo],ax ; 0 ; 27/07/2024
 24919                                  	;mov	word [ARG_ARGVCNT],0 ; initialize argvcnt/argv[]
 24920                                  	;mov	word [ARG+ARG_UNIT.argvcnt],0
 24921 000035AC A3[A7A5]                	mov	[ARG+ARG_UNIT.argvcnt],ax ; 0 ; 27/07/2024 
 24922 000035AF BE[769C]                	mov	si,COMBUF+2	; prescan leaves cooked input in combuf
 24923                                  
 24924                                  ; This next section of code (up to pcont:)  makes sure that si is set up for
 24925                                  ; parsing. It should point at COMBUF if FORFLAG is set and arg.argforcombuf
 24926                                  ; otherwise. This is done so that commands can get arg pointers into their
 24927                                  ; original command line (or an exact copy of it) in arg_ocomptr.
 24928                                  ; Arg.argforcombuf is used so that the for loop processor will always be able
 24929                                  ; to get a hold of its original command line; even after COMBUF is blasted by
 24930                                  ; the command to be repeated or the transient part of command has been
 24931                                  ; reloaded.
 24932                                  
 24933 000035B2 1E                      	push	ds
 24934 000035B3 8E1E[159E]              	mov	ds,[RESSEG]
 24935                                  	;cmp	byte [ForFlag],0
 24936 000035B7 3806[4902]              	cmp	[ForFlag],al ; 0 ; 27/07/2024
 24937 000035BB 1F                      	pop	ds
 24938 000035BC 7510                    	jnz	short PCONT
 24939                                  	;mov	di,ARG_ARGFORCOMBUF
 24940 000035BE BF[ABA6]                	mov	di,ARG+ARG_UNIT.argforcombuf
 24941 000035C1 30ED                    	xor	ch,ch
 24942 000035C3 8A0E[759C]              	mov	cl,[COMBUF+1]
 24943 000035C7 FEC1                    	inc	cl
 24944 000035C9 F3A4                    	rep	movsb
 24945                                  	;mov	si,ARG_ARGFORCOMBUF
 24946 000035CB BE[ABA6]                	mov	si,ARG+ARG_UNIT.argforcombuf
 24947                                  PCONT:
 24948 000035CE BF[2DA8]                	mov	di,TPBUF	; destination is temporary token buffer
 24949 000035D1 B320                    	mov	bl,' '		; no special delimiter, for now
 24950                                  PARSELOOP:
 24951 000035D3 8936[AFA8]              	mov	[COMPTR],si	; save ptr into original command buffer
 24952 000035D7 31ED                    	xor	bp,bp		; switch information put here by cparse
 24953 000035D9 C606[C9A2]00            	mov	byte [expand_star],0 ; don't expand *'s to ?'s
 24954 000035DE E84FF5                  	call	scanoff		; skip leading blanks...
 24955 000035E1 E8B312                  	call	cparse		; byte off a token (args in SI, DI, BL)
 24956 000035E4 730B                    	jnb	short MORE_PRSE
 24957 000035E6 09ED                    	or	bp,bp		; Check for trailing switch character
 24958 000035E8 7403                    	jz	short PARSEDONE
 24959 000035EA E81700                  	call	newarg		; We hit CR but BP is non-zero. The
 24960                                  				;   typical cause of this is that a
 24961                                  				;   switch char IMMEDIATELY preceeds
 24962                                  				;   the CR. We have an argument, but it
 24963                                  				;   is sort of an error.
 24964                                  	;jmp	short PARSEDONE	; We're done (found the CR).
 24965                                  	; 01/03/2023
 24966                                  PARSEDONE:
 24967 000035ED 9D                      	popf
 24968 000035EE F8                      	clc
 24969 000035EF EB0C                    	jmp	short PARSE_EXIT
 24970                                  
 24971                                  MORE_PRSE:
 24972 000035F1 C606[3BA1]02            	mov	byte [cpyflag],2
 24973                                  				; tell CPARSE that 1st token is done
 24974 000035F6 E80B00                  	call	newarg		; add to argv array (CX has char count)
 24975 000035F9 73D8                    	jnb	short PARSELOOP	; was everything OK?
 24976                                  	;jmp	short PARSE_ERROR ; NO, it wasn't -- bug out (CF set)
 24977                                  	; 01/03/2023
 24978                                  ;PARSEDONE:
 24979                                  	;popf
 24980                                  	;clc
 24981                                  	;jmp	short PARSE_EXIT
 24982                                  
 24983                                  PARSE_ERROR:			; error entry (er, exit) point
 24984 000035FB 9D                      	popf
 24985 000035FC F9                      	stc
 24986                                  PARSE_EXIT:			; depend on not changing CF
 24987 000035FD 5E                      	pop	si
 24988 000035FE 5F                      	pop	di
 24989 000035FF 5A                      	pop	dx
 24990 00003600 59                      	pop	cx
 24991 00003601 5B                      	pop	bx
 24992 00003602 58                      	pop	ax
 24993 00003603 C3                      	retn
 24994                                  
 24995                                  ; =============== S U B	R O U T	I N E =======================================
 24996                                  
 24997                                  ; NEWARG adds the supplied argstring and cparse data to arg.argv[].
 24998                                  ;
 24999                                  ; ENTRY:
 25000                                  ;   BH			argflags
 25001                                  ;   CX			character count in argstring
 25002                                  ;   DI			pointer to argstring
 25003                                  ;   comptr		ptr to starting loc of current token in original command
 25004                                  ;   [STARTEL]		cparse's answer to where the last element starts
 25005                                  ; EXIT:
 25006                                  ;   argbufptr		points to next free section of argbuffer
 25007                                  ;   arg.argbuf		contains null-terminated argument strings
 25008                                  ;   arg.argvcnt 	argument count
 25009                                  ;   arg.argv[]		array of flags and pointers
 25010                                  ;   arg.arg_ocomptr	ptr to starting loc of current token in original command
 25011                                  ;   CF			set if error
 25012                                  ;   AL			carry set:  error code; otherwise, zero
 25013                                  
 25014                                  	; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25015                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25016                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM 
 25017                                  	;	     & Retro DOS v4.2 COMMAND.COM (2024 modification)
 25018                                  newarg:
 25019 00003604 53                      	push	bx
 25020 00003605 51                      	push	cx
 25021 00003606 52                      	push	dx
 25022 00003607 57                      	push	di
 25023 00003608 56                      	push	si
 25024 00003609 9C                      	pushf
 25025 0000360A E86200                  	call	arg_switch		; if it's a switch, record switch info
 25026                                  					; LEAVE SWITCH ON COMMAND LINE!!
 25027                                  	;;;jc	short newarg_done 	; previous arg's switches -- and leave
 25028                                  
 25029                                  	;cmp	word [ARG_ARGVCNT],64	; check to ensure we've not
 25030 0000360D 833E[A7A5]40            	cmp	word [ARG+ARG_UNIT.argvcnt],ARGMAX ; 64
 25031 00003612 7D50                    	jge	short to_many_args	; exceeded array limits
 25032 00003614 88FE                    	mov	dh,bh			
 25033                                  	;mov	bx,[ARG_ARGVCNT]	; save argflags	
 25034 00003616 8B1E[A7A5]              	mov	bx,[ARG+ARG_UNIT.argvcnt] ; argv[argvcnt++] = arg data
 25035                                  	;inc	word [ARG_ARGVCNT]
 25036 0000361A FF06[A7A5]              	inc	word [ARG+ARG_UNIT.argvcnt]
 25037                                  	;mov	ax,ARG_ARGV
 25038 0000361E B8[E7A2]                	mov	ax,ARG+ARG_UNIT.argv
 25039 00003621 E87E00                  	call	argv_calc		; convert offset to pointer
 25040                                  	;mov	[BX].argsw_word,0 	; no switch information, yet...
 25041                                  	;mov	word [bx+7],0
 25042 00003624 C747070000              	mov	word [bx+ARGV_ELE.argsw_word],0
 25043                                  	;mov	[BX].arglen,CX		; argv[argvcnt].arglen = arg length
 25044                                  	;mov	[bx+5],cx
 25045 00003629 894F05                  	mov	[bx+ARGV_ELE.arglen],cx 
 25046                                  	;mov	[BX].argflags,DH 	; argv[argvcnt].argflags = cparse flags
 25047                                  	;mov	[bx+2],dh
 25048 0000362C 887702                  	mov	[bx+ARGV_ELE.argflags],dh
 25049 0000362F 8B36[2BA8]              	mov	si,[ARGBUF_PTR]
 25050                                  	;mov	[BX].argpointer,SI 	; argv[argvcnt].argpointer = [argbufptr]
 25051                                  	;mov	[bx+ARGV_ELE.argpointer],si
 25052 00003633 8937                    	mov	[bx],si			
 25053 00003635 0336[8DA2]              	add	si,[STARTEL]		; save startel from new location
 25054 00003639 29FE                    	sub	si,di			; form pointer into argbuf
 25055                                  	;mov	[BX].argstartel,SI ; argv[argvcnt].argstartel = new [STARTEL]
 25056                                  	;mov	[bx+3],si
 25057 0000363B 897703                  	mov	[bx+ARGV_ELE.argstartel],si
 25058 0000363E 8B36[AFA8]              	mov	si,[COMPTR]
 25059                                  	;mov	[BX].arg_ocomptr,si ; arg_ocomptr = ptr into original com line
 25060                                  	;mov	[bx+9],si
 25061 00003642 897709                  	mov	[bx+ARGV_ELE.arg_ocomptr],si
 25062 00003645 89FE                    	mov	si,di			; now save argstring in argbuffer
 25063 00003647 8B3E[2BA8]              	mov	di,[ARGBUF_PTR]		; load the argbuf pointer and make
 25064                                  
 25065                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25066                                  ; PCDOS 7.1 COMMAND.COM
 25067                                  %if 0
 25068                                  	add	di,cx			; sure we're not about to run off
 25069                                  	;cmp	DI,OFFSET TRANGROUP:arg.argbuf+ARGBLEN-1
 25070                                  	;;cmp	di,ARG_ARGBUF+255
 25071                                  	;cmp	di,ARG+ARG_UNIT.argbuf+127
 25072                                  	cmp	di,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25073                                  	jge	short buf_oflow		; the end of the buffer (plus null byte)
 25074                                  	sub	di,cx
 25075                                  %else
 25076                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25077                                  	;mov	bx,ARG_ARGBUF+127
 25078 0000364B BB[2AA6]                	mov	bx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25079 0000364E 29FB                    	sub	bx,di	; sure we're not about to run off
 25080 00003650 39CB                    	cmp	bx,cx
 25081 00003652 7302                    	jnb	short newarg_@
 25082 00003654 89D9                    	mov	cx,bx	
 25083                                  %endif
 25084                                  
 25085                                  newarg_@:	; 27/07/2024
 25086 00003656 FC                      	cld
 25087 00003657 F3A4                    	rep	movsb
 25088 00003659 B000                    	mov	al,ANULL ; 0		; tack a null byte on the end
 25089 0000365B AA                      	stosb
 25090 0000365C 893E[2BA8]              	mov	[ARGBUF_PTR],di		; update argbufptr after copy
 25091                                  newarg_done:
 25092 00003660 9D                      	popf
 25093 00003661 F8                      	clc
 25094 00003662 EB05                    	jmp	short newarg_exit
 25095                                  
 25096                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25097                                  ; PCDOS 7.1 COMMAND.COM
 25098                                  %if 0
 25099                                  to_many_args:
 25100                                  	mov	ax,1
 25101                                  	jmp	short newarg_error
 25102                                  buf_oflow:
 25103                                  	mov	ax,2
 25104                                  %else
 25105                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 25106                                  ;buf_oflow:
 25107                                  ;	; 27/07/2024
 25108                                  ;	; PCDOS 7.1 COMMAND.COM
 25109                                  ;	sub	di,cx
 25110                                  ;	;mov	cx,ARG_ARGBUF+7Fh
 25111                                  ;	mov	cx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 25112                                  ;	sub	cx,di
 25113                                  ;	jmp     short newarg_@
 25114                                  to_many_args:
 25115 00003664 B80100                  	mov	ax,1
 25116                                  %endif
 25117                                  
 25118                                  newarg_error:
 25119 00003667 9D                      	popf
 25120 00003668 F9                      	stc
 25121                                  newarg_exit:
 25122 00003669 5E                      	pop	si
 25123 0000366A 5F                      	pop	di
 25124 0000366B 5A                      	pop	dx
 25125 0000366C 59                      	pop	cx
 25126 0000366D 5B                      	pop	bx
 25127 0000366E C3                      	retn
 25128                                  
 25129                                  ; =============== S U B	R O U T	I N E =======================================
 25130                                  
 25131                                  ; ARG_SWITCH decides if an argument might really be a switch. In the
 25132                                  ; event that it is, and we can recognize
 25133                                  ;
 25134                                  ; ENTRY:
 25135                                  ;   As in <newarg>.
 25136                                  ; EXIT:
 25137                                  ;   CF	    --	    clear (wasn't a switch); set (was a switch)
 25138                                  ; NOTE(S):
 25139                                  ;   *	The mechanism mapping a switch into a bit-value depends entirely
 25140                                  ;	on the order of definition in the <switch_list> variable and the
 25141                                  ;	values chosen to define the bits in CMDT:COMEQU.ASM. Change either
 25142                                  ;	<switch_list> or the definitions in CMDT:COMEQU.ASM -- and rewrite
 25143                                  ;	this mechanism. This code taken from CMDT:TCODE.ASM.
 25144                                  ;   *	The <switch_list> declared below is redundant to one declared in
 25145                                  ;	TDATA.ASM, and used in TCODE.ASM.
 25146                                  ;   *	An ugly routine.
 25147                                  
 25148                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 25149                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25150                                  arg_switch:
 25151 0000366F 50                      	push	ax
 25152 00003670 53                      	push	bx
 25153 00003671 51                      	push	cx
 25154 00003672 57                      	push	di
 25155 00003673 9C                      	pushf
 25156 00003674 F6C701                  	test	bh,1 ; sw_flag		; is it a switch? (preserve flag word)
 25157 00003677 741C                    	jz	short arg_no_switch0
 25158 00003679 833E[ADA8]FF            	cmp	word [LASTARG],-1 	; have we encountered any REAL args yet?
 25159 0000367E 741B                    	je	short arg_no_switch1 	; no, so leading switches don't matter
 25160 00003680 8B1E[ADA8]              	mov	bx,[LASTARG]		; yes, add switch info to last REAL arg
 25161                                  	;mov	ax,offset TRANGROUP:arg.argv
 25162                                  	;mov	ax,ARG_ARGV
 25163 00003684 B8[E7A2]                	mov	ax,ARG+ARG_UNIT.argv  ; ARG+0
 25164 00003687 E81800                  	call	argv_calc
 25165                                  	;or	[BX].argsw_word,BP
 25166                                  	;or	[bx+7],bp
 25167 0000368A 096F07                  	or	[bx+ARGV_ELE.argsw_word],bp
 25168                                  	;or	arg.argswinfo,BP
 25169                                  	;or	[ARG_ARGSWINFO],bp
 25170 0000368D 092E[A9A5]              	or	[ARG+ARG_UNIT.argswinfo],bp
 25171                                  arg_yes_switch:
 25172 00003691 9D                      	popf
 25173 00003692 F9                      	stc
 25174 00003693 EB08                    	jmp	short arg_switch_exit
 25175                                  
 25176                                  arg_no_switch0:
 25177                                  	;mov	ax,[ARG_ARGVCNT]
 25178 00003695 A1[A7A5]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 25179 00003698 A3[ADA8]                	mov	[LASTARG],ax
 25180                                  arg_no_switch1:
 25181 0000369B 9D                      	popf
 25182 0000369C F8                      	clc
 25183                                  arg_switch_exit:
 25184 0000369D 5F                      	pop	di
 25185 0000369E 59                      	pop	cx
 25186 0000369F 5B                      	pop	bx
 25187 000036A0 58                      	pop	ax
 25188 000036A1 C3                      	retn
 25189                                  
 25190                                  ; =============== S U B	R O U T	I N E =======================================
 25191                                  
 25192                                  ; ARGV_CALC maps an array index into a byte-offset from the base of
 25193                                  ; the supplied array.  Method used for computing the address is:
 25194                                  ;	Array Index * Array Elt Size + Base Addr = Elt Addr
 25195                                  ; ENTRY:
 25196                                  ;   AX	    --	    base of array
 25197                                  ;   BX	    --	    array index
 25198                                  ; EXIT:
 25199                                  ;   BX	    --	    byte offset
 25200                                  
 25201                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 25202                                  argv_calc:
 25203 000036A2 50                      	push	ax		; Save base
 25204 000036A3 88D8                    	mov	al,bl		; al = array index
 25205                                  	;mov	bl,11
 25206 000036A5 B30B                    	mov	bl,ARGV_ELE.SIZE ; bl = size of an argv element
 25207 000036A7 F6E3                    	mul	bl		; ax = base offset
 25208 000036A9 5B                      	pop	bx		; Get base
 25209 000036AA 01D8                    	add	ax,bx		; Add in base offset
 25210 000036AC 93                      	xchg	ax,bx		; Restore ax and put byte offset in bx
 25211 000036AD C3                      	retn
 25212                                  
 25213                                  ; ---------------------------------------------------------------------------
 25214                                  	
 25215                                  	;db 0Ah dup(0)
 25216                                  	;times 10 db 0
 25217                                  
 25218 000036AE 90<rep 2h>              align 16
 25219                                  
 25220                                  ;============================================================================
 25221                                  ; PATH1.ASM, MSDOS 6.0, 1991
 25222                                  ;============================================================================
 25223                                  ; 03/10/2018 - Retro DOS v3.0
 25224                                  
 25225                                  ;----------------------------------------------------------------------------
 25226                                  ;    PATH.ASM contains the routines to perform pathname incovation. Path and
 25227                                  ;    Parse share a temporary buffer and argv[] definitions. <Path_Search>,
 25228                                  ;    given a pathname, attempts to find a corresponding executable or batch
 25229                                  ;    file on disk. Directories specified in the user's search path will be
 25230                                  ;    searched for a matching file, if a match is not found in the current
 25231                                  ;    directory and if the pathname is actually only an MSDOS filename.
 25232                                  ;    <Path_Search> assumes that the parsed command name can be found in
 25233                                  ;    argv[0] -- in other words, <Parseline> should be executed prior to
 25234                                  ;    <Path_Search>. Alternatively, the command name and appropriate
 25235                                  ;    information could be placed in argv[0], or <Path_Search> could be
 25236                                  ;    (easily) modified to make no assumptions about where its input is found.
 25237                                  ;    Please find enclosed yet another important routine, <Save_Args>, which
 25238                                  ;    places the entire arg/argv[]/argbuf structure on a piece of newly
 25239                                  ;    allocated memory. This is handy for for-loop processing, and anything
 25240                                  ;    else that wants to save the whole shebang and then process other command
 25241                                  ;    lines.
 25242                                  ;
 25243                                  ; Alan L, OS/MSDOS				    August 15, 1983
 25244                                  ;
 25245                                  ; ENTRY:
 25246                                  ;   <Path_Search>:	    argv[0].
 25247                                  ;   <Save_Args>:	    bytes to allocate in addition to arg structure
 25248                                  ; EXIT:
 25249                                  ;   <Path_Search>:	    success flag, best pathname match in EXECPATH.
 25250                                  ;   <Save_Args>:	    success flag, segment address of new memory
 25251                                  ; NOTE(S):
 25252                                  ;   *	<Argv_calc> handily turns an array index into an absolute pointer.
 25253                                  ;	The computation depends on the size of an argv[] element (arg_ele).
 25254                                  ;   *	<Parseline> calls <cparse> for chunks of the command line. <Cparse>
 25255                                  ;	does not function as specified; see <Parseline> for more details.
 25256                                  ;   *	<Parseline> now knows about the flags the internals of COMMAND.COM
 25257                                  ;	need to know about. This extra information is stored in a switch_flag
 25258                                  ;	word with each command-line argument; the switches themselves will not
 25259                                  ;	appear in the resulting arg structure.
 25260                                  ;   *	With the exception of CARRY, flags are generally preserved across calls.
 25261                                  ;----------------------------------------------------------------------------
 25262                                  
 25263                                  ; =============== S U B	R O U T	I N E =======================================
 25264                                  
 25265                                  ; PATH_SEARCH tries to find the file it's given, somewhere. An initial value
 25266                                  ; of *argv[0].argstartel == 0 implies that there is no command (empty line
 25267                                  ; or 'd:' or 'd:/'). This check is done in strip; otherwise, strip formats
 25268                                  ; the filename/pathname into tpbuf. Search(tpbuf) is executed to see if we
 25269                                  ; have a match, either in the current working directory if we were handed
 25270                                  ; a filename, or in the specified directory, given a pathname. If this call
 25271                                  ; fails, and we were given a pathname, then Path_Search fails. Otherwise,
 25272                                  ; Path_Crunch is repeatedly invoked on tpbuf[STARTEL] (if there's a drive
 25273                                  ; prefix, we want to skip it) for each pathstring in userpath. Success on
 25274                                  ; either the first invocation of search or on one of the succeeding calls
 25275                                  ; sets up the appropriate information for copying the successful pathname
 25276                                  ; prefix (if any) into the result buffer, followed by the successful filename
 25277                                  ; match (from [search_best_buf]). The result is returned in in EXECPATH.
 25278                                  ;
 25279                                  ; ENTRY:
 25280                                  ;   argv[0]		--	command name and associated information
 25281                                  ; EXIT:
 25282                                  ;   AX			--	non-zero indicates type of file found
 25283                                  ;   EXECPATH		--	successful pathname (AX non-zero)
 25284                                  ; NOTE(S):
 25285                                  ;   1)	Uses the temporary buffer, tpbuf, from the parse routines.
 25286                                  ;   2)	Some files are more equal than others.	See search: for rankings.
 25287                                  ;   3)	Path_Search terminates as soon as a call to search succeeds, even
 25288                                  ;	if search returns an .exe or .bat.
 25289                                  ;   5)	Clobbers dma address.
 25290                                  
 25291                                  PBUFLEN 	EQU	128		; length of EXECPATH
 25292                                  PATH_SEP_CHAR	EQU	';'
 25293                                  
 25294                                  ;parseflags RECORD special_delim:1, unused:4, path_sep:1, wildcard:1, sw_flag:1
 25295                                  
 25296                                  	;special_delim equ 128
 25297                                  	;path_sep equ 4
 25298                                  	;wildcard equ 2
 25299                                  	;sw_flag  equ 1
 25300                                  
 25301                                  ;----------------------------------------------------------------------------
 25302                                  
 25303                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2510h
 25304                                  
 25305                                  ; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25306                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 32D1h
 25307                                  
 25308                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25309                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 387Bh
 25310                                  
 25311                                  path_search:
 25312 000036B0 53                      	push	bx
 25313 000036B1 51                      	push	cx
 25314 000036B2 52                      	push	dx		; could use a "stack 'em" instruction
 25315 000036B3 56                      	push	si
 25316 000036B4 57                      	push	di
 25317 000036B5 55                      	push	bp
 25318 000036B6 9C                      	pushf
 25319                                  
 25320                                  	;test	ds:arg.argv[0].argflags, (MASK wildcard) + (MASK sw_flag)
 25321                                  	;test	byte [ARGV0_ARG_FLAGS],3
 25322 000036B7 F606[E9A2]03            	test	byte [ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag
 25323 000036BC 7403                    	jz	short path_search_ok
 25324                                  path_failure_jmp:
 25325 000036BE E9C100                  	jmp	path_failure	; ambiguous commands not allowed
 25326                                  
 25327                                  path_search_ok:
 25328 000036C1 E85201                  	call	STORE_PCHAR	; figure out the pathname separator
 25329 000036C4 BA[B1A8]                	mov	dx,FBUF		; clobber old dma value with
 25330 000036C7 B8001A                  	mov	ax,Set_DMA*256 ; 1A00h ; a pointer to our dma buffer
 25331 000036CA CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 25332                                  			; DS:DX	-> disk	transfer buffer
 25333 000036CC 06                      	push	es
 25334 000036CD E88FF1                  	call	find_path	; get a handle (ES:DI) on user path
 25335 000036D0 8C06[DCA8]              	mov	[pathinfo+0],es	; and squirrel it away
 25336 000036D4 893E[DEA8]              	mov	[pathinfo+2],di	; "old" pathstring pointer
 25337 000036D8 893E[E0A8]              	mov	[pathinfo+4],di	; "new" pathstring pointer
 25338 000036DC 07                      	pop	es
 25339                                  	
 25340 000036DD BB8000                  	mov	bx,PBUFLEN ; 128 ; copy/format argv[0] into temp buffer
 25341 000036E0 BE[3D9D]                	mov	si,EXECPATH
 25342 000036E3 E88002                  	call	STRIP
 25343 000036E6 72D6                    	jc	short path_failure_jmp ; if possible, of course
 25344                                  		
 25345 000036E8 89F2                    	mov	dx,si		; search (EXECPATH, error_message)
 25346 000036EA C706[31A9][4F92]        	mov	word [search_error],baddrv_ptr
 25347 000036F0 E89F01                  	call	PSEARCH		; must do at least one search
 25348 000036F3 09C0                    	or	ax,ax		; find anything?
 25349 000036F5 7469                    	jz	short path_noinit
 25350                                  				; failure ... search farther	
 25351 000036F7 89C5                    	mov	bp,ax		; success... save filetype code	
 25352 000036F9 BF[3D9D]                	mov	di,EXECPATH
 25353                                  	;mov	si,ds:arg.argv[0].argpointer
 25354                                  	;mov	si,[ARG_ARGV]
 25355 000036FC 8B36[E7A2]              	mov	si,[ARG+ARGV_ELE.argpointer]
 25356                                  	;mov	cx,ds:arg.argv[0].argstartel
 25357                                  	;mov	cx,[ARGV0_ARGSTARTEL]
 25358 00003700 8B0E[EAA2]              	mov	cx,[ARG+ARGV_ELE.argstartel]
 25359 00003704 29F1                    	sub	cx,si		; compute prefix bytes to copy
 25360                                  
 25361                                  ; We have the number of bytes in the prefix (up to the final component).
 25362                                  ; We need to form the complete pathname including leading drive and current
 25363                                  ; directory.
 25364                                  ;
 25365                                  ; Is there a drive letter present?
 25366                                  
 25367 00003706 B43A                    	mov	ah,':'
 25368 00003708 83F902                  	cmp	cx,2		; room for drive letter?
 25369 0000370B 7205                    	jb	short adddrive	; no, stick it in
 25370 0000370D 386401                  	cmp	[si+1],	ah	; colon present?
 25371 00003710 7408                    	je	short movedrive	; yes, just move it
 25372                                  adddrive:
 25373 00003712 A0[299E]                	mov	al,[CURDRV]	; get current drive
 25374 00003715 0441                    	add	al,'A'		; convert to uppercase letter
 25375 00003717 AB                      	stosw			; store d:
 25376 00003718 EB05                    	jmp	short checkpath
 25377                                  
 25378                                  movedrive:
 25379 0000371A AD                      	lodsw			; move d:
 25380 0000371B AB                      	stosw
 25381 0000371C 83E902                  	sub	cx,2		; 2 bytes less to move
 25382                                  checkpath:
 25383 0000371F 0C20                    	or	al,20h
 25384 00003721 88C2                    	mov	dl,al		
 25385                                  	;sub	dl,60h
 25386 00003723 80EA60                  	sub	dl,'a'-1	; convert to 1-based for current dir
 25387                                  
 25388                                  ; Stick in beginning path char
 25389                                  
 25390 00003726 A0[E2A8]                	mov	al,[psep_char]
 25391 00003729 AA                      	stosb
 25392                                  
 25393                                  ; Is there a leading /? If so, then no current dir copy is necessary.
 25394                                  ; Otherwise, get current dir for DL.
 25395                                  
 25396 0000372A 83F901                  	cmp	cx,1		; is there room for path char?
 25397 0000372D 720A                    	jb	short addpath	; no, go add path
 25398 0000372F AC                      	lodsb
 25399 00003730 49                      	dec	cx
 25400 00003731 3A06[E2A8]              	cmp	al,[psep_char]	; is there a path separator?
 25401 00003735 741C                    	je	short movepath	; yes, go move remainder of path
 25402 00003737 41                      	inc	cx
 25403 00003738 4E                      	dec	si		; undo the lodsb
 25404                                  addpath:
 25405 00003739 56                      	push	si
 25406 0000373A 89FE                    	mov	si,di		; remainder of buffer
 25407 0000373C B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25408 0000373F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25409                                  			; DL = drive (0=default,1=A,etc.)
 25410                                  			; DS:SI	points to 64-byte buffer area
 25411                                  
 25412                                  ; The previous current dir will succeed a previous find_first already worked.
 25413                                  ;
 25414                                  ; Find end of string.
 25415                                  
 25416 00003741 89F7                    	mov	di,si
 25417 00003743 5E                      	pop	si
 25418 00003744 A0[E2A8]                	mov	al,[psep_char]
 25419 00003747 803D00                  	cmp	byte [di],0	; root (empty dir string)?
 25420 0000374A 7407                    	jz	short movepath	; yes, no need for path char
 25421                                  scanend:
 25422                                  	;cmp	byte [di],0	; end of string?
 25423                                  	;jz	short foundend
 25424                                  	;inc	di
 25425                                  	;jmp	short scanend
 25426                                  	; 18/03/2023 - Retro DOS v4.0 COMMAND.COM
 25427 0000374C 47                      	inc	di
 25428 0000374D 803D00                  	cmp	byte [di],0
 25429 00003750 75FA                    	jnz	short scanend
 25430                                  
 25431                                  ; Stick in a trailing path char.
 25432                                  
 25433                                  foundend:
 25434 00003752 AA                      	stosb
 25435                                  
 25436                                  ; Move remaining part of path. Skip leading path char if present.
 25437                                  
 25438                                  movepath:
 25439 00003753 3804                    	cmp	[si],al		; first char a path char?
 25440 00003755 7502                    	jne	short copypath
 25441                                  	; 26/04/2023
 25442 00003757 46                      	inc	si		; move past leading char
 25443 00003758 49                      	dec	cx		; drop from count
 25444                                  copypath:
 25445 00003759 E302                    	jcxz	_copydone	; no chars to move!	
 25446 0000375B F3A4                    	rep	movsb
 25447                                  _copydone:
 25448 0000375D E9A100                  	jmp	path_success
 25449                                  				; run off and form complete pathname
 25450                                  path_noinit:
 25451                                  	;test	ds:arg.argv[0].argflags, MASK path_sep
 25452                                  	;test	byte [ARGV0_ARG_FLAGS],4
 25453 00003760 F606[E9A2]04            	test	byte [ARG+ARGV_ELE.argflags],4 ; path_sep
 25454 00003765 751B                    	jnz	short path_failure
 25455                                  				; complete pathname specified ==> fail
 25456                                  	;mov	bh,';'
 25457 00003767 B73B                    	mov	bh,PATH_SEP_CHAR
 25458                                  				; semicolon terminates pathstring
 25459                                  	;mov	dx,ds:arg.argv[0].argstartel
 25460                                  				; this is where the last element starts
 25461                                  	;mov	dx,[ARGV0_ARGSTARTEL]
 25462 00003769 8B16[EAA2]              	mov	dx,[ARG+ARGV_ELE.argstartel]
 25463                                  	;sub	dx,ds:arg.argv[0].argpointer
 25464                                  				; form pointer into EXECPATH,
 25465                                  	;sub	dx,[ARG_ARGV]
 25466 0000376D 2B16[E7A2]              	sub	dx,[ARG+ARGV_ELE.argpointer]
 25467 00003771 81C2[3D9D]              	add	dx,EXECPATH	; skipping over drive spec, if any
 25468                                  path_loop:
 25469 00003775 E8AD00                  	call	path_crunch	; pcrunch (EXECPATH, pathinfo)
 25470 00003778 89C5                    	mov	bp,ax		; save filetype code
 25471 0000377A 9F                      	lahf			; save flags, just in case
 25472 0000377B 09ED                    	or	bp,bp		; did path_crunch find anything?		
 25473 0000377D 7508                    	jnz	short path_found 
 25474 0000377F 9E                      	sahf			; see? needed those flags, after all!
 25475 00003780 73F3                    	jnc	short path_loop	; is there anything left to the path?
 25476                                  path_failure:
 25477 00003782 31C0                    	xor	ax,ax
 25478 00003784 E98700                  	jmp	path_exit
 25479                                  
 25480                                  path_found:				; pathinfo[] points to winner
 25481 00003787 BF[3D9D]                	mov	di,EXECPATH
 25482                                  	;mov	cx,pathinfo[4] 
 25483 0000378A 8B0E[E0A8]              	mov	cx,[pathinfo+4]	; "new" pointer -- end of string
 25484                                  	;mov	si,pathinfo[2]
 25485 0000378E 8B36[DEA8]              	mov	si,[pathinfo+2]	; "old" pointer -- beginning of string
 25486                                  
 25487                                  ;	BAS Nov 20/84
 25488                                  ;   Look at the pathname and expand . and .. if they are the first element
 25489                                  ;   in the pathname (after the drive letter)
 25490                                  
 25491 00003792 06                      	push	es
 25492                                  	;push	pathinfo[0]
 25493 00003793 FF36[DCA8]              	push	word [pathinfo+0]
 25494 00003797 07                      	pop	es
 25495                                  ;SR;
 25496                                  ; Oops! Gets fooled if path= \;..
 25497                                  ; We should also check if a drive letter is really present
 25498                                  ;
 25499 00003798 26807C022E              	cmp	byte [es:si+2],'.'
 25500                                  				; Look for Current dir at start of path
 25501 0000379D 7534                    	jne	short path_cpy
 25502                                  
 25503                                  	; 18/03/2023
 25504                                  	; MSDOS 6.0
 25505 0000379F 26807C013A              	cmp	byte [es:si+1],':'
 25506                                  				; does path have drive letter?
 25507 000037A4 752D                    	jne	short path_cpy	; no, copy the path string
 25508                                  
 25509 000037A6 51                      	push	cx		; Save pointer to end of string
 25510                                  	;mov	al,[es:si]
 25511                                  	;mov	[di],al		; Copy drive letter, :, and root char
 25512                                  	;mov	al,[es:si+1]	; to EXECPATH
 25513                                  	;mov	[di+1],al
 25514                                  	; 05/05/2023
 25515 000037A7 268B04                  	mov	ax,[es:si]
 25516 000037AA 8905                    	mov	[di],ax
 25517 000037AC A0[E2A8]                	mov	al,[psep_char]
 25518 000037AF 884502                  	mov	[di+2],	al
 25519 000037B2 56                      	push	si		; Save pointer to begining of string
 25520 000037B3 268A14                  	mov	dl,[es:si]	; Convert device letter for cur dir
 25521 000037B6 80CA20                  	or	dl,20h
 25522                                  	;sub	dl,60h
 25523 000037B9 80EA60                  	sub	dl,'a'-1
 25524 000037BC 89FE                    	mov	si,di		; pointer to EXECPATH
 25525 000037BE 83C603                  	add	si,3		; Don't wipe out drive and root info
 25526 000037C1 B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25527 000037C4 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25528                                  			; DL = drive (0=default,1=A,etc.)
 25529                                  			; DS:SI	points to 64-byte buffer area
 25530 000037C6 E8F7F9                  	call	dstrlen		; Determine length of present info
 25531 000037C9 01CE                    	add	si,cx		; Don't copy over drive and root info
 25532 000037CB 4E                      	dec	si
 25533 000037CC 89F7                    	mov	di,si		; Point to end of target string
 25534 000037CE 5E                      	pop	si		; Restore pointer to begining of string
 25535 000037CF 83C603                  	add	si,3		; Point past drive letter, :, .
 25536 000037D2 59                      	pop	cx		; Restore pointer to end of string
 25537                                  path_cpy:
 25538 000037D3 07                      	pop	es
 25539 000037D4 29F1                    	sub	cx,si		; yields character count
 25540 000037D6 1E                      	push	ds		; time to switch segments
 25541 000037D7 FF36[DCA8]              	push	word [pathinfo+0]
 25542                                  				; string lives in this segment
 25543 000037DB 1F                      	pop	ds
 25544 000037DC FC                      	cld
 25545                                  
 25546                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25547                                  	; MSDOS 5.0 (& MSDOS 5.0)
 25548                                  	;;rep	movsb ; 3/3/KK	; copy the prefix path into EXECPATH
 25549                                  kloop:
 25550 000037DD AC                      	lodsb			;AN000;  3/3/KK
 25551 000037DE AA                      	stosb			;AN000;  3/3/KK
 25552 000037DF E82FF1                  	call	testkanj	;AN000;  3/3/KK
 25553 000037E2 7410                    	jz	short _notkanj1	;AN000;  3/3/KK
 25554 000037E4 49                      	dec	cx		;AN000;  3/3/KK
 25555 000037E5 E307                    	jcxz	popdone		;AN000;  Ignore boundary error 3/3/KK
 25556 000037E7 A4                      	movsb			;AN000;  3/3/KK
 25557 000037E8 49                      	dec	cx		;AN000;  3/3/KK
 25558 000037E9 83F901                  	cmp	cx,1		;AN000;  One char (the terminator) left ? 3/3/KK
 25559 000037EC 77EF                    	ja	short kloop	;AN000;  no.  3/3/KK
 25560                                  popdone:			;AN000;  3/3/KK
 25561 000037EE 1F                      	pop	ds		;AN000;  Yes ES:DI->terminator, last char is 3/3/KK
 25562 000037EF A0[E2A8]                	mov	al,[psep_char]	;AN000;  KANJI 3/3/KK
 25563 000037F2 EB0C                    	jmp	short path_store
 25564                                  				;AN000;  3/3/KK
 25565                                  _notkanj1:
 25566                                  	; 26/04/2023
 25567 000037F4 E2E7                    	loop	kloop
 25568 000037F6 1F                      	pop	ds		; return to our segment
 25569 000037F7 4F                      	dec	di		; overwrite terminator
 25570 000037F8 A0[E2A8]                	mov	al,[psep_char]	; with a pathname separator
 25571 000037FB 3A45FF                  	cmp	al,[di-1]
 25572 000037FE 7401                    	je	short path_success
 25573                                  path_store:
 25574 00003800 AA                      	stosb
 25575                                  path_success:
 25576 00003801 BE[E4A8]                	mov	si,search_best_buf
 25577 00003804 31C9                    	xor	cx,cx
 25578                                  path_succ_loop:
 25579 00003806 AC                      	lodsb			; append winning filename to path
 25580 00003807 AA                      	stosb			; (including terminating null)	
 25581 00003808 08C0                    	or	al,al
 25582 0000380A 75FA                    	jnz	short path_succ_loop
 25583 0000380C 89E8                    	mov	ax,bp		; retrieve filetype code
 25584                                  path_exit:
 25585 0000380E 9D                      	popf
 25586 0000380F 5D                      	pop	bp
 25587 00003810 5F                      	pop	di
 25588 00003811 5E                      	pop	si		; chill out...
 25589 00003812 5A                      	pop	dx
 25590 00003813 59                      	pop	cx
 25591 00003814 5B                      	pop	bx
 25592 00003815 C3                      	retn
 25593                                  
 25594                                  ; =============== S U B	R O U T	I N E =======================================
 25595                                  
 25596                                  ; STORE_PCHAR determines the pathname-element separator and squirrels
 25597                                  ; it away. In other words, must we say '/bin/ls' or '\bin\ls'?
 25598                                  ;
 25599                                  ; ENTRY:
 25600                                  ; EXIT:
 25601                                  ; NOTE(S):
 25602                                  ;   *	Uses <psep_char>, defined in <path_search>.
 25603                                  
 25604                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25605                                  STORE_PCHAR:
 25606 00003816 50                      	push	ax
 25607 00003817 B02F                    	mov	al,'/'		; is the pathname-element separator
 25608 00003819 E8A2F3                  	call	pathchrcmp	; a regular slash?
 25609 0000381C 7402                    	jz	short STORE_SLASH
 25610                                  				; if yes, remember slash
 25611 0000381E B05C                    	mov	al,'\'
 25612                                  	; 18/03/2023
 25613                                  	;mov	[psep_char],al	; otherwise, remember back-slash
 25614                                  	;pop	ax
 25615                                  	;retn
 25616                                  STORE_SLASH:
 25617 00003820 A2[E2A8]                	mov	[psep_char],al
 25618 00003823 58                      	pop	ax
 25619 00003824 C3                      	retn
 25620                                  
 25621                                  ; =============== S U B	R O U T	I N E =======================================
 25622                                  
 25623                                  ; PATH_CRUNCH takes a prefix from a prefix string, and a suffix from
 25624                                  ; EXECPATH, and smooshes them into tpbuf. The caller may supply an
 25625                                  ; additional separator to use for breaking up the path-string. Null is the
 25626                                  ; default. Once the user-string has been formed, search is invoked to see
 25627                                  ; what's out there.
 25628                                  ;
 25629                                  ; ENTRY:
 25630                                  ;   BH			--	additional terminator character
 25631                                  ;   SI			--	pointer into pathstring to be dissected
 25632                                  ;   DX			--	pointer to stripped filename
 25633                                  ; EXIT:
 25634                                  ;   AX			--	non-zero (file type), zero (nothing found)
 25635                                  ;   SI			--	moves along pathstring from call to call
 25636                                  ;   [search_best_buf]	--	name of best file (AX non-zero)
 25637                                  ;   [tpbuf]		--	clobbered
 25638                                  ; NOTE(S):
 25639                                  ;   *	Implicit in this code is the ability to specify when to search
 25640                                  ;	the current directory (if at all) through the PATH defined by
 25641                                  ;	the user, a la UNIX (e.g., PATH=;c:\bin;c:\etc searches the
 25642                                  ;	current directory before the bin and etc directories of drive c).
 25643                                  
 25644                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25645                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3454h
 25646                                  
 25647                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25648                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:39FEh
 25649                                  	
 25650                                  path_crunch:
 25651 00003825 53                      	push	bx
 25652 00003826 51                      	push	cx
 25653 00003827 52                      	push	dx
 25654 00003828 57                      	push	di
 25655 00003829 56                      	push	si
 25656                                  	;pushf	; ** ; 18/03/2023
 25657 0000382A E8E9FF                  	call	STORE_PCHAR	; figure out pathname separator
 25658 0000382D BF[2DA8]                	mov	di,TPBUF	; destination of concatenated string
 25659 00003830 8B36[E0A8]              	mov	si,[pathinfo+4]	; "new" pointer to start with
 25660 00003834 8936[DEA8]              	mov	[pathinfo+2],si	; becomes "old" pointer
 25661 00003838 1E                      	push	ds		; save old segment pointer
 25662 00003839 FF36[DCA8]              	push	word [pathinfo+0]
 25663                                  				; replace with pointer to userpath's
 25664 0000383D 1F                      	pop	ds		; segment
 25665                                  	; 26/04/2023
 25666 0000383E 30C9                    	xor	cl,cl		;AN000; clear flag for later use 3/3/KK	
 25667                                  path_cr_copy:
 25668 00003840 AC                      	lodsb			; get a pathname byte
 25669 00003841 08C0                    	or	al,al		; check for terminator(s)
 25670 00003843 7414                    	jz	short path_seg	; null terminates segment & pathstring
 25671 00003845 38F8                    	cmp	al,bh
 25672 00003847 7410                    	je	short path_seg	; BH terminates a pathstring segment
 25673                                  	;
 25674                                  	; 18/03/2023
 25675                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 25676 00003849 E8C5F0                  	call	testkanj	;AN000; 3/3/KK
 25677 0000384C 7406                    	jz	short _notkanj2	;AN000; 3/3/KK
 25678 0000384E AA                      	stosb			;AN000; 3/3/KK
 25679 0000384F A4                      	movsb			;AN000; 3/3/KK
 25680 00003850 B101                    	mov	cl,1 ; *	;AN000; CL=1 means latest stored char is DBCS 3/3/KK	
 25681 00003852 EBEC                    	jmp	short path_cr_copy
 25682                                  _notkanj2:
 25683 00003854 30C9                    	xor	cl,cl ; *	;AN000; CL=0 means latest stored char is SBCS 3/3/KK
 25684                                  	;
 25685 00003856 AA                      	stosb
 25686 00003857 EBE7                    	jmp	short path_cr_copy
 25687                                  
 25688                                  path_seg:
 25689 00003859 1F                      	pop	ds		; restore old data segment
 25690 0000385A 8936[E0A8]              	mov	[pathinfo+4],si	; save "new" pointer for next time
 25691 0000385E 88C3                    	mov	bl,al		; remember if we saw null or not...
 25692                                  				;;; REMOVE NEXT 3 LINES FOR CURDIR SPEC
 25693 00003860 31C0                    	xor	ax,ax		; in case nothing in pathstr...
 25694 00003862 81FF[2DA8]              	cmp	di,TPBUF	; was there really anything in pathstr?		
 25695 00003866 7421                    	je	short path_cr_leave
 25696                                  				; if nothing was copied, pathstr empty
 25697                                  path_cr_look:
 25698 00003868 A0[E2A8]                	mov	al,[psep_char]	; form complete pathname
 25699                                  	;
 25700                                  	; 18/03/2023
 25701                                  	; MSDOS 6.0
 25702 0000386B 08C9                    	or	cl,cl ; *	;AN000; 3/3/KK
 25703 0000386D 7505                    	jnz	short path_cr_store
 25704                                  				;AN000; this is a trailing byte of ECS code 3/3/KK
 25705                                  	;
 25706 0000386F 3A45FF                  	cmp	al,[di-1]	; add pathname separator for suffix
 25707 00003872 7401                    	je	short path_cr_l1
 25708                                  path_cr_store:
 25709 00003874 AA                      	stosb
 25710                                  path_cr_l1:
 25711 00003875 89D6                    	mov	si,dx
 25712                                  path_cr_l2:
 25713 00003877 AC                      	lodsb			; tack the stripped filename onto
 25714 00003878 AA                      	stosb			; the end of the path, up to and
 25715 00003879 08C0                    	or	al,al		; including the terminating null
 25716 0000387B 75FA                    	jnz	short path_cr_l2
 25717 0000387D BA[2DA8]                	mov	dx,TPBUF	; and look for an appropriate file...	
 25718 00003880 C706[31A9][4B93]        	mov	word [search_error],BADPMES_PTR
 25719                                  	;invoke search
 25720 00003886 E80900                  	call	PSEARCH		; results are in AX & search_best_buf
 25721                                  
 25722                                  	; 18/03/2023
 25723                                  ;path_cr_leave:
 25724                                  	;or	bl,bl		; did we finish off the pathstring?
 25725                                  	;jz	short path_cr_empty
 25726                                  	;			; null in BL means all gone...
 25727                                  	;popf	; **		; otherwise, plenty left
 25728                                  	;clc
 25729                                  	;jmp	short path_cr_exit
 25730                                  ;path_cr_empty:
 25731                                  	;popf	; **
 25732                                  	;stc
 25733                                  ;path_cr_exit:
 25734                                  
 25735                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25736                                  path_cr_leave:
 25737                                  	;popf ; ** ; 18/03/2023
 25738 00003889 80FB01                  	cmp	bl,1	; if bl = 0 -> cf = 1 (path_cr_empty:)
 25739                                  	
 25740                                  path_cr_exit:
 25741 0000388C 5E                      	pop	si
 25742 0000388D 5F                      	pop	di
 25743 0000388E 5A                      	pop	dx
 25744 0000388F 59                      	pop	cx
 25745 00003890 5B                      	pop	bx
 25746 00003891 C3                      	retn
 25747                                  
 25748                                  ;============================================================================
 25749                                  ; PATH2.ASM, MSDOS 6.0, 1991
 25750                                  ;============================================================================
 25751                                  ; 02/10/2018 - Retro DOS v3.0
 25752                                  
 25753                                  ;----------------------------------------------------------------------------
 25754                                  ;   SEARCH, when given a pathname, attempts to find a file with
 25755                                  ; one of the following extensions: .com, .exe, .bat (highest to
 25756                                  ; lowest priority). Where conflicts arise, the extension with
 25757                                  ; the highest priority is favored.
 25758                                  ; ENTRY:
 25759                                  ;   DX		--	pointer to null-terminated pathname
 25760                                  ;   fbuf	--	dma buffer for findfirst/next
 25761                                  ; EXIT:
 25762                                  ;   AX		--	8)  file found with .com extension
 25763                                  ;			4)  file found with .exe extension
 25764                                  ;			2)  file found with .bat extension
 25765                                  ;			0)  no such file to be found
 25766                                  ;   (if AX is non-zero:)
 25767                                  ;   [search_best]	identical to AX
 25768                                  ;   [search_best_buf]	null-terminated filename
 25769                                  ; NOTES:
 25770                                  ;   1) Requires caller to have allocated a dma buffer and executed a setdma.
 25771                                  ;---------------
 25772                                  ; CONSTANTS:
 25773                                  ;---------------
 25774                                  SEARCH_FILE_NOT_FOUND	EQU	0
 25775                                  SEARCH_COM		EQU	8
 25776                                  SEARCH_EXE		EQU	4
 25777                                  SEARCH_BAT		EQU	2
 25778                                  FNAME_LEN		EQU	8
 25779                                  FNAME_MAX_LEN		EQU	13
 25780                                  DOT			EQU	'.'
 25781                                  WILDCHAR		EQU	'?'
 25782                                  
 25783                                  
 25784                                  ; =============== S U B	R O U T	I N E =======================================
 25785                                  
 25786                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 26D6h
 25787                                  
 25788                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25789                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:34C9h
 25790                                  
 25791                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25792                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3A73h
 25793                                  PSEARCH:
 25794 00003892 51                      	push	cx
 25795 00003893 52                      	push	dx
 25796 00003894 57                      	push	di
 25797 00003895 56                      	push	si
 25798                                  	;pushf	; ** ; 18/03/2023
 25799 00003896 52                      	push	dx		; check drivespec (save pname ptr)
 25800 00003897 89D7                    	mov	di,dx		; working copy of pathname
 25801 00003899 BE[F1A8]                	mov	si,search_curdir_buf
 25802 0000389C 31D2                    	xor	dx,dx		; zero means current drive
 25803 0000389E 807D013A                	cmp	byte [di+1],':'	; is there a drive spec?
 25804 000038A2 7508                    	jne	short SEARCH_DIR_CHECK
 25805 000038A4 8A15                    	mov	dl,[di]		; get the drive byte
 25806 000038A6 80E2DF                  	and	dl,0DFh ; ~20h	; uppercase the sucker
 25807 000038A9 80EA40                  	sub	dl,'@' ; 40h	; and convert to drive number
 25808                                  SEARCH_DIR_CHECK:
 25809 000038AC B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25810 000038AF CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25811                                  			; DL = drive (0=default,1=A,etc.)
 25812                                  			; DS:SI	points to 64-byte buffer area
 25813 000038B1 5A                      	pop	dx		; directory? If we can't we'll		
 25814 000038B2 724C                    	jc	short SEARCH_INVALID_DRIVE
 25815                                  				; assume it's a bad drive...
 25816 000038B4 B91300                  	mov	cx,search_attr	; 13h
 25817                                  				; filetypes to search for
 25818 000038B7 B8004E                  	mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 25819 000038BA CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 25820                                  			; CX = search attributes
 25821                                  			; DS:DX	-> ASCIZ filespec
 25822                                  			; (drive,path, and wildcards allowed)
 25823 000038BC 7249                    	jc	short SEARCH_NO_FILE
 25824 000038BE C606[E3A8]00            	mov	byte [search_best],SEARCH_FILE_NOT_FOUND ; 0
 25825 000038C3 C606[E4A8]00            	mov	byte [search_best_buf],ANULL
 25826                                  				; 0 ; nothing's been found, yet
 25827                                  SEARCH_LOOP:
 25828 000038C8 E84300                  	call	SEARCH_FTYPE	; determine if .com, &c...
 25829 000038CB 3A06[E3A8]              	cmp	al,[search_best]
 25830                                  				; better than what we've found so far?
 25831 000038CF 7E13                    	jle	short SEARCH_NEXT
 25832                                  				; no, look for another	
 25833 000038D1 A2[E3A8]                	mov	[search_best],al
 25834                                  				; found something... save its code	
 25835                                  	;mov	si,offset TRANGROUP:fbuf.find_buf_pname
 25836                                  	;mov	si,FBUF_PNAME
 25837 000038D4 BE[CFA8]                	mov	si,FBUF+FIND_BUF.PNAME ; FBUF+30
 25838 000038D7 BF[E4A8]                	mov	di,search_best_buf
 25839 000038DA B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25840 000038DD FC                      	cld
 25841 000038DE F3A4                    	rep	movsb		; save complete pathname representation
 25842 000038E0 3C08                    	cmp	al,SEARCH_COM	; 8
 25843                                  				; have we found the best of all?	
 25844 000038E2 740A                    	je	short SEARCH_DONE
 25845                                  SEARCH_NEXT:			; keep on looking
 25846 000038E4 B91300                  	mov	cx,search_attr ; 13h
 25847 000038E7 B8004F                  	mov	ax,Find_Next*256 ; 4F00h ; next match
 25848 000038EA CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 25849                                  			; [DTA]	= data block from
 25850                                  			; last AH = 4Eh/4Fh call
 25851 000038EC 73DA                    	jnc	short SEARCH_LOOP
 25852                                  SEARCH_DONE:			; it's all over with...
 25853 000038EE A0[E3A8]                	mov	al,[search_best]
 25854                                  				; pick best to return with
 25855                                  	; 18/03/2023
 25856                                  	; MSDOS 6.0
 25857 000038F1 803E[9DA2]01            	cmp	byte [ext_entered],1
 25858                                  				;AN005; Did user request a specific ext?
 25859 000038F6 7411                    	je	short SEARCH_EXIT
 25860                                  				;AN005; no - exit
 25861 000038F8 A0[9DA2]                	mov	al,[ext_entered]
 25862                                  				;AN005; yes - get the real file type back
 25863 000038FB A2[E3A8]                	mov	[search_best],al
 25864                                  				;AN005; save the real file type
 25865                                  	;
 25866 000038FE EB09                    	jmp	short SEARCH_EXIT
 25867                                  
 25868                                  SEARCH_INVALID_DRIVE:		; Tell the user path/drive
 25869 00003900 8B16[31A9]              	mov	dx,[search_error]
 25870                                  				; appropriate error message
 25871 00003904 E8261C                  	call	std_printf	; and pretend no file found
 25872                                  
 25873                                  SEARCH_NO_FILE:			; couldn't find a match
 25874                                  	;mov	ax,SEARCH_FILE_NOT_FOUND ; 0
 25875                                  	; 18/03/2023
 25876 00003907 31C0                    	xor	ax,ax
 25877                                  SEARCH_EXIT:
 25878                                  	;popf	; ** ; 18/03/2023
 25879 00003909 5E                      	pop	si
 25880 0000390A 5F                      	pop	di
 25881 0000390B 5A                      	pop	dx
 25882 0000390C 59                      	pop	cx
 25883 0000390D C3                      	retn
 25884                                  
 25885                                  ; =============== S U B	R O U T	I N E =======================================
 25886                                  
 25887                                  ; SEARCH_FTYPE determines the type of a file by examining its extension.
 25888                                  ;
 25889                                  ; ENTRY:
 25890                                  ;   fbuf    --	dma buffer containing filename
 25891                                  ; EXIT:
 25892                                  ;   AX	    --	file code, as given in search header
 25893                                  ; NOTE(S):
 25894                                  ;   *	Implicit assumption that NULL == search_file_not_found
 25895                                  
 25896                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25897                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25898                                  SEARCH_FTYPE:
 25899 0000390E 57                      	push	di
 25900 0000390F 56                      	push	si
 25901                                  	;mov	ax,ANULL ; 0	; find the end of the filename
 25902                                  	; 18/02/2023
 25903 00003910 31C0                    	xor	ax,ax ; ax = 0		
 25904                                  	;mov	di,offset TRANGROUP:fbuf.find_buf_pname
 25905                                  	;mov	di,FBUF_PNAME
 25906 00003912 BF[CFA8]                	mov	di,FBUF+FIND_BUF.PNAME ; FBUF+1Eh
 25907 00003915 B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25908 00003918 FC                      	cld
 25909 00003919 F2AE                    	repnz	scasb		; search for the terminating null
 25910 0000391B 7535                    	jnz	short FTYPE_EXIT
 25911                                  				; weird... no null byte at end
 25912 0000391D 83EF05                  	sub	di,5		; . + E + X + T + NULL
 25913                                  
 25914                                  	; Compare .COM
 25915                                  
 25916 00003920 BE[7697]                	mov	si,comext ; ".COM"
 25917 00003923 89F8                    	mov	ax,di
 25918 00003925 A7                      	cmpsw
 25919 00003926 7508                    	jnz	short FTYPE_EXE
 25920 00003928 A7                      	cmpsw
 25921 00003929 7505                    	jnz	short FTYPE_EXE
 25922                                  	;mov	ax,8
 25923 0000392B B80800                  	mov	ax,SEARCH_COM	; success!
 25924 0000392E EB22                    	jmp	short FTYPE_EXIT
 25925                                  
 25926                                  	; Compare .EXE
 25927                                  FTYPE_EXE:			; still looking... now for '.exe'
 25928 00003930 89C7                    	mov	di,ax
 25929 00003932 BE[7A97]                	mov	si,exeext ; ".EXE"
 25930 00003935 A7                      	cmpsw
 25931 00003936 7508                    	jnz	short FTYPE_BAT
 25932 00003938 A7                      	cmpsw
 25933 00003939 7505                    	jnz	short FTYPE_BAT
 25934                                  	;mov	ax,4
 25935 0000393B B80400                  	mov	ax,SEARCH_EXE	; success!
 25936 0000393E EB12                    	jmp	short FTYPE_EXIT
 25937                                  
 25938                                  	; Compare .BAT
 25939                                  FTYPE_BAT:			; still looking... now for '.bat'
 25940 00003940 89C7                    	mov	di,ax
 25941 00003942 BE[7E97]                	mov	si,batext ; ".BAT"
 25942 00003945 A7                      	cmpsw
 25943 00003946 7508                    	jnz	short FTYPE_FAIL
 25944 00003948 A7                      	cmpsw
 25945 00003949 7505                    	jnz	short FTYPE_FAIL
 25946                                  	;mov	ax,2
 25947 0000394B B80200                  	mov	ax,SEARCH_BAT	; success!
 25948 0000394E EB02                    	jmp	short FTYPE_EXIT
 25949                                  
 25950                                  FTYPE_FAIL:			; file doesn't match what we need
 25951                                  	;mov	ax,ANULL ; 0
 25952                                  	; 18/03/2023
 25953 00003950 29C0                    	sub	ax,ax  ; ax = 0
 25954                                  FTYPE_EXIT:
 25955                                  	; 18/03/2023
 25956                                  	; MSDOS 6.0
 25957 00003952 803E[9DA2]01            	cmp	byte [ext_entered],1
 25958                                  				;AN005; was an extension entered?
 25959 00003957 740A                    	jz	short FTYPE_DONE
 25960                                  				;AN005; no - exit
 25961                                  	;cmp	ax,ANULL	;AN005; was any match found
 25962 00003959 21C0                    	and	ax,ax  ; ax = 0 ?
 25963 0000395B 7406                    	jz	short FTYPE_DONE
 25964                                  				;AN005; no - exit
 25965 0000395D A2[9DA2]                	mov	[ext_entered],al
 25966                                  				;AN005; save the match type found
 25967 00003960 B80800                  	mov	ax,SEARCH_COM	;AN005; send back best was found to stop search
 25968                                  FTYPE_DONE:
 25969 00003963 5E                      	pop	si
 25970 00003964 5F                      	pop	di
 25971 00003965 C3                      	retn
 25972                                  
 25973                                  ; =============== S U B	R O U T	I N E =======================================
 25974                                  
 25975                                  ; STRIP copies the source string (argv[0]) into the destination buffer,
 25976                                  ; replacing any extension with wildcards.
 25977                                  ;
 25978                                  ; ENTRY:
 25979                                  ;	BX	--	maximum length of destination buffer
 25980                                  ;	DS:SI	--	address of destination buffer
 25981                                  ;	argv[0] --	command name to be stripped
 25982                                  ; EXIT:
 25983                                  ;	CF	--	set if failure, clear if successful
 25984                                  ; NOTE(S):
 25985                                  
 25986                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25987                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 25988                                  STRIP:
 25989 00003966 50                      	push	ax
 25990 00003967 53                      	push	bx
 25991 00003968 51                      	push	cx
 25992 00003969 52                      	push	dx
 25993 0000396A 57                      	push	di
 25994 0000396B 56                      	push	si
 25995                                  	;pushf	; ** ; 18/03/2023
 25996                                  		
 25997                                  	; 05/05/2023
 25998                                  	; MSDOS 6.0
 25999 0000396C C606[9DA2]01            	mov	byte [ext_entered],1
 26000                                  				;AN005; assume no extension on file name
 26001                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26002                                  	;mov	dx,[ARG_ARGV]
 26003                                  	;mov	dx,ds:arg.argv[0].argpointer
 26004                                  				; save pointer to beginning of argstring
 26005                                  	;mov	dx,[ARGV0_ARGPOINTER]
 26006 00003971 8B16[E7A2]              	mov	dx,[ARG+ARGV_ELE.argpointer]
 26007                                  	;mov	di,ds:arg.argv[0].argstartel
 26008                                  				; beginning of last pathname element
 26009                                  	;mov	di,[ARGV0_ARGSTARTEL] ; beginning of last pathname element
 26010 00003975 8B3E[EAA2]              	mov	di,[ARG+ARGV_ELE.argstartel]
 26011 00003979 803D00                  	cmp	byte [di],0	; *STARTEL == NULL means no command
 26012 0000397C 743D                    	je	short STRIP_ERROR
 26013 0000397E 89D1                    	mov	cx,dx		; compute where end of argstring lies
 26014                                  	;add	cx,ds:arg.argv[0].arglen
 26015                                  	;add	cx,[ARGV0_ARGLEN]
 26016 00003980 030E[ECA2]              	add	cx,[ARG+ARGV_ELE.arglen]
 26017 00003984 29F9                    	sub	cx,di		; and then find length of last element
 26018 00003986 41                      	inc	cx		; include null as well
 26019 00003987 B02E                    	mov	al,'.'
 26020                                  	;mov	al,DOT		; let's find the filetype extension
 26021 00003989 FC                      	cld
 26022 0000398A F2AE                    	repnz	scasb		; wind up pointing to either null or dot
 26023                                  
 26024                                  	; 18/03/2023
 26025                                  	; MSDOS 6.0
 26026 0000398C E307                    	jcxz	PROCESS_EXT	;AN005; if no extension found, just continue
 26027 0000398E B000                    	mov	al,0 ; 18/03/2023
 26028                                  	;mov	byte [ext_entered],0
 26029 00003990 A2[9DA2]                	mov	[ext_entered],al
 26030                                  				;AN005; we found an extension
 26031                                  	;;mov	al,ANULL	;AN005; continue scanning until the
 26032                                  	;mov	al,0
 26033 00003993 F2AE                    	repnz	scasb		;AN005; end of line is reached.
 26034                                  PROCESS_EXT:
 26035                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26036 00003995 89F9                    	mov	cx,di		; pointer to end of argstring yields
 26037 00003997 29D1                    	sub	cx,dx		; number of bytes to be copied
 26038 00003999 83EB04                  	sub	bx,4		; can argstring fit into dest. buffer?
 26039 0000399C 39D9                    	cmp	cx,bx
 26040 0000399E 7F1B                    	jg	short STRIP_ERROR
 26041                                  				; if not, we must have a bad pathname
 26042 000039A0 89F7                    	mov	di,si		; destination buffer
 26043 000039A2 89D6                    	mov	si,dx		; source is beginning of pathname
 26044 000039A4 FC                      	cld
 26045 000039A5 F3A4                    	rep	movsb		; SI=arg,DI=buffer,CX=argend-argbeg
 26046                                  
 26047                                  	; 18/03/2023
 26048                                  	; MSDOS 6.0
 26049 000039A7 803E[9DA2]01            	cmp	byte [ext_entered],1
 26050                                  				;AN005; if an extension was entered
 26051 000039AC 750A                    	jne	short SKIP_WILDS ; cf = 1 ; 12/06/2023
 26052                                  				;AN005;    don't set up wildcard ext.
 26053                                  
 26054                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26055 000039AE 4F                      	dec	di		; overwrite null or dot
 26056 000039AF AA                      	stosb			; with a dot
 26057 000039B0 B03F                    	mov	al,'?'
 26058                                  	;mov	al,WILDCHAR	; now add wildcards
 26059 000039B2 AA                      	stosb
 26060 000039B3 AA                      	stosb
 26061 000039B4 AA                      	stosb
 26062 000039B5 B000                    	mov	al,0
 26063                                  	;mov	al,ANULL	; and a terminating null	
 26064 000039B7 AA                      	stosb
 26065                                  SKIP_WILDS:
 26066                                  	;popf	; ** ; 18/03/2023
 26067 000039B8 F8                      	clc
 26068 000039B9 EB01                    	jmp	short STRIP_EXIT ; chill out...
 26069                                  
 26070                                  STRIP_ERROR:
 26071                                  	;popf	; ** ; 18/03/2023
 26072 000039BB F9                      	stc
 26073                                  STRIP_EXIT:
 26074 000039BC 5E                      	pop	si
 26075 000039BD 5F                      	pop	di
 26076 000039BE 5A                      	pop	dx
 26077 000039BF 59                      	pop	cx
 26078 000039C0 5B                      	pop	bx
 26079 000039C1 58                      	pop	ax
 26080 000039C2 C3                      	retn
 26081                                  
 26082                                  ; =============== S U B	R O U T	I N E =======================================
 26083                                  
 26084                                  ; SAVE_ARGS attempts to preserve the existing argv[]/argvcnt/argbuffer
 26085                                  ;
 26086                                  ; structure in newly allocated memory. The argv[] structure is found at the
 26087                                  ; beginning of this area. The caller indicates how much extra space is
 26088                                  ; needed in the resulting structure; Save_Args returns a segment number and
 26089                                  ; an offset into that area, indicating where the caller may preserve its own
 26090                                  ; data. Note that <argvcnt> can be found at <offset-2>.
 26091                                  ; ENTRY:
 26092                                  ;   BX	    --	size (in bytes) of extra area to allocate
 26093                                  ; EXIT:
 26094                                  ;   AX	    --	segment of new area.
 26095                                  ;   CF	    --	set if unable to save a copy.
 26096                                  ; NOTE(S):
 26097                                  ;   1)	The allocated area will be AT LEAST the size requested -- since
 26098                                  ;	the underlying MSDOS call, <alloc> returns an integral number of
 26099                                  ;	paragraphs.
 26100                                  ;   2)	It is an error if MSDOS can't allocate AT LEAST as much memory
 26101                                  ;	as the caller of Save_Args requests.
 26102                                  ;   3)	AX is undefined if CF indicates an error.
 26103                                  
 26104                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26105                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26106                                  SAVE_ARGS:
 26107 000039C3 53                      	push	bx
 26108 000039C4 51                      	push	cx
 26109 000039C5 52                      	push	dx
 26110 000039C6 57                      	push	di
 26111 000039C7 56                      	push	si
 26112 000039C8 55                      	push	bp
 26113                                  	; 01/05/2023
 26114                                  	; 26/04/2023
 26115                                  	;pushf ; **
 26116                                  	;add	bx,1363		; space for arg structure, round up
 26117 000039C9 81C35304                	add	bx,ARG_UNIT.SIZE+15 ; 1348+15
 26118                                  			; 1092+15 ; 31/07/2024
 26119 000039CD B104                    	mov	cl,4		; to paragraph size and convert
 26120 000039CF D3EB                    	shr	bx,cl		; size in bytes to size in paragraphs
 26121 000039D1 B80048                  	mov	ax,ALLOC*256 ; 4800h
 26122 000039D4 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 26123                                  			; BX = number of 16-byte paragraphs desired
 26124 000039D6 7242                    	jc	short SAVE_ERROR ; ***
 26125 000039D8 89C5                    	mov	bp,ax		; save segment id
 26126 000039DA 06                      	push	es		; save TRANGROUP address
 26127 000039DB 8EC0                    	mov	es,ax		; switch to new memory segment
 26128                                  	; assume es:nothing
 26129                                  	;mov	cx,1348		; get back structure size
 26130 000039DD B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092 ; 31/07/2024
 26131 000039E0 31FF                    	xor	di,di		; destination is new memory area
 26132                                  	;mov	si,ARG_ARGV
 26133 000039E2 BE[E7A2]                	mov	si,ARG		; source is arg structure
 26134 000039E5 F3A4                    	rep	movsb		; move that sucker!
 26135                                  	;mov	cx,arg.argvcnt 	; adjust argv pointers
 26136                                  	;mov	cx,[ARG_ARGVCNT]
 26137 000039E7 8B0E[A7A5]              	mov	cx,[ARG+ARG_UNIT.argvcnt]
 26138 000039EB 31C0                    	xor	ax,ax		; base address for argv_calc
 26139                                  
 26140                                  ;	Bugbug:	What did they mean by this?
 26141                                  ;	Note that the replacement line produces exactly the same code.
 26142                                  ;;	mov	SI, OFFSET TRANGROUP:arg.argbuf - OFFSET arg_unit.argbuf
 26143                                  ;	mov	SI, OFFSET TRANGROUP:arg
 26144                                  
 26145                                  	;mov	si,ARG_ARGV
 26146 000039ED BE[E7A2]                	mov	si,ARG	
 26147                                  SAVE_PTR_LOOP:
 26148 000039F0 49                      	dec	cx		; exhausted all args?
 26149 000039F1 7C24                    	jl	short SAVE_DONE
 26150 000039F3 89CB                    	mov	bx,cx		; get arg index and
 26151 000039F5 E8AAFC                  	call	argv_calc	; convert to a pointer
 26152                                  	;mov	dx,ds:arg.argv[bx].argpointer
 26153                                  	;mov	dx,[ARG_ARGV+bx]
 26154 000039F8 8B97[E7A2]              	mov	dx,[ARG+ARGV_ELE.argpointer+bx]
 26155 000039FC 29F2                    	sub	dx,si		; adjust argpointer
 26156                                  	;mov	es:argv[BX].argpointer,dx
 26157                                  	;mov	[es:bx+ARGV_ELE.argpointer],dx ; mov [es:bx+0],dx
 26158 000039FE 268917                  	mov	[es:bx],dx
 26159                                  	;mov	dx,ds:arg.argv[bx].argstartel
 26160                                  	;mov	dx,[ARGV0_ARGSTARTEL+bx]
 26161 00003A01 8B97[EAA2]              	mov	dx,[ARG+ARGV_ELE.argstartel+bx]
 26162 00003A05 29F2                    	sub	dx,si		; and adjust argstartel
 26163                                  	;mov	es:argv[bx].argstartel,dx
 26164                                  	;mov	[es:bx+3],dx
 26165 00003A07 26895703                	mov	[es:bx+ARGV_ELE.argstartel],dx
 26166                                  	;mov	dx,ds:arg.argv[bx].arg_ocomptr
 26167                                  	;mov	dx,[ARGV0_OCOMPTR+bx]
 26168 00003A0B 8B97[F0A2]              	mov	dx,[ARG+ARGV_ELE.arg_ocomptr+bx]
 26169 00003A0F 29F2                    	sub	dx,si		; and adjust arg_ocomptr
 26170                                  	;mov	es:argv[bx].arg_ocomptr,dx
 26171                                  	;mov	[es:bx+9],dx
 26172 00003A11 26895709                	mov	[es:bx+ARGV_ELE.arg_ocomptr],dx
 26173 00003A15 EBD9                    	jmp	short SAVE_PTR_LOOP
 26174                                  SAVE_DONE:
 26175 00003A17 07                      	pop	es		; back we go to TRANGROUP
 26176                                  	; assume es:nothing
 26177 00003A18 89E8                    	mov	ax,bp		; restore segment id
 26178                                  	; 26/04/2023
 26179                                  	; cf = 0 ; *
 26180                                  	;jmp	short SAVE_OK
 26181                                  
 26182                                  	; 26/04/2023
 26183                                  ;SAVE_ERROR:
 26184                                  ;	; 26/04/2023
 26185                                  ;	;popf ; **
 26186                                  ;	stc
 26187                                  ;	jmp	short SAVE_EXIT
 26188                                  
 26189                                  SAVE_OK:
 26190                                  	; 26/04/2023
 26191                                  	;popf ; **
 26192                                  	; 26/04/2023
 26193                                  	; cf = 0 ; *
 26194                                  	;clc
 26195                                  SAVE_EXIT:
 26196                                  SAVE_ERROR:	; 26/04/2023 (cf=1) ; ***
 26197 00003A1A 5D                      	pop	bp
 26198 00003A1B 5E                      	pop	si
 26199 00003A1C 5F                      	pop	di
 26200 00003A1D 5A                      	pop	dx
 26201 00003A1E 59                      	pop	cx
 26202 00003A1F 5B                      	pop	bx
 26203                                  answ_no:	; 26/04/2023
 26204 00003A20 C3                      	retn
 26205                                  
 26206                                  ;============================================================================
 26207                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (1)
 26208                                  ;============================================================================
 26209                                  ; 02/10/2018 - Retro DOS v3.0
 26210                                  
 26211                                  ; Title	COMMAND Language midifiable Code Transient
 26212                                  
 26213                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2843h
 26214                                  
 26215                                  ; =============== S U B	R O U T	I N E =======================================
 26216                                  
 26217                                  ; ****************************************************************
 26218                                  ; *
 26219                                  ; * ROUTINE:	 NOTEST2 - execution of DEL/ERASE command
 26220                                  ; *
 26221                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 26222                                  ; *		 user for Y/N if necessary. If an error occurs,
 26223                                  ; *		 set up an error message and go to CERROR.
 26224                                  ; *
 26225                                  ; * INPUT:	 FCB at 5ch set up with filename(s) entered
 26226                                  ; *		 Current directory set to entered directory
 26227                                  ; *
 26228                                  ; * OUTPUT:	 none
 26229                                  ; *
 26230                                  ; ****************************************************************
 26231                                  ;
 26232                                  ; ARE YOU SURE prompt when deleting *.*
 26233                                  
 26234                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26235                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26236                                  notest2:
 26237 00003A21 B90B00                  	mov	cx,11
 26238 00003A24 BE5D00                  	mov	si,FCB+1 ; 5Dh
 26239                                  ambspec:
 26240 00003A27 AC                      	lodsb
 26241 00003A28 3C3F                    	cmp	al,'?'
 26242 00003A2A 7502                    	jne	short allfil
 26243 00003A2C E2F9                    	loop	ambspec
 26244                                  allfil:
 26245                                  	; 19/03/2023
 26246                                  	;cmp	cx,0
 26247 00003A2E 09C9                    	or	cx,cx
 26248 00003A30 752E                    	jnz	short noprmpt
 26249                                  askagn:	
 26250 00003A32 BA[D292]                	mov	dx,SureMes_Ptr	; "Are you sure (Y/N)?"
 26251 00003A35 E8F51A                  	call	std_printf
 26252 00003A38 BE8000                  	mov	si,80h
 26253 00003A3B 89F2                    	mov	dx,si
 26254 00003A3D C7047800                	mov	word [si],120	; zero length
 26255                                  	;mov	ax,0C0Ah
 26256 00003A41 B80A0C                  	mov	ax,(STD_CON_INPUT_FLUSH<<8)|Std_Con_String_Input
 26257 00003A44 CD21                    	int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 26258                                  			; AL must be 01h,06h,07h,08h or 0Ah.
 26259 00003A46 AD                      	lodsw
 26260 00003A47 08E4                    	or	ah,ah
 26261 00003A49 74E7                    	jz	short askagn
 26262 00003A4B E8E2F0                  	call	scanoff
 26263                                  	; 19/03/2023
 26264                                  	; MSDOS 6.0
 26265 00003A4E E80C02                  	call	char_in_xlat	; Convert to upper case
 26266                                  	;retc			; return if function not supported
 26267                                  	; 19/03/2023
 26268                                  	;jnc	short check_yn
 26269                                  ;answ_no:
 26270                                  	;retn
 26271 00003A51 72CD                    	jc	short answ_no
 26272                                  
 26273                                  	; 19/03/2023
 26274                                  	; AL = 0 if it was (country depended) NO character
 26275                                  	; AL = 1 if it was (country depenced) YES character
 26276                                  
 26277                                  	; MSDOS 3.3
 26278                                  	;call	UPCONV
 26279                                  
 26280                                  	; 19/03/2023	
 26281                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26282                                  	;cmp	al,[CAPITAL_N]
 26283                                  	;jne	short CHECK_Y
 26284                                  	;retn
 26285                                  ;CHECK_Y:
 26286                                  	;cmp	al,[CAPITAL_Y]
 26287                                  	;pushf
 26288                                  	;call	CRLF2
 26289                                  	;popf
 26290                                  	;jne	short ASKAGN
 26291                                  
 26292                                  check_yn:
 26293                                  	; 19/03/2023
 26294                                  	;cmp	al,0	; NO character
 26295 00003A53 08C0                    	or	al,al
 26296 00003A55 74C9                    	jz	short answ_no
 26297                                  	;cmp	al,1	 ;YES character
 26298 00003A57 FEC8                    	dec	al ; 1 -> 0 --> zf = 1
 26299 00003A59 9C                      	pushf
 26300 00003A5A E8C6F0                  	call	CRLF2
 26301 00003A5D 9D                      	popf
 26302 00003A5E 75D2                    	jnz	short askagn
 26303                                  noprmpt:
 26304 00003A60 B413                    	mov	ah,FCB_Delete ; 13h
 26305 00003A62 BA5C00                  	mov	dx,FCB ; 5Ch
 26306 00003A65 CD21                    	int	21h	; DOS -	DELETE FILE via	FCB
 26307                                  			; DS:DX	-> FCB with filename field filled with
 26308                                  			; template for deletion ('?' wildcard allowed,but not '*')
 26309                                  			; Return: AL = 00h file	found,FFh file	not found
 26310 00003A67 FEC0                    	inc	al
 26311 00003A69 7403                    	jz	short eraerr
 26312                                  	; 26/04/2023
 26313                                  	;call	RestUDir
 26314                                  ;answ_no:
 26315                                  	;retn
 26316 00003A6B E972EF                  	jmp	RestUDir ; 26/04/2023
 26317                                  
 26318                                  	; 19/03/2023
 26319                                  	; MSDOS 6.0
 26320                                  eraerr:
 26321                                  	;invoke	set_ext_error_msg
 26322                                  				;AN022; set up the extended error
 26323 00003A6E E8C3E7                  	call	Set_Ext_Error_Msg
 26324 00003A71 52                      	push	dx		;AN022; save message
 26325                                  	;invoke	RESTUDIR
 26326 00003A72 E86BEF                  	call	RestUDir
 26327 00003A75 5A                      	pop	dx		;AN022; restore message
 26328                                  	
 26329 00003A76 833E[F391]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 26330                                  				;AN022; convert no more files to
 26331 00003A7B 7506                    	jne	short cerrorj2	;AN022;  file not found
 26332 00003A7D C706[F391]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2  
 26333                                  				;AN000; get message number in control block
 26334                                  cerrorj2:
 26335 00003A83 E91EF4                  	jmp	cerror
 26336                                  	
 26337                                  	; 19/03/2023
 26338                                  	; MSDOS 3.3
 26339                                  ;ERAERR:	
 26340                                  	;mov	ah,Set_DMA ; 1Ah
 26341                                  	;mov	dx,FCB ; 5Ch
 26342                                  	;int	21h		; DOS -	SET DISK TRANSFER AREA ADDRESS
 26343                                  	;			; DS:DX	-> disk	transfer buffer
 26344                                  	;mov	ah,Dir_Search_First ; 11h
 26345                                  	;int	21h		; DOS -	SEARCH FIRST USING FCB
 26346                                  	;			; DS:DX	-> FCB
 26347                                  	;push	ax
 26348                                  	;call	RESTUDIR
 26349                                  	;pop	ax
 26350                                  	;mov	dx,FNOTFOUNDPTR
 26351                                  	;inc	al
 26352                                  	;jz	short CERRORJ
 26353                                  	;mov	dx,ACCDENPTR
 26354                                  	;jmp	CERROR
 26355                                  
 26356                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26357                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:36D4h
 26358                                  
 26359                                  ; ****************************************************************
 26360                                  ; *
 26361                                  ; * ROUTINE:	 SLASHP_ERASE - execution of DEL/ERASE /P
 26362                                  ; *
 26363                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 26364                                  ; *		 user for Y/N where necessary. If an error occurs
 26365                                  ; *		 set up and error message and transfer control
 26366                                  ; *		 to CERROR.
 26367                                  ; *
 26368                                  ; * INPUT:	 FCB at 5Ch set up with filename(s) entered
 26369                                  ; *		 Current directory set to entered directory
 26370                                  ; *
 26371                                  ; * OUTPUT:	 none
 26372                                  ; *
 26373                                  ; ****************************************************************
 26374                                  
 26375                                  	; 19/03/2023
 26376                                  slashp_erase:				;AN000; entry point
 26377                                  	;invoke	build_dir_string	;AN000; set up current directory string for output
 26378 00003A86 E815E9                  	call	build_dir_string
 26379                                  
 26380 00003A89 B41A                    	mov	ah,Set_DMA ; 1Ah	;AN000; issue set dta int 21h
 26381                                  	;mov	dx,offset trangroup:destdir
 26382 00003A8B BA[0DA0]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 26383 00003A8E CD21                    	int	21h			;AN000;
 26384                                  
 26385                                  	;mov	ah,11h
 26386 00003A90 B411                    	mov	ah,Dir_Search_First	;AN000; do dir search first int 21h
 26387 00003A92 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000; use FCB at 5Ch for target
 26388 00003A95 CD21                    	int	21h			;AN000;
 26389 00003A97 FEC0                    	inc	al			;AN000; did an error occur
 26390                                  	;jz	short eraerr		;AN022; go to error exit
 26391                                  	; 26/04/2023
 26392 00003A99 7502                    	jnz	short delete_prompt_loop
 26393                                  
 26394                                  	; 26/04/2023
 26395                                  stop_del:
 26396 00003A9B EBD1                    	jmp	short eraerr		;AN022; go to error exit - need long jmp
 26397                                  
 26398                                  delete_prompt_loop:			;AN000;
 26399                                  	;mov	si,offset trangroup:destdir+1
 26400 00003A9D BE[0EA0]                	mov	si,DESTDIR+1		;AN000; set up FCB as source
 26401                                  	;mov	di,offset trangroup:dest
 26402 00003AA0 BF[DD9F]                	mov	di,DEST			;AN000; set up dest as target
 26403 00003AA3 A0[1A9E]                	mov	al,[DIRCHAR]		;AN000; store a "\" in the first char
 26404 00003AA6 AA                      	stosb				;AN000;   of DEST
 26405                                  	;invoke	FCB_TO_ASCZ		;AN000; convert filename from FCB to ASCIIZ string
 26406 00003AA7 E8A5F0                  	call	FCB_TO_ASCZ
 26407                                  
 26408                                  slashp_askagn:				;AN000;
 26409 00003AAA E876F0                  	call	CRLF2			;AN000; print out carriage return, line feed
 26410                                  	;mov	dx,offset trangroup:bwdbuf
 26411 00003AAD BA[50A0]                	mov	dx,BWDBUF		;AN000; print out current directory string
 26412 00003AB0 89D3                    	mov	bx,dx			;AN000; get string pointer in bx
 26413 00003AB2 807F0300                	cmp	byte [bx+3],END_OF_LINE_OUT ; 0
 26414                                  					;AN000; see if only D:\,0
 26415 00003AB6 7504                    	jnz	short not_del_root	;AN000; no continue
 26416 00003AB8 C6470200                	mov	byte [bx+2],END_OF_LINE_OUT ; 0
 26417                                  					;AN000; yes, get rid of \ ;
 26418                                  not_del_root:				;AN000;
 26419 00003ABC 8916[37A1]              	mov	[string_ptr_2],dx 	;AN000;
 26420                                  	;mov	dx,offset trangroup:string_buf_ptr
 26421 00003AC0 BA[BA93]                	mov	dx,string_buf_ptr	;AN000;
 26422                                  	;invoke	std_printf		;AN000;
 26423 00003AC3 E8671A                  	call	std_printf
 26424                                  	;mov	dx,offset trangroup:dest
 26425 00003AC6 BA[DD9F]                	mov	dx,DEST			;AN000; print out file name string
 26426 00003AC9 8916[37A1]              	mov	[string_ptr_2],dx 	;AN000;
 26427                                  	;mov	dx,offset trangroup:string_buf_ptr
 26428 00003ACD BA[BA93]                	mov	dx,string_buf_ptr	;AN000;
 26429                                  	;invoke	std_printf		;AN000;
 26430 00003AD0 E85A1A                  	call	std_printf
 26431                                  	;mov	dx,offset trangroup:Del_Y_N_Ptr
 26432 00003AD3 BA[CF92]                	mov	dx,Del_Y_N_Ptr		;AN000; issue ", Delete (Y/N)?" message
 26433                                  	;invoke	std_printf		;AN000;
 26434 00003AD6 E8541A                  	call	std_printf
 26435                                  
 26436                                  ;;M029	mov	si,80H			;AN000; set up buffer for input
 26437                                  ;;M029	mov	dx,si			;AN000;
 26438                                  ;;M029	mov	word ptr [si],combuflen ;AN000;
 26439                                  ;;M029	mov	ax,(std_con_input_flush shl 8) or std_con_string_input	;AN000;
 26440                                  ;;M029	int	21h			;AN000; get input from the user
 26441                                  ;;M029	lodsw				;AN000;
 26442                                  ;;M029	or	ah,ah			;AN000; was a character entered?
 26443                                  ;;M029	jz	short slashp_askagn	;AN000; no - ask again
 26444                                  ;;M029	invoke	scanoff 		;AN000; scan off leading delimiters
 26445                                  
 26446                                  ;	Get a single character input.
 26447                                  
 26448                                  	;;mov	ax,(STD_CON_INPUT_FLUSH shl 8) or STD_CON_INPUT	;M029
 26449                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT
 26450 00003AD9 B8010C                  	mov	ax,0C01h
 26451 00003ADC CD21                    	int	21h			;M029
 26452                                  
 26453 00003ADE E87C01                  	call	char_in_xlat		;AN000; yes - upper case it
 26454                                  	;retc				;AN000; return if function not supported
 26455                                  	; 19/03/2023
 26456 00003AE1 7301                    	jnc	short slashp_check_yn
 26457                                  slashp_ans_no:
 26458 00003AE3 C3                      	retn
 26459                                  
 26460                                  slashp_check_yn:
 26461                                  	; 19/03/2023
 26462                                  	; AL = 0 if it was (country depended) NO character
 26463                                  	; AL = 1 if it was (country depenced) YES character
 26464                                  
 26465                                  	;cmp	al,capital_n		;AN000; was it no?
 26466                                  	;cmp	al,0
 26467 00003AE4 20C0                    	and	al,al ; 0
 26468 00003AE6 7420                    	jz	short next_del_file	;AN000; yes - don't delete file
 26469                                  	;cmp	al,capital_y		;AN000; was it yes?
 26470                                  	;cmp	al,1
 26471 00003AE8 FEC8                    	dec	al  ; 1-> 0 --> zf = 1
 26472                                  	;jz	short delete_this_file	;AN000; yes - delete the file
 26473                                  	;jmp	short slashp_askagn	;AN000; it was neither - ask again
 26474                                  	; 19/03/2023
 26475 00003AEA 75BE                    	jnz	short slashp_askagn
 26476                                  
 26477                                  delete_this_file:			;AN000;
 26478 00003AEC B413                    	mov	ah,FCB_Delete ; 13h	;AN000; delete the file
 26479                                  	;mov	dx,offset trangroup:destdir
 26480 00003AEE BA[0DA0]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 26481 00003AF1 CD21                    	int	21h			;AN000;
 26482 00003AF3 FEC0                    	inc	al			;AN000; did an error occur?
 26483 00003AF5 7511                    	jnz	short next_del_file	;AN000; no - get next file
 26484                                  ;
 26485                                  ;M041; Begin changes
 26486                                  ; We got an error deleting the file. If this is access denied, we can go on
 26487                                  ;to the next file after printing an error message.
 26488                                  ;
 26489                                  	;invoke	Get_ext_error_number	;see what error we got
 26490 00003AF7 E84AE7                  	call	get_ext_error_number
 26491 00003AFA 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 26492                                  					;is it access denied?
 26493 00003AFD 759C                    	jne	short stop_del		;no, some other error
 26494                                  	;invoke	CrLf2			;print a CR-LF
 26495 00003AFF E821F0                  	call	CRLF2
 26496                                  	;invoke set_ext_error_msg	;error message
 26497 00003B02 E82FE7                  	call	Set_Ext_Error_Msg
 26498                                  	;invoke	std_eprintf		;"Access denied"
 26499 00003B05 E81D1A                  	call	std_eprintf
 26500                                  	; 26/04/2023
 26501                                  	;jmp	short next_del_file	;try next file
 26502                                  	; 26/04/2023
 26503                                  ;stop_del:
 26504                                  ;;
 26505                                  ;;M041; End changes
 26506                                  ;;
 26507                                  ;	jmp	eraerr			;AN022; go to error exit - need long jmp
 26508                                  
 26509                                  next_del_file:				;AN000;
 26510                                  ;
 26511                                  ; M050 - begin
 26512                                  ; 	Norton Utilities 5.0 has a bug. DiskMon when invoked
 26513                                  ;       with /protect+ and /light+ makes it intercept all
 26514                                  ;       deletes. This hook does not save and restore the DTA correctly.
 26515                                  ;       They save the DWORD in a WORD by mistake! They save both the
 26516                                  ;       segment and the offset in the SAME variable (WORD)!!!
 26517                                  ;
 26518 00003B08 B41A                    	mov	ah,Set_DMA ; 1Ah
 26519                                  	;mov	dx,offset trangroup:destdir
 26520 00003B0A BA[0DA0]                	mov	dx,DESTDIR
 26521 00003B0D CD21                    	int	21h
 26522                                  ;
 26523                                  ; M050 - end
 26524                                  
 26525 00003B0F B412                    	mov	ah,Dir_Search_Next ; 12h
 26526                                  					;AN000; search for another file
 26527 00003B11 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000;
 26528 00003B14 CD21                    	int	21h			;AN000;
 26529 00003B16 FEC0                    	inc	al			;AN000; was a file found?
 26530                                  	;jz	short slash_p_exit	;AN000; no - exit
 26531                                  	;jmp	delete_prompt_loop	;AN000; yes - continue (need long jump)
 26532                                  	; 26/04/2023
 26533 00003B18 7583                    	jnz	short delete_prompt_loop
 26534                                  
 26535                                  slash_p_exit:
 26536                                  	;invoke	get_ext_error_number	;AN022; get the extended error number
 26537 00003B1A E827E7                  	call	get_ext_error_number
 26538 00003B1D 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	;AN022; was error file not found?
 26539 00003B20 7403                    	jz	short good_erase_exit 	;AN022; yes - clean exit
 26540 00003B22 E962E4                  	jmp	extend_setup		;AN022; go issue error message
 26541                                  
 26542                                  good_erase_exit:
 26543                                  	;invoke	restudir		;AN000; we're finished - restore user's dir
 26544 00003B25 E8B8EE                  	call	RestUDir
 26545                                  	;call	CRLF2			;AN000; print out carriage return, line feed
 26546                                  	;retn				;AN000; exit
 26547                                  	; 19/03/2023
 26548 00003B28 E9F8EF                  	jmp	CRLF2
 26549                                  
 26550                                  ; =============== S U B	R O U T	I N E =======================================
 26551                                  
 26552                                  ; ECHO, BREAK, and VERIFY commands. Check for "ON" and "OFF"
 26553                                  
 26554                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26555                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26556                                  _ECHO:
 26557 00003B2B E89900                  	call	ON_OFF
 26558 00003B2E 7212                    	jb	short DOEMES
 26559 00003B30 8E1E[159E]              	mov	ds,[RESSEG]
 26560 00003B34 7506                    	jnz	short ECH_OFF
 26561 00003B36 800E[3B02]01            	or	byte [EchoFlag],1
 26562 00003B3B C3                      	retn
 26563                                  
 26564                                  ECH_OFF:
 26565 00003B3C 8026[3B02]FE            	and	byte [EchoFlag],0FEh
 26566 00003B41 C3                      	retn
 26567                                  
 26568                                  	; 19/03/2023
 26569                                  	; MSDOS 6.0 (& MSDOS 5.0)
 26570                                  ;CERRORJ:
 26571                                  	;jmp	cerror
 26572                                  
 26573                                  ; There was no discrenable ON or OFF after the ECHO. If there is nothing but
 26574                                  ; delimiters on the command line, we issue the ECHO is ON/OFF message.
 26575                                  
 26576                                  DOEMES:
 26577                                  	; 19/03/2023
 26578                                  	; MSDOS 6.0
 26579                                  	;cmp	cl,0		;AC000; was anything on the line?
 26580 00003B42 20C9                    	and	cl,cl
 26581 00003B44 7409                    	jz	short PECHO	; just display current state.
 26582 00003B46 BA8200                  	mov	dx,82h		; Skip one char after "ECHO"
 26583 00003B49 E830F0                  	call	CRPRINT
 26584 00003B4C E9D4EF                  	jmp	CRLF2
 26585                                  
 26586                                  	; 19/03/2023
 26587                                  	; MSDOS 3.3
 26588                                  	;call	MOVE_TO_FIRST_ARG
 26589                                  	;jz	short PECHO
 26590                                  	;mov	dx,82h
 26591                                  	;call	CRPRINT
 26592                                  	;jmp	CRLF2
 26593                                  
 26594                                  PECHO:
 26595                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26596 00003B4F 8E1E[159E]              	mov	ds,[RESSEG]
 26597 00003B53 8A1E[3B02]              	mov	bl,[EchoFlag]
 26598 00003B57 0E                      	push	cs
 26599 00003B58 1F                      	pop	ds
 26600 00003B59 80E301                  	and	bl,1
 26601 00003B5C BA[7693]                	mov	dx,EchoMes_Ptr
 26602 00003B5F EB24                    	jmp	short PYN
 26603                                  
 26604                                  ; ---------------------------------------------------------------------------
 26605                                  
 26606                                  	; 19/03/2023
 26607                                  	; MSDOS 3.3
 26608                                  CERRORJ:
 26609 00003B61 E940F3                  	jmp	cerror
 26610                                  
 26611                                  ; =============== S U B	R O U T	I N E =======================================
 26612                                  
 26613                                  	; 19/03/2023
 26614                                  	; MSDOS 3.3
 26615                                  ;MOVE_TO_FIRST_ARG:
 26616                                  	;mov	si,81h
 26617                                  	;call	SCANOFF
 26618                                  	;cmp	al,0Dh
 26619                                  	;retn
 26620                                  
 26621                                  ; =============== S U B	R O U T	I N E =======================================
 26622                                  
 26623                                  CNTRLC:
 26624 00003B64 E86000                  	call	ON_OFF
 26625 00003B67 B80133                  	mov	ax,(Set_CTRL_C_Trapping<<8)|1 ; 3301h
 26626 00003B6A 720C                    	jc	short PCNTRLC
 26627 00003B6C 7505                    	jnz	short CNTRLC_OFF
 26628 00003B6E B201                    	mov	dl,1
 26629 00003B70 CD21                    	int	21h	; DOS -	EXTENDED CONTROL-BREAK CHECKING
 26630                                  			; AL = 00h get state / 01h set state / 02h set AND get
 26631                                  			; DL = 00h for OFF or 01h for ON
 26632 00003B72 C3                      	retn
 26633                                  
 26634                                  ; ---------------------------------------------------------------------------
 26635                                  
 26636                                  CNTRLC_OFF:
 26637 00003B73 30D2                    	xor	dl,dl
 26638 00003B75 CD21                    	int	21h		; Turn off ^C check
 26639 00003B77 C3                      	retn
 26640                                  
 26641                                  ; ---------------------------------------------------------------------------
 26642                                  
 26643                                  PCNTRLC:
 26644                                  	; 19/03/2023
 26645                                  	; MSDOS 6.0
 26646                                  	;cmp	cl,0		;AC000; rest of line blank?
 26647 00003B78 08C9                    	or	cl,cl
 26648 00003B7A 75E5                    	jnz	short CERRORJ 	; no, oops!
 26649                                  
 26650                                  	; 19/03/2023
 26651                                  	; MSDOS 3.3
 26652                                  	;call	MOVE_TO_FIRST_ARG
 26653                                  	;jnz	short CERRORJ
 26654                                  ;pccont:
 26655                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26656 00003B7C 30C0                    	xor	al,al
 26657 00003B7E CD21                    	int	21h		; get Ctrl-Break state (ah=33h)
 26658 00003B80 88D3                    	mov	bl,dl
 26659 00003B82 BA[5A93]                	mov	dx,CtrlcMes_Ptr
 26660                                  
 26661                                  ; ---------------------------------------------------------------------------
 26662                                  
 26663                                  PYN:	; write "ON" or "OFF" state 
 26664                                  
 26665                                  	; 26/04/2023
 26666                                  	; 19/03/2023
 26667                                  	; MSDOS 3.3
 26668                                  	;call	STD_PRINTF
 26669                                  	;mov	dx,ONMES_PTR	;AC000; get ON pointer
 26670                                  	;or	bl,bl
 26671                                  	;jnz	short PRINTVAL
 26672                                  	;mov	dx,OFFMES_PTR	;AC000; get OFF pointer
 26673                                  	
 26674                                  	; 26/04/2023
 26675                                  	; 19/03/2023
 26676                                  	; MSDOS 6.0
 26677 00003B85 BE[8793]                	mov	si,ONMES_PTR
 26678 00003B88 08DB                    	or	bl,bl
 26679 00003B8A 7503                    	jnz	short PRINTVAL
 26680 00003B8C BE[8493]                	mov	si,OFFMES_PTR
 26681                                  PRINTVAL:
 26682                                  	; 19/03/2023
 26683                                  	; MSDOS 3.3
 26684                                  	;jmp	STD_PRINTF
 26685                                  
 26686                                  	; 19/03/2023
 26687                                  	; MSDOS 6.0
 26688 00003B8F 52                      	push	dx		;AN000; save offset of message block
 26689 00003B90 89D3                    	mov	bx,dx		;AN000; save offset value
 26690 00003B92 AD                      	lodsw			;AN000; get message number of on or off
 26691 00003B93 B6FF                    	mov	dh,util_msg_class ; -1 ; 0FFh
 26692                                  				;AN000; this is a utility message
 26693 00003B95 E87A1A                  	call	TSYSGETMSG	;AN000; get the address of the message
 26694                                  	;add	bx,5
 26695 00003B98 83C305                  	add	bx,Ptr_off_pos	;AN000; point to offset of ON/OFF
 26696                                  	
 26697 00003B9B 8937                    	mov	[bx],si		;AN000; put the offset in the message block
 26698 00003B9D 5A                      	pop	dx		;AN000; get message back
 26699 00003B9E E88C19                  	call	std_printf	;AC000; go print message
 26700 00003BA1 C7070000                	mov	word [bx],0	;AN000; zero out message pointer
 26701 00003BA5 C3                      	retn			;AN000; exit
 26702                                  
 26703                                  ; =============== S U B	R O U T	I N E =======================================
 26704                                  
 26705                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.CO
 26706                                  VERIFY:
 26707 00003BA6 E81E00                  	call	ON_OFF
 26708 00003BA9 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 26709 00003BAC 720A                    	jc	short PVERIFY
 26710 00003BAE 7503                    	jnz	short VER_OFF
 26711 00003BB0 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 26712                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 26713 00003BB2 C3                      	retn
 26714                                  
 26715                                  ; ---------------------------------------------------------------------------
 26716                                  
 26717                                  VER_OFF:
 26718 00003BB3 FEC8                    	dec	al
 26719 00003BB5 CD21                    	int	21h		; Turn off verify after write
 26720 00003BB7 C3                      	retn
 26721                                  
 26722                                  ; ---------------------------------------------------------------------------
 26723                                  
 26724                                  PVERIFY:
 26725                                  	; 19/03/2023
 26726                                  	; MSDOS 6.0
 26727                                  	;cmp	cl,0		;AC000; is rest of line blank?
 26728 00003BB8 20C9                    	and	cl,cl
 26729 00003BBA 75A5                    	jnz	short CERRORJ 	; nope...
 26730                                  
 26731                                  	 ;19/03/2023
 26732                                  	; MSDOS 3.3
 26733                                  	;call	MOVE_TO_FIRST_ARG
 26734                                  	;jnz	short CERRORJ
 26735                                  
 26736 00003BBC B454                    	mov	ah,Get_Verify_On_Write ; 54h
 26737 00003BBE CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 26738                                  				; Return: AL = 00h if flag OFF
 26739                                  				; AL = 01h if flag ON
 26740 00003BC0 88C3                    	mov	bl,al
 26741 00003BC2 BA[6893]                	mov	dx,VeriMes_Ptr
 26742 00003BC5 EBBE                    	jmp	short PYN
 26743                                  
 26744                                  ; =============== S U B	R O U T	I N E =======================================
 26745                                  
 26746                                  ; ****************************************************************
 26747                                  ; *
 26748                                  ; * ROUTINE:	 ON_OFF
 26749                                  ; *
 26750                                  ; * FUNCTION:	 Parse the command line for an optional ON or
 26751                                  ; *		 OFF string for the BREAK, VERIFY, and ECHO
 26752                                  ; *		 routines.
 26753                                  ; *
 26754                                  ; * INPUT:	 command line at offset 81H
 26755                                  ; *		 PARSE_BREAK control block
 26756                                  ; *
 26757                                  ; * OUTPUT:	 If carry is clear
 26758                                  ; *		    If ON is found
 26759                                  ; *		       Zero flag set
 26760                                  ; *		    If OFF is found
 26761                                  ; *		       Zero flag clear
 26762                                  ; *		 If carry set
 26763                                  ; *		    If nothing on command line
 26764                                  ; *		       CL set to zero
 26765                                  ; *		    If error
 26766                                  ; *		       CL contains error value from parse
 26767                                  ; *
 26768                                  ; ****************************************************************
 26769                                  
 26770                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26771                                  ON_OFF:
 26772 00003BC7 BE8100                  	mov	si,81h
 26773                                  
 26774                                  	; 19/03/2023
 26775                                  	; MSDOS 3.3
 26776                                  	;call	SCANOFF		; scan off leading blanks & equal
 26777                                  	;cmp	al,0Dh		; are we at end of line?
 26778                                  	;je	short BAD_ONF	; yes, return error
 26779                                  	;lodsw
 26780                                  	;or	ax,2020h	; convert to lowercase
 26781                                  	;cmp	ax,6E6Fh ;'on'
 26782                                  	;je	short ON_CHECK
 26783                                  	;cmp	ax,666Fh ;'of'
 26784                                  	;jne	short BAD_ONF
 26785                                  	;lodsb
 26786                                  	;or	al,20h		; convert to lowercase		
 26787                                  	;cmp	al,66h	 ; 'f'
 26788                                  	;jne	short BAD_ONF	
 26789                                  	;or	al,66h ; or al,'f'
 26790                                  	;jmp	short OFF_CHECK
 26791                                  ;ON_CHECK:
 26792                                  	;xor	al,al
 26793                                  ;OFF_CHECK:
 26794                                  	;lahf
 26795                                  	;mov	bx,ax
 26796                                  	;call	SCANOFF		; scan off leading blanks & equal
 26797                                  	;cmp	al,0Dh		; are we at end of line?	
 26798                                  	;jne	short BAD_ONF	; no, return error
 26799                                  	;mov	ax,bx
 26800                                  	;sahf
 26801                                  	;clc
 26802                                  	;retn
 26803                                  
 26804                                  	; 19/03/2023
 26805                                  	; MSDOS 6.0
 26806                                  scan_on_off:			;AN032; scan off leading blanks & equal
 26807 00003BCA AC                      	lodsb			;AN032; get a char
 26808                                  	;cmp	al,blank	;AN032; if whitespace
 26809 00003BCB 3C20                    	cmp	al,20h
 26810 00003BCD 74FB                    	je	short scan_on_off
 26811                                  				;AN032;    keep scanning
 26812 00003BCF 3C09                    	cmp	al,tab_chr	;AN032; if tab
 26813                                  	;cmp	al,09h
 26814 00003BD1 74F7                    	je	short scan_on_off
 26815                                  				;AN032;    keep scanning
 26816                                  	;cmp	al,equal_chr	;AN032; if equal char
 26817 00003BD3 3C3D                    	cmp	al,'=' ; 3Dh
 26818 00003BD5 7401                    	je	short parse_on_off
 26819                                  				;AN032;    start parsing
 26820 00003BD7 4E                      	dec	si		;AN032; if none of above - back up
 26821                                  
 26822                                  parse_on_off:			;AN032;    and start parsing
 26823 00003BD8 BF[C397]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26824 00003BDB 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 26825 00003BDD 31D2                    	xor	dx,dx		;AN000;
 26826 00003BDF E87A0E                  	call	cmd_parse	;AC000; call parser
 26827                                  	;cmp	ax,-1 ; 0FFFFh
 26828 00003BE2 83F8FF                  	cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 26829 00003BE5 742E                    	je	short BADONF	;AC000; yes, return error
 26830                                  	;cmp	ax,RESULT_NO_ERROR ;AN000; did an error occur
 26831                                  	;cmp	ax,0
 26832 00003BE7 21C0                    	and	ax,ax ; ax = 0 ?
 26833 00003BE9 7404                    	jz	short on_off_there
 26834                                  				;AN000; no - continue
 26835 00003BEB 89C1                    	mov	cx,ax		;AN000; yes - set cl to error code
 26836 00003BED EB26                    	jmp	short BADONF	;AN000; return error
 26837                                  
 26838                                  on_off_there:
 26839 00003BEF 803E[88AA]FF            	cmp	byte [PARSE1_CODE],-1 ; 0FFh
 26840                                  				;AN014; was a valid positional present?
 26841 00003BF4 7505                    	jnz	short good_on_off
 26842                                  				;AN014; yes - continue
 26843 00003BF6 B90A00                  	mov	cx,BadParm_Ptr	;AN014; something other than ON/OFF
 26844                                  	;mov	cx,10 ; 0Ah
 26845 00003BF9 EB1A                    	jmp	short BADONF	;AN014; return error
 26846                                  
 26847                                  good_on_off:			;AN014;
 26848 00003BFB 31C0                    	xor	ax,ax		;AC000; set up return code for
 26849 00003BFD 0A06[88AA]              	or	al,[PARSE1_CODE]
 26850                                  				;AC000;    ON or OFF in AX
 26851 00003C01 9C                      	pushf			;AN000; save flags
 26852 00003C02 BF[C397]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26853 00003C05 31D2                    	xor	dx,dx		;AN000;
 26854 00003C07 E8520E                  	call	cmd_parse	;AN000; call parser
 26855 00003C0A 83F8FF                  	cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 26856                                  	;cmp	ax,-1 ; 0FFFFh
 26857 00003C0D 7503                    	jne	short BADONF_flags
 26858                                  				;AN000; NO, return error
 26859 00003C0F 9D                      	popf			;AN000; restore flags
 26860 00003C10 F8                      	clc			;AC000; no error
 26861                                  	;jmp	short on_off_end
 26862                                  				;AN000; return to caller
 26863                                  	; 26/04/2023
 26864 00003C11 C3                      	retn
 26865                                  
 26866                                  BADONF_flags:
 26867 00003C12 89C1                    	mov	cx,ax
 26868 00003C14 9D                      	popf
 26869                                  
 26870                                  ; ---------------------------------------------------------------------------
 26871                                  
 26872                                  ; No discernable ON or OFF has been found. Put an error message pointer in DX
 26873                                  ; and return the error
 26874                                  
 26875                                  BADONF:
 26876 00003C15 BA[3793]                	mov	dx,bad_on_off_ptr
 26877 00003C18 F9                      	stc
 26878                                  on_off_end:
 26879 00003C19 C3                      	retn
 26880                                  
 26881                                  ;============================================================================
 26882                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (2)
 26883                                  ;============================================================================
 26884                                  ; 02/10/2018 - Retro DOS v3.0
 26885                                  
 26886                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29BFh
 26887                                  
 26888                                  ; =============== S U B	R O U T	I N E =======================================
 26889                                  
 26890                                  	; 20/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26891                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3876h
 26892                                  	
 26893                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 26894                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3E20h
 26895                                  PRINT_DATE:
 26896                                  	; 20/03/2023
 26897                                  	; MSDOS 3.3
 26898                                  	;push	es
 26899                                  	;push	di
 26900                                  	;push	cs
 26901                                  	;pop	es
 26902                                  	;mov	di,ARG_BUF
 26903                                  	;mov	ah,Get_Date ; 2Ah
 26904                                  	;int	21h	; DOS -	GET CURRENT DATE
 26905                                  	;		; Return: DL = day,DH = month,	CX = year
 26906                                  	;		; AL = day of the week (0=Sunday,1=Monday,etc.)
 26907                                  	;cbw
 26908                                  	;call	GETDATE
 26909                                  	;call	P_DATE
 26910                                  	;xor	al,al
 26911                                  	;stosb
 26912                                  	;mov	dx,ARG_BUF_PTR
 26913                                  	;call	STD_PRINTF
 26914                                  		; 20/03/2023 (MSDOS 3.3 COMMAND.COM - TRANGROUP:29DAh)
 26915                                  	;pop	es ; !!??!! 
 26916                                  	;pop	di
 26917                                  	;retn
 26918                                  
 26919                                  	; 20/03/2023
 26920                                  	; MSDOS 6.0
 26921 00003C1A 06                      	push	es
 26922 00003C1B 57                      	push	di
 26923 00003C1C 0E                      	push	cs
 26924 00003C1D 07                      	pop	es
 26925 00003C1E E81300                  	call	GetDate 		; get date
 26926 00003C21 86F2                    	xchg	dh,dl			;AN000; switch month & day
 26927 00003C23 890E[F193]              	mov	[promptDat_yr],cx 	;AC000; put year into message control block
 26928 00003C27 8916[F393]              	mov	[promptDat_moday],dx	;AC000; put month and day into message control block
 26929 00003C2B BA[E193]                	mov	dx,promptdat_ptr	;AC000; set up message for output
 26930 00003C2E E8FC18                  	call	std_printf
 26931                                  	;AD061; mov word [promptDat_yr],0 ;AC000; reset year, month and day
 26932                                  	;AD061; mov word [promptDat_moday],0 ;AC000; pointers in control block
 26933 00003C31 5F                      	pop	di			;AC000; restore di,es
 26934 00003C32 07                      	pop	es			;AC000;
 26935 00003C33 C3                      	retn
 26936                                  
 26937                                  ; ---------------------------------------------------------------------------
 26938                                  
 26939                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26940                                  
 26941                                  ;GETDATE:
 26942                                  	; 21/03/2023
 26943                                  	; MSDOS 3.3
 26944                                  	;mov	si,ax
 26945                                  	;shl	si,1
 26946                                  	;add	si,ax
 26947                                  	;add	si,WEEKTAB ; "SunMonTueWedThuFriSat"
 26948                                  	;mov	bx,cx
 26949                                  	;mov	cx,3
 26950                                  	;rep	movsb
 26951                                  	;mov	al,' '
 26952                                  	;stosb
 26953                                  	;retn
 26954                                  
 26955                                  	; 21/03/2023
 26956                                  	; MSDOS 6.0
 26957                                  
 26958                                  ; Do GET DATE system call and set up 3 character day of week in ARG_BUF
 26959                                  ; for output. Date will be returned in CX,DX.
 26960                                  
 26961                                  GetDate:
 26962 00003C34 BF[B3A0]                	mov	di,Arg_Buf		;AC000; target for day of week
 26963 00003C37 B42A                    	mov	ah,Get_Date ;2Ah	;AC000; get current date
 26964 00003C39 CD21                    	int	21h			;AC000; Get date in CX:DX
 26965 00003C3B 98                      	cbw				;AC000;
 26966 00003C3C 51                      	push	cx			;AN000; save date returned in
 26967 00003C3D 52                      	push	dx			;AN000;  CX:DX
 26968 00003C3E 89C6                    	mov	si,ax
 26969 00003C40 D1E6                    	shl	si,1
 26970 00003C42 01C6                    	add	si,ax			; SI=AX*3
 26971 00003C44 89F1                    	mov	cx,si			;AN000; save si
 26972 00003C46 A1[AA92]                	mov	ax,[WeekTab]		;AN000; get message number of weektab
 26973 00003C49 B6FF                    	mov	dh,util_msg_class ;0FFh	;AN000; this is a utility message
 26974 00003C4B 57                      	push	di			;AN000; save argument buffer
 26975 00003C4C E8C319                  	call	TSYSGETMSG		;AN000; get the address of the message
 26976 00003C4F 5F                      	pop	di			;AN000; retrieve argument buffer
 26977 00003C50 01CE                    	add	si,cx			;AC000; get day of week
 26978 00003C52 B90300                  	mov	cx,3
 26979 00003C55 F3A4                      	rep	movsb
 26980 00003C57 B000                    	mov	al,END_OF_LINE_OUT ; 0	;AC000; terminate the string
 26981 00003C59 AA                      	stosb
 26982 00003C5A 5A                      	pop	dx			;AN000; get back date
 26983 00003C5B 59                      	pop	cx			;AN000;
 26984 00003C5C C3                      	retn
 26985                                  
 26986                                  ; =============== S U B	R O U T	I N E =======================================
 26987                                  
 26988                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26989                                  
 26990                                  	; MSDOS 6.0
 26991                                  
 26992                                  ; This routine determines whether the character in AL is a
 26993                                  ; Yes or No character. On return, if AL=0, the character is
 26994                                  ; No, if AL=1, the character is Yes.
 26995                                  
 26996                                  ;	assume	ds:trangroup
 26997                                  
 26998                                  char_in_xlat:	; proc	near
 26999                                  	; 21/03/2023
 27000 00003C5D 88C2                    	mov	dl,al			;AC000; get character into DX
 27001 00003C5F 30F6                    	xor	dh,dh			;AC000;
 27002                                  	;mov	ax,(GetExtCntry<<8)+35	;AC000; Yes/No char call
 27003 00003C61 B82365                  	mov	ax,6523h
 27004 00003C64 CD21                    	int	21h			;AC000;
 27005 00003C66 C3                      	retn
 27006                                  
 27007                                  ;char_in_xlat	endp
 27008                                  
 27009                                  ;============================================================================
 27010                                  ; TENV.ASM, MSDOS 6.0, 1991
 27011                                  ;============================================================================
 27012                                  ; 02/10/2018 - Retro DOS v3.0
 27013                                  
 27014                                  ;	Environment utilities and misc. routines
 27015                                  
 27016                                  ; MSDOS 6.0
 27017                                  ; ****************************************************************
 27018                                  ; *
 27019                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 27020                                  ; *
 27021                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 27022                                  ; *		 the character in AL from the file upper case table
 27023                                  ; *		 in DOS if character if above  ascii 128, else
 27024                                  ; *		 subtracts 20H if between "a" and "z".
 27025                                  ; *
 27026                                  ; * INPUT:	 AL	      char to be upper cased
 27027                                  ; *		 FUCASE_ADDR  set to the file upper case table
 27028                                  ; *
 27029                                  ; * OUTPUT:	 AL	      upper cased character
 27030                                  ; *
 27031                                  ; ****************************************************************
 27032                                  ;
 27033                                  ;assume	ds:trangroup				;AN000;
 27034                                  ;
 27035                                  ;upconv	proc	near				;AN000;
 27036                                  ;
 27037                                  ;	cmp	al,80h				;AN000;  see if char is > ascii 128
 27038                                  ;	jb	oth_fucase			;AN000;  no - upper case math
 27039                                  ;	sub	al,80h				;AN000;  only upper 128 chars in table
 27040                                  ;	push	ds				;AN000;
 27041                                  ;	push	bx				;AN000;
 27042                                  ;	mov	ds,[resseg]			;AN000;  get resident data segment
 27043                                  ;assume	ds:resgroup				;AN000;
 27044                                  ;	lds	bx,dword ptr FUCase_Addr+1	;AN000;  get table address
 27045                                  ;	add	bx,2				;AN000;  skip over first word
 27046                                  ;	xlat	ds:byte ptr [bx]		;AN000;  convert to upper case
 27047                                  ;	pop	bx				;AN000;
 27048                                  ;	pop	ds				;AN000;
 27049                                  ;assume	ds:trangroup				;AN000;
 27050                                  ;	jmp	short upconv_end		;AN000;  we finished - exit
 27051                                  ;
 27052                                  ;oth_fucase:					;AN000;
 27053                                  ;	cmp	al,small_a			;AC000; if between "a" and "z",
 27054                                  ;	jb	upconv_end			;AC000;     subtract 20h to get
 27055                                  ;	cmp	al,small_z			;AC000;    upper case equivalent.
 27056                                  ;	ja	upconv_end			;AC000;
 27057                                  ;	sub	al,20h				;AC000; Change lower-case to upper
 27058                                  ;
 27059                                  ;upconv_end:					;AN000;
 27060                                  ;	ret
 27061                                  ;
 27062                                  ;upconv	endp					;AN000;
 27063                                  
 27064                                  ;============================================================================
 27065                                  ; COPY.ASM, MSDOS 6.0, 1991
 27066                                  ;============================================================================
 27067                                  ; 01/10/2018 - Retro DOS v3.0
 27068                                  
 27069                                  ;	title	COMMAND COPY routines.
 27070                                  
 27071                                  ;/*
 27072                                  ; *                      Microsoft Confidential
 27073                                  ; *                      Copyright (C) Microsoft Corporation 1991
 27074                                  ; *                      All Rights Reserved.
 27075                                  ; */
 27076                                  
 27077                                  ;***	COPY.ASM
 27078                                  
 27079                                  ;Source files:  copy.asm, copypr1.asm, copypr2.asm
 27080                                  
 27081                                  
 27082                                  ;***	MODIFICATION HISTORY
 27083                                  
 27084                                  ;11/01/83 EE  Added a few lines at the end of SCANSRC2 to get multiple
 27085                                  ;	     file concatenations (eg copy a.*+b.*+c.*) to work properly.
 27086                                  ;11/02/83 EE  Commented out the code in CPARSE which added drive designators
 27087                                  ;	     to tokens which begin with path characters so that PARSELINE
 27088                                  ;	     will work correctly.
 27089                                  ;11/04/83 EE  Commented out the code in CPARSE that considered paren's to be
 27090                                  ;	     individual tokens. That distinction is no longer needed for
 27091                                  ;	     FOR loop processing.
 27092                                  ;11/17/83 EE  CPARSE upper case conversion is now flag dependent. Flag is
 27093                                  ;	     1 when Cparse is called from COPY.
 27094                                  ;11/17/83 EE  Took out the comment chars around code described in 11/04/83
 27095                                  ;	     mod. It now is conditional on flag like previous mod.
 27096                                  ;11/21/83 NP  Added printf
 27097                                  ;12/09/83 EE  CPARSE changed to use CPYFLAG to determine when a colon should
 27098                                  ;	     be added to a token.
 27099                                  ;05/30/84 MZ  Initialize all copy variables. Fix confusion with destclosed
 27100                                  ;	     NOTE: DestHand is the destination handle. There are two
 27101                                  ;	     special values: -1 meaning destination was never opened and
 27102                                  ;	     0 which means that the destination has been openned and
 27103                                  ;	     closed.
 27104                                  ;06/01/84 MZ  Above reasoning totally specious. Returned things to normal
 27105                                  ;06/06/86 EG  Change to fix problem of source switches /a and /b getting
 27106                                  ;	     lost on large and multiple file (wildcard) copies.
 27107                                  ;06/09/86 EG  Change to use xnametrans call to verify that source and
 27108                                  ;	     destination are not equal.
 27109                                  ;
 27110                                  ;06/24/90 DO  If the destination of a file concatenation is the same as
 27111                                  ;	     first source file AND we run out of disk space before
 27112                                  ;	     completing the concatenation, restore the first source
 27113                                  ;	     file as best we can. See SeekEnd and CopErr. Bug #859.
 27114                                  ;
 27115                                  ;M031 SR 10/11/90  Bug #3069. Use deny write sharing mode to open files
 27116                                  ;		instead of compatibility mode. This gives lesser sharing
 27117                                  ;		violations when files are opened for read on a copy.
 27118                                  
 27119                                  ; ---------------------------------------------------------------------------
 27120                                  ;***	COPY CODE
 27121                                  ; ---------------------------------------------------------------------------
 27122                                  
 27123                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2A15h
 27124                                  
 27125                                  ; 23/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27126                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 38C3h
 27127                                  
 27128                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27129                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3E6Dh
 27130                                  
 27131                                  COPY:
 27132                                  	; 	Initialize internal variables.
 27133                                  
 27134 00003C67 31C0                    	xor	ax,ax		; AX = 0
 27135 00003C69 A3[39A1]                	mov	[Copy_num],ax	; # files copied (destinations) = 0
 27136 00003C6C A3[69A2]                	mov	[SRCPT],ax	; cmd line ptr for source scan = 0
 27137 00003C6F A3[B5A1]                	mov	[SrcTail],ax	; ptr to last element of source pathname = 0
 27138 00003C72 A2[349E]                	mov	[CFLAG],al	; 'destination file created' = false
 27139 00003C75 A3[3A9E]                	mov	[NXTADD],ax	; ptr into TPA buffer = 0
 27140 00003C78 A3[309E]                	mov	[DestSwitch],ax	; destination switches = none
 27141 00003C7B A3[8DA2]                	mov	[STARTEL],ax	; CParse ptr to last pathname element = 0
 27142 00003C7E A3[52A1]                	mov	[DestTail],ax	; ptr to last element of dest pathname = 0
 27143 00003C81 A2[359E]                	mov	[DestClosed],al	; 'destination file closed' = false
 27144 00003C84 A2[51A1]                	mov	[DestSiz],al	; length of destination pathname = 0
 27145 00003C87 A2[B4A1]                	mov	[SrcSiz],al	; length of source pathname = 0
 27146 00003C8A A2[54A1]                	mov	[DestInfo],al	; destination pathname flags = none
 27147 00003C8D A2[B7A1]                	mov	[SrcInfo],al	; source pathname flags = none
 27148 00003C90 A2[6BA2]                	mov	[INEXACT],al	; 'inexact copy' = false
 27149 00003C93 A2[50A1]                	mov	[DestVars],al	; 'dest pathname is directory' = false  ;*!*
 27150 00003C96 A2[B3A1]                	mov	[SrcVars],al	; 'source pathname is directory' = false
 27151 00003C99 A2[F79C]                	mov	[USERDIR1],al	; saved working directory = null
 27152 00003C9C A2[6CA2]                	mov	[NOWRITE],al	; 'no write' (source = dest) = false
 27153 00003C9F A2[289E]                	mov	[RDEOF],al	; 'read end of file' = false
 27154 00003CA2 A3[0FA2]                	mov	[SRCHAND],ax	; source handle = 0
 27155 00003CA5 A3[74A2]                	mov	[CPDATE],ax	; copy date = 0
 27156 00003CA8 A3[76A2]                	mov	[CPTIME],ax	; copy time = 0
 27157 00003CAB A2[11A2]                	mov	[SRCISDEV],al	; 'source is device' = false
 27158                                  	; 23/03/2023
 27159                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM	
 27160 00003CAE A2[7CA2]                	mov	[OCtrlZ],al	; 'Ctrl+Z removed from original' = false
 27161 00003CB1 A3[78A2]                	mov	[OFilePtr_Lo],ax
 27162 00003CB4 A3[7AA2]                	mov	[OFilePtr_Hi],ax ; original destination file ptr = null
 27163 00003CB7 A2[70A2]                	mov	[TERMREAD],al	; 'terminate read' = false
 27164 00003CBA A2[ACA0]                	mov	[comma],al	; '"+,," found' = false
 27165 00003CBD A2[ADA0]                	mov	[plus_comma],al ; '"+,," found last time' = false (?)
 27166 00003CC0 A2[CAA2]                	mov	[msg_flag],al	;AN022; 'non-utility msg issued' = false
 27167 00003CC3 A3[329E]                	mov	[AllSwitch],ax	; all switches = none
 27168 00003CC6 A2[2B9E]                	mov	[ArgC],al	; source/dest argument count = 0
 27169 00003CC9 A2[72A2]                	mov	[PLUS],al	; '"+" in command line' = false
 27170 00003CCC A2[6DA2]                	mov	[BINARY],al	; 'binary copy' = false
 27171 00003CCF A2[71A2]                	mov	[ASCII],al	; 'ascii copy' = false
 27172 00003CD2 A3[439E]                	mov	[FileCnt],ax	; # files copied (destinations) = 0
 27173 00003CD5 A3[6EA2]                	mov	[WRITTEN],ax	; 'destination written to' = false
 27174 00003CD8 A2[2A9E]                	mov	[Concat],al	; 'concatenating' = false
 27175 00003CDB A2[B0A1]                	mov	[MELCOPY],al	; 'Mel Hallerman copy' = false
 27176 00003CDE A3[B1A1]                	mov	[MELSTART],ax	; Mel Hallerman cmd line ptr = 0
 27177                                  	
 27178                                  	; 12/06/2023
 27179                                  	; MSDOS 6.22 COMMAND.COM
 27180                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27181 00003CE1 A2[89A2]                	mov     [cox_dest_file], al ; MSDOS 6.22
 27182 00003CE4 A2[8AA2]                	mov     [cox_src_file], al  ; MSDOS 6.22
 27183                                  
 27184                                  	;	Initialize buffers with double-nulls.
 27185                                  
 27186 00003CE7 A3[12A2]                	mov	[ScanBuf],ax
 27187 00003CEA A3[55A1]                	mov	[DestBuf],ax
 27188 00003CED A3[B8A1]                	mov	[SrcBuf],ax
 27189 00003CF0 A3[96A0]                	mov	[SDIRBUF],ax
 27190 00003CF3 A3[50A0]                	mov	[DIRBUF],ax
 27191 00003CF6 A3[0DA0]                	mov	[DestFcb],ax
 27192                                  
 27193 00003CF9 A2[73A2]                	mov	[objcnt],al	; # CParse cmd-line objects found = 0
 27194                                  		
 27195 00003CFC 48                      	dec	ax ; -1		; AX = 0FFFFh
 27196 00003CFD A3[ACA1]                	mov	[DESTHAND],ax	; destination handle = 'never opened'
 27197 00003D00 A2[3C9E]                	mov	[FRSTSRCH],al	; 'first search for source' = true
 27198 00003D03 A2[AFA1]                	mov	[FIRSTDEST],al	; 'first time for dest' = true
 27199 00003D06 A2[50A1]                	mov	[DestIsDir],al	; 'haven't analyzed destination' ; *!*
 27200                                  
 27201                                  	; 12/06/2023
 27202                                  	; Retro DOS v4.2 COMMAND.COM
 27203                                  	; MSDOS 6.22 COMMAND.COM code only !
 27204                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27205                                  	;
 27206 00003D09 E8F306                  	call	init_copycmd_option ; MSDOS 6.22 
 27207                                  		
 27208 00003D0C BE8100                  	mov	si,81h		; SI = ptr to command line
 27209                                  	;mov	bl,[PLUS_CHR]	; BL = special delimiter = "+"
 27210                                  	; 23/03/2023
 27211 00003D0F B32B                    	mov	bl,'+'
 27212 00003D11 FE06[C9A2]              	inc	byte [expand_star] ; CParse 'expand * to ?s' = true
 27213 00003D15 C606[3BA1]01            	mov	byte [cpyflag],1 ; CParse 'called from COPY' = true
 27214                                  
 27215                                  	;*	Scan the command line for destination information.
 27216                                  
 27217                                  DESTSCAN:
 27218 00003D1A 31ED                    	xor	bp,bp			; BP = switch flag accumulator
 27219 00003D1C BF[12A2]                	mov	di,ScanBuf		; ES:DI = ptr to pathname buf
 27220                                  	; 23/03/2023
 27221 00003D1F 8936[AFA0]              	mov	[parse_last],si		;AN018; save cmd line ptr
 27222 00003D23 E8710B                  	call	cparse			; parse next object
 27223 00003D26 9C                      	pushf	; (*)			; save CParse flags
 27224 00003D27 FE06[73A2]              	inc	byte [objcnt]		; count object
 27225 00003D2B F6C780                  	test	bh,80h
 27226 00003D2E 7405                    	jz	short NOCOPY		; no "+" delimiter
 27227 00003D30 C606[72A2]01            	mov	byte [PLUS],1		; "+" delimiter occurred
 27228                                  NOCOPY:
 27229 00003D35 F6C701                  	test	bh,1
 27230 00003D38 747D                    	jz	short TESTP2		; not a switch
 27231                                  
 27232                                  	;	Found a switch.
 27233                                  
 27234                                  	; 23/03/2023 - Retro DOS v4.0 COMMAND.COM
 27235                                  	;
 27236                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27237                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F43h
 27238                                  CHK_CP_SWITCH:
 27239                                  	; MSDOS 6.0
 27240 00003D3A F7C51000                	test	bp,10h
 27241                                  	;test	bp,SwitchV ; 10h	;AN038; Verify requested?
 27242 00003D3E 740B                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 27243                                  	;test	word [AllSwitch],10h
 27244 00003D40 F606[329E]10            	test	byte [AllSwitch],10h
 27245                                  	;test	byte [AllSwitch],SwitchV ;AN038; Verify already entered?
 27246 00003D45 7404                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 27247                                  ;AD018; ;or	word [AllSwitch],FBadSwitch ;AN038; Set up bad switch
 27248                                  	;or	bp,FBadSwitch		;AN018; Set up bad switch
 27249 00003D47 81CD0040                	or	bp,4000h
 27250                                  NOT_SLASHV:
 27251                                  	; ****************************************
 27252                                  	; 12/06/2023
 27253                                  	; Retro DOS v4.2 COMMAND.COM
 27254                                  	; MSDOS 6.22 COMMAND.COM code only !
 27255                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27256                                  	; ****************************************
 27257                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F55h
 27258                                  	;
 27259 00003D4B F7C54000                	test    bp,40h			; negative Y (-Y) switch flag
 27260 00003D4F 7417                    	jz	short CHK_SLASHY0
 27261                                  	;
 27262                                  	;test	word [AllSwitch],40h
 27263 00003D51 F606[329E]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 27264 00003D56 7507                    	jnz	short NOT_SLASHY1	; N flag
 27265                                  	;test	word [AllSwitch],80h
 27266 00003D58 F606[329E]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 27267 00003D5D 7404                    	jz	short NOT_SLASHY2
 27268                                  NOT_SLASHY1:
 27269 00003D5F 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 27270                                  NOT_SLASHY2:				; Set up bad switch
 27271 00003D63 C606[88A2]00            	mov	byte [cox_y_override],0	; cox_y setting will be used
 27272                                  CHK_SLASHY0:
 27273 00003D68 F7C58000                	test    bp,80h
 27274 00003D6C 742B                    	jz      short CHK_SLASHY4	; not a /Y switch
 27275                                  	;
 27276 00003D6E 8A04                    	mov	al,[si]
 27277 00003D70 3C79                    	cmp	al,'y'
 27278 00003D72 740A                    	je	short CHK_SLASHY1
 27279 00003D74 3C59                    	cmp	al,'Y'
 27280 00003D76 7406                    	je	short CHK_SLASHY1
 27281 00003D78 81CD0040                	or	bp,4000h		; FBadSwitch
 27282                                  	;				; Set up bad switch
 27283 00003D7C EB1B                    	jmp	short CHK_SLASHY4
 27284                                  CHK_SLASHY1:
 27285 00003D7E C60420                  	mov	byte [si],20h ; ' '
 27286 00003D81 46                      	inc	si
 27287                                  	;test	word [AllSwitch],40h
 27288 00003D82 F606[329E]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 27289 00003D87 7507                    	jnz	short CHK_SLASHY2	; N flag
 27290                                  	;test	word [AllSwitch],80h
 27291 00003D89 F606[329E]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 27292 00003D8E 7404                    	jz	short CHK_SLASHY3
 27293                                  CHK_SLASHY2:
 27294 00003D90 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 27295                                  	;				; Set up bad switch
 27296                                  CHK_SLASHY3:
 27297 00003D94 C606[88A2]01            	mov	byte [cox_y_override],1
 27298                                  CHK_SLASHY4:
 27299                                  	; ****************************************
 27300                                  	; 12/06/2023
 27301                                  ;NOT_SLASHV:
 27302                                  	;or	[DestSwitch],bp		; assume destination
 27303                                  	;or	[AllSwitch],bp		; keep tabs on all switches
 27304                                  
 27305                                  	; 12/06/2023
 27306                                  	; Retro DOS v4.2 COMMAND.COM
 27307                                  	; MSDOS 6.22 COMMAND.COM -TRANGROUP:3FA7h
 27308 00003D99 092E[309E]              	or	[DestSwitch],bp		; set [DestSwitch] SwitchY flag to 1
 27309 00003D9D 092E[329E]              	or	[AllSwitch],bp		; set [AllSwitch] SwitchY flag to 1
 27310                                  	;test	bp,~SwitchCopy		; Bad switch?
 27311 00003DA1 F7C5237F                	test	bp,7F23h ; MSDOS 6.22	; ~SwitchCopy ; not SwitchCopy
 27312 00003DA5 740A                    	jz	short NOT_BAD_SWITCH	; Switches are okay
 27313                                  
 27314                                  	; 12/06/2023
 27315                                  	; 23/03/2023
 27316                                  	; MSDOS 6.0
 27317                                  	;;test	bp,not SwitchCopy	;AN018; Bad switch?
 27318                                  	;test	bp,7FE3h ; test bp,~SwitchCopy
 27319                                  	;jz	short NOT_BAD_SWITCH	;AN018; Switches are okay
 27320                                  	
 27321 00003DA7 9D                      	popf	; (*)			;AN018; fix up stack
 27322 00003DA8 B80300                  	mov	ax,BadSwt_Ptr ; 3	;AN018; get "Invalid switch" message number
 27323 00003DAB E86CE9                  	call	setup_parse_error_msg	;AN018; setup to print the message
 27324 00003DAE E9F3F0                  	jmp	cerror			;AC018; exit
 27325                                  NOT_BAD_SWITCH:
 27326 00003DB1 9D                      	popf				; restore CParse flags
 27327 00003DB2 7235                    	jc	short CHECKDONE		; found CR
 27328 00003DB4 E963FF                  	jmp	DESTSCAN		; continue scanning for destination
 27329                                  TESTP2:
 27330 00003DB7 9D                      	popf	; (*)			; restore CParse flags
 27331 00003DB8 722F                    	jc	short CHECKDONE		; found CR
 27332 00003DBA F6C780                  	test	bh,80h
 27333 00003DBD 7504                    	jnz	short GOTPLUS		; found a "+pathname" argument
 27334 00003DBF FE06[2B9E]              	inc	byte [ArgC]		; count independent pathname args
 27335                                  GOTPLUS:
 27336 00003DC3 56                      	push	si			; save cmd line ptr
 27337 00003DC4 A1[8DA2]                	mov	ax,[STARTEL]		; AX = ptr to last path element
 27338 00003DC7 BE[12A2]                	mov	si,ScanBuf		; SI = ptr to path string
 27339 00003DCA 29F0                    	sub	ax,si			; AX = offset of last element
 27340 00003DCC BF[55A1]                	mov	di,DestBuf		; DI = ptr to destination buf
 27341 00003DCF 01F8                    	add	ax,di			; AX = ptr to last element in
 27342                                  					;  destination path buffer
 27343 00003DD1 A3[52A1]                	mov	[DestTail],ax		; save ptr to last element
 27344 00003DD4 880E[51A1]              	mov	[DestSiz],cl		; save path string length
 27345 00003DD8 41                      	inc	cx			; CX = mov length (incl null)
 27346 00003DD9 F3A4                    	rep	movsb			; DestBuf = possible destination path
 27347 00003DDB 883E[54A1]              	mov	[DestInfo],bh		; save CParse info flags
 27348 00003DDF C706[309E]0000          	mov	word [DestSwitch],0	; clear destination switches
 27349 00003DE5 5E                      	pop	si			; SI = ptr into cmd line again
 27350 00003DE6 E931FF                  	jmp	DESTSCAN		;AC018; continue scanning for dest
 27351                                  
 27352                                  CHECKDONE:
 27353                                  	;	We reached the CR. The destination scan is finished.
 27354                                  
 27355                                  	;	Disallow "copy file1+" as file overwriting itself.
 27356                                  	;
 27357                                  	;	(Note that "copy file1+file2+" will be accepted, and
 27358                                  	;	equivalent to "copy file1+file2".)
 27359                                  
 27360                                  	;	Bugbug: it looks like "copy /x file1+" would slip
 27361                                  	;	through this check, since the switch would count
 27362                                  	;	as another object in ObjCnt.
 27363                                  
 27364 00003DE9 803E[72A2]01            	cmp	byte [PLUS],1		; "+" with
 27365 00003DEE 7514                    	jnz	short CDCONT
 27366 00003DF0 803E[2B9E]01            	cmp	byte [ArgC],1		; one arg,
 27367 00003DF5 750D                    	jnz	short CDCONT
 27368 00003DF7 803E[73A2]02            	cmp	byte [objcnt],2		; two objects..
 27369 00003DFC 7506                    	jnz	short CDCONT
 27370 00003DFE BA[1C92]                	mov	dx,OVERWR_PTR
 27371 00003E01 E9AE07                  	jmp	COPYERR			; is file overwrite
 27372                                  
 27373                                  CDCONT:
 27374 00003E04 A0[72A2]                	mov	al,[PLUS]		; AL = '"+" occurred'
 27375 00003E07 A2[2A9E]                	mov	[Concat],al		; if "+" occurred, we're concatenating
 27376 00003E0A D0E0                    	shl	al,1
 27377 00003E0C D0E0                    	shl	al,1
 27378 00003E0E A2[6BA2]                	mov	[INEXACT],al		; therefore making an inexact copy
 27379                                  	;mov	dx,BADARGSPTR ; MSDOS 3.3 ; 18/04/2023
 27380 00003E11 A0[2B9E]                	mov	al,[ArgC]		; AL = # independent arguments
 27381                                  
 27382                                  	; 23/03/2023
 27383                                  	; MSDOS 3.3		
 27384                                  	;or	al,al
 27385                                  	;jz	short CERROR4J
 27386                                  	; MSDOS 6.0
 27387 00003E14 08C0                    	or	al,al
 27388 00003E16 750B                    	jnz	short TRY_TOO_MANY	; more than 0 args; check if too many
 27389                                  		
 27390 00003E18 BA[F391]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27391 00003E1B C706[F391]0200          	mov	word [extend_buf_ptr],LessArgs_Ptr ; 2
 27392                                  	;mov	word [extend_buf_ptr],2	; set msg # "param missing"
 27393 00003E21 EB0D                    	jmp	short CERROR_PARSEJ	; take parse error exit		
 27394                                  
 27395                                  	; more than 0 args; check if too many
 27396                                  TRY_TOO_MANY:
 27397 00003E23 3C02                    	cmp	al,2
 27398 00003E25 7611                    	jbe	short ACOUNTOK		; <= 2 arguments - ok
 27399                                  
 27400                                  	; 23/03/2023
 27401                                  	; MSDOS 6.0
 27402 00003E27 BA[F391]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27403 00003E2A C706[F391]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 27404                                  	;mov	word [extend_buf_ptr],1 ; set msg # "too many params"
 27405                                  CERROR_PARSEJ:
 27406 00003E30 C606[F191]02            	mov	byte [msg_disp_class],parse_msg_class ; 2
 27407                                  					; parse error message	
 27408                                  CERROR4J:
 27409 00003E35 E96CF0                  	jmp	cerror
 27410                                  
 27411                                  ACOUNTOK:
 27412 00003E38 BD[50A1]                	mov	bp,DestVars		; BP = base of dest variables
 27413                                  
 27414 00003E3B 3C01                    	cmp	al,1
 27415 00003E3D 7520                    	jnz	short GOT2ARGS
 27416                                  
 27417                                  	;	Only one independent pathname argument on command line.
 27418                                  	;	Set destination to d:*.*, where d: is current drive.
 27419                                  
 27420                                  	;	Bugbug: but is this appropriate for "copy x:file1+x:file2"?
 27421                                  	;	The two files would be appended as d:file1, rather than x:file1.
 27422                                  
 27423 00003E3F A0[299E]                	mov	al,[CURDRV]		; AL = current drive (0 = A)
 27424                                  	;add	al,[CAPITAL_A]		; AL = current drive letter
 27425                                  	; 23/03/2023
 27426 00003E42 0441                    	add	al,'A'
 27427 00003E44 B43A                    	mov	ah,':'			; AX = "d:"
 27428                                  	;mov	byte [bp+1],2
 27429 00003E46 C6460102                	mov	byte [bp+VARSTRUC.SIZ],2 ; pathname length = 2
 27430                                  
 27431 00003E4A BF[55A1]                	mov	di,DestBuf		; ES:DI = ptr to dest path buf
 27432 00003E4D AB                      	stosw				; store "d:"
 27433                                  		
 27434 00003E4E C706[309E]0000          	mov	word [DestSwitch],0	; clear destination switches
 27435                                  	;mov	byte [bp+4],2		
 27436 00003E54 C6460402                	mov	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 27437                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 27438                                  	;mov	byte [bp+0],0		
 27439 00003E58 C6460000                	mov	byte [bp],0
 27440 00003E5C E8090A                  	call	SETSTARS		; add wildcards
 27441                                  GOT2ARGS:
 27442                                  	;	If destination pathname is "d:", add full wildcard filename
 27443                                  
 27444                                  	;cmp	byte [bp+1],2
 27445 00003E5F 807E0102                	cmp	byte [bp+VARSTRUC.SIZ],2
 27446 00003E63 7516                    	jnz	short NOTSHORTDEST	; not two chars, can't be "d:"
 27447 00003E65 B03A                    	mov	al,':'  ; 3Ah
 27448 00003E67 3806[56A1]              	cmp	byte [DestBuf+1],al
 27449 00003E6B 750E                    	jnz	short NOTSHORTDEST	; it's just a 2-character filename
 27450                                  	;or	byte [bp+4],2
 27451 00003E6D 804E0402                	or	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 27452 00003E71 BF[57A1]                	mov	di,DestBuf+2		; ES:DI = ptr after "d:"
 27453                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 27454                                  	;mov	byte [bp+0],0		
 27455 00003E74 C6460000                	mov	byte [bp],0
 27456 00003E78 E8ED09                  	call	SETSTARS		; add wildcards
 27457                                  NOTSHORTDEST:
 27458                                  	;	If destination pathname ends with "\", try to make
 27459                                  	;	sure it's "d:\".
 27460                                  
 27461                                  	;mov	di,[bp+2]
 27462 00003E7B 8B7E02                  	mov	di,[bp+VARSTRUC.TTAIL]	; DI = ptr to last path element
 27463 00003E7E 803D00                  	cmp	byte [di],0
 27464 00003E81 7515                    	jnz	short CHKSWTCHES	; not a null, so last char not "\"
 27465                                  
 27466 00003E83 BA[2E93]                	mov	dx,badcd_ptr
 27467 00003E86 B03A                    	mov	al,':'
 27468 00003E88 3845FE                  	cmp	[di-2],al
 27469 00003E8B 75A8                    	jne	short CERROR4J		; it's not "d:\", exit with error msg
 27470                                  	;mov	byte [bp+0],2
 27471                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; destination 'is a directory'
 27472 00003E8D C6460002                	mov	byte [bp],2
 27473                                  	;or	byte [bp+4],6
 27474 00003E91 804E0406                	or	byte [bp+VARSTRUC.INFO],6 ; destination wildcarded and contains
 27475                                  					  ;  path character
 27476 00003E95 E8D009                  	call	SETSTARS		; add wildcards
 27477                                  CHKSWTCHES:
 27478                                  	;	We have enough information about the destination for now.
 27479                                  
 27480                                  	;	Turn on verify if requested. Save the current verify flag.
 27481                                  
 27482                                  	; 23/03/2023
 27483                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM
 27484                                  	;mov	dx,BADPARMPTR
 27485                                  	
 27486 00003E98 A1[329E]                	mov	ax,[AllSwitch]		; AX = all switch flags
 27487                                  
 27488                                  	; 23/03/2023
 27489                                  	; MSDOS 3.3
 27490                                  	;;test	ax,~SWITCHCOPY ; 7FE3h
 27491                                  	;test	ax,NOT_SWITCHCOPY ; 7FE3h ; 13/10/2018
 27492                                  	;jnz	short CERROR4J
 27493                                  	
 27494                                  	; 23/03/2023
 27495                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27496                                  	;test	ax,SwitchV ; 10h
 27497                                  	; 18/04/2023
 27498                                  	;test	ax,10h
 27499 00003E9B A810                    	test	al,10h  ; test al,SwitchV
 27500 00003E9D 7414                    	jz	short NOVERIF		; no /v, no verify
 27501                                  
 27502 00003E9F B454                    	mov	ah,Get_Verify_On_Write ; 54h
 27503 00003EA1 CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 27504                                  				; Return: AL = 00h if flag OFF
 27505                                  				; AL = 01h if flag ON
 27506 00003EA3 1E                      	push	ds
 27507 00003EA4 8E1E[159E]              	mov	ds,[RESSEG]
 27508 00003EA8 30E4                    	xor	ah,ah
 27509 00003EAA A3[4502]                	mov	[VerVal],ax		; save current verify flag
 27510 00003EAD 1F                      	pop	ds
 27511 00003EAE B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 27512 00003EB1 CD21                    	int	21h		; DOS -	SET VERIFY FLAG
 27513                                  				; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 27514                                  NOVERIF:
 27515                                  	;*	Scan for first source.
 27516                                  
 27517 00003EB3 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27518 00003EB5 BE8100                  	mov	si,81h			; SI = ptr into command line
 27519                                  	;mov	bl,[PLUS_CHR]		; BL = special CParse delimiter = "+"
 27520                                  	; 23/03/2023
 27521 00003EB8 B32B                    	mov	bl,'+' ; 2Bh
 27522                                  SCANFSRC:
 27523 00003EBA BF[12A2]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27524 00003EBD E8D709                  	call	cparse			; parse first source pathname
 27525 00003EC0 F6C701                  	test	bh,1			; switch?
 27526 00003EC3 75F5                    	jnz	short SCANFSRC		; yes, try again
 27527 00003EC5 092E[309E]              	or	[DestSwitch],bp		; include copy-wide switches on dest
 27528                                  
 27529                                  ;	Set ascii copying mode if concatenating, unless /b is specified.
 27530                                  
 27531                                  	; 23/03/2023
 27532 00003EC9 F7C50800                	test	bp,8
 27533                                  	;test	bp,SWITCHB
 27534 00003ECD 750C                    	jnz	short NOSETCASC		; /b - explicit binary copy
 27535 00003ECF 803E[2A9E]00            	cmp	byte [Concat],0
 27536 00003ED4 7405                    	jz	short NOSETCASC		; we're not concatenating
 27537 00003ED6 C606[71A2]04            	mov	byte [ASCII],4
 27538                                  	;mov	byte [ASCII],SWITCHA	; set ascii copy
 27539                                  NOSETCASC:
 27540 00003EDB E82604                  	call	SOURCE_SET		; set source variables
 27541 00003EDE E84400                  	call	FRSTSRC			; set up first source copy
 27542 00003EE1 E99500                  	jmp	FIRSTENT		; jump into the copy loop
 27543                                  
 27544                                  ; ---------------------------------------------------------------------------
 27545                                  
 27546                                  	; 24/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27547                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3AE9h
 27548                                  ENDCOPY:
 27549                                  	;*	End of the road. Close destination, display # files
 27550                                  	;	copied (meaning # destinations), and go back to main
 27551                                  	;	transient COMMAND code.
 27552                                  
 27553 00003EE4 E83203                  	call	CLOSEDEST
 27554                                  ENDCOPY2:
 27555 00003EE7 BA[2592]                	mov	dx,copied_ptr
 27556 00003EEA 8B36[439E]              	mov	si,[FileCnt]
 27557 00003EEE 8936[39A1]              	mov	[Copy_num],si
 27558 00003EF2 E83816                  	call	std_printf
 27559 00003EF5 E90CC2                  	jmp	TCOMMAND		; stack could be messed up
 27560                                  
 27561                                  ; ---------------------------------------------------------------------------
 27562                                  
 27563                                  SRCNONEXIST:
 27564                                  	;*	Source doesn't exist. If concatenating, ignore and continue.
 27565                                  	;	Otherwise, say 'file not found' and quit.
 27566                                  
 27567 00003EF8 803E[2A9E]00            	cmp	byte [Concat],0
 27568 00003EFD 7543                    	jne	short NEXTSRC		; concatenating - go on to next source
 27569                                  
 27570                                  	; 24/03/2023
 27571                                  	; MSDOS 3.3
 27572                                  	;mov	dx,SRCBUF
 27573                                  	;mov	[STRING_PTR_1],dx
 27574                                  	;mov	dx,STRINGBUF1PTR
 27575                                  	;call	STD_PRINTF
 27576                                  	;mov	dx,FNOTFOUNDPTR
 27577                                  	;jmp	COPYERR
 27578                                  
 27579                                  	; 24/*03/2023
 27580                                  	; MSDOS 6.0
 27581                                  	;	Set up error message.
 27582 00003EFF C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 27583                                  				  	; extended error msg
 27584 00003F04 BA[F391]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27585 00003F07 C706[F391]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 27586                                  					; 'file not found' msg#
 27587 00003F0D C706[37A1][B8A1]        	mov	word [string_ptr_2],SrcBuf
 27588                                  					; point at bad pathname
 27589 00003F13 C606[F591]01            	mov	byte [extend_buf_sub],one_subst ; 1
 27590                                  					; 1 substitution
 27591 00003F18 E99706                  	jmp	COPYERR			; print msg and clean up
 27592                                  
 27593                                  ; ---------------------------------------------------------------------------
 27594                                  
 27595                                  SOURCEPROC:
 27596                                  
 27597                                  	;*	Preparatory processing for each source file.
 27598                                  	;	Called at FrstSrc for first source file.
 27599                                  
 27600 00003F1B E8E603                  	call	SOURCE_SET		; set source variables & ascii/binary
 27601 00003F1E 803E[2A9E]00            	cmp	byte [Concat],0
 27602 00003F23 750B                    	jne	short LEAVECFLAG	; concatenating - leave CFlag alone
 27603                                  
 27604                                  ; ---------------------------------------------------------------------------
 27605                                  
 27606                                  FRSTSRC:
 27607 00003F25 31C0                    	xor	ax,ax
 27608 00003F27 A2[349E]                	mov	[CFLAG],al		; 'destination not created'
 27609 00003F2A A3[3A9E]                	mov	[NXTADD],ax		; copy buffer ptr = 0
 27610 00003F2D A2[359E]                	mov	[DestClosed],al		; 'destination not closed'
 27611                                  
 27612                                  LEAVECFLAG:
 27613 00003F30 8936[69A2]              	mov	[SRCPT],si		; save cmd-line ptr
 27614 00003F34 BF[F79C]                	mov	di,USERDIR1		; DI = ptr to buf for user's 
 27615                                  						;   current dir
 27616 00003F37 BD[B3A1]                	mov	bp,SrcVars		; BP = base of source variables
 27617 00003F3A E8DB07                  	call	BUILDPATH		; cd to source dir, figure
 27618                                  						;   out stuff about source
 27619 00003F3D 8B36[B5A1]              	mov	si,[SrcTail]		; SI = ptr to source filename
 27620 00003F41 C3                      	retn
 27621                                  
 27622                                  ; ---------------------------------------------------------------------------
 27623                                  
 27624                                  	; 25/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27625                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27626                                  NEXTSRC:
 27627                                  	;*	Next source. Come here after handling each pathname.
 27628                                  	;	We're done unless there are additional source pathnames
 27629                                  	;	to be appended.
 27630                                  	;
 27631                                  	;	Note that all files matching an ambiguous pathname
 27632                                  	;	are processed before coming here.
 27633                                  
 27634 00003F42 803E[72A2]00            	cmp	byte [PLUS],0
 27635                                  	;jne	short MORECP		; copying "+" sources - keep going
 27636                                  	; 26/04/2023
 27637                                  ;ENDCOPYJ2:
 27638                                  	;jmp	short ENDCOPY
 27639 00003F47 749B                    	je	short ENDCOPY
 27640                                  MORECP:
 27641 00003F49 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27642 00003F4B 8B36[69A2]              	mov	si,[SRCPT]		; SI = ptr to current pos'n in cmd line
 27643                                  	;mov	bl,[PLUS_CHR]		; BL = special delimiter = "+"
 27644 00003F4F B32B                    	mov	bl,'+' ; 2Bh
 27645                                  SCANSRC:
 27646 00003F51 BF[12A2]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27647 00003F54 E84009                  	call	cparse			; parse first source name
 27648                                  	;jb	short ENDCOPYJ2		; CR found - we're done
 27649                                  	; 26/04/2023
 27650 00003F57 728B                    	jb	short ENDCOPY
 27651                                  
 27652 00003F59 F6C780                  	test	bh,80h
 27653                                  	;jz	short ENDCOPYJ2		; no "+" delimiter - we're done
 27654                                  	; 26/04/2023
 27655 00003F5C 7486                    	jz	short ENDCOPY
 27656                                  
 27657 00003F5E F6C701                  	test	bh,1
 27658 00003F61 75EE                    	jnz	short SCANSRC		; switch found - keep looking
 27659                                  
 27660                                  	;	ScanBuf contains the next source pathname.
 27661                                  
 27662 00003F63 E8B5FF                  	call	SOURCEPROC		; prepare this source
 27663 00003F66 803E[ACA0]01            	cmp	byte [comma],1		; was +,, found last time?
 27664 00003F6B 7507                    	jnz	short NOSTAMP		;  no - try for a file
 27665 00003F6D C606[ADA0]01            	mov	byte [plus_comma],1	; yes - set flag
 27666 00003F72 EB84                    	jmp	short SRCNONEXIST	; we know we won't find it
 27667                                  
 27668                                  NOSTAMP:
 27669 00003F74 C606[ADA0]00            	mov	byte [plus_comma],0	; reset +,, flag
 27670                                  
 27671                                  ; ---------------------------------------------------------------------------
 27672                                  
 27673                                  FIRSTENT:
 27674                                  
 27675                                  ;M047
 27676                                  ; The only case we need to worry about is when the source is wildcarded and
 27677                                  ;the destination is not. For this case, ConCat is not yet set to indicate
 27678                                  ;concatenation. We check for this case.
 27679                                  ;
 27680                                  ;NB: This change has been backed out and replaced by M048. This is not the
 27681                                  ;right place to do this check.
 27682                                  
 27683                                  	;	This is where we enter the loop with the first source.
 27684                                  
 27685 00003F79 BF5C00                  	mov	di,FCB ; 5Ch		; DI = ptr to FCB
 27686 00003F7C B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27687 00003F7F CD21                    	int	21h		; DOS -	PARSE FILENAME
 27688                                  				; DS:SI	-> string to parse
 27689                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27690                                  				; AL = bit mask	to control parsing
 27691 00003F81 803C00                  	cmp	byte [si],0		; did we parse the whole thing?
 27692 00003F84 7516                    	jne	short SRCHDONE		; no, error, simulate 'not found'
 27693 00003F86 A1[B8A1]                	mov	ax,[SrcBuf]		; AX = possible "d:"
 27694 00003F89 80FC3A                  	cmp	ah,':'
 27695 00003F8C 7402                    	je	short DRVSPEC1		; AX = definite "d:"
 27696 00003F8E B040                    	mov	al,'@'	; 40h		; AL = drive 'letter' for current drive
 27697                                  DRVSPEC1:
 27698 00003F90 0C20                    	or	al,20h			; AL = lowercase drive letter
 27699 00003F92 2C60                    	sub	al,60h			; AL = drive id (0=current,1=A,..)
 27700                                  	;mov	[5Ch],al
 27701 00003F94 A25C00                  	mov	[FCB],al		; put drive id in FCB
 27702                                  
 27703                                  	;	FCB contains drive and filename to search.
 27704                                  		
 27705 00003F97 B411                    	mov	ah,Dir_Search_First ; 11h  ; AH = 'Find First File'	
 27706 00003F99 E86D01                  	call	SEARCH
 27707                                  SRCHDONE:
 27708 00003F9C 9C                      	pushf				; save flags from Search
 27709 00003F9D E833EA                  	call	RestUDir1		; restore users current directory
 27710 00003FA0 9D                      	popf				; restore flags from search
 27711 00003FA1 7403                    	jz	short NEXTAMBIG0	; found the source - continue
 27712 00003FA3 E952FF                  	jmp	SRCNONEXIST		; didn't find the source
 27713                                  
 27714                                  NEXTAMBIG0:
 27715 00003FA6 30C0                    	xor	al,al
 27716 00003FA8 8606[3C9E]              	xchg	al,[FRSTSRCH]
 27717 00003FAC 08C0                    	or	al,al
 27718 00003FAE 740B                    	jz	short NEXTAMBIG
 27719                                  SETNMEL:
 27720 00003FB0 B90C00                  	mov	cx,12
 27721 00003FB3 BF[96A0]                	mov	di,SDIRBUF
 27722 00003FB6 BE[50A0]                	mov	si,DIRBUF
 27723 00003FB9 F3A4                    	rep	movsb			; save very first source name
 27724                                  NEXTAMBIG:
 27725 00003FBB 30C0                    	xor	al,al
 27726 00003FBD A2[6CA2]                	mov	[NOWRITE],al		; turn off nowrite
 27727 00003FC0 8B3E[B5A1]              	mov	di,[SrcTail]
 27728 00003FC4 BE[51A0]                	mov	si,DIRBUF+1
 27729 00003FC7 E885EB                  	call	FCB_TO_ASCZ		; SrcBuf has complete name
 27730                                  ;MELDO:
 27731                                  	; ****************************************
 27732                                  	; 12/06/2023
 27733                                  	; Retro DOS v4.2 COMMAND.COM
 27734                                  	; MSDOS 6.22 COMMAND.COM code only !
 27735                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 27736                                  	; ****************************************
 27737                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:41DBh
 27738                                  MELDO0:
 27739 00003FCA 803E[88A2]00            	cmp	byte [cox_y_override],0 ; /Y switch override (question) enabled ?
 27740 00003FCF 746C                    	jz	short MELDO ; no
 27741                                  	; ----------------------
 27742                                  	; yes
 27743 00003FD1 E85406                  	call	BUILDDEST
 27744 00003FD4 BE[B8A1]                	mov	si,SrcBuf
 27745 00003FD7 BF[439B]                	mov	di,SRCXNAME
 27746                                  	;mov	ah,60h
 27747 00003FDA B460                    	mov	ah,xNameTrans ; 60h
 27748 00003FDC CD21                    	int	21h	; DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING
 27749                                  			; DS:SI -> ASCIZ relative path string or directory name
 27750                                  			; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
 27751 00003FDE E8A308                  	call	COMPNAME
 27752 00003FE1 7540                    	jnz	short MELDO1    	; different file names
 27753 00003FE3 803E[2A9E]00            	cmp	byte [Concat],0
 27754 00003FE8 7539                    	jnz	short MELDO1		; concatenating
 27755                                  	; "File cannot be copied onto itself"
 27756 00003FEA BA[9E93]                	mov	dx,file_name_ptr
 27757 00003FED E83D15                  	call	std_printf
 27758 00003FF0 E830EB                  	call	CRLF2
 27759 00003FF3 BA[1C92]                	mov	dx,OVERWR_PTR
 27760 00003FF6 E9B905                  	jmp	COPYERR
 27761                                  ;MELDO1:
 27762                                  	;cmp	byte [CFLAG],0		; destination file created flag
 27763                                  	;jnz	short MELDO		; yes, new (created) file
 27764                                  	;				; no, overwrite question (must be confirmed)
 27765                                  	;call	get_answer_YNA
 27766                                  	;jb	short MELDO2    	; answer is no
 27767                                  	;cmp	byte [Concat],0
 27768                                  	;jnz	short MELDO
 27769                                  	;cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 27770                                  	;jnz	short DOREAD    	; yes
 27771                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 27772                                  MELDO2:
 27773 00003FF9 803E[B0A1]00            	cmp	byte [MELCOPY],0	; is 'Mel Hallerman copy' false ?
 27774 00003FFE 7507                    	jnz	short MELDO3    	; no (, it is true)
 27775 00004000 803E[2A9E]00            	cmp	byte [Concat],0
 27776 00004005 7408                    	jz	short MELDO4
 27777                                  MELDO3:
 27778 00004007 C606[359E]01            	mov	byte [DestClosed],1
 27779 0000400C E9D5FE                  	jmp	ENDCOPY
 27780                                  MELDO4:
 27781 0000400F E8EB00                  	call	SEARCHNEXT
 27782 00004012 74A7                    	jz	short NEXTAMBIG
 27783 00004014 803E[8AA2]00            	cmp	byte [cox_src_file],0
 27784                                  	;jz	short MELDO5
 27785                                  	;jmp	NEXTSRC
 27786                                  	; 18/06/2023
 27787 00004019 7505                    	jnz	short NEXTSRCJ
 27788                                  MELDO5:
 27789 0000401B C606[359E]01            	mov	byte [DestClosed],1
 27790                                  NEXTSRCJ:	; 18/06/2023
 27791 00004020 E91FFF                  	jmp	NEXTSRC
 27792                                  
 27793                                  	; 12/06/2023
 27794                                  MELDO1:
 27795 00004023 803E[349E]00            	cmp	byte [CFLAG],0		; destination file created flag
 27796 00004028 7513                    	jnz	short MELDO     	; yes, new (created) file
 27797                                  					; no, overwrite question (must be confirmed)
 27798 0000402A E81803                  	call	get_answer_YNA
 27799 0000402D 72CA                    	jb	short MELDO2    	; answer is no
 27800 0000402F 803E[2A9E]00            	cmp	byte [Concat],0
 27801 00004034 7507                    	jnz	short MELDO
 27802 00004036 803E[89A2]00            	cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 27803 0000403B 7517                    	jnz	short DOREAD    	; yes
 27804                                  	; 12/06/2023
 27805                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 27806                                  
 27807                                  	; ****************************************
 27808                                  	; 12/06/2023
 27809                                  MELDO:
 27810 0000403D 803E[2A9E]00            	cmp	byte [Concat],0
 27811 00004042 7507                    	jnz	short SHOWCPNAM		; concatenating - show name
 27812 00004044 F606[B7A1]02            	test	byte [SrcInfo],2	; wildcard - show name
 27813 00004049 7409                    	jz	short DOREAD
 27814                                  SHOWCPNAM:
 27815                                  	; 25/03/2023
 27816                                  	; MSDOS 3.3
 27817                                  	;mov	dx,SRCBUF
 27818                                  	;mov	[STRING_PTR_2],dx
 27819                                  	;mov	dx,STRINGBUF2PTR
 27820                                  	;call	STD_PRINTF
 27821                                  	;call	CRLF2
 27822                                  	; 25/03/2023 - Retro DOS 4.0 COMMAND.COM
 27823                                  	; MSDOS 6.0 (& MSDOS 5.0
 27824 0000404B BA[9E93]                	mov	dx,file_name_ptr
 27825 0000404E E8DC14                  	call	std_printf
 27826 00004051 E8CFEA                  	call	CRLF2
 27827                                  DOREAD:
 27828 00004054 E8C300                  	call	DOCOPY
 27829 00004057 803E[2A9E]00            	cmp	byte [Concat],0
 27830 0000405C 750A                    	jnz	short NODCLOSE		; concatenating - don't close dest
 27831                                  
 27832 0000405E E8B801                  	call	CLOSEDEST		; close current destination
 27833 00004061 7205                    	jc	short NODCLOSE		; concatenating - dest not closed
 27834                                  
 27835 00004063 C606[349E]00            	mov	byte [CFLAG],0		; 'destination not created'
 27836                                  NODCLOSE:
 27837 00004068 803E[2A9E]00            	cmp	byte [Concat],0		
 27838 0000406D 740A                    	jz	short NOFLUSH
 27839                                  
 27840                                  ;	Concatenating - flush output between source files so LostErr
 27841                                  ;	stuff works correctly.
 27842                                  
 27843                                  	;invoke	FlshFil  ; MSDOS 6.0
 27844                                  	; 25/03/2023
 27845 0000406F E80304                  	call	FlshFil
 27846                                  	;call	FLUSHFIL ; MSDOS 3.3
 27847                                  
 27848 00004072 F606[B0A1]FF            	test	byte [MELCOPY],0FFh
 27849                                  	;jz	short NOFLUSH
 27850                                  	;jmp	short DOMELCOPY
 27851                                  	; 25/03/2023
 27852 00004077 750D                    	jnz	short DOMELCOPY
 27853                                  NOFLUSH:
 27854 00004079 E88100                  	call	SEARCHNEXT		; try next match
 27855 0000407C 75A2                    	jnz	short NEXTSRCJ		; not found - finished with 
 27856                                  					;   this source spec
 27857 0000407E C606[359E]00            	mov	byte [DestClosed],0	; 'destination not closed'
 27858 00004083 E935FF                  	jmp	NEXTAMBIG		; do next ambig match
 27859                                  
 27860                                  DOMELCOPY:
 27861 00004086 803E[B0A1]FF            	cmp	byte [MELCOPY],0FFh
 27862 0000408B 740D                    	je	short CONTMEL
 27863 0000408D 8B36[69A2]              	mov	si,[SRCPT]
 27864 00004091 8936[B1A1]              	mov	[MELSTART],si
 27865 00004095 C606[B0A1]FF            	mov	byte [MELCOPY],0FFh
 27866                                  
 27867                                  CONTMEL:
 27868 0000409A 31ED                    	xor	bp,bp
 27869 0000409C 8B36[69A2]              	mov	si,[SRCPT]
 27870                                  	;mov	bl,[PLUS_CHR]
 27871                                  	; 25/03/2023
 27872 000040A0 B32B                    	mov	bl,'+'
 27873                                  SCANSRC2:
 27874 000040A2 BF[12A2]                	mov	di,ScanBuf
 27875 000040A5 E8EF07                  	call	cparse
 27876 000040A8 F6C780                  	test	bh,80h
 27877 000040AB 742F                    	jz	short NEXTMEL		; no "+" - go back to start
 27878 000040AD F6C701                  	test	bh,1
 27879 000040B0 75F0                    	jnz	short SCANSRC2		; switch - keep scanning
 27880 000040B2 E866FE                  	call	SOURCEPROC
 27881 000040B5 E81BE9                  	call	RestUDir1
 27882 000040B8 BF[D19F]                	mov	di,DESTFCB2
 27883 000040BB B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27884 000040BE CD21                    	int	21h		; DOS -	PARSE FILENAME
 27885                                  				; DS:SI	-> string to parse
 27886                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27887                                  				; AL = bit mask	to control parsing
 27888 000040C0 BB[97A0]                	mov	bx,SDIRBUF+1
 27889 000040C3 BE[D29F]                	mov	si,DESTFCB2+1
 27890 000040C6 8B3E[B5A1]              	mov	di,[SrcTail]
 27891                                  
 27892 000040CA E81C06                  	call	BUILDNAME
 27893                                  
 27894 000040CD 803E[2A9E]00            	cmp	byte [Concat],0
 27895 000040D2 7405                    	je	short MELDOJ		; not concatenating - continue
 27896                                  
 27897                                  	;	Yes, turn off nowrite because this part of the code 
 27898                                  	;	is only reached after the first file has been dealt with.
 27899                                  
 27900 000040D4 C606[6CA2]00            	mov	byte [NOWRITE],0
 27901                                  MELDOJ:
 27902 000040D9 E961FF                  	jmp	MELDO
 27903                                  	; 18/06/2023
 27904                                  ;NEXTSRCJ:
 27905                                  	;jmp	NEXTSRC
 27906                                  
 27907                                  NEXTMEL:
 27908 000040DC E83A01                  	call	CLOSEDEST
 27909 000040DF 31C0                    	xor	ax,ax
 27910 000040E1 A2[349E]                	mov	[CFLAG],al
 27911 000040E4 A3[3A9E]                	mov	[NXTADD],ax
 27912 000040E7 A2[359E]                	mov	[SPECDRV],al
 27913 000040EA 8B36[B1A1]              	mov	si,[MELSTART]
 27914 000040EE 8936[69A2]              	mov	[SRCPT],si
 27915 000040F2 E80800                  	call	SEARCHNEXT
 27916 000040F5 7403                    	jz	short SETNMELJ
 27917 000040F7 E9EDFD                  	jmp	ENDCOPY2
 27918                                  SETNMELJ:
 27919 000040FA E9B3FE                  	jmp	SETNMEL
 27920                                  
 27921                                  ; ---------------------------------------------------------------------------
 27922                                  
 27923                                  SEARCHNEXT:
 27924 000040FD B412                    	mov	ah,Dir_Search_Next ; 12h
 27925 000040FF F606[B7A1]02            	test	byte [SrcInfo],2
 27926 00004104 7503                    	jnz	short SEARCH		; do search-next if ambig
 27927 00004106 08E4                    	or	ah,ah			; reset zero flag
 27928 00004108 C3                      	retn
 27929                                  
 27930                                  ; ---------------------------------------------------------------------------
 27931                                  
 27932                                  SEARCH:
 27933 00004109 50                      	push	ax
 27934 0000410A B41A                    	mov	ah,Set_DMA ; 1Ah
 27935 0000410C BA[50A0]                	mov	dx,DIRBUF	; put result of search in dirbuf
 27936 0000410F CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 27937                                  			; DS:DX	-> disk	transfer buffer
 27938 00004111 58                      	pop	ax		; restore search first/next command
 27939 00004112 BA5C00                  	mov	dx,FCB ; 5Ch
 27940 00004115 CD21                    	int	21h		; Do the search
 27941 00004117 08C0                    	or	al,al
 27942 00004119 C3                      	retn
 27943                                  
 27944                                  ; ---------------------------------------------------------------------------
 27945                                  
 27946                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27947                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27948                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4335h
 27949                                  DOCOPY:
 27950 0000411A BE[B8A1]                	mov	si,SrcBuf	; do name translate of source
 27951 0000411D BF[439B]                	mov	di,SRCXNAME	; save for name comparison
 27952 00004120 B460                    	mov	ah,xNameTrans ; 60h
 27953                                  	;mov	ah,60h
 27954 00004122 CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 27955                                  			; DS:SI	-> ASCIZ relative path string or directory name
 27956                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 27957 00004124 C606[289E]00            	mov	byte [RDEOF],0	; no EOF yet
 27958                                  
 27959                                  	; MSDOS 6.0
 27960                                  	;mov	ax,ExtOpen shl 8	; open the file
 27961                                  	; 26/03/2023
 27962 00004129 B8006C                  	mov	ax,6C00h
 27963                                  ;M046
 27964                                  ; For reads, the sharing mode should be deny none so that any process can
 27965                                  ;open this file again in any other sharing mode. This is mainly to allow
 27966                                  ;multiple command.com's to access the same file without getting sharing
 27967                                  ;violations
 27968                                  ;
 27969                                  	;mov	bx,deny_none|read_open_mode
 27970 0000412C BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 27971 0000412F 31C9                    	xor	cx,cx			; no special files
 27972                                  	;mov	dx,read_open_flag	; set up open flags
 27973 00004131 BA0101                  	mov	dx,101h
 27974 00004134 CD21                    	int	21h
 27975                                  	; 26/03/2023
 27976 00004136 7230                    	jc	short Error_On_Source
 27977                                  	;jnc	short OPENOK
 27978                                  
 27979                                  	;	Bogosity: IBM wants us to issue Access Denied in this case.
 27980                                  	;	They asked for it...
 27981                                  
 27982                                  	;jmp	short Error_On_Source ;AC022; clean up and exit
 27983                                  
 27984                                  	; 26/03/2023
 27985                                  	; MSDOS 3.3
 27986                                  	;mov	dx,SRCBUF
 27987                                  	;mov	ax,OPEN*256 ; 3D00h
 27988                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 27989                                  	;			; DS:DX	-> ASCIZ filename
 27990                                  	;			; AL = access mode
 27991                                  	;			; 0 - read
 27992                                  	;jnc	short OPENOK
 27993                                  	;call	GET_EXT_ERR_NUMBER
 27994                                  	;pushf
 27995                                  	;cmp	ax,65
 27996                                  	;jnz	short DOCOPY_ERR
 27997                                  	;mov	dx,ACCDENPTR
 27998                                  	;call	STD_PRINTF
 27999                                  ;DOCOPY_ERR:
 28000                                  	;popf
 28001                                  	;retn
 28002                                  
 28003                                  	; 26/03/2023
 28004                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28005                                  OPENOK:
 28006 00004138 89C3                    	mov	bx,ax
 28007 0000413A 891E[0FA2]              	mov	[SRCHAND],bx		; save handle
 28008 0000413E B80057                  	mov	ax,File_Times*256 ; 5700h
 28009 00004141 CD21                    	int	21h		; DOS -	2+ - GET FILE'S DATE/TIME
 28010                                  				; BX = file handle
 28011                                  
 28012 00004143 7223                    	jc	short Error_On_Source ; MSDOS 6.0
 28013                                  
 28014 00004145 8916[74A2]              	mov	[CPDATE],dx		; save date
 28015 00004149 890E[76A2]              	mov	[CPTIME],cx		; save time
 28016                                  
 28017                                  	; MSDOS 6.0
 28018                                  	;jmp	short No_Copy_Xa 	; (xa copy code removed)
 28019                                  	; 26/04/2023
 28020                                  No_Copy_Xa:
 28021                                  	; 26/03/2023
 28022                                  	;mov	bx,[SRCHAND]		;AN022; get handle back
 28023                                  
 28024                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28025 0000414D B80044                  	mov	ax,(IOCTL<<8) ; 4400h
 28026 00004150 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28027                                  				; BX = file or device handle
 28028                                  	;and	dl,devid_ISDEV ; 80h
 28029                                  	; 18/04/2023
 28030 00004152 80E280                  	and	dl,80h ; devid_ISDEV
 28031 00004155 8816[11A2]              	mov	[SRCISDEV],dl		; set source info
 28032 00004159 7436                    	jz	short COPYLP		; source not a device
 28033 0000415B 803E[6DA2]00            	cmp	byte [BINARY],0
 28034 00004160 742F                    	je	short COPYLP		; ascii device ok
 28035 00004162 BA[5793]                	mov	dx,INBDEV_PTR		; cannot do binary input
 28036 00004165 E94A04                  	jmp	COPYERR
 28037                                  
 28038                                  Error_On_Source:			;AN022; we have a BAD error
 28039 00004168 E8C9E0                  	call	Set_Ext_Error_Msg	;AN022; set up the error message
 28040 0000416B C706[37A1][B8A1]        	mov	word [string_ptr_2],SrcBuf
 28041                                  				;AN022; get address of failed string
 28042 00004171 C606[F591]01            	mov	byte [extend_buf_sub],one_subst ; 1
 28043                                  				;AN022; put number of subst in control block
 28044 00004176 E8AC13                  	call	std_eprintf		;AN022; print it
 28045                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 28046 00004179 8B1E[0FA2]              	mov	bx,[SRCHAND]
 28047                                  	;cmp	word [SRCHAND],0	;AN022; did we open the file?
 28048                                  	;je	short No_Close_Src	;AN022; no - don't close
 28049 0000417D 09DB                    	or	bx,bx
 28050 0000417F 7403                    	jz	short No_Close_Src
 28051                                  	;call	CLOSESRC		;AN022; clean up
 28052                                  	; 26/03/2023
 28053 00004181 E89000                  	call	CLOSESRC2 ; bx = [SRCHAND]
 28054                                  No_Close_Src:				;AN022;
 28055 00004184 803E[349E]00            	cmp	byte [CFLAG],0		;AN022; was destination created?
 28056 00004189 7403                    	je	short EndCopyJ3		;AN022; no - just cleanup and exit
 28057 0000418B E956FD                  	jmp	ENDCOPY			;AN022; clean up concatenation and exit
 28058                                  EndCopyJ3:				;AN022;
 28059 0000418E E956FD                  	jmp	ENDCOPY2		;AN022;
 28060                                  
 28061                                  	; 26/04/2023
 28062                                  ;No_Copy_Xa:
 28063                                  ;	; 26/03/2023
 28064                                  ;	;mov	bx,[SRCHAND]		;AN022; get handle back
 28065                                  ;
 28066                                  ;	; MSDOS 3.3 (& MSDOS 6.0)
 28067                                  ;	mov	ax,(IOCTL<<8) ; 4400h
 28068                                  ;	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28069                                  ;				; BX = file or device handle
 28070                                  ;	;and	dl,devid_ISDEV ; 80h
 28071                                  ;	; 18/04/2023
 28072                                  ;	and	dl,80h ; devid_ISDEV
 28073                                  ;	mov	[SRCISDEV],dl		; set source info
 28074                                  ;	jz	short COPYLP		; source not a device
 28075                                  ;	cmp	byte [BINARY],0
 28076                                  ;	je	short COPYLP		; ascii device ok
 28077                                  ;	mov	dx,INBDEV_PTR		; cannot do binary input
 28078                                  ;	jmp	COPYERR
 28079                                  
 28080                                  COPYLP:
 28081                                  	; 26/03/2023
 28082 00004191 8B1E[0FA2]              	mov	bx,[SRCHAND] ; ? ; 26/03/2023
 28083 00004195 8B0E[369E]              	mov	cx,[BYTCNT]
 28084 00004199 8B16[3A9E]              	mov	dx,[NXTADD]
 28085 0000419D 29D1                    	sub	cx,dx			; compute available space
 28086 0000419F 750E                    	jnz	short GOTROOM
 28087 000041A1 E8D102                  	call	FlshFil   ; MSDOS 6.0
 28088                                  	;call	FLUSHFIL  ; MSDOS 3.3
 28089 000041A4 803E[70A2]00            	cmp	byte [TERMREAD],0
 28090 000041A9 7565                    	jne	short CLOSESRC		; give up
 28091 000041AB 8B0E[369E]              	mov	cx,[BYTCNT]
 28092                                  GOTROOM:
 28093 000041AF 1E                      	push	ds
 28094 000041B0 8E1E[179E]              	mov	ds,[TPA]
 28095 000041B4 B43F                    	mov	ah,READ ; 3Fh
 28096 000041B6 CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 28097                                  				; BX = file handle,CX = number of bytes to read
 28098                                  				; DS:DX	-> buffer
 28099 000041B8 1F                      	pop	ds
 28100                                  	;jc	short CLOSESRC	; MSDOS 3.3
 28101                                  	; 26/03/2023
 28102 000041B9 72AD                    	jc	short Error_On_Source ; MSDOS 6.0
 28103 000041BB 89C1                    	mov	cx,ax			; get count
 28104 000041BD E351                    	jcxz	CLOSESRC		; no more to read
 28105 000041BF 803E[11A2]00            	cmp	byte [SRCISDEV],0
 28106 000041C4 7507                    	jne	short NOTESTA		; is a device, ascii mode
 28107 000041C6 803E[71A2]00            	cmp	byte [ASCII],0
 28108 000041CB 741B                    	je	short BINREAD
 28109                                  NOTESTA:
 28110 000041CD 89CA                    	mov	dx,cx
 28111 000041CF 8B3E[3A9E]              	mov	di,[NXTADD]
 28112 000041D3 B01A                    	mov	al,1Ah
 28113 000041D5 06                      	push	es
 28114 000041D6 8E06[179E]              	mov	es,[TPA]		; scan for EOF
 28115 000041DA F2AE                    	repne	scasb
 28116 000041DC 07                      	pop	es
 28117 000041DD 7505                    	jnz	short USEALL
 28118 000041DF FE06[289E]              	inc	byte [RDEOF]
 28119 000041E3 41                      	inc	cx
 28120                                  USEALL:
 28121 000041E4 29CA                    	sub	dx,cx
 28122 000041E6 89D1                    	mov	cx,dx
 28123                                  BINREAD:
 28124 000041E8 030E[3A9E]              	add	cx,[NXTADD]
 28125 000041EC 890E[3A9E]              	mov	[NXTADD],cx
 28126 000041F0 3B0E[369E]              	cmp	cx,[BYTCNT]		; is buffer full?
 28127 000041F4 720C                    	jb	short TESTDEV		; if not, we may have found eof
 28128                                  	; 26/03/2023
 28129 000041F6 E87C02                  	call	FlshFil
 28130                                  	;call	FLUSHFIL
 28131 000041F9 803E[70A2]00            	cmp	byte [TERMREAD],0
 28132 000041FE 7510                    	jne	short CLOSESRC		; give up
 28133 00004200 EB8F                    	jmp	short COPYLP
 28134                                  TESTDEV:
 28135 00004202 803E[11A2]00            	cmp	byte [SRCISDEV],0	; if file then EOF
 28136 00004207 7407                    	je	short CLOSESRC
 28137 00004209 803E[289E]00            	cmp	byte [RDEOF],0
 28138 0000420E 7481                    	je	short COPYLP		; on device, go till ^Z
 28139                                  CLOSESRC:
 28140 00004210 8B1E[0FA2]              	mov	bx,[SRCHAND]
 28141                                  CLOSESRC2:
 28142 00004214 B43E                    	mov	ah,CLOSE ; 3Eh
 28143 00004216 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28144                                  				; BX = file handle
 28145                                  CLOSESRCDEST_RETN:
 28146 00004218 C3                      	retn
 28147                                  
 28148                                  ; ---------------------------------------------------------------------------
 28149                                  
 28150                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28151                                  CLOSEDEST:
 28152                                  
 28153                                  	;	We are called to close the destination.
 28154                                  	;	We need to note whether or not there is any internal data left
 28155                                  	;	to be flushed out.
 28156                                  
 28157 00004219 803E[359E]00            	cmp	byte [DestClosed],0
 28158 0000421E 75F8                    	jne	short CLOSESRCDEST_RETN	; don't double close
 28159 00004220 A0[309E]                	mov	al,[DestSwitch]
 28160 00004223 E8E803                  	call	SETASC			; check for b or a switch
 28161 00004226 742E                    	jz	short BINCLOS		;   on destination
 28162 00004228 8B1E[3A9E]              	mov	bx,[NXTADD]
 28163                                  ;
 28164                                  ;M048 -- TryFlush changes the state of ConCat flag. So, before we append a
 28165                                  ;^Z, let's always flush out. This way if the ConCat flag changes, we will
 28166                                  ;just return without appending a ^Z incorrectly for the first file (since we
 28167                                  ;are concatenating now). Also, in case it is a single file copy, we will
 28168                                  ;anyway write the ^Z out separately. The only drawback is that there is a
 28169                                  ;performance overhead on single ASCII file copies which now always involve
 28170                                  ;2 writes instead of 1 before. Is this really that important?
 28171                                  ;
 28172                                  ;M048;	cmp	bx,[BYTCNT]		; is memory full?
 28173                                  ;M048;	jne	short PutZ
 28174                                  
 28175                                  	; 26/03/2023
 28176                                  	; MSDOS 3.3
 28177                                  	;cmp	bx,[BYTCNT]		; is memory full?
 28178                                  	;jne	short PUTZ
 28179                                  
 28180                                  	; 26/03/2023
 28181 0000422C E83902                  	call	TRYFLUSH		; flush (and double-check for concat)	
 28182 0000422F 7402                    	jz	short NOCONC
 28183                                  CONCHNG:
 28184 00004231 F9                      	stc
 28185 00004232 C3                      	retn
 28186                                  
 28187                                  NOCONC:	
 28188 00004233 31DB                    	xor	bx,bx
 28189                                  PUTZ:
 28190 00004235 1E                      	push	ds
 28191 00004236 8E1E[179E]              	mov	ds,[TPA]
 28192 0000423A C7071A00                	mov	word [bx],1Ah	; add EOF mark (ctrl-Z)
 28193 0000423E 1F                      	pop	ds
 28194 0000423F FF06[3A9E]              	inc	word [NXTADD]	; make sure our ^z gets written	
 28195 00004243 C606[6CA2]00            	mov	byte [NOWRITE],0
 28196 00004248 A1[6EA2]                	mov	ax,[WRITTEN]
 28197 0000424B 0306[3A9E]              	add	ax,[NXTADD]
 28198 0000424F 7205                    	jc	short BINCLOS	; > 1
 28199 00004251 83F801                  	cmp	ax,1
 28200 00004254 740C                    	je	short FORGETITJ	; Written = 0 NxtAdd = 1 (the ^Z)
 28201                                  BINCLOS:
 28202 00004256 E80F02                  	call	TRYFLUSH
 28203 00004259 75D6                    	jnz	short CONCHNG
 28204                                  
 28205                                  	; 26/04/2023
 28206 0000425B 833E[6EA2]00            	cmp	word [WRITTEN],0
 28207                                  	; 26/03/2023
 28208 00004260 7503                    	jnz	short NO_FORGET
 28209                                  FORGETITJ:
 28210                                  	;jz	short FORGETIT	; never wrote nothing
 28211                                  	; 26/03/2023
 28212 00004262 E98500                  	jmp	FORGETIT ; 18/04/2023
 28213                                  NO_FORGET:			; wrote something
 28214 00004265 8B1E[ACA1]              	mov	bx,[DESTHAND]
 28215 00004269 8B0E[76A2]              	mov	cx,[CPTIME]
 28216 0000426D 8B16[74A2]              	mov	dx,[CPDATE]
 28217 00004271 803E[6BA2]00            	cmp	byte [INEXACT],0 ; copy not exact?
 28218 00004276 7431                    	je	short DODCLOSE	; if no, copy date & time
 28219 00004278 B42C                    	mov	ah,Get_Time ; 2Ch
 28220 0000427A CD21                    	int	21h		; DOS -	GET CURRENT TIME
 28221                                  				; Return: CH = hours,CL = minutes,DH = seconds
 28222                                  				; DL = hundredths of seconds
 28223 0000427C D0E1                    	shl	cl,1
 28224 0000427E D0E1                    	shl	cl,1		; left justify min in cl
 28225 00004280 D1E1                    	shl	cx,1
 28226 00004282 D1E1                    	shl	cx,1
 28227 00004284 D1E1                    	shl	cx,1		; hours to high 5 bits, min to 5-10
 28228 00004286 D0EE                    	shr	dh,1		; divide seconds by 2 (now 5 bits)
 28229 00004288 08F1                    	or	cl,dh		; and stick into low 5 bits of cx
 28230 0000428A 51                      	push	cx		; save packed time
 28231 0000428B B42A                    	mov	ah,Get_Date ; 2Ah
 28232 0000428D CD21                    	int	21h		; DOS -	GET CURRENT DATE
 28233                                  				; Return: DL = day,DH = month,	CX = year
 28234                                  				; AL = day of the week (0=Sunday,1=Monday,etc.)
 28235 0000428F 81E9BC07                	sub	cx,1980
 28236 00004293 86E9                    	xchg	ch,cl
 28237 00004295 D1E1                    	shl	cx,1		; year to high 7 bits
 28238 00004297 D0E6                    	shl	dh,1		; month to high 3 bits
 28239 00004299 D0E6                    	shl	dh,1
 28240 0000429B D0E6                    	shl	dh,1
 28241 0000429D D0E6                    	shl	dh,1
 28242 0000429F D0E6                    	shl	dh,1		; most sig bit of month in carry
 28243 000042A1 80D500                  	adc	ch,0		; put that bit next to year
 28244 000042A4 08F2                    	or	dl,dh		; or low three of month into day
 28245 000042A6 88EE                    	mov	dh,ch		; get year and high bit of month
 28246 000042A8 59                      	pop	cx
 28247                                  DODCLOSE:
 28248 000042A9 83FB00                  	cmp	bx,0
 28249 000042AC 7E36                    	jle	short CLOSEDONE
 28250 000042AE B80157                  	mov	ax,(File_Times<<8)|1 ; 5701h
 28251 000042B1 CD21                    	int	21h		; DOS -	2+ - SET FILE'S DATE/TIME
 28252                                  				; BX = file handle,CX = time to be set
 28253                                  				; DX = date to be set
 28254                                  	; 26/03/2023
 28255                                  	; MSDOS 6.0
 28256 000042B3 721A                    	jc	short Cleanup_Err ;AN022; handle error
 28257                                  
 28258                                  	;	See if the destination has *anything* in it.
 28259                                  	;	If not, just close and delete it.
 28260                                  
 28261 000042B5 B80242                  	mov	ax,(LSEEK<<8)+2 ; 4202h	; seek to EOF
 28262 000042B8 31D2                    	xor	dx,dx
 28263 000042BA 89D1                    	mov	cx,dx
 28264 000042BC CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 28265                                  			; AL = method: offset from end of file
 28266                                  	;	DX:AX is file size
 28267                                  
 28268 000042BE 09C2                    	or	dx,ax
 28269 000042C0 9C                      	pushf
 28270 000042C1 B80044                  	mov	ax,(IOCTL<<8)+0 ; 4400h	; get the destination attributes
 28271 000042C4 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28272                                  			; BX = file or device handle
 28273 000042C6 52                      	push	dx		; save them away
 28274 000042C7 B43E                    	mov	ah,CLOSE ; 3Eh
 28275 000042C9 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28276                                  			; BX = file handle
 28277 000042CB 5A                      	pop	dx
 28278                                  
 28279                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 28280                                  	; MSDOS 6.0
 28281 000042CC 730D                    	jnc	short Close_Cont ;AN022; handle error on close
 28282 000042CE 9D                      	popf			;AN022; get the flags back
 28283                                  Cleanup_Err: 			;AN022;
 28284 000042CF E85A00                  	call	CleanUpErr	;AN022; attempt to delete the target
 28285                                  	; 26/03/2023
 28286                                  	;call	DestDelete	;AN022; attempt to delete the target
 28287                                  	;jmp	short FILECLOSED
 28288                                  	;			;AN022; close the file
 28289                                  	; 26/03/2023
 28290                                  DestDel_fclosed:
 28291 000042D2 E82700                  	call	DestDelete
 28292                                  FILECLOSED:
 28293 000042D5 FE06[359E]              	inc	byte [DestClosed]
 28294                                  RET50:
 28295 000042D9 F8                      	clc
 28296 000042DA C3                      	retn
 28297                                  	
 28298                                  Close_Cont:			;AN022; no error - co
 28299                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28300 000042DB 9D                      	popf
 28301 000042DC 7506                    	jnz	short CLOSEDONE
 28302 000042DE F7C28000                	test	dx,80h		; is the destination a device?
 28303                                  	;jnz	short CLOSEDONE	; yes, copy succeeded
 28304                                  	;call	DestDelete
 28305                                  	;jmp	short FILECLOSED
 28306                                  	; 26/03/2023
 28307 000042E2 74EE                    	jz	short DestDel_fclosed
 28308                                  CLOSEDONE:
 28309 000042E4 FF06[439E]              	inc	word [FileCnt]
 28310                                  	; 26/03/2023
 28311 000042E8 EBEB                    	jmp	short FILECLOSED
 28312                                  	
 28313                                  ;FILECLOSED:
 28314                                  ;	inc	byte [DestClosed]
 28315                                  ;RET50:
 28316                                  	;clc
 28317                                  	;retn
 28318                                  
 28319                                  FORGETIT:
 28320 000042EA 8B1E[ACA1]              	mov	bx,[DESTHAND]
 28321 000042EE E8B8FF                  	call	DODCLOSE	 ; close the dest	
 28322 000042F1 E80800                  	call	DestDelete
 28323 000042F4 C706[439E]0000          	mov	word [FileCnt],0 ; no files transferred
 28324 000042FA EBDD                    	jmp	short RET50
 28325                                  
 28326                                  ; ---------------------------------------------------------------------------
 28327                                  
 28328                                  	; 26/03/2023
 28329                                  DestDelete:
 28330 000042FC BA[55A1]                	mov	dx,DestBuf
 28331 000042FF B441                    	mov	ah,Unlink ; 41h
 28332 00004301 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 28333                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 28334                                  			;		(no wildcards allowed)
 28335 00004303 C3                      	retn
 28336                                  
 28337                                  ; ---------------------------------------------------------------------------
 28338                                  
 28339                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28340                                  SOURCE_SET:
 28341 00004304 56                      	push	si
 28342 00004305 A1[8DA2]                	mov	ax,[STARTEL]
 28343 00004308 BE[12A2]                	mov	si,ScanBuf	; adjust to copy
 28344 0000430B 29F0                    	sub	ax,si
 28345 0000430D BF[B8A1]                	mov	di,SrcBuf
 28346 00004310 01F8                    	add	ax,di
 28347 00004312 A3[B5A1]                	mov	[SrcTail],ax
 28348 00004315 880E[B4A1]              	mov	[SrcSiz],cl	; save its size
 28349 00004319 41                      	inc	cx		; include the nul
 28350 0000431A F3A4                    	rep	movsb		; save this source
 28351 0000431C 883E[B7A1]              	mov	[SrcInfo],bh	; save info about it
 28352 00004320 5E                      	pop	si
 28353 00004321 89E8                    	mov	ax,bp		; switches so far
 28354 00004323 E8E802                  	call	SETASC		; set a,b switches accordingly
 28355 00004326 E8A5E9                  	call	SWITCH		; get any more switches on this arg
 28356                                  	;call	SETASC		; set
 28357                                  	;retn
 28358                                  	; 26/03/2023
 28359 00004329 E9E202                  	jmp	SETASC
 28360                                  
 28361                                  ; =============== S U B	R O U T	I N E =======================================
 28362                                  
 28363                                  ; MSDOS 6.0
 28364                                  
 28365                                  ;****************************************************************
 28366                                  ;*
 28367                                  ;* ROUTINE:	CleanupErr
 28368                                  ;*
 28369                                  ;* FUNCTION:	Issues extended error message for destination
 28370                                  ;*		if not alreay issued
 28371                                  ;*
 28372                                  ;* INPUT:	return from INT 21
 28373                                  ;*
 28374                                  ;* OUTPUT:	none
 28375                                  ;*
 28376                                  ;****************************************************************
 28377                                  
 28378                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28379                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28380                                  	; MSDOS 6.0 (MSDOS 5.0) COMMAND.COM
 28381                                  CleanUpErr:	;proc near		;AN022;
 28382                                  
 28383 0000432C 803E[CAA2]00            	cmp	byte [msg_flag],0	;AN022; have we already issued a message?
 28384 00004331 7511                    	jnz	short CleanupErr_Cont	;AN022; yes - don't issue duplicate error
 28385 00004333 E8FEDE                  	call	Set_Ext_Error_Msg	;AN022; set up error message
 28386 00004336 C706[37A1][55A1]        	mov	word [string_ptr_2],DestBuf 
 28387                                  					;AN022; get address of failed string
 28388 0000433C C606[F591]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 28389                                  					;AN022; put number of subst in control block
 28390 00004341 E8E111                  	call	std_eprintf		;AN022; issue the error message
 28391                                  CleanupErr_Cont:			;AN022;
 28392                                  getansw_8:	; 12/06/2023
 28393 00004344 C3                      	retn				;AN022; return to caller
 28394                                  
 28395                                  ;CleanUpErr	endp			;AN022;
 28396                                  
 28397                                  
 28398                                  ; 12/06/2023
 28399                                  ; ---------------------------------------------------------------------------
 28400                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 28401                                  ; -----------------------------------------
 28402                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 28403                                  ; ---------------------------------------------------------------------------
 28404                                  
 28405                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28406                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:456Dh
 28407                                  
 28408                                  get_answer_YNA:
 28409 00004345 C606[89A2]00            	mov	byte [cox_dest_file],0	; clear validation flag
 28410 0000434A B80043                  	mov	ax,4300h
 28411 0000434D BA[55A1]                	mov	dx,DestBuf
 28412 00004350 CD21                    	int	21h		; DOS -	2+ - GET FILE ATTRIBUTES
 28413                                  				; DS:DX	-> ASCIZ file name or directory
 28414                                  				; name without trailing	slash
 28415                                  	;jnc	short getansw_1
 28416                                  	;jmp	getansw_5
 28417                                  	; 12/06/2023
 28418 00004352 F5                      	cmc
 28419 00004353 73EF                    	jnc	short getansw_8 
 28420                                  getansw_1:
 28421 00004355 FE06[89A2]              	inc	byte [cox_dest_file]	; valid destination file
 28422 00004359 8D36[7DA2]              	lea	si,cox_sublist_buff
 28423 0000435D C7040B00                	mov	word [si],11		; sublist size, 11 bytes
 28424 00004361 C74402[55A1]            	mov	word [si+2],DestBuf	; sublist value	(pointer)
 28425 00004366 8C5C04                  	mov	[si+4],ds		; sublist segment
 28426                                  	;mov	byte [si+6],1		; sub id (N of %N)
 28427 00004369 C6440710                	mov	byte [si+7],10h		; data type flags
 28428                                  	;mov	byte [si+8],0		; maximum length (chars)
 28429                                  	;mov	byte [si+9],0		; minimum length (chars)
 28430                                  	;mov	byte [si+10],0		; pad field character (0)
 28431                                  	; 12/06/2023
 28432 0000436D 31C9                    	xor	cx,cx
 28433 0000436F 894C08                  	mov	[si+8],cx ; 0
 28434 00004372 884C0A                  	mov	[si+10],cl ; 0
 28435 00004375 FEC1                    	inc	cl
 28436 00004377 884C06                  	mov	[si+6],cl ; 1	
 28437                                  
 28438                                  	; 12/06/2023
 28439                                  	;lea	si,cox_sublist_buff
 28440 0000437A B84F04                  	mov	ax,1103			; message number
 28441                                  					; 'Overwrite %1 (Yes/No/All)?'
 28442 0000437D BB0200                  	mov	bx,2			; std error (file handle = 2)
 28443                                  	; 12/06/2023
 28444                                  	;mov	cx,1			; byte count
 28445                                  	; cx = 1
 28446                                  	;mov	dh,0FFh			; message class	(utility)
 28447                                  	;xor	dl,dl			; control flag = 0
 28448 00004380 31D2                    	xor	dx,dx
 28449 00004382 FECE                    	dec	dh  ; dh = 0FFh
 28450 00004384 E87314                  	call	SYSDISPMSG
 28451                                  	; 12/06/2023
 28452                                  	;xor	bx,bx
 28453                                  	; bh = 0
 28454                                  getansw_2:
 28455 00004387 B8080C                  	mov	ax,0C08h
 28456 0000438A CD21                    	int	21h		; DOS -	CLEAR KEYBOARD BUFFER
 28457                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 28458                                  	;cmp	al,0
 28459                                  	;jz	short getansw_2
 28460                                  	; 12/06/2023
 28461 0000438C 20C0                    	and	al,al
 28462 0000438E 74F7                    	jz	short getansw_2
 28463 00004390 3C0D                    	cmp	al,0Dh
 28464 00004392 743B                    	je	short getansw_4
 28465 00004394 88C3                    	mov	bl,al
 28466 00004396 88C2                    	mov	dl,al
 28467 00004398 B82065                  	mov	ax,6520h
 28468 0000439B CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 28469                                  				; AL = function	-
 28470 0000439D 3A16[CF6E]              	cmp	dl,[_Y_es]		; 'Y' ?
 28471 000043A1 740C                    	je	short getansw_3
 28472 000043A3 3A16[D06E]              	cmp	dl,[_N_o]		; 'N' ?
 28473 000043A7 7406                    	je	short getansw_3
 28474 000043A9 3A16[D16E]              	cmp	dl,[_A_ll]		; 'A' ?
 28475 000043AD 75D8                    	jne	short getansw_2
 28476                                  getansw_3:
 28477 000043AF 88DF                    	mov	bh,bl
 28478 000043B1 53                      	push	bx
 28479 000043B2 881E[CE6E]              	mov	[MSG_1104],bl
 28480 000043B6 B440                    	mov	ah,40h
 28481 000043B8 BB0200                  	mov	bx,2			; std error (file handle = 2)
 28482 000043BB B90100                  	mov	cx,1			; byte count
 28483 000043BE BA[CE6E]                	mov	dx,MSG_1104
 28484 000043C1 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28485                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 28486 000043C3 B440                    	mov	ah,40h
 28487 000043C5 C606[CE6E]08            	mov	byte [MSG_1104],8	; backspace (move cursor to back)
 28488 000043CA CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28489                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 28490 000043CC 5B                      	pop	bx
 28491 000043CD EBB8                    	jmp	short getansw_2
 28492                                  getansw_4:
 28493                                  	;cmp	bh,0
 28494                                  	;jz	short getansw_2
 28495                                  	; 12/06/2023
 28496 000043CF 08FF                    	or	bh,bh
 28497 000043D1 74B4                    	jz	short getansw_2
 28498 000043D3 88FA                    	mov	dl,bh
 28499 000043D5 B82065                  	mov	ax,6520h
 28500 000043D8 CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 28501                                  				; AL = function	-
 28502 000043DA 52                      	push	dx
 28503 000043DB B82E04                  	mov	ax,1070			; message number
 28504 000043DE BB0200                  	mov	bx,2			; std error (file handle = 2)
 28505 000043E1 31C9                    	xor	cx,cx
 28506                                  	;mov	dh,0FFh			; message class	(utility)
 28507                                  	;xor	dl,dl
 28508                                  	; 12/06/2023
 28509 000043E3 31D2                    	xor	dx,dx
 28510 000043E5 FECE                    	dec	dh  ; dh = 0FFh
 28511 000043E7 E81014                  	call	SYSDISPMSG
 28512 000043EA 5A                      	pop	dx
 28513 000043EB 3A16[CF6E]              	cmp	dl,[_Y_es]
 28514 000043EF 740B                    	jz	short getansw_5
 28515 000043F1 3A16[D06E]              	cmp	dl,[_N_o]
 28516 000043F5 7406                    	jz	short getansw_6
 28517 000043F7 C606[88A2]00            	mov	byte [cox_y_override],0
 28518                                  	; 12/06/2023
 28519                                  	;jmp	short $+2
 28520                                  getansw_5:
 28521                                  	; 12/06/2023
 28522                                  	;clc
 28523                                  	; cf = 0
 28524                                  	;jmp	short getansw_7
 28525                                  	; 12/06/2023
 28526 000043FC C3                      	retn
 28527                                  getansw_6:
 28528                                  gcpcmdo_2:	; 12/06/2023
 28529                                  gecpcmd_3:	; 12/06/2023
 28530 000043FD F9                      	stc
 28531                                  getansw_7:
 28532 000043FE C3                      	retn
 28533                                  
 28534                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28535                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:463Ah
 28536                                  init_copycmd_option:
 28537 000043FF C606[88A2]01            	mov	byte [cox_y_override],1 ; suppress copy overwrite confirmation
 28538 00004404 06                      	push	es
 28539 00004405 8E06[159E]              	mov	es,[RESSEG]
 28540 00004409 268E06[DC03]            	mov	es,[es:EnvirSeg]
 28541 0000440E 8D36[1E99]              	lea	si,copycmd		; "COPYCMD="
 28542 00004412 B90800                  	mov	cx,8
 28543 00004415 E83500                  	call	getenv_copycmd
 28544 00004418 7216                    	jc	short icpcmd_3
 28545 0000441A E82000                  	call	get_copycmd_option	; copycmd=/Y or copycmd=/-Y
 28546 0000441D 720F                    	jc	short icpcmd_2
 28547 0000441F 47                      	inc	di			; skip '/'
 28548 00004420 268A05                  	mov	al,[es:di]
 28549 00004423 24DF                    	and	al,0DFh			; convert to uppercase
 28550 00004425 3C59                    	cmp	al,'Y'
 28551 00004427 7505                    	jnz	short icpcmd_2
 28552                                  icpcmd_1:
 28553 00004429 C606[88A2]00            	mov	byte [cox_y_override],0	; clear copy overwrite question/confirmation
 28554                                  					; (don't suppress)
 28555                                  icpcmd_2:
 28556 0000442E 07                      	pop	es
 28557 0000442F C3                      	retn
 28558                                  icpcmd_3:				; ...
 28559 00004430 8E06[159E]              	mov	es,[RESSEG]
 28560 00004434 803E[9B01]00            	cmp	byte [cox_Y_option],0	; default (/Y) switch option (1 = enabled)
 28561 00004439 74F3                    	jz	short icpcmd_2
 28562 0000443B EBEC                    	jmp	short icpcmd_1
 28563                                  
 28564                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28565                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4679h
 28566                                  get_copycmd_option:
 28567 0000443D 26803D00                	cmp	byte [es:di],0
 28568 00004441 74BA                    	jz	short gcpcmdo_2
 28569 00004443 26803D2F                	cmp	byte [es:di],'/'
 28570 00004447 7403                    	jz	short gcpcmdo_1
 28571 00004449 47                      	inc	di
 28572 0000444A EBF1                    	jmp	short get_copycmd_option
 28573                                  gcpcmdo_1:
 28574                                  	; 12/06/2023
 28575                                  	;clc
 28576                                  	; cf = 0
 28577                                  	;jmp	short gcpcmdo_3
 28578                                  	; 12/06/2023
 28579 0000444C C3                      	retn
 28580                                  	; 12/06/2023
 28581                                  ;gcpcmdo_2:
 28582                                  ;	stc
 28583                                  ;gcpcmdo_3:
 28584                                  ;	retn
 28585                                  
 28586                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28587                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:468Dh
 28588                                  getenv_copycmd:
 28589 0000444D 31FF                    	xor	di,di
 28590 0000444F 30C0                    	xor	al,al
 28591                                  gecpcmd_1:
 28592                                  	;cmp	byte [es:di],0
 28593                                  	; 12/06/2023
 28594 00004451 263805                  	cmp	[es:di],al ; 0
 28595 00004454 74A7                    	jz	short gecpcmd_3
 28596 00004456 51                      	push	cx
 28597 00004457 56                      	push	si
 28598 00004458 F3A6                    	repe	cmpsb
 28599 0000445A 5E                      	pop	si
 28600 0000445B 59                      	pop	cx
 28601 0000445C 7409                    	jz	short gecpcmd_2 ; cf = 0
 28602 0000445E 51                      	push	cx
 28603 0000445F B90080                  	mov	cx,32768
 28604 00004462 F2AE                    	repne	scasb	; al = 0
 28605 00004464 59                      	pop	cx
 28606 00004465 EBEA                    	jmp	short gecpcmd_1
 28607                                  gecpcmd_2:
 28608                                  	;clc
 28609                                  	; 12/06/2023
 28610                                  	; cf = 0
 28611                                  	;jmp	short gecpcmd_4
 28612                                  	; 12/06/2023
 28613 00004467 C3                      	retn
 28614                                  	; 12/06/2023
 28615                                  ;gecpcmd_3:
 28616                                  ;	stc
 28617                                  ;gecpcmd_4:
 28618                                  ;	retn
 28619                                  
 28620                                  ;============================================================================
 28621                                  ; COPYPR1.ASM, MSDOS 6.0, 1991
 28622                                  ;============================================================================
 28623                                  ; 01/10/2018 - Retro DOS v3.0
 28624                                  
 28625                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2FBBh
 28626                                  
 28627                                  ; =============== S U B	R O U T	I N E =======================================
 28628                                  
 28629                                  ;***	TryFlush - flush copy buffer, double-check for concatenation
 28630                                  ;
 28631                                  ;	EXIT	ZR set if concatenate flag unchanged
 28632                                  
 28633                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28634                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3EEAh
 28635                                  
 28636                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28637                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46ADh
 28638                                  TRYFLUSH:
 28639 00004468 A0[2A9E]                	mov	al,[Concat]
 28640 0000446B 50                      	push	ax
 28641                                  	;call	FLUSHFIL
 28642 0000446C E80600                  	call	FlshFil
 28643 0000446F 58                      	pop	ax
 28644 00004470 3A06[2A9E]              	cmp	al,[Concat]
 28645 00004474 C3                      	retn
 28646                                  
 28647                                  ; =============== S U B	R O U T	I N E =======================================
 28648                                  
 28649                                  	; 26/03/2023
 28650                                  	; MSDOS 3.3
 28651                                  ;FLUSHFIL:
 28652                                  	;mov	al,[BINARY]
 28653                                  	;mov	ah,[ASCII]
 28654                                  	;push	ax
 28655                                  	;call	FLSHFIL
 28656                                  	;pop	ax
 28657                                  	;mov	[ASCII],ah
 28658                                  	;mov	[BINARY],al
 28659                                  	;retn
 28660                                  
 28661                                  ; =============== S U B	R O U T	I N E =======================================
 28662                                  
 28663                                  ;***	Flshfil - write out any data remaining in copy buffer.
 28664                                  ;
 28665                                  ;	Inputs:
 28666                                  ;	  [NXTADD] = No. of bytes to write
 28667                                  ;	  [CFLAG] <> 0 if file has been created
 28668                                  ;	Outputs:
 28669                                  ;	  [NXTADD] = 0
 28670                                  
 28671                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28672                                  	;
 28673                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 28674                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46BAh
 28675                                  FlshFil:
 28676 00004475 C606[70A2]00            	mov	byte [TERMREAD],0
 28677 0000447A 803E[349E]00            	cmp	byte [CFLAG],0
 28678 0000447F 7403                    	jz	short NotExists
 28679 00004481 E99600                  	jmp	Exists
 28680                                  NotExists:
 28681 00004484 E8A101                  	call	BUILDDEST		; find out all about the destination
 28682 00004487 E8FA03                  	call	COMPNAME		; source and dest. the same?
 28683 0000448A 7519                    	jnz	short ProcDest		; if not, go ahead
 28684 0000448C 803E[11A2]00            	cmp	byte [SRCISDEV],0
 28685 00004491 7512                    	jnz	short ProcDest		; same name on device ok
 28686 00004493 803E[2A9E]00            	cmp	byte [Concat],0		; concatenation?
 28687 00004498 BA[1C92]                	mov	dx,OVERWR_PTR
 28688                                  	;je	short COPERR		; not concatenating - overwrite error
 28689                                  	; 26/03/2023
 28690 0000449B 7503                    	jne	short No_Concat_Err
 28691 0000449D E91201                  	jmp	COPYERR
 28692                                  	
 28693                                  No_Concat_Err:	; concatenating
 28694 000044A0 C606[6CA2]01            	mov	byte [NOWRITE],1 	; flag not writing (just seeking)
 28695                                  ProcDest:
 28696                                  	; MSDOS 6.0
 28697                                  	;mov	ax,(ExtOpen<<8)		; open the file
 28698                                  	; 26/03/2023
 28699 000044A5 B8006C                  	mov	ax,6C00h
 28700 000044A8 BE[55A1]                	mov	si,DestBuf		; get file name
 28701                                  ;M046
 28702                                  ; For writes, we want to deny writes by anyone else at the same time that we
 28703                                  ;are writing to it. For instance, on a network, 2 workstations could try
 28704                                  ;writing to the same file. Also, because we opened the source file with
 28705                                  ;DENY NONE, it is fine if the source and destination files are the same as
 28706                                  ;would happen when we append to an existing file.
 28707                                  
 28708                                  	; 26/03/2023
 28709                                  	;mov	bx,deny_write|write_open_mode
 28710 000044AB BB2100                  	mov	bx,21h			; get open mode for copy; M046
 28711 000044AE 31C9                    	xor	cx,cx			; no special files
 28712                                  	;mov	dx,write_open_flag	; set up open flags
 28713 000044B0 BA0101                  	mov	dx,101h	
 28714                                  
 28715 000044B3 803E[6CA2]00            	cmp	byte [NOWRITE],0
 28716 000044B8 7503                    	jne	short DoDestOpen	; don't actually create if nowrite set
 28717                                  	;mov	dx,creat_open_flag	; set up create flags
 28718 000044BA BA1201                  	mov	dx,112h
 28719                                  
 28720                                  	; 26/03/2023
 28721                                  	; MSDOS 3.3
 28722                                  	;mov	ax,(OPEN*256)+1 ; 3D01h ; open file, write access
 28723                                  	;cmp	byte [NOWRITE],0
 28724                                  	;jne	short DODESTOPEN
 28725                                  	;mov	ah,CREAT ; 3Ch
 28726                                  	;xor	cx,cx
 28727                                  ;DODESTOPEN:
 28728                                  	;mov	dx,DESTBUF
 28729                                  	;int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 28730                                  	;		; CX = attributes for file
 28731                                  	;		; DS:DX	-> ASCIZ filename (may include drive and path)
 28732                                  
 28733                                  ; 26/03/2023
 28734                                  ;	; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 301Ch
 28735                                  ;	;mov	dx,FULDIRPTR
 28736                                  ;	;call	GET_EXT_ERR_NUMBER
 28737                                  ;	;jc	short COPERR
 28738                                  ;
 28739                                  ;	; 01/10/2018
 28740                                  ;	;jnc	short DEST_OPEN_OKAY
 28741                                  ;		
 28742                                  ;	;mov	dx,FULDIRPTR
 28743                                  ;	;call	GET_EXT_ERR_NUMBER
 28744                                  ;	;jmp	short COPERR
 28745                                  ;
 28746                                  ;	jc	short DEST_OPEN_ERROR
 28747                                  
 28748                                  	; 26/03/2023
 28749                                  DoDestOpen:
 28750 000044BD CD21                    	int     21h	; DOS - 4.0 - EXTENDED OPEN/CREATE
 28751                                  			; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
 28752                                  			; BH = flags
 28753                                  			; CX = create attribute
 28754                                  			; DL = action if file exists/does not exists
 28755                                  			; DH = 00h (reserved), DS:SI -> ASCIZ file name
 28756                                  
 28757                                  ;	We assume that the error is normal.
 28758                                  ;	TriageError will correct the DX value appropriately.
 28759                                  	
 28760 000044BF 7311                    	jnc	short Dest_Open_Okay
 28761                                  Xa_Set_Error:				;AN030; error occurred on XA
 28762 000044C1 E870DD                  	call	Set_Ext_Error_Msg	;AN030; get extended error
 28763                                  
 28764                                  	; 26/04/2023 - Retro DOS v4.0 ( 4.1) COMMAND.COM
 28765                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3F46h
 28766                                  Ext_Err_Set:				;AN030;
 28767 000044C4 C706[37A1][55A1]        	mov	word [string_ptr_2],DestBuf
 28768                                  					;AN000; get address of failed string
 28769 000044CA C606[F591]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 28770                                  					;AN030; put number of subst in control block
 28771                                  CopErrJ2:				;AN030;
 28772 000044CF E9E000                  	jmp	COPYERR			;AN030; go issue message
 28773                                  
 28774                                  ;DEST_OPEN_OKAY:
 28775                                  	; 26/03/2023
 28776                                  Dest_Open_Okay:
 28777 000044D2 A3[ACA1]                	mov	[DESTHAND],ax		; save handle
 28778 000044D5 C606[349E]01            	mov	byte [CFLAG],1		; destination now exists
 28779 000044DA 89C3                    	mov	bx,ax
 28780 000044DC B80044                  	mov	ax,IOCTL*256 ; 4400h 	; get device stuff
 28781 000044DF CD21                    	int	21h	   	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 28782                                  			   	; BX = file or device handle
 28783                                  
 28784 000044E1 8816[AEA1]              	mov	[DESTISDEV],dl		; set dest info
 28785                                  	; 18/04/2023
 28786 000044E5 F6C280                  	test	dl,80h
 28787                                  	;test	dl,devid_ISDEV
 28788 000044E8 7430                    	jz	short Exists		; Dest not a device
 28789                                  
 28790                                  ;	Destination is device.
 28791                                  
 28792 000044EA A0[309E]                	mov	al,[DestSwitch]
 28793                                  	; 26/03/2023
 28794 000044ED 240C                    	and	al,0Ch
 28795                                  	;and	al,SWITCHA+SWITCHB ; 4+8
 28796 000044EF 7509                    	jnz	short TestBoth
 28797 000044F1 A0[71A2]                	mov	al,[ASCII]		; neither set, use current setting
 28798 000044F4 0A06[6DA2]              	or	al,[BINARY]
 28799 000044F8 7416                    	jz	short ExSetA		; neither set, default to ascii
 28800                                  TestBoth:
 28801 000044FA 7A1E                    	jpe	short Exists		; both are set, ignore
 28802 000044FC A808                    	test	al,8
 28803                                  	;test	al,SWITCHB
 28804 000044FE 741A                    	jz	short Exists
 28805                                  	;mov	ax,(IOCTL shl 8) or 1
 28806 00004500 B80144                  	mov	ax,(IOCTL<<8)|1 ; 4401h
 28807 00004503 30F6                    	xor	dh,dh
 28808                                  	; 18/04/2023
 28809 00004505 80CA20                  	or	dl,20h
 28810                                  	;or	dl,devid_RAW
 28811 00004508 8816[AEA1]              	mov	[DESTISDEV],dl
 28812 0000450C CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 28813                                  			; BX = device handle,DH = 0
 28814                                  			; DL = device information to set (bits 0-7 from	function 0)
 28815 0000450E EB0A                    	jmp	short Exists
 28816                                  
 28817                                  	; 26/03/2023
 28818                                  	; 01/10/2018 - Retro DOS v3.0 modification
 28819                                  ;DEST_OPEN_ERROR:
 28820                                  	;mov	dx,FULDIRPTR
 28821                                  	;call	GET_EXT_ERR_NUMBER
 28822                                  ;COPERR:
 28823                                  	; 26/03/2023
 28824                                  ;CopyErrj:
 28825                                  	;jmp	short COPYERR
 28826                                  
 28827                                  ExSetA:
 28828                                  ;	What we read in may have been in binary mode, flag zapped write OK
 28829                                  
 28830 00004510 C606[71A2]04            	mov	byte [ASCII],4
 28831                                  	;mov	byte [ASCII],SWITCHA	; set ascii mode
 28832 00004515 800E[6BA2]04            	or	byte [INEXACT],4
 28833                                  	;or	byte [INEXACT],SWITCHA	; ascii -> inexact
 28834                                  Exists:
 28835 0000451A 803E[6CA2]00            	cmp	byte [NOWRITE],0
 28836 0000451F 7524                    	jnz	short NoChecking	; if nowrite don't bother with name check
 28837 00004521 803E[ADA0]01            	cmp	byte [plus_comma],1	; don't check if just doing +,,
 28838 00004526 741D                    	jz	short NoChecking
 28839 00004528 E85903                  	call	COMPNAME		; source and dest. the same?
 28840 0000452B 7518                    	jnz	short NoChecking	; if not, go ahead
 28841 0000452D 803E[11A2]00            	cmp	byte [SRCISDEV],0
 28842 00004532 7511                    	jne	short NoChecking	; same name on device ok
 28843                                  
 28844                                  ;	At this point we know in append (would have gotten overwrite error
 28845                                  ;	on first destination create otherwise), and user trying to specify
 28846                                  ;	destination which has been scribbled already (if dest had been named
 28847                                  ;	first, NoWrite would be set).
 28848                                  
 28849 00004534 BA[1F92]                	mov	dx,LOSTERR_PTR		; tell him he's not going to get it
 28850                                  	;invoke	Std_EprintF		;ac022;
 28851                                  	; 26/03/2023
 28852 00004537 E8EB0F                  	call	std_eprintf ; MSDOS 6.0 (& 5.0)
 28853                                  	;call	STD_PRINTF  ; MSDOS 3.3	
 28854 0000453A C706[3A9E]0000          	mov	word [NXTADD],0		; set return
 28855 00004540 FE06[70A2]              	inc	byte [TERMREAD]		; tell read to give up
 28856                                  Ret60:
 28857 00004544 C3                      	retn
 28858                                  
 28859                                  NoChecking:
 28860 00004545 8B1E[ACA1]              	mov	bx,[DESTHAND]		; get handle
 28861 00004549 31C9                    	xor	cx,cx
 28862 0000454B 870E[3A9E]              	xchg	cx,[NXTADD]
 28863 0000454F E3F3                    	jcxz	Ret60			; if nothing to write, forget it
 28864 00004551 FF06[6EA2]              	inc	word [WRITTEN]		; flag that we wrote something
 28865 00004555 803E[6CA2]00            	cmp	byte [NOWRITE],0	; if nowrite set, just seek cx bytes
 28866 0000455A 7514                    	jnz	short SeekEnd
 28867 0000455C 31D2                    	xor	dx,dx
 28868 0000455E 1E                      	push	ds
 28869 0000455F 8E1E[179E]              	mov	ds,[TPA]
 28870 00004563 B440                    	mov	ah,Write ; 40h
 28871 00004565 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28872                                  			; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 28873 00004567 1F                      	pop	ds
 28874 00004568 BA[0792]                	mov	dx,NOSPACE_PTR
 28875                                  	;jc	short COPERRP		; failure
 28876                                  	; 26/03/2023
 28877                                  	; MSDOS 6.0
 28878 0000456B 7326                    	jnc	short NoChecking2
 28879 0000456D E951FF                  	jmp	Xa_Set_Error
 28880                                  
 28881                                  	; 18/04/2023
 28882                                  	; 26/03/2023
 28883                                  SeekEnd:
 28884 00004570 31D2                    	xor	dx,dx
 28885 00004572 87D1                    	xchg	dx,cx
 28886                                  	;mov	ax,(LSEEK shl 8) or 1
 28887 00004574 B80142                  	mov	ax,(LSEEK<<8)|1 ; 4201h
 28888 00004577 CD21                    	int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 28889                                  				; AL = method: offset from present location
 28890                                  
 28891                                  	; 26/03/2023
 28892                                  	; MSDOS 6.0
 28893                                  
 28894                                  ;	Save the file pointer in DX:AX to restore the file
 28895                                  ;	with in case the copy should fail.
 28896                                  
 28897 00004579 A3[78A2]                	mov	[OFilePtr_Lo],ax
 28898 0000457C 8916[7AA2]              	mov	[OFilePtr_Hi],dx
 28899                                  
 28900                                  	; 26/03/2023
 28901                                  	; MSDOS 3.3  MSDOS 6.0
 28902                                  
 28903 00004580 803E[289E]00            	cmp	byte [RDEOF],0
 28904 00004585 740B                    	jz	short Retz60
 28905                                  
 28906                                  ;	^Z has been read - we must set the file size to the current
 28907                                  ;	file pointer location
 28908                                  
 28909 00004587 B440                    	mov	ah,Write ; 40h
 28910 00004589 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28911                                  				; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 28912                                  
 28913                                  	; 26/03/2023
 28914                                  	; MSDOS 6.0
 28915 0000458B 727E                    	jc	short Xa_Set_Error_Jmp	;AC022; failure
 28916                                  
 28917                                  ;	Make note that ^Z was removed, in case the
 28918                                  ;	copy should fail and we need to restore the file.
 28919                                  
 28920 0000458D C606[7CA2]1A            	mov	byte [OCtrlZ],1Ah
 28921                                  Retz60:
 28922 00004592 C3                      	retn
 28923                                  
 28924                                  NoChecking2:
 28925 00004593 29C1                    	sub	cx,ax
 28926 00004595 74AD                    	jz	short Ret60		; wrote all supposed to
 28927                                  	; 18/04/2023
 28928 00004597 F606[AEA1]80            	test	byte [DESTISDEV],80h ; devid_ISDEV
 28929                                  	;test	byte [DESTISDEV],devid_ISDEV ;80h
 28930 0000459C 7414                    	jz	short COPYERR		; is a file, error
 28931 0000459E F606[AEA1]20            	test	byte [DESTISDEV],20h  ; devid_RAW
 28932                                  	;test	byte [DESTISDEV],devid_RAW ; 20h
 28933 000045A3 750A                    	jnz	short DevWrtErr	; is a raw device, error
 28934 000045A5 803E[6BA2]00            	cmp	byte [INEXACT],0
 28935 000045AA 7598                    	jnz	short Ret60		; inexact so ok
 28936 000045AC 49                      	dec	cx
 28937                                  ;Retz60:
 28938 000045AD 7495                    	jz	short Ret60		; wrote one byte less (the ^z)		
 28939                                  
 28940                                  DevWrtErr:
 28941 000045AF BA[8A93]                	mov	dx,DEVWMES_PTR
 28942                                  	; 26/03/2023
 28943                                  COPYERR:
 28944                                  	;invoke	Std_EPrintF		;AC022;
 28945 000045B2 E8700F                  	call	std_eprintf  ; MSDOS 6.0
 28946                                  	;call	STD_PRINTF   ; MSDOS 3.3
 28947                                  CopErrP:
 28948 000045B5 FE06[359E]              	inc	byte [DestClosed]
 28949 000045B9 803E[349E]00            	cmp	byte [CFLAG],0
 28950 000045BE 7448                    	jz	short EndCopyJ		; never actually got it open
 28951 000045C0 8B1E[ACA1]              	mov	bx,[DESTHAND]
 28952 000045C4 83FB00                  	cmp	bx,0
 28953 000045C7 7E33                    	jle	short NoClose
 28954                                  
 28955                                  ;	Check to see if we should save part of the destination file.
 28956                                  
 28957                                  	; 26/03/2023
 28958                                  	; MSDOS 6.0
 28959 000045C9 8B0E[7AA2]              	mov	cx,[OFilePtr_Hi]	; CX = hi word of original file ptr
 28960 000045CD 8B16[78A2]              	mov	dx,[OFilePtr_Lo]	; DX = lo word of original file ptr
 28961                                  			
 28962 000045D1 89C8                    	mov	ax,cx
 28963 000045D3 09D0                    	or	ax,dx
 28964 000045D5 7421                    	jz	short ceClose		; null file ptr means nothing to save
 28965                                  
 28966                                  ;	Destination was also the first source. Do the best we can to
 28967                                  ;	restore it. Truncate it back to the size we took from it (which
 28968                                  ;	may have been due to a Ctrl-Z, so may not have included the whole
 28969                                  ;	file). If a Ctrl-Z was originally read, put it back.
 28970                                  
 28971 000045D7 B80042                  	mov	ax,(LSEEK<<8) ; 4200h
 28972 000045DA CD21                    	int	21h
 28973                                  
 28974 000045DC 31C9                    	xor	cx,cx			; CX = # bytes to write = 0
 28975 000045DE B440                    	mov	ah,Write ; 40h
 28976 000045E0 CD21                    	int	21h			; truncate file
 28977                                  
 28978 000045E2 803E[7CA2]00            	cmp	byte [OCtrlZ],0
 28979 000045E7 7408                    	je	short ceClose0		; no ctrl-z removed from original
 28980 000045E9 41                      	inc	cx			; CX = # bytes to write = 1
 28981 000045EA BA[7CA2]                	mov	dx,OCtrlZ		; DS:DX = ptr to original ctrl-z
 28982 000045ED B440                    	mov	ah,Write ; 40h
 28983 000045EF CD21                    	int	21h			; write ctrl-z
 28984                                  ceClose0:
 28985 000045F1 B43E                    	mov	ah,CLOSE ; 3Eh
 28986 000045F3 CD21                    	int	21h			; close it
 28987                                  ;;	;mov	byte [CFLAG],0
 28988 000045F5 E9ECF8                  	jmp	ENDCOPY			; and go home
 28989                                  
 28990                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28991                                  ceClose:
 28992 000045F8 B43E                    	mov	ah,CLOSE ; 3Eh		; close the file
 28993 000045FA CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28994                                  				; BX = file handle
 28995                                  NoClose:
 28996 000045FC BA[55A1]                	mov	dx,DestBuf
 28997 000045FF B441                    	mov	ah,Unlink ; 41h 	; and delete it
 28998 00004601 CD21                    	int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
 28999                                  				; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
 29000 00004603 C606[349E]00            	mov	byte [CFLAG],0
 29001                                  EndCopyJ:
 29002 00004608 E9D9F8                  	jmp	ENDCOPY
 29003                                  
 29004                                  Xa_Set_Error_Jmp:			;AN022; go set up error message
 29005 0000460B E9B3FE                  	jmp	Xa_Set_Error
 29006                                  
 29007                                  ;============================================================================
 29008                                  ; COPYPR2.ASM, MSDOS 6.0, 1991
 29009                                  ;============================================================================
 29010                                  ; 01/10/2018 - Retro DOS v3.0
 29011                                  
 29012                                  ; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 311Fh
 29013                                  
 29014                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29015                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4095h
 29016                                  
 29017                                  ; =============== S U B	R O U T	I N E =======================================
 29018                                  
 29019                                  ;***	SetAsc - set Ascii, Binary, Inexact flags based on switches
 29020                                  ;
 29021                                  ;	Given switch vector in AX,
 29022                                  ;	  Set Ascii flag if /a is set
 29023                                  ;	  Clear Ascii flag if /b is set
 29024                                  ;	  Binary set if /b specified
 29025                                  ;	  Leave Ascii unchanged if neither or both are set
 29026                                  ; 	Also sets Inexact if Ascii is ever set. 
 29027                                  ;	AL = Ascii on exit, flags set
 29028                                  
 29029                                  	; 26/03/2023
 29030                                  SETASC:
 29031                                  	;and	al,SWITCHA+SWITCHB ; 0Ch ; AL = /a, /b flags
 29032 0000460E 240C                    	and	al,0Ch ; 4+8
 29033 00004610 7A10                    	jpe	short LOADSW	; even parity - both or neither
 29034 00004612 50                      	push	ax
 29035                                  	;and	al,SWITCHB  ; 8
 29036 00004613 2408                    	and	al,8
 29037 00004615 A2[6DA2]                	mov	[BINARY],al
 29038 00004618 58                      	pop	ax
 29039                                  	;and	al,SWITCHA
 29040 00004619 2404                    	and	al,4	
 29041 0000461B A2[71A2]                	mov	[ASCII],al
 29042 0000461E 0806[6BA2]              	or	[INEXACT],al
 29043                                  LOADSW:
 29044 00004622 A0[71A2]                	mov	al,[ASCII]
 29045 00004625 08C0                    	or	al,al
 29046 00004627 C3                      	retn
 29047                                  
 29048                                  ; =============== S U B	R O U T	I N E =======================================
 29049                                  
 29050                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29051                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 29052                                  BUILDDEST:
 29053 00004628 803E[50A1]FF            	cmp	byte [DestIsDir],-1 ; 0FFh
 29054 0000462D 750C                    	jnz	short KNOWABOUTDEST	; figuring already done
 29055 0000462F BF[F79C]                	mov	di,USERDIR1
 29056 00004632 BD[50A1]                	mov	bp,DestVars
 29057 00004635 E8E000                  	call	BUILDPATH
 29058 00004638 E898E3                  	call	RestUDir1
 29059                                  
 29060                                  ;	We now know all about the destination
 29061                                  
 29062                                  KNOWABOUTDEST:
 29063 0000463B 30C0                    	xor	al,al
 29064 0000463D 8606[AFA1]              	xchg	al,[FIRSTDEST]
 29065 00004641 08C0                    	or	al,al
 29066 00004643 7503                    	jnz	short FIRSTDST
 29067 00004645 E98D00                  	jmp	NOFIRSTDEST
 29068                                  
 29069                                  FIRSTDST:
 29070                                  ;	Create an fcb of the original dest.
 29071                                  
 29072 00004648 8B36[52A1]              	mov	si,[DestTail]
 29073 0000464C BF[0DA0]                	mov	di,DestFcb
 29074 0000464F B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 29075 00004652 CD21                    	int	21h		; DOS -	PARSE FILENAME
 29076                                  				; DS:SI	-> string to parse
 29077                                  				; ES:DI	-> buffer to fill with unopened	FCB
 29078                                  				; AL = bit mask	to control parsing
 29079 00004654 803C00                  	cmp	byte [si],0
 29080 00004657 7406                    	jz	short GOODPARSE
 29081                                  
 29082                                  	; 27/03/2023	
 29083                                  	; MSDOS 6.0
 29084                                  	;mov	byte [di+1],"|"	;AD052; must be illegal file name character
 29085                                  	
 29086 00004659 BA[0D92]                	mov	dx,FULLDIR_PTR		;AN052; issue "file creation error"
 29087 0000465C E953FF                  	jmp	COPYERR			;AN052;
 29088                                  GOODPARSE:
 29089 0000465F A1[55A1]                	mov	ax,[DestBuf]		; AX = possible "d:"
 29090 00004662 80FC3A                  	cmp	ah,':'
 29091 00004665 7402                    	jz	short DRVSPEC4
 29092 00004667 B040                    	mov	al,'@'  ; 40h
 29093                                  DRVSPEC4:
 29094                                  ;	AX = "d:" for following FCB drive computation
 29095                                  
 29096 00004669 8A0E[71A2]              	mov	cl,[ASCII]		; CL = saved Ascii flag
 29097 0000466D 0C20                    	or	al,20h
 29098 0000466F 2C60                    	sub	al,60h
 29099 00004671 A2[0DA0]                	mov	[DestFcb],al		; store drive # in FCB
 29100                                  
 29101                                  ;*	Figure out what copy mode we're in.
 29102                                  ;	Letters stand for unambiguous, * for ambiguous pathnames.
 29103                                  ;	+n stands for additional sources delimited by +'s.
 29104                                  ;
 29105                                  ;	copy a b	not concatenating
 29106                                  ;	copy a *	not concatenating
 29107                                  ;	copy * a	concatenating
 29108                                  ;	copy * *	not concatenating
 29109                                  ;	copy a+n b	concatenating
 29110                                  ;	copy *+n a	concatenating
 29111                                  ;	copy *+n *	concatenating, Mel Hallerman style
 29112                                  
 29113                                  ;	Bugbug:  copy *.a+a.b *.t  picks up only 1st *.a file.. Why?
 29114                                  ;		 copy a.b+*.a *.t  picks up all *.a files.
 29115                                  
 29116 00004674 A0[54A1]                	mov	al,[DestInfo]		; AL = destination CParse flags
 29117 00004677 8A26[B7A1]              	mov	ah,[SrcInfo]		; AH = source CParse flags
 29118 0000467B 250202                  	and	ax,202h			; AH,AL = source,dest wildcard flags
 29119 0000467E 08C0                    	or	al,al
 29120 00004680 7413                    	jz	short NOTMELCOPY 	; no destination wildcard
 29121                                  
 29122                                  ;	Destination is wildcarded.
 29123                                  	
 29124 00004682 38E0                    	cmp	al,ah
 29125 00004684 750F                    	jnz	short NOTMELCOPY ; no source wildcard
 29126                                  
 29127                                  ;	Source and destination are both wildcarded.
 29128                                  
 29129 00004686 803E[72A2]00            	cmp	byte [PLUS],0
 29130 0000468B 7408                    	jz	short NOTMELCOPY	; no +'s in source
 29131                                  
 29132                                  ;	Source and destination are wildcarded, and source includes +'s.
 29133                                  ;	It's Mel Hallorman copy time.
 29134                                  
 29135 0000468D FE06[B0A1]              	inc	byte [MELCOPY]		; 'Mel copy' = true
 29136 00004691 30C0                    	xor	al,al
 29137 00004693 EB06                    	jmp	short SETCONC
 29138                                  
 29139                                  NOTMELCOPY:
 29140 00004695 3402                    	xor	al,2			; AL=0 -> ambiguous destination, 2 otherwise
 29141 00004697 20E0                    	and	al,ah
 29142 00004699 D0E8                    	shr	al,1			; AL=1 -> ambiguous source, unambiguous dest
 29143                                  					;   (implies concatenation)
 29144                                  SETCONC:
 29145 0000469B 0A06[72A2]              	or	al,[PLUS]		; "+" always infers concatenation
 29146                                  
 29147                                  ;	Whew. AL = 1 if concatenating, 0 if not.
 29148                                  
 29149 0000469F A2[2A9E]                	mov	[Concat],al
 29150 000046A2 D0E0                    	shl	al,1
 29151 000046A4 D0E0                    	shl	al,1
 29152 000046A6 A2[6BA2]                	mov	[INEXACT],al		; concatenation -> inexact copy
 29153 000046A9 803E[6DA2]00            	cmp	byte [BINARY],0
 29154 000046AE 7525                    	jne	short NOFIRSTDEST 	; explicit binary copy	
 29155                                  
 29156                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 29157                                  	; MSDOS 6.0 (MSDOS.50)
 29158                                  	;mov	[ASCII],al		; otherwise, concatenate in ascii mode
 29159                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:48FAh
 29160 000046B0 0806[71A2]              	or	[ASCII],al	
 29161                                  
 29162 000046B4 08C9                    	or	cl,cl
 29163 000046B6 751D                    	jnz	short NOFIRSTDEST 	; Ascii flag set before, data read correctly	
 29164 000046B8 08C0                    	or	al,al
 29165 000046BA 7419                    	jz	short NOFIRSTDEST 	; Ascii flag did not change state
 29166                                  
 29167                                  ;	At this point there may already be binary read data in the read
 29168                                  ;	buffer. We need to find the first ^Z (if there is one) and trim the
 29169                                  ;	amount of data in the buffer correctly.
 29170                                  
 29171 000046BC 8B0E[3A9E]              	mov	cx,[NXTADD]
 29172 000046C0 E313                    	jcxz	NOFIRSTDEST		; no data, everything ok
 29173 000046C2 B01A                    	mov	al,1Ah
 29174 000046C4 06                      	push	es
 29175 000046C5 31FF                    	xor	di,di
 29176 000046C7 8E06[179E]              	mov	es,[TPA]
 29177 000046CB F2AE                    	repne	scasb			; scan for EOF
 29178 000046CD 07                      	pop	es
 29179 000046CE 7505                    	jnz	short NOFIRSTDEST 	; no ^z in buffer, everything ok
 29180 000046D0 4F                      	dec	di			; point at ^z
 29181 000046D1 893E[3A9E]              	mov	[NXTADD],di		; new buffer length
 29182                                  
 29183                                  NOFIRSTDEST:
 29184 000046D5 BB[51A0]                	mov	bx,DIRBUF+1		; Source of replacement chars
 29185 000046D8 803E[2A9E]00            	cmp	byte [Concat],0
 29186 000046DD 7403                    	jz	short GOTCHRSRC		; Not a concat
 29187 000046DF BB[97A0]                	mov	bx,SDIRBUF+1		; Source of replacement chars
 29188                                  GOTCHRSRC:
 29189 000046E2 BE[0EA0]                	mov	si,DestFcb+1		; Original dest name
 29190 000046E5 8B3E[52A1]              	mov	di,[DestTail]		; Where to put result
 29191                                  
 29192                                  ; --------------- S U B	R O U T	I N E --------------------------------------- 
 29193                                  
 29194                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29195                                  BUILDNAME:
 29196 000046E9 B90800                  	mov	cx,8
 29197                                  BUILDMAIN:
 29198 000046EC AC                      	lodsb
 29199 000046ED 3C3F                    	cmp	al,'?'
 29200 000046EF 7502                    	jne	short NOTAMBIG
 29201 000046F1 8A07                    	mov	al,[bx]
 29202                                  NOTAMBIG:
 29203 000046F3 3C20                    	cmp	al,' '
 29204 000046F5 7401                    	je	short NOSTORE
 29205 000046F7 AA                      	stosb
 29206                                  NOSTORE:
 29207 000046F8 43                      	inc	bx
 29208 000046F9 E2F1                    	loop	BUILDMAIN
 29209 000046FB B103                    	mov	cl,3
 29210                                  	;mov	al,' ' ; 20h
 29211                                  	;cmp	[si],al
 29212                                  	; 27/03/2023
 29213 000046FD 803C20                  	cmp	byte [si],20h ; ' '
 29214 00004700 7412                    	je	short ENDDEST		; No extension
 29215                                  	;mov	al,[DOT_CHR]
 29216                                  	; 27/03/2023
 29217 00004702 B02E                    	mov	al,'.' ; 2Eh ; dot_chr
 29218 00004704 AA                      	stosb
 29219                                  BUILDEXT:
 29220 00004705 AC                      	lodsb
 29221 00004706 3C3F                    	cmp	al,'?'
 29222 00004708 7502                    	jne	short NOTAMBIGE
 29223 0000470A 8A07                    	mov	al,[bx]
 29224                                  NOTAMBIGE:
 29225 0000470C 3C20                    	cmp	al,' '
 29226 0000470E 7401                    	je	short NOSTOREE
 29227 00004710 AA                      	stosb
 29228                                  NOSTOREE:
 29229 00004711 43                      	inc	bx
 29230 00004712 E2F1                    	loop	BUILDEXT
 29231                                  ENDDEST:
 29232 00004714 30C0                    	xor	al,al
 29233 00004716 AA                      	stosb				; NUL terminate
 29234 00004717 C3                      	retn
 29235                                  
 29236                                  ; =============== S U B	R O U T	I N E =======================================
 29237                                  
 29238                                  	; 28/03/2023
 29239                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29240                                  	;
 29241                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29242                                  BUILDPATH:
 29243 00004718 F6460402                	test	byte [bp+VARSTRUC.INFO],2 ; test byte [bp+4],2
 29244 0000471C 7543                    	jnz	short NOTPFILE		; If ambig don't bother with open
 29245 0000471E 89EA                    	mov	dx,bp			; Set DX to spec
 29246 00004720 83C205                  	add	dx,VARSTRUC.BUF 	; add dx,5
 29247                                  
 29248                                  	; 27/03/2023
 29249                                  	; MSDOS 6.0
 29250 00004723 57                      	push	di			;AN000;
 29251 00004724 B8006C                  	mov	ax,(ExtOpen<<8)	; 6C00h	;AC000; open the file
 29252                                  	;mov	bx,deny_none|read_open_mode
 29253 00004727 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 29254 0000472A 31C9                    	xor	cx,cx			;AN000; no special files
 29255 0000472C 89D6                    	mov	si,dx			;AN030; get file name offset
 29256                                  	;mov	dx,read_open_flag	;AN000; set up open flags
 29257 0000472E BA0101                  	mov	dx,101h
 29258 00004731 CD21                    	INT	21h
 29259 00004733 5F                      	pop	di			;AN000;
 29260 00004734 7315                    	jnc	short PURE_FILE		;AN022; is pure file
 29261 00004736 E80BDB                  	call	get_ext_error_number	;AN022; get the extended error
 29262                                  	;cmp	ax,2
 29263 00004739 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ;AN022; if file not found - okay
 29264 0000473C 7423                    	jz	short NOTPFILE		;AN022;
 29265                                  	;cmp	ax,3
 29266 0000473E 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 29267 00004741 741E                    	jz	short NOTPFILE		;AN022;
 29268                                  	;cmp	ax,5
 29269 00004743 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 29270 00004746 7419                    	jz	short NOTPFILE		;AN022;
 29271 00004748 E93CD8                  	jmp	extend_setup		;AN022; exit with error
 29272                                  
 29273                                  	; 27/03/2023
 29274                                  	; MSDOS 3.3
 29275                                  	;mov	ax,OPEN*256 ; 3D00h
 29276                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 29277                                  	;			; DS:DX	-> ASCIZ filename
 29278                                  	;			; AL = access mode
 29279                                  	;			; 0 - read
 29280                                  	;jc	short NOTPFILE
 29281                                  
 29282                                  PURE_FILE:
 29283 0000474B 89C3                    	mov	bx,ax
 29284 0000474D B80044                  	mov	ax,IOCTL*256 ; 4400h
 29285 00004750 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 29286                                  				; BX = file or device handle
 29287 00004752 B43E                    	mov	ah,CLOSE ;3Eh
 29288 00004754 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 29289                                  				; BX = file handle
 29290                                  	; 18/04/2023
 29291 00004756 F6C280                  	test	dl,80h
 29292                                  	;test	dl,devid_ISDEV ; test dl,80h
 29293 00004759 7553                    	jnz	short ISADEV
 29294 0000475B F6460404                	test	byte [bp+VARSTRUC.INFO],4 ; test byte [bp+4],4
 29295 0000475F 744D                    	jz	short ISADEV
 29296                                  NOTPFILE:
 29297 00004761 8B5605                  	mov	dx,[bp+VARSTRUC.BUF] ; mov dx,[bp+5]
 29298                                  	
 29299                                  	; 27/03/2023	
 29300                                  	; MSDOS 6.0
 29301 00004764 80FA00                  	cmp	dl,0		     	;AN034; If no drive specified, get
 29302 00004767 7405                    	je	short SET_DRIVE_SPEC	;AN034;    default drive dir
 29303                                  
 29304 00004769 80FE3A                  	cmp	dh,':'
 29305 0000476C 7402                    	je	short DRVSPEC5
 29306                                  SET_DRIVE_SPEC:
 29307 0000476E B240                    	mov	dl,'@' ; 40h
 29308                                  DRVSPEC5:
 29309 00004770 80CA20                  	or	dl,20h
 29310 00004773 80EA60                  	sub	dl,60h		; A = 1
 29311 00004776 E887E3                  	call	SAVUDIR1
 29312                                  	
 29313                                  	; 27/03/2023
 29314                                  	; MSDOS 6.0
 29315 00004779 7306                    	jnc	short CURDIR_OK		;AN022; if error - exit
 29316 0000477B E8C6DA                  	call	get_ext_error_number	;AN022; get the extended error
 29317 0000477E E906D8                  	jmp	extend_setup		;AN022; exit with error
 29318                                  
 29319                                  CURDIR_OK:
 29320 00004781 89EA                    	mov	dx,bp
 29321                                  	;add	dx,5
 29322 00004783 83C205                  	add	dx,VARSTRUC.BUF		; Set DX for upcomming CHDIRs
 29323                                  	;mov	bh,[bp+4]
 29324 00004786 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 29325 00004789 80E706                  	and	bh,6
 29326 0000478C 80FF06                  	cmp	bh,6			; Ambig and path ?
 29327 0000478F 7518                    	jne	short CHECKAMB		; jmp if no
 29328                                  	;mov	si,[bp+2]
 29329 00004791 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 29330 00004794 B33A                    	mov	bl,':'
 29331 00004796 385CFE                  	cmp	[si-2],bl
 29332 00004799 7506                    	jne	short KNOWNOTSPEC
 29333                                  	;mov	byte [bp+VARSTRUC.ISDIR],2
 29334                                  					; Know is d:/file
 29335                                  	;mov	byte [bp+0],2
 29336 0000479B C6460002                	mov	byte [bp],2
 29337 0000479F EB05                    	jmp	short DOPCDJ
 29338                                  KNOWNOTSPEC:
 29339                                  	;mov	byte [bp+VARSTRUC.ISDIR],1
 29340                                  					; Know is path/file
 29341                                  	;mov	byte [bp+0],1		
 29342 000047A1 C6460001                	mov	byte [bp],1
 29343 000047A5 4E                      	dec	si
 29344                                  DOPCDJ:
 29345 000047A6 E98300                  	jmp	DOPCD
 29346                                  CHECKAMB:
 29347 000047A9 80FF02                  	cmp	bh,2
 29348 000047AC 7505                    	jnz	short CHECKCD
 29349                                  ISSIMPFILE:
 29350                                  ISADEV:
 29351                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 29352                                  	;mov	byte [bp+0],0		
 29353 000047AE C6460000                	mov	byte [bp],0
 29354 000047B2 C3                      	retn
 29355                                  CHECKCD:
 29356 000047B3 E87FEA                  	call	SetRest1
 29357 000047B6 B43B                    	mov	ah,CHDir ; 3Bh
 29358 000047B8 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 29359                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 29360 000047BA 7239                    	jb	short NOTPDIR
 29361 000047BC 89D7                    	mov	di,dx
 29362 000047BE 31C0                    	xor	ax,ax
 29363 000047C0 89C1                    	mov	cx,ax
 29364 000047C2 49                      	dec	cx
 29365                                  	; 14/06/2023
 29366                                  	;repne	scasb	 ; MSDOS 3.3
 29367                                  
 29368                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29369                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:424Ah)
 29370                                  	; MSDOS 6.0
 29371                                  Kloop:					;AN000;  3/3/KK
 29372 000047C3 268A05                  	mov	al,[es:di]		;AN000;  3/3/KK
 29373 000047C6 47                      	inc	di			;AN000;  3/3/KK
 29374 000047C7 08C0                    	or	al,al			;AN000;  3/3/KK
 29375 000047C9 740C                    	jz	short DONE		;AN000;  3/3/KK
 29376 000047CB 30E4                    	xor	ah,ah			;AN000;  3/3/KK
 29377 000047CD E841E1                  	call	testkanj		;AN000;  3/3/KK
 29378 000047D0 74F1                    	jz	short Kloop		;AN000;  3/3/KK
 29379 000047D2 47                      	inc	di			;AN000;  3/3/KK
 29380 000047D3 FEC4                    	inc	ah			;AN000;  3/3/KK
 29381 000047D5 EBEC                    	jmp	short Kloop		;AN000;  3/3/KK
 29382                                  DONE:
 29383 000047D7 4F                      	dec	di
 29384 000047D8 A0[1A9E]                	mov	al,[DIRCHAR]
 29385                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 29386                                  	;mov	byte [bp+0],2
 29387 000047DB C6460002                	mov	byte [bp],2
 29388                                  	; 27/03/2023
 29389                                  	; MSDOS 6.0
 29390 000047DF 08E4                    	or	ah,ah			;AN000; 3/3/KK
 29391 000047E1 7505                    	jnz	short _STORE_PCHAR	;AN000; 3/3/KK	 this is the tra
 29392                                  	;
 29393 000047E3 3A45FF                  	cmp	al,[di-1]
 29394 000047E6 7405                    	jz	short GOTSRCSLSH
 29395                                  _STORE_PCHAR:
 29396 000047E8 AA                      	stosb
 29397                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 ; know path/file
 29398                                  	;mov	byte [bp+0],1
 29399 000047E9 C6460001                	mov	byte [bp],1
 29400                                  GOTSRCSLSH:
 29401                                  	;or	byte [bp+4],6
 29402 000047ED 804E0406                	or 	byte [bp+VARSTRUC.INFO],6 
 29403 000047F1 E87400                  	call	SETSTARS
 29404                                  NOTPDIR_RETN:
 29405 000047F4 C3                      	retn
 29406                                  
 29407                                  	; 28/03/2023
 29408                                  NOTPDIR:
 29409                                  	; MSDOS 6.0
 29410 000047F5 E84CDA                  	call	get_ext_error_number	;AN022; get the extended error
 29411                                  	;cmp	ax,3
 29412 000047F8 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 29413 000047FB 7405                    	je	short NOTPDIR_TRY	;AN022;
 29414                                  	;cmp	ax,5
 29415 000047FD 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 29416 00004800 7560                    	jne	short EXTEND_SETUPJ	;AN022; otherwise - exit error
 29417                                  NOTPDIR_TRY:
 29418                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29419                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 29420                                  	;mov	byte [bp+0],0
 29421 00004802 C6460000                	mov	byte [bp],0
 29422                                  	;mov	bh,[bp+4]
 29423 00004806 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 29424 00004809 F6C704                  	test	bh,4
 29425 0000480C 74E6                    	jz	short NOTPDIR_RETN	; Know pure file, no path seps
 29426                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 29427                                  	;mov	byte [bp+0],2		
 29428 0000480E C6460002                	mov	byte [bp],2
 29429                                  	;mov	si,[bp+2]
 29430 00004812 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 29431 00004815 803C00                  	cmp	byte [si],0
 29432 00004818 744B                    	je	short BADCDERRJ2	; Trailing '/'	
 29433                                  	;mov	bl,[DOT_CHR]
 29434                                  	; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 29435                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 29436 0000481A B32E                    	mov	bl,'.'  ; 2Eh ; dot_chr
 29437 0000481C 381C                    	cmp	[si],bl
 29438 0000481E 7445                    	je	short BADCDERRJ2	; If . or .. pure cd should have worked
 29439 00004820 B33A                    	mov	bl,':'  ; 3Ah
 29440 00004822 385CFE                  	cmp	[si-2],bl
 29441 00004825 7405                    	je	short DOPCD		; Know d:/file
 29442                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 
 29443                                  					; Know path/file
 29444                                  	;mov	byte [bp+0],1
 29445 00004827 C6460001                	mov	byte [bp],1
 29446 0000482B 4E                      	dec	si			; Point at last '/'
 29447                                  DOPCD:
 29448 0000482C 30DB                    	xor	bl,bl
 29449 0000482E 861C                    	xchg	bl,[si]			; Stick in a NUL
 29450 00004830 E802EA                  	call	SetRest1
 29451                                  
 29452                                  	; 28/03/2023
 29453                                  	; MSDOS 6.0 (& MSDOS 5.0)
 29454 00004833 39F2                    	cmp	dx,si			;AN000;  3/3/KK
 29455 00004835 771B                    	ja	short LookBack		;AN000;  3/3/KK
 29456 00004837 56                      	push	si			;AN000;  3/3/KK
 29457 00004838 51                      	push	cx			;AN000;  3/3/KK
 29458 00004839 89F1                    	mov	cx,si			;AN000;  3/3/KK
 29459 0000483B 89D6                    	mov	si,dx			;AN000;  3/3/KK
 29460                                  Kloop2: 				;AN000;  3/3/KK
 29461 0000483D AC                      	lodsb				;AN000;  3/3/KK
 29462 0000483E E8D0E0                  	call	testkanj		;AN000;  3/3/KK
 29463 00004841 7409                    	jz	short NotKanj4		;AN000;  3/3/KK
 29464 00004843 AC                      	lodsb				;AN000;  3/3/KK
 29465 00004844 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 29466 00004846 72F5                    	jb	short Kloop2		;AN000;  3/3/KK
 29467 00004848 59                      	pop	cx			;AN000;  3/3/KK
 29468 00004849 5E                      	pop	si			;AN000;  3/3/KK
 29469 0000484A EB0B                    	jmp	short DoCdr		;AN000;  3/3/KK  Last char is ECS code, don't check for
 29470                                  					;		 trailing path sep
 29471                                  NotKanj4:				;AN000;  3/3/KK
 29472 0000484C 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 29473 0000484E 72ED                    	jb	short Kloop2		;AN000;  3/3/KK
 29474 00004850 59                      	pop	cx			;AN000;  3/3/KK
 29475 00004851 5E                      	pop	si			;AN000;  3/3/KK
 29476                                  LookBack:				;AN000;  3/3/KK
 29477                                  	; 28/03/2023
 29478                                  	; MSDOS 3.3 & MSDOS 6.0
 29479 00004852 3A5CFF                  	cmp	bl,[si-1]		; if double slash, then complain.
 29480 00004855 740E                    	je	short BADCDERRJ2
 29481                                  DoCdr:
 29482 00004857 B43B                    	mov	ah,CHDir ; 3Bh
 29483 00004859 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 29484                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 29485 0000485B 861C                    	xchg	bl,[si]
 29486 0000485D 7395                    	jnc	short NOTPDIR_RETN
 29487                                  	
 29488                                  	; 28/03/2023
 29489                                  	; MSDOS 3.3
 29490                                  ;BADCDERRJ2:
 29491                                  	;stc
 29492                                  	;jmp	BADCDERR
 29493                                  
 29494                                  	; 28/03/2023
 29495                                  	; MSDOS 6.0 (& MSDOS 5.0)
 29496 0000485F E8E2D9                  	call	get_ext_error_number	;AN022; get the extended error
 29497                                  EXTEND_SETUPJ:					;AN022;
 29498 00004862 E922D7                  	jmp	extend_setup		;AN022; go issue the error message
 29499                                  BADCDERRJ2:
 29500 00004865 E91CD7                  	jmp	badpath_err		;AC022; go issue path not found message
 29501                                  
 29502                                  ; =============== S U B	R O U T	I N E =======================================
 29503                                  
 29504                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29505                                  SETSTARS:
 29506                                  	;mov	[bp+2],di
 29507 00004868 897E02                  	mov	[bp+VARSTRUC.TTAIL],di
 29508                                  	;add	byte [bp+1],12
 29509 0000486B 8046010C                	add	byte [bp+VARSTRUC.SIZ],12
 29510                                  	;;mov	ax,[DOT_QMARK] ; '?.' (2E3Fh)
 29511                                  	; 28/03/2023
 29512                                  	; MSDOS 6.0
 29513 0000486F B83F2E                  	mov	ax,dot_qmark ; 2E3Fh
 29514                                  	;mov	ax,'?.' ; dot_qmark
 29515                                  
 29516 00004872 B90800                  	mov	cx,8
 29517 00004875 F3AA                    	rep	stosb
 29518 00004877 86C4                    	xchg	al,ah
 29519 00004879 AA                      	stosb
 29520 0000487A 86C4                    	xchg	al,ah
 29521 0000487C B103                    	mov	cl,3
 29522 0000487E F3AA                    	rep	stosb
 29523 00004880 30C0                    	xor	al,al
 29524 00004882 AA                      	stosb
 29525 00004883 C3                      	retn
 29526                                  
 29527                                  ; =============== S U B	R O U T	I N E =======================================
 29528                                  
 29529                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29530                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29531                                  COMPNAME:
 29532 00004884 BE[55A1]                	mov	si,DestBuf	; do name translate of target
 29533 00004887 BF[9A9B]                	mov	di,TRGXNAME	; save for name comparison
 29534 0000488A B460                    	mov	ah,xNameTrans ; 60h
 29535                                  	;mov	ah,60h
 29536 0000488C CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 29537                                  			; DS:SI	-> ASCIZ relative path string or directory name
 29538                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 29539 0000488E BE[439B]                	mov	si,SRCXNAME	; get name translate of source
 29540 00004891 BF[9A9B]                	mov	di,TRGXNAME	; get name translate of target
 29541                                  	;call	STRCOMP
 29542                                  	;retn
 29543                                  	; 28/03/2023
 29544 00004894 E9DBE2                  	jmp	STRCOMP
 29545                                  
 29546                                  ;============================================================================
 29547                                  ; CPARSE.ASM, MSDOS 6.0, 1991
 29548                                  ;============================================================================
 29549                                  ; 30/09/2018 - Retro DOS v3.0
 29550                                  ; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29551                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29552                                  
 29553                                  ;-----------------------------------------------------------------------;
 29554                                  ; ENTRY:								;
 29555                                  ;	DS:SI	Points input buffer					;
 29556                                  ;	ES:DI	Points to the token buffer				;
 29557                                  ;	BL	Special delimiter for this call 			;
 29558                                  ;		    Always checked last 				;
 29559                                  ;		    set it to space if there is no special delimiter	;
 29560                                  ; EXIT: 								;
 29561                                  ;	DS:SI	Points to next char in the input buffer 		;
 29562                                  ;	ES:DI	Points to the token buffer				;
 29563                                  ;	[STARTEL] Points to start of last element of path in token	;
 29564                                  ;		points to a NUL for no element strings 'd:' 'd:/'       ;
 29565                                  ;	CX	Character count 					;
 29566                                  ;	BH	Condition Code						;
 29567                                  ;			Bit 1H of BH set if switch character		;
 29568                                  ;				Token buffer contains char after	;
 29569                                  ;				switch character			;
 29570                                  ;				BP has switch bits set (ORing only)	;
 29571                                  ;			Bit 2H of BH set if ? or * in token		;
 29572                                  ;				if * found element ? filled		;
 29573                                  ;			Bit 4H of BH set if path sep in token		;
 29574                                  ;			Bit 80H of BH set if the special delimiter	;
 29575                                  ;			   was skipped at the start of this token	;
 29576                                  ;		Token buffer always starts d: for non switch tokens	;
 29577                                  ;	CARRY SET							;
 29578                                  ;	    if CR on input						;
 29579                                  ;		token buffer not altered				;
 29580                                  ;									;
 29581                                  ;	DOES NOT RETURN ON BAD PATH, OR TRAILING SWITCH CHAR ERROR	;
 29582                                  ; MODIFIES:								;
 29583                                  ;	CX, SI, AX, BH, DX and the Carry Flag				;
 29584                                  ;									;
 29585                                  ;-----------------------------------------------------------------------;
 29586                                  
 29587                                  ; Modifications to cparse: recognition of right and left parentheses
 29588                                  ; as integral tokens, and removal of automatic upper-case conversion code.
 29589                                  ;
 29590                                  ; Both modifications were installed in the course of adding a coherent
 29591                                  ; command-line parser to COMMAND.COM which builds a UNIX-style argv[]/argc
 29592                                  ; structure for command-line arguments. This parser relies on cparse to
 29593                                  ; recognize individual tokens.
 29594                                  ;
 29595                                  ; To process for-loops correctly, parentheses must therefore be
 29596                                  ; recognized as tokens. The upper-case conversion code was removed so
 29597                                  ; that commands (such as for and echo) would be able to use the "original"
 29598                                  ; text of the command line.
 29599                                  ;
 29600                                  ; Note also the modification to prevent the automatic conversion of colons
 29601                                  ; into spaces WITHIN THE SOURCE TEXT!
 29602                                  ;
 29603                                  ; Also note that BP is also clobbered if cparse recognizes any switches
 29604                                  ; on the command line.
 29605                                  ;
 29606                                  ; Alan L, OS/MSDOS				    14 August 1983
 29607                                  
 29608                                  ; ---------------------------------------------------------------------------
 29609                                  
 29610                                  ; COMEQU.ASM (MSDOS 6.0, 1991)
 29611                                  
 29612                                  ;FSWITCH	EQU	8000h
 29613                                  ;FBADSWITCH	EQU	4000h
 29614                                  
 29615                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3334h
 29616                                  
 29617                                  ; =============== S U B	R O U T	I N E =======================================
 29618                                  		
 29619                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29620                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 431Fh
 29621                                  
 29622                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29623                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 4AE3h
 29624                                  cparse:
 29625 00004897 31C0                    	xor	ax,ax
 29626 00004899 893E[8DA2]              	mov	[STARTEL],di		; No path element (Is DI correct?)
 29627 0000489D A2[90A2]                	mov	[ELPOS],al		; Start in 8 char prefix
 29628                                  	; MSDOS 3.3
 29629                                  	;mov	[SOURCE],al		
 29630                                  	; MSDOS 6.0
 29631 000048A0 A2[91A2]                	mov	[SKPDEL], al		; No skip delimiter yet
 29632 000048A3 88C7                    	mov	bh,al			; Init nothing
 29633 000048A5 9C                      	pushf				; save flags
 29634 000048A6 57                      	push	di			; save the token buffer addrss
 29635 000048A7 31C9                    	xor	cx,cx			; no chars in token buffer
 29636 000048A9 880E[ACA0]              	mov	[comma],cl		; reset comma flag
 29637                                  moredelim:
 29638 000048AD AC                      	lodsb
 29639 000048AE E887E2                  	call	DELIM
 29640 000048B1 751D                    	jnz	short SCANCDONE
 29641 000048B3 3C20                    	cmp	al,' '
 29642 000048B5 74F6                    	jz	short moredelim
 29643 000048B7 3C09                    	cmp	al,9
 29644 000048B9 74F2                    	jz	short moredelim
 29645                                  	;xchg	al,[SOURCE]
 29646                                  	; 28/03/2023
 29647 000048BB 8606[91A2]              	xchg	al,[SKPDEL]
 29648 000048BF 08C0                    	or	al,al
 29649 000048C1 74EA                    	jz	short moredelim		; One non space/tab delimiter allowed
 29650 000048C3 F6C780                  	test	bh,80h			; has a special char been found?
 29651 000048C6 7405                    	jz	short no_comma		; no - just exit
 29652 000048C8 C606[ACA0]01            	mov	byte [comma],1		; set comma flag
 29653                                  no_comma:
 29654 000048CD E92A01                  	jmp	x_done			; Nul argument
 29655                                  
 29656                                  SCANCDONE:
 29657                                  	; 28/03/2023
 29658                                  	; MSDOS 6.0
 29659                                  	; -----------------------------------
 29660                                  	; Mod to avoid upper-case conversion.
 29661                                  	; -----------------------------------
 29662                                  	; MSDOS 3.3
 29663                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 29664                                  	;jnz	short cpcont1		; 3/3/KK
 29665                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 29666                                  cpcont1:
 29667                                  	; -----------------------------------
 29668                                  	; 28/03/2023
 29669 000048D0 38D8                    	cmp	al,bl			; Special delimiter?
 29670 000048D2 7505                    	jne	short nospec
 29671 000048D4 80CF80                  	or	bh,80h
 29672 000048D7 EBD4                    	jmp	short moredelim
 29673                                  nospec:
 29674 000048D9 3C0D                    	cmp	al,0Dh			; a CR?
 29675 000048DB 7503                    	jne	short ncperror
 29676 000048DD E91501                  	jmp	cperror
 29677                                  ncperror:
 29678 000048E0 3A06[199E]              	cmp	al,[SWITCHAR]		; is the char the switch char?
 29679 000048E4 7503                    	jne	short na_switch		; yes, process...
 29680 000048E6 E91401                  	jmp	a_switch
 29681                                  na_switch:
 29682 000048E9 B23A                    	mov	dl,':'
 29683 000048EB 3814                    	cmp	[si],dl
 29684 000048ED 751D                    	jne	short anum_chard	; Drive not specified
 29685                                  	; 28/03/2023
 29686                                  	; MSDOS 6.0 
 29687 000048EF 803E[3BA1]01            	cmp	byte [cpyflag],1	; 3/3/KK
 29688 000048F4 7503                    	jne	short cpcont2		; 3/3/KK
 29689 000048F6 E842E0                  	call	UPCONV			; 3/3/KK
 29690                                  cpcont2:
 29691 000048F9 E85901                  	call	move_char
 29692 000048FC AC                      	lodsb				; Get the ':'
 29693 000048FD E85501                  	call	move_char
 29694 00004900 893E[8DA2]              	mov	[STARTEL],di
 29695 00004904 C606[8FA2]00            	mov	byte [ELCNT],0
 29696 00004909 E9B300                  	jmp	anum_test
 29697                                  anum_chard:
 29698 0000490C 893E[8DA2]              	mov	[STARTEL],di
 29699 00004910 C606[8FA2]00            	mov	byte [ELCNT],0		; Store of this char sets it to one
 29700 00004915 803E[3BA1]01            	cmp	byte [cpyflag],1	; Was CPARSE called from COPY?
 29701 0000491A 751D                    	jnz	short anum_char		; No, don't add drive spec.
 29702 0000491C E89FE2                  	call	pathchrcmp		; Starts with a pathchar?
 29703 0000491F 7518                    	jnz	short anum_char		; no
 29704 00004921 50                      	push	ax
 29705 00004922 A0[299E]                	mov	al,[CURDRV]		; Insert drive spec
 29706                                  	;add	al,[CAPITAL_A]
 29707                                  	; 28/03/2023
 29708                                  	; MSDOS 6.0
 29709 00004925 0441                    	add	al,'A' ; 41h
 29710 00004927 E82B01                  	call	move_char
 29711 0000492A B03A                    	mov	al,':' ; 3Ah
 29712 0000492C E82601                  	call	move_char
 29713 0000492F 58                      	pop	ax
 29714 00004930 893E[8DA2]              	mov	[STARTEL],di
 29715 00004934 C606[8FA2]00            	mov	byte [ELCNT],0
 29716                                  anum_char:
 29717                                  	; 28/03/2023
 29718                                  	; MSDOS 6.0
 29719 00004939 E8D5DF                  	call	testkanj		;AC048			
 29720 0000493C 7406                    	jz	short NOTKANJ		;AC048;
 29721 0000493E E81401                  	call	move_char
 29722 00004941 AC                      	lodsb
 29723 00004942 EB78                    	jmp	short notspecial
 29724                                  
 29725                                  NOTKANJ:				;AN048; If not kanji
 29726 00004944 803E[3BA1]01            	cmp	byte [cpyflag],1	;AN048; and if we're in COPY
 29727 00004949 7503                    	jne	short TESTDOT 		;AN048;
 29728 0000494B E8EDDF                  	call	UPCONV			;AN048; upper case the char
 29729                                  TESTDOT:
 29730                                  	; 28/03/2023
 29731                                  	;cmp	al,dot_chr  ; 2Eh
 29732 0000494E 3C2E                    	cmp	al,'.'
 29733 00004950 7509                    	jne	short testquest
 29734 00004952 FE06[90A2]              	inc	byte [ELPOS] 		; flag in extension
 29735 00004956 C606[8FA2]FF            	mov	byte [ELCNT],0FFh	; Store of the '.' resets it to 0
 29736                                  testquest:
 29737 0000495B 3C3F                    	cmp	al,'?'  ; 3Fh
 29738 0000495D 7503                    	jnz	short testsplat
 29739 0000495F 80CF02                  	or	bh,2
 29740                                  testsplat:
 29741                                  	;cmp	al,[STAR]
 29742 00004962 3C2A                    	cmp	al,star	; 2Ah
 29743                                  	; 27/04/2023
 29744                                  	;cmp	al,'*' 
 29745 00004964 7530                    	jne	short testpath
 29746 00004966 80CF02                  	or	bh,2
 29747 00004969 803E[C9A2]00            	cmp	byte [expand_star],0
 29748 0000496E 7504                    	jne	short expand_filename
 29749 00004970 EB24                    	jmp	short testpath
 29750                                  
 29751                                  BADPERR2J:
 29752                                  	;jmp	BADPERR2
 29753                                  	; 28/03/2023
 29754                                  	; MSDOS 6.0
 29755 00004972 EB75                    	jmp	short BADPERR2
 29756                                  
 29757                                  expand_filename:
 29758 00004974 B407                    	mov	ah,7
 29759 00004976 803E[90A2]00            	cmp	byte [ELPOS],0
 29760 0000497B 7402                    	jz	short gotelcnt
 29761 0000497D B402                    	mov	ah,2
 29762                                  gotelcnt:
 29763 0000497F B03F                    	mov	al,'?'
 29764 00004981 2A26[8FA2]              	sub	ah,[ELCNT]
 29765 00004985 72EB                    	jb	short BADPERR2J
 29766 00004987 86E1                    	xchg	ah,cl
 29767 00004989 E309                    	jcxz	testpathx
 29768                                  qmove:
 29769 0000498B 86E1                    	xchg	ah,cl
 29770 0000498D E8C500                  	call	move_char
 29771 00004990 86E1                    	xchg	ah,cl
 29772 00004992 E2F7                    	loop	qmove
 29773                                  testpathx:
 29774 00004994 86E1                    	xchg	ah,cl
 29775                                  testpath:
 29776 00004996 E825E2                  	call	pathchrcmp
 29777 00004999 7521                    	jnz	short notspecial
 29778 0000499B 80CF04                  	or	bh,4
 29779 0000499E 803E[C9A2]00            	cmp	byte [expand_star],0
 29780 000049A3 7405                    	jz	short no_err_check
 29781 000049A5 F6C702                  	test	bh,2			; If just hit a '/', cannot have ? or * yet
 29782 000049A8 7545                    	jnz	short BADPERR
 29783                                  no_err_check:
 29784 000049AA 893E[8DA2]              	mov	[STARTEL],di	  	; New element
 29785 000049AE FF06[8DA2]              	inc	word [STARTEL]	  	; Point to char after /
 29786 000049B2 C606[8FA2]FF            	mov	byte [ELCNT],0FFh 	; Store of '/' sets it to 0
 29787 000049B7 C606[90A2]00            	mov	byte [ELPOS],0
 29788                                  notspecial:
 29789 000049BC E89600                  	call	move_char		; just an alphanum string
 29790                                  anum_test:
 29791 000049BF AC                      	lodsb
 29792                                  
 29793                                  	; 28/03/2023
 29794                                  	; MSDOS 6.0
 29795                                  	; -----------------------------------
 29796                                  	; Mod to avoid upper-case conversion.
 29797                                  	; -----------------------------------
 29798                                  	; MSDOS 3.3
 29799                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 29800                                  	;jnz	short cpcont3		; 3/3/KK
 29801                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 29802                                  cpcont3:
 29803                                  	; -----------------------------------
 29804                                  
 29805 000049C0 E875E1                  	call	DELIM
 29806 000049C3 7435                    	jz	short x_done
 29807 000049C5 3C0D                    	cmp	al,0Dh
 29808 000049C7 7431                    	je	short x_done
 29809 000049C9 3A06[199E]              	cmp	al,[SWITCHAR]
 29810 000049CD 742B                    	je	short x_done
 29811 000049CF 38D8                    	cmp	al,bl
 29812 000049D1 7427                    	je	short x_done
 29813 000049D3 3C3A                    	cmp	al,':'			; ':' allowed as trailer because of devices
 29814                                  	; 28/03/2023
 29815                                  	; MSDOS 3.3
 29816                                  	;jnz	short ANUM_CHARJ 
 29817                                  	; MSDOS 6.0
 29818 000049D5 7403                    	je	short FOO15
 29819 000049D7 E95FFF                  	jmp	anum_char
 29820                                  
 29821                                  ; Modification made for parseline.
 29822                                  ; Why would it be necessary to change colons to spaces? In this
 29823                                  ; case, EVERY colon is changed to a space; e.g., 'f:' yields 'f ',
 29824                                  ; but so does 'echo foo:bar' yield 'echo foo bar'.
 29825                                  
 29826                                  FOO15:
 29827 000049DA 803E[3BA1]02            	cmp	byte [cpyflag],2
 29828 000049DF 7505                    	jnz	short cpcont4
 29829 000049E1 E87100                  	call	move_char
 29830 000049E4 EBD9                    	jmp	short anum_test
 29831                                  cpcont4:
 29832 000049E6 46                      	inc	si			; Skip the ':'
 29833 000049E7 EB11                    	jmp	short x_done
 29834                                  
 29835                                  	; 28/03/2023
 29836                                  ;ANUM_CHARJ:
 29837                                  	;jmp	anum_char
 29838                                  
 29839                                  BADPERR2:
 29840 000049E9 BA[0492]                	mov	dx,BADCPMES_PTR
 29841 000049EC E9B5E4                  	jmp	cerror
 29842                                  
 29843                                  BADPERR:
 29844                                  	; 28/03/2023
 29845                                  	;jmp	BADCDERR  ; MSDOS 3.3	
 29846                                  BADCDERR:
 29847                                  	; MSDOS 6.0
 29848 000049EF BA[2E93]                	mov	dx,badcd_ptr		;AC022; Issue "Invalid Directory"
 29849 000049F2 E9AFE4                  	jmp	cerror			;AC022;  message
 29850                                  	
 29851                                  cperror:
 29852 000049F5 4E                      	dec	si			; adjust the pointer
 29853 000049F6 5F                      	pop	di			; retrive token buffer address
 29854 000049F7 9D                      	popf				; restore flags
 29855 000049F8 F9                      	stc				; set the carry bit
 29856 000049F9 C3                      	retn
 29857                                  
 29858                                  x_done:
 29859 000049FA 4E                      	dec	si			; adjust for next round
 29860                                  
 29861                                  ; Mod to recognize right and left parens as integral tokens.
 29862                                  ;x_done2:
 29863 000049FB EB51                    	jmp	short out_token
 29864                                  
 29865                                  a_switch:
 29866 000049FD 80CF01                  	or	bh,1			; Indicate switch
 29867                                  	;or	bp,FSWITCH ; 8000h
 29868                                  	; 28/03/2023
 29869 00004A00 81CD0080                	or	bp,8000h
 29870 00004A04 E829E1                  	call	scanoff
 29871 00004A07 46                      	inc	si
 29872                                  	; 28/03/2023
 29873                                  	; MSDOS 6.0
 29874 00004A08 E806DF                  	call	testkanj		;AN057; See if DBCS lead byte
 29875 00004A0B 740D                    	jz	short a_switch_notkanj	;AN057; no - continue processing
 29876 00004A0D E84500                  	call	move_char		;AN057; DBCS - store first byte
 29877 00004A10 AC                      	lodsb				;AN057; get second byte
 29878 00004A11 E84100                  	call	move_char		;AN057; store second byte
 29879                                  	;or	bp,FBADSWITCH ; 4000h	;AN057; DBCS switch is invalid
 29880 00004A14 81CD0040                	or	bp,4000h
 29881 00004A18 EB34                    	jmp	short out_token 	;AN057; don't bother checking switch
 29882                                  a_switch_notkanj:			;AN057;
 29883 00004A1A 3C0D                    	cmp	al,0Dh
 29884 00004A1C 7509                    	jne	short Store_swt
 29885 00004A1E B000                    	mov	al,0
 29886 00004A20 AA                      	stosb
 29887                                  	;or	bp,FBADSWITCH ; 4000h
 29888 00004A21 81CD0040                	or	bp,4000h
 29889 00004A25 EBCE                    	jmp	short cperror		; Trailing switch character error
 29890                                  					;   BP = fSwitch but no switch
 29891                                  					;   bit is set (unknown switch)
 29892                                  Store_swt:
 29893 00004A27 E82B00                  	call	move_char		; store the character
 29894                                  
 29895                                  ; This upconv call must stay. It is used to identify copy-switches
 29896                                  ; on the command line, and won't store anything into the output buffer.
 29897                                  
 29898                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3 (Retro DOS 3.0)
 29899                                  	; 28/03/2023
 29900 00004A2A E80EDF                  	call	UPCONV 	; MSDOS 6.0 & MSDOS 5.0 (Retro DOS 4.0)
 29901                                  	
 29902 00004A2D 06                      	push	es
 29903 00004A2E 57                      	push	di
 29904 00004A2F 51                      	push	cx
 29905 00004A30 0E                      	push	cs
 29906 00004A31 07                      	pop	es
 29907                                  	; 28/03/2023
 29908                                  	; MSDOS 3.3
 29909                                  	;;mov	di,SWITCH_LIST ; "VBAPW"
 29910                                  	; MSDOS 6.0
 29911                                  	;mov	di,switch_list ; "?VBAPW"
 29912                                  	; 14/06/*2023
 29913                                  	; MSDOS 6.22
 29914 00004A32 BF[8297]                	mov	di,switch_list ; "-Y?VBAPW"
 29915                                  
 29916                                  	; MSDOS 3.3
 29917                                  	;mov	cx,SWCOUNT ; 5
 29918                                  	; MSDOS 6.0
 29919                                  	;mov	cx,6  ; SWCOUNT = 6
 29920                                  	; 14/06/2023
 29921                                  	; MSDOS 6.22
 29922 00004A35 B90800                  	mov	cx,8  ; SWCOUNT = 8	
 29923                                  
 29924                                  	;or	bp,FBADSWITCH  ; 4000h
 29925 00004A38 81CD0040                	or	bp,4000h
 29926 00004A3C F2AE                    	repne	scasb
 29927 00004A3E 750B                    	jnz	short out_tokenp
 29928                                  	;and	bp,~FBADSWITCH ; 0BFFFh
 29929 00004A40 81E5FFBF                	and	bp,0BFFFh
 29930 00004A44 B80100                  	mov	ax,1
 29931 00004A47 D3E0                    	shl	ax,cl
 29932 00004A49 09C5                    	or	bp,ax
 29933                                  out_tokenp:
 29934 00004A4B 59                      	pop	cx
 29935 00004A4C 5F                      	pop	di
 29936 00004A4D 07                      	pop	es
 29937                                  out_token:
 29938 00004A4E B000                    	mov	al,0			; null at the end
 29939 00004A50 AA                      	stosb
 29940 00004A51 5F                      	pop	di			; restore token buffer pointer	
 29941 00004A52 9D                      	popf
 29942 00004A53 F8                      	clc				; clear carry flag
 29943 00004A54 C3                      	retn
 29944                                  
 29945                                  ; =============== S U B	R O U T	I N E =======================================
 29946                                  
 29947                                  	; 28/03/2023
 29948                                  move_char:
 29949 00004A55 AA                      	stosb				; store char in token buffer
 29950 00004A56 41                      	inc	cx			; increment char count
 29951 00004A57 FE06[8FA2]              	inc	byte [ELCNT]		; increment element count for * substi
 29952 00004A5B C3                      	retn
 29953                                  
 29954                                  ;============================================================================
 29955                                  ; PARSE.ASM, MSDOS 6.0, 1991
 29956                                  ;============================================================================
 29957                                  ; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29958                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 29959                                  
 29960                                  ; -----------------------------
 29961                                  ; (PSDATA.INC, MSDOS 6.0, 1991)
 29962                                  ; -----------------------------
 29963                                  
 29964                                  ;**** Equation field
 29965                                  ;-------- Character code definition
 29966                                  
 29967                                  $P_DBSP1	   equ	20h ; DB_SP_HI	;AN000; 1st byte of DBCS blank
 29968                                  $P_DBSP2	   equ	20h ; DB_SP_LO	;AN000; 2nd byte of DBCS blank
 29969                                  $P_Period	   equ	"."             ;AN020;
 29970                                  $P_Slash	   equ	"/"             ;AN020;
 29971                                  $P_Space	   equ	" "             ;AN000; SBCS blank
 29972                                  $P_Comma	   equ	","             ;AN000;
 29973                                  $P_Switch	   equ	"/"             ;AN000;
 29974                                  $P_Keyword	   equ	"="             ;AN000;
 29975                                  $P_Colon	   equ	":"             ;AN000;
 29976                                  $P_Plus 	   equ	"+"             ;AN000;
 29977                                  $P_Minus	   equ	"-"             ;AN000;
 29978                                  $P_Rparen	   equ	")"             ;AN000;
 29979                                  $P_Lparen	   equ	"("             ;AN000;
 29980                                  ;(deleted ;AN025;) $P_SQuote equ  "'"
 29981                                  $P_DQuote	   equ	'"'             ;AN000;
 29982                                  $P_NULL 	   equ	0		;AN000;
 29983                                  $P_TAB		   equ	9		;AN000;
 29984                                  $P_CR		   equ	0Dh		;AN000;
 29985                                  $P_LF		   equ	0Ah		;AN000;
 29986                                  $P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 29987                                  
 29988                                  $P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 29989                                  $P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 29990                                  
 29991                                  $P_error_filespec  equ  1
 29992                                  
 29993                                  ;----------------------------------------------------------------------------
 29994                                  ; PARMS LABEL	BYTE
 29995                                  ;	DW	PARMSX
 29996                                  ;	DB	2		; NUMBER OF STRINGS (0, 1, 2)
 29997                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 29998                                  ;	DB	" .. "          ; EXTRA DELIMITER LIST,
 29999                                  ;				; TYPICAL ARE ";", "="
 30000                                  ;				; "," & WHITESPACE ALWAYS
 30001                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 30002                                  ;	DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 30003                                  ;----------------------------------------------------------------------------
 30004                                  
 30005                                  struc $P_PARMS_BLK			;AN000;
 30006 00000000 ????                    .$P_PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 30007 00000002 ??                      .$P_Num_Extra:	     resb 1		;AN000; Number of extra stuff
 30008 00000003 ??                      .$P_Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 30009                                  endstruc 				;AN000;
 30010                                  
 30011                                  $P_Len_PARMS	   equ	4		;AN000;
 30012                                  $P_I_Use_Default   equ	0		;AN000; no extra stuff specified
 30013                                  $P_I_Have_Delim    equ	1		;AN000; extra delimiter specified
 30014                                  $P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 30015                                  
 30016                                  ;----------------------------------------------------------------------------
 30017                                  ; PARMSX LABEL	BYTE
 30018                                  ;	DB	minp,maxp		; MIN, MAX POSITIONAL OPERANDS ALLOWED
 30019                                  ;	DW	CONTROL 		; DESCRIPTION OF POSITIONAL 1
 30020                                  ;	:				; REPEATS maxp-1 TIMES
 30021                                  ;	DB	maxs			; # OF SWITCHES
 30022                                  ;	DW	CONTROL 		; DESCRIPTION OF SWITCH 1
 30023                                  ;	:				; REPEATS maxs-1 TIMES
 30024                                  ;	DB	maxk			; # OF KEYWORD
 30025                                  ;	DW	CONTROL 		; DESCRIPTION OF KEYWORD 1
 30026                                  ;	:				; REPEATS maxk-1 TIMES
 30027                                  ;----------------------------------------------------------------------------
 30028                                  
 30029                                  struc $P_PARMSX_BLK			;AN000;
 30030 00000000 ??                      .$P_MinP: 	 resb 1	 ; 27/04/2023	;AN000; Minimum positional number
 30031 00000001 ??                      .$P_MaxP: 	 resb 1			;AN000; Maximum positional number
 30032 00000002 ??                      .$P_1st_Control: resb 1			;AN000; Address of the 1st CONTROL block
 30033                                  endstruc				;AN000;
 30034                                  
 30035                                  ; 31/03/2023
 30036                                  ;----------------------------------------------------------------------------
 30037                                  ; << Control field definition >>
 30038                                  ;
 30039                                  ;CONTROL   LABEL   BYTE
 30040                                  ;	   DW MATCH_FLAGS	; CONTROLS TYPE MATCHED
 30041                                  ;				; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 30042                                  ;				; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 30043                                  ;				; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 30044                                  ;				; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 30045                                  ;				; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 30046                                  ;				; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 30047                                  ;				; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 30048                                  ;				; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 30049                                  ;				; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 30050                                  ;				; 0010H=IGNORE ":" AT END IN MATCH
 30051                                  ;				; 0002H=REPEATS ALLOWED
 30052                                  ;				; 0001H=OPTIONAL
 30053                                  ;	   DW FUNCTION_FLAGS
 30054                                  ;				; 0001H=CAP RESULT BY FILE TABLE
 30055                                  ;				; 0002H=CAP RESULT BY CHAR TABLE
 30056                                  ;				; 0010H=REMOVE ":" AT END
 30057                                  ; (tm10)			; 0020H=colon is not necessary for switch
 30058                                  ;
 30059                                  ;	   DW RESULT		; RESULT BUFFER
 30060                                  ;	   DW VALUES		; VALUE LISTS
 30061                                  ;	   DB nid		; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 30062                                  ;	   DB "...",0		; IF n >0, KEYWORD 1
 30063                                  ;	   :
 30064                                  ;
 30065                                  ;Note:
 30066                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 30067                                  ;      DATE bit simalteniously.
 30068                                  ;
 30069                                  ;      The parser examins each bit along with the following priority.
 30070                                  ;
 30071                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 30072                                  ;      FILE SPEC -> SIMPLE STRING.
 30073                                  ;
 30074                                  ;
 30075                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 30076                                  ;      in the result buffer is capitalized.
 30077                                  ;
 30078                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 30079                                  ;
 30080                                  ;
 30081                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 30082                                  ;      switch, for example, '/A', then STRING points to;
 30083                                  ;
 30084                                  ;		DB    1 	; number of following synonyms
 30085                                  ;		DB   '/A',0
 30086                                  ;
 30087                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 30088                                  ;
 30089                                  ;		DB    1 	; number of following synonyms
 30090                                  ;		DB   'CODEPAGE=',0
 30091                                  ;
 30092                                  ;
 30093                                  ;    - "..." must consist of upper case characters only because the parser
 30094                                  ;      performs pattern matching after converting input to upper case (by
 30095                                  ;      using the current country upper case table)
 30096                                  ;
 30097                                  ;
 30098                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 30099                                  ;      example /A and /B, the format will be;
 30100                                  ;
 30101                                  ;		DB    2 	; number of following synonyms
 30102                                  ;		DB    '/A',0
 30103                                  ;		DB    '/B',0
 30104                                  ;----------------------------------------------------------------------------
 30105                                  
 30106                                  ;**** Match_Flags
 30107                                  
 30108                                  $P_Num_Val	   equ	8000h		;AN000; Numeric Value
 30109                                  $P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 30110                                  $P_Simple_S	   equ	2000h		;AN000; Simple string
 30111                                  $P_Date_S	   equ	1000h		;AN000; Date string
 30112                                  $P_Time_S	   equ	0800h		;AN000; Time string
 30113                                  $P_Cmpx_S	   equ	0400h		;AN000; Complex string
 30114                                  $P_File_Spc	   equ	0200h		;AN000; File Spec
 30115                                  $P_Drv_Only	   equ	0100h		;AN000; Drive Only
 30116                                  $P_Qu_String	   equ	0080h		;AN000; Quoted string
 30117                                  $P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 30118                                  $P_Repeat	   equ	0002h		;AN000; Repeat allowed
 30119                                  $P_Optional	   equ	0001h		;AN000; Optional
 30120                                  
 30121                                  ;**** Function flags
 30122                                  
 30123                                  $P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 30124                                  $P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 30125                                  $P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 30126                                  $P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 30127                                  
 30128                                  ;-------------------------------- Control block structure
 30129                                  struc $P_CONTROL_BLK
 30130 00000000 ????                    .$P_Match_Flag:	   resw 1		;AN000; Controls type matched
 30131 00000002 ????                    .$P_Function_Flag: resw 1		;AN000; Function should be taken
 30132 00000004 ????                    .$P_Result_Buf:	   resw 1		;AN000; Result buffer address
 30133 00000006 ????                    .$P_Value_List:	   resw 1		;AN000; Value list address
 30134 00000008 ??                      .$P_nid:	   resb 1		;AN000; # of keyword/SW synonyms
 30135 00000009 ??                      .$P_KEYorSW:	   resb 1		;AN000; keyword or sw
 30136                                  endstruc
 30137                                  
 30138                                  ; 31/03/2023
 30139                                  ;----------------------------------------------------------------------------
 30140                                  ;
 30141                                  ;VALUES LABEL	BYTE
 30142                                  ;	DB	nval		; NUMBER OF VALUE DEFINITIONS (0 - 3)
 30143                                  ;	+-
 30144                                  ;	| DB	nrng		; NUMBER OF RANGES
 30145                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF RANGE MATCHED
 30146                                  ;	| +DD	X,Y		; RANGE OF VALUES
 30147                                  ;	|	:
 30148                                  ;	| DB	nnval		; NUMBER OF CHOICES
 30149                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF NUMBER CHOICE MATCHED
 30150                                  ;	| +DD	VALUE		; SPECIFIC CHOICE IF NUMBER
 30151                                  ;	|	:
 30152                                  ;	| DB	nstrval 	; NUMBER OF CHOICES
 30153                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF STRING CHOICE MATCHED
 30154                                  ;	| +DW	STRING		; SPECIFIC CHOICE IF STING
 30155                                  ;	+-	:
 30156                                  ;
 30157                                  ;STRING DB	"...",0		; ASCIIZ STRING IMAGE
 30158                                  ;
 30159                                  ;Note:
 30160                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 30161                                  ;      when no choice lists are provided.
 30162                                  ;
 30163                                  ;    - STRING must consist of upper case characters only because the parser
 30164                                  ;      performs pattern matching after converting input to upper case (by
 30165                                  ;      using the current country upper case table)
 30166                                  ;----------------------------------------------------------------------------
 30167                                  
 30168                                  $P_nval_None	equ 0		;AN000; no value list ID
 30169                                  $P_nval_Range	equ 1		;AN000; range list ID
 30170                                  $P_nval_Value	equ 2		;AN000; value list ID
 30171                                  $P_nval_String	equ 3		;AN000; string list ID
 30172                                  $P_Len_Range	equ 9		;AN000; Length of a range choice(two DD plus one DB)
 30173                                  $P_Len_Value	equ 5		;AN000; Length of a value choice(one DD plus one DB)
 30174                                  $P_Len_String	equ 3		;AN000; Length of a string choice(one DW plus one DB)
 30175                                  $P_No_nrng	equ 0		;AN000; (tm07) no nrng. nnval must not be 0.
 30176                                  
 30177                                  struc $P_VAL_LIST
 30178 00000000 ??                      .$P_NumofList:	resb 1		;AN000; number of following choice
 30179 00000001 ????                    .$P_Val_XL:	resw 1		;AN000; lower word of value
 30180 00000003 ????                    .$P_Val_XH:	resw 1		;AN000; higher word of value
 30181 00000005 ????                    .$P_Val_YL:	resw 1		;AN000; lower word of another value
 30182 00000007 ????                    .$P_Val_YH:	resw 1		;AN000; higher word of another value
 30183                                  endstruc
 30184                                  
 30185                                  ; 31/03/2023
 30186                                  ;----------------------------------------------------------------------------
 30187                                  ;
 30188                                  ;RESULT LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 30189                                  ;	DB	type			; TYPE RETURNED: 0=RESERVED,
 30190                                  ;					;	1=NUMBER, 2=LIST INDEX,
 30191                                  ;					;	3=STRING, 4=COMPLEX,
 30192                                  ;					;	5=FILESPEC, 6=DRIVE
 30193                                  ;					;	7=DATE, 8=TIME
 30194                                  ;					;	9=QUOTED STRING
 30195                                  ;	DB	ITEM_TAG		; MATCHED ITEM TAG
 30196                                  ;
 30197                                  ;	dw	synonym@		; es:@ points to found SYNONYM if provided.
 30198                                  ;
 30199                                  ;       +-
 30200                                  ;       | DD	n			; VALUE IF NUMBER
 30201                                  ;       | or
 30202                                  ;       |	DW i			; INDEX (OFFSET) INTO VALUE LIST
 30203                                  ;       |				; (ES presents Segment address)
 30204                                  ;       | or
 30205                                  ;       |	DD STRING		; OFFSET OF STRING VALUE
 30206                                  ;       | or
 30207                                  ;       |	DB drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 30208                                  ;       | or
 30209                                  ;       |	DW YEAR	   		;(1980-2099)  IN CASE OF DATE
 30210                                  ;       |	DB MONTH   ;(1-12)	 Note: Range check is not performed.
 30211                                  ;       |	DB DATE	   ;(1-31)	 0 is filled when the corresponding field was not specified.
 30212                                  ;       | or
 30213                                  ;       |	DB HOUR	   ;(0-23)	 IN CASE OF TIME
 30214                                  ;       |	DB MINUTES    ;(0-59)	 Note: Range check is not performed .
 30215                                  ;       |	DB SECONDS    ;(0-59)	 0 is filled when the corresponding field was not specified .
 30216                                  ;       |	DB HUNDREDTHS ;(0-99)
 30217                                  ;       +-
 30218                                  ;
 30219                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 30220                                  ;      list.
 30221                                  ;
 30222                                  ;      YEAR: If the input value for the year is less than 100, parser
 30223                                  ;	     adds 1900 to it. For example, when 87 is input to parser for
 30224                                  ;	     the year value, he returns 1987.
 30225                                  ;----------------------------------------------------------------------------
 30226                                  
 30227                                  ;-------------------------------- Result block structure
 30228                                  struc $P_RESULT_BLK;
 30229 00000000 ??                      .$P_Type:	 resb 1		;AN000; Type returned
 30230 00000001 ??                      .$P_Item_Tag:	 resb 1		;AN000; Matched item tag
 30231 00000002 ????                    .$P_SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 30232 00000004 ????????                .$P_Picked_Val:	 resb 4		;AN000; value
 30233                                  endstruc
 30234                                  
 30235                                  ;**** values for the type field in the result block
 30236                                  
 30237                                  $P_EOL		 equ 0		;AN000; End of line
 30238                                  $P_Number	 equ 1		;AN000; Number
 30239                                  $P_List_Idx	 equ 2		;AN000; List Index
 30240                                  $P_String	 equ 3		;AN000; String
 30241                                  $P_Complex	 equ 4		;AN000; Complex
 30242                                  $P_File_Spec	 equ 5		;AN000; File Spec
 30243                                  $P_Drive	 equ 6		;AN000; Drive
 30244                                  $P_Date_F	 equ 7		;AN000; Date
 30245                                  $P_Time_F	 equ 8		;AN000; Time
 30246                                  $P_Quoted_String equ 9		;AN000; Quoted String
 30247                                  
 30248                                  $P_No_Tag	 equ 0FFh	;AN000; No ITEM_TAG found
 30249                                  
 30250                                  ;**** Return code
 30251                                  ;
 30252                                  ; following return code will be returned in the AX register.
 30253                                  
 30254                                  $P_No_Error	 equ 0		;AN000; No error
 30255                                  $P_Too_Many	 equ 1		;AN000; Too many operands
 30256                                  $P_Op_Missing	 equ 2		;AN000; Required operand missing
 30257                                  $P_Not_In_SW	 equ 3		;AN000; Not in switch list provided
 30258                                  $P_Not_In_Key	 equ 4		;AN000; Not in keyword list provided
 30259                                  $P_Out_Of_Range  equ 6		;AN000; Out of range specified
 30260                                  $P_Not_In_Val	 equ 7		;AN000; Not in value list provided
 30261                                  $P_Not_In_Str	 equ 8		;AN000; Not in string list provided
 30262                                  $P_Syntax	 equ 9		;AN000; Syntax error
 30263                                  $P_RC_EOL	 equ -1		;AN000; End of command line
 30264                                  
 30265                                  ;in second byte of $P_Flags, referenced as $P_Flags2:
 30266                                  $P_equ		 equ 01h	;AN000; "=" packed in string buffet
 30267                                  $P_Neg		 equ 02h	;AN000; Negative value
 30268                                  $P_Time12	 equ 04h	;AN000; set when PM is specified
 30269                                  $P_Key_Cmp	 equ 08h	;AN000; set when keyword compare
 30270                                  $P_SW_Cmp	 equ 10h	;AN000; set when switch compare
 30271                                  $P_Extra	 equ 20h	;AN000; set when extra delimiter found
 30272                                  $P_SW		 equ 40h	;AN000; set when switch found (tm08)
 30273                                  $P_Signed	 equ 80h	;AN000; signed numeric specified
 30274                                  
 30275                                  ;-------- Masks
 30276                                  $P_Make_Lower	 equ 20h	;AN000; make lower case character
 30277                                  $P_Make_Upper	 equ 0FFh-$P_Make_Lower ;AN000; make upper case character
 30278                                  
 30279                                  ;-------------
 30280                                  
 30281                                  struc $P_DOS_TBL
 30282 00000000 ??                      .$P_DOS_InfoID:	 resb 1		;AN000; information id for the table
 30283 00000001 ????                    .$P_DOS_TBL_Off: resw 1		;AN000; offset address of the table
 30284 00000003 ????                    .$P_DOS_TBL_Seg: resw 1		;AN000; segment address of the table
 30285                                  endstruc
 30286                                  
 30287                                  $P_DOS_Get_TBL	 equ 65h	;AN000; get uppercase table call
 30288                                  				;AN000; following parameters are set
 30289                                  				;AN000; to get casemap table.
 30290                                  $P_DOSTBL_Def	 equ -1		;AN000; get default
 30291                                  $P_DOSTBL_BL	 equ 5		;AN000; buffer length for Tbl pointer
 30292                                  $P_DOSTBL_File	 equ 4		;AN000; get file uppercase table
 30293                                  $P_DOSTBL_Char	 equ 2		;AN000; get character uppercase table
 30294                                  				; By this call following information
 30295                                  				; is returned.
 30296                                  
 30297                                  ; 03/04/2023
 30298                                  ;-------------------------------- country dependent information
 30299                                  
 30300                                  $P_DOS_Get_CDI	equ 3800h
 30301                                  
 30302                                  struc $P_CDI
 30303 00000000 ????                    .$P_CDI_DateF:	resw 1		;AN000;
 30304 00000002 ????????                .$P_CDI_Money:	resb 4		;AN000;
 30305 00000006 ????                    .$P_CDI_1000:	resb 2		;AN000;
 30306 00000008 ????                    .$P_CDI_Dec:	resb 2		;AN000;
 30307 0000000A ????                    .$P_CDI_DateS:	resb 2		;AN000;
 30308 0000000C ????                    .$P_CDI_TimeS:	resb 2		;AN000;
 30309 0000000E ??                      		resb 1		;AN000;
 30310 0000000F ??                      		resb 1		;AN000;
 30311 00000010 ??                      .$P_CDI_TimeF:	resb 1		;AN000;
 30312 00000011 ????????                		resw 2		;AN000;
 30313 00000015 ????                    		resb 2		;AN000;
 30314 00000017 <res Ah>                		resw 5		;AN000;
 30315                                  endstruc
 30316                                  
 30317                                  $P_Date_MDY	equ 0		;AN000;
 30318                                  $P_Date_DMY	equ 1		;AN000;
 30319                                  $P_Date_YMD	equ 2		;AN000;
 30320                                  
 30321                                  ; ----------------------------
 30322                                  ; (PARSE.ASM, MSDOS 6.0, 1991)
 30323                                  ; ----------------------------
 30324                                  
 30325                                  ;***********************************************************************
 30326                                  ; SysParse;
 30327                                  ;
 30328                                  ;  Function : Parser Entry
 30329                                  ;
 30330                                  ;  Input: DS:SI -> command line
 30331                                  ;	  ES:DI -> parameter block
 30332                                  ;	  psdata_seg -> psdata.inc
 30333                                  ;	  CX = operand ordinal
 30334                                  ;
 30335                                  ;	  Note:  ES is the segment containing all the control blocks defined
 30336                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 30337                                  ;		 is in DS.
 30338                                  ;
 30339                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 30340                                  ;		    invalid value list. But this parser does NOT implement
 30341                                  ;		    this feature. Therefore CY always zero.
 30342                                  ;
 30343                                  ;	   CY = 0   AX = return code
 30344                                  ;		    BL = terminated delimiter code
 30345                                  ;		    CX = new operand ordinal
 30346                                  ;		    SI = set past scaned operand
 30347                                  ;		    DX = selected result buffer
 30348                                  ;
 30349                                  ; Use:	$P_Skip_Delim, $P_Chk_EOL, $P_Chk_Delim, $P_Chk_DBCS
 30350                                  ;	$P_Chk_Swtch, $P_Chk_Pos_Control, $P_Chk_Key_Control
 30351                                  ;	$P_Chk_Sw_Control, $P_Fill_Result
 30352                                  ;
 30353                                  ; Vars: $P_Ordinal(RW), $P_RC(RW), $P_SI_Save(RW), $P_DX(R), $P_Terminator(R)
 30354                                  ;	$P_SaveSI_Cmpx(W), $P_Flags(RW), $P_Found_SYNONYM(R), $P_Save_EOB(W)
 30355                                  ;
 30356                                  ;-------- Modification History -----------------------------------------
 30357                                  ;
 30358                                  ;  4/04/87 : Created by K. K,
 30359                                  ;  4/28/87 : $P_Val_YH assemble error (tm01)
 30360                                  ;	   : JMP SHORT assemble error (tm02)
 30361                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 30362                                  ;  6/12/87 : $P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 30363                                  ;	     DateSW equ 1)	      (tm04)
 30364                                  ;  6/12/87 : $P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 30365                                  ;				      (tm05) in PSDATA.INC
 30366                                  ;  6/12/87 : $P_FileSp_Char and $P_FileSP_Len are missing
 30367                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 30368                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 30369                                  ;	     value-list block	      (tm07)
 30370                                  ;  6/20/87 : Add $P_SW to check if there's an omiting parameter after
 30371                                  ;	     switch (keyword) or not. If there is, backup si for next call
 30372                                  ;	     (tm08)
 30373                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 30374                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 30375                                  ;  6/24/87 : New function flag $P_colon_is_not_necessary for switch
 30376                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 30377                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 30378                                  ;	     in user's routines. $P_Chk_DBCS (tm11)
 30379                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 30380                                  ;					  (tm12)
 30381                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 30382                                  ;					  (tm13)
 30383                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 30384                                  ;					  (tm14)
 30385                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 30386                                  ;					  (tm15)
 30387                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 30388                                  ;
 30389                                  ;  7/24/87 : Quoted strings being returned with quotes.
 30390                                  ;
 30391                                  ;  7/28/87 : Kerry S (;AN018;)
 30392                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 30393                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 30394                                  ;	     affected: $P_Chk_SW_Control.
 30395                                  ;
 30396                                  ;  7/29/87 : Kerry S (;AN019;)
 30397                                  ;	     Now allow the optional bit in match flags for switches.  This
 30398                                  ;	     allows the switch to be encountered with a value or without a
 30399                                  ;	     value and no error is returned.
 30400                                  ;
 30401                                  ;
 30402                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 30403                                  ;  9/14/87   In PROC $P_Get_DecNum, when checking for field separators
 30404                                  ;	     within a date response, instead of checking just for the one
 30405                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 30406                                  ;	     all three chars, "-", "/", and ".". Change $P_Chk_Switch to allow
 30407                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 30408                                  ;
 30409                                  ;  9/1/87  : Kerry S (;AN021)
 30410                                  ;	     In PROC $P_String_Comp, when comparing the switch or keyword on
 30411                                  ;	     the command line with the string in the control block the
 30412                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 30413                                  ;	     on the command line and assuming a match.	This allowed a shorter
 30414                                  ;	     string on the command line than in the synonym list in the control
 30415                                  ;	     block.  I put in a test for a null in the control block so the
 30416                                  ;	     string in the control block must be the same length as the string
 30417                                  ;	     preceeding the colon or equal on the command line.
 30418                                  ;
 30419                                  ;  8/28/87 : Kerry S (;AN022;)
 30420                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 30421                                  ;	     problems for people who included it themselves in a segment other
 30422                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 30423                                  ;	     segment.
 30424                                  ;
 30425                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 30426                                  ;	     in $p_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 30427                                  ;	     into PUSH PSDATA_SEG.  In $P_Get_DecNum PROC, fix AN020
 30428                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 30429                                  ;	     Created FLag, in $P_time_Format PROC, to request the delim in
 30430                                  ;	     BL be used if TIME is being parsed.
 30431                                  ;
 30432                                  ;  9/24/87 : Ed K
 30433                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 30434                                  ;	     invocations with their normally expanded code; made comments
 30435                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 30436                                  ;
 30437                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 30438                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 30439                                  ;	     pointed to by non-existant CONTROL.
 30440                                  ;
 30441                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 30442                                  ;	     A quoted text string can be framed only by double quote.  Remove
 30443                                  ;	     support to frame quoted text string with single quote.
 30444                                  ;	     (apostrophe) $P_SorD_Quote is removed from PSDATA.INC.
 30445                                  ;	     $P_SQuote EQU also removed from PSDATA.INC.  Any references to
 30446                                  ;	     single quote in PROC prologues are left as is for history reasons.
 30447                                  ;
 30448                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 30449                                  ;	     quote chars within a quoted string is supposed to be reported as
 30450                                  ;	     one quote character, but is reported as two quotes.  This changed
 30451                                  ;	     two instructions in PROC $P_Quoted_Str.
 30452                                  ;
 30453                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 30454                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 30455                                  ;
 30456                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 30457                                  ;
 30458                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 30459                                  ;	     psdata buffer should have psdata_seg.
 30460                                  ;
 30461                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 30462                                  ;	     positional missing.
 30463                                  ;
 30464                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 30465                                  ;	     as a line delimiter, should use carriage return.
 30466                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 30467                                  ;
 30468                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 30469                                  ;
 30470                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 30471                                  ;	     endless loop since SI is returned still pointing to start
 30472                                  ;	     of that parm.
 30473                                  ;
 30474                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 30475                                  ;	     Vector to returned string has CS instead of Psdata_Seg, but
 30476                                  ;	     when tried to fix it on previous version, changed similar
 30477                                  ;	     but wrong place.
 30478                                  ;
 30479                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 30480                                  ;	     delimiters between hours, minutes, seconds for time. And period
 30481                                  ;	     and comma are valid delimiters between seconds and 100th second.
 30482                                  ;
 30483                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 30484                                  ;	     in a filespec, then flag an error.
 30485                                  ;
 30486                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 30487                                  ;	     indexed off of the psdata_seg equate instead of the DS register.
 30488                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 30489                                  ;  -->	     local parser data. Why were some references to local data changed
 30490                                  ;	     to do this before, but not all ?????
 30491                                  ;
 30492                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 30493                                  ;
 30494                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, PSDATA_SEG HOSED.
 30495                                  ;
 30496                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 30497                                  ;
 30498                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 30499                                  ;
 30500                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 30501                                  ;	     separator in TIME before hundredths field.
 30502                                  ;
 30503                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 30504                                  ;			strings as keywords.
 30505                                  ;
 30506                                  ;***********************************************************************
 30507                                  
 30508                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30509                                  cmd_parse:
 30510                                  	;call	sysparse
 30511                                  	;retn
 30512                                  
 30513                                  ; -----------------------------------
 30514                                  
 30515                                  	; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30516                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:44E7h
 30517                                  
 30518                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30519                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4CABh
 30520                                  sysparse:
 30521 00004A5C 2EC706[7099]0000        	mov	word [cs:$P_Flags],0	;AC034; Clear all internal flags
 30522 00004A63 2E890E[FA99]            	mov	[cs:$P_ORIG_ORD],cx	;AN039; ORIGINAL ORDINAL FROM CX
 30523 00004A68 2E8926[FC99]            	mov	[cs:$P_ORIG_STACK],sp	;AN039; ORIGINAL VALUE OF STACK FROM SP
 30524 00004A6D 2E8936[FE99]            	mov	[cs:$P_ORIG_SI],si	;AN039; ORIGINAL START PARSE POINTER FROM SI
 30525                                  $P_Redo_Time:				;AN039; try to parse time again
 30526 00004A72 FC                      	cld				;AN000; confirm forward direction
 30527 00004A73 2E890E[6399]            	mov	[cs:$P_ORDINAL],cx      ;AC034; save operand ordinal
 30528                                  	;mov	word [cs:$P_RC],$P_No_Error
 30529 00004A78 2EC706[6599]0000        	mov	word [cs:$P_RC],0	;AC034; Assume no error
 30530 00004A7F 2EC706[7899]0000        	mov	word [cs:$P_Found_SYNONYM],0
 30531                                  					;AC034; initalize synonym pointer
 30532 00004A86 2EC706[6999]0000        	mov	word [cs:$P_DX],0	;AC034; (tm15)
 30533                                  
 30534                                  ;M029 -- Begin changes
 30535                                  ; The table of special chars $P_FileSp_Char should be initialized on every
 30536                                  ;entry to SysParse. This is in the non-checksum region and any program that
 30537                                  ;corrupts this table but does not corrupt the checksum region will leave
 30538                                  ;command.com parsing in an inconsistent state.
 30539                                  ; NB: The special characters string has been hardcoded here. If any change
 30540                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 30541                                  
 30542 00004A8D 2EC706[359A]5B5D        	mov	word [cs:$P_FileSp_Char], '[]'	 ; "[]|<>+=;\""
 30543 00004A94 2EC706[379A]7C3C        	mov	word [cs:$P_FileSp_Char+2], '|<'
 30544 00004A9B 2EC706[399A]3E2B        	mov	word [cs:$P_FileSp_Char+4], '>+'
 30545 00004AA2 2EC706[3B9A]3D3B        	mov 	word [cs:$P_FileSp_Char+6], '=;'
 30546                                  
 30547                                  ;M029 -- End of changes
 30548                                  
 30549 00004AA9 E83609                  	call	$P_Skip_Delim		;AN000; Move si to 1st non white space
 30550 00004AAC 7312                    	jnc	short $P_Start		;AN000; If EOL is not encountered, do parse
 30551                                  
 30552                                  ;--------------------------- End of Line
 30553                                  	;mov	ax,$P_RC_EOL		;AN000; set exit code to -1
 30554 00004AAE B8FFFF                  	mov	ax,0FFFFh
 30555 00004AB1 53                      	push	bx			;AN000;
 30556                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 30557 00004AB2 268B1D                  	mov	bx,[es:di]		;AN000; Get the PARMSX address to
 30558                                  	
 30559                                  	;cmp	cl,[es:bx+$P_PARMSX_BLK.$P_MinP]
 30560 00004AB5 263A0F                  	cmp	cl,[es:bx]		;AN000; check ORDINAL to see if the minimum
 30561 00004AB8 7304                    	jae	short $P_Fin		;AN000; positional found.
 30562                                  
 30563                                  	;mov	ax,2
 30564 00004ABA B80200                  	mov	ax,$P_Op_Missing ; 2	;AN000; If no, set exit code to missing operand
 30565                                  	; 27/04/2023
 30566 00004ABD F8                      	clc
 30567                                  $P_Fin: 				;AN000;
 30568 00004ABE 5B                      	pop	bx			;AN000;
 30569                                  	;jmp	$P_Single_Exit		;AN000; return to the caller
 30570                                  	; 27/04/2023
 30571                                  	; cf = 0
 30572                                  	;clc
 30573 00004ABF C3                      	retn
 30574                                  
 30575                                  ;---------------------------
 30576                                  $P_Start:				;AN000;
 30577 00004AC0 2E8936[7299]            	mov	[cs:$P_SaveSI_Cmpx],si	;AN000;AC034;  save ptr to command line for later use by complex,
 30578 00004AC5 53                      	push	bx			;AN000; quoted string or file spec.
 30579 00004AC6 57                      	push	di			;AN000;
 30580 00004AC7 55                      	push	bp			;AN000;
 30581 00004AC8 8D1E[7A99]              	lea	bx,$P_STRING_BUF	;AC034; set buffer to copy from command string
 30582 00004ACC 2EF606[7199]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 30583                                  	;test	byte [cs:$P_Flags2],20h	;AC034; 3/9 extra delimiter encountered ?
 30584 00004AD2 7543                    	jnz	short $P_Pack_End	;AN000; 3/9 if yes, no need to copy
 30585                                  $P_Pack_Loop:				;AN000;
 30586 00004AD4 AC                      	lodsb				;AN000; Pick a operand from buffer
 30587 00004AD5 E8BF09                  	call	$P_Chk_Switch		;AN000; Check switch character
 30588 00004AD8 723C                    	jc	short $P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 30589                                  
 30590 00004ADA E82709                  	call	$P_Chk_EOL		;AN000; Check EOL character
 30591 00004ADD 7437                    	je	short $P_Pack_End_BY_EOL ;AN000; need backup si
 30592                                  
 30593 00004ADF E85409                  	call	$P_Chk_Delim		;AN000; Check delimiter
 30594 00004AE2 7518                    	jne	short $P_PL01 		;AN000; If no, process next byte
 30595                                  
 30596 00004AE4 2EF606[7199]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 30597                                  	;test	byte [cs:$P_Flags2],20h ;AC034; 3/9 If yes and white spec,
 30598 00004AEA 7505                    	jnz	short $P_Pack_End_backup_si
 30599                                  					;AN000; (tm08)
 30600 00004AEC E8F308                  	call	$P_Skip_Delim		;AN000; skip subsequent white space,too
 30601 00004AEF EB26                    	jmp	short $P_Pack_End	;AN000; finish copy by placing NUL at end
 30602                                  
 30603                                  $P_Pack_End_backup_si:			;AN000; (tm08)
 30604 00004AF1 2EF606[7199]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ ; 41h
 30605                                  	;test	byte [cs:$P_Flags2],41h ;AN000;AC034;  (tm08)
 30606 00004AF7 741E                    	jz	short $P_Pack_End	;AN000; (tm08)
 30607                                  
 30608 00004AF9 4E                      	dec	si			;AN000; (tm08)
 30609 00004AFA EB1B                    	jmp	short $P_Pack_End	;AN025; (tm08)
 30610                                  $P_PL01:				;AN000;
 30611 00004AFC 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 30612                                  	;cmp	al,'='
 30613 00004AFF 3C3D                    	cmp	al,$P_Keyword ; '='	;AN000; if it is equal character,
 30614 00004B01 7506                    	jne	short $P_PL00 		;AN000; then
 30615                                  
 30616 00004B03 2E800E[7199]01          	or	byte [cs:$P_Flags2],$P_equ
 30617                                  	;or	byte [cs:$P_Flags_2],1	;AC034; remember it in flag
 30618                                  $P_PL00:				;AN000;
 30619 00004B09 43                      	inc	bx			;AN000; ready to see next byte
 30620 00004B0A E8B509                  	call	$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 30621 00004B0D 73C5                    	jnc	short $P_Pack_Loop	;AN000; if no, process to next byte
 30622                                  
 30623 00004B0F AC                      	lodsb				;AN000; if yes, store
 30624 00004B10 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 30625 00004B13 43                      	inc	bx			;AN000; update pointer
 30626 00004B14 EBBE                    	jmp	short $P_Pack_Loop	;AN000; process to next byte
 30627                                  
 30628                                  $P_Pack_End_BY_EOL:			;AN000;
 30629 00004B16 4E                      	dec	si			;AN000; backup si pointer
 30630                                  $P_Pack_End:				;AN000;
 30631 00004B17 2E8936[6799]            	mov	[cs:$P_SI_Save],si	;AC034; save next pointer, SI
 30632                                  	;mov	byte [cs:bx],0
 30633 00004B1C 2EC60700                	mov	byte [cs:bx],$P_NULL	;AN000; put NULL at the end
 30634 00004B20 2E891E[7699]            	mov	[cs:$P_Save_EOB],bx
 30635                                  					;AC034; 3/17/87 keep the address for later use of complex
 30636                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 30637 00004B25 268B1D                  	mov	bx,[es:di]		;AN000; get PARMSX address
 30638 00004B28 8D36[7A99]              	lea	si,$P_STRING_BUF	;AC034;
 30639                                  	;cmp	byte [cs:si],'/'
 30640 00004B2C 2E803C2F                	cmp	byte [cs:si],$P_Switch	;AN000; the operand begins w/ switch char ?
 30641 00004B30 7436                    	je	short $P_SW_Manager	;AN000; if yes, process as switch
 30642                                  
 30643 00004B32 2E803C22                	cmp	byte [cs:si],$P_DQuote	;M005;is it a string?
 30644 00004B36 7408                    	je	short $P_Positional_Manager
 30645                                  					;M005;if so, process as one!
 30646 00004B38 2EF606[7199]01          	test	byte [cs:$P_Flags2],$P_equ
 30647                                  	;test	byte [cs:$P_Flags2],1	;AC034; the operand includes equal char ?
 30648 00004B3E 7554                    	jnz	short $P_Key_Manager	;AN000; if yes, process as keyword
 30649                                  
 30650                                  $P_Positional_Manager:			;AN000; else process as positional
 30651                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30652 00004B40 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30653 00004B44 30E4                    	xor	ah,ah			;AN000; ax = maxp
 30654 00004B46 2E3906[6399]            	cmp	[cs:$P_ORDINAL],ax	;AC034; too many positional ?
 30655 00004B4B 7312                    	jae	short $P_Too_Many_Error	;AN000; if yes, set exit code to too many
 30656                                  
 30657 00004B4D 2EA1[6399]              	mov	ax,[cs:$P_ORDINAL]	;AC034; see what the current ordinal
 30658 00004B51 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 30659 00004B53 43                      	inc	bx			;AC035; add '2' to
 30660 00004B54 43                      	inc	bx			;AC035;  BX reg
 30661                                  					;AN000; now bx points to 1st CONTROL
 30662 00004B55 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 30663 00004B57 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 30664 00004B5A E88800                  	call	$P_Chk_Pos_Control	;AN000; Do process for positional
 30665 00004B5D EB69                    	jmp	short $P_Return_to_Caller
 30666                                  					;AN000; and return to the caller
 30667                                  $P_Too_Many_Error:			;AN000;
 30668                                  	;mov	word [cs:$P_RC],1
 30669 00004B5F 2EC706[6599]0100        	mov	word [cs:$P_RC],$P_Too_Many
 30670                                  					;AC034; set exit code
 30671 00004B66 EB60                    	jmp	short $P_Return_to_Caller
 30672                                  					;AN000; and return to the caller
 30673                                  $P_SW_Manager:				;AN000;
 30674                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30675 00004B68 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30676 00004B6C 30E4                    	xor	ah,ah			;AN000; ax = maxp
 30677 00004B6E 40                      	inc	ax			;AN000;
 30678 00004B6F D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 30679 00004B71 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 30680 00004B73 268A0F                  	mov	cl,[es:bx]		;AN000;
 30681 00004B76 30ED                    	xor	ch,ch			;AN000; cx = maxs
 30682 00004B78 09C9                    	or	cx,cx			;AN000; at least one switch ?
 30683 00004B7A 740F                    	jz	short $P_SW_Not_Found 	;AN000;
 30684 00004B7C 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 30685                                  $P_SW_Mgr_Loop: 			;AN000;
 30686 00004B7D 53                      	push	bx			;AN000;
 30687 00004B7E 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 30688 00004B81 E8C100                  	call	$P_Chk_SW_Control	;AN000; do process for switch
 30689 00004B84 5B                      	pop	bx			;AN000;
 30690 00004B85 7341                    	jnc	short $P_Return_to_Caller
 30691                                  					;AN000; if the CONTROL is for the switch, exit
 30692 00004B87 43                      	inc	bx			;AC035; add '2' to
 30693 00004B88 43                      	inc	bx			;AC035;  BX reg
 30694                                  					;AN000; else bx points to the next CONTROL
 30695 00004B89 E2F2                    	loop	$P_SW_Mgr_Loop		;AN000; and loop
 30696                                  $P_SW_Not_Found:			;AN000;
 30697                                  	;mov	word [cs:$P_RC],3
 30698 00004B8B 2EC706[6599]0300        	mov	word [cs:$P_RC],$P_Not_In_SW
 30699                                  					;AC034; here no CONTROL for the switch has
 30700 00004B92 EB34                    	jmp	short $P_Return_to_Caller0
 30701                                  					;AN000; not been found, means error.
 30702                                  $P_Key_Manager: 			;AN000;
 30703                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 30704 00004B94 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 30705 00004B98 30E4                    	xor	ah,ah			;AN000; ax = maxp
 30706 00004B9A 40                      	inc	ax			;AN000;
 30707 00004B9B D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 30708 00004B9D 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 30709 00004B9F 268A07                  	mov	al,[es:bx]		;AN000;
 30710 00004BA2 30E4                    	xor	ah,ah			;AN000; ax = maxs
 30711 00004BA4 D1E0                    	shl	ax,1			;AN000;
 30712 00004BA6 40                      	inc	ax			;AN000; ax = ax*2+1
 30713 00004BA7 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 30714 00004BA9 268A0F                  	mov	cl,[es:bx]		;AN000;
 30715 00004BAC 30ED                    	xor	ch,ch			;AN000; cx = maxk
 30716 00004BAE 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 30717 00004BB0 740F                    	jz	short $P_Key_Not_Found	;AN000;
 30718 00004BB2 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 30719                                  $P_Key_Mgr_Loop:			;AN000;
 30720 00004BB3 53                      	push	bx			;AN000;
 30721 00004BB4 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 30722 00004BB7 E85A00                  	call	$P_Chk_Key_Control	;AN000; do process for keyword
 30723 00004BBA 5B                      	pop	bx			;AN000;
 30724 00004BBB 730B                    	jnc	short $P_Return_to_Caller
 30725                                  					;AN000; if the CONTROL is for the keyword, exit
 30726 00004BBD 43                      	inc	bx			;AC035; add '2' to
 30727 00004BBE 43                      	inc	bx			;AC035;  BX reg
 30728                                  					;AN000; else bx points to the next CONTROL
 30729 00004BBF E2F2                    	loop	$P_Key_Mgr_Loop 	;AN000; and loop
 30730                                  $P_Key_Not_Found:			;AN000;
 30731                                  	;mov	word [cs:$P_RC],4
 30732 00004BC1 2EC706[6599]0400        	mov	word [cs:$P_RC],$P_Not_In_Key
 30733                                  					;AC034; here no CONTROL for the keyword has
 30734                                  $P_Return_to_Caller0:
 30735                                  $P_Return_to_Caller:			;AN000; not been found, means error.
 30736 00004BC8 5D                      	pop	bp			;AN000;
 30737 00004BC9 5F                      	pop	di			;AN000;
 30738 00004BCA 5B                      	pop	bx			;AN000;
 30739 00004BCB 2E8B0E[6399]            	mov	cx,[cs:$P_ORDINAL]	;AC034; return next ordinal
 30740 00004BD0 2EA1[6599]              	mov	ax,[cs:$P_RC]		;AC034; return exit code
 30741 00004BD4 2E8B36[6799]            	mov	si,[cs:$P_SI_Save]	;AC034; return next operand pointer
 30742 00004BD9 2E8B16[6999]            	mov	dx,[cs:$P_DX]		;AC034; return result buffer address
 30743 00004BDE 2E8A1E[6B99]            	mov	bl,[cs:$P_Terminator]	;AC034; return delimiter code found
 30744                                  $P_Single_Exit: 			;AN000;
 30745 00004BE3 F8                      	clc				;AN000;
 30746 00004BE4 C3                      	retn				;AN000;
 30747                                  
 30748                                  ;***********************************************************************
 30749                                  ; $P_Chk_Pos_Control
 30750                                  ;
 30751                                  ; Function: Parse CONTROL block for a positional
 30752                                  ;
 30753                                  ; Input:     ES:BX -> CONTROL block
 30754                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30755                                  ;
 30756                                  ; Output:    None
 30757                                  ;
 30758                                  ; Use:	 $P_Fill_Result, $P_Check_Match_Flags
 30759                                  ;
 30760                                  ; Vars: $P_Ordinal(W), $P_RC(W)
 30761                                  ;***********************************************************************
 30762                                  
 30763                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30764                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4671h
 30765                                  
 30766                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30767                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E35h
 30768                                  $P_Chk_Pos_Control:
 30769 00004BE5 50                      	push	ax			;AN000;
 30770                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 30771 00004BE6 268B07                  	mov	ax,[es:bx]		;AN000;
 30772                                  	;test	ax,2
 30773 00004BE9 A90200                  	test	ax,$P_Repeat		;AN000; repeat allowed ?
 30774 00004BEC 7505                    	jnz	short $P_CPC00		;AN000; then do not increment ORDINAL
 30775                                  
 30776 00004BEE 2EFF06[6399]            	inc	word [cs:$P_ORDINAL]	;AC034; update the ordinal
 30777                                  $P_CPC00:				;AN000;
 30778                                  	;cmp	byte [cs:si],0
 30779 00004BF3 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; no data ?
 30780 00004BF7 7516                    	jne	short $P_CPC01		;AN000;
 30781                                  
 30782                                  	;test	ax,1
 30783 00004BF9 A90100                  	test	ax,$P_Optional		;AN000; yes, then is it optional ?
 30784 00004BFC 7509                    	jnz	short $P_CPC02		;AN000;
 30785                                  
 30786 00004BFE 2EC706[6599]0200        	mov	word [cs:$P_RC],$P_Op_Missing ; 2
 30787                                  					;AC034; no, then error	 3/17/87
 30788 00004C05 EB0B                    	jmp	short $P_CPC_Exit	;AN000;
 30789                                  $P_CPC02:				;AN000;
 30790                                  	; 27/04/2023
 30791                                  	;push	ax ; *			;AN000;
 30792                                  	;
 30793                                  	;;mov	al,3
 30794                                  	;mov	al,$P_String		;AN000; if it is optional return NULL
 30795                                  	;;mov	ah,0FFh
 30796                                  	;mov	ah,$P_No_Tag		;AN000; no item tag indication
 30797                                  	;31/03/2023
 30798 00004C07 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30799 00004C0A E89500                  	call	$P_Fill_Result		;AN000;
 30800                                  	; 27/04/2023
 30801                                  	;pop	ax ; *			;AN000;
 30802 00004C0D EB03                    	jmp	short $P_CPC_Exit	;AN000;
 30803                                  $P_CPC01:				;AN000;
 30804 00004C0F E81101                  	call	$P_Check_Match_Flags	;AN000;
 30805                                  $P_CPC_Exit:				;AN000;
 30806 00004C12 58                      	pop	ax			;AN000;
 30807 00004C13 C3                      	retn				;AN000;
 30808                                  
 30809                                  ;***********************************************************************
 30810                                  ; $P_Chk_Key_Control
 30811                                  ;
 30812                                  ; Function: Parse CONTROL block for a keyword
 30813                                  ;
 30814                                  ; Input:     ES:BX -> CONTROL block
 30815                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30816                                  ;
 30817                                  ; Output:    CY = 1 : not match
 30818                                  ;
 30819                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30820                                  ;
 30821                                  ; Vars: $P_RC(W), $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30822                                  ;***********************************************************************
 30823                                  
 30824                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30825                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30826                                  $P_Chk_Key_Control:			;AN000;
 30827 00004C14 F9                      	stc				;AN000;this logic works when the KeySW
 30828 00004C15 C3                      	retn				;AN000;is reset.
 30829                                  
 30830                                  ;***********************************************************************
 30831                                  ; $P_Search_KEYorSW:
 30832                                  ;
 30833                                  ; Function: Seach specified keyword or switch from CONTROL
 30834                                  ;
 30835                                  ; Input:     ES:BX -> CONTROL block
 30836                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30837                                  ;
 30838                                  ; Output:    CY = 1 : not match
 30839                                  ;
 30840                                  ; Use:	 $P_String_Comp, $P_MoveBP_NUL, $P_Found_SYNONYM
 30841                                  ;***********************************************************************
 30842                                  
 30843                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30844                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30845                                  $P_Search_KEYorSW:
 30846 00004C16 55                      	push	bp			;AN000;
 30847 00004C17 51                      	push	cx			;AN000;
 30848 00004C18 268A4F08                	mov	cl,[es:bx+$P_CONTROL_BLK.$P_nid]
 30849                                  	;mov	cl,[es:bx+8]		;AN000; Get synonym count
 30850                                  	; 14/06/2023
 30851                                  	;xor	ch,ch			;AN000; and set it to cx
 30852                                  	;or	cx,cx			;AN000; No synonyms specified ?
 30853 00004C1C 08C9                    	or	cl,cl
 30854 00004C1E 740E                    	jz	short $P_KEYorSW_Not_Found
 30855                                  					;AN000; then indicate not found by CY
 30856 00004C20 268D6F09                	lea	bp,[es:bx+$P_CONTROL_BLK.$P_KEYorSW]
 30857                                  	;lea	bp,[es:bx+9]		;AN000; BP points to the 1st synonym
 30858                                  $P_KEYorSW_Loop:			;AN000;
 30859 00004C24 E8F803                  	call	$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 30860 00004C27 7308                    	jnc	short $P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 30861 00004C29 E80D00                  	call	$P_MoveBP_NUL		;AN000; else, bp points to the next string
 30862 00004C2C E2F6                    	loop	$P_KEYorSW_Loop 	;AN000; loop nid times
 30863                                  $P_KEYorSW_Not_Found:			;AN000;
 30864 00004C2E F9                      	stc				;AN000; indicate not found in synonym list
 30865 00004C2F EB05                    	jmp	short $P_KEYorSW_Exit	;AN000; and exit
 30866                                  $P_KEYorSW_Found:			;AN000;
 30867 00004C31 2E892E[7899]            	mov	[cs:$P_Found_SYNONYM],bp
 30868                                  					;AC034; set synonym pointer
 30869                                  	; 27/04/2023
 30870                                  	; cf = 0
 30871                                  	;clc				;AN000; indicate found
 30872                                  $P_KEYorSW_Exit:			;AN000;
 30873 00004C36 59                      	pop	cx			;AN000;
 30874 00004C37 5D                      	pop	bp			;AN000;
 30875 00004C38 C3                      	retn				;AN000;
 30876                                  
 30877                                  ;***********************************************************************
 30878                                  ; $P_MoveBP_NUL
 30879                                  ;***********************************************************************
 30880                                  
 30881                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30882                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30883                                  $P_MoveBP_NUL:
 30884                                  $P_MBP_Loop:				;AN000;
 30885                                  	;cmp	byte [es:bp+0],0
 30886 00004C39 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000; Increment BP that points
 30887 00004C3E 7403                    	je	short $P_MBP_Exit	;AN000; to the synomym list
 30888 00004C40 45                      	inc	bp			;AN000; until
 30889 00004C41 EBF6                    	jmp	short $P_MBP_Loop	;AN000; NULL encountered.
 30890                                  $P_MBP_Exit:				;AN000;
 30891 00004C43 45                      	inc	bp			;AN000; bp points to next to NULL
 30892 00004C44 C3                      	retn				;AN000;
 30893                                  
 30894                                  ;***********************************************************************
 30895                                  ; $P_Chk_SW_Control
 30896                                  ;
 30897                                  ; Function: Parse CONTROL block for a switch
 30898                                  ;
 30899                                  ; Input:     ES:BX -> CONTROL block
 30900                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30901                                  ;
 30902                                  ; Output:    CY = 1 : not match
 30903                                  ;
 30904                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30905                                  ;
 30906                                  ; Vars:  $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30907                                  ;***********************************************************************
 30908                                  
 30909                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30910                                  	;
 30911                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 30912                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E9Ah 
 30913                                  $P_Chk_SW_Control:
 30914 00004C45 2E800E[7199]10          	or	byte [cs:$P_Flags2],$P_SW_Cmp
 30915                                  	;or	byte [cs:$P_Flags2],10h	;AC034; Indicate switch for later string comparison
 30916 00004C4B E8C8FF                  	call	$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 30917 00004C4E 7251                    	jc	short $P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 30918                                  
 30919 00004C50 2E8026[7199]EF          	and	byte [cs:$P_Flags2],0FFh-$P_SW_Cmp
 30920                                  	;and	byte [cs:$P_Flags2],0EFh
 30921                                  					;AC034; reset the indicator previously set
 30922 00004C56 50                      	push	ax			;AN000;       /switch:
 30923 00004C57 2EA1[7499]              	mov	ax,[cs:$P_KEYorSW_Ptr]	;AC034;	      ^       ^
 30924 00004C5B 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 30925 00004C5D 2E0106[7299]            	add	[cs:$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 30926 00004C62 58                      	pop	ax			;AN000;
 30927                                  
 30928 00004C63 2E8B36[7499]            	mov	si,[cs:$P_KEYorSW_Ptr]	;AC034; set si at the end or colon
 30929                                  	;cmp	byte [cs:si],0
 30930 00004C68 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; any data after colon
 30931 00004C6C 7525                    	jne	short $P_CSW00		;AN000; if yes, process match flags
 30932                                  
 30933                                  	;cmp	byte [cs:si],':'
 30934 00004C6E 2E807CFF3A              	cmp	byte [cs:si-1],$P_Colon
 30935                                  					;AN000; if no, the switch terminated by colon ?
 30936 00004C73 7509                    	jne	short $P_Chk_if_data_required
 30937                                  					;AN000; if yes,
 30938                                  
 30939 00004C75 2EC706[6599]0900        	mov	word [cs:$P_RC],$P_Syntax
 30940                                  	;mov	word [cs:$P_RC],9	;AC034; return syntax error
 30941 00004C7C EB1A                    	jmp	short $P_Chk_SW_Exit	;AN000;
 30942                                  
 30943                                  $P_Chk_if_data_required:		;AN018; no data, no colon
 30944                                  	;cmp	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],0
 30945                                  	; 27/04/2023
 30946 00004C7E 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 30947 00004C82 7414                    	je	short $P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 30948                                  
 30949                                  	;;test	word [es:bx],1 ; $P_Optional
 30950                                  	;test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 30951 00004C84 26F60701                	test	byte [es:bx],$P_Optional
 30952                                  					;AN019; see if no value is valid
 30953 00004C88 750E                    	jnz	short $P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 30954                                  
 30955 00004C8A 2EC706[6599]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 30956                                  	;mov	word [cs:$P_RC],2	;AC034; return required operand missing
 30957 00004C91 EB05                    	jmp	short $P_Chk_SW_Exit	;AN018;
 30958                                  
 30959                                  $P_CSW00:				;AN000;
 30960 00004C93 E88D00                  	call	$P_Check_Match_Flags	;AN000; process match flag
 30961 00004C96 F8                      	clc				;AN000; indicate match
 30962                                  	;jmp	short $P_Chk_SW_Single_Exit
 30963 00004C97 C3                      	retn	; 31/03/2023		;AN000;
 30964                                  	; 31/03/2023
 30965                                  ;$P_Chk_SW_Err0: 			;AN000;
 30966                                  ;	stc				;AN000; not found in switch synonym list
 30967                                  ;	;jmp	short $P_Chk_SW_Single_Exit
 30968                                  ;	retn	; 31/03/2023		;AN000;
 30969                                  	
 30970                                  $P_Chk_SW_Exit: 			;AN000;
 30971 00004C98 50                      	push	ax			;AN000;
 30972                                  	; 31/03/2023
 30973 00004C99 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30974                                  	;;mov	al,3
 30975                                  	;;mov	ah,0FFh
 30976                                  	;mov	al,$P_String		;AN000; set
 30977                                  	;mov	ah,$P_No_Tag		;AN000;    result
 30978 00004C9C E80300                  	call	$P_Fill_Result		;AN000; 	 buffer
 30979 00004C9F 58                      	pop	ax			;AN000;
 30980 00004CA0 F8                      	clc				;AN000;
 30981                                  	; 31/03/2023
 30982                                  $P_Chk_SW_Err0:
 30983                                  $P_Chk_SW_Single_Exit:			;AN000;
 30984 00004CA1 C3                      	retn				;AN000;
 30985                                  
 30986                                  ;***********************************************************************
 30987                                  ; $P_Fill_Result
 30988                                  ;
 30989                                  ; Function: Fill the result buffer
 30990                                  ;
 30991                                  ; Input:    AH = Item tag
 30992                                  ;	    AL = type
 30993                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 30994                                  ;		  AL = 2: DX has index(offset) into value list
 30995                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 30996                                  ;		  AL = 7: DX has year, CL has month and CH has date
 30997                                  ;		  AL = 8: DL has hours, DH has minutes, CL has secondsn,
 30998                                  ;			  amd CH has hundredths
 30999                                  ;		  AL = else: psdata_seg:SI points to returned string buffer
 31000                                  ;	    ES:BX -> CONTROL block
 31001                                  ;
 31002                                  ; Output:   None
 31003                                  ;
 31004                                  ; Use:	$P_Do_CAPS_String, $P_Remove_Colon, $P_Found_SYNONYM
 31005                                  ;
 31006                                  ; Vars: $P_DX(W)
 31007                                  ;***********************************************************************
 31008                                  
 31009                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31010                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31011                                  $P_Fill_Result:
 31012 00004CA2 57                      	push	di			;AN000;
 31013 00004CA3 268B7F04                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Result_Buf]
 31014                                  	;mov	di,[es:bx+4]		;AN000; di points to result buffer
 31015 00004CA7 2E893E[6999]            	mov	[cs:$P_DX],di		;AC034; set returned result address
 31016                                  	;mov	[es:di+$P_RESULT_BLK.$P_Type],al
 31017                                  	;;mov	[es:di],al		;AN000; store type
 31018                                  	;mov	[es:di+$P_RESULT_BLK.$P_Item_Tag],ah
 31019                                  	;;mov	[es:di+1],ah		;AN000; store item tag
 31020                                  	; 31/03/2023
 31021 00004CAC 268905                  	mov	[es:di],ax
 31022 00004CAF 50                      	push	ax			;AN000;
 31023 00004CB0 2EA1[7899]              	mov	ax,[cs:$P_Found_SYNONYM]
 31024                                  					;AC034; if yes,
 31025 00004CB4 26894502                	mov	[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr],ax
 31026                                  	;mov	[es:di+2],ax		;AN000;   then set it to the result
 31027 00004CB8 58                      	pop	ax			;AN000;
 31028                                  $P_RLT04:				;AN000;
 31029                                  	;cmp	al,1
 31030 00004CB9 3C01                    	cmp	al,$P_Number		;AN000; if number
 31031 00004CBB 750A                    	jne	short $P_RLT00		;AN000;
 31032                                  $P_RLT02:				;AN000;
 31033 00004CBD 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 31034                                  	;mov	[es:di+4],dx		;AN000; then store 32bit
 31035 00004CC1 26894D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cx
 31036                                  	;mov	[es:di+6],cx		;AN000;	number
 31037 00004CC5 EB5A                    	jmp	short $P_RLT_Exit	;AN000;
 31038                                  $P_RLT00:				;AN000;
 31039                                  	;cmp	al,2
 31040 00004CC7 3C02                    	cmp	al,$P_List_Idx		;AN000; if list index
 31041 00004CC9 7506                    	jne	short $P_RLT01		;AN000;
 31042 00004CCB 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 31043                                  	;mov	[es:di+4],dx		;AN000; then store list index
 31044 00004CCF EB50                    	jmp	short $P_RLT_Exit	;AN000;
 31045                                  $P_RLT01:				;AN000;
 31046                                  	;cmp	al,7
 31047 00004CD1 3C07                    	cmp	al,$P_Date_F ; 7	;AN000; Date format ?
 31048 00004CD3 74E8                    	je	short $P_RLT02		;AN000;
 31049                                  	;cmp	al,8
 31050 00004CD5 3C08                    	cmp	al,$P_Time_F ; 8	;AN000; Time format ?
 31051 00004CD7 74E4                    	je	short $P_RLT02		;AN000;
 31052                                  	;cmp	al,6
 31053 00004CD9 3C06                    	cmp	al,$P_Drive  ; 6	;AN000; drive format ?
 31054 00004CDB 7506                    	jne	short $P_RLT03		;AN000;
 31055                                  
 31056 00004CDD 26885504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dl
 31057                                  	;mov	[es:di+4],dl		;AN000; store drive number
 31058 00004CE1 EB3E                    	jmp	short $P_RLT_Exit	;AN000;
 31059                                  
 31060                                  $P_RLT03:				;AN000;
 31061                                  	;cmp	al,4
 31062 00004CE3 3C04                    	cmp	al,$P_Complex		;AN000; complex format ?
 31063 00004CE5 750F                    	jne	short $P_RLT05		;AN000;
 31064                                  
 31065 00004CE7 2EA1[7299]              	mov	ax,[cs:$P_SaveSI_Cmpx]	;AC034; then get pointer in command buffer
 31066 00004CEB 40                      	inc	ax			;AN000; skip left Parentheses
 31067 00004CEC 26894504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],ax
 31068                                  	;mov	[es:di+4],ax		;AN000; store offset
 31069 00004CF0 268C5D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],ds
 31070                                  	;mov	[es:di+6],ds		;AN000; store segment
 31071 00004CF4 EB2B                    	jmp	short $P_RLT_Exit	;AN000;
 31072                                  
 31073                                  $P_RLT05:				;AN000;
 31074                                  ;------------------------  AL = 3, 5, or 9
 31075 00004CF6 26897504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],si
 31076                                  	;mov	[es:di+4],si		;AN000; store offset of STRING_BUF
 31077 00004CFA 268C4D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cs
 31078                                  	;mov	[es:di+6],cs		;AN031; store segment of STRING_BUF
 31079                                  
 31080 00004CFE 50                      	push	ax			;AN000;
 31081 00004CFF 26F6470201              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File
 31082                                  	;test	byte [es:bx+2],1	;AN000; need CAPS by file table?
 31083 00004D04 7404                    	jz	short $P_RLT_CAP00	;AN000;
 31084                                  
 31085                                  	;mov	al,4
 31086 00004D06 B004                    	mov	al,$P_DOSTBL_File ; 4	;AN000; use file upper case table
 31087 00004D08 EB09                    	jmp	short $P_RLT_CAP02	;AN000;
 31088                                  
 31089                                  $P_RLT_CAP00:				;AN000;
 31090 00004D0A 26F6470202              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char
 31091                                  	;test	byte [es:bx+2],2	;AN000; need CAPS by char table ?
 31092 00004D0F 7405                    	jz	short $P_RLT_CAP01	;AN000;
 31093                                  
 31094                                  	;mov	al,2
 31095 00004D11 B002                    	mov	al,$P_DOSTBL_Char ; 2	;AN000; use character upper case table
 31096                                  $P_RLT_CAP02:				;AN000;
 31097 00004D13 E80C01                  	call	$P_Do_CAPS_String	;AN000;  process CAPS along the table
 31098                                  $P_RLT_CAP01:				;AN000;
 31099 00004D16 58                      	pop	ax			;AN000;
 31100 00004D17 26F6470210              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon
 31101                                  	;test	byte [es:bx+2],10h	;AN000; removing colon at end ?
 31102 00004D1C 7403                    	jz	short $P_RLT_Exit	;AN000;
 31103                                  
 31104 00004D1E E8DD00                  	call	$P_Remove_Colon 	;AN000; then process it.
 31105                                  $P_RLT_Exit:				;AN000;
 31106 00004D21 5F                      	pop	di			;AN000;
 31107 00004D22 C3                      	retn				;AN000;
 31108                                  
 31109                                  ;***********************************************************************
 31110                                  ; $P_Check_Match_Flags
 31111                                  ;
 31112                                  ; Function:  Check the mutch_flags and make the exit code and set the
 31113                                  ;	     result buffer
 31114                                  ;
 31115                                  ;	    Check for types in this order:
 31116                                  ;		Complex
 31117                                  ;		Date
 31118                                  ;		Time
 31119                                  ;		Drive
 31120                                  ;		Filespec
 31121                                  ;		Quoted String
 31122                                  ;		Simple String
 31123                                  ;
 31124                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31125                                  ;	     ES:BX -> CONTROL block
 31126                                  ;
 31127                                  ; Output:    None
 31128                                  ;
 31129                                  ; Use:	     $P_Value, P$_SValue, $P_Simple_String, $P_Date_Format
 31130                                  ;	     $P_Time_Format, $P_Complex_Format, $P_File_Foemat
 31131                                  ;	     $P_Drive_Format
 31132                                  ;***********************************************************************
 31133                                  
 31134                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31135                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31136                                  $P_Check_Match_Flags:
 31137 00004D23 2EC606[3E9A]00          	mov	byte [cs:$P_err_flag],$P_NULL ; 0
 31138                                  					;AN033;AC034;; clear filespec error flag.
 31139 00004D29 50                      	push	ax			;AN000;
 31140                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 31141 00004D2A 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 31142 00004D2D 09C0                    	or	ax,ax			;AC035; test ax for zero
 31143 00004D2F 7518                    	jnz	short $P_Mat		;AN000; (tm12)
 31144 00004D31 50                      	push	ax			;AN000; (tm12)
 31145 00004D32 53                      	push	bx			;AN000; (tm12)
 31146 00004D33 52                      	push	dx			;AN000; (tm12)
 31147 00004D34 57                      	push	di			;AN000; (tm12)
 31148 00004D35 2EC706[6599]0900        	mov	word [cs:$P_RC],$P_Syntax
 31149                                  	;mov	word [cs:$P_RC],9	;AC034; (tm12)
 31150                                  	; 31/03/2023
 31151 00004D3C B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31152                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; (tm12)
 31153                                  	;mov	al,$P_String ; 3	;AN000; (tm12)
 31154 00004D3F E860FF                  	call	$P_Fill_Result		;AN000; (tm12)
 31155 00004D42 5F                      	pop	di			;AN000; (tm12)
 31156 00004D43 5A                      	pop	dx			;AN000; (tm12)
 31157 00004D44 5B                      	pop	bx			;AN000; (tm12)
 31158 00004D45 58                      	pop	ax			;AN000; (tm12)
 31159                                  	;jmp	short $P_Bridge 	;AC035; (tm12)
 31160                                  	; 31/03/2023
 31161                                  $P_Bridge:	; 18/04/2023		;AN000;
 31162 00004D46 E99C00                  	jmp	$P_Match_Exit		;AN000; (tm02)
 31163                                  $P_Mat: 				;AN000; (tm12)
 31164                                  $P_Match01:				;AN000;
 31165                                  	;test	ax,1000h
 31166 00004D49 A90010                  	test	ax,$P_Date_S		;AN000; Date string
 31167 00004D4C 7412                    	jz	short $P_Match02	;AN000;
 31168 00004D4E 2EC706[6599]0000        	mov	word [cs:$P_RC],$P_No_Error
 31169                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31170 00004D55 E86503                  	call	$P_Date_Format		;AN000; do process
 31171 00004D58 2E833E[6599]09          	cmp	word [cs:$P_RC],$P_Syntax
 31172                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31173                                  	; 18/04/2023
 31174 00004D5E 75E6                    	jne	short $P_Bridge		;AN000;
 31175                                  $P_Match02:				;AN000;
 31176                                  	;test	ax,800h
 31177 00004D60 A90008                  	test	ax,$P_Time_S		;AN000; Time string
 31178 00004D63 7412                    	jz	short $P_Match03	;AN000;
 31179 00004D65 2EC706[6599]0000        	mov	word [cs:$P_RC],$P_No_Error
 31180                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31181 00004D6C E86004                  	call	$P_Time_Format		;AN000; do process
 31182 00004D6F 2E833E[6599]09          	cmp	word [cs:$P_RC],$P_Syntax
 31183                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31184                                  	;jne	short $P_Bridge		;AN000; (tm09)
 31185                                  	;jmp	short $P_Match03	;AN025; (tm09)
 31186                                  	; 31/03/2023
 31187 00004D75 756E                    	jne	short $P_Match_Exit
 31188                                  ;$P_Bridge:				;AN000;
 31189                                  	;jmp	short $P_Match_Exit	;AN000; (tm02)
 31190                                  $P_Match03:				;AN000;
 31191                                  	;test	ax,8000h
 31192 00004D77 A90080                  	test	ax,$P_Num_Val		;AN000; Numeric value
 31193 00004D7A 7412                    	jz	short $P_Match04	;AN000;
 31194 00004D7C 2EC706[6599]0000        	mov	word [cs:$P_RC],$P_No_Error
 31195                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 31196 00004D83 E82C01                  	call	$P_Value		;AN000; do process
 31197 00004D86 2E833E[6599]09          	cmp	word [cs:$P_RC],$P_Syntax
 31198                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 31199 00004D8C 7557                    	jne	short $P_Match_Exit	;AN000;
 31200                                  $P_Match04:				;AN000;
 31201                                  	;test	ax,4000h
 31202 00004D8E A90040                  	test	ax,$P_SNum_Val		;AN000; Signed numeric value
 31203 00004D91 7412                    	jz	short $P_Match05	;AN000;
 31204 00004D93 2EC706[6599]0000        	mov	word [cs:$P_RC],$P_No_Error
 31205                                  					;AC034; assume no error
 31206 00004D9A E8F100                  	call	$P_SValue		;AN000; do process
 31207 00004D9D 2E833E[6599]09          	cmp	word [cs:$P_RC],$P_Syntax
 31208                                  					;AC034; if error, examine the next type
 31209 00004DA3 7540                    	jne	short $P_Match_Exit	;AN000;
 31210                                  $P_Match05:				;AN000;
 31211                                  	;test	ax,100h
 31212 00004DA5 A90001                  	test	ax,$P_Drv_Only		;AN000; Drive only
 31213 00004DA8 7415                    	jz	short $P_Match06	;AN000;
 31214 00004DAA 2EC706[6599]0000        	mov	word [cs:$P_RC],$P_No_Error
 31215                                  					;AC034; assume no error
 31216 00004DB1 E86805                  	call	$P_File_Format		;AN000; 1st, call file format
 31217 00004DB4 E8E905                  	call	$P_Drive_Format 	;AN000; check drive format, next
 31218 00004DB7 2E833E[6599]09          	cmp	word [cs:$P_RC],$P_Syntax
 31219                                  					;AC034; if error, examinee the next type
 31220 00004DBD 7526                    	jne	short $P_Match_Exit	;AN000;
 31221                                  $P_Match06:				;AN000;
 31222                                  	;test	ax,200h
 31223 00004DBF A90002                  	test	ax,$P_File_Spc		;AN000; File spec
 31224 00004DC2 7412                    	jz	short $P_Match07	;AN000;
 31225 00004DC4 2EC706[6599]0000        	mov	word [cs:$P_RC],$P_No_Error
 31226                                  					;AC034; assume no error
 31227 00004DCB E84E05                  	call	$P_File_Format		;AN000; do process
 31228 00004DCE 2E833E[6599]09          	cmp	word [cs:$P_RC],$P_Syntax
 31229                                  					;AC034; if error, examine the next type
 31230 00004DD4 750F                    	jne	short $P_Match_Exit	;AN000;
 31231                                  $P_Match07:				;AN000;
 31232                                  $P_Match08:				;AN000;
 31233                                  	;test	ax,2000h
 31234 00004DD6 A90020                  	test	ax,$P_Simple_S		;AN000; Simple string
 31235 00004DD9 740A                    	jz	short $P_Match09	;AN000;
 31236 00004DDB 2EC706[6599]0000        	mov	word [cs:$P_RC],$P_No_Error
 31237                                  					;AC034; assume no error
 31238 00004DE2 E8D601                  	call	$P_Simple_String	;AN000; do process
 31239                                  $P_Match09:				;AN000;
 31240                                  $P_Match_Exit:				;AN000;
 31241 00004DE5 2E833E[3E9A]01          	cmp	word [cs:$P_err_flag],$P_error_filespec
 31242                                  	;cmp	word [cs:$P_err_flag],1 ;AC034; bad filespec ?
 31243 00004DEB 750F                    	jne	short $P_Match2_Exit	;AN033; no, continue
 31244 00004DED 2E833E[6599]00          	cmp	word [cs:$P_RC],$P_No_Error
 31245                                  	;cmp	word [cs:$P_RC],0	;AN033;AC034;; check for other errors ?
 31246 00004DF3 7507                    	jne	short $P_Match2_Exit	;AN033; no, continue
 31247 00004DF5 2EC706[6599]0900        	mov	word [cs:$P_RC],$P_Syntax
 31248                                  	;mov	word [cs:$P_RC],9	;AN033;AC034;; set error flag
 31249                                  $P_Match2_Exit: 			;AN033;
 31250 00004DFC 58                      	pop	ax			;AN000;
 31251 00004DFD C3                      	retn
 31252                                  
 31253                                  ;***********************************************************************
 31254                                  ; $P_Remove_Colon;
 31255                                  ;
 31256                                  ; Function: Remove colon at end
 31257                                  ;
 31258                                  ; Input:    psdata_seg:SI points to string buffer to be examineed
 31259                                  ;
 31260                                  ; Output:   None
 31261                                  ;
 31262                                  ; Use:	$P_Chk_DBCS
 31263                                  ;***********************************************************************
 31264                                  
 31265                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31266                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31267                                  $P_Remove_Colon:
 31268 00004DFE 50                      	push	ax			;AN000;
 31269 00004DFF 56                      	push	si			;AN000;
 31270                                  $P_RCOL_Loop:				;AN000;
 31271 00004E00 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31272 00004E03 08C0                    	or	al,al			;AN000; end of string ?
 31273 00004E05 740F                    	jz	short $P_RCOL_Exit	;AN000; if yes, just exit
 31274                                  
 31275 00004E07 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; is it colon ?
 31276 00004E09 750E                    	jne	short $P_RCOL00		;AN000;
 31277                                  
 31278                                  	;cmp	byte [cs:si+1],0
 31279 00004E0B 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; if so, next is NULL ?
 31280 00004E10 7507                    	jne	short $P_RCOL00		;AN000; no, then next char
 31281                                  
 31282 00004E12 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; yes, remove colon
 31283                                  	; 31/03/2023
 31284                                  	;jmp	short $P_RCOL_Exit	;AN000; and exit.
 31285                                  $P_RCOL_Exit:
 31286 00004E16 5E                      	pop	si
 31287 00004E17 58                      	pop	ax
 31288 00004E18 C3                      	retn
 31289                                  
 31290                                  $P_RCOL00:				;AN000;
 31291 00004E19 E8A606                  	call	$P_Chk_DBCS		;AN000; if not colon, then check if
 31292 00004E1C 7301                    	jnc	short $P_RCOL01		;AN000; DBCS leading byte.
 31293                                  
 31294 00004E1E 46                      	inc	si			;AN000; if yes, skip trailing byte
 31295                                  $P_RCOL01:				;AN000;
 31296 00004E1F 46                      	inc	si			;AN000; si points to next byte
 31297 00004E20 EBDE                    	jmp	short $P_RCOL_Loop	;AN000; loop until NULL encountered
 31298                                  
 31299                                  	; 31/03/2023
 31300                                  ;$P_RCOL_Exit:				;AN000;
 31301                                  	;pop	si			;AN000;
 31302                                  	;pop	ax			;AN000;
 31303                                  	;retn
 31304                                  
 31305                                  ;***********************************************************************
 31306                                  ; $P_Do_CAPS_String;
 31307                                  ;
 31308                                  ; Function: Perform capitalization along with the file case map table
 31309                                  ;	    or character case map table.
 31310                                  ;
 31311                                  ; Input:    AL = 2 : Use character table
 31312                                  ;	    AL = 4 : Use file table
 31313                                  ;	    psdata_seg:SI points to string buffer to be capitalized
 31314                                  ;
 31315                                  ; Output:   None
 31316                                  ;
 31317                                  ; Use:	$P_Do_CAPS_Char, $P_Chk_DBCS
 31318                                  ;***********************************************************************
 31319                                  
 31320                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31321                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31322                                  $P_Do_CAPS_String:
 31323 00004E22 56                      	push	si			;AN000;
 31324 00004E23 52                      	push	dx			;AN000;
 31325 00004E24 88C2                    	mov	dl,al			;AN000; save info id
 31326                                  $P_DCS_Loop:				;AN000;
 31327 00004E26 2E8A04                  	mov	al,[cs:si]		;AN000; load character and
 31328 00004E29 E89606                  	call	$P_Chk_DBCS		;AN000; check if DBCS leading byte
 31329 00004E2C 720C                    	jc	short $P_DCS00		;AN000; if yes, do not need CAPS
 31330                                  
 31331 00004E2E 08C0                    	or	al,al			;AN000; end of string ?
 31332 00004E30 740C                    	jz	short $P_DCS_Exit	;AN000; then exit.
 31333                                  
 31334 00004E32 E80C00                  	call	$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 31335 00004E35 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 31336 00004E38 EB01                    	jmp	short $P_DCS01		;AN000; process nexit
 31337                                  $P_DCS00:				;AN000;
 31338 00004E3A 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 31339                                  $P_DCS01:				;AN000;
 31340 00004E3B 46                      	inc	si			;AN000; si point to next byte
 31341 00004E3C EBE8                    	jmp	short $P_DCS_Loop	;AN000; loop until NULL encountered
 31342                                  $P_DCS_Exit:				;AN000;
 31343 00004E3E 5A                      	pop	dx			;AN000;
 31344 00004E3F 5E                      	pop	si			;AN000;
 31345 00004E40 C3                      	retn
 31346                                  
 31347                                  ;***********************************************************************
 31348                                  ; $P_Do_CAPS_Char;
 31349                                  ;
 31350                                  ; Function: Perform capitalization along with the file case map table
 31351                                  ;	    or character case map table.
 31352                                  ;
 31353                                  ; Input:    DL = 2 : Use character table
 31354                                  ;	    DL = 4 : Use file table
 31355                                  ;	    AL = character to be capitalized
 31356                                  ;
 31357                                  ; Output:   None
 31358                                  ;
 31359                                  ; Use:	INT 21h /w AH=65h
 31360                                  ;***********************************************************************
 31361                                  
 31362                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31363                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31364                                  $P_Do_CAPS_Char:
 31365 00004E41 3C80                    	cmp	al,$P_ASCII80	; 80h	;AN000; need upper case table ?
 31366 00004E43 730B                    	jae	short $P_DCC_Go		;AN000;
 31367                                  
 31368 00004E45 3C61                    	cmp	al,"a"  ; 61h		;AN000; if no,
 31369 00004E47 7244                    	jb	short $P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 31370                                  
 31371 00004E49 3C7A                    	cmp	al,"z"  ; 7Ah		;AN000;
 31372 00004E4B 7740                    	ja	short $P_CAPS_Ret	;AN000;   if yes, make CAPS
 31373                                  
 31374 00004E4D 24DF                    	and	al,$P_Make_Upper ; 0DFh	;AN000;   else do nothing.
 31375                                  	;jmp	short $P_CAPS_Ret	;AN000;
 31376                                  	; 18/04/2023
 31377 00004E4F C3                      	retn
 31378                                  
 31379                                  $P_DCC_Go:				;AN000;
 31380 00004E50 53                      	push	bx			;AN000;
 31381 00004E51 06                      	push	es			;AN000;
 31382 00004E52 57                      	push	di			;AN000;
 31383                                  	; 18/04/2023
 31384 00004E53 8D3E[309A]              	lea	di,$P_File_CAP_Ptr	;AC034;
 31385 00004E57 80FA04                  	cmp	dl,$P_DOSTBL_File ; 4	;AN000; Use file CAPS table ?
 31386 00004E5A 7404                    	je	short $P_DCC00		;AN000;
 31387                                  	; 27/04/2023
 31388 00004E5C 8D3E[2B9A]              	lea	di,$P_Char_CAP_Ptr	;AC034; or use char CAPS table ?
 31389                                  $P_DCC00:				;AN000;
 31390 00004E60 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 31391 00004E63 7417                    	je	short $P_DCC01		;AN000; if no,
 31392                                  
 31393                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 31394                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 31395                                  ; call, regardless of what base register is currently be defined as PSDATA_SEG.
 31396                                  
 31397 00004E65 50                      	push	ax			;AN000; get CAPS table thru DOS call
 31398 00004E66 51                      	push	cx			;AN000;
 31399 00004E67 52                      	push	dx			;AN000;
 31400 00004E68 0E                      	push	cs			;AC036; pass current base seg into
 31401                                  					;(Note: this used to push CS. BUG...
 31402 00004E69 07                      	pop	es			;AN000;   ES reg, required for
 31403                                  					;get extended country information
 31404                                  	; 31/03/2023
 31405 00004E6A B465                    	mov	ah,$P_DOS_Get_TBL ; 65h	;AN000; get extended CDI
 31406                                  	;mov	ah,65h
 31407 00004E6C 88D0                    	mov	al,dl			;AN000; upper case table
 31408                                  	;mov	bx,-1 ; 0FFFFh
 31409                                  	;mov	cx,5
 31410                                  	;mov	dx,-1
 31411 00004E6E BBFFFF                  	mov	bx,$P_DOSTBL_Def ; -1	;AN000; get active CON
 31412 00004E71 B90500                  	mov	cx,$P_DOSTBL_BL  ; 5 	;AN000; buffer length
 31413 00004E74 BAFFFF                  	mov	dx,$P_DOSTBL_Def ; -1	;AN000; get for default code page
 31414                                  					;DI already set to point to buffer
 31415 00004E77 CD21                    	int	21h			;AN000; es:di point to buffer that
 31416                                  					;now has been filled in with info
 31417 00004E79 5A                      	pop	dx			;AN000;
 31418 00004E7A 59                      	pop	cx			;AN000;
 31419 00004E7B 58                      	pop	ax			;AN000;
 31420                                  
 31421                                  $P_DCC01:				;AN000;
 31422                                  
 31423                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 31424                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 31425                                  ; regardless of which base reg is currently the PSDATA_SEG reg.
 31426                                  
 31427 00004E7C 2E8B5D01                	mov	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 31428                                  	;mov	bx,[cs:di+1]		;AN000; get offset of table
 31429 00004E80 2E8E4503                	mov	es,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Seg]
 31430                                  	;mov	es,[cs:di+3]		;AN000; get segment of table
 31431 00004E84 43                      	inc	bx			;AC035; add '2' to
 31432 00004E85 43                      	inc	bx			;AC035;  BX reg
 31433                                  					;AN000; skip length field
 31434 00004E86 2C80                    	sub	al,$P_ASCII80 ; 80h	;AN000; make char to index
 31435                                  	;xlat	es:[bx] 		;AN000; perform case map
 31436                                  	; 31/03/2023
 31437 00004E88 26D7                    	es	xlat
 31438                                  
 31439 00004E8A 5F                      	pop	di			;AN000;
 31440 00004E8B 07                      	pop	es			;AN000;
 31441 00004E8C 5B                      	pop	bx			;AN000;
 31442                                  $P_CAPS_Ret:				;AN000;
 31443 00004E8D C3                      	retn
 31444                                  
 31445                                  ;***********************************************************************
 31446                                  ; $P_Value / $P_SValue
 31447                                  ;
 31448                                  ; Function:  Make 32bit value from psdata_seg:SI and see value list
 31449                                  ;	     and make result buffer.
 31450                                  ;	     $P_SValue is an entry point for the signed value
 31451                                  ;	     and this will simply call $P_Value after the handling
 31452                                  ;	     of the sign character, "+" or "-"
 31453                                  ;
 31454                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31455                                  ;	     ES:BX -> CONTROL block
 31456                                  ;
 31457                                  ; Output:    None
 31458                                  ;
 31459                                  ; Use:	$P_Fill_Result, $P_Check_OVF
 31460                                  ;
 31461                                  ; Vars: $P_RC(W), $P_Flags(RW)
 31462                                  ;***********************************************************************
 31463                                  
 31464                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31465                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31466                                  $P_SValue:
 31467 00004E8E 50                      	push	ax			;AN000;
 31468                                  	;or	byte [cs:$P_Flags2],80h
 31469 00004E8F 2E800E[7199]80          	or	byte [cs:$P_Flags2],$P_Signed
 31470                                  					;AC034; indicate a signed numeric
 31471                                  	;and	byte [cs:$P_Flags2],0FDh
 31472 00004E95 2E8026[7199]FD          	and	byte [cs:$P_Flags2],0FFh-$P_Neg
 31473                                  					;AC034; assume positive value
 31474 00004E9B 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 31475 00004E9E 3C2B                    	cmp	al,'+' ; 2Bh
 31476                                  	;cmp	al,$P_Plus ; '+'	;AN000; "+" ?
 31477 00004EA0 740A                    	je	short $P_SVal00		;AN000;
 31478                                  
 31479 00004EA2 3C2D                    	cmp	al,'-' ; 2Dh
 31480                                  	;cmp	al,$P_Minus ; '-'	;AN000; "-" ?
 31481 00004EA4 7507                    	jne	short $P_Sval01		;AN000; else
 31482                                  
 31483 00004EA6 2E800E[7199]02          	or	byte [cs:$P_Flags2],$P_Neg ; 2
 31484                                  					;AC034; set this is negative value
 31485                                  $P_SVal00:				;AN000;
 31486 00004EAC 46                      	inc	si			;AN000; skip sign char
 31487                                  $P_Sval01:				;AN000;
 31488 00004EAD E80200                  	call	$P_Value		;AN000; and process value
 31489 00004EB0 58                      	pop	ax			;AN000;
 31490 00004EB1 C3                      	retn				;AN000;
 31491                                  
 31492                                  ;***********************************************************************
 31493                                  
 31494                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31495                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4955h
 31496                                  
 31497                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31498                                  	; MSDOS 6.2 COMMAND.COM - TRANGROUP:5119h
 31499                                  $P_Value:
 31500 00004EB2 50                      	push	ax			;AN000;
 31501 00004EB3 51                      	push	cx			;AN000;
 31502 00004EB4 52                      	push	dx			;AN000;
 31503 00004EB5 56                      	push	si			;AN000;
 31504 00004EB6 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 31505 00004EB8 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 31506 00004EBA 53                      	push	bx			;AN000; save control pointer
 31507                                  $P_Value_Loop:				;AN000;
 31508 00004EBB 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 31509 00004EBE 08C0                    	or	al,al			;AN000; end of line ?
 31510 00004EC0 7442                    	jz	short $P_Value00	;AN000;
 31511                                  
 31512 00004EC2 E8EB00                  	call	$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 31513 00004EC5 7239                    	jc	short $P_Value_Err0	;AN000;
 31514                                  
 31515 00004EC7 30E4                    	xor	ah,ah			;AN000;
 31516 00004EC9 89C5                    	mov	bp,ax			;AN000; save binary number
 31517 00004ECB D1E2                    	shl	dx,1			;AN000; to have 2*x
 31518 00004ECD D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 31519 00004ECF E8CC00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31520 00004ED2 722C                    	jc	short $P_Value_Err0	;AN000; then error, exit
 31521                                  
 31522 00004ED4 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 31523 00004ED6 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 31524 00004ED8 D1E2                    	shl	dx,1			;AN000; to have 4*x
 31525 00004EDA D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 31526 00004EDC E8BF00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31527 00004EDF 721F                    	jc	short $P_Value_Err0	;AN000; then error, exit
 31528                                  
 31529 00004EE1 D1E2                    	shl	dx,1			;AN000; to have 8*x
 31530 00004EE3 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 31531 00004EE5 E8B600                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31532 00004EE8 7216                    	jc	short $P_Value_Err0	;AN000; then error, exit
 31533                                  
 31534 00004EEA 01DA                    	add	dx,bx			;AN000; now have 10*x
 31535 00004EEC 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 31536 00004EEE E8AD00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31537 00004EF1 720D                    	jc	short $P_Value_Err0	;AN000; then error, exit
 31538                                  
 31539 00004EF3 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 31540 00004EF5 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 31541 00004EF8 E8A300                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 31542 00004EFB 7203                    	jc	short $P_Value_Err0	;AN000; then error, exit
 31543                                  
 31544 00004EFD 46                      	inc	si			;AN000; update pointer
 31545 00004EFE EBBB                    	jmp	short $P_Value_Loop	;AN000; loop until NULL encountered
 31546                                  
 31547                                  $P_Value_Err0:				;AN000;
 31548 00004F00 5B                      	pop	bx			;AN000;
 31549 00004F01 E98800                  	jmp	$P_Value_Err		;AN000; Bridge
 31550                                  
 31551                                  $P_Value00:				;AN000;
 31552 00004F04 5B                      	pop	bx			;AN000; restore control pointer
 31553 00004F05 2EF606[7199]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2 
 31554                                  					;AC034; here cx,dx = 32bit value
 31555 00004F0B 740A                    	jz	short $P_Value01	;AN000; was it negative ?
 31556                                  
 31557 00004F0D F7D1                    	not	cx			;AN000; +
 31558 00004F0F F7D2                    	not	dx			;AN000; |- Make 2's complement
 31559 00004F11 83C201                  	add	dx,1			;AN000; |
 31560 00004F14 83D100                  	adc	cx,0			;AN000; +
 31561                                  $P_Value01:				;AN000; / nval =0
 31562 00004F17 268B7706                	mov	si,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 31563                                  	;mov	si,[es:bx+6]		;AN000; si points to value list
 31564 00004F1B 268A04                  	mov	al,[es:si]		;AN000; get nval
 31565 00004F1E 3C00                    	cmp	al,$P_nval_None ; 0	;AN000; no value list ?
 31566 00004F20 7505                    	jne	short $P_Value02	;AN000;
 31567                                  
 31568                                  	;mov	al,$P_Number	; 1	;AN000; Set type
 31569                                  	;mov	ah,$P_No_Tag	; 0FFh	;AN000; No ITEM_TAG set
 31570                                  	; 31/03/2023
 31571 00004F22 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 31572 00004F25 EB6F                    	jmp	short $P_Value_Exit	;AN000;
 31573                                  
 31574                                  $P_Value02:				;AN000; / nval = 1
 31575 00004F27 46                      	inc	si			;AN000;
 31576 00004F28 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 31577 00004F2B 3C00                    	cmp	al,$P_No_nrng	; 0	;AN000; (tm07)
 31578 00004F2D 745D                    	je	short $P_Value03	;AN000; (tm07)
 31579                                  
 31580 00004F2F 46                      	inc	si			;AN000; si points to 1st item_tag
 31581                                  $P_Val02_Loop:				;AN000;
 31582 00004F30 2EF606[7199]80          	test	byte [cs:$P_Flags2],$P_Signed ; 80h
 31583                                  	;test	byte [cs:$P_Flags2],80h	;AC034;
 31584 00004F36 751E                    	jnz	short $P_Val02_Sign	;AN000;
 31585                                  
 31586 00004F38 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 31587                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 31588 00004F3C 723B                    	jb	short $P_Val02_Next	;AN000;
 31589 00004F3E 7706                    	ja	short $P_Val_In		;AN000;
 31590                                  
 31591 00004F40 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 31592                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 31593 00004F44 7233                    	jb	short $P_Val02_Next	;AN000;
 31594                                  
 31595                                  $P_Val_In:				;AN000;
 31596 00004F46 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 31597                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH (tm01)
 31598 00004F4A 772D                    	ja	short $P_Val02_Next	;AN000;
 31599 00004F4C 7224                    	jb	short $P_Val_Found	;AN000;
 31600                                  
 31601 00004F4E 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 31602                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 31603 00004F52 7725                    	ja	short $P_Val02_Next	;AN000;
 31604                                  
 31605 00004F54 EB1C                    	jmp	short $P_Val_Found	;AN000;
 31606                                  
 31607                                  $P_Val02_Sign:				;AN000;
 31608 00004F56 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 31609                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 31610 00004F5A 7C1D                    	jl	short $P_Val02_Next	;AN000;
 31611 00004F5C 7F06                    	jg	short $P_SVal_In	;AN000;
 31612                                  
 31613 00004F5E 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 31614                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 31615 00004F62 7C15                    	jl	short $P_Val02_Next	;AN000;
 31616                                  
 31617                                  $P_SVal_In:				;AN000;
 31618 00004F64 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 31619                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH
 31620 00004F68 7F0F                    	jg	short $P_Val02_Next	;AN000;
 31621 00004F6A 7C06                    	jl	short $P_Val_Found	;AN000;
 31622                                  
 31623 00004F6C 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 31624                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 31625 00004F70 7F07                    	jg	short $P_Val02_Next	;AN000;
 31626                                  
 31627                                  	;jmp	short $P_Val_Found	;AN000;
 31628                                  	; 27/04/2023
 31629                                  $P_Val_Found:				;AN000;
 31630 00004F72 B001                    	mov	al,$P_Number ; 1	;AN000;
 31631 00004F74 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 31632 00004F77 EB1D                    	jmp	short $P_Value_Exit	;AN000;
 31633                                  
 31634                                  $P_Val02_Next:				;AN000;
 31635 00004F79 83C609                  	add	si,$P_Len_Range ; 9 	;AN000;
 31636 00004F7C FEC8                    	dec	al			;AN000; loop nrng times in AL
 31637 00004F7E 75B0                    	jnz	short $P_Val02_Loop	;AN000;
 31638                                  					; / Not found
 31639 00004F80 2EC706[6599]0600        	mov	word [cs:$P_RC],$P_Out_Of_Range
 31640                                  	;mov	word [cs:$P_RC],6	;AC034;
 31641                                  	
 31642                                  	;mov	al,$P_Number ; 1	;AN000;
 31643                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 31644                                  	; 31/03/2023
 31645 00004F87 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 31646 00004F8A EB0A                    	jmp	short $P_Value_Exit	;AN000;
 31647                                  
 31648                                  	; 27/04/2023
 31649                                  ;$P_Val_Found:				;AN000;
 31650                                  	;mov	al,$P_Number ; 1	;AN000;
 31651                                  	;mov	ah,[es:si]		;AN000; found ITEM_TAG set
 31652                                  	;jmp	short $P_Value_Exit	;AN000;
 31653                                  
 31654                                  $P_Value03:				;AN000; / nval = 2
 31655                                  $P_Value04:				;AN000; / nval = 3 or else
 31656                                  $P_Value_Err:				;AN000;
 31657 00004F8C 2EC706[6599]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 31658                                  					;AC034;
 31659                                  	;mov	al,$P_String ; 3	;AN000; Set type
 31660                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31661                                  	; 31/03/2023
 31662 00004F93 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31663                                  $P_Value_Exit:				;AN000;
 31664 00004F96 E809FD                  	call	$P_Fill_Result		;AN000;
 31665 00004F99 5E                      	pop	si			;AN000;
 31666 00004F9A 5A                      	pop	dx			;AN000;
 31667 00004F9B 59                      	pop	cx			;AN000;
 31668 00004F9C 58                      	pop	ax			;AN000;
 31669 00004F9D C3                      	retn				;AN000;
 31670                                  
 31671                                  ;***********************************************************************
 31672                                  ; $P_Check_OVF
 31673                                  ;
 31674                                  ; Function:  Check if overflow is occurred with consideration of
 31675                                  ;	     signed or un-signed numeric value
 31676                                  ;
 31677                                  ; Input:     Flag register
 31678                                  ;
 31679                                  ; Output:    CY = 1  :	Overflow
 31680                                  ;
 31681                                  ; Vars:     $P_Flags(R)
 31682                                  ;***********************************************************************
 31683                                  
 31684                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31685                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31686                                  $P_Check_OVF:
 31687 00004F9E 9C                      	pushf				;AN000;
 31688 00004F9F 2EF606[7199]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2
 31689                                  					;AC034; is it negative value ?
 31690 00004FA5 7502                    	jnz	short $P_COVF		;AN000; if no, check overflow
 31691 00004FA7 9D                      	popf				;AN000; by the CY bit
 31692 00004FA8 C3                      	retn				;AN000;
 31693                                  $P_COVF:				;AN000;
 31694 00004FA9 9D                      	popf				;AN000; else,
 31695 00004FAA 7002                    	jo	short $P_COVF00		;AN000; check overflow by the OF
 31696 00004FAC F8                      	clc				;AN000; indicate it with CY bit
 31697 00004FAD C3                      	retn				;AN000; CY=0 means no overflow
 31698                                  $P_0099Err:	; 31/03/2023
 31699                                  $P_COVF00:				;AN000;
 31700 00004FAE F9                      	stc				;AN000; and CY=1 means overflow
 31701                                  $P_0099Err2:	; 31/03/2023
 31702 00004FAF C3                      	retn				;AN000;
 31703                                  
 31704                                  ;***********************************************************************
 31705                                  ; $P_0099;
 31706                                  ;
 31707                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 31708                                  ;
 31709                                  ; Input:     AL = character code
 31710                                  ;
 31711                                  ; Output:    CY = 1 : AL is not number
 31712                                  ;	     CY = 0 : AL contains binary value
 31713                                  ;***********************************************************************
 31714                                  
 31715                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31716                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31717                                  $P_0099:
 31718 00004FB0 3C30                    	cmp	al,"0"                  ;AN000;
 31719                                  	;jb	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 31720                                  	; 31/03/2023
 31721 00004FB2 72FB                    	jb	short $P_0099Err2
 31722                                  
 31723 00004FB4 3C39                    	cmp	al,"9"                  ;AN000;
 31724 00004FB6 77F6                    	ja	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 31725                                  
 31726 00004FB8 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 31727                                  	; 31/03/2023
 31728                                  	;clc				;AN000; indicate no error
 31729 00004FBA C3                      	retn				;AN000;
 31730                                  	 ;31/03/2023
 31731                                  ;$P_0099Err:				;AN000;
 31732                                  ;	stc				;AN000; indicate error
 31733                                  ;	retn				;AN000;
 31734                                  
 31735                                  ;***********************************************************************
 31736                                  ; $P_Simple_String
 31737                                  ;
 31738                                  ; Function:  See value list for the simple string
 31739                                  ;	     and make result buffer.
 31740                                  ;
 31741                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31742                                  ;	     ES:BX -> CONTROL block
 31743                                  ;
 31744                                  ; Output:    None
 31745                                  ;
 31746                                  ; Use:	$P_Fill_Result, $P_String_Comp
 31747                                  ;
 31748                                  ; Vars: $P_RC(W)
 31749                                  ;***********************************************************************
 31750                                  
 31751                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31752                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31753                                  $P_Simple_String:
 31754 00004FBB 50                      	push	ax			;AN000;
 31755 00004FBC 53                      	push	bx			;AN000;
 31756 00004FBD 52                      	push	dx			;AN000;
 31757 00004FBE 57                      	push	di			;AN000;
 31758 00004FBF 268B7F06                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 31759                                  	;mov	di,[es:bx+6]		;AN000; di points to value list
 31760 00004FC3 268A05                  	mov	al,[es:di]		;AN000; get nval
 31761 00004FC6 08C0                    	or	al,al			;AN000; no value list ?
 31762 00004FC8 7502                    	jnz	short $P_Sim00		;AN000; then
 31763                                  	; 31/03/2023
 31764                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31765 00004FCA EB48                    	jmp	short $P_Sim_Exit	;AN000; and set result buffer
 31766                                  $P_Sim00:				;AN000;
 31767 00004FCC 3C03                    	cmp	al,$P_nval_String ; 3	;AN000; String choice list provided ?
 31768 00004FCE 753D                    	jne	short $P_Sim01		;AN000; if no, syntax error
 31769                                  
 31770 00004FD0 47                      	inc	di			;AN000;
 31771 00004FD1 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 31772 00004FD4 B409                    	mov	ah,$P_Len_Range ; 9	;AN000;
 31773 00004FD6 F6E4                    	mul	ah			;AN000;  Skip nrng field
 31774 00004FD8 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 31775 00004FD9 01C7                    	add	di,ax			;AN000; di points to nnval
 31776 00004FDB 268A05                  	mov	al,[es:di]		;AN000; get nnval
 31777 00004FDE B405                    	mov	ah,$P_Len_Value ; 5	;AN000;
 31778 00004FE0 F6E4                    	mul	ah			;AN000; Skip nnval field
 31779 00004FE2 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 31780 00004FE3 01C7                    	add	di,ax			;AN000; di points to nstrval
 31781 00004FE5 268A05                  	mov	al,[es:di]		;AN000; get nstrval
 31782 00004FE8 47                      	inc	di			;AC035; add '2' to
 31783 00004FE9 47                      	inc	di			;AC035;  DI reg
 31784                                  					;AN000; di points to 1st string in list
 31785                                  $P_Sim_Loop:				;AN000;
 31786 00004FEA 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 31787 00004FED E82F00                  	call	$P_String_Comp		;AN000; compare it with operand
 31788 00004FF0 7310                    	jnc	short $P_Sim_Found	;AN000; found on list ?
 31789                                  
 31790 00004FF2 83C703                  	add	di,$P_Len_String ; 3	;AN000; if no, point to next choice
 31791 00004FF5 FEC8                    	dec	al			;AN000; loop nstval times in AL
 31792 00004FF7 75F1                    	jnz	short $P_Sim_Loop	;AN000;
 31793                                  					;AN000; / Not found
 31794 00004FF9 2EC706[6599]0800        	mov	word [cs:$P_RC],$P_Not_In_Str
 31795                                  	;mov	[cs:$P_RC],8		;AC034;
 31796                                  	; 31/03/2023
 31797                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31798 00005000 EB12                    	jmp	short $P_Sim_Exit	;AN000;
 31799                                  $P_Sim_Found:				;AN000;
 31800 00005002 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 31801 00005006 B002                    	mov	al,$P_List_Idx	; 2	;AN000;
 31802 00005008 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 31803 0000500B EB0A                    	jmp	short $P_Sim_Exit0	;AN000;
 31804                                  $P_Sim01:				;AN000;
 31805 0000500D 2EC706[6599]0900        	mov	word [cs:$P_RC],$P_Syntax
 31806                                  	;mov	word [cs:$P_RC],9	;AC034;
 31807                                  $P_Sim_Exit:
 31808                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 31809                                  ;$P_Sim_Exit:				;AN000;
 31810                                  	;mov	al,$P_String ; 3	;AN000; Set type
 31811                                  	; 31/03/2023
 31812 00005014 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31813                                  $P_Sim_Exit0:				;AN000;
 31814 00005017 E888FC                  	call	$P_Fill_Result		;AN000;
 31815 0000501A 5F                      	pop	di			;AN000;
 31816 0000501B 5A                      	pop	dx			;AN000;
 31817 0000501C 5B                      	pop	bx			;AN000;
 31818 0000501D 58                      	pop	ax			;AN000;
 31819 0000501E C3                      	retn				;AN000;
 31820                                  
 31821                                  ;***********************************************************************
 31822                                  ; $P_String_Comp:
 31823                                  ;
 31824                                  ; Function:  Compare two string
 31825                                  ;
 31826                                  ; Input:     psdata_seg:SI -> 1st string
 31827                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 31828                                  ;	     ES:BX -> CONTROL block
 31829                                  ;
 31830                                  ; Output:    CY = 1 if not match
 31831                                  ;
 31832                                  ; Use:	$P_Chk_DBCS, $P_Do_CAPS_Char
 31833                                  ;
 31834                                  ; Vars: $P_KEYor_SW_Ptr(W), $P_Flags(R). $P_KEYorSW_Ptr
 31835                                  ;***********************************************************************
 31836                                  
 31837                                  	; 01/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31838                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31839                                  $P_String_Comp:
 31840 0000501F 50                      	push	ax			;AN000;
 31841 00005020 55                      	push	bp			;AN000;
 31842 00005021 52                      	push	dx			;AN000;
 31843 00005022 56                      	push	si			;AN000;
 31844 00005023 B202                    	mov	dl,$P_DOSTBL_Char ; 2	;AN000; use character case map table
 31845                                  $P_SCOM_Loop:				;AN000;
 31846 00005025 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 31847 00005028 E89704                  	call	$P_Chk_DBCS		;AN000; DBCS ?
 31848 0000502B 723C                    	jc	short $P_SCOM00		;AN000; yes,DBCS
 31849                                  
 31850 0000502D E811FE                  	call	$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 31851                                  	
 31852 00005030 2EF606[7199]08          	test	byte [cs:$P_Flags2],$P_Key_Cmp ; 8
 31853                                  					;AC034; keyword search ?
 31854 00005036 740D                    	jz	short $P_SCOM04		;AN000;
 31855                                  
 31856                                  	;cmp	al,'=' ; 3Dh
 31857 00005038 3C3D                    	cmp	al,$P_Keyword  ;'='	;AN000; "=" is delimiter
 31858 0000503A 751F                    	jne	short $P_SCOM03		;AN000;IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 31859                                  
 31860 0000503C 26807E0100              	cmp	byte [es:bp+1],$P_NULL	;AN021;   at end of keyword string in the control block THEN
 31861 00005041 7562                    	jne	short $P_SCOM_Differ	;AN021;
 31862                                  
 31863 00005043 EB13                    	jmp	short $P_SCOM05 	;AN000;   keyword found in synonym list
 31864                                  
 31865                                  $P_SCOM04:				;AN000;
 31866 00005045 2EF606[7199]10          	test	byte [cs:$P_Flags2],$P_SW_Cmp ; 10h 
 31867                                  					;AC034; switch search ?
 31868 0000504B 740E                    	jz	short $P_SCOM03		;AN000;
 31869                                  
 31870 0000504D 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; ":" is delimiter, at end of switch on command line
 31871 0000504F 750A                    	jne	short $P_SCOM03		;AN000; continue compares
 31872                                  
 31873 00005051 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN021; IF at end of switch on command AND
 31874 00005056 754D                    	jne	short $P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 31875                                  
 31876                                  $P_SCOM05:				;AN000;   found a match
 31877 00005058 46                      	inc	si			;AN000; si points to just after "=" or ":"
 31878 00005059 EB58                    	jmp	short $P_SCOM_Same	;AN000; exit
 31879                                  
 31880                                  $P_SCOM03:				;AN000;
 31881 0000505B 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 31882 0000505F 751D                    	jne	short $P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 31883                                  
 31884 00005061 08C0                    	or	al,al			;AN000; end of line
 31885 00005063 744E                    	jz	short $P_SCOM_Same	;AN000; if so, exit
 31886                                  
 31887 00005065 46                      	inc	si			;AN000; update operand pointer
 31888 00005066 45                      	inc	bp			;AN000;    and synonym pointer
 31889 00005067 EB13                    	jmp	short $P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 31890                                  
 31891                                  $P_SCOM00:				;AN000; Here al is DBCS leading byte
 31892 00005069 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 31893 0000506D 7536                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different
 31894                                  
 31895 0000506F 46                      	inc	si			;AN000; else, load next byte
 31896 00005070 2E8A04                  	mov	al,[cs:si]		;AN000; and
 31897 00005073 45                      	inc	bp			;AN000;
 31898 00005074 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 31899 00005078 752B                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different, too
 31900                                  
 31901 0000507A 46                      	inc	si			;AN000; else update operand pointer
 31902 0000507B 45                      	inc	bp			;AN000; 	and synonym pointer
 31903                                  $P_SCOM01:				;AN000;
 31904 0000507C EBA7                    	jmp	short $P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 31905                                  
 31906                                  $P_SCOM_Differ0:			;AN000;
 31907 0000507E 2EF606[7199]40          	test	byte [cs:$P_Flags2],$P_SW ; 40h 
 31908                                  	;test	byte [cs:$P_Flags2],40h	;AC034;(tm10)
 31909 00005084 740E                    	jz	short $P_not_applicable	;AN000;(tm10)
 31910                                  
 31911                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 31912                                  	;;test	word [es:bx+2],20h	;AN000;(tm10)
 31913                                  	; 03/04/2023
 31914 00005086 26F6470220              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary	
 31915 0000508B 7407                    	jz	short $P_not_applicable	;AN000;(tm10)
 31916                                  
 31917 0000508D 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000;(tm10)
 31918 00005092 741F                    	je	short $P_SCOM_Same	;AN025;(tm10)
 31919                                  
 31920                                  $P_not_applicable:			;AN000;(tm10)
 31921                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 31922                                  	;;test	word [es:bx],10h	;AN000; ignore colon option specified ?
 31923                                  	; 03/04/2023
 31924 00005094 26F60710                	test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 31925 00005098 740B                    	jz	short $P_SCOM_Differ	;AN000; if no, say different.
 31926                                  
 31927 0000509A 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; End up with ":" and
 31928 0000509C 750A                    	jne	short $P_SCOM02		;AN000;    subseqently
 31929                                  
 31930 0000509E 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN000;      NULL ?
 31931                                  	;jne	short $P_SCOM_Differ	;AN000; if no, say different
 31932                                  	;jmp	short $P_SCOM_Same	;AN000; else, say same
 31933                                  	; 01/04/2023
 31934 000050A3 740E                    	je	short $P_SCOM_Same
 31935                                  $P_SCOM_Differ:
 31936 000050A5 F9                      	stc
 31937 000050A6 EB10                    	jmp	short $P_SCOM_Exit
 31938                                  
 31939                                  $P_SCOM02:				;AN000;
 31940 000050A8 3C00                    	cmp	al,$P_NULL ; 0		;AN000; end up NULL and :
 31941 000050AA 75F9                    	jne	short $P_SCOM_Differ	;AN000;
 31942                                  
 31943                                  	;cmp	byte [es:bp],':'
 31944 000050AC 26807E003A              	cmp	byte [es:bp],$P_Colon	;AN000; if no, say different
 31945                                  	;je	short $p_SCOM_Same	;AN000; else, say same
 31946                                  	; 01/04/2023
 31947 000050B1 75F2                    	jne	short $P_SCOM_Differ
 31948                                  ;$P_SCOM_Differ: 			;AN000;
 31949                                  	;stc				;AN000; indicate not found
 31950                                  	;jmp	short $P_SCOM_Exit	;AN000;
 31951                                  
 31952                                  $P_SCOM_Same:				;AN000;
 31953 000050B3 2E8936[7499]            	mov	[cs:$P_KEYorSW_Ptr],si	;AC034; for later use by keyword or switch
 31954                                  	; 01/04/2023
 31955                                  	;clc
 31956                                  	; cf = 0			;AN000; indicate found
 31957                                  $P_SCOM_Exit:				;AN000;
 31958 000050B8 5E                      	pop	si			;AN000;
 31959 000050B9 5A                      	pop	dx			;AN000;
 31960 000050BA 5D                      	pop	bp			;AN000;
 31961 000050BB 58                      	pop	ax			;AN000;
 31962 000050BC C3                      	retn				;AN000;
 31963                                  
 31964                                  ;***********************************************************************
 31965                                  ; $P_Date_Format
 31966                                  ;
 31967                                  ; Function:  Convert a date string to DOS date format for int 21h
 31968                                  ;	     with format validation.
 31969                                  ;
 31970                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31971                                  ;	     ES:BX -> CONTROL block
 31972                                  ;
 31973                                  ; Output:    None
 31974                                  ;
 31975                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum
 31976                                  ;
 31977                                  ; Vars: $P_RC(W), $P_1st_Val(RW), $P_2nd_Val(RW), $P_3rd_Val(RW)
 31978                                  ;***********************************************************************
 31979                                  
 31980                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31981                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31982                                  $P_Date_Format:
 31983 000050BD 50                      	push	ax			;AN000;
 31984 000050BE 51                      	push	cx			;AN000;
 31985 000050BF 52                      	push	dx			;AN000;
 31986 000050C0 56                      	push	si			;AN000;
 31987 000050C1 53                      	push	bx			;AN000;
 31988 000050C2 56                      	push	si			;AN000;
 31989 000050C3 E89F00                  	call	$P_Set_CDI		;AN000; set country dependent information before process
 31990                                  	; 03/04/2023
 31991                                  	;pop	si			;AN000;
 31992                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 31993                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 31994                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 31995 000050C6 31F6                    	xor	si,si
 31996 000050C8 2E8936[239A]            	mov	[cs:$P_1st_Val],si ; 0	;AC034; set initial value
 31997 000050CD 2E8936[259A]            	mov	[cs:$P_2nd_Val],si ; 0	;AC034; set initial value
 31998                                  	;mov	[cs:$P_3rd_Val],si ; 0	;AC034; set initial value
 31999 000050D2 5E                      	pop	si
 32000 000050D3 E8A900                  	call	$P_Get_DecNum		;AN000; get 1st number
 32001 000050D6 7218                    	jc	short $P_DateF_Err0	;AN000;-----------------------+
 32002 000050D8 2EA3[239A]              	mov	[cs:$P_1st_Val],ax	;AC034;			      |
 32003 000050DC 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 32004 000050DE 741A                    	jz	short $P_DateF_YMD	;AN000; 		      |
 32005 000050E0 E89C00                  	call	$P_Get_DecNum		;AN000; get 2nd number	      |
 32006 000050E3 726D                    	jc	short $P_DateF_Error	;AN000; 		      |
 32007 000050E5 2EA3[259A]              	mov	[cs:$P_2nd_Val],ax	;AC034;			      |
 32008 000050E9 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 32009 000050EB 740D                    	jz	short $P_DateF_YMD	;AN000; 		      |
 32010 000050ED E88F00                  	call	$P_Get_DecNum		;AN000; get 3rd number	      |
 32011                                  $P_DateF_Err0:				;AN000; Bridge	  <-----------+
 32012 000050F0 7260                    	jc	short $P_DateF_Error	;AN000;
 32013 000050F2 2EA3[279A]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 32014 000050F6 08DB                    	or	bl,bl			;AN000; end of line ?
 32015 000050F8 7558                    	jnz	short $P_DateF_Error	;AN000;
 32016                                  $P_DateF_YMD:				;AN000;
 32017 000050FA 2E8B1E[019A]            	mov	bx,[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]
 32018                                  	;mov	bx,[cs:$P_Country_Info]	;AC034; get date format
 32019 000050FF 83FB02                  	cmp	bx,$P_Date_YMD ; 2	;AN000;
 32020 00005102 7422                    	je	short $P_DateF00	;AN000;
 32021 00005104 2EA1[239A]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 32022 00005108 08E4                    	or	ah,ah			;AN000;
 32023 0000510A 7546                    	jnz	short $P_DateF_Error	;AN000;
 32024 0000510C 88C1                    	mov	cl,al			;AN000; set month
 32025 0000510E 2EA1[259A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32026 00005112 08E4                    	or	ah,ah			;AN000; if overflow, error.
 32027 00005114 753C                    	jnz	short $P_DateF_Error	;AN000;
 32028 00005116 88C5                    	mov	ch,al			;AN000; set date
 32029 00005118 2E8B16[279A]            	mov	dx,[cs:$P_3rd_Val]	;AC034; set year
 32030 0000511D 83FB01                  	cmp	bx,$P_Date_DMY ; 1	;AN000; from here format = MDY
 32031 00005120 7502                    	jne	short $P_DateF01	;AN000; if it is DMY
 32032 00005122 86E9                    	xchg	ch,cl			;AN000;  then swap M <-> D
 32033                                  $P_DateF01:				;AN000;
 32034 00005124 EB19                    	jmp	short $P_DateF02	;AN000;
 32035                                  $P_DateF00:				;AN000; / here format = YMD
 32036 00005126 2E8B16[239A]            	mov	dx,[cs:$P_1st_Val]	;AC034; set year
 32037 0000512B 2EA1[259A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32038 0000512F 08E4                    	or	ah,ah			;AN000; if overflow, error
 32039 00005131 751F                    	jnz	short $P_DateF_Error	;AN000;
 32040                                  
 32041 00005133 88C1                    	mov	cl,al			;AN000; set month
 32042 00005135 2EA1[279A]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 32043 00005139 08E4                    	or	ah,ah			;AN000; if overflow, error
 32044 0000513B 7515                    	jnz	short $P_DateF_Error	;AN000;
 32045 0000513D 88C5                    	mov	ch,al			;AN000; set date
 32046                                  $P_DateF02:				;AN000;
 32047 0000513F 83FA64                  	cmp	dx,100			;AN000; year is less that 100 ?
 32048 00005142 7304                    	jae	short $P_DateF03	;AN000;
 32049 00005144 81C26C07                	add	dx,1900 		;AN000; set year 19xx
 32050                                  $P_DateF03:				;AN000;
 32051 00005148 5B                      	pop	bx			;AN000; recover CONTROL block
 32052 00005149 5E                      	pop	si			;AN000; recover string pointer
 32053                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32054                                  	;mov	al,$P_Date_F ; 7	;AN000;   result
 32055                                  	; 03/04/2023
 32056 0000514A B807FF                  	mov	ax,($P_No_Tag<<8)+$P_Date_F
 32057 0000514D E852FB                  	call	$P_Fill_Result		;AN000;        buffer
 32058 00005150 EB0F                    	jmp	short $P_Date_Format_Exit
 32059                                  					;AN000;	to Date
 32060                                  $P_DateF_Error: 			;AN000;
 32061 00005152 5B                      	pop	bx			;AN000; recover CONTROL block
 32062 00005153 5E                      	pop	si			;AN000; recover string pointer
 32063                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32064                                  	;mov	al,$P_String ; 3	;AN000;   result
 32065                                  	; 03/04/2023
 32066 00005154 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 32067 00005157 E848FB                  	call	$P_Fill_Result		;AN000; 	buffer
 32068                                  					;AN000; to string
 32069 0000515A 2EC706[6599]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 32070                                  					;AC034; indicate syntax error
 32071                                  $P_Date_Format_Exit:			;AN000;
 32072 00005161 5A                      	pop	dx			;AN000;
 32073 00005162 59                      	pop	cx			;AN000;
 32074 00005163 58                      	pop	ax			;AN000;
 32075 00005164 C3                      	retn				;AN000;
 32076                                  
 32077                                  ;***********************************************************************
 32078                                  ; $P_Set_CDI:
 32079                                  ;
 32080                                  ; Function: Read CDI from DOS if it has not been read yet
 32081                                  ;
 32082                                  ; Input:    None
 32083                                  ;
 32084                                  ; Output:   psdata_seg:SI -> CDI
 32085                                  ;
 32086                                  ; Use:	INT 21h w/ AH = 38h
 32087                                  ;***********************************************************************
 32088                                  
 32089                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32090                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32091                                  $P_Set_CDI:
 32092                                  	; 18/04/2023
 32093 00005165 8D36[019A]              	lea	si,$P_Country_Info	;AC034;
 32094                                  	;cmp	word [cs:si+$P_CDI.$P_CDI_DateF],-1 ; $P_NeedToBeRead
 32095 00005169 2E833CFF                	cmp	word [cs:si],-1 ; $P_NeedToBeRead ; 0FFFFh
 32096                                  					;AN000; already read ?
 32097                                  	;je	short $P_Read_CDI	;AN000;
 32098                                  	;jmp	short $P_Set_CDI_Exit	;AN000; then do nothing
 32099                                  	; 03/04/2023
 32100 0000516D 750F                    	jne	short $P_Set_CDI_Exit
 32101                                  $P_Read_CDI:				;AN000; else read CDI thru DOS
 32102 0000516F 1E                      	push	ds			;AN000;
 32103 00005170 52                      	push	dx			;AN000;
 32104 00005171 50                      	push	ax			;AN000;
 32105 00005172 0E                      	push	cs			;AC023;
 32106 00005173 1F                      	pop	ds			;AN000; set segment register
 32107                                  	;mov	ax,3800h
 32108 00005174 B80038                  	mov	ax,$P_DOS_Get_CDI	;AN000; get country information
 32109 00005177 89F2                    	mov	dx,si			;AN000; set offset of CDI in local data area
 32110 00005179 CD21                    	int	21h			;AN000;
 32111 0000517B 58                      	pop	ax			;AN000;
 32112 0000517C 5A                      	pop	dx			;AN000;
 32113 0000517D 1F                      	pop	ds			;AN000;
 32114                                  $P_Set_CDI_Exit:			;AN000;
 32115 0000517E C3                      	retn				;AN000;
 32116                                  
 32117                                  ;***********************************************************************
 32118                                  ; $P_Get_DecNum:
 32119                                  ;
 32120                                  ; Function:  Read a chcrater code from psdata_seg:SI until specified delimiter
 32121                                  ;	     or NULL encountered. And make a decimal number.
 32122                                  ;
 32123                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32124                                  ;
 32125                                  ; Output:    BL = delimiter code or NULL
 32126                                  ;	     AX = Decimal number
 32127                                  ;	     SI advanced to the next number
 32128                                  ;	     CY = 1 : Syntax error, AL = Latest examineed number
 32129                                  ;
 32130                                  ; Use:	$P_0099
 32131                                  ;***********************************************************************
 32132                                  
 32133                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32134                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32135                                  $P_Get_DecNum:
 32136 0000517F 51                      	push	cx			;AN000;
 32137 00005180 52                      	push	dx			;AN000;
 32138 00005181 31C9                    	xor	cx,cx			;AN000; cx will have final value
 32139                                  $P_GetNum_Loop: 			;AN000;
 32140 00005183 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 32141 00005186 08C0                    	or	al,al			;AN000; end of line ?
 32142 00005188 7438                    	jz	short $P_GetNum00	;AN000; if yes, exit
 32143 0000518A 2E803E[009A]00          	cmp	byte [cs:$P_Got_Time],0 ;AC034; is this numeric in a time field? ;AC023
 32144 00005190 740B                    	je	short $P_Do_Date_Delims	;AN000; no, go check out Date delimiters ;AC023
 32145                                  
 32146                                  ; Determine which delimiter(s) to check for. Colon & period  or period only
 32147                                  	;cmp	bl,$P_colon_period
 32148 00005192 80FB01                  	cmp	bl,1 ; $P_colon_period	;AN032; ;Time
 32149 00005195 750E                    	jne	short $P_Do_Time_Delim1	;AN032; ;only check for period
 32150                                  
 32151 00005197 3C3A                    	cmp	al,$P_Colon ; ':'	;AN032; ;Is this a valid delimiter ?
 32152 00005199 742B                    	je	short $P_GetNum01	;AN032; ;yes, exit
 32153                                  
 32154                                  	; 03/04/2023
 32155 0000519B EB08                    	jmp	short $P_Do_Time_Delim1
 32156                                  ;$P_Do_Time_Delim1:			;AN000;
 32157                                  	;cmp	al,$P_Period ; '.'	;;AC032;;AC023;Is this a valid delimiter ?
 32158                                  	;je	short $P_GetNum01	;AC023; yes, exit
 32159                                  	;
 32160                                  	;jmp	short $P_Neither_Delims ;AN023;
 32161                                  
 32162                                  $P_Do_Date_Delims:			;AN000;
 32163                                  ;Regardless of the date delimiter character specified in the country
 32164                                  ;dependent information, check for the presence of any one of these
 32165                                  ;three field delimiters: "-", "/", or ".".
 32166 0000519D 3C2D                    	cmp	al,$P_Minus ;'-'	;AN020;is this a date delimiter character?
 32167 0000519F 7425                    	je	short $P_GetNum01	;AN020;if yes, exit
 32168                                  
 32169 000051A1 3C2F                    	cmp	al,$P_Slash ; '/'	;AN020;is this a date delimiter character?
 32170 000051A3 7421                    	je	short $P_GetNum01	;AN020;if yes, exit
 32171                                  
 32172                                  $P_Do_Time_Delim1:  ; 03/04/2023
 32173 000051A5 3C2E                    	cmp	al,$P_Period ; '.'	;AN020;is this a date delimiter character?
 32174 000051A7 741D                    	je	short $P_GetNum01	;AN000; if yes, exit
 32175                                  
 32176                                  $P_Neither_Delims:			;AN023;
 32177 000051A9 E804FE                  	call	$P_0099 		;AN000; convert it to binary
 32178 000051AC 721C                    	jc	short $P_GetNum_Exit	;AN000; if error exit
 32179                                  
 32180 000051AE B400                    	mov	ah,0			;AN000;
 32181 000051B0 91                      	xchg	ax,cx			;AN000;
 32182 000051B1 BA0A00                  	mov	dx,10			;AN000;
 32183 000051B4 F7E2                    	mul	dx			;AN000; ax = ax * 10
 32184 000051B6 09D2                    	or	dx,dx			;AN000; overflow
 32185 000051B8 750F                    	jnz	short $P_GetNum02	;AN000; then exit
 32186                                  
 32187 000051BA 01C8                    	add	ax,cx			;AN000;
 32188 000051BC 720C                    	jc	short $P_GetNum_Exit	;AN000;
 32189                                  
 32190 000051BE 91                      	xchg	ax,cx			;AN000;
 32191 000051BF 46                      	inc	si			;AN000;
 32192 000051C0 EBC1                    	jmp	short $P_GetNum_Loop	;AN000;
 32193                                  
 32194                                  $P_GetNum00:				;AN000;
 32195 000051C2 88C3                    	mov	bl,al			;AN000; set bl to NULL
 32196                                  	;03/04/2023
 32197                                  	; cf=0
 32198                                  	;clc				;AN000; indicate no error
 32199 000051C4 EB04                    	jmp	short $P_GetNum_Exit	;AN000;
 32200                                  
 32201                                  $P_GetNum01:				;AN000;
 32202 000051C6 46                      	inc	si			;AN000; si points to next number
 32203                                  	;03/04/2023
 32204                                  	; cf=0
 32205                                  	;clc				;AN000; indicate no error
 32206 000051C7 EB01                    	jmp	short $P_GetNum_Exit	;AN000;
 32207                                  
 32208                                  $P_GetNum02:				;AN000;
 32209 000051C9 F9                      	stc				;AN000; indicate error
 32210                                  $P_GetNum_Exit: 			;AN000;
 32211 000051CA 89C8                    	mov	ax,cx			;AN000;return value
 32212 000051CC 5A                      	pop	dx			;AN000;
 32213 000051CD 59                      	pop	cx			;AN000;
 32214 000051CE C3                      	retn				;AN000;
 32215                                  
 32216                                  ;***********************************************************************
 32217                                  ; $P_Time_Format
 32218                                  ;
 32219                                  ; Function:  Convert a time string to DOS time format for int 21h
 32220                                  ;	     with format validation.
 32221                                  ;
 32222                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32223                                  ;	     ES:BX -> CONTROL block
 32224                                  ;
 32225                                  ; Output:    None
 32226                                  ;
 32227                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum, $P_Time_2412
 32228                                  ;
 32229                                  ; Vars: $P_RC(W), $P_Flags(R), $P_1st_Val(RW), $P_2nd_Val(RW)
 32230                                  ;	$P_3rd_Val(RW), $P_4th_Val(RW)
 32231                                  ;***********************************************************************
 32232                                  
 32233                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32234                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32235                                  $P_Time_Format:				;AN000;
 32236 000051CF 50                      	push	ax			;AN000;
 32237 000051D0 51                      	push	cx			;AN000;
 32238 000051D1 52                      	push	dx			;AN000;
 32239 000051D2 56                      	push	si			;AN000;
 32240 000051D3 53                      	push	bx			;AN000;
 32241 000051D4 56                      	push	si			;AN000;
 32242 000051D5 E88DFF                  	call	$P_Set_CDI		;AN000; Set country independent
 32243                                  					; information before process
 32244                                  	;test	byte [cs:si+11h], 1
 32245 000051D8 2EF6441001              	test	byte [cs:si+$P_CDI.$P_CDI_TimeF],1 
 32246                                  					;AN000; 24 hour system
 32247 000051DD 5E                      	pop	si			;AN000;
 32248 000051DE 7503                    	jnz	short $P_TimeF00	;AN000; if no, means 12 hour system
 32249 000051E0 E8F800                  	call	$P_Time_2412		;AN000; this routine handle "am" "pm"
 32250                                  $P_TimeF00:				;AN000;
 32251                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 32252                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 32253                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 32254                                  	;mov	word [cs:$P_4th_Val],0	;AC034; set initial value
 32255                                  	;mov	byte [cs:$P_Got_Time],1	;AN023;AC034;; use time delimiter
 32256                                  	; 03/04/2023
 32257 000051E3 31DB                    	xor	bx,bx
 32258 000051E5 2E891E[239A]            	mov	[cs:$P_1st_Val],bx ; 0
 32259 000051EA 2E891E[259A]            	mov	[cs:$P_2nd_Val],bx ; 0
 32260 000051EF 2E891E[279A]            	mov	[cs:$P_3rd_Val],bx ; 0
 32261 000051F4 2E891E[299A]            	mov	[cs:$P_4th_Val],bx ; 0
 32262                                  	;inc	bl
 32263                                  	;mov	[cs:$P_Got_Time],bl ; 1
 32264                                  
 32265                                  	;mov	bl,$P_colon_period
 32266                                  	;mov	bl,1 ; $P_colon_period	;AN032; flag, indicates use of
 32267                                  					; delimiters between hours,
 32268                                  					;  minutes,seconds
 32269                                  	; 03/04/2023 - Retro DOS v4.0 COMMAND.COM
 32270 000051F9 FEC3                    	inc	bl ; bl = 1
 32271 000051FB 2E881E[009A]            	mov	[cs:$P_Got_Time],bl ; 1
 32272                                  	;
 32273 00005200 E87CFF                  	call	$P_Get_DecNum		;AN000; get 1st number
 32274 00005203 725D                    	jc	short $P_TimeF_Err0	;AN000;
 32275 00005205 2EA3[239A]              	mov	[cs:$P_1st_Val],ax	;AC034;
 32276 00005209 08DB                    	or	bl,bl			;AN000; end of line ?
 32277 0000520B 745F                    	jz	short $P_TimeF_Rlt	;AN000;
 32278 0000520D E86FFF                  	call	$P_Get_DecNum		;AN000; get 2nd number
 32279 00005210 7250                    	jc	short $P_TimeF_Err0	;AC038; if OK
 32280 00005212 2EA3[259A]              	mov	[cs:$P_2nd_Val],ax	;AC034;
 32281 00005216 08DB                    	or	bl,bl			;AN000; end of line ?
 32282 00005218 7452                    	jz	short $P_TimeF_Rlt	;AN000;
 32283 0000521A B302                    	mov	bl,2 ; $P_period_only	;AN032; flag, which to decimal separator
 32284 0000521C E860FF                  	call	$P_Get_DecNum		;AN000; get 3rd number
 32285 0000521F 7241                    	jc	short $P_TimeF_Err0	;AC039; if problem, bridge to error
 32286 00005221 2EA3[279A]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 32287 00005225 08DB                    	or	bl,bl			;AN000; end of line ?
 32288 00005227 7536                    	jnz	short $P_Time_4		;AN039; NOT END OF LINE,
 32289                                  					;AN039;   GO TO 4TH NUMBER
 32290                                  	;test	byte [cs:$P_Flags1],$P_Time_Again ; 2
 32291 00005229 2EF606[7099]02          	test	byte [cs:$P_Flags1],2 	;AN039; HAS TIME PARSE
 32292                                  					;AN039;    BEEN REPEATED?
 32293 0000522F 753B                    	jnz	short $P_TimeF_Rlt	;AN039; yes, this is really
 32294                                  					;AN039;   the end of line
 32295                                  					;AN039; no, time has not been repeated
 32296 00005231 2E8B36[6799]            	mov	si,[cs:$P_SI_Save]	;AN039; get where parser quit
 32297                                  					;AN039;   in command line
 32298 00005236 807CFF2C                	cmp	byte [si-1],$P_Comma ; ','
 32299                                  					;AN039; look at delimiter
 32300                                  					;AN039;   from command line
 32301 0000523A 7530                    	jne	short $P_TimeF_Rlt	;AN039; was not a comma, this is
 32302                                  					;AN039;  really end of line
 32303                                  					;AN039; is comma before hundredths,
 32304                                  					;AN039;   redo TIME
 32305 0000523C C644FF2E                	mov	byte [si-1],$P_Period ; '.' 
 32306                                  					;AN039; change that ambiguous
 32307                                  					;AN039;    comma to a decimal point
 32308                                  					;AN039;     parse can understand
 32309 00005240 2EC706[7099]0000        	mov	word [cs:$P_Flags],0	;AN039; Clear all internal flags
 32310                                  	;or	byte [cs:$P_Flags1],$P_Time_Again
 32311 00005247 2E800E[7099]02          	or	byte [cs:$P_Flags1],2	;AN039; indicate TIME
 32312                                  					;AN039; is being repeated
 32313 0000524D 2E8B0E[FA99]            	mov	cx,[cs:$P_ORIG_ORD]	;AN039; ORIGINAL ORDINAL FROM CX
 32314 00005252 2E8B26[FC99]            	mov	sp,[cs:$P_ORIG_STACK]	;AN039; ORIGINAL VALUE
 32315                                  					;AN039;   OF STACK FROM SP
 32316 00005257 2E8B36[FE99]            	mov	si,[cs:$P_ORIG_SI]	;AN039; ORIGINAL START
 32317                                  					;AN039;   PARSE POINTER FROM SI
 32318 0000525C E913F8                  	jmp	$P_Redo_Time		;AN039; go try TIME again
 32319                                  $P_Time_4:				;AN039; READY FOR 4TH (HUNDREDTHS) NUMBER
 32320 0000525F E81DFF                  	call	$P_Get_DecNum		;AN000; get 4th number
 32321                                  $P_TimeF_Err0:				;AN000; Bridge
 32322 00005262 725E                    	jc	short $P_TimeF_Error	;AN000;
 32323                                  	;
 32324 00005264 2EA3[299A]              	mov	[cs:$P_4th_Val],ax	;AC034;
 32325 00005268 08DB                    	or	bl,bl			;AN000; After hundredth, no data allowed
 32326 0000526A 7556                    	jnz	short $P_TimeF_Error	;AN000; if some, then error
 32327                                  $P_TimeF_Rlt:				;AN000;
 32328 0000526C 2EA1[239A]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 32329 00005270 08E4                    	or	ah,ah			;AN000; if overflow then error
 32330 00005272 754E                    	jnz	short $P_TimeF_Err	;AN000;
 32331                                  	;test	byte [cs:$P_Flags1],$P_Time12am ; 1
 32332 00005274 2EF606[7099]01          	test	byte [cs:$P_Flags1],1	;AN038;if "am" specified
 32333 0000527A 7408                    	jz	short $P_Time_notAM	;AN038;skip if no "AM" specified
 32334                                  					;since "AM" was specified,
 32335 0000527C 3C0C                    	cmp	al,12			;AN038: if hour specified as later than noon
 32336 0000527E 7742                    	ja	short $P_TimeF_Err	;AN038; error if "AM" on more than noon
 32337 00005280 7502                    	jne	short $P_Time_notAM	;AN038; for noon exactly,
 32338 00005282 30C0                    	xor	al,al			;AN038; set hour = zero
 32339                                  $P_Time_notAM:				;AN038;
 32340                                  	;test	byte [cs:$P_Flags2],$P_Time12
 32341 00005284 2EF606[7199]04          	test	byte [cs:$P_Flags2],4	;AC034; if 12 hour system and pm is specified
 32342 0000528A 740C                    	jz	short $P_TimeSkip00	;AN000; then
 32343 0000528C 3C0C                    	cmp	al,12			;AN038; if 12:00 o'clock already
 32344 0000528E 7408                    	je	short $P_TimeSkip00	;AN038; it is PM already
 32345 00005290 040C                    	add	al,12			;AN000; add 12 hours to make it afternoon
 32346 00005292 722E                    	jc	short $P_TimeF_Err	;AN000; if overflow then error
 32347 00005294 3C18                    	cmp	al,24			;AN038; after adding 12, now cannot be >24
 32348 00005296 772A                    	ja	short $P_TimeF_Err	;AN038; if too big, error
 32349                                  $P_TimeSkip00:				;AN000;
 32350 00005298 88C2                    	mov	dl,al			;AN000; set hour
 32351 0000529A 2EA1[259A]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 32352 0000529E 08E4                    	or	ah,ah			;AN000; if overflow then error
 32353 000052A0 7520                    	jnz	short $P_TimeF_Err	;AN000;
 32354 000052A2 88C6                    	mov	dh,al			;AN000; set minute
 32355 000052A4 2EA1[279A]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 32356 000052A8 08E4                    	or	ah,ah			;AN000; if overflow then error
 32357 000052AA 7516                    	jnz	short $P_TimeF_Err	;AN000;
 32358 000052AC 88C1                    	mov	cl,al			;AN000; set second
 32359 000052AE 2EA1[299A]              	mov	ax,[cs:$P_4th_Val]	;AC034;
 32360 000052B2 08E4                    	or	ah,ah			;AN000; if overflow then error
 32361 000052B4 750C                    	jnz	short $P_TimeF_Err	;AN000;
 32362 000052B6 88C5                    	mov	ch,al			;AN000; set hundredth
 32363 000052B8 5B                      	pop	bx			;AN000; recover CONTROL block
 32364 000052B9 5E                      	pop	si			;AN000; recover string pointer
 32365                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32366                                  	;mov	al,$P_Time_F ; 8 	;AN000;   result
 32367                                  	; 03/04/2023
 32368 000052BA B808FF                  	mov	ax,($P_No_Tag<<8)+$P_Time_F
 32369 000052BD E8E2F9                  	call	$P_Fill_Result		;AN000;        buffer
 32370 000052C0 EB0F                    	jmp	short $P_Time_Format_Exit
 32371                                  					;AN000; to time
 32372                                  $P_TimeF_Error: 			;AN000;
 32373                                  $P_TimeF_Err:				;AN000;
 32374 000052C2 5B                      	pop	bx			;AN000; recover CONTROL block
 32375 000052C3 5E                      	pop	si			;AN000; recover string pointer
 32376                                  	;mov	ah,$P_No_Tag		;AN000; set
 32377                                  	;mov	al,$P_String		;AN000;     result
 32378                                  	; 03/04/2023
 32379 000052C4 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 32380 000052C7 E8D8F9                  	call	$P_Fill_Result		;AN000; 	  buffer
 32381                                  					;AN000; to string
 32382 000052CA 2EC706[6599]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9	
 32383                                  					;AC034; return syntax error
 32384                                  $P_Time_Format_Exit:			;AN000;
 32385 000052D1 2EC606[009A]00          	mov	byte [cs:$P_Got_Time],0	;AN023;AC034; finished with this time field
 32386 000052D7 5A                      	pop	dx			;AN000;
 32387 000052D8 59                      	pop	cx			;AN000;
 32388 000052D9 58                      	pop	ax			;AN000;
 32389 000052DA C3                      	retn
 32390                                  
 32391                                  ;***********************************************************************
 32392                                  ; $P_Time_2412:
 32393                                  ;
 32394                                  ; Function:  Remove "a", "p", "am", or "pm" from the end of stinrg
 32395                                  ;
 32396                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32397                                  ;
 32398                                  ; Output:    Set $P_Time12 flag when the string is terminated by "p"
 32399                                  ;	     or "pm"
 32400                                  ;
 32401                                  ; Vars:  $P_Flags(W)
 32402                                  ;***********************************************************************
 32403                                  
 32404                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32405                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32406                                  $P_Time_2412:				;AN000;
 32407 000052DB 50                      	push	ax			;AN000;
 32408 000052DC 56                      	push	si			;AN000;
 32409                                  $P_T12_Loop:				;AN000;
 32410 000052DD 2E8A04                  	mov	al,[cs:si]		;AN000; Move
 32411 000052E0 46                      	inc	si			;AN000;     si
 32412 000052E1 08C0                    	or	al,al			;AN000;       to
 32413 000052E3 75F8                    	jnz	short $P_T12_Loop	;AN000; 	end of string
 32414                                  
 32415 000052E5 2E8A44FE                	mov	al,[cs:si-2]		;AN000; get char just before NULL
 32416                                  	;or	al,20h
 32417 000052E9 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 32418 000052EB 3C70                    	cmp	al,"p"                  ;AN000; only "p" of "pm" ?
 32419 000052ED 7425                    	je	short $P_T1200		;AN000;
 32420                                  
 32421 000052EF 3C61                    	cmp	al,"a"                  ;AN000; only "a" of "am" ?
 32422 000052F1 7413                    	je	short $P_T1201		;AN000;
 32423                                  
 32424 000052F3 3C6D                    	cmp	al,"m"                  ;AN000; "m" of "am" or "pm"
 32425 000052F5 751A                    	jne	short $P_T12_Exit	;AN000;
 32426                                  
 32427 000052F7 4E                      	dec	si			;AN000;
 32428 000052F8 2E8A44FE                	mov	al,[cs:si-2]		;AN000;
 32429                                  	;or	al,20h
 32430 000052FC 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 32431 000052FE 3C70                    	cmp	al,"p"                  ;AN000; "p" of "pm" ?
 32432 00005300 7412                    	je	short $P_T1200		;AN000;
 32433                                  
 32434 00005302 3C61                    	cmp	al,"a"                  ;AN000; "a" of "am" ?
 32435                                  	;je	short $P_T1201		;AN000; go process "a"
 32436                                  	;jmp	short $P_T12_Exit	;AN000; no special chars found
 32437                                  	; 05/04/2023
 32438 00005304 750B                    	jne	short $P_T12_Exit
 32439                                  
 32440                                  ;$P_T1200:				;AN000; "P" found
 32441                                  	;;or	byte [cs:$P_Flags2],$P_Time12
 32442                                  	;or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 32443                                  	;jmp	short $P_Tclr_chr	;AN038; go clear the special char
 32444                                  
 32445                                  $P_T1201:				;AN000; "A" found
 32446                                  	;or	byte [cs:$P_Flags1],$P_Time12AM
 32447 00005306 2E800E[7099]01          	or	byte [cs:$P_Flags1],1	;AN038; flag "AM" found
 32448                                  $P_Tclr_chr:				;AN038;
 32449 0000530C 2EC644FE00              	mov	byte [cs:si-2],$P_NULL	;AN000; null out special char
 32450                                  $P_T12_Exit:				;AN000;
 32451 00005311 5E                      	pop	si			;AN000;
 32452 00005312 58                      	pop	ax			;AN000;
 32453 00005313 C3                      	retn				;AN000;
 32454                                  
 32455                                  	; 05/04/2023
 32456                                  $P_T1200:				;AN000; "P" found
 32457                                  	;or	byte [cs:$P_Flags2],$P_Time12
 32458 00005314 2E800E[7199]04          	or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 32459 0000531A EBF0                    	jmp	short $P_Tclr_chr	;AN038; go clear the special char
 32460                                  
 32461                                  ;***********************************************************************
 32462                                  ; $P_File_Format;
 32463                                  ;
 32464                                  ; Function:  Check if the input string is valid file spec format.
 32465                                  ;	     And set the result buffer.
 32466                                  ;
 32467                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32468                                  ;	     ES:BX -> CONTROL block
 32469                                  ;
 32470                                  ; Output:    None
 32471                                  ;
 32472                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS, $P_FileSp_Chk
 32473                                  ;
 32474                                  ; Vars: $P_RC(W), $P_SI_Save(W), $P_Terminator(W), $P_SaveSI_Cmpx(R)
 32475                                  ;	$P_SaveSI_Cmpx(R)
 32476                                  ;***********************************************************************
 32477                                  
 32478                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32479                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4DF0h
 32480                                  
 32481                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32482                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:55B4h
 32483                                  $P_File_Format:
 32484 0000531C 50                      	push	ax			;AN000;
 32485 0000531D 57                      	push	di			;AN000;
 32486 0000531E 56                      	push	si			;AN000;
 32487 0000531F 2E8B3E[7299]            	mov	di,[cs:$P_SaveSI_Cmpx]	;AC034; get user buffer address
 32488 00005324 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 32489 00005327 08C0                    	or	al,al			;AN000; end of line ?
 32490 00005329 7413                    	je	short $P_FileF_Err	;AN000; if yes, error exit
 32491 0000532B E85D00                  	call	$P_FileSp_Chk		;AN000; else, check if file special character
 32492 0000532E 7523                    	jne	short $P_FileF03	;AN000; if yes,
 32493 00005330 2EC606[3E9A]01          	mov	byte [cs:$P_err_flag],$P_error_filespec ; 1
 32494                                  					;AN033;AC034;; set error flag- bad char.
 32495 00005336 5E                      	pop	si			;AN033;
 32496 00005337 2EC60400                	mov	byte [cs:si],$P_NULL	;AN033;
 32497 0000533B 5F                      	pop	di			;AN033;
 32498 0000533C EB3E                    	jmp	short $P_FileF02	;AN033;
 32499                                  $P_FileF_Err:				;AN000;
 32500 0000533E 5E                      	pop	si			;AN000;
 32501 0000533F 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000;
 32502 00005343 5F                      	pop	di			;AN000;
 32503                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 32504                                  	;test	word [es:bx],1		;AN000; is it optional ?
 32505 00005344 26F60701                	test	byte [es:bx],$P_Optional ; 1
 32506 00005348 7532                    	jnz	short $P_FileF02	;AN000;
 32507 0000534A 2EC706[6599]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 32508                                  	;mov	word [cs:$P_RC],2	;AC034; 3/17/87
 32509 00005351 EB29                    	jmp	short $P_FileF02	;AN000;
 32510                                  $P_FileF03:				;AN000;
 32511 00005353 58                      	pop	ax			;AN000; discard save si
 32512 00005354 56                      	push	si			;AN000; save new si
 32513                                  $P_FileF_Loop1: 			;AN000;
 32514 00005355 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 32515 00005358 08C0                    	or	al,al			;AN000; end of line ?
 32516 0000535A 741E                    	jz	short $P_FileF_RLT	;AN000;
 32517 0000535C E82C00                  	call	$P_FileSp_Chk		;AN000; File special character ?
 32518 0000535F 740B                    	jz	short $P_FileF00	;AN000;
 32519 00005361 E85E01                  	call	$P_Chk_DBCS		;AN000; no, then DBCS ?
 32520 00005364 7302                    	jnc	short $P_FileF01	;AN000;
 32521 00005366 47                      	inc	di			;AN000; if yes, skip next byte
 32522 00005367 46                      	inc	si			;AN000;
 32523                                  $P_FileF01:				;AN000;
 32524 00005368 47                      	inc	di			;AN000;
 32525 00005369 46                      	inc	si			;AN000;
 32526 0000536A EBE9                    	jmp	short $P_FileF_Loop1	;AN000;
 32527                                  $P_FileF00:				;AN000;
 32528 0000536C 2EA2[6B99]              	mov	[cs:$P_Terminator],al	;AC034;
 32529 00005370 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; update end of string
 32530 00005374 47                      	inc	di			;AN000;
 32531 00005375 2E893E[6799]            	mov	[cs:$P_SI_Save],di	;AC034; update next pointer in command line
 32532                                  $P_FileF_RLT:				;AN000;
 32533 0000537A 5E                      	pop	si			;AN000;
 32534 0000537B 5F                      	pop	di			;AN000;
 32535                                  $P_FileF02:				;AN000;
 32536 0000537C 58                      	pop	ax			;AN000; (tm14)
 32537                                  	;;test	ax,200h
 32538                                  	;test	ax,$P_File_Spc		;AN000; (tm14)
 32539                                  	; 05/04/2023
 32540 0000537D F6C402                  	test	ah,($P_File_Spc>>8)
 32541 00005380 7408                    	jz	short $P_Drv_Only_Exit	;AN000; (tm14)
 32542 00005382 50                      	push	ax			;AN000; (tm14)
 32543                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 32544                                  	;mov	al,$P_File_Spec ; 5 	;AN000;    result
 32545                                  	; 05/04/2023
 32546 00005383 B805FF                  	mov	ax,($P_No_Tag<<8)+$P_File_Spec
 32547 00005386 E819F9                  	call	$P_Fill_Result		;AN000; 	buffer to file spec
 32548 00005389 58                      	pop	ax			;AN000;
 32549                                  $P_Drv_Only_Exit:			;AN000; (tm14)
 32550 0000538A C3                      	retn				;AN000;
 32551                                  
 32552                                  ;***********************************************************************
 32553                                  ; $P_FileSp_Chk
 32554                                  ;
 32555                                  ; Function:  Check if the input byte is one of file special characters
 32556                                  ;
 32557                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32558                                  ;	     AL = character code to be examineed
 32559                                  ;
 32560                                  ; Output:    ZF = 1 , AL is one of special characters
 32561                                  ;***********************************************************************
 32562                                  
 32563                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32564                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32565                                  $P_FileSp_Chk:
 32566 0000538B 53                      	push	bx			;AN000;
 32567 0000538C 51                      	push	cx			;AN000;
 32568                                  	;lea	bx,[cs:$P_FileSp_Char]	;AC034; special character table
 32569 0000538D 8D1E[359A]              	lea	bx,$P_FileSp_Char ; "[]|<>+=;\""
 32570 00005391 B90900                  	mov	cx,$P_FileSp_Len ; 9
 32571                                  	;mov	cx,9			;AN000; load length of it
 32572                                  $P_FileSp_Loop: 			;AN000;
 32573 00005394 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 32574 00005397 7404                    	je	short $P_FileSp_Exit	;AN000;
 32575 00005399 43                      	inc	bx			;AN000;
 32576 0000539A E2F8                    	loop	$P_FileSp_Loop		;AN000;
 32577 0000539C 41                      	inc	cx			;AN000; reset ZF
 32578                                  $P_FileSp_Exit: 			;AN000;
 32579 0000539D 59                      	pop	cx			;AN000;
 32580 0000539E 5B                      	pop	bx			;AN000;
 32581 0000539F C3                      	retn				;AN000;
 32582                                  
 32583                                  ;***********************************************************************
 32584                                  ; $P_Drive_Format;
 32585                                  ;
 32586                                  ; Function:  Check if the input string is valid drive only format.
 32587                                  ;	     And set the result buffer.
 32588                                  ;
 32589                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 32590                                  ;	     ES:BX -> CONTROL block
 32591                                  ;
 32592                                  ; Output:    None
 32593                                  ;
 32594                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS
 32595                                  ;
 32596                                  ; Vars: $P_RC(W)
 32597                                  ;***********************************************************************
 32598                                  
 32599                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32600                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32601                                  $P_Drive_Format:
 32602 000053A0 50                      	push	ax			;AN000;
 32603 000053A1 52                      	push	dx			;AN000;
 32604 000053A2 2E8A04                  	mov	al,[cs:si]		;AN000;
 32605 000053A5 08C0                    	or	al,al			;AN000; if null string
 32606 000053A7 7436                    	jz	short $P_Drv_Exit	;AN000; do nothing
 32607 000053A9 E81601                  	call	$P_Chk_DBCS		;AN000; is it leading byte ?
 32608 000053AC 722A                    	jc	short $P_Drv_Err	;AN000;
 32609                                  	;cmp	word [cs:si+1],3Ah ; $P_Colon  ; ':'
 32610 000053AE 2E837C013A              	cmp	word [cs:si+1],$P_Colon ;AN000; "d", ":", 0  ?
 32611 000053B3 740D                    	je	short $P_DrvF00		;AN000;
 32612                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 32613                                  	;test	word [es:bx],10h	;AN000; colon can be ignored?
 32614 000053B5 26F60710                	test	byte [es:bx],$P_Ig_Colon ; 10h
 32615 000053B9 741D                    	jz	short $P_Drv_Err	;AN000;
 32616 000053BB 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; "d", 0  ?
 32617 000053C0 7516                    	jne	short $P_Drv_Err	;AN000;
 32618                                  $P_DrvF00:				;AN000;
 32619 000053C2 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case
 32620 000053C4 3C61                    	cmp	al,"a" ; 61h            ;AN000; drive letter must
 32621 000053C6 7210                    	jb	short $P_Drv_Err	;AN000; in range of
 32622 000053C8 3C7A                    	cmp	al,"z" ; 7Ah            ;AN000; "a" - "z"
 32623 000053CA 770C                    	ja	short $P_Drv_Err	;AN000; if no, error
 32624 000053CC 2C60                    	sub	al,"a"-1  ; 60h         ;AN000; make text drive to binary drive
 32625 000053CE 88C2                    	mov	dl,al			;AN000; set
 32626                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000;    result
 32627                                  	;mov	al,$P_Drive ; 6		;AN000; 	 buffer
 32628                                  	; 05/04/2023
 32629 000053D0 B806FF                  	mov	ax,($P_No_Tag<<8)+$P_Drive ; 06FFh
 32630 000053D3 E8CCF8                  	call	$P_Fill_Result		;AN000; 	       to drive
 32631 000053D6 EB07                    	jmp	short $P_Drv_Exit	;AN000;
 32632                                  $P_Drv_Err:				;AN000;
 32633 000053D8 2EC706[6599]0900        	mov	word [cs:$P_RC],$P_Syntax
 32634                                  	;mov	word [cs:$P_RC],9	;AC034;
 32635                                  $P_Drv_Exit:				;AN000;
 32636 000053DF 5A                      	pop	dx			;AN000;
 32637 000053E0 58                      	pop	ax			;AN000;
 32638 000053E1 C3                      	retn				;AN000;
 32639                                  
 32640                                  ;***********************************************************************
 32641                                  ; $P_Skip_Delim;
 32642                                  ;
 32643                                  ; Function: Skip delimiters specified in the PARMS list, white space
 32644                                  ;	    and comma.
 32645                                  ;
 32646                                  ; Input:    DS:SI -> Command String
 32647                                  ;	    ES:DI -> Parameter List
 32648                                  ;
 32649                                  ; Output:   CY = 1 if the end of line encounterd
 32650                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 32651                                  ;	    AL = Last examineed character
 32652                                  ;
 32653                                  ; Use:	    $P_Chk_EOL, $P_Chk_Delim,
 32654                                  ;
 32655                                  ; Vars:     $P_Flags(R)
 32656                                  ;***********************************************************************
 32657                                  
 32658                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32659                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32660                                  $P_Skip_Delim:				;AN000;
 32661                                  $P_Skip_Delim_Loop:			;AN000;
 32662 000053E2 AC                      	lodsb				;AN000;
 32663 000053E3 E81E00                  	call	$P_Chk_EOL		;AN000; is it EOL character ?
 32664 000053E6 7416                    	je	short $P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 32665                                  
 32666 000053E8 E84B00                  	call	$P_Chk_Delim		;AN000; is it one of delimiters ?
 32667 000053EB 7514                    	jne	short $P_Skip_Delim_NCY	;AN000; if no, exit w/ CY off
 32668                                  
 32669 000053ED 2EF606[7199]20          	test	byte [cs:$P_Flags2],$P_Extra
 32670                                  	;test	byte [cs:$P_Flags2],20h ;AC034; extra delim or comma found ?
 32671 000053F3 74ED                    	jz	short $P_Skip_Delim_Loop
 32672                                  					;AN000; if no, loop
 32673 000053F5 2EF606[7199]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ
 32674                                  	;;test	byte [cs:$P_Flags2],41h	;AC034; /x , or xxx=zzz , (tm08)
 32675                                  	;jz	short $P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 32676                                  	;dec	si ; *			;AN000; backup si for next call (tm08)
 32677                                  	;;jmp	short $P_Exit_At_Extra	;AN000; else exit w/ CY off
 32678                                  	; 05/04/2023
 32679 000053FB 7505                    	jnz	short $P_Skip_Delim_Exit ; cf = 0
 32680                                  $P_Exit_At_Extra:			;AN000;
 32681                                  	; cf = 0
 32682                                  	;clc				;AN000; indicate extra delim
 32683 000053FD C3                      	retn				;AN000;
 32684                                  
 32685                                  $P_Skip_Delim_CY:			;AN000;
 32686 000053FE F9                      	stc				;AN000; indicate EOL
 32687 000053FF EB01                    	jmp	short $P_Skip_Delim_Exit
 32688                                  					;AN000;
 32689                                  $P_Skip_Delim_NCY:			;AN000;
 32690 00005401 F8                      	clc				;AN000; indicate non delim
 32691                                  $P_Skip_Delim_Exit:			;AN000; in this case, need
 32692 00005402 4E                      	dec	si ; *			;AN000;  backup index pointer
 32693 00005403 C3                      	retn				;AN000;
 32694                                  	; 05/04/2023
 32695                                  ;$P_Exit_At_Extra:			;AN000;
 32696                                  	;clc				;AN000; indicate extra delim
 32697                                  	;retn				;AN000;
 32698                                  
 32699                                  ;***********************************************************************
 32700                                  ; $P_Chk_EOL;
 32701                                  ;
 32702                                  ; Function: Check if AL is one of End of Line characters.
 32703                                  ;
 32704                                  ; Input:    AL = character code
 32705                                  ;	    ES:DI -> Parameter List
 32706                                  ;
 32707                                  ; Output:   ZF = 1 if one of End of Line characters
 32708                                  ;***********************************************************************
 32709                                  
 32710                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32711                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32712                                  $P_Chk_EOL:
 32713 00005404 53                      	push	bx			;AN000;
 32714 00005405 51                      	push	cx			;AN000;
 32715 00005406 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; Carriage return ?
 32716 00005408 7429                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32717 0000540A 3C00                    	cmp	al,$P_NULL ; 0		;AN000; zero ?
 32718 0000540C 7425                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32719 0000540E 26807D0202              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL
 32720                                  	;cmp	byte [es:di+2],2	;AN000; EOL character specified ?
 32721 00005413 721E                    	jb	short $P_Chk_EOL_Exit 	;AN000;
 32722 00005415 31DB                    	xor	bx,bx			;AN000;
 32723 00005417 268A5D03                	mov	bl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 32724                                  	;mov	bl,[es:di+3]		;AN000; get length of delimiter list
 32725 0000541B 83C304                  	add	bx,$P_Len_PARMS; 4 	;AN000; skip it
 32726 0000541E 26803900                	cmp	byte [es:bx+di],$P_I_Use_Default
 32727                                  	;cmp	byte [es:bx+di],0	;AN000; No extra EOL character ?
 32728 00005422 740D                    	je	short $P_Chk_EOL_NZ	;AN000;
 32729 00005424 31C9                    	xor	cx,cx			;AN000; Get number of extra chcracter
 32730 00005426 268A09                  	mov	cl,[es:bx+di]		;AN000;
 32731                                  $P_Chk_EOL_Loop:			;AN000;
 32732 00005429 43                      	inc	bx			;AN000;
 32733 0000542A 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 32734 0000542D 7404                    	je	short $P_Chk_EOL_Exit 	;AN000;
 32735 0000542F E2F8                    	loop	$P_Chk_EOL_Loop 	;AN000;
 32736                                  $P_Chk_EOL_NZ:				;AN000;
 32737 00005431 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; reset ZF
 32738                                  $P_Chk_EOL_Exit:			;AN000;
 32739 00005433 59                      	pop	cx			;AN000;
 32740 00005434 5B                      	pop	bx			;AN000;
 32741 00005435 C3                      	retn				;AN000;
 32742                                  
 32743                                  ;***********************************************************************
 32744                                  ; $P_Chk_Delim;
 32745                                  ;
 32746                                  ; Function: Check if AL is one of delimiter characters.
 32747                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 32748                                  ;	    blanks.
 32749                                  ;
 32750                                  ; Input:    AL = character code
 32751                                  ;	    DS:SI -> Next Character
 32752                                  ;	    ES:DI -> Parameter List
 32753                                  ;
 32754                                  ; Output:   ZF = 1 if one of delimiter characters
 32755                                  ;	    SI points to the next character
 32756                                  ; Vars:  $P_Terminator(W), $P_Flags(W)
 32757                                  ;***********************************************************************
 32758                                  
 32759                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32760                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32761                                  $P_Chk_Delim:
 32762 00005436 53                      	push	bx			;AN000;
 32763 00005437 51                      	push	cx			;AN000;
 32764 00005438 2EC606[6B99]20          	mov	byte [cs:$P_Terminator],$P_Space ; 20h
 32765                                  					;AC034; Assume terminated by space
 32766 0000543E 2E8026[7199]DF          	and	byte [cs:$P_Flags2],0FFh-$P_Extra ; 0DFh
 32767                                  					;AC034;
 32768 00005444 3C20                    	cmp	al,$P_Space ; 20h ; ' '	;AN000; Space ?
 32769 00005446 7436                    	je	short $P_Chk_Delim_Exit	;AN000;
 32770                                  
 32771 00005448 3C09                    	cmp	al,$P_TAB ; 09h		;AN000; TAB ?
 32772 0000544A 7432                    	je	short $P_Chk_Delim_Exit	;AN000;
 32773                                  
 32774 0000544C 3C2C                    	cmp	al,$P_Comma  ; ',' 	;AN000; Comma ?
 32775 0000544E 7431                    	je	short $P_Chk_Delim_Exit0
 32776                                  					;AN000;
 32777                                  $P_Chk_Delim00: 			;AN000;
 32778 00005450 3C20                    	cmp	al,20h ; $P_DBSP1	;AN000; 1st byte of DBCS Space ?
 32779 00005452 750C                    	jne	short $P_Chk_Delim01	;AN000;
 32780 00005454 803C20                  	cmp	byte [si],20h ; $P_DBSP2
 32781                                  					;AN000; 2nd byte of DBCS Space ?
 32782 00005457 7507                    	jne	short $P_Chk_Delim01	;AN000;
 32783 00005459 B020                    	mov	al,$P_Space ; 20h	;AN000;
 32784 0000545B 46                      	inc	si			;AN000; make si point to next character
 32785 0000545C 38C0                    	cmp	al,al			;AN000; Set ZF
 32786 0000545E EB1E                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 32787                                  
 32788                                  $P_Chk_Delim01: 			;AN000;
 32789                                  	;cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_Delim
 32790 00005460 26807D0201              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],1
 32791                                  	;cmp	byte [es:di+2],1	;AN000; delimiter character specified ?
 32792 00005465 7217                    	jb	short $P_Chk_Delim_Exit	;AN000;
 32793                                  
 32794 00005467 31C9                    	xor	cx,cx			;AN000;
 32795 00005469 268A4D03                	mov	cl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 32796                                  	;mov	cl,[esi:di+3]		;AN000; get length of delimiter list
 32797 0000546D 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 32798 0000546F 740B                    	jz	short $P_Chk_Delim_NZ	;AN000;
 32799                                  
 32800 00005471 BB0300                  	mov	bx,$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 32801                                  $P_Chk_Delim_Loop:			;AN000;
 32802 00005474 43                      	inc	bx			;AN000;
 32803 00005475 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 32804 00005478 7407                    	je	short $P_Chk_Delim_Exit0
 32805                                  					;AN000;
 32806 0000547A E2F8                    	loop	$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 32807                                  
 32808                                  $P_Chk_Delim_NZ:			;AN000;
 32809 0000547C 3C20                    	cmp	al,$P_Space ; 20h	;AN000; reset ZF
 32810                                  $P_Chk_Delim_Exit:			;AN000;
 32811 0000547E 59                      	pop	cx			;AN000;
 32812 0000547F 5B                      	pop	bx			;AN000;
 32813 00005480 C3                      	retn				;AN000;
 32814                                  
 32815                                  $P_Chk_Delim_Exit0:			;AN000;
 32816 00005481 2EA2[6B99]              	mov	[cs:$P_Terminator],al	;AC034; keep terminated delimiter
 32817 00005485 2EF606[7199]01          	test	byte [cs:$P_Flags2],$P_equ
 32818                                  	;test	byte [cs:$P_Flags2],1	;AN027;AC034;; if terminating a key=
 32819 0000548B 7506                    	jnz	short $P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 32820                                  
 32821 0000548D 2E800E[7199]20          	or	byte [cs:$P_Flags2],$P_Extra ; 20h
 32822                                  	;or	byte [cs:$P_Flags2],20h	;AC034; flag terminated extra delimiter or comma
 32823                                  $P_No_Set_Extra:			;AN027;
 32824 00005493 38C0                    	cmp	al,al			;AN000; set ZF
 32825 00005495 EBE7                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 32826                                  
 32827                                  ;***********************************************************************
 32828                                  ; $P_Chk_Switch;
 32829                                  ;
 32830                                  ; Function: Check if AL is the switch character not in first position of
 32831                                  ;	    $P_STRING_BUF
 32832                                  ;
 32833                                  ; Input:    AL = character code
 32834                                  ;	    BX = current pointer within $P_String_Buf
 32835                                  ;	    SI =>next char on command line (following the one in AL)
 32836                                  ;
 32837                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 32838                                  ;		 position, and has no chance of being part of a date string,
 32839                                  ;		 i.e. should be treated as a delimiter.
 32840                                  ;
 32841                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 32842                                  ;		 position, or is a slash but may be part of a date string, i.e.
 32843                                  ;		 should not be treated as a delimiter.
 32844                                  ;
 32845                                  ; Vars:  $P_Terminator(W)
 32846                                  ;
 32847                                  ; Use:	 $P_0099
 32848                                  ;***********************************************************************
 32849                                  
 32850                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32851                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32852                                  $P_Chk_Switch:
 32853                                  	; 18/04/2023
 32854 00005497 8D2E[7A99]              	lea	bp,$P_STRING_BUF	;AN020;AC034; BP=OFFSET of $P_String_Buf even in group addressing
 32855                                  
 32856 0000549B 39EB                    	cmp	bx,bp			;AN000;
 32857 0000549D 7418                    	je	short $P_STRUC_L2	;AN000;
 32858                                  
 32859 0000549F 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 32860 000054A1 7512                    	jne	short $P_STRUC_L5	;AN000;
 32861                                  
 32862 000054A3 F9                      	stc				;AN020;not in first position and is slash, now see if might be in date string
 32863 000054A4 50                      	push	ax			;AN020;save input char
 32864 000054A5 2E8A47FF                	mov	al,[cs:bx-1]		;AN026;AL=char before the current char
 32865 000054A9 E804FB                  	call	$P_0099 		;AN020;return carry set if not numeric
 32866 000054AC 7205                    	jc	short $P_STRUC_L7	;AN000;
 32867                                  
 32868 000054AE 8A04                    	mov	al,[si]			;AN020;AL=char after the current char
 32869 000054B0 E8FDFA                  	call	$P_0099			;AN020;return carry set if not numeric
 32870                                  $P_STRUC_L7:				;AN000;
 32871 000054B3 58                      	pop	ax			;AN020;restore AL to input char
 32872                                  	;jmp	short $P_STRUC_L1	;AN000;
 32873                                  	; 18/04/2023
 32874 000054B4 C3                      	retn
 32875                                  
 32876                                  $P_STRUC_L5:				;AN000;
 32877 000054B5 F8                      	clc				;AN020;not a slash
 32878                                  	;jmp	short $P_STRUC_L1	;AN000;
 32879                                  	 ;18/04/2023
 32880 000054B6 C3                      	retn
 32881                                  
 32882                                  $P_STRUC_L2:				;AN000;
 32883 000054B7 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 32884                                  	;jne	short $P_STRUC_L12	;AN000;
 32885                                  	; 18/04/2023
 32886 000054B9 75FA                    	jne	short $P_STRUC_L5
 32887                                  
 32888 000054BB 2E800E[7199]40          	or	byte [cs:$P_Flags2],$P_SW
 32889                                  	;or	byte [cs:$P_Flags2],40h	;AN020;AC034;;could be valid switch, first char and is slash
 32890                                  	; 18/04/2023
 32891                                  ;$P_STRUC_L12:				;AN000;
 32892                                  	;clc				;AN020;CF=0 indicating first char
 32893                                  $P_STRUC_L1:				;AN000;
 32894 000054C1 C3                      	retn				;AN000;
 32895                                  
 32896                                  ;**************************************************************************
 32897                                  ; $P_Chk_DBCS:
 32898                                  ;
 32899                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 32900                                  ;
 32901                                  ;  Input:
 32902                                  ;	  AL	= Code to be examineed
 32903                                  ;
 32904                                  ;  Output:
 32905                                  ;	  If CF is on then a lead byte of DBCS
 32906                                  ;
 32907                                  ; Use: INT 21h w/AH=63
 32908                                  ;
 32909                                  ; Vars:  $P_DBCSEV_Seg(RW), $P_DBCSEV_Off(RW)
 32910                                  ;***************************************************************************
 32911                                  
 32912                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32913                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32914                                  $P_Chk_DBCS:
 32915 000054C2 1E                      	push	ds			;AN000;
 32916 000054C3 56                      	push	si			;AN000;
 32917 000054C4 53                      	push	bx			;AN000; (tm11)
 32918 000054C5 2E833E[6E99]00          	cmp	word [cs:$P_DBCSEV_SEG],0
 32919                                  					;AC034; ALREADY SET ?
 32920 000054CB 7527                    	jne	short $P_DBCS00		;AN000;
 32921 000054CD 50                      	push	ax			;AN000;
 32922 000054CE 1E                      	push	ds			;AN000; (tm11)
 32923 000054CF 51                      	push	cx			;AN000;
 32924 000054D0 52                      	push	dx			;AN000;
 32925 000054D1 57                      	push	di			;AN000;
 32926 000054D2 55                      	push	bp			;AN000;
 32927 000054D3 06                      	push	es			;AN000;
 32928 000054D4 31F6                    	xor	si,si			;AN000;
 32929 000054D6 8EDE                    	mov	ds,si			;AN000;
 32930                                  	;mov	ax,$P_DOS_GetEV 	;AN000; GET DBCS EV CALL
 32931 000054D8 B80063                  	mov	ax,6300h
 32932 000054DB CD21                    	int	21h			;AN000;
 32933 000054DD 8CDB                    	mov	bx,ds			;AN000; (tm11)
 32934 000054DF 09DB                    	or	bx,bx			;AN000; (tm11)
 32935 000054E1 07                      	pop	es			;AN000;
 32936 000054E2 5D                      	pop	bp			;AN000;
 32937 000054E3 5F                      	pop	di			;AN000;
 32938 000054E4 5A                      	pop	dx			;AN000;
 32939 000054E5 59                      	pop	cx			;AN000;
 32940 000054E6 1F                      	pop	ds			;AN000; (tm11)
 32941 000054E7 58                      	pop	ax			;AN000;
 32942 000054E8 7429                    	jz	short $P_NON_DBCS	;AN000;
 32943                                  $P_DBCS02:				;AN000;
 32944 000054EA 2E8936[6C99]            	mov	[cs:$P_DBCSEV_OFF],si	;AC034; save EV offset
 32945 000054EF 2E891E[6E99]            	mov	[cs:$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 32946                                  $P_DBCS00:				;AN000;
 32947 000054F4 2E8B36[6C99]            	mov	si,[cs:$P_DBCSEV_OFF]	;AC034; load EV offset
 32948 000054F9 2E8E1E[6E99]            	mov	ds,[cs:$P_DBCSEV_SEG]	;AC034; and segment
 32949                                  $P_DBCS_LOOP:				;AN000;
 32950 000054FE 833C00                  	cmp	word [si],0 		;AN000; zero vector ?
 32951 00005501 7410                    	je	short $P_NON_DBCS	;AN000; then exit
 32952 00005503 3A04                    	cmp	al,[si] 		;AN000;
 32953 00005505 7208                    	jb	short $P_DBCS01		;AN000; Check if AL is in
 32954 00005507 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 32955 0000550A 7703                    	ja	short $P_DBCS01		;AN000;      the vector
 32956 0000550C F9                      	stc				;AN000; if yes, indicate DBCS and exit
 32957 0000550D EB04                    	jmp	short $P_DBCS_EXIT	;AN000;
 32958                                  $P_DBCS01:				;AN000;
 32959 0000550F 46                      	inc	si			;AC035; add '2' to
 32960 00005510 46                      	inc	si			;AC035;  SI reg
 32961                                  					;AN000; get next vector
 32962 00005511 EBEB                    	jmp	short $P_DBCS_LOOP	;AN000; loop until zero vector found
 32963                                  
 32964                                  $P_NON_DBCS:				;AN000;
 32965                                  	; 18/04/2023
 32966                                  	; cf=0
 32967                                  	;clc				;AN000; indicate SBCS
 32968                                  $P_DBCS_EXIT:				;AN000;
 32969 00005513 5B                      	pop	bx			;AN000; (tm11)
 32970 00005514 5E                      	pop	si			;AN000;
 32971 00005515 1F                      	pop	ds			;AN000;
 32972 00005516 C3                      	retn				;AN000;
 32973                                  
 32974                                  ;============================================================================
 32975                                  ; TPARSE.ASM, MSDOS 6.0, 1991
 32976                                  ;============================================================================
 32977                                  ; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32978                                  
 32979                                  ; ****************************************************************
 32980                                  ; *
 32981                                  ; * ROUTINE:	 CMD_PARSE
 32982                                  ; *
 32983                                  ; * FUNCTION:	 Interface for transient COMMAND to invoke
 32984                                  ; *		 SYSPARSE.
 32985                                  ; *
 32986                                  ; * INPUT:	 inputs to SYSPARSE
 32987                                  ; *
 32988                                  ; * OUTPUT:	 outputs from SYSPARSE
 32989                                  ; *
 32990                                  ; ****************************************************************
 32991                                  
 32992                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32993                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4FF7h
 32994                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32995                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:57BBh
 32996                                  ;cmd_parse:
 32997                                  	;call	sysparse		;AN000;
 32998                                  	;retn				;AN000;
 32999                                  	; 06/04/2023
 33000                                  	;jmp	sysparse
 33001                                  
 33002                                  append_parse:
 33003 00005517 E842F5                  	call	sysparse		;AN010;
 33004 0000551A CB                      	retf				;AN010;
 33005                                  
 33006                                  ;============================================================================
 33007                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 33008                                  ;============================================================================
 33009                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33010                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33011                                  
 33012                                  ; ----------------------------
 33013                                  ; MSDOS 6.0, MSGSERV.ASM, 1991
 33014                                  ; ----------------------------
 33015                                  
 33016                                  ;; Replacable parameters are described by a sublist structure
 33017                                  
 33018                                  struc $M_SUBLIST_STRUC		;;AN000;;
 33019 00000000 ??                       .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 33020 00000001 ??                       .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 33021 00000002 ????????                 .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 33022 00000006 ??                       .$M_S_ID:	resb 1		;;AN000;; n of %n
 33023 00000007 ??                       .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 33024 00000008 ??                       .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 33025 00000009 ??                       .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 33026 0000000A ??                       .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 33027                                  endstruc
 33028                                  
 33029                                  ; ---------------------------------------------------------------------------
 33030                                  ; ---------------------------------------------------------------------------
 33031                                  
 33032                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33033                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 4FFFh
 33034                                  
 33035                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33036                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57C3h
 33037                                  
 33038                                  Printf_Init:
 33039 0000551B E80F00                  	call	std_printf
 33040 0000551E CB                      	retf
 33041                                  
 33042                                  Printf_Crlf:
 33043 0000551F E80B00                  	call	std_printf
 33044                                  	;call	CRLF2
 33045                                  	;retn
 33046                                  	; 07/04/2023
 33047 00005522 E9FED5                  	jmp	CRLF2
 33048                                  
 33049                                  ;****************************************************************
 33050                                  ;*
 33051                                  ;* ROUTINE:	STD_PRINTF/STD_EPRINTF
 33052                                  ;*
 33053                                  ;* FUNCTION:	Set up to print out a message using SYSDISPMSG.
 33054                                  ;*		Set up substitutions if utility message.  Make
 33055                                  ;*		sure any changes to message variables in TDATA
 33056                                  ;*		are reset to avoid reloading the transient.
 33057                                  ;*
 33058                                  ;* INPUT:	Msg_Disp_Class	-  set to message class
 33059                                  ;*		Msg_Cont_Flag	-  set to control flags
 33060                                  ;*		DS	points to transient segment
 33061                                  ;*
 33062                                  ;*		if utility message:
 33063                                  ;*		DX	points to a block with message number
 33064                                  ;*			(word), number of substitutions (byte),
 33065                                  ;*			followed by substitution list if there
 33066                                  ;*			are substitutions.  If substitutions
 33067                                  ;*			are not in transient segment they must
 33068                                  ;*			be set.
 33069                                  ;*		else
 33070                                  ;*		AX	set to message number
 33071                                  ;*
 33072                                  ;* OUTPUT:	none
 33073                                  ;*
 33074                                  ;****************************************************************
 33075                                  
 33076                                  std_eprintf:
 33077 00005525 C706[419B]0200          	mov	word [PRINTF_HANDLE],2 		;AC000;Print to STDERR
 33078 0000552B EB06                    	jmp	short new_printf		;AC000;
 33079                                  
 33080                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33081                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 5012h
 33082                                  
 33083                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33084                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57D6h
 33085                                  
 33086                                  std_printf:
 33087 0000552D C706[419B]0100          	mov	word [PRINTF_HANDLE],1 		;AC000;Print to STDOUT
 33088                                  
 33089                                  new_printf:
 33090 00005533 50                      	push	ax				;AN000;save registers
 33091 00005534 53                      	push	bx				;AN000;
 33092 00005535 51                      	push	cx				;AN000;
 33093 00005536 06                      	push	es				;AN000;get local ES
 33094 00005537 1E                      	push	ds				;AN000;
 33095 00005538 07                      	pop	es				;AN000;
 33096 00005539 57                      	push	di				;AN000;
 33097 0000553A 56                      	push	si				;AN000;
 33098 0000553B 52                      	push	dx				;AN000;
 33099                                  
 33100                                  	; 07/04/2023
 33101                                  	;mov	word [print_err_flag],0		;AN000;
 33102 0000553C 31C9                    	xor	cx,cx
 33103 0000553E 890E[CEA2]              	mov	[print_err_flag],cx ; 0
 33104                                  
 33105 00005542 89D6                    	mov	si,dx				;AN000;Get offset of message number
 33106 00005544 AD                      	lodsw					;AN000;load message number
 33107                                  	; 15/06/2023
 33108                                  	;push	ax				;AN000;save it
 33109                                  	;lodsb					;AN000;get number of substitutions
 33110                                  	;mov	cl,al				;AN000;set up CX as # of subst
 33111                                  	;; 07/04/2023
 33112                                  	;;xor	ch,ch				;AN000;SI now points to subst list
 33113                                  	;pop	ax				;AN000;get message number back
 33114                                  	; 15/06/2023
 33115 00005545 8A0C                    	mov	cl,[si]
 33116 00005547 46                      	inc	si
 33117                                  
 33118                                  	;cmp	cx,0				;AN000;Any substitutions?
 33119                                  	; 07/04/2023
 33120 00005548 21C9                    	and	cx,cx
 33121 0000554A 745C                    	jz	short ready_to_print		;AN000;No - continue
 33122                                  
 33123 0000554C BF[D0A2]                	mov	di,subst_buffer			;AN061; Get address of message subst buffer
 33124 0000554F 57                      	push	di				;AN061; save it
 33125 00005550 51                      	push	cx				;AN061; save number of subst
 33126                                  
 33127                                  move_subst:
 33128 00005551 51                      	push	cx				;AN061;save number of subst
 33129 00005552 89F3                    	mov	bx,si				;AN061;save start of sublist
 33130                                  	;mov	cx,parm_block_size ; 11		;AN061;get size of sublist
 33131                                  	; 07/04/2023
 33132 00005554 B10B                    	mov	cl,parm_block_size ; 11
 33133 00005556 F3A4                    	rep	movsb				;AN061;move sublist
 33134                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 33135 00005558 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 33136                                  	;test	byte [bx+7],4			;AN061;are we doing date/time?
 33137 0000555C 7406                    	jz	short move_subst_cont 		;AN061;no - no need to reset
 33138                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],0
 33139                                  	;mov	word [bx+2],0			;AN061;reset original date or time to 0
 33140 0000555E 894F02                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],cx ; 0
 33141                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 33142                                  	;mov	word [bx+4],0			;AN061;
 33143 00005561 894F04                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cx ; 0
 33144                                  
 33145                                  move_subst_cont:				;AN061;
 33146 00005564 59                      	pop	cx				;AN061;get number of subst back
 33147 00005565 E2EA                    	loop	move_subst			;AN061;move cx sublists
 33148                                  
 33149 00005567 59                      	pop	cx				;AN061;get number of subst
 33150 00005568 50                      	push	ax				;AN061;save message number
 33151 00005569 803E[F191]FF            	cmp	byte [msg_disp_class],util_msg_class
 33152                                  	;cmp	byte [msg_disp_class],0FFh	;AN061;Is this a utility message
 33153 0000556E 740C                    	je	short check_fix			;AN061;YES - go see if substitutions
 33154                                  	;mov	byte [msg_flag],1 ; ext_msg_class
 33155 00005570 C606[CAA2]01            	mov	byte [msg_flag],ext_msg_class	;AN061;set message flag
 33156 00005575 BF[F391]                	mov	di,extend_buf_ptr		;AN061; Get address of extended message block
 33157 00005578 31C0                    	xor	ax,ax				;AN061;clear ax register
 33158 0000557A AB                      	stosw					;AN061;clear out message number
 33159 0000557B AA                      	stosb					;AN061;clear out subst count
 33160                                  
 33161                                  check_fix:					;AN061;
 33162 0000557C 58                      	pop	ax				;AN061;get message number back
 33163 0000557D 5F                      	pop	di				;AN061;get start of sublists
 33164 0000557E 89FE                    	mov	si,di				;AN061;get into SI for msgserv
 33165 00005580 89F3                    	mov	bx,si				;AN061;get into BX for addressing
 33166 00005582 51                      	push	cx				;AN061;save number of subst
 33167                                  
 33168                                  set_subst:					;AN061;store the segment of the subst
 33169 00005583 837F0400                	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 33170                                  	;cmp	word [bx+4],0			;AN061;was it set already?
 33171 00005587 7509                    	jnz	short subst_seg_set		;AN061;if not 0, don't replace it
 33172 00005589 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 33173                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 33174                                  	;test	byte [bx+7],4			;AN061;don't replace if date or time
 33175 0000558D 7503                    	jnz	short subst_seg_set		;AN061;yes - skip it
 33176 0000558F 8C4F04                  	mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cs
 33177                                  	;mov	word [bx+4],cs			;AN061;set segment value
 33178                                  
 33179                                  subst_seg_set:					;AN061;
 33180 00005592 83C30B                  	add	bx,parm_block_size ; add bx,11	;AN061;go to next sublist
 33181 00005595 E2EC                    	loop	set_subst			;AN061;loop CX times
 33182 00005597 59                      	pop	cx				;AN061;get number of subst back
 33183                                  
 33184 00005598 89F3                    	mov	bx,si				;AN061;get start of sublist to BX
 33185 0000559A 817F02[37A1]            	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2
 33186                                  	;cmp	word [bx+2],string_ptr_2	;AN061;are we using double indirection?
 33187 0000559F 7507                    	jne	short ready_to_print		;AN061;no - we already have address
 33188                                  	; 01/05/2023
 33189 000055A1 8B16[37A1]              	mov	dx,[string_ptr_2] 		;AN061;get address in string_ptr_2
 33190 000055A5 895702                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],dx
 33191                                  						;AN061;put it into the subst block
 33192                                  	;mov	[bx+2],dx
 33193                                  
 33194                                  ready_to_print:
 33195 000055A8 8B1E[419B]              	mov	bx,[PRINTF_HANDLE]		;AN000;get print handle
 33196 000055AC 8A16[F291]              	mov	dl,[msg_cont_flag]		;AN000;set up control flag
 33197 000055B0 8A36[F191]              	mov	dh,[msg_disp_class]		;AN000;set up display class
 33198 000055B4 C606[F291]00            	mov	byte [msg_cont_flag],0 ; no_cont_flag
 33199                                  						;AN061;reset flags to avoid
 33200 000055B9 C606[F191]FF            	mov	byte [msg_disp_class],util_msg_class
 33201                                  	;mov	byte [msg_disp_class],0FFh	;AN061; transient reload
 33202                                  
 33203 000055BE 1E                      	push	ds				;AN026;
 33204 000055BF 06                      	push	es				;AN026;
 33205                                  
 33206 000055C0 E83702                  	call	SYSDISPMSG			;AN000;call Rod
 33207                                  
 33208 000055C3 07                      	pop	es				;AN026; restore registers
 33209 000055C4 1F                      	pop	ds				;AN026;
 33210                                  
 33211 000055C5 7303                    	jnc	short print_success		;AN000; everything went okay
 33212 000055C7 A3[CEA2]                	mov	[print_err_flag],ax		;AN000;
 33213                                  
 33214                                  print_success:
 33215 000055CA 5A                      	pop	dx				;AN061;restore dx
 33216 000055CB 5E                      	pop	si				;AN000;restore registers
 33217 000055CC 5F                      	pop	di				;AN000;
 33218 000055CD 07                      	pop	es				;AN000;restore registers
 33219 000055CE 59                      	pop	cx				;AN000;
 33220 000055CF 5B                      	pop	bx				;AN000;
 33221 000055D0 58                      	pop	ax				;AN000;
 33222 000055D1 833E[CEA2]00            	cmp	word [print_err_flag],0		;AN000; if an error occurred - handle it
 33223 000055D6 7501                    	jnz	short print_err			;AN000;
 33224                                  
 33225 000055D8 C3                      	retn					;AC000;
 33226                                  
 33227                                  print_err:
 33228 000055D9 0E                      	push	cs
 33229 000055DA 07                      	pop	es
 33230 000055DB 833E[419B]02            	cmp	word [PRINTF_HANDLE],2 		;AN026;Print to STDERR?
 33231 000055E0 7503                    	jne	short not_stderr		;AN026;no - continue
 33232 000055E2 E91FAB                  	jmp	TCOMMAND			;AN026;Yes - hopless - just exit
 33233                                  
 33234                                  not_stderr:
 33235 000055E5 A1[CEA2]                	mov	ax,[print_err_flag]		;AN026;get extended error number back
 33236 000055E8 8E06[159E]              	mov	es,[RESSEG]			; No, set up for error, load the
 33237                                  						;  right error msg, and jmp to cerror.
 33238 000055EC 26F606[B502]FF          	test	byte [es:PipeFlag],-1 ; 0FFh
 33239 000055F2 7408                    	jz	short _go_to_error
 33240 000055F4 E8C5DE                  	call	PipeOff
 33241 000055F7 BA[5493]                	mov	dx,PIPEEMES_PTR
 33242 000055FA EB0B                    	jmp	short print_err_exit			;AC000;
 33243                                  
 33244                                  _go_to_error:
 33245 000055FC C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class
 33246                                  	;mov	byte [msg_disp_class],1		;AN000; set up extended error msg class
 33247 00005601 BA[F391]                	mov	dx,extend_buf_ptr		;AC000; get extended message pointer
 33248 00005604 A3[F391]                	mov	[extend_buf_ptr],ax		;AN000; get message number in control block
 33249                                  
 33250                                  print_err_exit: 				;AC000;
 33251 00005607 0E                      	push	cs
 33252 00005608 07                      	pop	es
 33253 00005609 E998D8                  	jmp	cerror
 33254                                  
 33255                                  ;****************************************************************
 33256                                  ;*
 33257                                  ;* ROUTINE:	TSYSLOADMSG
 33258                                  ;*
 33259                                  ;* FUNCTION:	Interface to call SYSLOADMSG to avoid duplicate
 33260                                  ;*		names since these routines are also used in the
 33261                                  ;*		resident.
 33262                                  ;*
 33263                                  ;* INPUT:	Inputs to SYSLOADMSG
 33264                                  ;*
 33265                                  ;* OUTPUT:	Outputs from SYSLOADMSG
 33266                                  ;*
 33267                                  ;****************************************************************
 33268                                  
 33269                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33270                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33271                                  TSYSLOADMSG:
 33272 0000560C 53                      	push	bx				;AN000;
 33273 0000560D E80800                  	call	SYSLOADMSG			;AN000; call routine
 33274 00005610 5B                      	pop	bx				;AN000;
 33275 00005611 C3                      	retn					;AN000; exit
 33276                                  
 33277                                  ;****************************************************************
 33278                                  ;*
 33279                                  ;* ROUTINE:	TSYSGETMSG
 33280                                  ;*
 33281                                  ;* FUNCTION:	Interface to call SYSGETMSG to avoid duplicate
 33282                                  ;*		names since these routines are also used in the
 33283                                  ;*		resident.
 33284                                  ;*
 33285                                  ;* INPUT:	Inputs to SYSGETMSG
 33286                                  ;*
 33287                                  ;* OUTPUT:	Outputs from SYSGETMSG
 33288                                  ;*
 33289                                  ;****************************************************************
 33290                                  
 33291                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33292                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33293                                  TSYSGETMSG:
 33294 00005612 51                      	push	cx				;AN000;
 33295 00005613 E8B500                  	call	SYSGETMSG			;AN000; call routine
 33296 00005616 59                      	pop	cx				;AN000;
 33297 00005617 C3                      	retn					;AN000; exit
 33298                                  
 33299                                  ;============================================================================
 33300                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 33301                                  ;============================================================================
 33302                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33303                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33304                                  
 33305                                  ; ---------------------------------------------------------------------------
 33306                                  ; MODULE NAME: MSGSERV.SAL
 33307                                  ;
 33308                                  ; DESCRIPTIVE NAME: Message Services SALUT file
 33309                                  ;
 33310                                  ; FUNCTION: This module incorporates all the messages services and
 33311                                  ;	    is called upon at build time to INCLUDE the code requested
 33312                                  ;	    by a utility. Code is requested using the macro MSG_SERVICES.
 33313                                  ;
 33314                                  ; ENTRY POINT: Since this a collection of subroutines, entry point is at
 33315                                  ;	    requested procedure.
 33316                                  ;
 33317                                  ; INPUT: Since this a collection of subroutines, input is dependent on
 33318                                  ;	    function requested.
 33319                                  ;
 33320                                  ; EXIT-NORMAL: In all cases, CARRY FLAG = 0
 33321                                  ;
 33322                                  ; EXIT-ERROR: In all cases, CARRY FLAG = 1
 33323                                  ;
 33324                                  ; INTERNAL REFERENCES: (list of included subroutines)
 33325                                  ;
 33326                                  ;	- SYSLOADMSG
 33327                                  ;	- SYSDISPMSG
 33328                                  ;	- SYSGETMSG
 33329                                  ;
 33330                                  ; EXTERNAL REFERENCES: None
 33331                                  ;
 33332                                  ; NOTES: At build time, some modules must be included. These are only included
 33333                                  ;	 once using assembler switches. Other logic is included at the request
 33334                                  ;	 of the utility.
 33335                                  ;
 33336                                  ;	 COMR and COMT are assembler switches to conditionally assemble code
 33337                                  ;	 for RESIDENT COMMAND.COM and TRANSIENT COMMAND.COM to reduce resident
 33338                                  ;	 storage and multiple EQUates.
 33339                                  ;
 33340                                  ; REVISION HISTORY: Created MAY 1987
 33341                                  ;
 33342                                  ;     Label: DOS - - Message Retriever
 33343                                  ;	     (c) Copyright 1988 Microsoft
 33344                                  ; ---------------------------------------------------------------------------
 33345                                  
 33346                                  ;	Revision History
 33347                                  ;	================
 33348                                  ;
 33349                                  ;	M007	SR	08/24/90	Fixed bug #1818 -- changed
 33350                                  ;				$M_DISPLAY_H_STRING to properly
 33351                                  ;				handle Ctrl-Z being passed
 33352                                  ;
 33353                                  ;	M013	SR	9/12/90	Make SETSTDIO flag false so that all
 33354                                  ;				these routines are no longer assembled.
 33355                                  ;
 33356                                  ;	M016	SR	10/14/90	Bug #3380. Changed SYSLOADMSG so that
 33357                                  ;				CR-LF string also gets reinitialized
 33358                                  ;				on every cycle.
 33359                                  ;
 33360                                  ;	M020	SR	10/26/90	Bug #3380 again. Initialize $M_DIVISOR
 33361                                  ;				& $_MSG_NUM also in SYSLOADMSG.
 33362                                  
 33363                                  ; ---------------------------------------------------------------------------
 33364                                  
 33365                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33366                                  
 33367                                  ;;; Replacable parameters are described by a sublist structure
 33368                                  ;
 33369                                  ;struc $M_SUBLIST_STRUC		;;AN000;;
 33370                                  ; .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 33371                                  ; .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 33372                                  ; .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 33373                                  ; .$M_S_ID:	resb 1		;;AN000;; n of %n
 33374                                  ; .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 33375                                  ; .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 33376                                  ; .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 33377                                  ; .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 33378                                  ;endstruc
 33379                                  
 33380                                  ;; Each class will be defined by this structure.
 33381                                  
 33382                                  struc $M_CLASS_ID		;;AN000;;
 33383 00000000 ??                       .$M_CLS_ID:	  resb 1	;;AN000;; Class identifer
 33384 00000001 ????                     .$M_COMMAND_VER: resw 1	;;AN003;; COMMAND.COM version check
 33385 00000003 ??                       .$M_NUM_CLS_MSG: resb 1	;;AN000;; Total number of message in class
 33386                                   .size:
 33387                                  endstruc
 33388                                  
 33389                                  $M_CLASS_ID_SZ	EQU $M_CLASS_ID.size	;;AN000;;
 33390                                  
 33391                                  ;; Each message will be defined by this structure.
 33392                                  
 33393                                  struc $M_ID			;;AN000;;
 33394 00000000 ????                     .$M_NUM:	resw 1		;;AN000;; Message Number
 33395 00000002 ????                     .$M_TXT_PTR:	resw 1		;;AN000;; Pointer to message text
 33396                                   .size:	
 33397                                  endstruc
 33398                                  
 33399                                  $M_ID_SZ	EQU  $M_ID.size	;;AN000;;
 33400                                  
 33401                                  ; ---------------------------
 33402                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 33403                                  ; ---------------------------
 33404                                  $M_TEMP_BUF_SZ	EQU 64     ;; Size of temporary buffer	 ;AN003;
 33405                                  
 33406                                  ; --------------------------- 
 33407                                  
 33408                                  ; 07/04/2023
 33409                                  $M_NUM_CLS equ 3
 33410                                  
 33411                                  ;; Resident data area definition of variables
 33412                                  
 33413                                  struc $M_RES_ADDRS			;;AN000;;
 33414 00000000 ????????                 .$M_EXT_ERR_ADDRS: resd 1		;;AN000;; Allow pointers to THREE Extended error locations
 33415 00000004 ????????                 .$M_EXT_FILE:	    resd 1		;;AN001;;
 33416 00000008 ????????                 .$M_EXT_COMMAND:   resd 1		;;AN000;;
 33417 0000000C ????????                 .$M_EXT_TERM:	    resd 1		;;AN000;;
 33418 00000010 ????????                 .$M_PARSE_COMMAND: resd 1		;;AN000;;
 33419 00000014 ????????                 .$M_PARSE_ADDRS:   resd 1		;;AN000;; Allow pointers to TWO Parse error locations
 33420 00000018 ????????                 .$M_PARSE_TERM:    resd 1		;;AN000;;
 33421 0000001C ????????                 .$M_CRIT_ADDRS:    resd 1		;;AN000;; Allow pointers to TWO Critical error locations
 33422 00000020 ????????                 .$M_CRIT_COMMAND:  resd 1		;;AN000;;
 33423 00000024 ????????                 .$M_CRIT_TERM:	    resd 1		;;AN000;;
 33424 00000028 ????????                 .$M_DISK_PROC_ADDR: resd 1		;;AN004;; Address of READ_DISK_PROC
 33425 0000002C <res Ch>                 .$M_CLASS_ADDRS:   resd $M_NUM_CLS ; 3	;;AN000;; Allow pointers to specified classes
 33426 00000038 ????????                 .$M_CLS_TERM:	    resd 1		;;AN000;;
 33427 0000003C ????????                 .$M_DBCS_VEC:	    resd 1		;;AN000;; Save DBCS vector
 33428 00000040 ????                     .$M_HANDLE:	    resw 1 		;;AN000;;
 33429 00000042 ??                       .$M_SIZE:	    resb 1		;;AN000;;
 33430 00000043 ????                     .$M_CRLF:	    resb 2  		;;AN004;; CR LF message
 33431 00000045 ??                       .$M_CLASS:	    resb 1		;;AN004;; Saved class
 33432 00000046 ????                     .$M_RETURN_ADDR:   resw 1		;;AN000;;
 33433 00000048 ????                     .$M_MSG_NUM:	    resw 1		;;AN000;;
 33434 0000004A ????                     .$M_DIVISOR:	    resw 1		;;AN000;; Default = 10 (must be a WORD for division)
 33435 0000004C <res 40h>                .$M_TEMP_BUF:	    resb $M_TEMP_BUF_SZ	;;AN000;; Temporary buffer
 33436 0000008C ??                       .$M_BUF_TERM:	    resb 1		;;AN000;;
 33437                                   .size:
 33438                                  endstruc				;;AN000;;
 33439                                  
 33440                                  $M_RES_ADDRS_SZ	EQU $M_RES_ADDRS.size	;;AN000;;
 33441                                  
 33442                                  ;; Important fields of the Get Country Information call
 33443                                  
 33444                                  struc $M_COUNTRY_INFO			;;AN000;; Expected Country infomation
 33445 00000000 <res 4Ch>                .$M_HEADER:	    resb $M_RES_ADDRS_SZ-$M_TEMP_BUF_SZ-1
 33446                                  					;;AN000;; Go past first part of struc
 33447 0000004C ????                     .$M_DATE_FORMAT:   resw 1		;;AN000;; <------- Date Format
 33448 0000004E ??????????               .$M_CURR_SEPARA:   resb 5		;;AN000;;
 33449 00000053 ????                     .$M_THOU_SEPARA:   resb 2		;;AN000;; <------- Thou Separator
 33450 00000055 ????                     .$M_DECI_SEPARA:   resb 2		;;AN000;; <------- Decimal Separator
 33451 00000057 ????                     .$M_DATE_SEPARA:   resb 2		;;AN000;; <------- Date Separator
 33452 00000059 ????                     .$M_TIME_SEPARA:   resb 2		;;AN000;; <------- Time Separator
 33453 0000005B ??                       .$M_CURR_FORMAT:   resb 1		;;AN000;;
 33454 0000005C ??                       .$M_SIG_DIGS_CU:   resb 1		;;AN000;;
 33455 0000005D ??                       .$M_TIME_FORMAT:   resb 1		;;AN000;; <------- Time Format
 33456                                  endstruc				;;AN000;;
 33457                                  
 33458                                  ; ---------------------------------------------------------------------------
 33459                                  
 33460                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33461                                  ;;
 33462                                  ;;	PROC NAME: SYSLOADMSG
 33463                                  ;;
 33464                                  ;;	FUNCTION:
 33465                                  ;;	INPUTS:
 33466                                  ;;
 33467                                  ;;	OUTPUTS:
 33468                                  ;;
 33469                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33470                                  
 33471                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33472                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5107h
 33473                                  
 33474                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33475                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:58CBh
 33476                                  
 33477                                  SYSLOADMSG:
 33478 00005618 50                      	push	ax				;;AN000;
 33479 00005619 53                      	push	bx				;;AN000;
 33480 0000561A 52                      	push	dx				;;AN000;
 33481 0000561B 06                      	push	es				;;AN000;
 33482 0000561C 57                      	push	di				;;AN000;
 33483 0000561D 31C9                    	xor	cx,cx				;;AN000;  Reset to zero
 33484 0000561F 8EC1                    	mov	es,cx				;;AN000;
 33485 00005621 31FF                    	xor	di,di				;;AN000;
 33486 00005623 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33487 00005626 B200                    	mov	dl,0 ; DOS_GET_EXTENDED		;;AN000;; Where are the Extended errors in COMMAND.COM
 33488 00005628 CD2F                    	int	2Fh				;;AN000;; Private interface
 33489                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33490                                  		; DL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)
 33491                                  		; Return: ES:DI -> error table
 33492                                  	
 33493 0000562A 8C06[499A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2],es
 33494                                  	;mov	[$M_RT+10],es			;;AN000;; Move into first avaliable table location
 33495 0000562E 893E[479A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND],di
 33496                                  	;mov	[$M_RT+8],di			;;AN000;;
 33497                                  
 33498 00005632 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33499 00005635 B202                    	mov	dl,2 ; DOS_GET_PARSE		;;AN000;; Where are the Parse errors in COMMAND.COM
 33500 00005637 CD2F                    	int	2Fh				;;AN000;; Private interface
 33501                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33502                                  		; DL = subfunction - get critical/SHARE error table (errors 13h-2Bh)
 33503                                  		; ES:DI -> error table
 33504                                  
 33505 00005639 8C06[519A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2],es
 33506                                  	;mov	[$M_RT+18],es			;;AN000;; Move into first avaliable table location
 33507 0000563D 893E[4F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND],di
 33508                                  	;mov	[$M_RT+16],di			;;AN000;;
 33509                                  
 33510 00005641 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33511 00005644 B204                    	mov	dl,4 ; DOS_GET_CRITICAL		;;AN000;; Where are the Critical errors in COMMAND.COM
 33512 00005646 CD2F                    	int	2Fh				;;AN000;; Private interface
 33513                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33514                                  		; DL = subfunction - get ??? error table
 33515                                  		; ES:DI -> error table
 33516                                  
 33517 00005648 8C06[619A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2],es
 33518                                  	;mov	[$M_RT+34],es			;;AN000;; Move into first avaliable table location
 33519 0000564C 893E[5F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND],di
 33520                                  	;mov	[$M_RT+32],di			;;AN000;;
 33521                                  
 33522 00005650 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33523 00005653 B206                    	mov	dl,6 ; DOS_GET_FILE		;;AN001;; Where are the FILE dependant in IFSFUNC.EXE
 33524 00005655 CD2F                    	int	2Fh					     ;;AN001;; Private interface
 33525                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33526                                  		; DL = subfunction - get ??? error table
 33527                                  		; ES:DI -> error table
 33528                                  
 33529 00005657 8C06[459A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2],es
 33530                                  	;mov	[$M_RT+6],es			;;AN001;; Move into first avaliable table location
 33531 0000565B 893E[439A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE],di
 33532                                  	;mov	[$M_RT+4],di			;;AN001;;
 33533                                  
 33534 0000565F E86A3B                  	call	$M_MSGSERV_1			;;AN000;; Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)
 33535                                  						;;AN000;;
 33536 00005662 8C06[419A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2],es
 33537                                  	;mov	[$M_RT+2],es			;;AN000;; Move into first avaliable table location
 33538 00005666 893E[3F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS],di
 33539                                  	;mov	[$M_RT+0],di			;;AN000;;
 33540 0000566A 8C06[5D9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2],es
 33541                                  	;mov	[$M_RT+30],es			;;AN000;; Move into first avaliable table location
 33542 0000566E 893E[5B9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS],di
 33543                                  	;mov	[$M_RT+28],di			;;AN000;;
 33544                                  
 33545 00005672 E8753B                  	call	$M_MSGSERV_2			;;AN000;; Get addressibility to MSGSERV CLASS 2 (PARSE Errors)
 33546                                  
 33547 00005675 8C06[559A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2],es
 33548                                  	;mov	[$M_RT+22],es			;;AN000;; Move into first avaliable table location
 33549 00005679 893E[539A]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS],di
 33550                                  	;mov	[$M_RT+20],di			;;AN000;;
 33551                                  
 33552 0000567D B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33553 00005680 B208                    	mov	dl,8 ; DOS_GET_ADDR 		;;AN001;; Where is the READ_DISK_PROC in COMMAND.COM
 33554 00005682 CD2F                    	int	2Fh				;;AN001;; Private interface
 33555                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33556                                  		; DL = subfunction - get ??? error table
 33557                                  		; ES:DI -> error table
 33558                                  
 33559 00005684 8C06[699A]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2],es
 33560                                  	;mov	[$M_RT+42],es			;;AN001;; Move into first avaliable table location
 33561 00005688 893E[679A]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],di
 33562                                  	;mov	[$M_RT+40],di			;;AN001;;
 33563                                  
 33564                                  ;M016; M020
 33565                                  ; Reinitialize the CR-LF string. Also, reinit the buffer terminator just to
 33566                                  ;be safe. Initialize $M_MSG_NUM and $M_DIVISOR also.
 33567                                  
 33568 0000568C C706[829A]0D0A          	mov	word [$M_RT+$M_RES_ADDRS.$M_CRLF],0A0Dh
 33569                                  	;mov	word [$M_RT+67],0A0Dh		; Reinit CR-LF ;M016
 33570 00005692 C606[CB9A]24            	mov	byte [$M_RT+$M_RES_ADDRS.$M_BUF_TERM],'$'
 33571                                  	;mov	word [$M_RT+140],'$'		; Reinit buffer end;M016
 33572 00005697 C706[879A]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 33573                                  	;mov	word [$M_RT+72],0		; M020
 33574 0000569D C706[899A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 33575                                  	;mov	word [$M_RT+74],10		; M020
 33576                                  
 33577                                  	; 07/04/2023 - Retro DOS v4.0 COMMAND.COM
 33578                                  	; --------------------------
 33579                                  	; MSDOS 6.0 SYSMSG.INC, 1991
 33580                                  	; --------------------------
 33581                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP5192h
 33582                                  
 33583                                  	;$M_BUILD_PTRS %$M_NUM_CLS     		;;AN000;; Build all utility classes	
 33584 000056A3 E8C33A                  	call    $M_CLS_3			; Get addressibility to class F
 33585 000056A6 893E[6B9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS],di
 33586                                  	;mov	[$M_RT+44],di
 33587                                  	
 33588 000056AA E80600                  	CALL	$M_GET_DBCS_VEC 		;;AN000;; Save the DBCS vector
 33589                                  
 33590                                  	; 15/04/2023
 33591                                  	;clc					;;AN000;; Make sure carry is clear
 33592                                  	;jc	short $MIF20
 33593                                  	
 33594 000056AD 5F                      	pop	di				;;AN000;; Restore REGS
 33595 000056AE 07                      	pop	es				;;AN000;;
 33596 000056AF 5A                      	pop	dx				;;AN000;;
 33597 000056B0 5B                      	pop	bx				;;AN000;;
 33598 000056B1 58                      	pop	ax				;;AN000;;
 33599                                  	;jmp	short $MEN20
 33600                                  	; 15/04/2023
 33601 000056B2 C3                      	retn
 33602                                  
 33603                                  	; 15/04/2023
 33604                                  ;$MIF20:
 33605                                  	;add	sp,10				;;AN000;;
 33606                                  	;stc					;;AN000;; Reset carry flag
 33607                                  ;$MEN20:
 33608                                  	;retn					;;AN000;;
 33609                                  
 33610                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33611                                  ;;
 33612                                  ;;  Proc Name:	$M_GET_DBCS_VEC
 33613                                  ;;
 33614                                  ;;  Function:	Get the DBCS vector and save it for later use
 33615                                  ;;
 33616                                  ;;  Inputs:	None
 33617                                  ;;
 33618                                  ;;  Outputs:	None
 33619                                  ;;
 33620                                  ;;  Regs Changed:
 33621                                  ;;
 33622                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33623                                  
 33624                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33625                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33626                                  $M_GET_DBCS_VEC:
 33627 000056B3 50                      	push	ax				;;AN000;; Save character to check
 33628 000056B4 56                      	push	si				;;AN000;;
 33629 000056B5 1E                      	push	ds				;;AN000;;
 33630 000056B6 B80063                  	mov	ax,6300h ;DOS_GET_DBCS_INFO	;;AN000;; DOS function to get DBSC environment
 33631 000056B9 CD21                    	int	21h				;;AN000;; Get environment pointer
 33632 000056BB 1E                      	push	ds				;;AN000;; Get environment pointer
 33633 000056BC 07                      	pop	es				;;AN000;; Get environment pointer
 33634 000056BD 1F                      	pop	ds				;;AN000;; Get environment pointer
 33635 000056BE 7208                    	jc	short $MIF23
 33636                                  	
 33637 000056C0 8936[7B9A]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC],si
 33638                                  	;mov	word [$M_RT+60],si		;;AN000;; Save DBCS Vector
 33639 000056C4 8C06[7D9A]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC+2],es
 33640                                  	;mov	word [$M_RT+62],es		;;AN000;;
 33641                                  $MIF23:
 33642 000056C8 5E                      	pop	si				;;AN000;;
 33643 000056C9 58                      	pop	ax				;;AN000;; Retrieve character to check
 33644 000056CA C3                      	retn					;;AN000;; Return
 33645                                  
 33646                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33647                                  ;;
 33648                                  ;;  Proc Name:	SYSGETMSG
 33649                                  ;;
 33650                                  ;;  Function:	The GET service returns the segment, offset and size of the
 33651                                  ;;		message text to the caller based on a message number.
 33652                                  ;;		The GET function will not display the message thus assumes
 33653                                  ;;		caller will handle replaceable parameters.
 33654                                  ;;
 33655                                  ;;  Inputs:
 33656                                  ;;
 33657                                  ;;  Outputs:
 33658                                  ;;
 33659                                  ;;  Psuedocode:
 33660                                  ;;		Call $M_GET_MSG_ADDRESS
 33661                                  ;;		IF MSG_NUM exists THEN
 33662                                  ;;		   Set DS:SI = MSG_TXT_PTR + 1
 33663                                  ;;		   CARRY_FLAG = 0
 33664                                  ;;		ELSE
 33665                                  ;;		   CARRY_FLAG = 1
 33666                                  ;;		ENDIF
 33667                                  ;;
 33668                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33669                                  
 33670                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33671                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33672                                  
 33673                                  	utility_msg_class equ 0FFh ; 18/04/2023
 33674                                  
 33675                                  SYSGETMSG:
 33676                                  	;; Save registers needed later
 33677 000056CB 50                      	push	ax				;;AN000;; Save changed regs
 33678 000056CC 06                      	push	es				;;AN000;;
 33679 000056CD 57                      	push	di				;;AN000;;
 33680 000056CE 55                      	push	bp				;;AN000;;
 33681                                  
 33682 000056CF E81400                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 33683 000056D2 720D                    	jc	short $MIF31
 33684                                  	
 33685 000056D4 80FEFF                  	cmp	dh,utility_msg_class ; 0FFh	;;AN000;; Were utility messages requested?
 33686                                  	;clc					;;AN000;;
 33687 000056D7 7404                    	je	short $MIF32			;;AN000;;
 33688                                  	; 15/06/2023
 33689 000056D9 F8                      	clc	
 33690                                  
 33691 000056DA 06                      	push	es				;;AN000;;
 33692                                  	;pop	ds				;;AN000;;
 33693 000056DB EB01                    	jmp	short $MEN32
 33694                                  $MIF32:
 33695 000056DD 0E                      	push	cs				;;AN000;;			
 33696                                  	;pop	ds				;;AN000;;
 33697                                  $MEN32:
 33698                                  	; 07/04/2023
 33699 000056DE 1F                      	pop	ds
 33700 000056DF 89FE                    	mov	si,di				;;AN000;; Return message in DS:SI
 33701                                  $MIF31:
 33702 000056E1 5D                      	pop	bp				;;AN000;; Restore changed regs
 33703 000056E2 5F                      	pop	di				;;AN000;;
 33704 000056E3 07                      	pop	es				;;AN000;;
 33705 000056E4 58                      	pop	ax				;;AN000;;
 33706 000056E5 C3                      	retn					;;AN000;; Return
 33707                                  
 33708                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33709                                  ;;
 33710                                  ;;	PROC NAME: $M_GET_MSG_ADDRESS
 33711                                  ;;
 33712                                  ;;	FUNCTION:  To scan thru classes to return pointer to the message header
 33713                                  ;;	INPUTS:    Access to $M_RES_ADDRESSES
 33714                                  ;;	OUTPUTS:   IF CX = 0 THEN Message was not found
 33715                                  ;;		   IF CX > 1 THEN ES:DI points to the specified message
 33716                                  ;;	REGS CHANGED: ES,DI,CX
 33717                                  ;;
 33718                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33719                                  
 33720                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33721                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33722                                  $M_GET_MSG_ADDRESS:
 33723 000056E6 56                      	push	si				;;AN000;;
 33724 000056E7 53                      	push	bx				;;AN000;;
 33725 000056E8 31F6                    	xor	si,si				;;AN000;; Use SI as an index
 33726 000056EA 31C9                    	xor	cx,cx				;;AN000;; Use CX as an size
 33727                                  $MDO36:
 33728 000056EC 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Were utility messages requested?
 33729 000056EF 7508                    	jne	short $MIF37			;;AN000;; No
 33730                                  
 33731                                  	; 07/04/2023
 33732                                  	;;mov	di,[si+89CAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33733 000056F1 8BBC[6B9A]              	mov	di,[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
 33734                                  	;mov	di,[si+$M_RT+44]		;;AN000;; Get address of class
 33735 000056F5 89FB                    	mov	bx,di				;;AN000;;
 33736 000056F7 EB21                    	jmp	short $MEN37
 33737                                  $MIF37:
 33738 000056F9 F6C602                  	test	dh,2 ; parse_err_class		;;AN000;; Were parse errors requested?
 33739 000056FC 7406                    	jz	short $MIF39
 33740                                  	
 33741                                  	; 07/04/2023
 33742                                  	;;les	di,[si+89AEh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33743 000056FE C4BC[4F9A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]
 33744                                  	;les	di,[si+$M_RT+16]		;;AN000;; Get address of class
 33745                                  
 33746                                  	; 07/04/2023
 33747                                  	;mov	bx,es ; *			;;AN000;;
 33748 00005702 EB14                    	jmp	short $MEN39
 33749                                  $MIF39:
 33750 00005704 83F813                  	cmp	ax,19 ; $M_CRIT_LO		;;AN000;; Is this a critical error?
 33751 00005707 720B                    	jnae	short $MIF41  ; jb short $MIF41 ;;AN000;;
 33752                                  
 33753 00005709 83F827                  	cmp	ax,39 ; $M_CRIT_HI		;;AN000;;
 33754 0000570C 7706                    	jnbe	short $MIF41  ; ja short $MIF41 ;;AN000;;
 33755                                  
 33756                                  	; 07/04/2023
 33757                                  	;;les	di,[si+89BAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33758 0000570E C4BC[5B9A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]
 33759                                  	;les	di,[si+$M_RT+28]		;;AN000;; Get address of class
 33760                                  	
 33761                                  	; 07/04/2023
 33762                                  	;mov	bx,es ; *			;;AN000;;
 33763 00005712 EB04                    	jmp	short $MEN41
 33764                                  $MIF41:
 33765                                  	; 07/04/2023
 33766                                  	;;les	di,[si+899Eh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33767 00005714 C4BC[3F9A]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]
 33768                                  	;les	di,[si+$M_RT+0]			;;AN000;; Get address of class
 33769                                  	
 33770                                  	; 07/04/2023
 33771                                  	;mov	bx,es ; *			;;AN000;;
 33772                                  $MEN41:
 33773                                  $MEN39:
 33774                                  	; 07/04/2023
 33775 00005718 8CC3                    	mov	bx,es ; *
 33776                                  $MEN37:						;;AN000;;
 33777 0000571A 83FBFF                  	cmp	bx,-1 ; $M_TERMINATING_FLAG	;;AN000;; Are we finished all classes?
 33778 0000571D 7515                    	jne	short $MIF46			;;AN000;; No
 33779                                  
 33780 0000571F 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Was it a UTILITY class?
 33781 00005722 7503                    	jne	short $MIF47			;;AN000;; No
 33782 00005724 F9                      	stc		     ; **-		;;AN000;; Set the carry flag
 33783                                  	; 07/04/2023
 33784                                  	;jmp	short $MEN47 ; **-
 33785 00005725 EB1B                    	jmp	short $MEN36 ; **-
 33786                                  $MIF47:
 33787 00005727 A3[879A]                	mov	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],ax
 33788                                  	;mov	[$M_RT+72],ax			;;AN000;; Save message number
 33789 0000572A B8FFFF                  	mov	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN000;; Set special message number
 33790 0000572D BD0100                  	mov	bp,1 ; $M_ONE_REPLACE		;;AN000;; Set one replace in message
 33791 00005730 31F6                    	xor	si,si				;;AN000;; Reset the SI index to start again
 33792                                  	; 28/04/2023
 33793                                  	; 07/04/2023
 33794                                  	;clc	; **+				;;AN000;;
 33795                                  ;$MEN47:
 33796                                  	;jmp	short $MEN46 ; ***
 33797 00005732 EB0A                    	jmp	short $MEN47 ; ***
 33798                                  $MIF46:
 33799                                  	;cmp	bx,0 ; $M_CLASS_NOT_EXIST	;;AN000;; Does this class exist?
 33800 00005734 21DB                    	and	bx,bx ; 0 ?
 33801 00005736 7403                    	jz	short $MIF51			;;AN000;; No
 33802                                  	
 33803 00005738 E84D00                  	call	$M_FIND_SPECIFIED_MSG		;;AN000;; Try to find the message
 33804                                  $MIF51:
 33805 0000573B 83C604                  	add	si,4 ; $M_ADDR_SZ_FAR 		;;AN000;; Get next class
 33806                                  	; 07/04/2023
 33807                                  	;clc					;;AN000;;
 33808                                  ;$MEN46:
 33809                                  	;jc	short $MEN36 ; **- ; **+	;;AN000;;
 33810                                  $MEN47:	; 07/04/2023	; **+
 33811 0000573E 09C9                    	or	cx,cx				;;AN000;; Was the message found?
 33812                                  	;jnz	short $MXL2			;;AN000;; Yes
 33813                                  	;jmp	short $MDO36
 33814                                  	; 07/04/2023
 33815 00005740 74AA                    	jz	short $MDO36	
 33816                                  $MXL2:
 33817                                  $MEN36:
 33818 00005742 9C                      	pushf 					;;AN006;; Save the flag state
 33819                                  	
 33820 00005743 80FE01                  	cmp	dh,1 ; EXT_ERR_CLASS		;;AN006;; Was an extended error requested?
 33821                                  	;jne	short $MIF56			;;AN006;; No
 33822                                  	; 28/04/2023
 33823 00005746 752A                    	jne	short $M_MYRET	
 33824                                  
 33825 00005748 52                      	push	dx				;;AN006;; Save all needed registers
 33826 00005749 55                      	push	bp				;;AN006;;
 33827 0000574A 51                      	push	cx				;;AN006;;
 33828 0000574B 06                      	push	es				;;AN006;;
 33829 0000574C 57                      	push	di				;;AN006;;
 33830 0000574D 50                      	push	ax				;;AN006;;
 33831                                  
 33832 0000574E B80005                  	mov	ax,500h ; IFSFUNC_INSTALL_CHECK	;;AN006;; Check if IFSFUNC is installed
 33833 00005751 CD2F                    	int	2Fh				;;AN006;;
 33834                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
 33835                                  		; Return: AL = 00h not installed, OK to install
 33836                                  		; 01h not installed, can't install
 33837                                  		; FFh installed
 33838                                  
 33839 00005753 3CFF                    	cmp	al,0FFh ; IFSFUNC_INSTALLED	;;AN006;; Is it installed?
 33840 00005755 58                      	pop	ax				;;AN006;; Restore msg number
 33841 00005756 7513                    	jne	short $MIF57			;;AN006;; No (not installed)
 33842                                  
 33843 00005758 89C3                    	mov	bx,ax				;;AN006;; BX is the extended error number
 33844 0000575A B80205                  	mov	ax,502h ; IFS_GET_ERR_TEXT	;;AN006;; AX is the muliplex number
 33845 0000575D CD2F                    	int	2Fh				;;AN006;; Call IFSFUNC
 33846                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER
 33847                                  
 33848                                  	;jmp	short $MEN57			;;AN006;;
 33849                                  	; 28/04/2023
 33850 0000575F 720B                    	jc	short $MEN57
 33851                                  $MIF60:
 33852 00005761 83C406                  	add	sp,6				;;AN006;; Throw away old pointer
 33853 00005764 E81200                  	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 33854                                  $MEN60:
 33855 00005767 5D                      	pop	bp				;;AN006;; Restore other Regs
 33856 00005768 5A                      	pop	dx				;;AN006;;
 33857                                  $MIF56:
 33858                                  	; 07/04/2023
 33859                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 33860 00005769 EB07                    	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 33861                                  
 33862                                  $MIF57:
 33863 0000576B F9                      	stc					;;AN006;; Carry conditon
 33864                                  $MEN57:
 33865                                  	; 28/04/2023
 33866                                  	;jnc	short $MIF60			;;AN006;;
 33867                                  
 33868 0000576C 5F                      	pop	di				;;AN006;;
 33869 0000576D 07                      	pop	es				;;AN006;; Restore old pointer
 33870 0000576E 59                      	pop	cx				;;AN006;;
 33871 0000576F EBF6                    	jmp	short $MEN60
 33872                                  
 33873                                  ;$MIF60:
 33874                                  ;	add	sp,6				;;AN006;; Throw away old pointer
 33875                                  ;	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 33876                                  ;$MEN60:
 33877                                  ;	pop	bp				;;AN006;; Restore other Regs
 33878                                  ;	pop	dx				;;AN006;;
 33879                                  ;$MIF56:
 33880                                  ;	; 07/04/2023
 33881                                  ;	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 33882                                  ;	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 33883                                  
 33884                                  ; 07/04/2023
 33885                                  ; ---------------------------
 33886                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 33887                                  ; ---------------------------
 33888                                  	; $M_POPF macro
 33889                                  	;jmp	short $+3
 33890                                  m_popf_iret:
 33891 00005771 CF                      	iret
 33892                                  $M_MYRET:
 33893 00005772 0E                      	push	cs
 33894 00005773 E8FBFF                  	call	m_popf_iret
 33895                                  	;;; end macro	
 33896                                  ; ---------------------------
 33897                                  
 33898 00005776 5B                      	pop	bx				;;AN000;;
 33899 00005777 5E                      	pop	si				;;AN000;;
 33900 00005778 C3                      	retn					;;AN000;; Return ES:DI pointing to the message
 33901                                  
 33902                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33903                                  
 33904                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33905                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33906                                  $M_SET_LEN_IN_CX:			
 33907 00005779 57                      	push	di				;;AN006;; Save position
 33908 0000577A 50                      	push	ax				;;AN006;;
 33909 0000577B B9FFFF                  	mov	cx,-1 ; 65535 ; 0FFFFh		;;AN006;; Set CX for decrements
 33910 0000577E 30C0                    	xor	al,al				;;AN006;; Prepare compare register
 33911 00005780 F2AE                    	repne	scasb				;;AN006;; Scan for zero
 33912 00005782 F7D1                    	not	cx				;;AN006;; Change decrement into number
 33913 00005784 49                      	dec	cx				;;AN006;; Don't include the zero
 33914 00005785 58                      	pop	ax				;;AN006;;
 33915 00005786 5F                      	pop	di				;;AN006;; Restore position
 33916 00005787 C3                      	retn					;;AN006;;
 33917                                  
 33918                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33919                                  ;;
 33920                                  ;;	PROC NAME: $M_FIND_SPECIFIED_MSG
 33921                                  ;;
 33922                                  ;;	FUNCTION:  To scan thru message headers until message is found
 33923                                  ;;	INPUTS:    ES:DI points to beginning of msg headers
 33924                                  ;;		   CX contains the number of messages in class
 33925                                  ;;		   DH contains the message class
 33926                                  ;;	OUPUTS:    IF CX = 0 THEN Message was not found
 33927                                  ;;		   IF CX > 1 THEN ES:DI points to header of specified message
 33928                                  ;;
 33929                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33930                                  
 33931                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33932                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 33933                                  $M_FIND_SPECIFIED_MSG:
 33934 00005788 83FB01                  	cmp	bx,1				;;AN004;; Do we have an address to CALL?
 33935 0000578B 751F                    	jne	short $MIF64
 33936 0000578D 833E[679A]FF            	cmp	word [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1
 33937                                  	;cmp	word [$M_RT+40],-1 ; 0FFFFh	;;AN004;; Do we have an address to CALL?
 33938                                  	; 15/06/2023
 33939 00005792 7418                    	je	short $MIF64
 33940                                  
 33941 00005794 83F8FF                  	cmp	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN004;; Are we displaying a default Ext Err?
 33942 00005797 750B                    	jne	short $MIF65
 33943                                  	
 33944 00005799 50                      	push	ax				;;AN004;; Reset the special message number
 33945 0000579A A1[879A]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 33946                                  	;mov	ax,[$M_RT+72]			;;AN004;; Get the old message number
 33947 0000579D FF1E[679A]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 33948                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 33949 000057A1 58                      	pop	ax				;;AN004;; Reset the special message number
 33950                                  	; 28/04/2023
 33951 000057A2 EB04                    	jmp	short $MEN65
 33952                                  	; 18/04/2023
 33953                                  	;jmp	short $MEN64
 33954                                  $MIF65:
 33955 000057A4 FF1E[679A]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 33956                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 33957                                  $MEN65:
 33958                                  	; 28/04/2023
 33959 000057A8 7344                    	jnc	short $MIF75
 33960                                  	;
 33961 000057AA EB19                    	jmp	short $MEN64 ; $MDO76		;;AN004;;
 33962                                  $MIF64:
 33963 000057AC 31C9                    	xor	cx,cx				;;AN002;; CX = 0 will allow us to
 33964 000057AE 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 33965 000057B1 7406                    	je	short $MIF69
 33966                                  	
 33967 000057B3 268A4D03                	mov	cl,[es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 33968                                  	;mov	cl,[es:di+3]			;;AN001;; Get number of messages in class
 33969 000057B7 EB09                    	jmp	short $MEN69
 33970                                  $MIF69:
 33971                                  	;cmp	[cs:di+$M_CLASS_ID.$M_CLS_ID],dh
 33972                                  	;cmp	[cs:di+0],dh
 33973 000057B9 2E3835                  	cmp	[cs:di],dh			;;AN002;; Check if class still exists at
 33974 000057BC 7504                    	jne	short $MIF71
 33975                                  
 33976 000057BE 2E8A4D03                	mov	cl,[cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 33977                                  	;mov	cl,[cs:di+3]			;;AN000;; Get number of messages in class
 33978                                  $MIF71:						;;AN001;;
 33979                                  $MEN69:
 33980 000057C2 83C704                  	add	di,$M_CLASS_ID_SZ ; add di,4	;;AN000;; Point past the class header
 33981                                  	; 02/05/2023
 33982                                  	;stc					;;AN004;; Flag that we haven't found anything yet
 33983                                  $MEN64:
 33984                                  	;jnc	short $MIF75
 33985                                  	; 28/04/2023
 33986                                  	; (or instruction clears carry flag)
 33987                                  	;clc					;;AN004;; No, reset carry
 33988                                  $MDO76:
 33989 000057C5 09C9                    	or	cx,cx				;;AN000;; Do we have any to check?
 33990 000057C7 7417                    	jz	short $MEN76
 33991                                  
 33992 000057C9 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 33993 000057CC 7405                    	je	short $MIF78
 33994                                  
 33995                                  	;cmp	ax,[es:di+$M_ID.$M_NUM]		;;AN001;; Is this the message requested?
 33996 000057CE 263B05                  	cmp	ax,[es:di]
 33997 000057D1 EB03                    	jmp	short $MEN78
 33998                                  $MIF78:
 33999                                  	;cmp	ax,[cs:di+$M_ID.$M_NUM]		;;AN000;; Is this the message requested?
 34000 000057D3 2E3B05                  	cmp	ax,[cs:di]
 34001                                  $MEN78:
 34002                                  	;jne	short $MIF76
 34003                                  	;jmp	short $MSR76
 34004                                  	; 07/04/2023
 34005 000057D6 740B                    	je	short $MSR76 ; *
 34006                                  $MIF76:
 34007 000057D8 49                      	dec	cx				;;AN000;; No, well do we have more to check?
 34008 000057D9 7405                    	jz	short $MEN76
 34009                                  
 34010 000057DB 83C704                  	add	di,$M_ID_SZ ; add di,4		;;AN000;; Yes, skip past msg header
 34011 000057DE EBE5                    	jmp	short $MDO76			;;AN000;;
 34012                                  $MEN76:
 34013 000057E0 F9                      	stc					;;AN000;;
 34014                                  ;$MSR76:	; 07/04/2023
 34015                                  	;jc	short $MIF86			;;AN000;;
 34016                                  	; 07/04/2023
 34017                                  	;jc	short $MIF91
 34018 000057E1 EB11                    	jmp	short $MIF91 ;*
 34019                                  $MSR76:	; 07/04/2023 ; *	
 34020 000057E3 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;; Yes, is it a utility message?
 34021                                  	; 07/04/2023
 34022                                  	;clc					;;AN001;;
 34023 000057E6 7502                    	jne	short $MIF87
 34024                                  
 34025 000057E8 0E                      	push	cs				;;AN000;;
 34026 000057E9 07                      	pop	es				;;AN000;; Return ES:DI pointing to the message
 34027                                  $MIF87:
 34028                                  	;add	di,[es:di+2]
 34029 000057EA 26037D02                	add	di,[es:di+$M_ID.$M_TXT_PTR]     ;;AN000;; Prepare ES:DI pointing to the message
 34030                                  $MIF86:
 34031                                  ;$MIF75:
 34032                                  	; 02/05/2023
 34033                                  	;jc	short $MIF91
 34034                                  $MIF75:	; 28/04/2023
 34035 000057EE 30ED                    	xor	ch,ch				;;AN000;;
 34036 000057F0 268A0D                  	mov	cl,[es:di]			;;AN000;; Move size into CX
 34037 000057F3 47                      	inc	di				;;AN000;; Increment past length
 34038                                  $MIF91:
 34039 000057F4 C606[819A]00            	mov	byte [$M_RT+$M_RES_ADDRS.$M_SIZE],0 ; $M_NULL
 34040                                  	;mov	byte [$M_RT+66],0		;;AN004;; Reset variable
 34041 000057F9 C3                      	retn					;;AN000;; Return
 34042                                  
 34043                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34044                                  ;;
 34045                                  ;;  Proc Name:	SYSDISPMSG
 34046                                  ;;
 34047                                  ;;  Function:	The DISPLAY service will output a defined message to a handle
 34048                                  ;;		requested by the caller. It also provides function to display
 34049                                  ;;		messages when handles are not applicable (ie. DOS function calls
 34050                                  ;;		00h to 0Ah) Replaceable parameters are allowed and are
 34051                                  ;;		defined previous to entry.
 34052                                  ;;
 34053                                  ;;		It is assumes that a PRELOAD function has already determined
 34054                                  ;;		the addressibilty internally to the message retriever services.
 34055                                  ;;  Inputs:
 34056                                  ;;
 34057                                  ;;  Outputs:
 34058                                  ;;
 34059                                  ;;  Psuedocode:
 34060                                  ;;		Save registers needed later
 34061                                  ;;		Get address of the message requested
 34062                                  ;;		IF Message number exists THEN
 34063                                  ;;		  IF replacable parameters were specified THEN
 34064                                  ;;		     Display message with replacable parms
 34065                                  ;;		  ELSE
 34066                                  ;;		     Display string without replacable parms
 34067                                  ;;		  ENDIF
 34068                                  ;;		  IF character input was requested THEN
 34069                                  ;;		     Wait for character input
 34070                                  ;;		  ENDIF
 34071                                  ;;		  Clear CARRY FLAG
 34072                                  ;;		ELSE
 34073                                  ;;		   Set CARRY FLAG
 34074                                  ;;		ENDIF
 34075                                  ;;		Return
 34076                                  ;;
 34077                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34078                                  
 34079                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34080                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5307h
 34081                                  	;
 34082                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34083                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5ACBh
 34084                                  SYSDISPMSG:
 34085                                  	;; Save registers and values needed later
 34086 000057FA 50                      	push	ax				;;AN000;; Save changed REGs
 34087 000057FB 53                      	push	bx				;;AN000;;
 34088 000057FC 51                      	push	cx				;;AN000;;
 34089 000057FD 55                      	push	bp				;;AN000;;
 34090 000057FE 57                      	push	di				;;AN000;; Save pointer to input buffer (offset)
 34091 000057FF 06                      	push	es				;;AN000;; Save pointer to input buffer (segment)
 34092 00005800 52                      	push	dx				;;AN000;; Save Input/Class request
 34093                                  
 34094 00005801 89CD                    	mov	bp,cx				;;AN000;; Use BP to hold replace count
 34095 00005803 891E[7F9A]              	mov	[$M_RT+$M_RES_ADDRS.$M_HANDLE],bx
 34096                                  	;mov	[$M_RT+64],bx			;;AN000;; Save handle
 34097 00005807 8836[849A]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS],dh
 34098                                  	;mov	[$M_RT+69],dh			;;AN004;; Save class
 34099                                  
 34100                                  	;; Get address of the message requested
 34101 0000580B E8D8FE                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 34102                                  
 34103 0000580E 09C9                    	or	cx,cx				;;AN000;; Was message found?
 34104 00005810 7427                    	jz	short $MIF93
 34105                                  						;;AN000;; Yes, Message address in ES:DI
 34106                                  	
 34107                                  	;; Test if replacable parameters were specified
 34108 00005812 09ED                    	or	bp,bp				;;AN000;; Were replacable parameters requested
 34109 00005814 7505                    	jnz	short $MIF94
 34110                                  
 34111                                  	;; Display string without replacable parms
 34112 00005816 E82800                  	call	$M_DISPLAY_STRING		;;AN000;; No, great . . . Display message
 34113 00005819 EB03                    	jmp	short $MEN94
 34114                                  $MIF94:
 34115                                  	;; Display message with replacable parms
 34116 0000581B E88B01                  	call	$M_DISPLAY_MESSAGE		;;AN000;; Display the message with substitutions
 34117                                  $MEN94:
 34118 0000581E 7214                    	jc	short $MIF97
 34119 00005820 5A                      	pop	dx				;;AN000;; Get Input/Class request
 34120 00005821 E8FC00                  	call	$M_ADD_CRLF 			;;AN004;; Check if we need to add the CR LF chars.
 34121 00005824 07                      	pop	es				;;AN000;; Get location of input buffer (if specified)
 34122 00005825 5F                      	pop	di				;;AN000;;
 34123                                  	
 34124                                  ; 15/06/2023 - MSDOS 5.0
 34125                                  ;	;jmp	short $MEN97 ; ***
 34126                                  ;	; 08/04/2023
 34127                                  ;	;jmp	short $MEN93 ; **
 34128                                  ;
 34129                                  ;	; 08/04/2023
 34130                                  ;;$MEN93:
 34131                                  ;	jc	short $MIF104
 34132                                  
 34133                                  	; 15/06/2023 Retro DOS v4.2 COMMAND.COM
 34134                                   	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5AF7h
 34135                                  
 34136                                  	; MSDOS 6.0 (MSDOS 6.22)
 34137                                  	; Test if character input was requested	;;AN000;;
 34138 00005826 08D2                    	or	dl,dl
 34139 00005828 7403                    	jz	short $MIF98
 34140                                  	;jz	short $MEN98 ; *
 34141                                  
 34142 0000582A E88E05                  	call	$M_WAIT_FOR_INPUT	; MSDOS 6.0 (to 6.22)
 34143                                  	; cf = 0 ; *
 34144                                  $MIF98:
 34145                                  	;jmp	short $MEN97
 34146                                  	;;jc	short $MIF104 ; *
 34147                                  $MEN98:
 34148                                  ;$MEN97:
 34149 0000582D 5D                      	pop	bp				;;AN000;;
 34150 0000582E 59                      	pop	cx				;;AN000;;
 34151 0000582F 5B                      	pop	bx				;;AN000;;
 34152                                  	; 15/06/2023
 34153                                  	;pop	ax	; MSDOS 5.0		;;AN000;;
 34154 00005830 83C402                  	add	sp,2	; MSDOS 6.0 (to 6.22)
 34155 00005833 C3                      	retn
 34156                                   
 34157                                  $MIF97:
 34158                                  	; 08/04/2023
 34159                                  	;add	sp,6				;;AN000;;
 34160                                  	;stc					;;AN000;; Reset carry flag
 34161                                  ;$MEN97: ; ***
 34162                                  	;jmp	short $MEN93
 34163                                  	; 08/04/2023
 34164                                  	;jmp	short $MIF104
 34165                                  	; 08/04/2023
 34166 00005834 83C40E                  	add	sp,14 ; 6+8
 34167 00005837 F9                      	stc
 34168 00005838 C3                      	retn
 34169                                  $MIF93:
 34170                                  	; 08/04/2023 - 15/06/2023
 34171                                  	; (wrong pops ?) - correct order: pop dx, pop es, pop di -
 34172                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:533Bh
 34173                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5B06h
 34174 00005839 07                      	pop	es				;;AN000;; Get pointer to input buffer (segment)
 34175 0000583A 5F                      	pop	di				;;AN000;; Get base pointer to first sublist (offset)
 34176 0000583B 5A                      	pop	dx				;;AN000;; Get base pointer to first sublist (segment)
 34177                                  	;stc	; * 				;;AN000;; Set carry flag
 34178                                  	; 08/04/2023
 34179                                  	;jmp	short $MIF104 ; *
 34180                                  
 34181                                  ;$MEN93: ; **
 34182                                  ;	jc	short $MIF104
 34183                                  ;$MEN97: ; 08/04/2023
 34184                                  ;	pop	bp				;;AN000;;
 34185                                  ;	pop	cx				;;AN000;;
 34186                                  ;	pop	bx				;;AN000;;
 34187                                  ;	pop	ax				;;AN000;;
 34188                                  ;	;jmp	short $MEN104
 34189                                  ;	; 08/04/2023
 34190                                  ;	retn
 34191                                  
 34192                                  $MIF104: ; *
 34193 0000583C 83C408                  	add	sp,8				;;AN000;; Eliminate from stack
 34194 0000583F F9                      	stc					;;AN000;;
 34195                                  $MEN104:
 34196 00005840 C3                      	retn					;;AN000;; Return
 34197                                  
 34198                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34199                                  ;;
 34200                                  ;;	PROC NAME: $M_DISPLAY_STRING
 34201                                  ;;
 34202                                  ;;	FUNCTION:  Will display or write string
 34203                                  ;;	INPUTS:    ES:DI points to beginning of message
 34204                                  ;;		   CX contains the length of string to write (if applicable)
 34205                                  ;;	OUTPUTS:   None
 34206                                  ;;	REGS Revised: None
 34207                                  ;;
 34208                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34209                                  
 34210                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34211                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34212                                  $M_DISPLAY_STRING:
 34213 00005841 50                      	push	ax				;;AN000;;
 34214 00005842 53                      	push	bx				;;AN000;;
 34215 00005843 52                      	push	dx				;;AN000;;
 34216 00005844 8B1E[7F9A]              	mov	bx,[$M_RT+$M_RES_ADDRS.$M_HANDLE]
 34217                                  	;mov	bx,[$M_RT+64]			;;AN000;; Retrieve handle
 34218                                  	
 34219 00005848 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE 	;;AN000;; Was there a handle specified?
 34220 0000584B 7505                    	jne	short $MIF107
 34221                                  
 34222 0000584D E82600                  	call	$M_DISPLAY_$_STRING		;;AN000;; No, display $ terminated string
 34223 00005850 EB03                    	jmp	short $MEN107
 34224                                  $MIF107:
 34225 00005852 E86E00                  	call	$M_DISPLAY_H_STRING		;;AN000;; Yes, display string to handle
 34226                                  $MEN107:
 34227 00005855 730D                    	jnc	short $MIF110
 34228                                  	
 34229 00005857 B459                    	mov	ah,59h	; DOS_GET_EXT_ERROR	;;AN000;;
 34230                                  	;mov	bx,0	; DOS_GET_EXT_ERROR_BX	;;AN000;; Get extended error
 34231                                  	; 08/04/2023
 34232 00005859 31DB                    	xor	bx,bx
 34233 0000585B CD21                    	int	21h				;;AN000;;
 34234                                  		; DOS - 3+ - GET EXTENDED ERROR CODE
 34235                                  		; BX = version code (0000h for DOS 3.x)
 34236 0000585D 30E4                    	xor	ah,ah				;;AN000;; Clear AH
 34237                                  $MEN110: ; 08/04/2023 ; ***
 34238 0000585F 83C406                  	add	sp,6				;;AN000;; Clean up stack
 34239 00005862 F9                      	stc					;;AN000;; Flag that there was an error
 34240                                  	;jmp	short $MEN110 ; ****
 34241                                  	; 08/04/2023
 34242 00005863 C3                      	retn
 34243                                  $MIF110:
 34244                                  	;cmp	bx,$M_NO_HANDLE
 34245 00005864 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE	;;AN000;; Was there a handle specified?
 34246 00005867 7409                    	je	short $MIF112 ; *  ; cf = 0
 34247 00005869 39C8                    	cmp	ax,cx				;;AN001;; Was it ALL written?
 34248 0000586B 7405                    	je	short $MIF113 ; ** ; cf = 0
 34249 0000586D E8A700                  	call	$M_GET_EXT_ERR_39		;;AN001;; Set Extended error
 34250                                  	;add	sp,6				;;AN001;; Clean up stack
 34251                                  	;stc					;;AN001;; Flag that there was an error
 34252                                  	; 08/04/2023
 34253 00005870 EBED                    	jmp	short $MEN110 ; ***
 34254                                  	; 08/04/2023
 34255                                  ;$MIF112:
 34256                                  ;$MEN110: ; ****
 34257                                  	;jc	short $MIF117
 34258                                  $MIF112: ; 08/04/2023	; *
 34259                                  $MIF113:	; **
 34260 00005872 5A                      	pop	dx				;;AN000;; Restore regs
 34261 00005873 5B                      	pop	bx				;;AN000;;
 34262 00005874 58                      	pop	ax				;;AN000;;
 34263                                  $MIF117:
 34264 00005875 C3                      	retn
 34265                                  
 34266                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34267                                  ;;
 34268                                  ;;	PROC NAME: $M_DISPLAY_$_STRING
 34269                                  ;;
 34270                                  ;;	FUNCTION:  Will display a $ terminated string
 34271                                  ;;	INPUTS:    ES:DI points to beginning of message text (not the length)
 34272                                  ;;	OUTPUTS:   None
 34273                                  ;;	REGS USED: AX,DX
 34274                                  ;;
 34275                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34276                                  
 34277                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34278                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34279                                  $M_DISPLAY_$_STRING:
 34280 00005876 1E                      	push	ds				;;AN000;;
 34281 00005877 06                      	push	es				;;AN000;;
 34282 00005878 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 34283                                  
 34284                                  	; 08/04/2023
 34285 00005879 B402                    	mov	ah,2 ; DOS_DISP_CHAR
 34286                                  
 34287                                  	;cmp	cx,$M_SINGLE_CHAR		;;AN000;; Is this a single character?
 34288 0000587B 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR
 34289 0000587E 7518                    	jne	short $MIF119			;;AN000;; No
 34290                                  	
 34291                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 34292 00005880 268A15                  	mov	dl,[es:di]			;;AN000;; Get the character
 34293 00005883 CD21                    	int	21h				;;AN000;; Write character
 34294                                  		; DOS - DISPLAY OUTPUT
 34295                                  		; DL = character to send to standard output
 34296 00005885 1F                      	pop	ds				;;AN000;;
 34297 00005886 88D0                    	mov	al,dl				;;AN000;; Get the character in AL
 34298 00005888 E8AC00                  	call	$M_IS_IT_DBCS 			;;AN000;; Is this the first byte of a DB character
 34299 0000588B 1E                      	push	ds				;;AN000;;
 34300 0000588C 06                      	push	es				;;AN000;;
 34301 0000588D 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 34302 0000588E 7316                    	jnc	short $MIF120 ; *
 34303                                  
 34304 00005890 268A5501                	mov	dl,[es:di+1]			;;AN000;; Get the next character
 34305 00005894 CD21                    	int	21h				;;AN000;; Write character
 34306                                  		; DOS - DISPLAY OUTPUT
 34307                                  		; DL = character to send to standard output
 34308                                  	; 08/04/2023
 34309                                  	;clc					;;AN000;; Clear the DBCS indicator
 34310                                  ;$MIF120:
 34311 00005896 EB0D                    	jmp	short $MEN119
 34312                                  $MIF119:
 34313                                  	; 08/04/2023
 34314                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 34315                                  ;$MDO123:
 34316 00005898 09C9                    	or	cx,cx				;;AN002;; Are there any left to display?
 34317                                  	;jz	short $MEN123
 34318                                  	; 18/04/2023
 34319 0000589A 740A                    	jz	short $MIF120 ; cf = 0
 34320                                  $MDO123: ; 08/04/2023
 34321 0000589C 268A15                  	mov	dl,[es:di]			;;AN002;; Get the character
 34322 0000589F CD21                    	int	21h				;;AN002;; Display the character
 34323                                  		; DOS - DISPLAY OUTPUT
 34324                                  		; DL = character to send to standard output
 34325 000058A1 47                      	inc	di				;;AN002;; Set pointer to next character
 34326 000058A2 49                      	dec	cx				;;AN002;; Count this character
 34327 000058A3 75F7                    	jnz	short $MDO123
 34328                                  ;$MEN123:
 34329                                  $MEN119:
 34330 000058A5 F8                      	clc					;;AN000;;Char functions used don't return carry as error
 34331                                  $MIF120: ; 08/04/2023 ; *
 34332 000058A6 1F                      	pop	ds				;;AN000;;
 34333 000058A7 C3                      	retn
 34334                                  
 34335                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34336                                  ;;
 34337                                  ;; Scan_ctrlZ: This routine looks through the string to be printed and 
 34338                                  ;; truncates it at the Ctrl-Z if any present.
 34339                                  ;;
 34340                                  ;;	ENTRY:	ds:dx = String to be displayed
 34341                                  ;;		cx = number of chars to be displayed
 34342                                  ;;
 34343                                  ;;	EXIT:	cx = number of chars to be displayed
 34344                                  ;;
 34345                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34346                                  
 34347                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34348                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34349                                  scan_ctrlz:
 34350 000058A8 57                      	push	di
 34351 000058A9 50                      	push	ax
 34352 000058AA 06                      	push	es
 34353 000058AB 53                      	push	bx
 34354                                  
 34355 000058AC 89D7                    	mov	di,dx
 34356 000058AE 1E                      	push	ds
 34357 000058AF 07                      	pop	es   			;es:di points at string
 34358                                  
 34359 000058B0 89CB                    	mov	bx,cx			;save current count
 34360                                  
 34361 000058B2 B01A                    	mov	al,1Ah	; Ctrl-Z
 34362 000058B4 FC                      	cld
 34363 000058B5 F2AE                    	repne	scasb			;find first Ctrl-Z
 34364 000058B7 7503                    	jnz	short noCtrlZ		;no CtrlZ found in string
 34365                                  
 34366 000058B9 29CB                    	sub	bx,cx
 34367 000058BB 4B                      	dec	bx			;bx = new count to display
 34368                                  noCtrlZ:
 34369 000058BC 89D9                    	mov	cx,bx			;cx = actual display count
 34370                                  
 34371 000058BE 5B                      	pop	bx
 34372 000058BF 07                      	pop	es
 34373 000058C0 58                      	pop	ax
 34374 000058C1 5F                      	pop	di
 34375                                  $MIF127:	; 08/04/2023
 34376 000058C2 C3                      	retn
 34377                                  
 34378                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34379                                  ;;
 34380                                  ;;	PROC NAME: $M_DISPLAY_H_STRING
 34381                                  ;;
 34382                                  ;;	FUNCTION:  Will display a string to a specified handle
 34383                                  ;;	INPUTS:    ES:DI points to beginning of message
 34384                                  ;;		   CX contains the number of bytes to write
 34385                                  ;;		   BX contains the handle to write to
 34386                                  ;;	OUPUTS:    None
 34387                                  ;;	REGS USED: AX,DX
 34388                                  ;;
 34389                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34390                                  
 34391                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34392                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34393                                  $M_DISPLAY_H_STRING:
 34394 000058C3 31C0                    	xor	ax,ax			;;AN002;; Set number of bytes written to 0
 34395 000058C5 09C9                    	or	cx,cx			;;AN002;; For performance, don't write if not necessary
 34396 000058C7 74F9                    	jz	short $MIF127
 34397                                  	
 34398 000058C9 1E                      	push	ds			;;AN000;;
 34399 000058CA 06                      	push	es			;;AN000;;
 34400 000058CB 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34401                                  	
 34402 000058CC B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 34403 000058CE 89FA                    	mov	dx,di			;;AN000;; Pointer to data to write
 34404                                  
 34405 000058D0 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR	;;AN000;; Is this a single character?
 34406 000058D3 7528                    	jne	short $MIF128		;;AN000;; No
 34407                                  
 34408 000058D5 CD21                    	int	21h			;;AN000;; Write character
 34409                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 34410                                  		; BX = file handle, CX = number of bytes to writ
 34411                                  
 34412 000058D7 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34413 000058D8 50                      	push	ax			;;AN000;;
 34414 000058D9 268A05                  	mov	al,[es:di] 		;;AN000;; Get the character
 34415 000058DC E85800                  	CALL    $M_IS_IT_DBCS		;;AN000;; Is this the first byte of a DB character
 34416 000058DF 58                      	pop	ax			;;AN000;;
 34417 000058E0 1E                      	push	ds			;;AN000;;
 34418 000058E1 06                      	push	es			;;AN000;;
 34419 000058E2 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34420 000058E3 7306                    	jnc	short $MIF129
 34421                                  	
 34422 000058E5 F8                      	clc				;;AN000;; Clear the DBCS indicator
 34423 000058E6 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 34424 000058E8 42                      	inc	dx			;;AN000;; Point to next character
 34425 000058E9 CD21                    	int	21h			;;AN000;; Write character
 34426                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 34427                                  		; BX = file handle, CX = number of bytes to write, 
 34428                                  $MIF129:
 34429                                  ;SR;
 34430                                  ; If the single char happened to be a Ctrl-Z, the dos write would return
 34431                                  ;0 chars written making the caller think there was an error writing. To 
 34432                                  ;avoid this, we check if the single char was a Ctrl-Z and if so, return that
 34433                                  ;the char was written, thus fooling the caller.
 34434                                  
 34435 000058EB 9C                      	pushf				;save flags
 34436 000058EC 26803D1A                	cmp	byte [es:di],1Ah	;is char a Ctrl-Z?
 34437 000058F0 7502                    	jne	short m_popf_j		;no, continue
 34438                                  
 34439 000058F2 89C8                    	mov	ax,cx			;yes, fake as if it was written
 34440                                  m_popf_j:
 34441                                  	; 08/04/2023
 34442                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 34443 000058F4 EB01                    	jmp	short m_popf		;restore flags
 34444                                  
 34445                                  ; 07/04/2023
 34446                                  ; ---------------------------
 34447                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 34448                                  ; ---------------------------
 34449                                  	; $M_POPF macro
 34450                                  	;jmp	short $+3
 34451                                  intret:
 34452 000058F6 CF                      	iret
 34453                                  m_popf:
 34454 000058F7 0E                      	push	cs
 34455 000058F8 E8FBFF                  	call	intret
 34456                                  	;;; end macro	
 34457                                  ; ---------------------------
 34458                                  
 34459 000058FB EB18                    	jmp	short $MEN128
 34460                                  
 34461                                  $MIF128:
 34462                                  ;SR;
 34463                                  ; Prescan the string looking for Ctrl-Z. We terminate the message the moment 
 34464                                  ;we hit a Ctrl-Z. cx will contain the number of characters to be printed.
 34465                                  
 34466 000058FD 55                      	push	bp			; M007
 34467 000058FE 51                      	push	cx
 34468 000058FF E8A6FF                  	call	scan_ctrlz		;cx = count without Ctrl-Z
 34469 00005902 89CD                    	mov	bp,cx			;store no ^Z count in bp ;M007
 34470 00005904 59                      	pop	cx			;get old count back ;M007
 34471                                  	
 34472 00005905 CD21                    	int	21h			;;AN000;; Write String at DS:SI to handle
 34473                                  	;jnc	short chk_count		;no error, adjust return count
 34474                                  	;jmp	short m_cnt_ok		;error, return with carry set;M007
 34475                                  	; 08/04/2023
 34476 00005907 720B                    	jc	short m_cnt_ok 
 34477                                  ;M007
 34478                                  ; If we are writing to con and there is a Ctrl-Z in the string, the
 34479                                  ;return count will be much less and if this returns to the caller we can get
 34480                                  ;spurious error messages. We check here if the count returned is same as
 34481                                  ;original count or same as the count if we stop at Ctrl-Z. In the second
 34482                                  ;case, we fake it as if all bytes have been written. If the return count
 34483                                  ;does not match either count, then we had some other disk error (such as
 34484                                  ;insufficient disk space) and we pass it through
 34485                                  
 34486                                  chk_count:
 34487 00005909 39C1                    	cmp	cx,ax			;have all bytes been written?;M007
 34488 0000590B 7407                    	je	short m_cnt_ok		;there was an error writing ;M007
 34489 0000590D 39C5                    	cmp	bp,ax			;count = Ctrl-Z count? ;M007
 34490 0000590F F8                      	clc				;no error either way ;M007
 34491 00005910 7502                    	jne	short m_cnt_ok		;no, pass it through ;M007
 34492 00005912 89C8                    	mov	ax,cx			;return old count ;M007
 34493                                  m_cnt_ok:				; M007
 34494 00005914 5D                      	pop	bp			; M007
 34495                                  $MEN128:
 34496 00005915 1F                      	pop	ds			;;AN000;;
 34497                                  ;$MIF127: ; 08/04/2023
 34498 00005916 C3                      	retn
 34499                                  
 34500                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34501                                  ;;
 34502                                  ;;	PROC NAME: $M_GET_EXT_ERR_39
 34503                                  ;;
 34504                                  ;;	FUNCTION:  Will set registers for extended error #39
 34505                                  ;;	INPUTS:    None
 34506                                  ;;	OUPUTS:    AX,BX,CX set
 34507                                  ;;	REGS USED:
 34508                                  ;;
 34509                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34510                                  
 34511                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34512                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:542Dh
 34513                                  
 34514                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34515                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5BFAh
 34516                                  
 34517                                  $M_GET_EXT_ERR_39:
 34518 00005917 B82700                  	mov	ax,27h ; EXT_ERR_39	;AN001; Set AX=39
 34519                                  	;mov	bx,(ERROR_CLASS_39 SHR 8) + ACTION_39
 34520 0000591A BB0400                  	mov	bx,4			;AN001; Set BH=1 BL=4
 34521                                  	;mov	ch,LOCUS_39		;AN001; Set CH=1
 34522 0000591D B501                    	mov	ch,1			;AN001;
 34523 0000591F C3                      	retn				;AN001;
 34524                                  
 34525                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34526                                  ;;
 34527                                  ;;	PROC NAME: $M_ADD_CRLF
 34528                                  ;;
 34529                                  ;;	FUNCTION:  Will decide whether to display a CRLF
 34530                                  ;;	INPUTS:    DX contains the Input/Class requested
 34531                                  ;;	OUTPUTS:   None
 34532                                  ;;	REGS Revised: CX,ES,DI
 34533                                  ;;
 34534                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34535                                  
 34536                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34537                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34538                                  $M_ADD_CRLF:
 34539                                  	;cmp	dh,0FFh
 34540 00005920 80FEFF                  	cmp	dh,utility_msg_class	;;AN004;; Is it a utility message?
 34541 00005923 7411                    	je	short $MIF134		;;AN004;; Yes
 34542 00005925 F6C680                  	test	dh,80h; $M_NO_CRLF_MASK	;;AN004;; Are we to supress the CR LF?
 34543 00005928 750C                    	jnz	short $MIF135
 34544                                  					;;AN004;; No	
 34545 0000592A 1E                      	push	ds			;;AN004;;
 34546 0000592B 07                      	pop	es			;;AN004;; Set ES to data segment
 34547 0000592C 8D3E[829A]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_CRLF]
 34548                                  	;lea	di,[$M_RT+67]		;;AN004;; Point at CRLF message
 34549 00005930 B90200                  	mov	cx,2 ; $M_CRLF_SIZE	;;AN004;; Set the message size
 34550 00005933 E80BFF                  	call	$M_DISPLAY_STRING	;;AN004;; Display the CRLF
 34551                                  $MIF135:
 34552                                  $MIF134:
 34553 00005936 C3                      	retn				;;AN004;; Return
 34554                                  
 34555                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34556                                  ;;
 34557                                  ;;	PROC NAME: $M_IS_IT_DBCS
 34558                                  ;;
 34559                                  ;;	FUNCTION:  Will decide whether character is Single or Double Byte
 34560                                  ;;	INPUTS:    AL contains the byte to be checked
 34561                                  ;;	OUTPUTS:   Carry flag = 0 if byte is NOT in DBCS range
 34562                                  ;;		   Carry flag = 1 if byte IS in DBCS range
 34563                                  ;;	REGS USED: All restored
 34564                                  ;;
 34565                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34566                                  
 34567                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34568                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34569                                  $M_IS_IT_DBCS:
 34570 00005937 06                      	push	es			;;AN000;; Save Extra Segment register
 34571 00005938 57                      	push	di			;;AN000;; Save DI register
 34572                                  
 34573 00005939 C43E[7B9A]              	les	di,[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]
 34574                                  	;les	di,[$M_RT+60]		;;AN000;;
 34575 0000593D 09FF                    	or	di,di			;;AN000;; Was the DBCS vector set?
 34576 0000593F 7417                    	jz	short $MIF138		;;AN000;; No
 34577                                  $MDO139:
 34578 00005941 26833D00                	cmp	word [es:di],0 ; $M_DBCS_TERM
 34579                                  					;;AN000;; Is this the terminating flag?
 34580 00005945 F8                      	clc				;;AN000;;
 34581 00005946 7410                    	jz	short $MEN139
 34582                                  					;;AN000;; No
 34583 00005948 263A05                  	cmp	al,[es:di]		;;AN000;; Does the character fall in the DBCS range?
 34584 0000594B 7207                    	jnae	short $MIF141 ; jb	;;AN000;; No		
 34585 0000594D 263A4501                	cmp	al,[es:di+1]		;;AN000;; Does the character fall in the DBCS range?
 34586 00005951 7701                    	jnbe	short $MIF141 ; ja	;;AN000;; No
 34587                                  					;;AN000;; Yes
 34588 00005953 F9                      	stc				;;AN000;; Set carry flag
 34589                                  $MIF141:
 34590 00005954 47                      	inc	di			;;AN000;;
 34591 00005955 47                      	inc	di			;;AN000;;
 34592 00005956 EBE9                    	jmp	short $MDO139		;;AN000;; Go to next vector
 34593                                  $MEN139:
 34594                                  $MIF138:
 34595 00005958 5F                      	pop	di			;;AN000;; Restore DI register
 34596 00005959 07                      	pop	es			;;AN000;; Restore Extra Segment register
 34597 0000595A C3                      	retn				;;AN000;; Return
 34598                                  
 34599                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34600                                  ;;
 34601                                  ;;	PROC NAME: $M_CONVERT2ASC
 34602                                  ;;
 34603                                  ;;	FUNCTION: Convert a binary number to a ASCII string
 34604                                  ;;	INPUTS: DX:AX contains the number to be converted
 34605                                  ;;		$M_RT_DIVISOR contains the divisor
 34606                                  ;;	OUTPUTS: CX contains the number of characters
 34607                                  ;;		Top of stack  --> Last character
 34608                                  ;;				     . . .
 34609                                  ;;		Bot of stack  --> First character
 34610                                  ;;	REGS USED:
 34611                                  ;;
 34612                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34613                                  
 34614                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34615                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34616                                  $M_CONVERT2ASC:
 34617 0000595B 8F06[859A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34618                                  	;pop	word [$M_RT+70]			;;AN000;; Save Return Address
 34619                                  	
 34620 0000595F 31DB                    	xor	bx,bx				;;AN000;; Use BX as a swapping register
 34621 00005961 93                      	xchg	bx,ax				;;AN000;; Initialize - Low Word in BX
 34622 00005962 92                      	xchg	ax,dx				;;AN000;;	  - High Word in AX
 34623                                  $MDO145:					;;AN000;; DO UNTIL Low Word becomes zero
 34624 00005963 F736[899A]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34625                                  	;div	word [$M_RT+74]			;;AN000;; Divide High Word by divisor
 34626 00005967 93                      	xchg	bx,ax				;;AN000;; Setup to divide Low Word using remainder
 34627                                  						;;AN000;;  and save reduced High Word in BX
 34628 00005968 F736[899A]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34629                                  	;div	word [$M_RT+74]			;;AN000;; Divide Low Word by divisor
 34630                                  
 34631 0000596C 83FA09                  	cmp	dx,9				;;AN000;; Make a digit of the remainder
 34632 0000596F 7605                    	jna	short $MIF146			;;AN000;; 0-9
 34633 00005971 80C237                  	add	dl,55	; add dl,37h		;;AN000;; Make A to F ASCII
 34634 00005974 EB03                    	jmp	short $MEN146
 34635                                  $MIF146:
 34636 00005976 80C230                  	add	dl,'0'				;;AN000;; Make 0 to 9 ASCII
 34637                                  $MEN146:
 34638 00005979 52                      	push	dx				;;AN000;; Save the digit on the stack
 34639 0000597A 41                      	inc	cx				;;AN000;; Count that digit
 34640 0000597B 09C0                    	or	ax,ax				;;AN000;; Are we done?
 34641 0000597D 7504                    	jnz	short $MLL149			;;AN000;; No
 34642 0000597F 09DB                    	or	bx,bx				;;AN000;; AX and BX must be ZERO!!
 34643 00005981 741F                    	jz	short $MEN145 ; * ; ax = 0	;;AN000;; Yes
 34644                                  $MLL149:
 34645 00005983 83F903                  	cmp	cx,3 ; $M_FIRST_THOU		;;AN000;; Are we at the first thousands mark
 34646                                  ; 28/04/2023
 34647 00005986 740A                    	je	short $MIF153
 34648                                  ;	jne	short $MIF150			;;AN000;; No
 34649                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34650                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 34651                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34652                                  ;	;jne	short $MIF151
 34653                                  ;	; 09/04/2023
 34654                                  ;	jne	short $MEN150
 34655                                  ;						;;AN000;; Yes
 34656                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34657                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34658                                  ;	inc	cx				;;AN000;;
 34659                                  ;$MIF151:
 34660                                  ;	jmp	short $MEN150
 34661                                  
 34662                                  $MIF150:
 34663                                  	; 15/06/2023 (6)
 34664                                  	; MSDOS 6.0
 34665                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54ABh 
 34666                                  	;cmp	cx,6 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 34667                                  	; 15/06/2023 (7)
 34668                                  	; MSDOS 6.22
 34669                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C78h 
 34670 00005988 83F907                  	cmp	cx,7 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark	
 34671                                  
 34672                                  ; 28/04/2023
 34673 0000598B 7405                    	je	short $MIF153
 34674                                  ;	jne	short $MIF154			;;AN000;; No
 34675                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34676                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 34677                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34678                                  ;	;jne	short $MIF155			;;AN000;; No
 34679                                  ;	; 09/04/2023
 34680                                  ;	jne	short $MEN154
 34681                                  ;						;;AN000;; Yes				
 34682                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34683                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34684                                  ;	inc	cx				;;AN000;;
 34685                                  ;$MIF155:
 34686                                  ;	jmp	short $MEN154
 34687                                  
 34688                                  $MIF154:
 34689                                  	; 15/06/2023 (9)
 34690                                  	; MSDOS 6.0
 34691                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54BDh 
 34692                                  	;cmp	cx,9 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34693                                  	; 15/06/2023 (11)
 34694                                  	; MSDOS 6.22
 34695                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C8Ah 
 34696 0000598D 83F90B                  	cmp	cx,11 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34697 00005990 750B                    	jne	short $MIF158			;;AN000;; No  
 34698                                  ; 28/04/2023
 34699                                  $MIF153:
 34700                                  	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34701 00005992 807C0A2C                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 34702                                  	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34703 00005996 7505                    	jne	short $MIF159			;;AN000;; No
 34704                                  						;;AN000;; Yes
 34705 00005998 FF36[929A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34706                                  	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34707 0000599C 41                      	inc	cx				;;AN000;;
 34708                                  $MIF159:
 34709                                  $MIF158:
 34710                                  $MEN154:
 34711                                  $MEN150:					;;AN000;;
 34712 0000599D 93                      	xchg	ax,bx				;;AN000;; Setup to divide the reduced High Word
 34713                                  						;;AN000;;  and Revised Low Word
 34714 0000599E 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34715                                  	; 28/04/2023
 34716 000059A0 EBC1                    	jmp	short $MDO145
 34717                                  ;$MEN145:
 34718                                  	; 28/04/2023
 34719                                  	;xor	ax,ax				;;AN000;; Reset remainder
 34720                                  $MEN145: ; 09/04/2023 ; * ; ax = 0
 34721 000059A2 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34722 000059A4 FF36[859A]              	push	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34723                                  	;push	word [$M_RT+70]			;;AN000;; Restore Return Address
 34724 000059A8 C3                      	retn					;;AN000;; Return
 34725                                  
 34726                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34727                                  ;;
 34728                                  ;;	PROC NAME: $M_DISPLAY_MESSAGE
 34729                                  ;;
 34730                                  ;;	FUNCTION:  Will display or write entire message (with replacable parameters)
 34731                                  ;;	INPUTS:    ES:DI points to beginning of message
 34732                                  ;;		   DS:SI points to first sublist structure in chain
 34733                                  ;;		   BX contains the handle to write to (if applicable)
 34734                                  ;;		   CX contains the length of string to write (before substitutions)
 34735                                  ;;		   BP contains the count of replacables
 34736                                  ;;
 34737                                  ;;	OUTPUTS:
 34738                                  ;;	REGS USED: All
 34739                                  ;;
 34740                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34741                                  
 34742                                  	; 10/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34743                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54DBh
 34744                                  
 34745                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 34746                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:54DBh
 34747                                  
 34748                                  $M_DISPLAY_MESSAGE:
 34749                                  ; $DO						;;AN000;; Note: DS:SI -> message
 34750                                  $MDO165:
 34751 000059A9 31D2                    	xor	dx,dx				;;AN000;; Set size = 0
 34752 000059AB 09C9                    	or	cx,cx				;;AN000;; Are we finished the message yet?
 34753                                  ;; $IF NZ					;;AN000;; No
 34754 000059AD 7421                    	jz	short $MIF166			;;AN000;; Yes
 34755 000059AF B425                    	mov	ah,"%"				;;AN000;; Prepare to scan for %
 34756 000059B1 B000                    	mov	al,0				;;AN004;;
 34757                                  ;; $DO						;;AN000;; Scan through string until %
 34758                                  $MDO167:
 34759 000059B3 263825                  	cmp	byte [es:di],ah			;;AN000;; Is this character NOT a %
 34760                                  ;; $LEAVE E,AND					;;AN000;; No
 34761 000059B6 750A                    	jne	short $MLL168
 34762 000059B8 26386501                	cmp	byte [es:di+1],ah		;;AN000;; Is the next character also a %
 34763                                  ;; $LEAVE NE,AND				;;AN000;; No
 34764 000059BC 7404                    	je	short $MLL168
 34765                                  
 34766 000059BE 38E0                    	cmp	al,ah				;;AN000;; Was the character before a %
 34767                                  ;; $LEAVE NE					;;AN000;; No, GREAT found it
 34768 000059C0 750E                    	jne	short MEN167
 34769                                  $MLL168:
 34770 000059C2 268A05                  	mov	al,[es:di]			;;AN004;; Yes, (to any of the above)
 34771 000059C5 E86FFF                  	call	$M_IS_IT_DBCS			;;AN004;; Is this character the first part of a DBCS?
 34772                                  ;;; $IF C					;;AN004;; Yes
 34773 000059C8 7301                    	jnc	short $MIF169
 34774 000059CA 47                      	inc	di				;;AN004;; Increment past second part
 34775                                  ;;; $ENDIF					;;AN004;;
 34776                                  $MIF169:
 34777 000059CB 47                      	inc	di				;;AN000;; Next character in string
 34778 000059CC 42                      	inc	dx				;;AN000;; Size = Size + 1
 34779 000059CD 49                      	dec	cx				;;AN000;; Decrement total size
 34780                                  ;; $ENDDO Z					;;AN000;; Exit scan if we're at the end of the line
 34781 000059CE 75E3                    	jnz	short $MDO167
 34782                                  $MEN167:
 34783                                  ;; $ENDIF					;;AN000;;
 34784                                  $MIF166:
 34785 000059D0 56                      	push	si				;;AN000;; Save beginning of sublists
 34786 000059D1 87CA                    	xchg	cx,dx				;;AN000;; Get size of message to display (tot sz in DX)
 34787 000059D3 09ED                    	or	bp,bp				;;AN000;; Do we have any replacables to do?
 34788                                  ;; $IF NZ					;;AN000;; Yes
 34789 000059D5 7431                    	jz	short $MIF173
 34790 000059D7 4D                      	dec	bp				;;AN000;; Decrement number of replacables
 34791                                  
 34792                                  ;; Search through sublists to find applicable one
 34793                                  
 34794 000059D8 833E[879A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34795                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34796                                  ;;; $IF E					;;AN000;; No
 34797 000059DD 7529                    	jne	short $MIF174
 34798                                  ;;; $SEARCH					;;AN000;;
 34799                                  $MDO175:
 34800                                  	;mov	al,$M_SL.$M_S_ID ;$M_SL=DS:[SI]	;;AN000;; Get ID byte
 34801 000059DF 8A4406                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_ID]
 34802                                  	;mov	al,[si+6]
 34803 000059E2 0430                    	add	al,30h				;;AN000;; Convert to ASCII
 34804                                  	; 28/04/2023					
 34805 000059E4 263A4501                	cmp	al,[es:di+1]			;;AN000;; Is this the right sublist?
 34806                                  ;;; $EXITIF E					;;AN000;;
 34807                                  	;jne	short $MIF175
 34808                                  ;;; $ORELSE					;;AN000;; No
 34809                                  	;jmp	short $MSR175
 34810                                  	; 28/04/2023
 34811 000059E8 741E                    	je	short $MSR175
 34812                                  $MIF175:
 34813 000059EA 3C30                    	cmp	al,30h ; $M_SPECIAL_CASE	;;AN000;; Does this sublist have ID = 0
 34814                                  ;;; $LEAVE E,AND				;;AN000;; Yes
 34815 000059EC 7504                    	jne	short $MLL178
 34816 000059EE 09D2                    	or	dx,dx				;;AN000;; Are we at the end of the message?
 34817                                  ;;; $LEAVE Z					;;AN000;; No
 34818 000059F0 7404                    	jz	short $MEN175
 34819                                  $MLL178:
 34820                                  	;add	si,$M_SL.$M_S_SIZE		;;AN000;; Next SUBLIST
 34821                                  	;add	si,[si+$M_SUBLIST_STRUC.$M_S_SIZE] ; [si+0]
 34822                                  	;;add	si,[si+0]
 34823 000059F2 0334                    	add	si,[si]
 34824                                  ;;; ENDLOOP					;;AN000;; Yes
 34825 000059F4 EBE9                    	jmp	short $MDO175
 34826                                  $MEN175:
 34827 000059F6 803E[849A]FF            	cmp	byte [$M_RT+$M_RES_ADDRS.$M_CLASS],utility_msg_class
 34828                                  	;cmp	byte [$M_RT+69],0FFh		;;AN004;; Is it a utility message?
 34829                                  ;;;; $IF E					;;AN004;; Yes
 34830 000059FB 7508                    	jne	short $MIF180
 34831 000059FD 42                      	inc	dx				;;AN000;; Remember to display CR,LF
 34832 000059FE 42                      	inc	dx				;;AN000;;  at the end of the message
 34833 000059FF 49                      	dec	cx				;;AN000;; Adjust message length
 34834 00005A00 49                      	dec	cx				;;AN000;;
 34835 00005A01 4F                      	dec	di				;;AN000;; Adjust ending address of message
 34836 00005A02 4F                      	dec	di				;;AN000;;
 34837                                  ;;;; $ELSE					;;AN004;; No
 34838 00005A03 EB03                    	jmp	short $MEN180
 34839                                  $MIF180:
 34840 00005A05 BAFFFF                  	mov	dx,-1 				;;AN004;; Set special case
 34841                                  ;;;; $ENDIF					;;AN004;;
 34842                                  $MEN180:
 34843                                  ;;; $ENDSRCH					;;AN000;;
 34844                                  $MSR175:
 34845                                  ;; $ENDIF					;;AN000;;
 34846                                  $MIF174:
 34847                                  ; $ENDIF					;;AN000;;
 34848                                  $MIF173:
 34849                                  ;; Prepare and display this part of message
 34850                                  
 34851 00005A08 57                      	push	di				;;AN000;; Save pointer to replace number
 34852 00005A09 29CF                    	sub	di,cx				;;AN000;; Determine beginning of string
 34853 00005A0B E833FE                  	call	$M_DISPLAY_STRING		;;AN000;; Display string until % (or end)
 34854 00005A0E 5F                      	pop	di				;;AN000;; Get back pointer to replace number
 34855 00005A0F 59                      	pop	cx				;;AN000;; Clean up stack in case error
 34856                                  ; $LEAVE C,LONG					;;AN000;; Fail if carry was set
 34857                                  	;jnc	short $MXL3
 34858                                  	;jmp	$MEN165
 34859                                  	; 02/05/2023
 34860 00005A10 7214                    	jc	short $MEN165
 34861                                  $MXL3:
 34862 00005A12 51                      	push	cx				;;AN000;;
 34863                                  
 34864                                  ;; Save and reset pointer registers
 34865                                  
 34866 00005A13 89D1                    	mov	cx,dx				;;AN000;; Get the size of the rest of the message
 34867                                  	;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h
 34868 00005A15 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0 ; $M_SPECIAL_CASE-30h
 34869                                  	;cmp	byte [si+6],0 			;;AN000;; Is this the %0 case?
 34870                                  ; $IF NE					;;AN000;; No
 34871 00005A19 7412                    	je	short $MIF187			;;AN000;; Yes			
 34872 00005A1B 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 34873                                  ;; $IF NZ					;;AN000;; No
 34874 00005A1D 7406                    	jz	short $MIF188			;;AN000;; Yes
 34875 00005A1F 49                      	dec	cx				;;AN000;; Decrement total size (%)
 34876 00005A20 49                      	dec	cx				;;AN000;; Decrement total size (#)
 34877 00005A21 47                      	inc	di				;;AN000;; Go past %
 34878 00005A22 47                      	inc	di				;;AN000;; Go past replace number
 34879                                  ;; $ELSE					;;AN000;; Yes, (Note this will not leave because INC)
 34880                                  	;jmp	short $MEN188
 34881                                  	; 28/04/2023
 34882 00005A23 EB15                    	jmp	short $MEN187
 34883                                  $MIF188:
 34884 00005A25 5E                      	pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 34885                                  ;; $ENDIF					;;AN000;; Yes, Note this will not leave because INC
 34886                                  $MEN188:
 34887                                  ; $ELSE 					;;AN000;;
 34888                                  	;jmp	short $MEN187
 34889                                  	; 28/04/2023
 34890                                  	; zf = 1
 34891                                  	;jmp	short $MEN165 
 34892                                  
 34893                                  ; 28/04/2023
 34894                                  $MXL4:
 34895                                  $MLL214:
 34896                                  $MEN165:
 34897 00005A26 C706[879A]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 34898                                  	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 34899                                  						;;AN000;; Reset message number to null
 34900 00005A2C C3                      	retn					;;AN000;; Return
 34901                                  
 34902                                  $MIF187:
 34903 00005A2D 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 34904                                  ;; $IF Z					;;AN004;; No
 34905                                  	;jnz	short $MIF192
 34906                                  	;pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 34907                                  ;; $ELSE					;;AN000;; No
 34908                                  	;jmp	short $MEN192
 34909                                  	; 28/04/2023
 34910 00005A2F 74F4                    	jz	short $MIF188
 34911                                  $MIF192:
 34912 00005A31 83F9FF                  	cmp	cx,-1				;;AN004;; Are we at the end of the message?
 34913                                  ;;; $IF Z					;;AN004;; No
 34914 00005A34 7502                    	jnz	short $MIF194
 34915 00005A36 31C9                    	xor	cx,cx				;;AN004;;
 34916                                  ;;; $ENDIF					;;AN000;;
 34917                                  $MIF194:
 34918 00005A38 09FF                    	or	di,di				;;AN004;; Turn ZF off
 34919                                  ;; $ENDIF					;;AN000;;
 34920                                  $MEN192:
 34921                                  ; $ENDIF					;;AN000;; Note this will not leave because INC
 34922                                  $MEN187:
 34923                                  ; $LEAVE Z					;;AN000;;
 34924 00005A3A 74EA                    	jz	short $MEN165
 34925                                  	;
 34926 00005A3C 55                      	push	bp				;;AN000;; Save the replace count
 34927 00005A3D 57                      	push	di				;;AN000;; Save location to complete message
 34928 00005A3E 06                      	push	es				;;AN000;;
 34929 00005A3F 51                      	push	cx				;;AN000;; Save size of the rest of the message
 34930 00005A40 31C9                    	xor	cx,cx				;;AN000;; Reset CX used for character count
 34931                                  
 34932                                  ;; Determine what action is required on parameter
 34933                                  
 34934 00005A42 833E[879A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34935                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34936                                  ; $IF E						;;AN000;;
 34937 00005A47 753B                    	jne	short $MIF199
 34938                                  
 34939                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 34940 00005A49 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 34941                                  	;test	byte [si+7],0Fh			;;AN000;;
 34942                                  ;; $IF Z					;;AN000;;
 34943 00005A4D 7508                    	jnz	short $MIF200
 34944                                  
 34945                                  ;; Character type requested
 34946                                  
 34947                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 34948 00005A4F C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 34949                                  	;les	di,[si+2]
 34950 00005A52 E84801                  	call	$M_CHAR_REPLACE			;;AN000;;
 34951                                  ;; $ELSE					;;AN000;; Get the rest of the message to display
 34952 00005A55 EB28                    	jmp	short $MEN200
 34953                                  $MIF200:
 34954                                  ;; ENDIF					;;AN000;;
 34955                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 34956 00005A57 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 34957                                  	;test	byte [si+7],0Dh			;;AN000;;
 34958                                  ;; $IF Z,OR					;;AN000;;
 34959 00005A5B 740C                    	jz	short $MLL202
 34960                                  	;test	byte ptr $M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK
 34961 00005A5D F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 34962                                  	;test	byte [si+7],0Eh			;;AN000;;
 34963                                  ;;; $IF Z,OR					;;AN000;;
 34964 00005A61 7406                    	jz	short $MLL202
 34965                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Bin_Hex_Type and $M_TYPE_MASK
 34966 00005A63 F644070C                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Ch
 34967                                  	;test	byte [si+7],0Ch			;;AN000;;
 34968                                  ;;;; $IF Z 					;;AN000;;
 34969 00005A67 7508                    	jnz	short $MIF202
 34970                                  $MLL202:
 34971                                  
 34972                                  ;; Numeric type requested
 34973                                  
 34974                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 34975 00005A69 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 34976                                  	;les	di,[si+2]
 34977 00005A6C E85601                  	call	$M_BIN2ASC_REPLACE		;;AN000;;
 34978                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 34979 00005A6F EB0E                    	jmp	short $MEN202
 34980                                  $MIF202:
 34981                                  ;;;; ENDIF					;;AN000;;
 34982                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Date_Type and $M_TYPE_MASK
 34983 00005A71 F644070B                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Bh
 34984                                  	;test	byte [si+7],0Bh			;;AN000;;
 34985                                  ;;;; $IF E					;;AN000;;
 34986 00005A75 7505                    	jnz	short $MIF204
 34987                                  
 34988                                  ;; Date type requested
 34989                                  
 34990 00005A77 E8EC01                  	call	$M_DATE_REPLACE			;;AN000;;
 34991                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 34992 00005A7A EB03                    	jmp	short $MEN204
 34993                                  $MIF204:					;;AN000;;
 34994                                  
 34995                                  ;; Time type requested (Default if we have not matched until here)
 34996                                  
 34997 00005A7C E89E02                  	call	$M_TIME_REPLACE			;;AN000;;
 34998                                  
 34999                                  ;;;; $ENDIF					;;AN000;;
 35000                                  $MEN204:
 35001                                  ;;; $ENDIF					;;AN000;;
 35002                                  $MEN202:
 35003                                  ;; $ENDIF					;;AN000;;
 35004                                  $MEN200:
 35005                                  
 35006                                  ;; With the replace information of the Stack, display the replaceable field
 35007                                  
 35008 00005A7F E85F00                  	call	$M_DISPLAY_REPLACE		;;AN000;; Display the replace
 35009                                  
 35010                                  ;; None of the above - Extended/Parse replace
 35011                                  ; $ELSE 					;;AN000;;
 35012 00005A82 EB03                    	jmp	short $MEN199
 35013                                  $MIF199:
 35014 00005A84 E81600                  	call	$M_EXT_PAR_REPLACE		;;AN000;;
 35015                                  ; $ENDIF					;;AN000;;
 35016                                  $MEN199:
 35017                                  
 35018                                  ;; We must go back and complete the message after the replacable parameter if there is any left
 35019                                  
 35020                                  ; $IF NC					;;AN000;; IF there was an error displaying then EXIT
 35021 00005A87 7207                    	jc	short $MIF211
 35022                                  	;
 35023 00005A89 59                      	pop	cx				;;AN000;; Get size of the rest of the message
 35024 00005A8A 07                      	pop	es				;;AN000;; Get address of the rest of the message
 35025 00005A8B 5F                      	pop	di				;;AN000;;
 35026 00005A8C 5D                      	pop	bp				;;AN000;; Get replacment count
 35027 00005A8D 5E                      	pop	si				;;AN000;; ELSE get address of first sublist structure
 35028                                  ; $ELSE						;;AN000;;
 35029 00005A8E EB03                    	jmp	short $MEN211
 35030                                  $MIF211:
 35031 00005A90 83C40A                  	add	sp,10				;;AN000;; Clean up stack if error
 35032                                  	; 28/04/2023
 35033                                  	;stc					;;AN000;;
 35034                                  ; $ENDIF					;;AN000;;
 35035                                  $MEN211:
 35036 00005A93 833E[879A]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 35037                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 35038                                  ; $ENDDO NE,OR					;;AN000;;
 35039 00005A98 758C                    	jne	short $MLL214
 35040                                  ; $ENDDO C,LONG					;;AN000;; Go back and display the rest of the message
 35041                                  	; 10/04/2023
 35042                                  	;jc	short $MXL4
 35043 00005A9A E90CFF                  	jmp	$MDO165
 35044                                  
 35045                                  ; 28/04/2023
 35046                                  ;$MXL4:
 35047                                  ;$MLL214:
 35048                                  ;$MEN165:
 35049                                  ;	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 35050                                  ;	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 35051                                  ;						;;AN000;; Reset message number to null
 35052                                  ;	retn					;;AN000;; Return
 35053                                  
 35054                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35055                                  ;;
 35056                                  ;;	PROC NAME: $M_EXT_PAR_REPLACE
 35057                                  ;;
 35058                                  ;;	FUNCTION:
 35059                                  ;;	INPUTS:
 35060                                  ;;	OUPUTS:
 35061                                  ;;
 35062                                  ;;	REGS USED:
 35063                                  ;;
 35064                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35065                                  
 35066                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35067                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35068                                  
 35069                                  $M_EXT_PAR_REPLACE:
 35070 00005A9D 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 35071 00005A9F A1[879A]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 35072                                  	;mov	ax,[$M_RT+72]			;;AN000;; Prepare for get binary value (LOW)
 35073 00005AA2 C706[899A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35074                                  	;mov	word [$M_RT+74],10 ; $M_BASE10	;;AN000;; Set default divisor
 35075 00005AA8 E8B0FE                  	call	$M_CONVERT2ASC			;;AN000;;
 35076                                  $MDO215:
 35077 00005AAB 58                      	pop	ax				;;AN000;; Get character in register
 35078 00005AAC 8887[8B9A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35079                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 35080 00005AB0 43                      	inc	bx				;;AN000;; Increase buffer count
 35081 00005AB1 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 35082 00005AB4 7503                    	jne	short $MIF216			;;AN000;; No
 35083 00005AB6 E80D00                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35084                                  $MIF216:
 35085 00005AB9 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 35086 00005ABB 75EE                    	jnz	short $MDO215
 35087                                  
 35088 00005ABD B80D0A                  	mov	ax,0A0Dh ; mov ax,$M_CR_LF	;;AN000;; Move char into the buffer
 35089 00005AC0 8987[8B9A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],ax
 35090                                  	;;mov	[bx+$M_RT+76],ax		;;AN000;; Move char into the buffer
 35091 00005AC4 43                      	inc	bx				;;AN000;; Increase buffer count
 35092 00005AC5 43                      	inc	bx				;;AN000;; Increase buffer count
 35093                                  	;call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35094                                  	;retn					;;AN000::
 35095                                  	; 11/04/2023
 35096                                  	;jmp	$M_FLUSH_BUF
 35097                                  
 35098                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35099                                  ;;
 35100                                  ;;	PROC NAME: $M_FLUSH_BUFFER
 35101                                  ;;
 35102                                  ;;	FUNCTION: Display the contents of the temporary buffer
 35103                                  ;;	INPUTS: DI contains the number of bytes to display
 35104                                  ;;	OUTPUTS: BX reset to zero
 35105                                  ;;
 35106                                  ;;	REGS USED:
 35107                                  ;;
 35108                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35109                                  	
 35110                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35111                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:56C8h
 35112                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35113                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5E95h
 35114                                  $M_FLUSH_BUF:
 35115 00005AC6 51                      	push	cx				;;AN000;; Save changed regs
 35116 00005AC7 06                      	push	es				;;AN000;;
 35117 00005AC8 57                      	push	di				;;AN000;;
 35118 00005AC9 1E                      	push	ds				;;AN000;; Set ES pointing to buffer
 35119 00005ACA 07                      	pop	es				;;AN000;;
 35120 00005ACB 89D9                    	mov	cx,bx				;;AN000;; Set number of bytes to display
 35121 00005ACD 31DB                    	xor	bx,bx				;;AN000;; Reset buffer counter
 35122 00005ACF 8D3E[8B9A]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35123                                  	;lea	di,[$M_RT+76]			;;AN000;; Reset buffer location pointer
 35124 00005AD3 E86BFD                  	call	$M_DISPLAY_STRING		;;AN000;; Display the buffer
 35125 00005AD6 7204                    	jc	short $MIF314
 35126 00005AD8 5F                      	pop	di				;;AN000;; No, Restore changed regs
 35127 00005AD9 07                      	pop	es				;;AN000;;
 35128 00005ADA 59                      	pop	cx				;;AN000;;
 35129                                  	;jmp	short $MEN314
 35130                                  	; 11/04/2023
 35131 00005ADB C3                      	retn
 35132                                  $MIF314:
 35133 00005ADC 83C406                  	add	sp,6				;;AN000;; Fix stack
 35134 00005ADF F9                      	stc					;;AN000;;
 35135                                  $MEN314:
 35136 00005AE0 C3                      	retn					;;AN000;; Return
 35137                                  
 35138                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35139                                  ;;
 35140                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35141                                  
 35142                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35143                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5609h
 35144                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35145                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5DD6h
 35146                                  $M_DISPLAY_REPLACE:
 35147 00005AE1 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 35148                                  	;;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h ; 0
 35149 00005AE3 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0	
 35150                                  	;cmp	byte [si+6],0			;;AN000;; Is this the special case (convert to ASCII)
 35151 00005AE7 7511                    	jne	short $MIF276
 35152                                  	
 35153 00005AE9 C787[8B9A]202D          	mov	word [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],2D20h ; $M_SPACE_HYP
 35154                                  	;mov	word [bx+$M_RT+76],2D20h	;;AN000;; Move in a " -"
 35155                                  	
 35156 00005AEF 43                      	inc	bx				;;AN000;; Increment count
 35157 00005AF0 43                      	inc	bx				;;AN000;; Increment count
 35158                                  	
 35159 00005AF1 C687[8B9A]20            	mov	byte [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],20h ; $M_SPACE
 35160                                  	;mov	byte [bx+$M_RT+76],20h		;;AN000;; Move in a " "
 35161                                  	
 35162 00005AF6 43                      	inc	bx				;;AN000;; Increment count
 35163 00005AF7 E8CCFF                  	call	$M_FLUSH_BUF			;;AN000;; Write out " - " to prepare for special case
 35164                                  $MIF276:
 35165 00005AFA 5D                      	pop	bp				;;AN000;; Remember the return address
 35166 00005AFB 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 35167 00005AFD 31D2                    	xor	dx,dx				;;AN000;; Use DX for count of parms taken off the stack
 35168                                  
 35169 00005AFF 880E[819A]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl	;;AN000;; Save size to later clear stack
 35170                                  	;mov	[$M_RT+66],cl
 35171                                  	
 35172                                  	;mov	al,byte ptr $M_SL.$M_S_MINW	;;AN000;; Get the minimum width
 35173 00005B03 8A4409                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_MINW]
 35174                                  	;mov	al,[si+9]
 35175                                  	
 35176 00005B06 38C8                    	cmp	al,cl				;;AN000;; Do we need pad chars added?
 35177 00005B08 761E                    	jna	short $MIF278
 35178 00005B0A 28C8                    	sub	al,cl				;;AN000;; Calculate how many pad chars are needed.
 35179 00005B0C 88C6                    	mov	dh,al				;;AN000;; Save the number of pad characters
 35180                                  	
 35181                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 35182 00005B0E F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 35183                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be right aligned?
 35184 00005B12 7414                    	jz	short $MIF279			;;AN000;; No
 35185                                  $MDO280:
 35186                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 35187 00005B14 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35188                                  	;mov	al,[si+0Ah]
 35189 00005B17 8887[8B9A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35190                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 35191                                  	
 35192 00005B1B 43                      	inc	bx				;;AN000;;
 35193 00005B1C 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; 64		;;AN000;; Is buffer full?
 35194 00005B1F 7503                    	jne	short $MIF281
 35195 00005B21 E8A2FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35196                                  $MIF281:
 35197 00005B24 FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 35198 00005B26 75EC                    	jnz	short $MDO280
 35199                                  $MIF279:
 35200                                  $MIF278:
 35201                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,$M_UNLIM_W
 35202 00005B28 807C0800                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],0 ; $M_UNLIM_W
 35203                                  	;cmp	byte [si+8],0			;;AN000;; Is maximum width unlimited
 35204 00005B2C 740C                    	je	short $MIF286
 35205                                  	
 35206                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,CL	;;AN000;; Will we exceed maximum width?
 35207 00005B2E 384C08                  	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],cl
 35208                                  	;;cmp	byte [si+8],cl
 35209 00005B31 7307                    	jnb	short $MIF287
 35210                                  
 35211                                  	; 03/05/2023
 35212                                  	;;sub	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Calculate how many extra chars
 35213                                  	;sub	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35214                                  	;;sub	cl,[si+8]
 35215 00005B33 88CA                    	mov	dl,cl				;;AN000;; Remember how many chars to pop off
 35216                                  	;;mov	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Set new string length
 35217                                  	;mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35218                                  	;;mov	cl,[si+8]
 35219                                  	; 03/05/2023
 35220 00005B35 8A4C08                  	mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 35221 00005B38 28CA                    	sub	dl,cl
 35222                                  $MIF287:
 35223                                  $MIF286:
 35224 00005B3A 09C9                    	or	cx,cx				;;AN000;;
 35225 00005B3C 7424                    	jz	short $MIF290			;;AN000;;
 35226                                  $MDO291:
 35227                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type not $M_TYPE_MASK
 35228 00005B3E F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 35229                                  	;test	byte [si+7],0Fh			;;AN000;;
 35230 00005B42 750C                    	jnz	short $MIF292
 35231                                  
 35232                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 35233 00005B44 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35234                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?			 
 35235 00005B48 7406                    	jz	short $MIF292			;;AN000;; No
 35236                                  
 35237 00005B4A 268A05                  	mov	al,[es:di]			;;AN000;; Get first character from string
 35238 00005B4D 47                      	inc	di				;;AN000;; Next character in string
 35239 00005B4E EB01                    	jmp	short $MEN292
 35240                                  $MIF292:
 35241 00005B50 58                      	pop	ax				;;AN000;; Get character in register
 35242                                  $MEN292:
 35243                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 35244 00005B51 8887[8B9A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35245                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 35246                                  	; 03/05/2023
 35247 00005B55 43                      	inc	bx				;;AN000;; Increase buffer count
 35248 00005B56 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 35249 00005B59 7503                    	jne	short $MIF295			;;AN000;;
 35250 00005B5B E868FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35251                                  $MIF295:
 35252 00005B5E FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 35253 00005B60 75DC                    	jnz	short $MDO291
 35254                                  $MIF290:
 35255                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 35256 00005B62 F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 35257                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be left aligned?
 35258 00005B66 7518                    	jnz	short $MIF299			;;AN000;; Yes
 35259 00005B68 08F6                    	or	dh,dh				;;AN000;; Do we need pad chars added?
 35260 00005B6A 7414                    	jz	short $MIF300
 35261                                  $MDO301:
 35262                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 35263 00005B6C 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35264                                  	;mov	al,[si+0Ah]
 35265                                  
 35266                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 35267 00005B6F 8887[8B9A]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 35268                                  	; 03/05/2023
 35269                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 35270                                  
 35271 00005B73 43                      	inc	bx				;;AN000;;
 35272 00005B74 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ  ; 64		;;AN000;; Is buffer full?
 35273 00005B77 7503                    	jne	short $MIF302			;;AN000;; No
 35274                                  						;;AN000;; Yes
 35275 00005B79 E84AFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 35276                                  $MIF302:
 35277 00005B7C FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 35278 00005B7E 75EC                    	jnz	short $MDO301			;;AN000;;
 35279                                  $MIF300:
 35280                                  $MIF299:
 35281                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 35282 00005B80 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 35283                                  	;test	byte [si+7],0Fh			;;AN000;;
 35284 00005B84 7506                    	jnz	short $MIF307
 35285                                  	
 35286                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 35287 00005B86 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35288                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?
 35289                                  	; 11/04/2023
 35290                                  	;jz	short $MIF307			;;AN000;;
 35291                                  	;jmp	short $MEN307			;;AN000;;
 35292 00005B8A 750C                    	jnz	short $MEN307
 35293                                  $MIF307:
 35294 00005B8C 08D2                    	or	dl,dl				;;AN000;;
 35295 00005B8E 7408                    	jz	short $MIF309			;;AN000;;
 35296                                  $MDO310:
 35297 00005B90 8F06[859A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 35298                                  	;pop	word [$M_RT+70]			;;AN000;; Clean Up stack using spare variable
 35299 00005B94 FECA                    	dec	dl				;;AN000;; Are we done?
 35300 00005B96 75F8                    	jnz	short $MDO310
 35301                                  $MIF309:
 35302                                  $MEN307:
 35303 00005B98 E82BFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer for the final time
 35304 00005B9B 55                      	push	bp				;;AN000;; Restore the return address
 35305 00005B9C C3                      	retn					;;AN000;;
 35306                                  
 35307                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35308                                  ;;
 35309                                  ;;	PROC NAME: $M_CHAR_REPLACE
 35310                                  ;;
 35311                                  ;;	FUNCTION: Will prepare a single char or ASCIIZ string for replace
 35312                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35313                                  ;;		ES:DI contains the VALUE from SUBLIST
 35314                                  ;;	OUTPUTS: CX contains number of characters on stack
 35315                                  ;;		 Top of stack  --> Last character
 35316                                  ;;					. . .
 35317                                  ;;		 Bot of stack  --> First character
 35318                                  ;;
 35319                                  ;;	OTHER REGS Revised: AX
 35320                                  ;;
 35321                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35322                                  
 35323                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35324                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35325                                  $M_CHAR_REPLACE:
 35326 00005B9D 5D                      	pop	bp				;;AN000;; Save return address
 35327                                  	;test	$M_SL.$M_S_FLAG,not Char_Field_Char and $M_SIZE_MASK
 35328 00005B9E F6440730                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],30h
 35329                                  	;test	byte [si+7],30h			;;AN000;; Was Character specified?
 35330 00005BA2 7512                    	jnz	short $MIF317			;;AN000;; No
 35331 00005BA4 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 35332 00005BA7 50                      	push	ax				;;AN000;; Put it on the stack
 35333 00005BA8 41                      	inc	cx				;;AN000;; Increase the count
 35334 00005BA9 E88BFD                  	call	$M_IS_IT_DBCS			;;AN000;; Is this the first byte of a DB character
 35335 00005BAC 7306                    	jnc	short $MIF318
 35336 00005BAE 268A4501                	mov	al,[es:di+1]			;;AN000;; Get the next character
 35337 00005BB2 50                      	push	ax				;;AN000;; Put it on the stack
 35338 00005BB3 F8                      	clc					;;AN000;; Clear the carry
 35339                                  $MIF318:
 35340 00005BB4 EB0D                    	jmp	short $MEN317
 35341                                  $MIF317:
 35342                                  $MDO321:
 35343 00005BB6 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 35344 00005BB9 08C0                    	or	al,al				;;AN000;; Is it the NULL?
 35345 00005BBB 7404                    	jz	short $MEN321			;;AN000;; Yes
 35346 00005BBD 47                      	inc	di				;;AN000;; Next character
 35347 00005BBE 41                      	inc	cx				;;AN000;; Increment the count
 35348 00005BBF EBF5                    	jmp	short $MDO321
 35349                                  $MEN321:
 35350 00005BC1 29CF                    	sub	di,cx				;;AN000;; Set DI at the beginning of the string
 35351                                  $MEN317:
 35352 00005BC3 55                      	push	bp				;;AN000;; Restore return address
 35353 00005BC4 C3                      	retn					;;AN000;;	
 35354                                  
 35355                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35356                                  ;;
 35357                                  ;;	PROC NAME: $M_BIN2ASC_REPLACE
 35358                                  ;;
 35359                                  ;;	FUNCTION: Convert a signed or unsigned binary number to an ASCII string
 35360                                  ;;		  and prepare to display
 35361                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35362                                  ;;		ES:DI contains the VALUE from SUBLIST
 35363                                  ;;	OUTPUTS: CX contains number of characters on stack
 35364                                  ;;		 Top of stack  --> Last character
 35365                                  ;;					. . .
 35366                                  ;;		 Bot of stack  --> First character
 35367                                  ;;	OTHER REGS Revised: BX,DX,AX
 35368                                  ;;
 35369                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35370                                  
 35371                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35372                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35373                                  $M_BIN2ASC_REPLACE:
 35374 00005BC5 5D                      	pop	bp				;;AN000;; Save return address
 35375 00005BC6 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 35376 00005BC8 31C0                    	xor	ax,ax				;;AN000;; Prepare for get binary value (LOW)
 35377 00005BCA C706[899A]1000          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],16 ; $M_BASE16
 35378                                  	;mov	word [$M_RT+74],16  ; $M_BASE16	;;AN000;; Set default divisor
 35379                                  
 35380 00005BD0 31DB                    	xor	bx,bx				;;AN000;; Use BX as the NEG flag (if applicable)
 35381                                  
 35382                                  	;test	$M_SL.$M_S_FLAG,not $M_BYTE and $M_SIZE_MASK
 35383 00005BD2 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35384                                  	;test	byte [si+7],20h			;;AN000;; Was BYTE specified?		
 35385 00005BD6 7511                    	jnz	short $MIF325			;;AN000;; No
 35386                                  	
 35387 00005BD8 268A05                  	mov	al,[es:di]			;;AN000;; Setup byte in AL
 35388                                  
 35389                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35390 00005BDB F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35391                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?
 35392 00005BDF 753D                    	jnz	short $MIF326			;;AN000;; No
 35393                                  			 
 35394 00005BE1 A880                    	test	al,10000000b ; 80h		;;AN000;; Is this number negative?
 35395 00005BE3 7433                    	jz	short $MIF327			;;AN000;; No
 35396                                  						;;AN000;; Yes				
 35397                                  	; 12/04/2023
 35398                                  	;inc	bx				;;AN000;; Remember that it was negative
 35399 00005BE5 247F                    	and	al,01111111b			;;AN000;; Make it positive
 35400                                  
 35401                                  	; 12/04/2023 - Retrop DOS v4.0 COMMAND.COM
 35402                                  	;jmp	short $MIF327
 35403 00005BE7 EB2E                    	jmp	short $MIF350 ; inc bx
 35404                                  
 35405                                  ; 12/04/2023
 35406                                  %if 0
 35407                                  
 35408                                  $MIF327:
 35409                                  $MIF335:	; 12/04/2023
 35410                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35411                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35412                                  $MIF326:
 35413                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35414                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35415                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35416                                  	jnz	short $MIF330			;;AN000;; No
 35417                                  						;;AN000;; Yes
 35418                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35419                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35420                                  $MIF330:
 35421                                  	jmp	short $MEN325
 35422                                  
 35423                                  %endif
 35424                                  
 35425                                  $MIF325:
 35426                                  	;test	$M_SL.$M_S_FLAG,not $M_WORD and $M_SIZE_MASK
 35427 00005BE9 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35428                                  	;test	byte [si+7],10h			;;AN000;; Was WORD specified?
 35429 00005BED 7513                    	jnz	short $MIF333			;;AN000;; No
 35430                                  						;;AN000;; Yes
 35431 00005BEF 268B05                  	mov	ax,[es:di]			;;AN000;; Setup byte in AL
 35432                                  
 35433                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35434 00005BF2 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35435                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35436 00005BF6 7526                    	jnz	short $MIF334			;;AN000;; No
 35437                                  						;;AN000;; Yes
 35438 00005BF8 F6C480                  	test	ah,10000000b ; 80h		;;AN000;; Is this number negative?
 35439 00005BFB 741B                    	jz	short $MIF335			;;AN000;; No
 35440                                  						;;AN000;; Yes
 35441                                  	; 12/04/2023
 35442                                  	;inc	bx				;;AN000;; Remember that it was negative
 35443 00005BFD 80E47F                  	and	ah,01111111b			;;AN000;; Make it positive
 35444                                  
 35445                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35446                                  	;jmp	short $MIF335
 35447 00005C00 EB15                    	jmp	short $MIF350 ; inc bx
 35448                                  
 35449                                  ; 12/04/2023
 35450                                  %if 0
 35451                                  
 35452                                  $MIF335:
 35453                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35454                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35455                                  $MIF334:
 35456                                  	test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK ;;AN000;; Was Signed binary specified?
 35457                                  	jnz	short $MIF338
 35458                                  
 35459                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35460                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35461                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35462                                  	jnz	short $MIF338			;;AN000;; No
 35463                                  						;;AN000;; Yes
 35464                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35465                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35466                                  $MIF338:
 35467                                  	jmp	short $MEN333			;;AN000;;
 35468                                  %endif
 35469                                  
 35470                                  $MIF333:
 35471 00005C02 268B05                  	mov	ax,[es:di]			;;AN000;; Setup Double word in DX:AX
 35472 00005C05 268B5502                	mov	dx,[es:di+2]			;;AN000;;
 35473                                  
 35474                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35475 00005C09 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35476                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35477 00005C0D 750F                    	jnz	short $MIF341			;;AN000;; No
 35478                                  						;;AN000;; Yes
 35479 00005C0F F6C680                  	test	dh,10000000b ; 80h		;;AN000;; Is this number negative?
 35480 00005C12 7404                    	jz	short $MIF342			;;AN000;; No
 35481                                  						;;AN000;; Yes
 35482                                  	; 12/04/2023
 35483                                  	;inc	bx				;;AN000;; Remember that it was negative
 35484 00005C14 80E67F                  	and	dh,01111111b			;;AN000;; Make it positive
 35485                                  	
 35486                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35487                                  $MIF350:
 35488 00005C17 43                      	inc	bx
 35489                                  $MIF342:
 35490                                  	; 12/04/2023
 35491                                  $MIF327:
 35492                                  $MIF335:
 35493 00005C18 C706[899A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35494                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35495                                  $MIF341:
 35496                                  $MIF326:
 35497                                  	; 18/04/2023
 35498                                  $MIF334:
 35499                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35500 00005C1E F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35501                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35502 00005C22 7506                    	jnz	short $MIF345			;;AN000;; No
 35503                                  						;;AN000;; Yes
 35504 00005C24 C706[899A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35505                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35506                                  
 35507                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35508                                  	; ****************************************
 35509                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5F64h
 35510                                  $MIF345:
 35511                                  	; *** (Disassembled MSDOS 6.22 COMMAND.COM source code.)
 35512                                  $MEN333:
 35513 00005C2A F6440740                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],40h
 35514                                  	;test	byte [si+7],40h		; MSDOS 6.22
 35515                                  				; (Custom/International flag for thousand separator)
 35516 00005C2E 7428                    	jz	short $MEN325
 35517 00005C30 50                      	push	ax			; MSDOS 6.22
 35518 00005C31 52                      	push	dx
 35519 00005C32 B438                    	mov	ah,38h	 ; International
 35520 00005C34 30C0                    	xor	al,al
 35521 00005C36 8D16[8B9A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35522 00005C3A CD21                    	int	21h		; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 35523                                  				; get current-country info
 35524                                  				; DS:DX -> buffer for returned info
 35525 00005C3C 7305                    	jnb	short $MEN341		; (use country depended thousand separator)
 35526 00005C3E C606[929A]2C            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA],','
 35527                                  $MEN341:
 35528 00005C43 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 35529                                  	;mov	al,[si+0Ah]		; (save pad character)
 35530 00005C46 89C7                    	mov	di,ax
 35531 00005C48 5A                      	pop	dx
 35532 00005C49 58                      	pop	ax
 35533 00005C4A C6440A2C                	mov	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','  ; $M_COMMA
 35534                                  	;mov	byte [si+0Ah],','	; (comma is needed for converting procedure)
 35535 00005C4E E80AFD                  	call	$M_CONVERT2ASC
 35536 00005C51 89F8                    	mov	ax,di
 35537 00005C53 88440A                  	mov	[si+$M_SUBLIST_STRUC.$M_S_PAD],al
 35538                                  	;mov	[si+0Ah],al		; (restore pad character)
 35539 00005C56 EB03                    	jmp	short $MEN345		; MSDOS 6.22
 35540                                  	; *** (end of disassembled MSDOS 6.22 COMMAND.COM source code porehion) 
 35541                                  	; ****************************************
 35542                                  ;$MIF345:
 35543                                  ;$MEN333:
 35544                                  $MEN325:
 35545 00005C58 E800FD                  	call	$M_CONVERT2ASC			;;AN000;; Convert to ASCII string
 35546                                  $MEN345: 	; 15/06/2023 - MSDOS 6.22
 35547 00005C5B 09DB                    	or	bx,bx				;;AN000;; Was number negative?
 35548 00005C5D 7405                    	jz	short $MIF349			;;AN000;; No
 35549                                  						;;AN000;; Yes
 35550 00005C5F 31D2                    	xor	dx,dx				;;AN000;;
 35551 00005C61 B22D                    	mov	dl,'-'	; $M_NEG_SIGN		;;AN000;; Put "-" on the stack with the number
 35552 00005C63 52                      	push	dx				;;AN000;;
 35553                                  $MIF349:
 35554 00005C64 55                      	push	bp				;;AN000;; Restore return address
 35555 00005C65 C3                      	retn					;;AN000;; Return
 35556                                  
 35557                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35558                                  ;;
 35559                                  ;;	PROC NAME: $M_DATE_REPLACE
 35560                                  ;;
 35561                                  ;;	FUNCTION: Convert a date to a decimal ASCII string using current
 35562                                  ;;		  country format and prepare to display
 35563                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35564                                  ;;		ES:DI points at VALUE from SUBLIST
 35565                                  ;;	OUTPUTS: CX contains number of characters on stack
 35566                                  ;;		 Top of stack  --> Last character
 35567                                  ;;					. . .
 35568                                  ;;		 Bot of stack  --> First character
 35569                                  ;;	OTHER REGS Revised: DX,AX
 35570                                  ;;
 35571                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35572                                  
 35573                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35574                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35575                                  $M_DATE_REPLACE:
 35576 00005C66 5D                      	pop	bp				;;AN000;; Save return address
 35577                                  
 35578 00005C67 C706[899A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35579                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35580                                  	
 35581 00005C6D E86700                  	call	$M_GET_DATE			;;AN000;; Set date format/separator in $M_RT
 35582                                  						;;AN000;; All O.K.?
 35583 00005C70 31D2                    	xor	dx,dx				;;AN000;; Reset DX value
 35584                                  	; 12/04/2023
 35585                                  	;xor	ax,ax				;;AN000;; Reset AX value
 35586                                  	
 35587                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0
 35588                                  	;;cmp	word [$M_RT+76],0		;;AN000;; USA Date Format
 35589                                  	;jne	short $MIF351
 35590                                  	; 12/04/2023
 35591 00005C72 A1[8B9A]                	mov	ax,[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35592 00005C75 09C0                    	or	ax,ax
 35593 00005C77 751D                    	jnz	short $MIF351
 35594                                  
 35595 00005C79 E87200                  	call	$M_YEAR				;;AN000;; Get Year
 35596 00005C7C E88100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35597                                  
 35598 00005C7F FF36[969A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35599                                  	;push	word [$M_RT+87]			;;AN000;;
 35600                                  	
 35601 00005C83 41                      	inc	cx				;;AN000;; Increment count
 35602 00005C84 31C0                    	xor	ax,ax				;;AN000;; Reset AX value
 35603                                  
 35604 00005C86 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35605                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35606 00005C89 E87400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35607                                  	
 35608 00005C8C FF36[969A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35609                                  	;push	word [$M_RT+87]			;;AN000;;
 35610                                  
 35611 00005C90 41                      	inc	cx				;;AN000;; Increment count
 35612 00005C91 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35613                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35614                                  	; 12/04/2023
 35615                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35616 00005C94 EB3C                    	jmp	short $MIF354 ; **
 35617                                  $MIF351:
 35618                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],1
 35619                                  	;;cmp	word [$M_RT+76],1		;;AN000;; EUROPE Date Format
 35620                                  	;jne	short $MIF353
 35621                                  	; 12/04/2023
 35622                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35623 00005C96 48                      	dec	ax 
 35624 00005C97 751D                    	jnz	short $MIF352 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] <> 1
 35625                                  
 35626 00005C99 E85200                  	call	$M_YEAR				;;AN000;; Get Year
 35627 00005C9C E86100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35628                                  
 35629 00005C9F FF36[969A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35630                                  	;push	word [$M_RT+87]			;;AN000;;
 35631                                  	
 35632 00005CA3 41                      	inc	cx				;;AN000;; Increment count
 35633 00005CA4 31C0                    	xor	ax,ax				;;AN000;; Reset AX
 35634                                  
 35635 00005CA6 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35636                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35637 00005CA9 E85400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35638                                  
 35639 00005CAC FF36[969A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35640                                  	;push	word [$M_RT+87]			;;AN000;;
 35641                                  
 35642 00005CB0 41                      	inc	cx				;;AN000;;
 35643                                  	      
 35644 00005CB1 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35645                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35646                                  
 35647                                  	; 12/04/2023
 35648                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35649 00005CB4 EB1C                    	jmp	short $MIF354 ; **
 35650                                  	; 12/04/2023
 35651                                  $MIF352:
 35652                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]-1 ; *
 35653 00005CB6 48                      	dec	ax
 35654                                  	;jz	short $MIF353 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] = 2
 35655                                  	;xor	ax,ax
 35656                                  	;jmp	short $MIF355
 35657                                  	; 12/04/2023
 35658 00005CB7 751C                    	jnz	short $MIF355
 35659                                  $MIF353:
 35660                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],2
 35661                                  	;;cmp	word [$M_RT+76],2		;;AN000;; JAPAN Date Format
 35662                                  	;jne	short $MIF355
 35663                                  
 35664 00005CB9 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35665                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35666 00005CBC E84100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35667                                  	
 35668 00005CBF FF36[969A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35669                                  	;push	word [$M_RT+87]			;;AN000;;
 35670                                  
 35671 00005CC3 41                      	inc	cx				;;AN000;;
 35672                                  
 35673 00005CC4 8A4404                  	 mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35674                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35675 00005CC7 E83600                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35676                                  	
 35677 00005CCA FF36[969A]              	 push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35678                                  	;push	word [$M_RT+87]			;;AN000;;
 35679                                  	
 35680 00005CCE 41                      	inc	cx				;;AN000;;
 35681                                  
 35682 00005CCF E81C00                  	call	$M_YEAR				;;AN000;; Get Year
 35683                                  	; 12/04/2023
 35684                                  $MIF354:
 35685 00005CD2 E82B00                  	call	$M_CONVERTDATE	; **		;;AN000;; Convert it to an ASCII string
 35686                                  $MIF355:
 35687 00005CD5 55                      	push	bp				;;AN000;; Restore return address
 35688 00005CD6 C3                      	retn					;;AN000;; Return
 35689                                  
 35690                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35691                                  ;;
 35692                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35693                                  
 35694                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35695                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35696                                  $M_GET_DATE:
 35697                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 35698                                  	;mov	al,0 				;;AN000;; Get current country info
 35699                                  	; 12/04/2023
 35700 00005CD7 B80038                  	mov	ax,3800h
 35701                                  	;
 35702 00005CDA 8D16[8B9A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35703                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 35704 00005CDE CD21                    	int	21h				;;AN000;;
 35705 00005CE0 730B                    	jnc	short $MIF357
 35706                                  	;
 35707 00005CE2 C706[8B9A]0000          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0 ; $M_DEF_DATE_FORM
 35708                                  	;mov	word [$M_RT+76+0],0		;;AN000;; Set default date format (BH)
 35709 00005CE8 C606[969A]2D            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-' ; $M_DEF_DATE_SEP
 35710                                  	;mov	byte [$M_RT+87],'-'		;;AN000;; Set default date separator (BL)
 35711                                  $MIF357:
 35712 00005CED C3                      	retn					;;AN000;;
 35713                                  
 35714                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35715                                  ;;
 35716                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35717                                  
 35718                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35719                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35720                                  $M_YEAR:
 35721 00005CEE 8B4402                  	mov	ax,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35722                                  	;mov	ax,[si+2]			;;AN000;; Get Year
 35723                                  
 35724                                  	;test	$M_SL.$M_S_FLAG,Date_MDY_4 and $M_DATE_MASK
 35725 00005CF1 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35726                                  	;test	byte [si+7],10h			;;AN000;; Was Month/Day/Year (2 Digits) specified?
 35727 00005CF5 7508                    	jnz	short $MIF359			;;AN000;; No
 35728                                  						;;AN000;; Yes
 35729 00005CF7 83F863                  	cmp	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35730 00005CFA 7603                    	jna	short $MIF360			;;AN000;;
 35731 00005CFC B86300                  	mov	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35732                                  $MIF360:
 35733                                  $MIF359:
 35734 00005CFF C3                      	retn					;;AN000;;
 35735                                  
 35736                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35737                                  ;;
 35738                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35739                                  
 35740                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35741                                  $M_CONVERTDATE:
 35742                                  $M_CONVERTTIME: ; *!*!  ; 12/04/2023
 35743 00005D00 8F06[8B9A]              	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35744                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 35745 00005D04 880E[819A]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 35746                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 35747 00005D08 E850FC                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 35748 00005D0B 49                      	dec	cx				;;AN000;; Test if size only grew by 1
 35749 00005D0C 3A0E[819A]              	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 35750 00005D10 7505                    	jne	short $MIF363			;;AN000;; No
 35751 00005D12 B83000                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 35752 00005D15 50                      	push	ax				;;AN000;; Save it
 35753 00005D16 41                      	inc	cx				;;AN000;; Count it
 35754                                  $MIF363:
 35755 00005D17 41                      	inc	cx				;;AN000;; Restore CX
 35756 00005D18 FF36[8B9A]              	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35757                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 35758 00005D1C C3                      	retn
 35759                                  
 35760                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35761                                  ;;
 35762                                  ;;	PROC NAME: $M_TIME_REPLACE
 35763                                  ;;
 35764                                  ;;	FUNCTION: Convert a time to a decimal ASCII string
 35765                                  ;;		  and prepare to display
 35766                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35767                                  ;;		ES:DI points at VALUE from SUBLIST
 35768                                  ;;	OUTPUTS: CX contains number of characters on stack
 35769                                  ;;		 Top of stack  --> Last character
 35770                                  ;;					. . .
 35771                                  ;;		 Bot of stack  --> First character
 35772                                  ;;	REGS USED: BP,CX,AX
 35773                                  ;;
 35774                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35775                                  
 35776                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35777                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM							     ;;
 35778                                  $M_TIME_REPLACE:
 35779 00005D1D 5D                      	pop	bp				;;AN000;; Save return address
 35780                                  
 35781 00005D1E C706[899A]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35782                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35783                                  
 35784 00005D24 E87800                  	call	$M_GET_TIME			;;AN000;; All O.K.?
 35785                                  
 35786                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35787 00005D27 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1
 35788                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35789 00005D2B 741A                    	jz	short $MIF365			;;AN000;; No
 35790                                  						;;AN000;; Yes
 35791 00005D2D 803E[9C9A]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 35792                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 35793 00005D32 7513                    	jne	short $MIF366			;;AN000;; No
 35794                                  						;;AN000;; Yes
 35795 00005D34 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35796                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35797 00005D37 3C0C                    	cmp	al,12				;;AN000;; Is hour 12 or less?
 35798 00005D39 7C04                    	jl	short $MLL367 ; jnge		;;AN000;; Yes	
 35799 00005D3B 3C17                    	cmp	al,23				;;AN000;; Is hour 24 or greater?
 35800 00005D3D 7E04                    	jng	short $MIF367 ; jle		;;AN000;; No
 35801                                  $MLL367:
 35802 00005D3F B061                    	mov	al,'a'	; $M_AM			;;AN000;;
 35803                                  	;push	ax				;;AN000;; Push an "a" to represent AM.
 35804                                  	;inc	cx				;;AN000;;
 35805                                  	;jmp	short $MEN367			;;AN000;;
 35806                                  	; 12/04/2023
 35807 00005D41 EB02                    	jmp	short $MEN367 ; *
 35808                                  $MIF367:
 35809 00005D43 B070                    	mov	al,'p'	; $M_PM			;;AN000;;
 35810                                  $MEN367:	; * ; 12/04/2023
 35811 00005D45 50                      	push	ax				;;AN000;; Push an "p" to represent PM.
 35812 00005D46 41                      	inc	cx				;;AN000;;
 35813                                  ;$MEN367:
 35814                                  $MIF366:
 35815                                  $MIF365:					;;AN000;;
 35816 00005D47 31C0                    	xor	ax,ax				;;AN000;;
 35817 00005D49 31D2                    	xor	dx,dx				;;AN000;;
 35818                                  	
 35819                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35820 00005D4B F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35821                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35822 00005D4F 740B                    	jz	short $MIF372			;;AN000;;
 35823                                  
 35824 00005D51 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35825                                  	;mov	al,[si+5]			;;AN000;; Get Hundreds
 35826 00005D54 E8A9FF                  	call	$M_CONVERTTIME			;;AN000;;
 35827                                  
 35828 00005D57 FF36[949A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]
 35829                                  	;push	word [$M_RT+85]			;;AN000;;
 35830 00005D5B 41                      	inc	cx				;;AN000;;
 35831                                  $MIF372:
 35832                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35833 00005D5C F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35834                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35835 00005D60 7506                    	jnz	short $MLL374			;;AN000;; No
 35836                                  
 35837                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSS_Cty AND $M_SIZE_MASK
 35838 00005D62 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35839                                  	;test	byte [si+7],10h			;;AN000;; Was Hour/Min/Sec (12 Hour) specified?
 35840 00005D66 740B                    	jz	short $MIF374			;;AN000;; No
 35841                                  $MLL374:
 35842 00005D68 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35843                                  	;mov	al,[si+4]			;;AN000;; Get Seconds
 35844 00005D6B E892FF                  	call	$M_CONVERTTIME			;;AN000;;
 35845                                  
 35846 00005D6E FF36[989A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 35847                                  	;push	word [$M_RT+89]			;;AN000;;
 35848 00005D72 41                      	inc	cx				;;AN000;;
 35849                                  $MIF374:	;;  Do Hour/Min (12 Hour)
 35850 00005D73 8A4403                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+1]
 35851                                  	;mov	al,[si+3]			;;AN000;; Get Minutes
 35852 00005D76 E887FF                  	call	$M_CONVERTTIME			;;AN000;;
 35853                                  
 35854 00005D79 FF36[989A]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 35855                                  	;push	word [$M_RT+89]			;;AN000;;
 35856 00005D7D 41                      	inc	cx				;;AN000;;
 35857                                  
 35858 00005D7E 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35859                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35860                                  
 35861                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35862 00005D81 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1 
 35863                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35864 00005D85 7413                    	jz	short $MIF376			;;AN000;; No
 35865                                  
 35866 00005D87 803E[9C9A]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 35867                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 35868 00005D8C 750C                    	jne	short $MIF377			;;AN000;; No
 35869                                  
 35870 00005D8E 3C0D                    	cmp	al,13				;;AN000;; Is hour less than 12?
 35871 00005D90 7C02                    	jnge	short $MIF378 ; jl
 35872 00005D92 2C0C                    	sub	al,12				;;AN000;; Set to a 12 hour value
 35873                                  $MIF378:
 35874                                  	;cmp	al,0				;;AN000;; Is hour less than 12?
 35875                                  	;jne	short $MIF380			;;AN000;; No
 35876                                  	; 12/04/2023
 35877 00005D94 20C0                    	and	al,al
 35878 00005D96 7502                    	jnz	short $MIF380	
 35879 00005D98 B00C                    	mov	al,12				;;AN000;; Set to a 12 hour value
 35880                                  $MIF380:
 35881                                  $MIF377:
 35882                                  $MIF376:
 35883 00005D9A E8BEFB                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to ASCII
 35884 00005D9D 55                      	push	bp				;;AN000;; Restore return address
 35885 00005D9E C3                      	retn					;;AN000;; Return
 35886                                  
 35887                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35888                                  ;;
 35889                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35890                                  
 35891                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35892                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35893                                  $M_GET_TIME:
 35894                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 35895                                  	;mov	al,0 				;;AN000;; Get current country info
 35896                                  	; 12/04/2023
 35897 00005D9F B80038                  	mov	ax,3800h
 35898                                  	;
 35899 00005DA2 8D16[8B9A]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35900                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 35901 00005DA6 CD21                    	int	21h				;;AN000;;
 35902 00005DA8 7310                    	jnc	short $MIF384
 35903                                  
 35904 00005DAA C706[9C9A]0100          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],1 ; $M_DEF_TIME_FORM
 35905                                  	;mov	word [$M_RT+93],1		;;AN000;; Set default time format (BH)
 35906 00005DB0 C606[989A]3A            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],':' ; $M_DEF_TIME_SEP
 35907                                  	;mov	byte [$M_RT+89],':'		;;AN000;; Set default time separator (BL)
 35908 00005DB5 C606[949A]2E            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],'.' ; $M_DEF_DECI_SEP
 35909                                  	;mov	byte [$M_RT+85],'.'		;;AN000;; Set default time separator (BL)		
 35910                                  $MIF384:
 35911 00005DBA C3                      	retn					;;AN000;;
 35912                                  
 35913                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35914                                  ;;
 35915                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35916                                  
 35917                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35918                                  
 35919                                  ; 12/04/2023 
 35920                                  ;; ($M_CONVERTTIME is same with $M_CONVERTDATE)
 35921                                  %if 0
 35922                                  $M_CONVERTTIME:
 35923                                  $M_CONVERTDATE: ; *!*!  ; 12/04/2023
 35924                                  	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35925                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 35926                                  	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 35927                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 35928                                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 35929                                  	dec	cx				;;AN000;; Test if size only grew by 1
 35930                                  	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 35931                                  	jne	short $MIF386			;;AN000;; No
 35932                                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 35933                                  	push	ax				;;AN000;; Save it
 35934                                  	inc	cx				;;AN000;; Count itount it
 35935                                  $MIF386:
 35936                                  	inc	cx				;;AN000;; Restore CX
 35937                                  	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35938                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 35939                                  	retn
 35940                                  %endif
 35941                                  
 35942                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35943                                  ;;
 35944                                  ;;	PROC NAME: $M_WAIT_FOR_INPUT
 35945                                  ;;
 35946                                  ;;	FUNCTION:  To accept keyed input and return extended key value
 35947                                  ;;		   in AX register
 35948                                  ;;	INPUTS:    DL contains the DOS function requested for input
 35949                                  ;;	OUTPUTS:   AX contains the extended key value that was read
 35950                                  ;;	REGS USED:
 35951                                  ;;
 35952                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35953                                  
 35954                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35955                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6123h
 35956                                  $M_WAIT_FOR_INPUT:
 35957 00005DBB 51                      	push	cx				;;AN000;; Save CX
 35958 00005DBC 52                      	push	dx				;;AN000;; Save DX
 35959 00005DBD 1E                      	push	ds				;;AN000;; Save Data segment
 35960                                  
 35961 00005DBE 80FAC0                  	cmp	dl,0C0h ; DOS_CLR_KEYB_BUF_MASK	;;AN001;; Are we to clear the keyboard buffer?
 35962 00005DC1 7608                    	jna	short $MIF388	; jbe		;;AN001;; No,
 35963                                  						;;AN001;; Yes,
 35964 00005DC3 88D0                    	mov	al,dl				;;AN001;; Mov function into AL
 35965 00005DC5 240F                    	and	al,0Fh	; LOW_NIB_MASK		;;AN001;; Mask out the C in high nibble
 35966 00005DC7 B40C                    	mov	ah,0Ch	; DOS_CLR_KEYB_BUF 	;;AN001;; Set input function
 35967 00005DC9 EB02                    	jmp	short $MEN388
 35968                                  $MIF388:
 35969 00005DCB 88D4                    	mov	ah,dl				;;AN000;; Put DOS function in AH
 35970                                  $MEN388:
 35971 00005DCD 06                      	push	es				;;AN000;; Get output buffer segment
 35972 00005DCE 1F                      	pop	ds				;;AN000;;
 35973 00005DCF 89FA                    	mov	dx,di				;;AN000;; Get output buffer offset in case needed
 35974 00005DD1 CD21                    	int	21h				;;AN000;; Get keyboard input
 35975 00005DD3 1F                      	pop	ds				;;AN000;;
 35976 00005DD4 80FA0A                  	cmp	dl,0Ah	; DOS_BUF_KEYB_INP	;;AN000;;
 35977                                  	;clc					;;AN000;;
 35978 00005DD7 7412                    	je	short $MIF391
 35979 00005DD9 E85BFB                  	call	$M_IS_IT_DBCS			;;AN000;; Is this character DBCS?
 35980 00005DDC 730B                    	jnc	short $MIF392
 35981 00005DDE 88C1                    	mov	cl,al				;;AN000;; Save first character
 35982 00005DE0 88D4                    	mov	ah,dl				;;AN001;; Get back function
 35983 00005DE2 CD21                    	int	21h				;;AN000;; Get keyboard input
 35984 00005DE4 88CC                    	mov	ah,cl				;;AN000;; Retreive first character  AX = xxxx
 35985 00005DE6 F8                      	clc					;;AN000;; Clear carry condition
 35986 00005DE7 EB02                    	jmp	short $MEN392
 35987                                  $MIF392:
 35988 00005DE9 B400                    	mov	ah,0				;;AN000;; AX = 00xx where xx is SBCS
 35989                                  $MEN392:
 35990                                  $MIF391:
 35991                                  	;jc	short $MIF396 ; 15/06/2023
 35992 00005DEB 5A                      	pop	dx				;;AN000;;
 35993 00005DEC 59                      	pop	cx				;;AN000;;
 35994                                  	;jmp	short $MEN396
 35995 00005DED C3                      	retn
 35996                                  
 35997                                  	; 15/06/2023
 35998                                  ;$MIF396:
 35999                                  	;add	sp,4				;;AN000;;
 36000                                  	;stc					;;AN000;; Reset carry flag
 36001                                  ;$MEN396:
 36002                                  	;retn					;;AN000;; Return
 36003                                  
 36004                                  ; ----------------------------
 36005                                  ; MSDOS 6.0, TPRINTF.ASM, 1991
 36006                                  ; ----------------------------
 36007                                  ; include msgdcl.inc
 36008                                  ; ----------------------------
 36009                                  
 36010                                  ;============================================================================
 36011                                  ; HIGHLOAD.INC, MSDOS 6.0, 1992
 36012                                  ;============================================================================
 36013                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36014                                  
 36015                                  ;****************************************************************************
 36016                                  ;
 36017                                  ; This file contains routines needed to parse and implement user-given
 36018                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 36019                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 36020                                  ; the variables in highvar.inc, for use by the rest of the routines.
 36021                                  ;
 36022                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 36023                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 36024                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 36025                                  ;    DH/LH module opts
 36026                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 36027                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 36028                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 36029                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 36030                                  ; available during the load.
 36031                                  ;
 36032                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 36033                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 36034                                  ; upper-memory block which was not specified by the user... in addition, if
 36035                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 36036                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 36037                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 36038                                  ; free any UMBs so allocated.
 36039                                  ;
 36040                                  ; When a device driver loads, there is the additional problem of allocating its
 36041                                  ; initial load site; this should be restricted to the first UMB specified on
 36042                                  ; the command-line.  The function FreezeUM temporarily allocates all remaining
 36043                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 36044                                  ; UMB.  Then the initial allocation may be made, and a call to UnFreeze will
 36045                                  ; return any so-allocated memory elements to FREE, for the true load.  Note
 36046                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 36047                                  ;
 36048                                  ;****************************************************************************
 36049                                  
 36050                                  ;___PROCEDURES_______________________________________________________________
 36051                                  ;
 36052                                  ;   AddrToUmb   - converts a segment address in AX to its appropriate UMB #
 36053                                  ;   BigFree     - makes ES:0 point to the largest free MCB in UMB given as AL
 36054                                  ;   FixMem      - scans the UM chain and concatenates adjacent free MCBs
 36055                                  ;   FreezeUM    - Marks FROZEN all UM elements now FREE, save those in load UMB
 36056                                  ;   GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 36057                                  ;   GetLoadUMB  - Returns the load UMB number in AL (-1 if not specified)
 36058                                  ;   GetSize     - Returns the UMB in AL's minimum size (0 if not specified)
 36059                                  ;   GetXNum     - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 36060                                  ;   HideUMBs    - links UMBs and hides upper-memory as appropriate
 36061                                  ;   InitVar     - initializes all the variables used in ParseVar and HideUMBs
 36062                                  ;   NextMCB     - moves an MCB pointer forward to the next MCB
 36063                                  ;   ParseVar    - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 36064                                  ;   PrTable     - produces a printout of the variables in highvar.inc
 36065                                  ;   StoLoadSize - Overrides the load UMB minimum size with what's in AX
 36066                                  ;   StoLoadUMB  - Overrides the load UMB number with what's in AL
 36067                                  ;   UmbHead     - returns in AX the address of the first UMB block (0x9FFF)
 36068                                  ;   UnFreeze    - Marks FROZEN elements as FREE
 36069                                  ;
 36070                                  ;___VARIABLES________________________________________________________________
 36071                                  ;
 36072                                  ;   gnradix     - After a call to GetXNum, is 16 or 10, depending on the # read
 36073                                  ;
 36074                                  ;   Internal:
 36075                                  ;___PROCEDURES_______________________________________________________________
 36076                                  ;
 36077                                  ;   convUMB     - checks after GetXNum to convert an address to a UMB number
 36078                                  ;   findUMB     - makes ES:0 point to the first MCB in UMB given as AL
 36079                                  ;   fm_link     - links UMBs not already linked in
 36080                                  ;   fm_unlink   - unlinks UMBs if fm_umb is set to 0
 36081                                  ;   frezMCB     - marks as 8+FROZEN the MCB at ES:0
 36082                                  ;   hideMCB     - marks as HIDDEN the MCB at ES:0
 36083                                  ;   hideUMB     - marks as HIDDEN all FREE elements in UMB passed as AL
 36084                                  ;   hideUMB?    - hides as appropriate the UMB in CL
 36085                                  ;   hl_unlink   - unlinks UMBs if fm_umb is set to 0; restores strategy too
 36086                                  ;   incArgc     - increments fm_argc, for use with LH command-line parsing
 36087                                  ;   isEOL       - returns with ZF set iff AL contains CR or LF, or 0
 36088                                  ;   isFreeMCB   - returns with ZF set if current MCB (ES:0) is FREE
 36089                                  ;   isFrozMCB   - returns with ZF set if current MCB (ES:0) is FROZEN
 36090                                  ;   isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 36091                                  ;   isSysMCB    - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 36092                                  ;   isTiny      - returns with ZF set if user didn't specify /S
 36093                                  ;   isWhite     - returns with ZF set iff AL contains whitespace (or "=")
 36094                                  ;   loadLow     - returns AL==0 if UMB0 == 0, else AL==1
 36095                                  ;   mul32       - multiplies the number in DX:AX by gnradix
 36096                                  ;   parseL      - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 36097                                  ;   setUMBs     - links umbs and sets allocation strategy for a load
 36098                                  ;   shrinkMCB   - breaks an MCB into two pieces, the lowest one's size==AX
 36099                                  ;   stowSiz     - marks a given UMB as having a given minimum size
 36100                                  ;   stowUMB     - marks a given UMB as used, if it hasn't been so marked before
 36101                                  ;   toDigit     - converts a character-digit to its binary counterpart
 36102                                  ;   toPara      - divides DX:AX by 16; result in AX only
 36103                                  ;   toUpper     - accepts one argument (probly a register), and upper-cases it.
 36104                                  ;   unHideMCB   - marks as FREE the MCB at ES:0
 36105                                  ;   unMarkUMB   - marks a given UMB as unused, even if previously marked used
 36106                                  ;
 36107                                  ;****************************************************************************
 36108                                  
 36109                                  ;DOS_CHECK_STRATEGY equ 5800h ; Int 21h, Func 58h, Svc 0 = check alloc strat
 36110                                  ;DOS_SET_STRATEGY   equ 5801h ; Int 21h, Func 58h, Svc 1 = set alloc strategy
 36111                                  ;DOS_CHECK_UMBLINK  equ 5802h ; Int 21h, Func 58h, Svc 2 = check link state
 36112                                  ;DOS_SET_UMBLINK    equ 5803h ; Int 21h, Func 58h, Svc 3 = set link state
 36113                                  ;DOS_GET_DOS_LISTS  equ   52h ; Int 21h, Func 52h = return list of lists
 36114                                  ;DOS_UMB_HEAD       equ   8Ch ; Offset from ES (after func52h) to get UMBHead
 36115                                  
 36116                                  ; -----------------------------------------------------------------------------
 36117                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 36118                                  ; -----------------------------------------------------------------------------
 36119                                  ; ENTRY:       None
 36120                                  ; EXIT:        Variables listed in highvar.inc are initialized
 36121                                  ; ERROR EXIT:  None
 36122                                  ; USES:        Flags, variables in highvar.inc
 36123                                  ; -----------------------------------------------------------------------------
 36124                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 36125                                  ; are largely ignored, but it is initialized nonetheless.
 36126                                  ; -----------------------------------------------------------------------------
 36127                                  
 36128                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36129                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:615Fh
 36130                                  InitVar:	; proc	near
 36131                                  	;push	ax
 36132                                  	;push	cx
 36133                                  	;push	di
 36134 00005DEE 06                      	push	es ; * es = ds
 36135 00005DEF 8E06[159E]              	mov	es,[RESSEG]		;Point ES into appropriate data segment
 36136 00005DF3 31C0                    	xor	ax,ax
 36137                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 36138                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 36139 00005DF5 26A3[D804]              	mov	[es:fInHigh],ax ; 16/06/2023
 36140 00005DF9 26A3[DA04]              	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 36141 00005DFD 26C606[DC04]FF          	mov	byte [es:UmbLoad],0FFh ;UNSPECIFIED
 36142                                  					;Later is the # of the 1st spec'd UMB
 36143 00005E03 26A2[DF04]              	mov	[es:fm_argc],al		;Start with zero args having been read
 36144                                  
 36145 00005E07 FC                      	cld
 36146                                  
 36147 00005E08 B91000                  	mov	cx,16 ; MAXUMB		;For each entry
 36148 00005E0B BF[0204]                	mov	di,UmbUsed		;on the UmbUsed array,
 36149 00005E0E F3AA                    	rep	stosb			;	Store 0
 36150                                  
 36151                                  	;mov	cx,16 ; MAXUMB		;Okay... for each entry
 36152 00005E10 B110                    	mov	cl,16
 36153 00005E12 BF[1204]                	mov	di,UmbSize		;on the UmbSize array,
 36154 00005E15 F3AB                    	rep	stosw			;	Store 0
 36155                                  
 36156 00005E17 07                      	pop	es ; * es = ds
 36157                                  	;pop	di
 36158                                  	;pop	cx
 36159                                  	;pop	ax
 36160 00005E18 C3                       	retn
 36161                                  
 36162                                  ;InitVar endp
 36163                                  
 36164                                  ; -----------------------------------------------------------------------------
 36165                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 36166                                  ; -----------------------------------------------------------------------------
 36167                                  ; ENTRY   : None
 36168                                  ; EXIT    : None
 36169                                  ; ERROR   : None
 36170                                  ; USES    : Flags, fm_umb, fm_strat
 36171                                  ; -----------------------------------------------------------------------------
 36172                                  
 36173                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36174                                  FixMem:
 36175                                  	;push	ax
 36176                                  	;push	bx
 36177                                  	;push	cx
 36178                                  	;push	dx
 36179 00005E19 06                      	push	es
 36180                                  
 36181 00005E1A E84900                  	call	fm_link			; Link in UMBs
 36182                                  
 36183 00005E1D E82302                  	call	UmbHead			; Get first upper-memory MCB address (0x9FFF)
 36184 00005E20 723F                    	jc	short fmX		; (if couldn't get it, leave now).
 36185                                  
 36186 00005E22 8EC0                    	mov	es,ax			; It returns in AX, so move it to ES.
 36187                                  
 36188                                  ; - Walk MCB Chain ------------------------------------------------------------
 36189                                  
 36190 00005E24 31D2                    	xor	dx,dx			; We're keeping the address of the last MCB
 36191 00005E26 89D1                    	mov 	cx,dx			; in CX... and the last owner
 36192 00005E28 42                      	inc	dx			; in dx as we go through the loop:
 36193                                  
 36194                                  ; ------------------------------------------
 36195                                  ; FM10--DX  = last MCB's owner's PSP address
 36196                                  ;       CX  = last MCB's address (segment)
 36197                                  ; ------------------------------------------
 36198                                  
 36199                                  fm10:	
 36200 00005E29 26A00000                	mov	al,[es:arena_signature]	; if 'Z', don't repeat loop
 36201                                  	;mov	al,[es:0]
 36202 00005E2D 268B1E0100              	mov	bx,[es:arena_owner]	; if not zero, do nothing
 36203                                  	;mov	bx,[es:1]
 36204 00005E32 09D3                    	or	bx,dx			; dx was owner of previous MCB
 36205 00005E34 7516                    	jnz	short fm30		; If not both zero, don't cat.
 36206                                  
 36207                                  ; - Coalesce memory blocks at ES:00 and CX:00 ---------------------------------
 36208                                  
 36209                                  fm20:	
 36210 00005E36 268B1E0300              	mov	bx,[es:arena_size]	; Grab this block's Size,
 36211                                  	;mov	bx,[es:3]
 36212 00005E3B 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 36213 00005E3D 26A20000                	mov	[es:arena_signature], al ; & move the SECOND sig here
 36214                                  	;mov	[es:0],al
 36215                                  
 36216 00005E41 26031E0300              	add	bx,[es:arena_size]	; Size += first MCB's size
 36217                                  	;add	bx,1			; And add one for the header
 36218 00005E46 43                      	inc	bx
 36219 00005E47 26891E0300              	mov	[es:arena_size],bx	; Write the size
 36220                                  
 36221                                  	; ---------------------------------------------------------------------
 36222                                  fm30:	
 36223 00005E4C 8CC1                    	mov	cx,es			; Put this address on the stack
 36224 00005E4E 268B160100              	mov	dx,[es:arena_owner]	; And remember its owner
 36225                                  	;mov	dx,[es:1]
 36226                                  
 36227                                  	;NextMCB es,bx			; Move to the next MCB
 36228                                  	
 36229 00005E53 8CC3                    	mov	bx,es
 36230                                  	;add	bx,[es:3]
 36231 00005E55 26031E0300              	add	bx,[es:arena_size]
 36232 00005E5A 43                      	inc	bx
 36233 00005E5B 8EC3                    	mov	es,bx
 36234                                  
 36235                                  	;cmp	al,'Z'	; cmp al,5Ah
 36236 00005E5D 3C5A                    	cmp	al,arena_signature_end
 36237 00005E5F 75C8                    	jnz	short fm10		; If signature != 'Z', there are more.
 36238                                  fmX:	
 36239 00005E61 E81900                  	call	fm_unlink		; Unlink UMBs
 36240                                  
 36241 00005E64 07                      	pop	es
 36242                                  	;pop	dx
 36243                                  	;pop	cx
 36244                                  	;pop	bx
 36245                                  	;pop	ax
 36246 00005E65 C3                      	retn
 36247                                  
 36248                                  ; -----------------------------------------------------------------------------
 36249                                  ; 16/06/2023
 36250                                  
 36251                                  ;INT 21h - DOS 5+ - GET OR SET UMB LINK STATE
 36252                                  ; .......................................................
 36253                                  ;     AH = 58h
 36254                                  ;     AL = subfunction
 36255                                  ;	02h get UMB link state
 36256                                  ;	    Return:
 36257                                  ;		AL = current link state
 36258                                  ;		  00h - UMBs not part of DOS memory chain
 36259                                  ;		  01h - UMBs in DOS memory chain
 36260                                  ;	03h set UMB link state
 36261                                  ;	    BX = new link state
 36262                                  ;		0000h - remove UMBs from DOS memory chain
 36263                                  ;		0001h - add UMBs to DOS memory chain
 36264                                  ;
 36265                                  ;Return: CF clear if successful
 36266                                  ;	CF set on error
 36267                                  ;	AX = error code (01h) (see #01680)
 36268                                  ; .......................................................
 36269                                  
 36270                                  ; -----------------------------------------------------------------------------
 36271                                  ;*** fm_link - links UMBs not already linked in
 36272                                  ; -----------------------------------------------------------------------------
 36273                                  ; ENTRY:    None
 36274                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 36275                                  ; ERROR:    None
 36276                                  ; USES:     AX, BX, fm_umb
 36277                                  ; -----------------------------------------------------------------------------
 36278                                  
 36279                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36280                                  fm_link:
 36281 00005E66 B80258                  	mov	ax,5802h ; DOS_CHECK_UMBLINK
 36282 00005E69 CD21                    	int	21h			; Current link-state is now in al
 36283                                  
 36284                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 36285                                  
 36286                                  	;push	es
 36287                                  	;mov	es,[RESSEG]
 36288                                  	;mov	[es:fm_umb],al
 36289                                  	;pop	es
 36290 00005E6B 1E                      	push	ds
 36291 00005E6C 8E1E[159E]              	mov	ds,[RESSEG]
 36292 00005E70 A2[DD04]                	mov	[fm_umb],al
 36293 00005E73 1F                      	pop	ds
 36294                                  
 36295 00005E74 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 36296 00005E77 BB0100                  	mov	bx,1
 36297 00005E7A CD21                    	int	21h
 36298 00005E7C C3                      	retn
 36299                                  
 36300                                  ; -----------------------------------------------------------------------------
 36301                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 36302                                  ; -----------------------------------------------------------------------------
 36303                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 36304                                  ; EXIT:     None
 36305                                  ; ERROR:    None
 36306                                  ; USES:     AX, BX
 36307                                  ; -----------------------------------------------------------------------------
 36308                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36309                                  fm_unlink:
 36310 00005E7D 31DB                    	xor	bx,bx
 36311                                  	
 36312                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 36313                                  
 36314 00005E7F 1E                      	push    ds
 36315 00005E80 8E1E[159E]              	mov     ds,[RESSEG]
 36316 00005E84 8A1E[DD04]              	mov     bl,[fm_umb]
 36317 00005E88 1F                      	pop     ds
 36318                                  	
 36319 00005E89 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 36320 00005E8C CD21                    	int	21h			; so just use that, and call int 21h
 36321 00005E8E C3                      	retn
 36322                                  
 36323                                  ; -----------------------------------------------------------------------------
 36324                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 36325                                  ; laid out in highvar.inc
 36326                                  ; -----------------------------------------------------------------------------
 36327                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 36328                                  ; EXIT:     ES:SI points to first character in child program name
 36329                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 36330                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 36331                                  ; -----------------------------------------------------------------------------
 36332                                  ; Error codes (in AX if carry set on return):
 36333                                  ;
 36334                                  
 36335                                  ;PV_InvArg	equ	1	; Invalid argument passed
 36336                                  ;PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 36337                                  ;PV_InvSwt	equ	3	; Unrecognized switch passed
 36338                                  
 36339                                  ;
 36340                                  ; This routine exects ES:SI to point to a string much like the following:
 36341                                  ;    "/S/L:1,200;2 module options"
 36342                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 36343                                  ; required, though that's what this routine is supposed to parse.
 36344                                  ;
 36345                                  
 36346                                  ;optS		equ	'S'	; /S
 36347                                  ;optL		equ	'L'	; /L:...
 36348                                  
 36349                                  ;
 36350                                  ; -----------------------------------------------------------------------------
 36351                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 36352                                  ; a command-line for spawning a child process. For a typical LH command, say,
 36353                                  ;     lh /l:1,1000;2 print/d:lpt2
 36354                                  ; the arguments would look like (one per line):
 36355                                  ;     lh
 36356                                  ;     /l
 36357                                  ;     1
 36358                                  ;     1000
 36359                                  ;     2
 36360                                  ;     print
 36361                                  ;     /d
 36362                                  ;     :lpt2
 36363                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 36364                                  ; arg was the filename. So, inside this routine, we keep a running counter
 36365                                  ; of the number of arguments LH will need to skip in order to get to the
 36366                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 36367                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 36368                                  ; for:
 36369                                  ;    Each /L
 36370                                  ;    Each /S (there should be only one)
 36371                                  ;    Each UMB number (they follow ":" or ";")
 36372                                  ;    Each UMB size   (they follow ",")
 36373                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 36374                                  ; "print". Note that InitVar initializes fm_argc to zero.
 36375                                  ; -----------------------------------------------------------------------------
 36376                                  
 36377                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36378                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6216h
 36379                                  ParseVar:	; proc	near
 36380                                  	;push	di
 36381                                  	;push	ds ; *
 36382                                  	;push	es
 36383                                  	;
 36384                                  	; 16/06/2023
 36385                                  	; es = ds (from 'ParseLhCmd')
 36386                                  	;push	es		; Make DS:SI point to it, as well as ES:SI
 36387                                  	;pop	ds		; (regardless if we're in devhigh or loadhigh)
 36388                                  	
 36389 00005E8F FC                      	cld
 36390                                  
 36391                                  ; ------------------------------------------------
 36392                                  ; PV10--ES:SI = any whitespace on the command-line
 36393                                  ; ------------------------------------------------
 36394                                  
 36395                                  pv10:	
 36396 00005E90 AC                      	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 36397 00005E91 E8A800                  	call	isWhite
 36398 00005E94 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 36399 00005E96 3C2F                    	cmp	al,'/' ; SWTCH
 36400 00005E98 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 36401                                  
 36402 00005E9A 4E                      	dec	si		; Backup--it's now "odule options", and we need
 36403 00005E9B F8                      	clc			; that "m" we just read (or whatever it is).
 36404 00005E9C EB2C                    	jmp	short pvX	; Then return with carry clear == we're done.
 36405                                  pv20:
 36406 00005E9E AC                      	lodsb			; Just read 'S' or 'L', hopefully
 36407                                  
 36408                                  	;toUpper al		; So we make it upper-case, and...
 36409 00005E9F 24DF                    	and	al,0DFh
 36410                                  
 36411 00005EA1 3C53                    	cmp	al,'S' ; optS	; just read 'S'?
 36412 00005EA3 7510                    	jne	short pv30
 36413                                  
 36414 00005EA5 E87E00                  	call	incArgc		; If it's /S, it's another arg for LH to skip.
 36415                                  
 36416                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 36417                                  
 36418                                  	;push	es
 36419                                  	;mov	es,[RESSEG]
 36420                                  	;mov	byte [es:fUmbTiny],1
 36421                                  	;pop	es
 36422 00005EA8 1E                      	push	ds
 36423 00005EA9 8E1E[159E]              	mov	ds,[RESSEG]
 36424 00005EAD C606[D904]01            	mov	byte [fUmbTiny],1
 36425 00005EB2 1F                      	pop	ds
 36426                                  
 36427 00005EB3 EBDB                    	jmp	short pv10	; possibly even "/L...".
 36428                                  pv30:	
 36429 00005EB5 3C4C                    	cmp	al,'L' ; optL	; If it's not 'L' either, then it's a bad
 36430 00005EB7 750B                    	jne	short pvE1	; switch!
 36431                                  
 36432 00005EB9 E86A00                  	call	incArgc		; If it's /L, it's another arg for LH to skip.
 36433                                  
 36434 00005EBC E80C00                  	call	parseL
 36435 00005EBF 73CF                    	jnc	short pv10	; If no carry, go back and look for more
 36436                                  
 36437 00005EC1 4E                      	dec	si		; Else, back up and exit.
 36438 00005EC2 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 36439                                  pvE1:	
 36440 00005EC4 B80300                  	mov	ax,3 ; PV_InvSwt
 36441                                  				; Unrecognized switch passed
 36442                                  pvErr:
 36443 00005EC7 4E                      	dec	si
 36444 00005EC8 4E                      	dec	si
 36445 00005EC9 F9                      	stc
 36446                                  pvX:	
 36447                                  	;pop	es
 36448                                  	;pop	ds ; *
 36449                                  	;pop	di
 36450 00005ECA C3                      	retn
 36451                                  
 36452                                  ;ParseVar endp
 36453                                  
 36454                                  ; -----------------------------------------------------------------------------
 36455                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 36456                                  ; -----------------------------------------------------------------------------
 36457                                  ; ENTRY:    ES:SI points to colon
 36458                                  ; EXIT:     ES:SI points to first character not parsed
 36459                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 36460                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 36461                                  ; -----------------------------------------------------------------------------
 36462                                  ; If the string here is terminated with anything other than whitespace or a
 36463                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 36464                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 36465                                  ; makes sure the app /L: is reported as being the culprit.
 36466                                  ; -----------------------------------------------------------------------------
 36467                                  
 36468                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36469                                  parseL:
 36470 00005ECB AC                      	lodsb
 36471 00005ECC 3C3A                    	cmp	al,':'		; Make sure they did /L:
 36472 00005ECE 754A                    	jne	short plE1	; If they didn't, return with carry set.
 36473                                  
 36474                                  ; ------------------------------------------
 36475                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 36476                                  ; ------------------------------------------
 36477                                  
 36478                                  pl10:
 36479 00005ED0 E8FD00                  	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 36480 00005ED3 724B                    	jc	short plE2	; And error if it's a bad number.
 36481 00005ED5 E8C801                  	call	convUMB		; Convert any address to a UMB number
 36482                                  
 36483 00005ED8 88C1                    	mov	cl,al	; !*	; Remember the UMB number
 36484 00005EDA E88300                  	call	stowUMB		; Mark this UMB # as used;
 36485 00005EDD 7241                    	jc	short plE2	; If it was already marked, it'll error
 36486                                  
 36487 00005EDF E84400                  	call	incArgc		; Each UMB number is another arg for LH to skip
 36488                                  
 36489 00005EE2 AC                      	lodsb
 36490 00005EE3 3C3B                    	cmp	al,';'		; Did "umb;" ?
 36491 00005EE5 74E9                    	je	short pl10	; Yep: go back and get another UMB.
 36492                                  
 36493 00005EE7 E85200                  	call	isWhite		; Did "umb " ?
 36494 00005EEA 7439                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 36495                                  
 36496 00005EEC E84200                  	call	isEOL		; Did "umb" ?
 36497 00005EEF 7433                    	jz	short plSwX	; If so, backup and exit like everything's ok
 36498                                  
 36499 00005EF1 3C2F                    	cmp	al,'/' ; SWTCH	; Did "umb/" ? (as in, "/L:1,100;2/S")
 36500 00005EF3 742F                    	je	short plSwX	; If so, back up ES:SI one character and return
 36501                                  
 36502 00005EF5 3C2C                    	cmp	al,','		; Did "umb," ?
 36503 00005EF7 7521                    	jne	short plE1	; Just what the heck DID they do? Return error.
 36504                                  
 36505                                  ; --- Read a size -------------------------------------------------------------
 36506                                  
 36507 00005EF9 E8D400                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 36508 00005EFC 721C                    	jc	short plE1	; And error if it's a bad size.
 36509                                  
 36510 00005EFE E83401                  	call	toPara		; Convert from bytes to paragraphs
 36511                                  
 36512 00005F01 E88600                  	call	stowSiz		; CL still has the UMB number for this routine
 36513                                  
 36514 00005F04 E81F00                  	call	incArgc		; Each UMB size is another arg for LH to skip
 36515                                  
 36516 00005F07 AC                      	lodsb
 36517 00005F08 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 36518 00005F0A 74C4                    	je	short pl10		;
 36519                                  
 36520 00005F0C E82D00                  	call	isWhite		; Did it end with whitespace?
 36521 00005F0F 7414                    	jz	short plX	; If so, we're done here--go back.
 36522                                  
 36523 00005F11 E81D00                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 36524 00005F14 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 36525                                  
 36526 00005F16 3C2F                    	cmp	al,'/' ; SWTCH	; Did they do "umb,size/" ?
 36527 00005F18 740A                    	je	short plSwX	; If so, again, we're done here.
 36528                                  plE1:	
 36529 00005F1A B80100                  	mov	ax,1 ; PV_InvArg
 36530                                  				; If not, we don't know WHAT they did...
 36531 00005F1D 4E                      	dec	si
 36532 00005F1E F9                      	stc
 36533 00005F1F C3                      	retn
 36534                                  plE2:
 36535                                  	; cf = 1 
 36536 00005F20 B80200                  	mov	ax,2 ; PV_BadUMB
 36537                                  				; In this case, they've specified a UMB twice
 36538                                  	;stc
 36539 00005F23 C3                      	retn
 36540                                  plSwX:
 36541 00005F24 4E                      	dec	si		; If we hit a '/' character, back up one char
 36542                                  				; so the whitespace checker will see it too.
 36543                                  plX:
 36544                                  	; cf = 0
 36545                                  	;clc			; Then just return with carry clear, so
 36546 00005F25 C3                      	retn			; ParseVar will go about its business.
 36547                                  
 36548                                  ; -----------------------------------------------------------------------------
 36549                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 36550                                  ; -----------------------------------------------------------------------------
 36551                                  ; ENTRY:    None
 36552                                  ; EXIT:     None
 36553                                  ; ERROR:    None
 36554                                  ; USES:     fm_argc, flags
 36555                                  ; -----------------------------------------------------------------------------
 36556                                  
 36557                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36558                                  incArgc:
 36559                                  	;push	ax
 36560                                  
 36561                                  	;;getdata al,fm_argc	; Obtain previous value of fm_argc,
 36562                                  	;
 36563                                  	;push	ds		; getdata (macro)
 36564                                  	;			; getdata al, fm_argc
 36565                                  	;mov	ds,[RESSEG]
 36566                                  	;mov	al,[fm_argc]	; Obtain previous value of fm_argc,
 36567                                  	;pop	ds
 36568                                  	;
 36569                                  	;inc	al		; Increment it,
 36570                                  	;
 36571                                  	;;putdata fm_argc,al	; And store it right back.
 36572                                  	;
 36573                                  	;push	es		; putdata (macro)
 36574                                  	;			; putdata fm_argc, al
 36575                                  	;mov	es,[RESSEG]
 36576                                  	;mov	[es:fm_argc],al	; and store it right back.
 36577                                  	;pop	es
 36578                                  
 36579                                  	; 16/06/2023
 36580 00005F26 1E                      	push	ds
 36581 00005F27 8E1E[159E]              	mov	ds,[RESSEG]
 36582 00005F2B FE06[DF04]              	inc	byte [fm_argc]	; increment fm_argc
 36583 00005F2F 1F                      	pop	ds
 36584                                  
 36585                                  	;pop	ax
 36586 00005F30 C3                      	retn
 36587                                  
 36588                                  ; -----------------------------------------------------------------------------
 36589                                  ;*** isEOL - returns with ZF set iff AL contains CR or LF, or 0
 36590                                  ; -----------------------------------------------------------------------------
 36591                                  ; ENTRY:    AL contains character to test
 36592                                  ; EXIT:     ZF set if AL contains CR or LF, or 0
 36593                                  ; ERROR:    None
 36594                                  ; USES:     ZF
 36595                                  ; -----------------------------------------------------------------------------
 36596                                  
 36597                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36598                                  isEOL:
 36599                                  	;cmp	al,0		; Null-terminator
 36600 00005F31 20C0                    	and	al,al
 36601 00005F33 7406                    	jz	short ieX
 36602 00005F35 3C0D                    	cmp	al,0Dh ; CR	; Carriage Return
 36603 00005F37 7402                    	je	short ieX
 36604 00005F39 3C0A                    	cmp	al,0Ah ; LF	; LineFeed
 36605                                  ieX:
 36606 00005F3B C3                      	retn
 36607                                  
 36608                                  
 36609                                  ; -----------------------------------------------------------------------------
 36610                                  ;*** isWhite - returns with ZF set iff AL contains whitespace (or "=")
 36611                                  ; -----------------------------------------------------------------------------
 36612                                  ; ENTRY:    AL contains character to test
 36613                                  ; EXIT:     ZF set if AL contains space, tab, or equals
 36614                                  ; ERROR:    None
 36615                                  ; USES:     ZF
 36616                                  ; -----------------------------------------------------------------------------
 36617                                  
 36618                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36619                                  isWhite:
 36620 00005F3C 3C20                    	cmp	al,' '		; Space
 36621 00005F3E 7406                    	je	short iwX
 36622 00005F40 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 36623 00005F42 7402                    	je	short iwX
 36624 00005F44 3C09                    	cmp	al,09h ; TAB	; Tab
 36625                                  iwX:
 36626 00005F46 C3                      	retn
 36627                                  
 36628                                  ; -----------------------------------------------------------------------------
 36629                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 36630                                  ; -----------------------------------------------------------------------------
 36631                                  ; ENTRY:    AL contains UMB number
 36632                                  ; EXIT:     None
 36633                                  ; ERROR:    None
 36634                                  ; USES:     Flags, variables in highvar.inc
 36635                                  ; -----------------------------------------------------------------------------
 36636                                  
 36637                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36638                                  unMarkUMB:
 36639                                  	;;pushreg <ax,bx,di,es>
 36640                                  	;push	ax ; ***
 36641                                  	
 36642                                  	;push	bx ; **
 36643                                  	
 36644                                  	;push	di
 36645                                  	;push	es
 36646 00005F47 1E                      	push	ds ; *	
 36647                                  
 36648                                  	;;dataseg es
 36649                                  	;mov	es,[RESSEG]
 36650                                  
 36651 00005F48 8E1E[159E]              	mov	ds,[RESSEG] ; *
 36652                                  	
 36653                                  	;xor	ah,ah ; 0
 36654                                  	;mov	bx,ax
 36655                                  	;mov	byte [es:bx+UmbUsed],0
 36656                                  	;mov	[bx+UmbUsed],ah ; marks the UMB as unused
 36657 00005F4C 88C3                    	mov	bl,al
 36658 00005F4E 30FF                    	xor	bh,bh ; 0	
 36659 00005F50 88BF[0204]              	mov	[bx+UmbUsed],bh ; 0 ; **
 36660                                  
 36661                                  	;cmp	[es:UmbLoad],al
 36662                                  	;jnz	short umu10
 36663 00005F54 3806[DC04]              	cmp	[UmbLoad],al
 36664 00005F58 7504                    	jne	short umu10
 36665                                  
 36666                                  	;mov	byte [es:UmbLoad],0
 36667                                  	;mov	[UmbLoad],ah	; If unmarked the load UMB, load into convent.
 36668 00005F5A 883E[DC04]              	mov	[UmbLoad],bh ; 0 ; **
 36669                                  umu10:	
 36670 00005F5E 1F                      	pop	ds ; *
 36671                                  	;;popreg <es,di,bx,ax>
 36672                                  	;pop	es
 36673                                  	;pop	di
 36674                                  	
 36675                                  	;pop	bx ; **
 36676                                  	
 36677                                  	;pop	ax ; ***
 36678                                  
 36679                                  	;;normseg es
 36680                                  	
 36681 00005F5F C3                      	retn
 36682                                  
 36683                                  ; -----------------------------------------------------------------------------
 36684                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 36685                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 36686                                  ; listed in the /L:... chain.  If it's the first one specified, it sets UmbLoad
 36687                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 36688                                  ; -----------------------------------------------------------------------------
 36689                                  ; ENTRY:    AL contains UMB number, as specified by the user
 36690                                  ; EXIT:     None
 36691                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 36692                                  ; USES:     AX, Flags, variables in highvar.inc
 36693                                  ; -----------------------------------------------------------------------------
 36694                                  
 36695                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36696                                  stowUMB:
 36697 00005F60 3C10                    	cmp	al,16 ; MAXUMB
 36698 00005F62 7202                    	jb	short su10
 36699 00005F64 F9                      	stc
 36700 00005F65 C3                      	retn			; Ooops-- UMB>=MAXUMB
 36701                                  su10:
 36702                                  	;pushreg <bx,di,si,ds,es>
 36703                                  	;dataseg es		; Point ES into appropriate data segment
 36704                                  	;dataseg ds		; Point DS into appropriate data segment
 36705                                  
 36706                                  	;push	bx ; **
 36707                                  	
 36708                                  	;push	di
 36709                                  	;push	si
 36710                                  
 36711 00005F66 1E                      	push	ds ; *
 36712                                  
 36713                                  	;push	es
 36714                                  	;mov	es,[RESSEG]
 36715 00005F67 8E1E[159E]              	mov	ds,[RESSEG]
 36716                                  
 36717 00005F6B 803E[DC04]FF            	cmp	byte [UmbLoad],0FFh ; UNSPECIFIED
 36718                                  				; If this, we haven't been here before
 36719 00005F70 7503                    	jne	short su20
 36720 00005F72 A2[DC04]                	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 36721                                  su20:	
 36722 00005F75 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 36723 00005F77 740F                    	jz	short su30	; that we should do here.
 36724                                  
 36725                                  	;mov	bl,al
 36726                                  	;xor	bh,bh
 36727                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 36728 00005F79 30E4                    	xor	ah,ah
 36729 00005F7B 89C3                    	mov	bx,ax
 36730 00005F7D B001                    	mov	al,1
 36731                                  
 36732                                  	;xchg	[es:bx+UmbUsed],al
 36733 00005F7F 8687[0204]              	xchg	[bx+UmbUsed],al
 36734                                  
 36735 00005F83 08C0                    	or	al,al		; If it was already 1, then al==1... and that
 36736 00005F85 7401                    	jz	short su30	; means an error.
 36737                                  
 36738 00005F87 F9                      	stc			; OOOPS! This one's been used before. :(
 36739                                  su30:	
 36740                                  	;popreg	<es,ds,si,di,bx>
 36741                                  	;normseg ds
 36742                                  	;normseg es
 36743                                  	;retn
 36744                                  
 36745                                  	;pop	es
 36746                                  	
 36747 00005F88 1F                      	pop	ds ; *
 36748                                  	
 36749                                  	;pop	si
 36750                                  	;pop	di
 36751                                  	
 36752                                  	;pop	bx ; **
 36753                                  
 36754 00005F89 C3                      	retn
 36755                                  
 36756                                  ; -----------------------------------------------------------------------------
 36757                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36758                                  ; -----------------------------------------------------------------------------
 36759                                  ; ENTRY:    CL contains UMB number, AX contains size
 36760                                  ; EXIT:     None
 36761                                  ; ERROR:    None
 36762                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36763                                  ; -----------------------------------------------------------------------------
 36764                                  	
 36765                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36766                                  stowSiz:
 36767                                  	;pushreg <bx,di,es>
 36768                                  	;dataseg es		; Point ES into appropriate data seg
 36769                                  
 36770                                  	;push	bx ; **
 36771                                  	
 36772                                  	;push	di
 36773                                  	;push	es
 36774                                  	;mov	es,[RESSEG]
 36775 00005F8A 1E                      	push	ds ; *
 36776 00005F8B 8E1E[159E]              	mov	ds,[RESSEG]
 36777                                  
 36778 00005F8F 88CB                    	mov	bl,cl		; Now bl==UMB number, AX==size
 36779 00005F91 B700                    	mov	bh,0		;     bx==UMB number, AX==size
 36780 00005F93 D0E3                    	shl	bl,1		;     bx==offset into array, AX=size
 36781                                  	;mov	[es:bx+UmbSize],ax
 36782 00005F95 8987[1204]              	mov	[bx+UmbSize],ax	; Store the size
 36783                                  
 36784 00005F99 1F                      	pop	ds ; *
 36785                                  
 36786                                  	;popreg	<es,di,bx>
 36787                                  	;normseg es		; Return ES to where it was
 36788                                  
 36789                                  	;pop	es
 36790                                  	;pop	di
 36791                                  	
 36792                                  	;pop	bx ; **
 36793                                  
 36794 00005F9A C3                      	retn
 36795                                  
 36796                                  ; -----------------------------------------------------------------------------
 36797                                  ;*** toDigit - converts a character-digit to its binary counterpart
 36798                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 36799                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).  A-F
 36800                                  ; are considered valid iff gnradix is 16.
 36801                                  ; -----------------------------------------------------------------------------
 36802                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 36803                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 36804                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 36805                                  ; USES:     CL, Flags
 36806                                  ; -----------------------------------------------------------------------------
 36807                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36808                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36809                                  ; will be 10 or 16.
 36810                                  ; -----------------------------------------------------------------------------
 36811                                  
 36812                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36813                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6358h
 36814                                  gnradix:
 36815 00005F9B 0000                    	dw	0		; Must be a word--16x16 multiplication
 36816                                  
 36817                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36818                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:635Ah
 36819                                  toDigit:
 36820                                  	;cmp	word [gnradix],16
 36821 00005F9D 803E[9B5F]10            	cmp	byte [gnradix],16
 36822 00005FA2 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 36823                                  
 36824 00005FA4 80F961                  	cmp	cl,'a'
 36825 00005FA7 7209                    	jb	short td10
 36826 00005FA9 80F966                  	cmp	cl,'f'
 36827 00005FAC 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 36828 00005FAE 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 36829                                  ;	clc			; <- CLC is implicit from last SUB
 36830 00005FB1 C3                      	retn
 36831                                  td10:
 36832 00005FB2 80F941                  	cmp	cl,'A'
 36833 00005FB5 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 36834 00005FB7 80F946                  	cmp	cl,'F'
 36835 00005FBA 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 36836 00005FBC 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 36837                                  ;	clc			; <- CLC is implicit from last SUB
 36838                                  tdErr:
 36839 00005FBF C3                      	retn
 36840                                  td20:
 36841 00005FC0 80F930                  	cmp	cl,'0'		; If less than zero,
 36842                                  	;jb	short tdE	; Done.
 36843 00005FC3 72FA                    	jb	short tdErr ; cf = 1
 36844 00005FC5 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 36845 00005FC8 7704                    	ja	short tdE	; Done.
 36846 00005FCA 80E930                  	sub	cl,'0'	  ; 30h	; Okay--make '0'==0 and return.
 36847                                  ;	clc			; <- CLC is implicit from last SUB
 36848 00005FCD C3                      	retn
 36849                                  tdE:
 36850 00005FCE F9                      	stc
 36851 00005FCF C3                      	retn
 36852                                  
 36853                                  ; -----------------------------------------------------------------------------
 36854                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 36855                                  ; -----------------------------------------------------------------------------
 36856                                  ; ENTRY:    ES:SI points to an ascii string to scan
 36857                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 36858                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 36859                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 36860                                  ; -----------------------------------------------------------------------------
 36861                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36862                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36863                                  ; will be 10 or 16.
 36864                                  ; -----------------------------------------------------------------------------
 36865                                  
 36866                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 36867                                  GetXNum:
 36868                                  	;pushreg <bx,cx,ds>
 36869                                  	
 36870                                  	;push	bx ; **
 36871 00005FD0 51                      	push	cx ; *
 36872                                  	
 36873                                  	;push	ds
 36874                                  
 36875 00005FD1 FC                      	cld
 36876 00005FD2 31C0                    	xor	ax,ax
 36877 00005FD4 31DB                    	xor	bx,bx
 36878 00005FD6 31C9                    	xor	cx,cx
 36879 00005FD8 31D2                    	xor	dx,dx		; Start with 0 (makes sense)
 36880                                  
 36881                                  	;mov	word [gnradix],10 ; And default to a radix of 10 (dec)
 36882 00005FDA C606[9B5F]0A            	mov	byte [gnradix],10
 36883                                  
 36884 00005FDF 268A0C                  	mov	cl,[es:si]	; Now AX=0, BX=0, CH=0/CL=char, DX=0
 36885 00005FE2 E8B8FF                  	call	toDigit
 36886 00005FE5 722D                    	jc	short gxnE	; If it's not a digit, leave now.
 36887                                  
 36888 00005FE7 08C9                    	or	cl,cl
 36889 00005FE9 7515                    	jnz	short gxn20	; Doesn't have '0x'
 36890 00005FEB 268A4C01                	mov	cl,[es:si+1]
 36891 00005FEF 80F978                  	cmp	cl,'x'		; Either 'x'...
 36892 00005FF2 7405                    	je	short gxn10
 36893 00005FF4 80F958                  	cmp	cl,'X'		; ...or 'X' means it's hexadecimal
 36894 00005FF7 7507                    	jne	short gxn20
 36895                                  
 36896                                  gxn10:
 36897                                  	;mov	word [gnradix],16
 36898 00005FF9 C606[9B5F]10            	mov	byte [gnradix],16
 36899 00005FFE 46                      	inc	si		; Since we read "0x", march over it.
 36900 00005FFF 46                      	inc	si
 36901                                  
 36902                                  ; ------------------------------------------------------
 36903                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 36904                                  ;        DX:AX = current total
 36905                                  ;        BX    = 0
 36906                                  ;        CH    = 0
 36907                                  ; ------------------------------------------------------
 36908                                  
 36909                                  gxn20:
 36910 00006000 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 36911 00006003 46                      	inc	si
 36912                                  
 36913 00006004 E896FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 36914 00006007 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 36915                                  
 36916 00006009 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 36917 0000600C 7206                    	jc	short gxnX	; (if it's too big, error out)
 36918                                  
 36919 0000600E 01C8                    	add	ax,cx		; Add the digit
 36920 00006010 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 if last add wrapped
 36921                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 36922                                  	;jmp	short gxn20
 36923 00006012 73EC                    	jnc	short gxn20
 36924                                  gxnE:
 36925                                  	; cf = 1
 36926                                  	;stc			; In this case, we need to set the carry
 36927                                  	;jmp	short gxnX	; and leave--there were no digits given.
 36928                                  ;gxnQ:
 36929                                  	;dec	si		; Don't read in the offensive character.
 36930                                  	;clc			; And clear carry, so they know it's okay.
 36931                                  gxnX:
 36932                                  	;popreg	<ds,cx,bx>
 36933                                  
 36934                                  	;pop	ds
 36935                                  
 36936 00006014 59                      	pop	cx ; *
 36937                                  	;pop	bx ; **
 36938                                  
 36939 00006015 C3                      	retn
 36940                                  gxnQ:
 36941 00006016 4E                      	dec	si
 36942 00006017 F8                      	clc
 36943 00006018 EBFA                    	jmp	short gxnX
 36944                                  
 36945                                  ; -----------------------------------------------------------------------------
 36946                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 36947                                  ; -----------------------------------------------------------------------------
 36948                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 36949                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 36950                                  ; ERROR:   Carry set if number was too large
 36951                                  ; USES:    Flags, AX, DX
 36952                                  ; -----------------------------------------------------------------------------
 36953                                  
 36954                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 36955                                  mul32:
 36956 0000601A 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 36957 0000601B 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 36958 0000601D F726[9B5F]              	mul	word [gnradix]	; DX=?,      AX=new:hi, TOS=old:lo, BX=0
 36959 00006021 7210                    	jc	short m32E	; Too big?
 36960                                  
 36961 00006023 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 36962 00006025 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig,   BX=0
 36963                                  
 36964 00006026 87D3                    	xchg	dx,bx		; DX=0,      AX=old:lo, TOS=orig,   BX=new:hi
 36965 00006028 F726[9B5F]              	mul	word [gnradix]	; DX=carry,  AX=new:lo, TOS=orig,   BX=new:hi
 36966 0000602C 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 36967 0000602E 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 36968 00006030 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=0
 36969 00006032 C3                      	retn
 36970                                  m32E:
 36971 00006033 58                      	pop	ax
 36972 00006034 C3                      	retn
 36973                                  
 36974                                  ; -----------------------------------------------------------------------------
 36975                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 36976                                  ; -----------------------------------------------------------------------------
 36977                                  ; ENTRY:   DX:AX = the number to be divided
 36978                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 36979                                  ; ERROR:   None
 36980                                  ; USES:    Flags, AX, DX
 36981                                  ; -----------------------------------------------------------------------------
 36982                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 36983                                  ;       can't ensure a 386 host machine. Sorry.
 36984                                  ; -----------------------------------------------------------------------------
 36985                                  
 36986                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 36987                                  toPara:
 36988 00006035 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 36989                                  
 36990 00006036 B104                    	mov	cl,4		;
 36991 00006038 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 36992 0000603A 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 36993 0000603B B10C                    	mov	cl,12
 36994 0000603D D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 36995 0000603F 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 36996                                  
 36997 00006041 59                      	pop	cx
 36998 00006042 C3                      	retn
 36999                                  
 37000                                  ; -----------------------------------------------------------------------------
 37001                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 37002                                  ; -----------------------------------------------------------------------------
 37003                                  ; ENTRY:  Nothing
 37004                                  ; EXIT:   AX contains 0x9FFF for most systems
 37005                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37006                                  ; USES:   Flags, AX
 37007                                  ; -----------------------------------------------------------------------------
 37008                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 37009                                  ; to be precise, before a UMB provider is around.  In this event, the pointer
 37010                                  ; is always set to 0xFFFF; it changes once a provider is around.  On most
 37011                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 37012                                  ; -----------------------------------------------------------------------------
 37013                                  
 37014                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37015                                  UmbHead:
 37016                                  	;pushreg <si,ds,es>
 37017                                  	
 37018                                  	;push	si
 37019                                  	;push	ds
 37020                                  	;push	es
 37021                                  
 37022 00006043 B452                    	mov	ah,52h	; DOS_GET_DOS_LISTS
 37023                                  					; Call int 21h, function 52h...
 37024 00006045 CD21                    	int	21h
 37025                                  			; DOS - 2+ internal - GET LIST OF LISTS
 37026                                  			; Return: ES:BX -> DOS list of lists
 37027                                  
 37028                                  	;mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 37029 00006047 26A18C00                	mov	ax,[es:8Ch]
 37030 0000604B 83F8FF                  	cmp	ax,0FFFFh
 37031                                  	;je	short uhE		; If it's 0xFFFF, it's an error...
 37032                                  
 37033                                  	;clc				; Else, it isn't (CLC done by prev cmp)
 37034                                  	;jmp	short uhX
 37035                                  	; 17/06/2023
 37036 0000604E F5                      	cmc	; cf = 0 <--> cf = 1
 37037                                  uhE:
 37038                                  	;stc
 37039                                  uhX:	
 37040                                  	;popreg	<es,ds,si>
 37041                                  	
 37042                                  	;pop	es
 37043                                  	;pop	ds
 37044                                  	;pop	si
 37045                                  
 37046 0000604F C3                      	retn
 37047                                  
 37048                                  ; -----------------------------------------------------------------------------
 37049                                  ;*** isSysMCB - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 37050                                  ; -----------------------------------------------------------------------------
 37051                                  ; ENTRY:  ES:0 should point to a valid MCB
 37052                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 37053                                  ; USES:   Flags
 37054                                  ; -----------------------------------------------------------------------------
 37055                                  
 37056                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37057                                  isSysMCB:
 37058                                  	;push	ax
 37059                                  	
 37060                                  	;mov	ax,[es:1]
 37061 00006050 26A10100                	mov	ax,[es:arena_owner]	; Check the owner...
 37062 00006054 83F808                  	cmp	ax,8 ; SystemPSPOwner	; 8 (for US OR Japan) is valid
 37063 00006057 7405                    	jz	short ism10
 37064 00006059 83F809                  	cmp	ax,9 ; JapanPSPOwner	; 9 (for Japan) is valid
 37065                                  	;jz	short ism10
 37066                                  	;jmp	short ismX		; Anything else isn't.
 37067 0000605C 7507                    	jnz	short ismX
 37068                                  ism10:
 37069                                  	;mov	ax,[es:8]
 37070 0000605E 26A10800                	mov	ax,[es:arena_name]	; Check the name...
 37071 00006062 3D5343                  	cmp	ax,'SC' ; cmp ax,4353h
 37072                                  ismX:
 37073                                  	;pop	ax
 37074 00006065 C3                      	retn
 37075                                  
 37076                                  ; -----------------------------------------------------------------------------
 37077                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 37078                                  ; -----------------------------------------------------------------------------
 37079                                  ; ENTRY:  AX contains a segment address
 37080                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 37081                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 37082                                  ; USES:   Flags, AX
 37083                                  ; -----------------------------------------------------------------------------
 37084                                  ; An address in the following areas is treated as:
 37085                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 37086                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 37087                                  ;      ...
 37088                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 37089                                  ; -----------------------------------------------------------------------------
 37090                                  
 37091                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37092                                  AddrToUmb:
 37093                                  	;pushreg <cx,dx,es>
 37094                                  	
 37095                                  	;push	cx
 37096                                  	;push	dx
 37097 00006066 06                      	push	es
 37098                                  
 37099 00006067 89C2                    	mov	dx,ax		; DX = address to search for
 37100                                  
 37101 00006069 E8D7FF                  	call	UmbHead		; AX = first segment
 37102 0000606C 722B                    	jc	short atuE	; If it couldn't get it, error out.
 37103                                  
 37104                                  	;mov	es,ax ; *	; ES = first UMB segment
 37105 0000606E 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 37106                                  
 37107                                  ; ----------------------------------------
 37108                                  ; ATU10--ES - Current MCB address
 37109                                  ;        DX - Address given for conversion
 37110                                  ;        CX - Current UMB #
 37111                                  ; ----------------------------------------
 37112                                  
 37113                                  	; 17/06/2023
 37114                                  atu10:
 37115 00006070 8EC0                    	mov	es,ax ; *
 37116                                  ;atu10:
 37117                                  	;mov	ax,es
 37118 00006072 39D0                            cmp	ax,dx		; Present segment >= given segment?
 37119 00006074 7326                    	jae	short atuX	; Yep--done.
 37120                                  
 37121 00006076 E8D7FF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 37122 00006079 7501                    	jnz	short atu20
 37123                                  
 37124 0000607B 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 37125                                  atu20:
 37126                                  	;mov	al,[es:0]
 37127 0000607C 26A00000                	mov	al,[es:arena_signature]
 37128                                  	;cmp	al,'Z' ; 5Ah
 37129 00006080 3C5A                    	cmp	al,arena_signature_end
 37130 00006082 740A                    	je	short atu30	; 'Z' means this was the last MCB... that's it.
 37131                                  
 37132                                  	;NextMCB es,ax
 37133 00006084 8CC0                    	mov	ax,es
 37134                                  	;add	ax,[es:3]	; NextMCB (macro)
 37135 00006086 2603060300              	add	ax,[es:arena_size]
 37136 0000608B 40                      	inc	ax
 37137                                  	;mov	es,ax ; * ; 17/06/2023
 37138 0000608C EBE2                    	jmp	short atu10
 37139                                  
 37140                                  ; -----------------------------------------------------------------------------
 37141                                  ; if we get to atu30, they specified a number that was past the last MCB.
 37142                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 37143                                  ; -----------------------------------------------------------------------------
 37144                                  
 37145                                  atu30:
 37146 0000608E 8CC0                    	mov	ax,es
 37147                                  	;add	ax,[es:3]
 37148 00006090 2603060300              	add	ax,[es:arena_size]
 37149 00006095 39D0                    	cmp	ax,dx		; Present >= given?
 37150 00006097 7303                    	jae	short atuX	; Yep! It _was_ inside.
 37151                                  atuE:
 37152 00006099 31C9                    	xor	cx,cx		; Else, fall through with UMB # == -1
 37153 0000609B 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 37154                                  atuX:	
 37155 0000609C 89C8                    	mov	ax,cx		; Return the UMB number in AX
 37156                                  	
 37157                                  	;popreg	<es,dx,cx>
 37158                                  
 37159 0000609E 07                      	pop	es
 37160                                  	;pop	dx
 37161                                  	;pop	cx
 37162                                  	
 37163 0000609F C3                      	retn
 37164                                  
 37165                                  ; -----------------------------------------------------------------------------
 37166                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 37167                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 37168                                  ; address rather than a UMB number... and use that address to look up a UMB.
 37169                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 37170                                  ; -----------------------------------------------------------------------------
 37171                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 37172                                  ; EXIT:   AX will contain a UMB number
 37173                                  ; ERROR:  None
 37174                                  ; USES:   Flags, AX
 37175                                  ; -----------------------------------------------------------------------------
 37176                                  
 37177                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37178                                  convUMB:
 37179                                  	;cmp	word [gnradix],16
 37180 000060A0 803E[9B5F]10            	cmp	byte [gnradix],16
 37181 000060A5 7509                    	jne	short cu10	; If it didn't read in hex, it's not an address
 37182 000060A7 E8BCFF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 37183 000060AA 83F8FF                  	cmp	ax,0FFFFh
 37184 000060AD 7501                    	jne	short cu10
 37185 000060AF 40                      	inc	ax ; ax = 0	; If too high, ignore it (make it conventional)
 37186                                  cu10:
 37187 000060B0 C3                      	retn
 37188                                  
 37189                                  ; -----------------------------------------------------------------------------
 37190                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 37191                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 37192                                  ; of the usual HIGH_FIRST.  See the code.
 37193                                  ; -----------------------------------------------------------------------------
 37194                                  ; ENTRY:  None
 37195                                  ; EXIT:   None
 37196                                  ; ERROR:  None
 37197                                  ; USES:   Flags, fm_umb, fm_strat
 37198                                  ; -----------------------------------------------------------------------------
 37199                                  
 37200                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37201                                  setUMBs:
 37202                                  	;pushreg <ax,bx>
 37203                                  	
 37204                                  	;push	ax
 37205                                  	;push	bx
 37206                                  
 37207 000060B1 E8B2FD                  	call	fm_link
 37208                                  
 37209 000060B4 B80058                  	mov	ax,5800h ; DOS_CHECK_STRATEGY
 37210 000060B7 CD21                    	int	21h
 37211                                  
 37212                                  	;putdata fm_strat,al	; Store the current strategy for later restore
 37213                                  
 37214                                  	;push	es
 37215                                  	;mov	es,[RESSEG]
 37216                                  	;mov	[es:fm_strat],al ; store the current strategy
 37217                                  	;pop	es
 37218 000060B9 1E                      	push	ds ; *
 37219 000060BA 8E1E[159E]              	mov	ds,[RESSEG]
 37220 000060BE A2[DE04]                	mov	[fm_strat],al
 37221                                  	;pop	ds ; *
 37222                                  
 37223 000060C1 83E07F                  	and	ax,007Fh	; 0000.0000.0111.1111 == All that other stuff
 37224 000060C4 50                      	push	ax ; **		; Watch this carefully...
 37225                                  
 37226 000060C5 E80C00                  	call	loadLow		; returns al==0 if load low, al==1 if loadhigh
 37227 000060C8 D0C8                    	ror	al,1		; Shift that to al==0 or al==0x80
 37228                                  
 37229 000060CA 5B                      	pop	bx ; **		; ...pushed as AX above
 37230                                  	
 37231 000060CB 1F                      	pop	ds ; *
 37232                                  	
 37233 000060CC 08C3                    	or	bl,al		; Now we have 0000.0000.?111.1111 in BX;
 37234                                  
 37235 000060CE B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 37236                                  				; with ? ==1 if load highfirst. Perfect!
 37237 000060D1 CD21                    	int	21h
 37238                                  
 37239                                  	;popreg	<bx,ax>
 37240                                  
 37241                                  	;pop	bx
 37242                                  	;pop	ax
 37243                                  
 37244 000060D3 C3                      	retn
 37245                                  
 37246                                  ; -----------------------------------------------------------------------------
 37247                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 37248                                  ; -----------------------------------------------------------------------------
 37249                                  ; ENTRY:  None
 37250                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 37251                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 37252                                  ; ERROR:  None
 37253                                  ; USES:   Flags, fm_strat, fm_umb
 37254                                  ; -----------------------------------------------------------------------------
 37255                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 37256                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 37257                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 37258                                  ; such that the load UMB is too small, and shouldn't be used.
 37259                                  ; -----------------------------------------------------------------------------
 37260                                  
 37261                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37262                                  loadLow:
 37263                                  	;push	ds ; *	
 37264                                  	
 37265                                  	;dataseg ds		; Point DS into appropriate data segment
 37266                                  	;mov	ds,[RESSEG]
 37267                                  
 37268                                  	; * ; ds = [RESSEG] from 'setUMBs') ; 17/06/2023
 37269                                  
 37270 000060D4 A0[DC04]                	mov	al,[UmbLoad]
 37271 000060D7 3CFF                    	cmp	al,0FFh ; UNSPECIFIED
 37272 000060D9 7503                    	jne	short ll10
 37273                                  
 37274                                  	;mov	al,1		; Return with AL==1 && STC if no UMBs specified
 37275 000060DB F9                      	stc
 37276                                  	;jmp	short llX
 37277 000060DC EB04                    	jmp	short lly ; 17/06/2023
 37278                                  ll10:
 37279 000060DE 08C0                    	or	al,al		; AL=the load UMB: Is it == 0?
 37280 000060E0 7402                    	jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 37281                                  	; cf= 0
 37282                                  
 37283                                  	;mov	al,1
 37284                                  	;clc	
 37285                                  lly:		; 17/06/2023
 37286 000060E2 B001                    	mov	al,1
 37287                                  llX:
 37288                                  	;pop	ds ; *		; Return DS to where it was
 37289                                  	
 37290                                  	;normseg ds		;
 37291                                  	
 37292 000060E4 C3                      	retn
 37293                                  
 37294                                  ; -----------------------------------------------------------------------------
 37295                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 37296                                  ; -----------------------------------------------------------------------------
 37297                                  ; ENTRY:  None
 37298                                  ; EXIT:   None
 37299                                  ; ERROR:  None
 37300                                  ; USES:   Flags, fm_strat, fm_umb
 37301                                  ; -----------------------------------------------------------------------------
 37302                                  
 37303                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37304                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:64D0h
 37305                                  HideUMBs:
 37306                                  	;pushreg <ax,cx,ds,es>
 37307                                  	
 37308                                  	;push	ax
 37309                                  	;push	cx
 37310                                  	;push	ds
 37311                                  	;push	es
 37312                                  
 37313 000060E5 E8EF01                  	call	UmbTest		; See if we REALLY linked in anything...
 37314 000060E8 7236                    	jc	short husX	; ...if not, there's nothing for us to do.
 37315                                  
 37316 000060EA E82CFD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 37317 000060ED E8C1FF                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 37318                                  
 37319                                  	;putdata fInHigh,1	; Remember that we're now running high
 37320                                  	;push	es
 37321                                  	;mov	es,[RESSEG]
 37322                                  	;mov	byte [es:fInHigh], 1
 37323                                  	;			; remember that we're now running high
 37324                                  	;pop	es
 37325 000060F0 1E                      	push	ds
 37326 000060F1 8E1E[159E]              	mov	ds,[RESSEG]
 37327 000060F5 C606[D804]01            	mov	byte [fInHigh], 1
 37328 000060FA 1F                      	pop	ds
 37329                                  
 37330 000060FB E82300                  	call	GetLoadUMB	; See if they gave us a list to leave free
 37331 000060FE 3CFF                    	cmp	al,0FFh	; UNSPECIFIED
 37332                                  				; If they didn't,
 37333 00006100 741E                    	je	short husX	; then we shouldn't do this loop:
 37334                                  
 37335 00006102 31C9                    	xor	cx,cx
 37336                                  
 37337                                  ; -----------------------------------------------
 37338                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 37339                                  ; -----------------------------------------------
 37340                                  
 37341                                  hus10:
 37342 00006104 41                      	inc	cx		; For each UMB:
 37343 00006105 83F910                  	cmp	cx,16 ; MAXUMB
 37344 00006108 730C                    	jae	short hus20
 37345                                  
 37346 0000610A 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 37347                                  	; 17/06/2023
 37348                                  	;push	es
 37349 0000610C E8A900                  	call	findumb		; valid range of UMBs)
 37350                                  	;pop	es		; push/pop: trash what findumb finds.  :-)
 37351 0000610F 7205                    	jc	short hus20
 37352                                  
 37353 00006111 E87901                  	call	hideUMB?	; hide what we need to hide.
 37354                                  
 37355 00006114 EBEE                    	jmp	short hus10
 37356                                  hus20:
 37357 00006116 E80800                  	call	GetLoadUMB	; Now check if they offered /L:0
 37358 00006119 08C0                    	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 37359 0000611B 7503                    	jnz	short husX	; If not, we're done.
 37360                                  
 37361 0000611D E8E701                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 37362                                  husX:
 37363                                  	;popreg	<es,ds,cx,ax>
 37364                                  	
 37365                                  	;pop	es
 37366                                  	;pop	ds
 37367                                  	;pop	cx
 37368                                  	;pop	ax
 37369                                  
 37370 00006120 C3                      	retn
 37371                                  
 37372                                  ; -----------------------------------------------------------------------------
 37373                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 37374                                  ; -----------------------------------------------------------------------------
 37375                                  ; ENTRY:  None
 37376                                  ; EXIT:   AL == load UMB
 37377                                  ; ERROR:  None
 37378                                  ; USES:   Flags, AX
 37379                                  ; -----------------------------------------------------------------------------
 37380                                  
 37381                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37382                                  GetLoadUMB:
 37383                                  	;getdata al,UmbLoad
 37384                                  
 37385 00006121 1E                      	push    ds
 37386 00006122 8E1E[159E]              	mov     ds,[RESSEG]   ; getdata (macro)
 37387 00006126 A0[DC04]                	mov     al,[UmbLoad]
 37388 00006129 1F                      	pop     ds
 37389                                  
 37390 0000612A C3                      	retn
 37391                                  
 37392                                  ; -----------------------------------------------------------------------------
 37393                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 37394                                  ; -----------------------------------------------------------------------------
 37395                                  ; ENTRY:  AL == a UMB number
 37396                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 37397                                  ; ERROR:  None
 37398                                  ; USES:   Flags, AX
 37399                                  ; -----------------------------------------------------------------------------
 37400                                  
 37401                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37402                                  GetSize:
 37403                                  	;pushreg <bx,si,ds>
 37404                                  	;push	bx
 37405                                  	;push	si
 37406 0000612B 1E                      	push	ds
 37407                                  	
 37408                                  	;dataseg ds
 37409 0000612C 8E1E[159E]              	mov	ds,[RESSEG]
 37410                                  
 37411 00006130 30E4                    	xor	ah,ah			;    ax==UMB
 37412                                  	;mov	bx,offset UmbSize
 37413 00006132 BB[1204]                	mov	bx,UmbSize		;    bx==array
 37414 00006135 D0E0                    	shl	al,1	                ;    ax==offset
 37415                                  	;add	ax,bx			;    ax==element index
 37416                                  	;mov	si,ax			; ds:si==element index
 37417                                  	;lodsw				;    ax==size
 37418 00006137 01C3                    	add	bx,ax
 37419 00006139 8B07                    	mov	ax,[bx]
 37420                                  
 37421                                  	;popreg	<ds,si,bx>
 37422 0000613B 1F                      	pop	ds
 37423                                  	;pop	si
 37424                                  	;pop	bx
 37425                                  
 37426                                  	;normseg ds
 37427 0000613C C3                      	retn
 37428                                  
 37429                                  ; -----------------------------------------------------------------------------
 37430                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 37431                                  ; -----------------------------------------------------------------------------
 37432                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 37433                                  ; EXIT:     None; free elements in UMB marked as hidden
 37434                                  ; ERROR:    None
 37435                                  ; USES:     Flags
 37436                                  ; -----------------------------------------------------------------------------
 37437                                  
 37438                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37439                                  hideUMB:
 37440                                  	;pushreg <ax,es>
 37441                                  	
 37442                                  	;push	ax
 37443                                  	;push	es
 37444                                  
 37445 0000613D E87800                  	call	findumb		; Returns with carry if err, else ES == MCB
 37446 00006140 7221                    	jc	short huX
 37447                                  
 37448                                  ; ------------------------------------------------
 37449                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 37450                                  ;            we're not in the same UMB, so exit.
 37451                                  ; ------------------------------------------------
 37452                                  
 37453                                  hu10:
 37454 00006142 E80BFF                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37455 00006145 741C                    	jz	short huX	; If it is, we've finished the UMB.
 37456 00006147 E82800                  	call	isFreeMCB	; Returns with ZF set if owner is 0
 37457 0000614A 7503                    	jnz	short hu20
 37458                                  
 37459 0000614C E82A00                  	call	hideMCB
 37460                                  hu20:
 37461                                  	;mov	al,[es:0]
 37462 0000614F 26A00000                	mov	al,[es:arena_signature]
 37463                                  	;cmp	al,'Z'
 37464 00006153 3C5A                    	cmp	al,arena_signature_end
 37465 00006155 740C                    	je	short huX	; 'Z' means this was the last MCB... that's it.
 37466                                  
 37467                                  	;NextMCB es,ax		; Go on forward.
 37468                                  
 37469 00006157 8CC0                     	mov	ax,es		; NextMCB (macro)
 37470                                  	;add	ax,[es:3]
 37471 00006159 2603060300              	add	ax,[es:arena_size]
 37472 0000615E 40                      	inc	ax
 37473 0000615F 8EC0                    	mov	es,ax
 37474                                  
 37475 00006161 EBDF                    	jmp	short hu10
 37476                                  huX:
 37477                                  	;popreg	<es,ax>
 37478                                  	
 37479                                  	;pop	es
 37480                                  	;pop	ax
 37481                                  
 37482 00006163 C3                      	retn
 37483                                  
 37484                                  ; -----------------------------------------------------------------------------
 37485                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 37486                                  ; -----------------------------------------------------------------------------
 37487                                  ; ENTRY:    None
 37488                                  ; EXIT:     ZF set if user DIDN'T specify /S
 37489                                  ; ERROR:    None
 37490                                  ; USES:     Flags
 37491                                  ; -----------------------------------------------------------------------------
 37492                                  
 37493                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37494                                  isTiny:
 37495 00006164 50                      	push	ax
 37496                                  
 37497                                  	;getdata al,fUmbTiny
 37498 00006165 1E                      	push    ds
 37499 00006166 8E1E[159E]              	mov     ds,[RESSEG]   ; getdata (macro)
 37500 0000616A A0[D904]                	mov     al,[fUmbTiny]
 37501 0000616D 1F                      	pop     ds
 37502                                  
 37503 0000616E 08C0                    	or	al,al
 37504 00006170 58                      	pop	ax
 37505 00006171 C3                      	retn
 37506                                  
 37507                                  ; -----------------------------------------------------------------------------
 37508                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 37509                                  ; -----------------------------------------------------------------------------
 37510                                  ; ENTRY:    ES:0 should point to an MCB
 37511                                  ; EXIT:     ZF set if MCB is free, else !ZF
 37512                                  ; ERROR:    None
 37513                                  ; USES:     Flags
 37514                                  ; -----------------------------------------------------------------------------
 37515                                  
 37516                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37517                                  isFreeMCB:
 37518                                  	;or	word [es:1],0
 37519 00006172 26830E010000            	or	word [es:arena_owner],0
 37520 00006178 C3                      	retn
 37521                                  
 37522                                  ; -----------------------------------------------------------------------------
 37523                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 37524                                  ; -----------------------------------------------------------------------------
 37525                                  ; ENTRY:    ES:0 should point to an MCB
 37526                                  ; EXIT:     None; MCB marked as HIDDEN
 37527                                  ; ERROR:    None
 37528                                  ; USES:     None
 37529                                  ; -----------------------------------------------------------------------------
 37530                                  
 37531                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37532                                  hideMCB:
 37533                                  	;mov	word [es:1],8
 37534 00006179 26C70601000800          	mov	word [es:arena_owner],8 ; SystemPSPOwner
 37535                                  	;mov	word [es:8],4948h     ; 'HIDDEN  ' 
 37536 00006180 26C70608004849          	mov	word [es:arena_name+0], 'HI' ; 4948h
 37537 00006187 26C7060A004444          	mov	word [es:arena_name+2], 'DD' ; 4444h
 37538 0000618E 26C7060C00454E          	mov	word [es:arena_name+4], 'EN' ; 4E45h
 37539                                  	;mov	word [es:14],2020h
 37540 00006195 26C7060E002020          	mov	word [es:arena_name+6], '  ' ; 2020h 
 37541 0000619C C3                      	retn
 37542                                  
 37543                                  ; -----------------------------------------------------------------------------
 37544                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 37545                                  ; -----------------------------------------------------------------------------
 37546                                  ; ENTRY:    ES:0 should point to an MCB
 37547                                  ; EXIT:     None; MCB marked as FREE
 37548                                  ; ERROR:    None
 37549                                  ; USES:     None
 37550                                  ; -----------------------------------------------------------------------------
 37551                                  
 37552                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37553                                  unHideMCB:
 37554                                  	;push	ax
 37555                                  	;mov	word [es:1],0
 37556 0000619D 26C70601000000          	mov	word [es:arena_owner],0 ; FreePSPOwner
 37557 000061A4 B82020                  	mov	ax, '  '  ; mov ax,2020h
 37558                                  	;mov	[es:8],ax
 37559 000061A7 26A30800                	mov	[es:arena_name+0],ax
 37560 000061AB 26A30A00                	mov	[es:arena_name+2],ax
 37561 000061AF 26A30C00                	mov	[es:arena_name+4],ax
 37562                                  	;mov	[es:14],ax
 37563 000061B3 26A30E00                	mov	[es:arena_name+6],ax
 37564                                  	;pop	ax
 37565 000061B7 C3                      	retn
 37566                                  
 37567                                  ; -----------------------------------------------------------------------------
 37568                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 37569                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 37570                                  ; -----------------------------------------------------------------------------
 37571                                  ; ENTRY:    AL should be to a valid UMB number
 37572                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 37573                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 37574                                  ; USES:     Flags, ES
 37575                                  ; -----------------------------------------------------------------------------
 37576                                  
 37577                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37578                                  findumb:
 37579                                  	;pushreg <ax,cx,dx>
 37580                                  	
 37581                                  	;push	ax
 37582 000061B8 51                      	push	cx
 37583 000061B9 52                      	push	dx
 37584                                  
 37585 000061BA 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37586                                  
 37587 000061BC 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 37588                                  
 37589 000061BE E882FE                  	call	UmbHead		; Returns first UMB segment in AX
 37590                                  
 37591 000061C1 8EC0                    	mov	es,ax
 37592 000061C3 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37593                                  
 37594                                  ; ---------------------------------------------
 37595                                  ; FU10--CX - This UMB number; 0 == conventional
 37596                                  ;       DX - The UMB number they're looking for
 37597                                  ;       ES - The current MCB address
 37598                                  ; ---------------------------------------------
 37599                                  
 37600                                  fu10:	
 37601 000061C5 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 37602 000061C7 741B                    	je	short fuX	; searching for--so exit.
 37603                                  
 37604 000061C9 E884FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37605 000061CC 7501                    	jnz	short fu20
 37606                                  
 37607 000061CE 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37608                                  fu20:
 37609                                  	;mov	al,[es:0]
 37610 000061CF 26A00000                	mov	al,[es:arena_signature]
 37611                                  	;cmp	al,'Z'
 37612 000061D3 3C5A                    	cmp	al,arena_signature_end
 37613 000061D5 740C                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 37614                                  
 37615                                  	;NextMCB es,ax		; Go on forward.
 37616                                  
 37617 000061D7 8CC0                     	mov	ax,es		; NextMCB (macro)
 37618                                  	;add	ax,[es:3]
 37619 000061D9 2603060300              	add	ax,[es:arena_size]
 37620 000061DE 40                      	inc	ax
 37621 000061DF 8EC0                    	mov	es,ax
 37622                                  
 37623 000061E1 EBE2                    	jmp	short fu10
 37624                                  fuE:
 37625 000061E3 F9                      	stc
 37626                                  fuX:
 37627                                  	;popreg	<dx,cx,ax>	; The address is already in ES.
 37628                                  	
 37629 000061E4 5A                      	pop	dx
 37630 000061E5 59                      	pop	cx
 37631                                  	
 37632                                  	;pop	ax
 37633 000061E6 C3                      	retn
 37634                                  
 37635                                  ; -----------------------------------------------------------------------------
 37636                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 37637                                  ; -----------------------------------------------------------------------------
 37638                                  ; ENTRY:    AL should be to a valid UMB number
 37639                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 37640                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 37641                                  ; USES:     Flags, ES
 37642                                  ; -----------------------------------------------------------------------------
 37643                                  
 37644                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37645                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6624h
 37646                                  BigFree:
 37647                                  	;pushreg <bx,cx>
 37648                                  	
 37649                                  	;push	bx
 37650 000061E7 51                      	push	cx
 37651                                  
 37652 000061E8 E8CDFF                  	call	findumb			; Returns with CF if err, else ES==MCB
 37653 000061EB 7239                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 37654                                  
 37655 000061ED 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 37656 000061EF 31C9                    	xor	cx,cx			; Size of largest free MCB
 37657                                  
 37658                                  ; ---------------------------------------------
 37659                                  ; BF10--ES - Current MCB address
 37660                                  ;       BX - Address of largest free MCB so far
 37661                                  ;       CX - Size of largest free MCB so far
 37662                                  ; ---------------------------------------------
 37663                                  
 37664                                  bf10:
 37665 000061F1 E85CFE                  	call	isSysMCB		; If we've left the MCB, we're done.
 37666 000061F4 7427                    	jz	short bf30
 37667                                  
 37668 000061F6 E879FF                  	call	isFreeMCB		; Returns with ZF set if owner is 0
 37669 000061F9 750E                    	jnz	short bf20
 37670                                  
 37671                                  	;cmp	cx,[es:3]
 37672 000061FB 263B0E0300              	cmp	cx,[es:arena_size]	; Compare sizes...
 37673 00006200 7F07                    	jg	short bf20		; Unless we're bigger,
 37674                                  
 37675 00006202 8CC3                    	mov	bx,es			; Store this new element's address,
 37676                                  	;mov	cx,[es:3]
 37677 00006204 268B0E0300              	mov	cx,[es:arena_size]	; and its size.
 37678                                  bf20:
 37679                                  	;mov	al,[es:0]
 37680 00006209 26A00000                	mov	al,[es:arena_signature]
 37681                                  	;cmp	al,'Z'  ; 5Ah
 37682 0000620D 3C5A                    	cmp	al,arena_signature_end
 37683 0000620F 740C                    	je	short bf30		; 'Z' means this was the last MCB.
 37684                                  
 37685                                  	;NextMCB es,ax			; Go on forward.
 37686                                  
 37687 00006211 8CC0                    	mov	ax,es 
 37688                                  	;add	ax,[es:3]
 37689 00006213 2603060300              	add	ax,[es:arena_size]
 37690 00006218 40                      	inc	ax
 37691 00006219 8EC0                    	mov	es,ax
 37692                                  
 37693 0000621B EBD4                    	jmp	short bf10
 37694                                  bf30:
 37695 0000621D 8EC3                    	mov	es,bx			; Return the address
 37696 0000621F 89C8                    	mov	ax,cx			; Return the size
 37697 00006221 09DB                    	or	bx,bx
 37698 00006223 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 37699                                  bfE:
 37700 00006225 F9                      	stc
 37701                                  bfX:
 37702                                  	;popreg	<cx,bx>
 37703                                  
 37704 00006226 59                      	pop	cx
 37705                                  	;pop	bx
 37706                                  
 37707 00006227 C3                      	retn
 37708                                  
 37709                                  ; -----------------------------------------------------------------------------
 37710                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 37711                                  ; -----------------------------------------------------------------------------
 37712                                  ; ENTRY:    AL should be to a valid UMB number
 37713                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 37714                                  ; ERROR:    None
 37715                                  ; USES:     Flags
 37716                                  ; -----------------------------------------------------------------------------
 37717                                  
 37718                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37719                                  isSpecified:
 37720                                  	;push	ax
 37721                                  
 37722 00006228 30FF                    	xor	bh,bh
 37723 0000622A 88C3                    	mov	bl,al
 37724                                  
 37725                                  	;getdata al,DS:UmbUsed[bx]
 37726                                  
 37727 0000622C 1E                      	push	ds
 37728 0000622D 8E1E[159E]              	mov	ds,[RESSEG]
 37729 00006231 8A87[0204]              	mov	al,[bx+UmbUsed]
 37730 00006235 1F                      	pop     ds
 37731                                  
 37732 00006236 08C0                    	or	al,al		; Sets ZF if al==0 (ie, if unspecified)
 37733                                  
 37734                                  	;pop	ax
 37735 00006238 C3                      	retn
 37736                                  
 37737                                  ; -----------------------------------------------------------------------------
 37738                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 37739                                  ; -----------------------------------------------------------------------------
 37740                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 37741                                  ; EXIT:     None; MCB broken if carry clear
 37742                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 37743                                  ; USES:     Flags
 37744                                  ; -----------------------------------------------------------------------------
 37745                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 37746                                  ; the specified new size, the split is useless; if it's onnly 0x10 bytes, that
 37747                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 37748                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 37749                                  ; minimum for performing a split.
 37750                                  ; -----------------------------------------------------------------------------
 37751                                  
 37752                                  ;MIN_SPLIT_SIZE	equ 20h
 37753                                  
 37754                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37755                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:667Ah
 37756                                  shrinkMCB:
 37757                                  	;pushreg <bx,cx,es>
 37758                                  
 37759                                  	;push	bx
 37760 00006239 51                      	push	cx ; *
 37761 0000623A 26                      	psuh	es ; **
 37762                                  
 37763 0000623B 89C3                    	mov	bx,ax			; Move things around... and
 37764 0000623D 8CC0                    	mov	ax,es			; save this one for later.
 37765                                  
 37766 0000623F 268B0E0300              	mov	cx,[es:arena_size]
 37767 00006244 83E920                  	sub	cx,32 ; sub cx,MIN_SPLIT_SIZE
 37768                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 37769                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 37770 00006247 39D9                    	cmp	cx,bx
 37771 00006249 723E                    	jb	short smE ; cf = 1 (***)
 37772                                  
 37773                                  	;mov	dl,[es:0]
 37774 0000624B 268A160000              	mov	dl,[es:arena_signature]
 37775                                  
 37776                                  	;;mov	cx,[es:3]
 37777                                  	;mov	cx,[es:arena_size] ; *!
 37778                                  
 37779 00006250 26891E0300              	mov	[es:arena_size],bx
 37780                                  	;mov	byte [es:0],'M' ; 4Dh
 37781 00006255 26C60600004D            	mov	byte [es:arena_signature],'M'
 37782                                  
 37783 0000625B 01D8                    	add	ax,bx
 37784 0000625D 40                      	inc	ax
 37785 0000625E 8EC0                    	mov	es,ax			; Move to new arena area
 37786                                  
 37787                                  	;mov	ax,cx ; !*
 37788 00006260 26A10300                	mov	ax,[es:arena_size] ; *!
 37789 00006264 29D8                    	sub	ax,bx
 37790 00006266 48                      	dec	ax			; And prepare the new size
 37791                                  
 37792                                  	;mov	[es:0],dl
 37793 00006267 2688160000              	mov	[es:arena_signature],dl
 37794                                  	;;mov	word [es:1],0
 37795                                  	;mov	word [es:arena_owner],0
 37796                                  	;mov	[es:3],ax
 37797 0000626C 26A30300                	mov	[es:arena_size],ax
 37798 00006270 B82020                  	mov	ax,'  ' ; mov ax,2020h
 37799                                  	;mov	[es:8],ax
 37800 00006273 26A30800                	mov	[es:arena_name+0],ax
 37801 00006277 26A30A00                	mov	[es:arena_name+2],ax
 37802 0000627B 26A30C00                	mov	[es:arena_name+4],ax
 37803                                  	;mov	[es:14],ax
 37804 0000627F 26A30E00                	mov	[es:arena_name+6],ax
 37805                                  
 37806                                  	;clc
 37807 00006283 31C0                    	xor	ax,ax
 37808 00006285 26A30100                	mov	[es:arena_owner],ax ; 0
 37809                                  	; cf = 0
 37810                                  	;jmp	short smX
 37811                                  smE:
 37812                                  	;stc	 ; cf = 1 (***)
 37813                                  smX:
 37814                                  	;popreg	<es,cx,bx>
 37815 00006289 07                      	pop	es ; **
 37816 0000628A 59                      	pop	cx ; *
 37817 0000628B 5B                      	pop	bx
 37818                                  
 37819 0000628C C3                      	retn
 37820                                  
 37821                                  ; -----------------------------------------------------------------------------
 37822                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 37823                                  ; -----------------------------------------------------------------------------
 37824                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 37825                                  ; EXIT:     None; UMB is hidden as necessary
 37826                                  ; ERROR:    None
 37827                                  ; USES:     Flags, AX, CX
 37828                                  ; -----------------------------------------------------------------------------
 37829                                  ; PRIMARY LOGIC:
 37830                                  ;
 37831                                  ; If the UMB is specified in the DH/LH statement, then:
 37832                                  ;    If the largest free segment is too small (check specified size), then:
 37833                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37834                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37835                                  ;       If /S was given on the command-line, then:
 37836                                  ;          Break that element into two pieces
 37837                                  ;          Set a flag that we're shrinking
 37838                                  ;       Endif
 37839                                  ;    Endif
 37840                                  ; Endif
 37841                                  ; If the UMB is NOT specified (or was removed by the above):
 37842                                  ;    Hide all free elements in the UMB
 37843                                  ;    If the flag that we're shrinking was set, then:
 37844                                  ;       UN-hide the lower portion of the shrunken UMB
 37845                                  ;    ENDIF
 37846                                  ; ENDIF
 37847                                  ; -----------------------------------------------------------------------------
 37848                                  
 37849                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37850                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:66D7h
 37851                                  hideUMB?:
 37852                                  	;pushreg <bx,dx,es>
 37853                                  
 37854                                  	;push	bx
 37855                                  	;push	dx
 37856                                  	;push	es
 37857                                  
 37858 0000628D 88C8                    	mov	al,cl
 37859 0000628F E896FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 37860                                  	;jz	short hu?20
 37861                                  	; 17/06/2023
 37862 00006292 7432                    	jz	short hu?25 ; *
 37863                                  
 37864 00006294 88C8                    	mov	al,cl		; Retrieve the size of the largest
 37865 00006296 E84EFF                  	call	BigFree		; free element in AX; put its address in ES
 37866                                  	;jc	short hu?20	; Oops. Errors mean skip this part.
 37867                                  	; 17/06/2023
 37868 00006299 723B                    	jc	short hu?X ; **
 37869                                  
 37870 0000629B 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 37871 0000629C 88C8                    	mov	al,cl		; Retrieve the user's specified
 37872 0000629E E88AFE                  	call	GetSize		; minimum size for this umb (into AX)
 37873 000062A1 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 37874                                  
 37875 000062A2 09C0                    	or	ax,ax		; If they didn't specify one,
 37876                                  	;jz	short hu?20	; Skip over all this.
 37877                                  	; 17/06/2023
 37878 000062A4 7530                    	jnz	short hu?X ; **
 37879                                  
 37880 000062A6 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 37881 000062A8 7607                    	jbe	short hu?10
 37882                                  
 37883 000062AA 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 37884 000062AC E898FC                  	call	unMarkUMB
 37885                                  	;jmp	short hu?20 ; ***
 37886                                  	; 17/06/2023
 37887                                  	; ('isSpecified' would return with ZF=1) ; ***
 37888 000062AF EB15                    	jmp	short hu?25
 37889                                  hu?10:
 37890 000062B1 E8B0FE                  	call	isTiny		; Returns ZF clear if user specified /S
 37891                                  	;jz	short hu?20
 37892                                  	; 17/06/2023
 37893                                  	; ('isSpecified' would return with ZF=0) ; **
 37894 000062B4 7420                    	jz	short hu?X
 37895                                  
 37896 000062B6 E880FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 37897                                  	;jc	short hu?20	; Ah... if didn't shrink after all, skip this:
 37898                                  	; 17/06/2023
 37899                                  	; ('isSpecified' would return with ZF=0) ; **
 37900 000062B9 721B                    	jc	short hu?X
 37901                                  
 37902 000062BB 8CC2                    	mov	dx,es
 37903 000062BD EB09                    	jmp	short hu?30	; Skip the spec check.. we wanna hide this one.
 37904                                  hu?20:
 37905                                  	;mov	al,cl
 37906 000062BF 89C8                    	mov	ax,cx
 37907 000062C1 E864FF                  	call	isSpecified	; If they specified this UMB, we're done...
 37908 000062C4 7510                    	jnz	short hu?X ; **	; so leave.
 37909                                  hu?25:	; 17/06/2023 ; *
 37910 000062C6 31D2                    	xor	dx,dx
 37911                                  hu?30:
 37912 000062C8 88C8                    	mov	al,cl
 37913                                  
 37914 000062CA E870FE                  	call	hideUMB		; Hides everything in UMB #al
 37915                                  
 37916 000062CD 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 37917 000062CF 7405                    	jz	short hu?X	; So we should leave.
 37918                                  
 37919 000062D1 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 37920 000062D3 E8C7FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 37921                                  hu?X:
 37922                                  	;popreg	<es,dx,bx>
 37923                                  
 37924                                  	;pop	es
 37925                                  	;pop	dx
 37926                                  	;pop	bx
 37927                                  
 37928 000062D6 C3                      	retn
 37929                                  
 37930                                  ; -----------------------------------------------------------------------------
 37931                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 37932                                  ; -----------------------------------------------------------------------------
 37933                                  ; ENTRY:    None
 37934                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 37935                                  ; ERROR:    None
 37936                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 37937                                  ; -----------------------------------------------------------------------------
 37938                                  
 37939                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37940                                  UmbTest:
 37941                                  	;pushreg <ax,bx,ds,es>
 37942                                  	
 37943                                  	;push	ax
 37944                                  	;push	bx
 37945                                  	;push	ds
 37946                                  	;push	es
 37947                                  
 37948 000062D7 E88CFB                  	call	fm_link		; Link in UMBs (if not already linked)
 37949 000062DA E80600                  	call	WalkMem		; Check to see if they're really linked
 37950 000062DD 9C                      	pushf			; And remember what we found out
 37951 000062DE E89CFB                  	call	fm_unlink	; Unlink UMBs (if WE have linked 'em)
 37952 000062E1 9D                      	popf			; And restore what we found out.
 37953                                  
 37954                                  	;popreg	<es,ds,bx,ax>
 37955                                  	
 37956                                  	;pop	es
 37957                                  	;pop	ds
 37958                                  	;pop	bx
 37959                                  	;pop	ax
 37960                                  	
 37961 000062E2 C3                      	retn
 37962                                  
 37963                                  ; -----------------------------------------------------------------------------
 37964                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 37965                                  ; -----------------------------------------------------------------------------
 37966                                  ; ENTRY:    None
 37967                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 37968                                  ; ERROR:    None
 37969                                  ; USES:     Flags
 37970                                  ; -----------------------------------------------------------------------------
 37971                                  
 37972                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 37973                                  WalkMem:
 37974                                  	;pushreg <ax,bx,es>
 37975                                  	
 37976                                  	;push	ax
 37977                                  	;push	bx
 37978 000062E3 06                      	push	es
 37979                                  
 37980 000062E4 B452                    	mov	ah,52h ; DOS_GET_DOS_LISTS
 37981                                  				; Call int 21h, function 52h...
 37982 000062E6 CD21                    	int	21h
 37983                                  
 37984 000062E8 268B47FE                	mov	ax,[es:bx-2]
 37985                                  	;mov	es,ax ; *
 37986                                  
 37987                                  ; ------------------------------
 37988                                  ; UM10: ES = Current MCB pointer
 37989                                  ; ------------------------------
 37990                                  
 37991                                  um10:	
 37992 000062EC 8EC0                    	mov	es,ax ; *
 37993                                  
 37994                                  	;mov	al,[es:0]
 37995 000062EE 26A00000                	mov	al,[es:arena_signature]
 37996                                  	;cmp	al,'Z' ; 5Ah
 37997 000062F2 3C5A                    	cmp	al,arena_signature_end
 37998 000062F4 740A                    	je	short um20	; If signature == 'Z', hay no more.
 37999                                  
 38000                                  	;NextMCB es,bx		; Move to the next MCB
 38001                                  	
 38002                                  	;mov	bx,es
 38003                                  	;;add	bx,[es:3]
 38004                                  	;add	bx,[es:arena_size]
 38005                                  	;inc	bx
 38006                                  	;mov	es,bx
 38007 000062F6 8CC0                    	mov	ax,es
 38008 000062F8 2603060300              	add	ax,[es:arena_size]
 38009 000062FD 40                      	inc	ax
 38010                                  	;mov	es,ax ; *
 38011                                  
 38012 000062FE EBEC                    	jmp	short um10	; And restart the loop.
 38013                                  um20:
 38014 00006300 8CC0                    	mov	ax,es
 38015 00006302 3DFF9F                  	cmp	ax,9FFFh	; This sets CF if ax < 9FFF.
 38016                                  
 38017                                  	;popreg	<es,bx,ax>
 38018 00006305 07                      	pop	es
 38019                                  	;pop	bx
 38020                                  	;pop	ax
 38021                                  
 38022 00006306 C3                      	retn
 38023                                  
 38024                                  ; -----------------------------------------------------------------------------
 38025                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 38026                                  ; -----------------------------------------------------------------------------
 38027                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 38028                                  ; EXIT:     None
 38029                                  ; ERROR:    None
 38030                                  ; USES:     AX, BX
 38031                                  ; -----------------------------------------------------------------------------
 38032                                  
 38033                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38034                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:681Ch
 38035                                  hl_unlink:
 38036 00006307 1E                      	push	ds ; *
 38037                                  
 38038 00006308 30FF                    	xor	bh,bh
 38039                                  	;getdata bl,fm_umb	; Restore original link-state
 38040                                  
 38041                                  	;push	ds
 38042 0000630A 8E1E[159E]              	mov	ds,[RESSEG]
 38043 0000630E 8A1E[DD04]              	mov	bl,[fm_umb]	; Restore original link-state
 38044                                  	;pop	ds
 38045                                  	
 38046 00006312 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 38047 00006315 CD21                    	int	21h
 38048                                  
 38049 00006317 30FF                    	xor	bh,bh
 38050                                  
 38051                                  	;getdata bl,fm_strat	; Restore original mem-alloc strategy
 38052                                  
 38053                                  	;push	ds
 38054                                  	;mov	ds,[RESSEG]
 38055 00006319 8A1E[DE04]              	mov	bl,[fm_strat]	;Restore original mem-alloc strategy
 38056                                  	;pop	ds
 38057                                  
 38058 0000631D B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 38059 00006320 CD21                    	int	21h
 38060                                  
 38061 00006322 1F                      	pop	ds ; *
 38062                                  
 38063 00006323 C3                      	retn
 38064                                  
 38065                                  ;============================================================================
 38066                                  ; LOADHIGH.ASM, MSDOS 6.0, 1991
 38067                                  ;============================================================================
 38068                                  ; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38069                                  
 38070                                  ; This is a new module added to support loading programs into UMBs provided
 38071                                  ; by DOS 5.0. 
 38072                                  ; ---------------------------------------------------------------------------
 38073                                  ; Usage:
 38074                                  ;
 38075                                  ; LOADHIGH [/L:umb[,size][;umb[,size]]*] <filespec>
 38076                                  ;
 38077                                  ; <filespec> has to be a filename that is not wildcarded.
 38078                                  
 38079                                  ; ---------------------------------------------------------------------------
 38080                                  ;
 38081                                  ;	Revision History
 38082                                  ;	================
 38083                                  ;
 38084                                  ;	M009	SR	08/01/90	Set flags to indicate that we are
 38085                                  ;				loading and high and also remember
 38086                                  ;				current UMB state.
 38087                                  ;
 38088                                  ;	M016	SR	08/09/90	Give special error message on attempt
 38089                                  ;				to loadhigh batch files and invalid
 38090                                  ;				filename on Loadhigh command line.
 38091                                  ;
 38092                                  ;	M039	SR	11/19/90	Bug #4270. Copy all the whitespaces
 38093                                  ;				after the program name also as part
 38094                                  ;				of the command line being passed to
 38095                                  ;				the program to be invoked.
 38096                                  ;
 38097                                  ; ---------------------------------------------------------------------------
 38098                                  
 38099                                  ; ---------------------------------------------------------------------------
 38100                                  ;
 38101                                  ;	include highload.inc		; Grab code for ParseVar and such
 38102                                  
 38103                                  iCmdLine	equ	81h		; PSP:81h points to command-line
 38104                                  
 38105                                  ;
 38106                                  ; ---------------------------------------------------------------------------
 38107                                  
 38108                                  ;****	LoadHigh -- Main routine for Loadhigh command
 38109                                  ;
 38110                                  ;	ENTRY	Command line tail is at PSP:iCmdLine terminated by 0dh
 38111                                  ;		CS = DS = SS = TRANGROUP
 38112                                  ;
 38113                                  ;	EXIT	None
 38114                                  ;
 38115                                  ;	USED	ax, bx, cx, dx, si, di, es
 38116                                  ;
 38117                                  ;	ERROR EXITS
 38118                                  ;		Message pointers are setup at the error locations and then
 38119                                  ;	we jump back to CERROR which is the transient error recycle point.
 38120                                  ;	Apart from parse errors, the other errors handled are too many
 38121                                  ;	switches anf invalid filenames.
 38122                                  ;
 38123                                  ;	EFFECTS
 38124                                  ;		The allocation strategy and the state of the arena chain are
 38125                                  ;	put in the requested state according to the given options. If a 
 38126                                  ;	filename is also given, it is executed as well.
 38127                                  ; ---------------------------------------------------------------------------
 38128                                  
 38129                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38130                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5927h
 38131                                  
 38132                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38133                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:683Fh
 38134                                  LoadHigh:
 38135 00006324 1E                      	push	ds
 38136 00006325 07                      	pop	es
 38137                                  	
 38138                                  	; 16/06/2023
 38139                                  	;call	SkipLhDelims	; MSDOS 5.0 !
 38140                                  
 38141                                  ;Get command tail to be passed to the program. This includes any whitespace
 38142                                  ;chars between the program name and its parameters as well.
 38143                                  ;On return, ds:si points at the start of the command tail.
 38144                                  
 38145                                  	; 16/06/2023
 38146                                  	;push	si		; MSDOS 5.0 !
 38147 00006326 E81300                  	call	ParseLhCmd
 38148                                  	;pop	si		; MSDOS 5.0 !	
 38149 00006329 720E                    	jc	short LhErr
 38150                                  	
 38151 0000632B E86500                  	call	SetupCmdLine		;setup pgm's command line
 38152                                  
 38153 0000632E E88700                  	call	SetupPath		;setup path for file
 38154 00006331 7206                    	jc	short LhErr		;file not found
 38155                                  
 38156                                  ;Set allocation strategy to HighFirst and link in UMBs for exec. This will
 38157                                  ;be reset after return from the Exec
 38158                                  ;We will also set a resident flag to indicate that UMBs were activated for
 38159                                  ;the Exec. On return from the Exec, this flag will be used to deactivate UMBs
 38160                                  
 38161 00006333 E8AFFD                  	call	HideUMBs		;prepare upper-memory for load
 38162                                  
 38163 00006336 E918CB                  	jmp	LH_EXECUTE		;go and exec file ;M051
 38164                                  
 38165                                  LhErr:
 38166                                  ;The error message has been setup at this stage
 38167                                  
 38168 00006339 E968CB                  	jmp	cerror			;print error message and recycle 
 38169                                  
 38170                                  ; ---------------------------------------------------------------------------
 38171                                  					
 38172                                  ;*** 	ParseLhCmd - parses any command-line options
 38173                                  ;
 38174                                  ;	ENTRY	None
 38175                                  ;
 38176                                  ;	EXIT	Carry clear -- command line parsed successfully
 38177                                  ;		Carry set -- appropriate error message setup
 38178                                  ;
 38179                                  ;	USED	ax, si
 38180                                  ;
 38181                                  ;	EFFECTS
 38182                                  ;		Options set up (see highvar.inc)
 38183                                  ;		Filename to be executed setup
 38184                                  ;
 38185                                  ;	ParseLhCmd calls InitVar to initialize data filled in by ParseVar,
 38186                                  ;	then calls ParseVar itself to actually parse the commmand-line.  On
 38187                                  ;	return from ParseVar, DS:SI will point to the beginning of the child
 38188                                  ;	module's name on the command-line; thus it calls LhCopyFilename to
 38189                                  ;	prepare the command-line for that program.
 38190                                  ; ---------------------------------------------------------------------------
 38191                                  
 38192                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38193                                  %if 0
 38194                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38195                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5944h
 38196                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38197                                  	; 11/06/2023
 38198                                  ParseLhCmd:
 38199                                  	;mov	si,81h
 38200                                  	mov	si,iCmdLine	;ds:si points at command line
 38201                                  
 38202                                  	mov	word [COMSW],0
 38203                                  	mov	di,Parse_LoadHi
 38204                                  	xor	cx,cx
 38205                                  	call	Parse_With_Msg
 38206                                  
 38207                                  	; 11/06/2023
 38208                                  	;cmp	ax,0FFFFh ; -1
 38209                                  	;jz	short PLhCmd2
 38210                                  	;cmp	ax,0
 38211                                  	;jnz	short PLhCmd1
 38212                                  	; 11/06/2023
 38213                                  	inc	ax ; cmp ax,-1
 38214                                  	jz	short PLhCmd2 ; 0FFFFh -> 0
 38215                                  	dec	ax ; cmp ax,0
 38216                                  	jnz	short PLhCmd1 ; 1 -> 0
 38217                                  	; ax = 0
 38218                                  
 38219                                  	mov	bx,dx
 38220                                  	; 14/04/2023
 38221                                  	;call	LhCopyFilename
 38222                                  	;; 13/04/2023
 38223                                  	;;;jc	short PLhCmd2  ; !!! jmp short PLhCmd2 !!!
 38224                                  	;;jmp	short PLhCmd2
 38225                                  	;retn
 38226                                  	; 14/04/2023
 38227                                  	jmp	short LhCopyFilename
 38228                                  PLhCmd1:
 38229                                  	stc
 38230                                  PLhCmd2:
 38231                                  	retn
 38232                                  %endif
 38233                                  
 38234                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38235                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6857h
 38236                                  	; MSDOS 6.0
 38237                                  ParseLhCmd:
 38238                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 38239                                  	
 38240                                  	;mov	si,81h
 38241 0000633C BE8100                  	mov	si,iCmdLine	;ds:si points at command line
 38242                                  
 38243                                  	; es = ds (from 'LoadHigh') 
 38244                                  	;push	es		;Store ES 'cause we're gonna change it:
 38245                                  
 38246                                  	;push	ds
 38247                                  	;pop	es		;Make sure es:si points to cmd line as well
 38248                                  
 38249 0000633F E8ACFA                  	call	InitVar		;Initialize data for ParseVar
 38250                                  
 38251 00006342 E84AFB                  	call	ParseVar	;And parse the command line
 38252                                  
 38253                                  	;pop	es		;Restore ES now; we're done with it.
 38254                                  
 38255 00006345 7317                    	jnc	short plcC	;If no error, continue on our way.
 38256                                  
 38257 00006347 83F802                  	cmp	ax,2 ; PV_BadUMB
 38258                                  				;Bad UMB passed?
 38259 0000634A 7505                    	jne	short plc10
 38260                                  	;mov	dx,offset TRANGROUP:LhBadUMB_Ptr
 38261 0000634C BA[7594]                	mov	dx,LhBadUMB_Ptr
 38262 0000634F F9                      	stc
 38263 00006350 C3                      	retn
 38264                                  plc10:	
 38265                                  	;mov	dx,offset TRANGROUP:LhInvSwt_Ptr
 38266 00006351 BA[7294]                	mov	dx,LhInvSwt_Ptr
 38267 00006354 83F803                  	cmp	ax,3 ; PV_InvSwt
 38268                                  				;Unrecognized switch passed?
 38269 00006357 7403                    	je	short plc20
 38270                                  	;mov	dx,offset TRANGROUP:LhInvArg_Ptr
 38271 00006359 BA[6C94]                	mov	dx,LhInvArg_Ptr
 38272                                  plc20:
 38273 0000635C F9                      	stc
 38274 0000635D C3                      	retn
 38275                                  plcC:
 38276                                  	;call	LhCopyFilename	;copy filename into our buffer
 38277                                  	;retn			;Return-- carry=status
 38278                                  	; 16/06/2023
 38279                                  	;jmp	short LhCopyFilename
 38280                                  
 38281                                  ; ---------------------------------------------------------------------------
 38282                                  
 38283                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38284                                  
 38285                                  ; ---------------------------------------------------------------------------
 38286                                  ; HIGHlOAD.INC, MSDOS 6.0, 1992
 38287                                  ; ---------------------------------------------------------------------------
 38288                                  
 38289                                  	; 13/04/2023
 38290                                  	; MSDOS 5.0 COMMAND.COM only !
 38291                                  	; (Procedure names are not from original Microsoft source code!)
 38292                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 38293                                  ;set_strategy:
 38294                                  	;mov	ax,5800h	; DOS_CHECK_STRATEGY
 38295                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38296                                  	;		; AL = function code: get allocation strategy
 38297                                  	;mov	bx,ax
 38298                                  	;or	bx,80h
 38299                                  	;mov	ax,5801h	; DOS_SET_STRATEGY
 38300                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38301                                  	;		; AL = function code: set allocation strategy
 38302                                  	;retn
 38303                                  
 38304                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 38305                                  ;set_umblink:
 38306                                  	;mov	ax,5803h	; DOS_SET_UMBLINK
 38307                                  	;mov	bx,1
 38308                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38309                                  	;		; AL = function code: (DOS 5beta) set UMB link state
 38310                                  	;retn
 38311                                  
 38312                                  ; ---------------------------------------------------------------------------
 38313                                  
 38314                                  ;***	LhCopyFilename -- copy filename from command line to buffer
 38315                                  ;
 38316                                  ;	ENTRY	ds:si points at primary argument (filename)
 38317                                  ;
 38318                                  ;	EXIT	Carry set -- filename has wildcards. In this event, DX will
 38319                                  ;				already contain an appropriate error number.
 38320                                  ;		Carry clear -- filename has been copied as needed; DS:SI
 38321                                  ;				points to first character (most likely space)
 38322                                  ;				after filename.
 38323                                  ;
 38324                                  ;	USED	ax, si
 38325                                  ;
 38326                                  ;	EFFECTS
 38327                                  ;		ExecPath contains the filename
 38328                                  ;
 38329                                  ; If there are any wildcards in the filename, then we have an error
 38330                                  ; ---------------------------------------------------------------------------
 38331                                  
 38332                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38333                                  %if 0
 38334                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38335                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5984h
 38336                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38337                                  LhCopyFilename:
 38338                                  	push	ds
 38339                                  	push	si
 38340                                  	push	di
 38341                                  	lds	si,[bx+4]
 38342                                  	mov	di,EXECPATH
 38343                                  lhcpfn1:
 38344                                  	lodsb
 38345                                  	cmp	al,2Ah ; '*'
 38346                                  	jz	short lhfilerr
 38347                                  	cmp	al,3Fh ; '?'
 38348                                  	jz	short lhfilerr
 38349                                  	stosb
 38350                                  	or	al,al
 38351                                  	jnz	short lhcpfn1
 38352                                  	; 14/04/2023
 38353                                  	; cf = 0
 38354                                  	;clc
 38355                                  lhfilerr2:
 38356                                  	pop	di
 38357                                  	pop	si
 38358                                  	pop	ds
 38359                                  	retn
 38360                                  lhfilerr:
 38361                                  	mov	dx,LhInvFil_Ptr
 38362                                  	stc
 38363                                  	jmp	short lhfilerr2
 38364                                  
 38365                                  %endif
 38366                                  
 38367                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38368                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6881h
 38369                                  	; MSDOS 6.0
 38370                                  LhCopyFilename:
 38371                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 38372                                  
 38373                                  	;mov	di,offset TRANGROUP:ExecPath
 38374 0000635E BF[3D9D]                	mov	di,EXECPATH
 38375                                  
 38376                                  	;mov	cx,0	; Copied zero characters
 38377 00006361 29C9                    	sub	cx,cx
 38378                                  ;@@:
 38379                                  lhcpfn1:
 38380 00006363 AC                      	lodsb
 38381 00006364 3C2A                    	cmp	al,'*'			;wildcard?
 38382 00006366 7421                    	je	short lhfilerr		;yes, error
 38383 00006368 3C3F                    	cmp	al,'?'			;wildcard?
 38384 0000636A 741D                    	je	short lhfilerr		;yes, error
 38385                                  
 38386 0000636C 3C0D                    	cmp	al,0Dh			;carriage return?
 38387                                  	;jz	@f
 38388 0000636E 7410                    	je	short lhcpfn2
 38389 00006370 3C2F                    	cmp	al,'/' ; SwitChar	;'/'?
 38390                                  	;jz	@f
 38391 00006372 740C                    	je	short lhcpfn2
 38392 00006374 08C0                    	or	al,al			;EOS?
 38393                                  	;jz	@f
 38394 00006376 7408                    	jz	short lhcpfn2
 38395 00006378 3C20                    	cmp	al,' '			;Space?
 38396                                  	;jz	@f
 38397 0000637A 7404                    	je	short lhcpfn2
 38398                                  	
 38399                                  	;or	al,al
 38400                                  	;;jz	@f
 38401                                  	;je	short lhcpfn2	
 38402                                  
 38403 0000637C AA                      	stosb				;store char
 38404 0000637D 41                      	inc	cx			;And remember that we did one more
 38405                                  	;jmp	short @b
 38406 0000637E EBE3                    	jmp	short lhcpfn1
 38407                                  ;@@:
 38408                                  lhcpfn2:
 38409 00006380 30C0                    	xor	al,al			;Indicate EOS reached
 38410 00006382 AA                      	stosb				;store char
 38411                                  
 38412 00006383 09C9                    	or	cx,cx			;If we didn't copy any characters,
 38413 00006385 7407                    	jz	short lhmissing	; they didn't give a filename.
 38414                                  
 38415 00006387 4E                      	dec	si			;Move back to the delimiting character
 38416                                  	; cf = 0
 38417                                  	;clc				;And indicate no error occurred
 38418 00006388 C3                      	retn
 38419                                  lhfilerr:
 38420                                  	;mov	dx,offset TRANGROUP:LhInvFil_Ptr
 38421 00006389 BA[6694]                	mov	dx,LhInvFil_Ptr		;"Invalid Filename" ; M016
 38422 0000638C F9                      	stc
 38423 0000638D C3                      	retn
 38424                                  lhmissing:
 38425                                  	;mov	dx,offset TRANGROUP:ReqParmMiss
 38426 0000638E BA[6F94]                	mov	dx,ReqParmMiss		;"Required parm missing"
 38427 00006391 F9                      	stc
 38428 00006392 C3                      	retn
 38429                                  
 38430                                  ; ---------------------------------------------------------------------------
 38431                                  	
 38432                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 38433                                  %if 0
 38434                                  	; 14/04/2023
 38435                                  	; 13/04/2023
 38436                                  	; MSDOS 5.0 COMMAND.COM only !
 38437                                  	; (Procedure name is not from original Microsoft source code!)
 38438                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 38439                                  set_strategy:
 38440                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 38441                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38442                                  			; AL = function code: get allocation strategy
 38443                                  	mov	bx,ax
 38444                                  	or	bx,80h
 38445                                  	mov	ax,5801h	; DOS_SET_STRATEGY
 38446                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38447                                  			; AL = function code: set allocation strategy
 38448                                  	retn
 38449                                  
 38450                                  ; ---------------------------------------------------------------------------
 38451                                  
 38452                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38453                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59A6h
 38454                                  	; MSDOS 5.0 COMMAND.COM only !
 38455                                  	; (Procedure name is not from original Microsoft source code!)
 38456                                  SkipLhDelims:
 38457                                  	mov	si,81h
 38458                                  	call	scanoff
 38459                                  stfn1:
 38460                                  	lodsb
 38461                                  	call	DELIM
 38462                                  	jz	short stfn2
 38463                                  	cmp	al,0Dh
 38464                                  	jz	short stfn2
 38465                                  	cmp	al,[SWITCHAR]
 38466                                  	jnz	short stfn1
 38467                                  stfn2:
 38468                                  	dec	si
 38469                                  	retn
 38470                                  
 38471                                  %endif
 38472                                  
 38473                                  ; ---------------------------------------------------------------------------
 38474                                  
 38475                                  ;***	SetupCmdLine -- prepare command line for the program
 38476                                  ;
 38477                                  ;	ENTRY	{es/ds}:si = points just after the end of the child program
 38478                                  ;
 38479                                  ;	EXIT	None
 38480                                  ;
 38481                                  ;	USED
 38482                                  ;
 38483                                  ;	EFFECTS		
 38484                                  ;		The rest of the command line following the pgm name is 
 38485                                  ;	moved to the top of the command line buffer (at TRANGROUP:81h)
 38486                                  ;	and a new command line length is put in
 38487                                  ; ---------------------------------------------------------------------------
 38488                                  
 38489                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38490                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59BEh
 38491                                  
 38492                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38493                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68BEh
 38494                                  SetupCmdLine:
 38495                                  	;mov	di,81h
 38496 00006393 BF8100                  	mov	di,iCmdLine
 38497 00006396 30C9                    	xor	cl,cl
 38498 00006398 FEC9                    	dec	cl			;just CR means count = 0
 38499                                  SetCmdL1:
 38500 0000639A AC                      	lodsb
 38501 0000639B AA                      	stosb
 38502 0000639C FEC1                    	inc	cl			;update count
 38503                                  	
 38504                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38505                                  	; MSDOS 6.0
 38506                                  	; 14/04/2023
 38507                                  	; * ; MSDOS 6.0 only !
 38508 0000639E 08C0                    	or	al,al	; *
 38509 000063A0 7404                    	jz	short SetCmdL2 ; *
 38510                                  	
 38511 000063A2 3C0D                    	cmp	al,0Dh			;carriage return?
 38512 000063A4 75F4                    	jnz	short SetCmdL1		;no, continue storing
 38513                                  SetCmdL2:
 38514 000063A6 26880E8000              	mov	[es:80h],cl		;store new cmd line length
 38515 000063AB C3                      	retn
 38516                                  
 38517                                  ; ---------------------------------------------------------------------------
 38518                                  
 38519                                  ;***	LhSetupErrMsg -- Sets up error messages
 38520                                  ;
 38521                                  ;	ENTRY	ax = error message number
 38522                                  ;
 38523                                  ;	EXIT	None
 38524                                  ;
 38525                                  ;	USED	dx
 38526                                  ;
 38527                                  ;	EFFECTS
 38528                                  ;		Everything setup to display error message
 38529                                  ; ---------------------------------------------------------------------------
 38530                                  	
 38531                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38532                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38533                                  LhSetupErrMsg:
 38534 000063AC C606[F191]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 38535 000063B1 BA[F391]                	mov	dx,extend_buf_ptr
 38536 000063B4 A3[F391]                	mov	[extend_buf_ptr],ax
 38537 000063B7 C3                      	retn
 38538                                  
 38539                                  ; ---------------------------------------------------------------------------
 38540                                  
 38541                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 38542                                  %if 0
 38543                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38544                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59DFh
 38545                                  	; MSDOS 5.0 COMMAND.COM only !
 38546                                  	; (Procedure name is not from original Microsoft source code!)
 38547                                  check_umblink:
 38548                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 38549                                  	int	21h 	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38550                                  			 ; AL = function code: get allocation strategy
 38551                                  	mov	bl,al
 38552                                  	mov	ax,5802h	; DOS_CHECK_UMBLINK
 38553                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38554                                  			; AL = function code: (DOS 5beta) get UMB link state
 38555                                  	mov	bh,al
 38556                                  	xchg	ax,bx
 38557                                  	rol	al,1
 38558                                  	and	al,1
 38559                                  	shl	ah,1
 38560                                  	or	al,ah
 38561                                  	retn
 38562                                  
 38563                                  ; ---------------------------------------------------------------------------
 38564                                  
 38565                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38566                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59F7h
 38567                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 38568                                  HideUMBs:
 38569                                  	push	ds
 38570                                  	call	check_umblink
 38571                                  	mov	ds,[RESSEG]
 38572                                  	mov	[fInHigh],al
 38573                                  	or	byte [fInHigh],80h
 38574                                  	pop	ds
 38575                                  	call	set_strategy
 38576                                  	;call	set_umblink
 38577                                  	;retn
 38578                                  	; 14/04/023
 38579                                  	;jmp	short set_umblink
 38580                                  
 38581                                  ; ---------------------------------------------------------------------------
 38582                                  
 38583                                  	; 14/04/2023
 38584                                  	; 13/04/2023
 38585                                  	; MSDOS 5.0 COMMAND.COM only !
 38586                                  	; (Procedure name is not from original Microsoft source code!)
 38587                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 38588                                  set_umblink:
 38589                                  	mov	ax,5803h	; DOS_SET_UMBLINK
 38590                                  	mov	bx,1
 38591                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 38592                                  			; AL = function code: (DOS 5beta) set UMB link state
 38593                                  	retn
 38594                                  %endif
 38595                                  
 38596                                  ; ---------------------------------------------------------------------------
 38597                                  
 38598                                  ;***	SetupPath -- Do path search for the file to be executed
 38599                                  ;
 38600                                  ;	ENTRY	None
 38601                                  ;
 38602                                  ;	EXIT	Carry set if file not found or not executable file
 38603                                  ;
 38604                                  ;	EFFECTS
 38605                                  ;		ExecPath contains the full path of the file to be executed
 38606                                  ; ---------------------------------------------------------------------------
 38607                                  
 38608                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38609                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A0Fh
 38610                                  
 38611                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38612                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68E3h
 38613                                  SetupPath:
 38614                                  
 38615                                  ;Juggle around the argv pointers to make argv[1] into argv[0]. This is 
 38616                                  ;because the path search routine that we are about to invoke expects the
 38617                                  ;filename to search for to be argv[0].
 38618                                  ;
 38619                                  ;If our new argv[0] starts with a switcharacter, it's an option... skip right
 38620                                  ;over it by doing the whole move again (smaller, of course, this time).
 38621                                  
 38622                                  
 38623                                  	;mov	ax,arg.argvcnt		;total number of arguments
 38624                                  	; 14/04/2023
 38625                                  	;mov	ax,[ARG_ARGVCNT]
 38626 000063B8 A1[A7A5]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 38627                                  
 38628 000063BB 48                      	dec	ax			;less one - skip "LoadHigh"
 38629                                  	;mov	bx,SIZE Argv_ele
 38630 000063BC BB0B00                  	mov	bx,ARGV_ELE.SIZE ; 11
 38631                                  	;mov	bx,11
 38632 000063BF F7E3                    	mul	bx			;dx:ax = size of argument lists
 38633                                  
 38634                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 38635                                  	; --------------------------------------
 38636                                  	; MSDOS 6.0
 38637                                  
 38638                                  	;getdata cl,fm_argc		;CL = number of arguments to skip
 38639 000063C1 1E                      	push	ds              ; getdata (macro)
 38640 000063C2 8E1E[159E]              	mov	ds,[RESSEG]
 38641 000063C6 8A0E[DF04]              	mov	cl,[fm_argc]
 38642 000063CA 1F                      	pop	ds
 38643                                  	
 38644 000063CB FEC1                    	inc	cl			;Skip one arg, to get over "lh"
 38645                                  
 38646                                  ;Move argv[1]..argv[n] to argv[0]..argv[n-1]. Here, AX == the overall size
 38647                                  ;of the argument lists.
 38648                                  
 38649                                  argloop:
 38650 000063CD E31B                    	jcxz	argdone			;If we've finished copying args, leave.
 38651                                  
 38652 000063CF 49                      	dec	cx			;One less time we'll go through this.
 38653                                  
 38654 000063D0 50                      	push	ax			;Copy ( size of remaining list ) bytes
 38655 000063D1 51                      	push	cx			;And remember how many args there were
 38656                                  
 38657                                  	; --------------------------------------
 38658                                  
 38659                                  	; 14/04/2023
 38660 000063D2 89C1                    	mov	cx,ax			;size to move
 38661                                  
 38662                                  	;mov	di,offset TRANGROUP:Arg	;Copy TO argv[0]
 38663                                  	;mov	di,ARG_ARGV ;mov di,[ARG+ARG_UNIT.argv] ; mov di,[ARG]
 38664 000063D4 BF[E7A2]                	mov	di,ARG	
 38665 000063D7 89FE                    	mov	si,di			;
 38666                                  	;add	si,SIZE Argv_ele	;Copy FROM argv[1]
 38667 000063D9 83C60B                  	add	si,ARGV_ELE.SIZE ; 11
 38668                                  	
 38669                                  	; 14/04/2023
 38670                                  	;mov	cx,ax
 38671                                  
 38672 000063DC FC                      	cld
 38673 000063DD F3A4                    	rep	movsb			;Move the argument list
 38674                                  	
 38675                                  	;dec	arg.argvcnt		;Fake one less argument, and
 38676                                  	;dec	word [ARG_ARGVCNT]
 38677 000063DF FF0E[A7A5]              	dec	word [ARG+ARG_UNIT.argvcnt]
 38678                                  
 38679                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 38680                                  	; --------------------------------------
 38681                                  	; MSDOS 6.0
 38682                                  	
 38683                                  	;sub	ax,ARGV_ELE.SIZE ; 11	;there's one argument we don't copy.
 38684                                  
 38685 000063E3 59                      	pop	cx
 38686 000063E4 58                      	pop	ax			;Restore the size of the arg list
 38687                                  	; 17/06/2023
 38688                                  	;jmp	short argloop
 38689                                  	
 38690                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38691 000063E5 83E80B                  	sub	ax,ARGV_ELE.SIZE ; 11
 38692 000063E8 77E3                    	ja	short argloop
 38693                                  	; --------------------------------------
 38694                                  	
 38695                                  ; Done moving... argv[0] is now the child program's name, and [1] its first arg
 38696                                  
 38697                                  	; 17/06/2023
 38698                                  argdone:
 38699 000063EA E8C3D2                  	call	path_search		;look in the path
 38700                                  
 38701                                  ;ax = 0, no file found
 38702                                  ;ax < 4, batch file found -- cant be executed
 38703                                  ;ax = 4,8 => .com or .exe file found
 38704                                  
 38705 000063ED 09C0                    	or	ax,ax			;any file found?
 38706 000063EF 740B                    	jz	short no_exec_file	;no, error
 38707                                  
 38708 000063F1 83F804                  	cmp	ax,4			;executable file?
 38709                                  	;jl	short no_exec_bat	;no, indicate fail ; M016
 38710                                  	;clc
 38711                                  	;retn
 38712                                  	; 14/04/2023
 38713 000063F4 7201                    	jb	short no_exec_bat
 38714 000063F6 C3                      	retn 
 38715                                  
 38716                                  no_exec_bat:
 38717 000063F7 BA[6394]                	mov	dx,NoExecBat_Ptr	;Setup message ptr ; M016
 38718 000063FA EB06                    	jmp	short lhsp_errret	;return error; M016
 38719                                  
 38720                                  no_exec_file:
 38721 000063FC B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 38722 000063FF E8AAFF                  	call	LhSetupErrMsg		;setup error message
 38723                                  lhsp_errret:				; M016
 38724 00006402 F9                      	stc
 38725 00006403 C3                      	retn
 38726                                  
 38727                                  ;============================================================================
 38728                                  ; COMMAND.SKL (MESSAGE.SKL), BUILDMSG.C, MSDOS 6.0, 1991
 38729                                  ;============================================================================
 38730                                  ; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38731                                  
 38732                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A44h
 38733                                  
 38734                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38735                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6930h
 38736                                  
 38737                                  ; ---------------------------------------------------------------------------
 38738                                  ; Class 3 message table/structure
 38739                                  ; ---------------------------------------------------------------------------
 38740                                  
 38741                                  $M_CLASS_3_STRUC:
 38742 00006404 FF                      	db 0FFh			; $M_CLASS_ID (Class identifer)
 38743                                  	;dw 5			; $M_COMMAND_VER (COMMAND.COM version)
 38744                                  	;db 162			; Total number of messages
 38745                                  	; 17/06/2023
 38746 00006405 0616                    	dw 1606h		; MSDOS 6.22 COMMAND.COM (hb=22,lb=6)	
 38747 00006407 BB                      	db 187			; Total number of messages
 38748                                  $M_ID_3_1:
 38749                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:5A48h)
 38750 00006408 FC03                    	dw 1020			; Message Number = 1020
 38751                                  	;dw MSG_1020-$+2 ; 288h	; Message offset from message number (5A48h+0288h=5CD0h)
 38752                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38753 0000640A EC02                    	dw MSG_1020-$+2 ; 2ECh	; Message offset from message number (6934h+02ECh=6C20h)
 38754                                  $M_ID_3_2:
 38755 0000640C F703                    	dw 1015			; Message Number = 1015
 38756                                  	;dw MSG_1015-$+2 ; 294h ; Message offset from message number (5A4Ch+0294h=5CE0h)
 38757                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38758 0000640E F802                    	dw MSG_1015-$+2 ; 2F8h	; Message offset from message number (6938h+02F8h=6C30h)
 38759                                  $M_ID_3_3:	; 26/04/2023
 38760                                  			; 17/06/2023
 38761 00006410 EC031803                	dw 1004,MSG_1004-$ ; 792
 38762 00006414 02042E03                	dw 1026,MSG_1026-$ ; 814
 38763 00006418 07043E03                	dw 1031,MSG_1031-$ ; 830
 38764 0000641C 0B044903                	dw 1035,MSG_1035-$ ; 841
 38765 00006420 26045403                	dw 1062,MSG_1062-$ ; 852
 38766 00006424 04045F03                	dw 1028,MSG_1028-$ ; 863
 38767 00006428 15047D03                	dw 1045,MSG_1045-$ ; 893
 38768 0000642C 11049603                	dw 1041,MSG_1041-$ ; 918
 38769 00006430 1204B403                	dw 1042,MSG_1042-$ ; 948
 38770                                  $M_ID_3_12:
 38771 00006434 1304CB03                	dw 1043,MSG_1043-$ ; 971
 38772 00006438 EA03E703                	dw 1002,MSG_1002-$ ; 999
 38773 0000643C EB030B04                	dw 1003,MSG_1003-$ ; 1035
 38774 00006440 EF032304                	dw 1007,MSG_1007-$ ; 1059
 38775 00006444 F0033A04                	dw 1008,MSG_1008-$ ; 1082
 38776 00006448 F1034C04                	dw 1009,MSG_1009-$ ; 1100
 38777 0000644C F2035D04                	dw 1010,MSG_1010-$ ; 1117
 38778 00006450 F3037904                	dw 1011,MSG_1011-$ ; 1145
 38779 00006454 F6039004                	dw 1014,MSG_1014-$ ; 1168
 38780 00006458 F8039D04                	dw 1016,MSG_1016-$ ; 1181
 38781 0000645C F903C304                	dw 1017,MSG_1017-$ ; 1219
 38782 00006460 FA03E404                	dw 1018,MSG_1018-$ ; 1252
 38783                                  $M_ID_3_24:
 38784 00006464 FB03F404                	dw 1019,MSG_1019-$ ; 1268
 38785 00006468 FD03FC04                	dw 1021,MSG_1021-$ ; 1276
 38786 0000646C FE031605                	dw 1022,MSG_1022-$ ; 1302
 38787 00006470 FF033905                	dw 1023,MSG_1023-$ ; 1337
 38788 00006474 00046105                	dw 1024,MSG_1024-$ ; 1377
 38789 00006478 01047405                	dw 1025,MSG_1025-$ ; 1396
 38790 0000647C 03048805                	dw 1027,MSG_1027-$ ; 1416
 38791 00006480 0504A505                	dw 1029,MSG_1029-$ ; 1445
 38792 00006484 0604B305                	dw 1030,MSG_1030-$ ; 1459
 38793 00006488 0804BE05                	dw 1032,MSG_1032-$ ; 1470
 38794 0000648C 0904D205                	dw 1033,MSG_1033-$ ; 1490
 38795 00006490 0A04E405                	dw 1034,MSG_1034-$ ; 1508
 38796 00006494 0C04F605                	dw 1036,MSG_1036-$ ; 1526
 38797 00006498 0D040706                	dw 1037,MSG_1037-$ ; 1543
 38798 0000649C 0E041406                	dw 1038,MSG_1038-$ ; 1556
 38799 000064A0 0F042306                	dw 1039,MSG_1039-$ ; 1571
 38800                                  $M_ID_3_40:
 38801 000064A4 10045C06                	dw 1040,MSG_1040-$ ; 1628
 38802 000064A8 14046D06                	dw 1044,MSG_1044-$ ; 1645
 38803 000064AC 16047D06                	dw 1046,MSG_1046-$ ; 1661
 38804 000064B0 1704B006                	dw 1047,MSG_1047-$ ; 1712
 38805 000064B4 1804C506                	dw 1048,MSG_1048-$ ; 1733
 38806 000064B8 1904D306                	dw 1049,MSG_1049-$ ; 1747
 38807 000064BC 1A04D906                	dw 1050,MSG_1050-$ ; 1753
 38808 000064C0 1B04F406                	dw 1051,MSG_1051-$ ; 1780
 38809 000064C4 1C040107                	dw 1052,MSG_1052-$ ; 1793
 38810 000064C8 1D041407                	dw 1053,MSG_1053-$ ; 1812
 38811 000064CC 1E043607                	dw 1054,MSG_1054-$ ; 1846
 38812                                  $M_ID_3_51:
 38813 000064D0 1F045907                	dw 1055,MSG_1055-$ ; 1881
 38814 000064D4 20046307                	dw 1056,MSG_1056-$ ; 1891
 38815 000064D8 21046E07                	dw 1057,MSG_1057-$ ; 1902
 38816 000064DC 23047707                	dw 1059,MSG_1059-$ ; 1911
 38817 000064E0 24047807                	dw 1060,MSG_1060-$ ; 1912
 38818 000064E4 25047807                	dw 1061,MSG_1061-$ ; 1912
 38819 000064E8 27048E07                	dw 1063,MSG_1063-$ ; 1934
 38820 000064EC 28048D07                	dw 1064,MSG_1064-$ ; 1933
 38821 000064F0 29048C07                	dw 1065,MSG_1065-$ ; 1932
 38822 000064F4 2A048B07                	dw 1066,MSG_1066-$ ; 1931
 38823 000064F8 2B048A07                	dw 1067,MSG_1067-$ ; 1930
 38824 000064FC 2C048807                	dw 1068,MSG_1068-$ ; 1928
 38825 00006500 2D048F07                	dw 1069,MSG_1069-$ ; 1935
 38826 00006504 2E048F07                	dw 1070,MSG_1070-$ ; 1935
 38827 00006508 2F048E07                	dw 1071,MSG_1071-$ ; 1934
 38828 0000650C 30048D07                	dw 1072,MSG_1072-$ ; 1933
 38829                                  $M_ID_3_67:
 38830 00006510 31049307                	dw 1073,MSG_1073-$ ; 1939
 38831 00006514 32049907                	dw 1074,MSG_1074-$ ; 1945
 38832 00006518 33049F07                	dw 1075,MSG_1075-$ ; 1951
 38833 0000651C 3404A107                	dw 1076,MSG_1076-$ ; 1953
 38834 00006520 3504A007                	dw 1077,MSG_1077-$ ; 1952
 38835 00006524 3604A407                	dw 1078,MSG_1078-$ ; 1956
 38836 00006528 3704BB07                	dw 1079,MSG_1079-$ ; 1979
 38837 0000652C 3804C207                	dw 1080,MSG_1080-$ ; 1986
 38838 00006530 3904D407                	dw 1081,MSG_1081-$ ; 2004
 38839                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38840 00006534 3A04FB07                	dw 1082,MSG_1082-$ ; 2043	
 38841 00006538 3B04FF07                	dw 1083,MSG_1083-$ ; 2047	
 38842                                  	;
 38843 0000653C 3C04FE07                	dw 1084,MSG_1084-$ ; 2046
 38844 00006540 42040A08                	dw 1090,MSG_1090-$ ; 2058
 38845 00006544 43041408                	dw 1091,MSG_1091-$ ; 2068
 38846 00006548 44041E08                	dw 1092,MSG_1092-$ ; 2078
 38847 0000654C 45042808                	dw 1093,MSG_1093-$ ; 2088
 38848 00006550 46043908                	dw 1094,MSG_1094-$ ; 2105
 38849 00006554 47045208                	dw 1095,MSG_1095-$ ; 2130
 38850 00006558 48046B08                	dw 1096,MSG_1096-$ ; 2155
 38851                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38852 0000655C 49049808                	dw 1097,MSG_1097-$ ; 2200
 38853 00006560 4A04B108                	dw 1098,MSG_1098-$ ; 2225
 38854 00006564 4B04CA08                	dw 1099,MSG_1099-$ ; 2250
 38855 00006568 4C04DC08                	dw 1100,MSG_1100-$ ; 2268
 38856 0000656C 4D04FE08                	dw 1101,MSG_1101-$ ; 2302
 38857 00006570 4E040909                	dw 1102,MSG_1102-$ ; 2313
 38858 00006574 4F043F09                	dw 1103,MSG_1103-$ ; 2367
 38859 00006578 50045609                	dw 1104,MSG_1104-$ ; 2390
 38860 0000657C 51045609                	dw 1105,MSG_1105-$ ; 2390 ; TRANGROUP:6AA8h 
 38861                                  ;$M_ID_3_84:
 38862                                  $M_ID_3_95: ; 17/06/2023	
 38863 00006580 B0045709                	dw 1200,MSG_1200-$ ; 2391
 38864 00006584 14055409                	dw 1300,MSG_1300-$ ; 2388
 38865 00006588 2805D709                	dw 1320,MSG_1320-$ ; 2519
 38866 0000658C 2905130A                	dw 1321,MSG_1321-$ ; 2579
 38867 00006590 3C05800A                	dw 1340,MSG_1340-$ ; 2688
 38868 00006594 3D05D80A                	dw 1341,MSG_1341-$ ; 2776
 38869 00006598 3E05370B                	dw 1342,MSG_1342-$ ; 2871
 38870 0000659C 5005C50B                	dw 1360,MSG_1360-$ ; 3013
 38871 000065A0 7805DD0B                	dw 1400,MSG_1400-$ ; 3037
 38872 000065A4 7905760C                	dw 1401,MSG_1401-$ ; 3190
 38873 000065A8 7A05DB0C                	dw 1402,MSG_1402-$ ; 3291
 38874 000065AC 7B054E0D                	dw 1403,MSG_1403-$ ; 3406
 38875 000065B0 7C058A0D                	dw 1404,MSG_1404-$ ; 3466 ; TRANGROUP:6ADCh 
 38876                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38877 000065B4 7D05FB0D                	dw 1405,MSG_1405-$ ; 3579 ; TRANGROUP:6AE0h 
 38878 000065B8 7E056A0E                	dw 1406,MSG_1406-$ ; 3690
 38879 000065BC 7F05A90E                	dw 1407,MSG_1407-$ ; 3753 ; (MSG_1404 for MSDOS 5.0 COMMAND.COM)
 38880                                  	;
 38881 000065C0 8C052D0F                	dw 1420,MSG_1420-$ ; 3885
 38882 000065C4 A005B40F                	dw 1440,MSG_1440-$ ; 4020
 38883 000065C8 A1050E10                	dw 1441,MSG_1441-$ ; 4110
 38884                                  ;$M_ID_3_100:
 38885                                  $M_ID_3_114: ; 17/06/2023
 38886 000065CC B4058E10                	dw 1460,MSG_1460-$ ; 4238
 38887 000065D0 B505EF10                	dw 1461,MSG_1461-$ ; 4335
 38888 000065D4 B6056F11                	dw 1462,MSG_1462-$ ; 4463
 38889 000065D8 C805BB11                	dw 1480,MSG_1480-$ ; 4539
 38890 000065DC C9054112                	dw 1481,MSG_1481-$ ; 4673
 38891 000065E0 CA055C12                	dw 1482,MSG_1482-$ ; 4700
 38892 000065E4 CB05A912                	dw 1483,MSG_1483-$ ; 4777
 38893 000065E8 CC05FF12                	dw 1484,MSG_1484-$ ; 4863
 38894 000065EC CD057A13                	dw 1485,MSG_1485-$ ; 4986
 38895 000065F0 CE05F213                	dw 1486,MSG_1486-$ ; 5106
 38896 000065F4 CF058414                	dw 1487,MSG_1487-$ ; 5252
 38897 000065F8 D005C714                	dw 1488,MSG_1488-$ ; 5319
 38898                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38899 000065FC D1054315                	dw 1489,MSG_1489-$ ; 5443
 38900 00006600 D2058115                	dw 1490,MSG_1490-$ ; 5505
 38901 00006604 D3059915                	dw 1491,MSG_1491-$ ; 5529
 38902 00006608 D405E815                	dw 1492,MSG_1492-$ ; 5608
 38903 0000660C D5057716                	dw 1493,MSG_1493-$ ; 5751
 38904 00006610 D6058A16                	dw 1494,MSG_1494-$ ; 5770
 38905                                  ;$M_ID_3_112:
 38906                                  $M_ID_3_132: ; 17/06/2023
 38907 00006614 DC05A416                	dw 1500,MSG_1500-$ ; 5796
 38908 00006618 F005DF16                	dw 1520,MSG_1520-$ ; 5855
 38909 0000661C 04061917                	dw 1540,MSG_1540-$ ; 5913
 38910 00006620 05067317                	dw 1541,MSG_1541-$ ; 6003
 38911 00006624 0606DB17                	dw 1542,MSG_1542-$ ; 6107
 38912 00006628 18061318                	dw 1560,MSG_1560-$ ; 6163
 38913 0000662C 19064718                	dw 1561,MSG_1561-$ ; 6215
 38914 00006630 1A06C018                	dw 1562,MSG_1562-$ ; 6336
 38915 00006634 1B06EC18                	dw 1563,MSG_1563-$ ; 6380
 38916 00006638 1C061319                	dw 1564,MSG_1564-$ ; 6419
 38917 0000663C 1D064D19                	dw 1565,MSG_1565-$ ; 6477
 38918 00006640 1E067E19                	dw 1566,MSG_1566-$ ; 6526
 38919 00006644 1F06A719                	dw 1567,MSG_1567-$ ; 6567
 38920 00006648 20061D1A                	dw 1568,MSG_1568-$ ; 6685
 38921 0000664C 2C06661A                	dw 1580,MSG_1580-$ ; 6758
 38922                                  ;$M_ID_3_127:
 38923                                  $M_ID_3_147: ; 17/06/2023
 38924 00006650 4006AA1A                	dw 1600,MSG_1600-$ ; 6826
 38925 00006654 4106C31A                	dw 1601,MSG_1601-$ ; 6851
 38926 00006658 4206131B                	dw 1602,MSG_1602-$ ; 6931
 38927 0000665C 5406B01B                	dw 1620,MSG_1620-$ ; 7088
 38928 00006660 5506041C                	dw 1621,MSG_1621-$ ; 7172
 38929 00006664 5606821C                	dw 1622,MSG_1622-$ ; 7298
 38930 00006668 6806CA1C                	dw 1640,MSG_1640-$ ; 7370
 38931 0000666C 6906F41C                	dw 1641,MSG_1641-$ ; 7412
 38932 00006670 7C06741D                	dw 1660,MSG_1660-$ ; 7540
 38933 00006674 9006B71D                	dw 1680,MSG_1680-$ ; 7607
 38934 00006678 A406D91D                	dw 1700,MSG_1700-$ ; 7641
 38935 0000667C B806871E                	dw 1720,MSG_1720-$ ; 7815
 38936 00006680 CC06D61E                	dw 1740,MSG_1740-$ ; 7894
 38937 00006684 CD062E1F                	dw 1741,MSG_1741-$ ; 7982
 38938 00006688 E0069D1F                	dw 1760,MSG_1760-$ ; 8093
 38939 0000668C F406E61F                	dw 1780,MSG_1780-$ ; 8166
 38940                                  ;$M_ID_3_143:
 38941                                  $M_ID_3_163: ; 17/06/2023
 38942 00006690 08074E20                	dw 1800,MSG_1800-$ ; 8270
 38943 00006694 09079820                	dw 1801,MSG_1801-$ ; 8344
 38944 00006698 1C07EC20                	dw 1820,MSG_1820-$ ; 8428
 38945 0000669C 1D073021                	dw 1821,MSG_1821-$ ; 8496
 38946 000066A0 3007B721                	dw 1840,MSG_1840-$ ; 8631
 38947 000066A4 4407FE21                	dw 1860,MSG_1860-$ ; 8702
 38948 000066A8 45075522                	dw 1861,MSG_1861-$ ; 8789
 38949 000066AC 46079822                	dw 1862,MSG_1862-$ ; 8856
 38950 000066B0 47071223                	dw 1863,MSG_1863-$ ; 8978
 38951 000066B4 4807B123                	dw 1864,MSG_1864-$ ; 9137
 38952 000066B8 49071424                	dw 1865,MSG_1865-$ ; 9236
 38953 000066BC 4A077B24                	dw 1866,MSG_1866-$ ; 9339
 38954 000066C0 5807DF24                	dw 1880,MSG_1880-$ ; 9439
 38955 000066C4 59075325                	dw 1881,MSG_1881-$ ; 9555
 38956 000066C8 5A07CD25                	dw 1882,MSG_1882-$ ; 9677
 38957 000066CC 5B072026                	dw 1883,MSG_1883-$ ; 9760
 38958 000066D0 6C07BF26                	dw 1900,MSG_1900-$ ; 9919
 38959 000066D4 8007D326                	dw 1920,MSG_1920-$ ; 9939
 38960 000066D8 8107FF26                	dw 1921,MSG_1921-$ ; 9983
 38961                                  ;$M_ID_3_162:
 38962                                  $M_ID_3_182: ; 17/06/2023
 38963 000066DC 82079927                	dw 1922,MSG_1922-$ ; 9285
 38964                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 38965 000066E0 83074C28                	dw 1923,MSG_1923-$ ; 10316
 38966 000066E4 8407CE28                	dw 1924,MSG_1924-$ ; 10446
 38967 000066E8 85074A29                	dw 1925,MSG_1925-$ ; 10570
 38968 000066EC 8607CA29                	dw 1926,MSG_1926-$ ; 10698
 38969                                  $M_ID_3_187:	; 17/06/2023
 38970 000066F0 8707                    	dw 1927	; 19/06/2023	; Message Number = 1927
 38971 000066F2 1E2A                    	dw MSG_1927-$+2	; 10782	; Message offset from message number
 38972                                  				; (Msg addr: 6C1Ch+2A1Eh = TRANGROUP:963Ah)
 38973                                  
 38974                                  ; ---------------------------------------------------------------------------
 38975                                  ; Class 3 messages
 38976                                  ; ---------------------------------------------------------------------------
 38977                                  	
 38978                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38979                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5CD0h
 38980                                  
 38981                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 38982                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6C20h
 38983                                  
 38984                                  MSG_1020:	; COMMON4
 38985 000066F4 0F                      	db 15	; (MSG_1015-MSG_1020)-1
 38986 000066F5 253120627974657320-     	db '%1 bytes free',0Dh,0Ah
 38986 000066FE 667265650D0A       
 38987                                  MSG_1015:	; COMMON18
 38988 00006704 23                      	db 35
 38989 00006705 46696C652063616E6E-     	db 'File cannot be copied onto itself',0Dh,0Ah
 38989 0000670E 6F7420626520636F70-
 38989 00006717 696564206F6E746F20-
 38989 00006720 697473656C660D0A   
 38990                                  MSG_1004:	; COMMON20
 38991 00006728 19                      	db 25
 38992 00006729 496E73756666696369-     	db 'Insufficient disk space',0Dh,0Ah
 38992 00006732 656E74206469736B20-
 38992 0000673B 73706163650D0A     
 38993                                  MSG_1026:	; COMMON22
 38994 00006742 13                      	db 19
 38995 00006743 496E76616C69642063-     	db 'Invalid code page',0Dh,0Ah
 38995 0000674C 6F646520706167650D-
 38995 00006755 0A                 
 38996                                  MSG_1031:	; COMMON23
 38997 00006756 0E                      	db 14
 38998 00006757 496E76616C69642064-     	db 'Invalid date',0Dh,0Ah
 38998 00006760 6174650D0A         
 38999                                  MSG_1035:	; COMMON24
 39000 00006765 0E                      	db 14
 39001 00006766 496E76616C69642074-     	db 'Invalid time',0Dh,0Ah
 39001 0000676F 696D650D0A         
 39002                                  MSG_1062:	; COMMON25
 39003 00006774 0E                      	db 14
 39004 00006775 496E76616C69642070-     	db 'Invalid path',0Dh,0Ah
 39004 0000677E 6174680D0A         
 39005                                  MSG_1028:	; COMMON28
 39006 00006783 21                      	db 33
 39007 00006784 507265737320616E79-     	db 'Press any key to continue . . .',0Dh,0Ah
 39007 0000678D 206B657920746F2063-
 39007 00006796 6F6E74696E7565202E-
 39007 0000679F 202E202E0D0A       
 39008                                  MSG_1045:	; COMMON32
 39009 000067A5 1C                      	db 28
 39010 000067A6 556E61626C6520746F-     	db 'Unable to create directory',0Dh,0Ah
 39010 000067AF 206372656174652064-
 39010 000067B8 69726563746F72790D-
 39010 000067C1 0A                 
 39011                                  MSG_1041:	; COMMON33
 39012 000067C2 21                      	db 33
 39013 000067C3 566F6C756D6520696E-     	db 'Volume in drive %1 has no label',0Dh,0Ah
 39013 000067CC 206472697665202531-
 39013 000067D5 20686173206E6F206C-
 39013 000067DE 6162656C0D0A       
 39014                                  MSG_1042:	; COMMON34
 39015 000067E4 1A                      	db 26
 39016 000067E5 566F6C756D6520696E-     	db 'Volume in drive %1 is %2',0Dh,0Ah
 39016 000067EE 206472697665202531-
 39016 000067F7 2069732025320D0A   
 39017                                  MSG_1043:	; COMMON36
 39018 000067FF 1F                      	db 31  ; (MSG_1002-MSG_1043)-1
 39019 00006800 566F6C756D65205365-     	db 'Volume Serial Number is %1-%2',0Dh,0Ah
 39019 00006809 7269616C204E756D62-
 39019 00006812 65722069732025312D-
 39019 0000681B 25320D0A           
 39020                                  MSG_1002:
 39021 0000681F 27                              db 39
 39022 00006820 4475706C6963617465-     	db 'Duplicate file name or file not found',0Dh,0Ah
 39022 00006829 2066696C65206E616D-
 39022 00006832 65206F722066696C65-
 39022 0000683B 206E6F7420666F756E-
 39022 00006844 640D0A             
 39023                                  MSG_1003:
 39024 00006847 1B                      	db 27
 39025 00006848 496E76616C69642070-     	db 'Invalid path or file name',0Dh,0Ah
 39025 00006851 617468206F72206669-
 39025 0000685A 6C65206E616D650D0A 
 39026                                  MSG_1007:
 39027 00006863 1A                      	db 26
 39028 00006864 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
 39028 0000686D 7669726F6E6D656E74-
 39028 00006876 2073706163650D0A   
 39029                                  MSG_1008:
 39030 0000687E 15                      	db 21
 39031 0000687F 46696C652063726561-     	db 'File creation error',0Dh,0Ah
 39031 00006888 74696F6E206572726F-
 39031 00006891 720D0A             
 39032                                  MSG_1009:
 39033 00006894 14                      	db 20  ; (MSG_1010-MSG_1009)-1
 39034 00006895 42617463682066696C-     	db 'Batch file missing',0Dh,0Ah
 39034 0000689E 65206D697373696E67-
 39034 000068A7 0D0A               
 39035                                  MSG_1010:
 39036 000068A9 1F                      	db 31
 39037 000068AA 0D0A                    	db 0Dh,0Ah
 39038 000068AC 496E73657274206469-     	db 'Insert disk with batch file',0Dh,0Ah
 39038 000068B5 736B20776974682062-
 39038 000068BE 617463682066696C65-
 39038 000068C7 0D0A               
 39039                                  MSG_1011:
 39040 000068C9 1A                      	db 26
 39041 000068CA 42616420636F6D6D61-     	db 'Bad command or file name',0Dh,0Ah
 39041 000068D3 6E64206F722066696C-
 39041 000068DC 65206E616D650D0A   
 39042                                  MSG_1014:	; EXTEND5
 39043 000068E4 10                      	db 16
 39044 000068E5 416363657373206465-     	db 'Access denied ',0Dh,0Ah
 39044 000068EE 6E696564200D0A     
 39045                                  MSG_1016:
 39046 000068F5 29                      	db 41
 39047 000068F6 436F6E74656E74206F-     	db 'Content of destination lost before copy',0Dh,0Ah
 39047 000068FF 662064657374696E61-
 39047 00006908 74696F6E206C6F7374-
 39047 00006911 206265666F72652063-
 39047 0000691A 6F70790D0A         
 39048                                  MSG_1017:
 39049 0000691F 24                      	db 36
 39050 00006920 496E76616C69642066-     	db 'Invalid filename or file not found',0Dh,0Ah
 39050 00006929 696C656E616D65206F-
 39050 00006932 722066696C65206E6F-
 39050 0000693B 7420666F756E640D0A 
 39051                                  MSG_1018:
 39052 00006944 13                      	db 19
 39053 00006945 25312066696C652873-     	db '%1 file(s) copied',0Dh,0Ah
 39053 0000694E 2920636F706965640D-
 39053 00006957 0A                 
 39054                                  MSG_1019:
 39055 00006958 0B                      	db 11
 39056 00006959 25312066696C652873-     	db '%1 file(s) '
 39056 00006962 2920               
 39057                                  MSG_1021:	; EXTEND15
 39058 00006964 1D                      	db 29
 39059 00006965 496E76616C69642064-     	db 'Invalid drive specification',0Dh,0Ah
 39059 0000696E 726976652073706563-
 39059 00006977 696669636174696F6E-
 39059 00006980 0D0A               
 39060                                  MSG_1022:
 39061 00006982 26                      	db 38
 39062 00006983 436F64652070616765-     	db 'Code page %1 not prepared for system',0Dh,0Ah
 39062 0000698C 202531206E6F742070-
 39062 00006995 726570617265642066-
 39062 0000699E 6F722073797374656D-
 39062 000069A7 0D0A               
 39063                                  MSG_1023:
 39064 000069A9 2B                      	db 43
 39065 000069AA 436F64652070616765-     	db 'Code page %1 not prepared for all devices',0Dh,0Ah
 39065 000069B3 202531206E6F742070-
 39065 000069BC 726570617265642066-
 39065 000069C5 6F7220616C6C206465-
 39065 000069CE 76696365730D0A     
 39066                                  MSG_1024:
 39067 000069D5 16                      	db 22
 39068 000069D6 41637469766520636F-     	db 'Active code page: %1',0Dh,0Ah
 39068 000069DF 646520706167653A20-
 39068 000069E8 25310D0A           
 39069                                  MSG_1025:
 39070 000069EC 17                      	db 23
 39071 000069ED 4E4C5346554E43206E-     	db 'NLSFUNC not installed',0Dh,0Ah
 39071 000069F6 6F7420696E7374616C-
 39071 000069FF 6C65640D0A         
 39072                                  MSG_1027:
 39073 00006A04 20                      	db 32
 39074 00006A05 43757272656E742064-     	db 'Current drive is no longer valid'
 39074 00006A0E 72697665206973206E-
 39074 00006A17 6F206C6F6E67657220-
 39074 00006A20 76616C6964         
 39075                                  MSG_1029:
 39076 00006A25 11                      	db 17
 39077 00006A26 4C6162656C206E6F74-     	db 'Label not found',0Dh,0Ah
 39077 00006A2F 20666F756E640D0A   
 39078                                  MSG_1030:
 39079 00006A37 0E                      	db 14
 39080 00006A38 53796E746178206572-     	db 'Syntax error',0Dh,0Ah
 39080 00006A41 726F720D0A         
 39081                                  MSG_1032:
 39082 00006A46 17                      	db 23
 39083 00006A47 43757272656E742064-     	db 'Current date is %1 %2',0Dh,0Ah
 39083 00006A50 617465206973202531-
 39083 00006A59 2025320D0A         
 39084                                  MSG_1033:
 39085 00006A5E 15                      	db 21
 39086 00006A5F 53756E4D6F6E547565-     	db 'SunMonTueWedThuFriSat'
 39086 00006A68 576564546875467269-
 39086 00006A71 536174             
 39087                                  MSG_1034:
 39088 00006A74 15                      	db 21
 39089 00006A75 456E746572206E6577-     	db 'Enter new date (%1): '
 39089 00006A7E 206461746520282531-
 39089 00006A87 293A20             
 39090                                  MSG_1036:
 39091 00006A8A 14                      	db 20
 39092 00006A8B 43757272656E742074-     	db 'Current time is %1',0Dh,0Ah
 39092 00006A94 696D65206973202531-
 39092 00006A9D 0D0A               
 39093                                  MSG_1037:
 39094 00006A9F 10                      	db 16
 39095 00006AA0 456E746572206E6577-     	db 'Enter new time: '
 39095 00006AA9 2074696D653A20     
 39096                                  MSG_1038:
 39097 00006AB0 12                              db 18
 39098 00006AB1 2C2020202044656C65-     	db ',    Delete (Y/N)?'
 39098 00006ABA 74652028592F4E293F 
 39099                                  MSG_1039:
 39100 00006AC3 3C                              db 60
 39101 00006AC4 416C6C2066696C6573-     	db 'All files in directory will be deleted!',0Dh,0Ah
 39101 00006ACD 20696E206469726563-
 39101 00006AD6 746F72792077696C6C-
 39101 00006ADF 2062652064656C6574-
 39101 00006AE8 6564210D0A         
 39102 00006AED 41726520796F752073-     	db 'Are you sure (Y/N)?'
 39102 00006AF6 7572652028592F4E29-
 39102 00006AFF 3F                 
 39103                                  MSG_1040:
 39104 00006B00 14                      	db 20
 39105 00006B01 4D532D444F53205665-     	db 'MS-DOS Version %1.%2'
 39105 00006B0A 7273696F6E2025312E-
 39105 00006B13 2532               
 39106                                  MSG_1044:
 39107 00006B15 13                      	db 19
 39108 00006B16 496E76616C69642064-     	db 'Invalid directory',0Dh,0Ah
 39108 00006B1F 69726563746F72790D-
 39108 00006B28 0A                 
 39109                                  MSG_1046:
 39110 00006B29 36                      	db 54
 39111 00006B2A 496E76616C69642070-     	db 'Invalid path, not directory,',0Dh,0Ah
 39111 00006B33 6174682C206E6F7420-
 39111 00006B3C 6469726563746F7279-
 39111 00006B45 2C0D0A             
 39112 00006B48 6F7220646972656374-     	db 'or directory not empty',0Dh,0Ah
 39112 00006B51 6F7279206E6F742065-
 39112 00006B5A 6D7074790D0A       
 39113                                  MSG_1047:
 39114 00006B60 18                      	db 24
 39115 00006B61 4D7573742073706563-     	db 'Must specify ON or OFF',0Dh,0Ah
 39115 00006B6A 696679204F4E206F72-
 39115 00006B73 204F46460D0A       
 39116                                  MSG_1048:
 39117 00006B79 11                      	db 17
 39118 00006B7A 4469726563746F7279-     	db 'Directory of %1',0Dh,0Ah
 39118 00006B83 206F662025310D0A   
 39119                                  MSG_1049:
 39120 00006B8B 09                      	db 9
 39121 00006B8C 4E6F20506174680D0A      	db 'No Path',0Dh,0Ah
 39122                                  MSG_1050:
 39123 00006B95 1E                      	db 30
 39124 00006B96 496E76616C69642064-     	db 'Invalid drive in search path',0Dh,0Ah
 39124 00006B9F 7269766520696E2073-
 39124 00006BA8 656172636820706174-
 39124 00006BB1 680D0A             
 39125                                  MSG_1051:
 39126 00006BB4 10                      	db 16
 39127 00006BB5 496E76616C69642064-     	db 'Invalid device',0Dh,0Ah
 39127 00006BBE 65766963650D0A     
 39128                                  MSG_1052:
 39129 00006BC5 16                      	db 22
 39130 00006BC6 464F522063616E6E6F-     	db 'FOR cannot be nested',0Dh,0Ah
 39130 00006BCF 74206265206E657374-
 39130 00006BD8 65640D0A           
 39131                                  MSG_1053:
 39132 00006BDC 25                      	db 37
 39133 00006BDD 496E7465726D656469-     	db 'Intermediate file error during pipe',0Dh,0Ah
 39133 00006BE6 6174652066696C6520-
 39133 00006BEF 6572726F7220647572-
 39133 00006BF8 696E6720706970650D-
 39133 00006C01 0A                 
 39134                                  MSG_1054:
 39135 00006C02 26                      	db 38
 39136 00006C03 43616E6E6F7420646F-     	db 'Cannot do binary reads from a device',0Dh,0Ah
 39136 00006C0C 2062696E6172792072-
 39136 00006C15 656164732066726F6D-
 39136 00006C1E 206120646576696365-
 39136 00006C27 0D0A               
 39137                                  
 39138                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:6205h)
 39139                                  	; 17/06/2023
 39140                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7155h)
 39141                                  MSG_1055:
 39142 00006C29 0D                      	db 13
 39143 00006C2A 425245414B20697320-     	db 'BREAK is %1',0Dh,0Ah
 39143 00006C33 25310D0A           
 39144                                  MSG_1056:
 39145 00006C37 0E                      	db 14
 39146 00006C38 564552494659206973-     	db 'VERIFY is %1',0Dh,0Ah
 39146 00006C41 2025310D0A         
 39147                                  MSG_1057:
 39148 00006C46 0C                      	db 12
 39149 00006C47 4543484F2069732025-     	db 'ECHO is %1',0Dh,0Ah
 39149 00006C50 310D0A             
 39150                                  MSG_1059:
 39151 00006C53 04                      	db 4
 39152 00006C54 6F666600                	db 'off',0
 39153                                  MSG_1060:
 39154 00006C58 03                      	db 3
 39155 00006C59 6F6E00                  	db 'on',0
 39156                                  MSG_1061:
 39157 00006C5C 19                      	db 25
 39158 00006C5D 4572726F7220777269-     	db 'Error writing to device',0Dh,0Ah
 39158 00006C66 74696E6720746F2064-
 39158 00006C6F 65766963650D0A     
 39159                                  MSG_1063:
 39160 00006C76 02                      	db 2
 39161 00006C77 2531                    	db '%1'
 39162                                  MSG_1064:
 39163 00006C79 02                      	db 2
 39164 00006C7A 2531                    	db '%1'
 39165                                  MSG_1065:
 39166 00006C7C 02                      	db 2
 39167 00006C7D 2531                    	db '%1'
 39168                                  MSG_1066:
 39169 00006C7F 02                      	db 2
 39170 00006C80 2531                    	db '%1'
 39171                                  MSG_1067:
 39172 00006C82 01                      	db 1
 39173 00006C83 09                      	db 9
 39174                                  MSG_1068:
 39175 00006C84 0A                      	db 10
 39176 00006C85 203C4449523E202020-     	db ' <DIR>    '
 39176 00006C8E 20                 
 39177                                  MSG_1069:
 39178 00006C8F 03                      	db 3
 39179 00006C90 082008                  	db 8, 20h, 8
 39180                                  MSG_1070:	; CRLF		
 39181 00006C93 02                      	db 2
 39182 00006C94 0D                      	db 0Dh
 39183 00006C95 0A                      	db 0Ah
 39184                                  MSG_1071:
 39185 00006C96 02                      	db 2
 39186 00006C97 2531                    	db '%1'
 39187                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 39188                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:71C5h
 39189                                  MSG_1072:
 39190                                  	;db 8
 39191                                  	;db 'mm-dd-yy'
 39192 00006C99 09                      	db 9
 39193 00006C9A 6D6D2D64642D797900      	db 'mm-dd-yy',0
 39194                                  MSG_1073:
 39195                                  	;db 8
 39196                                  	;db 'dd-mm-yy'
 39197 00006CA3 09                      	db 9
 39198 00006CA4 64642D6D6D2D797900      	db 'dd-mm-yy',0
 39199                                  MSG_1074:
 39200                                  	;db 8
 39201                                  	;db 'yy-mm-dd'
 39202 00006CAD 09                      	db 9
 39203 00006CAE 79792D6D6D2D646400      	db 'yy-mm-dd',0
 39204                                  MSG_1075:
 39205 00006CB7 05                      	db 5
 39206 00006CB8 2531202532              	db '%1 %2'
 39207                                  MSG_1076:
 39208 00006CBD 02                      	db 2
 39209 00006CBE 2531                    	db '%1'
 39210                                  MSG_1077:
 39211 00006CC0 07                      	db 7
 39212 00006CC1 20253120202532          	db ' %1  %2'
 39213                                  MSG_1078:
 39214 00006CC8 1A                      	db 26
 39215 00006CC9 4469726563746F7279-     	db 'Directory already exists',0Dh,0Ah
 39215 00006CD2 20616C726561647920-
 39215 00006CDB 6578697374730D0A   
 39216                                  MSG_1079:
 39217 00006CE3 0A                      	db 10
 39218 00006CE4 25312062797465730D-     	db '%1 bytes',0Dh,0Ah
 39218 00006CED 0A                 
 39219                                  MSG_1080:
 39220 00006CEE 15                      	db 21
 39221 00006CEF 546F74616C2066696C-     	db 'Total files listed:',0Dh,0Ah
 39221 00006CF8 6573206C6973746564-
 39221 00006D01 3A0D0A             
 39222                                  MSG_1081:
 39223 00006D04 2A                      	db 42
 39224 00006D05 284572726F72206F63-     	db '(Error occurred in environment variable)',0Dh,0Ah
 39224 00006D0E 63757272656420696E-
 39224 00006D17 20656E7669726F6E6D-
 39224 00006D20 656E74207661726961-
 39224 00006D29 626C65290D0A       
 39225                                  	;
 39226                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 39227                                  MSG_1082:
 39228 00006D2F 07                              db 7
 39229 00006D30 205B592F4E5D3F          	db ' [Y/N]?'
 39230                                  MSG_1083:
 39231 00006D37 02                      	db 2
 39232 00006D38 594E                    	db 'YN'
 39233                                  	;
 39234                                  MSG_1084:
 39235 00006D3A 0F                      	db 15
 39236 00006D3B 28636F6E74696E7569-     	db '(continuing %1)'
 39236 00006D44 6E6720253129       
 39237                                  MSG_1090:
 39238 00006D4A 0D                      	db 13
 39239 00006D4B 5265766973696F6E20-     	db 'Revision %1',0Dh,0Ah
 39239 00006D54 25310D0A           
 39240                                  MSG_1091:
 39241 00006D58 0D                      	db 13
 39242 00006D59 444F5320697320696E-     	db 'DOS is in ROM'
 39242 00006D62 20524F4D           
 39243                                  MSG_1092:
 39244 00006D66 0D                      	db 13
 39245 00006D67 444F5320697320696E-     	db 'DOS is in HMA'
 39245 00006D70 20484D41           
 39246                                  MSG_1093:
 39247 00006D74 14                      	db 20
 39248 00006D75 444F5320697320696E-     	db 'DOS is in low memory'
 39248 00006D7E 206C6F77206D656D6F-
 39248 00006D87 7279               
 39249                                  MSG_1094:
 39250 00006D89 1C                      	db 28
 39251 00006D8A 43616E6E6F74204C6F-     	db 'Cannot Loadhigh batch file',0Dh,0Ah
 39251 00006D93 616468696768206261-
 39251 00006D9C 7463682066696C650D-
 39251 00006DA5 0A                 
 39252                                  MSG_1095:
 39253 00006DA6 1C                      	db 28
 39254 00006DA7 4C6F6164486967683A-     	db 'LoadHigh: Invalid filename',0Dh,0Ah
 39254 00006DB0 20496E76616C696420-
 39254 00006DB9 66696C656E616D650D-
 39254 00006DC2 0A                 
 39255                                  MSG_1096:
 39256 00006DC3 30                      	db 48
 39257 00006DC4 43616E6E6F74206F70-     	db 'Cannot open specified country information file',0Dh,0Ah
 39257 00006DCD 656E20737065636966-
 39257 00006DD6 69656420636F756E74-
 39257 00006DDF 727920696E666F726D-
 39257 00006DE8 6174696F6E2066696C-
 39257 00006DF1 650D0A             
 39258                                  
 39259                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39260                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7320h
 39261                                  MSG_1097:
 39262 00006DF4 1C                      	db 28
 39263 00006DF5 4C6F6164486967683A-     	db 'LoadHigh: Invalid argument',0Dh,0Ah
 39263 00006DFE 20496E76616C696420-
 39263 00006E07 617267756D656E740D-
 39263 00006E10 0A                 
 39264                                  MSG_1098:
 39265 00006E11 1C                      	db 28
 39266 00006E12 526571756972656420-     	db 'Required parameter missing',0Dh,0Ah
 39266 00006E1B 706172616D65746572-
 39266 00006E24 206D697373696E670D-
 39266 00006E2D 0A                 
 39267                                  MSG_1099:
 39268 00006E2E 15                      	db 21
 39269 00006E2F 556E7265636F676E69-     	db 'Unrecognized switch',0Dh,0Ah
 39269 00006E38 7A6564207377697463-
 39269 00006E41 680D0A             
 39270                                  MSG_1100:
 39271 00006E44 25                      	db 37
 39272 00006E45 412062616420554D42-     	db 'A bad UMB number has been specified',0Dh,0Ah
 39272 00006E4E 206E756D6265722068-
 39272 00006E57 6173206265656E2073-
 39272 00006E60 70656369666965640D-
 39272 00006E69 0A                 
 39273                                  MSG_1101:
 39274 00006E6A 0E                      	db 14
 39275 00006E6B 202025312E25322074-     	db '  %1.%2 to 1.0'
 39275 00006E74 6F20312E30         
 39276                                  MSG_1102:
 39277 00006E79 39                      	db 57
 39278 00006E7A 202020202020202020-     	db '                 %1.%2 to 1.0 average compression ratio',0Dh,0Ah
 39278 00006E83 202020202020202025-
 39278 00006E8C 312E253220746F2031-
 39278 00006E95 2E3020617665726167-
 39278 00006E9E 6520636F6D70726573-
 39278 00006EA7 73696F6E2072617469-
 39278 00006EB0 6F0D0A             
 39279                                  MSG_1103:
 39280 00006EB3 1A                      	db 26
 39281 00006EB4 4F7665727772697465-     	db 'Overwrite %1 (Yes/No/All)?'
 39281 00006EBD 20253120285965732F-
 39281 00006EC6 4E6F2F416C6C293F   
 39282                                  MSG_1104:
 39283 00006ECE 03                      	db 3
 39284 00006ECF 59                      _Y_es:	db 'Y'
 39285 00006ED0 4E                      _N_o:	db 'N'
 39286 00006ED1 41                      _A_ll:	db 'A'
 39287                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:73FEh)
 39288                                  MSG_1105:
 39289 00006ED2 04                      	db 4
 39290 00006ED3 20202020                	db '    '
 39291                                  	
 39292                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:63C2h)
 39293                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7403h
 39294                                  MSG_1200:
 39295 00006ED7 00                      	db 0	; /? unimplemented
 39296                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7404h)
 39297                                  MSG_1300:
 39298 00006ED8 86                      	db 134
 39299 00006ED9 53657473206F722063-     	db 'Sets or clears extended CTRL+C checking.',0Dh,0Ah
 39299 00006EE2 6C6561727320657874-
 39299 00006EEB 656E64656420435452-
 39299 00006EF4 4C2B4320636865636B-
 39299 00006EFD 696E672E0D0A       
 39300 00006F03 0D0A                    	db 0Dh,0Ah
 39301 00006F05 425245414B205B4F4E-     	db 'BREAK [ON | OFF]',0Dh,0Ah
 39301 00006F0E 207C204F46465D0D0A 
 39302 00006F17 0D0A                    	db 0Dh,0Ah
 39303 00006F19 547970652042524541-     	db 'Type BREAK without a parameter to display the current BREAK setting.',0Dh,0Ah
 39303 00006F22 4B20776974686F7574-
 39303 00006F2B 206120706172616D65-
 39303 00006F34 74657220746F206469-
 39303 00006F3D 73706C617920746865-
 39303 00006F46 2063757272656E7420-
 39303 00006F4F 425245414B20736574-
 39303 00006F58 74696E672E0D0A     
 39304                                  MSG_1320:
 39305 00006F5F 3F                      	db 63
 39306 00006F60 446973706C61797320-     	db 'Displays or sets the active code page number.',0Dh,0Ah
 39306 00006F69 6F7220736574732074-
 39306 00006F72 686520616374697665-
 39306 00006F7B 20636F646520706167-
 39306 00006F84 65206E756D6265722E-
 39306 00006F8D 0D0A               
 39307 00006F8F 0D0A                    	db 0Dh,0Ah
 39308 00006F91 43484350205B6E6E6E-     	db 'CHCP [nnn]',0Dh,0Ah
 39308 00006F9A 5D0D0A             
 39309 00006F9D 0D0A                    	db 0Dh,0Ah
 39310                                  MSG_1321:
 39311 00006F9F 70                      	db 112
 39312 00006FA0 20206E6E6E20202053-     	db '  nnn   Specifies a code page number.',0Dh,0Ah
 39312 00006FA9 706563696669657320-
 39312 00006FB2 6120636F6465207061-
 39312 00006FBB 6765206E756D626572-
 39312 00006FC4 2E0D0A             
 39313 00006FC7 0D0A                    	db 0Dh,0Ah
 39314 00006FC9 547970652043484350-     	db 'Type CHCP without a parameter to display the active code page number.',0Dh,0Ah
 39314 00006FD2 20776974686F757420-
 39314 00006FDB 6120706172616D6574-
 39314 00006FE4 657220746F20646973-
 39314 00006FED 706C61792074686520-
 39314 00006FF6 61637469766520636F-
 39314 00006FFF 64652070616765206E-
 39314 00007008 756D6265722E0D0A   
 39315                                  MSG_1340:
 39316 00007010 5B                      	db 91
 39317 00007011 446973706C61797320-     	db 'Displays the name of or changes the current directory.',0Dh,0Ah
 39317 0000701A 746865206E616D6520-
 39317 00007023 6F66206F7220636861-
 39317 0000702C 6E6765732074686520-
 39317 00007035 63757272656E742064-
 39317 0000703E 69726563746F72792E-
 39317 00007047 0D0A               
 39318 00007049 0D0A                    	db 0Dh,0Ah
 39319 0000704B 4348444952205B6472-     	db 'CHDIR [drive:][path]',0Dh,0Ah
 39319 00007054 6976653A5D5B706174-
 39319 0000705D 685D0D0A           
 39320 00007061 43484449525B2E2E5D-     	db 'CHDIR[..]',0Dh,0Ah
 39320 0000706A 0D0A               
 39321                                  MSG_1341:
 39322 0000706C 62                      	db 98
 39323 0000706D 4344205B6472697665-     	db 'CD [drive:][path]',0Dh,0Ah
 39323 00007076 3A5D5B706174685D0D-
 39323 0000707F 0A                 
 39324 00007080 43445B2E2E5D0D0A        	db 'CD[..]',0Dh,0Ah
 39325 00007088 0D0A                    	db 0Dh,0Ah
 39326 0000708A 20202E2E2020205370-     	db '  ..   Specifies that you want to change to the parent directory.'
 39326 00007093 656369666965732074-
 39326 0000709C 68617420796F752077-
 39326 000070A5 616E7420746F206368-
 39326 000070AE 616E676520746F2074-
 39326 000070B7 686520706172656E74-
 39326 000070C0 206469726563746F72-
 39326 000070C9 792E               
 39327 000070CB 0D0A                    	db 0Dh,0Ah
 39328 000070CD 0D0A                    	db 0Dh,0Ah
 39329                                  MSG_1342:
 39330 000070CF 91                      	db 145
 39331 000070D0 547970652043442064-     	db 'Type CD drive: to display the current directory in the specified '
 39331 000070D9 726976653A20746F20-
 39331 000070E2 646973706C61792074-
 39331 000070EB 68652063757272656E-
 39331 000070F4 74206469726563746F-
 39331 000070FD 727920696E20746865-
 39331 00007106 207370656369666965-
 39331 0000710F 6420               
 39332 00007111 64726976652E0D0A        	db 'drive.',0Dh,0Ah
 39333 00007119 547970652043442077-     	db 'Type CD without parameters to display the current drive and directory.',0Dh,0Ah
 39333 00007122 6974686F7574207061-
 39333 0000712B 72616D657465727320-
 39333 00007134 746F20646973706C61-
 39333 0000713D 792074686520637572-
 39333 00007146 72656E742064726976-
 39333 0000714F 6520616E6420646972-
 39333 00007158 6563746F72792E0D0A 
 39334                                  MSG_1360:
 39335 00007161 1B                      	db 27
 39336 00007162 436C65617273207468-     	db 'Clears the screen.',0Dh,0Ah
 39336 0000716B 652073637265656E2E-
 39336 00007174 0D0A               
 39337 00007176 0D0A                    	db 0Dh,0Ah
 39338 00007178 434C530D0A              	db 'CLS',0Dh,0Ah
 39339                                  MSG_1400:
 39340                                  	;db 145
 39341                                  	;db 'Copies one or more files to another location.',0Dh,0Ah
 39342                                  	;db 0Dh,0Ah
 39343                                  	;db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 39344                                  	;db '  [/A | /B]] [/V]',0Dh,0Ah
 39345                                  	;db 0Dh,0Ah
 39346                                  	
 39347                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39348                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:76A9h)
 39349 0000717D 9C                      	db 156 ; 19/06/2023	
 39350 0000717E 436F70696573206F6E-     	db 'Copies one or more files to another location.',0Dh,0Ah
 39350 00007187 65206F72206D6F7265-
 39350 00007190 2066696C657320746F-
 39350 00007199 20616E6F7468657220-
 39350 000071A2 6C6F636174696F6E2E-
 39350 000071AB 0D0A               
 39351 000071AD 0D0A                    	db 0Dh,0Ah
 39352 000071AF 434F5059205B2F4120-     	db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 39352 000071B8 7C202F425D20736F75-
 39352 000071C1 726365205B2F41207C-
 39352 000071CA 202F425D205B2B2073-
 39352 000071D3 6F75726365205B2F41-
 39352 000071DC 207C202F425D205B2B-
 39352 000071E5 202E2E2E5D5D205B64-
 39352 000071EE 657374696E6174696F-
 39352 000071F7 6E0D0A             
 39353 000071FA 20205B2F41207C202F-     	db '  [/A | /B]] [/V] [/Y | /-Y]',0Dh,0Ah
 39353 00007203 425D5D205B2F565D20-
 39353 0000720C 5B2F59207C202F2D59-
 39353 00007215 5D0D0A             
 39354 00007218 0D0A                    	db 0Dh,0Ah
 39355                                  MSG_1401:
 39356 0000721A 68                      	db 104
 39357 0000721B 2020736F7572636520-     	db '  source       Specifies the file or files to be copied.',0Dh,0Ah
 39357 00007224 202020202020537065-
 39357 0000722D 636966696573207468-
 39357 00007236 652066696C65206F72-
 39357 0000723F 2066696C657320746F-
 39357 00007248 20626520636F706965-
 39357 00007251 642E0D0A           
 39358 00007255 20202F412020202020-     	db '  /A           Indicates an ASCII text file.',0Dh,0Ah
 39358 0000725E 202020202020496E64-
 39358 00007267 69636174657320616E-
 39358 00007270 204153434949207465-
 39358 00007279 78742066696C652E0D-
 39358 00007282 0A                 
 39359                                  MSG_1402:
 39360 00007283 76                      	db 118
 39361 00007284 20202F422020202020-     	db '  /B           Indicates a binary file.',0Dh,0Ah
 39361 0000728D 202020202020496E64-
 39361 00007296 696361746573206120-
 39361 0000729F 62696E617279206669-
 39361 000072A8 6C652E0D0A         
 39362 000072AD 202064657374696E61-     	db '  destination  Specifies the directory and/or filename for the new file(s).',0Dh,0Ah
 39362 000072B6 74696F6E2020537065-
 39362 000072BF 636966696573207468-
 39362 000072C8 65206469726563746F-
 39362 000072D1 727920616E642F6F72-
 39362 000072DA 2066696C656E616D65-
 39362 000072E3 20666F722074686520-
 39362 000072EC 6E65772066696C6528-
 39362 000072F5 73292E0D0A         
 39363                                  MSG_1403:	
 39364                                  	;db 65  ;  MSDOS 5.0
 39365                                  	; 17/06/2023
 39366 000072FA 3F                      	db 63 ; MSDOS 6.22	
 39367 000072FB 20202F562020202020-     	db '  /V           Verifies that new files are written correctly.',0Dh,0Ah
 39367 00007304 202020202020566572-
 39367 0000730D 696669657320746861-
 39367 00007316 74206E65772066696C-
 39367 0000731F 657320617265207772-
 39367 00007328 697474656E20636F72-
 39367 00007331 726563746C792E0D0A 
 39368                                  	;db 0Dh,0Ah ; MSDOS 5.0
 39369                                  
 39370                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39371                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7866h
 39372                                  MSG_1404:
 39373 0000733A 74                              db 116
 39374 0000733B 20202F592020202020-     	db '  /Y           Suppresses prompting to confirm you want to overwrite an',0Dh,0Ah
 39374 00007344 202020202020537570-
 39374 0000734D 707265737365732070-
 39374 00007356 726F6D7074696E6720-
 39374 0000735F 746F20636F6E666972-
 39374 00007368 6D20796F752077616E-
 39374 00007371 7420746F206F766572-
 39374 0000737A 777269746520616E0D-
 39374 00007383 0A                 
 39375 00007384 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 39375 0000738D 202020202020657869-
 39375 00007396 7374696E6720646573-
 39375 0000739F 74696E6174696F6E20-
 39375 000073A8 66696C652E0D0A     
 39376                                  MSG_1405:
 39377 000073AF 72                      	db 114
 39378 000073B0 20202F2D5920202020-     	db '  /-Y          Causes prompting to confirm you want to overwrite an',0Dh,0Ah
 39378 000073B9 202020202020436175-
 39378 000073C2 7365732070726F6D70-
 39378 000073CB 74696E6720746F2063-
 39378 000073D4 6F6E6669726D20796F-
 39378 000073DD 752077616E7420746F-
 39378 000073E6 206F76657277726974-
 39378 000073EF 6520616E0D0A       
 39379 000073F5 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 39379 000073FE 202020202020657869-
 39379 00007407 7374696E6720646573-
 39379 00007410 74696E6174696F6E20-
 39379 00007419 66696C652E0D0A     
 39380 00007420 0D0A                    	db 0Dh,0Ah
 39381                                  MSG_1406:
 39382 00007422 42                      	db 66
 39383 00007423 546865207377697463-     	db 'The switch /Y may be preset in the COPYCMD environment variable.',0Dh,0Ah
 39383 0000742C 68202F59206D617920-
 39383 00007435 626520707265736574-
 39383 0000743E 20696E207468652043-
 39383 00007447 4F5059434D4420656E-
 39383 00007450 7669726F6E6D656E74-
 39383 00007459 207661726961626C65-
 39383 00007462 2E0D0A             
 39384                                  
 39385                                  ;MSG_1404: ; MSDOS 5.0 (TRANGROUP:681Ch)
 39386                                  MSG_1407:  ; MSDOS 6.22	(TRANGROUP:7991h)
 39387 00007465 87                      	db 135
 39388 00007466 546F20617070656E64-     	db 'To append files, specify a single file for destination, but multiple files',0Dh,0Ah
 39388 0000746F 2066696C65732C2073-
 39388 00007478 706563696679206120-
 39388 00007481 73696E676C65206669-
 39388 0000748A 6C6520666F72206465-
 39388 00007493 7374696E6174696F6E-
 39388 0000749C 2C20627574206D756C-
 39388 000074A5 7469706C652066696C-
 39388 000074AE 65730D0A           
 39389 000074B2 666F7220736F757263-     	db 'for source (using wildcards or file1+file2+file3 format).',0Dh,0Ah
 39389 000074BB 6520287573696E6720-
 39389 000074C4 77696C646361726473-
 39389 000074CD 206F722066696C6531-
 39389 000074D6 2B66696C65322B6669-
 39389 000074DF 6C653320666F726D61-
 39389 000074E8 74292E0D0A         
 39390                                  MSG_1420:
 39391 000074ED 8A                      	db 138
 39392 000074EE 4368616E6765732074-     	db 'Changes the terminal device used to control your system.',0Dh,0Ah
 39392 000074F7 6865207465726D696E-
 39392 00007500 616C20646576696365-
 39392 00007509 207573656420746F20-
 39392 00007512 636F6E74726F6C2079-
 39392 0000751B 6F7572207379737465-
 39392 00007524 6D2E0D0A           
 39393 00007528 0D0A                    	db 0Dh,0Ah
 39394 0000752A 435454592064657669-     	db 'CTTY device',0Dh,0Ah
 39394 00007533 63650D0A           
 39395 00007537 0D0A                    	db 0Dh,0Ah
 39396 00007539 202064657669636520-     	db '  device   The terminal device you want to use, such as COM1.',0Dh,0Ah
 39396 00007542 202054686520746572-
 39396 0000754B 6D696E616C20646576-
 39396 00007554 69636520796F752077-
 39396 0000755D 616E7420746F207573-
 39396 00007566 652C20737563682061-
 39396 0000756F 7320434F4D312E0D0A 
 39397                                  MSG_1440:
 39398                                  	;db 45
 39399                                  	;db 'Displays or sets the date.',0Dh,0Ah
 39400                                  	;db 0Dh,0Ah
 39401                                  	;db 'DATE [date]',0Dh,0Ah
 39402                                  	;db 0Dh,0Ah
 39403                                  
 39404                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39405                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7AA4h)
 39406 00007578 5D                      	db 93
 39407 00007579 446973706C61797320-     	db 'Displays or sets the date.',0Dh,0Ah
 39407 00007582 6F7220736574732074-
 39407 0000758B 686520646174652E0D-
 39407 00007594 0A                 
 39408 00007595 0D0A                    	db 0Dh,0Ah
 39409 00007597 44415445205B6D6D2D-     	db 'DATE [mm-dd-yy]',0Dh,0Ah
 39409 000075A0 64642D79795D0D0A   
 39410 000075A8 0D0A                    	db 0Dh,0Ah
 39411 000075AA 20206D6D2D64642D79-     	db '  mm-dd-yy    Sets the date you specify.',0Dh,0Ah
 39411 000075B3 792020202053657473-
 39411 000075BC 207468652064617465-
 39411 000075C5 20796F752073706563-
 39411 000075CE 6966792E0D0A       
 39412 000075D4 0D0A                    	db 0Dh,0Ah
 39413                                  MSG_1441:
 39414 000075D6 83                      	db 131
 39415 000075D7 547970652044415445-     	db 'Type DATE without parameters to display the current date setting and',0Dh,0Ah
 39415 000075E0 20776974686F757420-
 39415 000075E9 706172616D65746572-
 39415 000075F2 7320746F2064697370-
 39415 000075FB 6C6179207468652063-
 39415 00007604 757272656E74206461-
 39415 0000760D 74652073657474696E-
 39415 00007616 6720616E640D0A     
 39416 0000761D 612070726F6D707420-     	db 'a prompt for a new one.  Press ENTER to keep the same date.',0Dh,0Ah
 39416 00007626 666F722061206E6577-
 39416 0000762F 206F6E652E20205072-
 39416 00007638 65737320454E544552-
 39416 00007641 20746F206B65657020-
 39416 0000764A 7468652073616D6520-
 39416 00007653 646174652E0D0A     
 39417                                  MSG_1460:	
 39418 0000765A 64                      	db 100
 39419 0000765B 44656C65746573206F-     	db 'Deletes one or more files.',0Dh,0Ah
 39419 00007664 6E65206F72206D6F72-
 39419 0000766D 652066696C65732E0D-
 39419 00007676 0A                 
 39420 00007677 0D0A                    	db 0Dh,0Ah
 39421 00007679 44454C205B64726976-     	db 'DEL [drive:][path]filename [/P]',0Dh,0Ah
 39421 00007682 653A5D5B706174685D-
 39421 0000768B 66696C656E616D6520-
 39421 00007694 5B2F505D0D0A       
 39422 0000769A 4552415345205B6472-     	db 'ERASE [drive:][path]filename [/P]',0Dh,0Ah
 39422 000076A3 6976653A5D5B706174-
 39422 000076AC 685D66696C656E616D-
 39422 000076B5 65205B2F505D0D0A   
 39423 000076BD 0D0A                    	db 0Dh,0Ah
 39424                                  MSG_1461:
 39425 000076BF 83                      	db 131
 39426 000076C0 20205B64726976653A-     	db '  [drive:][path]filename  Specifies the file(s) to delete.  Specify multiple',0Dh,0Ah
 39426 000076C9 5D5B706174685D6669-
 39426 000076D2 6C656E616D65202053-
 39426 000076DB 706563696669657320-
 39426 000076E4 7468652066696C6528-
 39426 000076ED 732920746F2064656C-
 39426 000076F6 6574652E2020537065-
 39426 000076FF 63696679206D756C74-
 39426 00007708 69706C650D0A       
 39427 0000770E 202020202020202020-     	db '                          files by using wildcards.',0Dh,0Ah
 39427 00007717 202020202020202020-
 39427 00007720 202020202020202066-
 39427 00007729 696C65732062792075-
 39427 00007732 73696E672077696C64-
 39427 0000773B 63617264732E0D0A   
 39428                                  MSG_1462:
 39429 00007743 4F                      	db 79
 39430 00007744 20202F502020202020-     	db '  /P                      Prompts for confirmation before deleting each file.',0Dh,0Ah
 39430 0000774D 202020202020202020-
 39430 00007756 202020202020202050-
 39430 0000775F 726F6D70747320666F-
 39430 00007768 7220636F6E6669726D-
 39430 00007771 6174696F6E20626566-
 39430 0000777A 6F72652064656C6574-
 39430 00007783 696E67206561636820-
 39430 0000778C 66696C652E0D0A     
 39431                                  
 39432                                  ; 17/06/2023
 39433                                  %if 0	; MSDOS 5.0 DIR Help messages 
 39434                                  
 39435                                  MSG_1480:
 39436                                  	db 162
 39437                                  	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 39438                                  	db 0Dh,0Ah
 39439                                  	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attributes]]',0Dh,0Ah
 39440                                  	db '  [/O[[:]sortorder]] [/S] [/B] [/L]',0Dh,0Ah
 39441                                  	db 0Dh,0Ah
 39442                                  MSG_1481:
 39443                                  	db 93
 39444                                  	db '  [drive:][path][filename]',0Dh,0Ah
 39445                                  	db '              Specifies drive, directory, and/or files to list.',0Dh,0Ah
 39446                                  MSG_1482:
 39447                                  	db 97
 39448                                  	db '  /P          Pauses after each screenful of information.',0Dh,0Ah
 39449                                  	db '  /W          Uses wide list format.',0Dh,0Ah
 39450                                  MSG_1483:	
 39451                                  	db 122
 39452                                  	db '  /A          Displays files with specified attributes.',0Dh,0Ah
 39453                                  	db '  attributes   D  Directories                R  Read-only files',0Dh,0Ah
 39454                                  MSG_1484:
 39455                                  	db 191
 39456                                  	db '               H  Hidden files               A  Files ready for archiving',0Dh,0Ah
 39457                                  	db '               S  System files               -  Prefix meaning "not"',0Dh,0Ah
 39458                                  	db '  /O          List by files in sorted order.',0Dh,0Ah
 39459                                  MSG_1485:
 39460                                  	db 155
 39461                                  	db '  sortorder    N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 39462                                  	db '               E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 39463                                  MSG_1486:
 39464                                  	db 150
 39465                                  	db '               G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 39466                                  	db '  /S          Displays files in specified directory and all subdirectories.',0Dh,0Ah
 39467                                  MSG_1487:
 39468                                  	db 102
 39469                                  	db '  /B          Uses bare format (no heading information or summary).',0Dh,0Ah
 39470                                  	db '  /L          Uses lowercase.',0Dh,0Ah
 39471                                  	db 0Dh,0Ah
 39472                                  MSG_1488:
 39473                                  	db 146
 39474                                  	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 39475                                  	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 39476                                  %endif
 39477                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39478                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7CBFh
 39479                                  MSG_1480:
 39480 00007793 89                      	db 137
 39481 00007794 446973706C61797320-     	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 39481 0000779D 61206C697374206F66-
 39481 000077A6 2066696C657320616E-
 39481 000077AF 642073756264697265-
 39481 000077B8 63746F726965732069-
 39481 000077C1 6E2061206469726563-
 39481 000077CA 746F72792E0D0A     
 39482 000077D1 0D0A                    	db 0Dh,0Ah
 39483 000077D3 444952205B64726976-     	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attribs]] [/O[[:]sortord]]',0Dh,0Ah
 39483 000077DC 653A5D5B706174685D-
 39483 000077E5 5B66696C656E616D65-
 39483 000077EE 5D205B2F505D205B2F-
 39483 000077F7 575D205B2F415B5B3A-
 39483 00007800 5D617474726962735D-
 39483 00007809 5D205B2F4F5B5B3A5D-
 39483 00007812 736F72746F72645D5D-
 39483 0000781B 0D0A               
 39484                                  MSG_1481:
 39485 0000781D 1E                      	db 30
 39486 0000781E 202020205B2F535D20-     	db '    [/S] [/B] [/L] [/C[H]]',0Dh,0Ah
 39486 00007827 5B2F425D205B2F4C5D-
 39486 00007830 205B2F435B485D5D0D-
 39486 00007839 0A                 
 39487 0000783A 0D0A                    	db 0Dh,0Ah
 39488                                  MSG_1482:
 39489 0000783C 50                      	db 80
 39490 0000783D 20205B64726976653A-     	db '  [drive:][path][filename]   Specifies drive, directory, and/or files to list.',0Dh,0Ah
 39490 00007846 5D5B706174685D5B66-
 39490 0000784F 696C656E616D655D20-
 39490 00007858 202053706563696669-
 39490 00007861 65732064726976652C-
 39490 0000786A 206469726563746F72-
 39490 00007873 792C20616E642F6F72-
 39490 0000787C 2066696C657320746F-
 39490 00007885 206C6973742E0D0A   
 39491                                  MSG_1483:
 39492 0000788D 59                      	db 89
 39493 0000788E 20202F502020202020-     	db '  /P      Pauses after each screenful of information.',0Dh,0Ah
 39493 00007897 205061757365732061-
 39493 000078A0 667465722065616368-
 39493 000078A9 2073637265656E6675-
 39493 000078B2 6C206F6620696E666F-
 39493 000078BB 726D6174696F6E2E0D-
 39493 000078C4 0A                 
 39494 000078C5 20202F572020202020-     	db '  /W      Uses wide list format.',0Dh,0Ah
 39494 000078CE 205573657320776964-
 39494 000078D7 65206C69737420666F-
 39494 000078E0 726D61742E0D0A     
 39495                                  MSG_1484:
 39496 000078E7 7E                      	db 126
 39497 000078E8 20202F412020202020-     	db '  /A      Displays files with specified attributes.',0Dh,0Ah
 39497 000078F1 20446973706C617973-
 39497 000078FA 2066696C6573207769-
 39497 00007903 746820737065636966-
 39497 0000790C 696564206174747269-
 39497 00007915 62757465732E0D0A   
 39498 0000791D 202061747472696273-     	db '  attribs   D  Directories   R  Read-only files         H  Hidden files',0Dh,0Ah
 39498 00007926 202020442020446972-
 39498 0000792F 6563746F7269657320-
 39498 00007938 202052202052656164-
 39498 00007941 2D6F6E6C792066696C-
 39498 0000794A 657320202020202020-
 39498 00007953 202048202048696464-
 39498 0000795C 656E2066696C65730D-
 39498 00007965 0A                 
 39499                                  MSG_1485:
 39500 00007966 7B                      	db 123
 39501 00007967 202020202020202020-     	db '            S  System files  A  Files ready to archive  -  Prefix meaning "not"',0Dh,0Ah
 39501 00007970 202020532020537973-
 39501 00007979 74656D2066696C6573-
 39501 00007982 202041202046696C65-
 39501 0000798B 732072656164792074-
 39501 00007994 6F2061726368697665-
 39501 0000799D 20202D202050726566-
 39501 000079A6 6978206D65616E696E-
 39501 000079AF 6720226E6F74220D0A 
 39502 000079B8 20202F4F2020202020-     	db '  /O      List by files in sorted order.',0Dh,0Ah
 39502 000079C1 204C69737420627920-
 39502 000079CA 66696C657320696E20-
 39502 000079D3 736F72746564206F72-
 39502 000079DC 6465722E0D0A       
 39503                                  MSG_1486:
 39504 000079E2 95                      	db 149
 39505 000079E3 2020736F72746F7264-     	db '  sortord   N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 39505 000079EC 2020204E2020427920-
 39505 000079F5 6E616D652028616C70-
 39505 000079FE 686162657469632920-
 39505 00007A07 202020202020532020-
 39505 00007A10 42792073697A652028-
 39505 00007A19 736D616C6C65737420-
 39505 00007A22 6669727374290D0A   
 39506 00007A2A 202020202020202020-     	db '            E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 39506 00007A33 202020452020427920-
 39506 00007A3C 657874656E73696F6E-
 39506 00007A45 2028616C7068616265-
 39506 00007A4E 746963292020442020-
 39506 00007A57 427920646174652026-
 39506 00007A60 2074696D6520286561-
 39506 00007A69 726C69657374206669-
 39506 00007A72 727374290D0A       
 39507                                  MSG_1487:
 39508 00007A78 46                      	db 70
 39509 00007A79 202020202020202020-     	db '            G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 39509 00007A82 20202047202047726F-
 39509 00007A8B 757020646972656374-
 39509 00007A94 6F7269657320666972-
 39509 00007A9D 7374202020202D2020-
 39509 00007AA6 50726566697820746F-
 39509 00007AAF 207265766572736520-
 39509 00007AB8 6F726465720D0A     
 39510                                  MSG_1488:
 39511 00007ABF 7F                      	db 127
 39512 00007AC0 202020202020202020-     	db '            C  By compression ratio (smallest first)',0Dh,0Ah
 39512 00007AC9 202020432020427920-
 39512 00007AD2 636F6D707265737369-
 39512 00007ADB 6F6E20726174696F20-
 39512 00007AE4 28736D616C6C657374-
 39512 00007AED 206669727374290D0A 
 39513 00007AF6 20202F532020202020-     	db '  /S      Displays files in specified directory and all subdirectories.',0Dh,0Ah
 39513 00007AFF 20446973706C617973-
 39513 00007B08 2066696C657320696E-
 39513 00007B11 207370656369666965-
 39513 00007B1A 64206469726563746F-
 39513 00007B23 727920616E6420616C-
 39513 00007B2C 6C2073756264697265-
 39513 00007B35 63746F726965732E0D-
 39513 00007B3E 0A                 
 39514                                  MSG_1489:
 39515 00007B3F 41                      	db 65
 39516 00007B40 20202F422020202020-     	db '  /B      Uses bare format (no heading information or summary).',0Dh,0Ah
 39516 00007B49 205573657320626172-
 39516 00007B52 6520666F726D617420-
 39516 00007B5B 286E6F206865616469-
 39516 00007B64 6E6720696E666F726D-
 39516 00007B6D 6174696F6E206F7220-
 39516 00007B76 73756D6D617279292E-
 39516 00007B7F 0D0A               
 39517                                  MSG_1490:
 39518 00007B81 1B                      	db 27
 39519 00007B82 20202F4C2020202020-     	db '  /L      Uses lowercase.',0Dh,0Ah
 39519 00007B8B 2055736573206C6F77-
 39519 00007B94 6572636173652E0D0A 
 39520                                  MSG_1491:
 39521 00007B9D 52                      	db 82
 39522 00007B9E 20202F435B485D2020-     	db '  /C[H]   Displays file compression ratio; /CH uses host allocation unit size.',0Dh,0Ah
 39522 00007BA7 20446973706C617973-
 39522 00007BB0 2066696C6520636F6D-
 39522 00007BB9 7072657373696F6E20-
 39522 00007BC2 726174696F3B202F43-
 39522 00007BCB 48207573657320686F-
 39522 00007BD4 737420616C6C6F6361-
 39522 00007BDD 74696F6E20756E6974-
 39522 00007BE6 2073697A652E0D0A   
 39523 00007BEE 0D0A                    	db 0Dh,0Ah
 39524                                  MSG_1492:
 39525 00007BF0 92                      	db 146
 39526 00007BF1 537769746368657320-     	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 39526 00007BFA 6D6179206265207072-
 39526 00007C03 6573657420696E2074-
 39526 00007C0C 686520444952434D44-
 39526 00007C15 20656E7669726F6E6D-
 39526 00007C1E 656E74207661726961-
 39526 00007C27 626C652E20204F7665-
 39526 00007C30 72726964650D0A     
 39527 00007C37 707265736574207377-     	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 39527 00007C40 697463686573206279-
 39527 00007C49 20707265666978696E-
 39527 00007C52 6720616E7920737769-
 39527 00007C5B 746368207769746820-
 39527 00007C64 2D202868797068656E-
 39527 00007C6D 292D2D666F72206578-
 39527 00007C76 616D706C652C202F2D-
 39527 00007C7F 572E0D0A           
 39528                                  MSG_1493:
 39529 00007C83 16                      	db 22
 39530 00007C84 202020205B2F535D20-     	db '    [/S] [/B] [/L]',0Dh,0Ah
 39530 00007C8D 5B2F425D205B2F4C5D-
 39530 00007C96 0D0A               
 39531 00007C98 0D0A                    	db 0Dh,0Ah
 39532                                  MSG_1494:
 39533 00007C9A 1D                      	db 29
 39534 00007C9B 20202F4C2020202020-     	db '  /L      Uses lowercase.',0Dh,0Ah
 39534 00007CA4 2055736573206C6F77-
 39534 00007CAD 6572636173652E0D0A 
 39535 00007CB6 0D0A                    	db 0Dh,0Ah
 39536                                  
 39537                                  MSG_1500:
 39538 00007CB8 3E                      	db 62
 39539 00007CB9 517569747320746865-     	db 'Quits the COMMAND.COM program (command interpreter).',0Dh,0Ah
 39539 00007CC2 20434F4D4D414E442E-
 39539 00007CCB 434F4D2070726F6772-
 39539 00007CD4 616D2028636F6D6D61-
 39539 00007CDD 6E6420696E74657270-
 39539 00007CE6 7265746572292E0D0A 
 39540 00007CEF 0D0A                    	db 0Dh,0Ah
 39541 00007CF1 455849540D0A            	db 'EXIT',0Dh,0Ah
 39542                                  MSG_1520:
 39543 00007CF7 3D                      	db 61
 39544 00007CF8 437265617465732061-     	db 'Creates a directory.',0Dh,0Ah
 39544 00007D01 206469726563746F72-
 39544 00007D0A 792E0D0A           
 39545 00007D0E 0D0A                    	db 0Dh,0Ah
 39546 00007D10 4D4B444952205B6472-     	db 'MKDIR [drive:]path',0Dh,0Ah
 39546 00007D19 6976653A5D70617468-
 39546 00007D22 0D0A               
 39547 00007D24 4D44205B6472697665-     	db 'MD [drive:]path',0Dh,0Ah
 39547 00007D2D 3A5D706174680D0A   
 39548                                  MSG_1540:
 39549 00007D35 5D                      	db 93
 39550 00007D36 446973706C61797320-     	db 'Displays or sets a search path for executable files.',0Dh,0Ah
 39550 00007D3F 6F7220736574732061-
 39550 00007D48 207365617263682070-
 39550 00007D51 61746820666F722065-
 39550 00007D5A 786563757461626C65-
 39550 00007D63 2066696C65732E0D0A 
 39551 00007D6C 0D0A                    	db 0Dh,0Ah
 39552 00007D6E 50415448205B5B6472-     	db 'PATH [[drive:]path[;...]]',0Dh,0Ah
 39552 00007D77 6976653A5D70617468-
 39552 00007D80 5B3B2E2E2E5D5D0D0A 
 39553 00007D89 50415448203B0D0A        	db 'PATH ;',0Dh,0Ah
 39554 00007D91 0D0A                    	db 0Dh,0Ah
 39555                                  MSG_1541:
 39556 00007D93 6B                      	db 107
 39557 00007D94 547970652050415448-     	db 'Type PATH ; to clear all search-path settings and direct MS-DOS to search',0Dh,0Ah
 39557 00007D9D 203B20746F20636C65-
 39557 00007DA6 617220616C6C207365-
 39557 00007DAF 617263682D70617468-
 39557 00007DB8 2073657474696E6773-
 39557 00007DC1 20616E642064697265-
 39557 00007DCA 6374204D532D444F53-
 39557 00007DD3 20746F207365617263-
 39557 00007DDC 680D0A             
 39558 00007DDF 6F6E6C7920696E2074-     	db 'only in the current directory.',0Dh,0Ah
 39558 00007DE8 68652063757272656E-
 39558 00007DF1 74206469726563746F-
 39558 00007DFA 72792E0D0A         
 39559                                  MSG_1542:	
 39560 00007DFF 3B                      	db 59
 39561 00007E00 547970652050415448-     	db 'Type PATH without parameters to display the current path.',0Dh,0Ah
 39561 00007E09 20776974686F757420-
 39561 00007E12 706172616D65746572-
 39561 00007E1B 7320746F2064697370-
 39561 00007E24 6C6179207468652063-
 39561 00007E2D 757272656E74207061-
 39561 00007E36 74682E0D0A         
 39562                                  MSG_1560:
 39563 00007E3B 37                      	db 55
 39564 00007E3C 4368616E6765732074-     	db 'Changes the MS-DOS command prompt.',0Dh,0Ah
 39564 00007E45 6865204D532D444F53-
 39564 00007E4E 20636F6D6D616E6420-
 39564 00007E57 70726F6D70742E0D0A 
 39565 00007E60 0D0A                    	db 0Dh,0Ah
 39566 00007E62 50524F4D5054205B74-     	db 'PROMPT [text]',0Dh,0Ah
 39566 00007E6B 6578745D0D0A       
 39567 00007E71 0D0A                    	db 0Dh,0Ah
 39568                                  MSG_1561:	
 39569 00007E73 7C                      	db 124
 39570 00007E74 202074657874202020-     	db '  text    Specifies a new command prompt.',0Dh,0Ah
 39570 00007E7D 205370656369666965-
 39570 00007E86 732061206E65772063-
 39570 00007E8F 6F6D6D616E64207072-
 39570 00007E98 6F6D70742E0D0A     
 39571 00007E9F 0D0A                    	db 0Dh,0Ah
 39572 00007EA1 50726F6D7074206361-     	db 'Prompt can be made up of normal characters and the following special codes:',0Dh,0Ah
 39572 00007EAA 6E206265206D616465-
 39572 00007EB3 207570206F66206E6F-
 39572 00007EBC 726D616C2063686172-
 39572 00007EC5 61637465727320616E-
 39572 00007ECE 642074686520666F6C-
 39572 00007ED7 6C6F77696E67207370-
 39572 00007EE0 656369616C20636F64-
 39572 00007EE9 65733A0D0A         
 39573 00007EEE 0D0A                    	db 0Dh,0Ah
 39574                                  MSG_1562:
 39575 00007EF0 2F                      	db 47
 39576 00007EF1 202024512020203D20-     	db '  $Q   = (equal sign)',0Dh,0Ah
 39576 00007EFA 28657175616C207369-
 39576 00007F03 676E290D0A         
 39577 00007F08 202024242020202420-     	db '  $$   $ (dollar sign)',0Dh,0Ah
 39577 00007F11 28646F6C6C61722073-
 39577 00007F1A 69676E290D0A       
 39578                                  MSG_1563:
 39579 00007F20 2A                      	db 42
 39580 00007F21 202024542020204375-     	db '  $T   Current time',0Dh,0Ah
 39580 00007F2A 7272656E742074696D-
 39580 00007F33 650D0A             
 39581 00007F36 202024442020204375-     	db '  $D   Current date',0Dh,0Ah
 39581 00007F3F 7272656E7420646174-
 39581 00007F48 650D0A             
 39582                                  MSG_1564:
 39583 00007F4B 3D                      	db 61
 39584 00007F4C 202024502020204375-     	db '  $P   Current drive and path',0Dh,0Ah
 39584 00007F55 7272656E7420647269-
 39584 00007F5E 766520616E64207061-
 39584 00007F67 74680D0A           
 39585 00007F6B 202024562020204D53-     	db '  $V   MS-DOS version number',0Dh,0Ah
 39585 00007F74 2D444F532076657273-
 39585 00007F7D 696F6E206E756D6265-
 39585 00007F86 720D0A             
 39586                                  MSG_1565:
 39587 00007F89 34                      	db 52
 39588 00007F8A 2020244E2020204375-     	db '  $N   Current drive',0Dh,0Ah
 39588 00007F93 7272656E7420647269-
 39588 00007F9C 76650D0A           
 39589 00007FA0 202024472020203E20-     	db '  $G   > (greater-than sign)',0Dh,0Ah
 39589 00007FA9 28677265617465722D-
 39589 00007FB2 7468616E207369676E-
 39589 00007FBB 290D0A             
 39590                                  MSG_1566:
 39591 00007FBE 2C                      	db 44
 39592 00007FBF 2020244C2020203C20-     	db '  $L   < (less-than sign)',0Dh,0Ah
 39592 00007FC8 286C6573732D746861-
 39592 00007FD1 6E207369676E290D0A 
 39593 00007FDA 202024422020207C20-     	db '  $B   | (pipe)',0Dh,0Ah
 39593 00007FE3 2870697065290D0A   
 39594                                  MSG_1567:
 39595 00007FEB 79                      	db 121
 39596 00007FEC 202024482020204261-     	db '  $H   Backspace (erases previous character)',0Dh,0Ah
 39596 00007FF5 636B73706163652028-
 39596 00007FFE 657261736573207072-
 39596 00008007 6576696F7573206368-
 39596 00008010 61726163746572290D-
 39596 00008019 0A                 
 39597 0000801A 202024452020204573-     	db '  $E   Escape code (ASCII code 27)',0Dh,0Ah
 39597 00008023 6361706520636F6465-
 39597 0000802C 202841534349492063-
 39597 00008035 6F6465203237290D0A 
 39598 0000803E 2020245F2020204361-     	db '  $_   Carriage return and linefeed',0Dh,0Ah
 39598 00008047 727269616765207265-
 39598 00008050 7475726E20616E6420-
 39598 00008059 6C696E65666565640D-
 39598 00008062 0A                 
 39599 00008063 0D0A                    	db 0Dh,0Ah
 39600                                  MSG_1568:
 39601 00008065 4C                      	db 76
 39602 00008066 547970652050524F4D-     	db 'Type PROMPT without parameters to reset the prompt to the default setting.',0Dh,0Ah
 39602 0000806F 505420776974686F75-
 39602 00008078 7420706172616D6574-
 39602 00008081 65727320746F207265-
 39602 0000808A 736574207468652070-
 39602 00008093 726F6D707420746F20-
 39602 0000809C 746865206465666175-
 39602 000080A5 6C742073657474696E-
 39602 000080AE 672E0D0A           
 39603                                  MSG_1580:
 39604 000080B2 47                      	db 71
 39605 000080B3 52656D6F7665732028-     	db 'Removes (deletes) a directory.',0Dh,0Ah
 39605 000080BC 64656C657465732920-
 39605 000080C5 61206469726563746F-
 39605 000080CE 72792E0D0A         
 39606 000080D3 0D0A                    	db 0Dh,0Ah
 39607 000080D5 524D444952205B6472-     	db 'RMDIR [drive:]path',0Dh,0Ah
 39607 000080DE 6976653A5D70617468-
 39607 000080E7 0D0A               
 39608 000080E9 5244205B6472697665-     	db 'RD [drive:]path',0Dh,0Ah
 39608 000080F2 3A5D706174680D0A   
 39609                                  MSG_1600:
 39610 000080FA 1C                      	db 28
 39611 000080FB 52656E616D65732061-     	db 'Renames a file or files.',0Dh,0Ah
 39611 00008104 2066696C65206F7220-
 39611 0000810D 66696C65732E0D0A   
 39612 00008115 0D0A                    	db 0Dh,0Ah
 39613                                  MSG_1601:
 39614 00008117 53                      	db 83
 39615 00008118 52454E414D45205B64-     	db 'RENAME [drive:][path]filename1 filename2',0Dh,0Ah
 39615 00008121 726976653A5D5B7061-
 39615 0000812A 74685D66696C656E61-
 39615 00008133 6D65312066696C656E-
 39615 0000813C 616D65320D0A       
 39616 00008142 52454E205B64726976-     	db 'REN [drive:][path]filename1 filename2',0Dh,0Ah
 39616 0000814B 653A5D5B706174685D-
 39616 00008154 66696C656E616D6531-
 39616 0000815D 2066696C656E616D65-
 39616 00008166 320D0A             
 39617 00008169 0D0A                    	db 0Dh,0Ah
 39618                                  MSG_1602:
 39619                                  	;db 77
 39620                                  	;db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 39621                                  
 39622                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39623                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:8697h
 39624                                  MSG_1602:
 39625 0000816B A0                      	db 160
 39626 0000816C 4E6F74652074686174-     	db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 39626 00008175 20796F752063616E6E-
 39626 0000817E 6F7420737065636966-
 39626 00008187 792061206E65772064-
 39626 00008190 72697665206F722070-
 39626 00008199 61746820666F722079-
 39626 000081A2 6F7572206465737469-
 39626 000081AB 6E6174696F6E206669-
 39626 000081B4 6C652E0D0A         
 39627 000081B9 0D0A                    	db 0Dh,0Ah
 39628 000081BB 557365204D4F564520-     	db 'Use MOVE to rename a directory, or to move files from one directory to another.',0Dh,0Ah
 39628 000081C4 746F2072656E616D65-
 39628 000081CD 206120646972656374-
 39628 000081D6 6F72792C206F722074-
 39628 000081DF 6F206D6F7665206669-
 39628 000081E8 6C65732066726F6D20-
 39628 000081F1 6F6E65206469726563-
 39628 000081FA 746F727920746F2061-
 39628 00008203 6E6F746865722E0D0A 
 39629                                  MSG_1620:
 39630 0000820C 57                      	db 87
 39631 0000820D 446973706C6179732C-     	db 'Displays, sets, or removes MS-DOS environment variables.',0Dh,0Ah
 39631 00008216 20736574732C206F72-
 39631 0000821F 2072656D6F76657320-
 39631 00008228 4D532D444F5320656E-
 39631 00008231 7669726F6E6D656E74-
 39631 0000823A 207661726961626C65-
 39631 00008243 732E0D0A           
 39632 00008247 0D0A                    	db 0Dh,0Ah
 39633 00008249 534554205B76617269-     	db 'SET [variable=[string]]',0Dh,0Ah
 39633 00008252 61626C653D5B737472-
 39633 0000825B 696E675D5D0D0A     
 39634 00008262 0D0A                    	db 0Dh,0Ah
 39635                                  MSG_1621:
 39636 00008264 81                      	db 129
 39637 00008265 20207661726961626C-     	db '  variable  Specifies the environment-variable name.',0Dh,0Ah
 39637 0000826E 652020537065636966-
 39637 00008277 696573207468652065-
 39637 00008280 6E7669726F6E6D656E-
 39637 00008289 742D7661726961626C-
 39637 00008292 65206E616D652E0D0A 
 39638 0000829B 2020737472696E6720-     	db '  string    Specifies a series of characters to assign to the variable.',0Dh,0Ah
 39638 000082A4 202020537065636966-
 39638 000082AD 696573206120736572-
 39638 000082B6 696573206F66206368-
 39638 000082BF 617261637465727320-
 39638 000082C8 746F2061737369676E-
 39638 000082D1 20746F207468652076-
 39638 000082DA 61726961626C652E0D-
 39638 000082E3 0A                 
 39639 000082E4 0D0A                    	db 0Dh,0Ah
 39640                                  MSG_1622:
 39641 000082E6 4B                      	db 75
 39642 000082E7 547970652053455420-     	db 'Type SET without parameters to display the current environment variables.',0Dh,0Ah
 39642 000082F0 776974686F75742070-
 39642 000082F9 6172616D6574657273-
 39642 00008302 20746F20646973706C-
 39642 0000830B 617920746865206375-
 39642 00008314 7272656E7420656E76-
 39642 0000831D 69726F6E6D656E7420-
 39642 00008326 7661726961626C6573-
 39642 0000832F 2E0D0A             
 39643                                  MSG_1640:
 39644                                  	;db 52
 39645                                  	;db 'Displays or sets the system time.',0Dh,0Ah
 39646                                  	;db 0Dh,0Ah
 39647                                  	;db 'TIME [time]',0Dh,0Ah
 39648                                  	;db 0Dh,0Ah
 39649                                  
 39650                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39651                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:885Eh)
 39652 00008332 2D                      	db 45
 39653 00008333 446973706C61797320-     	db 'Displays or sets the time.',0Dh,0Ah
 39653 0000833C 6F7220736574732074-
 39653 00008345 68652074696D652E0D-
 39653 0000834E 0A                 
 39654 0000834F 0D0A                    	db 0Dh,0Ah
 39655 00008351 54494D45205B74696D-     	db 'TIME [time]',0Dh,0Ah
 39655 0000835A 655D0D0A           
 39656 0000835E 0D0A                    	db 0Dh,0Ah
 39657                                  MSG_1641:
 39658 00008360 83                      	db 131
 39659 00008361 547970652054494D45-     	db 'Type TIME with no parameters to display the current time setting and a prompt',0Dh,0Ah
 39659 0000836A 2077697468206E6F20-
 39659 00008373 706172616D65746572-
 39659 0000837C 7320746F2064697370-
 39659 00008385 6C6179207468652063-
 39659 0000838E 757272656E74207469-
 39659 00008397 6D652073657474696E-
 39659 000083A0 6720616E6420612070-
 39659 000083A9 726F6D70740D0A     
 39660 000083B0 666F722061206E6577-     	db 'for a new one.  Press ENTER to keep the same time.',0Dh,0Ah
 39660 000083B9 206F6E652E20205072-
 39660 000083C2 65737320454E544552-
 39660 000083CB 20746F206B65657020-
 39660 000083D4 7468652073616D6520-
 39660 000083DD 74696D652E0D0A     
 39661                                  MSG_1660:
 39662 000083E4 46                      	db 70
 39663 000083E5 446973706C61797320-     	db 'Displays the contents of a text file.',0Dh,0Ah
 39663 000083EE 74686520636F6E7465-
 39663 000083F7 6E7473206F66206120-
 39663 00008400 746578742066696C65-
 39663 00008409 2E0D0A             
 39664 0000840C 0D0A                    	db 0Dh,0Ah
 39665 0000840E 54595045205B647269-     	db 'TYPE [drive:][path]filename',0Dh,0Ah
 39665 00008417 76653A5D5B70617468-
 39665 00008420 5D66696C656E616D65-
 39665 00008429 0D0A               
 39666                                  MSG_1680:
 39667 0000842B 25                      	db 37
 39668 0000842C 446973706C61797320-     	db 'Displays the MS-DOS version.',0Dh,0Ah
 39668 00008435 746865204D532D444F-
 39668 0000843E 532076657273696F6E-
 39668 00008447 2E0D0A             
 39669 0000844A 0D0A                    	db 0Dh,0Ah
 39670 0000844C 5645520D0A              	db 'VER',0Dh,0Ah
 39671                                  MSG_1700:
 39672 00008451 B1                      	db 177
 39673 00008452 54656C6C73204D532D-     	db 'Tells MS-DOS whether to verify that your files are written correctly to a',0Dh,0Ah
 39673 0000845B 444F53207768657468-
 39673 00008464 657220746F20766572-
 39673 0000846D 696679207468617420-
 39673 00008476 796F75722066696C65-
 39673 0000847F 732061726520777269-
 39673 00008488 7474656E20636F7272-
 39673 00008491 6563746C7920746F20-
 39673 0000849A 610D0A             
 39674 0000849D 6469736B2E0D0A          	db 'disk.',0Dh,0Ah
 39675 000084A4 0D0A                    	db 0Dh,0Ah
 39676 000084A6 564552494659205B4F-     	db 'VERIFY [ON | OFF]',0Dh,0Ah
 39676 000084AF 4E207C204F46465D0D-
 39676 000084B8 0A                 
 39677 000084B9 0D0A                    	db 0Dh,0Ah
 39678 000084BB 547970652056455249-     	db 'Type VERIFY without a parameter to display the current VERIFY setting.',0Dh,0Ah
 39678 000084C4 465920776974686F75-
 39678 000084CD 74206120706172616D-
 39678 000084D6 6574657220746F2064-
 39678 000084DF 6973706C6179207468-
 39678 000084E8 652063757272656E74-
 39678 000084F1 205645524946592073-
 39678 000084FA 657474696E672E0D0A 
 39679                                  MSG_1720:              
 39680 00008503 52                      	db 82
 39681 00008504 446973706C61797320-     	db 'Displays the disk volume label and serial number, if they exist.',0Dh,0Ah
 39681 0000850D 746865206469736B20-
 39681 00008516 766F6C756D65206C61-
 39681 0000851F 62656C20616E642073-
 39681 00008528 657269616C206E756D-
 39681 00008531 6265722C2069662074-
 39681 0000853A 686579206578697374-
 39681 00008543 2E0D0A             
 39682 00008546 0D0A                    	db 0Dh,0Ah
 39683 00008548 564F4C205B64726976-     	db 'VOL [drive:]',0Dh,0Ah
 39683 00008551 653A5D0D0A         
 39684                                  MSG_1740:
 39685 00008556 5B                      	db 91
 39686 00008557 43616C6C73206F6E65-     	db 'Calls one batch program from another.',0Dh,0Ah
 39686 00008560 206261746368207072-
 39686 00008569 6F6772616D2066726F-
 39686 00008572 6D20616E6F74686572-
 39686 0000857B 2E0D0A             
 39687 0000857E 0D0A                    	db 0Dh,0Ah
 39688 00008580 43414C4C205B647269-     	db 'CALL [drive:][path]filename [batch-parameters]',0Dh,0Ah
 39688 00008589 76653A5D5B70617468-
 39688 00008592 5D66696C656E616D65-
 39688 0000859B 205B62617463682D70-
 39688 000085A4 6172616D6574657273-
 39688 000085AD 5D0D0A             
 39689 000085B0 0D0A                    	db 0Dh,0Ah
 39690                                  MSG_1741:
 39691 000085B2 72                      	db 114
 39692 000085B3 202062617463682D70-     	db '  batch-parameters   Specifies any command-line information required by the',0Dh,0Ah
 39692 000085BC 6172616D6574657273-
 39692 000085C5 202020537065636966-
 39692 000085CE 69657320616E792063-
 39692 000085D7 6F6D6D616E642D6C69-
 39692 000085E0 6E6520696E666F726D-
 39692 000085E9 6174696F6E20726571-
 39692 000085F2 756972656420627920-
 39692 000085FB 7468650D0A         
 39693 00008600 202020202020202020-     	db '                     batch program.',0Dh,0Ah
 39693 00008609 202020202020202020-
 39693 00008612 202020626174636820-
 39693 0000861B 70726F6772616D2E0D-
 39693 00008624 0A                 
 39694                                  MSG_1760:	
 39695 00008625 4C                      	db 76
 39696 00008626 5265636F7264732063-     	db 'Records comments (remarks) in a batch file or CONFIG.SYS.',0Dh,0Ah
 39696 0000862F 6F6D6D656E74732028-
 39696 00008638 72656D61726B732920-
 39696 00008641 696E20612062617463-
 39696 0000864A 682066696C65206F72-
 39696 00008653 20434F4E4649472E53-
 39696 0000865C 59532E0D0A         
 39697 00008661 0D0A                    	db 0Dh,0Ah
 39698 00008663 52454D205B636F6D6D-     	db 'REM [comment]',0Dh,0Ah
 39698 0000866C 656E745D0D0A       
 39699                                  MSG_1780:
 39700 00008672 6B                      	db 107
 39701 00008673 53757370656E647320-     	db 'Suspends processing of a batch program and displays the message "'
 39701 0000867C 70726F63657373696E-
 39701 00008685 67206F662061206261-
 39701 0000868E 7463682070726F6772-
 39701 00008697 616D20616E64206469-
 39701 000086A0 73706C617973207468-
 39701 000086A9 65206D657373616765-
 39701 000086B2 2022               
 39702 000086B4 507265737320616E79-     	db 'Press any',0Dh,0Ah
 39702 000086BD 0D0A               
 39703 000086BF 6B657920746F20636F-     	db 'key to continue...."',0Dh,0Ah
 39703 000086C8 6E74696E75652E2E2E-
 39703 000086D1 2E220D0A           
 39704 000086D5 0D0A                    	db 0Dh,0Ah
 39705 000086D7 50415553450D0A          	db 'PAUSE',0Dh,0Ah
 39706                                  MSG_1800:
 39707 000086DE 4D                      	db 77
 39708 000086DF 446973706C61797320-     	db 'Displays messages, or turns command-echoing on or off.',0Dh,0Ah
 39708 000086E8 6D657373616765732C-
 39708 000086F1 206F72207475726E73-
 39708 000086FA 20636F6D6D616E642D-
 39708 00008703 6563686F696E67206F-
 39708 0000870C 6E206F72206F66662E-
 39708 00008715 0D0A               
 39709 00008717 0D0A                    	db 0Dh,0Ah
 39710 00008719 20204543484F205B4F-     	db '  ECHO [ON | OFF]',0Dh,0Ah
 39710 00008722 4E207C204F46465D0D-
 39710 0000872B 0A                 
 39711                                  MSG_1801:
 39712 0000872C 57                      	db 87
 39713 0000872D 20204543484F205B6D-     	db '  ECHO [message]',0Dh,0Ah
 39713 00008736 6573736167655D0D0A 
 39714 0000873F 0D0A                    	db 0Dh,0Ah
 39715 00008741 54797065204543484F-     	db 'Type ECHO without parameters to display the current echo setting.'
 39715 0000874A 20776974686F757420-
 39715 00008753 706172616D65746572-
 39715 0000875C 7320746F2064697370-
 39715 00008765 6C6179207468652063-
 39715 0000876E 757272656E74206563-
 39715 00008777 686F2073657474696E-
 39715 00008780 672E               
 39716 00008782 0D0A                    	db 0Dh,0Ah
 39717                                  MSG_1820:
 39718 00008784 47                      	db 71
 39719 00008785 44697265637473204D-     	db 'Directs MS-DOS to a labelled line in a batch program.',0Dh,0Ah
 39719 0000878E 532D444F5320746F20-
 39719 00008797 61206C6162656C6C65-
 39719 000087A0 64206C696E6520696E-
 39719 000087A9 206120626174636820-
 39719 000087B2 70726F6772616D2E0D-
 39719 000087BB 0A                 
 39720 000087BC 0D0A                    	db 0Dh,0Ah
 39721 000087BE 474F544F206C616265-     	db 'GOTO label',0Dh,0Ah
 39721 000087C7 6C0D0A             
 39722 000087CA 0D0A                    	db 0Dh,0Ah
 39723                                  MSG_1821:
 39724 000087CC 8A                      	db 138
 39725 000087CD 20206C6162656C2020-     	db '  label   Specifies a text string used in the batch program as a label.',0Dh,0Ah
 39725 000087D6 205370656369666965-
 39725 000087DF 732061207465787420-
 39725 000087E8 737472696E67207573-
 39725 000087F1 656420696E20746865-
 39725 000087FA 206261746368207072-
 39725 00008803 6F6772616D20617320-
 39725 0000880C 61206C6162656C2E0D-
 39725 00008815 0A                 
 39726 00008816 0D0A                    	db 0Dh,0Ah
 39727 00008818 596F75207479706520-     	db 'You type a label on a line by itself, beginning with a colon.',0Dh,0Ah
 39727 00008821 61206C6162656C206F-
 39727 0000882A 6E2061206C696E6520-
 39727 00008833 627920697473656C66-
 39727 0000883C 2C20626567696E6E69-
 39727 00008845 6E6720776974682061-
 39727 0000884E 20636F6C6F6E2E0D0A 
 39728                                  MSG_1840:
 39729 00008857 4A                      	db 74
 39730 00008858 4368616E6765732074-     	db 'Changes the position of replaceable parameters in a batch file.',0Dh,0Ah
 39730 00008861 686520706F73697469-
 39730 0000886A 6F6E206F6620726570-
 39730 00008873 6C61636561626C6520-
 39730 0000887C 706172616D65746572-
 39730 00008885 7320696E2061206261-
 39730 0000888E 7463682066696C652E-
 39730 00008897 0D0A               
 39731 00008899 0D0A                    	db 0Dh,0Ah
 39732 0000889B 53484946540D0A          	db 'SHIFT',0Dh,0Ah
 39733                                  MSG_1860:
 39734 000088A2 5A                      	db 90
 39735 000088A3 506572666F726D7320-     	db 'Performs conditional processing in batch programs.',0Dh,0Ah
 39735 000088AC 636F6E646974696F6E-
 39735 000088B5 616C2070726F636573-
 39735 000088BE 73696E6720696E2062-
 39735 000088C7 617463682070726F67-
 39735 000088D0 72616D732E0D0A     
 39736 000088D7 0D0A                    	db 0Dh,0Ah
 39737 000088D9 4946205B4E4F545D20-     	db 'IF [NOT] ERRORLEVEL number command',0Dh,0Ah
 39737 000088E2 4552524F524C455645-
 39737 000088EB 4C206E756D62657220-
 39737 000088F4 636F6D6D616E640D0A 
 39738                                  MSG_1861:
 39739 000088FD 46                      	db 70
 39740 000088FE 4946205B4E4F545D20-     	db 'IF [NOT] string1==string2 command',0Dh,0Ah
 39740 00008907 737472696E67313D3D-
 39740 00008910 737472696E67322063-
 39740 00008919 6F6D6D616E640D0A   
 39741 00008921 4946205B4E4F545D20-     	db 'IF [NOT] EXIST filename command',0Dh,0Ah
 39741 0000892A 45584953542066696C-
 39741 00008933 656E616D6520636F6D-
 39741 0000893C 6D616E640D0A       
 39742 00008942 0D0A                    	db 0Dh,0Ah
 39743                                  MSG_1862:
 39744 00008944 7D                      	db 125
 39745 00008945 20204E4F5420202020-     	db '  NOT               Specifies that MS-DOS should carry out the command only',0Dh,0Ah
 39745 0000894E 202020202020202020-
 39745 00008957 202053706563696669-
 39745 00008960 65732074686174204D-
 39745 00008969 532D444F532073686F-
 39745 00008972 756C64206361727279-
 39745 0000897B 206F75742074686520-
 39745 00008984 636F6D6D616E64206F-
 39745 0000898D 6E6C790D0A         
 39746 00008992 202020202020202020-     	db '                    if the condition is false.',0Dh,0Ah
 39746 0000899B 202020202020202020-
 39746 000089A4 202069662074686520-
 39746 000089AD 636F6E646974696F6E-
 39746 000089B6 2069732066616C7365-
 39746 000089BF 2E0D0A             
 39747                                  MSG_1863:
 39748 000089C2 A2                      	db 162
 39749 000089C3 20204552524F524C45-     	db '  ERRORLEVEL number Specifies a true condition if the last program run returned',0Dh,0Ah
 39749 000089CC 56454C206E756D6265-
 39749 000089D5 722053706563696669-
 39749 000089DE 657320612074727565-
 39749 000089E7 20636F6E646974696F-
 39749 000089F0 6E2069662074686520-
 39749 000089F9 6C6173742070726F67-
 39749 00008A02 72616D2072756E2072-
 39749 00008A0B 657475726E65640D0A 
 39750 00008A14 202020202020202020-     	db '                    '
 39750 00008A1D 202020202020202020-
 39750 00008A26 2020               
 39751 00008A28 616E20657869742063-     	db 'an exit code equal to or greater than the number specified.',0Dh,0Ah
 39751 00008A31 6F646520657175616C-
 39751 00008A3A 20746F206F72206772-
 39751 00008A43 656174657220746861-
 39751 00008A4C 6E20746865206E756D-
 39751 00008A55 626572207370656369-
 39751 00008A5E 666965642E0D0A     
 39752                                  MSG_1864:
 39753 00008A65 66                      	db 102
 39754 00008A66 2020636F6D6D616E64-     	db '  command           Specifies the command to carry out if the condition is',0Dh,0Ah
 39754 00008A6F 202020202020202020-
 39754 00008A78 202053706563696669-
 39754 00008A81 65732074686520636F-
 39754 00008A8A 6D6D616E6420746F20-
 39754 00008A93 6361727279206F7574-
 39754 00008A9C 206966207468652063-
 39754 00008AA5 6F6E646974696F6E20-
 39754 00008AAE 69730D0A           
 39755 00008AB2 202020202020202020-     	db '                    met.',0Dh,0Ah
 39755 00008ABB 202020202020202020-
 39755 00008AC4 20206D65742E0D0A   
 39756                                  MSG_1865:
 39757 00008ACC 6A                      	db 106
 39758 00008ACD 2020737472696E6731-     	db '  string1==string2  Specifies a true condition if the specified text strings',0Dh,0Ah
 39758 00008AD6 3D3D737472696E6732-
 39758 00008ADF 202053706563696669-
 39758 00008AE8 657320612074727565-
 39758 00008AF1 20636F6E646974696F-
 39758 00008AFA 6E2069662074686520-
 39758 00008B03 737065636966696564-
 39758 00008B0C 207465787420737472-
 39758 00008B15 696E67730D0A       
 39759 00008B1B 202020202020202020-     	db '                    match.',0Dh,0Ah
 39759 00008B24 202020202020202020-
 39759 00008B2D 20206D617463682E0D-
 39759 00008B36 0A                 
 39760                                  MSG_1866:
 39761 00008B37 67                      	db 103
 39762 00008B38 202045584953542066-     	db '  EXIST filename    Specifies a true condition if the specified filename',0Dh,0Ah
 39762 00008B41 696C656E616D652020-
 39762 00008B4A 202053706563696669-
 39762 00008B53 657320612074727565-
 39762 00008B5C 20636F6E646974696F-
 39762 00008B65 6E2069662074686520-
 39762 00008B6E 737065636966696564-
 39762 00008B77 2066696C656E616D65-
 39762 00008B80 0D0A               
 39763 00008B82 202020202020202020-     	db '                    exists.',0Dh,0Ah
 39763 00008B8B 202020202020202020-
 39763 00008B94 20206578697374732E-
 39763 00008B9D 0D0A               
 39764                                  MSG_1880:
 39765 00008B9F 77                      	db 119
 39766 00008BA0 52756E732061207370-     	db 'Runs a specified command for each file in a set of files.',0Dh,0Ah
 39766 00008BA9 656369666965642063-
 39766 00008BB2 6F6D6D616E6420666F-
 39766 00008BBB 722065616368206669-
 39766 00008BC4 6C6520696E20612073-
 39766 00008BCD 6574206F662066696C-
 39766 00008BD6 65732E0D0A         
 39767 00008BDB 0D0A                    	db 0Dh,0Ah
 39768 00008BDD 464F52202576617269-     	db 'FOR %variable IN (set) DO command [command-parameters]',0Dh,0Ah
 39768 00008BE6 61626C6520494E2028-
 39768 00008BEF 7365742920444F2063-
 39768 00008BF8 6F6D6D616E64205B63-
 39768 00008C01 6F6D6D616E642D7061-
 39768 00008C0A 72616D65746572735D-
 39768 00008C13 0D0A               
 39769 00008C15 0D0A                    	db 0Dh,0Ah
 39770                                  MSG_1881:
 39771 00008C17 7D                      	db 125
 39772 00008C18 202025766172696162-     	db '  %variable  Specifies a replaceable parameter.',0Dh,0Ah
 39772 00008C21 6C6520205370656369-
 39772 00008C2A 666965732061207265-
 39772 00008C33 706C61636561626C65-
 39772 00008C3C 20706172616D657465-
 39772 00008C45 722E0D0A           
 39773 00008C49 202028736574292020-     	db '  (set)      Specifies a set of one or more files.  Wildcards may be used.',0Dh,0Ah
 39773 00008C52 202020205370656369-
 39773 00008C5B 666965732061207365-
 39773 00008C64 74206F66206F6E6520-
 39773 00008C6D 6F72206D6F72652066-
 39773 00008C76 696C65732E20205769-
 39773 00008C7F 6C646361726473206D-
 39773 00008C88 617920626520757365-
 39773 00008C91 642E0D0A           
 39774                                  MSG_1882:
 39775 00008C95 56                      	db 86
 39776 00008C96 2020636F6D6D616E64-     	db '  command    Specifies the command to carry out for each file.',0Dh,0Ah
 39776 00008C9F 202020205370656369-
 39776 00008CA8 666965732074686520-
 39776 00008CB1 636F6D6D616E642074-
 39776 00008CBA 6F206361727279206F-
 39776 00008CC3 757420666F72206561-
 39776 00008CCC 63682066696C652E0D-
 39776 00008CD5 0A                 
 39777 00008CD6 2020636F6D6D616E64-     	db '  command-parameters',0Dh,0Ah
 39777 00008CDF 2D706172616D657465-
 39777 00008CE8 72730D0A           
 39778                                  MSG_1883:
 39779 00008CEC A2                      	db 162
 39780 00008CED 202020202020202020-     	db '             Specifies parameters or switches for the specified command.',0Dh,0Ah
 39780 00008CF6 202020205370656369-
 39780 00008CFF 666965732070617261-
 39780 00008D08 6D6574657273206F72-
 39780 00008D11 207377697463686573-
 39780 00008D1A 20666F722074686520-
 39780 00008D23 737065636966696564-
 39780 00008D2C 20636F6D6D616E642E-
 39780 00008D35 0D0A               
 39781 00008D37 0D0A                    	db 0Dh,0Ah
 39782 00008D39 546F20757365207468-     	db 'To use the FOR command in a batch program, specify %%variable instead of',0Dh,0Ah
 39782 00008D42 6520464F5220636F6D-
 39782 00008D4B 6D616E6420696E2061-
 39782 00008D54 206261746368207072-
 39782 00008D5D 6F6772616D2C207370-
 39782 00008D66 656369667920252576-
 39782 00008D6F 61726961626C652069-
 39782 00008D78 6E7374656164206F66-
 39782 00008D81 0D0A               
 39783 00008D83 257661726961626C65-     	db '%variable.',0Dh,0Ah
 39783 00008D8C 2E0D0A             
 39784                                  MSG_1900:
 39785 00008D8F 17                      	db 23
 39786 00008D90 526573657276656420-     	db 'Reserved command name',0Dh,0Ah
 39786 00008D99 636F6D6D616E64206E-
 39786 00008DA2 616D650D0A         
 39787                                  MSG_1920:
 39788 00008DA7 2F                      	db 47
 39789 00008DA8 4C6F61647320612070-     	db 'Loads a program into the upper memory area.',0Dh,0Ah
 39789 00008DB1 726F6772616D20696E-
 39789 00008DBA 746F20746865207570-
 39789 00008DC3 706572206D656D6F72-
 39789 00008DCC 7920617265612E0D0A 
 39790 00008DD5 0D0A                    	db 0Dh,0Ah
 39791                                  MSG_1921:
 39792                                  	;db 88
 39793                                  	;db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 39794                                  	;db 'LH [drive:][path]filename [parameters]',0Dh,0Ah
 39795                                  	;db 0Dh,0Ah
 39796                                  
 39797                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39798                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9303h
 39799 00008DD7 9D                      	db 157
 39800 00008DD8 4C4F41444849474820-     	db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 39800 00008DE1 5B64726976653A5D5B-
 39800 00008DEA 706174685D66696C65-
 39800 00008DF3 6E616D65205B706172-
 39800 00008DFC 616D65746572735D0D-
 39800 00008E05 0A                 
 39801 00008E06 4C4F41444849474820-     	db 'LOADHIGH [/L:region1[,minsize1][;region2[,minsize2]...] [/S]]',0Dh,0Ah
 39801 00008E0F 5B2F4C3A726567696F-
 39801 00008E18 6E315B2C6D696E7369-
 39801 00008E21 7A65315D5B3B726567-
 39801 00008E2A 696F6E325B2C6D696E-
 39801 00008E33 73697A65325D2E2E2E-
 39801 00008E3C 5D205B2F535D5D0D0A 
 39802 00008E45 202020202020202020-     	db '         [drive:][path]filename [parameters]',0Dh,0Ah
 39802 00008E4E 5B64726976653A5D5B-
 39802 00008E57 706174685D66696C65-
 39802 00008E60 6E616D65205B706172-
 39802 00008E69 616D65746572735D0D-
 39802 00008E72 0A                 
 39803 00008E73 0D0A                    	db 0Dh,0Ah
 39804                                  	
 39805                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:8111h)
 39806                                  ;MSG_1922: 	; MSDOS 5.0 COMMAND.COM
 39807                                  	;db 113
 39808                                  	;db '  parameters   Specifies any command-line information required by the',0Dh,0Ah
 39809                                  	;db '               program you want to load.',0Dh,0Ah
 39810                                  
 39811                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39812                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:93A1h
 39813                                  MSG_1922:
 39814 00008E75 B6                      	db 182
 39815 00008E76 2F4C3A726567696F6E-     	db '/L:region1[,minsize1][;region2[,minsize2]]...',0Dh,0Ah
 39815 00008E7F 315B2C6D696E73697A-
 39815 00008E88 65315D5B3B72656769-
 39815 00008E91 6F6E325B2C6D696E73-
 39815 00008E9A 697A65325D5D2E2E2E-
 39815 00008EA3 0D0A               
 39816 00008EA5 202020202020202020-     	db '            Specifies the region(s) of memory into which to load',0Dh,0Ah
 39816 00008EAE 202020537065636966-
 39816 00008EB7 696573207468652072-
 39816 00008EC0 6567696F6E28732920-
 39816 00008EC9 6F66206D656D6F7279-
 39816 00008ED2 20696E746F20776869-
 39816 00008EDB 636820746F206C6F61-
 39816 00008EE4 640D0A             
 39817 00008EE7 202020202020202020-     	db '            the program.  Region1 specifies the number of the first',0Dh,0Ah
 39817 00008EF0 202020746865207072-
 39817 00008EF9 6F6772616D2E202052-
 39817 00008F02 6567696F6E31207370-
 39817 00008F0B 656369666965732074-
 39817 00008F14 6865206E756D626572-
 39817 00008F1D 206F66207468652066-
 39817 00008F26 697273740D0A       
 39818                                  MSG_1923:
 39819 00008F2C 85                      	db 133
 39820 00008F2D 202020202020202020-     	db '            memory region; minsize1 specifies the minimum size, if',0Dh,0Ah
 39820 00008F36 2020206D656D6F7279-
 39820 00008F3F 20726567696F6E3B20-
 39820 00008F48 6D696E73697A653120-
 39820 00008F51 737065636966696573-
 39820 00008F5A 20746865206D696E69-
 39820 00008F63 6D756D2073697A652C-
 39820 00008F6C 2069660D0A         
 39821 00008F71 202020202020202020-     	db '            any, for region1.  Region2 and minsize2 specify the',0Dh
 39821 00008F7A 202020616E792C2066-
 39821 00008F83 6F7220726567696F6E-
 39821 00008F8C 312E2020526567696F-
 39821 00008F95 6E3220616E64206D69-
 39821 00008F9E 6E73697A6532207370-
 39821 00008FA7 656369667920746865-
 39821 00008FB0 0D                 
 39822 00008FB1 0A                      	db 0Ah
 39823                                  MSG_1924:
 39824 00008FB2 7F                      	db 127
 39825 00008FB3 202020202020202020-     	db '            number and minimum size of the second region, if any.',0Dh,0Ah
 39825 00008FBC 2020206E756D626572-
 39825 00008FC5 20616E64206D696E69-
 39825 00008FCE 6D756D2073697A6520-
 39825 00008FD7 6F6620746865207365-
 39825 00008FE0 636F6E642072656769-
 39825 00008FE9 6F6E2C20696620616E-
 39825 00008FF2 792E0D0A           
 39826 00008FF6 202020202020202020-     	db '            You can specify as many regions as you want.',0Dh,0Ah
 39826 00008FFF 202020596F75206361-
 39826 00009008 6E2073706563696679-
 39826 00009011 206173206D616E7920-
 39826 0000901A 726567696F6E732061-
 39826 00009023 7320796F752077616E-
 39826 0000902C 742E0D0A           
 39827 00009030 0D0A                    	db 0Dh,0Ah
 39828                                  MSG_1925:
 39829 00009032 83                      	db 131
 39830 00009033 2F5320202020202020-     	db '/S          Shrinks a UMB to its minimum size while the program',0Dh,0Ah
 39830 0000903C 202020536872696E6B-
 39830 00009045 73206120554D422074-
 39830 0000904E 6F20697473206D696E-
 39830 00009057 696D756D2073697A65-
 39830 00009060 207768696C65207468-
 39830 00009069 652070726F6772616D-
 39830 00009072 0D0A               
 39831 00009074 202020202020202020-     	db '            is loading.  /S is normally used only by MemMaker.',0Dh,0Ah
 39831 0000907D 2020206973206C6F61-
 39831 00009086 64696E672E20202F53-
 39831 0000908F 206973206E6F726D61-
 39831 00009098 6C6C79207573656420-
 39831 000090A1 6F6E6C79206279204D-
 39831 000090AA 656D4D616B65722E0D-
 39831 000090B3 0A                 
 39832 000090B4 0D0A                    	db 0Dh,0Ah
 39833                                  MSG_1926:
 39834 000090B6 57                      	db 87
 39835 000090B7 5B64726976653A5D5B-     	db '[drive:][path]filename',0Dh,0Ah
 39835 000090C0 706174685D66696C65-
 39835 000090C9 6E616D650D0A       
 39836 000090CF 202020202020202020-     	db '            Specifies the location and name of the program.',0Dh,0Ah
 39836 000090D8 202020537065636966-
 39836 000090E1 69657320746865206C-
 39836 000090EA 6F636174696F6E2061-
 39836 000090F3 6E64206E616D65206F-
 39836 000090FC 66207468652070726F-
 39836 00009105 6772616D2E0D0A     
 39837 0000910C 0D0A                    	db 0Dh,0Ah
 39838                                  
 39839                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39840                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:963Ah
 39841                                  MSG_1927:
 39842 0000910E 5A                      	db 90
 39843 0000910F 706172616D65746572-     	db 'parameters  Specifies any command-line information required by',0Dh,0Ah
 39843 00009118 732020537065636966-
 39843 00009121 69657320616E792063-
 39843 0000912A 6F6D6D616E642D6C69-
 39843 00009133 6E6520696E666F726D-
 39843 0000913C 6174696F6E20726571-
 39843 00009145 75697265642062790D-
 39843 0000914E 0A                 
 39844 0000914F 202020202020202020-     	db '            the program.',0Dh,0Ah
 39844 00009158 202020746865207072-
 39844 00009161 6F6772616D2E0D0A   
 39845                                  
 39846                                  ; ---------------------------------------------------------------------------
 39847                                  
 39848                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39849                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8183h
 39850                                  
 39851                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39852                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9695h
 39853                                  
 39854                                  ; --------------- S U B R O U T I N E ---------------------------------------
 39855                                  
 39856                                  $M_CLS_3:
 39857 00009169 0E                      	push	cs		; CLASS_F
 39858 0000916A 07                      	pop	es
 39859 0000916B 8D3E[0464]              	lea	di,$M_CLASS_3_STRUC ; LEA DI,$M_CLASS_3_STRUC
 39860                                  	; 15/04/2023
 39861                                  	;add	cx,10053	; ADD CX,$-$M_CLASS_3_STRUC ; 8189h-5A44h
 39862                                  	; 17/06/2023
 39863 0000916F 81C16B2D                	add	cx,11627	; ADD CX,$-$M_CLASS_3_STRUC ; 969Bh-6930h
 39864 00009173 C3                      	retn
 39865                                  
 39866                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39867                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:818Eh
 39868                                  
 39869                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39870                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96A0h
 39871                                  
 39872                                  ; ---------------------------------------------------------------------------
 39873                                  ; Class 1 messages
 39874                                  ; ---------------------------------------------------------------------------
 39875                                  	
 39876                                  $M_CLASS_1_STRUC:
 39877 00009174 01                      	db 1			; $M_CLASS_ID
 39878                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 39879                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39880 00009175 0616                    	dw 1606h  ; MSDOS 6.22 COMMAND.COM
 39881 00009177 04                      	db 4			; Class_1_MessageCount
 39882                                  $M_ID_1_1:
 39883 00009178 0200                    	dw 2			; Message Number = 2
 39884 0000917A 1000                    	dw EXTEND2-$+2 ; 10h	; Message offset from message number
 39885                                  $M_ID_1_2:
 39886 0000917C 0300                    	dw 3			; Message Number = 3
 39887 0000917E 1B00                    	dw EXTEND3-$+2 ; 1Bh	; Message offset from message number
 39888                                  $M_ID_1_3:
 39889 00009180 0800                    	dw 8			; Message Number = 8
 39890 00009182 2600                    	dw EXTEND8-$+2 ; 26h	; Message offset from message number
 39891                                  $M_ID_1_4:
 39892 00009184 FFFF                    	dw 0FFFFh		; Message Number = -1
 39893 00009186 3600                    	dw EXTEND999-$+2 ; 36h	; Message offset from message number
 39894                                  
 39895                                  ; ---------------------------------------------------------------------------
 39896                                  
 39897                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81A2h
 39898                                  EXTEND2:
 39899 00009188 0E                      	db 14
 39900 00009189 46696C65206E6F7420-     	db 'File not found'
 39900 00009192 666F756E64         
 39901                                  EXTEND3:
 39902 00009197 0E                      	db 14
 39903 00009198 50617468206E6F7420-     	db 'Path not found'
 39903 000091A1 666F756E64         
 39904                                  EXTEND8:
 39905 000091A6 13                      	db 19
 39906 000091A7 496E73756666696369-     	db 'Insufficient memory'
 39906 000091B0 656E74206D656D6F72-
 39906 000091B9 79                 
 39907                                  EXTEND999:
 39908 000091BA 11                      	db 17
 39909 000091BB 457874656E64656420-     	db 'Extended Error %1'
 39909 000091C4 4572726F72202531   
 39910                                  
 39911                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39912                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81E6h
 39913                                  
 39914                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39915                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96F8h
 39916                                  
 39917                                  ; --------------- S U B R O U T I N E ---------------------------------------
 39918                                  $M_MSGSERV_1:
 39919 000091CC 0E                      	push	cs
 39920 000091CD 07                      	pop	es
 39921 000091CE 8D3E[7491]              	lea	di,$M_CLASS_1_STRUC
 39922                                  	; 15/04/2023
 39923                                  	;add	cx,94		; $-$M_CLASS_1_STRUC ; 81ECh-818Eh
 39924                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 39925                                  				; 96FEh-96A0h = 5Eh = 94
 39926 000091D2 C3                      	retn
 39927                                  
 39928                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39929                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F0h
 39930                                  
 39931                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39932                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9702h
 39933                                  
 39934                                  ; ---------------------------------------------------------------------------
 39935                                  ; Class 2 messages
 39936                                  ; ---------------------------------------------------------------------------
 39937                                  	
 39938                                  $M_CLASS_2_STRUC:
 39939 000091D3 02                      	db 2			; $M_CLASS_ID
 39940                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 39941                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39942 000091D4 0616                    	dw 1606h  ; MSDOS 6.22 COMMAND.COM
 39943 000091D6 01                      	db 1			; Class_2_MessageCount
 39944                                  $M_ID_2_1:
 39945 000091D7 FFFF                    	dw 0FFFFh		; Message Number = -1
 39946 000091D9 0400                    	dw PARSE999-$+2 ; 4	; Message offset from message number
 39947                                  ; ---------------------------------------------------------------------------
 39948                                  
 39949                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F8h
 39950                                  PARSE999:
 39951 000091DB 0E                      	db 14
 39952 000091DC 506172736520457272-     	db 'Parse Error %1'
 39952 000091E5 6F72202531         
 39953                                  
 39954                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39955                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8207h
 39956                                  
 39957                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39958                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9719h
 39959                                  
 39960                                  ; --------------- S U B R O U T I N E ---------------------------------------
 39961                                  $M_MSGSERV_2:
 39962 000091EA 0E                      	push	cs
 39963 000091EB 07                      	pop	es
 39964 000091EC 8D3E[D391]              	lea	di,$M_CLASS_2_STRUC
 39965                                  	; 15/04/2023
 39966                                  	;add	cx,29		; $-$M_CLASS_2_STRUC ; 820Dh-81F0h
 39967                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 39968                                  				; 971Fh-9702h = 1Dh = 29
 39969 000091F0 C3                      	retn
 39970                                  
 39971                                  ;============================================================================
 39972                                  ; TRANMSG.ASM, MSDOS 6.0, 1991
 39973                                  ;============================================================================
 39974                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39975                                  ; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39976                                  
 39977                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8211h
 39978                                  	
 39979                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9723h
 39980                                  
 39981                                  ;****************************************************
 39982                                  ;* TRANSIENT MESSAGE POINTERS & SUBSTITUTION BLOCKS *
 39983                                  ;****************************************************
 39984                                  
 39985                                  msg_disp_class:
 39986 000091F1 FF                      	db	util_msg_class ; 0FFh
 39987                                  msg_cont_flag:
 39988 000091F2 00                      	db	no_cont_flag ; 0
 39989                                  
 39990                                  ;  extended error string output
 39991                                  extend_buf_ptr:
 39992 000091F3 0000                    	dw	0			;AN000;set to no message
 39993                                  extend_buf_sub:
 39994 000091F5 00                      	db	0			;AN000;set to no substitutions
 39995 000091F6 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 39996 000091F7 00                      	db	0			;AN000;reserved
 39997                                  extend_buf_off:
 39998 000091F8 [37A1]                  	dw	string_ptr_2		;AN000;offset of arg
 39999                                  extend_buf_seg:
 40000 000091FA 0000                    	dw	0			;AN000;segment of arg
 40001 000091FC 00                      	db	0			;AN000;first subst
 40002 000091FD 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40003 000091FE 80                      	db	128			;AN000;maximum width
 40004 000091FF 00                      	db	0			;AN000;minimum width
 40005 00009200 20                      	db	blank ; 20h		;AN000;pad character
 40006                                  
 40007                                  ;  "Duplicate file name or file not found"
 40008                                  RENERR_PTR:
 40009 00009201 EA03                    	dw	1002			;AN000;message number
 40010 00009203 00                      	db	no_subst ; 0		;AN000;number of subst
 40011                                  
 40012                                  ;  "Invalid path or file name"
 40013                                  BADCPMES_PTR:
 40014 00009204 EB03                    	dw	1003			;AN000;message number
 40015 00009206 00                      	db	no_subst ; 0		;AN000;number of subst
 40016                                  
 40017                                  ;  "Insufficient disk space"
 40018                                  NOSPACE_PTR:
 40019 00009207 EC03                    	dw	1004			;AN000;message number
 40020 00009209 00                      	db	no_subst ; 0		;AN000;number of subst
 40021                                  
 40022                                  ;  "Out of environment space"
 40023                                  ENVERR_PTR:
 40024 0000920A EF03                    	dw	1007			;AN000;message number
 40025 0000920C 00                      	db	no_subst ; 0		;AN000;number of subst
 40026                                  
 40027                                  ;  "File creation error"
 40028                                  FULLDIR_PTR:
 40029 0000920D F003                    	dw	1008			;AN000;message number
 40030 0000920F 00                      	db	no_subst ; 0		;AN000;number of subst
 40031                                  
 40032                                  ;  "Batch file missing",13,10
 40033                                  BADBAT_PTR:
 40034 00009210 F103                    	dw	1009			;AN000;message number
 40035 00009212 00                      	db	no_subst ; 0		;AN000;number of subst
 40036                                  
 40037                                  ;  "Insert disk with batch file",13,10
 40038                                  NEEDBAT_PTR:
 40039 00009213 F203                    	dw	1010			;AN000;message number
 40040 00009215 00                      	db	no_subst ; 0		;AN000;number of subst
 40041                                  
 40042                                  ;  "Bad command or file name",13,10
 40043                                  BADNAM_PTR:
 40044 00009216 F303                    	dw	1011			;AN000;message number
 40045 00009218 00                      	db	no_subst ; 0		;AN000;number of subst
 40046                                  
 40047                                  ;  "Access denied",13,10
 40048                                  ACCDEN_PTR:
 40049 00009219 F603                    	dw	1014			;AN000;message number
 40050 0000921B 00                      	db	no_subst ; 0		;AN000;number of subst
 40051                                  
 40052                                  ;  "File cannot be copied onto itself",13,10
 40053                                  OVERWR_PTR:
 40054 0000921C F703                    	dw	1015			;AN000;message number
 40055 0000921E 00                      	db	no_subst ; 0		;AN000;number of subst
 40056                                  
 40057                                  ;  "Content of destination lost before copy",13,10
 40058                                  LOSTERR_PTR:
 40059 0000921F F803                    	dw	1016			;AN000;message number
 40060 00009221 00                      	db	no_subst ; 0		;AN000;number of subst
 40061                                  
 40062                                  ;  "Invalid filename or file not found",13,10
 40063                                  INORNOT_PTR:
 40064 00009222 F903                    	dw	1017			;AN000;message number
 40065 00009224 00                      	db	no_subst		;AN000;number of subst
 40066                                  
 40067                                  ;  "%1 File(s) copied",13,10
 40068                                  copied_ptr:
 40069 00009225 FA03                    	dw	1018			;AN000;message number
 40070 00009227 01                      	db	1			;AN000;number of subst
 40071 00009228 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40072 00009229 00                      	db	0			;AN000;reserved
 40073 0000922A [39A1]                  	dw	Copy_num		;AN000;offset of arg
 40074 0000922C 0000                    	dw	0			;AN000;segment of arg
 40075 0000922E 01                      	db	1			;AN000;first subst
 40076 0000922F A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40077                                  					;AN000;binary to decimal
 40078 00009230 09                      	db	9			;AN000;maximum width
 40079 00009231 09                      	db	9			;AN000;minimum width
 40080 00009232 20                      	db	blank ; 20h		;AN000;pad character
 40081                                  
 40082                                  ;  "%1 File(s) "
 40083                                  dirmes_ptr:
 40084 00009233 FB03                    	dw	1019			;AN000;message number
 40085 00009235 01                      	db	1			;AN000;number of subst
 40086 00009236 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40087 00009237 00                      	db	0			;AN000;reserved
 40088 00009238 [3CA1]                  	dw	Dir_Num			;AN000;offset of arg
 40089 0000923A 0000                    	dw	0			;AN000;segment of arg
 40090 0000923C 01                      	db	1			;AN000;first subst
 40091                                  	; MSDOS 5.0 COMMAND.COM
 40092                                  	;db	0A1h ; Right_Align+Unsgn_Bin_Word
 40093                                  	; 17/06/2023
 40094                                  screen_f_3:
 40095 0000923D E1                      	db	0E1h ; MSDOS 6.22 COMMAND.COM
 40096                                  					;AN000;binary to decimal
 40097 0000923E 09                      	db	9			;AN000;maximum width
 40098 0000923F 09                      	db	9			;AN000;minimum width
 40099 00009240 20                      	db	blank ; 20h		;AN000;pad character
 40100                                  
 40101                                  ;  "%1 bytes free",13,10
 40102                                  bytmes_ptr:
 40103 00009241 FC03                    	dw	1020			;AN000;message number
 40104 00009243 01                      	db	1			;AN000;number of subst
 40105 00009244 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40106 00009245 00                      	db	0			;AN000;reserved
 40107 00009246 [40A1]                  	dw	Bytes_Free		;AN000;offset of arg
 40108 00009248 0000                    	dw	0			;AN000;segment of arg
 40109 0000924A 01                      	db	1			;AN000;first subst
 40110                                  	; MSDOS 5.0 COMMAND.COM
 40111                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40112                                  	; 17/06/2023
 40113                                  screen_f_6:
 40114 0000924B F1                      	db	0F1h
 40115                                  					;AN000;long binary to decimal
 40116                                  	; MSDOS 5.0 COMMAND.COM
 40117                                  	;db	28			;AN000;maximum width
 40118                                  	;db	28			;AN000;minimum width
 40119                                  	; 17/06/2023
 40120                                  screen_f_7:
 40121 0000924C 20                      	db	32 ; MSDOS 6.22 COMMAND.COM
 40122 0000924D 20                      	db	32
 40123                                  
 40124 0000924E 20                      	db	blank ; 20h		;AN000;pad character
 40125                                  
 40126                                  ;  "Invalid drive specification",13,10
 40127                                  baddrv_ptr:
 40128 0000924F FD03                    	dw	1021			;AN000;message number
 40129 00009251 00                      	db	no_subst ; 0		;AN000;number of subst
 40130                                  
 40131                                  ;  "Code page %1 not prepared for system",13,10
 40132                                  cp_not_set_ptr:
 40133 00009252 FE03                    	dw	1022			;AN000;message number
 40134 00009254 01                      	db	1			;AN000;number of subst
 40135 00009255 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40136 00009256 00                      	db	0			;AN000;reserved
 40137 00009257 [B1A0]                  	dw	system_cpage		;AN000;offset of arg
 40138 00009259 0000                    	dw	0			;AN000;segment of arg
 40139 0000925B 01                      	db	1			;AN000;first subst
 40140 0000925C A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40141                                  					;AN000;binary to decimal
 40142 0000925D 05                      	db	5			;AN000;maximum width
 40143 0000925E 01                      	db	1			;AN000;minimum width
 40144 0000925F 20                      	db	blank ; 20h		;AN000;pad character
 40145                                  
 40146                                  ;  "Code page %1 not prepared for all devices",13,10
 40147                                  cp_not_all_ptr:
 40148 00009260 FF03                    	dw	1023			;AN000;message number
 40149 00009262 01                      	db	1			;AN000;number of subst
 40150 00009263 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40151 00009264 00                      	db	0			;AN000;reserved
 40152 00009265 [B1A0]                  	dw	system_cpage		;AN000;offset of arg
 40153 00009267 0000                    	dw	0			;AN000;segment of arg
 40154 00009269 01                      	db	1			;AN000;first subst
 40155 0000926A A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40156                                  					;AN000;binary to decimal
 40157 0000926B 05                      	db	5			;AN000;maximum width
 40158 0000926C 01                      	db	1			;AN000;minimum width
 40159 0000926D 20                      	db	blank ; 20h		;AN000;pad character
 40160                                  
 40161                                  ;  "Active code page: %1",13,10
 40162                                  cp_active_ptr:
 40163 0000926E 0004                    	dw	1024			;AN000;message number
 40164 00009270 01                      	db	1			;AN000;number of subst
 40165 00009271 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40166 00009272 00                      	db	0			;AN000;reserved
 40167 00009273 [B1A0]                  	dw	system_cpage		;AN000;offset of arg
 40168 00009275 0000                    	dw	0			;AN000;segment of arg
 40169 00009277 01                      	db	1			;AN000;first subst
 40170 00009278 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40171                                  					;AN000;binary to decimal
 40172 00009279 05                      	db	5			;AN000;maximum width
 40173 0000927A 01                      	db	1			;AN000;minimum width
 40174 0000927B 20                      	db	blank ; 20h		;AN000;pad character
 40175                                  
 40176                                  ;  "NLSFUNC not installed",13,10
 40177                                  NLSFUNC_PTR:
 40178 0000927C 0104                    	dw	1025			;AN000;message number
 40179 0000927E 00                      	db	no_subst ; 0		;AN000;number of subst
 40180                                  
 40181                                  ;  "Invalid code page",13,10
 40182                                  INV_CODE_PAGE:
 40183 0000927F 0204                    	dw	1026			;AN000;message number
 40184 00009281 00                      	db	no_subst ; 0		;AN000;number of subst
 40185                                  
 40186                                  ;  "Current drive is no longer valid"
 40187                                  BADCURDRV:
 40188 00009282 0304                    	dw	1027			;AN000;message number
 40189 00009284 00                      	db	no_subst ; 0		;AN000;number of subst
 40190                                  
 40191                                  ;  "Press any key to continue"
 40192                                  PAUSEMES_PTR:
 40193 00009285 0404                    	dw	1028			;AN000;message number
 40194 00009287 00                      	db	no_subst ; 0		;AN000;number of subst
 40195                                  
 40196                                  ;  "Label not found",13,10
 40197                                  BADLAB_PTR:
 40198 00009288 0504                    	dw	1029			;AN000;message number
 40199 0000928A 00                      	db	no_subst ; 0		;AN000;number of subst
 40200                                  
 40201                                  ;  "Syntax error",13,10
 40202                                  SYNTMES_PTR:
 40203 0000928B 0604                    	dw	1030			;AN000;message number
 40204 0000928D 00                      	db	no_subst ; 0		;AN000;number of subst
 40205                                  
 40206                                  ;  "Invalid date",13,10
 40207                                  BADDAT_PTR:
 40208 0000928E 0704                    	dw	1031			;AN000;message number
 40209 00009290 00                      	db	no_subst ; 0		;AN000;number of subst
 40210                                  
 40211                                  ;  "Current date is %1 %2",13,10
 40212                                  CurDat_Ptr:
 40213 00009291 0804                    	dw	1032			;AN000;message number
 40214 00009293 02                      	db	2			;AN000;number of subst
 40215 00009294 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40216 00009295 00                      	db	0			;AN000;reserved
 40217 00009296 [B3A0]                  	dw	Arg_Buf			;AN000;offset of arg
 40218 00009298 0000                    	dw	0			;AN000;segment of arg
 40219 0000929A 01                      	db	1			;AN000;first subst
 40220 0000929B 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40221 0000929C 03                      	db	3			;AN000;maximum width
 40222 0000929D 03                      	db	3			;AN000;minimum width
 40223 0000929E 20                       	db	blank ; 20h		;AN000;pad character
 40224 0000929F 0B                      	db	parm_block_size 	;AN000;size of sublist
 40225 000092A0 00                      	db	0			;AN000;reserved
 40226                                  CurDat_yr:
 40227 000092A1 0000                    	dw	0			;AN000;year
 40228                                  CurDat_mo_day:
 40229 000092A3 0000                    	dw	0			;AN000;month,day
 40230 000092A5 02                      	db	2			;AN000;second subst
 40231 000092A6 34                      	db	34h ; DATE_MDY_4	;AN000;date
 40232 000092A7 0A                      	db	10			;AN000;maximum width
 40233 000092A8 0A                      	db	10			;AN000;minimum width
 40234 000092A9 20                      	db	blank ; 20h		;AN000;pad character
 40235                                  
 40236                                  ;  "SunMonTueWedThuFriSat"
 40237                                  WeekTab:
 40238 000092AA 0904                    	dw	1033			;AN000;message number
 40239 000092AC 00                      	db	no_subst ; 0		;AN000;number of subst
 40240                                  
 40241                                  ;  "Enter new date (%1):"
 40242                                  
 40243                                  NewDat_Ptr:
 40244 000092AD 0A04                    	dw	1034			;AN000;message number
 40245 000092AF 01                      	db	1			;AN000;number of subst
 40246 000092B0 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40247 000092B1 00                      	db	0			;AN000;reserved
 40248                                  NewDat_Format:
 40249 000092B2 0000                    	dw	0			;AN000;offset of replacement
 40250 000092B4 0000                    	dw	0			;AN000;segment of arg
 40251 000092B6 01                      	db	1			;AN000;first subst
 40252 000092B7 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40253 000092B8 08                      	db	8			;AN000;maximum width
 40254 000092B9 08                      	db	8			;AN000;minimum width
 40255 000092BA 20                      	db	blank ; 20h		;AN000;pad character
 40256                                  
 40257                                  ;  "Invalid time",13,10
 40258                                  
 40259                                  BadTim_Ptr:
 40260 000092BB 0B04                    	dw	1035			;AN000;message number
 40261 000092BD 00                      	db	no_subst ; 0		;AN000;number of subst
 40262                                  
 40263                                  ;  "Current time is %1",13,10
 40264                                  CurTim_Ptr:
 40265 000092BE 0C04                    	dw	1036			;AN000;message number
 40266 000092C0 01                      	db	1			;AN000;number of subst
 40267 000092C1 0B                      	db	parm_block_size 	;AN000;size of sublist
 40268 000092C2 00                      	db	0			;AN000;reserved
 40269                                  CurTim_hr_min:
 40270 000092C3 0000                    	dw	0			;AN000;hours,minutes
 40271                                  CurTim_Sec_hn:
 40272 000092C5 0000                    	dw	0			;AN000;seconds,hundredths
 40273 000092C7 01                      	db	1			;AN000;first subst
 40274 000092C8 A5                      	db	0A5h ; Right_Align+TIME_HHMMSSHH_Cty
 40275                                  					;AC059;time
 40276 000092C9 0C                      	db	12			;AC059;maximum width
 40277 000092CA 0C                      	db	12			;AC059;minimum width
 40278 000092CB 20                      	db	blank ; 20h		;AN000;pad character
 40279                                  
 40280                                  ;  "Enter new time:"
 40281                                  NewTim_Ptr:
 40282 000092CC 0D04                    	dw	1037			;AN000;message number
 40283 000092CE 00                      	db	no_subst ; 0		;AN000;number of subst
 40284                                  
 40285                                  ;  ",    Delete (Y/N)?",13,10
 40286                                  Del_Y_N_Ptr:
 40287 000092CF 0E04                    	dw	1038			;AN000;message number
 40288 000092D1 00                      	db	no_subst ; 0		;AN000;number of subst
 40289                                  
 40290                                  ;  "All files in directory will be deleted!",13,10
 40291                                  ;  "Are you sure (Y/N)?",13,10
 40292                                  SureMes_Ptr:
 40293 000092D2 0F04                    	dw	1039			;AN000;message number
 40294 000092D4 00                      	db	no_subst ; 0		;AN000;number of subst
 40295                                  
 40296                                  ;  "Microsoft DOS Version %1.%2",13,10
 40297                                  VerMes_Ptr:
 40298 000092D5 1004                    	dw	1040			;AN000;message number
 40299 000092D7 02                      	db	2			;AN000;number of subst
 40300 000092D8 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40301 000092D9 00                      	db	0			;AN000;reserved
 40302 000092DA [44A1]                  	dw	Major_Ver_Num		;AN000;offset of arg
 40303 000092DC 0000                    	dw	0			;AN000;segment of arg
 40304 000092DE 01                      	db	1			;AN000;first subst
 40305 000092DF A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40306                                  					;AN000;binary to decimal
 40307 000092E0 01                      	db	1			;AN000;maximum width
 40308 000092E1 01                      	db	1			;AN000;minimum width
 40309 000092E2 20                      	db	blank ; 20h		;AN000;pad character
 40310 000092E3 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40311 000092E4 00                      	db	0			;AN000;reserved
 40312 000092E5 [46A1]                  	dw	Minor_Ver_Num	;AN000;offset of arg
 40313 000092E7 0000                    	dw	0			;AN000;segment of arg
 40314 000092E9 02                      	db	2			;AN000;second subst
 40315 000092EA A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 40316                                  					;AN000;binary to decimal
 40317 000092EB 02                      	db	2			;AN000;maximum width
 40318 000092EC 02                      	db	2			;AN000;minimum width
 40319 000092ED 30                      	db	'0' ; 30h		;AN000;pad character
 40320                                  
 40321                                  ;  "Volume in drive %1 has no label",13,10
 40322                                  VolMes_Ptr_2:
 40323 000092EE 1104                    	dw	1041			;AN000;message number
 40324 000092F0 01                      	db	1			;AN000;number of subst
 40325 000092F1 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 40326 000092F2 00                      	db	0			;AN000;reserved
 40327 000092F3 [4AA1]                  	dw	vol_drv			;AN000;offset of drive
 40328 000092F5 0000                    	dw	0			;AN000;segment of arg
 40329 000092F7 01                      	db	1			;AN000;first subst
 40330 000092F8 00                      	db	0 ; Char_field_Char 	;AN000;character
 40331 000092F9 80                      	db	128			;AN000;maximum width
 40332 000092FA 01                      	db	1			;AN000;minimum width
 40333 000092FB 20                      	db	blank ; 20h		;AN000;pad character
 40334                                  
 40335                                  ;  "Volume in drive %1 is %2",13,10
 40336                                  VolMes_Ptr:
 40337 000092FC 1204                    	dw	1042			;AN000;message number
 40338 000092FE 02                      	db	2			;AN000;number of subst
 40339 000092FF 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40340 00009300 00                      	db	0			;AN000;reserved
 40341 00009301 [4AA1]                  	dw	vol_drv			;AN000;offset of drive
 40342 00009303 0000                    	dw	0			;AN000;segment of arg
 40343 00009305 01                      	db	1			;AN000;first subst
 40344 00009306 00                      	db	00000000b		;AN000;character
 40345 00009307 80                      	db	128			;AN000;maximum width
 40346 00009308 01                      	db	1			;AN000;minimum width
 40347 00009309 20                      	db	blank ; 20h		;AN000;pad character
 40348 0000930A 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40349 0000930B 00                      	db	0			;AN000;reserved
 40350 0000930C [819F]                  	dw	CHARBUF			;AN000;offset of string
 40351 0000930E 0000                    	dw	0			;AN000;segment of arg
 40352 00009310 02                      	db	2			;AN000;second subst
 40353 00009311 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40354 00009312 80                      	db	128			;AN000;maximum width
 40355 00009313 01                      	db	1			;AN000;minimum width
 40356 00009314 20                      	db	blank ; 20h		;AN000;pad character
 40357                                  
 40358                                  ;  "Volume Serial Number is %1-%2",13,10
 40359                                  VolSerMes_Ptr:
 40360 00009315 1304                    	dw	1043			;AN000;message number
 40361 00009317 02                      	db	2			;AN000;number of subst
 40362 00009318 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 40363 00009319 00                      	db	0			;AN000;reserved
 40364 0000931A [B4A2]                  	dw	vol_serial+2		;AN000;offset of serial
 40365 0000931C 0000                    	dw	0			;AN000;segment of arg
 40366 0000931E 01                      	db	1			;AN000;first subst
 40367 0000931F A3                      	db	0A3h ; Right_Align+Bin_Hex_Word 
 40368                                  					;AN000;binary to hex
 40369 00009320 04                      	db	4			;AN000;maximum width
 40370 00009321 04                      	db	4			;AN000;minimum width
 40371 00009322 30                      	db	'0' ; 30h		;AN000;pad character
 40372 00009323 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40373 00009324 00                      	db	0			;AN000;reserved
 40374 00009325 [B2A2]                  	dw	vol_serial		;AN000;offset of serial
 40375 00009327 0000                    	dw	0			;AN000;segment of arg
 40376 00009329 02                      	db	2			;AN000;second subst
 40377 0000932A A3                      	db	0A3h ; Right_Align+Bin_Hex_Word
 40378                                  					;AN000;binary to hex
 40379 0000932B 04                      	db	4			;AN000;maximum width
 40380 0000932C 04                      	db	4			;AN000;minimum width
 40381 0000932D 30                      	db	'0' ; 30h		;AN000;pad character
 40382                                  
 40383                                  ;  "Invalid directory",13,10
 40384                                  badcd_ptr:
 40385 0000932E 1404                    	dw	1044			;AN000;message number
 40386 00009330 00                      	db	no_subst ; 0		;AN000;number of subst
 40387                                  
 40388                                  ;  "Unable to create directory",13,10
 40389                                  badmkd_ptr:
 40390 00009331 1504                    	dw	1045			;AN000;message number
 40391 00009333 00                      	db	no_subst ; 0		;AN000;number of subst
 40392                                  
 40393                                  ;  "Invalid path, not directory,",13,10
 40394                                  ;  "or directory not empty",13,10
 40395                                  badrmd_ptr:
 40396 00009334 1604                    	dw	1046			;AN000;message number
 40397 00009336 00                      	db	no_subst ; 0		;AN000;number of subst
 40398                                  
 40399                                  ;  "Must specify ON or OFF",13,10
 40400                                  bad_on_off_ptr:
 40401 00009337 1704                    	dw	1047			;AN000;message number
 40402 00009339 00                      	db	no_subst ; 0		;AN000;number of subst
 40403                                  
 40404                                  ;  "Directory of %1",13,10
 40405                                  dirhead_ptr:
 40406 0000933A 1804                    	dw	1048			;AN000;message number
 40407 0000933C 01                      	db	1			;AN000;number of subst
 40408 0000933D 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40409 0000933E 00                      	db	0			;AN000;reserved
 40410 0000933F [50A0]                  	dw	BWDBUF			;AN000;offset of arg
 40411 00009341 0000                    	dw	0			;AN000;segment of arg
 40412 00009343 01                      	db	1			;AN000;first subst
 40413 00009344 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40414 00009345 80                      	db	128			;AN000;maximum width
 40415 00009346 00                      	db	0			;AN000;minimum width
 40416 00009347 20                      	db	blank ; 20h		;AN000;pad character
 40417                                  
 40418                                  ;  "No Path",13,10
 40419                                  NULLPATH_PTR:
 40420 00009348 1904                    	dw	1049			;AN000;message number
 40421 0000934A 00                      	db	no_subst ; 0		;AN000;number of subst
 40422                                  
 40423                                  ;  "Invalid drive in search path",13,10
 40424                                  BADPMES_PTR:
 40425 0000934B 1A04                    	dw	1050			;AN000;message number
 40426 0000934D 00                      	db	no_subst ; 0		;AN000;number of subst
 40427                                  
 40428                                  ;  "Invalid device",13,10
 40429                                  BADDEV_PTR:
 40430 0000934E 1B04                    	dw	1051			;AN000;message number
 40431 00009350 00                      	db	no_subst ; 0		;AN000;number of subst
 40432                                  
 40433                                  ;  "FOR cannot be nested",13,10
 40434                                  FORNESTMES_PTR:
 40435 00009351 1C04                    	dw	1052			;AN000;message number
 40436 00009353 00                      	db	no_subst ; 0		;AN000;number of subst
 40437                                  
 40438                                  ;  "Intermediate file error during pipe",13,10
 40439                                  PIPEEMES_PTR:
 40440 00009354 1D04                    	dw	1053			;AN000;message number
 40441 00009356 00                      	db	no_subst ; 0		;AN000;number of subst
 40442                                  
 40443                                  ;  "Cannot do binary reads from a device",13,10
 40444                                  INBDEV_PTR:
 40445 00009357 1E04                    	dw	1054			;AN000;message number
 40446 00009359 00                      	db	no_subst ; 0		;AN000;number of subst
 40447                                  
 40448                                  ;  "BREAK is %1",13,10
 40449                                  CtrlcMes_Ptr:
 40450 0000935A 1F04                    	dw	1055			;AN000;message number
 40451 0000935C 01                      	db	1			;AN000;number of subst
 40452 0000935D 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40453 0000935E 00                      	db	0			;AN000;reserved
 40454 0000935F 0000                    	dw	0			;AN000;offset of on/off (new)
 40455 00009361 0000                    	dw	0			;AN000;segment of arg
 40456 00009363 01                      	db	1			;AN000;first subst
 40457 00009364 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40458 00009365 80                      	db	128			;AN000;maximum width
 40459 00009366 01                      	db	1			;AN000;minimum width
 40460 00009367 20                      	db	blank ; 20h		;AN000;pad character
 40461                                  
 40462                                  ;  "VERIFY is %1",13,10
 40463                                  VeriMes_Ptr:
 40464 00009368 2004                    	dw	1056			;AN000;message number
 40465 0000936A 01                      	db	1			;AN000;number of subst
 40466 0000936B 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40467 0000936C 00                      	db	0			;AN000;reserved
 40468 0000936D 0000                    	dw	0			;AN000;offset of on/off (new)
 40469 0000936F 0000                    	dw	0			;AN000;segment of arg
 40470 00009371 01                      	db	1			;AN000;first subst
 40471 00009372 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40472 00009373 80                      	db	128			;AN000;maximum width
 40473 00009374 01                      	db	1			;AN000;minimum width
 40474 00009375 20                      	db	blank ; 20h		;AN000;pad character
 40475                                  
 40476                                  ;  "ECHO is %1",13,10
 40477                                  EchoMes_Ptr:
 40478 00009376 2104                    	dw	1057			;AN000;message number
 40479 00009378 01                      	db	1			;AN000;number of subst
 40480 00009379 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40481 0000937A 00                      	db	0			;AN000;reserved
 40482 0000937B 0000                    	dw	0			;AN000;offset of on/off (new)
 40483 0000937D 0000                    	dw	0			;AN000;segment of arg
 40484 0000937F 01                      	db	1			;AN000;first subst
 40485 00009380 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40486 00009381 80                      	db	128			;AN000;maximum width
 40487 00009382 01                      	db	1			;AN000;minimum width
 40488 00009383 20                      	db	blank ; 20h		;AN000;pad character
 40489                                  
 40490                                  ;  "off"
 40491                                  OFFMES_PTR:
 40492 00009384 2304                    	dw	1059			;AN000;message number
 40493 00009386 00                      	db	no_subst		;AN000;number of subst
 40494                                  
 40495                                  ;  "on"
 40496                                  ONMES_PTR:
 40497 00009387 2404                    	dw	1060			;AN000;message number
 40498 00009389 00                      	db	no_subst ; 0		;AN000;number of subst
 40499                                  
 40500                                  ;  "Error writing to device",13,10
 40501                                  DEVWMES_PTR:
 40502 0000938A 2504                    	dw	1061			;AN000;message number
 40503 0000938C 00                      	db	no_subst ; 0		;AN000;number of subst
 40504                                  
 40505                                  ;  "Invalid path",13,10
 40506                                  INVAL_PATH_PTR:
 40507 0000938D 2604                    	dw	1062			;AN000;message number
 40508 0000938F 00                      	db	no_subst ; 0		;AN000;number of subst
 40509                                  
 40510                                  ;  unformatted string output
 40511                                  arg_buf_ptr:
 40512 00009390 2704                    	dw	1063			;AN000;message number
 40513 00009392 01                      	db	1			;AN000;number of subst
 40514 00009393 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40515 00009394 00                      	db	0			;AN000;reserved
 40516 00009395 [B3A0]                  	dw	Arg_Buf 		;AN000;offset of arg
 40517 00009397 0000                    	dw	0			;AN000;segment of arg
 40518 00009399 01                      	db	1			;AN000;first subst
 40519 0000939A 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40520 0000939B 80                      	db	128			;AN000;maximum width
 40521 0000939C 00                      	db	0			;AN000;minimum width
 40522 0000939D 20                      	db	blank ; 20h		;AN000;pad character
 40523                                  
 40524                                  ;  file name output
 40525                                  file_name_ptr:
 40526 0000939E 2804                    	dw	1064			;AN000;message number
 40527 000093A0 01                      	db	1			;AN000;number of subst
 40528 000093A1 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40529 000093A2 00                      	db	0			;AN000;reserved
 40530 000093A3 [B8A1]                  	dw	SrcBuf			;AN000;offset of arg
 40531 000093A5 0000                    	dw	0			;AN000;segment of arg
 40532 000093A7 01                      	db	1			;AN000;first subst
 40533 000093A8 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40534 000093A9 80                      	db	128			;AN000;maximum width
 40535 000093AA 00                      	db	0			;AN000;minimum width
 40536 000093AB 20                      	db	blank ; 20h		;AN000;pad character
 40537                                  
 40538                                  ;  file size output for dir
 40539                                  disp_file_size_ptr:
 40540 000093AC 2904                    	dw	1065			;AN000;message number
 40541 000093AE 01                      	db	1			;AN000;number of subst
 40542 000093AF 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 40543 000093B0 00                      	db	0			;AN000;reserved
 40544 000093B1 [33A1]                  	dw	File_Size_Low		;AN000;offset of arg
 40545 000093B3 0000                    	dw	0			;AN000;segment of arg
 40546 000093B5 01                      	db	1			;AN000;first subst
 40547                                  	; MSDOS 5.0 COMMAND.COM
 40548                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40549                                  	; 17/06/2023
 40550                                  screen_f_1:
 40551 000093B6 F1                      	db	0F1h ; MSDOS 6.22 COMMAND.COM
 40552                                  					;AN000;long binary to decimal
 40553                                  	; MSDOS 5.0 COMMAND.COM
 40554                                  	;db	10			;AN000;maximum width
 40555                                  	;db	10			;AN000;minimum width
 40556                                  screen_f_2:
 40557 000093B7 0E                      	db	14 ; MSDOS 6.22 COMMAND.COM		
 40558 000093B8 0E                      	db	14
 40559                                  	
 40560 000093B9 20                      	db	blank ; 20h		;AN000;pad character
 40561                                  
 40562                                  ;  unformatted string output
 40563                                  ; %s
 40564                                  string_buf_ptr:
 40565 000093BA 2A04                    	dw	1066			;AN000;message number
 40566 000093BC 01                      	db	1			;AN000;number of subst
 40567 000093BD 0B                      	db	parm_block_size 	;AN000;size of sublist
 40568 000093BE 00                      	db	0			;AN000;reserved
 40569 000093BF [37A1]                  	dw	string_ptr_2		;AN000;offset of arg
 40570 000093C1 0000                    	dw	0			;AN000;segment of arg
 40571 000093C3 01                      	db	1			;AN000;first subst
 40572 000093C4 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40573 000093C5 80                      	db	128			;AN000;maximum width
 40574 000093C6 00                      	db	0			;AN000;minimum width
 40575 000093C7 20                      	db	blank ; 20h		;AN000;pad character
 40576 000093C8 00                      	db	0			;AN000;
 40577                                  
 40578                                  ;  tab character
 40579                                  tab_ptr:
 40580 000093C9 2B04                    	dw	1067			;AN000;message number
 40581 000093CB 00                      	db	no_subst ; 0		;AN000;number of subst
 40582                                  
 40583                                  ;  " <DIR>   "
 40584                                  dmes_ptr:
 40585 000093CC 2C04                    	dw	1068			;AN000;message number
 40586 000093CE 00                      	db	no_subst ; 0		;AN000;number of subst
 40587                                  
 40588                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40589                                  space_4_ptr :
 40590 000093CF 5104                    	dw	1105 
 40591 000093D1 00                      	db	no_subst ; 0
 40592                                  
 40593                                  ;  destructive back space
 40594                                  dback_ptr:
 40595 000093D2 2D04                    	dw	1069			;AN000;message number
 40596 000093D4 00                      	db	no_subst ; 0		;AN000;number of subst
 40597                                  
 40598                                  ;  carriage return / line feed
 40599                                  acrlf_ptr:
 40600 000093D5 2E04                    	dw	1070			;AN000;message number
 40601 000093D7 00                      	db	no_subst ; 0		;AN000;number of subst
 40602                                  
 40603                                  ;  "mm-dd-yy"
 40604                                  usadat_ptr:
 40605 000093D8 3004                    	dw	1072			;AN000;message number
 40606 000093DA 00                      	db	no_subst ; 0		;AN000;number of subst
 40607                                  
 40608                                  ;  "dd-mm-yy"
 40609                                  eurdat_ptr:
 40610 000093DB 3104                    	dw	1073			;AN000;message number
 40611 000093DD 00                      	db	no_subst ; 0		;AN000;number of subst
 40612                                  
 40613                                  ;  "yy-mm-dd"
 40614                                  japdat_ptr:
 40615 000093DE 3204                    	dw	1074			;AN000;message number
 40616 000093E0 00                      	db	no_subst ; 0		;AN000;number of subst
 40617                                  
 40618                                  ;  date string for prompt
 40619                                  promptdat_ptr:
 40620 000093E1 3304                    	dw	1075			;AN000;message number
 40621 000093E3 02                      	db	2			;AN000;number of subst
 40622 000093E4 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40623 000093E5 00                      	db	0			;AN000;reserved
 40624 000093E6 [B3A0]                  	dw	Arg_Buf			;AN000;offset of arg
 40625 000093E8 0000                    	dw	0			;AN000;segment of arg
 40626 000093EA 01                      	db	1			;AN000;first subst
 40627 000093EB 10                      	db	10h ; Char_field_ASCIIZ ;AN000;character string
 40628 000093EC 03                      	db	3			;AN000;maximum width
 40629 000093ED 03                      	db	3			;AN000;minimum width
 40630 000093EE 20                       	db	blank ; 20h		;AN000;pad character
 40631 000093EF 0B                      	db	parm_block_size  ; 11	;AN000;size of sublist
 40632 000093F0 00                      	db	0			;AN000;reserved
 40633                                  promptDat_yr:
 40634 000093F1 0000                    	dw	0			;AN000;year
 40635                                  promptDat_moday:
 40636 000093F3 0000                    	dw	0			;AN000;month,day
 40637 000093F5 02                      	db	2			;AN000;second subst
 40638 000093F6 34                       	db	34h ; DATE_MDY_4	;AN000;date
 40639 000093F7 0A                      	db	10			;AN000;maximum width
 40640 000093F8 08                      	db	8			;AN000;minimum width
 40641 000093F9 20                      	db	blank ; 20h		;AN000;pad character
 40642                                  
 40643                                  ;  Time for prompt
 40644                                  promtim_ptr:
 40645 000093FA 3404                    	dw	1076			;AN000;message number
 40646 000093FC 01                      	db	1			;AN000;number of subst
 40647 000093FD 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40648 000093FE 00                      	db	0			;AN000;reserved
 40649                                  PromTim_hr_min:
 40650 000093FF 0000                    	dw	0			;AN000;hours,minutes
 40651                                  PromTim_Sec_hn:
 40652 00009401 0000                    	dw	0			;AN000;seconds,hundredths
 40653 00009403 01                      	db	1			;AN000;first subst
 40654 00009404 A6                      	db	0A6h ; Right_Align+TIME_HHMMSSHH_24
 40655                                  					;AC013;time
 40656 00009405 0B                      	db	11			;AN000;maximum width
 40657 00009406 0B                      	db	11			;AC013;minimum width
 40658 00009407 20                      	db	blank ; 20h		;AN000;pad character
 40659                                  
 40660                                  ;  Date and time for DIR
 40661                                  dirdattim_ptr:
 40662 00009408 3504                    	dw	1077			;AN000;message number
 40663 0000940A 02                      	db	2			;AN000;number of subst
 40664 0000940B 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40665 0000940C 00                      	db	0			;AN000;reserved
 40666                                  DirDat_Yr:
 40667 0000940D 0000                    	dw	0			;AN000;year
 40668                                  DirDat_Mo_Day:
 40669 0000940F 0000                    	dw	0			;AN000;month,day
 40670 00009411 01                      	db	1			;AN000;first subst
 40671 00009412 A4                      	db	0A4h ; Right_Align+DATE_MDY_2
 40672                                  					;AN000;date
 40673 00009413 0A                      	db	10			;AN000;maximum width
 40674 00009414 08                      	db	8			;AN000;minimum width
 40675 00009415 20                      	db	blank ; 20h		;AN000;pad character
 40676 00009416 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40677 00009417 00                      	db	0			;AN000;reserved
 40678                                  DirTim_Hr_Min:
 40679 00009418 0000                    	dw	0			;AN000;hours,minutes
 40680                                  DirTim_Sec_hn:
 40681 0000941A 0000                    	dw	0			;AN000;seconds,hundredths
 40682 0000941C 02                      	db	2			;AN000;second subst
 40683 0000941D 85                      	db	85h ; Right_align+TIME_HHMM_Cty
 40684                                  					;AN000;time
 40685 0000941E 06                      	db	6			;AN000;maximum width
 40686 0000941F 06                      	db	6			;AN000;minimum width
 40687 00009420 20                      	db	blank ; 20h		;AN000;pad character
 40688                                  
 40689                                  ;  "Directory already exists"
 40690                                  MD_EXISTS_PTR:
 40691 00009421 3604                    	dw	1078			;AN000;message number
 40692 00009423 00                      	db	no_subst		;AN000;number of subst
 40693                                  
 40694                                  ;  "%1 bytes",13,10
 40695                                  bytes_ptr:
 40696 00009424 3704                    	dw	1079			; message number
 40697 00009426 01                      	db	1			; number of subst
 40698 00009427 0B                      	db	parm_block_size ; 11	; size of sublist
 40699 00009428 00                      	db	0			; reserved
 40700 00009429 [459E]                  	dw	FileSiz			; offset of arg
 40701 0000942B 0000                    	dw	0			; segment of arg
 40702 0000942D 01                      	db	1			; first subst
 40703                                  	; MSDOS 5.0 COMMAND.COM
 40704                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 40705                                  	; 17/06/2023
 40706                                  screen_f_4:
 40707 0000942E F1                      	db	0F1h ; MSDOS 6.22 COMMAND.COM
 40708                                  					; long binary to decimal
 40709                                  	; MSDOS 5.0 COMMAND.COM
 40710                                  	;db	10			; maximum width
 40711                                  	;db	10			; minimum width
 40712                                  screen_f_5:
 40713 0000942F 0E                      	db	14 ; MSDOS 6.22 COMMAND.COM
 40714 00009430 0E                      	db	14	
 40715                                  
 40716 00009431 20                      	db	blank ; 20h		; pad character
 40717                                  
 40718                                  ;  "Total:",13,10
 40719                                  total_ptr:
 40720 00009432 3804                    	dw	1080			; message number
 40721 00009434 00                      	db	no_subst ; 0		; number of subst
 40722                                  
 40723                                  ;  "Error parsing environment variable:",13,10
 40724                                  errparsenv_ptr:
 40725 00009435 3904                    	dw	1081			; message number
 40726 00009437 00                      	db	no_subst ; 0		; number of subst
 40727                                  
 40728                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40729                                  	; (MSDOS 6.22 COMMAN.COM - TRANGROUP:996Ah)
 40730                                  cox_Y_quest_ptr:
 40731 00009438 3A04                    	dw	1082
 40732 0000943A 00                      	db	no_subst ; 0
 40733                                  cox_Y_answ_ptr:
 40734 0000943B 3B04                    	dw	1083
 40735 0000943D 00                      	db	no_subst ; 0
 40736                                  
 40737                                  ;  "(continuing %1)",13,10
 40738                                  dircont_ptr:
 40739 0000943E 3C04                    	dw	1084			;AN000;message number
 40740 00009440 01                      	db	1			;AN000;number of subst
 40741 00009441 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 40742 00009442 00                      	db	0			;AN000;reserved
 40743 00009443 [50A0]                  	dw	BWDBUF			;AN000;offset of arg
 40744 00009445 0000                    	dw	0			;AN000;segment of arg
 40745 00009447 01                      	db	1			;AN000;first subst
 40746 00009448 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 40747 00009449 80                      	db	128			;AN000;maximum width
 40748 0000944A 00                      	db	0			;AN000;minimum width
 40749 0000944B 20                      	db	blank ; 20h		;AN000;pad character
 40750                                  
 40751                                  ;  "Revision %1",CR,LF
 40752                                  dosrev_ptr:
 40753 0000944C 4204                    	dw	1090
 40754 0000944E 01                      	db	1			; one substitution
 40755 0000944F 0B                      	db	parm_block_size ; 11
 40756 00009450 00                      	db	0
 40757 00009451 [48A1]                  	dw	One_Char_Val		; ptr to char
 40758 00009453 0000                    	dw	0			; segment addr?
 40759 00009455 01                      	db	1			; 1st substitution
 40760 00009456 00                      	db	0 ; CHAR_FIELD_CHAR	; character
 40761 00009457 01                      	db	1			; max width
 40762 00009458 01                      	db	1			; min width
 40763 00009459 20                      	db	blank ; 20h		; pad char
 40764                                  
 40765                                  ;  "DOS is in ROM"
 40766                                  DosRom_Ptr:
 40767 0000945A 4304                    	dw	1091
 40768 0000945C 00                      	db	no_subst ; 0		
 40769                                  
 40770                                  ;  "DOS is in HMA"
 40771                                  DosHma_Ptr:
 40772 0000945D 4404                    	dw	1092
 40773 0000945F 00                      	db	no_subst ; 0		
 40774                                  
 40775                                  ;  "DOS is in low memory"
 40776                                  DosLow_Ptr:
 40777 00009460 4504                    	dw	1093
 40778 00009462 00                      	db	no_subst ; 0		
 40779                                  
 40780                                  ;  "Cannot Loadhigh batch file" ;M016
 40781                                  NoExecBat_Ptr:
 40782 00009463 4604                    	dw	1094			; M016
 40783 00009465 00                      	db	no_subst ; 0		; M016
 40784                                  
 40785                                  ;  "LoadHigh: Invalid filename" ; M016
 40786                                  LhInvFil_Ptr:
 40787 00009466 4704                    	dw	1095			; M016
 40788 00009468 00                      	db	no_subst ; 0		; M016
 40789                                  
 40790                                  ;  "Could not open specified country information file" ; M045
 40791                                  NoCntry_Ptr:
 40792 00009469 4804                    	dw	1096			; M045
 40793 0000946B 00                      	db	no_subst ; 0		; M045
 40794                                  
 40795                                  ; 15/04/2023
 40796                                  ; MSDOS 6.0 COMMAND.COM only !
 40797                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40798                                  ;%if 0
 40799                                  
 40800                                  ;* The next four errors emulate those reported by the normal parse
 40801                                  ;  mechanism, with a little more accurate wording; that parser has been
 40802                                  ;  replaced with a custom routine (ParseVar) for LoadHigh and DeviceHigh.
 40803                                  ;  These errors aren't normally generated by LoadHigh except by the normal
 40804                                  ;  parser, so they've been added here.
 40805                                  
 40806                                  ;  "LoadHigh: Invalid argument"
 40807                                  LhInvArg_Ptr:
 40808 0000946C 4904                    	dw	1097
 40809 0000946E 00                      	db	no_subst ; 0		
 40810                                  
 40811                                  ;  "Required parameter missing"
 40812                                  ReqParmMiss:
 40813 0000946F 4A04                    	dw	1098
 40814 00009471 00                      	db	no_subst ; 0		
 40815                                  
 40816                                  ;  "Unrecognized switch"
 40817                                  LhInvSwt_Ptr:
 40818 00009472 4B04                    	dw	1099
 40819 00009474 00                      	db	no_subst ; 0		
 40820                                  
 40821                                  ;  "A bad UMB number has been specified"
 40822                                  LhBadUMB_Ptr:
 40823 00009475 4C04                    	dw	1100
 40824 00009477 00                      	db	no_subst ; 0
 40825                                  ;%endif	
 40826                                  
 40827                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 40828                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99AAh
 40829                                  
 40830                                  DirCompRatio_Ptr:
 40831 00009478 4D04                    	dw	1101			;message number
 40832 0000947A 02                      	db	2			;number of subst
 40833 0000947B 0B                      	db	parm_block_size ; 11	;size of sublist
 40834 0000947C 00                      	db	0			;reserved
 40835 0000947D [3EA1]                  	dw	Dir_CRatio_1		;offset of arg
 40836 0000947F 0000                    	dw	0			;segment of arg
 40837 00009481 01                      	db	1			;first subst
 40838 00009482 91                      	db	91h			;format
 40839 00009483 02                      	db	2			;maximum width
 40840 00009484 02                      	db	2			;minimum width
 40841 00009485 20                      	db	blank ; 20h		;pad character
 40842 00009486 0B                      	db	parm_block_size  ; 11	;size of sublist
 40843 00009487 00                      	db	0			; reserved
 40844 00009488 [3FA1]                  	dw	Dir_CRatio_2		;offset of arg
 40845 0000948A 0000                    	dw	0			;segment of arg
 40846 0000948C 02                      	db	2			;second subst
 40847 0000948D 11                      	db	11h			;format
 40848 0000948E 01                      	db	1			;maximum width
 40849 0000948F 01                      	db	1			;minimum width
 40850 00009490 20                      	db	blank ; 20h		;pad character
 40851                                  
 40852                                  AveCompRatio_Ptr:
 40853 00009491 4E04                    	dw	1102			;message number
 40854 00009493 02                      	db	2			;number of subst
 40855 00009494 0B                      	db	parm_block_size ; 11	;size of sublist
 40856 00009495 00                      	db	0			;reserved
 40857 00009496 [3EA1]                  	dw	Dir_CRatio_1		;offset of arg
 40858 00009498 0000                    	dw	0			;segment of arg
 40859 0000949A 01                      	db	1			;first subst
 40860 0000949B 91                      	db	91h			;format
 40861 0000949C 02                      	db	2			;maximum width
 40862 0000949D 02                      	db	2			;minimum width
 40863 0000949E 20                      	db	blank ; 20h		;pad character
 40864 0000949F 0B                      	db	parm_block_size  ; 11	;size of sublist
 40865 000094A0 00                      	db	0			; reserved
 40866 000094A1 [3FA1]                  	dw	Dir_CRatio_2		;offset of arg
 40867 000094A3 0000                    	dw	0			;segment of arg
 40868 000094A5 02                      	db	2			;second subst
 40869 000094A6 11                      	db	11h			;format
 40870 000094A7 01                      	db	1			;maximum width
 40871 000094A8 01                      	db	1			;minimum width
 40872 000094A9 20                      	db	blank ; 20h		;pad character
 40873                                  
 40874                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40875                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8483h
 40876                                  
 40877                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 40878                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99DCh
 40879                                  
 40880                                  ; ---------------------------------------------------------------------------
 40881                                  
 40882                                  PATH_TEXT:
 40883 000094AA 504154483D              	db	"PATH="
 40884                                  PROMPT_TEXT:
 40885 000094AF 50524F4D50543D          	db	"PROMPT="
 40886                                  COMSPECSTR:
 40887 000094B6 434F4D535045433D        	db	"COMSPEC="
 40888                                  DirEnvVar:
 40889 000094BE 444952434D443D          	db	"DIRCMD="		; DIR's environment variable
 40890                                  
 40891                                  ;============================================================================
 40892                                  ; TDATA.ASM, MSDOS 6.0, 1991
 40893                                  ;============================================================================
 40894                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40895                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 40896                                  
 40897                                  	; 15/04/2023
 40898 000094C5 00                      	db	0
 40899                                  align 2
 40900                                  
 40901                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:849Eh
 40902                                  ; ---------------------------------------------------------------------------
 40903                                  	; 18/06/2023
 40904                                  	;db	0
 40905                                  
 40906                                  ; Lists of help message numbers for internal commands and /?
 40907                                  
 40908                                  	; 18/06/2023
 40909                                  ;;NoHelpMsgs:
 40910                                  	;dw	1200,0		;M014
 40911                                  
 40912                                  	; 18/06/2023
 40913                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99F7h
 40914                                  
 40915                                  BreakHelpMsgs:
 40916 000094C6 14050000                	dw	1300,0
 40917                                  ChcpHelpMsgs:
 40918 000094CA 280529050000            	dw	1320,1321,0
 40919                                  CdHelpMsgs:
 40920 000094D0 3C053D053E050000        	dw	1340,1341,1342,0
 40921                                  ClsHelpMsgs:
 40922 000094D8 50050000                	dw	1360,0
 40923                                  CopyHelpMsgs:
 40924                                  	;dw	1400,1401,1402,1403,1404,0
 40925                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 40926 000094DC 780579057A057B057C-     	dw	1400,1401,1402,1403,1404,1405,1406,1407,0
 40926 000094E5 057D057E057F050000 
 40927                                  CttyHelpMsgs:
 40928 000094EE 8C050000                	dw	1420,0
 40929                                  DateHelpMsgs:
 40930 000094F2 A005A1050000            	dw	1440,1441,0
 40931                                  DelHelpMsgs:
 40932 000094F8 B405B505B6050000        	dw	1460,1461,1462,0
 40933                                  DirHelpMsgs:
 40934 00009500 C805C905CA05CB05CC-     	dw	1480,1481,1482,1483,1484,1485,1486,1487,1488
 40934 00009509 05CD05CE05CF05D005 
 40935                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 40936                                  	; MSDOS 6.0 COMMAND.COM
 40937 00009512 D105D205D305D405        	dw	1489,1490,1491,1492
 40938 0000951A 0000                    	dw	0
 40939                                  ExitHelpMsgs:
 40940 0000951C DC050000                	dw	1500,0
 40941                                  MdHelpMsgs:
 40942 00009520 F0050000                	dw	1520,0
 40943                                  PathHelpMsgs:
 40944 00009524 0406050606060000        	dw	1540,1541,1542,0
 40945                                  PromptHelpMsgs:
 40946 0000952C 180619061A061B061C-     	dw	1560,1561,1562,1563,1564,1565,1566,1567,1568,0
 40946 00009535 061D061E061F062006-
 40946 0000953E 0000               
 40947                                  RdHelpMsgs:
 40948 00009540 2C060000                	dw	1580,0
 40949                                  RenHelpMsgs:
 40950 00009544 4006410642060000        	dw	1600,1601,1602,0
 40951                                  SetHelpMsgs:
 40952 0000954C 5406550656060000        	dw	1620,1621,1622,0
 40953                                  TimeHelpMsgs:
 40954 00009554 680669060000            	dw	1640,1641,0
 40955                                  TypeHelpMsgs:
 40956 0000955A 7C060000                	dw	1660,0
 40957                                  VerHelpMsgs:
 40958 0000955E 90060000                	dw	1680,0
 40959                                  VerifyHelpMsgs:
 40960 00009562 A4060000                	dw	1700,0
 40961                                  VolHelpMsgs:
 40962 00009566 B8060000                	dw	1720,0
 40963                                  CallHelpMsgs:
 40964 0000956A CC06CD060000            	dw	1740,1741,0	;M014
 40965                                  RemHelpMsgs:
 40966 00009570 E0060000                	dw	1760,0		;M014
 40967                                  PauseHelpMsgs:
 40968 00009574 F4060000                	dw	1780,0		;M014
 40969                                  EchoHelpMsgs:
 40970 00009578 080709070000            	dw	1800,1801,0	;M014
 40971                                  GotoHelpMsgs:
 40972 0000957E 1C071D070000            	dw	1820,1821,0	;M014
 40973                                  ShiftHelpMsgs:
 40974 00009584 30070000                	dw	1840,0		;M014
 40975                                  IfHelpMsgs:
 40976 00009588 440745074607470748-     	dw	1860,1861,1862,1863,1864,1865,1866,0	;M014
 40976 00009591 0749074A070000     
 40977                                  ForHelpMsgs:
 40978 00009598 580759075A075B0700-     	dw	1880,1881,1882,1883,0 ;M014
 40978 000095A1 00                 
 40979                                  TruenameHelpMsgs:
 40980 000095A2 6C070000                	 dw	1900,0		;M014
 40981                                  LoadhighHelpMsgs:
 40982 000095A6 800781078207            	dw	1920,1921,1922
 40983                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 40984                                  	; MSDOS 6.0 COMMAND.COM
 40985 000095AC 830784078507860787-     	dw	1923,1924,1925,1926,1927 ;M014
 40985 000095B5 07                 
 40986 000095B6 0000                    	dw	0
 40987                                  
 40988                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8578h
 40989                                  CLSSTRING:
 40990 000095B8 041B5B324A              	db	4,1Bh,"[2J"		; ANSI Clear screen
 40991                                  
 40992                                  PROMPT_TABLE:
 40993 000095BD 42                      	db	"B"
 40994 000095BE [4D23]                  	dw	Print_B
 40995 000095C0 44                      	db	"D"
 40996 000095C1 [1A3C]                  	dw	PRINT_DATE
 40997 000095C3 45                      	db	"E"
 40998 000095C4 [4123]                  	dw	PRINT_ESC
 40999 000095C6 47                      	db	"G"
 41000 000095C7 [4523]                  	dw	PRINT_G
 41001 000095C9 48                      	db	"H"
 41002 000095CA [3723]                  	dw	PRINT_BACK
 41003 000095CC 4C                      	db	"L"
 41004 000095CD [4923]                  	dw	PRINT_L
 41005 000095CF 4E                      	db	"N"
 41006 000095D0 [5E23]                  	dw	PRINT_DRIVE
 41007 000095D2 50                      	db	"P"
 41008 000095D3 [6623]                  	dw	build_dir_for_prompt
 41009 000095D5 51                      	db	"Q"
 41010 000095D6 [3D23]                  	dw	PRINT_EQ
 41011 000095D8 54                      	db	"T"
 41012 000095D9 [D434]                  	dw	PRINT_TIME
 41013 000095DB 56                      	db	"V"
 41014 000095DC [CD22]                  	dw	PRINT_VERSION
 41015 000095DE 5F                      	db	"_"
 41016 000095DF [232B]                  	dw	CRLF2
 41017 000095E1 24                      	db	"$"
 41018 000095E2 [4F23]                  	dw	PRINT_CHAR
 41019 000095E4 00                      	db	0			; NUL TERMINATED
 41020                                  
 41021                                  ; Table of IF conditionals
 41022                                  IFTAB:
 41023 000095E5 034E4F54                	db	3,"NOT"			; First byte is count
 41024 000095E9 [B30B]                  	dw	IFNOT
 41025 000095EB 0A4552524F524C4556-     	db	10,"ERRORLEVEL"
 41025 000095F4 454C               
 41026 000095F6 [720C]                  	dw	IFERLEV
 41027 000095F8 054558495354            	db	5,"EXIST"
 41028 000095FE [070C]                  	dw	IFEXISTS
 41029 00009600 00                      	db	0
 41030                                  
 41031                                  ; Table for internal command names
 41032                                  COMTAB:
 41033 00009601 0344495203              	db	3,"DIR",fSwitchAllowed+fCheckDrive ; 3
 41034 00009606 [3711]                  	dw	CATALOG			; In TCMD1.ASM
 41035 00009608 [0095]                  	dw	DirHelpMsgs
 41036                                  
 41037 0000960A 0443414C4C02            	db	4,"CALL",fSwitchAllowed	; 2
 41038 00009610 [E70C]                  	dw	_$CALL			; In TBATCH2.ASM
 41039 00009612 [6A95]                  	dw	CallHelpMsgs
 41040                                  
 41041 00009614 044348435002            	db	4,"CHCP",fSwitchAllowed ; 2
 41042 0000961A [A925]                  	dw	CHCP			; In TCMD2B.ASM
 41043 0000961C [CA94]                  	dw	ChcpHelpMsgs
 41044                                  
 41045 0000961E 0652454E414D4503        	db	6,"RENAME",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41046 00009626 [951F]                  	dw	CRENAME			; In TCMD1.ASM
 41047 00009628 [4495]                  	dw	RenHelpMsgs
 41048                                  
 41049 0000962A 0352454E03              	db	3,"REN",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41050 0000962F [951F]                  	dw	CRENAME			; In TCMD1.ASM
 41051 00009631 [4495]                  	dw	RenHelpMsgs
 41052                                  	
 41053 00009633 05455241534503          	db	5,"ERASE",fSwitchAllowed+fCheckDrive	; 3
 41054 0000963A [131F]                  	dw	ERASE			; In TCMD1.ASM
 41055 0000963C [F894]                  	dw	DelHelpMsgs
 41056                                  	
 41057 0000963E 0344454C03              	db	3,"DEL",fSwitchAllowed+fCheckDrive	; 3
 41058 00009643 [131F]                  	dw	ERASE			; In TCMD1.ASM
 41059 00009645 [F894]                  	dw	DelHelpMsgs
 41060                                  	
 41061 00009647 045459504503            	db	4,"TYPE",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 41062 0000964D [3C20]                  	dw	TYPEFIL			; In TCMD1.ASM
 41063 0000964F [5A95]                  	dw	TypeHelpMsgs
 41064                                  	
 41065 00009651 0352454D06              	db	3,"REM",fSwitchAllowed+fLimitHelp	; 6
 41066 00009656 [0401]                  	dw	TCOMMAND		; In TCODE.ASM
 41067 00009658 [7095]                  	dw	RemHelpMsgs
 41068                                  	
 41069 0000965A 04434F505903            	db	4,"COPY",fSwitchAllowed+fCheckDrive	; 3
 41070 00009660 [673C]                  	dw	COPY			; In COPY.ASM
 41071 00009662 [DC94]                  	dw	CopyHelpMsgs
 41072                                  	
 41073 00009664 05504155534506          	db	5,"PAUSE",fSwitchAllowed+fLimitHelp	; 6
 41074 0000966B [071F]                  	dw	PAUSE			; In TCMD1.ASM
 41075 0000966D [7495]                  	dw	PauseHelpMsgs
 41076                                  	
 41077 0000966F 044441544502            	db	4,"DATE",fSwitchAllowed	; 2
 41078 00009675 [E733]                  	dw	DATE			; In TPIPE.ASM
 41079 00009677 [F294]                  	dw	DateHelpMsgs
 41080                                  	
 41081 00009679 0454494D4502            	db	4,"TIME",fSwitchAllowed ; 2		;AC018; P3903
 41082 0000967F [4634]                  	dw	CTIME			; In TPIPE.ASM
 41083 00009681 [5495]                  	dw	TimeHelpMsgs
 41084                                  	
 41085 00009683 0356455202              	db	3,"VER",fSwitchAllowed ; 2
 41086 00009688 [5B22]                  	dw	VERSION			; In TCMD2.ASM
 41087 0000968A [5E95]                  	dw	VerHelpMsgs
 41088                                  	
 41089 0000968C 03564F4C03              	db	3,"VOL",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41090 00009691 [6321]                  	dw	VOLUME			; In TCMD1.ASM
 41091 00009693 [6695]                  	dw	VolHelpMsgs
 41092                                  	
 41093 00009695 02434403                	db	2,"CD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41094 00009699 [EC29]                  	dw	_$CHDIR			; In TENV.ASM
 41095 0000969B [D094]                  	dw	CdHelpMsgs
 41096                                  	
 41097 0000969D 05434844495203          	db	5,"CHDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41098 000096A4 [EC29]                  	dw	_$CHDIR			; In TENV.ASM
 41099 000096A6 [D094]                  	dw	CdHelpMsgs
 41100                                  	
 41101 000096A8 024D4403                	db	2,"MD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41102 000096AC [512A]                  	dw	_$MKDIR			; In TENV.ASM
 41103 000096AE [2095]                  	dw	MdHelpMsgs
 41104                                  	
 41105 000096B0 054D4B44495203          	db	5,"MKDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41106 000096B7 [512A]                  	dw	_$MKDIR			; In TENV.ASM
 41107 000096B9 [2095]                  	dw	MdHelpMsgs
 41108                                  	
 41109 000096BB 02524403                	db	2,"RD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 41110 000096BF [932A]                  	dw	_$RMDIR			; In TENV.ASM
 41111 000096C1 [4095]                  	dw	RdHelpMsgs
 41112                                  	
 41113 000096C3 05524D44495203          	db	5,"RMDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 41114 000096CA [932A]                  	dw	_$RMDIR			; In TENV.ASM
 41115 000096CC [4095]                  	dw	RdHelpMsgs
 41116                                  	
 41117 000096CE 05425245414B02          	db	5,"BREAK",fSwitchAllowed ; 2		;AC018; P3903
 41118 000096D5 [643B]                  	dw	CNTRLC			; In TUCODE.ASM
 41119 000096D7 [C694]                  	dw	BreakHelpMsgs
 41120                                  	
 41121 000096D9 0656455249465902        	db	6,"VERIFY",fSwitchAllowed ; 2		;AC018; P3903
 41122 000096E1 [A63B]                  	dw	VERIFY			; In TUCODE.ASM
 41123 000096E3 [6295]                  	dw	VerifyHelpMsgs
 41124                                  	
 41125 000096E5 0353455406              	db	3,"SET",fSwitchAllowed+fLimitHelp ; 6
 41126 000096EA [5627]                  	dw	ADD_NAME_TO_ENVIRONMENT	; In TENV.ASM
 41127 000096EC [4C95]                  	dw	SetHelpMsgs
 41128                                  	
 41129 000096EE 0650524F4D505406        	db	6,"PROMPT",fSwitchAllowed+fLimitHelp ; 6
 41130 000096F6 [3C27]                  	dw	ADD_PROMPT		; In TENV.ASM
 41131 000096F8 [2C95]                  	dw	PromptHelpMsgs
 41132                                  	
 41133 000096FA 045041544802            	db	4,"PATH",fSwitchAllowed ; 2
 41134 00009700 [CD23]                  	dw	PATH			; In TCMD2.ASM
 41135 00009702 [2495]                  	dw	PathHelpMsgs
 41136                                  	
 41137 00009704 044558495400            	db	4,"EXIT",0
 41138 0000970A [9E26]                  	dw	_$EXIT			; In TCMD2.ASM
 41139 0000970C [1C95]                  	dw	ExitHelpMsgs
 41140                                  	
 41141 0000970E 044354545903            	db	4,"CTTY",fCheckDrive+fSwitchAllowed ; 3
 41142 00009714 [0B25]                  	dw	CTTY			; In TCMD2.ASM
 41143 00009716 [EE94]                  	dw	CttyHelpMsgs
 41144                                  	
 41145 00009718 044543484F06            	db	4,"ECHO",fSwitchAllowed+fLimitHelp ; 6
 41146 0000971E [2B3B]                  	dw	_ECHO			; In TUCODE.ASM
 41147 00009720 [7895]                  	dw	EchoHelpMsgs
 41148                                  	
 41149 00009722 04474F544F06            	db	4,"GOTO",fSwitchAllowed+fLimitHelp
 41150 00009728 [1B0D]                  	dw	_GOTO			; In TBATCH.ASM
 41151 0000972A [7E95]                  	dw	GotoHelpMsgs
 41152                                  	
 41153 0000972C 05534849465402          	db	5,"SHIFT",fSwitchAllowed ; 2
 41154 00009733 [A00C]                  	dw	_SHIFT			; In TBATCH.ASM
 41155 00009735 [8495]                  	dw	ShiftHelpMsgs
 41156                                  	
 41157 00009737 02494606                	db	2,"IF",fSwitchAllowed+fLimitHelp ; 6
 41158 0000973B [4C0B]                  	dw	_$IF			; In TBATCH.ASM
 41159 0000973D [8895]                  	dw	IfHelpMsgs
 41160                                  	
 41161 0000973F 03464F5206              	db	3,"FOR",fSwitchAllowed+fLimitHelp ; 6
 41162 00009744 [D00F]                  	dw	_$FOR			; In TBATCH.ASM
 41163 00009746 [9895]                  	dw	ForHelpMsgs
 41164                                  	
 41165 00009748 03434C5300              	db	3,"CLS",0
 41166 0000974D [7224]                  	dw	CLS			; In TCMD2.ASM
 41167 0000974F [D894]                  	dw	ClsHelpMsgs
 41168                                  	
 41169 00009751 08545255454E414D45-     	db	8,"TRUENAME",fSwitchAllowed+fCheckDrive	;AN000; P3903 changed
 41169 0000975A 03                 
 41170 0000975B [2726]                  	dw	TRUENAME		;AN000;
 41171 0000975D [A295]                  	dw	TruenameHelpMsgs
 41172                                  	
 41173 0000975F 084C4F414448494748-     	db	8,"LOADHIGH",fSwitchAllowed ; 2	; M003
 41173 00009768 02                 
 41174 00009769 [2463]                  	dw	LoadHigh		; In loadhi.asm ; M003
 41175 0000976B [A695]                  	dw	LoadhighHelpMsgs	; M003
 41176                                  	
 41177 0000976D 024C4802                	db	2,"LH",fSwitchAllowed ; 2	; Short form; M003
 41178 00009771 [2463]                  	dw	LoadHigh		; In loadhi.asm ; M003
 41179 00009773 [A695]                  	dw	LoadhighHelpMsgs	; M003
 41180                                  	
 41181 00009775 00                      	db	0			; Terminate command table
 41182                                  
 41183                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8736h
 41184                                  
 41185 00009776 2E434F4D                comext:	db	".COM"
 41186 0000977A 2E455845                exeext:	db	".EXE"
 41187 0000977E 2E424154                batext:	db	".BAT"
 41188                                  
 41189                                  switch_list:
 41190                                  	; MSDOS 5.0 (& 6.0) COMMAND.COM
 41191                                  	;db	"?VBAPW"		; flags we can recognize
 41192                                  	; 18/06/2023
 41193                                  	; MSDOS 6.22 COMMAND.COM
 41194 00009782 2D593F5642415057        	db "-Y?VBAPW"
 41195                                  
 41196                                  AttrLtrs:
 41197 0000978A 524853764441            	db	"RHSvDA"		; attribute letters for DIR
 41198                                  
 41199                                  ;	Attribute letters in AttrLtrs must appear in the order that
 41200                                  ;	attribute bits occur in the attribute byte returned by
 41201                                  ;	directory searches, starting with bit 0.
 41202                                  ;	The volume label attribute is lowercased to keep it from
 41203                                  ;	being matched (by an uppercase comparison).
 41204                                  
 41205                                  OrderLtrs:
 41206                                  	; MSDOS 5.0
 41207                                  	;db	"NEDSG"			; sort order letters for DIR
 41208                                  	; 18/06/2023
 41209                                  	; MSDOS 6.0 COMMAND.COM
 41210 00009790 4E4544534743            	db	"NEDSGC"		; sort order letters for DIR
 41211                                  
 41212                                  ;	Sort order letters stand for file name, extension,
 41213                                  ;	date/time, size, grouped (directory files before others),
 41214                                  ;	and compression ratio. DIR routines rely on the specific
 41215                                  ;	order of the letters in this list.
 41216                                  
 41217                                  comspec_flag:
 41218 00009796 00                      	db	0                       ;AN071;
 41219                                  
 41220                                  BATBUFLEN:
 41221 00009797 2000                    	dw	BatLen ; 32
 41222                                  
 41223                                  ; *****************************************************
 41224                                  ; EMG 4.00
 41225                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 41226                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 41227                                  ; *****************************************************
 41228                                  
 41229                                  ; COMMON PARSE BLOCKS
 41230                                  
 41231                                  ; Indicates no value list for PARSE.
 41232                                  
 41233                                  NO_VALUES:
 41234 00009799 0000                    	dw	0			;AN000;  no values
 41235                                  
 41236                                  NULL_VALUE_LIST:  ; for unvalidated value
 41237 0000979B 00                       	db	0                       ; no value lists
 41238                                  
 41239                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41240                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8759h
 41241                                  
 41242                                  ; PARSE control block for a required file specification (upper cased)
 41243                                  
 41244                                  FILE_REQUIRED:
 41245 0000979C 0002                    	dw	0200h			;AN000;  filespec - required
 41246 0000979E 0100                    	dw	1			;AN000;  capitalize - file table
 41247 000097A0 [87AA]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41248 000097A2 [9997]                  	dw	NO_VALUES		;AN000;
 41249 000097A4 00                      	db	0			;AN000;  no keywords
 41250                                  
 41251                                  ; PARSE control block for an optional file specification (upper cased)
 41252                                  ; or drive number
 41253                                  
 41254                                  FILE_OPTIONAL:
 41255 000097A5 0103                    	dw	0301h			;AN000;  filespec or drive number
 41256                                  					;	 optional
 41257 000097A7 0100                    	dw	1			;AN000;  capitalize - file table
 41258 000097A9 [87AA]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41259 000097AB [9997]                  	dw	NO_VALUES		;AN000;
 41260 000097AD 00                      	db	0			;AN000;  no keywords
 41261                                  
 41262                                  ; PARSE control block for an optional file specification (upper cased)
 41263                                  
 41264                                  FILE_OPTIONAL2:
 41265 000097AE 0102                    	dw	0201h                   ;AN000;  filespec optional
 41266 000097B0 0100                    	dw	1                       ;AN000;  capitalize - file table
 41267 000097B2 [87AA]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41268 000097B4 [9997]                  	dw	NO_VALUES		;AN000;
 41269 000097B6 00                      	db	0			;AN000;  no keywords
 41270                                  
 41271                                  ; PARSE control block for an optional /P switch
 41272                                  
 41273                                  SLASH_P_SWITCH:
 41274 000097B7 0000                    	dw	0			;AN000;  no match flags
 41275 000097B9 0200                    	dw	2			;AN000;  capitalize - char table
 41276 000097BB [87AA]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41277 000097BD [9997]                  	dw	NO_VALUES		;AN000;
 41278 000097BF 01                      	db	1			;AN000;  1 keyword
 41279                                  SLASH_P_SYN:
 41280 000097C0 2F5000                  	db	"/P",0                  ;AN000;  /P switch
 41281                                  
 41282                                  ; PARSE BLOCK FOR BREAK, VERIFY, ECHO
 41283                                  
 41284                                  ; The following parse control block can be used for any command which
 41285                                  ; needs only the optional "ON" and "OFF" keywords as operands. Allows
 41286                                  ; the equal sign as an additional delimiter. Returns verified result
 41287                                  ; in PARSE1_OUTPUT. Currently used for the BREAK, VERIFY, and ECHO
 41288                                  ; internal commands.
 41289                                  
 41290                                  PARSE_BREAK:
 41291 000097C3 [C697]                  	dw	BREAK_PARMS		;AN000;
 41292 000097C5 00                      	db	0			;AN032; no extra delimiter
 41293                                  
 41294                                  BREAK_PARMS:
 41295 000097C6 0001                    	db	0,1			;AN000;  1 positional parm
 41296 000097C8 [CC97]                  	dw	BREAK_CONTROL1		;AN000;
 41297 000097CA 00                      	db	0			;AN000;  no switches
 41298 000097CB 00                      	db	0			;AN000;  no keywords
 41299                                  
 41300                                  BREAK_CONTROL1:
 41301 000097CC 0120                    	dw	2001h			;AN000;  string value - optional
 41302 000097CE 0200                    	dw	2			;AN000;  capitalize - char table
 41303 000097D0 [87AA]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41304 000097D2 [D597]                  	dw	BREAK_VALUES		;AN000;
 41305 000097D4 00                      	db	0			;AN000;  no keywords
 41306                                  
 41307                                  BREAK_VALUES:
 41308 000097D5 03                      	db	3			;AN000;
 41309 000097D6 00                      	db	0			;AN000;  no ranges
 41310 000097D7 00                      	db	0			;AN000;  no numeric values
 41311 000097D8 02                      	db	2			;AN000;  2 string values
 41312 000097D9 00                      	db	0			;AN000;  returned if ON
 41313 000097DA [DF97]                  	dw	BREAK_ON		;AN000;  point to ON string
 41314 000097DC 66                      	db	'f'                     ;AN000;  returned if OFF
 41315 000097DD [E297]                  	dw	BREAK_OFF		;AN000;  point to OFF string
 41316                                  
 41317                                  BREAK_ON:
 41318 000097DF 4F4E00                  	db	"ON",0                  ;AN000;
 41319                                  BREAK_OFF:
 41320 000097E2 4F464600                	db	"OFF",0                 ;AN000;
 41321                                  
 41322                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41323                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:87A3h
 41324                                  
 41325                                  ; PARSE BLOCK FOR CHCP
 41326                                  
 41327                                  ; The following parse control block can be used for any command which
 41328                                  ; needs only one optional three digit decimal parameter for operands.
 41329                                  ; Returns verified result in PARSE1_OUTPUT. Currently used for the
 41330                                  ; CHCP internal command.
 41331                                  
 41332                                  CHCP_MINVAL	EQU	100			;AN000;
 41333                                  CHCP_MAXVAL	EQU	999			;AN000;
 41334                                  
 41335                                  PARSE_CHCP:
 41336 000097E6 [E997]                  	dw	CHCP_PARMS			;AN000;
 41337 000097E8 00                      	db	0				;AN000;  no extra delimiter
 41338                                  CHCP_PARMS:
 41339 000097E9 0001                    	db	0,1				;AN000;  1 positional parm
 41340 000097EB [EF97]                  	dw	CHCP_CONTROL1			;AN000;
 41341 000097ED 00                      	db	0				;AN000;  no switches
 41342 000097EE 00                      	db	0				;AN000;  no keywords
 41343                                  
 41344                                  CHCP_CONTROL1:
 41345 000097EF 0180                    	dw	8001h				;AN000;  numeric value - optional
 41346 000097F1 0000                    	dw	0				;AN000;  no function flags
 41347 000097F3 [87AA]                  	dw	PARSE1_OUTPUT			;AN000;  result buffer
 41348 000097F5 [F897]                  	dw	CHCP_VALUES			;AN000;
 41349 000097F7 00                      	db	0				;AN000;  no keywords
 41350                                  
 41351                                  CHCP_VALUES:
 41352 000097F8 01                      	db	1				;AN000;
 41353 000097F9 01                      	db	1				;AN000;  1 range
 41354 000097FA 01                      	db	1				;AN000;  returned if result
 41355 000097FB 64000000E7030000        	dd	CHCP_MINVAL,CHCP_MAXVAL		;AN000;  minimum & maximum value
 41356 00009803 00                      	db	0				;AN000;  no numeric values
 41357 00009804 00                      	db	0				;AN000;  no string values
 41358                                  
 41359                                  ; PARSE BLOCK FOR DATE
 41360                                  
 41361                                  ; The following parse control block can be used for any command which
 41362                                  ; needs only an optional date string as an operand. Returns unverified
 41363                                  ; result in DATE_OUTPUT. Currently used for the DATE internal command.
 41364                                  
 41365                                  PARSE_DATE:
 41366 00009805 [0898]                  	dw	DATE_PARMS			;AN000;
 41367 00009807 00                      	db	0				;AN000;  no extra delimiter
 41368                                  DATE_PARMS:
 41369 00009808 0001                    	db	0,1				;AN000;  1 positional parm
 41370 0000980A [0E98]                  	dw	DATE_CONTROL1			;AN000;
 41371 0000980C 00                      	db	0				;AN000;  no switches
 41372 0000980D 00                      	db	0				;AN000;  no keywords
 41373                                  
 41374                                  DATE_CONTROL1:
 41375 0000980E 0110                    	dw	1001h				;AN000;  date - optional
 41376 00009810 0000                    	dw	0				;AN000;  no function flags
 41377 00009812 [8FAA]                  	dw	DATE_OUTPUT			;AN000;  result buffer
 41378 00009814 [9997]                  	dw	NO_VALUES			;AN000;
 41379 00009816 00                      	db	0				;AN000;  no keywords
 41380                                  
 41381                                  ; PARSE BLOCK FOR TIME
 41382                                  
 41383                                  ; The following parse control block can be used for any command which
 41384                                  ; needs only an optional time string as an operand. Returns unverified
 41385                                  ; result in TIME_OUTPUT. Currently used for the TIME internal command.
 41386                                  
 41387                                  PARSE_TIME:
 41388 00009817 [1A98]                  	dw	TIME_PARMS			;AN000;
 41389 00009819 00                      	db	0				;AN000;  no extra delimiter
 41390                                  TIME_PARMS:
 41391 0000981A 0001                    	db	0,1				;AN000;  1 positional parm
 41392 0000981C [2098]                  	dw	TIME_CONTROL1			;AN000;
 41393 0000981E 00                      	db	0				;AN000;  no switches
 41394 0000981F 00                      	db	0				;AN000;  no keywords
 41395                                  
 41396                                  TIME_CONTROL1:
 41397 00009820 0108                    	dw	0801h				;AN000;  TIME - optional
 41398 00009822 0000                    	dw	0				;AN000;  no function flags
 41399 00009824 [97AA]                  	dw	TIME_OUTPUT			;AN000;  result buffer
 41400 00009826 [9997]                  	dw	NO_VALUES			;AN000;
 41401 00009828 00                      	db	0				;AN000;  no keywords
 41402                                  
 41403                                  ; PARSE BLOCK FOR VOL
 41404                                  
 41405                                  ; The following parse control block can be used for any command which
 41406                                  ; needs only an optional drive letter as an operand.  Returns unverified
 41407                                  ; drive number (one based) in DRIVE_OUTPUT. Currently used for the VOL
 41408                                  ; internal command.
 41409                                  
 41410                                  PARSE_VOL:
 41411 00009829 [2C98]                  	dw	VOL_PARMS			;AN000;
 41412 0000982B 00                      	db	0				;AN000;  no extra delimiter
 41413                                  VOL_PARMS:
 41414 0000982C 0001                    	db	0,1				;AN000;  1 positional parm
 41415 0000982E [3298]                  	dw	DRIVE_CONTROL1			;AN000;
 41416 00009830 00                      	db	0				;AN000;  no switches
 41417 00009831 00                      	db	0				;AN000;  no keywords
 41418                                  
 41419                                  DRIVE_CONTROL1:
 41420 00009832 0101                    	dw	0101h				;AN000;  DRIVE - optional
 41421 00009834 0100                    	dw	1				;AN000;  capitalize - file table
 41422 00009836 [9FAA]                  	dw	DRIVE_OUTPUT			;AN000;  result buffer
 41423 00009838 [9997]                  	dw	NO_VALUES			;AN000;
 41424 0000983A 00                      	db	0				;AN000;  no keywords
 41425                                  
 41426                                  ; PARSE BLOCK FOR MKDIR, RMDIR, TYPE
 41427                                  
 41428                                  ; The following parse control block can be used for any command which
 41429                                  ; needs only one required file specification as an operand. Returns a
 41430                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 41431                                  ; for the MKDIR, RMDIR, and TYPE internal commands.
 41432                                  
 41433                                  PARSE_MRDIR:
 41434 0000983B [3E98]                  	dw	MRDIR_PARMS			;AN000;
 41435 0000983D 00                      	db	0				;AN000;  no extra delimiter
 41436                                  MRDIR_PARMS:
 41437 0000983E 0101                    	db	1,1				;AN000;  1 positional parm
 41438 00009840 [9C97]                  	dw	FILE_REQUIRED			;AN000;
 41439 00009842 00                      	db	0				;AN000;  no switches
 41440 00009843 00                      	db	0				;AN000;  no keywords
 41441                                  
 41442                                  ; PARSE BLOCK FOR CHDIR, TRUENAME
 41443                                  
 41444                                  ; The following parse control block can be used for any command which
 41445                                  ; needs only one optional file specification an operand. Returns a
 41446                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 41447                                  ; for the CHDIR and TRUENAME internal commands.
 41448                                  
 41449                                  PARSE_CHDIR:
 41450 00009844 [4798]                  	dw	CHDIR_PARMS			;AN000;
 41451 00009846 00                      	db	0				;AN000;  no extra delimiter
 41452                                  CHDIR_PARMS:
 41453 00009847 0001                    	db	0,1				;AN000;  1 positional parm
 41454 00009849 [A597]                  	dw	FILE_OPTIONAL			;AN000;
 41455 0000984B 00                      	db	0				;AN000;  no switches
 41456 0000984C 00                      	db	0				;AN000;  no keywords
 41457                                  
 41458                                  ; PARSE BLOCK FOR ERASE
 41459                                  
 41460                                  ; The following parse control block is used for the DEL/ERASE internal
 41461                                  ; commands. This command has one required file specification and an
 41462                                  ; optional switch (/p) as operands. The verified switch or unverified
 41463                                  ; file specification is returned in PARSE1_OUTPUT.
 41464                                  
 41465                                  PARSE_ERASE:
 41466 0000984D [5098]                  	dw	ERASE_PARMS			;AN000;
 41467 0000984F 00                      	db	0				;AN000;  no extra delimiter
 41468                                  
 41469                                  ERASE_PARMS:
 41470 00009850 0101                    	db	1,1				;AN000;  1 positional parm
 41471 00009852 [9C97]                  	dw	FILE_REQUIRED			;AN000;
 41472 00009854 01                      	db	1				;AN000;  1 switch
 41473 00009855 [B797]                  	dw	SLASH_P_SWITCH			;AN000;
 41474 00009857 00                      	db	0				;AN000;  no keywords
 41475                                  
 41476                                  ; PARSE BLOCK FOR DIR
 41477                                  
 41478                                  ; The following parse control block is used for the DIR internal command.
 41479                                  ; This command has one optional file specification and several optional
 41480                                  ; switches. Switches, switch values, and the filespec are returned in 
 41481                                  ; PARSE1_OUTPUT.
 41482                                  ;
 41483                                  ; Switches are /a[value], /-a, /o[value], /-o, /s, /-s, /?, /b, /-b,
 41484                                  ; /w, /-w, /p, and /-p. The string values for /a and /o are optional,
 41485                                  ; do not require colons, and are not checked against a value list.
 41486                                  ;
 41487                                  ; Switch /h has been removed from the DIR command	;M008
 41488                                  ; Switch /? is no longer handled internally		;M008
 41489                                  ;
 41490                                  ; A list of pointers to all the switch synonyms is provided here to
 41491                                  ; help identify which switch has been matched.
 41492                                  
 41493                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 41494                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8815h
 41495                                  
 41496                                  PARSE_DIR:
 41497 00009858 [5B98]                  	dw	DIR_PARMS
 41498 0000985A 00                      	db	0			; no extra delimiters
 41499                                  DIR_PARMS:
 41500 0000985B 0001                    	db	0,1			; 1 optional positional param
 41501 0000985D [AE97]                  	dw	FILE_OPTIONAL2
 41502 0000985F 02                      	db	2			; 2 kinds of switches
 41503 00009860 [6598]                  	dw	DIR_SW_VALUED
 41504 00009862 [7798]                  	dw	DIR_SW_UNVALUED
 41505 00009864 00                      	db	0			; no keywords
 41506                                  
 41507                                  DIR_SW_VALUED:
 41508 00009865 0120                    	dw	2001h			; optional string value
 41509 00009867 2100                    	dw	21h			; optional colon; capitalize 
 41510 00009869 [87AA]                  	dw	PARSE1_OUTPUT		; result buffer
 41511 0000986B [9B97]                  	dw	NULL_VALUE_LIST		; don't validate value
 41512                                  
 41513                                  	; 18/06/2023
 41514                                  	;db	2
 41515                                  
 41516                                  ; MSDOS 6.0 COMMAND.COM
 41517                                  ;ifdef DBLSPACE_HOOKS
 41518                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41519 0000986D 03                      	db	3		; 3 'synonyms'
 41520                                  ;else
 41521                                  ;	db	2		; 2 'synonyms'
 41522                                  ;endif
 41523                                  
 41524                                  DIR_SW_A:
 41525 0000986E 2F4100                  	db	"/A",0
 41526                                  DIR_SW_O:
 41527 00009871 2F4F00                  	db	"/O",0
 41528                                  
 41529                                  ; MSDOS 6.0 COMMAND.COM
 41530                                  ;ifdef DBLSPACE_HOOKS
 41531                                  	; 18/06/2023
 41532                                  DIR_SW_C:
 41533 00009874 2F4300                  	db	"/C",0
 41534                                  ;endif
 41535                                  
 41536                                  DIR_SW_UNVALUED:
 41537 00009877 0000                    	dw	0			; no value
 41538 00009879 0000                    	dw	0			; no format functions
 41539 0000987B [87AA]                  	dw	PARSE1_OUTPUT		; result buffer
 41540 0000987D [9997]                  	dw	NO_VALUES
 41541                                  
 41542                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 41543                                  	;;db	12
 41544                                  	
 41545                                  	; 18/06/2023
 41546                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8839h
 41547                                  	;db	14		; 14 'synonyms' !?
 41548                                  
 41549                                  ; MSDOS 6.0 COMMAND.COM
 41550                                  ;ifdef DBLSPACE_HOOKS
 41551                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41552                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DB0h
 41553 0000987F 0D                      	db	13		; 13 'synonyms'
 41554                                  ;else
 41555                                  ;	db	12		; 12 'synonyms'
 41556                                  ;endif
 41557                                  
 41558                                  DIR_SW_NEG_A:
 41559 00009880 2F2D4100                	db	"/-A",0
 41560                                  DIR_SW_NEG_O:
 41561 00009884 2F2D4F00                	db	"/-O",0
 41562                                  DIR_SW_S:
 41563 00009888 2F5300                  	db	"/S",0
 41564                                  DIR_SW_NEG_S:
 41565 0000988B 2F2D5300                	db	"/-S",0
 41566                                  DIR_SW_B:
 41567 0000988F 2F4200                  	db	"/B",0
 41568                                  DIR_SW_NEG_B:
 41569 00009892 2F2D4200                	db	"/-B",0
 41570                                  DIR_SW_W:
 41571 00009896 2F5700                  	db	"/W",0
 41572                                  DIR_SW_NEG_W:
 41573 00009899 2F2D5700                	db	"/-W",0
 41574                                  DIR_SW_P:
 41575 0000989D 2F5000                  	db	"/P",0
 41576                                  DIR_SW_NEG_P:
 41577 000098A0 2F2D5000                	db	"/-P",0
 41578                                  DIR_SW_L:
 41579 000098A4 2F4C00                  	db	"/L",0		;M010
 41580                                  DIR_SW_NEG_L:
 41581 000098A7 2F2D4C00                	db	"/-L",0 	;M010
 41582                                  
 41583                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41584                                  ; MSDOS 6.0 COMMAND.COM (DBLSPACE_HOOKS)
 41585                                  DIR_SW_NEG_C:
 41586 000098AB 2F2D4300                	db	"/-C",0
 41587                                  
 41588                                  ; Here's a list of pointers to DIR's switch synonyms, for easier
 41589                                  ; identification. Order is critical - DIR routines rely on the
 41590                                  ; specific order in this list. Negated options appear at odd 
 41591                                  ; positions in the list, and simple on/off options appear first.
 41592                                  
 41593                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41594                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DE0h
 41595                                  Dir_Sw_Ptrs:			; list of ptrs to switch synonyms
 41596                                  	; 18/06/2023
 41597                                  	; MSDOS 6.0 COMMAND.COM ; *
 41598 000098AF [AB98]                  	dw	DIR_SW_NEG_C	; * 
 41599                                  Dir_Sw_Ptrs_2:
 41600 000098B1 [7498]                  	dw	DIR_SW_C	; *
 41601                                  	; MSDOS 5.0 COMMAND.COM	
 41602                                  ;Dir_Sw_Ptrs:
 41603 000098B3 [9998]                  	dw	DIR_SW_NEG_W
 41604                                  ;Dir_Sw_Ptrs_2:
 41605 000098B5 [9698]                  	dw	DIR_SW_W
 41606 000098B7 [A098]                  	dw	DIR_SW_NEG_P
 41607 000098B9 [9D98]                  	dw	DIR_SW_P
 41608 000098BB [8B98]                  	dw	DIR_SW_NEG_S
 41609 000098BD [8898]                  	dw	DIR_SW_S
 41610 000098BF [9298]                  	dw	DIR_SW_NEG_B
 41611 000098C1 [8F98]                  	dw	DIR_SW_B
 41612 000098C3 [A798]                  	dw	DIR_SW_NEG_L	;M010
 41613 000098C5 [A498]                  	dw	DIR_SW_L	;M010
 41614 000098C7 [8498]                  	dw	DIR_SW_NEG_O
 41615 000098C9 [7198]                  	dw	DIR_SW_O
 41616 000098CB [8098]                  	dw	DIR_SW_NEG_A
 41617 000098CD [6E98]                  	dw	DIR_SW_A
 41618                                  
 41619                                  ; PARSE BLOCK FOR RENAME
 41620                                  
 41621                                  ; The following parse control block can be used for any command which
 41622                                  ; needs only two required file specifications as operands. Returns
 41623                                  ; pointers to the unverified string in PARSE1_OUTPUT.
 41624                                  ; Currently used for the RENAME internal command.
 41625                                  
 41626                                  PARSE_RENAME:
 41627 000098CF [D298]                  	dw	RENAME_PARMS		;AN000;
 41628 000098D1 00                      	db	0			;AN000;  no extra delimiter
 41629                                  RENAME_PARMS:
 41630 000098D2 0202                    	db	2,2			;AN000;  2 positional parms
 41631 000098D4 [9C97]                  	dw	FILE_REQUIRED		;AN000;
 41632 000098D6 [9C97]                  	dw	FILE_REQUIRED		;AN000;
 41633 000098D8 00                      	db	0			;AN000;  no switches
 41634 000098D9 00                      	db	0			;AN000;  no keywords
 41635                                  
 41636                                  ; PARSE BLOCK FOR CTTY
 41637                                  
 41638                                  ; The following parse control block can be used for any command which
 41639                                  ; needs one required device name as an operand. Returns a pointer to
 41640                                  ; unverified string in PARSE1_OUTPUT. Currently used for the CTTY
 41641                                  ; internal command.
 41642                                  
 41643                                  PARSE_CTTY:
 41644 000098DA [DD98]                  	dw	CTTY_PARMS		;AN000;
 41645 000098DC 00                      	db	0			;AN000;  no extra delimiter
 41646                                  CTTY_PARMS:
 41647 000098DD 0101                    	db	1,1			;AN000;  1 positional parm
 41648 000098DF [E398]                  	dw	CTTY_CONTROL1		;AN000;
 41649 000098E1 00                      	db	0			;AN000;  no switches
 41650 000098E2 00                      	db	0			;AN000;  no keywords
 41651                                  CTTY_CONTROL1:
 41652 000098E3 0020                    	dw	2000h			;AN000;  string value - required
 41653 000098E5 1100                    	dw	11h			;AN000;  capitalize - file table
 41654                                  					;AN000;  remove colon at end
 41655 000098E7 [87AA]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 41656 000098E9 [9997]                  	dw	NO_VALUES		;AN000;
 41657 000098EB 00                      	db	0			;AN000;  no keywords
 41658                                  
 41659                                  ; PARSE BLOCK FOR VER
 41660                                  
 41661                                  ; The following parse control block can be used for any command which
 41662                                  ; needs an optional switch "/debug". Currently used for the VER command.
 41663                                  
 41664                                  PARSE_VER:
 41665 000098EC [EF98]                  	dw	VER_PARMS
 41666 000098EE 00                      	db	0			; no extra delimiters
 41667                                  VER_PARMS:
 41668 000098EF 0000                    	db	0,0			; no positional parameters
 41669                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41670                                  %if 0	; PCDOS 7.1 (& MSDOS 5.0-6.22) COMMAND.COM 
 41671                                  	db	1			; one switch
 41672                                  	dw	SLASH_R
 41673                                  %else
 41674                                  	; 20/07/2024 - Retro DOS v4-v5 COMMAND.COM
 41675 000098F1 02                      	db	2			; two switches
 41676 000098F2 [F798]                  	dw	SLASH_R
 41677 000098F4 [0399]                  	dw	SLASH_T ; Retro DOS v4-v5 COMMAND.COM switch
 41678                                  %endif
 41679 000098F6 00                      	db	0			; no keywords
 41680                                  SLASH_R:
 41681 000098F7 0000                    	dw	0			; no values
 41682 000098F9 0200                    	dw	2			; capitalize by filename table
 41683 000098FB [87AA]                  	dw	PARSE1_OUTPUT		; result buffer
 41684 000098FD [9997]                  	dw	NO_VALUES		; no values
 41685 000098FF 01                      	db	1			; one synonym
 41686                                  SLASH_R_SYN:
 41687 00009900 2F5200                  	db	"/R",0
 41688                                  
 41689                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41690                                  %if 1
 41691                                  SLASH_T:
 41692 00009903 0000                    	dw	0			; no values
 41693 00009905 0200                    	dw	2			; capitalize by filename table
 41694 00009907 [87AA]                  	dw	PARSE1_OUTPUT		; result buffer
 41695 00009909 [9997]                  	dw	NO_VALUES		; no values
 41696 0000990B 01                      	db	1			; one synonym
 41697                                  SLASH_T_SYN:
 41698 0000990C 2F5400                  	db	"/T",0
 41699                                  %endif
 41700                                  
 41701                                  ; M003 ; Start of changes for LoadHigh support
 41702                                  
 41703                                  ;Parse Control Block for LOADHIGH command
 41704                                  
 41705                                  Parse_LoadHi:
 41706 0000990F [1299]                  	dw	LoadHi_Parms		;extended parm table
 41707 00009911 00                      	db	0			;no extra delimiters
 41708                                  
 41709                                  LoadHi_Parms:
 41710 00009912 0101                    	db	1,1			;min. 1 parm, max. 1 parm
 41711 00009914 [9C97]                  	dw	FILE_REQUIRED		;control struc for filename
 41712 00009916 00                      	db	0			;no switches
 41713 00009917 00                      	db	0			;no keywords
 41714                                  
 41715                                  ; M003 ; End of changes for LoadHigh support
 41716                                  
 41717                                  TempVarName:
 41718 00009918 54454D503D00            	db	"TEMP=",0
 41719                                  
 41720                                  	; 16/04/2023 - Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 41721                                  ;TRANDATAEND:		; TRANGROUP:88C2h
 41722                                  
 41723                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41724                                  copycmd:
 41725 0000991E 434F5059434D443D        	db 'COPYCMD='
 41726                                  sCVFRoot:
 41727 00009926 5C44424C5350414345-     	db '\DBLSPACE.'
 41727 0000992F 2E                 
 41728                                  
 41729                                  ; ---------------------------------------------------------------------------
 41730                                  ; 20/07/2024 - Retro DOS v4.2 COMMAND.COM
 41731                                  %if 1
 41732 00009930 0D0A                    RD4CMD_VER_MSG:	db 0Dh,0Ah
 41733 00009932 526574726F20444F53-     		db 'Retro DOS v4.2 COMMAND.COM'
 41733 0000993B 2076342E3220434F4D-
 41733 00009944 4D414E442E434F4D   
 41734 0000994C 0D0A                    		db 0Dh,0Ah 
 41735 0000994E 32303234202D204572-     		db '2024 - Erdogan Tan'
 41735 00009957 646F67616E2054616E 
 41736 00009960 0D0A                    		db 0Dh,0Ah
 41737 00009962 24                      		db '$'
 41738                                  %endif
 41739                                  ; ---------------------------------------------------------------------------
 41740                                  
 41741                                  	; 18/06/2023
 41742                                  	; MSDOS 6.22 COMMAND.COM
 41743                                  TRANDATAEND:		; TRANGROUP:9E53h
 41744                                  
 41745                                  ;============================================================================
 41746                                  ; PSDATA.INC, MSDOS 6.0, 1991
 41747                                  ;============================================================================
 41748                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41749                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41750                                  
 41751                                  ; 18/04/2023
 41752                                  TRANSPACESTART:
 41753                                  
 41754                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:88C2h
 41755                                  	
 41756                                  	; 18/06/2023
 41757                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9E53h
 41758                                  
 41759                                  ;********************** Local Data *************************************
 41760                                  
 41761                                  $P_ORDINAL:
 41762 00009963 0000                    	dw	0		;AN000; Operand ordinal save area
 41763                                  $P_RC:
 41764 00009965 0000                    	dw	0		;AN000; Return code from parser
 41765                                  $P_SI_Save:
 41766 00009967 0000                    	dw	0		;AN000; Pointer of command buffer
 41767                                  $P_DX:
 41768 00009969 0000                    	dw	0		;AN000; Return result buffer address
 41769                                  $P_Terminator:
 41770 0000996B 00                      	db	0		;AN000; Terminator code (ASCII)
 41771                                  $P_DBCSEV_OFF:
 41772 0000996C 0000                    	dw	0		;AN000; Offset of DBCS EV
 41773                                  $P_DBCSEV_SEG:
 41774 0000996E 0000                    	dw	0		;AN000; Segment of DBCS EV
 41775                                  $P_Flags:			;AN000; Parser internal flags
 41776                                  $P_Flags1:
 41777 00009970 00                      	db	0		;AN038; to reference first byte flags
 41778                                  $P_Flags2:
 41779 00009971 00                      	db	0		;AN038; to reference second byte flags only
 41780                                  $P_SaveSI_Cmpx:
 41781 00009972 0000                    	dw	0		;AN000; save si for later use by complex
 41782                                  $P_KEYorSW_Ptr:
 41783 00009974 0000                    	dw	0		;AN000; points next to "=" or ":" code
 41784                                  $P_Save_EOB:
 41785 00009976 0000                    	dw	0		;AN000; save pointer to EOB
 41786                                  $P_Found_SYNONYM:
 41787 00009978 0000                    	dw	0		;AN000; es:@ points to found synonym
 41788                                  $P_STRING_BUF:
 41789 0000997A 00<rep 80h>             	times  128 db 0		;AN000; Pick a operand from command line
 41790                                  $P_ORIG_ORD:
 41791 000099FA 0000                    	dw	0		;AN039; ORIGINAL ORDINAL FROM CX
 41792                                  $P_ORIG_STACK:
 41793 000099FC 0000                    	dw	0		;AN039; ORIGINAL VALUE OF STACK FROM SP
 41794                                  $P_ORIG_SI:
 41795 000099FE 0000                    	dw	0		;AN039; ORIGINAL START PARSE POINTER FROM SI
 41796                                  $P_Got_Time:
 41797 00009A00 00                      	db	0		;AN023; if 1, use Time delimiters
 41798                                  $P_Country_Info:
 41799 00009A01 FFFF                    	dw	-1 ; 0FFFFh
 41800 00009A03 00<rep 20h>             	times	32 db 0	
 41801                                  $P_1st_Val:
 41802 00009A23 0000                    	dw	0		;AN000; used when process date or time
 41803                                  $P_2nd_Val:
 41804 00009A25 0000                    	dw	0		;AN000; used when process date or time
 41805                                  $P_3rd_Val:
 41806 00009A27 0000                    	dw	0		;AN000; used when process date or time
 41807                                  $P_4th_Val:
 41808 00009A29 0000                    	dw	0		;AN000; used when process date or time
 41809                                  $P_Char_CAP_Ptr:
 41810 00009A2B FF                      	db	0FFh		;AN000; info id
 41811 00009A2C 0000                    	dw	0		;AN000; offset	of char case map table
 41812 00009A2E 0000                    	dw	0		;AN000; segment of char case map table
 41813                                  $P_File_CAP_Ptr:
 41814 00009A30 FF                      	db	0FFh		;AN000; info id
 41815 00009A31 0000                    	dw	0		;AN000; offset	of file case map table
 41816 00009A33 0000                    	dw	0		;AN000; segment of file case map table
 41817                                  
 41818                                  	; 18/04/2023
 41819                                  ;M029
 41820                                  ;!!!WARNING!!!
 41821                                  ; In routine SYSPARSE (parse.asm), $P_FileSp_Char is reinitialized using 
 41822                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 41823                                  ;changes need to be made in SYSPARSE
 41824                                  
 41825                                  $P_FileSp_Char:
 41826 00009A35 5B5D7C3C3E2B3D3B22      	db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 41827                                  $P_FileSp_Len equ $-$P_FileSp_Char ;AN000;
 41828                                  
 41829                                  ;filespec error flag
 41830                                  $P_err_flag:
 41831 00009A3E 00                      	db	0		;AN033; flag set if filespec parsing error
 41832                                  				;AN033;  was detected.
 41833                                  
 41834                                  ;============================================================================
 41835                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 41836                                  ;============================================================================
 41837                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41838                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41839                                  
 41840                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:899Eh
 41841                                  
 41842                                  	; 18/06/2023
 41843                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9F2Fh
 41844                                  
 41845                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 41846                                  ;;
 41847                                  ;; STRUCTURE: $M_RES_ADDRS
 41848                                  ;;
 41849                                  ;; Resident data area definition of variables
 41850                                  ;;
 41851                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 41852                                  
 41853                                  $M_RT:
 41854 00009A3F 00<rep 8Dh>             	times $M_RES_ADDRS_SZ db 0   ; times 141 db 0
 41855                                  
 41856                                  ;============================================================================
 41857                                  ; COPYRIGHT.INC, MSDOS 6.0, 1993
 41858                                  ;============================================================================
 41859                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41860                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41861                                  
 41862                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8A2Bh
 41863                                  ; ---------------------------------------------------------------------------
 41864                                  ;;M00 - changed to DOS 5.0 copyright - MD 9 Jul 90
 41865                                  ;;M031 - changed copyright to 1991
 41866                                  ;;9/16 - changed version to 6.0 and copyright to 1992
 41867                                  ;;9/21 - Added international translations, language passed through COUNTRY macro
 41868                                  ;;B49,50 - changed version to 6 and copyright to 1993
 41869                                  ; ---------------------------------------------------------------------------
 41870                                  	
 41871                                  	; 18/06/2023
 41872                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9FBCh
 41873                                  ;ifdef USA
 41874                                  MsDosVer6_CCopy:
 41875                                  	; MSDOS 6.0
 41876                                  	;db	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
 41877                                  	; 18/06/2023
 41878                                  	; MSDOS 6.22
 41879 00009ACC 4D5320444F53205665-     	db	"MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp "
 41879 00009AD5 7273696F6E20362028-
 41879 00009ADE 4329436F7079726967-
 41879 00009AE7 687420313938312D31-
 41879 00009AF0 393934204D6963726F-
 41879 00009AF9 736F667420436F7270-
 41879 00009B02 20                 
 41880 00009B03 4C6963656E73656420-     	db	"Licensed Material - Property of Microsoft "
 41880 00009B0C 4D6174657269616C20-
 41880 00009B15 2D2050726F70657274-
 41880 00009B1E 79206F66204D696372-
 41880 00009B27 6F736F667420       
 41881 00009B2D 416C6C207269676874-     	db	"All rights reserved "
 41881 00009B36 732072657365727665-
 41881 00009B3F 6420               
 41882                                  ;endif
 41883                                  
 41884                                  ; ---------------------------------------------------------------------------
 41885                                  ; 18/06/2023
 41886                                  ; 15/04/2023
 41887                                  ;MsDosVer5_CCopy:
 41888                                  	;db	"MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp "
 41889                                  	;db	"Licensed Material - Property of Microsoft "
 41890                                  	;db	"All rights reserved "
 41891                                  ; ---------------------------------------------------------------------------
 41892                                  ; 15/04/2023
 41893                                  	; 16/04/2023 - 21/04/2023
 41894                                  	;db 	0
 41895                                  	;db	0Dh,0Ah
 41896                                  	;db	'Retro DOS v4.0 (& v4.1) COMMAND.COM '
 41897                                  	;db	0
 41898                                  	;db	'by Erdogan Tan - 05/05/2023'
 41899                                  	;db	0
 41900                                  
 41901                                  	; 19/06/2023
 41902                                  	; 18/06/2023
 41903                                  	;db 	0
 41904                                  	;db	0Dh,0Ah
 41905                                  	;db	'Retro DOS v4.2 COMMAND.COM '
 41906                                  	;db	0
 41907                                  	;db	'by Erdogan Tan - 19/6/2023'
 41908                                  	;db	0
 41909                                  
 41910                                  ;============================================================================
 41911                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 41912                                  ;============================================================================
 41913                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41914                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41915                                  
 41916                                  PRINTF_HANDLE:
 41917 00009B41 0000                    	dw	0		;AC000;
 41918                                  
 41919                                  ;============================================================================
 41920                                  ; TSPC.ASM, MSDOS 6.0, 1991
 41921                                  ;============================================================================
 41922                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41923                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 41924                                  
 41925                                  ;TITLE	COMMAND Transient Uninitialized DATA
 41926                                  
 41927                                  ;The TRANSPACE segment contains variable data that is considered
 41928                                  ;volatile between command cycles, and therefore is not included in the
 41929                                  ;transient checksum area. Contents of these variables MUST be
 41930                                  ;initialized before use, and must not be relied upon from command
 41931                                  ;cycle to command cycle.
 41932                                  ;
 41933                                  ;No constant data values should be stored here.
 41934                                  
 41935                                  ; ---------------------------------------------------------------------------
 41936                                  ; START OF UNITIALIZED DATA
 41937                                  ; ---------------------------------------------------------------------------
 41938                                  
 41939                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8AA5h
 41940                                  
 41941                                  	; 18/06/2023
 41942                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A033h
 41943                                  
 41944 00009B43 00<rep 57h>             SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 41945 00009B9A 00<rep 57h>             TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 41946 00009BF1 00<rep 83h>             UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 41947 00009C74 00<rep 83h>             COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 41948 00009CF7 00<rep 46h>             USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 41949 00009D3D 00<rep 83h>             EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 41950 00009DC0 00<rep 53h>             RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 41951                                  
 41952                                  ; Variables passed up from resident	; in the Resident portion: (initial values)	
 41953                                  HEADCALL:
 41954 00009E13 0000                    	dw 0			; TRANVARS  (dw THEADFIX)
 41955 00009E15 0000                    RESSEG:	dw 0			; MYSEG     (dw 0) 	 	
 41956 00009E17 0000                    TPA:	dw 0			; LTPA	    (dw 0)	
 41957                                  SWITCHAR:
 41958 00009E19 00                      	db 0			; RSWITCHAR (db '-')
 41959                                  DIRCHAR:
 41960 00009E1A 00                      	db 0			; RDIRCHAR  (db '/')
 41961                                  EXEC_ADDR:
 41962 00009E1B 00000000                	dd 0			; 	    (dw EXT_EXEC)	 
 41963                                  				; MYSEG1    (dw 0)	
 41964                                  RCH_ADDR:
 41965 00009E1F 00000000                	dd 0			;	    (dw TREMCHECK) 	
 41966                                  				; MYSEG2    (dw 0)	
 41967 00009E23 0000                    	dw 0			; RESTEST   (dw 0)	
 41968                                  TRAN_TPA:
 41969 00009E25 0000                    	dw 0			; RES_TPA   (dw 0)	
 41970                                  
 41971 00009E27 00                      CHKDRV:	db 0
 41972                                  IFNOTFLAG:
 41973                                  FILTYP:
 41974 00009E28 00                      RDEOF:	db 0			; Misc flags
 41975 00009E29 00                      CURDRV:	db 0
 41976                                  PARM1:
 41977 00009E2A 00                      Concat:	db 0
 41978                                  PARM2:
 41979 00009E2B 00                      ArgC:	db 0
 41980 00009E2C 0000                    COMSW:	dw 0			; Switches between command and 1st arg
 41981 00009E2E 0000                    ARG1S:	dw 0			; Switches between 1st and 2nd arg
 41982                                  ARG2S:				; Switches after 2nd arg		
 41983                                  DestSwitch:
 41984 00009E30 0000                    	dw 0
 41985                                  ARGTS:
 41986                                  AllSwitch:
 41987 00009E32 0000                    	dw 0			; ALL switches except for COMSW
 41988 00009E34 00                      CFLAG:	db 0
 41989                                  DestClosed:
 41990                                  SPECDRV:
 41991 00009E35 00                      	db 0
 41992 00009E36 0000                    BYTCNT:	dw 0			; Size of buffer between RES and TRANS
 41993                                  
 41994                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41995                                  ;ifdef DBLSPACE_HOOKS
 41996                                  savBytCnt: ; MSDOS 6.0
 41997 00009E38 0000                    	dw 0
 41998                                  ;endif
 41999                                  	
 42000 00009E3A 0000                    NXTADD:	dw 0
 42001                                  FRSTSRCH:
 42002 00009E3C 00                      	db 0
 42003                                  ; 15/04/2023
 42004                                  LeftOnLine:
 42005 00009E3D 00                      	db 0			; entries left on line u.b. DIR
 42006                                  PerLine:
 42007 00009E3E 00                      	db 0			; entries/line u.b. DIR
 42008 00009E3F 00                      LINCNT:	db 0
 42009 00009E40 00                      LINLEN:	db 0
 42010                                  LeftOnPage:
 42011 00009E41 0000                    	dw 0			; lines left on page u.b. DIR
 42012                                  FileCnt:
 42013 00009E43 0000                    	dw 0			; file count u.b. DIR
 42014                                  FileSiz:
 42015 00009E45 00000000                	dd 0			; file size u.b. DIR
 42016                                  
 42017                                  ; Note: keep FileCntTotal through csecUsedTotal together!
 42018                                  
 42019                                  FileCntTotal:
 42020 00009E49 00000000                	dd 0			; total file count u.b. DIR
 42021                                  FileSizTotal:
 42022 00009E4D 00000000                	dd 0			; total file size u.b. DIR
 42023                                  
 42024                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 42025                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A33Fh
 42026                                  	; MSDOS 6.0
 42027                                  ;ifdef DBLSPACE_HOOKS
 42028                                  ccluUsed:
 42029 00009E51 0000                    	dw 0			; count of DOS clusters used
 42030                                  ccluUsedDir:
 42031 00009E53 0000                    	dw 0			
 42032                                  ccluUsedTotal:
 42033 00009E55 0000                    	dw 0			
 42034                                  csecUsed:
 42035 00009E57 00000000                	dd 0			; count of comp sectors used
 42036                                  csecUsedDir:
 42037 00009E5B 00000000                	dd 0			
 42038                                  csecUsedTotal:
 42039 00009E5F 00000000                	dd 0			
 42040                                  
 42041                                  ; Note:  keep FileCntTotal through csecUsedTotal together!
 42042                                  
 42043                                  fhCVF:
 42044 00009E63 0000                    	dw 0			; Compressed Volume File handle
 42045                                  szCVF:
 42046 00009E65 00<rep 10h>             	times	16 db 0		; "X:\\12345678.123\0"
 42047                                  MDBPB:
 42048                                  	;MD_BPB	<>		; Extended MagicDrv BPB
 42049 00009E75 00<rep 40h>             	times	64 db 0
 42050                                  csecPerCluster:
 42051 00009EB5 00                      	db 0			; sectors/cluster for ratio calc
 42052                                  fUseHostSize:
 42053 00009EB6 00                      	db 0			; NZ if using host cluster size
 42054                                  cFATEntries:
 42055 00009EB7 0000                    	dw 0			; # FAT entries in buffers
 42056                                  entInBuf:
 42057 00009EB9 0000                    	dw 0			; 1st entry # in FAT buffers
 42058                                  segFATBuf:
 42059 00009EBB 0000                    	dw 0			; seg of DOS & MD FAT buffers
 42060                                  pbufDOSFAT:
 42061 00009EBD 0000                    	dw 0			; off of DOS FAT buffer
 42062                                  pbufMDFAT:
 42063 00009EBF 0000                    	dw 0			; off of MD FAT buffer
 42064                                  bufDOSFAT:
 42065                                  	;times (cRES_FAT_ENTRIES*2) db 0
 42066 00009EC1 00<rep 40h>             	times 64 db 0	 	; small DOS FAT buffer
 42067                                  bufMDFAT:
 42068                                  	;times (cRES_FAT_ENTRIES*4) db 0
 42069 00009F01 00<rep 80h>             	times 128 db 0		; small MD FAT buffer
 42070                                  ;endif
 42071                                  
 42072                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8DAFh
 42073                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A46Fh
 42074                                  CHARBUF:
 42075 00009F81 00<rep 50h>             	times	80 db 0		;line byte character buffer for xenix write
 42076                                  DESTFCB2:
 42077 00009FD1 00                      IDLEN:	db 0
 42078 00009FD2 00<rep 8h>              ID:	times	8  db 0
 42079 00009FDA 00<rep 3h>              COM:	times	3  db 0 
 42080 00009FDD 00<rep 25h>             DEST:	times	37 db 0
 42081                                  DESTNAME:
 42082 0000A002 00<rep Bh>              	times	11 db 0
 42083                                  DESTDIR:
 42084                                  DestFcb:
 42085 0000A00D 00<rep 43h>             	times DIRSTRLEN db 0 ; 67 ; Directory for PATH searches
 42086                                  GOTOLEN: ; word
 42087                                  BWDBUF:  ; byte
 42088                                  EXEFCB:  ; word
 42089 0000A050 00<rep 46h>             DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 42090                                  
 42091                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 42092                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 42093                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 42094                                  DIRBUF_FDATE   equ DIRBUF+32  ; word	
 42095                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 42096                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 42097                                  
 42098                                  	; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42099                                  
 42100                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42101                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A584h
 42102                                  SDIRBUF:
 42103 0000A096 00<rep Ch>              	times 12 db 0	
 42104                                  _Bits:
 42105 0000A0A2 0000                    	dw 0
 42106                                  PathCnt:
 42107 0000A0A4 0000                    	dw 0
 42108                                  PathPos:
 42109 0000A0A6 0000                    	dw 0
 42110 0000A0A8 0000                    PathSw:	dw 0
 42111                                  AttrSpecified:
 42112 0000A0AA 00                      	db 0			; attribute bits u.b. DIR
 42113                                  AttrSelect:
 42114 0000A0AB 00                      	db 0			; attribute bits u.b. DIR
 42115 0000A0AC 00                      comma:	db 0			; flag set if +,, occurs
 42116                                  plus_comma:
 42117 0000A0AD 00                      	db 0			; flag set if +,, occurs
 42118                                  DirFlag:
 42119 0000A0AE 00                       	db 0			;AN015; set when pathcrunch called from DIR
 42120                                  parse_last:
 42121 0000A0AF 0000                    	dw 0			;AN018; used to hold parsing position
 42122                                  system_cpage:
 42123 0000A0B1 0000                    	dw 0			;AC001; used for CHCP variable
 42124                                  Arg_Buf:
 42125 0000A0B3 00<rep 80h>             	times 128 db 0	
 42126                                  File_Size_Low:
 42127 0000A133 0000                    	dw 0	
 42128                                  File_Size_High:
 42129 0000A135 0000                    	dw 0		
 42130                                  string_ptr_2:
 42131 0000A137 0000                    	dw 0	
 42132                                  Copy_num:
 42133 0000A139 0000                    	dw 0
 42134                                  cpyflag:
 42135 0000A13B 00                      	db 0
 42136                                  Dir_Num:
 42137 0000A13C 0000                    	dw 0
 42138                                  
 42139                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42140                                  	; MSDOS 6.0
 42141                                  ;ifdef DBLSPACE_HOOKS
 42142                                  Dir_CRatio_1:
 42143 0000A13E 00                      	db 0
 42144                                  Dir_CRatio_2:
 42145 0000A13F 00                      	db 0
 42146                                  ;endif
 42147                                  
 42148                                  Bytes_Free:
 42149 0000A140 00000000                	dd 0
 42150                                  
 42151                                  Major_Ver_Num:
 42152 0000A144 0000                    	dw 0
 42153                                  Minor_Ver_Num:
 42154 0000A146 0000                    	dw 0
 42155                                  
 42156                                  One_Char_Val:
 42157 0000A148 00                      	db 0
 42158 0000A149 00                      	db 0
 42159                                  vol_drv:
 42160 0000A14A 00                      	db 0
 42161                                  ROM_CALL:
 42162 0000A14B 00                      	db 0			; flag for rom function
 42163 0000A14C 0000                    ROM_IP:	dw 0
 42164 0000A14E 0000                    ROM_CS:	dw 0
 42165                                  
 42166                                  DestVars:
 42167                                  DestIsDir:
 42168 0000A150 00                      	db 0
 42169                                  DestSiz:
 42170 0000A151 00                      	db 0
 42171                                  DestTail:
 42172 0000A152 0000                    	dw 0
 42173                                  DestInfo:
 42174 0000A154 00                      	db 0
 42175                                  DestBuf:
 42176 0000A155 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42177                                  EndDestBuf:
 42178                                  DESTHAND:
 42179 0000A1AC 0000                    	dw 0
 42180                                  DESTISDEV:
 42181 0000A1AE 00                      	db 0
 42182                                  FIRSTDEST:
 42183 0000A1AF 00                      	db 0
 42184                                  MELCOPY:
 42185 0000A1B0 00                      	db 0
 42186                                  MELSTART:
 42187 0000A1B1 0000                    	dw 0
 42188                                  SrcVars:
 42189                                  SrcIsDir:
 42190 0000A1B3 00                      	db 0
 42191 0000A1B4 00                      SrcSiz:	db 0
 42192                                  SrcTail:
 42193 0000A1B5 0000                    	dw 0
 42194                                  SrcInfo:
 42195 0000A1B7 00                      	db 0
 42196                                  SrcBuf:
 42197 0000A1B8 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42198                                  SRCHAND:
 42199 0000A20F 0000                    	dw 0
 42200                                  SRCISDEV:
 42201 0000A211 00                      	db 0
 42202                                  ScanBuf:
 42203 0000A212 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 42204                                  
 42205 0000A269 0000                    SRCPT:	dw 0
 42206                                  INEXACT:
 42207 0000A26B 00                      	db 0
 42208                                  NOWRITE:
 42209 0000A26C 00                      	db 0
 42210                                  BINARY:
 42211 0000A26D 00                      	db 0
 42212                                  WRITTEN:
 42213 0000A26E 0000                    	dw 0
 42214                                  TERMREAD:
 42215 0000A270 00                      	db 0
 42216 0000A271 00                      ASCII:	db 0
 42217 0000A272 00                      PLUS:	db 0
 42218 0000A273 00                      objcnt:	db 0			; Used in copy
 42219 0000A274 0000                    CPDATE:	dw 0
 42220 0000A276 0000                    CPTIME:	dw 0
 42221                                  
 42222                                  OFilePtr_Lo:
 42223 0000A278 0000                    	dw 0			; original file ptr for COPY when
 42224                                  OFilePtr_Hi:
 42225 0000A27A 0000                    	dw 0			; 1st source is also destination
 42226 0000A27C 00                      OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 42227                                  
 42228                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42229                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A76Bh
 42230                                  cox_sublist_buff:
 42231 0000A27D 00<rep Bh>              	times 11 db 0
 42232                                  cox_y_override:
 42233 0000A288 00                      	db 0
 42234                                  cox_dest_file:
 42235 0000A289 00                      	db 0
 42236                                  cox_src_file:
 42237 0000A28A 00                      	db 0
 42238                                  
 42239                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0A779h)
 42240                                  BATHAND:
 42241 0000A28B 0000                    	dw 0			; Batch handle
 42242                                  STARTEL:
 42243 0000A28D 0000                    	dw 0
 42244 0000A28F 00                      ELCNT:	db 0
 42245 0000A290 00                      ELPOS:	db 0
 42246                                  
 42247                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 42248                                  ; MSDOS 5.0
 42249                                  SKPDEL:
 42250                                  	; 18/06/2023
 42251 0000A291 00                      	db 0	; MSDOS 6.22 (& MSDOS 5.0)  	
 42252 0000A292 00<rep Bh>              SOURCE:	times 11 db 0
 42253                                  
 42254                                  ext_entered:
 42255 0000A29D 00                      	db 0			;AN005;
 42256                                  
 42257                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:90BCh
 42258                                  
 42259                                  Display_Ioctl:
 42260 0000A29E 00                      	db 0			;AN000; info level
 42261 0000A29F 00                      	db 0			;AN000; reserved
 42262 0000A2A0 0E00                    	dw crt_ioctl_ln		;AN000; length of data
 42263 0000A2A2 0000                    	dw 0			;AN000; control flags
 42264                                  display_mode:
 42265 0000A2A4 00                      	db 0			;AN000; display mode, colors
 42266 0000A2A5 00                      	db 0			;AN000; reserved
 42267 0000A2A6 0000                    	dw 0			;AN023; colors
 42268 0000A2A8 0000                    	dw 0			;AN000; display width (PELS)
 42269 0000A2AA 0000                    	dw 0			;AN000; display length (PELS)
 42270                                  display_width:
 42271 0000A2AC 0000                    	dw 0			;AN000; display width
 42272                                  LinPerPag:
 42273 0000A2AE 1900                    	dw LINESPERPAGE	; 25	;AN000; display length (default to linesperpage)
 42274                                  
 42275                                  vol_ioctl_buf:			;AN000; buffer for ioctl volume label/serial call
 42276 0000A2B0 0000                    	dw 0			;AN000; info level
 42277                                  vol_serial:
 42278 0000A2B2 00000000                	dd 0			;AN000; volume serial number
 42279                                  vol_label:
 42280 0000A2B6 20<rep Bh>              	times 11 db 20h ; " "	;AN000; volume label - init to blanks
 42281 0000A2C1 20<rep 8h>              	times 8  db 20h ; " "	;AN000; file system type
 42282                                  
 42283                                  expand_star:
 42284 0000A2C9 00                      	db 0
 42285                                  
 42286                                  msg_flag:
 42287 0000A2CA 00                      	db 0			;AN022; flag set if non-utility message issued
 42288                                  Msg_Numb:
 42289 0000A2CB 0000                    	dw 0			;AN022; set with extended error message issued
 42290                                  append_exec:
 42291 0000A2CD 00                      	db 0			;AN041; set if internal append executed
 42292                                  print_err_flag:
 42293 0000A2CE 0000                    	dw 0			;AN000; flag set if error during sysdispmsg
 42294                                  subst_buffer:
 42295 0000A2D0 00<rep 16h>             	times parm_block_size*2 db 0 ; times 22 db 0 
 42296                                  				;AN061;
 42297                                  ; 15/04/2023
 42298 0000A2E6 00                      KPARSE:	db 0	; 3/3/KK	
 42299                                  
 42300                                  ; Data declarations taken out of parse.asm
 42301                                  
 42302                                  ; MSDOS 6.0
 42303                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 42304                                  ;argbufptr	dw	?		; index for argv[].argpointer
 42305                                  ;tpbuf		db	128 DUP (?)	; temporary buffer
 42306                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 42307                                  ;comptr		dw	?		; ptr into combuf
 42308                                  
 42309                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9105h
 42310                                  
 42311                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42312                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A7D5h
 42313                                  ARG:
 42314                                  ARG_ARGV:
 42315                                  ARGV0_ARGPOINTER:
 42316 0000A2E7 0000                    	dw 0	; ARGV[0]
 42317                                  ARGV0_ARG_FLAGS:
 42318 0000A2E9 00                      	db 0
 42319                                  ARGV0_ARGSTARTEL:
 42320 0000A2EA 0000                    	dw 0
 42321                                  ARGV0_ARGLEN:
 42322 0000A2EC 0000                    	dw 0
 42323                                  ARGV0_ARGSW_WORD:
 42324 0000A2EE 0000                    	dw 0
 42325                                  ARGV0_OCOMPTR:
 42326 0000A2F0 0000                    	dw 0
 42327                                  ARGV1_ARGPOINTER:
 42328 0000A2F2 0000                    	dw 0	; ARGV[1]	
 42329 0000A2F4 00<rep 5h>              	times 5 db 0
 42330                                  ARGV1_ARGSW_WORD:
 42331 0000A2F9 0000                    	dw 0
 42332 0000A2FB 0000                    	dw 0
 42333                                  ARGV2_ARGPOINTER:
 42334 0000A2FD 0000                    	dw 0	; ARGV[2]
 42335 0000A2FF 00<rep 5h>              	times 5 db 0
 42336                                  ARGV2_ARGSW_WORD:
 42337 0000A304 0000                    	dw 0
 42338 0000A306 0000                    	dw 0
 42339 0000A308 00<rep 29Fh>            	times 671 db 0  ; ARGV[3] to ARGV[63]
 42340                                  ARG_ARGVCNT:
 42341 0000A5A7 0000                    	dw 0
 42342                                  ARG_ARGSWINFO:
 42343 0000A5A9 0000                    	dw 0
 42344                                  ARG_ARGBUF:
 42345 0000A5AB 0000<rep 100h>          	times 256 dw 0	; times ARGBLEN dw 0 
 42346                                  ARG_ARGFORCOMBUF:
 42347 0000A7AB 00<rep 80h>             	times 128 db 0  ; times COMBUFLEN db 0 
 42348                                  
 42349                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9649h
 42350                                  	; 18/06/2023
 42351                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0AD19h
 42352                                  ARGBUF_PTR:
 42353 0000A82B 0000                    	dw 0			; index for argv[].argpointer
 42354 0000A82D 00<rep 80h>             TPBUF:	times 128 db 0		; temporary buffer
 42355                                  LASTARG:
 42356 0000A8AD 0000                    	dw 0			; point at which to accumulate switch info
 42357 0000A8AF 0000                    COMPTR:	dw 0			; ptr into combuf
 42358                                  
 42359                                  ; Data declarations taken out of path.asm
 42360                                  ;fbuf	find_buf	<>		; dma buffer for findfirst/findnext
 42361                                  ;pathinfo	DW	3 DUP (?)	; ES, SI(old), and SI(new) of user path
 42362                                  ;psep_char	DB	?		; '/' or '\'
 42363                                  ;search_best	DB	(?)		; best code, best filename so far
 42364                                  ;fname_max_len	equ	13
 42365                                  ;search_best_buf DB	fname_max_len DUP (?)
 42366                                  ;search_curdir_buf DB	64 DUP (?)	; a place for CurDir info, if successful
 42367                                  ;search_error	DW	(?)		; address of error message to be printed
 42368                                  
 42369                                  FINDBUFLEN equ FIND_BUF.size ; 43
 42370                                  
 42371                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 96CFh
 42372                                  
 42373                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42374                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AD9Fh
 42375                                  
 42376 0000A8B1 00<rep 2Bh>             FBUF:	times FINDBUFLEN db 0	; times 43 db 0
 42377                                  FBUF_PNAME equ FBUF+30		; packed name, 13 bytes
 42378                                  pathinfo:
 42379                                  ;pathinfo_0:
 42380 0000A8DC 0000                    	dw 0
 42381                                  ;pathinfo_2:
 42382 0000A8DE 0000                    	dw 0
 42383                                  ;pathinfo_4:
 42384 0000A8E0 0000                    	dw 0
 42385                                  psep_char:
 42386 0000A8E2 00                      	db 0
 42387                                  search_best:
 42388 0000A8E3 00                      	db 0
 42389                                  FNAME_MAX_LEN equ 13
 42390                                  search_best_buf:
 42391 0000A8E4 00<rep Dh>              	times FNAME_MAX_LEN db 0 ; times 13 db 0
 42392                                  search_curdir_buf:
 42393 0000A8F1 00<rep 40h>             	times 64 db 0
 42394                                  search_error:
 42395 0000A931 0000                    	dw 0
 42396                                  
 42397                                  ; Data declarations taken out of tbatch.asm
 42398                                  
 42399                                  ;if_not_count	DW	?
 42400                                  ;
 42401                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 42402                                  ;
 42403                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 42404                                  
 42405                                  ; 31/03/2023
 42406                                  ;STACK:	;LABEL	WORD
 42407                                  
 42408                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9751h
 42409                                  
 42410                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42411                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AE21h
 42412                                  
 42413                                  IF_NOT_COUNT:
 42414 0000A933 0000                    	dw 0
 42415 0000A935 00                      zflag:	db 0
 42416                                  
 42417                                  align 2	; 18/06/2023
 42418                                  
 42419 0000A936 00<rep 100h>            	times 256 db 0 
 42420                                  
 42421                                  	; 16/04/2023
 42422                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:9854h
 42423                                  
 42424                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 42425                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AF24h
 42426                                  STACK:
 42427                                  
 42428                                  ;INTERNATVARS	internat_block <>
 42429                                  ;	db	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 42430                                  
 42431                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9854h
 42432                                  INTERNATVARS:
 42433                                  		; (24+8 = 32 bytes)
 42434                                  DATE_TIME_FORMAT:
 42435 0000AA36 0000                    	dw 0			; 0-USA, 1-EUR, 2-JAP
 42436                                  CURRENCY_SYM:
 42437 0000AA38 0000000000              	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 42438                                  THOUS_SEP:
 42439 0000AA3D 0000                    	db 0,0			; Thousands separator 2 bytes
 42440                                  DECIMAL_SEP:
 42441 0000AA3F 0000                    	db 0,0			; Decimal separator 2 bytes
 42442                                  DATE_SEP:
 42443 0000AA41 0000                    	db 0,0			; Date separator 2 bytes
 42444                                  TIME_SEP:
 42445 0000AA43 0000                    	db 0,0			; Time separator 2 bytes	
 42446                                  BIT_FIELD:
 42447 0000AA45 00                      	db 0			; Bit values
 42448                                  				;   Bit 0 = 0 if currency symbol first
 42449                                  				;	  = 1 if currency symbol last
 42450                                  				;   Bit 1 = 0 if No space after currency symbol
 42451                                  				;	  = 1 if space after currency symbol
 42452                                  CURRENCY_CENTS:
 42453 0000AA46 00                      	db 0			; Number of places after currency dec point
 42454                                  TIME_24:
 42455 0000AA47 00                      	db 0			; 1 if 24 hour time, 0 if 12 hour time
 42456                                  MAP_CALL:
 42457 0000AA48 00000000                	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 42458                                  				; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 42459                                  				;  in pieces.
 42460                                  DATA_SEP:
 42461 0000AA4C 0000                    	db 0,0			; Data list separator character		
 42462                                  
 42463 0000AA4E 00<rep 8h>              	times 8 db 0
 42464                                  
 42465                                  ; Max size of the block returned by the INTERNATIONAL call
 42466                                  
 42467                                  INTERNAT_BLOCK_SIZE EQU	32
 42468                                  
 42469                                  ;;	Buffer for DOS function 64h (Get extended country information)
 42470                                  ;;	subfunctions 2, 4, 6, or 7:
 42471                                  ;
 42472                                  ;CountryPtrInfo	label	byte
 42473                                  ;CountryPtrId	db	?
 42474                                  ;CountryPtr	dd	?
 42475                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 42476                                  	
 42477                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9874h
 42478                                  CountryPtrInfo:
 42479                                  CountryPtrId:	
 42480 0000AA56 00                      	db 0
 42481                                  CountryPtr:
 42482 0000AA57 00000000                	dd 0
 42483                                  
 42484                                  OldCtrlCHandler:
 42485 0000AA5B 00000000                	dd 0			; previous int 23 vector		
 42486                                  
 42487                                  BATLEN equ 32
 42488                                  
 42489                                  BATBUFPOS:
 42490 0000AA5F 0000                    	dw 0			; integer position in buffer of next byte
 42491                                  
 42492 0000AA61 00<rep 20h>             BATBUF:	times BATLEN db 0 ; times 32 db 0
 42493                                  BATBUFEND:
 42494 0000AA81 0000                    	dw 0
 42495                                  TypeFilSiz:
 42496 0000AA83 00000000                	dd 0			; stores size of file to be typed
 42497                                  
 42498                                  ; *****************************************************
 42499                                  ; EMG 4.00
 42500                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 42501                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 42502                                  ; *****************************************************
 42503                                  ;
 42504                                  ; COMMON PARSE OUTPUT BLOCKS
 42505                                  
 42506                                  ; Common output blocks for PARSE number, complex, or string values.
 42507                                  
 42508                                  PARSE1_OUTPUT:
 42509                                  PARSE1_TYPE:
 42510 0000AA87 00                      	db 0			;AN000;  type
 42511                                  PARSE1_CODE:
 42512 0000AA88 00                      	db 0			;AN000;  return value
 42513                                  PARSE1_SYN:
 42514 0000AA89 0000                    	dw 0			;AN000;  es offset of synonym
 42515                                  PARSE1_ADDR:
 42516 0000AA8B 00000000                	dd 0			;AN000;  numeric value / address
 42517                                  				;	 of string value
 42518                                  
 42519                                  ;  Common output block for PARSE date strings.
 42520                                  
 42521                                  DATE_OUTPUT:
 42522                                  DATE_TYPE:
 42523 0000AA8F 00                      	db 0			;AN000;  type
 42524 0000AA90 00                      	db 0			;AN000;  return value
 42525 0000AA91 0000                    	dw 0			;AN000;  es offset of synonym
 42526                                  DATE_YEAR:
 42527 0000AA93 0000                    	dw 0			;AN000;  year
 42528                                  DATE_MONTH:
 42529 0000AA95 00                      	db 0			;AN000;  month
 42530                                  DATE_DAY:
 42531 0000AA96 00                      	db 0			;AN000;  day
 42532                                  
 42533                                  ;  Common output block for PARSE time strings.
 42534                                  
 42535                                  TIME_OUTPUT:
 42536                                  TIME_TYPE:
 42537 0000AA97 00                      	db 0			;AN000;  type
 42538 0000AA98 00                      	db 0			;AN000;  return value
 42539 0000AA99 0000                    	dw 0			;AN000;  es offset of synonym
 42540                                  TIME_HOUR:
 42541 0000AA9B 00                      	db 0			;AN000;  hour
 42542                                  TIME_MINUTES:
 42543 0000AA9C 00                      	db 0			;AN000;  minutes
 42544                                  TIME_SECONDS:
 42545 0000AA9D 00                      	db 0			;AN000;  seconds
 42546                                  TIME_FRACTION:
 42547 0000AA9E 00                      	db 0			;AN000;  hundredths
 42548                                  
 42549                                  ;  Common output block for PARSE drive specifier (one based drive number).
 42550                                  
 42551                                  DRIVE_OUTPUT:
 42552                                  DRIVE_TYPE:
 42553 0000AA9F 00                      	db 0			;AN000;  type
 42554                                  DRIVE_VALUE:
 42555 0000AAA0 00                      	db 0			;AN000;  return value
 42556 0000AAA1 0000                    	dw 0			;AN000;  es offset of synonym
 42557                                  DRIVE_NUMBER:
 42558 0000AAA3 00                      	db 0			;AN000;  drive number
 42559 0000AAA4 000000                  	db 0,0,0		;AN000;  reserved
 42560                                  
 42561                                  	; 18/04/2023
 42562                                  	; 16/04/2023
 42563                                  ;TRANSPACEEND:	; 98C5h
 42564                                  		; End of MSDOS 5.0 COMMAND.COM (1991) Transient portion
 42565                                  
 42566                                  	; 18/06/2023
 42567                                  ;TRANSPACEEND:	; 0AF95h 
 42568                                  		; End of MSDOS 6.22 COMMAND.COM (1994) Transient portion
 42569                                  
 42570                                  ; ----------------------------------------------------------------------------
 42571                                  ; 18/06/2023
 42572                                  ; 20/04/2023
 42573                                  TRANSPACEEND equ ($-TRANSIENTSTART)	; Transient portion size
