//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2013 Hex-Rays, <support@hex-rays.com>           |
// |                      Licensed to: Freeware version                      |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&GetCharPrm(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("80386r");
	SetCharPrm(INF_COMPILER, 0);
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	;
	SegCreate(0X100,0X2890,0,0,1,2);
	SegRename(0X100,"RESGROUP");
	SegClass (0X100,"RESGROUP");
	SegDefReg(0x100,"ds",0x0);
	SetSegmentType(0X100,2);
	SegCreate(0X2890,0XD32A,0X289,0,1,2);
	SegRename(0X2890,"TRANGROUP");
	SegClass (0X2890,"TRANGROUP");
	LowVoids(0x0);
	HighVoids(0xAA9A);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        BeginTypeUpdating(UTP_STRUCT);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0X100,	0,	"; File Name   : C:\\Users\\Erdoðan\\Desktop\\COMMAND.COM");
	ExtLinA		(0X100,	1,	"; Format      : MS-DOS COM-file");
	ExtLinA		(0X100,	2,	"; Base Address: 0h Range: 100h-D32Ah Loaded length: D22Ah");
	MakeCode	(0X100);
	MakeName	(0X100,	"start");
	MakeComm	(0X103,	"((major_version AND 0Fh) SHL 4) \n  OR (minor_version AND 0Fh)");
	MakeByte	(0X103);
	MakeName	(0X103,	"version");
	MakeWord	(0X104);
	MakeByte	(0X106);
	MakeArray	(0X106,	0XD);
	MakeStr		(0X113,	0X142);
	MakeName	(0X113,	"a@Ibm12_01_2003");
	MakeByte	(0X142);
	MakeArray	(0X142,	0X24);
	MakeDword	(x=0X166);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X166,	"Int2f_Entry");
	MakeDword	(x=0X16A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X16A,	"Int2e_Entry");
	MakeDword	(x=0X16E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X16E,	"Ctrlc_Entry");
	MakeDword	(x=0X172);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X172,	"CritErr_Entry");
	MakeDword	(0X176);
	MakeName	(0X176,	"Exec_Entry");
	MakeDword	(0X17A);
	MakeName	(0X17A,	"RemCheck_Entry");
	MakeDword	(0X17E);
	MakeName	(0X17E,	"TrnLodCom1_Entry");
	MakeDword	(0X182);
	MakeName	(0X182,	"LodCom_Entry");
	MakeDword	(0X186);
	MakeName	(0X186,	"MsgRetrv_Entry");
	MakeDword	(0X18A);
	MakeName	(0X18A,	"HeadFix_Entry");
	MakeDword	(0X18E);
	MakeName	(0X18E,	"UMBOff_Entry");
	MakeDword	(0X192);
	MakeName	(0X192,	"XMMCallAddr");
	MakeByte	(0X196);
	MakeName	(0X196,	"ComInHMA");
	MakeCode	(0X197);
	MakeName	(0X197,	"Int2f_Trap");
	MakeCode	(0X1A2);
	MakeName	(0X1A2,	"Int2e_Trap");
	MakeCode	(0X1AD);
	MakeName	(0X1AD,	"Ctrlc_Trap");
	MakeCode	(0X1B8);
	MakeName	(0X1B8,	"CritErr_Trap");
	MakeCode	(0X1C3);
	MakeName	(0X1C3,	"Exec_Trap");
	MakeCode	(0X1CD);
	MakeName	(0X1CD,	"RemCheck_Trap");
	MakeCode	(0X1D7);
	MakeName	(0X1D7,	"TrnLodCom1_Trap");
	MakeCode	(0X1E1);
	MakeName	(0X1E1,	"LodCom_Trap");
	MakeCode	(0X1EB);
	MakeName	(0X1EB,	"MsgRetrv_Trap");
	MakeCode	(0X1F5);
	MakeName	(0X1F5,	"HeadFix_Trap");
	MakeCode	(0X1FF);
	MakeName	(0X1FF,	"CheckA20");
	MakeComm	(0X208,	"QueryA20");
	MakeComm	(0X215,	"EnableA20");
	MakeCode	(0X224);
	MakeComm	(0X226,	"far jump opcode");
	MakeByte	(0X226);
	MakeName	(0X226,	"Carousel_i2f_Hook");
	MakeWord	(x=0X227);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X229);
	MakeName	(0X229,	"int2fh_segm");
	MakeCode	(0X22B);
	MakeName	(0X22B,	"UnHideUMBs");
	MakeCode	(0X236);
	MakeCode	(x=0X23C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X248);
	MakeName	(0X248,	"he_unlink");
	MakeComm	(0X24E,	"DOS_UMBLINK_SET");
	MakeCode	(x=0X24E);
	OpHex		(x,	1);
	MakeComm	(0X251,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X251);
	OpHex		(x,	0);
	MakeComm	(0X259,	"DOS_STRATEGY_SET");
	MakeCode	(x=0X259);
	OpHex		(x,	1);
	MakeComm	(0X25C,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X25C);
	OpHex		(x,	0);
	MakeCode	(0X25F);
	MakeName	(0X25F,	"FreeUMBs");
	MakeComm	(0X270,	"[es:arena_signature]");
	MakeComm	(0X27A,	"[es:arena_size]");
	MakeCode	(0X282);
	MakeCode	(0X285);
	MakeName	(0X285,	"isHideMCB");
	MakeComm	(0X286,	"[es:arena_owner],SystemPSPOwner");
	MakeComm	(0X292,	"'HI'");
	MakeComm	(0X29B,	"'DD'");
	MakeComm	(0X2A4,	"'EN'");
	MakeComm	(0X2AD,	"'  '");
	MakeComm	(0X2B2,	"[es:arena_owner]");
	MakeCode	(0X2B2);
	MakeName	(0X2B2,	"freeMCB");
	MakeComm	(0X2BC,	"[es:arena_name+0]");
	MakeComm	(0X2C8,	"[es:arena_name+6]");
	MakeCode	(0X2CD);
	MakeName	(0X2CD,	"HeadUmb");
	MakeCode	(x=0X2CE);
	OpHex		(x,	1);
	MakeComm	(0X2D0,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists");
	MakeCode	(x=0X2D0);
	OpHex		(x,	0);
	MakeComm	(0X2D2,	"[es:UMB_HeadIdx]");
	MakeCode	(0X2DE);
	MakeCode	(x=0X2E1);
	OpHex		(x,	1);
	MakeName	(0X2E1,	"linkumb");
	MakeComm	(0X2E4,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) get UMB link state");
	MakeCode	(x=0X2E4);
	OpHex		(x,	0);
	MakeComm	(0X2F0,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X2F0);
	OpHex		(x,	0);
	MakeComm	(0X2F3,	"DOS - ");
	MakeCode	(x=0X2F3);
	OpHex		(x,	0);
	MakeName	(0X2F3,	"Issue_Exec_Call");
	MakeComm	(0X2F8,	"RStack");
	MakeCode	(x=0X2F8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeStr		(0X306,	0X309);
	MakeName	(0X306,	"cox_location");
	MakeWord	(0X309);
	MakeName	(0X309,	"cox_Y_option");
	MakeByte	(0X30B);
	MakeName	(0X30B,	"BlkDevErrSubst");
	MakeWord	(0X30C);
	MakeName	(0X30C,	"BlkDevErrRw");
	MakeByte	(0X30E);
	MakeName	(0X30E,	"BadFatSubst");
	MakeWord	(x=0X30F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(x=0X311);
	OpChr		(x,	0);
	MakeName	(0X311,	"DrvLet");
	MakeByte	(0X312);
	MakeName	(0X312,	"CharDevErrSubst");
	MakeWord	(0X313);
	MakeName	(0X313,	"CharDevErrRw");
	MakeByte	(0X315);
	MakeWord	(x=0X316);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X318);
	MakeName	(0X318,	"NeedVolSubst");
	MakeWord	(x=0X319);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X31B);
	MakeWord	(x=0X31C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X31E);
	MakeWord	(x=0X31F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X321);
	MakeArray	(0X321,	0X3);
	MakeName	(0X321,	"VolName");
	MakeByte	(0X324);
	MakeArray	(0X324,	0X8);
	MakeName	(0X324,	"DevName");
	MakeByte	(0X32C);
	MakeDword	(0X32D);
	MakeName	(0X32D,	"VolSer");
	MakeByte	(0X331);
	MakeName	(0X331,	"CDevAt");
	MakeByte	(0X332);
	MakeName	(0X332,	"PutBackSubst");
	MakeWord	(0X333);
	MakeName	(0X333,	"PutBackComSpec");
	MakeByte	(0X335);
	MakeWord	(x=0X336);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X338);
	MakeName	(0X338,	"PutBackDrv");
	MakeByte	(0X339);
	MakeName	(0X339,	"ExecErrSubst");
	MakeComm	(0X33A,	"SafePathBuffer");
	MakeWord	(x=0X33A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X33C);
	MakeName	(0X33C,	"NeedVol");
	MakeByte	(0X340);
	MakeName	(0X340,	"ErrType");
	MakeDword	(0X341);
	MakeName	(0X341,	"Int_2e_Ret");
	MakeWord	(0X345);
	MakeName	(0X345,	"Save_Pdb");
	MakeWord	(0X347);
	MakeName	(0X347,	"Parent");
	MakeDword	(0X349);
	MakeName	(0X349,	"OldTerm");
	MakeWord	(0X34D);
	MakeName	(0X34D,	"ErrCd_24");
	MakeWord	(0X34F);
	MakeName	(0X34F,	"Handle01");
	MakeByte	(0X351);
	MakeName	(0X351,	"Loading");
	MakeWord	(0X352);
	MakeName	(0X352,	"Batch");
	MakeByte	(x=0X354);
	MakeArray	(x,	0X40);
	OpDecimal	(x,	0);
	MakeName	(0X354,	"ComSpec");
	MakeWord	(0X394);
	MakeName	(0X394,	"ComSpec_End");
	MakeWord	(x=0X396);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X396,	"Trans");
	MakeWord	(0X398);
	MakeName	(0X398,	"TrnSeg");
	MakeByte	(0X39A);
	MakeName	(0X39A,	"TrnMvFlg");
	MakeByte	(0X39B);
	MakeName	(0X39B,	"In_Batch");
	MakeByte	(0X39C);
	MakeName	(0X39C,	"Batch_Abort");
	MakeByte	(0X39D);
	MakeName	(0X39D,	"ComDrv");
	MakeWord	(0X39E);
	MakeName	(0X39E,	"MemSiz");
	MakeWord	(0X3A0);
	MakeName	(0X3A0,	"Sum");
	MakeByte	(0X3A2);
	MakeName	(0X3A2,	"ExtCom");
	MakeWord	(0X3A3);
	MakeName	(0X3A3,	"RetCode");
	MakeByte	(0X3A5);
	MakeName	(0X3A5,	"Crit_Err_Info");
	MakeByte	(0X3A6);
	MakeName	(0X3A6,	"EchoFlag");
	MakeByte	(0X3A7);
	MakeName	(0X3A7,	"Suppress");
	MakeWord	(0X3A8);
	MakeName	(0X3A8,	"Io_Save");
	MakeByte	(0X3AA);
	MakeName	(0X3AA,	"RestDir");
	MakeByte	(0X3AB);
	MakeName	(0X3AB,	"PermCom");
	MakeWord	(0X3AC);
	MakeName	(0X3AC,	"SemiPermCom");
	MakeWord	(0X3AE);
	MakeName	(0X3AE,	"SingleCom");
	MakeWord	(0X3B0);
	MakeName	(0X3B0,	"VerVal");
	MakeByte	(0X3B2);
	MakeName	(0X3B2,	"fFail");
	MakeByte	(0X3B3);
	MakeName	(0X3B3,	"IfFlag");
	MakeByte	(0X3B4);
	MakeName	(0X3B4,	"ForFlag");
	MakeWord	(0X3B5);
	MakeName	(0X3B5,	"ForPtr");
	MakeWord	(0X3B7);
	MakeName	(0X3B7,	"Nest");
	MakeByte	(0X3B9);
	MakeName	(0X3B9,	"Call_Flag");
	MakeByte	(0X3BA);
	MakeName	(0X3BA,	"Call_Batch_Flag");
	MakeWord	(0X3BB);
	MakeName	(0X3BB,	"Next_Batch");
	MakeByte	(0X3BD);
	MakeName	(0X3BD,	"NullFlag");
	MakeByte	(0X3BE);
	MakeArray	(0X3BE,	0X5);
	MakeName	(0X3BE,	"FUCase_Addr");
	MakeDword	(0X3C3);
	MakeName	(0X3C3,	"Dbcs_Vector_Addr");
	MakeWord	(0X3C7);
	MakeName	(0X3C7,	"Append_State");
	MakeByte	(0X3C9);
	MakeName	(0X3C9,	"Append_Flag");
	MakeByte	(0X3CA);
	MakeName	(0X3CA,	"Re_Out_App");
	MakeByte	(x=0X3CB);
	MakeArray	(x,	0X50);
	OpDecimal	(x,	0);
	MakeName	(0X3CB,	"Re_OutStr");
	MakeByte	(0X41B);
	MakeName	(0X41B,	"InitFlag");
	MakeByte	(0X41C);
	MakeName	(0X41C,	"PipeFlag");
	MakeByte	(0X41D);
	MakeName	(0X41D,	"PipeFiles");
	MakeCode	(0X41E);
	MakeName	(0X41E,	"EndInit");
	MakeComm	(0X438,	"SETBLOCK");
	MakeCode	(x=0X438);
	OpHex		(x,	1);
	MakeComm	(0X441,	"low memory first");
	MakeComm	(0X443,	"set allocation strategy");
	MakeCode	(x=0X443);
	OpHex		(x,	1);
	MakeComm	(0X446,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X446);
	OpHex		(x,	0);
	MakeComm	(0X448,	"environment segment");
	MakeCode	(x=0X448);
	MakeCode	(x=0X451);
	OpHex		(x,	1);
	MakeComm	(0X453,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X453);
	OpHex		(x,	0);
	MakeComm	(0X456,	"DEALLOC");
	MakeCode	(x=0X456);
	OpHex		(x,	1);
	MakeName	(0X456,	"skip_dealloc_env_seg");
	MakeComm	(0X458,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X458);
	OpHex		(x,	0);
	MakeName	(0X458,	"set_block");
	MakeComm	(0X468,	"((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16");
	MakeCode	(x=0X46B);
	OpHex		(x,	1);
	MakeComm	(0X46D,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X46D);
	OpHex		(x,	0);
	MakeComm	(0X47C,	"BATCHSEGMENT.SIZE");
	MakeCode	(x=0X47C);
	OpDecimal	(x,	1);
	MakeComm	(0X47F,	"BATCHSEGMENT.SIZE+16");
	MakeCode	(x=0X47F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X48C);
	OpHex		(x,	1);
	MakeComm	(0X48E,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X48E);
	OpHex		(x,	0);
	MakeComm	(0X490,	"(CS: prefix is not needed!?)");
	MakeComm	(0X495,	"first fit, try high then low memory");
	MakeCode	(x=0X495);
	OpHex		(x,	1);
	MakeName	(0X495,	"adjust_env");
	MakeCode	(x=0X498);
	OpHex		(x,	1);
	MakeComm	(0X49B,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X49B);
	OpHex		(x,	0);
	MakeCode	(x=0X4A0);
	OpHex		(x,	1);
	MakeComm	(0X4A2,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X4A2);
	OpHex		(x,	0);
	MakeComm	(0X4A6,	"(CS: prefix is not needed!?)");
	MakeComm	(0X4AA,	"[cs:PDB.ENVIRON]");
	MakeCode	(x=0X4C4);
	OpHex		(x,	1);
	MakeComm	(0X4C6,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X4C6);
	OpHex		(x,	0);
	MakeName	(0X4C8,	"no_free");
	MakeCode	(x=0X4CA);
	OpHex		(x,	1);
	MakeComm	(0X4CD,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X4CD);
	OpHex		(x,	0);
	MakeCode	(x=0X4D1);
	OpHex		(x,	1);
	MakeComm	(0X4D4,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X4D4);
	OpHex		(x,	0);
	MakeComm	(0X4D6,	"(CS: prefix is not needed!?)\nIndicate that transient has been moved");
	MakeComm	(0X4DD,	"TRANSTART");
	MakeComm	(0X4E2,	"TRANSPACEEND ; TRANSIENT portion size");
	MakeCode	(x=0X4E8);
	OpHex		(x,	1);
	MakeComm	(0X4EA,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X4EA);
	OpHex		(x,	0);
	MakeComm	(0X4F0,	"ALLOC");
	MakeCode	(x=0X4F0);
	OpHex		(x,	1);
	MakeComm	(0X4F2,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X4F2);
	OpHex		(x,	0);
	MakeComm	(0X4FB,	"(CS: prefix is not needed!?)");
	MakeComm	(0X50E,	"DEALLOC");
	MakeCode	(x=0X50E);
	OpHex		(x,	1);
	MakeComm	(0X510,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X510);
	OpHex		(x,	0);
	MakeComm	(0X512,	"(CS: prefix is not needed!?)");
	MakeCode	(0X51D);
	MakeName	(0X51D,	"nomem_err");
	MakeByte	(0X520);
	MakeName	(0X520,	"COMMAND_HIGH");
	MakeByte	(x=0X521);
	MakeArray	(x,	0X1E);
	OpDecimal	(x,	0);
	MakeName	(0X521,	"EndCodeInit");
	MakeComm	(0X53F,	"dw Pipe1 ; Pipe1 equ offset EndInit");
	MakeWord	(x=0X53F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X53F,	"InPipePtr");
	MakeComm	(0X541,	"dw Pipe2 ; Pipe1 + 79");
	MakeWord	(0X541);
	MakeName	(0X541,	"OutPipePtr");
	MakeWord	(0X543);
	MakeName	(0X543,	"EnvirSeg");
	MakeWord	(0X545);
	MakeArray	(0X545,	0X2);
	MakeName	(0X545,	"Com_Ptr");
	MakeWord	(0X549);
	MakeArray	(0X549,	0X2);
	MakeName	(0X549,	"Com_Fcb1");
	MakeWord	(0X54D);
	MakeArray	(0X54D,	0X2);
	MakeName	(0X54D,	"Com_Fcb2");
	MakeWord	(x=0X551);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X551,	"TranVars");
	MakeWord	(0X553);
	MakeName	(0X553,	"MySeg");
	MakeWord	(0X555);
	MakeName	(0X555,	"Ltpa");
	MakeByte	(x=0X557);
	OpChr		(x,	0);
	MakeName	(0X557,	"RSwitChar");
	MakeByte	(x=0X558);
	OpChr		(x,	0);
	MakeName	(0X558,	"RDirChar");
	MakeWord	(x=0X559);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X55B);
	MakeName	(0X55B,	"MySeg1");
	MakeWord	(x=0X55D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X55F);
	MakeName	(0X55F,	"MySeg2");
	MakeWord	(0X561);
	MakeName	(0X561,	"Res_Tpa");
	MakeWord	(0X563);
	MakeName	(0X563,	"Y_Flag");
	MakeComm	(0X565,	"TranVarEnd");
	MakeWord	(0X565);
	MakeName	(0X565,	"OldErrNo");
	MakeComm	(0X567,	"db 64+3+13 dup (0)\npath + 'd:\\' 'file.ext' + null");
	MakeByte	(x=0X567);
	MakeArray	(x,	0X10);
	OpDecimal	(x,	0);
	MakeName	(0X567,	"MsgBuffer");
	MakeWord	(x=0X577);
	MakeArray	(x,	0X20);
	OpDecimal	(x,	0);
	MakeName	(0X577,	"UmbSize");
	MakeWord	(0X5B7);
	MakeArray	(0X5B7,	0X2);
	MakeName	(0X5B7,	"Int2fHandler");
	MakeWord	(0X5BB);
	MakeName	(0X5BB,	"ResMsgEnd");
	MakeWord	(0X5BD);
	MakeName	(0X5BD,	"ResSize");
	MakeByte	(x=0X5BF);
	MakeArray	(x,	0X78);
	OpDecimal	(x,	0);
	MakeWord	(0X637);
	MakeName	(0X637,	"RStack");
	MakeByte	(0X639);
	MakeName	(0X639,	"fInHigh");
	MakeByte	(0X63A);
	MakeName	(0X63A,	"fUmbTiny");
	MakeWord	(0X63B);
	MakeName	(0X63B,	"SegLoad");
	MakeByte	(0X63D);
	MakeName	(0X63D,	"UmbLoad");
	MakeByte	(0X63E);
	MakeName	(0X63E,	"fm_umb");
	MakeByte	(0X63F);
	MakeName	(0X63F,	"fm_strat");
	MakeByte	(0X640);
	MakeName	(0X640,	"fm_argc");
	MakeByte	(x=0X641);
	OpChr		(x,	0);
	MakeName	(0X641,	"ABORT_CHAR");
	MakeByte	(x=0X642);
	OpChr		(x,	0);
	MakeName	(0X642,	"RETRY_CHAR");
	MakeByte	(x=0X643);
	OpChr		(x,	0);
	MakeName	(0X643,	"IGNORE_CHAR");
	MakeByte	(x=0X644);
	OpChr		(x,	0);
	MakeName	(0X644,	"FAIL_CHAR");
	MakeByte	(x=0X645);
	OpChr		(x,	0);
	MakeName	(0X645,	"YES_CHAR");
	MakeByte	(x=0X646);
	OpChr		(x,	0);
	MakeName	(0X646,	"NO_CHAR");
	MakeByte	(0X647);
	MakeName	(0X647,	"REQ_ABORT");
	MakeStr		(0X648,	0X64D);
	MakeByte	(0X64D);
	MakeName	(0X64D,	"REQ_RETRY");
	MakeStr		(0X64E,	0X655);
	MakeByte	(0X655);
	MakeName	(0X655,	"REQ_IGNORE");
	MakeStr		(0X656,	0X65E);
	MakeByte	(0X65E);
	MakeName	(0X65E,	"REQ_FAIL");
	MakeStr		(0X65F,	0X665);
	MakeByte	(0X665);
	MakeName	(0X665,	"REQ_END");
	MakeByte	(x=0X666);
	OpChr		(x,	0);
	MakeByte	(0X667);
	MakeName	(0X667,	"MREAD");
	MakeStr		(0X668,	0X670);
	MakeByte	(0X670);
	MakeName	(0X670,	"MWRITE");
	MakeStr		(0X671,	0X679);
	MakeByte	(x=0X679);
	OpDecimal	(x,	0);
	MakeName	(0X679,	"MDRIVE");
	MakeStr		(0X67A,	0X688);
	MakeByte	(x=0X688);
	OpDecimal	(x,	0);
	MakeName	(0X688,	"MDEVICE");
	MakeStr		(0X689,	0X698);
	MakeByte	(x=0X698);
	OpDecimal	(x,	0);
	MakeName	(0X698,	"MVOLSERIAL");
	MakeStr		(0X699,	0X6BF);
	MakeByte	(x=0X6BF);
	OpDecimal	(x,	0);
	MakeName	(0X6BF,	"BADFATMSG");
	MakeStr		(0X6C0,	0X6E5);
	MakeByte	(x=0X6E5);
	OpDecimal	(x,	0);
	MakeName	(0X6E5,	"COMBAD");
	MakeStr		(0X6E6,	0X6FB);
	MakeByte	(x=0X6FB);
	OpDecimal	(x,	0);
	MakeName	(0X6FB,	"PUTBACKMSG");
	MakeStr		(0X6FC,	0X71D);
	MakeByte	(x=0X71D);
	OpDecimal	(x,	0);
	MakeName	(0X71D,	"PROMPT");
	MakeStr		(0X71E,	0X73F);
	MakeByte	(x=0X73F);
	OpDecimal	(x,	0);
	MakeName	(0X73F,	"ENDBATMES");
	MakeStr		(0X740,	0X75C);
	MakeByte	(x=0X75C);
	OpDecimal	(x,	0);
	MakeName	(0X75C,	"EXECEMES");
	MakeStr		(0X75D,	0X770);
	MakeByte	(x=0X770);
	OpDecimal	(x,	0);
	MakeName	(0X770,	"EXEBAD");
	MakeStr		(0X771,	0X784);
	MakeByte	(x=0X784);
	OpDecimal	(x,	0);
	MakeName	(0X784,	"TOOBIG");
	MakeStr		(0X785,	0X7A7);
	MakeByte	(x=0X7A7);
	OpDecimal	(x,	0);
	MakeName	(0X7A7,	"NOHANDMES");
	MakeStr		(0X7A8,	0X7BE);
	MakeByte	(0X7BE);
	MakeName	(0X7BE,	"ACCDEN");
	MakeStr		(0X7BF,	0X7CC);
	MakeByte	(0X7CC);
	MakeName	(0X7CC,	"BMEMMES");
	MakeStr		(0X7CD,	0X7E6);
	MakeByte	(0X7E6);
	MakeName	(0X7E6,	"HALTMES");
	MakeStr		(0X7E7,	0X80D);
	MakeByte	(0X80D);
	MakeName	(0X80D,	"FRETMES");
	MakeStr		(0X80E,	0X82F);
	MakeByte	(0X82F);
	MakeName	(0X82F,	"NEWLINE");
	MakeStr		(0X830,	0X832);
	MakeDword	(0X832);
	MakeName	(0X832,	"MsgPtrLists");
	MakeWord	(x=0X836);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X838);
	MakeWord	(x=0X83A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X83C);
	MakeWord	(0X83E);
	MakeWord	(0X840);
	MakeWord	(x=0X842);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X844);
	MakeName	(0X844,	"MySeg3");
	MakeByte	(x=0X846);
	OpDecimal	(x,	0);
	MakeName	(0X846,	"CRMSG0");
	MakeStr		(0X847,	0X85A);
	MakeByte	(x=0X85A);
	OpDecimal	(x,	0);
	MakeName	(0X85A,	"CRMSG1");
	MakeStr		(0X85B,	0X867);
	MakeByte	(0X867);
	MakeName	(0X867,	"CRMSG2");
	MakeStr		(0X868,	0X871);
	MakeByte	(x=0X871);
	OpDecimal	(x,	0);
	MakeName	(0X871,	"CRMSG3");
	MakeStr		(0X872,	0X888);
	MakeByte	(x=0X888);
	OpDecimal	(x,	0);
	MakeName	(0X888,	"CRMSG4");
	MakeStr		(0X889,	0X893);
	MakeByte	(x=0X893);
	OpDecimal	(x,	0);
	MakeName	(0X893,	"CRMSG5");
	MakeStr		(0X894,	0X8B5);
	MakeByte	(x=0X8B5);
	OpDecimal	(x,	0);
	MakeName	(0X8B5,	"CRMSG6");
	MakeStr		(0X8B6,	0X8C0);
	MakeByte	(x=0X8C0);
	OpDecimal	(x,	0);
	MakeName	(0X8C0,	"CRMSG7");
	MakeStr		(0X8C1,	0X8D3);
	MakeByte	(x=0X8D3);
	OpDecimal	(x,	0);
	MakeName	(0X8D3,	"CRMSG8");
	MakeStr		(0X8D4,	0X8E4);
	MakeByte	(x=0X8E4);
	OpDecimal	(x,	0);
	MakeName	(0X8E4,	"CRMSG9");
	MakeStr		(0X8E5,	0X8FF);
	MakeByte	(x=0X8FF);
	OpDecimal	(x,	0);
	MakeName	(0X8FF,	"CRMSG10");
	MakeStr		(0X900,	0X911);
	MakeByte	(x=0X911);
	OpDecimal	(x,	0);
	MakeName	(0X911,	"CRMSG11");
	MakeStr		(0X912,	0X922);
	MakeByte	(x=0X922);
	OpDecimal	(x,	0);
	MakeName	(0X922,	"CRMSG12");
	MakeStr		(0X923,	0X932);
	MakeByte	(x=0X932);
	OpDecimal	(x,	0);
	MakeName	(0X932,	"CRMSG13");
	MakeStr		(0X933,	0X944);
	MakeByte	(x=0X944);
	OpDecimal	(x,	0);
	MakeName	(0X944,	"CRMSG14");
	MakeStr		(0X945,	0X953);
	MakeByte	(x=0X953);
	OpDecimal	(x,	0);
	MakeName	(0X953,	"CRMSG15");
	MakeStr		(0X954,	0X967);
	MakeByte	(x=0X967);
	OpDecimal	(x,	0);
	MakeName	(0X967,	"CRMSG16");
	MakeStr		(0X968,	0X977);
	MakeByte	(x=0X977);
	OpDecimal	(x,	0);
	MakeName	(0X977,	"CRMSG17");
	MakeStr		(0X978,	0X991);
	MakeByte	(x=0X991);
	OpDecimal	(x,	0);
	MakeName	(0X991,	"CRMSG18");
	MakeStr		(0X992,	0X9A4);
	MakeByte	(x=0X9A4);
	OpDecimal	(x,	0);
	MakeName	(0X9A4,	"CRMSG19");
	MakeStr		(0X9A5,	0X9B1);
	MakeByte	(x=0X9B1);
	OpDecimal	(x,	0);
	MakeName	(0X9B1,	"CRMSG20");
	MakeStr		(0X9B2,	0X9C9);
	MakeWord	(x=0X9C9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X9C9,	"CRITMSGPTRS");
	MakeWord	(x=0X9CB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9CD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9CF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9D1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9D3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9D5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9D7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9D9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9DB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9DD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9DF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9E1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9E3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9E5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9E7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9E9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9EB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9ED);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9EF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X9F1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(x=0X9F3);
	OpDecimal	(x,	0);
	MakeName	(0X9F3,	"PAERRMSG0");
	MakeStr		(0X9F4,	0XA07);
	MakeByte	(x=0XA07);
	OpDecimal	(x,	0);
	MakeName	(0XA07,	"PAERRMSG1");
	MakeStr		(0XA08,	0XA22);
	MakeByte	(x=0XA22);
	OpDecimal	(x,	0);
	MakeName	(0XA22,	"PAERRMSG2");
	MakeStr		(0XA23,	0XA31);
	MakeByte	(x=0XA31);
	OpDecimal	(x,	0);
	MakeName	(0XA31,	"PAERRMSG3");
	MakeStr		(0XA32,	0XA41);
	MakeByte	(0XA41);
	MakeName	(0XA41,	"PAERRMSG4");
	MakeByte	(0XA42);
	MakeByte	(x=0XA43);
	OpDecimal	(x,	0);
	MakeName	(0XA43,	"PAERRMSG5");
	MakeStr		(0XA44,	0XA68);
	MakeByte	(x=0XA68);
	OpDecimal	(x,	0);
	MakeName	(0XA68,	"PAERRMSG6");
	MakeStr		(0XA69,	0XA84);
	MakeByte	(x=0XA84);
	OpDecimal	(x,	0);
	MakeName	(0XA84,	"PAERRMSG8");
	MakeStr		(0XA85,	0XAA1);
	MakeByte	(x=0XAA1);
	OpDecimal	(x,	0);
	MakeName	(0XAA1,	"PAERRMSG9");
	MakeStr		(0XAA2,	0XAB3);
	MakeByte	(0XAB3);
	MakeName	(0XAB3,	"PAERRMSG10");
	MakeStr		(0XAB4,	0XAD1);
	MakeWord	(x=0XAD1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XAD1,	"PARSMSGPTRS");
	MakeWord	(x=0XAD3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XAD5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XAD7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XAD9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XADB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XADD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0XADF,	"PAERRMSG7");
	MakeWord	(x=0XADF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XAE1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XAE3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XAE5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0XAE7);
	MakeName	(0XAE7,	"INVLFUNCT");
	MakeStr		(0XAE8,	0XAF8);
	MakeByte	(0XAF8);
	MakeName	(0XAF8,	"FNOTFOUND");
	MakeStr		(0XAF9,	0XB07);
	MakeByte	(0XB07);
	MakeName	(0XB07,	"PNOTFOUND");
	MakeStr		(0XB08,	0XB16);
	MakeByte	(0XB16);
	MakeName	(0XB16,	"TOOMANYOF");
	MakeStr		(0XB17,	0XB2A);
	MakeByte	(0XB2A);
	MakeName	(0XB2A,	"ACCDENIED");
	MakeStr		(0XB2B,	0XB38);
	MakeByte	(0XB38);
	MakeName	(0XB38,	"INVHANDLE");
	MakeStr		(0XB39,	0XB47);
	MakeByte	(0XB47);
	MakeName	(0XB47,	"MEMCBDEST");
	MakeStr		(0XB48,	0XB67);
	MakeByte	(0XB67);
	MakeName	(0XB67,	"INSUFFMEM");
	MakeStr		(0XB68,	0XB7B);
	MakeByte	(0XB7B);
	MakeName	(0XB7B,	"INVMEMBLA");
	MakeStr		(0XB7C,	0XB98);
	MakeByte	(0XB98);
	MakeName	(0XB98,	"INVENVIRO");
	MakeStr		(0XB99,	0XBAC);
	MakeByte	(0XBAC);
	MakeName	(0XBAC,	"INVFORMAT");
	MakeStr		(0XBAD,	0XBBB);
	MakeByte	(0XBBB);
	MakeName	(0XBBB,	"INVFNPARM");
	MakeStr		(0XBBC,	0XBD6);
	MakeByte	(0XBD6);
	MakeName	(0XBD6,	"INVLDDATA");
	MakeStr		(0XBD7,	0XBE3);
	MakeByte	(0XBE3);
	MakeName	(0XBE3,	"INVDRVSPC");
	MakeStr		(0XBE4,	0XBFF);
	MakeByte	(0XBFF);
	MakeName	(0XBFF,	"ATRCURDIR");
	MakeStr		(0XC00,	0XC23);
	MakeByte	(0XC23);
	MakeName	(0XC23,	"NOTSAMDEV");
	MakeStr		(0XC24,	0XC33);
	MakeByte	(0XC33);
	MakeName	(0XC33,	"NOMOREFIL");
	MakeStr		(0XC34,	0XC41);
	MakeByte	(0XC41);
	MakeName	(0XC41,	"FILEXISTS");
	MakeStr		(0XC42,	0XC4D);
	MakeByte	(0XC4D);
	MakeName	(0XC4D,	"CANTMKDIR");
	MakeStr		(0XC4E,	0XC69);
	MakeByte	(0XC69);
	MakeName	(0XC69,	"FAILINT24");
	MakeStr		(0XC6A,	0XC78);
	MakeByte	(0XC78);
	MakeName	(0XC78,	"TOOMANYRD");
	MakeStr		(0XC79,	0XC8E);
	MakeByte	(0XC8E);
	MakeName	(0XC8E,	"DUPLREDIR");
	MakeStr		(0XC8F,	0XCA4);
	MakeByte	(0XCA4);
	MakeName	(0XCA4,	"INVPASSWD");
	MakeStr		(0XCA5,	0XCB5);
	MakeByte	(0XCB5);
	MakeName	(0XCB5,	"INVLDPARM");
	MakeStr		(0XCB6,	0XCC7);
	MakeByte	(0XCC7);
	MakeName	(0XCC7,	"NETDATFAU");
	MakeStr		(0XCC8,	0XCDA);
	MakeByte	(0XCDA);
	MakeName	(0XCDA,	"FNOSUPNET");
	MakeStr		(0XCDB,	0XCFC);
	MakeByte	(0XCFC);
	MakeName	(0XCFC,	"RSCNOTINS");
	MakeStr		(0XCFD,	0XD24);
	MakeWord	(x=0XD24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XD24,	"EXTMSGPTRS");
	MakeWord	(x=0XD26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD2E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0XD3E);
	MakeWord	(x=0XD40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD42);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD46);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XD72);
	MakeArray	(x,	0X28);
	OpDecimal	(x,	0);
	MakeWord	(x=0XDC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0XDC4);
	MakeWord	(x=0XDC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XDC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XDCA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XDCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XDCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XDD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XDD2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XDD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0XDD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0XDD8);
	MakeName	(0XDD8,	"PATRICIDE");
	MakeStr		(0XDD9,	0XE07);
	MakeByte	(0XE07);
	MakeArray	(0XE07,	0X9);
	MakeComm	(0XE10,	"RCODE_START");
	MakeCode	(x=0XE10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0XE10,	"Exec_Err");
	MakeComm	(0XE13,	"ERROR_NOT_ENOUGH_MEMORY");
	MakeCode	(x=0XE17);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0XE1E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0XE21,	"ERROR_ACCESS_DENIED");
	MakeCode	(x=0XE25);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0XE28);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0XE2B,	"GotExecEMes");
	MakeComm	(0XE32,	"Exec_Ret");
	MakeCode	(0XE32);
	MakeName	(0XE32,	"Ext_Exec");
	MakeCode	(x=0XE34);
	OpHex		(x,	1);
	MakeName	(0XE34,	"Exec_Wait");
	MakeComm	(0XE36,	"DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)");
	MakeCode	(x=0XE36);
	OpHex		(x,	0);
	MakeName	(0XE3B,	"NoExec");
	MakeCode	(0XE3E);
	MakeName	(0XE3E,	"ContC");
	MakeComm	(0XE3F,	"INITINIT ; in initialization?");
	MakeCode	(x=0XE3F);
	OpHex		(x,	1);
	MakeComm	(0XE44,	"no");
	MakeComm	(0XE46,	"INITSPECIAL ; doing special stuff?");
	MakeCode	(x=0XE46);
	OpHex		(x,	1);
	MakeComm	(0XE4B,	"no, ignore ^C");
	MakeCode	(0XE51);
	MakeName	(0XE51,	"CmdIret");
	MakeComm	(0XE53,	"INITCTRLC ; are we already in a ^C?");
	MakeCode	(x=0XE53);
	OpHex		(x,	1);
	MakeName	(0XE53,	"NotAtInit");
	MakeComm	(0XE58,	"nope too.");
	MakeCode	(x=0XE5E);
	OpDecimal	(x,	1);
	MakeCode	(x=0XE64);
	OpHex		(x,	1);
	MakeComm	(0XE6B,	"INITCTRLC");
	MakeCode	(x=0XE6B);
	OpHex		(x,	1);
	MakeName	(0XE6B,	"NotInit");
	MakeCode	(x=0XE7A);
	OpHex		(x,	1);
	MakeComm	(0XE7C,	"DOS - DISK RESET");
	MakeCode	(x=0XE7C);
	OpHex		(x,	0);
	MakeCode	(x=0XE7F);
	OpHex		(x,	1);
	MakeName	(0XE7F,	"NoReset");
	MakeName	(0XE98,	"ClearBatch");
	MakeComm	(0XE9C,	"[BATCHSEGMENT.BatFile]");
	MakeCode	(x=0XE9C);
	OpHex		(x,	1);
	MakeComm	(0XE9F,	"[es:BATCHSEGMENT.BatForPtr]");
	MakeCode	(x=0XEAB);
	OpHex		(x,	1);
	MakeComm	(0XEAD,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0XEAD);
	OpHex		(x,	0);
	MakeComm	(0XEB0,	"[es:BATCHSEGMENT.BatEchoFlag]");
	MakeName	(0XEB0,	"No_Bat_For");
	MakeComm	(0XEB5,	"[es:BATCHSEGMENT.BatLast]");
	MakeCode	(x=0XEBA);
	OpHex		(x,	1);
	MakeComm	(0XEBC,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0XEBC);
	OpHex		(x,	0);
	MakeName	(0XED2,	"ContBatch");
	MakeName	(0XED8,	"ContCTerm");
	MakeComm	(0XEEB,	"-1");
	MakeComm	(0XEF1,	"~INITCTRLC");
	MakeCode	(x=0XEF1);
	OpHex		(x,	1);
	MakeName	(0XEF1,	"NoSetSing");
	MakeComm	(0XEFA,	"internal ^c");
	MakeCode	(0XEFF);
	MakeName	(0XEFF,	"DoDAb");
	MakeCode	(0XF01);
	MakeName	(0XF01,	"ResPipeOff");
	MakeCode	(x=0XF0C);
	OpHex		(x,	1);
	MakeCode	(x=0XF12);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0XF12,	"BadMemErr");
	MakeName	(0XF15,	"FatalC");
	MakeCode	(x=0XF26);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0XF2F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0XF35,	"FatalRet2");
	MakeComm	(0XF3F,	"[PDB.PARENT_PID]");
	MakeComm	(0XF45,	"[PDB.EXIT]");
	MakeComm	(0XF4B,	"[PDB.EXIT+2]");
	MakeCode	(x=0XF4E);
	OpHex		(x,	1);
	MakeComm	(0XF53,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0XF53);
	OpHex		(x,	0);
	MakeCode	(0XF55);
	MakeCode	(x=0XF5F);
	OpHex		(x,	1);
	MakeComm	(0XF61,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0XF61);
	OpHex		(x,	0);
	MakeCode	(x=0XF67);
	OpHex		(x,	1);
	MakeComm	(0XF69,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0XF69);
	OpHex		(x,	0);
	MakeComm	(0XF7C,	"jmp far [Int_2e_Ret]");
	MakeCode	(0XF80);
	MakeName	(0XF80,	"Int_2e");
	MakeCode	(x=0XF8A);
	OpHex		(x,	1);
	MakeCode	(x=0XF91);
	OpHex		(x,	1);
	MakeCode	(x=0XF94);
	OpDecimal	(x,	1);
	MakeCode	(x=0XF99);
	OpHex		(x,	1);
	MakeComm	(0XF9B,	"DOS - 2+ internal - GET PSP SEGMENT\nReturn: BX = current PSP segment");
	MakeCode	(x=0XF9B);
	OpHex		(x,	0);
	MakeCode	(x=0XFA2);
	OpHex		(x,	1);
	MakeComm	(0XFA8,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0XFA8);
	OpHex		(x,	0);
	MakeCode	(x=0XFAA);
	OpHex		(x,	1);
	MakeName	(0XFB7,	"LodCom");
	MakeCode	(x=0XFB8);
	OpHex		(x,	1);
	MakeCode	(0XFC5);
	MakeName	(0XFC5,	"LodCom0");
	MakeCode	(x=0XFC8);
	OpHex		(x,	1);
	MakeComm	(0XFCA,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0XFCA);
	OpHex		(x,	0);
	MakeCode	(x=0XFCF);
	OpHex		(x,	1);
	MakeName	(0XFD6,	"BadMemErrJ");
	MakeComm	(0XFD9,	"TRANSPACEEND+15");
	MakeCode	(0XFD9);
	MakeName	(0XFD9,	"SetSize");
	MakeCode	(x=0XFE1);
	OpHex		(x,	1);
	MakeName	(0XFE1,	"MemOk");
	MakeComm	(0XFE3,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0XFE3);
	OpHex		(x,	0);
	MakeCode	(x=0XFEF);
	OpHex		(x,	1);
	MakeName	(0X1009,	"Bad_Tpa");
	MakeName	(0X100C,	"LTpaSet");
	MakeCode	(0X102F);
	MakeName	(0X102F,	"mov_down");
	MakeName	(0X1035,	"copy_trans");
	MakeName	(0X1046,	"LodCom1");
	MakeComm	(0X104A,	"offset DATARES:RStack");
	MakeCode	(x=0X104A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X105E);
	OpHex		(x,	1);
	MakeComm	(0X1060,	"DOS - SET VERIFY FLAG\nDL = 00h, AL = 01h VERIFY on / 00h VERIFY off");
	MakeCode	(x=0X1060);
	OpHex		(x,	0);
	MakeName	(0X1062,	"NoSetVer");
	MakeCode	(0X106C);
	MakeName	(0X106C,	"NoSng");
	MakeComm	(0X107A,	"flag DskErr routine");
	MakeName	(0X107A,	"Bogus_Com");
	MakeName	(0X1082,	"ChkSame");
	MakeComm	(0X108B,	"check transient portion is valid or not");
	MakeName	(0X1090,	"Also_Bogus");
	MakeCode	(0X1095);
	MakeName	(0X1095,	"HavCom");
	MakeCode	(x=0X109A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X109D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X10A5,	"TranVarEnd");
	MakeCode	(x=0X10A5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X10AF,	"[PDB.BLOCK_LEN]");
	MakeComm	(0X10B2,	"jmp far [Trans]");
	MakeCode	(0X10B6);
	MakeName	(0X10B6,	"TRemCheck");
	MakeCode	(x=0X10B7);
	OpHex		(x,	1);
	MakeCode	(0X10BE);
	MakeName	(0X10BE,	"RemCheck");
	MakeComm	(0X10C2,	"(IOCTL<<8)+8");
	MakeCode	(x=0X10C2);
	OpHex		(x,	1);
	MakeComm	(0X10C5,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X10C5);
	OpHex		(x,	0);
	MakeCode	(x=0X10CD);
	OpHex		(x,	1);
	MakeCode	(0X10D5);
	MakeName	(0X10D5,	"THeadFix");
	MakeCode	(x=0X10D6);
	OpHex		(x,	1);
	MakeCode	(0X10DD);
	MakeName	(0X10DD,	"HeadFix");
	MakeComm	(0X10E0,	"BX = handle = 0");
	MakeComm	(0X10E2,	"CX = original stdin, stdout");
	MakeComm	(0X10E6,	"[PDB.JFN_TABLE]");
	MakeComm	(0X10EA,	"DX = current stdin, stdout");
	MakeComm	(0X10EE,	"CLOSE");
	MakeCode	(x=0X10EE);
	OpHex		(x,	1);
	MakeComm	(0X10F0,	"close stdin");
	MakeComm	(0X10F3,	"[PDB.JFN_TABLE] ; restore stdin");
	MakeCode	(x=0X10FC);
	OpHex		(x,	1);
	MakeComm	(0X10FE,	"close stdout");
	MakeComm	(0X1101,	"[PDB.JFN_TABLE+1] ; restore stdout");
	MakeComm	(0X1105,	"skip handles 2,3,4");
	MakeComm	(0X1108,	"FILPERPROC-5 ; 15");
	MakeCode	(x=0X110B);
	OpHex		(x,	1);
	MakeComm	(0X110D,	"[BX+PDB.JFN_TABLE]");
	MakeComm	(0X1120,	"AppendSetState");
	MakeComm	(0X1127,	"- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE\nBX = APPEND state bits");
	MakeCode	(x=0X1127);
	OpHex		(x,	0);
	MakeComm	(0X112F,	"save current program's stdin/out & set to our stderr");
	MakeCode	(0X112F);
	MakeName	(0X112F,	"SavHand");
	MakeComm	(0X1133,	"GET_CURRENT_PDB");
	MakeCode	(x=0X1133);
	OpHex		(x,	1);
	MakeComm	(0X113A,	"[PDB.JFN_Pointer]");
	MakeCode	(x=0X1142);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X1146,	"[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr");
	MakeComm	(0X114C,	"set user's stdin/out to our stderr");
	MakeCode	(0X1153);
	MakeName	(0X1153,	"GetComDsk2");
	MakeComm	(0X1159,	"restore stdin, stdout to user");
	MakeCode	(0X1159);
	MakeName	(0X1159,	"RestHand");
	MakeComm	(0X115C,	"GET_CURRENT_PDB");
	MakeCode	(x=0X115C);
	OpHex		(x,	1);
	MakeComm	(0X1166,	"[PDB.JFN_Pointer]");
	MakeCode	(x=0X1170);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1176);
	MakeName	(0X1176,	"GetComDsk");
	MakeComm	(0X117C,	"non-removable media");
	MakeCode	(x=0X117E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1184);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1191,	"GET_DEFAULT_DRIVE");
	MakeCode	(x=0X119B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X119E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X11A4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X11AE,	"(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT");
	MakeCode	(x=0X11AE);
	OpHex		(x,	1);
	MakeName	(0X11AE,	"GetRawFlushedByte");
	MakeComm	(0X11B1,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X11B1);
	OpHex		(x,	0);
	MakeComm	(0X11B3,	"(STD_CON_INPUT_FLUSH<<8) + 0");
	MakeCode	(x=0X11B3);
	OpHex		(x,	1);
	MakeComm	(0X11B6,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X11B6);
	OpHex		(x,	0);
	MakeName	(0X11B8,	"LoadCom_retn");
	MakeCode	(0X11B9);
	MakeName	(0X11B9,	"LoadCom");
	MakeCode	(x=0X11BA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X11BD);
	OpHex		(x,	1);
	MakeComm	(0X11C0,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read, 1 - write, 2 - read & write");
	MakeCode	(x=0X11C0);
	OpHex		(x,	0);
	MakeComm	(0X11C4,	"ERROR_TOO_MANY_OPEN_FILES");
	MakeCode	(x=0X11C8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X11CE);
	MakeCode	(0X11D3);
	MakeComm	(0X11D5,	"TRANSTART");
	MakeCode	(x=0X11DA);
	OpHex		(x,	1);
	MakeComm	(0X11DD,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X11DD);
	OpHex		(x,	0);
	MakeCode	(x=0X11EC);
	OpHex		(x,	1);
	MakeComm	(0X11EE,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X11EE);
	OpHex		(x,	0);
	MakeCode	(x=0X11F3);
	OpHex		(x,	1);
	MakeComm	(0X11F5,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X11F5);
	OpHex		(x,	0);
	MakeCode	(x=0X11FF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X11FF,	"WrongCom");
	MakeComm	(0X1205,	"try again");
	MakeCode	(0X1207);
	MakeName	(0X1207,	"ChkSum");
	MakeComm	(0X120F,	"TRANDATAEND-100h");
	MakeCode	(x=0X1213);
	OpHex		(x,	1);
	MakeCode	(x=0X1217);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X121C,	"0");
	MakeCode	(x=0X121C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X1220);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X122E,	"check transient portion is valid or not");
	MakeCode	(0X122E);
	MakeName	(0X122E,	"chk_transient");
	MakeCode	(x=0X1233);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X123B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X123B,	"SetVect");
	MakeComm	(0X123E,	"[PDB.EXIT]");
	MakeComm	(0X1242,	"[PDB.EXIT+2]");
	MakeComm	(0X124C,	"INT 22h vector");
	MakeCode	(x=0X124C);
	OpHex		(x,	1);
	MakeCode	(x=0X1256);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1259,	"INT 23h vector");
	MakeCode	(x=0X1259);
	OpHex		(x,	1);
	MakeCode	(x=0X1262);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1265,	"INT 24h vector");
	MakeCode	(x=0X1265);
	OpHex		(x,	1);
	MakeCode	(0X1272);
	MakeName	(0X1272,	"int21h");
	MakeComm	(0X1276,	"0");
	MakeComm	(0X1279,	"Int 21h simulation (ES=0)");
	MakeComm	(0X127B,	"call far [es:84h]\nINT 21h handler");
	MakeCode	(0X1282);
	MakeCode	(x=0X1283);
	OpHex		(x,	1);
	MakeCode	(x=0X1289);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1289,	"AskEnd");
	MakeComm	(0X128F,	"(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT");
	MakeCode	(x=0X128F);
	OpHex		(x,	1);
	MakeComm	(0X1292,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X1292);
	OpHex		(x,	0);
	MakeCode	(0X12A5);
	MakeName	(0X12A5,	"DSKERR");
	MakeComm	(0X12A6,	"pop word [OldDS]");
	MakeComm	(0X12B5,	"[si+SYSDEV.ATT]");
	MakeCode	(x=0X12BD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X12C3,	"SYSDEV.NAME");
	MakeCode	(x=0X12C3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X12DF);
	OpHex		(x,	1);
	MakeCode	(x=0X12E4);
	OpHex		(x,	1);
	MakeCode	(x=0X12EE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X12EE,	"NoHardE");
	MakeCode	(x=0X12F1);
	OpHex		(x,	1);
	MakeCode	(x=0X12F6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X12F9,	"SavMes");
	MakeCode	(x=0X1300);
	OpHex		(x,	1);
	MakeComm	(0X1302,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X1302);
	OpHex		(x,	0);
	MakeComm	(0X1311,	"ERROR_WRITE_PROTECT");
	MakeComm	(0X1316,	"ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT");
	MakeName	(0X1319,	"HavCod");
	MakeComm	(0X131E,	"ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT");
	MakeComm	(0X1323,	"ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT");
	MakeName	(0X1328,	"SetStyle");
	MakeName	(0X132D,	"GotStyle");
	MakeComm	(0X1331,	"ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT");
	MakeComm	(0X1338,	"is the redir there?");
	MakeComm	(0X133B,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, can't install\nFFh installed");
	MakeCode	(x=0X133B);
	OpHex		(x,	0);
	MakeComm	(0X133F,	"no, go to NoHandler");
	MakeComm	(0X1342,	"get ErrType and ptr to error msg");
	MakeComm	(0X1347,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - ");
	MakeCode	(x=0X1347);
	OpHex		(x,	0);
	MakeComm	(0X1354,	"find end of msg");
	MakeComm	(0X1360,	"STD_CON_STRING_OUTPUT ; print the message");
	MakeCode	(x=0X1360);
	OpHex		(x,	1);
	MakeComm	(0X1362,	"DOS - PRINT STRING\nDS:DX -> string terminated by \"$\"");
	MakeCode	(x=0X1362);
	OpHex		(x,	0);
	MakeComm	(0X1364,	"restore terminal byte");
	MakeCode	(0X136B);
	MakeName	(0X136B,	"NoHandler");
	MakeComm	(0X1378,	"ERROR_WRITE_PROTECT");
	MakeName	(0X1378,	"NormalError");
	MakeName	(0X1380,	"CheckErrType");
	MakeCode	(0X138C);
	MakeName	(0X138C,	"ContOld");
	MakeComm	(0X138D,	"DEVTYP>>8");
	MakeCode	(x=0X138D);
	OpHex		(x,	1);
	MakeCode	(x=0X1394);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X139B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X13A3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X13A3,	"BlkErr");
	MakeCode	(x=0X13AA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X13BD);
	MakeName	(0X13BD,	"Ask");
	MakeCode	(x=0X13CC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X13CF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X13D9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X13DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X13E2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X13E2,	"Not15");
	MakeComm	(0X13E8,	"RETRY_ALLOWED");
	MakeCode	(x=0X13E8);
	OpHex		(x,	1);
	MakeCode	(x=0X13EF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X13F5,	"IGNORE_ALLOWED");
	MakeCode	(x=0X13F5);
	OpHex		(x,	1);
	MakeName	(0X13F5,	"Try_Ignore");
	MakeCode	(x=0X13FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1402,	"FAIL_ALLOWED");
	MakeCode	(x=0X1402);
	OpHex		(x,	1);
	MakeName	(0X1402,	"Try_Fail");
	MakeCode	(x=0X1409);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X140F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X140F,	"Term_Question");
	MakeComm	(0X1415,	"-1");
	MakeCode	(x=0X1415);
	OpHex		(x,	1);
	MakeComm	(0X1421,	"(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT");
	MakeCode	(x=0X1421);
	OpHex		(x,	1);
	MakeName	(0X1421,	"DoPrompt");
	MakeComm	(0X1424,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X1424);
	OpHex		(x,	0);
	MakeCode	(x=0X142B);
	OpHex		(x,	1);
	MakeComm	(0X142E,	"DOS - KEYBOARD INPUT\nReturn: AL = character read");
	MakeCode	(x=0X142E);
	OpHex		(x,	0);
	MakeCode	(0X1435);
	MakeName	(0X1435,	"NotKanj");
	MakeComm	(0X143D,	"IGNORE_ALLOWED");
	MakeCode	(x=0X143D);
	OpHex		(x,	1);
	MakeName	(0X144A,	"User_Retry");
	MakeComm	(0X144C,	"RETRY_ALLOWED");
	MakeCode	(x=0X144C);
	OpHex		(x,	1);
	MakeName	(0X1459,	"User_Abort");
	MakeComm	(0X1463,	"FAIL_ALLOWED");
	MakeCode	(x=0X1463);
	OpHex		(x,	1);
	MakeName	(0X1470,	"AskJ");
	MakeCode	(0X1473);
	MakeName	(0X1473,	"EExitJ");
	MakeComm	(0X1475,	"INITINIT");
	MakeCode	(x=0X1475);
	OpHex		(x,	1);
	MakeName	(0X1475,	"Abort_Process");
	MakeCode	(x=0X1483);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1489,	"DeadInTheWater");
	MakeCode	(0X148B);
	MakeName	(0X148B,	"JustExit");
	MakeComm	(0X148E,	"[PDB.PARENT_PID]");
	MakeComm	(0X1491,	"(EXIT<<8) | 255");
	MakeCode	(x=0X1491);
	OpHex		(x,	1);
	MakeComm	(0X1494,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0X1494);
	OpHex		(x,	0);
	MakeComm	(0X1496,	"-1");
	MakeCode	(x=0X1496);
	OpHex		(x,	1);
	MakeName	(0X1496,	"AbortCont");
	MakeName	(0X14A2,	"Not_Batch_Abort");
	MakeComm	(0X14AD,	"word");
	MakeComm	(0X14B4,	"-1");
	MakeComm	(0X14BA,	"word ; write protect?");
	MakeName	(0X14BA,	"CheckForA");
	MakeComm	(0X14C1,	"drive not ready?");
	MakeComm	(0X14C6,	"don't abort the FOR");
	MakeComm	(0X14C8,	"abort a FOR in progress");
	MakeName	(0X14C8,	"abortfor");
	MakeComm	(0X14D4,	"-1");
	MakeName	(0X14DA,	"EExit");
	MakeName	(0X14DE,	"RestHd");
	MakeComm	(0X14E4,	"mov ds,[OldDS]");
	MakeCode	(x=0X14E9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X14E9,	"FatErr");
	MakeCode	(x=0X14EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X14F2,	"abort");
	MakeCode	(x=0X14F6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X14F6,	"crlf");
	MakeName	(0X14F9,	"RPrint");
	MakeCode	(0X1512);
	MakeName	(0X1512,	"RPrintCrit");
	MakeCode	(x=0X1515);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1518);
	OpHex		(x,	1);
	MakeCode	(x=0X151A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1525);
	MakeName	(0X1525,	"RDispMsg");
	MakeComm	(0X1526,	"25h");
	MakeCode	(x=0X1526);
	OpChr		(x,	1);
	MakeComm	(0X1528,	"not a substitution");
	MakeCode	(x=0X152C);
	OpChr		(x,	1);
	MakeComm	(0X1532,	"not a substitution");
	MakeCode	(0X153B);
	MakeCode	(x=0X153D);
	OpHex		(x,	1);
	MakeComm	(0X153F,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X153F);
	OpHex		(x,	0);
	MakeCode	(0X1544);
	MakeName	(0X1544,	"SubstMsg");
	MakeComm	(0X154C,	"[bx].SubstType");
	MakeComm	(0X154E,	"[bx].SubstPtr");
	MakeCode	(x=0X155E);
	OpHex		(x,	1);
	MakeCode	(x=0X1560);
	OpHex		(x,	1);
	MakeCode	(x=0X1562);
	OpHex		(x,	1);
	MakeCode	(x=0X1564);
	OpHex		(x,	1);
	MakeCode	(x=0X1567);
	OpHex		(x,	1);
	MakeComm	(0X156F,	"('A' - '0') - 10");
	MakeCode	(x=0X1573);
	OpHex		(x,	1);
	MakeComm	(0X1575,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X1575);
	OpHex		(x,	0);
	MakeCode	(0X157C);
	MakeCode	(x=0X157E);
	OpHex		(x,	1);
	MakeComm	(0X1580,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X1580);
	OpHex		(x,	0);
	MakeCode	(0X1584);
	MakeCode	(x=0X158A);
	OpHex		(x,	1);
	MakeComm	(0X158C,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X158C);
	OpHex		(x,	0);
	MakeCode	(0X1591);
	MakeCode	(0X1594);
	MakeName	(0X1594,	"CharToUpper");
	MakeComm	(0X1598,	"Multiplex - DOS 3+ internal - UPPERCASE CHARACTER\nSTACK: WORD character to convert to uppercase\nReturn: AL = uppercase character\nSTACK unchanged");
	MakeCode	(x=0X1598);
	OpHex		(x,	0);
	MakeCode	(0X159D);
	MakeName	(0X159D,	"ITestKanj");
	MakeCode	(0X15B7);
	MakeCode	(0X15BB);
	MakeCode	(0X15C2);
	MakeName	(0X15C2,	"MsgInt2fHandler");
	MakeComm	(0X15C3,	"(MULTDOS<<8)|MESSAGE_2F");
	MakeComm	(0X15C8,	"GET_COMMAND_STATE");
	MakeCode	(0X15E9);
	MakeName	(0X15E9,	"fcOurs");
	MakeCode	(x=0X15EB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X15F2);
	OpHex		(x,	1);
	MakeName	(0X15F2,	"miOurs");
	MakeCode	(x=0X15FC);
	OpHex		(x,	1);
	MakeCode	(x=0X15FE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1603,	"miRet");
	MakeCode	(0X1605);
	MakeName	(0X1605,	"MsgRetriever");
	MakeComm	(0X160D,	"NUMPARSMSGS");
	MakeCode	(x=0X160D);
	OpDecimal	(x,	1);
	MakeComm	(0X1610,	"DATARES:ParsMsgPtrs");
	MakeCode	(x=0X1610);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1616,	"NUMEXTMSGS");
	MakeCode	(x=0X1616);
	OpDecimal	(x,	1);
	MakeName	(0X1619,	"chkmsgnum");
	MakeCode	(x=0X161E);
	OpHex		(x,	1);
	MakeComm	(0X1628,	"DATARES:ComSpec");
	MakeCode	(x=0X1628);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X162E,	"INT_24_ERROR");
	MakeComm	(0X1631,	"ExtOpen shl 8");
	MakeCode	(x=0X1631);
	OpHex		(x,	1);
	MakeComm	(0X1634,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X1634);
	OpHex		(x,	0);
	MakeName	(0X163E,	"mrRead");
	MakeCode	(x=0X1644);
	OpHex		(x,	1);
	MakeComm	(0X1647,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X1647);
	OpHex		(x,	0);
	MakeCode	(x=0X164B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X164E);
	OpDecimal	(x,	1);
	MakeComm	(0X1651,	"READ");
	MakeCode	(x=0X1651);
	OpHex		(x,	1);
	MakeComm	(0X1653,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X1653);
	OpHex		(x,	0);
	MakeName	(0X1665,	"mrCloseFile");
	MakeComm	(0X1666,	"CLOSE");
	MakeCode	(x=0X1666);
	OpHex		(x,	1);
	MakeComm	(0X1668,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1668);
	OpHex		(x,	0);
	MakeCode	(0X166F);
	MakeName	(0X166F,	"mrInMem");
	MakeName	(0X1677,	"mrRet");
	MakeCode	(0X167E);
	MakeName	(0X167E,	"Lh_OffUnlink");
	MakeComm	(0X1682,	"(ALLOCOPER<<8)");
	MakeCode	(x=0X1682);
	OpHex		(x,	1);
	MakeComm	(0X1685,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: get allocation strategy");
	MakeCode	(x=0X1685);
	OpHex		(x,	0);
	MakeCode	(x=0X1689);
	OpHex		(x,	1);
	MakeCode	(x=0X168B);
	OpHex		(x,	1);
	MakeCode	(x=0X168E);
	OpHex		(x,	1);
	MakeComm	(0X1693,	"(ALLOCOPER<<8)|1");
	MakeCode	(x=0X1693);
	OpHex		(x,	1);
	MakeComm	(0X1696,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X1696);
	OpHex		(x,	0);
	MakeCode	(x=0X169A);
	OpHex		(x,	1);
	MakeComm	(0X169E,	"(ALLOCOPER<<8)|3");
	MakeCode	(x=0X169E);
	OpHex		(x,	1);
	MakeComm	(0X16A1,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X16A1);
	OpHex		(x,	0);
	MakeComm	(0X16A4,	"times (((EndCode+15)>>4)<<4)-EndCode db 0");
	MakeByte	(x=0X16A4);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeName	(0X16A4,	"CODERES_ends");
	MakeComm	(0X16B0,	"637h");
	MakeCode	(x=0X16B0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X16B0,	"ConProc");
	MakeCode	(x=0X16B3);
	OpHex		(x,	1);
	MakeComm	(0X16B7,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0X16B7);
	OpHex		(x,	0);
	MakeCode	(x=0X16B9);
	OpHex		(x,	1);
	MakeComm	(0X16BC,	"DOS - GET DOS VERSION\nReturn: AL = major version number (00h for DOS 1.x)");
	MakeCode	(x=0X16BC);
	OpHex		(x,	0);
	MakeComm	(0X16BE,	"EXPECTED_VERSION");
	MakeCode	(x=0X16C3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X16CB,	"PDB_Parent_Pid");
	MakeName	(0X16D0,	"Here");
	MakeComm	(0X16D2,	"DOS - PROGRAM TERMINATION\nreturns to DOS--identical to INT 21/AH=00h");
	MakeCode	(x=0X16D2);
	OpHex		(x,	0);
	MakeComm	(0X16D4,	"TranStart+15");
	MakeCode	(0X16D4);
	MakeName	(0X16D4,	"okdos");
	MakeComm	(0X16E8,	"APPENDINSTALL");
	MakeComm	(0X16EB,	"- Multiplex - APPEND - INSTALLATION CHECK\nReturn: AL = 00h not installed\nAL = FFh if installed");
	MakeCode	(x=0X16EB);
	OpHex		(x,	0);
	MakeComm	(0X16F1,	"APPENDDOS");
	MakeComm	(0X16F4,	"- Multiplex - APPEND - VERSION CHECK\nReturn: AX = FFFFh if not DOS 4.0 APPEND\nAL = major version number\nAH = minor version number, otherwise");
	MakeCode	(x=0X16F4);
	OpHex		(x,	0);
	MakeComm	(0X16FB,	"APPENDGETSTATE");
	MakeComm	(0X16FE,	"- Multiplex - DOS 4.0 APPEND - GET APPEND FUNCTION STATE\nReturn: BX = APPEND state");
	MakeCode	(x=0X16FE);
	OpHex		(x,	0);
	MakeComm	(0X1706,	"APPENDSETSTATE");
	MakeComm	(0X1709,	"- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE\nBX = APPEND state bits");
	MakeCode	(x=0X1709);
	OpHex		(x,	0);
	MakeComm	(0X170B,	"DataresEnd");
	MakeCode	(x=0X170B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X170B,	"set_msg_addr");
	MakeComm	(0X1715,	"GET_COMMAND_STATE");
	MakeComm	(0X1718,	"Return:\nAX = 0000h if an instance of COMMAND.COM is already running\nDS:SI -> entry point table");
	MakeCode	(x=0X1718);
	OpHex		(x,	0);
	MakeCode	(x=0X171E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1723);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X172A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X172A,	"first_com");
	MakeName	(0X1730,	"init_cntry");
	MakeComm	(0X1732,	"GETEXTCNTRY");
	MakeCode	(x=0X1732);
	OpHex		(x,	1);
	MakeCode	(x=0X173F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1742,	"DOS - 2+ internal - CREATE PSP\nDX = segment number at which to set up PSP\nSI = (DOS 3+) value to place in memory size field at DX:[0002h]");
	MakeCode	(x=0X1742);
	OpHex		(x,	0);
	MakeComm	(0X1745,	"(ECS_CALL shl 8) or GETLEADBTBL");
	MakeCode	(x=0X1745);
	OpHex		(x,	1);
	MakeComm	(0X1748,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE");
	MakeCode	(x=0X1748);
	OpHex		(x,	0);
	MakeComm	(0X1755,	"[PDB.PARENT_PID]");
	MakeComm	(0X175B,	"[PDB.EXIT]");
	MakeComm	(0X1761,	"[PDB.EXIT+2]");
	MakeComm	(0X1767,	"ResGroup:EndCode + 15");
	MakeCode	(x=0X1775);
	OpHex		(x,	1);
	MakeName	(0X1780,	"TpaSet");
	MakeComm	(0X1783,	"[PDB.BLOCK_LEN]");
	MakeComm	(0X179A,	"RESGROUP:TranStart");
	MakeComm	(0X179D,	"TRANGROUP:TranSpaceEnd");
	MakeComm	(0X17A6,	"(TRANSTART+TRANSPACEEND+15)>>4");
	MakeComm	(0X17A8,	"SETBLOCK");
	MakeCode	(x=0X17A8);
	OpHex		(x,	1);
	MakeComm	(0X17AA,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X17AA);
	OpHex		(x,	0);
	MakeComm	(0X17AD,	"((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1\nZERO equ ConProc\n((166+15+)/16)+(1BF5h-16B0h+15)/16)-1 = 95");
	MakeCode	(x=0X17AD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X17B3);
	OpDecimal	(x,	1);
	MakeComm	(0X17B9,	"(TRANSPACEEND+15)");
	MakeComm	(0X17BE,	"(TRANSPACEEND+15)>>4");
	MakeComm	(0X17C9,	"[PDB.ENVIRON]");
	MakeComm	(0X17CF,	"environment segment");
	MakeName	(0X17DD,	"buildenv");
	MakeName	(0X17E0,	"environpassed");
	MakeCode	(x=0X17E2);
	OpHex		(x,	1);
	MakeComm	(0X17E4,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X17E4);
	OpHex		(x,	0);
	MakeComm	(0X17EB,	"[FCB]");
	MakeComm	(0X180F,	"[di+MAX_COMSPEC-3]");
	MakeCode	(x=0X180F);
	OpDecimal	(x,	1);
	MakeComm	(0X1813,	"[di+MAX_COMSPEC-1]");
	MakeCode	(x=0X1813);
	OpDecimal	(x,	1);
	MakeComm	(0X1817,	"MAX_COMSPEC-2");
	MakeCode	(x=0X1817);
	OpDecimal	(x,	1);
	MakeName	(0X1821,	"notwidenv");
	MakeName	(0X1825,	"nocomdrv");
	MakeCode	(x=0X182C);
	OpHex		(x,	1);
	MakeCode	(x=0X183F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X183F,	"Parse_command_line");
	MakeComm	(0X184C,	"call far [Init_Parse]");
	MakeCode	(0X185C);
	MakeName	(0X185C,	"t1");
	MakeName	(0X1861,	"parse_line_error");
	MakeComm	(0X1863,	"BadSwt_Ptr");
	MakeName	(0X186E,	"init_chk_delim");
	MakeCode	(0X1897);
	MakeName	(0X1897,	"check_k_too");
	MakeCode	(0X18A2);
	MakeName	(0X18A2,	"parse_line_error_disp");
	MakeCode	(x=0X18AE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X18AE,	"parse_cont");
	MakeCode	(x=0X18B6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X18BE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X18C9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X18C9,	"parse_cont_1");
	MakeCode	(x=0X18D4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X18D4,	"parse_cont_2");
	MakeCode	(x=0X18DF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X18DF,	"parse_cont_3");
	MakeCode	(x=0X18EA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X18EA,	"parse_cont_4");
	MakeCode	(x=0X18F5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X18F5,	"parse_cont_5");
	MakeCode	(x=0X18FD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1905);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1910);
	MakeName	(0X1910,	"SetMSwitchJ");
	MakeCode	(0X1913);
	MakeName	(0X1913,	"SetHSwitch");
	MakeCode	(0X1916);
	MakeName	(0X1916,	"SetOSwitch");
	MakeComm	(0X1919,	"-1");
	MakeCode	(0X1919);
	MakeName	(0X1919,	"SetFSwitch");
	MakeComm	(0X1920,	"MoreArgs_Ptr");
	MakeCode	(0X1926);
	MakeName	(0X1926,	"failok");
	MakeCode	(0X192E);
	MakeName	(0X192E,	"SetPSwitch");
	MakeComm	(0X1935,	"MoreArgs_Ptr");
	MakeComm	(0X193B,	"byte");
	MakeCode	(0X193B);
	MakeName	(0X193B,	"permcomok");
	MakeCode	(x=0X193F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1949,	"-1");
	MakeName	(0X1955,	"Parse_command_line_jmp");
	MakeCode	(0X1958);
	MakeName	(0X1958,	"SetDSwitch");
	MakeComm	(0X1965,	"byte");
	MakeCode	(0X1965);
	MakeName	(0X1965,	"setdateok");
	MakeComm	(0X1969,	"byte");
	MakeCode	(0X1971);
	MakeName	(0X1971,	"SetKSwitch");
	MakeCode	(0X1979);
	MakeName	(0X1979,	"SetSSwitch");
	MakeName	(0X197E,	"SetSorKSwitch");
	MakeComm	(0X1982,	"byte");
	MakeComm	(0X198A,	"byte");
	MakeCode	(0X198A);
	MakeName	(0X198A,	"SetESwitch");
	MakeCode	(0X1997);
	MakeName	(0X1997,	"eswitchok");
	MakeCode	(x=0X199B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X19AE);
	MakeName	(0X19AE,	"SetMSwitch");
	MakeComm	(0X19B5,	"MoreArgs_Ptr");
	MakeCode	(0X19BB);
	MakeName	(0X19BB,	"setMswitchok");
	MakeCode	(x=0X19C3);
	OpHex		(x,	1);
	MakeName	(0X19C3,	"SetYSwitch");
	MakeCode	(0X19CB);
	MakeName	(0X19CB,	"load_to_hma_umb");
	MakeComm	(0X19D2,	"too many parameters");
	MakeComm	(0X19D8,	"byte");
	MakeCode	(x=0X19D8);
	OpBinary	(x,	0);
	MakeName	(0X19D8,	"set_command_high_flag");
	MakeCode	(x=0X19DF);
	OpChr		(x,	1);
	MakeName	(0X19DF,	"disable_overwrite_msg");
	MakeComm	(0X19EC,	"'V'  ; \"VCB\"");
	MakeCode	(x=0X19EC);
	OpHex		(x,	1);
	MakeName	(0X19EC,	"change_cox_to_VCB");
	MakeComm	(0X19F1,	"'CB'");
	MakeCode	(x=0X19F1);
	OpHex		(x,	1);
	MakeCode	(0X19FA);
	MakeName	(0X19FA,	"ChkOtherArgs");
	MakeComm	(0X1A02,	"(OPEN shl 8) or 2");
	MakeCode	(x=0X1A02);
	OpHex		(x,	1);
	MakeComm	(0X1A05,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write");
	MakeCode	(x=0X1A05);
	OpHex		(x,	0);
	MakeComm	(0X1A0B,	"IOCTL shl 8");
	MakeCode	(x=0X1A0B);
	OpHex		(x,	1);
	MakeComm	(0X1A0E,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X1A0E);
	OpHex		(x,	0);
	MakeCode	(x=0X1A10);
	OpHex		(x,	1);
	MakeComm	(0X1A15,	"CLOSE");
	MakeCode	(x=0X1A15);
	OpHex		(x,	1);
	MakeName	(0X1A15,	"BadSetCon");
	MakeComm	(0X1A17,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1A17);
	OpHex		(x,	0);
	MakeCode	(0X1A1B);
	MakeName	(0X1A1B,	"IsaDevice");
	MakeCode	(x=0X1A1D);
	OpHex		(x,	1);
	MakeComm	(0X1A20,	"(IOCTL shl 8) or 1");
	MakeCode	(x=0X1A20);
	OpHex		(x,	1);
	MakeComm	(0X1A23,	"DOS - 2+ - IOCTL - SET DEVICE INFORMATION\nBX = device handle, DH = 0\nDL = device information to set (bits 0-7 from function 0)");
	MakeCode	(x=0X1A23);
	OpHex		(x,	0);
	MakeCode	(x=0X1A29);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1A37);
	OpHex		(x,	1);
	MakeName	(0X1A37,	"rcclloop");
	MakeComm	(0X1A39,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1A39);
	OpHex		(x,	0);
	MakeComm	(0X1A40,	"XDUP");
	MakeCode	(x=0X1A40);
	OpHex		(x,	1);
	MakeComm	(0X1A42,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X1A42);
	OpHex		(x,	0);
	MakeCode	(x=0X1A44);
	OpHex		(x,	1);
	MakeComm	(0X1A46,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X1A46);
	OpHex		(x,	0);
	MakeCode	(x=0X1A48);
	OpHex		(x,	1);
	MakeComm	(0X1A4A,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X1A4A);
	OpHex		(x,	0);
	MakeCode	(x=0X1A4C);
	OpHex		(x,	1);
	MakeComm	(0X1A4E,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1A4E);
	OpHex		(x,	0);
	MakeCode	(x=0X1A53);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1A5B);
	MakeName	(0X1A5B,	"DevErr");
	MakeCode	(x=0X1A69);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1A69,	"ChkSrchSpec");
	MakeCode	(x=0X1A71);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1A7E,	"countloop");
	MakeComm	(0X1A80,	"END_OF_LINE_OUT");
	MakeComm	(0X1A8C,	"ENVBIG");
	MakeName	(0X1A9A,	"comp_endenv");
	MakeCode	(0X1AA1);
	MakeName	(0X1AA1,	"got_endenv");
	MakeComm	(0X1AAA,	"ComspStrLen");
	MakeCode	(x=0X1AB6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1AB9,	"ComspStrLen");
	MakeName	(0X1AC5,	"ComtrLoop");
	MakeCode	(0X1AE4);
	MakeName	(0X1AE4,	"SetComsr");
	MakeCode	(x=0X1AE8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1AEB);
	OpDecimal	(x,	1);
	MakeName	(0X1AFE,	"iNotRoot");
	MakeCode	(x=0X1B06);
	OpHex		(x,	1);
	MakeComm	(0X1B09,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X1B09);
	OpHex		(x,	0);
	MakeCode	(x=0X1B10);
	OpHex		(x,	1);
	MakeComm	(0X1B12,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1B12);
	OpHex		(x,	0);
	MakeName	(0X1B14,	"SetComsrRet");
	MakeCode	(x=0X1B1C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1B1C,	"SetComsrBad");
	MakeComm	(0X1B1F,	"TRIAGEERROR equ TRANSTART+TriageError\ncall TRIAGEERROR ; TRANSTART+31DCh");
	MakeCode	(x=0X1B22);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1B27);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1B2A,	"doprt");
	MakeCode	(x=0X1B2D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1B34);
	OpDecimal	(x,	1);
	MakeCode	(0X1B3B);
	MakeName	(0X1B3B,	"ArgsDone");
	MakeComm	(0X1B47,	"SET_CURRENT_PDB");
	MakeCode	(x=0X1B47);
	OpHex		(x,	1);
	MakeComm	(0X1B4D,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0X1B4D);
	OpHex		(x,	0);
	MakeComm	(0X1B4F,	"PDB.EXIT");
	MakeCode	(x=0X1B52);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1B59);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1B60);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1B67,	"[PDB.PARENT_PID]");
	MakeCode	(x=0X1B6B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1B6E,	"(SET_INTERRUPT_VECTOR SHL 8) OR 2Eh");
	MakeCode	(x=0X1B6E);
	OpHex		(x,	1);
	MakeComm	(0X1B71,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X1B71);
	OpHex		(x,	0);
	MakeComm	(0X1B74,	"[PDB.PARENT_PID]");
	MakeName	(0X1B74,	"ComReturns");
	MakeComm	(0X1B7A,	"[PDB.PARENT_PID]");
	MakeComm	(0X1B7E,	"[PDB.JFN_TABLE]");
	MakeCode	(x=0X1B90);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1BA6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1BB6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1BB9,	"ComspString+ComspStrLen");
	MakeCode	(x=0X1BBF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1BBF,	"CopyComsp");
	MakeCode	(x=0X1BC4);
	OpChr		(x,	1);
	MakeCode	(x=0X1BCA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1BD0,	"CopyComspLoop");
	MakeCode	(x=0X1BD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1BDB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1BE0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1BE5,	"'A'-1");
	MakeCode	(x=0X1BE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X1BF5,	"\nTRANSTART");
	MakeName	(0X1BF5,	"EnvMaximum");
	MakeComm	(0X1BF8,	"TRANSTART+100h");
	MakeComm	(0X1BFC,	"TRANDATAEND-100h");
	MakeCode	(x=0X1C00);
	OpHex		(x,	1);
	MakeName	(0X1C04,	"Ichksum");
	MakeComm	(0X1C17,	"((BATCHSEGMENT.SIZE)+16+15)/16");
	MakeCode	(x=0X1C1A);
	OpHex		(x,	1);
	MakeComm	(0X1C1C,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X1C1C);
	OpHex		(x,	0);
	MakeName	(0X1C23,	"NoBatchSeg");
	MakeComm	(0X1C37,	"4096-1");
	MakeCode	(x=0X1C3F);
	OpHex		(x,	1);
	MakeCode	(x=0X1C41);
	OpHex		(x,	1);
	MakeCode	(x=0X1C43);
	OpHex		(x,	1);
	MakeCode	(x=0X1C45);
	OpHex		(x,	1);
	MakeName	(0X1C4F,	"NxtStr");
	MakeCode	(0X1C66);
	MakeName	(0X1C66,	"OkCpyStr");
	MakeCode	(0X1C68);
	MakeName	(0X1C68,	"EnvExit");
	MakeCode	(x=0X1C6E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1C74,	"EnvNoErr");
	MakeName	(0X1C87,	"st_envsize");
	MakeCode	(0X1C96);
	MakeName	(0X1C96,	"DoDate");
	MakeCode	(x=0X1CB9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1CC5);
	OpHex		(x,	1);
	MakeComm	(0X1CC7,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X1CC7);
	OpHex		(x,	0);
	MakeCode	(x=0X1CD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1CD0,	"NoAutSet");
	MakeCode	(x=0X1CD9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1CDC);
	OpHex		(x,	1);
	MakeComm	(0X1CDF,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X1CDF);
	OpHex		(x,	0);
	MakeCode	(x=0X1CE5);
	OpHex		(x,	1);
	MakeComm	(0X1CE7,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1CE7);
	OpHex		(x,	0);
	MakeCode	(0X1CEB);
	MakeName	(0X1CEB,	"noabat");
	MakeComm	(0X1CEF,	"[triage_add+2]");
	MakeComm	(0X1CF3,	"call far [triage_add]\nget extended error");
	MakeCode	(x=0X1CF7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1CFE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X1CFE,	"AccDenErr");
	MakeName	(0X1D04,	"OpenErr");
	MakeCode	(x=0X1D08);
	OpHex		(x,	1);
	MakeComm	(0X1D0A,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X1D0A);
	OpHex		(x,	0);
	MakeComm	(0X1D0C,	"byte");
	MakeComm	(0X1D12,	"byte");
	MakeComm	(0X1D17,	"word");
	MakeCode	(x=0X1D1D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X1D23,	"TRANSTART");
	MakeComm	(0X1D26,	"TRANSTART>>4");
	MakeComm	(0X1D31,	"call far [INITADD]");
	MakeComm	(0X1D35,	"if IBMVER");
	MakeName	(0X1D35,	"NoDttm");
	MakeCode	(x=0X1D3C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1D3F,	"\nendif");
	MakeName	(0X1D42,	"Drv0");
	MakeComm	(0X1D4C,	"- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE\nBX = APPEND state bits");
	MakeCode	(x=0X1D4C);
	OpHex		(x,	0);
	MakeCode	(x=0X1D5A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1D62);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1D65);
	OpHex		(x,	1);
	MakeCode	(x=0X1D67);
	OpHex		(x,	1);
	MakeName	(0X1D88,	"res_low");
	MakeCode	(0X1D8C);
	MakeName	(0X1D8C,	"move_code");
	MakeName	(0X1D8F,	"finish_init");
	MakeComm	(0X1D96,	"COMMAND.COM will be moved to HMA/UMB flag (=1)");
	MakeComm	(0X1D9D,	"high memory first fit");
	MakeCode	(x=0X1D9D);
	OpHex		(x,	1);
	MakeComm	(0X1DA0,	"set allocation strategy");
	MakeCode	(x=0X1DA0);
	OpHex		(x,	1);
	MakeComm	(0X1DA3,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X1DA3);
	OpHex		(x,	0);
	MakeComm	(0X1DA5,	"add UMBs to DOS memory chain");
	MakeComm	(0X1DA8,	"set UMB link state");
	MakeCode	(x=0X1DA8);
	OpHex		(x,	1);
	MakeComm	(0X1DAB,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X1DAB);
	OpHex		(x,	0);
	MakeCode	(x=0X1DB3);
	OpHex		(x,	1);
	MakeComm	(0X1DB5,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X1DB5);
	OpHex		(x,	0);
	MakeName	(0X1DB9,	"finish_init_@");
	MakeComm	(0X1DBC,	"[PDB.EXIT+2]");
	MakeCode	(0X1DBC);
	MakeName	(0X1DBC,	"patch_segments_hma");
	MakeComm	(0X1DBF,	"[PDB.CTRL_C+2]");
	MakeComm	(0X1DC2,	"[PDB.FATAL_ABORT+2]");
	MakeComm	(0X1DC5,	"[PDB.PARENT_PID]");
	MakeComm	(0X1DC8,	"[PDB.JFN_Pointer+2]");
	MakeComm	(0X1DE6,	"[Carousel_i2f_Hook+3]");
	MakeCode	(x=0X1DE9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1DF1,	"NUM_RELOC_ENTRIES");
	MakeCode	(x=0X1DF1);
	OpDecimal	(x,	1);
	MakeName	(0X1DF3,	"patch_entry_seg");
	MakeName	(0X1DFA,	"already_hma");
	MakeComm	(0X1E00,	"BX = resident part size in paragraphs\nafter shifting: resident part size in words");
	MakeComm	(0X1E02,	"move resident part of COMMAND.COM to HMA (UMB)");
	MakeComm	(0X1E04,	"number of words");
	MakeComm	(0X1E09,	"0");
	MakeComm	(0X1E0B,	"INT 2Eh segment");
	MakeComm	(0X1E0F,	"INT 2Fh segment");
	MakeCode	(x=0X1E15);
	OpHex		(x,	1);
	MakeComm	(0X1E17,	"DOS - 2+ internal - SET PSP SEGMENT\nBX = segment address of new PSP");
	MakeCode	(x=0X1E17);
	OpHex		(x,	0);
	MakeComm	(0X1E1A,	"memory arena header (segment)");
	MakeComm	(0X1E1C,	"PSP (program) address/segment");
	MakeComm	(0X1E1D,	"[ARENA.owner]");
	MakeComm	(0X1E22,	"'CO' ; [es:arena_name]");
	MakeComm	(0X1E29,	"'MM'");
	MakeComm	(0X1E30,	"'AN'");
	MakeComm	(0X1E37,	"'D'");
	MakeComm	(0X1E3E,	"= 2\nResident portion of COMMAND.COM is\nin HMA/UMB flag (=2)");
	MakeCode	(x=0X1E43);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1E48);
	MakeName	(0X1E48,	"GetStrLen");
	MakeCode	(0X1E51);
	MakeName	(0X1E51,	"Setup_Seg");
	MakeComm	(0X1E5E,	"TRANSTART");
	MakeCode	(x=0X1E61);
	OpHex		(x,	1);
	MakeCode	(x=0X1E63);
	OpHex		(x,	1);
	MakeCode	(x=0X1E65);
	OpHex		(x,	1);
	MakeComm	(0X1E67,	"TRANSTART>>4");
	MakeCode	(x=0X1E67);
	OpHex		(x,	1);
	MakeCode	(0X1E6D);
	MakeName	(0X1E6D,	"RPrintParse");
	MakeCode	(x=0X1E71);
	OpHex		(x,	1);
	MakeCode	(x=0X1E73);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X1E7E);
	MakeName	(0X1E7E,	"IfindE");
	MakeCode	(0X1E85);
	MakeName	(0X1E85,	"ifind");
	MakeComm	(0X1E93,	"ifdef DBCS");
	MakeComm	(0X1EA5,	"endif");
	MakeCode	(0X1EA7);
	MakeName	(0X1EC4,	"ifind2");
	MakeCode	(0X1EC5);
	MakeName	(0X1EC5,	"Icount0");
	MakeCode	(0X1ECF);
	MakeCode	(0X1ED9);
	MakeName	(0X1ED9,	"Iscasb1");
	MakeCode	(0X1EDE);
	MakeName	(0X1EDE,	"Iscasb2");
	MakeCode	(x=0X1EE0);
	OpDecimal	(x,	1);
	MakeName	(0X1EE0,	"Iscasbx");
	MakeCode	(x=0X1EE6);
	OpHex		(x,	1);
	MakeName	(0X1EE6,	"iupconv");
	MakeCode	(x=0X1EEA);
	OpHex		(x,	1);
	MakeComm	(0X1EEE,	"lds bx,[FUCase_Addr+1]");
	MakeCode	(0X1EFA);
	MakeCode	(x=0X1F06);
	OpHex		(x,	1);
	MakeCode	(x=0X1F09);
	OpHex		(x,	1);
	MakeName	(0X1F09,	"init_contc_specialcase");
	MakeCode	(0X1F16);
	MakeName	(0X1F16,	"setup_for_messages");
	MakeComm	(0X1F2A,	"(GET_INTERRUPT_VECTOR shl 8) or 2Fh");
	MakeCode	(x=0X1F2A);
	OpHex		(x,	1);
	MakeComm	(0X1F2D,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector");
	MakeCode	(x=0X1F2D);
	OpHex		(x,	0);
	MakeCode	(x=0X1F40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1F4B,	"(SET_INTERRUPT_VECTOR shl 8) or 2Fh");
	MakeCode	(x=0X1F4B);
	OpHex		(x,	1);
	MakeComm	(0X1F4E,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X1F4E);
	OpHex		(x,	0);
	MakeComm	(0X1F51,	"[Carousel_i2f_Hook+3]");
	MakeComm	(0X1F55,	"SET_EXTENDED_MSG");
	MakeComm	(0X1F5C,	"ExtMsgEnd (at 0DD8h)");
	MakeCode	(x=0X1F5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1F65,	"SET_EXTENDED_MSG");
	MakeCode	(0X1F65);
	MakeComm	(0X1F6C,	"LessArgs_Ptr");
	MakeCode	(x=0X1F79);
	OpHex		(x,	1);
	MakeName	(0X1F79,	"CheckHelp");
	MakeCode	(x=0X1F7C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1F83,	"call far [Init_Parse] ; call system parser");
	MakeCode	(x=0X1F93);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1F9B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1FA3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1FAD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X1FBC,	"DOS - PROGRAM TERMINATION\nreturns to DOS--identical to INT 21/AH=00h");
	MakeCode	(x=0X1FBC);
	OpHex		(x,	0);
	MakeCode	(0X1FBE);
	MakeCode	(0X1FBF);
	MakeName	(0X1FBF,	"Setup_res_end");
	MakeComm	(0X1FC8,	"ExtMsgEnd");
	MakeCode	(x=0X1FC8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X1FD1);
	OpHex		(x,	1);
	MakeComm	(0X1FDF,	"(Set_CTRL_C_Trapping shl 8)");
	MakeCode	(x=0X1FDF);
	OpHex		(x,	1);
	MakeComm	(0X1FE2,	"DOS - 5+ Get TRUE Version Number\n(BL major, BH minor, DL revision, DH flags)");
	MakeCode	(x=0X1FE2);
	OpHex		(x,	0);
	MakeCode	(x=0X1FEC);
	OpHex		(x,	1);
	MakeComm	(0X1FF2,	"EndCode-RCODE_START");
	MakeCode	(x=0X1FFA);
	OpHex		(x,	1);
	MakeCode	(x=0X1FFC);
	OpHex		(x,	1);
	MakeCode	(x=0X1FFE);
	OpHex		(x,	1);
	MakeCode	(x=0X2000);
	OpHex		(x,	1);
	MakeCode	(0X2008);
	MakeCode	(0X200E);
	MakeName	(0X200E,	"Move_res_code");
	MakeCode	(x=0X2014);
	OpHex		(x,	1);
	MakeComm	(0X2017,	"DOS - 5+ Get TRUE Version Number (BL major, BH minor, DL revision, DH flags)");
	MakeCode	(x=0X2017);
	OpHex		(x,	0);
	MakeCode	(x=0X2019);
	OpHex		(x,	1);
	MakeComm	(0X2024,	"ExtMsgEnd ; (this bx is not used after here!)\nErdogan Tan - 18/07/2024");
	MakeCode	(x=0X2024);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2029,	"EndCode-RCODE_START");
	MakeCode	(0X2029);
	MakeComm	(0X202F,	"GET_HMA_ADDR");
	MakeCode	(x=0X2032);
	OpHex		(x,	0);
	MakeComm	(0X2037,	"byte");
	MakeComm	(0X2047,	"EndCode-RCODE_START");
	MakeCode	(x=0X204F);
	OpHex		(x,	1);
	MakeCode	(x=0X2051);
	OpHex		(x,	1);
	MakeCode	(x=0X2053);
	OpHex		(x,	1);
	MakeCode	(x=0X2055);
	OpHex		(x,	1);
	MakeComm	(0X205D,	"RCODE_START");
	MakeCode	(x=0X205D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2060,	"EndCode-RCODE_START");
	MakeCode	(x=0X2060);
	OpHex		(x,	1);
	MakeCode	(0X206E);
	MakeName	(0X206E,	"alloc_env");
	MakeCode	(0X2081);
	MakeComm	(0X2083,	"ENVIRONSIZ");
	MakeCode	(x=0X2083);
	OpDecimal	(x,	1);
	MakeComm	(0X209B,	"PathStrLen");
	MakeCode	(x=0X209E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X20A5);
	OpDecimal	(x,	1);
	MakeCode	(0X20AC);
	MakeComm	(0X20B7,	"ComspStrLen");
	MakeCode	(x=0X20BA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X20C1);
	OpDecimal	(x,	1);
	MakeCode	(0X20C8);
	MakeComm	(0X20CE,	"ENVBIG");
	MakeCode	(x=0X20CE);
	OpDecimal	(x,	1);
	MakeCode	(0X20D9);
	MakeComm	(0X20DA,	"[DI+ENVIRONSIZ]");
	MakeCode	(x=0X20DA);
	OpDecimal	(x,	1);
	MakeComm	(0X20DF,	"[PDB.PARENT_PID]");
	MakeComm	(0X20E3,	"[PDB.PARENT_PID]");
	MakeComm	(0X20EB,	"byte");
	MakeCode	(x=0X20F4);
	OpHex		(x,	1);
	MakeCode	(x=0X20F6);
	OpHex		(x,	1);
	MakeCode	(x=0X20F8);
	OpHex		(x,	1);
	MakeCode	(x=0X20FA);
	OpHex		(x,	1);
	MakeCode	(x=0X20FC);
	OpHex		(x,	1);
	MakeComm	(0X20FE,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X20FE);
	OpHex		(x,	0);
	MakeCode	(0X2105);
	MakeCode	(x=0X2123);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X212A,	"db \"PATH=\",0");
	MakeComm	(0X2135,	"GET_DEFAULT_DRIVE");
	MakeCode	(x=0X2135);
	OpHex		(x,	1);
	MakeComm	(0X2137,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X2137);
	OpHex		(x,	0);
	MakeCode	(x=0X2146);
	OpChr		(x,	1);
	MakeComm	(0X214C,	"Current_Dir");
	MakeCode	(x=0X214C);
	OpHex		(x,	1);
	MakeComm	(0X214E,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X214E);
	OpHex		(x,	0);
	MakeComm	(0X2151,	"DefPathStrLen+1");
	MakeCode	(x=0X2154);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X2159);
	OpHex		(x,	1);
	MakeComm	(0X215B,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X215B);
	OpHex		(x,	0);
	MakeComm	(0X215F,	"DefPath2StrLen+1");
	MakeCode	(x=0X2162);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X2167);
	OpHex		(x,	1);
	MakeComm	(0X2169,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X2169);
	OpHex		(x,	0);
	MakeComm	(0X2172,	"CHDir");
	MakeCode	(x=0X2172);
	OpHex		(x,	1);
	MakeComm	(0X2174,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X2174);
	OpHex		(x,	0);
	MakeCode	(x=0X217D);
	OpDecimal	(x,	1);
	MakeComm	(0X2189,	"[di+ComspStrLen]");
	MakeCode	(x=0X2190);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2193,	"ComspStrLen2+1 ; db \"COMSPEC=\\COMMAND.COM\",0");
	MakeCode	(x=0X2193);
	OpDecimal	(x,	1);
	MakeComm	(0X219D,	"byte");
	MakeComm	(0X21A6,	"call Alloc_error");
	MakeCode	(0X21A6);
	MakeName	(0X21A9,	"Alloc_error");
	MakeCode	(0X21AC);
	MakeName	(0X21AC,	"patch_stub");
	MakeCode	(x=0X21B1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X21B4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X21B9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X21C7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X21C7,	"patch_segs");
	MakeComm	(0X21CA,	"we have to patch 4 handlers");
	MakeCode	(0X21D9);
	MakeName	(0X21D9,	"get_XMMAddr");
	MakeComm	(0X21DA,	"XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK");
	MakeComm	(0X21DD,	"- Multiplex - XMS - INSTALLATION CHECK\nReturn: AL = 80h XMS driver installed\nAL <> 80h no driver");
	MakeCode	(x=0X21DD);
	OpHex		(x,	0);
	MakeComm	(0X21DF,	"Q: installed");
	MakeCode	(x=0X21DF);
	OpHex		(x,	1);
	MakeComm	(0X21E1,	"N: set error, quit");
	MakeComm	(0X21E3,	"XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR");
	MakeComm	(0X21E6,	"- Multiplex - XMS - GET DRIVER ADDRESS\nReturn: ES:BX -> driver entry point");
	MakeCode	(x=0X21E6);
	OpHex		(x,	0);
	MakeComm	(0X21F2,	"align 16");
	MakeByte	(x=0X21F2);
	MakeArray	(x,	0XE);
	OpDecimal	(x,	0);
	MakeStr		(0X2200,	0X2204);
	MakeName	(0X2200,	"ICONDEV");
	MakeStr		(0X2204,	0X220F);
	MakeStr		(0X220F,	0X221C);
	MakeName	(0X220F,	"COMSPECT");
	MakeByte	(0X221C);
	MakeByte	(0X221D);
	MakeName	(0X221D,	"AUTOBAT");
	MakeByte	(x=0X221E);
	OpChr		(x,	0);
	MakeStr		(0X221F,	0X222D);
	MakeByte	(0X222D);
	MakeByte	(0X222E);
	MakeName	(0X222E,	"PRDATTM");
	MakeWord	(0X222F);
	MakeArray	(0X222F,	0X2);
	MakeName	(0X222F,	"INITADD");
	MakeWord	(x=0X2233);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X2233,	"print_add");
	MakeWord	(0X2235);
	MakeWord	(x=0X2237);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X2237,	"triage_add");
	MakeWord	(0X2239);
	MakeName	(0X2239,	"triage_add_seg");
	MakeByte	(0X223B);
	MakeName	(0X223B,	"AllocedEnv");
	MakeStr		(0X223C,	0X2242);
	MakeName	(0X223C,	"PathString");
	MakeStr		(0X2242,	0X2249);
	MakeName	(0X2242,	"DefPathString");
	MakeStr		(0X2249,	0X2252);
	MakeName	(0X2249,	"DefPath2String");
	MakeWord	(0X2252);
	MakeName	(0X2252,	"ComspOffset");
	MakeStr		(0X2254,	0X2269);
	MakeName	(0X2254,	"ComspString");
	MakeByte	(x=0X2269);
	OpChr		(x,	0);
	MakeName	(0X2269,	"equalsign");
	MakeByte	(x=0X226A);
	OpChr		(x,	0);
	MakeName	(0X226A,	"lcasea");
	MakeByte	(x=0X226B);
	OpChr		(x,	0);
	MakeName	(0X226B,	"lcasez");
	MakeByte	(0X226C);
	MakeName	(0X226C,	"space_chr");
	MakeByte	(x=0X226D);
	OpChr		(x,	0);
	MakeName	(0X226D,	"scswitch");
	MakeByte	(x=0X226E);
	OpChr		(x,	0);
	MakeName	(0X226E,	"skswitch");
	MakeByte	(x=0X226F);
	OpChr		(x,	0);
	MakeName	(0X226F,	"ucasea");
	MakeWord	(0X2270);
	MakeName	(0X2270,	"EnvSiz");
	MakeWord	(0X2272);
	MakeName	(0X2272,	"EnvMax");
	MakeWord	(0X2274);
	MakeName	(0X2274,	"OldEnv");
	MakeWord	(0X2276);
	MakeName	(0X2276,	"UsedEnv");
	MakeWord	(0X2278);
	MakeName	(0X2278,	"PARS_MSG_OFF");
	MakeWord	(0X227A);
	MakeName	(0X227A,	"PARS_MSG_SEG");
	MakeComm	(0X227C,	"init_p");
	MakeWord	(x=0X227C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X227C,	"Init_Parse");
	MakeWord	(0X227E);
	MakeName	(0X227E,	"InitEnd");
	MakeWord	(0X2280);
	MakeName	(0X2280,	"TrnSize");
	MakeByte	(0X2282);
	MakeName	(0X2282,	"resetenv");
	MakeByte	(0X2283);
	MakeName	(0X2283,	"ext_msg");
	MakeByte	(0X2284);
	MakeName	(0X2284,	"eswitch");
	MakeByte	(0X2285);
	MakeName	(0X2285,	"dswitch");
	MakeWord	(0X2286);
	MakeName	(0X2286,	"parsemes_ptr");
	MakeWord	(x=0X2288);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2288,	"PARSE_COMMAND");
	MakeByte	(0X228A);
	MakeByte	(0X228B);
	MakeName	(0X228B,	"COMMAND_PARMS");
	MakeByte	(0X228C);
	MakeWord	(x=0X228D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X228F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(x=0X2291);
	OpDecimal	(x,	0);
	MakeWord	(x=0X2292);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2294);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2296);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2298);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X229A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X229C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X229E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X22A8);
	MakeWord	(0X22A9);
	MakeName	(0X22A9,	"COMMAND_FILE");
	MakeWord	(0X22AB);
	MakeWord	(x=0X22AD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22AF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X22B1);
	MakeWord	(0X22B2);
	MakeName	(0X22B2,	"COMMAND_SWITCH1");
	MakeWord	(0X22B4);
	MakeWord	(x=0X22B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X22BA);
	MakeStr		(0X22BB,	0X22BE);
	MakeName	(0X22BB,	"COMMAND_P_SYN");
	MakeWord	(0X22BE);
	MakeName	(0X22BE,	"COMMAND_SWITCH2");
	MakeWord	(0X22C0);
	MakeWord	(x=0X22C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X22C6);
	MakeStr		(0X22C7,	0X22CA);
	MakeName	(0X22C7,	"COMMAND_F_SYN");
	MakeWord	(0X22CA);
	MakeName	(0X22CA,	"COMMAND_SWITCH3");
	MakeWord	(0X22CC);
	MakeWord	(x=0X22CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X22D2);
	MakeStr		(0X22D3,	0X22D6);
	MakeName	(0X22D3,	"COMMAND_D_SYN");
	MakeWord	(0X22D6);
	MakeName	(0X22D6,	"COMMAND_SWITCH4");
	MakeWord	(0X22D8);
	MakeWord	(x=0X22DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X22DE);
	MakeStr		(0X22DF,	0X22E2);
	MakeName	(0X22DF,	"COMMAND_E_SYN");
	MakeByte	(0X22E2);
	MakeName	(0X22E2,	"COMMAND_E_VAL");
	MakeByte	(0X22E3);
	MakeByte	(0X22E4);
	MakeDword	(x=0X22E5);
	OpDecimal	(x,	0);
	MakeDword	(x=0X22E9);
	OpDecimal	(x,	0);
	MakeByte	(0X22ED);
	MakeByte	(0X22EE);
	MakeWord	(0X22EF);
	MakeName	(0X22EF,	"COMMAND_SWITCH5");
	MakeWord	(0X22F1);
	MakeWord	(x=0X22F3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X22F5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X22F7);
	MakeStr		(0X22F8,	0X22FB);
	MakeName	(0X22F8,	"COMMAND_C_SYN");
	MakeWord	(0X22FB);
	MakeName	(0X22FB,	"COMMAND_SWITCH6");
	MakeWord	(0X22FD);
	MakeWord	(x=0X22FF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2301);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X2303);
	MakeStr		(0X2304,	0X2309);
	MakeName	(0X2304,	"COMMAND_M_SYN");
	MakeWord	(0X2309);
	MakeName	(0X2309,	"COMMAND_SWITCH7");
	MakeWord	(0X230B);
	MakeWord	(x=0X230D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X230F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X2311);
	MakeStr		(0X2312,	0X2315);
	MakeName	(0X2312,	"COMMAND_?_SYN");
	MakeWord	(0X2315);
	MakeName	(0X2315,	"COMMAND_SWITCH8");
	MakeWord	(0X2317);
	MakeWord	(x=0X2319);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X231B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X231D);
	MakeStr		(0X231E,	0X2321);
	MakeName	(0X231E,	"COMMAND_K_SYN");
	MakeWord	(0X2321);
	MakeName	(0X2321,	"COMMAND_SWITCH9");
	MakeWord	(0X2323);
	MakeWord	(x=0X2325);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2327);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X2329);
	MakeStr		(0X232A,	0X232D);
	MakeName	(0X232A,	"COMMAND_Y_SYN");
	MakeWord	(0X232D);
	MakeName	(0X232D,	"COMMAND_SWITCH10");
	MakeWord	(0X232F);
	MakeWord	(x=0X2331);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2333);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X2335);
	MakeStr		(0X2336,	0X2339);
	MakeName	(0X2336,	"COMMAND_H_SYN");
	MakeWord	(0X2339);
	MakeName	(0X2339,	"COMMAND_SWITCH11");
	MakeWord	(0X233B);
	MakeWord	(x=0X233D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X233F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X2341);
	MakeStr		(0X2342,	0X2345);
	MakeName	(0X2342,	"COMMAND_O_SYN");
	MakeComm	(0X2345,	"COMND1_TYPE");
	MakeByte	(0X2345);
	MakeName	(0X2345,	"COMND1_OUTPUT");
	MakeByte	(0X2346);
	MakeName	(0X2346,	"COMND1_CODE");
	MakeWord	(0X2347);
	MakeName	(0X2347,	"COMND1_SYN");
	MakeDword	(0X2349);
	MakeName	(0X2349,	"COMND1_ADDR");
	MakeByte	(0X234D);
	MakeName	(0X234D,	"NO_VAL");
	MakeWord	(0X234E);
	MakeName	(0X234E,	"num_positionals");
	MakeWord	(0X2350);
	MakeName	(0X2350,	"old_parse_ptr");
	MakeByte	(x=0X2352);
	OpDecimal	(x,	0);
	MakeName	(0X2352,	"BADVERMSG");
	MakeStr		(0X2353,	0X236A);
	MakeByte	(x=0X236A);
	OpDecimal	(x,	0);
	MakeName	(0X236A,	"OUTENVMSG");
	MakeStr		(0X236B,	0X2385);
	MakeByte	(x=0X2385);
	OpDecimal	(x,	0);
	MakeName	(0X2385,	"COPYRIGHTMSG");
	MakeStr		(0X2386,	0X23EA);
	MakeByte	(x=0X23EA);
	OpDecimal	(x,	0);
	MakeName	(0X23EA,	"BADCOMLKMES");
	MakeStr		(0X23EB,	0X2413);
	MakeByte	(x=0X2413);
	OpDecimal	(x,	0);
	MakeName	(0X2413,	"BADCOMACCMSG");
	MakeStr		(0X2414,	0X244B);
	MakeByte	(0X244B);
	MakeName	(0X244B,	"HELPMSG1");
	MakeStr		(0X244C,	0X2484);
	MakeByte	(0X2484);
	MakeName	(0X2484,	"HELPMSG2");
	MakeStr		(0X2485,	0X24BD);
	MakeByte	(0X24BD);
	MakeName	(0X24BD,	"HELPMSG3");
	MakeStr		(0X24BE,	0X24F2);
	MakeByte	(0X24F2);
	MakeName	(0X24F2,	"HELPMSG4");
	MakeStr		(0X24F3,	0X253B);
	MakeByte	(0X253B);
	MakeName	(0X253B,	"HELPMSG5");
	MakeStr		(0X253C,	0X2589);
	MakeByte	(0X2589);
	MakeName	(0X2589,	"HELPMSG6");
	MakeStr		(0X258A,	0X25CF);
	MakeByte	(0X25CF);
	MakeName	(0X25CF,	"HELPMSG7");
	MakeStr		(0X25D0,	0X261D);
	MakeByte	(0X261D);
	MakeName	(0X261D,	"HELPMSG8");
	MakeStr		(0X261E,	0X2664);
	MakeByte	(0X2664);
	MakeName	(0X2664,	"HELPMSG9");
	MakeStr		(0X2665,	0X26AF);
	MakeByte	(0X26AF);
	MakeName	(0X26AF,	"HELPMSG10");
	MakeStr		(0X26B0,	0X26FE);
	MakeByte	(0X26FE);
	MakeName	(0X26FE,	"HELPMSG11");
	MakeStr		(0X26FF,	0X2749);
	MakeByte	(0X2749);
	MakeName	(0X2749,	"HELPMSG12");
	MakeStr		(0X274A,	0X2789);
	MakeByte	(0X2789);
	MakeName	(0X2789,	"HELPMSG13");
	MakeStr		(0X278A,	0X27D5);
	MakeByte	(0X27D5);
	MakeName	(0X27D5,	"HELPMSG14");
	MakeStr		(0X27D6,	0X2822);
	MakeByte	(0X2822);
	MakeName	(0X2822,	"HELPMSG15");
	MakeStr		(0X2823,	0X284E);
	MakeWord	(x=0X284E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X284E,	"HelpMsgs");
	MakeWord	(x=0X2850);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2852);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2854);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2856);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2858);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X285A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X285C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X285E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2860);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2862);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2864);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2866);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2868);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X286A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X286C);
	MakeComm	(0X286E,	"MsgInt2fHandler - RCODE_START (15C2h-0E10h)");
	MakeWord	(0X286E);
	MakeName	(0X286E,	"Reloc_Table");
	MakeComm	(0X2870,	"Int_2e - RCODE_START");
	MakeWord	(0X2870);
	MakeComm	(0X2872,	"ContC - RCODE_START");
	MakeWord	(0X2872);
	MakeComm	(0X2874,	"DSKERR - RCODE_START");
	MakeWord	(0X2874);
	MakeComm	(0X2876,	"Exec_Ret - RCODE_START");
	MakeWord	(0X2876);
	MakeComm	(0X2878,	"TRemCheck - RCODE_START");
	MakeWord	(0X2878);
	MakeComm	(0X287A,	"TrnLodCom1 - RCODE_START");
	MakeWord	(0X287A);
	MakeComm	(0X287C,	"LodCom - RCODE_START");
	MakeWord	(0X287C);
	MakeComm	(0X287E,	"MsgRetriever - RCODE_START");
	MakeWord	(0X287E);
	MakeComm	(0X2880,	"THeadFix - RCODE_START");
	MakeWord	(0X2880);
	MakeComm	(0X2882,	"Lh_OffUnlink - RCODE_START");
	MakeWord	(0X2882);
	MakeDword	(0X2884);
	MakeName	(0X2884,	"ResJmpTable");
	MakeByte	(0X2888);
	MakeName	(0X2888,	"FirstCom");
	MakeByte	(0X2889);
	MakeName	(0X2889,	"DevFlag");
	MakeByte	(0X288A);
	MakeName	(0X288A,	"PathFlag");
	MakeByte	(0X288B);
	MakeArray	(0X288B,	0X5);
	MakeByte	(x=0X2890);
	MakeArray	(x,	0X100);
	OpDecimal	(x,	0);
	MakeName	(0X2890,	"TRANSIENTSTART");
	MakeCode	(x=0X2990);
	OpHex		(x,	1);
	MakeComm	(0X2992,	"DOS - SELECT DISK\nDL = new default drive number (0 = A, 1 = B, etc.)\nReturn: AL = number of logical drives");
	MakeCode	(x=0X2992);
	OpHex		(x,	0);
	MakeName	(0X2994,	"TCOMMAND");
	MakeCode	(x=0X29A7);
	OpHex		(x,	1);
	MakeComm	(0X29A9,	"DOS - SET VERIFY FLAG\nDL = 00h, AL = 01h VERIFY on / 00h VERIFY off");
	MakeCode	(x=0X29A9);
	OpHex		(x,	0);
	MakeComm	(0X29AB,	"call far [cs:HEADCALL]");
	MakeComm	(0X29B2,	"-1");
	MakeCode	(0X29BE);
	MakeName	(0X29BE,	"COMMAND");
	MakeComm	(0X29C4,	"0AA2Dh");
	MakeCode	(x=0X29C4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X29D8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X29DE);
	OpDecimal	(x,	1);
	MakeComm	(0X29E8,	"Reset buffer");
	MakeComm	(0X29F1,	"byte");
	MakeCode	(0X29F1);
	MakeCode	(x=0X2A00);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X2A03);
	OpHex		(x,	1);
	MakeComm	(0X2A05,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X2A05);
	OpHex		(x,	0);
	MakeCode	(x=0X2A08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2A0F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2A19);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X2A23,	"INTERNATVARS");
	MakeCode	(x=0X2A23);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X2A26);
	OpHex		(x,	1);
	MakeComm	(0X2A29,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X2A29);
	OpHex		(x,	0);
	MakeCode	(x=0X2A31);
	OpDecimal	(x,	1);
	MakeComm	(0X2A3B,	"-1");
	MakeCode	(x=0X2A3E);
	OpDecimal	(x,	1);
	MakeComm	(0X2A43,	"~1FFh");
	MakeCode	(x=0X2A43);
	OpHex		(x,	1);
	MakeCode	(x=0X2A4D);
	OpHex		(x,	1);
	MakeCode	(x=0X2A59);
	OpHex		(x,	1);
	MakeCode	(x=0X2A60);
	OpHex		(x,	1);
	MakeCode	(x=0X2A67);
	OpHex		(x,	1);
	MakeCode	(x=0X2A79);
	OpHex		(x,	1);
	MakeComm	(0X2A81,	"Y/N question overwrite flag ; ~10h");
	MakeCode	(x=0X2A81);
	OpHex		(x,	1);
	MakeCode	(x=0X2A90);
	OpHex		(x,	1);
	MakeComm	(0X2A92,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X2A92);
	OpHex		(x,	0);
	MakeComm	(0X2A98,	"-1");
	MakeCode	(x=0X2A98);
	OpHex		(x,	1);
	MakeCode	(x=0X2AA2);
	OpHex		(x,	1);
	MakeCode	(x=0X2AAE);
	OpHex		(x,	1);
	MakeCode	(x=0X2AB5);
	OpHex		(x,	1);
	MakeCode	(x=0X2AC0);
	OpHex		(x,	1);
	MakeComm	(0X2AC7,	"Continue the FOR");
	MakeCode	(0X2ACA);
	MakeComm	(0X2ADA,	"no more ifs...");
	MakeCode	(x=0X2ADF);
	OpHex		(x,	1);
	MakeComm	(0X2AF0,	"BATCHSEGMENT.BatFile");
	MakeCode	(x=0X2AF0);
	OpHex		(x,	1);
	MakeCode	(x=0X2AF5);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2AF8,	"- Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE\nES:DI -> ASCIZ full filename of current batch file, with at least the\nfinal filename element uppercased\nDS:DX -> buffer for results");
	MakeCode	(x=0X2AF8);
	OpHex		(x,	0);
	MakeComm	(0X2AFA,	"shell_action");
	MakeComm	(0X2B05,	"reset no command flag");
	MakeCode	(x=0X2B05);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X2B10,	"if batch still in progress continue");
	MakeCode	(x=0X2B12);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2B1B,	"get segment of next batch file");
	MakeCode	(x=0X2B1B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X2B1F,	"reset next batch");
	MakeCode	(x=0X2B1F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B29);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X2B34);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X2B38);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X2B4D);
	OpHex		(x,	1);
	MakeComm	(0X2B50,	"DOS - 3.1+ internal - FLUSH REDIRECTED PRINTER OUTPUT");
	MakeCode	(x=0X2B50);
	OpHex		(x,	0);
	MakeComm	(0X2B57,	"DOS - 3.1+ internal - SET REDIRECTED PRINTER MODE\nDL = 00h redirected output is combined\n     01h redirected output placed in separate jobs\nstart new print job now");
	MakeCode	(x=0X2B57);
	OpHex		(x,	0);
	MakeCode	(x=0X2B5B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2B5E,	"DOSKey Read Line function");
	MakeCode	(x=0X2B61);
	OpHex		(x,	0);
	MakeComm	(0X2B65,	"DOSKey gave us a command line");
	MakeCode	(x=0X2B67);
	OpHex		(x,	1);
	MakeComm	(0X2B69,	"DOS - BUFFERED KEYBOARD INPUT\nDS:DX -> buffer");
	MakeCode	(x=0X2B69);
	OpHex		(x,	0);
	MakeCode	(x=0X2B74);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X2B77);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X2B83);
	MakeName	(0X2B86,	"DOCOM0");
	MakeCode	(x=0X2B92);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X2BA5);
	MakeCode	(0X2BAD);
	MakeCode	(0X2BB0);
	MakeCode	(x=0X2BB7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2BC0,	"byte [ARG+ARGV_ELE.argflags]");
	MakeCode	(x=0X2BC0);
	OpHex		(x,	1);
	MakeName	(0X2BC0,	"OKPARSE");
	MakeComm	(0X2BC7,	"word [ARG+ARG_UNIT.argvcnt]");
	MakeComm	(0X2BCE,	"word [ARG+ARGV_ELE.arglen]");
	MakeCode	(x=0X2BD5);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X2BD8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2BDB,	"(Parse_File_Descriptor<<8)|01h");
	MakeCode	(x=0X2BDB);
	OpHex		(x,	1);
	MakeComm	(0X2BDE,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X2BDE);
	OpHex		(x,	0);
	MakeComm	(0X2BE0,	"[ARG+ARG_UNIT.argv]");
	MakeCode	(x=0X2BE4);
	OpChr		(x,	1);
	MakeComm	(0X2BEA,	"[bx+ARGV_ELE.argpointer]");
	MakeComm	(0X2BEC,	"~20h ; uppercase");
	MakeCode	(x=0X2BEC);
	OpHex		(x,	1);
	MakeComm	(0X2BEF,	"CAPITAL_A");
	MakeComm	(0X2BF2,	"-1");
	MakeComm	(0X2BF6,	"[ARG+ARGV_ELE.argstartel]");
	MakeCode	(0X2C02);
	MakeCode	(0X2C05);
	MakeComm	(0X2C10,	"Count number of letters in command name");
	MakeRptCmt	(0X2C16,	"IDLEN is truly the length");
	MakeCode	(x=0X2C19);
	OpHex		(x,	1);
	MakeCode	(x=0X2C1D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X2C24,	"DO_SKIPCOM");
	MakeName	(0X2C37,	"COMTAIL");
	MakeCode	(x=0X2C42);
	MakeComm	(0X2C47,	"[ARG+ARGV_ELE.argsw_word]");
	MakeComm	(0X2C4F,	"[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]");
	MakeComm	(0X2C59,	"FCB");
	MakeCode	(x=0X2C59);
	OpHex		(x,	1);
	MakeName	(0X2C59,	"DOPARSE");
	MakeCode	(x=0X2C5C);
	OpHex		(x,	1);
	MakeComm	(0X2C5F,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X2C5F);
	OpHex		(x,	0);
	MakeComm	(0X2C64,	"[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]");
	MakeComm	(0X2C76,	"FCB+10h");
	MakeCode	(x=0X2C76);
	OpHex		(x,	1);
	MakeName	(0X2C76,	"DOPARSE2");
	MakeCode	(x=0X2C79);
	OpHex		(x,	1);
	MakeComm	(0X2C7C,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X2C7C);
	OpHex		(x,	0);
	MakeComm	(0X2C81,	"[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]");
	MakeComm	(0X2C89,	"[ARG+ARGV_ELE.argsw_word]");
	MakeComm	(0X2C8F,	"[ARG+ARG_UNIT.argswinfo]");
	MakeCode	(0X2CA7);
	MakeName	(0X2CA7,	"EXTERNALJ1");
	MakeCode	(0X2CAA);
	MakeName	(0X2CAA,	"NULLCOM");
	MakeComm	(0X2CAE,	"-1");
	MakeCode	(x=0X2CAE);
	OpHex		(x,	1);
	MakeComm	(0X2CB6,	"only set flag if in batch");
	MakeName	(0X2CBB,	"NOSETFLAG");
	MakeCode	(0X2CC5);
	MakeName	(0X2CC5,	"EXITJ");
	MakeCode	(0X2CC8);
	MakeName	(0X2CC8,	"get_cox_y_n_opt");
	MakeCode	(x=0X2CD9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2CDD,	" bit 1 = 1 -> Y/N answer is needed");
	MakeCode	(x=0X2CDD);
	OpHex		(x,	1);
	MakeComm	(0X2CE1,	"(in) Batch file ?");
	MakeCode	(x=0X2CE1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X2CE7,	"yes, don't check for ESCAPE");
	MakeComm	(0X2CE9,	"ESCAPE status");
	MakeCode	(x=0X2CE9);
	OpHex		(x,	1);
	MakeComm	(0X2CEB,	"(bit 4 is zero if Y/N is escaped)");
	MakeCode	(x=0X2CED);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X2CF6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2CFB,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeCode	(0X2D04);
	MakeCode	(0X2D07);
	MakeCode	(x=0X2D0C);
	OpHex		(x,	1);
	MakeComm	(0X2D0E,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X2D0E);
	OpHex		(x,	0);
	MakeComm	(0X2D10,	"msg number pointer of ' [Y/N]?'\n(is 1082)");
	MakeCode	(x=0X2D10);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2D17,	"cox_Y_answer number (overwrite Y/N answer letter)");
	MakeCode	(x=0X2D17);
	OpDecimal	(x,	1);
	MakeComm	(0X2D1A,	"utility_msg_class");
	MakeComm	(0X2D1F,	"'YN' Yes/No (CL=Y)\n(NASM syntax: 'YN', MASM syntax: 'NY')");
	MakeCode	(x=0X2D27);
	OpHex		(x,	1);
	MakeComm	(0X2D29,	"DOS - KEYBOARD INPUT, NO ECHO\nReturn: AL = character");
	MakeCode	(x=0X2D29);
	OpHex		(x,	0);
	MakeCode	(x=0X2D2F);
	OpHex		(x,	1);
	MakeComm	(0X2D31,	"DOS - KEYBOARD INPUT, NO ECHO\nReturn: AL = character");
	MakeCode	(x=0X2D31);
	OpHex		(x,	0);
	MakeCode	(x=0X2D33);
	OpChr		(x,	1);
	MakeComm	(0X2D37,	"bit 4, question flag");
	MakeCode	(x=0X2D37);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X2D3F,	"ESCAPE ?");
	MakeCode	(0X2D3F);
	MakeComm	(0X2D43,	"(ESCAPE) Clear bit 4 ; ~10h");
	MakeCode	(x=0X2D43);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(0X2D4B);
	MakeName	(0X2D4B,	"ccydp9");
	MakeCode	(x=0X2D4F);
	OpHex		(x,	1);
	MakeComm	(0X2D56,	"cf = 1 -> overwrite NO answer");
	MakeCode	(0X2D58);
	MakeCode	(x=0X2D5F);
	OpHex		(x,	1);
	MakeComm	(0X2D61,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X2D61);
	OpHex		(x,	0);
	MakeComm	(0X2D64,	"cf = 0 -> overwrite YES answer");
	MakeCode	(0X2D6B);
	MakeName	(0X2D6B,	"ROM_SCAN");
	MakeComm	(0X2D76,	"check for PC Jr signature in rom");
	MakeCode	(x=0X2D76);
	OpHex		(x,	1);
	MakeCode	(0X2D86);
	MakeCode	(x=0X2D94);
	OpHex		(x,	1);
	MakeComm	(0X2D9E,	"[es:di+ROM_HEADER.rom_length]");
	MakeCode	(0X2D9E);
	MakeCode	(x=0X2DA4);
	OpHex		(x,	1);
	MakeCode	(x=0X2DA6);
	OpHex		(x,	1);
	MakeCode	(x=0X2DA8);
	OpHex		(x,	1);
	MakeComm	(0X2DAB,	"round to 2k");
	MakeCode	(x=0X2DAB);
	OpHex		(x,	1);
	MakeComm	(0X2DAE,	"ROM_HEADER.name_list");
	MakeComm	(0X2DB1,	"length of name");
	MakeComm	(0X2DB4,	"point to name");
	MakeCode	(0X2DBF);
	MakeComm	(0X2DC2,	"compare name");
	MakeComm	(0X2DC4,	"success!");
	MakeCode	(x=0X2DCD);
	OpChr		(x,	1);
	MakeName	(0X2DCD,	"SCAN_FOUND");
	MakeCode	(0X2DE4);
	MakeName	(0X2DE4,	"ROM_EXEC");
	MakeCode	(x=0X2DE7);
	OpHex		(x,	1);
	MakeComm	(0X2DE9,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X2DE9);
	OpHex		(x,	0);
	MakeCode	(x=0X2DEB);
	OpHex		(x,	1);
	MakeComm	(0X2DED,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X2DED);
	OpHex		(x,	0);
	MakeComm	(0X2DF1,	"(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE");
	MakeComm	(0X2DFD,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X2DFD);
	OpHex		(x,	0);
	MakeCode	(x=0X2E05);
	OpHex		(x,	1);
	MakeComm	(0X2E07,	"DOS - 2+ internal - CREATE PSP\nDX = segment number at which to set up PSP\nSI = (DOS 3+) value to place in memory size field at DX:[0002h]");
	MakeCode	(x=0X2E07);
	OpHex		(x,	0);
	MakeCode	(x=0X2E0B);
	OpHex		(x,	1);
	MakeCode	(x=0X2E0E);
	OpHex		(x,	1);
	MakeComm	(0X2E10,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X2E10);
	OpHex		(x,	0);
	MakeComm	(0X2E16,	"[PDB.ENVIRON]");
	MakeComm	(0X2E1E,	"[PDB.BLOCK_LEN]");
	MakeComm	(0X2E28,	"[ARENA.owner]");
	MakeName	(0X2E36,	"GOT_STACK");
	MakeComm	(0X2E52,	"(*)");
	MakeCode	(0X2E52);
	MakeName	(0X2E52,	"int_21h_indirect");
	MakeComm	(0X2E53,	"(**)");
	MakeComm	(0X2E57,	"0");
	MakeComm	(0X2E5A,	"simulate INT 21h\nstack: ip, cs, flags (**)");
	MakeComm	(0X2E5B,	"call INT21h_fcall");
	MakeComm	(0X2E5E,	"discard ds (*) on top of stack");
	MakeComm	(0X2E61,	"INT 21h segment");
	MakeCode	(0X2E61);
	MakeName	(0X2E61,	"INT21h_fcall");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	MakeComm	(0X2E65,	"INT 21h offset");
	MakeComm	(0X2E6C,	"DS (*) in stack");
	MakeCode	(x=0X2E6C);
	OpDecimal	(x,	1);
	MakeComm	(0X2E6F,	"return addr of the caller of INT21h_fcall");
	MakeCode	(x=0X2E6F);
	OpDecimal	(x,	0);
	MakeComm	(0X2E72,	"return address from INT 21h");
	MakeCode	(x=0X2E72);
	OpDecimal	(x,	0);
	MakeCode	(0X2E78);
	MakeName	(0X2E78,	"int_2Fh_indirect");
	MakeComm	(0X2E81,	"call far [4*2Fh] ; INT 2Fh handler");
	MakeCode	(0X2E87);
	MakeName	(0X2E87,	"PROMPTBAT");
	MakeComm	(0X2E8D,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(0X2E8D);
	MakeComm	(0X2E92,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X2E9C,	"call far [cs:RCH_ADDR]");
	MakeCode	(0X2E9C);
	MakeCode	(x=0X2EA9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2EAC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X2EAF,	"BATDIE");
	MakeCode	(0X2EBA);
	MakeCode	(x=0X2EBD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X2EC3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2EC9,	"get a keystroke and flush queue");
	MakeCode	(0X2ECF);
	MakeName	(0X2ECF,	"output_batch_name");
	MakeCode	(x=0X2ED0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2ED4,	"BATCHSEGMENT.BatFile");
	MakeCode	(x=0X2ED4);
	OpHex		(x,	1);
	MakeCode	(x=0X2EDA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2EE5,	"ext_msg_class");
	MakeCode	(x=0X2EEA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X2EED);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2EF3,	"one_subst");
	MakeCode	(0X2EFA);
	MakeName	(0X2EFA,	"GETKEYSTROKE");
	MakeComm	(0X2EFB,	"(ECS_call SHL 8) OR GetInterimMode");
	MakeCode	(x=0X2EFB);
	OpHex		(x,	1);
	MakeComm	(0X2EFE,	"DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE");
	MakeCode	(x=0X2EFE);
	OpHex		(x,	0);
	MakeComm	(0X2F01,	"(ECS_call SHL 8) OR SetInterimMode");
	MakeComm	(0X2F06,	"DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE\nDL = new mode\n00h return only full characters on DOS keyboard input functions\n01h return partially-formed characters also");
	MakeCode	(x=0X2F06);
	OpHex		(x,	0);
	MakeComm	(0X2F08,	"(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo");
	MakeCode	(x=0X2F08);
	OpHex		(x,	1);
	MakeComm	(0X2F0B,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X2F0B);
	OpHex		(x,	0);
	MakeComm	(0X2F0D,	"(STD_CON_INPUT_FLUSH SHL 8) + 0");
	MakeCode	(x=0X2F0D);
	OpHex		(x,	1);
	MakeComm	(0X2F10,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X2F10);
	OpHex		(x,	0);
	MakeComm	(0X2F12,	"(ECS_call SHL 8) OR SetInterimMode");
	MakeComm	(0X2F16,	"DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE\nDL = new mode\n00h return only full characters on DOS keyboard input functions\n01h return partially-formed characters also");
	MakeCode	(x=0X2F16);
	OpHex		(x,	0);
	MakeComm	(0X2F1A,	"YES_ECHO");
	MakeCode	(x=0X2F1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2F1A,	"READBAT");
	MakeCode	(x=0X2F1F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X2F26,	"set flag to indicate batch job");
	MakeCode	(x=0X2F26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2F2C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2F30,	"[BATCHSEGMENT.BatchEOF]");
	MakeCode	(x=0X2F3B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X2F43);
	MakeCode	(x=0X2F46);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X2F46,	"TRYING_TO_ABORT");
	MakeCode	(x=0X2F4B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2F4F,	"[BATCHSEGMENT.BatSeek]");
	MakeComm	(0X2F53,	"[BATCHSEGMENT.BatSeek+2]");
	MakeCode	(x=0X2F62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X2F6A,	"No_Echo_Char");
	MakeComm	(0X2F6E,	"NO_ECHO");
	MakeCode	(x=0X2F6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2F75);
	MakeCode	(x=0X2F76);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X2F7A,	"[BATCHSEGMENT.BatSeek]");
	MakeComm	(0X2F7E,	"[BATCHSEGMENT.BatSeek+2]");
	MakeComm	(0X2F83,	"(LSEEK*256) ; seek back");
	MakeComm	(0X2F89,	"-1");
	MakeCode	(x=0X2F89);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X2F94);
	MakeCode	(x=0X2F9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(0X2FA3);
	MakeComm	(0X2FAC,	"COMBUFLEN-1");
	MakeCode	(x=0X2FAC);
	OpDecimal	(x,	1);
	MakeComm	(0X2FB8,	"COMBUFLEN");
	MakeCode	(x=0X2FB8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2FC7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X2FCD,	"Set length of line");
	MakeCode	(x=0X2FCD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X2FD1,	"Eat linefeed");
	MakeComm	(0X2FD7,	"NO_ECHO");
	MakeCode	(x=0X2FD7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2FDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X2FE9,	"nullcommand");
	MakeCode	(x=0X2FE9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2FE9,	"TRY_NEXTFLAG");
	MakeCode	(x=0X2FF8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X3002);
	MakeCode	(0X300C);
	MakeCode	(x=0X3022);
	OpHex		(x,	1);
	MakeCode	(x=0X3025);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X3029,	"[es:bx+BATCHSEGMENT.BatParm]");
	MakeCode	(0X3036);
	MakeCode	(x=0X3037);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X3042,	"COMBUFLEN");
	MakeCode	(x=0X3042);
	OpDecimal	(x,	1);
	MakeCode	(0X304B);
	MakeCode	(0X3050);
	MakeCode	(0X3054);
	MakeCode	(x=0X3057);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X305A);
	OpChr		(x,	1);
	MakeCode	(x=0X306A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X3079);
	MakeCode	(x=0X3083);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X309D,	"read from batch file until end of line");
	MakeCode	(x=0X309D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X309D,	"SKIPTOEOL");
	MakeCode	(0X30A6);
	MakeCode	(0X30AE);
	MakeName	(0X30AE,	"FREE_TPA");
	MakeCode	(x=0X30AF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X30B3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X30B8,	"DEALLOC");
	MakeCode	(x=0X30B8);
	OpHex		(x,	1);
	MakeCode	(0X30BF);
	MakeName	(0X30BF,	"ALLOC_TPA");
	MakeCode	(x=0X30C0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X30C7,	"ALLOC");
	MakeCode	(x=0X30C7);
	OpHex		(x,	1);
	MakeComm	(0X30C9,	"indirect call to INT 21h handler\n(by simulating INT 21h interrupt)");
	MakeCode	(x=0X30CD);
	OpHex		(x,	1);
	MakeCode	(x=0X30D7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X30DC);
	OpHex		(x,	1);
	MakeCode	(x=0X30E3);
	OpHex		(x,	1);
	MakeCode	(x=0X30EA);
	OpHex		(x,	1);
	MakeCode	(x=0X3113);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X311D);
	OpDecimal	(x,	1);
	MakeComm	(0X3127,	"-1");
	MakeCode	(x=0X312A);
	OpDecimal	(x,	1);
	MakeComm	(0X312F,	"~1FFh ; NOT 511");
	MakeCode	(x=0X312F);
	OpHex		(x,	1);
	MakeCode	(x=0X3132);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3137);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3137,	"BATCOM");
	MakeComm	(0X313B,	"call_in_progress");
	MakeName	(0X3146,	"skip_ioset");
	MakeName	(0X3154,	"GETECHO");
	MakeCode	(x=0X315B);
	OpHex		(x,	1);
	MakeCode	(x=0X3160);
	OpHex		(x,	1);
	MakeComm	(0X316D,	"call_in_progress");
	MakeComm	(0X3178,	"[es:BATCHSEGMENT.BatLast]");
	MakeName	(0X317D,	"LEAVEBAT");
	MakeCode	(x=0X317E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3189);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X3189,	"STARTBAT");
	MakeCode	(x=0X318F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3192,	"AppendTruename");
	MakeComm	(0X3195,	"- Multiplex - DOS 4.0 APPEND - SET RETURN FOUND NAME STATE");
	MakeCode	(x=0X3195);
	OpHex		(x,	0);
	MakeComm	(0X3197,	"Find_First");
	MakeCode	(x=0X3197);
	OpHex		(x,	1);
	MakeComm	(0X319B,	"search_attr");
	MakeComm	(0X31A6,	"15+BATCHSEGMENT.SIZE+COMBUFLEN+15");
	MakeCode	(x=0X31A6);
	OpDecimal	(x,	1);
	MakeComm	(0X31B0,	"ALLOC");
	MakeCode	(x=0X31B0);
	OpHex		(x,	1);
	MakeCode	(x=0X31BB);
	OpHex		(x,	1);
	MakeComm	(0X31C0,	"TRANSPACEEND");
	MakeComm	(0X31C3,	"TRANSPACEEND+15");
	MakeComm	(0X31D6,	"DEALLOC*256\ndeallocate the batch segment");
	MakeName	(0X31DD,	"MEM_ERROR");
	MakeCode	(0X31E0);
	MakeName	(0X31E0,	"ENOUGH_MEM");
	MakeCode	(x=0X31E1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X31EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X31F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X31F5,	"[es:BATCHSEGMENT.BatType],BATCHTYPE");
	MakeComm	(0X31FB,	"[es:BATCHSEGMENT.BatLast]");
	MakeCode	(x=0X3200);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X320A,	"[es:BATCHSEGMENT.BatForFlag]");
	MakeCode	(x=0X320F);
	OpHex		(x,	1);
	MakeComm	(0X3217,	"byte");
	MakeComm	(0X321C,	"[es:BATCHSEGMENT.BatForPtr]");
	MakeName	(0X321C,	"FOR_NOT_ON");
	MakeComm	(0X322A,	"[es:BATCHSEGMENT.BatEchoFlag]");
	MakeComm	(0X322F,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeComm	(0X3235,	"[es:BATCHSEGMENT.BatSeek]");
	MakeComm	(0X3239,	"[es:BATCHSEGMENT.BatSeek+2]");
	MakeComm	(0X323E,	"BATCHSEGMENT.BatParm");
	MakeCode	(x=0X323E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3243);
	OpDecimal	(x,	1);
	MakeCode	(x=0X324C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X324F);
	OpDecimal	(x,	1);
	MakeName	(0X3252,	"EACHPARM");
	MakeName	(0X3261,	"MOVPARM");
	MakeCode	(0X326E);
	MakeName	(0X326E,	"ENDPARM");
	MakeCode	(0X3276);
	MakeName	(0X3276,	"HAVPARM");
	MakeCode	(x=0X3279);
	OpDecimal	(x,	1);
	MakeComm	(0X3280,	"SETBLOCK");
	MakeCode	(x=0X3280);
	OpHex		(x,	1);
	MakeComm	(0X3282,	"ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X3288);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X328F,	"Flag single command BATCH job");
	MakeCode	(x=0X328F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X3295,	"NOBATSING");
	MakeCode	(x=0X3296);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X329C);
	MakeName	(0X329C,	"NO_MEMORY");
	MakeComm	(0X32A2,	"ext_msg_class");
	MakeCode	(x=0X32A2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X32A7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X32AA,	"ERROR_NOT_ENOUGH_MEMORY");
	MakeCode	(x=0X32AA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X32B3);
	MakeName	(0X32B3,	"BATCHOFF");
	MakeCode	(x=0X32CB);
	OpHex		(x,	1);
	MakeComm	(0X32D2,	"NO_ECHO");
	MakeComm	(0X32D7,	"[es:BATCHSEGMENT.BatEchoFlag]");
	MakeComm	(0X32E0,	"[es:BATCHSEGMENT.BatForPtr]");
	MakeComm	(0X32E9,	"[es:BATCHSEGMENT.BatForFlag]");
	MakeComm	(0X32F2,	"[es:BATCHSEGMENT.BatLast]");
	MakeComm	(0X32F7,	"DEALLOC");
	MakeCode	(x=0X32F7);
	OpHex		(x,	1);
	MakeComm	(0X32F9,	"FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X3301);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3310);
	MakeName	(0X3310,	"STRCPY");
	MakeComm	(0X3313,	"COMBUFLEN");
	MakeCode	(x=0X3313);
	OpDecimal	(x,	1);
	MakeCode	(0X331C);
	MakeCode	(0X3325);
	MakeName	(0X3325,	"GETBATBYT");
	MakeCode	(x=0X3328);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X3332);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(0X333D);
	MakeCode	(x=0X333E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X3342,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeComm	(0X334D,	"[es:BATCHSEGMENT.BatSeek]");
	MakeCode	(0X334D);
	MakeComm	(0X3353,	"[es:BATCHSEGMENT.BatSeek+2]");
	MakeCode	(x=0X3367);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3372,	"READ");
	MakeCode	(x=0X3372);
	OpHex		(x,	1);
	MakeComm	(0X338A,	"END_OF_LINE_IN");
	MakeCode	(x=0X338A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X338F,	"END_OF_LINE_OUT");
	MakeCode	(x=0X338F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3394);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X339A);
	MakeCode	(x=0X339E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X33A4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X33A8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X33AD,	"beyond end of buffer?");
	MakeCode	(x=0X33AD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X33B3,	"-1");
	MakeCode	(x=0X33B6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X33BA,	"^Z for termination");
	MakeCode	(x=0X33BF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X33C3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X33C8,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeComm	(0X33D0,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeComm	(0X33D9,	"[bx+BATBUF-1],0Ah\nwas a LF present?");
	MakeCode	(x=0X33D9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X33DE,	"yes, no need to fake it");
	MakeComm	(0X33E0,	"add byte [es:BATCHSEGMENT.BatchEOF],3 \nBatchEOF == 4 to fake CR-LF");
	MakeCode	(x=0X33E6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X33EA,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeCode	(x=0X33EA);
	OpHex		(x,	1);
	MakeComm	(0X33EF,	"zero,turn batch off");
	MakeComm	(0X33F1,	"[es:BATCHSEGMENT.BatchEOF]\nBatchEOF was 2, return LF");
	MakeComm	(0X33F9,	"return fake CR");
	MakeComm	(0X33FE,	"return fake LF");
	MakeCode	(0X33FE);
	MakeCode	(0X3403);
	MakeComm	(0X340A,	"If end-of-file, then end of line");
	MakeCode	(x=0X340C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X3411);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3418);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X341F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3426);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X342D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3437);
	MakeName	(0X3437,	"IFERRORP");
	MakeCode	(x=0X3438);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3438,	"IFERROR");
	MakeCode	(0X343E);
	MakeName	(0X343E,	"_$IF");
	MakeCode	(x=0X343F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3443);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X344E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3453);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3459);
	OpHex		(x,	1);
	MakeCode	(x=0X3465);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X3473);
	MakeCode	(x=0X347E);
	OpHex		(x,	1);
	MakeComm	(0X349E,	"byte");
	MakeCode	(x=0X349E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X349E,	"IFNOT");
	MakeComm	(0X34A2,	"word");
	MakeCode	(x=0X34A2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X34A8);
	MakeCode	(0X34B8);
	MakeCode	(0X34C3);
	MakeName	(0X34DD,	"IFERRORJ2");
	MakeComm	(0X34E4,	"-1");
	MakeCode	(0X34E8);
	MakeCode	(0X34EB);
	MakeCode	(0X34F5);
	MakeName	(0X34F5,	"IFEXISTS");
	MakeComm	(0X34FB,	"DIRBUF");
	MakeCode	(x=0X34FB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X34FE);
	OpHex		(x,	1);
	MakeComm	(0X3501,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X3501);
	OpHex		(x,	0);
	MakeCode	(x=0X3506);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X350A,	"ARG+ARG_UNIT.argv ; ARG");
	MakeCode	(x=0X350A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3512,	"IFEXIST_ATTR");
	MakeCode	(x=0X3515);
	OpHex		(x,	1);
	MakeComm	(0X3518,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X3518);
	OpHex		(x,	0);
	MakeCode	(0X3520);
	MakeCode	(x=0X3522);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X3522,	"IFRET");
	MakeCode	(0X3532);
	MakeCode	(x=0X3537);
	OpHex		(x,	1);
	MakeCode	(x=0X3543);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3547);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3551);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3555,	"-1");
	MakeCode	(x=0X3555);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X355E);
	MakeName	(0X355E,	"IFERRORJ3");
	MakeCode	(x=0X3561);
	OpHex		(x,	1);
	MakeName	(0X3561,	"IFERLEV");
	MakeCode	(x=0X3567);
	OpDecimal	(x,	1);
	MakeName	(0X3567,	"IFERLEV_@");
	MakeName	(0X356B,	"GETNUMLP");
	MakeCode	(0X3581);
	MakeName	(0X3581,	"GOTNUM");
	MakeCode	(x=0X3582);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3586);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X3595);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3595,	"_SHIFT");
	MakeCode	(x=0X3599);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X35A0,	"SHIFT_RETN");
	MakeCode	(0X35A1);
	MakeName	(0X35A1,	"SHIFT1");
	MakeComm	(0X35A5,	"BATCHSEGMENT.BatParm");
	MakeName	(0X35BB,	"SKIPCRLP");
	MakeCode	(x=0X35C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X35C8,	"SKIPDELIM");
	MakeCode	(0X35DA);
	MakeName	(0X35DB,	"GOTO_RETN");
	MakeCode	(0X35DC);
	MakeName	(0X35DC,	"_$CALL");
	MakeCode	(x=0X35E0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X35E9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X35EC,	"COMBUFLEN-length_call");
	MakeCode	(x=0X35EC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X35F6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X35FA,	"call_in_progress");
	MakeCode	(x=0X35FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X35FF,	"call_in_progress");
	MakeCode	(x=0X35FF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3604);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X360E,	"_NOPIPE");
	MakeCode	(x=0X3610);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3610,	"_GOTO");
	MakeCode	(x=0X3614);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X361F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X3623,	"[BATCHSEGMENT.BatSeek]");
	MakeComm	(0X3627,	"[BATCHSEGMENT.BatSeek+2]");
	MakeComm	(0X362B,	"[BATCHSEGMENT.BatchEOF]");
	MakeComm	(0X3634,	"FCB+1");
	MakeCode	(x=0X3634);
	OpHex		(x,	1);
	MakeCode	(x=0X3637);
	OpDecimal	(x,	1);
	MakeComm	(0X363A,	"space");
	MakeCode	(x=0X363A);
	OpHex		(x,	1);
	MakeCode	(x=0X3641);
	OpDecimal	(x,	1);
	MakeName	(0X3641,	"NOINC");
	MakeComm	(0X3646,	"word [es:GOTOLEN]");
	MakeCode	(x=0X3646);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3650);
	OpChr		(x,	1);
	MakeName	(0X3654,	"LABLKLP");
	MakeCode	(x=0X3664);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X3664,	"LABLKTST");
	MakeName	(0X366C,	"BADGOTO");
	MakeCode	(x=0X3674);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X367A);
	MakeName	(0X367A,	"CHKLABEL");
	MakeComm	(0X367F,	"FCB+1");
	MakeCode	(x=0X367F);
	OpHex		(x,	1);
	MakeComm	(0X3682,	"[es:GOTOLEN]");
	MakeCode	(x=0X3682);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X3689);
	MakeName	(0X3689,	"NEXTCHRLP");
	MakeName	(0X368E,	"GOTBYTE");
	MakeCode	(x=0X36A6);
	OpHex		(x,	1);
	MakeName	(0X36A6,	"NOTKANJ1");
	MakeCode	(x=0X36AF);
	OpHex		(x,	1);
	MakeName	(0X36AF,	"TRYUPPER");
	MakeName	(0X36B4,	"KNEXTLABCHR");
	MakeName	(0X36B6,	"NEXTLABCHR");
	MakeComm	(0X36BC,	"[es:GOTOLEN]");
	MakeCode	(x=0X36BC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X36C8,	"GOTOCONT");
	MakeName	(0X36CC,	"TONEXTBATLIN");
	MakeName	(0X36D3,	"SKIPLFEED");
	MakeCode	(x=0X36D7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X36DB,	"[es:BATCHSEGMENT.BatchEOF]");
	MakeCode	(0X36E6);
	MakeName	(0X36E6,	"BATCLOSE");
	MakeComm	(0X36F0,	"CLOSE");
	MakeCode	(x=0X36F0);
	OpHex		(x,	1);
	MakeCode	(x=0X36F5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X36FB);
	MakeName	(0X36FB,	"BATOPEN");
	MakeCode	(x=0X36FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X3700,	"BATCHSEGMENT.BatFile");
	MakeComm	(0X370B,	"[BATCHSEGMENT.BatSeek]");
	MakeComm	(0X370F,	"[BATCHSEGMENT.BatSeek+2]");
	MakeCode	(x=0X3714);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X371A,	"(LSEEK<<8)");
	MakeCode	(x=0X3720);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X3728);
	MakeComm	(0X3731,	"A = 1, B = 2 ..");
	MakeCode	(0X3736);
	MakeName	(0X3736,	"free_batch");
	MakeCode	(x=0X3737);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X3741,	"[es:BATCHSEGMENT.BatForPtr]");
	MakeComm	(0X3746,	"is a FOR in progress ?");
	MakeComm	(0X3749,	"no - don't deallocate");
	MakeComm	(0X374E,	"DEALLOC");
	MakeCode	(x=0X374E);
	OpHex		(x,	1);
	MakeComm	(0X3754,	"[es:BATCHSEGMENT.BatEchoFlag]");
	MakeComm	(0X3759,	"[es:BATCHSEGMENT.BatLast]");
	MakeComm	(0X375E,	"DEALLOC");
	MakeCode	(x=0X375E);
	OpHex		(x,	1);
	MakeCode	(x=0X3763);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X3767,	"word");
	MakeCode	(x=0X3767);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X376D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3771);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3779);
	MakeName	(0X3779,	"FORTERM");
	MakeComm	(0X378D,	"word");
	MakeComm	(0X3794,	"-1");
	MakeComm	(0X379C,	"byte");
	MakeCode	(x=0X379C);
	OpHex		(x,	1);
	MakeComm	(0X37A3,	"-1");
	MakeCode	(x=0X37A3);
	OpHex		(x,	1);
	MakeCode	(0X37B1);
	MakeCode	(0X37B3);
	MakeComm	(0X37BA,	"offset FOR_INFO.FORDMA");
	MakeCode	(x=0X37BD);
	OpHex		(x,	1);
	MakeComm	(0X37C0,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X37C0);
	OpHex		(x,	0);
	MakeComm	(0X37C2,	"[FOR_INFO.FOR_EXPAND]");
	MakeComm	(0X37C9,	"[FOR_INFO.FOR_MINARG]");
	MakeComm	(0X37CD,	"[FOR_INFO.FOR_MINARG]");
	MakeComm	(0X37D1,	"[FOR_INFO.FOR_MAXARG]");
	MakeComm	(0X37DD,	"[bx+ARGV_ELE.argstartel]");
	MakeComm	(0X37E2,	"[bx+ARGV_ELE.argflags],4 ; path_sep");
	MakeCode	(x=0X37E2);
	OpHex		(x,	1);
	MakeComm	(0X37E8,	"[bx+ARGV_ELE.argpointer]");
	MakeComm	(0X37FE,	"[FOR_INFO.FOR_EXPAND]");
	MakeComm	(0X3805,	"[bx+ARGV_ELE.argflags],2 ; wildcard");
	MakeCode	(x=0X3805);
	OpHex		(x,	1);
	MakeComm	(0X380B,	"[bx+ARGV_ELE.arglen]");
	MakeCode	(0X3810);
	MakeCode	(x=0X3813);
	OpHex		(x,	1);
	MakeComm	(0X3816,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X3816);
	OpHex		(x,	0);
	MakeCode	(x=0X381B);
	OpHex		(x,	1);
	MakeComm	(0X381E,	"DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)\n[DTA] = data block from\nlast AH = 4Eh/4Fh call");
	MakeCode	(x=0X381E);
	OpHex		(x,	0);
	MakeComm	(0X3820,	"-1");
	MakeComm	(0X3828,	"[FOR_INFO.FOR_EXPAND]");
	MakeComm	(0X3831,	"offset FOR_INFO.FORBUF");
	MakeComm	(0X3836,	"[FOR_INFO.FOR_EXPAND]");
	MakeComm	(0X383D,	"offset FOR_INFO.FORDMA+FIND_BUF.PNAME");
	MakeCode	(x=0X3851);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3854,	"[FOR_INFO.FOR_COM_START]");
	MakeComm	(0X3858,	"[FOR_INFO.FOR_VAR]");
	MakeComm	(0X385E,	"FOR_INFO.FOR_ARGS");
	MakeComm	(0X3864,	"[bx+ARGV_ELE.arg_ocomptr]");
	MakeComm	(0X3875,	"offset FOR_INFO.FORBUF");
	MakeCode	(0X3883);
	MakeComm	(0X3895,	"byte");
	MakeCode	(x=0X3895);
	OpHex		(x,	1);
	MakeComm	(0X389C,	"cmp byte [NullFlag],nullcommand");
	MakeComm	(0X38A6,	"byte");
	MakeCode	(x=0X38B7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X38BD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X38CB,	"byte");
	MakeCode	(x=0X38CB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X38D5);
	MakeName	(0X38D5,	"FORNESTERRJ");
	MakeCode	(0X38DB);
	MakeName	(0X38DB,	"FORERRORJ");
	MakeCode	(0X38DE);
	MakeName	(0X38DE,	"_$FOR");
	MakeComm	(0X38E2,	"byte");
	MakeComm	(0X38EA,	"byte");
	MakeName	(0X38F5,	"NO_PIPE");
	MakeComm	(0X390C,	"~2020h ; uppercase letters");
	MakeCode	(x=0X390C);
	OpHex		(x,	1);
	MakeComm	(0X390F,	"'IN' (NASM syntax)");
	MakeName	(0X3919,	"CHECKLPAREN");
	MakeComm	(0X392F,	"[bx+ARGV_ELE.argpointer] ; [bx+0]");
	MakeCode	(0X392F);
	MakeName	(0X392F,	"FOR_LIST_NOT_EMPTY");
	MakeComm	(0X3931,	"[bx+ARGV_ELE.arglen]");
	MakeCode	(0X3937);
	MakeName	(0X3937,	"FOR_PAREN_TOKEN");
	MakeCode	(0X3944);
	MakeName	(0X3944,	"FORERORJJ");
	MakeCode	(0X3947);
	MakeName	(0X3947,	"FOR_LIST");
	MakeComm	(0X3949,	"[bx+ARGV_ELE.arglen]");
	MakeName	(0X3949,	"SKIP_LIST");
	MakeCode	(0X395C);
	MakeName	(0X395C,	"FOR_END_LIST");
	MakeComm	(0X3961,	"db ')',0");
	MakeName	(0X3967,	"FOR_DO");
	MakeComm	(0X396C,	"~2020h ; uppercase the letters");
	MakeCode	(x=0X396C);
	OpHex		(x,	1);
	MakeComm	(0X396F,	"'DO' (NASM syntax)");
	MakeComm	(0X398B,	"FOR_INFO.size-ARG_UNIT.SIZE");
	MakeCode	(x=0X398B);
	OpDecimal	(x,	1);
	MakeComm	(0X39AC,	"[es:FOR_INFO.FOR_MINARG]");
	MakeComm	(0X39B1,	"[es:FOR_INFO.FOR_MAXARG]");
	MakeComm	(0X39B6,	"[es:FOR_INFO.FOR_COM_START]");
	MakeComm	(0X39BB,	"[es:FOR_INFO.FOR_EXPAND],-1");
	MakeComm	(0X39C4,	"[es:FOR_INFO.FOR_VAR]");
	MakeComm	(0X39CA,	"byte");
	MakeCode	(x=0X39CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X39CF,	"-1");
	MakeCode	(x=0X39CF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39D7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X39DE,	"FOR_RET");
	MakeComm	(0X39DF,	"ext_msg_class");
	MakeCode	(0X39DF);
	MakeName	(0X39DF,	"FOR_ALLOC_ERR");
	MakeCode	(x=0X39E4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X39E7,	"ERROR_NOT_ENOUGH_MEMORY");
	MakeCode	(0X39F0);
	MakeName	(0X39F0,	"NEXTARG");
	MakeComm	(0X39F1,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X39F9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X39FF,	"[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]");
	MakeCode	(0X3A04);
	MakeCode	(0X3A06);
	MakeName	(0X3A06,	"FORNESTERR");
	MakeCode	(x=0X3A0B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3A16,	"-1");
	MakeName	(0X3A1C,	"NOFORP3");
	MakeCode	(0X3A20);
	MakeName	(0X3A20,	"FOROFF");
	MakeCode	(x=0X3A32);
	OpHex		(x,	1);
	MakeComm	(0X3A34,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X3A34);
	OpHex		(x,	0);
	MakeComm	(0X3A37,	"word");
	MakeCode	(x=0X3A37);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X3A3E,	"byte");
	MakeCode	(x=0X3A3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3A47);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X3A47,	"CATALOG");
	MakeComm	(0X3A4C,	"use kilobyte if number of bytes is very big");
	MakeCode	(x=0X3A4C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3A56,	"NO_SEP=1 ; Removes the commas from numbers");
	MakeCode	(x=0X3A56);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3A5E,	"no need to kilobyte (short) display");
	MakeCode	(x=0X3A5E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3A63,	"do not use commas for displaying numbers");
	MakeCode	(x=0X3A63);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X3A68,	"catalog0");
	MakeComm	(0X3A76,	"no parse error");
	MakeCode	(0X3A7B);
	MakeName	(0X3A7B,	"catalog1");
	MakeCode	(x=0X3A81);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3A86,	"/Z switch (narrow)");
	MakeCode	(x=0X3A86);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X3A8E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3A93);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3A98,	"/4 switch");
	MakeCode	(x=0X3A98);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X3A98,	"catalog1_1");
	MakeComm	(0X3AA0,	"4 digits year");
	MakeComm	(0X3AA8,	"2 digits year");
	MakeCode	(0X3AA8);
	MakeName	(0X3AA8,	"catalog1_2");
	MakeComm	(0X3AAE,	"mask.bare");
	MakeCode	(x=0X3AAE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X3AAE,	"catalog1_3");
	MakeCode	(x=0X3AB9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X3AC0);
	MakeName	(0X3AC0,	"catalog2");
	MakeComm	(0X3AC3,	"DIRBUF");
	MakeCode	(x=0X3AC3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3AC6);
	OpHex		(x,	1);
	MakeComm	(0X3AC8,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X3AC8);
	OpHex		(x,	0);
	MakeComm	(0X3ACA,	"FCB+1");
	MakeCode	(x=0X3ACA);
	OpHex		(x,	1);
	MakeCode	(x=0X3ACF);
	OpDecimal	(x,	1);
	MakeName	(0X3AD4,	"catCrunch");
	MakeComm	(0X3AD9,	"word");
	MakeCode	(x=0X3AD9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3AEB,	"mask.subd");
	MakeCode	(x=0X3AEB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X3AF8,	"mask.bare");
	MakeCode	(x=0X3AF8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X3AF8,	"catalog3");
	MakeCode	(x=0X3B00);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3B04);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3B0F,	"mask.dev");
	MakeCode	(x=0X3B0F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X3B0F,	"catRecErr");
	MakeComm	(0X3B17,	"mask.baddir");
	MakeCode	(x=0X3B17);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X3B1F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X3B24);
	MakeName	(0X3B24,	"catNoFiles");
	MakeComm	(0X3B27,	"ERROR_FILE_NOT_FOUND");
	MakeComm	(0X3B2A,	"ext_msg_class");
	MakeCode	(x=0X3B2A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3B2F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3B32);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X3B37);
	MakeName	(0X3B37,	"catExtErr");
	MakeComm	(0X3B3A,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X3B3A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X3B41,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(x=0X3B41);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X3B47,	"catErr");
	MakeCode	(0X3B4A);
	MakeName	(0X3B4A,	"catRet");
	MakeCode	(x=0X3B4B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3B4B,	"SetDefaults");
	MakeComm	(0X3B4E,	"PathPos = ptr to pathname");
	MakeCode	(x=0X3B4E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3B52,	"STAR");
	MakeComm	(0X3B55,	"END_OF_LINE_IN");
	MakeComm	(0X3B57,	"SrcBuf = '*',0Dh");
	MakeComm	(0X3B58,	"PathCnt = pathname length");
	MakeCode	(x=0X3B58);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3B5E,	"0");
	MakeComm	(0X3B60,	"= no error");
	MakeCode	(x=0X3B60);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3B63,	"= options off");
	MakeCode	(x=0X3B63);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3B66,	"= no sort");
	MakeCode	(x=0X3B66);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3B69,	"ATTR_HIDDEN+ATTR_SYSTEM");
	MakeCode	(x=0X3B69);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3B6E,	"exclude hidden, system files");
	MakeCode	(x=0X3B6E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X3B72);
	MakeName	(0X3B72,	"ParseEnvironment");
	MakeComm	(0X3B7A,	"-1");
	MakeComm	(0X3B82,	"util_msg_class ; -1");
	MakeCode	(x=0X3B82);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3B87);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3B8E);
	OpHex		(x,	1);
	MakeName	(0X3B8E,	"ParseCmdLine");
	MakeComm	(0X3B94,	"-1");
	MakeCode	(0X3B9C);
	MakeComm	(0X3B9E,	"INTERNATVARS");
	MakeCode	(x=0X3B9E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3B9E,	"SetCollatingTable");
	MakeCode	(x=0X3BA1);
	OpHex		(x,	1);
	MakeComm	(0X3BA4,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X3BA4);
	OpHex		(x,	0);
	MakeComm	(0X3BAD,	"(GETEXTCNTRY shl 8) + SETCOLLATE");
	MakeComm	(0X3BB0,	"-1");
	MakeComm	(0X3BB8,	"CountryPtrInfo");
	MakeCode	(x=0X3BB8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3BBB,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X3BBB);
	OpHex		(x,	0);
	MakeCode	(x=0X3BBF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3BC5,	"mask.bare");
	MakeCode	(x=0X3BC5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X3BC5,	"SetOptions");
	MakeComm	(0X3BCD,	"~mask.wide");
	MakeCode	(x=0X3BCD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X3BD3,	"ROMBIOS_DATA");
	MakeCode	(x=0X3BD3);
	OpHex		(x,	1);
	MakeComm	(0X3BD8,	"[CRT_Rows]");
	MakeComm	(0X3BE0,	"LINESPERPAGE");
	MakeCode	(x=0X3BE0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3BE6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3BE9,	"(IOCTL shl 8)+GENERIC_IOCTL_HANDLE");
	MakeComm	(0X3BEC,	"STDOUT");
	MakeComm	(0X3BEF,	"IOC_SC");
	MakeComm	(0X3BF1,	"get_generic");
	MakeCode	(x=0X3BF1);
	OpHex		(x,	1);
	MakeCode	(x=0X3BF3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3BF6,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X3BF6);
	OpHex		(x,	0);
	MakeCode	(x=0X3BF8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3BFB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3BFE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3C03,	"mask.wide");
	MakeCode	(x=0X3C03);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X3C0B,	"WIDEPERLIN");
	MakeCode	(x=0X3C0B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3C10);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3C17);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3C1A,	"not 20h");
	MakeCode	(x=0X3C1A);
	OpHex		(x,	1);
	MakeComm	(0X3C1E,	"[FCB]");
	MakeCode	(0X3C22);
	MakeName	(0X3C22,	"CrunchPath");
	MakeComm	(0X3C27,	"or byte [COMSW],mask.dev");
	MakeCode	(x=0X3C27);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X3C2E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3C32,	"-1");
	MakeCode	(x=0X3C32);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3C3A,	"byte");
	MakeCode	(x=0X3C3A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3C44);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3C4A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3C51);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3C58,	"or byte [COMSW],mask.baddir");
	MakeCode	(x=0X3C58);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X3C5F,	"COLON_CHAR");
	MakeCode	(0X3C5F);
	MakeComm	(0X3C66,	"\"..\" ?");
	MakeComm	(0X3C6A,	"if not \"..\", treat as a file");
	MakeComm	(0X3C70,	"or if there's more after \"..\", treat as file");
	MakeComm	(0X3C72,	"or byte [COMSW],mask.baddir");
	MakeCode	(x=0X3C72);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X3C79,	"FCB");
	MakeCode	(x=0X3C79);
	OpHex		(x,	1);
	MakeComm	(0X3C7C,	"(Parse_File_Descriptor<<8)|0Eh");
	MakeCode	(x=0X3C7C);
	OpHex		(x,	1);
	MakeComm	(0X3C7F,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X3C7F);
	OpHex		(x,	0);
	MakeCode	(0X3C84);
	MakeCode	(0X3C86);
	MakeName	(0X3C86,	"InstallCtrlC");
	MakeCode	(x=0X3C87);
	OpHex		(x,	1);
	MakeComm	(0X3C8A,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector");
	MakeCode	(x=0X3C8A);
	OpHex		(x,	0);
	MakeCode	(x=0X3C8C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3C90);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3C95);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3C98);
	OpHex		(x,	1);
	MakeComm	(0X3C9B,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X3C9B);
	OpHex		(x,	0);
	MakeCode	(0X3C9E);
	MakeName	(0X3C9E,	"ListSubds");
	MakeCode	(x=0X3CA1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3CB3,	"ERROR_PATH_NOT_FOUND");
	MakeCode	(0X3CBA);
	MakeCode	(x=0X3CC1);
	OpDecimal	(x,	1);
	MakeComm	(0X3CD4,	"\"..\"");
	MakeCode	(0X3CE4);
	MakeComm	(0X3CE7,	"ERROR_FILE_NOT_FOUND");
	MakeComm	(0X3CEC,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X3CEC);
	OpDecimal	(x,	1);
	MakeComm	(0X3CF3,	"[DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY");
	MakeCode	(x=0X3CF3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X3CF3,	"CheckChild");
	MakeComm	(0X3CFA,	"[DIRBUF+FIND_BUF.PNAME],'.'");
	MakeCode	(x=0X3CFA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3D01,	"offset DIRBUF+FIND_BUF.PNAME");
	MakeCode	(x=0X3D01);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3D0B,	"offset DIRBUF+FIND_BUF.PNAME");
	MakeCode	(x=0X3D0B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3D15);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3D1A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3D20);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3D20,	"CmpEntry");
	MakeCode	(x=0X3D2F);
	OpHex		(x,	1);
	MakeCode	(x=0X3D33);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X3D3E);
	MakeWord	(x=0X3D48);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X3D48,	"FieldCmps");
	MakeWord	(x=0X3D4A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X3D4C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X3D4E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X3D50);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X3D52);
	MakeName	(0X3D52,	"CmpName");
	MakeCode	(0X3D61);
	MakeName	(0X3D61,	"CmpExt");
	MakeComm	(0X3D6E,	"byte");
	MakeCode	(x=0X3D6E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X3D6E,	"CmpStr");
	MakeCode	(x=0X3D78);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3D84,	"cnNextChar");
	MakeCode	(0X3D94);
	MakeName	(0X3D94,	"cn1");
	MakeName	(0X3D9B,	"cn2");
	MakeName	(0X3DA0,	"cn3");
	MakeName	(0X3DA9,	"cn4");
	MakeComm	(0X3DB1,	"\nrepe    ; 0F3h\nes      ; 26h\ncmpsb   ; 0A6h\nretn    ; 0C3h");
	MakeCode	(0X3DB1);
	MakeName	(0X3DB1,	"cnNoCollTable");
	MakeCode	(0X3DB5);
	MakeName	(0X3DB5,	"CmpTime");
	MakeCode	(x=0X3DB9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3DBC);
	OpDecimal	(x,	1);
	MakeComm	(0X3DC3,	"\nrepe  ; 0F3h\nes    ; 26h\ncmpsb ; 0A6h");
	MakeCode	(0X3DC8);
	MakeName	(0X3DC8,	"CmpSize");
	MakeCode	(x=0X3DCC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3DCF);
	OpDecimal	(x,	1);
	MakeComm	(0X3DDB,	"es:[bx].fileattr");
	MakeCode	(0X3DDB);
	MakeName	(0X3DDB,	"CmpType");
	MakeComm	(0X3DDF,	"es:[bp].fileattr");
	MakeComm	(0X3DE3,	"(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY");
	MakeCode	(x=0X3DE3);
	OpHex		(x,	1);
	MakeComm	(0X3DE9,	"ATTR_HIDDEN+ATTR_SYSTEM");
	MakeCode	(x=0X3DE9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X3DE9,	"DefaultAttr");
	MakeComm	(0X3DEE,	"H and S must be off");
	MakeCode	(x=0X3DEE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3DF5,	"mask.subd");
	MakeCode	(x=0X3DF5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X3DF5,	"DisplayTotals");
	MakeComm	(0X3E03,	"MSG_1080");
	MakeCode	(x=0X3E03);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3E0C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3E0F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3E12);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3E19);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3E23);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3E26);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3E29);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3E2C);
	OpDecimal	(x,	1);
	MakeComm	(0X3E38,	"GET EXTENDED FREE SPACE ON DRIVE\nDS:DX -> ASCIZ string for drive (\"C:\\\" or \"\\\\SERVER\\Share\")\nES:DI -> buffer for extended free space structure\nCX = length of buffer for extended free space");
	MakeCode	(x=0X3E38);
	OpHex		(x,	1);
	MakeComm	(0X3E3B,	"DOS -\n\nReturn:\nCF clear if successful\nES:DI buffer filled\nCF set on error\nAX = error code\n\nFormat of extended free space structure:\n\nOffset  Size    Description\n00h    WORD    (ret) size of returned structure\n02h    WORD    (call) structure version (0000h)\n               (ret) actual structure version (0000h)\n04h    DWORD   number of sectors per cluster\n               (with adjustment for compression)\n08h    DWORD   number of bytes per sector\n0Ch    DWORD   number of available clusters\n10h    DWORD   total number of clusters on the drive\n14h    DWORD   number of physical sectors available on the drive,                   \n               without adjustment for compression\n18h    DWORD   total number of physical sectors on the drive, \n               without adjustment for compression\n1Ch    DWORD   number of available allocation units,\n               without adjustment for compression\n20h    DWORD   total allocation units,\n               without adjustment for compression\n24h  8 BYTEs   reserved");
	MakeCode	(x=0X3E3B);
	OpHex		(x,	0);
	MakeComm	(0X3E3D,	"error code (cf=1) or (cf=0) efs structure size (44)");
	MakeComm	(0X3E3F,	"bytes per sector");
	MakeComm	(0X3E43,	"number of sectors available");
	MakeComm	(0X3E4F,	"cl = 44 (IBMDOS 7.1 Kernel, INT 21h, AX=7303h return value)");
	MakeCode	(x=0X3E51);
	OpHex		(x,	1);
	MakeComm	(0X3E53,	"[FCB]");
	MakeComm	(0X3E57,	"DOS - 2+ - GET DISK SPACE\nDL = drive code (0 = default, 1 = A, 2 = B, etc.)");
	MakeCode	(x=0X3E57);
	OpHex		(x,	0);
	MakeComm	(0X3E59,	"ax = sectors per cluster");
	MakeComm	(0X3E5C,	"invalid drive");
	MakeComm	(0X3E5E,	"* bytes per sectors\ndx:ax = bytes per cluster\nbx = free clusters");
	MakeComm	(0X3E60,	"hw of free sectors");
	MakeComm	(0X3E62,	"lw of free sectors * bytes per sector");
	MakeComm	(0X3E6B,	"dx:ax:cx = free bytes");
	MakeComm	(0X3E72,	"prints free space as kilobytes");
	MakeComm	(0X3E74,	"save al");
	MakeComm	(0X3E76,	"/ 256");
	MakeComm	(0X3E7A,	"/ 2 (= free bytes / 512)");
	MakeCode	(x=0X3E7A);
	OpHex		(x,	1);
	MakeCode	(x=0X3E7C);
	OpHex		(x,	1);
	MakeCode	(x=0X3E7E);
	OpHex		(x,	1);
	MakeComm	(0X3E80,	"/ 2 (= free bytes / 1024)");
	MakeCode	(x=0X3E80);
	OpHex		(x,	1);
	MakeCode	(x=0X3E82);
	OpHex		(x,	1);
	MakeCode	(x=0X3E84);
	OpHex		(x,	1);
	MakeComm	(0X3E86,	"dx > 0");
	MakeCode	(x=0X3E88);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X3E8C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3E8F,	"is dx > 0 ?");
	MakeComm	(0X3E91,	"no");
	MakeComm	(0X3E93,	"MSG_1106 (\".. K bytes free\" msg)\n30 digits, long binary do decimal");
	MakeCode	(x=0X3E93);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3E96);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3E9D,	"MSG_1106 (narrow)\n\".. K bytes free\" msg, 28 digits");
	MakeCode	(x=0X3E9D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3EA2,	"MSG_1020 (\".. bytes free\" msg)\n30 digits, long binary do decimal");
	MakeCode	(x=0X3EA2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3EA5,	"narrow display area ?");
	MakeCode	(x=0X3EA5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3EAA,	"yes");
	MakeComm	(0X3EAC,	"MSG_1020, 33 digits");
	MakeCode	(x=0X3EAC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3EAF,	"not kilobyte option");
	MakeCode	(x=0X3EAF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X3EB4,	"use kilo bytes (if number of free bytes is big)");
	MakeComm	(0X3EB6,	"narrow (28 digits), MSG_1020");
	MakeCode	(x=0X3EB6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3EC0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3EC0,	"FileIsDevice");
	MakeCode	(x=0X3EC6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3ED0);
	OpHex		(x,	1);
	MakeComm	(0X3ED2,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X3ED2);
	OpHex		(x,	0);
	MakeComm	(0X3ED8,	"[DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE");
	MakeCode	(x=0X3ED8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(0X3EE3);
	MakeComm	(0X3EE4,	"COLON_CHAR");
	MakeCode	(x=0X3EE4);
	OpChr		(x,	1);
	MakeCode	(x=0X3EE6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3EF7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3EF7,	"FindFirst");
	MakeCode	(x=0X3EFC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3EFC,	"FindNext");
	MakeName	(0X3EFF,	"ffFindEntry");
	MakeComm	(0X3F00,	"mask.inmem");
	MakeCode	(x=0X3F00);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(0X3F0D);
	MakeCode	(x=0X3F11);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X3F1F);
	MakeCode	(x=0X3F25);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3F25,	"FindInMem");
	MakeComm	(0X3F3F,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X3F3F);
	OpDecimal	(x,	1);
	MakeCode	(0X3F45);
	MakeComm	(0X3F47,	"mark entry 'used'");
	MakeComm	(0X3F4D,	"make temp filename buf on stack");
	MakeCode	(x=0X3F4D);
	OpDecimal	(x,	1);
	MakeName	(0X3F4D,	"FindNextChild");
	MakeComm	(0X3F5A,	"\"*.\" (NASM syntax)");
	MakeComm	(0X3F61,	"AX = \"d:\"");
	MakeComm	(0X3F62,	"DX = ptr to \"d:*.*\",0 on stack");
	MakeComm	(0X3F64,	"ATTR_DIRECTORY");
	MakeCode	(x=0X3F67);
	OpHex		(x,	1);
	MakeComm	(0X3F69,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X3F69);
	OpHex		(x,	0);
	MakeComm	(0X3F6D,	"check child against last, temp");
	MakeComm	(0X3F70,	"ATTR_DIRECTORY");
	MakeCode	(x=0X3F73);
	OpHex		(x,	1);
	MakeComm	(0X3F75,	"DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)\n[DTA] = data block from\nlast AH = 4Eh/4Fh call");
	MakeCode	(x=0X3F75);
	OpHex		(x,	0);
	MakeCode	(0X3F7E);
	MakeComm	(0X3F81,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X3F81);
	OpDecimal	(x,	1);
	MakeCode	(0X3F98);
	MakeComm	(0X3F9A,	"restore stack");
	MakeCode	(x=0X3F9A);
	OpDecimal	(x,	1);
	MakeCode	(0X3F9F);
	MakeName	(0X3F9F,	"FindOneInMem");
	MakeComm	(0X3FAC,	"size EntryStruc");
	MakeCode	(x=0X3FAC);
	OpDecimal	(x,	1);
	MakeName	(0X3FAC,	"FindNextInMem");
	MakeCode	(0X3FB1);
	MakeCode	(0X3FB3);
	MakeName	(0X3FB3,	"GetEnvValue");
	MakeCode	(x=0X3FB4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3FC2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3FCD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X3FD2,	"[FCB-7]");
	MakeCode	(0X3FD2);
	MakeName	(0X3FD2,	"GetFirst");
	MakeComm	(0X3FD7,	"[FCB-1],ATTR_ALL");
	MakeComm	(0X3FDC,	"FCB-7");
	MakeCode	(x=0X3FDC);
	OpHex		(x,	1);
	MakeCode	(x=0X3FDF);
	OpHex		(x,	1);
	MakeComm	(0X3FE1,	"DOS - SEARCH FIRST USING FCB\nDS:DX -> FCB");
	MakeCode	(x=0X3FE1);
	OpHex		(x,	0);
	MakeCode	(x=0X3FE3);
	OpHex		(x,	1);
	MakeComm	(0X3FE9,	"FCB-7");
	MakeCode	(x=0X3FE9);
	OpHex		(x,	1);
	MakeName	(0X3FE9,	"GetNext");
	MakeCode	(x=0X3FEC);
	OpHex		(x,	1);
	MakeComm	(0X3FEE,	"DOS - SEARCH NEXT USING FCB\nDS:DX -> FCB\nReturn: AL = status");
	MakeCode	(x=0X3FEE);
	OpHex		(x,	0);
	MakeCode	(x=0X3FF0);
	OpHex		(x,	1);
	MakeComm	(0X3FF4,	"[DIRBUF+8+DIR_ENTRY.DIR_ATTR]");
	MakeCode	(x=0X3FF4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X3FF4,	"gfFound");
	MakeCode	(x=0X3FF7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X3FFD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4005,	"gfRet");
	MakeComm	(0X4006,	"0");
	MakeCode	(0X4006);
	MakeName	(0X4006,	"ListDir");
	MakeCode	(x=0X4008);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X400B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X400E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4011);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4014);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4017);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X4029);
	MakeComm	(0X403E,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(0X403E);
	MakeComm	(0X4043,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X4043);
	OpDecimal	(x,	1);
	MakeComm	(0X404B,	"word");
	MakeCode	(x=0X404B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X4057);
	MakeName	(0X4057,	"LoadEntries");
	MakeCode	(x=0X4058);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X405E,	"~mask.inmem");
	MakeCode	(x=0X405E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X4071);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4076);
	OpDecimal	(x,	1);
	MakeCode	(0X4080);
	MakeComm	(0X4084,	"mask.inmem");
	MakeCode	(x=0X4084);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X408D,	"DIRBUF+8");
	MakeCode	(x=0X408D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X408D,	"LoadEntry");
	MakeCode	(x=0X4093);
	OpDecimal	(x,	1);
	MakeComm	(0X409A,	"(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1");
	MakeCode	(x=0X409A);
	OpDecimal	(x,	1);
	MakeComm	(0X40A2,	"ATTR_DIRECTORY");
	MakeCode	(x=0X40A2);
	OpHex		(x,	1);
	MakeCode	(0X40AD);
	MakeCode	(x=0X40B5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X40B5,	"NoOrder");
	MakeCode	(0X40BC);
	MakeName	(0X40BC,	"OnOffSw");
	MakeCode	(x=0X40BE);
	OpHex		(x,	1);
	MakeCode	(x=0X40C0);
	OpHex		(x,	1);
	MakeComm	(0X40C7,	"check if it is a negated option");
	MakeCode	(x=0X40C7);
	OpHex		(x,	1);
	MakeCode	(x=0X40CD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X40D3);
	MakeCode	(x=0X40D5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X40DB);
	MakeName	(0X40DB,	"ParseAttr");
	MakeCode	(x=0X40DC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X40F2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X40F5,	"NUM_ATTR_LTRS");
	MakeComm	(0X40FE,	"NUM_ATTR_LTRS");
	MakeCode	(x=0X4105);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X410B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4111);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X4117);
	MakeCode	(0X411D);
	MakeCode	(x=0X4120);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4120,	"Parse_Line");
	MakeComm	(0X4128,	"END_OF_LINE ; -1");
	MakeComm	(0X412D,	"RESULT_NO_ERROR");
	MakeComm	(0X4134,	"RESULT_FILESPEC");
	MakeCode	(0X4140);
	MakeCode	(0X4145);
	MakeCode	(0X4146);
	MakeName	(0X4146,	"ParseOrder");
	MakeComm	(0X4148,	"[bx+ResultBuffer.ValuePtr]");
	MakeCode	(x=0X414B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4162);
	MakeCode	(x=0X416D);
	OpHex		(x,	1);
	MakeCode	(x=0X4170);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4173,	"NUM_ORDER_LTRS");
	MakeComm	(0X417C,	"NUM_ORDER_LTRS");
	MakeCode	(x=0X4184);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4191);
	MakeCode	(0X4198);
	MakeName	(0X4198,	"ParseSwitch");
	MakeComm	(0X419A,	"[bx+ResultBuffer.SynPtr]");
	MakeCode	(x=0X419D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X41A0,	"NUM_DIR_SWS");
	MakeCode	(x=0X41A0);
	OpDecimal	(x,	1);
	MakeComm	(0X41A6,	"Dir_Sw_Ptrs+2");
	MakeCode	(x=0X41A6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X41AA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41B2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X41B2,	"SwHandler");
	MakeWord	(x=0X41B4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41B6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41B8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41BA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41BC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41BE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41C0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41C2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41C4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41C6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41C8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41CA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41CC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41CE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41D0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41D2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0X41D4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X41D6,	"DIRBUF");
	MakeCode	(x=0X41D6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X41D6,	"ChangeDir");
	MakeComm	(0X41E5,	"DIRBUF");
	MakeCode	(x=0X41E5);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X41E8);
	OpHex		(x,	1);
	MakeComm	(0X41EA,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X41EA);
	OpHex		(x,	0);
	MakeCode	(0X41ED);
	MakeName	(0X41ED,	"CmpAscz");
	MakeCode	(0X41FD);
	MakeName	(0X41FD,	"CopyPathname");
	MakeComm	(0X41FE,	"[bx+ResultBuffer.ValuePtr]");
	MakeCode	(0X4206);
	MakeName	(0X4206,	"CountFile");
	MakeCode	(x=0X4207);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X420B,	"word");
	MakeCode	(x=0X420B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X420F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4215);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4219,	"[es:bx+EntryStruc.filesize]");
	MakeComm	(0X421D,	"[es:bx+EntryStruc.filesize+2]");
	MakeCode	(x=0X4221);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4225);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4229);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X422E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4232);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4236);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X423D);
	MakeName	(0X423D,	"DisplayBare");
	MakeCode	(x=0X423F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4243,	"[bx+EntrStruc.filename]");
	MakeComm	(0X424B,	"mask.subd");
	MakeCode	(x=0X424B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X4256);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4259,	"mask.lcase");
	MakeCode	(x=0X4259);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X4271);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4287);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X428D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X429D);
	MakeName	(0X429D,	"DisplayDotForm");
	MakeComm	(0X42CC,	"mask.lcase");
	MakeCode	(x=0X42CC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X42DF,	"fileext + size fileext - 1 ; 9+3-1");
	MakeCode	(x=0X42DF);
	OpDecimal	(x,	1);
	MakeComm	(0X42E2,	"size fileext");
	MakeComm	(0X42F7,	"fileext");
	MakeComm	(0X430A,	"mask.lcase");
	MakeCode	(x=0X430A);
	OpHex		(x,	1);
	MakeComm	(0X431F,	"mask.bare");
	MakeCode	(x=0X431F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X431F,	"DisplayFile");
	MakeCode	(0X432C);
	MakeComm	(0X432F,	"mask.wide");
	MakeCode	(x=0X432F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(0X433C);
	MakeComm	(0X4346,	"mask.bare");
	MakeCode	(x=0X4346);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X4346,	"DisplayHeader");
	MakeComm	(0X434E,	"mask.subd");
	MakeCode	(x=0X434E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(0X435E);
	MakeCode	(x=0X4366);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4376);
	MakeName	(0X4376,	"DisplayName");
	MakeCode	(x=0X4377);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4380);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4395,	"mask.lcase");
	MakeCode	(x=0X4395);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X439D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X43A3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X43A9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X43B0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X43B0,	"DisplayNext");
	MakeCode	(x=0X43B7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X43BE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X43C6);
	MakeCode	(x=0X43CC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X43CF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X43D2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X43D7);
	MakeName	(0X43D7,	"DisplayTheRest");
	MakeCode	(x=0X43D8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X43DE,	"[es:bp+EntryStruc.fileattr],ATTR_DIRECTORY");
	MakeCode	(x=0X43DE);
	OpHex		(x,	1);
	MakeCode	(x=0X43E5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X43EC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X43F2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X43F8,	"MSG_1068");
	MakeCode	(x=0X43F8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X43FB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4402);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X440A,	"[es:bp+EntryStruc.filesize]");
	MakeCode	(0X440A);
	MakeCode	(x=0X440E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeRptCmt	(0X4412,	"[es:bp+EntryStruc.filesize+2]");
	MakeCode	(x=0X4416);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X441A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X441D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4422,	"narrow display");
	MakeComm	(0X4424,	"big file (wide)");
	MakeCode	(x=0X4424);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4427);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X442C,	"big file");
	MakeComm	(0X442E,	"not big file");
	MakeCode	(x=0X442E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4434,	"[es:bp+EntryStruc.filedate]");
	MakeCode	(0X443F);
	MakeComm	(0X4441,	"AX = day of month");
	MakeCode	(x=0X4441);
	OpHex		(x,	1);
	MakeComm	(0X4446,	"AX = date word");
	MakeComm	(0X444A,	"shift day out");
	MakeComm	(0X444C,	"AL = month");
	MakeCode	(x=0X444C);
	OpHex		(x,	1);
	MakeComm	(0X4452,	"CL = year - 1980");
	MakeCode	(x=0X4452);
	OpHex		(x,	1);
	MakeComm	(0X4454,	"CX = year - 1980");
	MakeComm	(0X4456,	"CX = 4-digit year");
	MakeCode	(x=0X4456);
	OpDecimal	(x,	1);
	MakeCode	(x=0X445A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4461,	"after year 2000");
	MakeCode	(x=0X4461);
	OpDecimal	(x,	1);
	MakeComm	(0X4467,	"before year 2000");
	MakeCode	(x=0X4467);
	OpDecimal	(x,	1);
	MakeCode	(x=0X446C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4470);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4474,	"[es:bp+EntryStruc.filetime]");
	MakeComm	(0X4478,	"no time field - go print");
	MakeCode	(x=0X447A);
	OpHex		(x,	1);
	MakeCode	(x=0X447C);
	OpHex		(x,	1);
	MakeComm	(0X447E,	"CH = hours");
	MakeCode	(x=0X447E);
	OpHex		(x,	1);
	MakeCode	(x=0X4480);
	OpHex		(x,	1);
	MakeComm	(0X4482,	"CL = minutes");
	MakeCode	(x=0X4482);
	OpHex		(x,	1);
	MakeComm	(0X4484,	"CX = hr/min");
	MakeCode	(x=0X4486);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X448A,	"MSG_1077 (normal)");
	MakeCode	(x=0X448A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X4490,	"Right_Align+DATE_MDY_2");
	MakeCode	(x=0X4490);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X4495,	"10 (max), 8 (min)");
	MakeCode	(x=0X4495);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X449B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X44A2,	"MSG_1075 (narrow)");
	MakeCode	(x=0X44A2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X44A8,	"12 (max), 10 (min)");
	MakeCode	(x=0X44A8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X44AE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X44B5,	"Right_Align+DATE_MDY_4");
	MakeCode	(x=0X44B5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X44BA,	"12 (max), 10 (min)");
	MakeCode	(x=0X44BA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X44C0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X44C6,	"MSG_1077");
	MakeCode	(x=0X44C6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X44CC,	"Right_Align+DATE_MDY_2");
	MakeCode	(x=0X44CC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X44D1,	"10 (max), 8 (min)");
	MakeCode	(x=0X44D1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X44D7,	"word");
	MakeCode	(x=0X44D7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X44DD,	"word");
	MakeCode	(x=0X44DD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X44E3,	"word");
	MakeCode	(x=0X44E3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X44ED);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X44ED,	"DisplayTrailer");
	MakeCode	(x=0X44FB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4500);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X4500,	"DisplayCntSiz");
	MakeCode	(x=0X4503);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4507);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X450A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4511);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4514);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X451B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4521);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4527);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X452B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X452E);
	OpHex		(x,	1);
	MakeCode	(x=0X4530);
	OpHex		(x,	1);
	MakeCode	(x=0X4532);
	OpHex		(x,	1);
	MakeCode	(x=0X4534);
	OpHex		(x,	1);
	MakeCode	(x=0X4536);
	OpHex		(x,	1);
	MakeCode	(x=0X4538);
	OpHex		(x,	1);
	MakeCode	(x=0X453A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X453E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4541);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4544);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X454B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4550);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4553);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X455A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X455D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4564);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X456D,	"dtrRet");
	MakeCode	(0X456E);
	MakeName	(0X456E,	"DisplayWide");
	MakeCode	(x=0X456F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4573,	"[bx+EntryStruc.fileattr],ATTR_DIRECTORY");
	MakeCode	(x=0X4573);
	OpHex		(x,	1);
	MakeCode	(x=0X4581);
	OpHex		(x,	1);
	MakeComm	(0X458C,	"8+3+1");
	MakeCode	(x=0X458C);
	OpDecimal	(x,	1);
	MakeComm	(0X458F,	"CX = # pad char's");
	MakeComm	(0X459C,	"mask.pagd");
	MakeCode	(x=0X459C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X459C,	"EndPage");
	MakeCode	(x=0X45AC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X45B4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X45B8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X45BC,	"[FCB]");
	MakeCode	(0X45BC);
	MakeName	(0X45BC,	"GetDriveLtr");
	MakeCode	(x=0X45C3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X45C8,	"'A'-1");
	MakeCode	(0X45CD);
	MakeName	(0X45CD,	"SetupParamError");
	MakeComm	(0X45D0,	"parse_msg_class");
	MakeCode	(x=0X45D0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X45D5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X45D8,	"[bx+ResultBuffer.ValuePtr]");
	MakeCode	(x=0X45DB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X45DF,	"one_subst");
	MakeCode	(x=0X45DF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X45E4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X45E8,	"word");
	MakeCode	(x=0X45E8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X45E8,	"UseLine");
	MakeCode	(x=0X45EC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X45F7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X45F7,	"ZeroTotals");
	MakeCode	(x=0X45FA);
	OpDecimal	(x,	1);
	MakeCode	(0X4602);
	MakeName	(0X4602,	"CtrlCHandler");
	MakeCode	(0X4614);
	MakeName	(0X4614,	"LowerCase");
	MakeComm	(0X461C,	"convert to ASCII lowercase");
	MakeCode	(x=0X461C);
	OpHex		(x,	1);
	MakeCode	(0X461F);
	MakeName	(0X461F,	"LowercaseString");
	MakeCode	(0X4636);
	MakeCode	(0X463C);
	MakeCode	(0X463E);
	MakeName	(0X463E,	"CheckDBCSTailByte");
	MakeComm	(0X464D,	"not Kanji");
	MakeCode	(x=0X4652);
	OpHex		(x,	1);
	MakeCode	(x=0X4655);
	OpHex		(x,	1);
	MakeCode	(x=0X465C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X465C,	"PAUSE");
	MakeComm	(0X4669,	"get command line");
	MakeCode	(x=0X4669);
	OpHex		(x,	1);
	MakeName	(0X4669,	"ERASE");
	MakeComm	(0X466C,	"word");
	MakeCode	(x=0X466C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4672);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4677,	"erase_scan");
	MakeCode	(x=0X4686);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X468F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X469F,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(0X46A4);
	MakeName	(0X46A4,	"erase_drive_ok");
	MakeCode	(x=0X46AA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X46AA,	"set_erase_prompt");
	MakeComm	(0X46B1,	"MoreArgs_Ptr");
	MakeComm	(0X46B9,	"word");
	MakeCode	(x=0X46B9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X46B9,	"ok_to_set_erase_prompt");
	MakeCode	(0X46BF);
	MakeName	(0X46BF,	"good_line");
	MakeCode	(x=0X46C4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X46CC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X46D3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X46D3,	"checkdr");
	MakeCode	(0X46DD);
	MakeName	(0X46DD,	"notest2j");
	MakeComm	(0X46E0,	"ERROR_PATH_NOT_FOUND");
	MakeCode	(0X46E0);
	MakeName	(0X46E0,	"badpath_err");
	MakeComm	(0X46E3,	"ext_msg_class");
	MakeCode	(x=0X46E3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X46E3,	"extend_setup");
	MakeCode	(x=0X46E8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X46EB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X46EE,	"errj2");
	MakeCode	(x=0X46F1);
	OpHex		(x,	1);
	MakeName	(0X46F1,	"CRENAME");
	MakeCode	(x=0X46F4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4704);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4717);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4722);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4727);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X472A,	"BadParm_Ptr");
	MakeCode	(x=0X472A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X4731,	"crename_parse_error");
	MakeComm	(0X4733,	"FCB+10h");
	MakeCode	(x=0X4733);
	OpHex		(x,	1);
	MakeName	(0X4733,	"ren_no_drive");
	MakeCode	(x=0X4736);
	OpHex		(x,	1);
	MakeComm	(0X4739,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X4739);
	OpHex		(x,	0);
	MakeCode	(x=0X473C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4740);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X474B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4752);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X475A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4764);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4764,	"notest3");
	MakeCode	(x=0X4767);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X476F,	"FCB_Rename");
	MakeComm	(0X4771,	"FCB");
	MakeCode	(x=0X4771);
	OpHex		(x,	1);
	MakeName	(0X4781,	"renameok");
	MakeCode	(0X478B);
	MakeName	(0X478B,	"rn1");
	MakeComm	(0X478C,	"ERROR_FILE_NOT_FOUND");
	MakeComm	(0X4791,	"ERROR_ACCESS_DENIED");
	MakeCode	(x=0X4799);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4799,	"use_renerr");
	MakeName	(0X479C,	"errj");
	MakeCode	(0X479F);
	MakeCode	(x=0X47A0);
	OpHex		(x,	1);
	MakeName	(0X47A0,	"TYPEFIL");
	MakeCode	(x=0X47A3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X47B3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X47BB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X47C3,	"typefil_parse_error");
	MakeCode	(0X47C6);
	MakeName	(0X47C6,	"gottarg");
	MakeCode	(x=0X47C9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X47D0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X47D6,	"ExtOpen SHL 8");
	MakeCode	(0X47D6);
	MakeName	(0X47D6,	"nowilds");
	MakeComm	(0X47D9,	"read_open_mode");
	MakeComm	(0X47DC,	"no special files");
	MakeComm	(0X47DE,	"read_open_flag");
	MakeCode	(x=0X47E1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X47E9,	"typerr");
	MakeCode	(x=0X47EE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X47F4,	"one_subst");
	MakeCode	(0X47FC);
	MakeName	(0X47FC,	"typecont");
	MakeComm	(0X47FE,	"(IOCTL shl 8) or 0");
	MakeCode	(x=0X4804);
	OpHex		(x,	1);
	MakeComm	(0X4809,	"indicate it is a device");
	MakeComm	(0X4811,	"(LSEEK shl 8) or 2");
	MakeCode	(0X4811);
	MakeName	(0X4811,	"not_device");
	MakeComm	(0X4822,	"(LSEEK shl 8) or 0");
	MakeName	(0X482A,	"dotype");
	MakeComm	(0X4835,	"Is the ^Z flag set?");
	MakeName	(0X4835,	"typelp");
	MakeComm	(0X483B,	"no");
	MakeComm	(0X483D,	"yes, return");
	MakeCode	(0X483E);
	MakeName	(0X483E,	"tf1");
	MakeComm	(0X4843,	"-1 ; is it a device?");
	MakeComm	(0X4849,	"yes, just read from it");
	MakeComm	(0X484B,	"word");
	MakeCode	(0X4860);
	MakeName	(0X4860,	"lt64k");
	MakeComm	(0X486E,	"word");
	MakeCode	(0X4877);
	MakeName	(0X4877,	"gtbuf");
	MakeComm	(0X487C,	"read");
	MakeCode	(x=0X487C);
	OpHex		(x,	1);
	MakeName	(0X487C,	"typ_read");
	MakeCode	(0X4886);
	MakeName	(0X4886,	"tf2");
	MakeComm	(0X488C,	"Check to see if a ^Z was read.");
	MakeComm	(0X489A,	"double check");
	MakeComm	(0X489E,	"No ^Z, continue");
	MakeName	(0X48A0,	"foundz");
	MakeComm	(0X48A5,	"Turn on ^Z flag so that the routine\n will quit after this write.");
	MakeName	(0X48AA,	"typecont2");
	MakeComm	(0X48AE,	"Write");
	MakeCode	(0X48BD);
	MakeName	(0X48BD,	"tf3");
	MakeName	(0X48C2,	"tf4");
	MakeCode	(0X48C3);
	MakeName	(0X48C3,	"Error_outputj");
	MakeComm	(0X48C6,	"IOCTL SHL 8");
	MakeCode	(x=0X48CC);
	OpHex		(x,	1);
	MakeCode	(0X48D4);
	MakeName	(0X48D4,	"typelp_ret");
	MakeCode	(x=0X48D5);
	OpHex		(x,	1);
	MakeName	(0X48D5,	"VOLUME");
	MakeCode	(x=0X48D8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X48EC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X48F6,	"badvolarg");
	MakeCode	(0X48F9);
	MakeName	(0X48F9,	"DisAppend");
	MakeComm	(0X48FC,	"APPENDINSTALL");
	MakeComm	(0X4906,	"APPENDDOS");
	MakeComm	(0X4911,	"APPENDGETSTATE");
	MakeCode	(x=0X4917);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X491B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X491F,	"-1");
	MakeCode	(x=0X491F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4926,	"APPENDSETSTATE");
	MakeCode	(0X4930);
	MakeName	(0X4930,	"OkVolArg");
	MakeComm	(0X4936,	"black (space)");
	MakeComm	(0X493D,	"FCB-7");
	MakeCode	(x=0X493D);
	OpHex		(x,	1);
	MakeComm	(0X4940,	"-1");
	MakeComm	(0X4948,	"ATTR_VOLUME_ID");
	MakeCode	(x=0X494C);
	OpDecimal	(x,	1);
	MakeComm	(0X4953,	"DIRBUF");
	MakeCode	(x=0X4953);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4956,	"Set_DMA");
	MakeComm	(0X495B,	"FCB-7");
	MakeCode	(x=0X495B);
	OpHex		(x,	1);
	MakeComm	(0X495E,	"Dir_Search_First");
	MakeComm	(0X4964,	"[FCB]");
	MakeCode	(x=0X496D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4972);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X497A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X497F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4984,	"offset DIRBUF+8");
	MakeCode	(x=0X4984);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4987);
	OpDecimal	(x,	1);
	MakeCode	(x=0X498F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4993,	"(GetSetMediaID SHL 8)");
	MakeComm	(0X4996,	"[FCB]");
	MakeCode	(x=0X499A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X49A6,	"blank (space)");
	MakeCode	(x=0X49AB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X49B1);
	MakeName	(0X49B1,	"Set_Ext_Error_Msg");
	MakeComm	(0X49B4,	"ext_msg_class");
	MakeCode	(x=0X49B4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X49B9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X49BC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X49C1);
	MakeName	(0X49C1,	"get_ext_error_number");
	MakeComm	(0X49C9,	"GetExtendedError");
	MakeCode	(x=0X49C9);
	OpHex		(x,	1);
	MakeComm	(0X49CD,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X49CD);
	OpHex		(x,	0);
	MakeCode	(x=0X49D8);
	OpHex		(x,	1);
	MakeName	(0X49D8,	"VERSION");
	MakeCode	(x=0X49DB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X49EC,	"END_OF_LINE");
	MakeCode	(0X49F4);
	MakeName	(0X49F4,	"verPrintVer");
	MakeCode	(x=0X49FE);
	OpHex		(x,	1);
	MakeComm	(0X4A01,	"DOS - 5+ Get TRUE Version Number (BL major, BH minor, DL revision, DH flags)");
	MakeCode	(x=0X4A01);
	OpHex		(x,	0);
	MakeComm	(0X4A07,	"'Z'-'A'");
	MakeCode	(x=0X4A07);
	OpDecimal	(x,	1);
	MakeComm	(0X4A0B,	"'*'-'A' ; -23");
	MakeCode	(x=0X4A0B);
	OpHex		(x,	1);
	MakeComm	(0X4A0D,	"'0'");
	MakeCode	(x=0X4A0D);
	OpHex		(x,	1);
	MakeName	(0X4A0D,	"ver1");
	MakeCode	(x=0X4A0F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4A12,	"MSG_1090");
	MakeCode	(x=0X4A12);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4A1B,	"Revision 0");
	MakeCode	(x=0X4A23);
	OpHex		(x,	1);
	MakeComm	(0X4A25,	"MSG_1093");
	MakeCode	(x=0X4A27);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4A2C,	"MSG_1091");
	MakeCode	(x=0X4A2C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4A2C,	"verRom");
	MakeComm	(0X4A31,	"MSG_1092");
	MakeCode	(x=0X4A31);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4A31,	"verHma");
	MakeName	(0X4A34,	"verPrintLoc");
	MakeName	(0X4A37,	"verDone");
	MakeCode	(x=0X4A3A);
	OpHex		(x,	1);
	MakeName	(0X4A3A,	"PRINT_VERSION");
	MakeComm	(0X4A3C,	"DOS - GET DOS VERSION\nReturn: AL = major version number (00h for DOS 1.x)");
	MakeCode	(x=0X4A3C);
	OpHex		(x,	0);
	MakeCode	(x=0X4A41);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4A49);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4A4C,	"MSG_1040");
	MakeCode	(x=0X4A4C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4A52);
	MakeName	(0X4A52,	"PRINT_PROMPT");
	MakeComm	(0X4A57,	"SMARTDRV INSTALLATION CHECK (*)");
	MakeComm	(0X4A5A,	"(*)");
	MakeCode	(x=0X4A5D);
	OpHex		(x,	0);
	MakeComm	(0X4A5F,	"0BABEh if installed");
	MakeComm	(0X4A64,	"number of dirty cache elements");
	MakeComm	(0X4A7F,	"SMARTDRV - FLUSH BUFFERS (**)");
	MakeCode	(0X4A7F);
	MakeComm	(0X4A82,	"(**)");
	MakeCode	(x=0X4A85);
	OpHex		(x,	0);
	MakeCode	(0X4A89);
	MakeCode	(x=0X4A91);
	OpChr		(x,	1);
	MakeCode	(0X4A9A);
	MakeComm	(0X4A9E,	"PROMPT_TABLE-3");
	MakeCode	(x=0X4A9E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4AB6);
	MakeCode	(0X4AC1);
	MakeCode	(x=0X4AC4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4AC4,	"PRINT_BACK");
	MakeCode	(0X4ACA);
	MakeName	(0X4ACA,	"PRINT_EQ");
	MakeCode	(0X4ACE);
	MakeName	(0X4ACE,	"PRINT_R");
	MakeCode	(x=0X4ACF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4AD3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4AD9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4ADB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4AFA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X4AFA,	"Print_R_@");
	MakeStr		(0X4B01,	0X4B05);
	MakeName	(0X4B01,	"RetCode_str");
	MakeCode	(0X4B05);
	MakeName	(0X4B05,	"PRINT_ESC");
	MakeComm	(0X4B09,	"RABRACKET");
	MakeCode	(0X4B09);
	MakeName	(0X4B09,	"PRINT_G");
	MakeComm	(0X4B0D,	"LABRACKET");
	MakeCode	(0X4B0D);
	MakeName	(0X4B0D,	"PRINT_L");
	MakeComm	(0X4B11,	"VBAR");
	MakeCode	(0X4B11);
	MakeName	(0X4B11,	"Print_B");
	MakeName	(0X4B13,	"PRINT_CHAR");
	MakeComm	(0X4B1A,	"STD_CON_OUTPUT");
	MakeCode	(x=0X4B1A);
	OpHex		(x,	1);
	MakeComm	(0X4B1C,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X4B1C);
	OpHex		(x,	0);
	MakeCode	(x=0X4B22);
	OpHex		(x,	1);
	MakeName	(0X4B22,	"PRINT_DRIVE");
	MakeComm	(0X4B24,	"DOS - GET DEFAULT DISK NUMBER");
	MakeCode	(x=0X4B24);
	OpHex		(x,	0);
	MakeCode	(0X4B2C);
	MakeName	(0X4B2C,	"build_dir_for_prompt");
	MakeCode	(x=0X4B2E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4B33);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4B36);
	OpChr		(x,	1);
	MakeCode	(x=0X4B38);
	OpChr		(x,	1);
	MakeCode	(x=0X4B3B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4B41);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4B45);
	OpHex		(x,	1);
	MakeComm	(0X4B47,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X4B47);
	OpHex		(x,	0);
	MakeCode	(x=0X4B49);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4B49,	"Print_R_@@");
	MakeCode	(x=0X4B4E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4B55);
	MakeName	(0X4B55,	"build_dir_for_chdir");
	MakeComm	(0X4B58,	"DIRBUF");
	MakeCode	(x=0X4B58);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4B5B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4B5F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4B66,	"FCB");
	MakeCode	(0X4B66);
	MakeName	(0X4B66,	"build_dir_string");
	MakeCode	(x=0X4B72);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4B79);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4B7C);
	OpHex		(x,	1);
	MakeComm	(0X4B7E,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X4B7E);
	OpHex		(x,	0);
	MakeCode	(x=0X4B87);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4B8D);
	OpChr		(x,	1);
	MakeCode	(0X4B95);
	MakeName	(0X4B95,	"PATH");
	MakeCode	(x=0X4B97);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4BA1,	"semicolon");
	MakeCode	(0X4BA8);
	MakeComm	(0X4BA9,	"END_OF_LINE_IN");
	MakeComm	(0X4BAD,	"See if DBCS");
	MakeComm	(0X4BB0,	"No - continue");
	MakeComm	(0X4BB7,	"upper case the character");
	MakeCode	(0X4BB7);
	MakeComm	(0X4BBA,	"semicolon");
	MakeComm	(0X4BC4,	"END_OF_LINE_IN");
	MakeComm	(0X4BC8,	"blank");
	MakeComm	(0X4BCC,	"tab_chr");
	MakeCode	(x=0X4BD0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4BD3,	"MoreArgs_Ptr");
	MakeComm	(0X4BD9,	"parse_msg_class");
	MakeCode	(0X4BE1);
	MakeCode	(x=0X4BF0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4BFD);
	MakeCode	(0X4C01);
	MakeCode	(0X4C0B);
	MakeName	(0X4C0B,	"print_path");
	MakeCode	(x=0X4C11);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4C1B);
	MakeComm	(0X4C22,	"Look for null");
	MakeComm	(0X4C2D,	"Arg_Buf ; = TPBUF");
	MakeCode	(x=0X4C2D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4C30);
	OpDecimal	(x,	1);
	MakeComm	(0X4C33,	"ch = 0");
	MakeComm	(0X4C35,	"cl = neg cl (256-cl)");
	MakeCode	(x=0X4C39);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4C41);
	MakeName	(0X4C41,	"CLS");
	MakeComm	(0X4C45,	"- Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK\nReturn: AL = FFh if installed");
	MakeCode	(x=0X4C45);
	OpHex		(x,	0);
	MakeComm	(0X4C4B,	"(IOCTL SHL 8) + generic_ioctl_handle");
	MakeComm	(0X4C4E,	"handle");
	MakeComm	(0X4C51,	"CON device");
	MakeComm	(0X4C53,	"minor function, get display info");
	MakeCode	(x=0X4C53);
	OpHex		(x,	1);
	MakeCode	(x=0X4C55);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4C58,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X4C58);
	OpHex		(x,	0);
	MakeComm	(0X4C68,	"stdout");
	MakeCode	(0X4C68);
	MakeCode	(x=0X4C6B);
	OpHex		(x,	1);
	MakeComm	(0X4C6E,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X4C6E);
	OpHex		(x,	0);
	MakeComm	(0X4C70,	"devid_ISDEV");
	MakeCode	(x=0X4C70);
	OpHex		(x,	1);
	MakeComm	(0X4C75,	"devid_SPECIAL");
	MakeCode	(x=0X4C75);
	OpHex		(x,	1);
	MakeCode	(0X4C7F);
	MakeComm	(0X4C81,	"- VIDEO - GET CURRENT VIDEO MODE\nReturn: AH = number of columns on screen\nAL = current video mode\nBH = current active display page");
	MakeCode	(x=0X4C81);
	OpHex		(x,	0);
	MakeComm	(0X4C83,	"video_alpha");
	MakeComm	(0X4C87,	"video_bw");
	MakeComm	(0X4C8D,	"- VIDEO - SET VIDEO MODE\nAL = mode");
	MakeCode	(x=0X4C8D);
	OpHex		(x,	0);
	MakeCode	(0X4C91);
	MakeComm	(0X4C92,	"ROMBIOS_DATA segment");
	MakeCode	(x=0X4C92);
	OpHex		(x,	1);
	MakeComm	(0X4C97,	"[CRT_Cols]");
	MakeComm	(0X4C9B,	"[CRT_Rows]");
	MakeComm	(0X4CA4,	"LINESPERPAGE");
	MakeCode	(x=0X4CA4);
	OpDecimal	(x,	1);
	MakeComm	(0X4CAC,	"Clear the screen using INT 10H");
	MakeCode	(0X4CAC);
	MakeName	(0X4CAC,	"reg_cls");
	MakeComm	(0X4CB5,	"- VIDEO - SET COLOR PALETTE\nBH = 00h, BL = border color\nBH = 01h, BL = palette (0-3)");
	MakeCode	(x=0X4CB5);
	OpHex		(x,	0);
	MakeComm	(0X4CC2,	"- VIDEO - SCROLL PAGE UP\nAL = number of lines to scroll window (0 = blank whole window)\nBH = attributes to be used on blanked lines\nCH,CL = row,column of upper left corner of window to scroll\nDH,DL = row,column of lower right corner of window");
	MakeCode	(x=0X4CC2);
	OpHex		(x,	0);
	MakeComm	(0X4CC6,	"- VIDEO - GET CURRENT VIDEO MODE\nReturn: AH = number of columns on screen\nAL = current video mode\nBH = current active display page");
	MakeCode	(x=0X4CC6);
	OpHex		(x,	0);
	MakeComm	(0X4CCC,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ");
	MakeCode	(x=0X4CCC);
	OpHex		(x,	0);
	MakeCode	(x=0X4CCF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4CCF,	"ansi_cls");
	MakeComm	(0X4CDC,	"DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT\nDL = character <> FFh\n Return: ZF set = no character\n  ZF clear = character recieved, AL = character");
	MakeCode	(x=0X4CDC);
	OpHex		(x,	0);
	MakeCode	(0X4CE1);
	MakeName	(0X4CE1,	"CTTY");
	MakeCode	(x=0X4CE3);
	OpHex		(x,	1);
	MakeCode	(x=0X4CE6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4CFB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4CFF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4D09);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4D13);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4D16);
	OpHex		(x,	1);
	MakeComm	(0X4D19,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write");
	MakeCode	(x=0X4D19);
	OpHex		(x,	0);
	MakeCode	(x=0X4D1F);
	OpHex		(x,	1);
	MakeComm	(0X4D22,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X4D22);
	OpHex		(x,	0);
	MakeCode	(x=0X4D24);
	OpHex		(x,	1);
	MakeCode	(x=0X4D29);
	OpHex		(x,	1);
	MakeComm	(0X4D2B,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X4D2B);
	OpHex		(x,	0);
	MakeCode	(x=0X4D2D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4D35);
	MakeCode	(x=0X4D36);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4D39,	"-1");
	MakeComm	(0X4D41,	"(Write shl 8)");
	MakeComm	(0X4D47,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X4D47);
	OpHex		(x,	0);
	MakeCode	(x=0X4D4F);
	OpHex		(x,	1);
	MakeComm	(0X4D52,	"(IOCTL SHL 8) OR 1");
	MakeCode	(x=0X4D52);
	OpHex		(x,	1);
	MakeComm	(0X4D55,	"DOS - 2+ - IOCTL - SET DEVICE INFORMATION\nBX = device handle, DH = 0\nDL = device information to set (bits 0-7 from function 0)");
	MakeCode	(x=0X4D55);
	OpHex		(x,	0);
	MakeCode	(x=0X4D5D);
	OpHex		(x,	1);
	MakeComm	(0X4D5F,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X4D5F);
	OpHex		(x,	0);
	MakeComm	(0X4D65,	"XDUP");
	MakeCode	(x=0X4D65);
	OpHex		(x,	1);
	MakeComm	(0X4D67,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X4D67);
	OpHex		(x,	0);
	MakeCode	(x=0X4D69);
	OpHex		(x,	1);
	MakeComm	(0X4D6B,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X4D6B);
	OpHex		(x,	0);
	MakeCode	(x=0X4D6D);
	OpHex		(x,	1);
	MakeComm	(0X4D6F,	"DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)\nBX = file handle to duplicate");
	MakeCode	(x=0X4D6F);
	OpHex		(x,	0);
	MakeComm	(0X4D71,	"CLOSE");
	MakeCode	(x=0X4D71);
	OpHex		(x,	1);
	MakeComm	(0X4D73,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X4D73);
	OpHex		(x,	0);
	MakeCode	(x=0X4D75);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4D7A,	"[PDB.JFN_TABLE]");
	MakeCode	(x=0X4D7D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4D80);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X4D85);
	MakeName	(0X4D85,	"CHCP");
	MakeCode	(x=0X4D87);
	OpHex		(x,	1);
	MakeCode	(x=0X4D8A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4D9F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4DA4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4DA9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4DB1,	"NLSFUNC");
	MakeComm	(0X4DB5,	"- Multiplex - NLSFUNC.COM - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, not OK\nFFh installed");
	MakeCode	(x=0X4DB5);
	OpHex		(x,	0);
	MakeCode	(x=0X4DBB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4DC0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4DC0,	"got_NLS");
	MakeCode	(x=0X4DC4);
	OpHex		(x,	1);
	MakeCode	(x=0X4DC6);
	OpHex		(x,	1);
	MakeComm	(0X4DC8,	"DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE\nBX = active code page \nDX = system code page (active page at boot time)");
	MakeCode	(x=0X4DC8);
	OpHex		(x,	0);
	MakeComm	(0X4DCC,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(x=0X4DD1);
	OpHex		(x,	1);
	MakeComm	(0X4DD5,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X4DD5);
	OpHex		(x,	0);
	MakeComm	(0X4DD7,	"ERROR_INVALID_DATA");
	MakeCode	(x=0X4DDC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4DE1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4DE1,	"no_countrysys");
	MakeCode	(x=0X4DE6);
	OpHex		(x,	1);
	MakeName	(0X4DE6,	"chcp_other_error");
	MakeComm	(0X4DEA,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X4DEA);
	OpHex		(x,	0);
	MakeComm	(0X4DEC,	"was it access denied?");
	MakeCode	(x=0X4DEC);
	OpDecimal	(x,	1);
	MakeComm	(0X4DEF,	"no - assume all failed");
	MakeCode	(x=0X4DF1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4DF6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4DF6,	"none_set");
	MakeName	(0X4DF9,	"cp_error");
	MakeCode	(x=0X4DFC);
	OpHex		(x,	1);
	MakeName	(0X4DFC,	"getcp");
	MakeComm	(0X4E00,	"DOS - 3.3+ - GET GLOBAL CODE PAGE TABLE");
	MakeCode	(x=0X4E00);
	OpHex		(x,	0);
	MakeCode	(x=0X4E02);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4E06);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4E0C,	"chcp_return");
	MakeCode	(0X4E0D);
	MakeName	(0X4E0D,	"TRUENAME");
	MakeCode	(x=0X4E0F);
	OpHex		(x,	1);
	MakeCode	(x=0X4E12);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4E1C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4E29,	"byte [PARSE1_TYPE],result_drive");
	MakeCode	(x=0X4E29);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4E32,	"END_OF_LINE_OUT");
	MakeCode	(0X4E32);
	MakeName	(0X4E32,	"tn_eol");
	MakeCode	(0X4E39);
	MakeName	(0X4E39,	"tn_drive");
	MakeCode	(x=0X4E3A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4E3E,	"\"A\"-1");
	MakeComm	(0X4E41,	"':.' (NASM syntax)");
	MakeComm	(0X4E45,	"END_OF_LINE_OUT");
	MakeCode	(0X4E4B);
	MakeName	(0X4E4B,	"tn_filespec");
	MakeCode	(x=0X4E4C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4E50,	"tn_move_filename");
	MakeCode	(x=0X4E57);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4E57,	"tn_check_eol");
	MakeName	(0X4E5F,	"tn_parse_error");
	MakeCode	(x=0X4E62);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4E62,	"tn_doit");
	MakeCode	(x=0X4E65);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4E68,	"ax = (xNameTrans<<8)");
	MakeCode	(x=0X4E68);
	OpHex		(x,	1);
	MakeComm	(0X4E6B,	"DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING\nDS:SI -> ASCIZ relative path string or directory name\nES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name");
	MakeCode	(x=0X4E6B);
	OpHex		(x,	0);
	MakeCode	(x=0X4E72);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4E78,	"one_subst");
	MakeCode	(x=0X4E78);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4E80);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4E80,	"tn_print_xname");
	MakeCode	(x=0X4E86);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4E90);
	MakeName	(0X4E90,	"_$EXIT");
	MakeCode	(x=0X4E91);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4E95,	"byte ; is this a permanent COMMAND?");
	MakeCode	(x=0X4E95);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4E9A,	"no - free everything");
	MakeComm	(0X4E9C,	"-1");
	MakeCode	(x=0X4E9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4EA1,	"exit singlecom");
	MakeComm	(0X4EA3,	"permanent command, recycle");
	MakeCode	(0X4EA6);
	MakeCode	(x=0X4EAA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4EAE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4EB2,	"[es:PDB.PARENT_PID]");
	MakeCode	(x=0X4EB6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4EBA,	"[es:PDB.EXIT]");
	MakeCode	(x=0X4EBE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4EC2,	"[es:PDB.EXIT+2]");
	MakeCode	(x=0X4EC7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4ECB,	"DEALLOC");
	MakeCode	(x=0X4ECB);
	OpHex		(x,	1);
	MakeComm	(0X4ECD,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X4ECD);
	OpHex		(x,	0);
	MakeComm	(0X4ED0,	"Exit");
	MakeCode	(x=0X4ED0);
	OpHex		(x,	1);
	MakeCode	(x=0X4ED2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4ED6,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0X4ED6);
	OpHex		(x,	0);
	MakeCode	(0X4ED8);
	MakeName	(0X4ED8,	"parse_check_eol");
	MakeCode	(x=0X4EDA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4EEF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X4EEF,	"Parse_With_Msg");
	MakeComm	(0X4F03,	"parse_msg_class");
	MakeCode	(x=0X4F03);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X4F03,	"setup_parse_error_msg");
	MakeCode	(x=0X4F08);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4F0B,	"END_OF_LINE_OUT");
	MakeCode	(x=0X4F0E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4F11,	"LessArgs_Ptr");
	MakeCode	(x=0X4F16);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4F1A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X4F1E,	"one_subst");
	MakeCode	(x=0X4F1E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X4F25);
	MakeName	(0X4F25,	"ADD_PROMPT");
	MakeName	(0X4F32,	"ADD_PROMPT_RETN");
	MakeCode	(0X4F33);
	MakeName	(0X4F33,	"ADD_PROMPT3");
	MakeCode	(0X4F3C);
	MakeName	(0X4F3C,	"DISP_ENVJ");
	MakeCode	(0X4F3F);
	MakeName	(0X4F3F,	"ADD_NAME_TO_ENVIRONMENT");
	MakeName	(0X4F47,	"EQLP");
	MakeCode	(0X4F5B);
	MakeName	(0X4F5B,	"QUEQ");
	MakeCode	(x=0X4F60);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X4F66);
	MakeName	(0X4F66,	"ONEQ");
	MakeComm	(0X4F7A,	"byte");
	MakeCode	(x=0X4F7A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4F7F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X4F89,	"byte");
	MakeCode	(x=0X4F89);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X4F8D,	"NOT_COMSPEC");
	MakeName	(0X4F8F,	"ADD_NAME");
	MakeName	(0X4F91,	"ADD_NAME1");
	MakeComm	(0X4F92,	"13");
	MakeCode	(0X4F9B);
	MakeName	(0X4F9B,	"ADD_NAME_RET");
	MakeComm	(0X4F9C,	"byte");
	MakeCode	(x=0X4F9C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X4FA1,	"ADD_NAME_JZ_RET");
	MakeCode	(x=0X4FA6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X4FAA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4FB1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4FBE);
	OpChr		(x,	1);
	MakeCode	(x=0X4FC9);
	OpChr		(x,	1);
	MakeCode	(x=0X4FD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4FD4,	"'A'-1");
	MakeCode	(x=0X4FD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4FD6,	"_GOTDRIVE");
	MakeCode	(x=0X4FDB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4FE1,	"COPY_COMSPEC");
	MakeComm	(0X4FE7,	"13");
	MakeCode	(0X4FEE);
	MakeName	(0X4FEE,	"COPYDONE");
	MakeComm	(0X4FF1,	"byte");
	MakeCode	(x=0X4FF1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X4FF7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4FFD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X4FFD,	"DISP_ENV");
	MakeCode	(x=0X5001);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X5007,	"PENVLP");
	MakeComm	(0X500C,	"Arg_Buf");
	MakeCode	(x=0X500C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X500F,	"PENVLP2");
	MakeCode	(x=0X5015);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5021);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X5021,	"delete_path");
	MakeCode	(x=0X5026);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X5026,	"delete_prompt");
	MakeName	(0X5029,	"delete_name_in_environment");
	MakeName	(0X5049,	"find_retn");
	MakeCode	(x=0X504A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X504A,	"find_path");
	MakeCode	(x=0X504F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X504F,	"find_prompt");
	MakeName	(0X5052,	"find_name_in_environment");
	MakeCode	(0X505A);
	MakeName	(0X505A,	"FIND");
	MakeCode	(x=0X505E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5062);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X5081);
	MakeCode	(0X509F);
	MakeName	(0X509F,	"COUNT0");
	MakeCode	(0X50A9);
	MakeName	(0X50B2,	"move_name_retn");
	MakeCode	(0X50B3);
	MakeName	(0X50B3,	"move_name");
	MakeCode	(0X50C7);
	MakeName	(0X50D1,	"getarg_retn");
	MakeCode	(x=0X50D2);
	OpHex		(x,	1);
	MakeName	(0X50D2,	"GETARG");
	MakeComm	(0X50DD,	"13");
	MakeName	(0X50DF,	"sdn_retn");
	MakeCode	(x=0X50E0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X50E0,	"scan_double_null");
	MakeCode	(x=0X50E4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X50F6);
	MakeName	(0X50F6,	"SCASB1");
	MakeCode	(0X50FA);
	MakeName	(0X50FA,	"SCASB2");
	MakeCode	(x=0X50FC);
	OpDecimal	(x,	1);
	MakeName	(0X50FC,	"SCASBX");
	MakeCode	(0X5102);
	MakeName	(0X5102,	"testkanj");
	MakeCode	(0X5121);
	MakeCode	(0X5125);
	MakeComm	(0X512C,	"see if char is > ascii 128");
	MakeCode	(x=0X512C);
	OpHex		(x,	1);
	MakeName	(0X512C,	"UPCONV");
	MakeComm	(0X512E,	"no - upper case math");
	MakeComm	(0X5130,	"only upper 128 chars in table");
	MakeCode	(x=0X5130);
	OpHex		(x,	1);
	MakeCode	(x=0X5134);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5138,	"get table address");
	MakeCode	(x=0X5138);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X513C,	"skip over first word");
	MakeCode	(0X5144);
	MakeComm	(0X514C,	"Change lower-case to upper");
	MakeCode	(0X514F);
	MakeName	(0X514F,	"store_char");
	MakeCode	(x=0X5153);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5157);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X517B);
	MakeCode	(x=0X518D);
	OpHex		(x,	1);
	MakeComm	(0X518F,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X518F);
	OpHex		(x,	0);
	MakeCode	(x=0X5193);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X51A1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X51A7);
	MakeCode	(0X51B1);
	MakeName	(0X51B1,	"GETENVSIZ");
	MakeComm	(0X51B8,	"[es:ARENA.size]");
	MakeComm	(0X51BE,	"Convert to bytes");
	MakeName	(0X51C4,	"getenvsiz_retn");
	MakeCode	(0X51C5);
	MakeName	(0X51C5,	"RestUDir1");
	MakeCode	(x=0X51C6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X51CA,	"byte");
	MakeCode	(x=0X51CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X51D2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X51D2,	"RestUDir");
	MakeCode	(x=0X51D5);
	OpHex		(x,	1);
	MakeComm	(0X51D7,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X51D7);
	OpHex		(x,	0);
	MakeComm	(0X51D9,	"0");
	MakeCode	(x=0X51DF);
	OpHex		(x,	1);
	MakeName	(0X51DF,	"_$CHDIR");
	MakeCode	(x=0X51E2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X51F6,	"byte [PARSE1_TYPE],result_drive");
	MakeCode	(x=0X51F6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X51FD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X520E);
	MakeCode	(x=0X520F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5217);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5224);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X522B,	"CHDir");
	MakeCode	(x=0X522B);
	OpHex		(x,	1);
	MakeComm	(0X5235,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X523A,	"ERROR_ACCESS_DENIED");
	MakeCode	(x=0X5244);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X524A,	"mkdir_retn");
	MakeCode	(0X524B);
	MakeName	(0X524B,	"_$MKDIR");
	MakeComm	(0X5250,	"MKDIR");
	MakeCode	(x=0X5250);
	OpHex		(x,	1);
	MakeComm	(0X525A,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X525F,	"ERROR_ACCESS_DENIED");
	MakeCode	(x=0X5269);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X526C,	"Set_DMA");
	MakeComm	(0X5271,	"Find_First");
	MakeComm	(0X5273,	"ATTR_DIRECTORY");
	MakeComm	(0X527B,	"[SRCXNAME+FIND_BUF.ATTR] ; [SRCXNAME+21]");
	MakeCode	(x=0X527B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X527F,	"ATTR_DIRECTORY");
	MakeCode	(x=0X527F);
	OpHex		(x,	1);
	MakeCode	(x=0X5284);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5289);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X528F,	"rmdir_retn");
	MakeCode	(x=0X5290);
	OpHex		(x,	1);
	MakeName	(0X5290,	"SETRMMK");
	MakeCode	(x=0X5293);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X52A2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X52A7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X52B2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X52BB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X52C1,	"setrmmk_retn");
	MakeCode	(0X52C2);
	MakeName	(0X52C2,	"_$RMDIR");
	MakeComm	(0X52C9,	"RMDIR");
	MakeCode	(x=0X52C9);
	OpHex		(x,	1);
	MakeComm	(0X52D3,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X52D8,	"ERROR_ACCESS_DENIED");
	MakeCode	(x=0X52E2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X52E8,	"savudir_err_retn");
	MakeComm	(0X52E9,	"ext_msg_class");
	MakeCode	(x=0X52E9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X52E9,	"set_ext_error_subst");
	MakeCode	(x=0X52EE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X52F2,	"one_subst");
	MakeCode	(x=0X52F2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X52F7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X52FA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X52FE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X52FE,	"SAVUDIR");
	MakeName	(0X5301,	"SAVUDIR1");
	MakeCode	(x=0X5309);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X530D,	"A = 1");
	MakeCode	(x=0X5310);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X531B,	"CURRENT_DIR");
	MakeCode	(x=0X531B);
	OpHex		(x,	1);
	MakeCode	(0X5325);
	MakeName	(0X5325,	"CRLF2");
	MakeCode	(x=0X5326);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X5332);
	MakeName	(0X5332,	"scanoff");
	MakeName	(0X5339,	"scanoff_retn");
	MakeCode	(0X533A);
	MakeName	(0X533A,	"DELIM");
	MakeCode	(0X5351);
	MakeName	(0X5351,	"FCB_TO_ASCZ");
	MakeName	(0X5376,	"STRCOMP_RETN");
	MakeCode	(0X5377);
	MakeName	(0X5377,	"STRCOMP");
	MakeComm	(0X5378,	"Strings not equal");
	MakeComm	(0X537A,	"Hit NUL terminator?");
	MakeComm	(0X537E,	"Yes, strings equal");
	MakeCode	(0X5382);
	MakeName	(0X5382,	"CRPRINT");
	MakeComm	(0X5383,	"13");
	MakeComm	(0X5389,	"65535");
	MakeComm	(0X5391,	"nul terminate the string");
	MakeCode	(x=0X5396);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X539A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X53A0,	"put the CR back");
	MakeCode	(0X53AA);
	MakeName	(0X53AA,	"error_output");
	MakeCode	(x=0X53B0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X53B3,	"byte");
	MakeCode	(x=0X53BE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X53C4);
	MakeName	(0X53C4,	"pathchrcmp");
	MakeCode	(0X53D5);
	MakeName	(0X53D5,	"PathCrunch");
	MakeComm	(0X53DB,	"[FCB]");
	MakeCode	(x=0X53DB);
	MakeComm	(0X53E7,	"test if wildcards (? or *) seen");
	MakeCode	(x=0X53E7);
	OpHex		(x,	1);
	MakeComm	(0X53EC,	"wildcard seen, peel filename");
	MakeCode	(x=0X53EE);
	OpHex		(x,	1);
	MakeComm	(0X53F0,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X53F0);
	OpHex		(x,	0);
	MakeComm	(0X53F7,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X53FC,	"ERROR_ACCESS_DENIED");
	MakeCode	(0X5407);
	MakeCode	(x=0X540A);
	OpChr		(x,	1);
	MakeComm	(0X540C,	"FCB+1");
	MakeCode	(x=0X540C);
	OpHex		(x,	1);
	MakeCode	(x=0X540F);
	OpDecimal	(x,	1);
	MakeCode	(0X5417);
	MakeCode	(0X541A);
	MakeCode	(0X5440);
	MakeCode	(0X544A);
	MakeComm	(0X5459,	"byte");
	MakeComm	(0X5465,	"byte");
	MakeCode	(0X546B);
	MakeComm	(0X5486,	"byte");
	MakeCode	(0X5494);
	MakeCode	(x=0X5497);
	OpHex		(x,	1);
	MakeCode	(0X54A8);
	MakeComm	(0X54C8,	"-1");
	MakeComm	(0X54CF,	"FCB");
	MakeCode	(x=0X54CF);
	OpHex		(x,	1);
	MakeCode	(x=0X54D2);
	OpHex		(x,	1);
	MakeComm	(0X54D5,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X54D5);
	OpHex		(x,	0);
	MakeCode	(0X54D9);
	MakeCode	(0X54DB);
	MakeName	(0X54DB,	"SWITCH");
	MakeComm	(0X54E6,	"FSWITCH");
	MakeCode	(x=0X54E6);
	OpHex		(x,	1);
	MakeCode	(x=0X54F6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X5509);
	MakeCode	(x=0X550B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X550B,	"DRVBAD");
	MakeCode	(0X5511);
	MakeName	(0X5511,	"EXTERNALJ");
	MakeCode	(0X5514);
	MakeName	(0X5514,	"FNDCOM");
	MakeName	(0X551D,	"APPEND_INTERNAL");
	MakeComm	(0X5527,	"byte");
	MakeCode	(x=0X552E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5534);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X553A,	"- Multiplex - DOS 3.3+ internal - INSTALLABLE COMMAND - EXECUTE\nDX = FFFFh, DS:SI -> buffer\nReturn: buffer at DS:SI filled with a length byte followed by the uppercase\ninternal command to execute (if length not 0)");
	MakeCode	(x=0X553A);
	OpHex		(x,	0);
	MakeCode	(x=0X5546);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X5546,	"CONTCOM");
	MakeCode	(x=0X554B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X554B,	"FINDCOM");
	MakeName	(0X555F,	"ABCD");
	MakeComm	(0X5573,	"byte");
	MakeName	(0X557D,	"DONT_SET_IO");
	MakeComm	(0X5580,	"[AllSwitch]");
	MakeComm	(0X5584,	"SwitchQues");
	MakeCode	(x=0X5584);
	OpHex		(x,	1);
	MakeComm	(0X5589,	"byte [CHKDRV],fLimitHelp");
	MakeCode	(x=0X5589);
	OpHex		(x,	1);
	MakeComm	(0X5590,	"[ARG+ARG_UNIT.argvcnt]");
	MakeName	(0X5597,	"DO_HELP");
	MakeName	(0X559D,	"NEXT_HELP_MSG");
	MakeCode	(0X55AB);
	MakeName	(0X55AB,	"HELP_DONE");
	MakeComm	(0X55AF,	"byte [CHKDRV],FCHECKDRIVE");
	MakeCode	(x=0X55AF);
	OpHex		(x,	1);
	MakeName	(0X55AF,	"DRIVE_CHECK");
	MakeComm	(0X55BD,	"-1");
	MakeCode	(0X55C4);
	MakeName	(0X55C4,	"NOCHECK");
	MakeComm	(0X55C7,	"byte [CHKDRV],fSwitchAllowed");
	MakeCode	(x=0X55C7);
	OpHex		(x,	1);
	MakeComm	(0X55D3,	"parse_msg_class");
	MakeCode	(x=0X55D8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X55DB,	"BadSwt_Ptr");
	MakeCode	(0X55E4);
	MakeName	(0X55E4,	"REALWORK");
	MakeName	(0X55E6,	"CMD_DONE");
	MakeComm	(0X55ED,	"call_in_progress");
	MakeCode	(0X55FD);
	MakeName	(0X55FD,	"INCALL");
	MakeCode	(0X5600);
	MakeName	(0X5600,	"noswit");
	MakeCode	(x=0X5601);
	OpHex		(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	MakeCode	(x=0X5604);
	OpHex		(x,	1);
	MakeCode	(0X5616);
	MakeName	(0X5616,	"EXTERNAL");
	MakeComm	(0X561E,	"byte [cs:FILTYP],0");
	MakeCode	(0X561E);
	MakeName	(0X561E,	"NOT_BARRYF");
	MakeComm	(0X562E,	"byte");
	MakeCode	(x=0X5635);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X563E,	"byte");
	MakeCode	(x=0X5645);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X5645,	"DO_SCAN");
	MakeComm	(0X564B,	"byte");
	MakeComm	(0X565D,	"jge short EXECUTE\n... .BAT file ...");
	MakeCode	(x=0X565F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5662);
	OpHex		(x,	1);
	MakeComm	(0X5665,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X5665);
	OpHex		(x,	0);
	MakeComm	(0X5669,	"clear 1st two bytes of the buffer");
	MakeCode	(x=0X5669);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X566E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5676);
	OpHex		(x,	1);
	MakeComm	(0X5678,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X5678);
	OpHex		(x,	0);
	MakeCode	(x=0X567A);
	OpHex		(x,	1);
	MakeComm	(0X567C,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X567C);
	OpHex		(x,	0);
	MakeComm	(0X567E,	"'/*' (NASM syntax)");
	MakeCode	(x=0X567E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X5686);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5689,	"[ARG+ARGV_ELE.argpointer]");
	MakeCode	(x=0X5689);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X568C,	"[ARG+ARGV_ELE.argflags]");
	MakeCode	(x=0X568C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5691,	"[ARG+ARGV_ELE.argstartel]");
	MakeCode	(x=0X5691);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5694,	"[ARG+ARGV_ELE.arglen]");
	MakeCode	(x=0X5694);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X569A,	"[ARG+ARGV_ELE.argsw_word]");
	MakeCode	(x=0X569A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X56A0,	"[ARG+ARGV_ELE.arg_ocomptr]\npointer into original command string");
	MakeCode	(x=0X56A0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X56AA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X56AD,	"PSP command tail (arguments)");
	MakeCode	(x=0X56AD);
	OpHex		(x,	1);
	MakeComm	(0X56B0,	"128");
	MakeComm	(0X56B6,	"MSG_1012 ; REXX.EXE not found");
	MakeCode	(x=0X56B6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X56B6,	"rexx_nf_err");
	MakeCode	(0X56BB);
	MakeName	(0X56BB,	"BATCOMJ");
	MakeCode	(0X56BE);
	MakeName	(0X56BE,	"BADCOMJ45");
	MakeComm	(0X56C0,	"offset EXECUTE = offset NEOEXECUTE");
	MakeCode	(0X56C0);
	MakeName	(0X56C0,	"NEOEXECUTE");
	MakeCode	(x=0X56C3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X56C3,	"LH_EXECUTE");
	MakeComm	(0X56C7,	"DEALLOC");
	MakeCode	(x=0X56C7);
	OpHex		(x,	1);
	MakeComm	(0X56C9,	"DOS - 2+ - FREE MEMORY\nES = segment address of area to be freed");
	MakeCode	(x=0X56C9);
	OpHex		(x,	0);
	MakeCode	(x=0X56CB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X56CF,	"byte");
	MakeCode	(x=0X56CF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X56D4,	"byte");
	MakeCode	(x=0X56D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X56DA,	"TRANGROUP:EXECPATH");
	MakeCode	(x=0X56DA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X56DD,	"RESGROUP:SafePathBuffer");
	MakeCode	(x=0X56DD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X56E0);
	OpDecimal	(x,	1);
	MakeComm	(0X56E6,	"FCB");
	MakeCode	(x=0X56E6);
	OpHex		(x,	1);
	MakeCode	(x=0X56EB);
	OpDecimal	(x,	1);
	MakeComm	(0X56F0,	"SafePathBuffer");
	MakeCode	(x=0X56F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X56F5,	"Exec_Block = offset EnvirSeg");
	MakeCode	(x=0X56F5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X56F8,	"EXEC*256");
	MakeComm	(0X56FB,	"byte");
	MakeCode	(x=0X56FB);
	OpHex		(x,	1);
	MakeCode	(0X5706);
	MakeName	(0X5706,	"OK_EXEC");
	MakeCode	(x=0X570A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X570D,	"jmp far [cs:EXEC_ADDR]");
	MakeCode	(0X5712);
	MakeName	(0X5712,	"BADCOM");
	MakeCode	(x=0X5714);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X5717,	"cerror");
	MakeCode	(0X571D);
	MakeName	(0X571D,	"PRESCAN");
	MakeCode	(x=0X5723);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X5731);
	MakeComm	(0X5741,	"DB_SPACE");
	MakeCode	(0X574D);
	MakeCode	(0X575E);
	MakeCode	(0X5778);
	MakeComm	(0X578C,	"rabracket");
	MakeComm	(0X5795,	"byte ; Flag >>");
	MakeComm	(0X579D,	"labracket");
	MakeComm	(0X57A8,	"word");
	MakeCode	(0X57B2);
	MakeCode	(x=0X57B3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X57BA,	"64+13 ; CX = max string length");
	MakeCode	(x=0X57BA);
	OpDecimal	(x,	1);
	MakeCode	(0X57DF);
	MakeCode	(0X57F2);
	MakeCode	(0X57F5);
	MakeCode	(0X5811);
	MakeCode	(x=0X5812);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X581C);
	MakeComm	(0X581E,	"ALTPIPECHR");
	MakeComm	(0X5823,	"VBAR");
	MakeCode	(x=0X5828);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5830);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X5835,	"byte");
	MakeCode	(x=0X5835);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X5841,	"ALTPIPECHR");
	MakeComm	(0X5845,	"VBAR");
	MakeCode	(0X584E);
	MakeComm	(0X5854,	"-1");
	MakeComm	(0X5860,	"0");
	MakeCode	(x=0X5872);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X587A,	"PipeStr ; RESGROUP:EndInit+160\nENDINIT is at offset 41Eh");
	MakeCode	(x=0X587A);
	OpHex		(x,	1);
	MakeComm	(0X587D,	"mov [es:PipePtr],di\n(RESGROUP:EndInit+158)");
	MakeCode	(x=0X5882);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5892,	"[es::41Ch]");
	MakeCode	(x=0X5892);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X589B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X589B,	"cmd_copy");
	MakeCode	(x=0X58A5);
	OpHex		(x,	1);
	MakeCode	(x=0X58B3);
	MakeCode	(x=0X58B8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X58B8,	"test_append");
	MakeCode	(x=0X58BB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X58C4,	"- Multiplex - DOS 3.3+ internal - INSTALLABLE COMMAND - INSTALL CHECK\nDX = FFFFh, DS:BX -> command line\nReturn: AL = FFh if this command is a TSR extension to COMMAND.COM\nAL = 00h if the command should be executed as usual");
	MakeCode	(x=0X58C4);
	OpHex		(x,	0);
	MakeCode	(0X58C9);
	MakeName	(0X58C9,	"SETPATH");
	MakeComm	(0X58D0,	"byte");
	MakeComm	(0X58D5,	"byte");
	MakeComm	(0X58F6,	"byte");
	MakeComm	(0X5906,	"byte");
	MakeCode	(0X590C);
	MakeComm	(0X5911,	"byte");
	MakeComm	(0X5919,	"byte");
	MakeCode	(x=0X5919);
	OpHex		(x,	1);
	MakeCode	(x=0X5922);
	OpHex		(x,	1);
	MakeName	(0X5946,	"SETPATH_RETN");
	MakeCode	(x=0X5947);
	OpHex		(x,	1);
	MakeName	(0X5947,	"PGETARG");
	MakeCode	(0X5955);
	MakeName	(0X5955,	"PSCANOFF");
	MakeCode	(0X5961);
	MakeName	(0X5961,	"IOSET");
	MakeComm	(0X596B,	"byte");
	MakeCode	(x=0X596B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5972);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X5984,	"IOSET_RETN");
	MakeCode	(0X5985);
	MakeName	(0X5985,	"TESTDOREIN");
	MakeCode	(x=0X5990);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5993,	"mov ax,(OPEN*256)+SHARING_DENY_NONE");
	MakeComm	(0X5998,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read, 1 - write, 2 - read & write");
	MakeCode	(x=0X5998);
	OpHex		(x,	0);
	MakeComm	(0X59A1,	"[bx+PDB.JFN_TABLE]");
	MakeComm	(0X59A4,	"[PDB.JFN_TABLE]");
	MakeCode	(0X59A8);
	MakeName	(0X59A8,	"REDIRERR");
	MakeComm	(0X59AD,	"network access denied");
	MakeCode	(x=0X59AD);
	OpDecimal	(x,	1);
	MakeComm	(0X59B2,	"OPEN");
	MakeCode	(x=0X59B2);
	OpHex		(x,	1);
	MakeCode	(x=0X59B7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X59BD);
	MakeCode	(x=0X59C3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X59CD,	"byte");
	MakeCode	(x=0X59CD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X59CD,	"TESTDOREOUT");
	MakeComm	(0X59D7,	"byte");
	MakeCode	(x=0X59D7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X59DE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X59E1,	"(OPEN SHL 8) OR 2");
	MakeComm	(0X59E5,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n2 - read & write");
	MakeCode	(x=0X59E5);
	OpHex		(x,	0);
	MakeComm	(0X59EC,	"IOCTL<<8");
	MakeCode	(x=0X59EC);
	OpHex		(x,	1);
	MakeComm	(0X59EF,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X59EF);
	OpHex		(x,	0);
	MakeCode	(x=0X59F1);
	OpHex		(x,	1);
	MakeComm	(0X59F6,	"(LSEEK SHL 8) OR 2");
	MakeComm	(0X59FE,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file");
	MakeCode	(x=0X59FE);
	OpHex		(x,	0);
	MakeComm	(0X5A02,	"(READ SHL 8)");
	MakeCode	(x=0X5A08);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5A0B,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X5A0B);
	OpHex		(x,	0);
	MakeComm	(0X5A13,	"Was char an eof mark?");
	MakeComm	(0X5A1C,	"No, just continue");
	MakeComm	(0X5A1E,	"(LSEEK<<8)|1");
	MakeComm	(0X5A21,	"-1 ; LSEEK back one byte");
	MakeComm	(0X5A26,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from present location");
	MakeCode	(x=0X5A26);
	OpHex		(x,	0);
	MakeCode	(0X5A2A);
	MakeComm	(0X5A2F,	"(LSEEK SHL 8)");
	MakeComm	(0X5A32,	"Offset is 0 ; Move to beginning of file");
	MakeComm	(0X5A36,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X5A36);
	OpHex		(x,	0);
	MakeComm	(0X5A3A,	"ERROR_ACCESS_DENIED");
	MakeCode	(0X5A3A);
	MakeCode	(x=0X5A43);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X5A48,	"CREAT");
	MakeCode	(x=0X5A48);
	OpHex		(x,	1);
	MakeComm	(0X5A4B,	"DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)\nCX = attributes for file\nDS:DX -> ASCIZ filename (may include drive and path)");
	MakeCode	(x=0X5A4B);
	OpHex		(x,	0);
	MakeCode	(0X5A53);
	MakeComm	(0X5A57,	"[bx+PDB.JFN_TABLE]");
	MakeComm	(0X5A5A,	"[PDB.JFN_TABLE+1]");
	MakeCode	(0X5A5E);
	MakeName	(0X5A5E,	"dstrlen");
	MakeName	(0X5A6B,	"TRIAGEERR_RETN");
	MakeComm	(0X5A6C,	"GET_EXT_ERR_NUMBER");
	MakeCode	(0X5A6C);
	MakeName	(0X5A6C,	"TriageError");
	MakeCode	(x=0X5A78);
	OpHex		(x,	1);
	MakeComm	(0X5A7A,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X5A7A);
	OpHex		(x,	0);
	MakeCode	(x=0X5A7E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5A81,	"network access denied?");
	MakeCode	(x=0X5A81);
	OpDecimal	(x,	1);
	MakeComm	(0X5A84,	"Yes, return it.");
	MakeCode	(0X5A93);
	MakeName	(0X5A93,	"Triage_Init");
	MakeCode	(0X5A97);
	MakeName	(0X5A97,	"Move_To_SrcBuf");
	MakeCode	(x=0X5A9A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5AAC,	"END_OF_LINE_IN");
	MakeCode	(0X5AAC);
	MakeCode	(0X5ABE);
	MakeName	(0X5ABE,	"SINGLETEST");
	MakeComm	(0X5AC4,	"word");
	MakeCode	(0X5AD3);
	MakeName	(0X5AD3,	"SetRest1");
	MakeName	(0X5AD5,	"SETREST");
	MakeCode	(x=0X5AD6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5ADA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5ADF);
	MakeName	(0X5ADF,	"PIPEDEL");
	MakeComm	(0X5AE6,	"Pipe1 = offset RESGROUP:EndInit");
	MakeComm	(0X5AE9,	"Unlink");
	MakeCode	(x=0X5AE9);
	OpHex		(x,	1);
	MakeComm	(0X5AEE,	"Pipe2 = offset RESGROUP:EndInit+79");
	MakeComm	(0X5AF1,	"Unlink");
	MakeCode	(x=0X5AF1);
	OpHex		(x,	1);
	MakeComm	(0X5AFA,	"byte");
	MakeComm	(0X5B01,	"MSG_1030");
	MakeCode	(x=0X5B01);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X5B01,	"PIPEERRSYN");
	MakeCode	(0X5B0C);
	MakeCode	(x=0X5B12);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5B20,	"network access denied");
	MakeCode	(x=0X5B20);
	OpDecimal	(x,	1);
	MakeCode	(0X5B28);
	MakeCode	(0X5B2B);
	MakeComm	(0X5B2F,	"byte");
	MakeCode	(x=0X5B3A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5B49,	"skip white space chars");
	MakeComm	(0X5B51,	"41Eh");
	MakeCode	(x=0X5B51);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X5B54,	"(CHMOD shl 8) or 0");
	MakeComm	(0X5B5C,	"is it a directory?");
	MakeCode	(x=0X5B5C);
	OpHex		(x,	1);
	MakeComm	(0X5B60,	"yes, continue");
	MakeComm	(0X5B62,	"no, indicate fail");
	MakeComm	(0X5B6B,	"mov [Pipe1],ah");
	MakeComm	(0X5B6F,	"mov [Pipe2],ah");
	MakeComm	(0X5B75,	"mov [Pipe1+1],ah");
	MakeComm	(0X5B79,	"mov [Pipe2+1],ah");
	MakeComm	(0X5B7D,	"mov dx,Pipe1");
	MakeComm	(0X5B82,	"CREATETEMPFILE");
	MakeCode	(x=0X5B82);
	OpHex		(x,	1);
	MakeCode	(0X5B8B);
	MakeComm	(0X5B8D,	"CLOSE");
	MakeCode	(x=0X5B8D);
	OpHex		(x,	1);
	MakeComm	(0X5B8F,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X5B8F);
	OpHex		(x,	0);
	MakeComm	(0X5B91,	"mov dx,Pipe2");
	MakeComm	(0X5B94,	"CREATETEMPFILE");
	MakeCode	(x=0X5B94);
	OpHex		(x,	1);
	MakeCode	(0X5B9E);
	MakeComm	(0X5BA0,	"CLOSE");
	MakeCode	(x=0X5BA0);
	OpHex		(x,	1);
	MakeComm	(0X5BA8,	"[PipePtr] ; offset RESGROUP:EndInit+158");
	MakeComm	(0X5BAC,	"-1");
	MakeCode	(x=0X5BAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X5BB3,	"Flag single command pipe");
	MakeCode	(x=0X5BB3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5BBB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X5BC0,	"[PipePtr] ; offset RESGROUP:EndInit+158");
	MakeComm	(0X5BC5,	"ALTPIPECHR");
	MakeComm	(0X5BC9,	"VBAR");
	MakeCode	(x=0X5BD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X5BD4,	"OPEN*256");
	MakeCode	(0X5BDF);
	MakeComm	(0X5BE3,	"[bx+PDB.JFN_TABLE]");
	MakeComm	(0X5BE6,	"[PDB.JFN_TABLE]");
	MakeCode	(x=0X5BE9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5BEE,	"; '|<CR>'");
	MakeComm	(0X5BF6,	"VBAR");
	MakeCode	(0X5BF6);
	MakeComm	(0X5BF8,	"'||' ?");
	MakeComm	(0X5BFA,	"error");
	MakeComm	(0X5BFC,	"ALTPIPECHR");
	MakeCode	(0X5C0D);
	MakeComm	(0X5C12,	"ALTPIPECHR");
	MakeComm	(0X5C16,	"VBAR");
	MakeCode	(x=0X5C20);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5C26,	"; [PipePtr] = [EndInit+158]");
	MakeCode	(x=0X5C2A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X5C31,	"CREAT*256");
	MakeComm	(0X5C3E,	"[bx+PDB.JFN_TABLE]");
	MakeComm	(0X5C41,	"[PDB.JFN_TABLE+1]");
	MakeCode	(x=0X5C44);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X5C48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5C4E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5C54,	"mov [PipePtr],si");
	MakeCode	(0X5C60);
	MakeCode	(x=0X5C63);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X5C6B,	"-1");
	MakeCode	(x=0X5C6B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5C74);
	MakeName	(0X5C74,	"DATINIT");
	MakeComm	(0X5C81,	"preload messages");
	MakeComm	(0X5C84,	"INTERNATVARS");
	MakeCode	(x=0X5C84);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5C87,	"INTERNATIONAL*256");
	MakeCode	(x=0X5C8D);
	MakeCode	(x=0X5C93);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5CA7);
	OpHex		(x,	1);
	MakeName	(0X5CA7,	"DATE");
	MakeCode	(x=0X5CAA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X5CC0);
	MakeCode	(x=0X5CC5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X5CC9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X5CCD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5CD6,	"-1");
	MakeCode	(x=0X5CE0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5CE4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5CE8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5CEE,	"set 1 positional entered");
	MakeComm	(0X5CFC,	"SET_DATE");
	MakeCode	(x=0X5CFC);
	OpHex		(x,	1);
	MakeCode	(0X5D06);
	MakeCode	(x=0X5D09);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5D11);
	OpHex		(x,	1);
	MakeName	(0X5D11,	"CTIME");
	MakeCode	(x=0X5D14);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5D2A,	"Get_Time");
	MakeCode	(x=0X5D2A);
	OpHex		(x,	1);
	MakeCode	(x=0X5D33);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X5D37);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X5D3B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5D4E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5D52);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5D56);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5D5A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5D6E,	"SET_TIME");
	MakeCode	(x=0X5D6E);
	OpHex		(x,	1);
	MakeCode	(0X5D78);
	MakeCode	(x=0X5D7B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5D83);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X5D83,	"SetInitFlag");
	MakeCode	(x=0X5D87);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X5D8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D93);
	MakeName	(0X5D93,	"PipeOff");
	MakeCode	(x=0X5D9C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X5DA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X5DAB);
	OpHex		(x,	1);
	MakeName	(0X5DAB,	"PRINT_TIME");
	MakeCode	(x=0X5DC1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5DC9,	"(International SHL 8)");
	MakeCode	(0X5DC9);
	MakeName	(0X5DC9,	"GETDAT");
	MakeComm	(0X5DEB,	"util_msg_class");
	MakeCode	(x=0X5DF5);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5E02,	"Std_Con_String_Input");
	MakeCode	(x=0X5E04);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5E07,	"INITSPECIAL");
	MakeCode	(x=0X5E18);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5E1B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X5E26);
	MakeName	(0X5E26,	"GETTIM");
	MakeCode	(x=0X5E28);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5E2E,	"Std_Con_String_Input");
	MakeCode	(x=0X5E30);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5E44);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5E47);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X5E52);
	MakeName	(0X5E52,	"skip_white");
	MakeCode	(0X5E5E);
	MakeName	(0X5E5E,	"copy_pipe_path");
	MakeComm	(0X5E70,	"Pipe1 ; (offset RESGROUP:EndInit)");
	MakeComm	(0X5E7E,	"Pipe2 ; (offset RESGROUP:EndInit+79)");
	MakeCode	(0X5E85);
	MakeName	(0X5E85,	"PARSELINE");
	MakeCode	(x=0X5E8C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X5E91);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5E99,	"ARG_UNIT.SIZE");
	MakeCode	(x=0X5E99);
	OpDecimal	(x,	1);
	MakeComm	(0X5E9C,	"offset ARG");
	MakeCode	(x=0X5E9C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5EA1,	"ARG+ARG_UNIT.argbuf");
	MakeCode	(x=0X5EA1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5EA7,	"[ARG+ARG_UNIT.argswinfo]");
	MakeCode	(x=0X5EA7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5EAD,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X5EAD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X5EB3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5EB7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5EBB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X5EC3,	"ARG+ARG_UNIT.argforcombuf");
	MakeCode	(x=0X5EC3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5EC8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5ED0,	"ARG+ARG_UNIT.argforcombuf");
	MakeCode	(x=0X5ED0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5ED3,	"destination is temporary token buffer");
	MakeCode	(x=0X5ED3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5ED8,	"save ptr into original command buffer");
	MakeCode	(x=0X5ED8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5EDE,	"byte ; don't expand *'s to ?'s");
	MakeCode	(x=0X5EDE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5EE3,	"skip leading blanks");
	MakeComm	(0X5EE6,	"byte off a token (args in SI, DI, BL)");
	MakeComm	(0X5EF4,	"tell CPARSE that 1st token is done");
	MakeCode	(x=0X5EF4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5EF9,	"add to argv array (CX has char count)");
	MakeCode	(0X5F00);
	MakeCode	(0X5F04);
	MakeCode	(0X5F0D);
	MakeName	(0X5F0D,	"newarg");
	MakeComm	(0X5F16,	"[ARG+ARG_UNIT.argvcnt],ARGMAX");
	MakeCode	(x=0X5F16);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5F1F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5F23,	"inc word [ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X5F23);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5F27,	"ARG+ARG_UNIT.argv");
	MakeCode	(x=0X5F27);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5F2D,	"[bx+ARGV_ELE.argsw_word]");
	MakeComm	(0X5F32,	"[bx+ARGV_ELE.arglen]");
	MakeComm	(0X5F35,	"[bx+ARGV_ELE.argflags]");
	MakeCode	(x=0X5F38);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5F3C,	"[bx+ARGV_ELE.argpointer]");
	MakeCode	(x=0X5F3E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5F44,	"[bx+ARGV_ELE.argstartel]");
	MakeCode	(x=0X5F47);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5F4B,	"[bx+ARGV_ELE.arg_ocomptr]");
	MakeCode	(x=0X5F50);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5F56,	"ARG+ARG_UNIT.argbuf+ARGBLEN-1");
	MakeCode	(x=0X5F56);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5F64);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X5F6C);
	MakeComm	(0X5F6E,	"ARG+ARG_UNIT.argbuf+ARGBLEN-1");
	MakeCode	(x=0X5F6E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X5F75);
	MakeCode	(0X5F80);
	MakeName	(0X5F80,	"arg_switch");
	MakeComm	(0X5F85,	"sw_flag");
	MakeCode	(x=0X5F85);
	OpHex		(x,	1);
	MakeComm	(0X5F8A,	"-1");
	MakeCode	(x=0X5F8A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X5F91);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5F95,	"ARG+ARG_UNIT.argv ; ARG+0");
	MakeCode	(x=0X5F95);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X5F9B,	"or [bx+ARGV_ELE.argsw_word],bp");
	MakeComm	(0X5F9E,	"or [ARG+ARG_UNIT.argswinfo],bp");
	MakeCode	(x=0X5F9E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5FA6,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X5FA6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5FA9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X5FB3);
	MakeName	(0X5FB3,	"argv_calc");
	MakeComm	(0X5FB6,	"ARGV_ELE.SIZE");
	MakeCode	(x=0X5FB6);
	OpDecimal	(x,	1);
	MakeCode	(0X5FBF);
	MakeName	(0X5FBF,	"path_search");
	MakeComm	(0X5FC6,	"[ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag");
	MakeCode	(x=0X5FC6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X5FD0,	"figure out the pathname separator");
	MakeCode	(0X5FD0);
	MakeCode	(x=0X5FD3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5FD6);
	OpHex		(x,	1);
	MakeComm	(0X5FD9,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X5FD9);
	OpHex		(x,	0);
	MakeComm	(0X5FDC,	"get a handle (ES:DI) on user path");
	MakeCode	(x=0X5FDF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5FE3,	"\"old\" pathstring pointer");
	MakeCode	(x=0X5FE3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5FE7,	"\"new\" pathstring pointer");
	MakeCode	(x=0X5FE7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X5FEC,	"PBUFLEN\ncopy/format argv[0] into temp buffer");
	MakeCode	(x=0X5FEC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5FEF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X5FF9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6008);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X600B,	"[ARG+ARGV_ELE.argpointer]\nmov si,ds:arg.argv[0].argpointer");
	MakeCode	(x=0X600B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X600F,	"[ARG+ARGV_ELE.argstartel]\nmov cx,ds:arg.argv[0].argstartel");
	MakeCode	(x=0X600F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6013,	"compute prefix bytes to copy");
	MakeCode	(x=0X6015);
	OpChr		(x,	1);
	MakeComm	(0X6017,	"room for drive letter?");
	MakeComm	(0X601A,	"no, stick it in");
	MakeComm	(0X601C,	"colon present?");
	MakeComm	(0X601F,	"yes, just move it");
	MakeComm	(0X6021,	"get current drive");
	MakeCode	(x=0X6021);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6024,	"convert to uppercase letter");
	MakeComm	(0X6026,	"store d:");
	MakeCode	(0X6029);
	MakeComm	(0X602B,	"2 bytes less to move");
	MakeCode	(x=0X602E);
	OpHex		(x,	1);
	MakeComm	(0X6032,	"'a'-1");
	MakeCode	(x=0X6032);
	OpHex		(x,	1);
	MakeCode	(x=0X6035);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6039,	"is there room for path char?");
	MakeComm	(0X603C,	"no, go add path");
	MakeComm	(0X6040,	"is there a path separator?");
	MakeCode	(x=0X6040);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6044,	"yes, go move remainder of path");
	MakeComm	(0X6047,	"undo the lodsb");
	MakeComm	(0X6049,	"remainder of buffer");
	MakeCode	(x=0X604B);
	OpHex		(x,	1);
	MakeComm	(0X604E,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X604E);
	OpHex		(x,	0);
	MakeCode	(x=0X6053);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6056,	"root (empty dir string)?");
	MakeComm	(0X6059,	"yes, no need for path char");
	MakeCode	(0X6063);
	MakeComm	(0X6064,	"first char a path char?");
	MakeComm	(0X6066,	"no");
	MakeComm	(0X6068,	"move past leading char");
	MakeComm	(0X6069,	"drop from count");
	MakeComm	(0X606A,	"no chars to move!");
	MakeComm	(0X6071,	"[ARG+ARGV_ELE.argflags],4 ; path_sep\ntest ds:arg.argv[0].argflags, MASK path_sep");
	MakeCode	(x=0X6071);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X6078,	"PATH_SEP_CHAR");
	MakeCode	(x=0X6078);
	OpChr		(x,	1);
	MakeComm	(0X607A,	"[ARG+ARGV_ELE.argstartel]\nmov dx,ds:arg.argv[0].argstartel");
	MakeCode	(x=0X607A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X607E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6082);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6086,	"pcrunch (EXECPATH, pathinfo)");
	MakeComm	(0X6089,	"save filetype code");
	MakeComm	(0X608C,	"did path_crunch find anything?");
	MakeComm	(0X6091,	"is there anything left to the path?");
	MakeCode	(x=0X6098);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X609B,	"\"new\" pointer -- end of string");
	MakeCode	(x=0X609B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X609F,	"\"old\" pointer -- beginning of string");
	MakeCode	(x=0X609F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X60A4,	"push word [pathinfo+0]");
	MakeCode	(x=0X60A4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X60A9,	"Look for Current dir at start of path");
	MakeCode	(x=0X60A9);
	OpChr		(x,	1);
	MakeComm	(0X60B0,	"does path have drive letter?");
	MakeCode	(x=0X60B0);
	OpChr		(x,	1);
	MakeComm	(0X60B5,	"no, copy the path string");
	MakeComm	(0X60B7,	"Save pointer to end of string");
	MakeComm	(0X60B8,	"Copy drive letter, :, and root char to EXECPATH");
	MakeCode	(x=0X60C4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X60CB,	"Convert device letter for cur dir");
	MakeCode	(x=0X60CE);
	OpHex		(x,	1);
	MakeComm	(0X60D1,	"'a'-1");
	MakeCode	(x=0X60D1);
	OpHex		(x,	1);
	MakeComm	(0X60D6,	"Don't wipe out drive and root info");
	MakeCode	(x=0X60D9);
	OpHex		(x,	1);
	MakeComm	(0X60DC,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X60DC);
	OpHex		(x,	0);
	MakeComm	(0X60E1,	"Don't copy over drive and root info");
	MakeComm	(0X60E6,	"Restore pointer to begining of string");
	MakeComm	(0X60E7,	"Point past drive letter, :, .");
	MakeComm	(0X60EA,	"Restore pointer to end of string");
	MakeComm	(0X60EF,	"push word [pathinfo+0]");
	MakeCode	(x=0X60EF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6107);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X610C);
	MakeComm	(0X610F,	"overwrite terminator");
	MakeComm	(0X6110,	"with a pathname separator");
	MakeCode	(x=0X6110);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6119);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X611E,	"append winning filename to path");
	MakeComm	(0X611F,	"(including terminating null)");
	MakeCode	(0X612E);
	MakeName	(0X612E,	"STORE_PCHAR");
	MakeCode	(x=0X6138);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X613D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6142,	"BH = additional terminator character");
	MakeCode	(0X6142);
	MakeName	(0X6142,	"path_crunch");
	MakeComm	(0X6144,	"pointer to stripped filename");
	MakeComm	(0X6146,	"pointer into pathstring to be dissected");
	MakeComm	(0X6148,	"figure out pathname separator");
	MakeComm	(0X614B,	"destination of concatenated string");
	MakeCode	(x=0X614B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X614E,	"\"new\" pointer to start with");
	MakeCode	(x=0X614E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6152,	"becomes \"old\" pointer");
	MakeCode	(x=0X6152);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6156,	"save old segment pointer");
	MakeComm	(0X6157,	"push word [pathinfo+0]");
	MakeCode	(x=0X6157);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X615B,	"replace with pointer to userpath's segment");
	MakeComm	(0X615C,	"clear flag for later use");
	MakeComm	(0X615E,	"get a pathname byte");
	MakeComm	(0X6161,	"null terminates segment & pathstring");
	MakeComm	(0X6165,	"BH terminates a pathstring segment");
	MakeComm	(0X616E,	"CL=1 means latest stored char is DBCS");
	MakeComm	(0X6172,	"CL=0 means latest stored char is SBCS");
	MakeCode	(0X6172);
	MakeCode	(0X6177);
	MakeComm	(0X6178,	"save \"new\" pointer for next time");
	MakeCode	(x=0X6178);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6180,	"was there really anything in pathstr?");
	MakeCode	(x=0X6180);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6186);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X618B,	"this is a trailing byte of ECS code");
	MakeComm	(0X618D,	"add pathname separator for suffix");
	MakeComm	(0X6195,	"tack the stripped filename onto\nthe end of the path, up to and");
	MakeComm	(0X6197,	"including the terminating null");
	MakeComm	(0X619B,	"and look for an appropriate file");
	MakeCode	(x=0X619B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X619E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X61A4,	"results are in AX & search_best_buf");
	MakeComm	(0X61A9,	"null in BL means all gone");
	MakeCode	(0X61AF);
	MakeComm	(0X61B6,	"AX = non-zero (file type), zero (nothing found)");
	MakeCode	(0X61B7);
	MakeName	(0X61B7,	"PSEARCH");
	MakeCode	(x=0X61BF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X61C4,	"is there a drive spec?");
	MakeCode	(x=0X61C4);
	OpChr		(x,	1);
	MakeComm	(0X61C8,	"no");
	MakeComm	(0X61CC,	"uppercase the drive letter");
	MakeCode	(x=0X61CC);
	OpHex		(x,	1);
	MakeComm	(0X61CF,	"and convert to drive number");
	MakeCode	(x=0X61D2);
	OpHex		(x,	1);
	MakeComm	(0X61D5,	"DOS - 2+ - GET CURRENT DIRECTORY\nDL = drive (0=default, 1=A, etc.)\nDS:SI points to 64-byte buffer area");
	MakeCode	(x=0X61D5);
	OpHex		(x,	0);
	MakeCode	(x=0X61DD);
	OpHex		(x,	1);
	MakeComm	(0X61E0,	"DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)\nCX = search attributes\nDS:DX -> ASCIZ filespec\n(drive, path, and wildcards allowed)");
	MakeCode	(x=0X61E0);
	OpHex		(x,	0);
	MakeComm	(0X61E4,	"SEARCH_FILE_NOT_FOUND ; 0");
	MakeCode	(x=0X61E4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X61E9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X61EE,	"determine if .com, &c...");
	MakeComm	(0X61F1,	"better than what we've found so far?");
	MakeCode	(x=0X61F1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X61F7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X61FA,	"FBUF+FIND_BUF.PNAME ; FBUF+30");
	MakeCode	(x=0X61FA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X61FD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6200,	"FNAME_MAX_LEN");
	MakeCode	(x=0X6200);
	OpDecimal	(x,	1);
	MakeComm	(0X6204,	"save complete pathname representation");
	MakeComm	(0X6206,	"SEARCH_COM ; have we found the best of all?");
	MakeComm	(0X6208,	"yes");
	MakeComm	(0X620A,	"search_attr");
	MakeCode	(x=0X620D);
	OpHex		(x,	1);
	MakeComm	(0X6210,	"DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)\n[DTA] = data block from\nlast AH = 4Eh/4Fh call");
	MakeCode	(x=0X6210);
	OpHex		(x,	0);
	MakeComm	(0X6214,	"pick best to return with");
	MakeCode	(x=0X6214);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6217,	"byte ; Did user request a specific ext?");
	MakeCode	(x=0X6217);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X621C,	"no - exit");
	MakeComm	(0X621E,	"yes - get the real file type back");
	MakeCode	(x=0X621E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6221,	"save the real file type");
	MakeCode	(x=0X6221);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6226);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X622D,	"SEARCH_FILE_NOT_FOUND ; = 0");
	MakeCode	(0X6236);
	MakeName	(0X6236,	"SEARCH_FTYPE");
	MakeComm	(0X623B,	"FBUF+FIND_BUF.PNAME ; FBUF+30");
	MakeCode	(x=0X623B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X623E);
	OpDecimal	(x,	1);
	MakeComm	(0X6242,	"search for the terminating null");
	MakeComm	(0X6244,	"weird... no null byte at end");
	MakeComm	(0X6246,	". + E + X + T + NULL");
	MakeCode	(x=0X6249);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6254,	"SEARCH_COM ; success!");
	MakeCode	(0X6259);
	MakeCode	(x=0X625B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6264,	"SEARCH_EXE ; success!");
	MakeCode	(0X6269);
	MakeCode	(x=0X626B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6274,	"SEARCH_BAT ; success!");
	MakeComm	(0X6279,	"ANULL");
	MakeCode	(0X6279);
	MakeCode	(x=0X627C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6283,	"ANULL");
	MakeCode	(x=0X6288);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X6291);
	MakeName	(0X6291,	"STRIP");
	MakeCode	(x=0X6298);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X629D,	"[ARG+ARGV_ELE.argpointer]");
	MakeCode	(x=0X629D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X62A1,	"[ARG+ARGV_ELE.argstartel]");
	MakeCode	(x=0X62A1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X62AC,	"[ARG+ARGV_ELE.arglen]");
	MakeCode	(x=0X62AC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X62BA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X62D5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X62DE,	"WILDCHAR");
	MakeComm	(0X62E3,	"ANULL");
	MakeCode	(0X62EA);
	MakeCode	(0X62F3);
	MakeName	(0X62F3,	"SAVE_ARGS");
	MakeComm	(0X62FA,	"ARG_UNIT.SIZE+15 ; 1092+15 = 1107");
	MakeCode	(x=0X62FA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6302);
	OpHex		(x,	1);
	MakeComm	(0X6305,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X6305);
	OpHex		(x,	0);
	MakeCode	(x=0X630E);
	OpDecimal	(x,	1);
	MakeComm	(0X6313,	"ARG");
	MakeCode	(x=0X6313);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6318,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X6318);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X631E,	"ARG");
	MakeCode	(x=0X631E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6329,	"[ARG+ARGV_ELE.argpointer+bx]");
	MakeCode	(x=0X6329);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6332,	"[ARG+ARGV_ELE.argstartel+bx]");
	MakeCode	(x=0X6332);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6338,	"[es:bx+ARGV_ELE.argstartel]");
	MakeComm	(0X633C,	"[ARG+ARGV_ELE.arg_ocomptr+bx]");
	MakeCode	(x=0X633C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6342,	"[es:bx+ARGV_ELE.arg_ocomptr]");
	MakeCode	(0X6348);
	MakeCode	(0X634D);
	MakeCode	(0X6351);
	MakeCode	(x=0X635A);
	OpDecimal	(x,	1);
	MakeName	(0X635A,	"notest2");
	MakeComm	(0X635D,	"FCB+1");
	MakeCode	(x=0X635D);
	OpHex		(x,	1);
	MakeName	(0X6360,	"ambspec");
	MakeName	(0X6367,	"allfil");
	MakeCode	(x=0X636C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X636C,	"askagn");
	MakeCode	(x=0X6372);
	OpHex		(x,	1);
	MakeCode	(x=0X6377);
	OpDecimal	(x,	1);
	MakeCode	(x=0X637B);
	OpHex		(x,	1);
	MakeComm	(0X637E,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X637E);
	OpHex		(x,	0);
	MakeName	(0X638D,	"answ_no");
	MakeCode	(0X638E);
	MakeName	(0X638E,	"check_yn");
	MakeComm	(0X639B,	"FCB_Delete");
	MakeName	(0X639B,	"noprmpt");
	MakeComm	(0X639D,	"FCB");
	MakeCode	(x=0X639D);
	OpHex		(x,	1);
	MakeComm	(0X63A0,	"DOS - DELETE FILE via FCB\nDS:DX -> FCB with filename field filled with\ntemplate for  deletion ('?' wildcard allowed, but not '*')\nReturn: AL = 00h file found, FFh file not found");
	MakeCode	(x=0X63A0);
	OpHex		(x,	0);
	MakeCode	(0X63AA);
	MakeName	(0X63AA,	"eraerr");
	MakeComm	(0X63B2,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X63B2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X63B9,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(x=0X63B9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X63BF,	"cerrorj2");
	MakeCode	(0X63C2);
	MakeName	(0X63C2,	"slashp_erase");
	MakeComm	(0X63C5,	"Set_DMA");
	MakeCode	(x=0X63C7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X63CA,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X63CA);
	OpHex		(x,	0);
	MakeComm	(0X63CC,	"Dir_Search_First");
	MakeComm	(0X63CE,	"FCB");
	MakeCode	(x=0X63CE);
	OpHex		(x,	1);
	MakeComm	(0X63D1,	"DOS - SEARCH FIRST USING FCB\nDS:DX -> FCB");
	MakeCode	(x=0X63D1);
	OpHex		(x,	0);
	MakeCode	(x=0X63D7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X63D7,	"delete_prompt_loop");
	MakeCode	(x=0X63DA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X63DD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X63E4,	"slashp_askagn");
	MakeCode	(x=0X63E7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X63EC,	"END_OF_LINE_OUT");
	MakeCode	(x=0X63F6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X63F6,	"not_del_root");
	MakeCode	(x=0X63FA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6400);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6403);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6407);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X640D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6413,	"(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT");
	MakeCode	(x=0X6413);
	OpHex		(x,	1);
	MakeComm	(0X6416,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X6416);
	OpHex		(x,	0);
	MakeCode	(0X641E);
	MakeName	(0X641E,	"slashp_check_yn");
	MakeComm	(0X6428,	"FCB_Delete");
	MakeCode	(0X6428);
	MakeName	(0X6428,	"delete_this_file");
	MakeCode	(x=0X642A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X642D,	"DOS - DELETE FILE via FCB\nDS:DX -> FCB with filename field filled with\ntemplate for  deletion ('?' wildcard allowed, but not '*')\nReturn: AL = 00h file found, FFh file not found");
	MakeCode	(x=0X642D);
	OpHex		(x,	0);
	MakeComm	(0X6436,	"ERROR_ACCESS_DENIED");
	MakeCode	(0X6446);
	MakeName	(0X6446,	"stop_del");
	MakeCode	(0X6449);
	MakeName	(0X6449,	"next_del_file");
	MakeCode	(x=0X644B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X644E,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X644E);
	OpHex		(x,	0);
	MakeCode	(x=0X6452);
	OpHex		(x,	1);
	MakeComm	(0X6455,	"DOS - SEARCH NEXT USING FCB\nDS:DX -> FCB\nReturn: AL = status");
	MakeCode	(x=0X6455);
	OpHex		(x,	0);
	MakeCode	(0X645E);
	MakeName	(0X645E,	"slash_p_exit");
	MakeComm	(0X6461,	"ERROR_NO_MORE_FILES");
	MakeCode	(x=0X6461);
	OpDecimal	(x,	1);
	MakeCode	(0X6469);
	MakeName	(0X6469,	"good_erase_exit");
	MakeCode	(0X6470);
	MakeName	(0X6470,	"_ECHO");
	MakeCode	(x=0X6475);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X647B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X6481);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X6481,	"ECH_OFF");
	MakeCode	(0X6487);
	MakeName	(0X6487,	"CERRORJ");
	MakeCode	(0X648A);
	MakeName	(0X648A,	"DOEMES");
	MakeCode	(x=0X648F);
	OpHex		(x,	1);
	MakeCode	(x=0X6498);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X6498,	"PECHO");
	MakeCode	(x=0X649C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X64A2);
	OpHex		(x,	1);
	MakeCode	(x=0X64A5);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X64AA);
	MakeName	(0X64AA,	"CNTRLC");
	MakeComm	(0X64AD,	"(Set_CTRL_C_Trapping<<8)|1");
	MakeComm	(0X64B6,	"DOS - EXTENDED CONTROL-BREAK CHECKING\nAL = 00h get state / 01h set state / 02h set AND get\nDL = 00h for OFF or 01h for ON");
	MakeCode	(x=0X64B6);
	OpHex		(x,	0);
	MakeCode	(0X64B9);
	MakeName	(0X64B9,	"CNTRLC_OFF");
	MakeComm	(0X64BB,	"DOS - ");
	MakeCode	(x=0X64BB);
	OpHex		(x,	0);
	MakeCode	(0X64BE);
	MakeName	(0X64BE,	"PCNTRLC");
	MakeComm	(0X64C5,	"DOS - ");
	MakeCode	(x=0X64C5);
	OpHex		(x,	0);
	MakeCode	(x=0X64C9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X64CC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X64CC,	"PYN");
	MakeCode	(x=0X64D3);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X64D6,	"PRINTVAL");
	MakeComm	(0X64DA,	"util_msg_class");
	MakeComm	(0X64DF,	"Ptr_off_pos");
	MakeCode	(0X64ED);
	MakeName	(0X64ED,	"VERIFY");
	MakeComm	(0X64F0,	"(SET_VERIFY_ON_WRITE<<8)|1");
	MakeComm	(0X64F7,	"DOS - SET VERIFY FLAG\nDL = 00h, AL = 01h VERIFY on / 00h VERIFY off");
	MakeCode	(x=0X64F7);
	OpHex		(x,	0);
	MakeCode	(0X64FA);
	MakeName	(0X64FA,	"VER_OFF");
	MakeComm	(0X64FC,	"DOS - ");
	MakeCode	(x=0X64FC);
	OpHex		(x,	0);
	MakeCode	(0X64FF);
	MakeName	(0X64FF,	"PVERIFY");
	MakeCode	(x=0X6504);
	OpHex		(x,	1);
	MakeComm	(0X6506,	"DOS - 2+ - GET VERIFY FLAG\nReturn: AL = 00h if flag OFF\nAL = 01h if flag ON");
	MakeCode	(x=0X6506);
	OpHex		(x,	0);
	MakeCode	(x=0X650A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X650F);
	OpHex		(x,	1);
	MakeName	(0X650F,	"ON_OFF");
	MakeCode	(x=0X6520);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X652A,	"END_OF_LINE");
	MakeCode	(0X6538);
	MakeComm	(0X653F,	"BadParm_Ptr");
	MakeCode	(0X6544);
	MakeCode	(x=0X654B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6553,	"END_OF_LINE");
	MakeCode	(0X655C);
	MakeCode	(x=0X655F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X6564);
	MakeName	(0X6564,	"PRINT_DATE");
	MakeCode	(x=0X6575);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X657E,	"Arg_Buf");
	MakeCode	(x=0X657E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X657E,	"GetDate");
	MakeCode	(x=0X6581);
	OpHex		(x,	1);
	MakeComm	(0X6583,	"DOS - GET CURRENT DATE\nReturn: DL = day, DH = month, CX = year\nAL = day of the week (0=Sunday, 1=Monday, etc.)");
	MakeCode	(x=0X6583);
	OpHex		(x,	0);
	MakeCode	(x=0X658A);
	OpHex		(x,	1);
	MakeComm	(0X6593,	"util_msg_class");
	MakeComm	(0X659E,	"END_OF_LINE_OUT");
	MakeCode	(0X65A4);
	MakeName	(0X65A4,	"char_in_xlat");
	MakeComm	(0X65A8,	"(GetExtCntry<<8)+23h");
	MakeCode	(x=0X65A8);
	OpHex		(x,	1);
	MakeComm	(0X65AB,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X65AB);
	OpHex		(x,	0);
	MakeComm	(0X65AE,	"0");
	MakeCode	(0X65AE);
	MakeName	(0X65AE,	"COPY");
	MakeComm	(0X65C8,	"DestClosed");
	MakeCode	(x=0X65C8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X65DA,	"DestVars");
	MakeComm	(0X65DD,	"SrcVars");
	MakeComm	(0X65E6,	"RDEOF");
	MakeComm	(0X65F5,	"OCtrlZ");
	MakeComm	(0X660A,	"AllSwitch");
	MakeComm	(0X660D,	"ArgC");
	MakeComm	(0X661F,	"Concat");
	MakeComm	(0X663A,	"DIRBUF");
	MakeComm	(0X663D,	"DestFcb");
	MakeComm	(0X6644,	"DESTHAND");
	MakeCode	(x=0X6653);
	OpHex		(x,	1);
	MakeComm	(0X6656,	"PLUS_CHR");
	MakeComm	(0X6658,	"byte ; CParse 'expand * to ?s' = true");
	MakeComm	(0X665C,	"CParse 'called from COPY' = true");
	MakeName	(0X6661,	"DESTSCAN");
	MakeCode	(x=0X6663);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X666D,	" (*) ; save CParse flags");
	MakeComm	(0X666E,	"byte");
	MakeCode	(x=0X6672);
	OpHex		(x,	1);
	MakeComm	(0X6675,	"no \"+\" delimiter");
	MakeComm	(0X6677,	"\"+\" delimiter occurred");
	MakeCode	(x=0X667C);
	OpHex		(x,	1);
	MakeName	(0X667C,	"NOCOPY");
	MakeComm	(0X6684,	"Verify requested?");
	MakeCode	(x=0X6684);
	OpHex		(x,	1);
	MakeName	(0X6684,	"CHK_CP_SWITCH");
	MakeComm	(0X6688,	"No");
	MakeComm	(0X668A,	"test word [AllSwitch],10h");
	MakeCode	(x=0X668A);
	OpHex		(x,	1);
	MakeComm	(0X6692,	"FBadSwitch");
	MakeCode	(x=0X6692);
	OpHex		(x,	1);
	MakeComm	(0X6696,	"negative Y (-Y) switch flag");
	MakeCode	(x=0X6696);
	OpHex		(x,	1);
	MakeName	(0X6696,	"NOT_SLASHV");
	MakeComm	(0X669C,	"[AllSwitch] ; negative (-Y) flag");
	MakeCode	(x=0X669C);
	OpHex		(x,	1);
	MakeComm	(0X66A4,	"[AllSwitch] ; SwitchY (Y) flag");
	MakeCode	(x=0X66A4);
	OpHex		(x,	1);
	MakeComm	(0X66AC,	"FBadSwitch (Repetitive)");
	MakeCode	(x=0X66AC);
	OpHex		(x,	1);
	MakeName	(0X66AC,	"NOT_SLASHY1");
	MakeComm	(0X66B0,	"cox_y setting will be used");
	MakeName	(0X66B0,	"NOT_SLASHY2");
	MakeCode	(x=0X66B5);
	OpHex		(x,	1);
	MakeName	(0X66B5,	"CHK_SLASHY0");
	MakeCode	(x=0X66BD);
	OpChr		(x,	1);
	MakeCode	(x=0X66C1);
	OpChr		(x,	1);
	MakeComm	(0X66C5,	"FBadSwitch");
	MakeCode	(x=0X66C5);
	OpHex		(x,	1);
	MakeCode	(0X66CB);
	MakeName	(0X66CB,	"CHK_SLASHY1");
	MakeComm	(0X66CF,	"[AllSwitch] ; negative (-Y) flag");
	MakeCode	(x=0X66CF);
	OpHex		(x,	1);
	MakeComm	(0X66D5,	"N flag");
	MakeComm	(0X66D7,	"[AllSwitch] ; SwitchY (Y) flag");
	MakeCode	(x=0X66D7);
	OpHex		(x,	1);
	MakeComm	(0X66DF,	"FBadSwitch (Repetitive)");
	MakeCode	(x=0X66DF);
	OpHex		(x,	1);
	MakeName	(0X66DF,	"CHK_SLASHY2");
	MakeName	(0X66E3,	"CHK_SLASHY3");
	MakeComm	(0X66E8,	"set [DestSwitch] SwitchY flag to 1");
	MakeName	(0X66E8,	"CHK_SLASHY4");
	MakeComm	(0X66EC,	"set [AllSwitch] SwitchY flag to 1");
	MakeComm	(0X66F0,	"~SwitchCopy  ; Bad switch?");
	MakeCode	(x=0X66F0);
	OpHex		(x,	1);
	MakeComm	(0X66F6,	"(*) ; fix up stack");
	MakeComm	(0X66F7,	"BadSwt_Ptr\nget \"Invalid switch\" message number");
	MakeCode	(0X6700);
	MakeName	(0X6700,	"NOT_BAD_SWITCH");
	MakeComm	(0X6706,	"(*) ; restore CParse flags");
	MakeCode	(0X6706);
	MakeName	(0X6706,	"TESTP2");
	MakeCode	(x=0X6709);
	OpHex		(x,	1);
	MakeComm	(0X670C,	"found a \"+pathname\" argument");
	MakeComm	(0X670E,	"inc byte [ArgC]");
	MakeName	(0X6712,	"GOTPLUS");
	MakeCode	(x=0X6716);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X671B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X672E,	"word");
	MakeComm	(0X6738,	"\"+\" with");
	MakeCode	(0X6738);
	MakeName	(0X6738,	"CHECKDONE");
	MakeComm	(0X673F,	"cmp byte [ArgC],1 ; one arg,");
	MakeComm	(0X6746,	"two objects..");
	MakeCode	(x=0X674D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X6753);
	MakeName	(0X6753,	"CDCONT");
	MakeComm	(0X6756,	"mov [Concat],al\nif \"+\" occurred, we're concatenating");
	MakeCode	(x=0X6759);
	OpHex		(x,	1);
	MakeCode	(x=0X675B);
	OpHex		(x,	1);
	MakeComm	(0X675D,	"therefore making an inexact copy");
	MakeComm	(0X6760,	"[ArgC] ; AL = # independent arguments");
	MakeCode	(x=0X6767);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X676A,	"LessArgs_Ptr ; set msg # \"param missing\"");
	MakeCode	(0X6772);
	MakeName	(0X6772,	"TRY_TOO_MANY");
	MakeComm	(0X6774,	"<= 2 arguments - ok");
	MakeCode	(x=0X6776);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6779,	"MoreArgs_Ptr ; set msg # \"too many params\"");
	MakeComm	(0X677F,	"parse_msg_class ; parse error message");
	MakeName	(0X677F,	"CERROR_PARSEJ");
	MakeName	(0X6784,	"CERROR4J");
	MakeComm	(0X6787,	"DestVars ; BP = base of dest variables");
	MakeCode	(x=0X6787);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X6787,	"ACOUNTOK");
	MakeCode	(x=0X6791);
	OpChr		(x,	1);
	MakeCode	(x=0X6793);
	OpChr		(x,	1);
	MakeComm	(0X6795,	"[bp+VARSTRUC.SIZ],2 ; pathname length = 2");
	MakeCode	(x=0X6799);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X679D,	"word");
	MakeComm	(0X67A3,	"[bp+VARSTRUC.INFO] ; 'wildcard present'");
	MakeComm	(0X67A7,	"[bp+VARSTRUC.ISDIR] ; 'not a directory'");
	MakeComm	(0X67AE,	"[bp+VARSTRUC.SIZ],2");
	MakeName	(0X67AE,	"GOT2ARGS");
	MakeComm	(0X67B2,	"not two chars, can't be \"d:\"");
	MakeCode	(x=0X67B4);
	OpChr		(x,	1);
	MakeComm	(0X67BA,	"it's just a 2-character filename");
	MakeComm	(0X67BC,	"[bp+VARSTRUC.INFO] ; 'wildcard present'");
	MakeCode	(x=0X67BC);
	OpHex		(x,	1);
	MakeComm	(0X67C0,	"ES:DI = ptr after \"d:\"");
	MakeCode	(x=0X67C0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X67C3,	"[bp+VARSTRUC.ISDIR] ; 'not a directory'");
	MakeComm	(0X67C7,	"add wildcards");
	MakeComm	(0X67CA,	"[bp+VARSTRUC.TTAIL]");
	MakeName	(0X67CA,	"NOTSHORTDEST");
	MakeComm	(0X67D0,	"not a null, so last char not \"\\\"");
	MakeCode	(x=0X67D2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X67D5);
	OpChr		(x,	1);
	MakeComm	(0X67DA,	"it's not \"d:\\\", exit with error msg");
	MakeComm	(0X67DC,	"[bp+VARSTRUC.ISDIR],2\ndestination 'is a directory'");
	MakeComm	(0X67E0,	"[bp+VARSTRUC.INFO],6\ndestination wildcarded and contains path character");
	MakeCode	(x=0X67E0);
	OpHex		(x,	1);
	MakeComm	(0X67E7,	"[AllSwitch]  ; AX = all switch flags");
	MakeName	(0X67E7,	"CHKSWTCHES");
	MakeComm	(0X67EA,	"SwitchV");
	MakeCode	(x=0X67EA);
	OpHex		(x,	1);
	MakeComm	(0X67ED,	"no /v, no verify");
	MakeComm	(0X67EF,	"Get_Verify_On_Write");
	MakeCode	(x=0X67EF);
	OpHex		(x,	1);
	MakeComm	(0X67F1,	"DOS - 2+ - GET VERIFY FLAG\nReturn: AL = 00h if flag OFF\nAL = 01h if flag ON");
	MakeCode	(x=0X67F1);
	OpHex		(x,	0);
	MakeComm	(0X67FA,	"save current verify flag");
	MakeComm	(0X67FE,	"(SET_VERIFY_ON_WRITE<<8)|1");
	MakeCode	(x=0X67FE);
	OpHex		(x,	1);
	MakeComm	(0X6801,	"DOS - SET VERIFY FLAG\nDL = 00h, AL = 01h VERIFY on / 00h VERIFY off");
	MakeCode	(x=0X6801);
	OpHex		(x,	0);
	MakeComm	(0X6803,	"BP = switch flags accumulator");
	MakeName	(0X6803,	"NOVERIF");
	MakeComm	(0X6805,	"SI = ptr into command line");
	MakeCode	(x=0X6805);
	OpHex		(x,	1);
	MakeComm	(0X6808,	"BL = special CParse delimiter = \"+\"");
	MakeComm	(0X680A,	"DI = ptr to pathname buf");
	MakeCode	(x=0X680A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X680A,	"SCANFSRC");
	MakeComm	(0X680D,	"parse first source pathname");
	MakeComm	(0X6810,	"switch?");
	MakeCode	(x=0X6810);
	OpHex		(x,	1);
	MakeComm	(0X6813,	"yes, try again");
	MakeComm	(0X6815,	"include copy-wide switches on dest");
	MakeCode	(x=0X6815);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6819,	"SWITCHB");
	MakeCode	(x=0X6819);
	OpHex		(x,	1);
	MakeComm	(0X681D,	"/b - explicit binary copy");
	MakeComm	(0X681F,	"cmp byte [Concat],0");
	MakeCode	(x=0X681F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6824,	"we're not concatenating");
	MakeComm	(0X6826,	"SWITCHA ; set ascii copy");
	MakeCode	(x=0X6826);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X682B,	"set source variables");
	MakeName	(0X682B,	"NOSETCASC");
	MakeComm	(0X682E,	"set up first source copy");
	MakeComm	(0X6831,	"jump into the copy loop");
	MakeComm	(0X6834,	"Close destination");
	MakeCode	(0X6834);
	MakeName	(0X6834,	"ENDCOPY");
	MakeComm	(0X6837,	"display # (destination) files copied");
	MakeCode	(x=0X6837);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X6837,	"ENDCOPY2");
	MakeCode	(x=0X683A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X683E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6845,	"stack could be messed up");
	MakeComm	(0X6848,	"cmp byte [Concat],0");
	MakeCode	(x=0X6848);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6848,	"SRCNONEXIST");
	MakeComm	(0X684D,	"concatenating - go on to next source");
	MakeComm	(0X684F,	"ext_msg_class ; extended error msg");
	MakeCode	(x=0X684F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6854);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6857,	"ERROR_FILE_NOT_FOUND");
	MakeCode	(x=0X6857);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X685D,	"point at bad pathname");
	MakeCode	(x=0X685D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6863,	"one_subst ; 1 substitution");
	MakeCode	(x=0X6863);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6868,	"print msg and clean up");
	MakeCode	(0X686B);
	MakeName	(0X686B,	"SOURCEPROC");
	MakeComm	(0X686E,	"cmp byte [Concat],0");
	MakeCode	(x=0X686E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6875,	"0");
	MakeName	(0X6875,	"FRSTSRC");
	MakeCode	(x=0X6877);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X687A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X687D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6880);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6880,	"LEAVECFLAG");
	MakeCode	(x=0X6884);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6887,	"SrcVars");
	MakeCode	(x=0X6887);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X688A,	"deny_none|read_open_mode");
	MakeCode	(x=0X688A);
	OpHex		(x,	1);
	MakeCode	(x=0X6890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6895,	"byte");
	MakeCode	(x=0X6895);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6895,	"NEXTSRC");
	MakeName	(0X689C,	"ENDCOPYJ2");
	MakeCode	(0X689E);
	MakeName	(0X689E,	"MORECP");
	MakeCode	(x=0X68A0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X68A4,	"PLUS_CHR");
	MakeCode	(x=0X68A6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X68A6,	"SCANSRC");
	MakeCode	(x=0X68AE);
	OpHex		(x,	1);
	MakeComm	(0X68B1,	"no \"+\" delimiter - we're done");
	MakeCode	(x=0X68B3);
	OpHex		(x,	1);
	MakeComm	(0X68B6,	"switch found - keep looking");
	MakeComm	(0X68BB,	"was +,, found last time?");
	MakeCode	(x=0X68BB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X68C0,	"no - try for a file");
	MakeComm	(0X68C2,	"yes - set flag");
	MakeCode	(x=0X68C2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X68C7,	"we know we won't find it");
	MakeComm	(0X68CA,	"reset +,, flag");
	MakeCode	(x=0X68CA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X68CA,	"NOSTAMP");
	MakeComm	(0X68CF,	"FCB");
	MakeCode	(x=0X68CF);
	OpHex		(x,	1);
	MakeName	(0X68CF,	"FIRSTENT");
	MakeCode	(x=0X68D2);
	OpHex		(x,	1);
	MakeComm	(0X68D5,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X68D5);
	OpHex		(x,	0);
	MakeComm	(0X68D7,	"did we parse the whole thing?");
	MakeComm	(0X68DA,	"no, error, simulate 'not found'");
	MakeCode	(x=0X68DC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X68DF);
	OpChr		(x,	1);
	MakeComm	(0X68E4,	"AL = drive 'letter' for current drive");
	MakeComm	(0X68E6,	"AL = lowercase drive letter");
	MakeCode	(x=0X68E6);
	OpHex		(x,	1);
	MakeName	(0X68E6,	"DRVSPEC1");
	MakeCode	(x=0X68E8);
	OpHex		(x,	1);
	MakeComm	(0X68EA,	"mov [FCB],al ; AL = drive id (0=current,1=A,..)");
	MakeComm	(0X68ED,	"Dir_Search_First\nAH = 'Find First File'");
	MakeName	(0X68F2,	"SRCHDONE");
	MakeComm	(0X68F3,	"restore users current directory");
	MakeCode	(0X68FC);
	MakeName	(0X68FC,	"NEXTAMBIG0");
	MakeCode	(x=0X68FE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6906);
	OpDecimal	(x,	1);
	MakeName	(0X6906,	"SETNMEL");
	MakeCode	(x=0X6909);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X690C,	"DIRBUF");
	MakeCode	(x=0X690C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X6911,	"NEXTAMBIG");
	MakeCode	(x=0X6913);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6916);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X691A,	"offset DIRBUF+1");
	MakeCode	(x=0X691A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6920,	"/Y switch override (question) enabled ?");
	MakeCode	(x=0X6920);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6920,	"MELDO0");
	MakeComm	(0X6925,	"no");
	MakeCode	(x=0X692A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X692D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6930);
	OpHex		(x,	1);
	MakeComm	(0X6933,	"DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING\nDS:SI -> ASCIZ relative path string or directory name\nES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name");
	MakeCode	(x=0X6933);
	OpHex		(x,	0);
	MakeComm	(0X6938,	"different file names");
	MakeComm	(0X693A,	"cmp byte [Concat],0");
	MakeCode	(x=0X693A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X693F,	"concatenating");
	MakeCode	(x=0X6941);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X694A,	"\"File cannot be copied onto itself\"");
	MakeCode	(x=0X694A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6950,	"destination file created flag");
	MakeCode	(x=0X6950);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6950,	"MELDO1");
	MakeComm	(0X6955,	"yes, new (created) file");
	MakeComm	(0X695A,	"answer is no");
	MakeComm	(0X695C,	"cmp byte [Concat],0");
	MakeCode	(x=0X695C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6963,	"is there a (valid) target file ?");
	MakeCode	(x=0X6963);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6968,	"yes");
	MakeComm	(0X696A,	"no, destination/target file does not exist");
	MakeComm	(0X696C,	"is 'Mel Hallerman copy' false ?");
	MakeCode	(x=0X696C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X696C,	"MELDO2");
	MakeComm	(0X6971,	"no (, it is true)");
	MakeComm	(0X6973,	"cmp byte [Concat],0");
	MakeCode	(x=0X6973);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X697A,	"mov byte [DestClosed],1");
	MakeCode	(x=0X697A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X697A,	"MELDO3");
	MakeCode	(0X6982);
	MakeName	(0X6982,	"MELDO4");
	MakeCode	(x=0X6987);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6991,	"mov byte [DestClosed],1");
	MakeCode	(x=0X6991);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6991,	"MELDO5");
	MakeComm	(0X6999,	"cmp byte [Concat],0");
	MakeCode	(x=0X6999);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6999,	"MELDO");
	MakeComm	(0X699E,	"concatenating - show name");
	MakeComm	(0X69A0,	"wildcard - show name");
	MakeCode	(x=0X69A0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X69A7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X69A7,	"SHOWCPNAM");
	MakeName	(0X69B0,	"DOREAD");
	MakeComm	(0X69B3,	"cmp byte [Concat],0");
	MakeCode	(x=0X69B3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X69BF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X69C4,	"cmp byte [Concat],0");
	MakeCode	(x=0X69C4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X69C4,	"NODCLOSE");
	MakeCode	(x=0X69CE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeName	(0X69D5,	"NOFLUSH");
	MakeComm	(0X69DA,	"mov byte [DestClosed],0");
	MakeCode	(x=0X69DA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X69E2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X69E2,	"DOMELCOPY");
	MakeCode	(x=0X69E9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X69ED);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X69F1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X69F6,	"CONTMEL");
	MakeCode	(x=0X69F8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X69FC,	"PLUS_CHR");
	MakeCode	(x=0X69FE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X69FE,	"SCANSRC2");
	MakeCode	(x=0X6A04);
	OpHex		(x,	1);
	MakeCode	(x=0X6A09);
	OpHex		(x,	1);
	MakeComm	(0X6A14,	"DESTFCB2");
	MakeCode	(x=0X6A14);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6A17,	"Parse_File_Descriptor*256");
	MakeCode	(x=0X6A17);
	OpHex		(x,	1);
	MakeComm	(0X6A1A,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X6A1A);
	OpHex		(x,	0);
	MakeCode	(x=0X6A1C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6A1F,	"DESTFCB2+1");
	MakeCode	(x=0X6A1F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6A22);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6A29,	"cmp byte [Concat],0");
	MakeCode	(x=0X6A29);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6A30);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6A35,	"MELDOJ");
	MakeCode	(0X6A38);
	MakeName	(0X6A38,	"NEXTSRCJ");
	MakeCode	(0X6A3B);
	MakeName	(0X6A3B,	"NEXTMEL");
	MakeComm	(0X6A3E,	"0");
	MakeCode	(x=0X6A40);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6A43);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6A46);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6A49);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6A4D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X6A59);
	MakeName	(0X6A59,	"SETNMELJ");
	MakeComm	(0X6A5C,	"Dir_Search_Next");
	MakeCode	(0X6A5C);
	MakeName	(0X6A5C,	"SEARCHNEXT");
	MakeCode	(x=0X6A5E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X6A63,	"do search-next if ambig");
	MakeComm	(0X6A65,	"reset zero flag");
	MakeCode	(0X6A68);
	MakeName	(0X6A68,	"SEARCH");
	MakeComm	(0X6A69,	"Set_DMA");
	MakeComm	(0X6A6B,	"offset DIRBUF");
	MakeCode	(x=0X6A6B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6A6E,	"DOS - SET DISK TRANSFER AREA ADDRESS\nDS:DX -> disk transfer buffer");
	MakeCode	(x=0X6A6E);
	OpHex		(x,	0);
	MakeComm	(0X6A71,	"FCB");
	MakeCode	(x=0X6A71);
	OpHex		(x,	1);
	MakeComm	(0X6A74,	"Do the search");
	MakeCode	(x=0X6A74);
	OpHex		(x,	0);
	MakeCode	(x=0X6A79);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X6A79,	"DOCOPY");
	MakeCode	(x=0X6A7C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6A7F,	"xNameTrans*256");
	MakeCode	(x=0X6A7F);
	OpHex		(x,	1);
	MakeComm	(0X6A82,	"DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING\nDS:SI -> ASCIZ relative path string or directory name\nES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name");
	MakeCode	(x=0X6A82);
	OpHex		(x,	0);
	MakeComm	(0X6A84,	"mov byte [RDEOF],0");
	MakeCode	(x=0X6A84);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6A89,	"ExtOpen shl 8");
	MakeComm	(0X6A8C,	"deny_none|read_open_mode");
	MakeCode	(x=0X6A8C);
	OpHex		(x,	1);
	MakeComm	(0X6A91,	"read_open_flag");
	MakeComm	(0X6A94,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X6A94);
	OpHex		(x,	0);
	MakeCode	(x=0X6A9A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6A9E,	"File_Times*256");
	MakeCode	(x=0X6A9E);
	OpHex		(x,	1);
	MakeComm	(0X6AA1,	"DOS - 2+ - GET FILE'S DATE/TIME\nBX = file handle");
	MakeCode	(x=0X6AA1);
	OpHex		(x,	0);
	MakeCode	(x=0X6AA5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6AA9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X6AAF);
	MakeCode	(x=0X6AB2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6AB8,	"one_subst");
	MakeCode	(x=0X6AB8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6AC0,	"did we open the file?");
	MakeCode	(x=0X6AC0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6AC5,	"no - don't close");
	MakeComm	(0X6ACA,	"was destination created?");
	MakeCode	(x=0X6ACA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6ACF,	"no - just cleanup and exit");
	MakeComm	(0X6AD1,	"clean up concatenation and exit");
	MakeCode	(0X6AD4);
	MakeCode	(x=0X6AD7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6ADB);
	OpHex		(x,	1);
	MakeComm	(0X6ADE,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X6ADE);
	OpHex		(x,	0);
	MakeComm	(0X6AE0,	"devid_ISDEV");
	MakeCode	(x=0X6AE0);
	OpHex		(x,	1);
	MakeCode	(x=0X6AE3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6AE7,	"source not a device");
	MakeCode	(x=0X6AE9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6AEE,	"ascii device ok");
	MakeComm	(0X6AF0,	"cannot do binary input");
	MakeCode	(x=0X6AF0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6AF6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6AFA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6AFE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6B02,	"compute available space");
	MakeCode	(x=0X6B09);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6B10);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6B15);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6B19);
	OpHex		(x,	1);
	MakeComm	(0X6B1B,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X6B1B);
	OpHex		(x,	0);
	MakeComm	(0X6B20,	"get count");
	MakeComm	(0X6B22,	"no more to read");
	MakeCode	(x=0X6B24);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6B29,	"is a device, ascii mode");
	MakeCode	(x=0X6B2B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6B34);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6B3B,	"scan for EOF");
	MakeCode	(x=0X6B3B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6B44,	"inc byte [RDEOF]");
	MakeCode	(x=0X6B44);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6B4D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6B51);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6B55);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6B5E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6B67,	"if file then EOF");
	MakeCode	(x=0X6B67);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6B6E,	"cmp byte [RDEOF],0");
	MakeCode	(x=0X6B6E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6B73,	"on device, go till ^Z");
	MakeCode	(x=0X6B75);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X6B75,	"CLOSESRC");
	MakeCode	(x=0X6B79);
	OpHex		(x,	1);
	MakeComm	(0X6B7B,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X6B7B);
	OpHex		(x,	0);
	MakeName	(0X6B7D,	"CLOSESRCDEST_RETN");
	MakeComm	(0X6B7E,	"cmp byte [DestClosed],0");
	MakeCode	(x=0X6B7E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6B7E,	"CLOSEDEST");
	MakeCode	(x=0X6B85);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6B88,	"check for b or a switch on destination");
	MakeCode	(x=0X6B8D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X6B98);
	MakeCode	(x=0X6B9B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6B9F,	"add EOF mark (ctrl-Z)");
	MakeComm	(0X6BA4,	"inc word [NXTADD] ; make sure our ^z gets written");
	MakeCode	(x=0X6BA4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6BA8,	"byte");
	MakeCode	(x=0X6BA8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6BAD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6BB0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6BB4,	"> 1");
	MakeComm	(0X6BB9,	"Written = 0 NxtAdd = 1 (the ^Z)");
	MakeCode	(x=0X6BC0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6BC5,	"wrote something");
	MakeComm	(0X6BC7,	"never wrote nothing");
	MakeComm	(0X6BCA,	"[DESTHAND]");
	MakeCode	(x=0X6BCA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6BCE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6BD2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6BD6,	"copy not exact?");
	MakeCode	(x=0X6BD6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6BDB,	"if no, copy date & time");
	MakeCode	(x=0X6BDD);
	OpHex		(x,	1);
	MakeComm	(0X6BDF,	"DOS - GET CURRENT TIME\nReturn: CH = hours, CL = minutes, DH = seconds\nDL = hundredths of seconds");
	MakeCode	(x=0X6BDF);
	OpHex		(x,	0);
	MakeCode	(x=0X6BE1);
	OpHex		(x,	1);
	MakeComm	(0X6BE3,	"left justify min in cl");
	MakeCode	(x=0X6BE3);
	OpHex		(x,	1);
	MakeCode	(x=0X6BE5);
	OpHex		(x,	1);
	MakeCode	(x=0X6BE7);
	OpHex		(x,	1);
	MakeComm	(0X6BE9,	"hours to high 5 bits, min to 5-10");
	MakeCode	(x=0X6BE9);
	OpHex		(x,	1);
	MakeComm	(0X6BEB,	"divide seconds by 2 (now 5 bits)");
	MakeCode	(x=0X6BEB);
	OpHex		(x,	1);
	MakeComm	(0X6BED,	"and stick into low 5 bits of cx");
	MakeCode	(x=0X6BF0);
	OpHex		(x,	1);
	MakeComm	(0X6BF2,	"DOS - GET CURRENT DATE\nReturn: DL = day, DH = month, CX = year\nAL = day of the week (0=Sunday, 1=Monday, etc.)");
	MakeCode	(x=0X6BF2);
	OpHex		(x,	0);
	MakeCode	(x=0X6BF4);
	OpDecimal	(x,	1);
	MakeComm	(0X6BFA,	"year to high 7 bits");
	MakeCode	(x=0X6BFA);
	OpHex		(x,	1);
	MakeComm	(0X6BFC,	"month to high 3 bits");
	MakeCode	(x=0X6BFC);
	OpHex		(x,	1);
	MakeCode	(x=0X6BFE);
	OpHex		(x,	1);
	MakeCode	(x=0X6C00);
	OpHex		(x,	1);
	MakeCode	(x=0X6C02);
	OpHex		(x,	1);
	MakeComm	(0X6C04,	"most sig bit of month in carry");
	MakeCode	(x=0X6C04);
	OpHex		(x,	1);
	MakeComm	(0X6C06,	"put that bit next to year");
	MakeComm	(0X6C09,	"or low three of month into day");
	MakeComm	(0X6C0B,	"get year and high bit of month");
	MakeName	(0X6C0E,	"DODCLOSE");
	MakeCode	(x=0X6C13);
	OpHex		(x,	1);
	MakeComm	(0X6C16,	"DOS - 2+ - SET FILE'S DATE/TIME\nBX = file handle, CX = time to be set\nDX = date to be set");
	MakeCode	(x=0X6C16);
	OpHex		(x,	0);
	MakeComm	(0X6C1A,	"(LSEEK<<8)+2 ; seek to EOF");
	MakeComm	(0X6C1D,	"0");
	MakeComm	(0X6C21,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file");
	MakeCode	(x=0X6C21);
	OpHex		(x,	0);
	MakeComm	(0X6C23,	"DX:AX is file size");
	MakeCode	(x=0X6C26);
	OpHex		(x,	1);
	MakeComm	(0X6C29,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X6C29);
	OpHex		(x,	0);
	MakeCode	(x=0X6C2C);
	OpHex		(x,	1);
	MakeComm	(0X6C2E,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X6C2E);
	OpHex		(x,	0);
	MakeCode	(0X6C3C);
	MakeComm	(0X6C3F,	"is the destination a device?");
	MakeCode	(x=0X6C3F);
	OpHex		(x,	1);
	MakeComm	(0X6C43,	"yes, copy succeeded");
	MakeComm	(0X6C4A,	"inc word [FileCnt]");
	MakeCode	(x=0X6C4A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6C4E,	"inc byte [DestClosed]");
	MakeCode	(x=0X6C4E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6C52,	"RET50");
	MakeComm	(0X6C54,	"[DESTHAND]");
	MakeCode	(x=0X6C54);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6C58,	"close the dest");
	MakeComm	(0X6C5E,	"no files transferred");
	MakeCode	(x=0X6C5E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6C66,	"destination file size > 0");
	MakeCode	(x=0X6C66);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6C66,	"DestDelete");
	MakeComm	(0X6C6B,	"yes, do not delete");
	MakeCode	(x=0X6C6D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6C70,	"Unlink");
	MakeCode	(x=0X6C70);
	OpHex		(x,	1);
	MakeComm	(0X6C72,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)");
	MakeCode	(x=0X6C72);
	OpHex		(x,	0);
	MakeCode	(0X6C75);
	MakeName	(0X6C75,	"SOURCE_SET");
	MakeCode	(x=0X6C76);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6C79,	"adjust to copy");
	MakeCode	(x=0X6C79);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6C7E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6C83);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6C86);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6C8D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6C94,	"set a,b switches accordingly");
	MakeComm	(0X6C97,	"get any more switches on this arg");
	MakeComm	(0X6C9E,	"have we already issued a message?");
	MakeCode	(x=0X6C9E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6C9E,	"CleanUpErr");
	MakeComm	(0X6CA3,	"yes - don't issue duplicate error");
	MakeCode	(x=0X6CA8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6CAE,	"one_subst");
	MakeCode	(x=0X6CAE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6CB7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6CB7,	"get_answer_YNA");
	MakeCode	(x=0X6CBF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6CC2,	"DOS - 2+ - GET FILE ATTRIBUTES\nDS:DX -> ASCIZ file name or directory\nname without trailing slash");
	MakeCode	(x=0X6CC2);
	OpHex		(x,	0);
	MakeComm	(0X6CC9,	"byte ; valid destination file");
	MakeCode	(x=0X6CC9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6CCD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6CD1,	"sublist size, 11 bytes");
	MakeCode	(x=0X6CD1);
	OpDecimal	(x,	1);
	MakeComm	(0X6CD5,	"sublist value (pointer)");
	MakeCode	(x=0X6CD5);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6CDA,	"sublist segment");
	MakeComm	(0X6CDD,	"sub id (N of %N)");
	MakeComm	(0X6CE1,	"data type flags ; ASCII");
	MakeComm	(0X6CE5,	"maximum length (chars)");
	MakeComm	(0X6CE9,	"minimum length (chars)");
	MakeComm	(0X6CED,	"pad field character (0)");
	MakeCode	(x=0X6CF1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6CF5,	"message number\n'Overwrite %1 (Yes/No/All)?'");
	MakeCode	(x=0X6CF5);
	OpDecimal	(x,	1);
	MakeComm	(0X6CF8,	"std error (file handle = 2)");
	MakeComm	(0X6CFB,	"byte count");
	MakeComm	(0X6CFE,	"message class (utility)");
	MakeComm	(0X6D00,	"control flag = 0");
	MakeCode	(x=0X6D07);
	OpHex		(x,	1);
	MakeComm	(0X6D0A,	"DOS - CLEAR KEYBOARD BUFFER\nAL must be 01h, 06h, 07h, 08h, or 0Ah.");
	MakeCode	(x=0X6D0A);
	OpHex		(x,	0);
	MakeCode	(x=0X6D18);
	OpHex		(x,	1);
	MakeComm	(0X6D1B,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X6D1B);
	OpHex		(x,	0);
	MakeComm	(0X6D1D,	"'Y'");
	MakeCode	(x=0X6D1D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6D23,	"'N'");
	MakeCode	(x=0X6D23);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6D29,	"'A'");
	MakeCode	(x=0X6D29);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6D32);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6D36);
	OpHex		(x,	1);
	MakeComm	(0X6D38,	"std error (file handle = 2)");
	MakeComm	(0X6D3B,	"byte count");
	MakeCode	(x=0X6D3E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6D41,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6D41);
	OpHex		(x,	0);
	MakeCode	(x=0X6D43);
	OpHex		(x,	1);
	MakeCode	(x=0X6D45);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6D4A,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6D4A);
	OpHex		(x,	0);
	MakeCode	(0X6D4F);
	MakeCode	(x=0X6D56);
	OpHex		(x,	1);
	MakeComm	(0X6D59,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X6D59);
	OpHex		(x,	0);
	MakeComm	(0X6D5C,	"message number");
	MakeCode	(x=0X6D5C);
	OpDecimal	(x,	1);
	MakeComm	(0X6D5F,	"std error (file handle = 2)");
	MakeComm	(0X6D64,	"message class (utility)");
	MakeCode	(x=0X6D6C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6D72);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6D78);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X6D7F);
	MakeComm	(0X6D81,	"suppress copy overwrite confirmation");
	MakeCode	(x=0X6D81);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6D81,	"init_copycmd_option");
	MakeCode	(x=0X6D87);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6D8B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpChr		(x,	1);
	MakeCode	(x=0X6D93);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X6D98);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6DA4,	"copycmd=/Y or copycmd=/-Y");
	MakeComm	(0X6DA9,	"skip '/'");
	MakeComm	(0X6DAD,	"convert to uppercase");
	MakeCode	(x=0X6DAD);
	OpHex		(x,	1);
	MakeCode	(x=0X6DAF);
	OpChr		(x,	1);
	MakeComm	(0X6DB3,	"clear copy overwrite question/confirmation\n(don't suppress)");
	MakeCode	(x=0X6DB3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6DBA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6DBE,	"default (/Y) switch option (1 = enabled)");
	MakeCode	(x=0X6DBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6DC8);
	MakeName	(0X6DC8,	"get_copycmd_option");
	MakeCode	(0X6DD7);
	MakeCode	(0X6DD9);
	MakeCode	(0X6DDB);
	MakeName	(0X6DDB,	"getenv_copycmd");
	MakeComm	(0X6DEB,	"cf = 0");
	MakeCode	(x=0X6DEE);
	OpDecimal	(x,	1);
	MakeComm	(0X6DF1,	"al = 0");
	MakeCode	(0X6DF6);
	MakeCode	(0X6DF8);
	MakeComm	(0X6DFA,	"mov al,[Concat]");
	MakeCode	(x=0X6DFA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X6DFA,	"TRYFLUSH");
	MakeComm	(0X6E02,	"cmp al,[Concat]");
	MakeCode	(x=0X6E02);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6E07);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6E07,	"FlshFil");
	MakeCode	(x=0X6E0C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6E16,	"find out all about the destination");
	MakeCode	(0X6E16);
	MakeComm	(0X6E19,	"source and dest. the same?");
	MakeComm	(0X6E1C,	"if not, go ahead");
	MakeCode	(x=0X6E1E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6E23,	"same name on device ok");
	MakeComm	(0X6E25,	"cmp byte [Concat],0");
	MakeCode	(x=0X6E25);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6E2A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6E2F,	"not concatenating - overwrite error");
	MakeComm	(0X6E32,	"flag not writing (just seeking)");
	MakeCode	(x=0X6E32);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6E3A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6E3D,	"get open mode for copy");
	MakeCode	(x=0X6E3D);
	OpHex		(x,	1);
	MakeComm	(0X6E42,	"write_open_flag");
	MakeCode	(x=0X6E45);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6E4A,	"don't actually create if nowrite set");
	MakeComm	(0X6E4C,	"creat_open_flag");
	MakeComm	(0X6E4F,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X6E4F);
	OpHex		(x,	0);
	MakeCode	(x=0X6E56);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6E5C,	"one_subst");
	MakeCode	(x=0X6E5C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6E64,	"mov [DESTHAND],ax ; save handle");
	MakeCode	(x=0X6E64);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6E67,	"destination now exists");
	MakeCode	(x=0X6E67);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6E6E);
	OpHex		(x,	1);
	MakeComm	(0X6E71,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X6E71);
	OpHex		(x,	0);
	MakeComm	(0X6E73,	"set dest info");
	MakeCode	(x=0X6E73);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6E77);
	OpHex		(x,	1);
	MakeComm	(0X6E7A,	"Dest not a device");
	MakeCode	(x=0X6E7C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6E7F,	"SWITCHA+SWITCHB ; 4+8");
	MakeCode	(x=0X6E7F);
	OpHex		(x,	1);
	MakeComm	(0X6E83,	"neither set, use current setting");
	MakeCode	(x=0X6E83);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6E86);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6E8A,	"neither set, default to ascii");
	MakeComm	(0X6E8C,	"jpe ; both are set, ignore");
	MakeCode	(x=0X6E8E);
	OpHex		(x,	1);
	MakeComm	(0X6E92,	"(IOCTL<<8)|1");
	MakeComm	(0X6E97,	"devid_RAW");
	MakeCode	(x=0X6E97);
	OpHex		(x,	1);
	MakeCode	(x=0X6E9A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6E9E,	"DOS - 2+ - IOCTL - SET DEVICE INFORMATION\nBX = device handle, DH = 0\nDL = device information to set (bits 0-7 from function 0)");
	MakeCode	(x=0X6E9E);
	OpHex		(x,	0);
	MakeComm	(0X6EA2,	"SWITCHA ; set ascii mode");
	MakeCode	(x=0X6EA2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6EA7,	"ascii -> inexact");
	MakeCode	(x=0X6EA7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeCode	(x=0X6EAC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6EB1,	"if nowrite don't bother with name check");
	MakeComm	(0X6EB3,	"don't check if just doing +,,");
	MakeCode	(x=0X6EB3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6EBA,	"source and dest. the same?");
	MakeComm	(0X6EBD,	"if not, go ahead");
	MakeCode	(x=0X6EBF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6EC4,	"same name on device ok");
	MakeComm	(0X6EC6,	"tell him he's not going to get it");
	MakeCode	(x=0X6EC6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6ECC,	"word");
	MakeCode	(x=0X6ECC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6ED2,	"byte");
	MakeCode	(x=0X6ED2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6ED7,	"[DESTHAND]");
	MakeCode	(x=0X6ED7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6EDB,	"0");
	MakeCode	(x=0X6EDD);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6EE1,	"if nothing to write, forget it");
	MakeComm	(0X6EE3,	"word ; flag that we wrote something");
	MakeCode	(x=0X6EE3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6EE7,	"if nowrite set, just seek cx bytes");
	MakeCode	(x=0X6EE7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6EF1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6EF5);
	OpHex		(x,	1);
	MakeComm	(0X6EF7,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6EF7);
	OpHex		(x,	0);
	MakeCode	(x=0X6EFA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6EFF,	"failure");
	MakeCode	(0X6F02);
	MakeComm	(0X6F06,	"devid_ISDEV");
	MakeCode	(x=0X6F06);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X6F0B,	"is a file, error");
	MakeComm	(0X6F0D,	"devid_RAW");
	MakeCode	(x=0X6F0D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpHex		(x,	1);
	MakeComm	(0X6F12,	"is a raw device, error");
	MakeCode	(x=0X6F14);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6F19,	"inexact so ok");
	MakeComm	(0X6F1C,	"wrote one byte less (the ^z)");
	MakeCode	(x=0X6F1E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X6F23);
	MakeComm	(0X6F25,	"cx = 0\ncx:dx = (signed) offset from origin of new file position");
	MakeComm	(0X6F27,	"(LSEEK<<8)|1");
	MakeCode	(x=0X6F27);
	OpHex		(x,	1);
	MakeComm	(0X6F2A,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from present location");
	MakeCode	(x=0X6F2A);
	OpHex		(x,	0);
	MakeComm	(0X6F2C,	"(existing) destination file size is not zero");
	MakeCode	(x=0X6F2C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6F39,	"(existing) destination file size is zero");
	MakeCode	(x=0X6F39);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6F3E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6F41);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6F45,	"cmp byte [RDEOF],0");
	MakeCode	(x=0X6F45);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6F4C,	"cx = 0 ; file is truncated to the current position");
	MakeCode	(x=0X6F4C);
	OpHex		(x,	1);
	MakeComm	(0X6F4E,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6F4E);
	OpHex		(x,	0);
	MakeComm	(0X6F52,	"mov byte [OCtrlZ],1Ah");
	MakeCode	(x=0X6F52);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X6F58);
	MakeName	(0X6F58,	"COPYERR");
	MakeComm	(0X6F5B,	"inc byte [DestClosed]");
	MakeCode	(x=0X6F5B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6F5F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6F64,	"never actually got it open");
	MakeComm	(0X6F66,	"[DESTHAND]");
	MakeCode	(x=0X6F66);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6F6F,	"CX = hi word of original file ptr");
	MakeCode	(x=0X6F6F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6F73,	"DX = lo word of original file ptr");
	MakeCode	(x=0X6F73);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6F7B,	"null file ptr means nothing to save");
	MakeCode	(x=0X6F7D);
	OpHex		(x,	1);
	MakeComm	(0X6F80,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X6F80);
	OpHex		(x,	0);
	MakeComm	(0X6F82,	"0");
	MakeCode	(x=0X6F84);
	OpHex		(x,	1);
	MakeComm	(0X6F86,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6F86);
	OpHex		(x,	0);
	MakeComm	(0X6F88,	"cmp byte [OCtrlZ],0");
	MakeCode	(x=0X6F88);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6F8F,	"1");
	MakeComm	(0X6F90,	"offset OCtrlZ");
	MakeCode	(x=0X6F90);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6F93);
	OpHex		(x,	1);
	MakeComm	(0X6F95,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X6F95);
	OpHex		(x,	0);
	MakeCode	(x=0X6F97);
	OpHex		(x,	1);
	MakeComm	(0X6F99,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X6F99);
	OpHex		(x,	0);
	MakeCode	(x=0X6F9D);
	OpHex		(x,	1);
	MakeComm	(0X6F9F,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X6F9F);
	OpHex		(x,	0);
	MakeCode	(x=0X6FA1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6FA4);
	OpHex		(x,	1);
	MakeComm	(0X6FA6,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)");
	MakeCode	(x=0X6FA6);
	OpHex		(x,	0);
	MakeCode	(x=0X6FA8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6FB0,	"SWITCHA+SWITCHB ; AL = /a, /b flags");
	MakeCode	(x=0X6FB0);
	OpHex		(x,	1);
	MakeName	(0X6FB0,	"SETASC");
	MakeComm	(0X6FB2,	"jpe ; even parity - both or neither");
	MakeComm	(0X6FB5,	"SWITCHB");
	MakeCode	(x=0X6FB5);
	OpHex		(x,	1);
	MakeCode	(x=0X6FB7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X6FBB,	"SWITCHA");
	MakeCode	(x=0X6FBB);
	OpHex		(x,	1);
	MakeCode	(x=0X6FBD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6FC0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X6FC4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6FCA,	"-1");
	MakeCode	(x=0X6FCA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X6FCA,	"BUILDDEST");
	MakeCode	(x=0X6FD1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6FD4,	"offset DestVars");
	MakeCode	(x=0X6FD4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6FD7,	"deny_none|write_open_mode");
	MakeCode	(x=0X6FD7);
	OpHex		(x,	1);
	MakeCode	(x=0X6FE2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X6FED);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6FF1,	"offset DestFcb");
	MakeCode	(x=0X6FF1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X6FF4,	"Parse_File_Descriptor*256");
	MakeCode	(x=0X6FF4);
	OpHex		(x,	1);
	MakeComm	(0X6FF7,	"DOS - PARSE FILENAME\nDS:SI -> string to parse\nES:DI -> buffer to fill with unopened FCB\nAL = bit mask to control parsing");
	MakeCode	(x=0X6FF7);
	OpHex		(x,	0);
	MakeComm	(0X6FFE,	"issue \"file creation error\"");
	MakeCode	(x=0X6FFE);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7004,	"AX = possible \"d:\"");
	MakeCode	(x=0X7004);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X7007);
	OpChr		(x,	1);
	MakeComm	(0X700E,	"CL = saved Ascii flag");
	MakeCode	(x=0X700E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X7012);
	OpHex		(x,	1);
	MakeCode	(x=0X7014);
	OpHex		(x,	1);
	MakeComm	(0X7016,	"[DestFcb] ; store drive # in FCB");
	MakeCode	(x=0X7016);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7019,	"AL = destination CParse flags");
	MakeCode	(x=0X7019);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X701C,	"AH = source CParse flags");
	MakeCode	(x=0X701C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X7020);
	OpHex		(x,	1);
	MakeComm	(0X702B,	"Destination is wildcarded.");
	MakeCode	(x=0X702B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7030,	"no +'s in source");
	MakeComm	(0X7032,	"byte ; 'Mel copy' = true");
	MakeCode	(x=0X7032);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X703A,	"AL=0 -> ambiguous destination, 2 otherwise");
	MakeCode	(x=0X703A);
	OpHex		(x,	1);
	MakeComm	(0X703E,	"AL=1 -> ambiguous source, unambiguous dest\n(implies concatenation)");
	MakeCode	(x=0X703E);
	OpHex		(x,	1);
	MakeComm	(0X7040,	"\"+\" always infers concatenation");
	MakeCode	(x=0X7040);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7044,	"mov [Concat],al ; AL = 1 if concatenating, 0 if not.");
	MakeCode	(x=0X7044);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7047);
	OpHex		(x,	1);
	MakeCode	(x=0X7049);
	OpHex		(x,	1);
	MakeComm	(0X704B,	"concatenation -> inexact copy");
	MakeCode	(x=0X704B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X704E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7053,	"explicit binary copy");
	MakeCode	(x=0X7055);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X705A,	"Ascii flag set before, data read correctly");
	MakeComm	(0X705E,	"Ascii flag did not change state");
	MakeCode	(x=0X7060);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7064,	"no data, everything ok");
	MakeCode	(x=0X706B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X706F,	"scan for EOF");
	MakeComm	(0X7072,	"no ^z in buffer, everything ok");
	MakeComm	(0X7074,	"point at ^z");
	MakeComm	(0X7075,	"new buffer length");
	MakeCode	(x=0X7075);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7079,	"offset DIRBUF+1");
	MakeCode	(x=0X7079);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X707C,	"cmp byte [Concat],0");
	MakeCode	(x=0X707C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7081,	"Not a concat");
	MakeComm	(0X7083,	"Source of replacement chars");
	MakeCode	(x=0X7083);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7086,	"offset DestFcb+1");
	MakeCode	(x=0X7086);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X7089);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X708D,	"BUILDNAME");
	MakeComm	(0X70A5,	"No extension");
	MakeComm	(0X70BB,	"NUL terminate");
	MakeComm	(0X70BD,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X70BD);
	OpHex		(x,	1);
	MakeName	(0X70BD,	"BUILDPATH");
	MakeComm	(0X70C5,	"VARSTRUC.BUF");
	MakeComm	(0X70C9,	"(ExtOpen<<8)");
	MakeComm	(0X70D3,	"DOS - 4.0 - EXTENDED OPEN/CREATE\nBL = open mode as in AL for normal open (INT 21h/AH=3Dh)\nBH = flags, CX = create attribute, DL = action if file exists/does not exists\nDH = 00h (reserved), DS:SI -> ASCIZ file name");
	MakeCode	(x=0X70D3);
	OpHex		(x,	0);
	MakeComm	(0X70DB,	"ERROR_FILE_NOT_FOUND");
	MakeComm	(0X70E0,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X70E5,	"ERROR_ACCESS_DENIED");
	MakeCode	(0X70ED);
	MakeCode	(x=0X70EF);
	OpHex		(x,	1);
	MakeComm	(0X70F2,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X70F2);
	OpHex		(x,	0);
	MakeCode	(x=0X70F4);
	OpHex		(x,	1);
	MakeComm	(0X70F6,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X70F6);
	OpHex		(x,	0);
	MakeComm	(0X70F8,	"devid_ISDEV");
	MakeCode	(x=0X70F8);
	OpHex		(x,	1);
	MakeComm	(0X70FD,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X70FD);
	OpHex		(x,	1);
	MakeComm	(0X7103,	"[bp+VARSTRUC.BUF]");
	MakeComm	(0X7106,	"If no drive specified, get default drive dir");
	MakeCode	(x=0X710B);
	OpChr		(x,	1);
	MakeCode	(x=0X7112);
	OpHex		(x,	1);
	MakeCode	(x=0X7115);
	OpHex		(x,	1);
	MakeCode	(0X7123);
	MakeComm	(0X7125,	"VARSTRUC.BUF ; Set DX for upcomming CHDIRs");
	MakeComm	(0X7128,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X712B);
	OpHex		(x,	1);
	MakeComm	(0X712E,	"Ambig and path ?");
	MakeComm	(0X7131,	"jmp if no");
	MakeComm	(0X7133,	"[bp+VARSTRUC.TTAIL]");
	MakeCode	(x=0X7136);
	OpChr		(x,	1);
	MakeComm	(0X713D,	"[bp+VARSTRUC.ISDIR],2 ; Know is d:/file");
	MakeComm	(0X7143,	"[bp+VARSTRUC.ISDIR],1 ; Know is path/file");
	MakeCode	(0X7143);
	MakeCode	(0X714B);
	MakeComm	(0X7150,	"[bp+VARSTRUC.ISDIR]");
	MakeCode	(0X7155);
	MakeCode	(x=0X7158);
	OpHex		(x,	1);
	MakeComm	(0X715A,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X715A);
	OpHex		(x,	0);
	MakeCode	(0X7179);
	MakeCode	(x=0X717A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X717D,	"[bp+VARSTRUC.ISDIR],2 ; assume d:/file");
	MakeComm	(0X7183,	"his is the trailing byte of ECS code");
	MakeComm	(0X718B,	"[bp+VARSTRUC.ISDIR],1 ; know path/file");
	MakeComm	(0X718F,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X718F);
	OpHex		(x,	1);
	MakeCode	(0X7197);
	MakeComm	(0X719A,	"ERROR_PATH_NOT_FOUND");
	MakeComm	(0X719F,	"ERROR_ACCESS_DENIED");
	MakeComm	(0X71A4,	"[bp+VARSTRUC.ISDIR]");
	MakeComm	(0X71A8,	"[bp+VARSTRUC.INFO]");
	MakeCode	(x=0X71AB);
	OpHex		(x,	1);
	MakeComm	(0X71AE,	"Know pure file, no path seps");
	MakeComm	(0X71B0,	"[bp+VARSTRUC.ISDIR],2 ; assume d:/file");
	MakeComm	(0X71B4,	"[bp+VARSTRUC.TTAIL]");
	MakeComm	(0X71BA,	"Trailing '/'");
	MakeComm	(0X71C0,	"If . or .. pure cd should have worked");
	MakeComm	(0X71C7,	"Know d:/file");
	MakeComm	(0X71C9,	"[bp+VARSTRUC.ISDIR],1 ; Know path/file");
	MakeComm	(0X71CD,	"Point at last '/'");
	MakeComm	(0X71D0,	"Stick in a NUL");
	MakeComm	(0X71EC,	"Last char is ECS code,\ndon't check for trailing path sep");
	MakeCode	(0X71EE);
	MakeComm	(0X71F4,	"if double slash, then complain");
	MakeCode	(x=0X71F9);
	OpHex		(x,	1);
	MakeComm	(0X71FB,	"DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)\nDS:DX -> ASCIZ directory name (may include drive)");
	MakeCode	(x=0X71FB);
	OpHex		(x,	0);
	MakeCode	(0X7207);
	MakeComm	(0X720A,	"[bp+VARSTRUC.TTAIL]");
	MakeCode	(0X720A);
	MakeName	(0X720A,	"SETSTARS");
	MakeComm	(0X720D,	"[bp+VARSTRUC.SIZ]");
	MakeCode	(x=0X720D);
	OpDecimal	(x,	1);
	MakeComm	(0X7211,	"DOT_QMARK ; '?.' (NASM syntax)");
	MakeCode	(x=0X7226);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X7226,	"COMPNAME");
	MakeCode	(x=0X7229);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X722C,	"(xNameTrans*256)");
	MakeCode	(x=0X722C);
	OpHex		(x,	1);
	MakeComm	(0X722F,	"DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING\nDS:SI -> ASCIZ relative path string or directory name\nES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name");
	MakeCode	(x=0X722F);
	OpHex		(x,	0);
	MakeCode	(x=0X7231);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X7234);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X723B,	"DS:SI   Points input buffer\nES:DI   Points to the token buffer\nBL  Special delimiter for this call");
	MakeCode	(0X723B);
	MakeName	(0X723B,	"cparse");
	MakeComm	(0X723D,	"No path element");
	MakeCode	(x=0X723D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7241,	"Start in 8 char prefix");
	MakeCode	(x=0X7241);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7244,	"No skip delimiter yet");
	MakeCode	(x=0X7244);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7247,	"Init nothing");
	MakeComm	(0X724D,	"reset comma flag");
	MakeCode	(x=0X724D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X725F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7265,	"One non space/tab delimiter allowed");
	MakeComm	(0X7267,	"has a special char been found?");
	MakeCode	(x=0X7267);
	OpHex		(x,	1);
	MakeComm	(0X726A,	"no - just exit");
	MakeComm	(0X726C,	"set comma flag");
	MakeCode	(x=0X726C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7274,	"Special delimiter?");
	MakeCode	(0X7274);
	MakeCode	(x=0X7278);
	OpHex		(x,	1);
	MakeComm	(0X727D,	"a CR?");
	MakeCode	(0X727D);
	MakeComm	(0X7284,	"is the char the switch char?");
	MakeCode	(x=0X7284);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X728A,	"yes, process...");
	MakeCode	(x=0X728D);
	OpChr		(x,	1);
	MakeComm	(0X7291,	"Drive not specified");
	MakeCode	(x=0X7293);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X72A0,	"Get the ':'");
	MakeCode	(x=0X72A4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X72A8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X72B0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X72B4,	"Store of this char sets it to one");
	MakeCode	(x=0X72B4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X72B9,	"Was CPARSE called from COPY?");
	MakeCode	(x=0X72B9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X72BE,	"No, don't add drive spec.");
	MakeComm	(0X72C0,	"Starts with a pathchar?");
	MakeComm	(0X72C3,	"no");
	MakeComm	(0X72C6,	"Insert drive spec");
	MakeCode	(x=0X72C6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X72D4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X72D8,	"byte");
	MakeCode	(x=0X72D8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X72E8,	"and if we're in COPY");
	MakeCode	(x=0X72E8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X72EF,	"upper case the char");
	MakeComm	(0X72F6,	"byte ; flag in extension");
	MakeCode	(x=0X72F6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X72FA,	"Store of the '.' resets it to 0");
	MakeCode	(x=0X72FA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7303);
	OpHex		(x,	1);
	MakeCode	(x=0X730A);
	OpHex		(x,	1);
	MakeCode	(x=0X730D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X7316);
	MakeCode	(0X7318);
	MakeCode	(x=0X731A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7325);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X733F);
	OpHex		(x,	1);
	MakeCode	(x=0X7342);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7349,	"If just hit a '/', cannot have ? or * yet");
	MakeCode	(x=0X7349);
	OpHex		(x,	1);
	MakeComm	(0X734E,	"New element");
	MakeCode	(x=0X734E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7352,	"word ; Point to char after /");
	MakeCode	(x=0X7352);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7356,	"Store of '/' sets it to 0");
	MakeCode	(x=0X7356);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X735B,	"byte");
	MakeCode	(x=0X735B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7360,	"just an alphanum string");
	MakeCode	(x=0X736D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7377,	"':' allowed as trailer because of devices");
	MakeCode	(x=0X7377);
	OpChr		(x,	1);
	MakeCode	(x=0X737E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X738A,	"Skip the ':'");
	MakeCode	(0X738A);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	MakeCode	(0X738D);
	MakeComm	(0X7390,	"Issue \"Invalid Directory\" message");
	MakeCode	(x=0X7390);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X7396);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X739C,	"adjust the pointer");
	MakeCode	(0X739C);
	MakeComm	(0X739D,	"retrive token buffer address");
	MakeComm	(0X739E,	"restore flags");
	MakeComm	(0X739F,	"set the carry bit");
	MakeComm	(0X73A1,	"adjust for next round");
	MakeCode	(0X73A1);
	MakeComm	(0X73A4,	"Indicate switch");
	MakeCode	(x=0X73A4);
	OpHex		(x,	1);
	MakeComm	(0X73A7,	"FSWITCH");
	MakeCode	(x=0X73A7);
	OpHex		(x,	1);
	MakeComm	(0X73BB,	"FBADSWITCH");
	MakeCode	(x=0X73BB);
	OpHex		(x,	1);
	MakeCode	(0X73C1);
	MakeComm	(0X73C8,	"FBADSWITCH");
	MakeCode	(x=0X73C8);
	OpHex		(x,	1);
	MakeComm	(0X73CC,	"Trailing switch character error\nBP = fSwitch but no switch bit is set\n(unknown switch)");
	MakeComm	(0X73CE,	"store the character");
	MakeCode	(0X73CE);
	MakeCode	(x=0X73D9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X73DC,	"SWCOUNT = 8");
	MakeCode	(x=0X73DF);
	OpHex		(x,	1);
	MakeComm	(0X73E7,	"~FBADSWITCH");
	MakeCode	(x=0X73E7);
	OpHex		(x,	1);
	MakeComm	(0X73FC,	"store char in token buffer");
	MakeCode	(0X73FC);
	MakeName	(0X73FC,	"move_char");
	MakeComm	(0X73FD,	"increment char count");
	MakeComm	(0X73FE,	"byte ; increment element count for * substi");
	MakeCode	(x=0X73FE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X7403);
	MakeName	(0X7403,	"sysparse");
	MakeName	(0X7419,	"$P_Redo_Time");
	MakeComm	(0X741F,	"word ; $P_No_Error");
	MakeCode	(x=0X7434);
	OpChr		(x,	1);
	MakeCode	(x=0X743B);
	OpChr		(x,	1);
	MakeCode	(x=0X7442);
	OpChr		(x,	1);
	MakeCode	(x=0X7449);
	OpChr		(x,	1);
	MakeComm	(0X7455,	"$P_RC_EOL");
	MakeComm	(0X7459,	"[es:di+$P_PARMS_BLK.$P_PARMSX_Address]");
	MakeComm	(0X745C,	"[es:bx+$P_PARMSX_BLK.$P_MinP]\ncheck ORDINAL to see if the minimum");
	MakeComm	(0X745F,	"positional found.");
	MakeComm	(0X7461,	"$P_Op_Missing");
	MakeCode	(0X7468);
	MakeCode	(x=0X7470);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7474,	"$P_Extra");
	MakeCode	(x=0X7474);
	OpHex		(x,	1);
	MakeComm	(0X747D,	"Check switch character");
	MakeComm	(0X7480,	"if carry set found delimiter type slash,\nneed backup si, else continue");
	MakeComm	(0X7482,	"Check EOL character");
	MakeComm	(0X7487,	"Check delimiter");
	MakeComm	(0X748A,	"If no, process next byte");
	MakeComm	(0X748C,	"$P_Extra");
	MakeCode	(x=0X748C);
	OpHex		(x,	1);
	MakeComm	(0X7494,	"skip subsequent white space,too");
	MakeComm	(0X7497,	"finish copy by placing NUL at end");
	MakeComm	(0X7499,	"$P_SW+$P_equ");
	MakeCode	(x=0X7499);
	OpHex		(x,	1);
	MakeCode	(0X74A4);
	MakeComm	(0X74A7,	"$P_Keyword");
	MakeComm	(0X74AB,	"$P_equ");
	MakeCode	(x=0X74AB);
	OpHex		(x,	1);
	MakeComm	(0X74B1,	"ready to see next byte");
	MakeComm	(0X74B2,	"was it 1st byte of DBCS ?");
	MakeComm	(0X74B5,	"if no, process to next byte");
	MakeComm	(0X74B7,	"if yes, store 2nd byte of DBCS");
	MakeComm	(0X74BB,	"update pointer");
	MakeComm	(0X74BC,	"process to next byte");
	MakeComm	(0X74BE,	"backup si pointer");
	MakeCode	(0X74BE);
	MakeComm	(0X74BF,	"save next pointer");
	MakeComm	(0X74C4,	"$P_NULL ; put nul at the end");
	MakeComm	(0X74C8,	"keep the addr for later use of complex");
	MakeComm	(0X74CD,	"get PARMSX address");
	MakeCode	(x=0X74D0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X74D4,	"$P_Switch");
	MakeComm	(0X74D8,	"if yes, process as switch");
	MakeComm	(0X74DA,	"$P_DQuote");
	MakeComm	(0X74DE,	"if so, process as one!");
	MakeComm	(0X74E0,	"$P_equ\nis the operand includes equal char ?");
	MakeCode	(x=0X74E0);
	OpHex		(x,	1);
	MakeComm	(0X74E6,	"if yes, process as keyword");
	MakeComm	(0X74E8,	"[es:bx+$P_PARMSX_BLK.$P_MaxP]");
	MakeComm	(0X74EC,	"ax = maxp");
	MakeComm	(0X74EE,	"too many positional ?");
	MakeComm	(0X74F3,	"if yes, set exit code to too many");
	MakeComm	(0X74F5,	"see what the current ordinal");
	MakeComm	(0X74F9,	"ax = ax*2");
	MakeCode	(x=0X74F9);
	OpHex		(x,	1);
	MakeComm	(0X74FB,	"add 2 to bx");
	MakeComm	(0X74FC,	"now bx points to 1st CONTROL");
	MakeComm	(0X74FD,	"now bx points to specified CONTROL address");
	MakeComm	(0X74FF,	"now bx points to specified CONTROL itself");
	MakeComm	(0X7502,	"Do process for positional");
	MakeComm	(0X7507,	"$P_Too_Many ; set exit code");
	MakeCode	(0X7507);
	MakeComm	(0X7510,	"[es:bx+$P_PARMSX_BLK.$P_MaxP] ; get maxp");
	MakeCode	(0X7510);
	MakeName	(0X7510,	"$P_get_max_ptr");
	MakeComm	(0X7514,	"ax = maxp");
	MakeComm	(0X7517,	"ax = (ax+1)*2");
	MakeCode	(x=0X7517);
	OpHex		(x,	1);
	MakeComm	(0X7519,	"now bx points to maxs");
	MakeCode	(0X751C);
	MakeComm	(0X7528,	"bx points to Switch CONTROL itself");
	MakeComm	(0X752F,	"\nif the CONTROL is for the switch, exit");
	MakeComm	(0X7532,	"bx points to the next CONTROL");
	MakeComm	(0X7533,	"loop");
	MakeComm	(0X7535,	"$P_Not_In_SW");
	MakeCode	(0X753E);
	MakeCode	(x=0X7546);
	OpHex		(x,	1);
	MakeComm	(0X7561,	"$P_Not_In_Key");
	MakeComm	(0X756B,	"return next ordinal");
	MakeComm	(0X7570,	"return exit code");
	MakeComm	(0X7574,	"return next operand pointer");
	MakeComm	(0X7579,	"return result buffer address");
	MakeComm	(0X757E,	"return delimiter code found");
	MakeCode	(0X7585);
	MakeName	(0X7585,	"$P_Chk_Pos_Control");
	MakeComm	(0X7586,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag]");
	MakeComm	(0X7589,	"$P_Repeat ; repeat allowed ?");
	MakeCode	(x=0X7589);
	OpHex		(x,	1);
	MakeComm	(0X758C,	"then do not increment ORDINAL");
	MakeComm	(0X758E,	"inc word [cs:$P_ORDINAL]");
	MakeComm	(0X7593,	"$P_NULL ; no data ?");
	MakeComm	(0X7599,	"$P_Optional");
	MakeCode	(x=0X7599);
	OpHex		(x,	1);
	MakeComm	(0X759C,	"optional");
	MakeComm	(0X759E,	"$P_Op_Missing ; no, then error");
	MakeComm	(0X75A7,	"if it is optional return NULL");
	MakeCode	(0X75A7);
	MakeComm	(0X75A8,	"($P_No_Tag<<8)+$P_String");
	MakeCode	(0X75B1);
	MakeCode	(0X75B6);
	MakeName	(0X75B6,	"$P_Chk_Key_Control");
	MakeCode	(0X75B8);
	MakeName	(0X75B8,	"$P_Search_KEYorSW");
	MakeComm	(0X75BA,	"[es:bx+$P_CONTROL_BLK.$P_nid]");
	MakeComm	(0X75C2,	"[es:bx+$P_CONTROL_BLK.$P_KEYorSW]");
	MakeComm	(0X75C5,	"compare string in buffer with the synonym");
	MakeComm	(0X75C8,	"If match, set it to synonym pointer");
	MakeComm	(0X75CA,	"else, bp points to the next string");
	MakeComm	(0X75D2,	"set synonym pointer");
	MakeCode	(0X75D2);
	MakeComm	(0X75DB,	"$P_NULL");
	MakeCode	(0X75DB);
	MakeName	(0X75DB,	"$P_MoveBP_NUL");
	MakeCode	(0X75E5);
	MakeComm	(0X75E7,	"$P_SW_Cmp");
	MakeCode	(x=0X75E7);
	OpHex		(x,	1);
	MakeName	(0X75E7,	"$P_Chk_SW_Control");
	MakeComm	(0X75F2,	"0FFh-$P_SW_Cmp");
	MakeCode	(x=0X75F2);
	OpHex		(x,	1);
	MakeComm	(0X760A,	"$P_NULL");
	MakeComm	(0X7610,	"$P_Colon");
	MakeComm	(0X7617,	"$P_Syntax");
	MakeCode	(0X7620);
	MakeComm	(0X7626,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional");
	MakeCode	(x=0X7626);
	OpHex		(x,	1);
	MakeComm	(0X762D,	"[cs:$P_RC],$P_Op_Missing");
	MakeCode	(0X7636);
	MakeCode	(0X763C);
	MakeCode	(0X763E);
	MakeComm	(0X763F,	"($P_No_Tag<<8)+$P_String");
	MakeCode	(0X7648);
	MakeName	(0X7648,	"$P_Fill_Result");
	MakeComm	(0X7649,	"[es:bx+$P_CONTROL_BLK.$P_Result_Buf]");
	MakeComm	(0X7652,	"[es:di+$P_RESULT_BLK.$P_Type]");
	MakeComm	(0X7655,	"[es:di+$P_RESULT_BLK.$P_Item_Tag]");
	MakeComm	(0X765E,	"[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr]");
	MakeComm	(0X7663,	"$P_Number");
	MakeComm	(0X7667,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X766B,	"[es:di+2+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X7671,	"$P_List_Idx");
	MakeCode	(0X7671);
	MakeComm	(0X7675,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X767B,	"$P_Date_F");
	MakeCode	(0X767B);
	MakeComm	(0X767F,	"$P_Time_F");
	MakeComm	(0X7683,	"$P_Drive");
	MakeComm	(0X7687,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X768D,	"$P_Complex");
	MakeCode	(0X768D);
	MakeComm	(0X7696,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X769A,	"[es:di+2+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X76A0,	"[es:di+$P_RESULT_BLK.$P_Picked_Val]");
	MakeCode	(0X76A0);
	MakeComm	(0X76A4,	"[es:di+2+$P_RESULT_BLK.$P_Picked_Val]");
	MakeComm	(0X76A9,	"[es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File");
	MakeCode	(x=0X76A9);
	OpHex		(x,	1);
	MakeComm	(0X76B0,	"$P_DOSTBL_File");
	MakeComm	(0X76B4,	"[es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char");
	MakeCode	(x=0X76B4);
	OpHex		(x,	1);
	MakeComm	(0X76BB,	"$P_DOSTBL_Char");
	MakeComm	(0X76BD,	"process CAPS along the table");
	MakeComm	(0X76C1,	"[es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon");
	MakeCode	(x=0X76C1);
	OpHex		(x,	1);
	MakeComm	(0X76CD,	"$P_NULL");
	MakeCode	(0X76CD);
	MakeName	(0X76CD,	"$P_Check_Match_Flags");
	MakeComm	(0X76D4,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag]");
	MakeComm	(0X76DF,	"$P_Syntax");
	MakeComm	(0X76E6,	"($P_No_Tag<<8)+$P_String");
	MakeComm	(0X76F2,	"$P_Date_S");
	MakeCode	(x=0X76F2);
	OpHex		(x,	1);
	MakeComm	(0X76F7,	"$P_No_Error");
	MakeComm	(0X7701,	"$P_Syntax");
	MakeComm	(0X7709,	"$P_Time_S");
	MakeCode	(x=0X7709);
	OpHex		(x,	1);
	MakeCode	(0X7722);
	MakeCode	(0X7724);
	MakeComm	(0X7725,	"$P_Num_Val");
	MakeCode	(x=0X7725);
	OpHex		(x,	1);
	MakeComm	(0X773C,	"$P_SNum_Val");
	MakeCode	(x=0X773C);
	OpHex		(x,	1);
	MakeComm	(0X7753,	"$P_Drv_Only");
	MakeCode	(x=0X7753);
	OpHex		(x,	1);
	MakeComm	(0X776D,	"$P_File_Spc");
	MakeCode	(x=0X776D);
	OpHex		(x,	1);
	MakeComm	(0X7784,	"$P_Simple_S");
	MakeCode	(x=0X7784);
	OpHex		(x,	1);
	MakeComm	(0X7789,	"$P_No_Error");
	MakeComm	(0X7793,	"$P_error_filespec");
	MakeComm	(0X779B,	"$P_No_Error");
	MakeComm	(0X77A3,	"$P_Syntax");
	MakeCode	(0X77AC);
	MakeName	(0X77AC,	"$P_Remove_Colon");
	MakeComm	(0X77B5,	"$P_Colon");
	MakeComm	(0X77B9,	"$P_NULL");
	MakeCode	(0X77C6);
	MakeCode	(0X77CF);
	MakeCode	(0X77D2);
	MakeName	(0X77D2,	"$P_Do_CAPS_String");
	MakeCode	(0X77EA);
	MakeCode	(0X77EE);
	MakeComm	(0X77F1,	"$P_ASCII80");
	MakeCode	(x=0X77F1);
	OpHex		(x,	1);
	MakeName	(0X77F1,	"$P_Do_CAPS_Char");
	MakeCode	(x=0X77F5);
	OpChr		(x,	1);
	MakeCode	(x=0X77F9);
	OpChr		(x,	1);
	MakeComm	(0X77FD,	"$P_Make_Upper");
	MakeCode	(x=0X77FD);
	OpHex		(x,	1);
	MakeCode	(0X7800);
	MakeCode	(x=0X7803);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7807,	"$P_DOSTBL_File");
	MakeCode	(x=0X780C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X781B,	"$P_DOS_Get_TBL");
	MakeCode	(x=0X781B);
	OpHex		(x,	1);
	MakeComm	(0X781D,	"-1 ; $P_DOSTBL_Def");
	MakeComm	(0X7820,	"$P_DOSTBL_BL");
	MakeComm	(0X7823,	"$P_DOSTBL_Def");
	MakeComm	(0X7825,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0X7825);
	OpHex		(x,	0);
	MakeComm	(0X7830,	"$P_ASCII80");
	MakeCode	(x=0X7830);
	OpHex		(x,	1);
	MakeCode	(0X7838);
	MakeName	(0X7838,	"$P_SValue");
	MakeComm	(0X7839,	"$P_Signed");
	MakeCode	(x=0X7839);
	OpHex		(x,	1);
	MakeComm	(0X783F,	"0FFh-$P_Neg");
	MakeCode	(x=0X783F);
	OpHex		(x,	1);
	MakeComm	(0X7848,	"$P_Plus");
	MakeCode	(x=0X7848);
	OpChr		(x,	1);
	MakeComm	(0X784C,	"$P_Plus");
	MakeCode	(x=0X784C);
	OpChr		(x,	1);
	MakeComm	(0X7850,	"$P_Neg");
	MakeCode	(x=0X7850);
	OpHex		(x,	1);
	MakeCode	(0X785C);
	MakeName	(0X785C,	"$P_Value");
	MakeCode	(x=0X7894);
	OpHex		(x,	1);
	MakeName	(0X7894,	"$P_Check_OVF_shl32");
	MakeCode	(x=0X7896);
	OpHex		(x,	1);
	MakeName	(0X7898,	"$P_Check_OVF_@");
	MakeCode	(0X789E);
	MakeName	(0X789E,	"$P_Value_Err0_@");
	MakeName	(0X78A0,	"$P_Value_Err0");
	MakeCode	(0X78A4);
	MakeName	(0X78A4,	"$P_Value00");
	MakeComm	(0X78A5,	"$P_Neg");
	MakeCode	(x=0X78A5);
	OpHex		(x,	1);
	MakeComm	(0X78B7,	"[es:bx+$P_CONTROL_BLK.$P_Value_List]");
	MakeName	(0X78B7,	"$P_Value01");
	MakeComm	(0X78BE,	"$P_nval_None");
	MakeComm	(0X78C2,	"($P_No_Tag<<8)+$P_Number");
	MakeCode	(0X78C7);
	MakeName	(0X78C8,	"$P_Value02");
	MakeComm	(0X78CC,	"$P_No_nrng");
	MakeComm	(0X78D1,	"$P_Signed");
	MakeCode	(x=0X78D1);
	OpHex		(x,	1);
	MakeName	(0X78D1,	"$P_Val02_Loop");
	MakeComm	(0X78D9,	"[es:si+$P_VAL_LIST.$P_Val_XH]");
	MakeComm	(0X78E1,	"[es:si+$P_VAL_LIST.$P_Val_XL]");
	MakeComm	(0X78E7,	"[es:si+$P_VAL_LIST.$P_Val_YH]");
	MakeName	(0X78E7,	"$P_Val_In");
	MakeComm	(0X78EF,	"[es:si+$P_VAL_LIST.$P_Val_YL]");
	MakeComm	(0X78F7,	"[es:si+$P_VAL_LIST.$P_Val_XH]");
	MakeCode	(0X78F7);
	MakeName	(0X78F7,	"$P_Val02_Sign");
	MakeComm	(0X78FF,	"[es:si+$P_VAL_LIST.$P_Val_XL]");
	MakeComm	(0X7905,	"[es:si+$P_VAL_LIST.$P_Val_YH]");
	MakeName	(0X7905,	"$P_SVal_In");
	MakeComm	(0X790D,	"[es:si+$P_VAL_LIST.$P_Val_YL]");
	MakeComm	(0X7915,	"$P_Len_Range");
	MakeCode	(0X7915);
	MakeName	(0X7915,	"$P_Val02_Next");
	MakeComm	(0X791C,	"$P_Out_Of_Range");
	MakeComm	(0X7923,	"($P_No_Tag<<8)+$P_Number");
	MakeComm	(0X7928,	"$P_Number");
	MakeCode	(0X7928);
	MakeName	(0X7928,	"$P_Val_Found");
	MakeComm	(0X792F,	"$P_Syntax");
	MakeCode	(0X792F);
	MakeName	(0X792F,	"$P_Value_Err");
	MakeComm	(0X7936,	"($P_No_Tag<<8)+$P_String");
	MakeName	(0X7939,	"$P_Value_Exit");
	MakeCode	(0X7941);
	MakeName	(0X7941,	"$P_Check_OVF");
	MakeComm	(0X7942,	"$P_Neg ; is it negative value ?");
	MakeCode	(x=0X7942);
	OpHex		(x,	1);
	MakeComm	(0X7948,	"if no, check overflow");
	MakeCode	(0X794C);
	MakeComm	(0X794F,	"CY=0 means no overflow");
	MakeRptCmt	(0X7951,	"CY=1 means overflow");
	MakeCode	(0X7951);
	MakeComm	(0X7953,	"Make ASCII 0-9 to Binary 0-9");
	MakeCode	(0X7953);
	MakeName	(0X7953,	"$P_0099");
	MakeCode	(0X795F);
	MakeCode	(0X7961);
	MakeName	(0X7961,	"$P_Simple_String");
	MakeComm	(0X7965,	"[es:bx+$P_CONTROL_BLK.$P_Value_List]");
	MakeComm	(0X7969,	"get nval");
	MakeComm	(0X7970,	"$P_No_Tag");
	MakeComm	(0X7974,	"$P_nval_String");
	MakeCode	(0X7974);
	MakeComm	(0X797C,	"$P_Len_Range");
	MakeComm	(0X797E,	"Skip nrng field");
	MakeComm	(0X7980,	"ax = (nrng*9)+1");
	MakeComm	(0X7983,	"get nnval");
	MakeComm	(0X7986,	"$P_Len_Value");
	MakeComm	(0X7988,	"Skip nnval field");
	MakeComm	(0X798A,	"ax = (nnval*5)+1");
	MakeComm	(0X798D,	"get nstrval");
	MakeComm	(0X7991,	"di points to 1st string in list");
	MakeComm	(0X799A,	"$P_Len_String");
	MakeComm	(0X799D,	"loop nstval times in AL");
	MakeComm	(0X79A1,	"$P_Not_In_Str");
	MakeComm	(0X79A8,	"$P_No_Tag");
	MakeComm	(0X79AC,	"set item_tag");
	MakeCode	(0X79AC);
	MakeComm	(0X79B0,	"$P_List_Idx");
	MakeComm	(0X79B7,	"$P_Syntax");
	MakeCode	(0X79B7);
	MakeComm	(0X79BE,	"$P_No_Tag");
	MakeComm	(0X79C0,	"$P_String");
	MakeCode	(0X79CA);
	MakeName	(0X79CA,	"$P_String_Comp");
	MakeComm	(0X79CE,	"$P_DOSTBL_Char");
	MakeCode	(x=0X79DB);
	OpHex		(x,	1);
	MakeComm	(0X79E3,	"$P_Keyword");
	MakeComm	(0X79E7,	"$P_NULL");
	MakeComm	(0X79F0,	"$P_SW_Cmp");
	MakeCode	(x=0X79F0);
	OpHex		(x,	1);
	MakeCode	(0X7A06);
	MakeCode	(0X7A14);
	MakeComm	(0X7A29,	"$P_SW");
	MakeCode	(x=0X7A29);
	OpHex		(x,	1);
	MakeComm	(0X7A31,	"[es:bx+$P_CONTROL_BLK.$P_Function_Flag],\n$P_colon_is_not_necessary");
	MakeCode	(x=0X7A31);
	OpHex		(x,	1);
	MakeComm	(0X7A39,	"$P_NULL");
	MakeComm	(0X7A40,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag],\n$P_Ig_Colon");
	MakeCode	(x=0X7A40);
	OpHex		(x,	1);
	MakeComm	(0X7A47,	"$P_Colon");
	MakeComm	(0X7A4B,	"$P_NULL");
	MakeComm	(0X7A54,	"$P_NULL");
	MakeCode	(0X7A54);
	MakeComm	(0X7A58,	"$P_Colon");
	MakeCode	(0X7A62);
	MakeCode	(0X7A6D);
	MakeName	(0X7A6D,	"$P_Date_Format");
	MakeComm	(0X7A73,	"set country dependent information before process");
	MakeComm	(0X7A8F,	"end of line ?");
	MakeComm	(0X7A91,	"yes");
	MakeComm	(0X7AA9,	"end of line ?");
	MakeComm	(0X7AAB,	"no, error");
	MakeComm	(0X7AAD,	"[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]");
	MakeComm	(0X7AB2,	"$P_Date_YMD");
	MakeComm	(0X7AD0,	"$P_Date_DMY");
	MakeComm	(0X7AD9,	"set year");
	MakeCode	(0X7AD9);
	MakeComm	(0X7AE2,	"if overflow, error");
	MakeComm	(0X7AE6,	"set month");
	MakeComm	(0X7AEC,	"if overflow, error");
	MakeComm	(0X7AF0,	"set date");
	MakeCode	(x=0X7AF2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7AF7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7AFC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7AFF);
	OpDecimal	(x,	1);
	MakeComm	(0X7B05,	"($P_No_Tag<<8)+$P_Date_F");
	MakeCode	(0X7B0D);
	MakeComm	(0X7B0F,	"($P_No_Tag<<8)+$P_String");
	MakeComm	(0X7B15,	"$P_Syntax ; indicate syntax error");
	MakeCode	(x=0X7B20);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X7B20,	"$P_Set_CDI");
	MakeComm	(0X7B24,	"-1 ; $P_NeedToBeRead");
	MakeComm	(0X7B2F,	"$P_DOS_Get_CDI");
	MakeComm	(0X7B34,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X7B34);
	OpHex		(x,	0);
	MakeComm	(0X7B3A,	"Read a character code from psdata_seg:SI\nuntil specified delimiter or NULL encountered.\nAnd make a decimal number.");
	MakeCode	(0X7B3A);
	MakeName	(0X7B3A,	"$P_Get_DecNum");
	MakeComm	(0X7B52,	"$P_Colon");
	MakeCode	(x=0X7B52);
	OpChr		(x,	1);
	MakeComm	(0X7B56,	"$P_Period");
	MakeCode	(x=0X7B56);
	OpChr		(x,	1);
	MakeComm	(0X7B5C,	"$P_Minus");
	MakeCode	(x=0X7B5C);
	OpChr		(x,	1);
	MakeComm	(0X7B60,	"$P_Slash");
	MakeCode	(x=0X7B60);
	OpChr		(x,	1);
	MakeComm	(0X7B64,	"$P_Period");
	MakeCode	(x=0X7B64);
	OpChr		(x,	1);
	MakeCode	(x=0X7B70);
	OpDecimal	(x,	1);
	MakeComm	(0X7B73,	"ax = ax * 10");
	MakeCode	(0X7B81);
	MakeCode	(0X7B86);
	MakeCode	(0X7B89);
	MakeCode	(0X7B8E);
	MakeName	(0X7B8E,	"$P_Time_Format");
	MakeComm	(0X7B97,	"[cs:si+$P_CDI.$P_CDI_TimeF],1 ; 24 hour system ?");
	MakeCode	(x=0X7B97);
	OpHex		(x,	1);
	MakeComm	(0X7B9D,	"yes");
	MakeComm	(0X7B9F,	"this routine handle \"am\" \"pm\"");
	MakeComm	(0X7BBA,	"$P_colon_period ; flag, indicates use of delimiters\nbetween hours, minutes,seconds");
	MakeComm	(0X7BD2,	"end of line ?");
	MakeComm	(0X7BD4,	"yes");
	MakeComm	(0X7BD6,	"$P_period_only ; flag, which to decimal separator");
	MakeComm	(0X7BE1,	"end of line ?");
	MakeComm	(0X7BE3,	"no");
	MakeComm	(0X7BE5,	"$P_Time_Again ; has time parse been repeated?");
	MakeCode	(x=0X7BE5);
	OpHex		(x,	1);
	MakeComm	(0X7BEB,	"yes, this is really the end of line");
	MakeComm	(0X7BED,	"get where parser quit in command line");
	MakeComm	(0X7BF2,	"$P_Comma");
	MakeCode	(x=0X7BF2);
	OpChr		(x,	1);
	MakeComm	(0X7BF8,	"$P_Period");
	MakeCode	(x=0X7BF8);
	OpChr		(x,	1);
	MakeComm	(0X7BFC,	"clear all internal flags");
	MakeComm	(0X7C03,	"$P_Time_Again ; indicate TIME");
	MakeCode	(x=0X7C03);
	OpHex		(x,	1);
	MakeComm	(0X7C09,	"original ordinal from cx");
	MakeComm	(0X7C0E,	"original value of stack from sp");
	MakeComm	(0X7C13,	"original start parse pointer from si");
	MakeComm	(0X7C18,	"go try TIME again");
	MakeCode	(0X7C1B);
	MakeComm	(0X7C24,	"After hundredth, no data allowed");
	MakeComm	(0X7C26,	"if some, then error");
	MakeComm	(0X7C2C,	"if overflow then error");
	MakeComm	(0X7C30,	"if \"am\" specified");
	MakeCode	(x=0X7C30);
	OpHex		(x,	1);
	MakeComm	(0X7C36,	"skip if no \"AM\" specified");
	MakeCode	(x=0X7C38);
	OpDecimal	(x,	1);
	MakeComm	(0X7C3A,	"error if \"AM\" on more than noon");
	MakeComm	(0X7C3E,	"for noon exactly, set hour to zero");
	MakeComm	(0X7C40,	"$P_Time12 ; if 12 hour system and \"PM\" is specified");
	MakeCode	(x=0X7C40);
	OpHex		(x,	1);
	MakeComm	(0X7C46,	"then");
	MakeComm	(0X7C48,	"if 12:00 o'clock already");
	MakeCode	(x=0X7C48);
	OpDecimal	(x,	1);
	MakeComm	(0X7C4C,	"add 12 hours to make it afternoon");
	MakeCode	(x=0X7C4C);
	OpDecimal	(x,	1);
	MakeComm	(0X7C50,	"after adding 12, now cannot be >24");
	MakeCode	(x=0X7C50);
	OpDecimal	(x,	1);
	MakeComm	(0X7C52,	"if too big, error");
	MakeComm	(0X7C54,	"set hour");
	MakeComm	(0X7C5A,	"if overflow then error");
	MakeComm	(0X7C5E,	"set minute");
	MakeComm	(0X7C68,	"set second");
	MakeComm	(0X7C72,	"set hundredth");
	MakeComm	(0X7C76,	"($P_No_Tag<<8)+$P_Time_F");
	MakeCode	(0X7C7E);
	MakeComm	(0X7C80,	"($P_No_Tag<<8)+$P_String");
	MakeComm	(0X7C86,	"$P_Syntax");
	MakeCode	(0X7C97);
	MakeName	(0X7C97,	"$P_Time_2412");
	MakeComm	(0X7CA5,	"$P_Make_Lower");
	MakeCode	(x=0X7CA5);
	OpHex		(x,	1);
	MakeComm	(0X7CA7,	"only \"p\" of \"pm\" ?");
	MakeCode	(x=0X7CA7);
	OpChr		(x,	1);
	MakeComm	(0X7CA9,	"yes");
	MakeComm	(0X7CAB,	"only \"a\" of \"am\" ?");
	MakeCode	(x=0X7CAB);
	OpChr		(x,	1);
	MakeComm	(0X7CAD,	"yes");
	MakeComm	(0X7CAF,	"\"m\" of \"am\" or \"pm\"");
	MakeCode	(x=0X7CAF);
	OpChr		(x,	1);
	MakeComm	(0X7CB8,	"$P_Make_Lower");
	MakeCode	(x=0X7CB8);
	OpHex		(x,	1);
	MakeComm	(0X7CBA,	"\"p\" of \"pm\" ?");
	MakeCode	(x=0X7CBA);
	OpChr		(x,	1);
	MakeComm	(0X7CBC,	"yes");
	MakeComm	(0X7CBE,	"\"a\" of \"am\" ?");
	MakeCode	(x=0X7CBE);
	OpChr		(x,	1);
	MakeComm	(0X7CC0,	"yes");
	MakeComm	(0X7CC4,	"$P_Time12 ; flag \"PM\" found");
	MakeCode	(x=0X7CC4);
	OpHex		(x,	1);
	MakeComm	(0X7CCC,	"$P_Time12AM ; flag \"AM\" found");
	MakeCode	(x=0X7CCC);
	OpHex		(x,	1);
	MakeComm	(0X7CD2,	"$P_NULL ; null out special char");
	MakeCode	(0X7CDA);
	MakeName	(0X7CDA,	"$P_File_Format");
	MakeComm	(0X7CDD,	"get user buffer address");
	MakeComm	(0X7CE2,	"load character");
	MakeComm	(0X7CE5,	"end of line ?");
	MakeComm	(0X7CE7,	"if yes, error exit");
	MakeComm	(0X7CE9,	"else, check if file special character");
	MakeComm	(0X7CEC,	"if yes");
	MakeComm	(0X7CEE,	"$P_error_filespec ; bad char.");
	MakeComm	(0X7CF5,	"$P_NULL");
	MakeCode	(0X7CFC);
	MakeComm	(0X7CFD,	"$P_NULL");
	MakeComm	(0X7D02,	"[es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional");
	MakeCode	(x=0X7D02);
	OpHex		(x,	1);
	MakeComm	(0X7D07,	"optional");
	MakeComm	(0X7D09,	"$P_Op_Missing");
	MakeComm	(0X7D12,	"discard save si");
	MakeCode	(0X7D12);
	MakeComm	(0X7D13,	"save new si");
	MakeComm	(0X7D14,	"load character (not special char)");
	MakeComm	(0X7D17,	"end of line ?");
	MakeComm	(0X7D19,	"yes");
	MakeComm	(0X7D1B,	"File special character ?");
	MakeComm	(0X7D20,	"no, then DBCS ?");
	MakeComm	(0X7D25,	"if yes, skip next byte");
	MakeCode	(0X7D2B);
	MakeComm	(0X7D2F,	"$P_NULL ; update end of string");
	MakeComm	(0X7D34,	"update next pointer in command line");
	MakeComm	(0X7D3C,	"$P_File_Spc");
	MakeCode	(x=0X7D3C);
	OpHex		(x,	1);
	MakeComm	(0X7D42,	"($P_No_Tag<<8)+$P_File_Spec");
	MakeCode	(0X7D4A);
	MakeName	(0X7D4A,	"$P_FileSp_Chk");
	MakeCode	(x=0X7D4C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7D50,	"$P_FileSp_Len");
	MakeCode	(0X7D5F);
	MakeName	(0X7D5F,	"$P_Drive_Format");
	MakeComm	(0X7D6D,	"$P_Colon");
	MakeCode	(x=0X7D6D);
	OpChr		(x,	1);
	MakeComm	(0X7D74,	"$P_Ig_Colon");
	MakeCode	(x=0X7D74);
	OpHex		(x,	1);
	MakeComm	(0X7D7B,	"$P_NULL");
	MakeComm	(0X7D82,	"$P_Make_Lower");
	MakeCode	(x=0X7D82);
	OpHex		(x,	1);
	MakeComm	(0X7D8C,	"\"a\"-1");
	MakeComm	(0X7D90,	"$P_No_Tag");
	MakeComm	(0X7D92,	"$P_Drive");
	MakeComm	(0X7D99,	"$P_Syntax");
	MakeCode	(0X7D99);
	MakeCode	(0X7DA3);
	MakeName	(0X7DA3,	"$P_Skip_Delim");
	MakeComm	(0X7DAE,	"$P_Extra");
	MakeCode	(x=0X7DAE);
	OpHex		(x,	1);
	MakeComm	(0X7DB6,	"$P_SW+$P_equ");
	MakeCode	(x=0X7DB6);
	OpHex		(x,	1);
	MakeComm	(0X7DC1,	"indicate EOL");
	MakeCode	(0X7DC1);
	MakeComm	(0X7DC4,	"indicate non delim");
	MakeCode	(0X7DC4);
	MakeComm	(0X7DC7,	"indicate extra delim");
	MakeCode	(0X7DC7);
	MakeCode	(0X7DC9);
	MakeName	(0X7DC9,	"$P_Chk_EOL");
	MakeComm	(0X7DCB,	"$P_CR");
	MakeComm	(0X7DCF,	"$P_NULL");
	MakeComm	(0X7DD3,	"[es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL");
	MakeComm	(0X7DDC,	"[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]");
	MakeComm	(0X7DE0,	"$P_Len_PARMS");
	MakeComm	(0X7DE3,	"$P_I_Use_Default");
	MakeComm	(0X7DF6,	"$P_CR");
	MakeCode	(0X7DFB);
	MakeName	(0X7DFB,	"$P_Chk_Delim");
	MakeComm	(0X7DFD,	"$P_Space");
	MakeComm	(0X7E03,	"0FFh-$P_Extra");
	MakeCode	(x=0X7E03);
	OpHex		(x,	1);
	MakeComm	(0X7E09,	"$P_Space");
	MakeComm	(0X7E0D,	"$P_TAB");
	MakeComm	(0X7E11,	"$P_Comma");
	MakeComm	(0X7E15,	"$P_DBSP1");
	MakeComm	(0X7E19,	"$P_DBSP2");
	MakeComm	(0X7E1E,	"$P_Space");
	MakeComm	(0X7E25,	"[es:di+$P_PARMS_BLK.$P_Num_Extra],\n$P_I_Have_Delim");
	MakeCode	(0X7E25);
	MakeComm	(0X7E2E,	"[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]");
	MakeComm	(0X7E3F,	"$P_Space");
	MakeCode	(0X7E44);
	MakeComm	(0X7E48,	"$P_equ ; if terminating a key=");
	MakeCode	(x=0X7E48);
	OpHex		(x,	1);
	MakeComm	(0X7E4E,	"then do not set the EXTRA bit");
	MakeComm	(0X7E50,	"$P_Extra\nflag terminated extra delimiter or comma");
	MakeCode	(x=0X7E50);
	OpHex		(x,	1);
	MakeComm	(0X7E5A,	"AL = character code\nBX = current pointer within $P_String_Buf\nSI = next char on command line (following the one in AL)");
	MakeCode	(x=0X7E5A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X7E5A,	"$P_Chk_Switch");
	MakeComm	(0X7E62,	"$P_Switch");
	MakeComm	(0X7E68,	"AL=char before the current char");
	MakeComm	(0X7E6C,	"return carry set if not numeric");
	MakeComm	(0X7E71,	"AL=char after the current char");
	MakeCode	(0X7E78);
	MakeComm	(0X7E7A,	"$P_Switch");
	MakeCode	(0X7E7A);
	MakeComm	(0X7E7E,	"$P_SW\ncould be valid switch, first char and is slash");
	MakeCode	(x=0X7E7E);
	OpHex		(x,	1);
	MakeComm	(0X7E86,	"AL = Code to be examined");
	MakeCode	(0X7E86);
	MakeName	(0X7E86,	"$P_Chk_DBCS");
	MakeComm	(0X7E8F,	"ALREADY SET");
	MakeCode	(x=0X7E9C);
	OpHex		(x,	1);
	MakeComm	(0X7E9F,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE");
	MakeCode	(x=0X7E9F);
	OpHex		(x,	0);
	MakeComm	(0X7ECB,	"indicate DBCS");
	MakeCode	(0X7ECE);
	MakeComm	(0X7ED2,	"indicate SBCS");
	MakeCode	(0X7ED2);
	MakeCode	(0X7ED7);
	MakeName	(0X7ED7,	"cmd_parse");
	MakeCode	(0X7EDB);
	MakeName	(0X7EDB,	"append_parse");
	MakeCode	(0X7EDF);
	MakeName	(0X7EDF,	"Printf_Init");
	MakeCode	(0X7EE3);
	MakeName	(0X7EE3,	"Printf_Crlf");
	MakeCode	(x=0X7EEA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X7EEA,	"std_eprintf");
	MakeComm	(0X7EF2,	"Print to STDOUT");
	MakeCode	(x=0X7EF2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X7EF2,	"std_printf");
	MakeName	(0X7EF8,	"new_printf");
	MakeComm	(0X7F01,	"word [print_err_flag]");
	MakeCode	(x=0X7F01);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7F16);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7F1E,	"parm_block_size");
	MakeCode	(x=0X7F1E);
	OpDecimal	(x,	1);
	MakeComm	(0X7F23,	"[bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type");
	MakeCode	(x=0X7F23);
	OpHex		(x,	1);
	MakeComm	(0X7F29,	"[bx+$M_SUBLIST_STRUC.$M_S_VALUE]");
	MakeComm	(0X7F2E,	"[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2]");
	MakeComm	(0X7F38,	"util_msg_class");
	MakeCode	(x=0X7F38);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7F3F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7F44);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7F52,	"[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2]");
	MakeComm	(0X7F58,	"[bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type");
	MakeCode	(x=0X7F58);
	OpHex		(x,	1);
	MakeComm	(0X7F61,	"parm_block_size");
	MakeCode	(x=0X7F61);
	OpDecimal	(x,	1);
	MakeComm	(0X7F69,	"\n[bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2");
	MakeCode	(x=0X7F69);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X7F70);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7F77,	"get print handle");
	MakeCode	(x=0X7F77);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7F7B,	"set up control flag");
	MakeCode	(x=0X7F7B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7F7F,	"set up display class");
	MakeCode	(x=0X7F7F);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7F83,	"no_cont_flag ; reset flags to avoid");
	MakeCode	(x=0X7F83);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7F88,	"util_msg_class");
	MakeCode	(x=0X7F88);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7F96);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7FA0,	"if an error occurred");
	MakeCode	(x=0X7FA0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7FA5,	"handle it");
	MakeCode	(0X7FA8);
	MakeComm	(0X7FAA,	"Print to STDERR?");
	MakeCode	(x=0X7FAA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X7FAF,	"no - continue");
	MakeComm	(0X7FB1,	"Yes - hopless - just exit");
	MakeCode	(x=0X7FB4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X7FB7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7FBB,	"-1");
	MakeCode	(x=0X7FBB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X7FC6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7FCB,	"ext_msg_class");
	MakeCode	(x=0X7FCB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7FD0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X7FD3,	"get msg num in control block");
	MakeCode	(x=0X7FD3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X7FDB);
	MakeName	(0X7FDB,	"TSYSLOADMSG");
	MakeCode	(0X7FE1);
	MakeName	(0X7FE1,	"TSYSGETMSG");
	MakeCode	(0X7FE7);
	MakeName	(0X7FE7,	"SYSLOADMSG");
	MakeComm	(0X7FF2,	"DOS_GET_EXT_PARSE_ADD");
	MakeComm	(0X7FF5,	"DOS_GET_EXTENDED");
	MakeComm	(0X7FF7,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)\nReturn: ES:DI -> error table");
	MakeCode	(x=0X7FF7);
	OpHex		(x,	0);
	MakeComm	(0X7FF9,	"[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2]");
	MakeCode	(x=0X7FF9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X7FFD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8004,	"DOS_GET_PARSE");
	MakeComm	(0X8006,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get parameter error table (errors 00h-0Ah)\nES:DI -> error table");
	MakeCode	(x=0X8006);
	OpHex		(x,	0);
	MakeComm	(0X8008,	"[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2]");
	MakeCode	(x=0X8008);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X800C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8013,	"DOS_GET_CRITICAL");
	MakeComm	(0X8015,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get critical/SHARE error table (errors 13h-2Bh)\nES:DI -> error table");
	MakeCode	(x=0X8015);
	OpHex		(x,	0);
	MakeComm	(0X8017,	"[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2]");
	MakeCode	(x=0X8017);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X801B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8022,	"DOS_GET_FILE");
	MakeComm	(0X8024,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get ??? error table\nES:DI -> error table");
	MakeCode	(x=0X8024);
	OpHex		(x,	0);
	MakeComm	(0X8026,	"[$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2]");
	MakeCode	(x=0X8026);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X802A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X802E,	"Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)");
	MakeComm	(0X8031,	"[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2]");
	MakeCode	(x=0X8031);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X8035);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8039,	"[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2]");
	MakeCode	(x=0X8039);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X803D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8041,	"Get addressibility to MSGSERV CLASS 2 (PARSE Errors)");
	MakeComm	(0X8044,	"[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2]");
	MakeCode	(x=0X8044);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X8048);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X804F,	"DOS_GET_ADDR");
	MakeComm	(0X8051,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get ??? error table\nReturn: ES:DI -> error table");
	MakeCode	(x=0X8051);
	OpHex		(x,	0);
	MakeComm	(0X8053,	"[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2]");
	MakeCode	(x=0X8053);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X8057);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X805B,	"[$M_RT+$M_RES_ADDRS.$M_CRLF]");
	MakeCode	(x=0X805B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8061,	"[$M_RT+$M_RES_ADDRS.$M_BUF_TERM]");
	MakeCode	(x=0X8061);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8066,	"[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],$M_NULL");
	MakeCode	(x=0X8066);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X806C,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10");
	MakeCode	(x=0X806C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X8072,	"Get addressibility to class F ; Build all utility classes");
	MakeComm	(0X8075,	"[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]");
	MakeCode	(x=0X8075);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X8085);
	OpDecimal	(x,	1);
	MakeCode	(0X808A);
	MakeName	(0X808A,	"$M_GET_DBCS_VEC");
	MakeComm	(0X808D,	"DOS_GET_DBCS_INFO");
	MakeCode	(x=0X808D);
	OpHex		(x,	1);
	MakeComm	(0X8090,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE");
	MakeCode	(x=0X8090);
	OpHex		(x,	0);
	MakeComm	(0X8097,	"[$M_RT+60]");
	MakeCode	(x=0X8097);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X809B,	"[$M_RT+62]");
	MakeCode	(x=0X809B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X80A2);
	MakeName	(0X80A2,	"SYSGETMSG");
	MakeComm	(0X80AB,	"utility_msg_class");
	MakeCode	(0X80B5);
	MakeCode	(0X80BE);
	MakeName	(0X80BE,	"$M_GET_MSG_ADDRESS");
	MakeComm	(0X80C4,	"utility_msg_class");
	MakeComm	(0X80C9,	"\n[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]");
	MakeCode	(x=0X80C9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X80D1,	"parse_err_class");
	MakeCode	(x=0X80D1);
	OpHex		(x,	1);
	MakeComm	(0X80D6,	"\n[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]");
	MakeCode	(x=0X80D6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X80DE,	"$M_CRIT_LO");
	MakeCode	(x=0X80DE);
	OpDecimal	(x,	1);
	MakeComm	(0X80E3,	"$M_CRIT_HI");
	MakeCode	(x=0X80E3);
	OpDecimal	(x,	1);
	MakeComm	(0X80E8,	"\n[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]");
	MakeCode	(x=0X80E8);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X80F0,	"\n[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]");
	MakeCode	(x=0X80F0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X80F6,	"-1 ; $M_TERMINATING_FLAG");
	MakeComm	(0X80FB,	"utility_msg_class");
	MakeComm	(0X8103,	"[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]");
	MakeCode	(0X8103);
	MakeComm	(0X8106,	"$M_SPECIAL_MSG_NUM");
	MakeComm	(0X8109,	"$M_ONE_REPLACE");
	MakeComm	(0X8111,	"$M_CLASS_NOT_EXIST");
	MakeCode	(0X8111);
	MakeComm	(0X8119,	"$M_ADDR_SZ_FAR");
	MakeCode	(0X8125);
	MakeComm	(0X8126,	"EXT_ERR_CLASS");
	MakeComm	(0X8131,	"IFSFUNC_INSTALL_CHECK");
	MakeComm	(0X8134,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, can't install\nFFh installed");
	MakeCode	(x=0X8134);
	OpHex		(x,	0);
	MakeComm	(0X8136,	"IFSFUNC_INSTALLED");
	MakeComm	(0X813C,	"IFS_GET_ERR_TEXT");
	MakeComm	(0X813F,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - ");
	MakeCode	(x=0X813F);
	OpHex		(x,	0);
	MakeCode	(0X8143);
	MakeCode	(x=0X814B);
	OpHex		(x,	1);
	MakeCode	(0X8155);
	MakeName	(0X8155,	"m_popf_iret");
	MakeCode	(0X8156);
	MakeCode	(0X815D);
	MakeName	(0X815D,	"$M_SET_LEN_IN_CX");
	MakeCode	(0X816C);
	MakeName	(0X816C,	"$M_FIND_SPECIFIED_MSG");
	MakeComm	(0X8171,	"\n[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1");
	MakeComm	(0X8178,	"-1");
	MakeComm	(0X817E,	"[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]");
	MakeComm	(0X8181,	"\ncall far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]");
	MakeComm	(0X8188,	"\ncall far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]");
	MakeCode	(0X8188);
	MakeCode	(0X818E);
	MakeComm	(0X8190,	"utility_msg_class ; -1");
	MakeComm	(0X8195,	"[es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]");
	MakeComm	(0X819B,	"[cs:di+$M_CLASS_ID.$M_CLS_ID]");
	MakeCode	(0X819B);
	MakeComm	(0X81A0,	"[cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]");
	MakeComm	(0X81A4,	"$M_CLASS_ID_SZ");
	MakeComm	(0X81AF,	"utility_msg_class");
	MakeComm	(0X81B4,	"[es:di+$M_ID.$M_NUM]");
	MakeComm	(0X81B9,	"[cs:di+$M_ID.$M_NUM]");
	MakeCode	(0X81B9);
	MakeCode	(0X81C0);
	MakeComm	(0X81C3,	"$M_ID_SZ");
	MakeCode	(0X81C8);
	MakeComm	(0X81CB,	"utility_msg_class");
	MakeComm	(0X81D3,	"[es:di+$M_ID.$M_TXT_PTR]");
	MakeComm	(0X81DF,	"[$M_RT+$M_RES_ADDRS.$M_SIZE]");
	MakeCode	(0X81E5);
	MakeName	(0X81E5,	"SYSDISPMSG");
	MakeComm	(0X81EE,	"[$M_RT+$M_RES_ADDRS.$M_HANDLE]");
	MakeComm	(0X81F2,	"[$M_RT+$M_RES_ADDRS.$M_CLASS]");
	MakeCode	(0X8206);
	MakeCode	(x=0X821A);
	OpHex		(x,	1);
	MakeCode	(0X8220);
	MakeCode	(x=0X8229);
	OpHex		(x,	1);
	MakeCode	(x=0X822E);
	OpHex		(x,	1);
	MakeCode	(0X8233);
	MakeName	(0X8233,	"$M_DISPLAY_STRING");
	MakeComm	(0X8236,	"[$M_RT+$M_RES_ADDRS.$M_HANDLE]");
	MakeComm	(0X823A,	"$M_NO_HANDLE");
	MakeCode	(0X8244);
	MakeComm	(0X8249,	"DOS_GET_EXT_ERROR");
	MakeCode	(x=0X8249);
	OpHex		(x,	1);
	MakeComm	(0X824E,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X824E);
	OpHex		(x,	0);
	MakeCode	(x=0X8252);
	OpHex		(x,	1);
	MakeComm	(0X8258,	"$M_NO_HANDLE");
	MakeCode	(0X8258);
	MakeCode	(x=0X8264);
	OpHex		(x,	1);
	MakeCode	(0X826E);
	MakeName	(0X826E,	"$M_DISPLAY_$_STRING");
	MakeComm	(0X8271,	"$M_SINGLE_CHAR");
	MakeComm	(0X8276,	"DOS_DISP_CHAR");
	MakeComm	(0X827B,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X827B);
	OpHex		(x,	0);
	MakeComm	(0X828C,	"DOS - ");
	MakeCode	(x=0X828C);
	OpHex		(x,	0);
	MakeComm	(0X8291,	"DOS_DISP_CHAR");
	MakeCode	(0X8291);
	MakeComm	(0X829A,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X829A);
	OpHex		(x,	0);
	MakeCode	(0X82A2);
	MakeName	(0X82A2,	"scan_ctrlz");
	MakeComm	(0X82AC,	"Ctrl-Z");
	MakeCode	(0X82BD);
	MakeName	(0X82BD,	"$M_DISPLAY_H_STRING");
	MakeComm	(0X82C6,	"DOS_WRITE_HANDLE");
	MakeCode	(x=0X82C6);
	OpHex		(x,	1);
	MakeComm	(0X82CA,	"$M_SINGLE_CHAR");
	MakeComm	(0X82CF,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X82CF);
	OpHex		(x,	0);
	MakeCode	(x=0X82E0);
	OpHex		(x,	1);
	MakeComm	(0X82E3,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X82E3);
	OpHex		(x,	0);
	MakeComm	(0X82E6,	"is char a Ctrl-Z?");
	MakeComm	(0X82EA,	"no, continue");
	MakeCode	(0X82F0);
	MakeName	(0X82F0,	"intret");
	MakeCode	(0X82F1);
	MakeCode	(0X82F7);
	MakeName	(0X82F7,	"$MIF128");
	MakeComm	(0X82FF,	"DOS - ");
	MakeCode	(x=0X82FF);
	OpHex		(x,	0);
	MakeName	(0X830E,	"m_cnt_ok");
	MakeName	(0X830F,	"$MEN128");
	MakeName	(0X8310,	"$MIF127");
	MakeComm	(0X8311,	"EXT_ERR_39");
	MakeCode	(x=0X8311);
	OpHex		(x,	1);
	MakeName	(0X8311,	"$M_GET_EXT_ERR_39");
	MakeComm	(0X831A,	"utility_msg_class");
	MakeCode	(0X831A);
	MakeName	(0X831A,	"$M_ADD_CRLF");
	MakeComm	(0X831F,	"$M_NO_CRLF_MASK");
	MakeCode	(x=0X831F);
	OpHex		(x,	1);
	MakeComm	(0X8326,	"[$M_RT+$M_RES_ADDRS.$M_CRLF]");
	MakeCode	(x=0X8326);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X832A,	"$M_CRLF_SIZE");
	MakeCode	(0X8331);
	MakeName	(0X8331,	"$M_IS_IT_DBCS");
	MakeComm	(0X8333,	"\n[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]");
	MakeCode	(x=0X8333);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X833B,	"$M_DBCS_TERM");
	MakeCode	(0X8352);
	MakeComm	(0X8355,	"[$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]\nSave Return Address");
	MakeCode	(x=0X8355);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X8355,	"$M_CONVERT2ASC");
	MakeComm	(0X835D,	"word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]");
	MakeCode	(x=0X835D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8362);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X836B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8370);
	OpChr		(x,	1);
	MakeComm	(0X837D,	"$M_FIRST_THOU");
	MakeComm	(0X8382,	"\n[si+$M_SUBLIST_STRUC.$M_S_PAD],','");
	MakeComm	(0X8388,	"[$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]");
	MakeCode	(x=0X8388);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X838F,	"$M_SECOND_THOU");
	MakeCode	(0X838F);
	MakeComm	(0X8394,	"[si+$M_SUBLIST_STRUC.$M_S_PAD],','");
	MakeComm	(0X839A,	"[$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]");
	MakeCode	(x=0X839A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X83A1,	"$M_THIRD_THOU");
	MakeCode	(x=0X83A1);
	OpDecimal	(x,	1);
	MakeComm	(0X83A6,	"\n[si+$M_SUBLIST_STRUC.$M_S_PAD],','");
	MakeComm	(0X83AC,	"[$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]");
	MakeCode	(x=0X83AC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X83B6);
	MakeComm	(0X83B9,	"[$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]\nRestore Return Address");
	MakeCode	(x=0X83B9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X83BE);
	MakeName	(0X83BE,	"$M_DISPLAY_MESSAGE");
	MakeComm	(0X83C4,	"mov ah,\"%\" ; mov al,0");
	MakeCode	(x=0X83C4);
	OpHex		(x,	1);
	MakeComm	(0X83EB,	"[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],$M_NULL");
	MakeCode	(x=0X83EB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X83F2,	"[si+$M_SUBLIST_STRUC.$M_S_ID]");
	MakeComm	(0X83FF,	"$M_SPECIAL_CASE");
	MakeCode	(0X83FF);
	MakeComm	(0X840B,	"[$M_RT+$M_RES_ADDRS.$M_CLASS],\nutility_msg_class");
	MakeCode	(x=0X840B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X841A,	"-1");
	MakeCode	(0X841A);
	MakeCode	(0X842A);
	MakeComm	(0X842D,	"[si+$M_SUBLIST_STRUC.$M_S_ID],\n$M_SPECIAL_CASE-30h");
	MakeCode	(0X843D);
	MakeCode	(0X8440);
	MakeComm	(0X8447,	"-1");
	MakeCode	(0X8447);
	MakeComm	(0X8458,	"[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],$M_NULL");
	MakeCode	(x=0X8458);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X845F,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG]");
	MakeCode	(x=0X845F);
	OpHex		(x,	1);
	MakeComm	(0X8465,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE]");
	MakeComm	(0X846D,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG]\nnot Sgn_Bin_Type and $M_TYPE_MASK");
	MakeCode	(x=0X846D);
	OpHex		(x,	1);
	MakeComm	(0X8473,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nNOT Unsgn_Bin_Type AND $M_TYPE_MASK");
	MakeCode	(x=0X8473);
	OpHex		(x,	1);
	MakeComm	(0X8479,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Bin_Hex_Type and $M_TYPE_MASK");
	MakeCode	(x=0X8479);
	OpHex		(x,	1);
	MakeComm	(0X847F,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE]");
	MakeComm	(0X8487,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Date_Type and $M_TYPE_MASK");
	MakeCode	(x=0X8487);
	OpHex		(x,	1);
	MakeCode	(0X8492);
	MakeCode	(0X849A);
	MakeCode	(x=0X84A6);
	OpDecimal	(x,	1);
	MakeComm	(0X84AC,	"[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],$M_NULL");
	MakeCode	(x=0X84AC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X84B8,	"[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]");
	MakeCode	(x=0X84B8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X84BF);
	MakeName	(0X84BF,	"$M_EXT_PAR_REPLACE");
	MakeComm	(0X84C1,	"[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]");
	MakeCode	(x=0X84C1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X84C4,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10");
	MakeCode	(x=0X84C4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X84CE,	"\n[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X84CE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X84D3,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X84D3);
	OpDecimal	(x,	1);
	MakeComm	(0X84DF,	"$M_CR_LF");
	MakeComm	(0X84E2,	"\n[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X84E2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X84EC);
	MakeName	(0X84EC,	"$M_DISPLAY_REPLACE");
	MakeComm	(0X84EE,	"[si+$M_SUBLIST_STRUC.$M_S_ID]");
	MakeComm	(0X84F4,	"\n[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],$M_SPACE_HYP");
	MakeCode	(x=0X84F4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X84FC,	"\n[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],$M_SPACE");
	MakeCode	(x=0X84FC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X850A,	"[$M_RT+$M_RES_ADDRS.$M_SIZE]");
	MakeCode	(x=0X850A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X850E,	"[si+$M_SUBLIST_STRUC.$M_S_MINW]");
	MakeComm	(0X8519,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG]");
	MakeCode	(x=0X8519);
	OpHex		(x,	1);
	MakeComm	(0X851F,	"[si+$M_SUBLIST_STRUC.$M_S_PAD]");
	MakeComm	(0X8522,	"\n[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X8522);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8527,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X8527);
	OpDecimal	(x,	1);
	MakeComm	(0X8533,	"[si+$M_SUBLIST_STRUC.$M_S_MAXW],$M_UNLIM_W");
	MakeComm	(0X8539,	"[si+$M_SUBLIST_STRUC.$M_S_MAXW]");
	MakeComm	(0X854A,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Char_Type not $M_TYPE_MASK");
	MakeCode	(x=0X854A);
	OpHex		(x,	1);
	MakeComm	(0X8550,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nChar_field_ASCIIZ and $M_SIZE_MASK");
	MakeCode	(x=0X8550);
	OpHex		(x,	1);
	MakeCode	(0X855C);
	MakeComm	(0X855D,	"\n[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X855D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8562,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X8562);
	OpDecimal	(x,	1);
	MakeComm	(0X856E,	"\n[si+$M_SUBLIST_STRUC.$M_S_FLAG],Right_Align");
	MakeCode	(x=0X856E);
	OpHex		(x,	1);
	MakeComm	(0X8578,	"[si+$M_SUBLIST_STRUC.$M_S_PAD]");
	MakeComm	(0X857B,	"\n[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X857B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8580,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X8580);
	OpDecimal	(x,	1);
	MakeComm	(0X858C,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Char_Type and $M_TYPE_MASK");
	MakeCode	(x=0X858C);
	OpHex		(x,	1);
	MakeComm	(0X8592,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nChar_field_ASCIIZ and $M_SIZE_MASK");
	MakeCode	(x=0X8592);
	OpHex		(x,	1);
	MakeCode	(0X859A);
	MakeComm	(0X859E,	"\n[$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]");
	MakeCode	(x=0X859E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X85AB);
	MakeName	(0X85AB,	"$M_FLUSH_BUF");
	MakeComm	(0X85B4,	"[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X85B4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X85C1);
	OpHex		(x,	1);
	MakeCode	(0X85C6);
	MakeName	(0X85C6,	"$M_CHAR_REPLACE");
	MakeComm	(0X85C7,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Char_Field_Char and $M_SIZE_MASK");
	MakeCode	(x=0X85C7);
	OpHex		(x,	1);
	MakeCode	(0X85DF);
	MakeCode	(0X85EA);
	MakeCode	(0X85EE);
	MakeName	(0X85EE,	"$M_BIN2ASC_REPLACE");
	MakeComm	(0X85F2,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],\n$M_BASE16");
	MakeCode	(x=0X85F2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X85FA,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot $M_BYTE and $M_SIZE_MASK");
	MakeCode	(x=0X85FA);
	OpHex		(x,	1);
	MakeComm	(0X8603,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Sgn_Bin_Type and $M_TYPE_MASK");
	MakeCode	(x=0X8603);
	OpHex		(x,	1);
	MakeComm	(0X8609,	"Is this number negative?");
	MakeCode	(x=0X8609);
	OpHex		(x,	1);
	MakeComm	(0X860B,	"No");
	MakeComm	(0X860E,	"Make it positive");
	MakeCode	(x=0X860E);
	OpHex		(x,	1);
	MakeComm	(0X8610,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],\n$M_BASE10");
	MakeCode	(x=0X8610);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X8616,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Unsgn_Bin_Type and $M_TYPE_MASK");
	MakeCode	(x=0X8616);
	OpHex		(x,	1);
	MakeComm	(0X861C,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],\n$M_BASE10");
	MakeCode	(x=0X861C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X8624,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot $M_WORD and $M_SIZE_MASK");
	MakeCode	(x=0X8624);
	OpHex		(x,	1);
	MakeComm	(0X862D,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Sgn_Bin_Type and $M_TYPE_MASK");
	MakeCode	(x=0X862D);
	OpHex		(x,	1);
	MakeComm	(0X8633,	"Is this number negative?");
	MakeCode	(x=0X8633);
	OpHex		(x,	1);
	MakeComm	(0X8636,	"No");
	MakeComm	(0X8639,	"Make it positive");
	MakeCode	(x=0X8639);
	OpHex		(x,	1);
	MakeComm	(0X863C,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10");
	MakeCode	(x=0X863C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X8642,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Unsgn_Bin_Type and $M_TYPE_MASK");
	MakeCode	(x=0X8642);
	OpHex		(x,	1);
	MakeComm	(0X8648,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10");
	MakeCode	(x=0X8648);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeCode	(0X8650);
	MakeComm	(0X8657,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Sgn_Bin_Type and $M_TYPE_MASK");
	MakeCode	(x=0X8657);
	OpHex		(x,	1);
	MakeComm	(0X865D,	"Is this number negative?");
	MakeCode	(x=0X865D);
	OpHex		(x,	1);
	MakeComm	(0X8660,	"No");
	MakeComm	(0X8663,	"Make it positive");
	MakeCode	(x=0X8663);
	OpHex		(x,	1);
	MakeComm	(0X8666,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10");
	MakeCode	(x=0X8666);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X866C,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nnot Unsgn_Bin_Type and $M_TYPE_MASK");
	MakeCode	(x=0X866C);
	OpHex		(x,	1);
	MakeComm	(0X8672,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10");
	MakeCode	(x=0X8672);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X8678,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG]\n(Custom/International flag for thousand separator)");
	MakeCode	(x=0X8678);
	OpHex		(x,	1);
	MakeCode	(x=0X8680);
	OpHex		(x,	1);
	MakeComm	(0X8684,	"lea dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X8684);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8688,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X8688);
	OpHex		(x,	0);
	MakeComm	(0X868C,	"\n[$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA],','");
	MakeCode	(x=0X868C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8691,	"[si+$M_SUBLIST_STRUC.$M_S_PAD]");
	MakeComm	(0X8698,	"[si+$M_SUBLIST_STRUC.$M_S_PAD],','");
	MakeComm	(0X86A1,	"[si+$M_SUBLIST_STRUC.$M_S_PAD],al");
	MakeCode	(0X86A6);
	MakeComm	(0X86AD,	"$M_NEG_SIGN");
	MakeCode	(x=0X86AD);
	OpChr		(x,	1);
	MakeCode	(0X86B3);
	MakeName	(0X86B3,	"$M_DATE_REPLACE");
	MakeCode	(x=0X86B4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X86C0,	"[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]");
	MakeCode	(x=0X86C0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X86CD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X86DA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X86DF,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]");
	MakeComm	(0X86E5,	"[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]");
	MakeCode	(x=0X86E5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X86F2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(x=0X86FF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8704,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]");
	MakeComm	(0X870A,	"[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]");
	MakeCode	(x=0X870A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8711,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]");
	MakeCode	(x=0X8717);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X871C,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]");
	MakeComm	(0X8722,	"\n[$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]");
	MakeCode	(x=0X8722);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X872F,	"DOS_GET_COUNTRY*256");
	MakeCode	(0X872F);
	MakeName	(0X872F,	"$M_GET_DATE");
	MakeComm	(0X8732,	"[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X8732);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8736,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X8736);
	OpHex		(x,	0);
	MakeComm	(0X873A,	"[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0");
	MakeCode	(x=0X873A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8740,	"\n[$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-'");
	MakeCode	(x=0X8740);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8746,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE]");
	MakeCode	(0X8746);
	MakeName	(0X8746,	"$M_YEAR");
	MakeComm	(0X8749,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nDate_MDY_4 and $M_DATE_MASK");
	MakeCode	(x=0X8749);
	OpHex		(x,	1);
	MakeComm	(0X874D,	"not 2 digits year");
	MakeCode	(x=0X874F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8754);
	OpDecimal	(x,	1);
	MakeComm	(0X8758,	"[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]\nSave return address");
	MakeCode	(x=0X8758);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X8758,	"$M_CONVERTDATE");
	MakeCode	(x=0X875C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8764,	"[$M_RT+$M_RES_ADDRS.$M_SIZE]");
	MakeCode	(x=0X8764);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X876A,	"$M_TIMEDATE_PAD");
	MakeComm	(0X876D,	"Save pad character");
	MakeComm	(0X876E,	"Count it");
	MakeComm	(0X8770,	"[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]\nRestore return address");
	MakeCode	(x=0X8770);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X8775);
	MakeName	(0X8775,	"$M_TIME_REPLACE");
	MakeComm	(0X8776,	"[$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10");
	MakeCode	(x=0X8776);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeComm	(0X877F,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nTime_Cty_Type and $M_TIME_MASK");
	MakeCode	(x=0X877F);
	OpHex		(x,	1);
	MakeComm	(0X8785,	"byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT]");
	MakeCode	(x=0X8785);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X878A,	"24 hours time format");
	MakeComm	(0X878C,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE]");
	MakeCode	(x=0X878F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8793);
	OpDecimal	(x,	1);
	MakeComm	(0X8797,	"$M_AM");
	MakeCode	(x=0X8797);
	OpChr		(x,	1);
	MakeComm	(0X879D,	"$M_PM");
	MakeCode	(x=0X879D);
	OpChr		(x,	1);
	MakeComm	(0X87A3,	"dx = 0");
	MakeComm	(0X87A4,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nTime_HHMMSSHH_Cty and $M_SIZE_MASK");
	MakeCode	(x=0X87A4);
	OpHex		(x,	1);
	MakeComm	(0X87AA,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]");
	MakeComm	(0X87B0,	"[$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]");
	MakeCode	(x=0X87B0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X87B5,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nTime_HHMMSSHH_Cty and $M_SIZE_MASK");
	MakeCode	(x=0X87B5);
	OpHex		(x,	1);
	MakeComm	(0X87BB,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nTime_HHMMSS_Cty AND $M_SIZE_MASK");
	MakeCode	(x=0X87BB);
	OpHex		(x,	1);
	MakeComm	(0X87C1,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]");
	MakeComm	(0X87C7,	"[$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]");
	MakeCode	(x=0X87C7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X87CC,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE+1]");
	MakeComm	(0X87D2,	"[$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]");
	MakeCode	(x=0X87D2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X87D7,	"[si+$M_SUBLIST_STRUC.$M_S_VALUE]");
	MakeComm	(0X87DA,	"[si+$M_SUBLIST_STRUC.$M_S_FLAG],\nTime_Cty_Type and $M_TIME_MASK");
	MakeCode	(x=0X87DA);
	OpHex		(x,	1);
	MakeComm	(0X87E0,	"[$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT]");
	MakeCode	(x=0X87E0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X87E7,	"Is hour less than 12?");
	MakeCode	(x=0X87E7);
	OpDecimal	(x,	1);
	MakeComm	(0X87E9,	"no");
	MakeComm	(0X87EB,	"Set to a 12 hour value");
	MakeCode	(x=0X87EB);
	OpDecimal	(x,	1);
	MakeComm	(0X87F1,	"Set to a 12 hour value");
	MakeCode	(x=0X87F1);
	OpDecimal	(x,	1);
	MakeComm	(0X87F8,	"DOS_GET_COUNTRY*256");
	MakeCode	(0X87F8);
	MakeName	(0X87F8,	"$M_GET_TIME");
	MakeComm	(0X87FB,	"lea dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]");
	MakeCode	(x=0X87FB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X87FF,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X87FF);
	OpHex		(x,	0);
	MakeComm	(0X8803,	"[$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],\n$M_DEF_TIME_FORM");
	MakeCode	(x=0X8803);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8809,	"\n[$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],\n$M_DEF_TIME_SEP");
	MakeCode	(x=0X8809);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X880E,	"\n[$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],\n$M_DEF_DECI_SEP");
	MakeCode	(x=0X880E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8814,	"[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]\nSave return address");
	MakeCode	(x=0X8814);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X8814,	"$M_CONVERTTIME");
	MakeCode	(x=0X8818);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8820,	"[$M_RT+$M_RES_ADDRS.$M_SIZE]");
	MakeCode	(x=0X8820);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8829,	"Save pas character");
	MakeComm	(0X882C,	"[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]\nRestore return address");
	MakeCode	(x=0X882C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeCode	(0X8831);
	MakeName	(0X8831,	"$M_WAIT_FOR_INPUT");
	MakeComm	(0X8834,	"DOS_CLR_KEYB_BUF_MASK");
	MakeCode	(x=0X8834);
	OpHex		(x,	1);
	MakeComm	(0X883B,	"LOW_NIB_MASK");
	MakeCode	(x=0X883B);
	OpHex		(x,	1);
	MakeComm	(0X883D,	"DOS_CLR_KEYB_BUF");
	MakeCode	(0X8841);
	MakeComm	(0X8847,	"DOS - ");
	MakeCode	(x=0X8847);
	OpHex		(x,	0);
	MakeComm	(0X884A,	"DOS_BUF_KEYB_INP");
	MakeComm	(0X8850,	"Is this character DBCS?");
	MakeComm	(0X8853,	"no");
	MakeComm	(0X8859,	"DOS - ");
	MakeCode	(x=0X8859);
	OpHex		(x,	0);
	MakeComm	(0X885B,	"Retrieve first character  AX = xxxx");
	MakeComm	(0X8860,	"AX = 00xx where xx is SBCS");
	MakeCode	(0X8860);
	MakeCode	(x=0X8867);
	OpHex		(x,	1);
	MakeComm	(0X886C,	"initializes all the variables used in ParseVar\nand HideUMBs");
	MakeCode	(0X886C);
	MakeName	(0X886C,	"InitVar");
	MakeCode	(x=0X8870);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8876);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X887A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X887E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8882);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8888);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X888D);
	OpDecimal	(x,	1);
	MakeComm	(0X8890,	"UmbUsed");
	MakeCode	(x=0X8890);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X8895,	"MAXUMB");
	MakeCode	(x=0X8895);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8898);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X88A2,	"scans the upper memory chain \nand concatenates adjacent free MCBs");
	MakeCode	(0X88A2);
	MakeName	(0X88A2,	"FixMem");
	MakeComm	(0X88B6,	"[es:arena_signature]");
	MakeComm	(0X88BA,	"[es:arena_owner]");
	MakeComm	(0X88BF,	"dx was owner of previous MCB");
	MakeComm	(0X88C1,	"If not both zero, don't cat.");
	MakeComm	(0X88C3,	"[es:arena_size]");
	MakeComm	(0X88C8,	"Go back to prev MCB's address");
	MakeComm	(0X88CA,	"& move the SECOND sig here");
	MakeComm	(0X88CE,	"Size += first MCB's size");
	MakeComm	(0X88D3,	"And add one for the header");
	MakeComm	(0X88D6,	"Write the size");
	MakeComm	(0X88EC,	"arena_signature_end");
	MakeComm	(0X88F9,	"links UMBs not already linked in");
	MakeCode	(x=0X88F9);
	OpHex		(x,	1);
	MakeName	(0X88F9,	"fm_link");
	MakeComm	(0X88FC,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) get UMB link state");
	MakeCode	(x=0X88FC);
	OpHex		(x,	0);
	MakeCode	(x=0X88FF);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8903);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X890E,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X890E);
	OpHex		(x,	0);
	MakeComm	(0X8911,	"unlinks UMBs if fm_umb is set to 0");
	MakeCode	(0X8911);
	MakeName	(0X8911,	"fm_unlink");
	MakeCode	(x=0X8914);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8918);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X891D);
	OpHex		(x,	1);
	MakeComm	(0X8920,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X8920);
	OpHex		(x,	0);
	MakeCode	(0X8923);
	MakeName	(0X8923,	"ParseVar");
	MakeComm	(0X892D,	"ES:SI==\" /L...\"--keep eating.");
	MakeCode	(x=0X892F);
	OpChr		(x,	1);
	MakeComm	(0X8931,	"ES:SI==\"/L...\"--go process a switch");
	MakeCode	(0X8937);
	MakeComm	(0X8938,	"make it uppercase");
	MakeCode	(x=0X8938);
	OpHex		(x,	1);
	MakeCode	(x=0X893A);
	OpChr		(x,	1);
	MakeComm	(0X893E,	"If it's /S, it's another arg for LH to skip.");
	MakeCode	(x=0X8942);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8946,	"/S, so ES:SI==\"  /L...\" or \" module opts\", or");
	MakeCode	(x=0X8946);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X894F,	"If it's not 'L' either, then it's a bad switch!");
	MakeCode	(x=0X894F);
	OpChr		(x,	1);
	MakeComm	(0X8959,	"If no carry, go back and look for more");
	MakeComm	(0X895C,	"AX has already been set by parseL");
	MakeComm	(0X895E,	"PV_InvSwt");
	MakeCode	(0X895E);
	MakeComm	(0X8968,	"parses \":nnnn[,nnnn][;nnnn[,nnnn]]*\" for ParseVar");
	MakeCode	(0X8968);
	MakeName	(0X8968,	"parseL");
	MakeCode	(x=0X8969);
	OpChr		(x,	1);
	MakeComm	(0X896D,	"After this, 'tis \",size\" or \";umb\" or \" mod\"");
	MakeComm	(0X8972,	"Convert any address to a UMB number");
	MakeComm	(0X8977,	"Mark this UMB # as used");
	MakeComm	(0X897C,	"Each UMB number is another arg for LH to skip");
	MakeComm	(0X8980,	"Did \"umb;\" ?");
	MakeCode	(x=0X8980);
	OpChr		(x,	1);
	MakeComm	(0X8982,	"Yep: go back and get another UMB.");
	MakeComm	(0X8984,	"Did \"umb \" ?");
	MakeComm	(0X8987,	"Yep: return (it'll go back to whitespace)");
	MakeComm	(0X8989,	"Did \"umb\" ?");
	MakeComm	(0X898C,	"If so, backup and exit like everything's ok");
	MakeComm	(0X898E,	"Did \"umb/\" ? (as in, \"/L:1,100;2/S\")");
	MakeCode	(x=0X898E);
	OpChr		(x,	1);
	MakeComm	(0X8990,	"If so, back up ES:SI one character and return");
	MakeComm	(0X8992,	" Did \"umb,\" ?");
	MakeCode	(x=0X8992);
	OpChr		(x,	1);
	MakeComm	(0X8994,	"Just what the heck DID they do? Return error.");
	MakeComm	(0X8996,	"Stop on \"size;\" or \"size \" or anything else");
	MakeComm	(0X8999,	"And error if it's a bad size.");
	MakeComm	(0X899B,	"Convert from bytes to paragraphs");
	MakeComm	(0X899E,	"CL still has the UMB number for this routine");
	MakeComm	(0X89A1,	"Each UMB size is another arg for LH to skip");
	MakeComm	(0X89A5,	"They did \"umb,size;\", so get another UMB.");
	MakeCode	(x=0X89A5);
	OpChr		(x,	1);
	MakeComm	(0X89A9,	"Did it end with whitespace?");
	MakeComm	(0X89AC,	"If so, we're done here--go back.");
	MakeComm	(0X89AE,	"Did they do \"umb,size\" and end??? (stupid)");
	MakeComm	(0X89B1,	"If so, backup and exit like everything's ok");
	MakeComm	(0X89B3,	"Did they do \"umb,size/\" ?");
	MakeCode	(x=0X89B3);
	OpChr		(x,	1);
	MakeComm	(0X89B5,	"If so, again, we're done here.");
	MakeComm	(0X89B7,	"PV_InvArg");
	MakeComm	(0X89BD,	"PV_BadUMB");
	MakeCode	(0X89BD);
	MakeCode	(0X89C2);
	MakeCode	(0X89C5);
	MakeName	(0X89C5,	"incArgc");
	MakeCode	(x=0X89C7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X89CB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X89D2);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X89D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X89DD);
	MakeName	(0X89DD,	"isEOL");
	MakeComm	(0X89E1,	"CR");
	MakeComm	(0X89E5,	"LF");
	MakeCode	(0X89E8);
	MakeName	(0X89E8,	"isWhite");
	MakeComm	(0X89F0,	"TAB");
	MakeCode	(0X89F3);
	MakeName	(0X89F3,	"unMarkUMB");
	MakeCode	(x=0X89F7);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X89FF,	"[es:bx+UmbUsed] = [es:bx+MsgBuffer]");
	MakeCode	(x=0X89FF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8A05);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8A0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X8A17,	"MAXUMB");
	MakeCode	(x=0X8A17);
	OpDecimal	(x,	1);
	MakeName	(0X8A17,	"stowUMB");
	MakeCode	(0X8A1D);
	MakeCode	(x=0X8A22);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8A26);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8A2A,	"UNSPECIFIED");
	MakeCode	(x=0X8A2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8A31);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X8A3F,	"[es:bx+UmbUsed] = [es:bx+MsgBuffer]");
	MakeCode	(x=0X8A3F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X8A4F);
	MakeName	(0X8A4F,	"stowSiz");
	MakeCode	(x=0X8A52);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8A5A);
	OpHex		(x,	1);
	MakeCode	(x=0X8A5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X8A65);
	MakeName	(0X8A65,	"gnradix");
	MakeCode	(x=0X8A67);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeName	(0X8A67,	"toDigit");
	MakeCode	(x=0X8A6E);
	OpChr		(x,	1);
	MakeCode	(x=0X8A73);
	OpChr		(x,	1);
	MakeComm	(0X8A78,	"'a'-10");
	MakeCode	(x=0X8A78);
	OpHex		(x,	1);
	MakeCode	(x=0X8A7C);
	OpChr		(x,	1);
	MakeCode	(x=0X8A81);
	OpChr		(x,	1);
	MakeComm	(0X8A86,	"'A'-10");
	MakeCode	(x=0X8A86);
	OpHex		(x,	1);
	MakeCode	(x=0X8A8A);
	OpChr		(x,	1);
	MakeCode	(x=0X8A8F);
	OpChr		(x,	1);
	MakeComm	(0X8A94,	"'0'");
	MakeCode	(x=0X8A94);
	OpHex		(x,	1);
	MakeCode	(0X8A98);
	MakeCode	(0X8A9A);
	MakeName	(0X8A9A,	"GetXNum");
	MakeCode	(x=0X8AA6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8ABC);
	OpChr		(x,	1);
	MakeCode	(x=0X8AC1);
	OpChr		(x,	1);
	MakeCode	(x=0X8AC6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeCode	(0X8AE4);
	MakeCode	(0X8AE7);
	MakeCode	(0X8AED);
	MakeName	(0X8AED,	"mul32");
	MakeCode	(x=0X8AF0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8AFB);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X8B06);
	MakeCode	(0X8B08);
	MakeName	(0X8B08,	"toPara");
	MakeCode	(x=0X8B0E);
	OpDecimal	(x,	1);
	MakeCode	(0X8B16);
	MakeName	(0X8B16,	"UmbHead");
	MakeCode	(x=0X8B19);
	OpHex		(x,	1);
	MakeComm	(0X8B1B,	"DOS - 2+ internal - GET LIST OF LISTS\nReturn: ES:BX -> DOS list of lists");
	MakeCode	(x=0X8B1B);
	OpHex		(x,	0);
	MakeComm	(0X8B1D,	"[es:DOS_UMB_HEAD]");
	MakeCode	(0X8B29);
	MakeCode	(0X8B2E);
	MakeName	(0X8B2E,	"isSysMCB");
	MakeComm	(0X8B2F,	"[es:arena_owner]");
	MakeComm	(0X8B3F,	"[es:arena_name]");
	MakeCode	(0X8B3F);
	MakeComm	(0X8B43,	"'SC' (NASM syntax)");
	MakeComm	(0X8B48,	"convert segment addr to UMB number");
	MakeCode	(0X8B48);
	MakeName	(0X8B48,	"AddrToUmb");
	MakeComm	(0X8B62,	"[es:arena_signature]");
	MakeComm	(0X8B66,	"arena_signature_end");
	MakeComm	(0X8B6C,	"[es:arena_size]");
	MakeCode	(0X8B76);
	MakeComm	(0X8B78,	"[es:arena_size]");
	MakeCode	(x=0X8B8A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	OpDecimal	(x,	1);
	MakeName	(0X8B8A,	"convUMB");
	MakeCode	(0X8B9B);
	MakeName	(0X8B9B,	"setUMBs");
	MakeCode	(x=0X8BA0);
	OpHex		(x,	1);
	MakeComm	(0X8BA3,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: get allocation strategy");
	MakeCode	(x=0X8BA3);
	OpHex		(x,	0);
	MakeCode	(x=0X8BA6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8BAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8BAF);
	OpHex		(x,	1);
	MakeCode	(x=0X8BB6);
	OpHex		(x,	1);
	MakeCode	(x=0X8BBB);
	OpHex		(x,	1);
	MakeComm	(0X8BBE,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X8BBE);
	OpHex		(x,	0);
	MakeCode	(0X8BC3);
	MakeName	(0X8BC3,	"loadLow");
	MakeCode	(x=0X8BC4);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8BC8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X8BD4);
	MakeComm	(0X8BDD,	"links UMBs and hides upper-memory as appropriate");
	MakeCode	(0X8BDD);
	MakeName	(0X8BDD,	"HideUMBs");
	MakeCode	(x=0X8BED);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8BF1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X8C02,	"MAXUMB");
	MakeCode	(x=0X8C02);
	OpDecimal	(x,	1);
	MakeCode	(0X8C15);
	MakeCode	(0X8C24);
	MakeName	(0X8C24,	"GetLoadUMB");
	MakeCode	(x=0X8C25);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8C29);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X8C2E);
	MakeName	(0X8C2E,	"GetLoadSize");
	MakeCode	(x=0X8C31);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8C35);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X8C3A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X8C3D);
	OpHex		(x,	1);
	MakeCode	(0X8C48);
	MakeName	(0X8C48,	"GetSize");
	MakeCode	(x=0X8C4B);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8C51);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X8C54);
	OpHex		(x,	1);
	MakeCode	(0X8C5F);
	MakeName	(0X8C5F,	"StoLoadUMB");
	MakeCode	(x=0X8C60);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8C64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X8C6A);
	MakeName	(0X8C6A,	"StoLoadSize");
	MakeCode	(x=0X8C6C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8C70);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X8C7D,	"sls10");
	MakeComm	(0X8C7F,	"marks as HIDDEN all FREE elements\nin UMB passed as AL");
	MakeCode	(0X8C7F);
	MakeName	(0X8C7F,	"hideUMB");
	MakeComm	(0X8C93,	"[es:arena_signature]");
	MakeComm	(0X8C97,	"arena_signature_end");
	MakeComm	(0X8C9D,	"[es:arena_size]");
	MakeCode	(0X8CA7);
	MakeComm	(0X8CAA,	"returns with ZF set if\nuser didn't specify /S");
	MakeCode	(0X8CAA);
	MakeName	(0X8CAA,	"isTiny");
	MakeCode	(x=0X8CAC);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8CB0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X8CB8,	"[es:arena_owner]");
	MakeCode	(x=0X8CB8);
	OpHex		(x,	1);
	MakeName	(0X8CB8,	"isFreeMCB");
	MakeComm	(0X8CBF,	"[es:arena_owner],SystemPSPOwner");
	MakeCode	(0X8CBF);
	MakeName	(0X8CBF,	"hideMCB");
	MakeComm	(0X8CC6,	"'HIDDEN  '\n[es:arena_name+0], 'HI'");
	MakeComm	(0X8CCD,	"[es:arena_name+2], 'DD");
	MakeComm	(0X8CD4,	"[es:arena_name+4], 'EN'");
	MakeComm	(0X8CDB,	"[es:arena_name+6], '  '");
	MakeCode	(0X8CE3);
	MakeName	(0X8CE3,	"unHideMCB");
	MakeComm	(0X8CE4,	"[es:arena_owner],FreePSPOwner");
	MakeComm	(0X8CEB,	"'  '");
	MakeComm	(0X8CEE,	"[es:arena_name+0]");
	MakeComm	(0X8CF2,	"[es:arena_name+2]");
	MakeCode	(x=0X8CF2);
	OpDecimal	(x,	0);
	MakeComm	(0X8CF6,	"[es:arena_name+4]");
	MakeCode	(x=0X8CF6);
	OpDecimal	(x,	0);
	MakeComm	(0X8CFA,	"[es:arena_name+6]");
	MakeCode	(x=0X8CFA);
	OpDecimal	(x,	0);
	MakeCode	(0X8D00);
	MakeName	(0X8D00,	"findumb");
	MakeComm	(0X8D18,	"[es:arena_signature]");
	MakeComm	(0X8D1C,	"arena_signature_end");
	MakeComm	(0X8D22,	"[es:arena_size]");
	MakeCode	(0X8D2C);
	MakeCode	(0X8D31);
	MakeName	(0X8D31,	"BigFree");
	MakeComm	(0X8D46,	"[es:arena_size]");
	MakeComm	(0X8D54,	"[es:arena_signature]");
	MakeComm	(0X8D58,	"arena_signature_end");
	MakeCode	(0X8D68);
	MakeComm	(0X8D74,	"sets ZF if UMB in AL wasn't specified\nin DH/LH line");
	MakeCode	(0X8D74);
	MakeName	(0X8D74,	"isSpecified");
	MakeCode	(x=0X8D7A);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8D7E,	"[bx+UmbUsed] = [bx+MsgBuffer]");
	MakeCode	(x=0X8D7E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X8D87);
	MakeName	(0X8D87,	"shrinkMCB");
	MakeComm	(0X8D8E,	"[es:arena_size]");
	MakeComm	(0X8D93,	"MIN_SPLIT_SIZE");
	MakeCode	(x=0X8D93);
	OpDecimal	(x,	1);
	MakeComm	(0X8D9A,	"[es:arena_signature]");
	MakeComm	(0X8D9F,	"[es:arena_size]");
	MakeComm	(0X8DA9,	"[es:arena_signature]");
	MakeCode	(x=0X8DA9);
	OpChr		(x,	1);
	MakeComm	(0X8DB9,	"[es:arena_signature]");
	MakeComm	(0X8DBE,	"[es:arena_owner]");
	MakeComm	(0X8DC5,	"[es:arena_size]");
	MakeComm	(0X8DC9,	"'  '");
	MakeComm	(0X8DCC,	"[es:arena_name+0]");
	MakeComm	(0X8DD0,	"[es:arena_name+2]");
	MakeComm	(0X8DD4,	"[es:arena_name+4]");
	MakeComm	(0X8DD8,	"[es:arena_name+6]");
	MakeCode	(0X8DDF);
	MakeCode	(0X8DE4);
	MakeName	(0X8DE4,	"hideUMB?");
	MakeCode	(0X8E0B);
	MakeCode	(0X8E19);
	MakeCode	(0X8E34);
	MakeName	(0X8E34,	"UnFreeze");
	MakeName	(0X8E3D,	"uf10");
	MakeComm	(0X8E45,	"[es:arena_signature]");
	MakeName	(0X8E45,	"uf20");
	MakeComm	(0X8E49,	"arena_signature_end");
	MakeCode	(0X8E59);
	MakeName	(0X8E59,	"ufX");
	MakeCode	(0X8E5C);
	MakeName	(0X8E5C,	"isFrozMCB");
	MakeComm	(0X8E5D,	"[es:arena_owner]");
	MakeComm	(0X8E66,	"[es:arena_name]");
	MakeComm	(0X8E6A,	"'FR'");
	MakeComm	(0X8E6F,	"[es:arena_name+2]");
	MakeCode	(x=0X8E6F);
	OpDecimal	(x,	1);
	MakeComm	(0X8E73,	"'OZ'");
	MakeComm	(0X8E78,	"[es:arena_name+4]");
	MakeComm	(0X8E7C,	"'EN'");
	MakeComm	(0X8E81,	"[es:arena_name+6]");
	MakeComm	(0X8E85,	"'  '");
	MakeComm	(0X8E8A,	"[es:arena_owner],SystemPSPOwner");
	MakeCode	(0X8E8A);
	MakeName	(0X8E8A,	"frezMCB");
	MakeComm	(0X8E91,	"[es:arena_name+0],'FR'");
	MakeComm	(0X8E98,	"[es:arena_name+2],'OZ'");
	MakeComm	(0X8E9F,	"[es:arena_name+4],'EN'");
	MakeComm	(0X8EA6,	"[es:arena_name+6],'  '");
	MakeCode	(0X8EAE);
	MakeName	(0X8EAE,	"FreezeUM");
	MakeCode	(0X8EE6);
	MakeCode	(0X8EEB);
	MakeName	(0X8EEB,	"UmbTest");
	MakeComm	(0X8EFF,	"travels memory chain and returns carry clear\nif UMBs are linked");
	MakeCode	(0X8EFF);
	MakeName	(0X8EFF,	"WalkMem");
	MakeComm	(0X8F02,	"DOS_GET_DOS_LISTS");
	MakeCode	(x=0X8F02);
	OpHex		(x,	1);
	MakeComm	(0X8F04,	"DOS - ");
	MakeCode	(x=0X8F04);
	OpHex		(x,	0);
	MakeComm	(0X8F0C,	"[es:arena_signature]");
	MakeComm	(0X8F10,	"arena_signature_end");
	MakeComm	(0X8F16,	"[es:arena_size]");
	MakeCode	(0X8F20);
	MakeCode	(0X8F29);
	MakeName	(0X8F29,	"hl_unlink");
	MakeCode	(x=0X8F2C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8F30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X8F35);
	OpHex		(x,	1);
	MakeComm	(0X8F38,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: (DOS 5beta) set UMB link state");
	MakeCode	(x=0X8F38);
	OpHex		(x,	0);
	MakeCode	(x=0X8F3D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8F41);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X8F46);
	OpHex		(x,	1);
	MakeComm	(0X8F49,	"DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY\nAL = function code: set allocation strategy");
	MakeCode	(x=0X8F49);
	OpHex		(x,	0);
	MakeCode	(0X8F4C);
	MakeName	(0X8F4C,	"LoadHigh");
	MakeComm	(0X8F53,	"setup pgm's command line");
	MakeComm	(0X8F56,	"setup path for file");
	MakeCode	(0X8F61);
	MakeComm	(0X8F64,	"iCmdLine");
	MakeCode	(x=0X8F64);
	OpHex		(x,	1);
	MakeName	(0X8F64,	"ParseLhCmd");
	MakeComm	(0X8F73,	"PV_BadUMB");
	MakeCode	(x=0X8F78);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8F7D);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8F80,	"PV_InvSwt ; Unrecognized switch passed?");
	MakeCode	(x=0X8F85);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8F8A,	"copy filename into our buffer");
	MakeCode	(0X8F8A);
	MakeCode	(x=0X8F8E);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X8F8E,	"LhCopyFilename");
	MakeCode	(x=0X8FA1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(0X8FB7);
	MakeCode	(x=0X8FC1);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8FC6);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X8FCB,	"iCmdLine");
	MakeCode	(x=0X8FCB);
	OpHex		(x,	1);
	MakeName	(0X8FCB,	"SetupCmdLine");
	MakeComm	(0X8FD0,	"just CR means count = 0");
	MakeComm	(0X8FD4,	"update count");
	MakeComm	(0X8FDA,	"carriage return?");
	MakeComm	(0X8FDC,	"no, continue storing");
	MakeComm	(0X8FDE,	"store new cmd line length");
	MakeComm	(0X8FE4,	"[msg_disp_class],ext_msg_class");
	MakeCode	(x=0X8FE4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0X8FE4,	"LhSetupErrMsg");
	MakeCode	(x=0X8FE9);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8FEC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X8FF0,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X8FF0);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeName	(0X8FF0,	"SetupPath");
	MakeComm	(0X8FF4,	"ARGV_ELE.SIZE");
	MakeCode	(x=0X8FF4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8FFA);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0X8FFE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X900C,	"mov di,[ARG+ARG_UNIT.argv] ; mov di,[ARG]");
	MakeCode	(x=0X900C);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X9011,	"ARGV_ELE.SIZE");
	MakeCode	(x=0X9011);
	OpDecimal	(x,	1);
	MakeComm	(0X9017,	"[ARG+ARG_UNIT.argvcnt]");
	MakeCode	(x=0X9017);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0X901B,	"ARGV_ELE.SIZE");
	MakeCode	(x=0X901B);
	OpDecimal	(x,	1);
	MakeCode	(0X9022);
	MakeComm	(0X9029,	"executable file?");
	MakeComm	(0X902C,	"no, indicate fail");
	MakeComm	(0X9030,	"offset TRANGROUP:NoExecBat_Ptr");
	MakeCode	(x=0X9030);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0X9035,	"setup error message");
	MakeCode	(0X9035);
	MakeByte	(0X903D);
	MakeName	(0X903D,	"$M_CLASS_3_STRUC");
	MakeComm	(0X903E,	"$M_COMMAND_VER (COMMAND.COM version)");
	MakeWord	(x=0X903E);
	OpHex		(x,	0);
	MakeByte	(x=0X9040);
	OpDecimal	(x,	0);
	MakeWord	(x=0X9041);
	OpDecimal	(x,	0);
	MakeName	(0X9041,	"$M_ID_3_1");
	MakeWord	(x=0X9043);
	OpDecimal	(x,	0);
	MakeWord	(x=0X9045);
	OpDecimal	(x,	0);
	MakeName	(0X9045,	"$M_ID_3_2");
	MakeWord	(x=0X9047);
	OpDecimal	(x,	0);
	MakeWord	(x=0X9049);
	MakeArray	(x,	0X168);
	OpDecimal	(x,	0);
	MakeName	(0X9049,	"$M_ID_3_3");
	MakeWord	(x=0X9319);
	OpDecimal	(x,	0);
	MakeName	(0X9319,	"$M_ID_3_183");
	MakeWord	(x=0X931B);
	OpDecimal	(x,	0);
	MakeByte	(x=0X931D);
	OpDecimal	(x,	0);
	MakeName	(0X931D,	"MSG_1020");
	MakeStr		(0X931E,	0X932D);
	MakeByte	(x=0X932D);
	OpDecimal	(x,	0);
	MakeName	(0X932D,	"MSG_1015");
	MakeStr		(0X932E,	0X9351);
	MakeByte	(x=0X9351);
	OpDecimal	(x,	0);
	MakeName	(0X9351,	"MSG_1004");
	MakeStr		(0X9352,	0X936B);
	MakeByte	(x=0X936B);
	OpDecimal	(x,	0);
	MakeName	(0X936B,	"MSG_1026");
	MakeStr		(0X936C,	0X937F);
	MakeByte	(x=0X937F);
	OpDecimal	(x,	0);
	MakeName	(0X937F,	"MSG_1031");
	MakeStr		(0X9380,	0X938E);
	MakeByte	(x=0X938E);
	OpDecimal	(x,	0);
	MakeName	(0X938E,	"MSG_1035");
	MakeStr		(0X938F,	0X939D);
	MakeByte	(x=0X939D);
	OpDecimal	(x,	0);
	MakeName	(0X939D,	"MSG_1062");
	MakeStr		(0X939E,	0X93AC);
	MakeByte	(x=0X93AC);
	OpDecimal	(x,	0);
	MakeName	(0X93AC,	"MSG_1028");
	MakeStr		(0X93AD,	0X93CE);
	MakeByte	(x=0X93CE);
	OpDecimal	(x,	0);
	MakeName	(0X93CE,	"MSG_1045");
	MakeStr		(0X93CF,	0X93EB);
	MakeByte	(x=0X93EB);
	OpDecimal	(x,	0);
	MakeName	(0X93EB,	"MSG_1041");
	MakeStr		(0X93EC,	0X940D);
	MakeByte	(x=0X940D);
	OpDecimal	(x,	0);
	MakeName	(0X940D,	"MSG_1042");
	MakeStr		(0X940E,	0X9428);
	MakeByte	(x=0X9428);
	OpDecimal	(x,	0);
	MakeName	(0X9428,	"MSG_1043");
	MakeStr		(0X9429,	0X9448);
	MakeByte	(x=0X9448);
	OpDecimal	(x,	0);
	MakeName	(0X9448,	"MSG_1002");
	MakeStr		(0X9449,	0X9470);
	MakeByte	(x=0X9470);
	OpDecimal	(x,	0);
	MakeName	(0X9470,	"MSG_1003");
	MakeStr		(0X9471,	0X948C);
	MakeByte	(x=0X948C);
	OpDecimal	(x,	0);
	MakeName	(0X948C,	"MSG_1007");
	MakeStr		(0X948D,	0X94A7);
	MakeByte	(x=0X94A7);
	OpDecimal	(x,	0);
	MakeName	(0X94A7,	"MSG_1008");
	MakeStr		(0X94A8,	0X94BD);
	MakeByte	(x=0X94BD);
	OpDecimal	(x,	0);
	MakeName	(0X94BD,	"MSG_1009");
	MakeStr		(0X94BE,	0X94D2);
	MakeByte	(x=0X94D2);
	OpDecimal	(x,	0);
	MakeName	(0X94D2,	"MSG_1010");
	MakeStr		(0X94D3,	0X94F2);
	MakeByte	(x=0X94F2);
	OpDecimal	(x,	0);
	MakeName	(0X94F2,	"MSG_1011");
	MakeStr		(0X94F3,	0X950D);
	MakeByte	(x=0X950D);
	OpDecimal	(x,	0);
	MakeName	(0X950D,	"MSG_1012");
	MakeStr		(0X950E,	0X952A);
	MakeByte	(x=0X952A);
	OpDecimal	(x,	0);
	MakeName	(0X952A,	"MSG_1014");
	MakeStr		(0X952B,	0X953B);
	MakeByte	(x=0X953B);
	OpDecimal	(x,	0);
	MakeName	(0X953B,	"MSG_1016");
	MakeStr		(0X953C,	0X9565);
	MakeByte	(x=0X9565);
	OpDecimal	(x,	0);
	MakeName	(0X9565,	"MSG_1017");
	MakeStr		(0X9566,	0X958A);
	MakeByte	(x=0X958A);
	OpDecimal	(x,	0);
	MakeStr		(0X958B,	0X959E);
	MakeByte	(x=0X959E);
	OpDecimal	(x,	0);
	MakeStr		(0X959F,	0X95AA);
	MakeByte	(x=0X95AA);
	OpDecimal	(x,	0);
	MakeStr		(0X95AB,	0X95C8);
	MakeByte	(x=0X95C8);
	OpDecimal	(x,	0);
	MakeStr		(0X95C9,	0X95EF);
	MakeByte	(x=0X95EF);
	OpDecimal	(x,	0);
	MakeStr		(0X95F0,	0X961B);
	MakeByte	(x=0X961B);
	OpDecimal	(x,	0);
	MakeStr		(0X961C,	0X9632);
	MakeByte	(x=0X9632);
	OpDecimal	(x,	0);
	MakeStr		(0X9633,	0X964A);
	MakeByte	(x=0X964A);
	OpDecimal	(x,	0);
	MakeStr		(0X964B,	0X966B);
	MakeByte	(x=0X966B);
	OpDecimal	(x,	0);
	MakeStr		(0X966C,	0X967D);
	MakeByte	(x=0X967D);
	OpDecimal	(x,	0);
	MakeStr		(0X967E,	0X968C);
	MakeByte	(x=0X968C);
	OpDecimal	(x,	0);
	MakeStr		(0X968D,	0X96A4);
	MakeByte	(x=0X96A4);
	OpDecimal	(x,	0);
	MakeStr		(0X96A5,	0X96BA);
	MakeByte	(x=0X96BA);
	OpDecimal	(x,	0);
	MakeStr		(0X96BB,	0X96D0);
	MakeByte	(x=0X96D0);
	OpDecimal	(x,	0);
	MakeStr		(0X96D1,	0X96E5);
	MakeByte	(x=0X96E5);
	OpDecimal	(x,	0);
	MakeStr		(0X96E6,	0X96F6);
	MakeByte	(x=0X96F6);
	OpDecimal	(x,	0);
	MakeStr		(0X96F7,	0X9709);
	MakeByte	(x=0X9709);
	OpDecimal	(x,	0);
	MakeStr		(0X970A,	0X9746);
	MakeByte	(x=0X9746);
	OpDecimal	(x,	0);
	MakeName	(0X9746,	"MSG_1040");
	MakeStr		(0X9747,	0X9759);
	MakeByte	(x=0X9759);
	OpDecimal	(x,	0);
	MakeStr		(0X975A,	0X976D);
	MakeByte	(x=0X976D);
	OpDecimal	(x,	0);
	MakeStr		(0X976E,	0X97A4);
	MakeByte	(x=0X97A4);
	OpDecimal	(x,	0);
	MakeStr		(0X97A5,	0X97BD);
	MakeByte	(x=0X97BD);
	OpDecimal	(x,	0);
	MakeStr		(0X97BE,	0X97CF);
	MakeByte	(0X97CF);
	MakeStr		(0X97D0,	0X97D9);
	MakeByte	(x=0X97D9);
	OpDecimal	(x,	0);
	MakeStr		(0X97DA,	0X97F8);
	MakeByte	(x=0X97F8);
	OpDecimal	(x,	0);
	MakeStr		(0X97F9,	0X9809);
	MakeByte	(x=0X9809);
	OpDecimal	(x,	0);
	MakeStr		(0X980A,	0X9820);
	MakeByte	(x=0X9820);
	OpDecimal	(x,	0);
	MakeStr		(0X9821,	0X9846);
	MakeByte	(x=0X9846);
	OpDecimal	(x,	0);
	MakeStr		(0X9847,	0X986D);
	MakeByte	(x=0X986D);
	OpDecimal	(x,	0);
	MakeName	(0X986D,	"MSG_1055");
	MakeStr		(0X986E,	0X987B);
	MakeByte	(x=0X987B);
	OpDecimal	(x,	0);
	MakeStr		(0X987C,	0X988A);
	MakeByte	(x=0X988A);
	OpDecimal	(x,	0);
	MakeStr		(0X988B,	0X9897);
	MakeByte	(0X9897);
	MakeStr		(0X9898,	0X989C);
	MakeByte	(0X989C);
	MakeStr		(0X989D,	0X98A0);
	MakeByte	(x=0X98A0);
	OpDecimal	(x,	0);
	MakeName	(0X98A0,	"MSG_1061");
	MakeStr		(0X98A1,	0X98BA);
	MakeByte	(0X98BA);
	MakeStr		(0X98BB,	0X98BD);
	MakeName	(0X98BB,	"MSG_1063");
	MakeByte	(0X98BD);
	MakeStr		(0X98BE,	0X98C0);
	MakeByte	(0X98C0);
	MakeStr		(0X98C1,	0X98C3);
	MakeByte	(0X98C3);
	MakeStr		(0X98C4,	0X98C6);
	MakeByte	(0X98C6);
	MakeName	(0X98C6,	"MSG_1067");
	MakeByte	(0X98C7);
	MakeByte	(x=0X98C8);
	OpDecimal	(x,	0);
	MakeName	(0X98C8,	"MSG_1068");
	MakeStr		(0X98C9,	0X98D5);
	MakeByte	(0X98D5);
	MakeByte	(0X98D6);
	MakeArray	(0X98D6,	0X3);
	MakeByte	(0X98D9);
	MakeName	(0X98D9,	"MSG_1070");
	MakeStr		(0X98DA,	0X98DC);
	MakeByte	(0X98DC);
	MakeStr		(0X98DD,	0X98DF);
	MakeByte	(0X98DF);
	MakeName	(0X98DF,	"MSG_1072");
	MakeStr		(0X98E0,	0X98E9);
	MakeByte	(0X98E9);
	MakeName	(0X98E9,	"MSG_1073");
	MakeStr		(0X98EA,	0X98F3);
	MakeByte	(0X98F3);
	MakeName	(0X98F3,	"MSG_1074");
	MakeStr		(0X98F4,	0X98FD);
	MakeByte	(0X98FD);
	MakeName	(0X98FD,	"MSG_1075");
	MakeStr		(0X98FE,	0X9903);
	MakeByte	(0X9903);
	MakeStr		(0X9904,	0X9906);
	MakeByte	(0X9906);
	MakeStr		(0X9907,	0X990E);
	MakeByte	(x=0X990E);
	OpDecimal	(x,	0);
	MakeName	(0X990E,	"MSG_1078");
	MakeStr		(0X990F,	0X9929);
	MakeByte	(x=0X9929);
	OpDecimal	(x,	0);
	MakeName	(0X9929,	"MSG_1079");
	MakeStr		(0X992A,	0X9934);
	MakeByte	(x=0X9934);
	OpDecimal	(x,	0);
	MakeName	(0X9934,	"MSG_1080");
	MakeStr		(0X9935,	0X994A);
	MakeByte	(x=0X994A);
	OpDecimal	(x,	0);
	MakeStr		(0X994B,	0X9975);
	MakeByte	(x=0X9975);
	OpDecimal	(x,	0);
	MakeName	(0X9975,	"MSG_1082");
	MakeStr		(0X9976,	0X9981);
	MakeByte	(0X9981);
	MakeName	(0X9981,	"MSG_1083");
	MakeStr		(0X9982,	0X9984);
	MakeByte	(x=0X9984);
	OpDecimal	(x,	0);
	MakeName	(0X9984,	"MSG_1084");
	MakeStr		(0X9985,	0X9994);
	MakeByte	(x=0X9994);
	OpDecimal	(x,	0);
	MakeStr		(0X9995,	0X99A2);
	MakeByte	(x=0X99A2);
	OpDecimal	(x,	0);
	MakeStr		(0X99A3,	0X99B0);
	MakeByte	(x=0X99B0);
	OpDecimal	(x,	0);
	MakeStr		(0X99B1,	0X99BE);
	MakeByte	(x=0X99BE);
	OpDecimal	(x,	0);
	MakeStr		(0X99BF,	0X99D3);
	MakeByte	(x=0X99D3);
	OpDecimal	(x,	0);
	MakeStr		(0X99D4,	0X99F0);
	MakeByte	(x=0X99F0);
	OpDecimal	(x,	0);
	MakeName	(0X99F0,	"MSG_1095");
	MakeStr		(0X99F1,	0X9A0D);
	MakeByte	(x=0X9A0D);
	OpDecimal	(x,	0);
	MakeStr		(0X9A0E,	0X9A3E);
	MakeByte	(x=0X9A3E);
	OpDecimal	(x,	0);
	MakeName	(0X9A3E,	"MSG_1097");
	MakeStr		(0X9A3F,	0X9A5B);
	MakeByte	(x=0X9A5B);
	OpDecimal	(x,	0);
	MakeName	(0X9A5B,	"MSG_1098");
	MakeStr		(0X9A5C,	0X9A78);
	MakeByte	(x=0X9A78);
	OpDecimal	(x,	0);
	MakeStr		(0X9A79,	0X9A8E);
	MakeByte	(x=0X9A8E);
	OpDecimal	(x,	0);
	MakeStr		(0X9A8F,	0X9AB4);
	MakeByte	(x=0X9AB4);
	OpDecimal	(x,	0);
	MakeName	(0X9AB4,	"MSG_1103");
	MakeStr		(0X9AB5,	0X9ACF);
	MakeByte	(0X9ACF);
	MakeName	(0X9ACF,	"MSG_1104");
	MakeByte	(x=0X9AD0);
	OpChr		(x,	0);
	MakeName	(0X9AD0,	"_Y_es");
	MakeByte	(x=0X9AD1);
	OpChr		(x,	0);
	MakeName	(0X9AD1,	"_N_o");
	MakeByte	(x=0X9AD2);
	OpChr		(x,	0);
	MakeName	(0X9AD2,	"_A_ll");
	MakeByte	(x=0X9AD3);
	OpDecimal	(x,	0);
	MakeName	(0X9AD3,	"MSG_1105");
	MakeStr		(0X9AD4,	0X9ADE);
	MakeByte	(x=0X9ADE);
	OpDecimal	(x,	0);
	MakeName	(0X9ADE,	"MSG_1106");
	MakeStr		(0X9ADF,	0X9AF0);
	MakeByte	(0X9AF0);
	MakeName	(0X9AF0,	"MSG_1200");
	MakeByte	(x=0X9AF1);
	OpDecimal	(x,	0);
	MakeName	(0X9AF1,	"MSG_1300");
	MakeStr		(0X9AF2,	0X9B78);
	MakeByte	(x=0X9B78);
	OpDecimal	(x,	0);
	MakeName	(0X9B78,	"MSG_1320");
	MakeStr		(0X9B79,	0X9BA8);
	MakeStr		(0X9BA8,	0X9BAA);
	MakeStr		(0X9BAA,	0X9BB6);
	MakeStr		(0X9BB6,	0X9BB8);
	MakeByte	(x=0X9BB8);
	OpDecimal	(x,	0);
	MakeStr		(0X9BB9,	0X9BE0);
	MakeStr		(0X9BE0,	0X9BE2);
	MakeStr		(0X9BE2,	0X9C29);
	MakeByte	(x=0X9C29);
	OpDecimal	(x,	0);
	MakeName	(0X9C29,	"MSG_1340");
	MakeStr		(0X9C2A,	0X9C62);
	MakeStr		(0X9C62,	0X9C64);
	MakeStr		(0X9C64,	0X9C85);
	MakeByte	(x=0X9C85);
	OpDecimal	(x,	0);
	MakeStr		(0X9C86,	0X9CA1);
	MakeStr		(0X9CA1,	0X9CA3);
	MakeStr		(0X9CA3,	0X9CE6);
	MakeStr		(0X9CE6,	0X9CE8);
	MakeByte	(x=0X9CE8);
	OpDecimal	(x,	0);
	MakeStr		(0X9CE9,	0X9D7A);
	MakeByte	(x=0X9D7A);
	OpDecimal	(x,	0);
	MakeName	(0X9D7A,	"MSG_1360");
	MakeStr		(0X9D7B,	0X9D8F);
	MakeStr		(0X9D8F,	0X9D91);
	MakeStr		(0X9D91,	0X9D96);
	MakeByte	(x=0X9D96);
	OpDecimal	(x,	0);
	MakeName	(0X9D96,	"MSG_1400");
	MakeStr		(0X9D97,	0X9DC6);
	MakeStr		(0X9DC6,	0X9DC8);
	MakeStr		(0X9DC8,	0X9E13);
	MakeStr		(0X9E13,	0X9E31);
	MakeStr		(0X9E31,	0X9E33);
	MakeByte	(x=0X9E33);
	OpDecimal	(x,	0);
	MakeStr		(0X9E34,	0X9E9C);
	MakeByte	(x=0X9E9C);
	OpDecimal	(x,	0);
	MakeStr		(0X9E9D,	0X9F13);
	MakeByte	(x=0X9F13);
	OpDecimal	(x,	0);
	MakeName	(0X9F13,	"MSG_1403");
	MakeStr		(0X9F14,	0X9F53);
	MakeByte	(x=0X9F53);
	OpDecimal	(x,	0);
	MakeName	(0X9F53,	"MSG_1404");
	MakeStr		(0X9F54,	0X9FC8);
	MakeByte	(x=0X9FC8);
	OpDecimal	(x,	0);
	MakeName	(0X9FC8,	"MSG_1405");
	MakeStr		(0X9FC9,	0XA03B);
	MakeByte	(x=0XA03B);
	OpDecimal	(x,	0);
	MakeName	(0XA03B,	"MSG_1406");
	MakeStr		(0XA03C,	0XA07E);
	MakeByte	(x=0XA07E);
	OpDecimal	(x,	0);
	MakeName	(0XA07E,	"MSG_1407");
	MakeStr		(0XA07F,	0XA106);
	MakeByte	(x=0XA106);
	OpDecimal	(x,	0);
	MakeName	(0XA106,	"MSG_1420");
	MakeStr		(0XA107,	0XA141);
	MakeStr		(0XA141,	0XA143);
	MakeStr		(0XA143,	0XA150);
	MakeStr		(0XA150,	0XA152);
	MakeStr		(0XA152,	0XA191);
	MakeByte	(x=0XA191);
	OpDecimal	(x,	0);
	MakeName	(0XA191,	"MSG_1440");
	MakeStr		(0XA192,	0XA1B6);
	MakeStr		(0XA1B6,	0XA1B8);
	MakeByte	(x=0XA1B8);
	OpDecimal	(x,	0);
	MakeStr		(0XA1B9,	0XA23C);
	MakeByte	(x=0XA23C);
	OpDecimal	(x,	0);
	MakeName	(0XA23C,	"MSG_1460");
	MakeStr		(0XA23D,	0XA29F);
	MakeStr		(0XA29F,	0XA2A1);
	MakeByte	(x=0XA2A1);
	OpDecimal	(x,	0);
	MakeStr		(0XA2A2,	0XA325);
	MakeByte	(x=0XA325);
	OpDecimal	(x,	0);
	MakeStr		(0XA326,	0XA375);
	MakeByte	(x=0XA375);
	OpDecimal	(x,	0);
	MakeName	(0XA375,	"MSG_1480");
	MakeStr		(0XA376,	0XA415);
	MakeByte	(x=0XA415);
	OpDecimal	(x,	0);
	MakeName	(0XA415,	"MSG_1481");
	MakeStr		(0XA416,	0XA463);
	MakeByte	(x=0XA463);
	OpDecimal	(x,	0);
	MakeStr		(0XA464,	0XA4BF);
	MakeByte	(x=0XA4BF);
	OpDecimal	(x,	0);
	MakeName	(0XA4BF,	"MSG_1483");
	MakeStr		(0XA4C0,	0XA501);
	MakeStr		(0XA501,	0XA53E);
	MakeByte	(x=0XA53E);
	OpDecimal	(x,	0);
	MakeStr		(0XA53F,	0XA5BB);
	MakeByte	(x=0XA5BB);
	OpDecimal	(x,	0);
	MakeName	(0XA5BB,	"MSG_1485");
	MakeStr		(0XA5BC,	0XA651);
	MakeByte	(x=0XA651);
	OpDecimal	(x,	0);
	MakeName	(0XA651,	"MSG_1486");
	MakeStr		(0XA652,	0XA6E1);
	MakeByte	(x=0XA6E1);
	OpDecimal	(x,	0);
	MakeName	(0XA6E1,	"MSG_1487");
	MakeStr		(0XA6E2,	0XA740);
	MakeByte	(x=0XA740);
	OpDecimal	(x,	0);
	MakeName	(0XA740,	"MSG_1488");
	MakeStr		(0XA741,	0XA7D3);
	MakeByte	(x=0XA7D3);
	OpDecimal	(x,	0);
	MakeName	(0XA7D3,	"MSG_1489");
	MakeStr		(0XA7D4,	0XA824);
	MakeByte	(x=0XA824);
	OpDecimal	(x,	0);
	MakeName	(0XA824,	"MSG_1500");
	MakeStr		(0XA825,	0XA863);
	MakeByte	(x=0XA863);
	OpDecimal	(x,	0);
	MakeName	(0XA863,	"MSG_1520");
	MakeStr		(0XA864,	0XA8A1);
	MakeByte	(x=0XA8A1);
	OpDecimal	(x,	0);
	MakeName	(0XA8A1,	"MSG_1540");
	MakeStr		(0XA8A2,	0XA8FF);
	MakeByte	(x=0XA8FF);
	OpDecimal	(x,	0);
	MakeStr		(0XA900,	0XA96B);
	MakeByte	(x=0XA96B);
	OpDecimal	(x,	0);
	MakeStr		(0XA96C,	0XA9A7);
	MakeByte	(x=0XA9A7);
	OpDecimal	(x,	0);
	MakeName	(0XA9A7,	"MSG_1560");
	MakeStr		(0XA9A8,	0XA9CE);
	MakeStr		(0XA9CE,	0XA9DF);
	MakeByte	(x=0XA9DF);
	OpDecimal	(x,	0);
	MakeName	(0XA9DF,	"MSG_1561");
	MakeStr		(0XA9E0,	0XAA5C);
	MakeByte	(x=0XAA5C);
	OpDecimal	(x,	0);
	MakeName	(0XAA5C,	"MSG_1562");
	MakeStr		(0XAA5D,	0XAA8C);
	MakeByte	(x=0XAA8C);
	OpDecimal	(x,	0);
	MakeName	(0XAA8C,	"MSG_1563");
	MakeStr		(0XAA8D,	0XAAB7);
	MakeByte	(x=0XAAB7);
	OpDecimal	(x,	0);
	MakeName	(0XAAB7,	"MSG_1564");
	MakeStr		(0XAAB8,	0XAAF5);
	MakeByte	(x=0XAAF5);
	OpDecimal	(x,	0);
	MakeName	(0XAAF5,	"MSG_1565");
	MakeStr		(0XAAF6,	0XAB2A);
	MakeByte	(x=0XAB2A);
	OpDecimal	(x,	0);
	MakeName	(0XAB2A,	"MSG_1566");
	MakeStr		(0XAB2B,	0XAB57);
	MakeByte	(x=0XAB57);
	OpDecimal	(x,	0);
	MakeName	(0XAB57,	"MSG_1567");
	MakeStr		(0XAB58,	0XABD1);
	MakeByte	(x=0XABD1);
	OpDecimal	(x,	0);
	MakeStr		(0XABD2,	0XAC1E);
	MakeByte	(x=0XAC1E);
	OpDecimal	(x,	0);
	MakeName	(0XAC1E,	"MSG_1580");
	MakeStr		(0XAC1F,	0XAC66);
	MakeByte	(x=0XAC66);
	OpDecimal	(x,	0);
	MakeName	(0XAC66,	"MSG_1600");
	MakeStr		(0XAC67,	0XAC83);
	MakeByte	(x=0XAC83);
	OpDecimal	(x,	0);
	MakeStr		(0XAC84,	0XACD7);
	MakeByte	(x=0XACD7);
	OpDecimal	(x,	0);
	MakeName	(0XACD7,	"MSG_1602");
	MakeStr		(0XACD8,	0XAD78);
	MakeByte	(x=0XAD78);
	OpDecimal	(x,	0);
	MakeName	(0XAD78,	"MSG_1620");
	MakeStr		(0XAD79,	0XADD0);
	MakeByte	(x=0XADD0);
	OpDecimal	(x,	0);
	MakeStr		(0XADD1,	0XAE52);
	MakeByte	(x=0XAE52);
	OpDecimal	(x,	0);
	MakeName	(0XAE52,	"MSG_1622");
	MakeStr		(0XAE53,	0XAE9E);
	MakeByte	(x=0XAE9E);
	OpDecimal	(x,	0);
	MakeName	(0XAE9E,	"MSG_1640");
	MakeStr		(0XAE9F,	0XAED3);
	MakeByte	(x=0XAED3);
	OpDecimal	(x,	0);
	MakeStr		(0XAED4,	0XAF57);
	MakeByte	(x=0XAF57);
	OpDecimal	(x,	0);
	MakeName	(0XAF57,	"MSG_1660");
	MakeStr		(0XAF58,	0XAF9E);
	MakeByte	(x=0XAF9E);
	OpDecimal	(x,	0);
	MakeName	(0XAF9E,	"MSG_1680");
	MakeStr		(0XAF9F,	0XAFBF);
	MakeStr		(0XAFBF,	0XAFC4);
	MakeByte	(x=0XAFC4);
	OpDecimal	(x,	0);
	MakeName	(0XAFC4,	"MSG_1700");
	MakeStr		(0XAFC5,	0XB076);
	MakeByte	(x=0XB076);
	OpDecimal	(x,	0);
	MakeName	(0XB076,	"MSG_1720");
	MakeStr		(0XB077,	0XB0C9);
	MakeByte	(x=0XB0C9);
	OpDecimal	(x,	0);
	MakeName	(0XB0C9,	"MSG_1740");
	MakeStr		(0XB0CA,	0XB125);
	MakeByte	(x=0XB125);
	OpDecimal	(x,	0);
	MakeName	(0XB125,	"MSG_1741");
	MakeStr		(0XB126,	0XB198);
	MakeByte	(x=0XB198);
	OpDecimal	(x,	0);
	MakeName	(0XB198,	"MSG_1760");
	MakeStr		(0XB199,	0XB1E5);
	MakeByte	(x=0XB1E5);
	OpDecimal	(x,	0);
	MakeName	(0XB1E5,	"MSG_1780");
	MakeStr		(0XB1E6,	0XB251);
	MakeByte	(x=0XB251);
	OpDecimal	(x,	0);
	MakeName	(0XB251,	"MSG_1800");
	MakeStr		(0XB252,	0XB29F);
	MakeByte	(x=0XB29F);
	OpDecimal	(x,	0);
	MakeName	(0XB29F,	"MSG_1801");
	MakeStr		(0XB2A0,	0XB2F7);
	MakeByte	(x=0XB2F7);
	OpDecimal	(x,	0);
	MakeName	(0XB2F7,	"MSG_1820");
	MakeStr		(0XB2F8,	0XB33F);
	MakeByte	(x=0XB33F);
	OpDecimal	(x,	0);
	MakeStr		(0XB340,	0XB3CA);
	MakeByte	(x=0XB3CA);
	OpDecimal	(x,	0);
	MakeName	(0XB3CA,	"MSG_1840");
	MakeStr		(0XB3CB,	0XB415);
	MakeByte	(x=0XB415);
	OpDecimal	(x,	0);
	MakeName	(0XB415,	"MSG_1860");
	MakeStr		(0XB416,	0XB470);
	MakeByte	(x=0XB470);
	OpDecimal	(x,	0);
	MakeStr		(0XB471,	0XB4B7);
	MakeByte	(x=0XB4B7);
	OpDecimal	(x,	0);
	MakeStr		(0XB4B8,	0XB535);
	MakeByte	(x=0XB535);
	OpDecimal	(x,	0);
	MakeName	(0XB535,	"MSG_1863");
	MakeStr		(0XB536,	0XB5D8);
	MakeByte	(x=0XB5D8);
	OpDecimal	(x,	0);
	MakeStr		(0XB5D9,	0XB63F);
	MakeByte	(x=0XB63F);
	OpDecimal	(x,	0);
	MakeStr		(0XB640,	0XB6AA);
	MakeByte	(x=0XB6AA);
	OpDecimal	(x,	0);
	MakeStr		(0XB6AB,	0XB712);
	MakeByte	(x=0XB712);
	OpDecimal	(x,	0);
	MakeName	(0XB712,	"MSG_1880");
	MakeStr		(0XB713,	0XB78A);
	MakeByte	(x=0XB78A);
	OpDecimal	(x,	0);
	MakeStr		(0XB78B,	0XB808);
	MakeByte	(x=0XB808);
	OpDecimal	(x,	0);
	MakeStr		(0XB809,	0XB85F);
	MakeByte	(x=0XB85F);
	OpDecimal	(x,	0);
	MakeName	(0XB85F,	"MSG_1883");
	MakeStr		(0XB860,	0XB902);
	MakeByte	(x=0XB902);
	OpDecimal	(x,	0);
	MakeName	(0XB902,	"MSG_1900");
	MakeStr		(0XB903,	0XB94B);
	MakeByte	(x=0XB94B);
	OpDecimal	(x,	0);
	MakeName	(0XB94B,	"MSG_1920");
	MakeStr		(0XB94C,	0XB97B);
	MakeByte	(x=0XB97B);
	OpDecimal	(x,	0);
	MakeName	(0XB97B,	"MSG_1921");
	MakeStr		(0XB97C,	0XBA14);
	MakeByte	(x=0XBA14);
	OpDecimal	(x,	0);
	MakeName	(0XBA14,	"MSG_1922");
	MakeStr		(0XBA15,	0XBACB);
	MakeByte	(x=0XBACB);
	OpDecimal	(x,	0);
	MakeName	(0XBACB,	"MSG_1923");
	MakeStr		(0XBACC,	0XBB51);
	MakeByte	(x=0XBB51);
	OpDecimal	(x,	0);
	MakeName	(0XBB51,	"MSG_1924");
	MakeStr		(0XBB52,	0XBBCD);
	MakeByte	(0XBBCD);
	MakeName	(0XBBCD,	"MSG_1925");
	MakeStr		(0XBBCE,	0XBBD0);
	MakeByte	(x=0XBBD0);
	OpDecimal	(x,	0);
	MakeName	(0XBBD0,	"MSG_1926");
	MakeStr		(0XBBD1,	0XBC28);
	MakeByte	(x=0XBC28);
	OpDecimal	(x,	0);
	MakeName	(0XBC28,	"MSG_1927");
	MakeStr		(0XBC29,	0XBC83);
	MakeByte	(x=0XBC83);
	OpDecimal	(x,	0);
	MakeName	(0XBC83,	"MSG_1107");
	MakeStr		(0XBC84,	0XBC90);
	MakeCode	(0XBC90);
	MakeName	(0XBC90,	"$M_CLS_3");
	MakeCode	(x=0XBC92);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0XBC96,	"ADD CX,$-$M_CLASS_3_STRUC");
	MakeCode	(x=0XBC96);
	OpDecimal	(x,	1);
	MakeComm	(0XBC9B,	"$M_CLASS_ID");
	MakeByte	(0XBC9B);
	MakeName	(0XBC9B,	"$M_CLASS_1_STRUC");
	MakeComm	(0XBC9C,	"EXPECTED_VERSION (COMMAND.COM version)");
	MakeWord	(0XBC9C);
	MakeComm	(0XBC9E,	"Class_1_MessageCount");
	MakeByte	(0XBC9E);
	MakeComm	(0XBC9F,	"Message Number = 2");
	MakeWord	(0XBC9F);
	MakeName	(0XBC9F,	"$M_ID_1_1");
	MakeComm	(0XBCA1,	"Message offset from message number");
	MakeWord	(0XBCA1);
	MakeComm	(0XBCA3,	"Message Number = 3");
	MakeWord	(0XBCA3);
	MakeName	(0XBCA3,	"$M_ID_1_2");
	MakeComm	(0XBCA5,	"Message offset from message number");
	MakeWord	(0XBCA5);
	MakeComm	(0XBCA7,	"Message Number = 8");
	MakeWord	(0XBCA7);
	MakeName	(0XBCA7,	"$M_ID_1_3");
	MakeComm	(0XBCA9,	"Message offset from message number");
	MakeWord	(0XBCA9);
	MakeComm	(0XBCAB,	"Message Number = -1");
	MakeWord	(0XBCAB);
	MakeName	(0XBCAB,	"$M_ID_1_4");
	MakeComm	(0XBCAD,	"Message offset from message number");
	MakeWord	(0XBCAD);
	MakeByte	(x=0XBCAF);
	OpDecimal	(x,	0);
	MakeName	(0XBCAF,	"EXTEND2");
	MakeStr		(0XBCB0,	0XBCBE);
	MakeByte	(x=0XBCBE);
	OpDecimal	(x,	0);
	MakeName	(0XBCBE,	"EXTEND3");
	MakeStr		(0XBCBF,	0XBCCD);
	MakeByte	(x=0XBCCD);
	OpDecimal	(x,	0);
	MakeName	(0XBCCD,	"EXTEND8");
	MakeStr		(0XBCCE,	0XBCE1);
	MakeByte	(x=0XBCE1);
	OpDecimal	(x,	0);
	MakeName	(0XBCE1,	"EXTEND999");
	MakeStr		(0XBCE2,	0XBCF3);
	MakeCode	(0XBCF3);
	MakeName	(0XBCF3,	"$M_MSGSERV_1");
	MakeCode	(x=0XBCF5);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeComm	(0XBCF9,	"$-$M_CLASS_1_STRUC");
	MakeCode	(x=0XBCF9);
	OpDecimal	(x,	1);
	MakeComm	(0XBCFD,	"$M_CLASS_ID");
	MakeByte	(0XBCFD);
	MakeName	(0XBCFD,	"$M_CLASS_2_STRUC");
	MakeComm	(0XBCFE,	"EXPECTED_VERSION (COMMAND.COM version)");
	MakeWord	(0XBCFE);
	MakeComm	(0XBD00,	"Class_2_MessageCount");
	MakeByte	(0XBD00);
	MakeComm	(0XBD01,	"Message Number = -1");
	MakeWord	(0XBD01);
	MakeName	(0XBD01,	"$M_ID_2_1");
	MakeComm	(0XBD03,	"Message offset from message number");
	MakeWord	(0XBD03);
	MakeByte	(x=0XBD05);
	OpDecimal	(x,	0);
	MakeName	(0XBD05,	"PARSE999");
	MakeStr		(0XBD06,	0XBD14);
	MakeCode	(0XBD14);
	MakeName	(0XBD14,	"$M_MSGSERV_2");
	MakeCode	(x=0XBD16);
	OpOff		(x,	1,	0X2890);
	OpOff		(x,	129,	0X2890);
	MakeCode	(x=0XBD1A);
	OpDecimal	(x,	1);
	MakeByte	(0XBD1E);
	MakeName	(0XBD1E,	"msg_disp_class");
	MakeByte	(0XBD1F);
	MakeName	(0XBD1F,	"msg_cont_flag");
	MakeWord	(0XBD20);
	MakeName	(0XBD20,	"extend_buf_ptr");
	MakeByte	(0XBD22);
	MakeName	(0XBD22,	"extend_buf_sub");
	MakeByte	(x=0XBD23);
	OpDecimal	(x,	0);
	MakeByte	(0XBD24);
	MakeWord	(x=0XBD25);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XBD25,	"extend_buf_off");
	MakeWord	(0XBD27);
	MakeName	(0XBD27,	"extend_buf_seg");
	MakeByte	(0XBD29);
	MakeComm	(0XBD2A,	"Char_field_ASCIIZ");
	MakeByte	(0XBD2A);
	MakeByte	(x=0XBD2B);
	OpDecimal	(x,	0);
	MakeByte	(0XBD2C);
	MakeComm	(0XBD2D,	"blank");
	MakeByte	(0XBD2D);
	MakeWord	(x=0XBD2E);
	OpDecimal	(x,	0);
	MakeName	(0XBD2E,	"RENERR_PTR");
	MakeByte	(0XBD30);
	MakeWord	(x=0XBD31);
	OpDecimal	(x,	0);
	MakeName	(0XBD31,	"BADCPMES_PTR");
	MakeByte	(0XBD33);
	MakeWord	(x=0XBD34);
	OpDecimal	(x,	0);
	MakeName	(0XBD34,	"NOSPACE_PTR");
	MakeByte	(0XBD36);
	MakeWord	(x=0XBD37);
	OpDecimal	(x,	0);
	MakeName	(0XBD37,	"ENVERR_PTR");
	MakeByte	(0XBD39);
	MakeWord	(x=0XBD3A);
	OpDecimal	(x,	0);
	MakeName	(0XBD3A,	"FULLDIR_PTR");
	MakeByte	(0XBD3C);
	MakeWord	(x=0XBD3D);
	OpDecimal	(x,	0);
	MakeName	(0XBD3D,	"BADBAT_PTR");
	MakeByte	(0XBD3F);
	MakeWord	(x=0XBD40);
	OpDecimal	(x,	0);
	MakeName	(0XBD40,	"NEEDBAT_PTR");
	MakeByte	(0XBD42);
	MakeWord	(x=0XBD43);
	OpDecimal	(x,	0);
	MakeName	(0XBD43,	"BADNAM_PTR");
	MakeByte	(0XBD45);
	MakeWord	(x=0XBD46);
	OpDecimal	(x,	0);
	MakeName	(0XBD46,	"REXXNOTF_PTR");
	MakeByte	(0XBD48);
	MakeWord	(x=0XBD49);
	OpDecimal	(x,	0);
	MakeName	(0XBD49,	"ACCDEN_PTR");
	MakeByte	(0XBD4B);
	MakeWord	(x=0XBD4C);
	OpDecimal	(x,	0);
	MakeName	(0XBD4C,	"OVERWR_PTR");
	MakeByte	(0XBD4E);
	MakeWord	(x=0XBD4F);
	OpDecimal	(x,	0);
	MakeName	(0XBD4F,	"LOSTERR_PTR");
	MakeByte	(0XBD51);
	MakeWord	(x=0XBD52);
	OpDecimal	(x,	0);
	MakeName	(0XBD52,	"INORNOT_PTR");
	MakeByte	(0XBD54);
	MakeWord	(x=0XBD55);
	OpDecimal	(x,	0);
	MakeName	(0XBD55,	"copied_ptr");
	MakeByte	(0XBD57);
	MakeComm	(0XBD58,	"parm_block_size");
	MakeByte	(x=0XBD58);
	OpDecimal	(x,	0);
	MakeByte	(0XBD59);
	MakeWord	(x=0XBD5A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBD5C);
	MakeByte	(0XBD5E);
	MakeComm	(0XBD5F,	"Right_Align+Unsgn_Bin_Word");
	MakeByte	(0XBD5F);
	MakeComm	(0XBD60,	"maximum width");
	MakeByte	(0XBD60);
	MakeComm	(0XBD61,	"minimum width");
	MakeByte	(0XBD61);
	MakeComm	(0XBD62,	"pad character");
	MakeByte	(0XBD62);
	MakeWord	(x=0XBD63);
	OpDecimal	(x,	0);
	MakeName	(0XBD63,	"dirmes_ptr");
	MakeByte	(0XBD65);
	MakeByte	(x=0XBD66);
	OpDecimal	(x,	0);
	MakeByte	(0XBD67);
	MakeWord	(x=0XBD68);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBD6A);
	MakeByte	(0XBD6C);
	MakeComm	(0XBD6D,	"Right_Align+Unsgn_Bin_Word");
	MakeByte	(0XBD6D);
	MakeByte	(0XBD6E);
	MakeByte	(0XBD6F);
	MakeByte	(0XBD70);
	MakeWord	(x=0XBD71);
	OpDecimal	(x,	0);
	MakeName	(0XBD71,	"dirmes_w_ptr");
	MakeByte	(0XBD73);
	MakeByte	(x=0XBD74);
	OpDecimal	(x,	0);
	MakeByte	(0XBD75);
	MakeWord	(x=0XBD76);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBD78);
	MakeByte	(0XBD7A);
	MakeComm	(0XBD7B,	"long binary to decimal");
	MakeByte	(0XBD7B);
	MakeByte	(x=0XBD7C);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBD7D);
	OpDecimal	(x,	0);
	MakeByte	(0XBD7E);
	MakeWord	(x=0XBD7F);
	OpDecimal	(x,	0);
	MakeName	(0XBD7F,	"dirmes2_ptr");
	MakeByte	(0XBD81);
	MakeByte	(x=0XBD82);
	OpDecimal	(x,	0);
	MakeByte	(0XBD83);
	MakeWord	(x=0XBD84);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBD86);
	MakeByte	(0XBD88);
	MakeComm	(0XBD89,	"Right_Align+Unsgn_Bin_DWord");
	MakeByte	(0XBD89);
	MakeByte	(0XBD8A);
	MakeByte	(0XBD8B);
	MakeByte	(0XBD8C);
	MakeWord	(x=0XBD8D);
	OpDecimal	(x,	0);
	MakeName	(0XBD8D,	"bytmes1_ptr");
	MakeByte	(0XBD8F);
	MakeByte	(x=0XBD90);
	OpDecimal	(x,	0);
	MakeByte	(0XBD91);
	MakeWord	(x=0XBD92);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBD94);
	MakeByte	(0XBD96);
	MakeComm	(0XBD97,	"long binary to decimal");
	MakeByte	(0XBD97);
	MakeComm	(0XBD98,	"maximum width");
	MakeByte	(x=0XBD98);
	OpDecimal	(x,	0);
	MakeComm	(0XBD99,	"minimum width");
	MakeByte	(x=0XBD99);
	OpDecimal	(x,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_4(void) {
        auto x;
#define id x

	MakeComm	(0XBD9A,	"blank");
	MakeByte	(0XBD9A);
	MakeWord	(x=0XBD9B);
	OpDecimal	(x,	0);
	MakeName	(0XBD9B,	"bytmes2_ptr");
	MakeByte	(0XBD9D);
	MakeByte	(x=0XBD9E);
	OpDecimal	(x,	0);
	MakeByte	(0XBD9F);
	MakeWord	(x=0XBDA0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBDA2);
	MakeByte	(0XBDA4);
	MakeComm	(0XBDA5,	"long binary to decimal");
	MakeByte	(0XBDA5);
	MakeComm	(0XBDA6,	"maximum width");
	MakeByte	(x=0XBDA6);
	OpDecimal	(x,	0);
	MakeComm	(0XBDA7,	"minimum width");
	MakeByte	(x=0XBDA7);
	OpDecimal	(x,	0);
	MakeComm	(0XBDA8,	"pad");
	MakeByte	(0XBDA8);
	MakeWord	(x=0XBDA9);
	OpDecimal	(x,	0);
	MakeName	(0XBDA9,	"bytmes_n_ptr");
	MakeByte	(0XBDAB);
	MakeComm	(0XBDAC,	"parm_block_size");
	MakeByte	(x=0XBDAC);
	OpDecimal	(x,	0);
	MakeByte	(0XBDAD);
	MakeWord	(x=0XBDAE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBDB0);
	MakeByte	(0XBDB2);
	MakeComm	(0XBDB3,	"Right_Align+Unsgn_Bin_DWord");
	MakeByte	(0XBDB3);
	MakeByte	(x=0XBDB4);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBDB5);
	OpDecimal	(x,	0);
	MakeByte	(0XBDB6);
	MakeWord	(x=0XBDB7);
	OpDecimal	(x,	0);
	MakeName	(0XBDB7,	"baddrv_ptr");
	MakeByte	(0XBDB9);
	MakeWord	(x=0XBDBA);
	OpDecimal	(x,	0);
	MakeName	(0XBDBA,	"cp_not_set_ptr");
	MakeByte	(0XBDBC);
	MakeByte	(x=0XBDBD);
	OpDecimal	(x,	0);
	MakeByte	(0XBDBE);
	MakeWord	(x=0XBDBF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBDC1);
	MakeByte	(0XBDC3);
	MakeByte	(0XBDC4);
	MakeByte	(0XBDC5);
	MakeByte	(0XBDC6);
	MakeByte	(0XBDC7);
	MakeWord	(x=0XBDC8);
	OpDecimal	(x,	0);
	MakeName	(0XBDC8,	"cp_not_all_ptr");
	MakeByte	(0XBDCA);
	MakeByte	(x=0XBDCB);
	OpDecimal	(x,	0);
	MakeByte	(0XBDCC);
	MakeWord	(x=0XBDCD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBDCF);
	MakeByte	(0XBDD1);
	MakeComm	(0XBDD2,	"Right_Align+Unsgn_Bin_Word");
	MakeByte	(0XBDD2);
	MakeByte	(0XBDD3);
	MakeByte	(0XBDD4);
	MakeByte	(0XBDD5);
	MakeWord	(x=0XBDD6);
	OpDecimal	(x,	0);
	MakeName	(0XBDD6,	"cp_active_ptr");
	MakeByte	(0XBDD8);
	MakeByte	(x=0XBDD9);
	OpDecimal	(x,	0);
	MakeByte	(0XBDDA);
	MakeWord	(x=0XBDDB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBDDD);
	MakeByte	(0XBDDF);
	MakeByte	(0XBDE0);
	MakeByte	(0XBDE1);
	MakeByte	(0XBDE2);
	MakeByte	(0XBDE3);
	MakeWord	(x=0XBDE4);
	OpDecimal	(x,	0);
	MakeName	(0XBDE4,	"NLSFUNC_PTR");
	MakeByte	(0XBDE6);
	MakeWord	(x=0XBDE7);
	OpDecimal	(x,	0);
	MakeName	(0XBDE7,	"INV_CODE_PAGE");
	MakeByte	(0XBDE9);
	MakeWord	(x=0XBDEA);
	OpDecimal	(x,	0);
	MakeName	(0XBDEA,	"BADCURDRV");
	MakeByte	(0XBDEC);
	MakeWord	(x=0XBDED);
	OpDecimal	(x,	0);
	MakeName	(0XBDED,	"PAUSEMES_PTR");
	MakeByte	(0XBDEF);
	MakeWord	(x=0XBDF0);
	OpDecimal	(x,	0);
	MakeName	(0XBDF0,	"BADLAB_PTR");
	MakeByte	(0XBDF2);
	MakeWord	(x=0XBDF3);
	OpDecimal	(x,	0);
	MakeName	(0XBDF3,	"SYNTMES_PTR");
	MakeByte	(0XBDF5);
	MakeWord	(x=0XBDF6);
	OpDecimal	(x,	0);
	MakeName	(0XBDF6,	"BADDAT_PTR");
	MakeByte	(0XBDF8);
	MakeWord	(x=0XBDF9);
	OpDecimal	(x,	0);
	MakeName	(0XBDF9,	"CurDat_Ptr");
	MakeByte	(0XBDFB);
	MakeByte	(x=0XBDFC);
	OpDecimal	(x,	0);
	MakeByte	(0XBDFD);
	MakeComm	(0XBDFE,	"Arg_Buf");
	MakeWord	(x=0XBDFE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBE00);
	MakeByte	(0XBE02);
	MakeComm	(0XBE03,	"Char_field_ASCIIZ");
	MakeByte	(0XBE03);
	MakeByte	(0XBE04);
	MakeByte	(0XBE05);
	MakeByte	(0XBE06);
	MakeByte	(x=0XBE07);
	OpDecimal	(x,	0);
	MakeByte	(0XBE08);
	MakeWord	(0XBE09);
	MakeName	(0XBE09,	"CurDat_yr");
	MakeWord	(0XBE0B);
	MakeName	(0XBE0B,	"CurDat_mo_day");
	MakeByte	(0XBE0D);
	MakeComm	(0XBE0E,	"DATE_MDY_4");
	MakeByte	(0XBE0E);
	MakeByte	(x=0XBE0F);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBE10);
	OpDecimal	(x,	0);
	MakeByte	(0XBE11);
	MakeWord	(x=0XBE12);
	OpDecimal	(x,	0);
	MakeName	(0XBE12,	"WeekTab");
	MakeByte	(0XBE14);
	MakeWord	(x=0XBE15);
	OpDecimal	(x,	0);
	MakeName	(0XBE15,	"NewDat_Ptr");
	MakeByte	(0XBE17);
	MakeByte	(x=0XBE18);
	OpDecimal	(x,	0);
	MakeByte	(0XBE19);
	MakeWord	(0XBE1A);
	MakeName	(0XBE1A,	"NewDat_Format");
	MakeWord	(0XBE1C);
	MakeByte	(0XBE1E);
	MakeComm	(0XBE1F,	"Char_field_ASCIIZ");
	MakeByte	(0XBE1F);
	MakeByte	(0XBE20);
	MakeByte	(0XBE21);
	MakeByte	(0XBE22);
	MakeWord	(x=0XBE23);
	OpDecimal	(x,	0);
	MakeName	(0XBE23,	"BadTim_Ptr");
	MakeByte	(0XBE25);
	MakeWord	(x=0XBE26);
	OpDecimal	(x,	0);
	MakeName	(0XBE26,	"CurTim_Ptr");
	MakeByte	(0XBE28);
	MakeByte	(x=0XBE29);
	OpDecimal	(x,	0);
	MakeByte	(0XBE2A);
	MakeWord	(0XBE2B);
	MakeName	(0XBE2B,	"CurTim_hr_min");
	MakeWord	(0XBE2D);
	MakeName	(0XBE2D,	"CurTim_Sec_hn");
	MakeByte	(0XBE2F);
	MakeComm	(0XBE30,	"Right_Align+TIME_HHMMSSHH_Cty");
	MakeByte	(0XBE30);
	MakeByte	(x=0XBE31);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBE32);
	OpDecimal	(x,	0);
	MakeByte	(0XBE33);
	MakeWord	(x=0XBE34);
	OpDecimal	(x,	0);
	MakeName	(0XBE34,	"NewTim_Ptr");
	MakeByte	(0XBE36);
	MakeWord	(x=0XBE37);
	OpDecimal	(x,	0);
	MakeName	(0XBE37,	"Del_Y_N_Ptr");
	MakeByte	(0XBE39);
	MakeWord	(x=0XBE3A);
	OpDecimal	(x,	0);
	MakeName	(0XBE3A,	"SureMes_Ptr");
	MakeByte	(0XBE3C);
	MakeWord	(x=0XBE3D);
	OpDecimal	(x,	0);
	MakeName	(0XBE3D,	"VerMes_Ptr");
	MakeComm	(0XBE3F,	"number of subst");
	MakeByte	(0XBE3F);
	MakeByte	(x=0XBE40);
	OpDecimal	(x,	0);
	MakeByte	(0XBE41);
	MakeWord	(x=0XBE42);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBE44);
	MakeByte	(0XBE46);
	MakeComm	(0XBE47,	"Right_Align+Unsgn_Bin_Word");
	MakeByte	(0XBE47);
	MakeByte	(0XBE48);
	MakeByte	(0XBE49);
	MakeByte	(0XBE4A);
	MakeByte	(x=0XBE4B);
	OpDecimal	(x,	0);
	MakeByte	(0XBE4C);
	MakeWord	(x=0XBE4D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBE4F);
	MakeByte	(0XBE51);
	MakeComm	(0XBE52,	"Right_Align+Unsgn_Bin_Word");
	MakeByte	(0XBE52);
	MakeByte	(0XBE53);
	MakeByte	(0XBE54);
	MakeComm	(0XBE55,	"30h ; pad character");
	MakeByte	(x=0XBE55);
	OpChr		(x,	0);
	MakeWord	(x=0XBE56);
	OpDecimal	(x,	0);
	MakeName	(0XBE56,	"VolMes_Ptr_2");
	MakeByte	(0XBE58);
	MakeByte	(x=0XBE59);
	OpDecimal	(x,	0);
	MakeByte	(0XBE5A);
	MakeWord	(x=0XBE5B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBE5D);
	MakeByte	(0XBE5F);
	MakeComm	(0XBE60,	"Char_field_Char");
	MakeByte	(0XBE60);
	MakeByte	(x=0XBE61);
	OpDecimal	(x,	0);
	MakeByte	(0XBE62);
	MakeByte	(0XBE63);
	MakeWord	(x=0XBE64);
	OpDecimal	(x,	0);
	MakeName	(0XBE64,	"VolMes_Ptr");
	MakeByte	(0XBE66);
	MakeByte	(x=0XBE67);
	OpDecimal	(x,	0);
	MakeByte	(0XBE68);
	MakeWord	(x=0XBE69);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBE6B);
	MakeByte	(0XBE6D);
	MakeComm	(0XBE6E,	"character");
	MakeByte	(0XBE6E);
	MakeByte	(x=0XBE6F);
	OpDecimal	(x,	0);
	MakeByte	(0XBE70);
	MakeComm	(0XBE71,	"blank (space)");
	MakeByte	(0XBE71);
	MakeByte	(x=0XBE72);
	OpDecimal	(x,	0);
	MakeByte	(0XBE73);
	MakeWord	(x=0XBE74);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBE76);
	MakeByte	(0XBE78);
	MakeComm	(0XBE79,	"Char_field_ASCIIZ");
	MakeByte	(0XBE79);
	MakeByte	(x=0XBE7A);
	OpDecimal	(x,	0);
	MakeByte	(0XBE7B);
	MakeByte	(0XBE7C);
	MakeWord	(x=0XBE7D);
	OpDecimal	(x,	0);
	MakeName	(0XBE7D,	"VolSerMes_Ptr");
	MakeByte	(0XBE7F);
	MakeByte	(x=0XBE80);
	OpDecimal	(x,	0);
	MakeByte	(0XBE81);
	MakeWord	(x=0XBE82);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBE84);
	MakeComm	(0XBE86,	"first subst");
	MakeByte	(0XBE86);
	MakeComm	(0XBE87,	"Right_Align+Bin_Hex_Word");
	MakeByte	(0XBE87);
	MakeByte	(0XBE88);
	MakeByte	(0XBE89);
	MakeComm	(0XBE8A,	"'0'");
	MakeByte	(0XBE8A);
	MakeByte	(x=0XBE8B);
	OpDecimal	(x,	0);
	MakeByte	(0XBE8C);
	MakeWord	(x=0XBE8D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBE8F);
	MakeComm	(0XBE91,	"second subst");
	MakeByte	(0XBE91);
	MakeComm	(0XBE92,	"Right_Align+Bin_Hex_Word");
	MakeByte	(0XBE92);
	MakeByte	(0XBE93);
	MakeByte	(0XBE94);
	MakeByte	(0XBE95);
	MakeWord	(x=0XBE96);
	OpDecimal	(x,	0);
	MakeName	(0XBE96,	"badcd_ptr");
	MakeByte	(0XBE98);
	MakeWord	(x=0XBE99);
	OpDecimal	(x,	0);
	MakeName	(0XBE99,	"badmkd_ptr");
	MakeByte	(0XBE9B);
	MakeWord	(x=0XBE9C);
	OpDecimal	(x,	0);
	MakeName	(0XBE9C,	"badrmd_ptr");
	MakeByte	(0XBE9E);
	MakeWord	(x=0XBE9F);
	OpDecimal	(x,	0);
	MakeName	(0XBE9F,	"bad_on_off_ptr");
	MakeByte	(0XBEA1);
	MakeWord	(x=0XBEA2);
	OpDecimal	(x,	0);
	MakeName	(0XBEA2,	"dirhead_ptr");
	MakeByte	(0XBEA4);
	MakeByte	(x=0XBEA5);
	OpDecimal	(x,	0);
	MakeByte	(0XBEA6);
	MakeWord	(x=0XBEA7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBEA9);
	MakeByte	(0XBEAB);
	MakeComm	(0XBEAC,	"Char_field_ASCIIZ");
	MakeByte	(0XBEAC);
	MakeByte	(x=0XBEAD);
	OpDecimal	(x,	0);
	MakeByte	(0XBEAE);
	MakeByte	(0XBEAF);
	MakeWord	(x=0XBEB0);
	OpDecimal	(x,	0);
	MakeName	(0XBEB0,	"NULLPATH_PTR");
	MakeByte	(0XBEB2);
	MakeWord	(x=0XBEB3);
	OpDecimal	(x,	0);
	MakeName	(0XBEB3,	"BADPMES_PTR");
	MakeByte	(0XBEB5);
	MakeWord	(x=0XBEB6);
	OpDecimal	(x,	0);
	MakeName	(0XBEB6,	"BADDEV_PTR");
	MakeByte	(0XBEB8);
	MakeWord	(x=0XBEB9);
	OpDecimal	(x,	0);
	MakeName	(0XBEB9,	"FORNESTMES_PTR");
	MakeByte	(0XBEBB);
	MakeWord	(x=0XBEBC);
	OpDecimal	(x,	0);
	MakeName	(0XBEBC,	"PIPEEMES_PTR");
	MakeByte	(0XBEBE);
	MakeWord	(x=0XBEBF);
	OpDecimal	(x,	0);
	MakeName	(0XBEBF,	"INBDEV_PTR");
	MakeByte	(0XBEC1);
	MakeWord	(x=0XBEC2);
	OpDecimal	(x,	0);
	MakeName	(0XBEC2,	"CtrlcMes_Ptr");
	MakeByte	(0XBEC4);
	MakeByte	(x=0XBEC5);
	OpDecimal	(x,	0);
	MakeByte	(0XBEC6);
	MakeWord	(0XBEC7);
	MakeWord	(0XBEC9);
	MakeByte	(0XBECB);
	MakeByte	(0XBECC);
	MakeByte	(x=0XBECD);
	OpDecimal	(x,	0);
	MakeByte	(0XBECE);
	MakeByte	(0XBECF);
	MakeWord	(x=0XBED0);
	OpDecimal	(x,	0);
	MakeName	(0XBED0,	"VeriMes_Ptr");
	MakeByte	(0XBED2);
	MakeByte	(x=0XBED3);
	OpDecimal	(x,	0);
	MakeByte	(0XBED4);
	MakeWord	(0XBED5);
	MakeWord	(0XBED7);
	MakeByte	(0XBED9);
	MakeByte	(0XBEDA);
	MakeByte	(x=0XBEDB);
	OpDecimal	(x,	0);
	MakeByte	(0XBEDC);
	MakeByte	(0XBEDD);
	MakeWord	(x=0XBEDE);
	OpDecimal	(x,	0);
	MakeName	(0XBEDE,	"EchoMes_Ptr");
	MakeByte	(0XBEE0);
	MakeByte	(x=0XBEE1);
	OpDecimal	(x,	0);
	MakeByte	(0XBEE2);
	MakeWord	(0XBEE3);
	MakeWord	(0XBEE5);
	MakeByte	(0XBEE7);
	MakeByte	(0XBEE8);
	MakeByte	(x=0XBEE9);
	OpDecimal	(x,	0);
	MakeByte	(0XBEEA);
	MakeByte	(0XBEEB);
	MakeWord	(x=0XBEEC);
	OpDecimal	(x,	0);
	MakeName	(0XBEEC,	"OFFMES_PTR");
	MakeByte	(0XBEEE);
	MakeWord	(x=0XBEEF);
	OpDecimal	(x,	0);
	MakeName	(0XBEEF,	"ONMES_PTR");
	MakeByte	(0XBEF1);
	MakeWord	(x=0XBEF2);
	OpDecimal	(x,	0);
	MakeName	(0XBEF2,	"DEVWMES_PTR");
	MakeByte	(0XBEF4);
	MakeWord	(x=0XBEF5);
	OpDecimal	(x,	0);
	MakeName	(0XBEF5,	"INVAL_PATH_PTR");
	MakeByte	(0XBEF7);
	MakeWord	(x=0XBEF8);
	OpDecimal	(x,	0);
	MakeName	(0XBEF8,	"arg_buf_ptr");
	MakeByte	(0XBEFA);
	MakeByte	(x=0XBEFB);
	OpDecimal	(x,	0);
	MakeByte	(0XBEFC);
	MakeComm	(0XBEFD,	"Arg_Buf");
	MakeWord	(x=0XBEFD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBEFF);
	MakeByte	(0XBF01);
	MakeComm	(0XBF02,	"Char_field_ASCIIZ");
	MakeByte	(0XBF02);
	MakeByte	(x=0XBF03);
	OpDecimal	(x,	0);
	MakeByte	(0XBF04);
	MakeByte	(0XBF05);
	MakeWord	(x=0XBF06);
	OpDecimal	(x,	0);
	MakeName	(0XBF06,	"file_name_ptr");
	MakeByte	(0XBF08);
	MakeByte	(x=0XBF09);
	OpDecimal	(x,	0);
	MakeByte	(0XBF0A);
	MakeWord	(x=0XBF0B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBF0D);
	MakeByte	(0XBF0F);
	MakeComm	(0XBF10,	"Char_field_ASCIIZ");
	MakeByte	(0XBF10);
	MakeByte	(x=0XBF11);
	OpDecimal	(x,	0);
	MakeByte	(0XBF12);
	MakeByte	(0XBF13);
	MakeWord	(x=0XBF14);
	OpDecimal	(x,	0);
	MakeName	(0XBF14,	"disp_file_size_ptr");
	MakeByte	(0XBF16);
	MakeByte	(x=0XBF17);
	OpDecimal	(x,	0);
	MakeByte	(0XBF18);
	MakeWord	(x=0XBF19);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBF1B);
	MakeByte	(0XBF1D);
	MakeByte	(0XBF1E);
	MakeByte	(x=0XBF1F);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBF20);
	OpDecimal	(x,	0);
	MakeByte	(0XBF21);
	MakeWord	(x=0XBF22);
	OpDecimal	(x,	0);
	MakeName	(0XBF22,	"disp_file_size_w_ptr");
	MakeByte	(0XBF24);
	MakeByte	(x=0XBF25);
	OpDecimal	(x,	0);
	MakeByte	(0XBF26);
	MakeWord	(x=0XBF27);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBF29);
	MakeByte	(0XBF2B);
	MakeComm	(0XBF2C,	"long binary to decimal");
	MakeByte	(0XBF2C);
	MakeByte	(x=0XBF2D);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBF2E);
	OpDecimal	(x,	0);
	MakeByte	(0XBF2F);
	MakeWord	(x=0XBF30);
	OpDecimal	(x,	0);
	MakeName	(0XBF30,	"disp_file_size_n_ptr");
	MakeByte	(0XBF32);
	MakeByte	(x=0XBF33);
	OpDecimal	(x,	0);
	MakeByte	(0XBF34);
	MakeWord	(x=0XBF35);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBF37);
	MakeByte	(0XBF39);
	MakeComm	(0XBF3A,	"Right_Align+Unsgn_Bin_DWord");
	MakeByte	(0XBF3A);
	MakeByte	(x=0XBF3B);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBF3C);
	OpDecimal	(x,	0);
	MakeByte	(0XBF3D);
	MakeWord	(x=0XBF3E);
	OpDecimal	(x,	0);
	MakeName	(0XBF3E,	"string_buf_ptr");
	MakeByte	(0XBF40);
	MakeByte	(x=0XBF41);
	OpDecimal	(x,	0);
	MakeByte	(0XBF42);
	MakeWord	(x=0XBF43);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBF45);
	MakeByte	(0XBF47);
	MakeComm	(0XBF48,	"Char_field_ASCIIZ");
	MakeByte	(0XBF48);
	MakeByte	(x=0XBF49);
	OpDecimal	(x,	0);
	MakeByte	(0XBF4A);
	MakeByte	(0XBF4B);
	MakeByte	(0XBF4C);
	MakeWord	(x=0XBF4D);
	OpDecimal	(x,	0);
	MakeName	(0XBF4D,	"tab_ptr");
	MakeByte	(0XBF4F);
	MakeWord	(x=0XBF50);
	OpDecimal	(x,	0);
	MakeName	(0XBF50,	"dmes_ptr");
	MakeByte	(0XBF52);
	MakeWord	(x=0XBF53);
	OpDecimal	(x,	0);
	MakeName	(0XBF53,	"space_4_ptr");
	MakeByte	(0XBF55);
	MakeWord	(x=0XBF56);
	OpDecimal	(x,	0);
	MakeName	(0XBF56,	"dback_ptr");
	MakeByte	(0XBF58);
	MakeWord	(x=0XBF59);
	OpDecimal	(x,	0);
	MakeName	(0XBF59,	"acrlf_ptr");
	MakeByte	(0XBF5B);
	MakeWord	(x=0XBF5C);
	OpDecimal	(x,	0);
	MakeName	(0XBF5C,	"usadat_ptr");
	MakeByte	(0XBF5E);
	MakeWord	(x=0XBF5F);
	OpDecimal	(x,	0);
	MakeName	(0XBF5F,	"eurdat_ptr");
	MakeByte	(0XBF61);
	MakeWord	(x=0XBF62);
	OpDecimal	(x,	0);
	MakeName	(0XBF62,	"japdat_ptr");
	MakeByte	(0XBF64);
	MakeWord	(x=0XBF65);
	OpDecimal	(x,	0);
	MakeName	(0XBF65,	"promptdat_ptr");
	MakeByte	(0XBF67);
	MakeByte	(x=0XBF68);
	OpDecimal	(x,	0);
	MakeByte	(0XBF69);
	MakeComm	(0XBF6A,	"Arg_Buf");
	MakeWord	(x=0XBF6A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBF6C);
	MakeByte	(0XBF6E);
	MakeComm	(0XBF6F,	"Char_field_ASCIIZ");
	MakeByte	(0XBF6F);
	MakeByte	(0XBF70);
	MakeByte	(0XBF71);
	MakeByte	(0XBF72);
	MakeByte	(x=0XBF73);
	OpDecimal	(x,	0);
	MakeByte	(0XBF74);
	MakeWord	(0XBF75);
	MakeName	(0XBF75,	"promptDat_yr");
	MakeWord	(0XBF77);
	MakeName	(0XBF77,	"promptDat_moday");
	MakeByte	(0XBF79);
	MakeComm	(0XBF7A,	"DATE_MDY_4");
	MakeByte	(0XBF7A);
	MakeByte	(x=0XBF7B);
	OpDecimal	(x,	0);
	MakeByte	(0XBF7C);
	MakeByte	(0XBF7D);
	MakeWord	(x=0XBF7E);
	OpDecimal	(x,	0);
	MakeName	(0XBF7E,	"promtim_ptr");
	MakeByte	(0XBF80);
	MakeByte	(x=0XBF81);
	OpDecimal	(x,	0);
	MakeByte	(0XBF82);
	MakeWord	(0XBF83);
	MakeName	(0XBF83,	"PromTim_hr_min");
	MakeWord	(0XBF85);
	MakeName	(0XBF85,	"PromTim_Sec_hn");
	MakeByte	(0XBF87);
	MakeComm	(0XBF88,	"Right_Align+TIME_HHMMSSHH_24");
	MakeByte	(0XBF88);
	MakeByte	(x=0XBF89);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBF8A);
	OpDecimal	(x,	0);
	MakeByte	(0XBF8B);
	MakeWord	(x=0XBF8C);
	OpDecimal	(x,	0);
	MakeName	(0XBF8C,	"dirdattim_ptr");
	MakeByte	(0XBF8E);
	MakeByte	(x=0XBF8F);
	OpDecimal	(x,	0);
	MakeByte	(0XBF90);
	MakeWord	(0XBF91);
	MakeName	(0XBF91,	"DirDat_Yr");
	MakeWord	(0XBF93);
	MakeName	(0XBF93,	"DirDat_Mo_Day");
	MakeByte	(0XBF95);
	MakeComm	(0XBF96,	"Right_Align+DATE_MDY_2");
	MakeByte	(0XBF96);
	MakeName	(0XBF96,	"DirDat_form");
	MakeByte	(x=0XBF97);
	OpDecimal	(x,	0);
	MakeName	(0XBF97,	"DirDat_width");
	MakeComm	(0XBF98,	"minimum width");
	MakeByte	(0XBF98);
	MakeByte	(0XBF99);
	MakeByte	(x=0XBF9A);
	OpDecimal	(x,	0);
	MakeByte	(0XBF9B);
	MakeWord	(0XBF9C);
	MakeName	(0XBF9C,	"DirTim_Hr_Min");
	MakeWord	(0XBF9E);
	MakeName	(0XBF9E,	"DirTim_Sec_hn");
	MakeByte	(0XBFA0);
	MakeComm	(0XBFA1,	"Right_align+TIME_HHMM_Cty");
	MakeByte	(0XBFA1);
	MakeByte	(0XBFA2);
	MakeByte	(0XBFA3);
	MakeByte	(0XBFA4);
	MakeWord	(x=0XBFA5);
	OpDecimal	(x,	0);
	MakeName	(0XBFA5,	"MD_EXISTS_PTR");
	MakeByte	(0XBFA7);
	MakeWord	(x=0XBFA8);
	OpDecimal	(x,	0);
	MakeName	(0XBFA8,	"bytes_ptr");
	MakeByte	(0XBFAA);
	MakeByte	(x=0XBFAB);
	OpDecimal	(x,	0);
	MakeByte	(0XBFAC);
	MakeWord	(x=0XBFAD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBFAF);
	MakeByte	(0XBFB1);
	MakeByte	(0XBFB2);
	MakeByte	(x=0XBFB3);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBFB4);
	OpDecimal	(x,	0);
	MakeByte	(0XBFB5);
	MakeWord	(x=0XBFB6);
	OpDecimal	(x,	0);
	MakeName	(0XBFB6,	"bytes_w_tr");
	MakeByte	(0XBFB8);
	MakeByte	(x=0XBFB9);
	OpDecimal	(x,	0);
	MakeByte	(0XBFBA);
	MakeWord	(x=0XBFBB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBFBD);
	MakeByte	(0XBFBF);
	MakeByte	(0XBFC0);
	MakeByte	(x=0XBFC1);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBFC2);
	OpDecimal	(x,	0);
	MakeByte	(0XBFC3);
	MakeWord	(x=0XBFC4);
	OpDecimal	(x,	0);
	MakeName	(0XBFC4,	"bytes_n_ptr");
	MakeByte	(0XBFC6);
	MakeByte	(x=0XBFC7);
	OpDecimal	(x,	0);
	MakeByte	(0XBFC8);
	MakeByte	(0XBFC9);
	MakeByte	(x=0XBFCA);
	OpDecimal	(x,	0);
	MakeByte	(0XBFCB);
	MakeByte	(0XBFCC);
	MakeByte	(0XBFCD);
	MakeByte	(0XBFCE);
	MakeByte	(x=0XBFCF);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBFD0);
	OpDecimal	(x,	0);
	MakeByte	(0XBFD1);
	MakeWord	(x=0XBFD2);
	OpDecimal	(x,	0);
	MakeName	(0XBFD2,	"kbytes_ptr");
	MakeByte	(0XBFD4);
	MakeByte	(x=0XBFD5);
	OpDecimal	(x,	0);
	MakeByte	(0XBFD6);
	MakeByte	(0XBFD7);
	MakeByte	(x=0XBFD8);
	OpDecimal	(x,	0);
	MakeByte	(0XBFD9);
	MakeByte	(0XBFDA);
	MakeByte	(0XBFDB);
	MakeByte	(0XBFDC);
	MakeByte	(x=0XBFDD);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBFDE);
	OpDecimal	(x,	0);
	MakeByte	(0XBFDF);
	MakeWord	(x=0XBFE0);
	OpDecimal	(x,	0);
	MakeName	(0XBFE0,	"kybytes_n_ptr");
	MakeByte	(0XBFE2);
	MakeByte	(x=0XBFE3);
	OpDecimal	(x,	0);
	MakeByte	(0XBFE4);
	MakeWord	(x=0XBFE5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XBFE7);
	MakeByte	(0XBFE9);
	MakeByte	(0XBFEA);
	MakeByte	(x=0XBFEB);
	OpDecimal	(x,	0);
	MakeByte	(x=0XBFEC);
	OpDecimal	(x,	0);
	MakeByte	(0XBFED);
	MakeWord	(x=0XBFEE);
	OpDecimal	(x,	0);
	MakeName	(0XBFEE,	"total_ptr");
	MakeByte	(0XBFF0);
	MakeWord	(x=0XBFF1);
	OpDecimal	(x,	0);
	MakeName	(0XBFF1,	"errparsenv_ptr");
	MakeByte	(0XBFF3);
	MakeWord	(x=0XBFF4);
	OpDecimal	(x,	0);
	MakeName	(0XBFF4,	"cox_Y_quest_ptr");
	MakeComm	(0XBFF6,	"no_subst");
	MakeByte	(0XBFF6);
	MakeWord	(x=0XBFF7);
	OpDecimal	(x,	0);
	MakeName	(0XBFF7,	"cox_Y_answ_ptr");
	MakeByte	(0XBFF9);
	MakeWord	(x=0XBFFA);
	OpDecimal	(x,	0);
	MakeName	(0XBFFA,	"dircont_ptr");
	MakeComm	(0XBFFC,	"number of subst");
	MakeByte	(0XBFFC);
	MakeComm	(0XBFFD,	"parm_block_size ; size of sublist");
	MakeByte	(x=0XBFFD);
	OpDecimal	(x,	0);
	MakeComm	(0XBFFE,	"reserved");
	MakeByte	(0XBFFE);
	MakeComm	(0XBFFF,	"offset of arg");
	MakeWord	(x=0XBFFF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeComm	(0XC001,	"segment of arg");
	MakeWord	(0XC001);
	MakeComm	(0XC003,	"first subst");
	MakeByte	(0XC003);
	MakeComm	(0XC004,	"Char_field_ASCIIZ");
	MakeByte	(0XC004);
	MakeComm	(0XC005,	"maximum width");
	MakeByte	(x=0XC005);
	OpDecimal	(x,	0);
	MakeComm	(0XC006,	"minimum width");
	MakeByte	(0XC006);
	MakeComm	(0XC007,	"blank ; pad character");
	MakeByte	(0XC007);
	MakeWord	(x=0XC008);
	OpDecimal	(x,	0);
	MakeName	(0XC008,	"dosrev_ptr");
	MakeByte	(0XC00A);
	MakeByte	(x=0XC00B);
	OpDecimal	(x,	0);
	MakeByte	(0XC00C);
	MakeWord	(x=0XC00D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XC00F);
	MakeByte	(0XC011);
	MakeComm	(0XC012,	"CHAR_FIELD_CHAR");
	MakeByte	(0XC012);
	MakeByte	(0XC013);
	MakeByte	(0XC014);
	MakeByte	(0XC015);
	MakeWord	(x=0XC016);
	OpDecimal	(x,	0);
	MakeName	(0XC016,	"DosRom_Ptr");
	MakeByte	(0XC018);
	MakeWord	(x=0XC019);
	OpDecimal	(x,	0);
	MakeName	(0XC019,	"DosHma_Ptr");
	MakeByte	(0XC01B);
	MakeWord	(x=0XC01C);
	OpDecimal	(x,	0);
	MakeName	(0XC01C,	"DosLow_Ptr");
	MakeByte	(0XC01E);
	MakeWord	(x=0XC01F);
	OpDecimal	(x,	0);
	MakeName	(0XC01F,	"NoExecBat_Ptr");
	MakeByte	(0XC021);
	MakeWord	(x=0XC022);
	OpDecimal	(x,	0);
	MakeName	(0XC022,	"LhInvFil_Ptr");
	MakeByte	(0XC024);
	MakeWord	(x=0XC025);
	OpDecimal	(x,	0);
	MakeName	(0XC025,	"NoCntry_Ptr");
	MakeByte	(0XC027);
	MakeWord	(x=0XC028);
	OpDecimal	(x,	0);
	MakeName	(0XC028,	"LhInvArg_Ptr");
	MakeByte	(0XC02A);
	MakeWord	(x=0XC02B);
	OpDecimal	(x,	0);
	MakeName	(0XC02B,	"ReqParmMiss");
	MakeByte	(0XC02D);
	MakeWord	(x=0XC02E);
	OpDecimal	(x,	0);
	MakeName	(0XC02E,	"LhInvSwt_Ptr");
	MakeByte	(0XC030);
	MakeWord	(x=0XC031);
	OpDecimal	(x,	0);
	MakeName	(0XC031,	"LhBadUMB_Ptr");
	MakeByte	(0XC033);
	MakeWord	(x=0XC034);
	OpDecimal	(x,	0);
	MakeName	(0XC034,	"kbytesf_ptr");
	MakeByte	(0XC036);
	MakeByte	(x=0XC037);
	OpDecimal	(x,	0);
	MakeByte	(0XC038);
	MakeWord	(x=0XC039);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XC03B);
	MakeByte	(0XC03D);
	MakeComm	(0XC03E,	"long binary to decimal");
	MakeByte	(0XC03E);
	MakeByte	(x=0XC03F);
	OpDecimal	(x,	0);
	MakeByte	(x=0XC040);
	OpDecimal	(x,	0);
	MakeByte	(0XC041);
	MakeWord	(x=0XC042);
	OpDecimal	(x,	0);
	MakeName	(0XC042,	"kbytesf_n_ptr");
	MakeByte	(0XC044);
	MakeByte	(x=0XC045);
	OpDecimal	(x,	0);
	MakeByte	(0XC046);
	MakeWord	(x=0XC047);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(0XC049);
	MakeByte	(0XC04B);
	MakeComm	(0XC04C,	"Right_Align+Unsgn_Bin_DWord");
	MakeByte	(0XC04C);
	MakeByte	(x=0XC04D);
	OpDecimal	(x,	0);
	MakeByte	(x=0XC04E);
	OpDecimal	(x,	0);
	MakeByte	(0XC04F);
	MakeStr		(0XC050,	0XC055);
	MakeName	(0XC050,	"PATH_TEXT");
	MakeStr		(0XC055,	0XC05C);
	MakeName	(0XC055,	"PROMPT_TEXT");
	MakeStr		(0XC05C,	0XC064);
	MakeName	(0XC05C,	"COMSPECSTR");
	MakeStr		(0XC064,	0XC06B);
	MakeName	(0XC064,	"DirEnvVar");
	MakeStr		(0XC06B,	0XC072);
	MakeName	(0XC06B,	"no_sep_text");
	MakeWord	(x=0XC072);
	OpDecimal	(x,	0);
	MakeName	(0XC072,	"BreakHelpMsgs");
	MakeWord	(0XC074);
	MakeWord	(x=0XC076);
	OpDecimal	(x,	0);
	MakeName	(0XC076,	"ChcpHelpMsgs");
	MakeWord	(x=0XC078);
	OpDecimal	(x,	0);
	MakeWord	(0XC07A);
	MakeWord	(x=0XC07C);
	OpDecimal	(x,	0);
	MakeName	(0XC07C,	"CdHelpMsgs");
	MakeWord	(x=0XC07E);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC080);
	OpDecimal	(x,	0);
	MakeWord	(0XC082);
	MakeWord	(x=0XC084);
	OpDecimal	(x,	0);
	MakeName	(0XC084,	"ClsHelpMsgs");
	MakeWord	(0XC086);
	MakeWord	(x=0XC088);
	OpDecimal	(x,	0);
	MakeName	(0XC088,	"CopyHelpMsgs");
	MakeWord	(x=0XC08A);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC08C);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC08E);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC090);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC092);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC094);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC096);
	OpDecimal	(x,	0);
	MakeWord	(0XC098);
	MakeWord	(x=0XC09A);
	OpDecimal	(x,	0);
	MakeName	(0XC09A,	"CttyHelpMsgs");
	MakeWord	(0XC09C);
	MakeWord	(x=0XC09E);
	OpDecimal	(x,	0);
	MakeName	(0XC09E,	"DateHelpMsgs");
	MakeWord	(x=0XC0A0);
	OpDecimal	(x,	0);
	MakeWord	(0XC0A2);
	MakeWord	(x=0XC0A4);
	OpDecimal	(x,	0);
	MakeName	(0XC0A4,	"DelHelpMsgs");
	MakeWord	(x=0XC0A6);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0A8);
	OpDecimal	(x,	0);
	MakeWord	(0XC0AA);
	MakeWord	(x=0XC0AC);
	OpDecimal	(x,	0);
	MakeName	(0XC0AC,	"DirHelpMsgs");
	MakeWord	(x=0XC0AE);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0B0);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0B2);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0B4);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0B6);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0B8);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0BA);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0BC);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0BE);
	OpDecimal	(x,	0);
	MakeWord	(0XC0C0);
	MakeWord	(x=0XC0C2);
	OpDecimal	(x,	0);
	MakeName	(0XC0C2,	"ExitHelpMsgs");
	MakeWord	(0XC0C4);
	MakeWord	(x=0XC0C6);
	OpDecimal	(x,	0);
	MakeName	(0XC0C6,	"MdHelpMsgs");
	MakeWord	(0XC0C8);
	MakeWord	(x=0XC0CA);
	OpDecimal	(x,	0);
	MakeName	(0XC0CA,	"PathHelpMsgs");
	MakeWord	(x=0XC0CC);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0CE);
	OpDecimal	(x,	0);
	MakeWord	(0XC0D0);
	MakeWord	(x=0XC0D2);
	OpDecimal	(x,	0);
	MakeName	(0XC0D2,	"PromptHelpMsgs");
	MakeWord	(x=0XC0D4);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0D6);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0D8);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0DA);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0DC);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0DE);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0E0);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0E2);
	OpDecimal	(x,	0);
	MakeWord	(0XC0E4);
	MakeWord	(x=0XC0E6);
	OpDecimal	(x,	0);
	MakeName	(0XC0E6,	"RdHelpMsgs");
	MakeWord	(0XC0E8);
	MakeWord	(x=0XC0EA);
	OpDecimal	(x,	0);
	MakeName	(0XC0EA,	"RenHelpMsgs");
	MakeWord	(x=0XC0EC);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0EE);
	OpDecimal	(x,	0);
	MakeWord	(0XC0F0);
	MakeWord	(x=0XC0F2);
	OpDecimal	(x,	0);
	MakeName	(0XC0F2,	"SetHelpMsgs");
	MakeWord	(x=0XC0F4);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC0F6);
	OpDecimal	(x,	0);
	MakeWord	(0XC0F8);
	MakeWord	(x=0XC0FA);
	OpDecimal	(x,	0);
	MakeName	(0XC0FA,	"TimeHelpMsgs");
	MakeWord	(x=0XC0FC);
	OpDecimal	(x,	0);
	MakeWord	(0XC0FE);
	MakeWord	(x=0XC100);
	OpDecimal	(x,	0);
	MakeName	(0XC100,	"TypeHelpMsgs");
	MakeWord	(0XC102);
	MakeWord	(x=0XC104);
	OpDecimal	(x,	0);
	MakeName	(0XC104,	"VerHelpMsgs");
	MakeWord	(0XC106);
	MakeWord	(x=0XC108);
	OpDecimal	(x,	0);
	MakeName	(0XC108,	"VerifyHelpMsgs");
	MakeWord	(0XC10A);
	MakeWord	(x=0XC10C);
	OpDecimal	(x,	0);
	MakeName	(0XC10C,	"VolHelpMsgs");
	MakeWord	(0XC10E);
	MakeWord	(x=0XC110);
	OpDecimal	(x,	0);
	MakeName	(0XC110,	"CallHelpMsgs");
	MakeWord	(x=0XC112);
	OpDecimal	(x,	0);
	MakeWord	(0XC114);
	MakeWord	(x=0XC116);
	OpDecimal	(x,	0);
	MakeName	(0XC116,	"RemHelpMsgs");
	MakeWord	(0XC118);
	MakeWord	(x=0XC11A);
	OpDecimal	(x,	0);
	MakeName	(0XC11A,	"PauseHelpMsgs");
	MakeWord	(0XC11C);
	MakeWord	(x=0XC11E);
	OpDecimal	(x,	0);
	MakeName	(0XC11E,	"EchoHelpMsgs");
	MakeWord	(x=0XC120);
	OpDecimal	(x,	0);
	MakeWord	(0XC122);
	MakeWord	(x=0XC124);
	OpDecimal	(x,	0);
	MakeName	(0XC124,	"GotoHelpMsgs");
	MakeWord	(x=0XC126);
	OpDecimal	(x,	0);
	MakeWord	(0XC128);
	MakeWord	(x=0XC12A);
	OpDecimal	(x,	0);
	MakeName	(0XC12A,	"ShiftHelpMsgs");
	MakeWord	(0XC12C);
	MakeWord	(x=0XC12E);
	OpDecimal	(x,	0);
	MakeName	(0XC12E,	"IfHelpMsg");
	MakeWord	(x=0XC130);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC132);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC134);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC136);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC138);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC13A);
	OpDecimal	(x,	0);
	MakeWord	(0XC13C);
	MakeWord	(x=0XC13E);
	OpDecimal	(x,	0);
	MakeName	(0XC13E,	"ForHelpMsgs");
	MakeWord	(x=0XC140);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC142);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC144);
	OpDecimal	(x,	0);
	MakeWord	(0XC146);
	MakeWord	(x=0XC148);
	OpDecimal	(x,	0);
	MakeName	(0XC148,	"TruenameHelpMsgs");
	MakeWord	(0XC14A);
	MakeWord	(x=0XC14C);
	OpDecimal	(x,	0);
	MakeName	(0XC14C,	"LoadhighHelpMsgs");
	MakeWord	(x=0XC14E);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC150);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC152);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC154);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC156);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC158);
	OpDecimal	(x,	0);
	MakeWord	(x=0XC15A);
	OpDecimal	(x,	0);
	MakeWord	(0XC15C);
	MakeStr		(0XC15E,	0XC161);
	MakeName	(0XC15E,	"twospacechars");
	MakeByte	(0XC161);
	MakeName	(0XC161,	"CLSSTRING");
	MakeByte	(0XC162);
	MakeStr		(0XC163,	0XC166);
	MakeName	(0XC163,	"PROMPT_TABLE_3");
	MakeByte	(x=0XC166);
	OpChr		(x,	0);
	MakeName	(0XC166,	"PROMPT_TABLE");
	MakeWord	(x=0XC167);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC169);
	OpChr		(x,	0);
	MakeWord	(x=0XC16A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC16C);
	OpChr		(x,	0);
	MakeWord	(x=0XC16D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC16F);
	OpChr		(x,	0);
	MakeWord	(x=0XC170);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC172);
	OpChr		(x,	0);
	MakeWord	(x=0XC173);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC175);
	OpChr		(x,	0);
	MakeWord	(x=0XC176);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC178);
	OpChr		(x,	0);
	MakeWord	(x=0XC179);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC17B);
	OpChr		(x,	0);
	MakeWord	(x=0XC17C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC17E);
	OpChr		(x,	0);
	MakeWord	(x=0XC17F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC181);
	OpChr		(x,	0);
	MakeComm	(0XC182,	"PRINT Return code, [Retcode]");
	MakeWord	(x=0XC182);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC184);
	OpChr		(x,	0);
	MakeWord	(x=0XC185);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC187);
	OpChr		(x,	0);
	MakeWord	(x=0XC188);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC18A);
	OpChr		(x,	0);
	MakeWord	(x=0XC18B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC18D);
	OpChr		(x,	0);
	MakeWord	(x=0XC18E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC190);
	MakeStr		(0XC191,	0XC195);
	MakeName	(0XC191,	"IFTAB");
	MakeWord	(x=0XC195);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC197);
	OpDecimal	(x,	0);
	MakeStr		(0XC198,	0XC1A2);
	MakeWord	(x=0XC1A2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1A4);
	MakeStr		(0XC1A5,	0XC1AA);
	MakeWord	(x=0XC1AA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1AC);
	MakeStr		(0XC1AD,	0XC1B1);
	MakeName	(0XC1AD,	"COMTAB");
	MakeByte	(0XC1B1);
	MakeWord	(x=0XC1B2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC1B4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1B6);
	MakeStr		(0XC1B7,	0XC1BB);
	MakeByte	(0XC1BB);
	MakeWord	(x=0XC1BC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC1BE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1C0);
	MakeStr		(0XC1C1,	0XC1C5);
	MakeByte	(0XC1C5);
	MakeWord	(x=0XC1C6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC1C8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1CA);
	MakeStr		(0XC1CB,	0XC1D1);
	MakeByte	(0XC1D1);
	MakeWord	(x=0XC1D2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC1D4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1D6);
	MakeStr		(0XC1D7,	0XC1DA);
	MakeByte	(0XC1DA);
	MakeWord	(x=0XC1DB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC1DD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1DF);
	MakeStr		(0XC1E0,	0XC1E5);
	MakeByte	(0XC1E5);
	MakeWord	(x=0XC1E6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC1E8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1EA);
	MakeStr		(0XC1EB,	0XC1EE);
	MakeByte	(0XC1EE);
	MakeWord	(x=0XC1EF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC1F1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1F3);
	MakeStr		(0XC1F4,	0XC1F8);
	MakeByte	(0XC1F8);
	MakeWord	(x=0XC1F9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC1FB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC1FD);
	MakeStr		(0XC1FE,	0XC201);
	MakeByte	(0XC201);
	MakeWord	(x=0XC202);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC204);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC206);
	MakeStr		(0XC207,	0XC20B);
	MakeByte	(0XC20B);
	MakeWord	(x=0XC20C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC20E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC210);
	MakeStr		(0XC211,	0XC216);
	MakeByte	(0XC216);
	MakeWord	(x=0XC217);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC219);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC21B);
	MakeStr		(0XC21C,	0XC220);
	MakeByte	(0XC220);
	MakeWord	(x=0XC221);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC223);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC225);
	MakeStr		(0XC226,	0XC22A);
	MakeByte	(0XC22A);
	MakeWord	(x=0XC22B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC22D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC22F);
	MakeStr		(0XC230,	0XC233);
	MakeByte	(0XC233);
	MakeWord	(x=0XC234);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC236);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC238);
	MakeStr		(0XC239,	0XC23C);
	MakeByte	(0XC23C);
	MakeWord	(x=0XC23D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC23F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeStr		(0XC241,	0XC244);
	MakeByte	(0XC244);
	MakeWord	(x=0XC245);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC247);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC249);
	MakeStr		(0XC24A,	0XC24F);
	MakeByte	(0XC24F);
	MakeWord	(x=0XC250);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC252);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeStr		(0XC254,	0XC257);
	MakeByte	(0XC257);
	MakeWord	(x=0XC258);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC25A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC25C);
	MakeStr		(0XC25D,	0XC262);
	MakeByte	(0XC262);
	MakeWord	(x=0XC263);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC265);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeStr		(0XC267,	0XC26A);
	MakeByte	(0XC26A);
	MakeWord	(x=0XC26B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC26D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC26F);
	MakeStr		(0XC270,	0XC275);
	MakeByte	(0XC275);
	MakeWord	(x=0XC276);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC278);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC27A);
	MakeStr		(0XC27B,	0XC280);
	MakeByte	(0XC280);
	MakeWord	(x=0XC281);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC283);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC285);
	MakeStr		(0XC286,	0XC28C);
	MakeByte	(0XC28C);
	MakeWord	(x=0XC28D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC28F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC291);
	MakeStr		(0XC292,	0XC295);
	MakeByte	(0XC295);
	MakeWord	(x=0XC296);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC298);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC29A);
	MakeStr		(0XC29B,	0XC2A1);
	MakeByte	(0XC2A1);
	MakeWord	(x=0XC2A2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2A4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2A6);
	MakeStr		(0XC2A7,	0XC2AB);
	MakeByte	(0XC2AB);
	MakeWord	(x=0XC2AC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2AE);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2B0);
	MakeStr		(0XC2B1,	0XC2B5);
	MakeByte	(0XC2B5);
	MakeWord	(x=0XC2B6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2B8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2BA);
	MakeStr		(0XC2BB,	0XC2BF);
	MakeByte	(0XC2BF);
	MakeWord	(x=0XC2C0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2C2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2C4);
	MakeStr		(0XC2C5,	0XC2C9);
	MakeByte	(0XC2C9);
	MakeWord	(x=0XC2CA);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2CC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2CE);
	MakeStr		(0XC2CF,	0XC2D3);
	MakeByte	(0XC2D3);
	MakeWord	(x=0XC2D4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2D6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2D8);
	MakeStr		(0XC2D9,	0XC2DE);
	MakeByte	(0XC2DE);
	MakeWord	(x=0XC2DF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2E1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2E3);
	MakeStr		(0XC2E4,	0XC2E6);
	MakeByte	(0XC2E6);
	MakeWord	(x=0XC2E7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2E9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2EB);
	MakeStr		(0XC2EC,	0XC2EF);
	MakeByte	(0XC2EF);
	MakeWord	(x=0XC2F0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2F2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2F4);
	MakeStr		(0XC2F5,	0XC2F8);
	MakeByte	(0XC2F8);
	MakeWord	(x=0XC2F9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC2FB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC2FD);
	MakeStr		(0XC2FE,	0XC306);
	MakeByte	(0XC306);
	MakeWord	(x=0XC307);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC309);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC30B);
	MakeStr		(0XC30C,	0XC314);
	MakeByte	(0XC314);
	MakeWord	(x=0XC315);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC317);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC319);
	MakeStr		(0XC31A,	0XC31C);
	MakeByte	(0XC31C);
	MakeWord	(x=0XC31D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC31F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC321);
	MakeStr		(0XC322,	0XC326);
	MakeName	(0XC322,	"comext");
	MakeStr		(0XC326,	0XC32A);
	MakeName	(0XC326,	"exeext");
	MakeStr		(0XC32A,	0XC32E);
	MakeName	(0XC32A,	"batext");
	MakeStr		(0XC32E,	0XC336);
	MakeName	(0XC32E,	"switch_list");
	MakeStr		(0XC336,	0XC33C);
	MakeName	(0XC336,	"AttrLtrs");
	MakeStr		(0XC33C,	0XC341);
	MakeName	(0XC33C,	"OrderLtrs");
	MakeByte	(0XC341);
	MakeName	(0XC341,	"comspec_flag");
	MakeWord	(0XC342);
	MakeName	(0XC342,	"BATBUFLEN");
	MakeWord	(0XC344);
	MakeName	(0XC344,	"NO_VALUES");
	MakeByte	(0XC346);
	MakeName	(0XC346,	"NULL_VALUE_LIST");
	MakeWord	(0XC347);
	MakeName	(0XC347,	"FILE_REQUIRED");
	MakeWord	(0XC349);
	MakeWord	(x=0XC34B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC34D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC34F);
	MakeWord	(0XC350);
	MakeName	(0XC350,	"FILE_OPTIONAL");
	MakeWord	(0XC352);
	MakeWord	(x=0XC354);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC356);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC358);
	MakeWord	(0XC359);
	MakeName	(0XC359,	"FILE_OPTIONAL2");
	MakeWord	(0XC35B);
	MakeWord	(x=0XC35D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC35F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC361);
	MakeWord	(0XC362);
	MakeName	(0XC362,	"SLASH_P_SWITCH");
	MakeWord	(0XC364);
	MakeWord	(x=0XC366);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC368);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC36A);
	MakeStr		(0XC36B,	0XC36E);
	MakeName	(0XC36B,	"SLASH_P_SYN");
	MakeWord	(x=0XC36E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC36E,	"PARSE_BREAK");
	MakeByte	(0XC370);
	MakeByte	(0XC371);
	MakeArray	(0XC371,	0X2);
	MakeName	(0XC371,	"BREAK_PARMS");
	MakeWord	(x=0XC373);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC375);
	MakeByte	(0XC376);
	MakeWord	(0XC377);
	MakeName	(0XC377,	"BREAK_CONTROL1");
	MakeWord	(0XC379);
	MakeWord	(x=0XC37B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC37D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC37F);
	MakeByte	(0XC380);
	MakeName	(0XC380,	"BREAK_VALUES");
	MakeByte	(0XC381);
	MakeByte	(0XC382);
	MakeByte	(0XC383);
	MakeByte	(0XC384);
	MakeWord	(x=0XC385);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC387);
	OpChr		(x,	0);
	MakeWord	(x=0XC388);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeStr		(0XC38A,	0XC38D);
	MakeName	(0XC38A,	"BREAK_ON");
	MakeStr		(0XC38D,	0XC391);
	MakeName	(0XC38D,	"BREAK_OFF");
	MakeWord	(x=0XC391);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC391,	"PARSE_CHCP");
	MakeByte	(0XC393);
	MakeStr		(0XC394,	0XC396);
	MakeName	(0XC394,	"CHCP_PARMS");
	MakeWord	(x=0XC396);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC398);
	MakeByte	(0XC399);
	MakeWord	(0XC39A);
	MakeName	(0XC39A,	"CHCP_CONTROL1");
	MakeWord	(0XC39C);
	MakeWord	(x=0XC39E);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC3A0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3A2);
	MakeByte	(0XC3A3);
	MakeName	(0XC3A3,	"CHCP_VALUES");
	MakeByte	(0XC3A4);
	MakeByte	(0XC3A5);
	MakeComm	(0XC3A6,	"CHCP_MINVAL");
	MakeDword	(x=0XC3A6);
	OpDecimal	(x,	0);
	MakeComm	(0XC3AA,	"CHCP_MAXVAL");
	MakeDword	(x=0XC3AA);
	OpDecimal	(x,	0);
	MakeByte	(0XC3AE);
	MakeByte	(0XC3AF);
	MakeWord	(x=0XC3B0);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC3B0,	"PARSE_DATE");
	MakeByte	(0XC3B2);
	MakeStr		(0XC3B3,	0XC3B5);
	MakeName	(0XC3B3,	"DATE_PARMS");
	MakeWord	(x=0XC3B5);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3B7);
	MakeByte	(0XC3B8);
	MakeWord	(0XC3B9);
	MakeName	(0XC3B9,	"DATE_CONTROL1");
	MakeWord	(0XC3BB);
	MakeWord	(x=0XC3BD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC3BF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3C1);
	MakeWord	(x=0XC3C2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC3C2,	"PARSE_TIME");
	MakeByte	(0XC3C4);
	MakeByte	(0XC3C5);
	MakeArray	(0XC3C5,	0X2);
	MakeName	(0XC3C5,	"TIME_PARMS");
	MakeWord	(x=0XC3C7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3C9);
	MakeByte	(0XC3CA);
	MakeWord	(0XC3CB);
	MakeName	(0XC3CB,	"TIME_CONTROL1");
	MakeWord	(0XC3CD);
	MakeWord	(x=0XC3CF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC3D1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3D3);
	MakeWord	(x=0XC3D4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC3D4,	"PARSE_VOL");
	MakeByte	(0XC3D6);
	MakeStr		(0XC3D7,	0XC3D9);
	MakeName	(0XC3D7,	"VOL_PARMS");
	MakeWord	(x=0XC3D9);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3DB);
	MakeByte	(0XC3DC);
	MakeWord	(0XC3DD);
	MakeName	(0XC3DD,	"DRIVE_CONTROL1");
	MakeWord	(0XC3DF);
	MakeWord	(x=0XC3E1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC3E3);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3E5);
	MakeWord	(x=0XC3E6);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC3E6,	"PARSE_MRDIR");
	MakeByte	(0XC3E8);
	MakeStr		(0XC3E9,	0XC3EB);
	MakeName	(0XC3E9,	"MRDIR_PARMS");
	MakeWord	(x=0XC3EB);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3ED);
	MakeByte	(0XC3EE);
	MakeWord	(x=0XC3EF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC3EF,	"PARSE_CHDIR");
	MakeByte	(0XC3F1);
	MakeStr		(0XC3F2,	0XC3F4);
	MakeName	(0XC3F2,	"CHDIR_PARMS");
	MakeWord	(x=0XC3F4);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3F6);
	MakeByte	(0XC3F7);
	MakeWord	(x=0XC3F8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC3F8,	"PARSE_ERASE");
	MakeByte	(0XC3FA);
	MakeStr		(0XC3FB,	0XC3FD);
	MakeName	(0XC3FB,	"ERASE_PARMS");
	MakeWord	(x=0XC3FD);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC3FF);
	MakeWord	(x=0XC400);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC402);
	MakeWord	(x=0XC403);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC403,	"PARSE_DIR");
	MakeByte	(0XC405);
	MakeByte	(0XC406);
	MakeArray	(0XC406,	0X2);
	MakeName	(0XC406,	"DIR_PARMS");
	MakeWord	(x=0XC408);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC40A);
	MakeWord	(x=0XC40B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC40D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC40F);
	MakeWord	(0XC410);
	MakeName	(0XC410,	"DIR_SW_VALUED");
	MakeWord	(0XC412);
	MakeWord	(x=0XC414);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC416);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC418);
	MakeStr		(0XC419,	0XC41C);
	MakeName	(0XC419,	"DIR_SW_A");
	MakeStr		(0XC41C,	0XC41F);
	MakeName	(0XC41C,	"DIR_SW_O");
	MakeWord	(0XC41F);
	MakeName	(0XC41F,	"DIR_SW_UNVALUED");
	MakeWord	(0XC421);
	MakeWord	(x=0XC423);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC425);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(x=0XC427);
	OpDecimal	(x,	0);
	MakeStr		(0XC428,	0XC42C);
	MakeName	(0XC428,	"DIR_SW_NEG_A");
	MakeStr		(0XC42C,	0XC430);
	MakeName	(0XC42C,	"DIR_SW_NEG_O");
	MakeStr		(0XC430,	0XC433);
	MakeName	(0XC430,	"DIR_SW_S");
	MakeStr		(0XC433,	0XC437);
	MakeName	(0XC433,	"DIR_SW_NEG_S");
	MakeStr		(0XC437,	0XC43A);
	MakeName	(0XC437,	"DIR_SW_B");
	MakeStr		(0XC43A,	0XC43E);
	MakeName	(0XC43A,	"DIR_SW_NEG_B");
	MakeStr		(0XC43E,	0XC441);
	MakeName	(0XC43E,	"DIR_SW_W");
	MakeStr		(0XC441,	0XC445);
	MakeName	(0XC441,	"DIR_SW_NEG_W");
	MakeStr		(0XC445,	0XC448);
	MakeName	(0XC445,	"DIR_SW_P");
	MakeStr		(0XC448,	0XC44C);
	MakeName	(0XC448,	"DIR_SW_NEG_P");
	MakeStr		(0XC44C,	0XC44F);
	MakeName	(0XC44C,	"DIR_SW_L");
	MakeStr		(0XC44F,	0XC453);
	MakeName	(0XC44F,	"DIR_SW_NEG_L");
	MakeStr		(0XC453,	0XC456);
	MakeName	(0XC453,	"DIR_SW_Z");
	MakeStr		(0XC456,	0XC45A);
	MakeName	(0XC456,	"DIR_SW_NEG_Z");
	MakeStr		(0XC45A,	0XC45D);
	MakeName	(0XC45A,	"DIR_SW_4");
	MakeStr		(0XC45D,	0XC461);
	MakeName	(0XC45D,	"DIR_SW_NEG_4");
	MakeWord	(x=0XC461);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC461,	"Dir_Sw_Ptrs");
	MakeWord	(x=0XC463);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC463,	"Dir_Sw_Ptrs_2");
	MakeWord	(x=0XC465);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC467);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC469);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC46B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC46D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC46F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC471);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC473);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC475);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC477);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC479);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC47B);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC47D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC47F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC481);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC483);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC485);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC485,	"PARSE_RENAME");
	MakeByte	(0XC487);
	MakeByte	(0XC488);
	MakeArray	(0XC488,	0X2);
	MakeName	(0XC488,	"RENAME_PARMS");
	MakeWord	(x=0XC48A);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC48C);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC48E);
	MakeByte	(0XC48F);
	MakeWord	(x=0XC490);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC490,	"PARSE_CTTY");
	MakeByte	(0XC492);
	MakeByte	(0XC493);
	MakeArray	(0XC493,	0X2);
	MakeName	(0XC493,	"CTTY_PARMS");
	MakeWord	(x=0XC495);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC497);
	MakeByte	(0XC498);
	MakeWord	(0XC499);
	MakeName	(0XC499,	"CTTY_CONTROL1");
	MakeWord	(0XC49B);
	MakeWord	(x=0XC49D);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC49F);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC4A1);
	MakeWord	(x=0XC4A2);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC4A2,	"PARSE_VER");
	MakeByte	(0XC4A4);
	MakeByte	(0XC4A5);
	MakeArray	(0XC4A5,	0X2);
	MakeName	(0XC4A5,	"VER_PARMS");
	MakeByte	(0XC4A7);
	MakeWord	(x=0XC4A8);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC4AA);
	MakeWord	(0XC4AB);
	MakeName	(0XC4AB,	"SLASH_R");
	MakeWord	(0XC4AD);
	MakeWord	(x=0XC4AF);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeWord	(x=0XC4B1);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC4B3);
	MakeStr		(0XC4B4,	0XC4B7);
	MakeWord	(x=0XC4B7);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeName	(0XC4B7,	"Parse_LoadHi");
	MakeByte	(0XC4B9);
	MakeByte	(0XC4BA);
	MakeName	(0XC4BA,	"LoadHi_Parms");
	MakeByte	(0XC4BB);
	MakeWord	(x=0XC4BC);
	OpOff		(x,	0,	0X2890);
	OpOff		(x,	128,	0X2890);
	MakeByte	(0XC4BE);
	MakeByte	(0XC4BF);
	MakeStr		(0XC4C0,	0XC4C6);
	MakeName	(0XC4C0,	"TempVarName");
	MakeStr		(0XC4C6,	0XC4CE);
	MakeName	(0XC4C6,	"copycmd");
	MakeStr		(0XC4CE,	0XC4D7);
	MakeName	(0XC4CE,	"REXX_EXE");
	MakeWord	(0XC4D7);
	MakeName	(0XC4D7,	"$P_ORDINAL");
	MakeWord	(0XC4D9);
	MakeName	(0XC4D9,	"$P_RC");
	MakeWord	(0XC4DB);
	MakeName	(0XC4DB,	"$P_SI_Save");
	MakeWord	(0XC4DD);
	MakeName	(0XC4DD,	"$P_DX");
	MakeByte	(0XC4DF);
	MakeName	(0XC4DF,	"$P_Terminator");
	MakeWord	(0XC4E0);
	MakeName	(0XC4E0,	"$P_DBCSEV_OFF");
	MakeWord	(0XC4E2);
	MakeName	(0XC4E2,	"$P_DBCSEV_SEG");
	MakeByte	(0XC4E4);
	MakeName	(0XC4E4,	"$P_Flags");
	MakeByte	(0XC4E5);
	MakeName	(0XC4E5,	"$P_Flags2");
	MakeWord	(0XC4E6);
	MakeName	(0XC4E6,	"$P_SaveSI_Cmpx");
	MakeWord	(0XC4E8);
	MakeName	(0XC4E8,	"$P_KEYorSW_Ptr");
	MakeWord	(0XC4EA);
	MakeName	(0XC4EA,	"$P_Save_EOB");
	MakeWord	(0XC4EC);
	MakeName	(0XC4EC,	"$P_Found_SYNONYM");
	MakeByte	(x=0XC4EE);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XC4EE,	"$P_STRING_BUF");
	MakeWord	(0XC56E);
	MakeName	(0XC56E,	"$P_ORIG_ORD");
	MakeWord	(0XC570);
	MakeName	(0XC570,	"$P_ORIG_STACK");
	MakeWord	(0XC572);
	MakeName	(0XC572,	"$P_ORIG_SI");
	MakeByte	(0XC574);
	MakeName	(0XC574,	"$P_Got_Time");
	MakeWord	(0XC575);
	MakeName	(0XC575,	"$P_Country_Info");
	MakeByte	(x=0XC577);
	MakeArray	(x,	0X20);
	OpDecimal	(x,	0);
	MakeWord	(0XC597);
	MakeName	(0XC597,	"$P_1st_Val");
	MakeWord	(0XC599);
	MakeName	(0XC599,	"$P_2nd_Val");
	MakeWord	(0XC59B);
	MakeName	(0XC59B,	"$P_3rd_Val");
	MakeWord	(0XC59D);
	MakeName	(0XC59D,	"$P_4th_Val");
	MakeByte	(0XC59F);
	MakeName	(0XC59F,	"$P_Char_CAP_Ptr");
	MakeWord	(0XC5A0);
	MakeWord	(0XC5A2);
	MakeByte	(0XC5A4);
	MakeName	(0XC5A4,	"$P_File_CAP_Ptr");
	MakeWord	(0XC5A5);
	MakeWord	(0XC5A7);
	MakeStr		(0XC5A9,	0XC5B2);
	MakeName	(0XC5A9,	"$P_FileSp_Char");
	MakeByte	(0XC5B2);
	MakeName	(0XC5B2,	"$P_err_flag");
	MakeWord	(0XC5B3);
	MakeArray	(0XC5B3,	0X2);
	MakeName	(0XC5B3,	"$M_RT_$M_EXT_ERR_ADDRS");
	MakeWord	(0XC5B7);
	MakeArray	(0XC5B7,	0X2);
	MakeName	(0XC5B7,	"$M_RT_$M_EXT_FILE");
	MakeWord	(0XC5BB);
	MakeArray	(0XC5BB,	0X2);
	MakeName	(0XC5BB,	"$M_RT_$M_EXT_COMMAND");
	MakeDword	(0XC5BF);
	MakeWord	(0XC5C3);
	MakeArray	(0XC5C3,	0X2);
	MakeName	(0XC5C3,	"$M_RT_$M_PARSE_COMMAND");
	MakeWord	(0XC5C7);
	MakeArray	(0XC5C7,	0X2);
	MakeName	(0XC5C7,	"$M_RT_$M_PARSE_ADDRS");
	MakeDword	(0XC5CB);
	MakeWord	(0XC5CF);
	MakeArray	(0XC5CF,	0X2);
	MakeName	(0XC5CF,	"$M_RT_$M_CRIT_ADDRS");
	MakeWord	(0XC5D3);
	MakeArray	(0XC5D3,	0X2);
	MakeName	(0XC5D3,	"$M_RT_$M_CRIT_COMMAND");
	MakeDword	(0XC5D7);
	MakeDword	(0XC5DB);
	MakeName	(0XC5DB,	"$M_RT_$M_DISK_PROC_ADDR");
	MakeDword	(0XC5DF);
	MakeName	(0XC5DF,	"$M_RT_$M_CLASS_ADDRS");
	MakeDword	(0XC5E3);
	MakeDword	(0XC5E7);
	MakeDword	(0XC5EB);
	MakeWord	(0XC5EF);
	MakeArray	(0XC5EF,	0X2);
	MakeName	(0XC5EF,	"$M_RT_$M_DBCS_VEC");
	MakeWord	(0XC5F3);
	MakeName	(0XC5F3,	"$M_RT_$M_HANDLE");
	MakeByte	(0XC5F5);
	MakeName	(0XC5F5,	"$M_RT_$M_SIZE");
	MakeStr		(0XC5F6,	0XC5F8);
	MakeName	(0XC5F6,	"$M_RT_$M_CRLF");
	MakeByte	(0XC5F8);
	MakeName	(0XC5F8,	"$M_RT_$M_CLASS");
	MakeWord	(0XC5F9);
	MakeName	(0XC5F9,	"$M_RT_$M_RETURN_ADDR");
	MakeWord	(0XC5FB);
	MakeName	(0XC5FB,	"$M_RT_$M_MSG_NUM");
	MakeWord	(x=0XC5FD);
	OpDecimal	(x,	0);
	MakeName	(0XC5FD,	"$M_RT_$M_DIVISOR");
	MakeWord	(0XC5FF);
	MakeName	(0XC5FF,	"$M_RT_$M_TEMP_BUF");
	MakeByte	(0XC601);
	MakeArray	(0XC601,	0X5);
	MakeWord	(0XC606);
	MakeName	(0XC606,	"$M_RT_$M_THOU_SEPARA");
	MakeWord	(0XC608);
	MakeName	(0XC608,	"$M_RT_$M_DECI_SEPARA");
	MakeWord	(0XC60A);
	MakeName	(0XC60A,	"$M_RT_$M_DATE_SEPARA");
	MakeWord	(0XC60C);
	MakeName	(0XC60C,	"$M_RT_$M_TIME_SEPARA");
	MakeByte	(0XC60E);
	MakeArray	(0XC60E,	0X2);
	MakeWord	(0XC610);
	MakeName	(0XC610,	"$M_RT_$M_TIME_FORMAT");
	MakeByte	(0XC612);
	MakeArray	(0XC612,	0X2D);
	MakeByte	(0XC63F);
	MakeName	(0XC63F,	"$M_RT_$M_BUF_TERM");
	MakeWord	(0XC640);
	MakeName	(0XC640,	"PRINTF_HANDLE");
	MakeByte	(x=0XC642);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XC642,	"SRCXNAME");
	MakeByte	(x=0XC699);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XC699,	"TRGXNAME");
	MakeByte	(x=0XC6F0);
	MakeArray	(x,	0X83);
	OpDecimal	(x,	0);
	MakeName	(0XC6F0,	"UCOMBUF");
	MakeByte	(x=0XC773);
	MakeArray	(x,	0X83);
	OpDecimal	(x,	0);
	MakeName	(0XC773,	"COMBUF");
	MakeByte	(x=0XC7F6);
	MakeArray	(x,	0X46);
	OpDecimal	(x,	0);
	MakeName	(0XC7F6,	"USERDIR1");
	MakeByte	(x=0XC83C);
	MakeArray	(x,	0X83);
	OpDecimal	(x,	0);
	MakeName	(0XC83C,	"EXECPATH");
	MakeByte	(x=0XC8BF);
	MakeArray	(x,	0X53);
	OpDecimal	(x,	0);
	MakeName	(0XC8BF,	"RE_INSTR");
	MakeWord	(0XC912);
	MakeName	(0XC912,	"HEADCALL");
	MakeWord	(0XC914);
	MakeName	(0XC914,	"RESSEG");
	MakeWord	(0XC916);
	MakeName	(0XC916,	"TPA");
	MakeByte	(0XC918);
	MakeName	(0XC918,	"SWITCHAR");
	MakeByte	(0XC919);
	MakeName	(0XC919,	"DIRCHAR");
	MakeDword	(0XC91A);
	MakeName	(0XC91A,	"EXEC_ADDR");
	MakeDword	(0XC91E);
	MakeName	(0XC91E,	"RCH_ADDR");
	MakeWord	(0XC922);
	MakeName	(0XC922,	"TRAN_TPA");
	MakeByte	(0XC924);
	MakeName	(0XC924,	"CHKDRV");
	MakeByte	(0XC925);
	MakeName	(0XC925,	"IFNOTFLAG");
	MakeByte	(0XC926);
	MakeName	(0XC926,	"CURDRV");
	MakeByte	(0XC927);
	MakeName	(0XC927,	"PARM1");
	MakeByte	(0XC928);
	MakeName	(0XC928,	"notzerofile");
	MakeByte	(0XC929);
	MakeName	(0XC929,	"PARM2");
	MakeWord	(0XC92A);
	MakeName	(0XC92A,	"COMSW");
	MakeWord	(0XC92C);
	MakeName	(0XC92C,	"ARG1S");
	MakeWord	(0XC92E);
	MakeName	(0XC92E,	"DestSwitch");
	MakeWord	(0XC930);
	MakeName	(0XC930,	"ARGTS");
	MakeByte	(0XC932);
	MakeName	(0XC932,	"CFLAG");
	MakeByte	(0XC933);
	MakeName	(0XC933,	"SPECDRV");
	MakeWord	(0XC934);
	MakeName	(0XC934,	"BYTCNT");
	MakeWord	(0XC936);
	MakeWord	(0XC938);
	MakeName	(0XC938,	"NXTADD");
	MakeByte	(0XC93A);
	MakeName	(0XC93A,	"FRSTSRCH");
	MakeByte	(0XC93B);
	MakeName	(0XC93B,	"LeftOnLine");
	MakeByte	(0XC93C);
	MakeName	(0XC93C,	"PerLine");
	MakeWord	(0XC93D);
	MakeName	(0XC93D,	"LeftOnPage");
	MakeWord	(0XC93F);
	MakeName	(0XC93F,	"FileCnt");
	MakeWord	(0XC941);
	MakeArray	(0XC941,	0X4);
	MakeName	(0XC941,	"FileSiz");
	MakeByte	(0XC949);
	MakeName	(0XC949,	"narrow");
	MakeByte	(0XC94A);
	MakeName	(0XC94A,	"nocommas");
	MakeByte	(0XC94B);
	MakeName	(0XC94B,	"yeardigit4");
	MakeByte	(0XC94C);
	MakeName	(0XC94C,	"bfree_not_kilo");
	MakeByte	(x=0XC94D);
	MakeArray	(x,	0X2C);
	OpDecimal	(x,	0);
	MakeName	(0XC94D,	"efs_buffer");
	MakeStr		(0XC979,	0XC97D);
	MakeName	(0XC979,	"efs_drive");
	MakeWord	(0XC97D);
	MakeArray	(0XC97D,	0X2);
	MakeName	(0XC97D,	"FileCntTotal");
	MakeWord	(0XC981);
	MakeArray	(0XC981,	0X4);
	MakeName	(0XC981,	"FileSizTotal");
	MakeByte	(x=0XC989);
	MakeArray	(x,	0X50);
	OpDecimal	(x,	0);
	MakeName	(0XC989,	"CHARBUF");
	MakeByte	(0XC9D9);
	MakeName	(0XC9D9,	"IDLEN");
	MakeByte	(0XC9DA);
	MakeArray	(0XC9DA,	0X8);
	MakeName	(0XC9DA,	"ID");
	MakeByte	(0XC9E2);
	MakeArray	(0XC9E2,	0X3);
	MakeName	(0XC9E2,	"COM");
	MakeByte	(x=0XC9E5);
	MakeArray	(x,	0X25);
	OpDecimal	(x,	0);
	MakeName	(0XC9E5,	"DEST");
	MakeByte	(x=0XCA0A);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeName	(0XCA0A,	"DESTNAME");
	MakeByte	(x=0XCA15);
	MakeArray	(x,	0X43);
	OpDecimal	(x,	0);
	MakeName	(0XCA15,	"DESTDIR");
	MakeByte	(x=0XCA58);
	MakeArray	(x,	0X46);
	OpDecimal	(x,	0);
	MakeName	(0XCA58,	"BWDBUF");
	MakeByte	(x=0XCA9E);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeName	(0XCA9E,	"SDIRBUF");
	MakeWord	(0XCAAA);
	MakeName	(0XCAAA,	"_Bits");
	MakeWord	(0XCAAC);
	MakeName	(0XCAAC,	"PathCnt");
	MakeWord	(0XCAAE);
	MakeName	(0XCAAE,	"PathPos");
	MakeWord	(0XCAB0);
	MakeName	(0XCAB0,	"PathSw");
	MakeByte	(0XCAB2);
	MakeName	(0XCAB2,	"AttrSpecified");
	MakeByte	(0XCAB3);
	MakeName	(0XCAB3,	"AttrSelect");
	MakeByte	(0XCAB4);
	MakeName	(0XCAB4,	"comma");
	MakeByte	(0XCAB5);
	MakeName	(0XCAB5,	"plus_comma");
	MakeByte	(0XCAB6);
	MakeName	(0XCAB6,	"DirFlag");
	MakeWord	(0XCAB7);
	MakeName	(0XCAB7,	"parse_last");
	MakeWord	(0XCAB9);
	MakeName	(0XCAB9,	"system_cpage");
	MakeWord	(0XCABB);
	MakeName	(0XCABB,	"File_Size_Low");
	MakeWord	(0XCABD);
	MakeName	(0XCABD,	"File_Size_High");
	MakeWord	(0XCABF);
	MakeName	(0XCABF,	"string_ptr_2");
	MakeWord	(0XCAC1);
	MakeName	(0XCAC1,	"Copy_num");
	MakeByte	(0XCAC3);
	MakeName	(0XCAC3,	"cpyflag");
	MakeWord	(0XCAC4);
	MakeArray	(0XCAC4,	0X2);
	MakeName	(0XCAC4,	"Dir_Num");
	MakeDword	(0XCAC8);
	MakeName	(0XCAC8,	"Bytes_Free");
	MakeWord	(0XCACC);
	MakeName	(0XCACC,	"Major_Ver_Num");
	MakeWord	(0XCACE);
	MakeName	(0XCACE,	"Minor_Ver_Num");
	MakeByte	(0XCAD0);
	MakeName	(0XCAD0,	"One_Char_Val");
	MakeByte	(0XCAD1);
	MakeByte	(0XCAD2);
	MakeName	(0XCAD2,	"vol_drv");
	MakeByte	(0XCAD3);
	MakeName	(0XCAD3,	"ROM_CALL");
	MakeWord	(0XCAD4);
	MakeName	(0XCAD4,	"ROM_IP");
	MakeWord	(0XCAD6);
	MakeName	(0XCAD6,	"ROM_CS");
	MakeByte	(0XCAD8);
	MakeName	(0XCAD8,	"DestIsDir");
	MakeByte	(0XCAD9);
	MakeName	(0XCAD9,	"DestSiz");
	MakeWord	(0XCADA);
	MakeName	(0XCADA,	"DestTail");
	MakeByte	(0XCADC);
	MakeName	(0XCADC,	"DestInfo");
	MakeByte	(x=0XCADD);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XCADD,	"DestBuf");
	MakeWord	(0XCB34);
	MakeName	(0XCB34,	"EndDestBuf");
	MakeByte	(0XCB36);
	MakeName	(0XCB36,	"DESTISDEV");
	MakeByte	(0XCB37);
	MakeName	(0XCB37,	"FIRSTDEST");
	MakeByte	(0XCB38);
	MakeName	(0XCB38,	"MELCOPY");
	MakeWord	(0XCB39);
	MakeName	(0XCB39,	"MELSTART");
	MakeByte	(0XCB3B);
	MakeName	(0XCB3B,	"SrcIsDir");
	MakeByte	(0XCB3C);
	MakeName	(0XCB3C,	"SrcSiz");
	MakeWord	(0XCB3D);
	MakeName	(0XCB3D,	"SrcTail");
	MakeByte	(0XCB3F);
	MakeName	(0XCB3F,	"SrcInfo");
	MakeByte	(x=0XCB40);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XCB40,	"SrcBuf");
	MakeWord	(0XCB97);
	MakeName	(0XCB97,	"SRCHAND");
	MakeByte	(0XCB99);
	MakeName	(0XCB99,	"SRCISDEV");
	MakeByte	(x=0XCB9A);
	MakeArray	(x,	0X57);
	OpDecimal	(x,	0);
	MakeName	(0XCB9A,	"ScanBuf");
	MakeWord	(0XCBF1);
	MakeName	(0XCBF1,	"SRCPT");
	MakeByte	(0XCBF3);
	MakeName	(0XCBF3,	"INEXACT");
	MakeByte	(0XCBF4);
	MakeName	(0XCBF4,	"NOWRITE");
	MakeByte	(0XCBF5);
	MakeName	(0XCBF5,	"BINARY");
	MakeWord	(0XCBF6);
	MakeName	(0XCBF6,	"WRITTEN");
	MakeByte	(0XCBF8);
	MakeName	(0XCBF8,	"TERMREAD");
	MakeByte	(0XCBF9);
	MakeName	(0XCBF9,	"ASCII");
	MakeByte	(0XCBFA);
	MakeName	(0XCBFA,	"PLUS");
	MakeByte	(0XCBFB);
	MakeName	(0XCBFB,	"objcnt");
	MakeWord	(0XCBFC);
	MakeName	(0XCBFC,	"CPDATE");
	MakeWord	(0XCBFE);
	MakeName	(0XCBFE,	"CPTIME");
	MakeWord	(0XCC00);
	MakeName	(0XCC00,	"OFilePtr_Lo");
	MakeWord	(0XCC02);
	MakeName	(0XCC02,	"OFilePtr_Hi");
	MakeByte	(0XCC04);
	MakeName	(0XCC04,	"zflag");
	MakeByte	(x=0XCC05);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeName	(0XCC05,	"cox_sublist_buff");
	MakeByte	(0XCC10);
	MakeName	(0XCC10,	"cox_y_override");
	MakeByte	(0XCC11);
	MakeName	(0XCC11,	"cox_dest_file");
	MakeByte	(0XCC12);
	MakeName	(0XCC12,	"cox_src_file");
	MakeWord	(0XCC13);
	MakeName	(0XCC13,	"BATHAND");
	MakeWord	(0XCC15);
	MakeName	(0XCC15,	"STARTEL");
	MakeByte	(0XCC17);
	MakeName	(0XCC17,	"ELCNT");
	MakeByte	(0XCC18);
	MakeName	(0XCC18,	"ELPOS");
	MakeByte	(0XCC19);
	MakeName	(0XCC19,	"SKPDEL");
	MakeByte	(x=0XCC1A);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeName	(0XCC1A,	"SOURCE");
	MakeByte	(0XCC25);
	MakeName	(0XCC25,	"ext_entered");
	MakeByte	(0XCC26);
	MakeName	(0XCC26,	"Display_Ioctl");
	MakeByte	(0XCC27);
	MakeComm	(0XCC28,	"crt_ioctl_ln");
	MakeWord	(x=0XCC28);
	OpDecimal	(x,	0);
	MakeWord	(0XCC2A);
	MakeByte	(0XCC2C);
	MakeName	(0XCC2C,	"display_mode");
	MakeByte	(0XCC2D);
	MakeWord	(0XCC2E);
	MakeWord	(0XCC30);
	MakeWord	(0XCC32);
	MakeWord	(0XCC34);
	MakeName	(0XCC34,	"display_width");
	MakeWord	(x=0XCC36);
	OpDecimal	(x,	0);
	MakeName	(0XCC36,	"LinPerPag");
	MakeWord	(0XCC38);
	MakeName	(0XCC38,	"vol_ioctl_buf");
	MakeDword	(0XCC3A);
	MakeName	(0XCC3A,	"vol_serial");
	MakeByte	(0XCC3E);
	MakeArray	(0XCC3E,	0XB);
	MakeName	(0XCC3E,	"vol_label");
	MakeByte	(0XCC49);
	MakeArray	(0XCC49,	0X8);
	MakeByte	(0XCC51);
	MakeName	(0XCC51,	"expand_star");
	MakeByte	(0XCC52);
	MakeName	(0XCC52,	"msg_flag");
	MakeWord	(0XCC53);
	MakeName	(0XCC53,	"Msg_Numb");
	MakeByte	(0XCC55);
	MakeName	(0XCC55,	"append_exec");
	MakeWord	(0XCC56);
	MakeName	(0XCC56,	"print_err_flag");
	MakeByte	(x=0XCC58);
	MakeArray	(x,	0X16);
	OpDecimal	(x,	0);
	MakeName	(0XCC58,	"subst_buffer");
	MakeByte	(0XCC6E);
	MakeName	(0XCC6E,	"KPARSE");
	MakeWord	(0XCC6F);
	MakeName	(0XCC6F,	"ARG_ARGV");
	MakeByte	(0XCC71);
	MakeName	(0XCC71,	"ARGV0_ARG_FLAGS");
	MakeWord	(0XCC72);
	MakeName	(0XCC72,	"ARGV0_ARGSTARTEL");
	MakeWord	(0XCC74);
	MakeName	(0XCC74,	"ARGV0_ARGLEN");
	MakeWord	(0XCC76);
	MakeName	(0XCC76,	"ARGV0_ARGSW_WORD");
	MakeWord	(0XCC78);
	MakeName	(0XCC78,	"ARGV0_OCOMPTR");
	MakeWord	(0XCC7A);
	MakeName	(0XCC7A,	"ARGV1_ARGPOINTER");
	MakeWord	(0XCC7C);
	MakeWord	(0XCC7E);
	MakeByte	(0XCC80);
	MakeWord	(0XCC81);
	MakeName	(0XCC81,	"ARGV1_ARGSW_WORD");
	MakeWord	(0XCC83);
	MakeWord	(0XCC85);
	MakeName	(0XCC85,	"ARGV2_ARGPOINTER");
	MakeWord	(0XCC87);
	MakeWord	(0XCC89);
	MakeByte	(0XCC8B);
	MakeWord	(0XCC8C);
	MakeName	(0XCC8C,	"ARGV2_ARGSW_WORD");
	MakeWord	(0XCC8E);
	MakeComm	(0XCC90,	"ARGV[3] to ARGV[63]");
	MakeByte	(x=0XCC90);
	MakeArray	(x,	0X29F);
	OpDecimal	(x,	0);
	MakeWord	(0XCF2F);
	MakeName	(0XCF2F,	"ARG_ARGVCNT");
	MakeWord	(0XCF31);
	MakeName	(0XCF31,	"ARG_ARGSWINFO");
	MakeComm	(0XCF33,	"times ARGBLEN dw 0");
	MakeWord	(x=0XCF33);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XCF33,	"ARG_ARGBUF");
	MakeByte	(x=0XD033);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XD033,	"ARG_ARGFORCOMBUF");
	MakeWord	(0XD0B3);
	MakeName	(0XD0B3,	"ARGBUF_PTR");
	MakeByte	(x=0XD0B5);
	MakeArray	(x,	0X80);
	OpDecimal	(x,	0);
	MakeName	(0XD0B5,	"TPBUF");
	MakeWord	(0XD135);
	MakeName	(0XD135,	"LASTARG");
	MakeWord	(0XD137);
	MakeName	(0XD137,	"COMPTR");
	MakeComm	(0XD139,	"times FINDBUFLEN db 0");
	MakeByte	(x=0XD139);
	MakeArray	(x,	0X2B);
	OpDecimal	(x,	0);
	MakeName	(0XD139,	"FBUF");
	MakeWord	(0XD164);
	MakeArray	(0XD164,	0X3);
	MakeName	(0XD164,	"pathinfo");
	MakeByte	(0XD16A);
	MakeName	(0XD16A,	"psep_char");
	MakeByte	(0XD16B);
	MakeName	(0XD16B,	"search_best");
	MakeComm	(0XD16C,	"times FNAME_MAX_LEN db 0");
	MakeByte	(x=0XD16C);
	MakeArray	(x,	0XD);
	OpDecimal	(x,	0);
	MakeName	(0XD16C,	"search_best_buf");
	MakeByte	(x=0XD179);
	MakeArray	(x,	0X40);
	OpDecimal	(x,	0);
	MakeName	(0XD179,	"search_curdir_buf");
	MakeWord	(0XD1B9);
	MakeName	(0XD1B9,	"search_error");
	MakeWord	(0XD1BB);
	MakeName	(0XD1BB,	"IF_NOT_COUNT");
	MakeByte	(x=0XD1BD);
	MakeArray	(x,	0X100);
	OpDecimal	(x,	0);
	MakeWord	(0XD2BD);
	MakeName	(0XD2BD,	"STACK");
	MakeByte	(0XD2BF);
	MakeArray	(0XD2BF,	0X5);
	MakeName	(0XD2BF,	"CURRENCY_SYM");
	MakeByte	(0XD2C4);
	MakeArray	(0XD2C4,	0X2);
	MakeName	(0XD2C4,	"THOUS_SEP");
	MakeByte	(0XD2C6);
	MakeArray	(0XD2C6,	0X2);
	MakeName	(0XD2C6,	"DECIMAL_SEP");
	MakeByte	(0XD2C8);
	MakeArray	(0XD2C8,	0X2);
	MakeName	(0XD2C8,	"DATE_SEP");
	MakeByte	(0XD2CA);
	MakeArray	(0XD2CA,	0X2);
	MakeName	(0XD2CA,	"TIME_SEP");
	MakeByte	(0XD2CC);
	MakeName	(0XD2CC,	"BIT_FIELD");
	MakeByte	(0XD2CD);
	MakeName	(0XD2CD,	"CURRENCY_CENTS");
	MakeByte	(0XD2CE);
	MakeName	(0XD2CE,	"TIME_24");
	MakeDword	(0XD2CF);
	MakeName	(0XD2CF,	"MAP_CALL");
	MakeByte	(0XD2D3);
	MakeArray	(0XD2D3,	0X2);
	MakeName	(0XD2D3,	"DATA_SEP");
	MakeByte	(0XD2D5);
	MakeArray	(0XD2D5,	0X8);
	MakeByte	(0XD2DD);
	MakeName	(0XD2DD,	"CountryPtrId");
	MakeDword	(0XD2DE);
	MakeName	(0XD2DE,	"CountryPtr");
	MakeDword	(0XD2E2);
	MakeName	(0XD2E2,	"OldCtrlCHandler");
	MakeWord	(0XD2E6);
	MakeName	(0XD2E6,	"BATBUFPOS");
	MakeByte	(x=0XD2E8);
	MakeArray	(x,	0X20);
	OpDecimal	(x,	0);
	MakeName	(0XD2E8,	"BATBUF");
	MakeWord	(0XD308);
	MakeName	(0XD308,	"BATBUFEND");
	MakeByte	(0XD30A);
	MakeName	(0XD30A,	"PARSE1_OUTPUT");
	MakeByte	(0XD30B);
	MakeName	(0XD30B,	"PARSE1_CODE");
	MakeWord	(0XD30C);
	MakeName	(0XD30C,	"PARSE1_SYN");
	MakeDword	(0XD30E);
	MakeName	(0XD30E,	"PARSE1_ADDR");
	MakeByte	(0XD312);
	MakeName	(0XD312,	"DATE_OUTPUT");
	MakeByte	(0XD313);
	MakeWord	(0XD314);
	MakeWord	(0XD316);
	MakeName	(0XD316,	"DATE_YEAR");
	MakeByte	(0XD318);
	MakeName	(0XD318,	"DATE_MONTH");
	MakeByte	(0XD319);
	MakeName	(0XD319,	"DATE_DAY");
	MakeByte	(0XD31A);
	MakeName	(0XD31A,	"TIME_OUTPUT");
	MakeByte	(0XD31B);
	MakeWord	(0XD31C);
	MakeByte	(0XD31E);
	MakeName	(0XD31E,	"TIME_HOUR");
	MakeByte	(0XD31F);
	MakeName	(0XD31F,	"TIME_MINUTES");
	MakeByte	(0XD320);
	MakeName	(0XD320,	"TIME_SECONDS");
	MakeByte	(0XD321);
	MakeName	(0XD321,	"TIME_FRACTION");
	MakeByte	(0XD322);
	MakeName	(0XD322,	"DRIVE_OUTPUT");
	MakeByte	(0XD323);
	MakeName	(0XD323,	"DRIVE_VALUE");
	MakeWord	(0XD324);
	MakeByte	(0XD326);
	MakeName	(0XD326,	"DRIVE_NUMBER");
	MakeByte	(0XD327);
	MakeArray	(0XD327,	0X3);
}

static Functions_0(void) {

	MakeFunction    (0X1FF,0X226);
	SetFunctionFlags(0X1FF,0);
	MakeNameEx(0X220, "QA20_ON", SN_LOCAL);
	MakeNameEx(0X222, "A20_on", SN_LOCAL);
	MakeNameEx(0X224, "XMMerror", SN_LOCAL);
	MakeFunction    (0X22B,0X248);
	SetFunctionFlags(0X22B,0);
	MakeFrame(0X22B, 0, 2, 0);
	MakeNameEx(0X236, "uhu10", SN_LOCAL);
	MakeFunction    (0X248,0X25F);
	SetFunctionFlags(0X248,0);
	MakeFunction    (0X25F,0X285);
	SetFunctionFlags(0X25F,0);
	MakeFrame(0X25F, 0, 4, 0);
	MakeNameEx(0X266, "fus10", SN_LOCAL);
	MakeNameEx(0X270, "fus20", SN_LOCAL);
	MakeNameEx(0X282, "fusX", SN_LOCAL);
	MakeFunction    (0X285,0X2B2);
	SetFunctionFlags(0X285,0);
	MakeFrame(0X285, 0, 2, 0);
	MakeNameEx(0X2B0, "ihm_x", SN_LOCAL);
	MakeFunction    (0X2B2,0X2CD);
	SetFunctionFlags(0X2B2,0);
	MakeFunction    (0X2CD,0X2E1);
	SetFunctionFlags(0X2CD,0);
	MakeFrame(0X2CD, 0, 2, 0);
	MakeNameEx(0X2DE, "xhu_e", SN_LOCAL);
	MakeNameEx(0X2DF, "xhu_x", SN_LOCAL);
	MakeFunction    (0X2E1,0X2F3);
	SetFunctionFlags(0X2E1,0);
	MakeNameEx(0X2F2, "lumbX", SN_LOCAL);
	MakeFunction    (0XF01,0XF12);
	SetFunctionFlags(0XF01,0);
	MakeFrame(0XF01, 0, 2, 0);
	MakeNameEx(0XF10, "NoPipePop", SN_LOCAL);
	MakeFunction    (0XFD9,0XFE1);
	SetFunctionFlags(0XFD9,0);
	MakeFunction    (0X10BE,0X10D5);
	SetFunctionFlags(0X10BE,0);
	MakeFrame(0X10BE, 0, 4, 0);
	MakeNameEx(0X10CD, "rcCont", SN_LOCAL);
	MakeNameEx(0X10D2, "ResRegs", SN_LOCAL);
	MakeFunction    (0X10DD,0X112F);
	SetFunctionFlags(0X10DD,0);
	MakeNameEx(0X10F7, "Chk1", SN_LOCAL);
	MakeNameEx(0X1105, "ChkOtherHand", SN_LOCAL);
	MakeNameEx(0X110B, "CloseLoop", SN_LOCAL);
	MakeNameEx(0X1116, "CloseLoopNxt", SN_LOCAL);
	MakeNameEx(0X112E, "Append_Fix_End", SN_LOCAL);
	MakeFunction    (0X112F,0X1153);
	SetFunctionFlags(0X112F,0);
	MakeFrame(0X112F, 0, 8, 0);
	MakeFunction    (0X1159,0X1170);
	SetFunctionFlags(0X1159,0);
	MakeFrame(0X1159, 0, 6, 0);
	MakeFunction    (0X1176,0X11AE);
	SetFunctionFlags(0X1176,0);
	MakeNameEx(0XF2D, "Stall", SN_LOCAL);
	MakeNameEx(0XF2F, "FatalRet", SN_LOCAL);
	MakeNameEx(0XF55, "Ret_2e", SN_LOCAL);
	MakeNameEx(0XF77, "GotECode", SN_LOCAL);
	MakeNameEx(0X1170, "Hopeless", SN_LOCAL);
	MakeNameEx(0X118A, "GetComDsk4", SN_LOCAL);
	MakeNameEx(0X119B, "Users_Drive", SN_LOCAL);
	MakeFunction    (0X11AE,0X11B9);
	SetFunctionFlags(0X11AE,0);
	MakeFunction    (0X11B9,0X11FF);
	SetFunctionFlags(0X11B9,0);
	MakeNameEx(0X11CE, "TryDoOpen", SN_LOCAL);
	MakeNameEx(0X11D3, "ReadCom", SN_LOCAL);
	MakeNameEx(0X11F1, "WrongCom1", SN_LOCAL);
	MakeFunction    (0X11FF,0X1207);
	SetFunctionFlags(0X11FF,0);
	MakeFunction    (0X1207,0X122E);
	SetFunctionFlags(0X1207,0);
	MakeFrame(0X1207, 0, 2, 0);
	MakeNameEx(0X1224, "Chk", SN_LOCAL);
	MakeFunction    (0X122E,0X123B);
	SetFunctionFlags(0X122E,0);
	MakeFrame(0X122E, 0, 2, 0);
	MakeFunction    (0X123B,0X1272);
	SetFunctionFlags(0X123B,0);
	MakeFunction    (0X1272,0X1282);
	SetFunctionFlags(0X1272,0);
	MakeFrame(0X1272, 0, 4, 0);
	MakeFunction    (0X1289,0X12A5);
	SetFunctionFlags(0X1289,0);
	MakeNameEx(0X12A4, "aeRet", SN_LOCAL);
	MakeFunction    (0X14F6,0X14F9);
	SetFunctionFlags(0X14F6,0);
	MakeFunction    (0X14F9,0X1512);
	SetFunctionFlags(0X14F9,0);
	MakeFrame(0X14F9, 0, 10, 0);
	MakeNameEx(0X150C, "rpRet", SN_LOCAL);
	MakeFunction    (0X1512,0X1525);
	SetFunctionFlags(0X1512,0);
	MakeFrame(0X1512, 0, 2, 0);
	MakeFunction    (0X1525,0X1544);
	SetFunctionFlags(0X1525,0);
	MakeNameEx(0X153B, "rdOutChar", SN_LOCAL);
	MakeNameEx(0X1541, "rdCharDone", SN_LOCAL);
	MakeFunction    (0X1544,0X1594);
	SetFunctionFlags(0X1544,0);
	MakeFrame(0X1544, 0, 4, 0);
	MakeNameEx(0X155E, "smDigit", SN_LOCAL);
	MakeNameEx(0X1571, "smDigit09", SN_LOCAL);
	MakeNameEx(0X157C, "smChar", SN_LOCAL);
	MakeNameEx(0X1584, "smStr", SN_LOCAL);
	MakeNameEx(0X1591, "smRet", SN_LOCAL);
	MakeFunction    (0X1594,0X159D);
	SetFunctionFlags(0X1594,0);
	MakeFrame(0X1594, 0, 2, 0);
	MakeFunction    (0X159D,0X15C2);
	SetFunctionFlags(0X159D,0);
	MakeFrame(0X159D, 0, 6, 0);
	MakeNameEx(0X15A4, "ktLop", SN_LOCAL);
	MakeNameEx(0X15B7, "NotLead", SN_LOCAL);
	MakeNameEx(0X15BB, "IsLead", SN_LOCAL);
	MakeNameEx(0X15BE, "ktRet", SN_LOCAL);
	MakeFunction    (0X167E,0X16A4);
	SetFunctionFlags(0X167E,0x4002);
	MakeFunction    (0X1E48,0X1E51);
	SetFunctionFlags(0X1E48,0);
	MakeNameEx(0X1E4A, "NxtChar", SN_LOCAL);
	MakeFunction    (0X1E51,0X1E6D);
	SetFunctionFlags(0X1E51,0);
	MakeNameEx(0X1E6C, "setup_end", SN_LOCAL);
	MakeFunction    (0X1E6D,0X1E7E);
	SetFunctionFlags(0X1E6D,0);
	MakeFrame(0X1E6D, 0, 2, 0);
	MakeFunction    (0X1E7E,0X1E85);
	SetFunctionFlags(0X1E7E,0);
	MakeFunction    (0X1E85,0X1EC5);
	SetFunctionFlags(0X1E85,0);
	MakeNameEx(0X1E8F, "ifind1", SN_LOCAL);
	MakeNameEx(0X1E92, "ifind11", SN_LOCAL);
	MakeNameEx(0X1EA7, "_NotKanj4", SN_LOCAL);
	MakeNameEx(0X1EB3, "ifind12", SN_LOCAL);
	MakeFunction    (0X1EC5,0X1ED9);
	SetFunctionFlags(0X1EC5,0);
	MakeFrame(0X1EC5, 0, 2, 0);
	MakeNameEx(0X1ED3, "Icountx", SN_LOCAL);
	MakeFunction    (0X1ED9,0X1EDE);
	SetFunctionFlags(0X1ED9,0);
	MakeFunction    (0X1EDE,0X1EE6);
	SetFunctionFlags(0X1EDE,0);
	MakeFunction    (0X1EE6,0X1F09);
	SetFunctionFlags(0X1EE6,0);
	MakeNameEx(0X1EFA, "other_fucase", SN_LOCAL);
	MakeNameEx(0X1F08, "iupconv_end", SN_LOCAL);
	MakeFunction    (0X1F16,0X1F79);
	SetFunctionFlags(0X1F16,0);
	MakeFrame(0X1F16, 0, 12, 0);
	MakeNameEx(0X1F55, "no_msg_hook", SN_LOCAL);
	MakeNameEx(0X1F65, "no_permcom", SN_LOCAL);
	MakeNameEx(0X1F72, "permcom_end", SN_LOCAL);
	MakeFunction    (0X1F79,0X1FBF);
	SetFunctionFlags(0X1F79,0);
	MakeNameEx(0X1F83, "chParse", SN_LOCAL);
	MakeNameEx(0X1F93, "chWhich", SN_LOCAL);
	MakeNameEx(0X1FAD, "chHelp", SN_LOCAL);
	MakeNameEx(0X1FB0, "chHelpNext", SN_LOCAL);
	MakeNameEx(0X1FBC, "chHelpDone", SN_LOCAL);
	MakeNameEx(0X1FBE, "chRet", SN_LOCAL);
	MakeFunction    (0X1FBF,0X200E);
	SetFunctionFlags(0X1FBF,0);
	MakeFrame(0X1FBF, 0, 2, 0);
	MakeNameEx(0X1FD4, "calc_res", SN_LOCAL);
	MakeNameEx(0X1FF5, "not_first", SN_LOCAL);
	MakeNameEx(0X2008, "oldver", SN_LOCAL);
	MakeFunction    (0X200E,0X206E);
	SetFunctionFlags(0X200E,0);
	MakeFrame(0X200E, 0, 4, 0);
	MakeNameEx(0X201E, "load_low", SN_LOCAL);
	MakeNameEx(0X2029, "move_high", SN_LOCAL);
	MakeNameEx(0X205D, "setup_move", SN_LOCAL);
	MakeFunction    (0X206E,0X21AC);
	SetFunctionFlags(0X206E,0);
	MakeFrame(0X206E, 0, 10, 0);
	MakeNameEx(0X2081, "alloc_cont", SN_LOCAL);
	MakeNameEx(0X2097, "comp_path", SN_LOCAL);
	MakeNameEx(0X20AC, "got_path", SN_LOCAL);
	MakeNameEx(0X20B1, "find_comspec", SN_LOCAL);
	MakeNameEx(0X20B3, "comp_comspec", SN_LOCAL);
	MakeNameEx(0X20C8, "got_comspec", SN_LOCAL);
	MakeNameEx(0X20D1, "comp_envend", SN_LOCAL);
	MakeNameEx(0X20D9, "got_envend", SN_LOCAL);
	MakeNameEx(0X20EB, "alloc_new", SN_LOCAL);
	MakeNameEx(0X20EF, "alloc_seg", SN_LOCAL);
	MakeNameEx(0X2105, "init_ok", SN_LOCAL);
	MakeNameEx(0X211D, "copy_path", SN_LOCAL);
	MakeNameEx(0X216D, "init_setpath", SN_LOCAL);
	MakeNameEx(0X217A, "init_comspec", SN_LOCAL);
	MakeNameEx(0X2198, "init_done", SN_LOCAL);
	MakeNameEx(0X21A1, "alloc_done", SN_LOCAL);
	MakeNameEx(0X21A6, "init_nomem", SN_LOCAL);
	MakeFunction    (0X21AC,0X21C7);
	SetFunctionFlags(0X21AC,0);
	MakeFrame(0X21AC, 0, 2, 0);
	MakeNameEx(0X21BC, "patchlp", SN_LOCAL);
	MakeFunction    (0X21C7,0X21D9);
	SetFunctionFlags(0X21C7,0);
	MakeNameEx(0X21D2, "pseglp", SN_LOCAL);
	MakeFunction    (0X21D9,0X21F2);
	SetFunctionFlags(0X21D9,0);
	MakeFrame(0X21D9, 0, 2, 0);
	MakeNameEx(0X21F0, "cXMMexit", SN_LOCAL);
	MakeFunction    (0X2CC8,0X2D6B);
	SetFunctionFlags(0X2CC8,0);
	MakeNameEx(0X2CED, "ccydp1", SN_LOCAL);
	MakeNameEx(0X2D01, "ccydp2", SN_LOCAL);
	MakeNameEx(0X2D04, "ccydp3", SN_LOCAL);
	MakeNameEx(0X2D05, "ccydp4", SN_LOCAL);
	MakeNameEx(0X2D07, "ccydp5", SN_LOCAL);
	MakeNameEx(0X2D26, "ccydp6", SN_LOCAL);
	MakeNameEx(0X2D27, "ccydp7", SN_LOCAL);
	MakeNameEx(0X2D3F, "ccydp8", SN_LOCAL);
	MakeNameEx(0X2D51, "ccydp13", SN_LOCAL);
	MakeNameEx(0X2D58, "ccydp10", SN_LOCAL);
	MakeNameEx(0X2D5C, "ccydp11", SN_LOCAL);
	MakeNameEx(0X2D64, "ccydp12", SN_LOCAL);
	MakeFunction    (0X2D6B,0X2DE4);
	SetFunctionFlags(0X2D6B,0);
	MakeFrame(0X2D6B, 0, 12, 0);
	MakeNameEx(0X2D7E, "NO_ROM", SN_LOCAL);
	MakeNameEx(0X2D7F, "ROM_RET", SN_LOCAL);
	MakeNameEx(0X2D86, "SCAN_IT", SN_LOCAL);
	MakeNameEx(0X2D89, "SCAN_ONE", SN_LOCAL);
	MakeNameEx(0X2D97, "SCAN_END", SN_LOCAL);
	MakeNameEx(0X2D9E, "SCAN_LIST", SN_LOCAL);
	MakeNameEx(0X2DB1, "SCAN_NAME", SN_LOCAL);
	MakeNameEx(0X2DBF, "SCAN_TEST", SN_LOCAL);
	MakeNameEx(0X2DC6, "SCAN_NEXT", SN_LOCAL);
	MakeNameEx(0X2DD7, "SCAN_SAVE", SN_LOCAL);
	MakeFunction    (0X2E52,0X2E61);
	SetFunctionFlags(0X2E52,0);
	MakeFrame(0X2E52, 0, 2, 0X2);
	MakeFunction    (0X2E61,0X2E78);
	SetFunctionFlags(0X2E61,0x4002);
	MakeFunction    (0X2E78,0X2E87);
	SetFunctionFlags(0X2E78,0);
	MakeFrame(0X2E78, 0, 4, 0);
	MakeFunction    (0X2E87,0X2ECF);
	SetFunctionFlags(0X2E87,0);
	MakeNameEx(0X2990, "SETDRV", SN_LOCAL);
	MakeNameEx(0X29AB, "NOSETVER2", SN_LOCAL);
	MakeNameEx(0X29B9, "_$EXITPREP", SN_LOCAL);
	MakeNameEx(0X29F1, "TESTRDIR", SN_LOCAL);
	MakeNameEx(0X2A08, "NOSETBUF", SN_LOCAL);
	MakeNameEx(0X2A19, "NOPCLOSE", SN_LOCAL);
	MakeNameEx(0X2A3E, "SAVSIZ", SN_LOCAL);
	MakeNameEx(0X2A46, "GOTSIZE", SN_LOCAL);
	MakeNameEx(0X2A72, "GETCOM", SN_LOCAL);
	MakeNameEx(0X2A86, "GETCOM2", SN_LOCAL);
	MakeNameEx(0X2AA2, "NOPIPE", SN_LOCAL);
	MakeNameEx(0X2AC0, "NOPDRV", SN_LOCAL);
	MakeNameEx(0X2ACA, "TESTFORBAT", SN_LOCAL);
	MakeNameEx(0X2B25, "JDOCOM1", SN_LOCAL);
	MakeNameEx(0X2B29, "ISNOBAT", SN_LOCAL);
	MakeNameEx(0X2B3D, "SINGLELOOP", SN_LOCAL);
	MakeNameEx(0X2B4D, "REGCOM", SN_LOCAL);
	MakeNameEx(0X2B6B, "GOTCOM", SN_LOCAL);
	MakeNameEx(0X2B83, "DOCOM", SN_LOCAL);
	MakeNameEx(0X2B89, "DOCOM2", SN_LOCAL);
	MakeNameEx(0X2BA5, "DOCOM1", SN_LOCAL);
	MakeNameEx(0X2BAD, "NULLCOMJ", SN_LOCAL);
	MakeNameEx(0X2BB0, "NOPIPEPROC", SN_LOCAL);
	MakeNameEx(0X2BB5, "BADPARSE", SN_LOCAL);
	MakeNameEx(0X2C02, "DRVBADJ", SN_LOCAL);
	MakeNameEx(0X2C05, "DRVGD", SN_LOCAL);
	MakeNameEx(0X2C34, "DO_SKIPPED", SN_LOCAL);
	MakeNameEx(0X2E8D, "PROMPTBAT1", SN_LOCAL);
	MakeNameEx(0X2E9C, "BAT_REMCHECK", SN_LOCAL);
	MakeNameEx(0X2EBA, "ASKFORBAT", SN_LOCAL);
	MakeNameEx(0X379C, "BAT_CRLF", SN_LOCAL);
	MakeNameEx(0X37AE, "NOFORP2", SN_LOCAL);
	MakeNameEx(0X37B1, "_$FOR_EXIT", SN_LOCAL);
	MakeNameEx(0X37B3, "FORPROC", SN_LOCAL);
	MakeNameEx(0X37C2, "FOR_BEGIN", SN_LOCAL);
	MakeNameEx(0X37CD, "FOR_BEGIN1", SN_LOCAL);
	MakeNameEx(0X37FC, "FORSUB", SN_LOCAL);
	MakeNameEx(0X3810, "FOR_FIND_FIRST", SN_LOCAL);
	MakeNameEx(0X381B, "FOR_FIND_NEXT", SN_LOCAL);
	MakeNameEx(0X3820, "FOR_RESULT", SN_LOCAL);
	MakeNameEx(0X3828, "FOR_CHECK", SN_LOCAL);
	MakeNameEx(0X382F, "FOR_SMOOSH", SN_LOCAL);
	MakeNameEx(0X3840, "FOR_MORE", SN_LOCAL);
	MakeNameEx(0X3848, "FOR_MAKE_COM", SN_LOCAL);
	MakeNameEx(0X3868, "FOR_MAKE_LOOP", SN_LOCAL);
	MakeNameEx(0X3878, "SLOOP", SN_LOCAL);
	MakeNameEx(0X3883, "FOR_STOSB", SN_LOCAL);
	MakeNameEx(0X38A6, "NO_CRLF_PR", SN_LOCAL);
	MakeNameEx(0X38CB, "NOECHO3", SN_LOCAL);
	MakeNameEx(0X4EA6, "free_com", SN_LOCAL);
	MakeNameEx(0X5B0C, "PIPERR", SN_LOCAL);
	MakeNameEx(0X5B28, "TCOMMANDJ", SN_LOCAL);
	MakeNameEx(0X5B2B, "PIPEPROCSTRT", SN_LOCAL);
	MakeNameEx(0X5B63, "no_temp_path", SN_LOCAL);
	MakeNameEx(0X5B7D, "crt_temp", SN_LOCAL);
	MakeNameEx(0X5B8B, "pps0", SN_LOCAL);
	MakeNameEx(0X5B9E, "pps1", SN_LOCAL);
	MakeNameEx(0X5BB9, "NOSINGP", SN_LOCAL);
	MakeNameEx(0X5BBB, "PIPEPROC", SN_LOCAL);
	MakeNameEx(0X5BD0, "ISPIPE1", SN_LOCAL);
	MakeNameEx(0X5BDA, "PIPEERRJ", SN_LOCAL);
	MakeNameEx(0X5BDF, "NO_PIPEERR", SN_LOCAL);
	MakeNameEx(0X5BE9, "FIRSTPIPE", SN_LOCAL);
	MakeNameEx(0X5BF3, "PIPEERRSYNJ", SN_LOCAL);
	MakeNameEx(0X5BF6, "PIPEOK1", SN_LOCAL);
	MakeNameEx(0X5C01, "PIPECOMLP", SN_LOCAL);
	MakeNameEx(0X5C0D, "NOTKANJ5", SN_LOCAL);
	MakeNameEx(0X5C1A, "ISPIPE2", SN_LOCAL);
	MakeNameEx(0X5C4E, "LASTPIPE", SN_LOCAL);
	MakeNameEx(0X5C5B, "PIPECOM", SN_LOCAL);
	MakeNameEx(0X5C60, "PIPEEND", SN_LOCAL);
	MakeNameEx(0X5C71, "NOSINGP2", SN_LOCAL);
	MakeFunction    (0X2ECF,0X2EFA);
	SetFunctionFlags(0X2ECF,0);
	MakeFrame(0X2ECF, 0, 2, 0);
	MakeFunction    (0X2EFA,0X2F1A);
	SetFunctionFlags(0X2EFA,0);
	MakeFrame(0X2EFA, 0, 2, 0);
	MakeFunction    (0X2F1A,0X309D);
	SetFunctionFlags(0X2F1A,0);
	MakeNameEx(0X2F43, "CONTBAT", SN_LOCAL);
	MakeNameEx(0X2F49, "TESTNOP", SN_LOCAL);
	MakeNameEx(0X2F75, "SET_BAT_POS", SN_LOCAL);
	MakeNameEx(0X2F94, "NOPLINE", SN_LOCAL);
	MakeNameEx(0X2FA2, "READBAT_RETN", SN_LOCAL);
	MakeNameEx(0X2FA3, "RDBAT", SN_LOCAL);
	MakeNameEx(0X2FB8, "RDBAT1", SN_LOCAL);
	MakeNameEx(0X2FC2, "SAVBATBYT", SN_LOCAL);
	MakeNameEx(0X2FC7, "FOUND_EOL", SN_LOCAL);
	MakeNameEx(0X2FE5, "RESET", SN_LOCAL);
	MakeNameEx(0X2FF3, "NO_CRLF_PRINT", SN_LOCAL);
	MakeNameEx(0X3002, "TOOLONG", SN_LOCAL);
	MakeNameEx(0X3009, "LTLCONT", SN_LOCAL);
	MakeNameEx(0X300C, "NEEDPARM", SN_LOCAL);
	MakeNameEx(0X3036, "YES_THERE_IS", SN_LOCAL);
	MakeNameEx(0X303C, "COPYPARM", SN_LOCAL);
	MakeNameEx(0X304B, "LINETOOL", SN_LOCAL);
	MakeNameEx(0X3050, "ENDPARAM", SN_LOCAL);
	MakeNameEx(0X3054, "NEEDENV", SN_LOCAL);
	MakeNameEx(0X305D, "GETENV1", SN_LOCAL);
	MakeNameEx(0X3079, "GETENV15", SN_LOCAL);
	MakeNameEx(0X3099, "GETENV6", SN_LOCAL);
	MakeFunction    (0X309D,0X30AE);
	SetFunctionFlags(0X309D,0);
	MakeNameEx(0X30A6, "SKIPTOEOL1", SN_LOCAL);
	MakeFunction    (0X30AE,0X30BF);
	SetFunctionFlags(0X30AE,0);
	MakeFrame(0X30AE, 0, 2, 0);
	MakeFunction    (0X30BF,0X3137);
	SetFunctionFlags(0X30BF,0);
	MakeFrame(0X30BF, 0, 2, 0);
	MakeNameEx(0X30E8, "CALC_TPA", SN_LOCAL);
	MakeNameEx(0X310B, "NOROUND", SN_LOCAL);
	MakeNameEx(0X310F, "ROUNDDONE", SN_LOCAL);
	MakeNameEx(0X312A, "SAVSIZ2", SN_LOCAL);
	MakeNameEx(0X3132, "GOTSIZE2", SN_LOCAL);
	MakeFunction    (0X32B3,0X3310);
	SetFunctionFlags(0X32B3,0);
	MakeFrame(0X32B3, 0, 8, 0);
	MakeNameEx(0X32D7, "ECHO_LAST_LINE", SN_LOCAL);
	MakeNameEx(0X330B, "NOTFREE", SN_LOCAL);
	MakeFunction    (0X3310,0X3325);
	SetFunctionFlags(0X3310,0);
	MakeFrame(0X3310, 0, 2, 0);
	MakeNameEx(0X3311, "ccycle", SN_LOCAL);
	MakeNameEx(0X331C, "ccopy", SN_LOCAL);
	MakeNameEx(0X3321, "ccend", SN_LOCAL);
	MakeFunction    (0X3325,0X3437);
	SetFunctionFlags(0X3325,0);
	MakeFrame(0X3325, 0, 6, 0);
	MakeNameEx(0X3332, "getbatbyt1", SN_LOCAL);
	MakeNameEx(0X333D, "getbatbyt2", SN_LOCAL);
	MakeNameEx(0X334D, "not_eof", SN_LOCAL);
	MakeNameEx(0X339A, "bat_read_ok", SN_LOCAL);
	MakeNameEx(0X33A8, "UNBUF", SN_LOCAL);
	MakeNameEx(0X33B6, "SETBUFPOS", SN_LOCAL);
	MakeNameEx(0X33BE, "BATEOFDS", SN_LOCAL);
	MakeNameEx(0X33E6, "crpresent", SN_LOCAL);
	MakeNameEx(0X33EA, "At_EOF", SN_LOCAL);
	MakeNameEx(0X33FE, "ret_lf", SN_LOCAL);
	MakeNameEx(0X3403, "turn_off", SN_LOCAL);
	MakeNameEx(0X3404, "BATEOF", SN_LOCAL);
	MakeNameEx(0X341F, "CONT_GET_BYT", SN_LOCAL);
	MakeNameEx(0X3433, "GETBYTEDONE", SN_LOCAL);
	MakeFunction    (0X343E,0X355E);
	SetFunctionFlags(0X343E,0);
	MakeNameEx(0X344D, "IFNoPipe", SN_LOCAL);
	MakeNameEx(0X345C, "IFREENT", SN_LOCAL);
	MakeNameEx(0X346A, "IFINDCOM", SN_LOCAL);
	MakeNameEx(0X3473, "IFCOMP", SN_LOCAL);
	MakeNameEx(0X3475, "FIRSTCOMP", SN_LOCAL);
	MakeNameEx(0X3483, "IFLP", SN_LOCAL);
	MakeNameEx(0X3485, "IF_DIF", SN_LOCAL);
	MakeNameEx(0X3492, "IFERRJ", SN_LOCAL);
	MakeNameEx(0X34A8, "IFSTRING", SN_LOCAL);
	MakeNameEx(0X34AB, "FIRST_STRING", SN_LOCAL);
	MakeNameEx(0X34B8, "EQUAL_CHECK", SN_LOCAL);
	MakeNameEx(0X34C3, "EQUAL_CHECK2", SN_LOCAL);
	MakeNameEx(0X34DA, "SKIPSTRINGEND", SN_LOCAL);
	MakeNameEx(0X34DB, "NOTMATCH", SN_LOCAL);
	MakeNameEx(0X34E8, "IFERRPJ", SN_LOCAL);
	MakeNameEx(0X34EB, "MATCH", SN_LOCAL);
	MakeNameEx(0X3520, "IF_EX_C", SN_LOCAL);
	MakeNameEx(0X352B, "REALTEST", SN_LOCAL);
	MakeNameEx(0X3532, "IFTRUE", SN_LOCAL);
	MakeFunction    (0X35C8,0X35DC);
	SetFunctionFlags(0X35C8,0);
	MakeNameEx(0X35DA, "SKIPERR", SN_LOCAL);
	MakeFunction    (0X36E6,0X36FB);
	SetFunctionFlags(0X36E6,0);
	MakeNameEx(0X36F5, "CLOSERETURN", SN_LOCAL);
	MakeFunction    (0X36FB,0X3736);
	SetFunctionFlags(0X36FB,0);
	MakeFrame(0X36FB, 0, 2, 0);
	MakeNameEx(0X3728, "SETERRDL", SN_LOCAL);
	MakeFunction    (0X3736,0X3779);
	SetFunctionFlags(0X3736,0);
	MakeFrame(0X3736, 0, 2, 0);
	MakeNameEx(0X373F, "_ClearBatch", SN_LOCAL);
	MakeNameEx(0X3754, "no_bat_for", SN_LOCAL);
	MakeNameEx(0X3777, "fb_ret", SN_LOCAL);
	MakeFunction    (0X39F0,0X3A06);
	SetFunctionFlags(0X39F0,0);
	MakeNameEx(0X3A04, "NEXTARG_ERR", SN_LOCAL);
	MakeFunction    (0X3A20,0X3A47);
	SetFunctionFlags(0X3A20,0);
	MakeFrame(0X3A20, 0, 4, 0);
	MakeNameEx(0X3A37, "FREEDONE", SN_LOCAL);
	MakeFunction    (0X3B4B,0X3B72);
	SetFunctionFlags(0X3B4B,0);
	MakeFunction    (0X3B72,0X3B8E);
	SetFunctionFlags(0X3B72,0);
	MakeNameEx(0X3B8D, "peRet", SN_LOCAL);
	MakeFunction    (0X3B8E,0X3B9E);
	SetFunctionFlags(0X3B8E,0);
	MakeNameEx(0X3B9C, "pcOk", SN_LOCAL);
	MakeNameEx(0X3B9D, "pcRet", SN_LOCAL);
	MakeFunction    (0X3B9E,0X3BC5);
	SetFunctionFlags(0X3B9E,0);
	MakeNameEx(0X3BBF, "scNoTable", SN_LOCAL);
	MakeNameEx(0X3BC4, "scRet", SN_LOCAL);
	MakeFunction    (0X3BC5,0X3C22);
	SetFunctionFlags(0X3BC5,0);
	MakeNameEx(0X3BD2, "setopts1", SN_LOCAL);
	MakeNameEx(0X3BE2, "setopts3", SN_LOCAL);
	MakeNameEx(0X3C10, "setopts4", SN_LOCAL);
	MakeNameEx(0X3C21, "soRet", SN_LOCAL);
	MakeFunction    (0X3C22,0X3C86);
	SetFunctionFlags(0X3C22,0);
	MakeNameEx(0X3C2E, "crpath1", SN_LOCAL);
	MakeNameEx(0X3C4A, "cpNoDir", SN_LOCAL);
	MakeNameEx(0X3C5F, "cpMaybe", SN_LOCAL);
	MakeNameEx(0X3C66, "crpath2", SN_LOCAL);
	MakeNameEx(0X3C79, "cpFile", SN_LOCAL);
	MakeNameEx(0X3C84, "cpErr", SN_LOCAL);
	MakeNameEx(0X3C85, "cpRet", SN_LOCAL);
	MakeFunction    (0X3C86,0X3C9E);
	SetFunctionFlags(0X3C86,0);
	MakeFrame(0X3C86, 0, 2, 0);
	MakeFunction    (0X3C9E,0X3CF3);
	SetFunctionFlags(0X3C9E,0);
	MakeFrame(0X3C9E, 0, 0, 0);
	MakeNameEx(0X3CA4, "lsNode", SN_LOCAL);
	MakeNameEx(0X3CA7, "lsLoop", SN_LOCAL);
	MakeNameEx(0X3CBA, "lstsd1", SN_LOCAL);
	MakeNameEx(0X3CE4, "lsErr", SN_LOCAL);
	MakeNameEx(0X3CF2, "lsRet", SN_LOCAL);
	MakeFunction    (0X3CF3,0X3D20);
	SetFunctionFlags(0X3CF3,0);
	MakeNameEx(0X3D1F, "ccRet", SN_LOCAL);
	MakeFunction    (0X3D20,0X3D48);
	SetFunctionFlags(0X3D20,0);
	MakeNameEx(0X3D23, "ceLoop", SN_LOCAL);
	MakeNameEx(0X3D3E, "ceDn", SN_LOCAL);
	MakeNameEx(0X3D44, "ceNs", SN_LOCAL);
	MakeNameEx(0X3D47, "ceDone", SN_LOCAL);
	MakeFunction    (0X3DE9,0X3DF5);
	SetFunctionFlags(0X3DE9,0);
	MakeFunction    (0X3DF5,0X3EC0);
	SetFunctionFlags(0X3DF5,0);
	MakeNameEx(0X3E20, "dtFree", SN_LOCAL);
	MakeNameEx(0X3E51, "get_efs_err", SN_LOCAL);
	MakeNameEx(0X3E60, "dtFree_1", SN_LOCAL);
	MakeNameEx(0X3E88, "dtFree_2", SN_LOCAL);
	MakeNameEx(0X3EA2, "dtFree_3", SN_LOCAL);
	MakeNameEx(0X3EAF, "dtFree_4", SN_LOCAL);
	MakeNameEx(0X3EB9, "dtFree_5", SN_LOCAL);
	MakeNameEx(0X3EBF, "dtRet", SN_LOCAL);
	MakeFunction    (0X3EC0,0X3EF7);
	SetFunctionFlags(0X3EC0,0);
	MakeNameEx(0X3EE3, "piCol", SN_LOCAL);
	MakeNameEx(0X3EF6, "piRet", SN_LOCAL);
	MakeFunction    (0X3EF7,0X3EFC);
	SetFunctionFlags(0X3EF7,0);
	MakeFunction    (0X3EFC,0X3F25);
	SetFunctionFlags(0X3EFC,0);
	MakeFrame(0X3EFC, 0, 2, 0);
	MakeNameEx(0X3F0D, "ffDisk", SN_LOCAL);
	MakeNameEx(0X3F1F, "ffGetErr", SN_LOCAL);
	MakeNameEx(0X3F23, "ffRet", SN_LOCAL);
	MakeFunction    (0X3F25,0X3F4D);
	SetFunctionFlags(0X3F25,0);
	MakeNameEx(0X3F31, "fiBest", SN_LOCAL);
	MakeNameEx(0X3F33, "fiNext", SN_LOCAL);
	MakeNameEx(0X3F3F, "fiNoMore", SN_LOCAL);
	MakeNameEx(0X3F45, "fiFound", SN_LOCAL);
	MakeNameEx(0X3F4C, "fiRet", SN_LOCAL);
	MakeFunction    (0X3F4D,0X3F9F);
	SetFunctionFlags(0X3F4D,0);
	MakeFrame(0X3F4D, 0XC, 0, 0);
	MakeNameEx(0X3F70, "fcNext", SN_LOCAL);
	MakeNameEx(0X3F7E, "fcErr", SN_LOCAL);
	MakeNameEx(0X3F90, "fcMove", SN_LOCAL);
	MakeNameEx(0X3F98, "fcNope", SN_LOCAL);
	MakeNameEx(0X3F99, "fcRet", SN_LOCAL);
	MakeFunction    (0X3F9F,0X3FAC);
	SetFunctionFlags(0X3F9F,0);
	MakeNameEx(0X3FB1, "foNoMore", SN_LOCAL);
	MakeFunction    (0X3FAC,0X3FB1);
	SetFunctionFlags(0X3FAC,0);
	MakeFunction    (0X3FB3,0X3FD2);
	SetFunctionFlags(0X3FB3,0);
	MakeFrame(0X3FB3, 0, 2, 0);
	MakeNameEx(0X3FC5, "geLoop", SN_LOCAL);
	MakeNameEx(0X3FD0, "geRet", SN_LOCAL);
	MakeFunction    (0X3FD2,0X3FE9);
	SetFunctionFlags(0X3FD2,0);
	MakeFunction    (0X3FE9,0X4006);
	SetFunctionFlags(0X3FE9,0);
	MakeFunction    (0X4006,0X4057);
	SetFunctionFlags(0X4006,0);
	MakeNameEx(0X4029, "ld1", SN_LOCAL);
	MakeNameEx(0X4034, "ldNext", SN_LOCAL);
	MakeNameEx(0X403E, "ldErr", SN_LOCAL);
	MakeNameEx(0X404B, "ldDone", SN_LOCAL);
	MakeNameEx(0X4055, "ld2", SN_LOCAL);
	MakeNameEx(0X4056, "ldRet", SN_LOCAL);
	MakeFunction    (0X4057,0X408D);
	SetFunctionFlags(0X4057,0);
	MakeFrame(0X4057, 0, 2, 0);
	MakeNameEx(0X406C, "leNext", SN_LOCAL);
	MakeNameEx(0X4080, "leLoaded", SN_LOCAL);
	MakeNameEx(0X408A, "leOk", SN_LOCAL);
	MakeNameEx(0X408B, "leRet", SN_LOCAL);
	MakeFunction    (0X408D,0X40B5);
	SetFunctionFlags(0X408D,0);
	MakeNameEx(0X40AD, "leSetDirSize", SN_LOCAL);
	MakeFunction    (0X40B5,0X40BC);
	SetFunctionFlags(0X40B5,0);
	MakeFunction    (0X40BC,0X40DB);
	SetFunctionFlags(0X40BC,0);
	MakeNameEx(0X40D3, "oo1", SN_LOCAL);
	MakeNameEx(0X40D9, "ooRet", SN_LOCAL);
	MakeFunction    (0X40DB,0X4120);
	SetFunctionFlags(0X40DB,0);
	MakeFrame(0X40DB, 0, 2, 0);
	MakeNameEx(0X40E4, "paLoop", SN_LOCAL);
	MakeNameEx(0X40F2, "pa1", SN_LOCAL);
	MakeNameEx(0X4117, "paErr", SN_LOCAL);
	MakeNameEx(0X411D, "paOk", SN_LOCAL);
	MakeNameEx(0X411E, "paRet", SN_LOCAL);
	MakeFunction    (0X4120,0X4146);
	SetFunctionFlags(0X4120,0);
	MakeNameEx(0X4125, "plPars", SN_LOCAL);
	MakeNameEx(0X4140, "plFil", SN_LOCAL);
	MakeNameEx(0X4145, "plRet", SN_LOCAL);
	MakeFunction    (0X4146,0X4198);
	SetFunctionFlags(0X4146,0);
	MakeFrame(0X4146, 0, 4, 0);
	MakeNameEx(0X4162, "poLtr", SN_LOCAL);
	MakeNameEx(0X4170, "po1", SN_LOCAL);
	MakeNameEx(0X418A, "poErr", SN_LOCAL);
	MakeNameEx(0X4191, "poOk", SN_LOCAL);
	MakeNameEx(0X4196, "poRet", SN_LOCAL);
	MakeFunction    (0X4198,0X41B2);
	SetFunctionFlags(0X4198,0);
	MakeFrame(0X4198, 0, 4, 0);
	MakeFunction    (0X41D6,0X41ED);
	SetFunctionFlags(0X41D6,0);
	MakeNameEx(0X41DF, "cdLoop", SN_LOCAL);
	MakeFunction    (0X41ED,0X41FD);
	SetFunctionFlags(0X41ED,0);
	MakeFrame(0X41ED, 0, 2, 0);
	MakeFunction    (0X41FD,0X4206);
	SetFunctionFlags(0X41FD,0);
	MakeFrame(0X41FD, 0, 2, 0);
	MakeFunction    (0X4206,0X423D);
	SetFunctionFlags(0X4206,0);
	MakeFrame(0X4206, 0, 2, 0);
	MakeNameEx(0X4219, "cntf1", SN_LOCAL);
	MakeFunction    (0X423D,0X429D);
	SetFunctionFlags(0X423D,0);
	MakeNameEx(0X4266, "dbare1", SN_LOCAL);
	MakeNameEx(0X4283, "dbTailByte", SN_LOCAL);
	MakeNameEx(0X4287, "dbare2", SN_LOCAL);
	MakeNameEx(0X4293, "dbNameExt", SN_LOCAL);
	MakeNameEx(0X429C, "dbRet", SN_LOCAL);
	MakeFunction    (0X429D,0X431F);
	SetFunctionFlags(0X429D,0);
	MakeFrame(0X429D, 0, 4, 0);
	MakeNameEx(0X42BC, "NextNameChar", SN_LOCAL);
	MakeNameEx(0X42CC, "ddf3", SN_LOCAL);
	MakeNameEx(0X42D8, "ddf1", SN_LOCAL);
	MakeNameEx(0X42DD, "ExtChar", SN_LOCAL);
	MakeNameEx(0X42FA, "NextExtChar", SN_LOCAL);
	MakeNameEx(0X430A, "ddf4", SN_LOCAL);
	MakeNameEx(0X4316, "ddf2", SN_LOCAL);
	MakeNameEx(0X431B, "ddDone", SN_LOCAL);
	MakeFunction    (0X431F,0X4346);
	SetFunctionFlags(0X431F,0);
	MakeNameEx(0X432C, "dfNorm", SN_LOCAL);
	MakeNameEx(0X433C, "dfFull", SN_LOCAL);
	MakeNameEx(0X4342, "dfCnt", SN_LOCAL);
	MakeNameEx(0X4345, "dhRet", SN_LOCAL);
	MakeFunction    (0X4346,0X4376);
	SetFunctionFlags(0X4346,0);
	MakeNameEx(0X435E, "dhNorm", SN_LOCAL);
	MakeNameEx(0X4363, "dhCom", SN_LOCAL);
	MakeNameEx(0X4375, "dhRet", SN_LOCAL);
	MakeFunction    (0X4376,0X43B0);
	SetFunctionFlags(0X4376,0);
	MakeFrame(0X4376, 0, 2, 0);
	MakeNameEx(0X43A3, "dn1", SN_LOCAL);
	MakeFunction    (0X43B0,0X43D7);
	SetFunctionFlags(0X43B0,0);
	MakeNameEx(0X43C6, "dnEol", SN_LOCAL);
	MakeNameEx(0X43CC, "dn1st", SN_LOCAL);
	MakeNameEx(0X43D2, "dnDone", SN_LOCAL);
	MakeFunction    (0X43D7,0X44ED);
	SetFunctionFlags(0X43D7,0);
	MakeFrame(0X43D7, 0, 2, 0);
	MakeNameEx(0X43F8, "dr_2", SN_LOCAL);
	MakeNameEx(0X4405, "dr_3", SN_LOCAL);
	MakeNameEx(0X440A, "drNonDir", SN_LOCAL);
	MakeNameEx(0X4427, "dr_4", SN_LOCAL);
	MakeNameEx(0X4431, "dr_5", SN_LOCAL);
	MakeNameEx(0X4434, "drCom", SN_LOCAL);
	MakeNameEx(0X443F, "dr_6", SN_LOCAL);
	MakeNameEx(0X446A, "dr_1", SN_LOCAL);
	MakeNameEx(0X448A, "drPrint", SN_LOCAL);
	MakeNameEx(0X44AE, "dr_narrow", SN_LOCAL);
	MakeNameEx(0X44C0, "dr_7", SN_LOCAL);
	MakeNameEx(0X44E9, "drDone", SN_LOCAL);
	MakeFunction    (0X44ED,0X4500);
	SetFunctionFlags(0X44ED,0);
	MakeFunction    (0X4500,0X456E);
	SetFunctionFlags(0X4500,0);
	MakeNameEx(0X4514, "dcs_1", SN_LOCAL);
	MakeNameEx(0X451E, "dcs_2", SN_LOCAL);
	MakeNameEx(0X4550, "dcs_3", SN_LOCAL);
	MakeNameEx(0X455D, "dcs_4", SN_LOCAL);
	MakeNameEx(0X4567, "dcs_5", SN_LOCAL);
	MakeFunction    (0X456E,0X459C);
	SetFunctionFlags(0X456E,0);
	MakeFrame(0X456E, 0, 2, 0);
	MakeNameEx(0X457E, "dw1", SN_LOCAL);
	MakeNameEx(0X458C, "dw2", SN_LOCAL);
	MakeNameEx(0X4595, "dw3", SN_LOCAL);
	MakeNameEx(0X459A, "dwDone", SN_LOCAL);
	MakeFunction    (0X459C,0X45BC);
	SetFunctionFlags(0X459C,0);
	MakeNameEx(0X45B4, "epNew", SN_LOCAL);
	MakeFunction    (0X45BC,0X45CD);
	SetFunctionFlags(0X45BC,0);
	MakeNameEx(0X45C8, "gdl1", SN_LOCAL);
	MakeFunction    (0X45CD,0X45E8);
	SetFunctionFlags(0X45CD,0);
	MakeFunction    (0X45E8,0X45F7);
	SetFunctionFlags(0X45E8,0);
	MakeNameEx(0X45F6, "ulRet", SN_LOCAL);
	MakeFunction    (0X45F7,0X4602);
	SetFunctionFlags(0X45F7,0);
	MakeFunction    (0X4614,0X461F);
	SetFunctionFlags(0X4614,0);
	MakeNameEx(0X461E, "lcRet", SN_LOCAL);
	MakeFunction    (0X461F,0X463E);
	SetFunctionFlags(0X461F,0);
	MakeFrame(0X461F, 0, 2, 0);
	MakeNameEx(0X4623, "NextChar", SN_LOCAL);
	MakeNameEx(0X4636, "NextChar_@", SN_LOCAL);
	MakeNameEx(0X463C, "EndOfString", SN_LOCAL);
	MakeFunction    (0X463E,0X465C);
	SetFunctionFlags(0X463E,0);
	MakeFrame(0X463E, 0, 6, 0);
	MakeNameEx(0X4643, "cdtb_check", SN_LOCAL);
	MakeNameEx(0X4650, "cdtb_next", SN_LOCAL);
	MakeFunction    (0X465C,0X4669);
	SetFunctionFlags(0X465C,0);
	MakeFunction    (0X48F9,0X4930);
	SetFunctionFlags(0X48F9,0);
	MakeFrame(0X48F9, 0, 6, 0);
	MakeNameEx(0X492C, "daRet", SN_LOCAL);
	MakeFunction    (0X4930,0X49B1);
	SetFunctionFlags(0X4930,0);
	MakeNameEx(0X4972, "drvok", SN_LOCAL);
	MakeNameEx(0X497F, "Get_vol_name", SN_LOCAL);
	MakeNameEx(0X4992, "print_serial", SN_LOCAL);
	MakeNameEx(0X49AE, "printvol_end", SN_LOCAL);
	MakeFunction    (0X49B1,0X49C1);
	SetFunctionFlags(0X49B1,0);
	MakeFunction    (0X49C1,0X49D8);
	SetFunctionFlags(0X49C1,0);
	MakeFrame(0X49C1, 0, 16, 0);
	MakeFunction    (0X4A3A,0X4A52);
	SetFunctionFlags(0X4A3A,0);
	MakeFunction    (0X4A52,0X4AC4);
	SetFunctionFlags(0X4A52,0);
	MakeFrame(0X4A52, 0, 4, 0);
	MakeNameEx(0X4A57, "PP0", SN_LOCAL);
	MakeNameEx(0X4A69, "PP1", SN_LOCAL);
	MakeNameEx(0X4A75, "PP2", SN_LOCAL);
	MakeNameEx(0X4A7F, "PP3", SN_LOCAL);
	MakeNameEx(0X4A89, "PP4", SN_LOCAL);
	MakeNameEx(0X4A9A, "PP5", SN_LOCAL);
	MakeNameEx(0X4AA5, "PP6", SN_LOCAL);
	MakeNameEx(0X4AB6, "PP7", SN_LOCAL);
	MakeNameEx(0X4AC1, "PP8", SN_LOCAL);
	MakeFunction    (0X4B09,0X4B0D);
	SetFunctionFlags(0X4B09,0);
	MakeFunction    (0X4B13,0X4B22);
	SetFunctionFlags(0X4B13,0);
	MakeFrame(0X4B13, 0, 4, 0);
	MakeFunction    (0X4B2C,0X4B55);
	SetFunctionFlags(0X4B2C,0);
	MakeNameEx(0X4B51, "doprint", SN_LOCAL);
	MakeFunction    (0X4B55,0X4B66);
	SetFunctionFlags(0X4B55,0x4000);
	MakeFunction    (0X4B66,0X4B95);
	SetFunctionFlags(0X4B66,0);
	MakeNameEx(0X4B78, "gotdrive", SN_LOCAL);
	MakeNameEx(0X4B87, "dpbisok", SN_LOCAL);
	MakeFunction    (0X4B95,0X4C0B);
	SetFunctionFlags(0X4B95,0x4000);
	MakeNameEx(0X4BA8, "pathslp", SN_LOCAL);
	MakeNameEx(0X4BB4, "path_hold", SN_LOCAL);
	MakeNameEx(0X4BB7, "notkanj2", SN_LOCAL);
	MakeNameEx(0X4BC3, "scan_white", SN_LOCAL);
	MakeNameEx(0X4BE1, "path_eol", SN_LOCAL);
	MakeNameEx(0X4BF3, "store_path", SN_LOCAL);
	MakeNameEx(0X4BFD, "got_paths", SN_LOCAL);
	MakeNameEx(0X4C01, "disppath", SN_LOCAL);
	MakeFunction    (0X4C0B,0X4C41);
	SetFunctionFlags(0X4C0B,0);
	MakeNameEx(0X4C11, "path0", SN_LOCAL);
	MakeNameEx(0X4C1B, "path1", SN_LOCAL);
	MakeFunction    (0X4C41,0X4CAC);
	SetFunctionFlags(0X4C41,0x4000);
	MakeNameEx(0X4C68, "no_variable", SN_LOCAL);
	MakeNameEx(0X4C7A, "ansicls", SN_LOCAL);
	MakeNameEx(0X4C7F, "cls_normal", SN_LOCAL);
	MakeNameEx(0X4C91, "DoAlpha", SN_LOCAL);
	MakeNameEx(0X4CA6, "regcls", SN_LOCAL);
	MakeNameEx(0X4CAB, "cls_ret", SN_LOCAL);
	MakeFunction    (0X4CAC,0X4CCF);
	SetFunctionFlags(0X4CAC,0);
	MakeFunction    (0X4CCF,0X4CE1);
	SetFunctionFlags(0X4CCF,0);
	MakeNameEx(0X4CD9, "clrloop", SN_LOCAL);
	MakeFunction    (0X4CE1,0X4D85);
	SetFunctionFlags(0X4CE1,0x4002);
	MakeNameEx(0X4D02, "ctty_move_filename", SN_LOCAL);
	MakeNameEx(0X4D11, "ctty_error", SN_LOCAL);
	MakeNameEx(0X4D13, "nocolon", SN_LOCAL);
	MakeNameEx(0X4D29, "closedev", SN_LOCAL);
	MakeNameEx(0X4D2D, "isbaddev", SN_LOCAL);
	MakeNameEx(0X4D35, "devisok", SN_LOCAL);
	MakeNameEx(0X4D5D, "iclloop", SN_LOCAL);
	MakeNameEx(0X4D75, "resret", SN_LOCAL);
	MakeFunction    (0X4ED8,0X4EEF);
	SetFunctionFlags(0X4ED8,0);
	MakeNameEx(0X4EEB, "ok_to_setup_pmsg", SN_LOCAL);
	MakeNameEx(0X4EEE, "parse_good_eol", SN_LOCAL);
	MakeFunction    (0X4EEF,0X4F03);
	SetFunctionFlags(0X4EEF,0);
	MakeNameEx(0X4F02, "parse_msg_good", SN_LOCAL);
	MakeFunction    (0X4F03,0X4F25);
	SetFunctionFlags(0X4F03,0);
	MakeNameEx(0X4F23, "setup_parse_msg_ret", SN_LOCAL);
	MakeFunction    (0X5021,0X5049);
	SetFunctionFlags(0X5021,0);
	MakeNameEx(0X503E, "not_dnull", SN_LOCAL);
	MakeNameEx(0X5047, "del1", SN_LOCAL);
	MakeFunction    (0X504A,0X504F);
	SetFunctionFlags(0X504A,0);
	MakeFunction    (0X504F,0X5052);
	SetFunctionFlags(0X504F,0);
	MakeFunction    (0X5052,0X505A);
	SetFunctionFlags(0X5052,0);
	MakeFunction    (0X505A,0X509F);
	SetFunctionFlags(0X505A,0);
	MakeNameEx(0X5069, "find1", SN_LOCAL);
	MakeNameEx(0X506C, "find11", SN_LOCAL);
	MakeNameEx(0X5081, "notkanj3", SN_LOCAL);
	MakeNameEx(0X508D, "find12", SN_LOCAL);
	MakeFunction    (0X509F,0X50B3);
	SetFunctionFlags(0X509F,0);
	MakeFrame(0X509F, 0, 2, 0);
	MakeNameEx(0X50AD, "COUNTX", SN_LOCAL);
	MakeFunction    (0X50B3,0X50D2);
	SetFunctionFlags(0X50B3,0);
	MakeNameEx(0X50C7, "notkanj1", SN_LOCAL);
	MakeFunction    (0X50D2,0X50E0);
	SetFunctionFlags(0X50D2,0);
	MakeFunction    (0X50E0,0X50F6);
	SetFunctionFlags(0X50E0,0);
	MakeNameEx(0X50EB, "sdn1", SN_LOCAL);
	MakeFunction    (0X50F6,0X50FA);
	SetFunctionFlags(0X50F6,0);
	MakeFunction    (0X50FA,0X5102);
	SetFunctionFlags(0X50FA,0);
	MakeFunction    (0X5102,0X512C);
	SetFunctionFlags(0X5102,0);
	MakeFrame(0X5102, 0, 6, 0);
	MakeNameEx(0X510E, "ktlop", SN_LOCAL);
	MakeNameEx(0X5121, "notlead", SN_LOCAL);
	MakeNameEx(0X5125, "islead", SN_LOCAL);
	MakeNameEx(0X5128, "ktret", SN_LOCAL);
	MakeFunction    (0X512C,0X514F);
	SetFunctionFlags(0X512C,0);
	MakeNameEx(0X5144, "oth_fucase", SN_LOCAL);
	MakeNameEx(0X514E, "upconv_end", SN_LOCAL);
	MakeFunction    (0X514F,0X51B1);
	SetFunctionFlags(0X514F,0);
	MakeFrame(0X514F, 0, 8, 0);
	MakeNameEx(0X5178, "bad_env_size", SN_LOCAL);
	MakeNameEx(0X517B, "envsiz_ok", SN_LOCAL);
	MakeNameEx(0X5191, "envnoset", SN_LOCAL);
	MakeNameEx(0X51A7, "store1", SN_LOCAL);
	MakeFunction    (0X51B1,0X51C5);
	SetFunctionFlags(0X51B1,0);
	MakeFrame(0X51B1, 0, 4, 0);
	MakeFunction    (0X51C5,0X51DF);
	SetFunctionFlags(0X51C5,0);
	MakeFrame(0X51C5, 0, 2, 0);
	MakeFunction    (0X51DF,0X524B);
	SetFunctionFlags(0X51DF,0x4000);
	MakeNameEx(0X5207, "bwdj", SN_LOCAL);
	MakeNameEx(0X520D, "chdir_retn", SN_LOCAL);
	MakeNameEx(0X520E, "REALCD", SN_LOCAL);
	MakeNameEx(0X5244, "BadChDir", SN_LOCAL);
	MakeNameEx(0X5247, "ChDirErr", SN_LOCAL);
	MakeFunction    (0X524B,0X5290);
	SetFunctionFlags(0X524B,0x4000);
	MakeNameEx(0X5269, "badmderr", SN_LOCAL);
	MakeNameEx(0X5289, "MD_other_err", SN_LOCAL);
	MakeNameEx(0X528C, "MkDirErr", SN_LOCAL);
	MakeFunction    (0X5290,0X52C2);
	SetFunctionFlags(0X5290,0x4000);
	MakeNameEx(0X52AB, "mrdir_move_filename", SN_LOCAL);
	MakeNameEx(0X52BB, "noargerr", SN_LOCAL);
	MakeFunction    (0X52C2,0X52E9);
	SetFunctionFlags(0X52C2,0x4000);
	MakeNameEx(0X52E2, "badrderr", SN_LOCAL);
	MakeNameEx(0X52E5, "RmDirErr", SN_LOCAL);
	MakeFunction    (0X52E9,0X52FE);
	SetFunctionFlags(0X52E9,0x4000);
	MakeFunction    (0X52FE,0X5325);
	SetFunctionFlags(0X52FE,0);
	MakeNameEx(0X530F, "GOTUDRV", SN_LOCAL);
	MakeFunction    (0X5325,0X5332);
	SetFunctionFlags(0X5325,0);
	MakeFrame(0X5325, 0, 2, 0);
	MakeFunction    (0X5332,0X533A);
	SetFunctionFlags(0X5332,0);
	MakeFunction    (0X533A,0X5351);
	SetFunctionFlags(0X533A,0);
	MakeFunction    (0X5351,0X5377);
	SetFunctionFlags(0X5351,0);
	MakeNameEx(0X5354, "MAINNAME", SN_LOCAL);
	MakeNameEx(0X535A, "SKIPSPC", SN_LOCAL);
	MakeNameEx(0X536B, "EXTNAME", SN_LOCAL);
	MakeNameEx(0X5373, "GOTNAME", SN_LOCAL);
	MakeFunction    (0X5377,0X5382);
	SetFunctionFlags(0X5377,0);
	MakeFunction    (0X5382,0X53C4);
	SetFunctionFlags(0X5382,0);
	MakeFrame(0X5382, 0, 2, 0);
	MakeNameEx(0X53C1, "go_to_error", SN_LOCAL);
	MakeFunction    (0X53C4,0X53D5);
	SetFunctionFlags(0X53C4,0);
	MakeFrame(0X53C4, 0, 2, 0);
	MakeNameEx(0X53D1, "noslasht", SN_LOCAL);
	MakeNameEx(0X53D3, "pccont", SN_LOCAL);
	MakeFunction    (0X53D5,0X54D9);
	SetFunctionFlags(0X53D5,0);
	MakeNameEx(0X5407, "chdir_worked", SN_LOCAL);
	MakeNameEx(0X5417, "pcrunch_cderrj", SN_LOCAL);
	MakeNameEx(0X541A, "trypeel", SN_LOCAL);
	MakeNameEx(0X542E, "delstrt", SN_LOCAL);
	MakeNameEx(0X5433, "delloop", SN_LOCAL);
	MakeNameEx(0X5440, "notkanj8", SN_LOCAL);
	MakeNameEx(0X544A, "gotdele", SN_LOCAL);
	MakeNameEx(0X5455, "delloop2", SN_LOCAL);
	MakeNameEx(0X546B, "trycd", SN_LOCAL);
	MakeNameEx(0X547C, "trycd1", SN_LOCAL);
	MakeNameEx(0X5492, "peelfail", SN_LOCAL);
	MakeNameEx(0X5494, "notdoublesl", SN_LOCAL);
	MakeNameEx(0X549E, "pcrunch_cderr", SN_LOCAL);
	MakeNameEx(0X54A7, "pcrunch_retn", SN_LOCAL);
	MakeNameEx(0X54A8, "badret", SN_LOCAL);
	MakeNameEx(0X54BF, "cdsucc", SN_LOCAL);
	MakeNameEx(0X54D7, "pcrunch_end", SN_LOCAL);
	MakeFunction    (0X54DB,0X550B);
	SetFunctionFlags(0X54DB,0);
	MakeNameEx(0X54D9, "RETSW", SN_LOCAL);
	MakeNameEx(0X54DD, "SWLOOP", SN_LOCAL);
	MakeNameEx(0X5509, "BADSW", SN_LOCAL);
	MakeFunction    (0X5600,0X5616);
	SetFunctionFlags(0X5600,0);
	MakeFrame(0X5600, 0, 2, 0);
	MakeFunction    (0X571D,0X589B);
	SetFunctionFlags(0X571D,0);
	MakeNameEx(0X5728, "COUNTQUOTES", SN_LOCAL);
	MakeNameEx(0X5731, "COUNTEND", SN_LOCAL);
	MakeNameEx(0X5738, "KanjiScan", SN_LOCAL);
	MakeNameEx(0X574D, "KanjiQuote", SN_LOCAL);
	MakeNameEx(0X5755, "KanjiQuoteLoop", SN_LOCAL);
	MakeNameEx(0X575E, "KanjiEnd", SN_LOCAL);
	MakeNameEx(0X5765, "PRESCANLP", SN_LOCAL);
	MakeNameEx(0X5778, "NOTKANJ6", SN_LOCAL);
	MakeNameEx(0X5780, "QLOOP", SN_LOCAL);
	MakeNameEx(0X578C, "TRYGREATER", SN_LOCAL);
	MakeNameEx(0X579A, "NOAPPND", SN_LOCAL);
	MakeNameEx(0X57A5, "REOUT_ERRSET", SN_LOCAL);
	MakeNameEx(0X57B2, "GOTREOFIL", SN_LOCAL);
	MakeNameEx(0X57B9, "SETREOUTSTR", SN_LOCAL);
	MakeNameEx(0X57BD, "SETREOUTSTR_LOOP", SN_LOCAL);
	MakeNameEx(0X57D9, "ABRACKET_TERM", SN_LOCAL);
	MakeNameEx(0X57DC, "GOTRESTR_J", SN_LOCAL);
	MakeNameEx(0X57DF, "NO_ABRACKET", SN_LOCAL);
	MakeNameEx(0X57EE, "NO_ABRACKET_@", SN_LOCAL);
	MakeNameEx(0X57F2, "PIPEERRSYNJ5_J", SN_LOCAL);
	MakeNameEx(0X57F5, "NOOUT", SN_LOCAL);
	MakeNameEx(0X5806, "REIN_ERRSET", SN_LOCAL);
	MakeNameEx(0X5811, "GOTREIFIL", SN_LOCAL);
	MakeNameEx(0X581C, "CHKPIPE", SN_LOCAL);
	MakeNameEx(0X5828, "ISPIPE3", SN_LOCAL);
	MakeNameEx(0X5835, "NOECHOPUSH", SN_LOCAL);
	MakeNameEx(0X5849, "PIPEERRSYNJ5", SN_LOCAL);
	MakeNameEx(0X584E, "GOTRESTR", SN_LOCAL);
	MakeNameEx(0X5860, "NOTRAILCOL", SN_LOCAL);
	MakeNameEx(0X5865, "CONTPRESCAN", SN_LOCAL);
	MakeNameEx(0X5872, "PRESCANEND", SN_LOCAL);
	MakeNameEx(0X5888, "PIPESETLP", SN_LOCAL);
	MakeNameEx(0X588E, "ISNOPIPE", SN_LOCAL);
	MakeFunction    (0X589B,0X58B8);
	SetFunctionFlags(0X589B,0);
	MakeNameEx(0X58AA, "cmdcopy", SN_LOCAL);
	MakeNameEx(0X58B3, "copy_done", SN_LOCAL);
	MakeFunction    (0X58B8,0X58C9);
	SetFunctionFlags(0X58B8,0);
	MakeFunction    (0X58C9,0X5947);
	SetFunctionFlags(0X58C9,0);
	MakeNameEx(0X58F6, "SKIPPATH", SN_LOCAL);
	MakeNameEx(0X58FB, "SKIPPATH2", SN_LOCAL);
	MakeNameEx(0X590C, "TESTPPSEP", SN_LOCAL);
	MakeNameEx(0X5915, "TESTPMETA", SN_LOCAL);
	MakeNameEx(0X591E, "TESTPSTAR", SN_LOCAL);
	MakeNameEx(0X5927, "TESTPDELIM", SN_LOCAL);
	MakeNameEx(0X5932, "PATHDONEDEC", SN_LOCAL);
	MakeNameEx(0X5933, "PATHDONE", SN_LOCAL);
	MakeNameEx(0X593E, "NOPSTORE", SN_LOCAL);
	MakeFunction    (0X5947,0X5955);
	SetFunctionFlags(0X5947,0);
	MakeFunction    (0X5955,0X5961);
	SetFunctionFlags(0X5955,0);
	MakeNameEx(0X595F, "PSCANOFFD", SN_LOCAL);
	MakeFunction    (0X5961,0X5985);
	SetFunctionFlags(0X5961,0);
	MakeFrame(0X5961, 0, 10, 0);
	MakeNameEx(0X597F, "NOREDIR", SN_LOCAL);
	MakeFunction    (0X5985,0X59CD);
	SetFunctionFlags(0X5985,0);
	MakeNameEx(0X59BA, "_CERRORJ", SN_LOCAL);
	MakeNameEx(0X59BD, "OpenError", SN_LOCAL);
	MakeFunction    (0X59CD,0X5A5E);
	SetFunctionFlags(0X59CD,0);
	MakeNameEx(0X59D7, "REOUTEXISTS", SN_LOCAL);
	MakeNameEx(0X5A2A, "reout_0_length", SN_LOCAL);
	MakeNameEx(0X5A3A, "OpenWriteError", SN_LOCAL);
	MakeNameEx(0X5A43, "REOUTCRT", SN_LOCAL);
	MakeNameEx(0X5A53, "NOREDIRERR", SN_LOCAL);
	MakeNameEx(0X5A55, "SET_REOUT", SN_LOCAL);
	MakeNameEx(0X5A5D, "NOREOUT", SN_LOCAL);
	MakeFunction    (0X5A5E,0X5A6C);
	SetFunctionFlags(0X5A5E,0);
	MakeFrame(0X5A5E, 0, 2, 0);
	MakeNameEx(0X5A62, "dloop", SN_LOCAL);
	MakeFunction    (0X5A6C,0X5A93);
	SetFunctionFlags(0X5A6C,0);
	MakeNameEx(0X5A8A, "NoMove", SN_LOCAL);
	MakeFunction    (0X5A97,0X5ABE);
	SetFunctionFlags(0X5A97,0);
	MakeFrame(0X5A97, 0, 6, 0);
	MakeNameEx(0X5AA3, "mts_get_chars", SN_LOCAL);
	MakeNameEx(0X5AAC, "mts_end_string", SN_LOCAL);
	MakeFunction    (0X5ABE,0X5AD3);
	SetFunctionFlags(0X5ABE,0);
	MakeFrame(0X5ABE, 0, 2, 0);
	MakeNameEx(0X5AD1, "TESTDONE", SN_LOCAL);
	MakeFunction    (0X5AD3,0X5AD5);
	SetFunctionFlags(0X5AD3,0);
	MakeFunction    (0X5AD5,0X5ADF);
	SetFunctionFlags(0X5AD5,0);
	MakeFrame(0X5AD5, 0, 2, 0);
	MakeFunction    (0X5ADF,0X5B01);
	SetFunctionFlags(0X5ADF,0);
	MakeFrame(0X5ADF, 0, 4, 0);
	MakeFunction    (0X5C74,0X5CA7);
	SetFunctionFlags(0X5C74,0x4002);
	MakeFunction    (0X5CA7,0X5D11);
	SetFunctionFlags(0X5CA7,0x4000);
	MakeNameEx(0X5CC0, "PRMTDAT", SN_LOCAL);
	MakeNameEx(0X5CD3, "GET_NEW_DATE", SN_LOCAL);
	MakeNameEx(0X5CE0, "COMDAT", SN_LOCAL);
	MakeNameEx(0X5D05, "date_end", SN_LOCAL);
	MakeNameEx(0X5D06, "DATERR", SN_LOCAL);
	MakeFunction    (0X5D11,0X5D83);
	SetFunctionFlags(0X5D11,0x4000);
	MakeNameEx(0X5D2A, "PRMTTIM", SN_LOCAL);
	MakeNameEx(0X5D41, "GET_NEW_TIME", SN_LOCAL);
	MakeNameEx(0X5D4E, "COMTIM", SN_LOCAL);
	MakeNameEx(0X5D77, "time_end", SN_LOCAL);
	MakeNameEx(0X5D78, "TIMERR", SN_LOCAL);
	MakeFunction    (0X5D83,0X5D93);
	SetFunctionFlags(0X5D83,0x4000);
	MakeFunction    (0X5D93,0X5DAB);
	SetFunctionFlags(0X5D93,0);
	MakeFrame(0X5D93, 0, 4, 0);
	MakeNameEx(0X5DA8, "PipeOffDone", SN_LOCAL);
	MakeFunction    (0X5DC9,0X5E26);
	SetFunctionFlags(0X5DC9,0x4000);
	MakeNameEx(0X5DE9, "printformat", SN_LOCAL);
	MakeFunction    (0X5E26,0X5E52);
	SetFunctionFlags(0X5E26,0x4000);
	MakeFunction    (0X5E52,0X5E5E);
	SetFunctionFlags(0X5E52,0);
	MakeNameEx(0X5E53, "skw_lp", SN_LOCAL);
	MakeFunction    (0X5E5E,0X5E85);
	SetFunctionFlags(0X5E5E,0);
	MakeFunction    (0X5E85,0X5F0D);
	SetFunctionFlags(0X5E85,0);
	MakeFrame(0X5E85, 0, 12, 0);
	MakeNameEx(0X5ED3, "PCONT", SN_LOCAL);
	MakeNameEx(0X5ED8, "PARSELOOP", SN_LOCAL);
	MakeNameEx(0X5EF4, "MORE_PRSE", SN_LOCAL);
	MakeNameEx(0X5F00, "PARSEDONE", SN_LOCAL);
	MakeNameEx(0X5F04, "PARSE_ERROR", SN_LOCAL);
	MakeNameEx(0X5F06, "PARSE_EXIT", SN_LOCAL);
	MakeFunction    (0X5F0D,0X5F80);
	SetFunctionFlags(0X5F0D,0);
	MakeFrame(0X5F0D, 0, 10, 0);
	MakeNameEx(0X5F5E, "newarg_@", SN_LOCAL);
	MakeNameEx(0X5F6C, "buf_oflow", SN_LOCAL);
	MakeNameEx(0X5F75, "to_many_args", SN_LOCAL);
	MakeNameEx(0X5F7A, "newarg_exit", SN_LOCAL);
	MakeFunction    (0X5F80,0X5FB3);
	SetFunctionFlags(0X5F80,0);
	MakeFrame(0X5F80, 0, 8, 0);
	MakeNameEx(0X5FA6, "no_switch0", SN_LOCAL);
	MakeNameEx(0X5FAC, "arg_no_switch1", SN_LOCAL);
	MakeNameEx(0X5FAE, "arg_switch_exit", SN_LOCAL);
	MakeFunction    (0X5FB3,0X5FBF);
	SetFunctionFlags(0X5FB3,0);
	MakeFrame(0X5FB3, 0, 2, 0);
	MakeFunction    (0X5FBF,0X612E);
	SetFunctionFlags(0X5FBF,0);
	MakeFrame(0X5FBF, 0, 12, 0);
	MakeNameEx(0X5FCD, "path_failure_jmp", SN_LOCAL);
	MakeNameEx(0X5FD0, "path_search_ok", SN_LOCAL);
	MakeNameEx(0X6021, "adddrive", SN_LOCAL);
	MakeNameEx(0X6029, "movedrive", SN_LOCAL);
	MakeNameEx(0X602E, "checkpath", SN_LOCAL);
	MakeNameEx(0X6048, "addpath", SN_LOCAL);
	MakeNameEx(0X605B, "scanend", SN_LOCAL);
	MakeNameEx(0X6063, "foundend", SN_LOCAL);
	MakeNameEx(0X6064, "movepath", SN_LOCAL);
	MakeNameEx(0X606A, "copypath", SN_LOCAL);
	MakeNameEx(0X606E, "_copydone", SN_LOCAL);
	MakeNameEx(0X6071, "path_noinit", SN_LOCAL);
	MakeNameEx(0X6086, "path_loop", SN_LOCAL);
	MakeNameEx(0X6093, "path_failure", SN_LOCAL);
	MakeNameEx(0X6098, "path_found", SN_LOCAL);
	MakeNameEx(0X60EB, "path_cpy", SN_LOCAL);
	MakeNameEx(0X60F5, "kloop", SN_LOCAL);
	MakeNameEx(0X6106, "popdone", SN_LOCAL);
	MakeNameEx(0X610C, "_notkanj1", SN_LOCAL);
	MakeNameEx(0X6118, "path_store", SN_LOCAL);
	MakeNameEx(0X6119, "path_success", SN_LOCAL);
	MakeNameEx(0X611E, "path_succ_loop", SN_LOCAL);
	MakeNameEx(0X6126, "path_exit", SN_LOCAL);
	MakeFunction    (0X612E,0X6142);
	SetFunctionFlags(0X612E,0);
	MakeFrame(0X612E, 0, 2, 0);
	MakeNameEx(0X613D, "STORE_SLASH", SN_LOCAL);
	MakeFunction    (0X6142,0X61B7);
	SetFunctionFlags(0X6142,0);
	MakeFrame(0X6142, 0, 10, 0);
	MakeNameEx(0X615E, "path_cr_copy", SN_LOCAL);
	MakeNameEx(0X6172, "_notkanj2", SN_LOCAL);
	MakeNameEx(0X6177, "path_seg", SN_LOCAL);
	MakeNameEx(0X6192, "path_cr_store", SN_LOCAL);
	MakeNameEx(0X6193, "path_cr_l1", SN_LOCAL);
	MakeNameEx(0X6195, "path_cr_l2", SN_LOCAL);
	MakeNameEx(0X61A7, "path_cr_leave", SN_LOCAL);
	MakeNameEx(0X61AF, "path_cr_empty", SN_LOCAL);
	MakeNameEx(0X61B1, "path_cr_exit", SN_LOCAL);
	MakeFunction    (0X61B7,0X6236);
	SetFunctionFlags(0X61B7,0);
	MakeFrame(0X61B7, 0, 8, 0);
	MakeNameEx(0X61D2, "SEARCH_DIR_CHECK", SN_LOCAL);
	MakeNameEx(0X61EE, "SEARCH_LOOP", SN_LOCAL);
	MakeNameEx(0X620A, "SEARCH_NEXT", SN_LOCAL);
	MakeNameEx(0X6214, "SEARCH_DONE", SN_LOCAL);
	MakeNameEx(0X6226, "SEARCH_INVALID_DRIVE", SN_LOCAL);
	MakeNameEx(0X622D, "SEARCH_NO_FILE", SN_LOCAL);
	MakeNameEx(0X6230, "SEARCH_EXIT", SN_LOCAL);
	MakeFunction    (0X6236,0X6291);
	SetFunctionFlags(0X6236,0);
	MakeFrame(0X6236, 0, 4, 0);
	MakeNameEx(0X6259, "FTYPE_EXE", SN_LOCAL);
	MakeNameEx(0X6269, "FTYPE_BAT", SN_LOCAL);
	MakeNameEx(0X6279, "FTYPE_FAIL", SN_LOCAL);
	MakeNameEx(0X627C, "FTYPE_EXIT", SN_LOCAL);
	MakeNameEx(0X628E, "FTYPE_DONE", SN_LOCAL);
	MakeFunction    (0X6291,0X62F3);
	SetFunctionFlags(0X6291,0);
	MakeFrame(0X6291, 0, 12, 0);
	MakeNameEx(0X62C3, "PROCESS_EXT", SN_LOCAL);
	MakeNameEx(0X62E6, "SKIP_WILDS", SN_LOCAL);
	MakeNameEx(0X62EA, "STRIP_ERROR", SN_LOCAL);
	MakeNameEx(0X62EC, "STRIP_EXIT", SN_LOCAL);
	MakeFunction    (0X62F3,0X635A);
	SetFunctionFlags(0X62F3,0);
	MakeFrame(0X62F3, 0, 12, 0);
	MakeNameEx(0X6321, "SAVE_PTR_LOOP", SN_LOCAL);
	MakeNameEx(0X6348, "SAVE_DONE", SN_LOCAL);
	MakeNameEx(0X634D, "SAVE_ERROR", SN_LOCAL);
	MakeNameEx(0X6351, "SAVE_OK", SN_LOCAL);
	MakeNameEx(0X6353, "SAVE_EXIT", SN_LOCAL);
	MakeFunction    (0X650F,0X6564);
	SetFunctionFlags(0X650F,0);
	MakeNameEx(0X6512, "scan_on_off", SN_LOCAL);
	MakeNameEx(0X6520, "parse_on_off", SN_LOCAL);
	MakeNameEx(0X6538, "on_off_there", SN_LOCAL);
	MakeNameEx(0X6544, "good_on_off", SN_LOCAL);
	MakeNameEx(0X655C, "BADONF_flags", SN_LOCAL);
	MakeNameEx(0X655F, "BADONF", SN_LOCAL);
	MakeNameEx(0X6563, "on_off_end", SN_LOCAL);
	MakeFunction    (0X657E,0X65A4);
	SetFunctionFlags(0X657E,0);
	MakeFunction    (0X65A4,0X65AE);
	SetFunctionFlags(0X65A4,0);
	MakeFunction    (0X686B,0X6875);
	SetFunctionFlags(0X686B,0);
	MakeFunction    (0X6875,0X6895);
	SetFunctionFlags(0X6875,0);
	MakeFunction    (0X6A5C,0X6A68);
	SetFunctionFlags(0X6A5C,0);
	MakeFunction    (0X6A68,0X6A79);
	SetFunctionFlags(0X6A68,0);
	MakeFrame(0X6A68, 0, 2, 0);
	MakeFunction    (0X6A79,0X6B75);
	SetFunctionFlags(0X6A79,0);
	MakeNameEx(0X6AAF, "Error_On_Source", SN_LOCAL);
	MakeNameEx(0X6ACA, "No_Close_Src", SN_LOCAL);
	MakeNameEx(0X6AD4, "EndCopyJ3", SN_LOCAL);
	MakeNameEx(0X6AD7, "No_Copy_Xa", SN_LOCAL);
	MakeNameEx(0X6AF6, "COPYLP", SN_LOCAL);
	MakeNameEx(0X6B14, "GOTROOM", SN_LOCAL);
	MakeNameEx(0X6B32, "NOTESTA", SN_LOCAL);
	MakeNameEx(0X6B49, "USEALL", SN_LOCAL);
	MakeNameEx(0X6B4D, "BINREAD", SN_LOCAL);
	MakeNameEx(0X6B67, "TESTDEV", SN_LOCAL);
	MakeFunction    (0X6B75,0X6B7E);
	SetFunctionFlags(0X6B75,0);
	MakeFunction    (0X6B7E,0X6C0E);
	SetFunctionFlags(0X6B7E,0);
	MakeNameEx(0X6B96, "CONCHNG", SN_LOCAL);
	MakeNameEx(0X6B98, "NOCONC", SN_LOCAL);
	MakeNameEx(0X6BBB, "BINCLOS", SN_LOCAL);
	MakeNameEx(0X6BC5, "FORGETITJ", SN_LOCAL);
	MakeNameEx(0X6BCA, "NO_FORGET", SN_LOCAL);
	MakeNameEx(0X6C54, "FORGETIT", SN_LOCAL);
	MakeFunction    (0X6C0E,0X6C54);
	SetFunctionFlags(0X6C0E,0);
	MakeNameEx(0X6C34, "Cleanup_Err", SN_LOCAL);
	MakeNameEx(0X6C3C, "Close_Cont", SN_LOCAL);
	MakeNameEx(0X6C4A, "CLOSEDONE", SN_LOCAL);
	MakeNameEx(0X6C4E, "FILECLOSED", SN_LOCAL);
	MakeFunction    (0X6C66,0X6C75);
	SetFunctionFlags(0X6C66,0);
	MakeFunction    (0X6C75,0X6C9E);
	SetFunctionFlags(0X6C75,0);
	MakeFrame(0X6C75, 0, 2, 0);
	MakeFunction    (0X6C9E,0X6CB7);
	SetFunctionFlags(0X6C9E,0);
	MakeNameEx(0X6CB6, "CleanupErr_Cont", SN_LOCAL);
	MakeFunction    (0X6CB7,0X6D81);
	SetFunctionFlags(0X6CB7,0);
	MakeNameEx(0X6CC9, "getansw_1", SN_LOCAL);
	MakeNameEx(0X6D07, "getansw_2", SN_LOCAL);
	MakeNameEx(0X6D2F, "getansw_3", SN_LOCAL);
	MakeNameEx(0X6D4F, "getansw_4", SN_LOCAL);
	MakeNameEx(0X6D7D, "getansw_5", SN_LOCAL);
	MakeNameEx(0X6D7F, "getansw_6", SN_LOCAL);
	MakeFunction    (0X6D81,0X6DC8);
	SetFunctionFlags(0X6D81,0);
	MakeNameEx(0X6DB3, "icpcmd_1", SN_LOCAL);
	MakeNameEx(0X6DB8, "icpcmd_2", SN_LOCAL);
	MakeNameEx(0X6DBA, "icpcmd_3", SN_LOCAL);
	MakeFunction    (0X6DC8,0X6DDB);
	SetFunctionFlags(0X6DC8,0);
	MakeNameEx(0X6DD7, "gcpcmdo_1", SN_LOCAL);
	MakeNameEx(0X6DD9, "gcpcmdo_2", SN_LOCAL);
	MakeFunction    (0X6DDB,0X6DFA);
	SetFunctionFlags(0X6DDB,0);
	MakeNameEx(0X6DDF, "gecpcmd_1", SN_LOCAL);
	MakeNameEx(0X6DF6, "gecpcmd_2", SN_LOCAL);
	MakeNameEx(0X6DF8, "gecpcmd_3", SN_LOCAL);
	MakeFunction    (0X6DFA,0X6E07);
	SetFunctionFlags(0X6DFA,0);
	MakeFunction    (0X6E07,0X6FB0);
	SetFunctionFlags(0X6E07,0);
	MakeNameEx(0X6E16, "NotExists", SN_LOCAL);
	MakeNameEx(0X6E32, "No_Concat_Err", SN_LOCAL);
	MakeNameEx(0X6E37, "ProcDest", SN_LOCAL);
	MakeNameEx(0X6E4F, "DoDestOpen", SN_LOCAL);
	MakeNameEx(0X6E53, "Xa_Set_Error", SN_LOCAL);
	MakeNameEx(0X6E64, "Dest_Open_Okay", SN_LOCAL);
	MakeNameEx(0X6E8C, "TestBoth", SN_LOCAL);
	MakeNameEx(0X6EA2, "ExSetA", SN_LOCAL);
	MakeNameEx(0X6EAC, "Exists", SN_LOCAL);
	MakeNameEx(0X6ED6, "Ret60", SN_LOCAL);
	MakeNameEx(0X6ED7, "NoChecking", SN_LOCAL);
	MakeNameEx(0X6EFF, "Xa_Set_Error_Jmp", SN_LOCAL);
	MakeNameEx(0X6F02, "NoChecking2", SN_LOCAL);
	MakeNameEx(0X6F1E, "DevWrtErr", SN_LOCAL);
	MakeNameEx(0X6F23, "SeekEnd", SN_LOCAL);
	MakeNameEx(0X6F3E, "SeekEnd_@", SN_LOCAL);
	MakeNameEx(0X6F97, "ceClose0", SN_LOCAL);
	MakeNameEx(0X6F9D, "ceClose", SN_LOCAL);
	MakeNameEx(0X6FA1, "NoClose", SN_LOCAL);
	MakeNameEx(0X6FAD, "EndCopyJ", SN_LOCAL);
	MakeFunction    (0X6FB0,0X6FCA);
	SetFunctionFlags(0X6FB0,0);
	MakeNameEx(0X6FC4, "LOADSW", SN_LOCAL);
	MakeFunction    (0X6FCA,0X708D);
	SetFunctionFlags(0X6FCA,0);
	MakeNameEx(0X6FE0, "KNOWABOUTDEST", SN_LOCAL);
	MakeNameEx(0X6FED, "FIRSTDST", SN_LOCAL);
	MakeNameEx(0X7004, "GOODPARSE", SN_LOCAL);
	MakeNameEx(0X700E, "DRVSPEC4", SN_LOCAL);
	MakeNameEx(0X703A, "NOTMELCOPY", SN_LOCAL);
	MakeNameEx(0X7040, "SETCONC", SN_LOCAL);
	MakeNameEx(0X7079, "NOFIRSTDEST", SN_LOCAL);
	MakeNameEx(0X7086, "GOTCHRSRC", SN_LOCAL);
	MakeFunction    (0X708D,0X70BD);
	SetFunctionFlags(0X708D,0);
	MakeNameEx(0X7090, "BUILDMAIN", SN_LOCAL);
	MakeNameEx(0X7097, "NOTAMBIG", SN_LOCAL);
	MakeNameEx(0X709C, "NOSTORE", SN_LOCAL);
	MakeNameEx(0X70AA, "BUILDEXT", SN_LOCAL);
	MakeNameEx(0X70B1, "NOTAMBIGE", SN_LOCAL);
	MakeNameEx(0X70B6, "NOSTOREE", SN_LOCAL);
	MakeNameEx(0X70B9, "ENDDEST", SN_LOCAL);
	MakeFunction    (0X70BD,0X720A);
	SetFunctionFlags(0X70BD,0);
	MakeNameEx(0X70ED, "PURE_FILE", SN_LOCAL);
	MakeNameEx(0X7103, "NOTPFILE", SN_LOCAL);
	MakeNameEx(0X7110, "SET_DRIVE_SPEC", SN_LOCAL);
	MakeNameEx(0X7112, "DRVSPEC5", SN_LOCAL);
	MakeNameEx(0X7123, "CURDIR_OK", SN_LOCAL);
	MakeNameEx(0X7143, "KNOWNOTSPEC", SN_LOCAL);
	MakeNameEx(0X7148, "DOPCDJ", SN_LOCAL);
	MakeNameEx(0X714B, "CHECKAMB", SN_LOCAL);
	MakeNameEx(0X7150, "ISADEV", SN_LOCAL);
	MakeNameEx(0X7155, "CHECKCD", SN_LOCAL);
	MakeNameEx(0X7165, "Kloop", SN_LOCAL);
	MakeNameEx(0X7179, "DONE", SN_LOCAL);
	MakeNameEx(0X718A, "_STORE_PCHAR", SN_LOCAL);
	MakeNameEx(0X718F, "GOTSRCSLSH", SN_LOCAL);
	MakeNameEx(0X7196, "NOTPDIR_RETN", SN_LOCAL);
	MakeNameEx(0X7197, "NOTPDIR", SN_LOCAL);
	MakeNameEx(0X71A4, "NOTPDIR_TRY", SN_LOCAL);
	MakeNameEx(0X71CE, "DOPCD", SN_LOCAL);
	MakeNameEx(0X71DF, "Kloop2", SN_LOCAL);
	MakeNameEx(0X71EE, "NotKanj4", SN_LOCAL);
	MakeNameEx(0X71F4, "LookBack", SN_LOCAL);
	MakeNameEx(0X71F9, "DoCdr", SN_LOCAL);
	MakeNameEx(0X7204, "EXTEND_SETUPJ", SN_LOCAL);
	MakeNameEx(0X7207, "BADCDERRJ2", SN_LOCAL);
	MakeFunction    (0X720A,0X7226);
	SetFunctionFlags(0X720A,0);
	MakeFunction    (0X7226,0X723B);
	SetFunctionFlags(0X7226,0);
	MakeFunction    (0X723B,0X73FC);
	SetFunctionFlags(0X723B,0);
	MakeNameEx(0X7251, "moredelim", SN_LOCAL);
	MakeNameEx(0X7271, "no_comma", SN_LOCAL);
	MakeNameEx(0X7274, "SCANCDONE", SN_LOCAL);
	MakeNameEx(0X727D, "nospec", SN_LOCAL);
	MakeNameEx(0X7284, "ncperror", SN_LOCAL);
	MakeNameEx(0X728D, "na_switch", SN_LOCAL);
	MakeNameEx(0X729D, "cpcont2", SN_LOCAL);
	MakeNameEx(0X72B0, "anum_chard", SN_LOCAL);
	MakeNameEx(0X72DD, "anum_char", SN_LOCAL);
	MakeNameEx(0X72E8, "NOTKANJ", SN_LOCAL);
	MakeNameEx(0X72F2, "TESTDOT", SN_LOCAL);
	MakeNameEx(0X72FF, "testquest", SN_LOCAL);
	MakeNameEx(0X7306, "testsplat", SN_LOCAL);
	MakeNameEx(0X7316, "BADPERR2J", SN_LOCAL);
	MakeNameEx(0X7318, "expand_filename", SN_LOCAL);
	MakeNameEx(0X7323, "gotelcnt", SN_LOCAL);
	MakeNameEx(0X732F, "qmove", SN_LOCAL);
	MakeNameEx(0X7338, "testpathx", SN_LOCAL);
	MakeNameEx(0X733A, "testpath", SN_LOCAL);
	MakeNameEx(0X734E, "no_err_check", SN_LOCAL);
	MakeNameEx(0X7360, "notspecial", SN_LOCAL);
	MakeNameEx(0X7363, "anum_test", SN_LOCAL);
	MakeNameEx(0X737E, "FOO15", SN_LOCAL);
	MakeNameEx(0X738A, "cpcont4", SN_LOCAL);
	MakeNameEx(0X7390, "BADPERR2", SN_LOCAL);
	MakeNameEx(0X7396, "BADPERR", SN_LOCAL);
	MakeNameEx(0X739C, "cperror", SN_LOCAL);
	MakeNameEx(0X73A1, "x_done", SN_LOCAL);
	MakeNameEx(0X73A4, "a_switch", SN_LOCAL);
	MakeNameEx(0X73C1, "a_switch_notkanj", SN_LOCAL);
	MakeNameEx(0X73CE, "Store_swt", SN_LOCAL);
	MakeNameEx(0X73F2, "out_tokenp", SN_LOCAL);
	MakeNameEx(0X73F5, "out_token", SN_LOCAL);
	MakeFunction    (0X73FC,0X7403);
	SetFunctionFlags(0X73FC,0);
	MakeFunction    (0X7403,0X7510);
	SetFunctionFlags(0X7403,0);
	MakeNameEx(0X7464, "$P_Fin", SN_LOCAL);
	MakeNameEx(0X7468, "$P_Start", SN_LOCAL);
	MakeNameEx(0X747C, "$P_Pack_Loop", SN_LOCAL);
	MakeNameEx(0X7499, "$P_Pack_End_backup_si", SN_LOCAL);
	MakeNameEx(0X74A4, "$P_PL01", SN_LOCAL);
	MakeNameEx(0X74B1, "$P_PL00", SN_LOCAL);
	MakeNameEx(0X74BE, "$P_Pack_End_BY_EOL", SN_LOCAL);
	MakeNameEx(0X74BF, "$P_Pack_End", SN_LOCAL);
	MakeNameEx(0X74E8, "$P_Positional_Manager", SN_LOCAL);
	MakeNameEx(0X7507, "$P_Too_Many_Error", SN_LOCAL);
	MakeNameEx(0X751C, "$P_SW_Manager", SN_LOCAL);
	MakeNameEx(0X7527, "$P_SW_Mgr_Loop", SN_LOCAL);
	MakeNameEx(0X7535, "$P_SW_Not_Found", SN_LOCAL);
	MakeNameEx(0X753E, "$P_Key_Manager", SN_LOCAL);
	MakeNameEx(0X7553, "$P_Key_Mgr_Loop", SN_LOCAL);
	MakeNameEx(0X7561, "$P_Key_Not_Found", SN_LOCAL);
	MakeNameEx(0X7568, "$P_Return_to_Caller", SN_LOCAL);
	MakeNameEx(0X7583, "$P_Single_Exit", SN_LOCAL);
	MakeFunction    (0X7510,0X751C);
	SetFunctionFlags(0X7510,0);
	MakeFunction    (0X7585,0X75B6);
	SetFunctionFlags(0X7585,0);
	MakeFrame(0X7585, 0, 2, 0);
	MakeNameEx(0X7593, "$P_CPC00", SN_LOCAL);
	MakeNameEx(0X75A7, "$P_CPC02", SN_LOCAL);
	MakeNameEx(0X75B1, "$P_CPC01", SN_LOCAL);
	MakeNameEx(0X75B4, "$P_CPC_Exit", SN_LOCAL);
	MakeFunction    (0X75B6,0X75B8);
	SetFunctionFlags(0X75B6,0);
	MakeFunction    (0X75B8,0X75DB);
	SetFunctionFlags(0X75B8,0);
	MakeFrame(0X75B8, 0, 4, 0);
	MakeNameEx(0X75C5, "$P_KEYorSW_Loop", SN_LOCAL);
	MakeNameEx(0X75CF, "$P_KEYorSW_Not_Found", SN_LOCAL);
	MakeNameEx(0X75D2, "$P_KEYorSW_Found", SN_LOCAL);
	MakeNameEx(0X75D8, "$P_KEYorSW_Exit", SN_LOCAL);
	MakeFunction    (0X75DB,0X75E7);
	SetFunctionFlags(0X75DB,0);
	MakeNameEx(0X75E5, "$P_MBP_Exit", SN_LOCAL);
	MakeFunction    (0X75E7,0X7648);
	SetFunctionFlags(0X75E7,0);
	MakeNameEx(0X7620, "$P_Chk_if_data_required", SN_LOCAL);
	MakeNameEx(0X7636, "$P_CSW00", SN_LOCAL);
	MakeNameEx(0X763C, "$P_Chk_SW_Err0", SN_LOCAL);
	MakeNameEx(0X763E, "$P_Chk_SW_Exit", SN_LOCAL);
	MakeNameEx(0X7647, "$P_Chk_SW_Single_Exit", SN_LOCAL);
	MakeFunction    (0X7648,0X76CD);
	SetFunctionFlags(0X7648,0);
	MakeFrame(0X7648, 0, 2, 0);
	MakeNameEx(0X7667, "$P_RLT02", SN_LOCAL);
	MakeNameEx(0X7671, "$P_RLT00", SN_LOCAL);
	MakeNameEx(0X767B, "$P_RLT01", SN_LOCAL);
	MakeNameEx(0X768D, "$P_RLT03", SN_LOCAL);
	MakeNameEx(0X76A0, "$P_RLT05", SN_LOCAL);
	MakeNameEx(0X76B4, "$P_RLT_CAP00", SN_LOCAL);
	MakeNameEx(0X76BD, "$P_RLT_CAP02", SN_LOCAL);
	MakeNameEx(0X76C0, "$P_RLT_CAP01", SN_LOCAL);
	MakeNameEx(0X76CB, "$P_RLT_Exit", SN_LOCAL);
	MakeFunction    (0X76CD,0X77AC);
	SetFunctionFlags(0X76CD,0);
	MakeNameEx(0X76F2, "$P_Mat", SN_LOCAL);
	MakeNameEx(0X7709, "$P_Match02", SN_LOCAL);
	MakeNameEx(0X7722, "$P_Bridge", SN_LOCAL);
	MakeNameEx(0X7725, "$P_Match03", SN_LOCAL);
	MakeNameEx(0X773C, "$P_Match04", SN_LOCAL);
	MakeNameEx(0X7753, "$P_Match05", SN_LOCAL);
	MakeNameEx(0X776D, "$P_Match06", SN_LOCAL);
	MakeNameEx(0X7784, "$P_Match07", SN_LOCAL);
	MakeNameEx(0X7793, "$P_Match_Exit", SN_LOCAL);
	MakeNameEx(0X77AA, "$P_Match2_Exit", SN_LOCAL);
	MakeFunction    (0X77AC,0X77D2);
	SetFunctionFlags(0X77AC,0);
	MakeFrame(0X77AC, 0, 4, 0);
	MakeNameEx(0X77AE, "$P_RCOL_Loop", SN_LOCAL);
	MakeNameEx(0X77C6, "$P_RCOL00", SN_LOCAL);
	MakeNameEx(0X77CC, "$P_RCOL01", SN_LOCAL);
	MakeNameEx(0X77CF, "$P_RCOL_Exit", SN_LOCAL);
	MakeFunction    (0X77D2,0X77F1);
	SetFunctionFlags(0X77D2,0);
	MakeFrame(0X77D2, 0, 4, 0);
	MakeNameEx(0X77D6, "$P_DCS_Loop", SN_LOCAL);
	MakeNameEx(0X77EA, "$P_DCS00", SN_LOCAL);
	MakeNameEx(0X77EB, "$P_DCS01", SN_LOCAL);
	MakeNameEx(0X77EE, "$P_DCS_Exit", SN_LOCAL);
	MakeFunction    (0X77F1,0X7838);
	SetFunctionFlags(0X77F1,0);
	MakeNameEx(0X7800, "$P_DCC_Go", SN_LOCAL);
	MakeNameEx(0X7810, "$P_DCC00", SN_LOCAL);
	MakeNameEx(0X782A, "$P_DCC01", SN_LOCAL);
	MakeNameEx(0X7837, "$P_CAPS_Ret", SN_LOCAL);
	MakeFunction    (0X7838,0X785C);
	SetFunctionFlags(0X7838,0);
	MakeFrame(0X7838, 0, 2, 0);
	MakeNameEx(0X7856, "$P_SVal00", SN_LOCAL);
	MakeNameEx(0X7857, "$P_Sval01", SN_LOCAL);
	MakeFunction    (0X785C,0X7894);
	SetFunctionFlags(0X785C,0);
	MakeFrame(0X785C, 0, 8, 0);
	MakeNameEx(0X7865, "$P_Value_Loop", SN_LOCAL);
	MakeFunction    (0X7941,0X7953);
	SetFunctionFlags(0X7941,0);
	MakeNameEx(0X794C, "$P_COVF", SN_LOCAL);
	MakeNameEx(0X7951, "$P_COVF00", SN_LOCAL);
	MakeFunction    (0X7953,0X7961);
	SetFunctionFlags(0X7953,0);
	MakeNameEx(0X795F, "$P_0099Err", SN_LOCAL);
	MakeFunction    (0X7961,0X79CA);
	SetFunctionFlags(0X7961,0);
	MakeFrame(0X7961, 0, 8, 0);
	MakeNameEx(0X7974, "$P_Sim00", SN_LOCAL);
	MakeNameEx(0X7992, "$P_Sim_Loop", SN_LOCAL);
	MakeNameEx(0X79AC, "$P_Sim_Found", SN_LOCAL);
	MakeNameEx(0X79B7, "$P_Sim01", SN_LOCAL);
	MakeNameEx(0X79C0, "$P_Sim_Exit", SN_LOCAL);
	MakeNameEx(0X79C2, "$P_Sim_Exit0", SN_LOCAL);
	MakeFunction    (0X79CA,0X7A6D);
	SetFunctionFlags(0X79CA,0);
	MakeFrame(0X79CA, 0, 8, 0);
	MakeNameEx(0X79D0, "$P_SCOM_Loop", SN_LOCAL);
	MakeNameEx(0X79F0, "$P_SCOM04", SN_LOCAL);
	MakeNameEx(0X7A03, "$P_SCOM05", SN_LOCAL);
	MakeNameEx(0X7A06, "$P_SCOM03", SN_LOCAL);
	MakeNameEx(0X7A14, "$P_SCOM00", SN_LOCAL);
	MakeNameEx(0X7A27, "$P_SCOM01", SN_LOCAL);
	MakeNameEx(0X7A29, "$P_SCOM_Differ0", SN_LOCAL);
	MakeNameEx(0X7A40, "$P_not_applicable", SN_LOCAL);
	MakeNameEx(0X7A54, "$P_SCOM02", SN_LOCAL);
	MakeNameEx(0X7A5F, "$P_SCOM_Differ", SN_LOCAL);
	MakeNameEx(0X7A62, "$P_SCOM_Same", SN_LOCAL);
	MakeNameEx(0X7A68, "$P_SCOM_Exit", SN_LOCAL);
	MakeFunction    (0X7A6D,0X7B20);
	SetFunctionFlags(0X7A6D,0);
	MakeFrame(0X7A6D, 0, 12, 0);
	MakeNameEx(0X7AA3, "$P_DateF_Err0", SN_LOCAL);
	MakeNameEx(0X7AAD, "$P_DateF_YMD", SN_LOCAL);
	MakeNameEx(0X7AD7, "$P_DateF01", SN_LOCAL);
	MakeNameEx(0X7AD9, "$P_DateF00", SN_LOCAL);
	MakeNameEx(0X7AF2, "$P_DateF02", SN_LOCAL);
	MakeNameEx(0X7AFF, "$P_DateF02_@", SN_LOCAL);
	MakeNameEx(0X7B03, "$P_DateF03", SN_LOCAL);
	MakeNameEx(0X7B0D, "$P_DateF_Error", SN_LOCAL);
	MakeNameEx(0X7B1C, "$P_Date_Format_Exit", SN_LOCAL);
	MakeFunction    (0X7B20,0X7B3A);
	SetFunctionFlags(0X7B20,0);
	MakeNameEx(0X7B39, "$P_Set_CDI_Exit", SN_LOCAL);
	MakeFunction    (0X7B3A,0X7B8E);
	SetFunctionFlags(0X7B3A,0);
	MakeFrame(0X7B3A, 0, 4, 0);
	MakeNameEx(0X7B3E, "$P_GetNum_Loop", SN_LOCAL);
	MakeNameEx(0X7B56, "$P_Do_Time_Delim1", SN_LOCAL);
	MakeNameEx(0X7B5C, "$P_Do_Date_Delims", SN_LOCAL);
	MakeNameEx(0X7B68, "$P_Neither_Delims", SN_LOCAL);
	MakeNameEx(0X7B81, "$P_GetNum00", SN_LOCAL);
	MakeNameEx(0X7B83, "$P_GetNum_Exit_clc", SN_LOCAL);
	MakeNameEx(0X7B86, "$P_GetNum01", SN_LOCAL);
	MakeNameEx(0X7B89, "$P_GetNum02", SN_LOCAL);
	MakeNameEx(0X7B8A, "$P_GetNum_Exit", SN_LOCAL);
	MakeFunction    (0X7B8E,0X7C97);
	SetFunctionFlags(0X7B8E,0);
	MakeFrame(0X7B8E, 0, 12, 0);
	MakeNameEx(0X7BA2, "$P_TimeF00", SN_LOCAL);
	MakeNameEx(0X7C1B, "$P_Time_4", SN_LOCAL);
	MakeNameEx(0X7C1E, "$P_TimeF_Err0", SN_LOCAL);
	MakeNameEx(0X7C28, "$P_TimeF_Rlt", SN_LOCAL);
	MakeNameEx(0X7C40, "$P_Time_notAM", SN_LOCAL);
	MakeNameEx(0X7C54, "$P_TimeSkip00", SN_LOCAL);
	MakeNameEx(0X7C7E, "$P_TimeF_Error", SN_LOCAL);
	MakeNameEx(0X7C8D, "$P_Time_Format_Exit", SN_LOCAL);
	MakeFunction    (0X7C97,0X7CDA);
	SetFunctionFlags(0X7C97,0);
	MakeFrame(0X7C97, 0, 4, 0);
	MakeNameEx(0X7C99, "$P_T12_Loop", SN_LOCAL);
	MakeNameEx(0X7CC4, "$P_T1200", SN_LOCAL);
	MakeNameEx(0X7CCC, "$P_T1201", SN_LOCAL);
	MakeNameEx(0X7CD2, "$P_Tclr_chr", SN_LOCAL);
	MakeNameEx(0X7CD7, "$P_T12_Exit", SN_LOCAL);
	MakeFunction    (0X7CDA,0X7D4A);
	SetFunctionFlags(0X7CDA,0);
	MakeFrame(0X7CDA, 0, 6, 0);
	MakeNameEx(0X7CFC, "$P_FileF_Err", SN_LOCAL);
	MakeNameEx(0X7D12, "$P_FileF03", SN_LOCAL);
	MakeNameEx(0X7D14, "$P_FileF_Loop1", SN_LOCAL);
	MakeNameEx(0X7D27, "$P_FileF01", SN_LOCAL);
	MakeNameEx(0X7D2B, "$P_FileF00", SN_LOCAL);
	MakeNameEx(0X7D39, "$P_FileF_RLT", SN_LOCAL);
	MakeNameEx(0X7D3B, "$P_FileF02", SN_LOCAL);
	MakeNameEx(0X7D49, "$P_Drv_Only_Exit", SN_LOCAL);
	MakeFunction    (0X7D4A,0X7D5F);
	SetFunctionFlags(0X7D4A,0);
	MakeFrame(0X7D4A, 0, 4, 0);
	MakeNameEx(0X7D53, "$P_FileSp_Loop", SN_LOCAL);
	MakeNameEx(0X7D5C, "$P_FileSp_Exit", SN_LOCAL);
	MakeFunction    (0X7D5F,0X7DA3);
	SetFunctionFlags(0X7D5F,0);
	MakeFrame(0X7D5F, 0, 4, 0);
	MakeNameEx(0X7D82, "$P_DrvF00", SN_LOCAL);
	MakeNameEx(0X7D99, "$P_Drv_Err", SN_LOCAL);
	MakeNameEx(0X7DA0, "$P_Drv_Exit", SN_LOCAL);
	MakeFunction    (0X7DA3,0X7DC9);
	SetFunctionFlags(0X7DA3,0);
	MakeNameEx(0X7DC1, "$P_Skip_Delim_CY", SN_LOCAL);
	MakeNameEx(0X7DC4, "$P_Skip_Delim_NCY", SN_LOCAL);
	MakeNameEx(0X7DC5, "$P_Skip_Delim_Exit", SN_LOCAL);
	MakeNameEx(0X7DC7, "$P_Exit_At_Extra", SN_LOCAL);
	MakeFunction    (0X7DC9,0X7DFB);
	SetFunctionFlags(0X7DC9,0);
	MakeFrame(0X7DC9, 0, 4, 0);
	MakeNameEx(0X7DEE, "$P_Chk_EOL_Loop", SN_LOCAL);
	MakeNameEx(0X7DF6, "$P_Chk_EOL_NZ", SN_LOCAL);
	MakeNameEx(0X7DF8, "$P_Chk_EOL_Exit", SN_LOCAL);
	MakeFunction    (0X7DFB,0X7E5A);
	SetFunctionFlags(0X7DFB,0);
	MakeFrame(0X7DFB, 0, 4, 0);
	MakeNameEx(0X7E25, "$P_Chk_Delim01", SN_LOCAL);
	MakeNameEx(0X7E37, "$P_Chk_Delim_Loop", SN_LOCAL);
	MakeNameEx(0X7E3F, "$P_Chk_Delim_NZ", SN_LOCAL);
	MakeNameEx(0X7E41, "$P_Chk_Delim_Exit", SN_LOCAL);
	MakeNameEx(0X7E44, "$P_Chk_Delim_Exit0", SN_LOCAL);
	MakeNameEx(0X7E56, "$P_No_Set_Extra", SN_LOCAL);
	MakeFunction    (0X7E5A,0X7E86);
	SetFunctionFlags(0X7E5A,0);
	MakeNameEx(0X7E76, "$P_STRUC_L7", SN_LOCAL);
	MakeNameEx(0X7E78, "$P_STRUC_L5", SN_LOCAL);
	MakeNameEx(0X7E7A, "$P_STRUC_L2", SN_LOCAL);
	MakeNameEx(0X7E84, "$P_STRUC_L12", SN_LOCAL);
	MakeFunction    (0X7E86,0X7ED7);
	SetFunctionFlags(0X7E86,0);
	MakeFrame(0X7E86, 0, 6, 0);
	MakeNameEx(0X7EB8, "$P_DBCS00", SN_LOCAL);
	MakeNameEx(0X7EBD, "$P_DBCS_LOOP", SN_LOCAL);
	MakeNameEx(0X7ECE, "$P_DBCS01", SN_LOCAL);
	MakeNameEx(0X7ED2, "$P_NON_DBCS", SN_LOCAL);
	MakeNameEx(0X7ED3, "$P_DBCS_EXIT", SN_LOCAL);
	MakeFunction    (0X7ED7,0X7EDB);
	SetFunctionFlags(0X7ED7,0);
	MakeFunction    (0X7EE3,0X7EEA);
	SetFunctionFlags(0X7EE3,0);
	MakeFunction    (0X7EEA,0X7EF2);
	SetFunctionFlags(0X7EEA,0);
	MakeFunction    (0X7EF2,0X7FDB);
	SetFunctionFlags(0X7EF2,0);
	MakeNameEx(0X7F1B, "move_subst", SN_LOCAL);
	MakeNameEx(0X7F33, "move_subst_cont", SN_LOCAL);
	MakeNameEx(0X7F4B, "check_fix", SN_LOCAL);
	MakeNameEx(0X7F52, "set_subst", SN_LOCAL);
	MakeNameEx(0X7F61, "subst_seg_set", SN_LOCAL);
	MakeNameEx(0X7F77, "ready_to_print", SN_LOCAL);
	MakeNameEx(0X7F99, "print_success", SN_LOCAL);
	MakeNameEx(0X7FA8, "print_err", SN_LOCAL);
	MakeNameEx(0X7FB4, "not_stderr", SN_LOCAL);
	MakeNameEx(0X7FCB, "_go_to_error", SN_LOCAL);
	MakeNameEx(0X7FD6, "print_err_exit", SN_LOCAL);
	MakeFunction    (0X7FDB,0X7FE1);
	SetFunctionFlags(0X7FDB,0);
	MakeFrame(0X7FDB, 0, 2, 0);
	MakeFunction    (0X7FE1,0X7FE7);
	SetFunctionFlags(0X7FE1,0);
	MakeFrame(0X7FE1, 0, 2, 0);
	MakeFunction    (0X7FE7,0X808A);
	SetFunctionFlags(0X7FE7,0);
	MakeFrame(0X7FE7, 0, 10, 0);
	MakeNameEx(0X8085, "$MIF20", SN_LOCAL);
	MakeFunction    (0X808A,0X80A2);
	SetFunctionFlags(0X808A,0);
	MakeFrame(0X808A, 0, 6, 0);
	MakeNameEx(0X809F, "$MIF23", SN_LOCAL);
	MakeFunction    (0X80A2,0X80BE);
	SetFunctionFlags(0X80A2,0);
	MakeFrame(0X80A2, 0, 8, 0);
	MakeNameEx(0X80B5, "$MIF32", SN_LOCAL);
	MakeNameEx(0X80B7, "$MEN32", SN_LOCAL);
	MakeNameEx(0X80B9, "$MIF31", SN_LOCAL);
	MakeFunction    (0X80BE,0X8155);
	SetFunctionFlags(0X80BE,0);
	MakeFrame(0X80BE, 0, 4, 0);
	MakeNameEx(0X80C4, "$MDO36", SN_LOCAL);
	MakeNameEx(0X80D1, "$MIF37", SN_LOCAL);
	MakeNameEx(0X80DE, "$MIF39", SN_LOCAL);
	MakeNameEx(0X80F0, "$MIF41", SN_LOCAL);
	MakeNameEx(0X80F6, "$MEN37", SN_LOCAL);
	MakeNameEx(0X8103, "$MIF47", SN_LOCAL);
	MakeNameEx(0X810F, "$MEN47", SN_LOCAL);
	MakeNameEx(0X8111, "$MIF46", SN_LOCAL);
	MakeNameEx(0X8119, "$MIF51", SN_LOCAL);
	MakeNameEx(0X811D, "$MEN46", SN_LOCAL);
	MakeNameEx(0X8125, "$MEN36", SN_LOCAL);
	MakeNameEx(0X8143, "$MIF57", SN_LOCAL);
	MakeNameEx(0X8144, "$MEN57", SN_LOCAL);
	MakeNameEx(0X814B, "$MIF60", SN_LOCAL);
	MakeNameEx(0X8151, "$MEN60", SN_LOCAL);
	MakeNameEx(0X8153, "$MIF56", SN_LOCAL);
	MakeNameEx(0X8156, "$M_MYRET", SN_LOCAL);
	MakeFunction    (0X8155,0X8156);
	SetFunctionFlags(0X8155,0x2);
	MakeFunction    (0X815D,0X816C);
	SetFunctionFlags(0X815D,0);
	MakeFrame(0X815D, 0, 4, 0);
	MakeFunction    (0X816C,0X81E5);
	SetFunctionFlags(0X816C,0);
	MakeNameEx(0X8188, "$MIF65", SN_LOCAL);
	MakeNameEx(0X818C, "$MEN65", SN_LOCAL);
	MakeNameEx(0X818E, "$MIF64", SN_LOCAL);
	MakeNameEx(0X819B, "$MIF69", SN_LOCAL);
	MakeNameEx(0X81A4, "$MEN69", SN_LOCAL);
	MakeNameEx(0X81A8, "$MEN64", SN_LOCAL);
	MakeNameEx(0X81AB, "$MDO76", SN_LOCAL);
	MakeNameEx(0X81B9, "$MIF78", SN_LOCAL);
	MakeNameEx(0X81BC, "$MEN78", SN_LOCAL);
	MakeNameEx(0X81C0, "$MIF76", SN_LOCAL);
	MakeNameEx(0X81C8, "$MEN76", SN_LOCAL);
	MakeNameEx(0X81C9, "$MSR76", SN_LOCAL);
	MakeNameEx(0X81D3, "$MIF87", SN_LOCAL);
	MakeNameEx(0X81D7, "$MIF75", SN_LOCAL);
	MakeNameEx(0X81DF, "$MIF91", SN_LOCAL);
	MakeFunction    (0X81E5,0X8233);
	SetFunctionFlags(0X81E5,0);
	MakeFrame(0X81E5, 0, 14, 0);
	MakeNameEx(0X8206, "$MIF94", SN_LOCAL);
	MakeNameEx(0X8209, "$MEN94", SN_LOCAL);
	MakeNameEx(0X8218, "$MIF98", SN_LOCAL);
	MakeNameEx(0X821A, "$MIF97", SN_LOCAL);
	MakeNameEx(0X821E, "$MEN97", SN_LOCAL);
	MakeNameEx(0X8220, "$MIF93", SN_LOCAL);
	MakeNameEx(0X8224, "$MEN93", SN_LOCAL);
	MakeNameEx(0X822E, "$MIF104", SN_LOCAL);
	MakeNameEx(0X8232, "$MEN104", SN_LOCAL);
	MakeFunction    (0X8233,0X826E);
	SetFunctionFlags(0X8233,0);
	MakeFrame(0X8233, 0, 6, 0);
	MakeNameEx(0X8244, "$MIF107", SN_LOCAL);
	MakeNameEx(0X8247, "$MEN107", SN_LOCAL);
	MakeNameEx(0X8258, "$MIF110", SN_LOCAL);
	MakeNameEx(0X8268, "$MEN110", SN_LOCAL);
	MakeNameEx(0X826D, "$MIF117", SN_LOCAL);
	MakeFunction    (0X826E,0X82A2);
	SetFunctionFlags(0X826E,0);
	MakeFrame(0X826E, 0, 4, 0);
	MakeNameEx(0X828F, "$MIF120", SN_LOCAL);
	MakeNameEx(0X8291, "$MIF119", SN_LOCAL);
	MakeNameEx(0X8293, "$MDO123", SN_LOCAL);
	MakeNameEx(0X829F, "$MEN119", SN_LOCAL);
	MakeFunction    (0X82A2,0X82BD);
	SetFunctionFlags(0X82A2,0);
	MakeFrame(0X82A2, 0, 8, 0);
	MakeNameEx(0X82B6, "noCtrlZ", SN_LOCAL);
	MakeFunction    (0X82BD,0X82F0);
	SetFunctionFlags(0X82BD,0);
	MakeNameEx(0X82E5, "$MIF129", SN_LOCAL);
	MakeNameEx(0X82EE, "m_popf_j", SN_LOCAL);
	MakeNameEx(0X82F1, "m_popf", SN_LOCAL);
	MakeFunction    (0X82F0,0X82F1);
	SetFunctionFlags(0X82F0,0x2);
	MakeFunction    (0X8311,0X831A);
	SetFunctionFlags(0X8311,0);
	MakeFunction    (0X831A,0X8331);
	SetFunctionFlags(0X831A,0);
	MakeNameEx(0X8330, "$MIF134", SN_LOCAL);
	MakeFunction    (0X8331,0X8355);
	SetFunctionFlags(0X8331,0);
	MakeFrame(0X8331, 0, 4, 0);
	MakeNameEx(0X833B, "$MDO139", SN_LOCAL);
	MakeNameEx(0X834E, "$MIF141", SN_LOCAL);
	MakeNameEx(0X8352, "$MIF138", SN_LOCAL);
	MakeFunction    (0X8355,0X83BE);
	SetFunctionFlags(0X8355,0);
	MakeNameEx(0X835D, "$MDO145", SN_LOCAL);
	MakeNameEx(0X8370, "$MIF146", SN_LOCAL);
	MakeNameEx(0X8373, "$MEN146", SN_LOCAL);
	MakeNameEx(0X837D, "$MLL149", SN_LOCAL);
	MakeNameEx(0X838D, "$MIF151", SN_LOCAL);
	MakeNameEx(0X838F, "$MIF150", SN_LOCAL);
	MakeNameEx(0X839F, "$MIF155", SN_LOCAL);
	MakeNameEx(0X83A1, "$MIF153", SN_LOCAL);
	MakeNameEx(0X83B1, "$MEN150", SN_LOCAL);
	MakeNameEx(0X83B6, "$MEN145", SN_LOCAL);
	MakeFunction    (0X83BE,0X84BF);
	SetFunctionFlags(0X83BE,0);
	MakeNameEx(0X83C7, "$MDO167", SN_LOCAL);
	MakeNameEx(0X83D6, "$MLL168", SN_LOCAL);
	MakeNameEx(0X83DF, "$MIF169", SN_LOCAL);
	MakeNameEx(0X83E3, "$MEN167", SN_LOCAL);
	MakeNameEx(0X83F2, "$MDO175", SN_LOCAL);
	MakeNameEx(0X83FF, "$MSR175", SN_LOCAL);
	MakeNameEx(0X8407, "$MLL178", SN_LOCAL);
	MakeNameEx(0X840B, "$MEN175", SN_LOCAL);
	MakeNameEx(0X841A, "$MIF180", SN_LOCAL);
	MakeNameEx(0X841D, "$MIF173", SN_LOCAL);
	MakeNameEx(0X842A, "$MXL3", SN_LOCAL);
	MakeNameEx(0X843D, "$MIF188", SN_LOCAL);
	MakeNameEx(0X843E, "$MEN188", SN_LOCAL);
	MakeNameEx(0X8440, "$MIF187", SN_LOCAL);
	MakeNameEx(0X8447, "$MIF192", SN_LOCAL);
	MakeNameEx(0X844E, "$MIF194", SN_LOCAL);
	MakeNameEx(0X8450, "$MEN187", SN_LOCAL);
	MakeNameEx(0X846D, "$MIF200", SN_LOCAL);
	MakeNameEx(0X847F, "$MLL202", SN_LOCAL);
	MakeNameEx(0X8487, "$MIF202", SN_LOCAL);
	MakeNameEx(0X8492, "$MIF204", SN_LOCAL);
	MakeNameEx(0X8495, "$MEN202", SN_LOCAL);
	MakeNameEx(0X849A, "$MIF199", SN_LOCAL);
	MakeNameEx(0X849D, "$MEN199", SN_LOCAL);
	MakeNameEx(0X84A6, "$MIF211", SN_LOCAL);
	MakeNameEx(0X84AC, "$MEN211", SN_LOCAL);
	MakeNameEx(0X84B8, "$MEN165", SN_LOCAL);
	MakeFunction    (0X84BF,0X84EC);
	SetFunctionFlags(0X84BF,0);
	MakeNameEx(0X84CD, "$MDO215", SN_LOCAL);
	MakeNameEx(0X84DB, "$MIF216", SN_LOCAL);
	MakeFunction    (0X84EC,0X85AB);
	SetFunctionFlags(0X84EC,0);
	MakeNameEx(0X8505, "$MIF276", SN_LOCAL);
	MakeNameEx(0X851F, "$MDO280", SN_LOCAL);
	MakeNameEx(0X852F, "$MIF281", SN_LOCAL);
	MakeNameEx(0X8533, "$MIF278", SN_LOCAL);
	MakeNameEx(0X8546, "$MIF286", SN_LOCAL);
	MakeNameEx(0X854A, "$MDO291", SN_LOCAL);
	MakeNameEx(0X855C, "$MIF292", SN_LOCAL);
	MakeNameEx(0X855D, "$MEN292", SN_LOCAL);
	MakeNameEx(0X856A, "$MIF295", SN_LOCAL);
	MakeNameEx(0X856E, "$MIF290", SN_LOCAL);
	MakeNameEx(0X8578, "$MDO301", SN_LOCAL);
	MakeNameEx(0X8588, "$MIF302", SN_LOCAL);
	MakeNameEx(0X858C, "$MIF299", SN_LOCAL);
	MakeNameEx(0X859A, "$MIF307", SN_LOCAL);
	MakeNameEx(0X859E, "$MDO310", SN_LOCAL);
	MakeNameEx(0X85A6, "$MEN307", SN_LOCAL);
	MakeFunction    (0X85AB,0X85C6);
	SetFunctionFlags(0X85AB,0);
	MakeFrame(0X85AB, 0, 8, 0);
	MakeNameEx(0X85C1, "$MIF314", SN_LOCAL);
	MakeFunction    (0X85C6,0X85EE);
	SetFunctionFlags(0X85C6,0);
	MakeNameEx(0X85DD, "$MIF318", SN_LOCAL);
	MakeNameEx(0X85DF, "$MIF317", SN_LOCAL);
	MakeNameEx(0X85EA, "$MEN321", SN_LOCAL);
	MakeNameEx(0X85EC, "$MEN317", SN_LOCAL);
	MakeFunction    (0X85EE,0X86B3);
	SetFunctionFlags(0X85EE,0);
	MakeNameEx(0X8610, "$MIF327", SN_LOCAL);
	MakeNameEx(0X8616, "$MIF326", SN_LOCAL);
	MakeNameEx(0X8622, "$MIF330", SN_LOCAL);
	MakeNameEx(0X8624, "$MIF325", SN_LOCAL);
	MakeNameEx(0X863C, "$MIF335", SN_LOCAL);
	MakeNameEx(0X8642, "$MIF334", SN_LOCAL);
	MakeNameEx(0X864E, "$MIF338", SN_LOCAL);
	MakeNameEx(0X8650, "$MIF333", SN_LOCAL);
	MakeNameEx(0X8666, "$MIF342", SN_LOCAL);
	MakeNameEx(0X866C, "$MIF341", SN_LOCAL);
	MakeNameEx(0X8678, "$MEN333", SN_LOCAL);
	MakeNameEx(0X8691, "$MEN341", SN_LOCAL);
	MakeNameEx(0X86A6, "$MEN325", SN_LOCAL);
	MakeNameEx(0X86A9, "$MEN345", SN_LOCAL);
	MakeNameEx(0X86B1, "$MIF349", SN_LOCAL);
	MakeFunction    (0X86B3,0X872F);
	SetFunctionFlags(0X86B3,0);
	MakeNameEx(0X86E5, "$MIF351", SN_LOCAL);
	MakeNameEx(0X870A, "$MIF353", SN_LOCAL);
	MakeNameEx(0X872D, "$MIF355", SN_LOCAL);
	MakeFunction    (0X872F,0X8746);
	SetFunctionFlags(0X872F,0);
	MakeNameEx(0X8745, "$MIF357", SN_LOCAL);
	MakeFunction    (0X8746,0X8758);
	SetFunctionFlags(0X8746,0);
	MakeNameEx(0X8757, "$MIF359", SN_LOCAL);
	MakeFunction    (0X8758,0X8775);
	SetFunctionFlags(0X8758,0);
	MakeNameEx(0X876F, "$MIF363", SN_LOCAL);
	MakeFunction    (0X8775,0X87F8);
	SetFunctionFlags(0X8775,0);
	MakeNameEx(0X8797, "$MLL367", SN_LOCAL);
	MakeNameEx(0X879D, "$MIF367", SN_LOCAL);
	MakeNameEx(0X87A1, "$MIF365", SN_LOCAL);
	MakeNameEx(0X87B5, "$MIF372", SN_LOCAL);
	MakeNameEx(0X87C1, "$MLL374", SN_LOCAL);
	MakeNameEx(0X87CC, "$MIF374", SN_LOCAL);
	MakeNameEx(0X87ED, "$MIF378", SN_LOCAL);
	MakeNameEx(0X87F3, "$MIF376", SN_LOCAL);
	MakeFunction    (0X87F8,0X8814);
	SetFunctionFlags(0X87F8,0);
	MakeNameEx(0X8813, "$MIF384", SN_LOCAL);
	MakeFunction    (0X8814,0X8831);
	SetFunctionFlags(0X8814,0);
	MakeNameEx(0X882B, "$MIF386", SN_LOCAL);
	MakeFunction    (0X8831,0X886C);
	SetFunctionFlags(0X8831,0);
	MakeFrame(0X8831, 0, 6, 0);
	MakeNameEx(0X8841, "$MIF388", SN_LOCAL);
	MakeNameEx(0X8843, "$MEN388", SN_LOCAL);
	MakeNameEx(0X8860, "$MIF392", SN_LOCAL);
	MakeNameEx(0X8862, "$MIF391", SN_LOCAL);
	MakeNameEx(0X8867, "$MIF396", SN_LOCAL);
	MakeFunction    (0X886C,0X88A2);
	SetFunctionFlags(0X886C,0);
	MakeFrame(0X886C, 0, 8, 0);
	MakeFunction    (0X88A2,0X88F9);
	SetFunctionFlags(0X88A2,0);
	MakeFrame(0X88A2, 0, 10, 0);
	MakeNameEx(0X88B6, "fm10", SN_LOCAL);
	MakeNameEx(0X88DB, "fm30", SN_LOCAL);
	MakeNameEx(0X88F0, "fmX", SN_LOCAL);
	MakeFunction    (0X88F9,0X8911);
	SetFunctionFlags(0X88F9,0);
	MakeFunction    (0X8911,0X8923);
	SetFunctionFlags(0X8911,0);
	MakeFunction    (0X8923,0X8968);
	SetFunctionFlags(0X8923,0);
	MakeFrame(0X8923, 0, 8, 0);
	MakeNameEx(0X8929, "pv10", SN_LOCAL);
	MakeNameEx(0X8937, "pv20", SN_LOCAL);
	MakeNameEx(0X894F, "pv30", SN_LOCAL);
	MakeNameEx(0X895E, "pvE1", SN_LOCAL);
	MakeNameEx(0X8961, "pvErr", SN_LOCAL);
	MakeNameEx(0X8964, "pvX", SN_LOCAL);
	MakeFunction    (0X8968,0X89C5);
	SetFunctionFlags(0X8968,0);
	MakeNameEx(0X896D, "pl10", SN_LOCAL);
	MakeNameEx(0X89B7, "plE1", SN_LOCAL);
	MakeNameEx(0X89BD, "plE2", SN_LOCAL);
	MakeNameEx(0X89C2, "plSwX", SN_LOCAL);
	MakeNameEx(0X89C3, "plX", SN_LOCAL);
	MakeFunction    (0X89C5,0X89DD);
	SetFunctionFlags(0X89C5,0);
	MakeFrame(0X89C5, 0, 4, 0);
	MakeFunction    (0X89DD,0X89E8);
	SetFunctionFlags(0X89DD,0);
	MakeNameEx(0X89E7, "ieX", SN_LOCAL);
	MakeFunction    (0X89E8,0X89F3);
	SetFunctionFlags(0X89E8,0);
	MakeNameEx(0X89F2, "iwX", SN_LOCAL);
	MakeFunction    (0X89F3,0X8A17);
	SetFunctionFlags(0X89F3,0);
	MakeFrame(0X89F3, 0, 8, 0);
	MakeNameEx(0X8A12, "umu10", SN_LOCAL);
	MakeFunction    (0X8A17,0X8A4F);
	SetFunctionFlags(0X8A17,0);
	MakeNameEx(0X8A1D, "su10", SN_LOCAL);
	MakeNameEx(0X8A34, "su20", SN_LOCAL);
	MakeNameEx(0X8A49, "su30", SN_LOCAL);
	MakeFunction    (0X8A4F,0X8A65);
	SetFunctionFlags(0X8A4F,0);
	MakeFrame(0X8A4F, 0, 6, 0);
	MakeFunction    (0X8A67,0X8A9A);
	SetFunctionFlags(0X8A67,0);
	MakeNameEx(0X8A7C, "td10", SN_LOCAL);
	MakeNameEx(0X8A8A, "td20", SN_LOCAL);
	MakeNameEx(0X8A98, "tdE", SN_LOCAL);
	MakeFunction    (0X8A9A,0X8AED);
	SetFunctionFlags(0X8A9A,0);
	MakeFrame(0X8A9A, 0, 6, 0);
	MakeNameEx(0X8AC6, "gxn10", SN_LOCAL);
	MakeNameEx(0X8ACE, "gxn20", SN_LOCAL);
	MakeNameEx(0X8AE4, "gxnE", SN_LOCAL);
	MakeNameEx(0X8AE7, "gxnQ", SN_LOCAL);
	MakeNameEx(0X8AE9, "gxnX", SN_LOCAL);
	MakeFunction    (0X8AED,0X8B08);
	SetFunctionFlags(0X8AED,0);
	MakeFrame(0X8AED, 0, 2, 0);
	MakeNameEx(0X8B06, "m32E", SN_LOCAL);
	MakeFunction    (0X8B08,0X8B16);
	SetFunctionFlags(0X8B08,0);
	MakeFrame(0X8B08, 0, 2, 0);
	MakeFunction    (0X8B16,0X8B2E);
	SetFunctionFlags(0X8B16,0);
	MakeFrame(0X8B16, 0, 6, 0);
	MakeNameEx(0X8B29, "uhE", SN_LOCAL);
	MakeNameEx(0X8B2A, "uhX", SN_LOCAL);
	MakeFunction    (0X8B2E,0X8B48);
	SetFunctionFlags(0X8B2E,0);
	MakeFrame(0X8B2E, 0, 2, 0);
	MakeNameEx(0X8B3F, "ism10", SN_LOCAL);
	MakeNameEx(0X8B46, "ismX", SN_LOCAL);
	MakeFunction    (0X8B48,0X8B8A);
	SetFunctionFlags(0X8B48,0);
	MakeFrame(0X8B48, 0, 6, 0);
	MakeNameEx(0X8B56, "atu10", SN_LOCAL);
	MakeNameEx(0X8B62, "atu20", SN_LOCAL);
	MakeNameEx(0X8B76, "atu30", SN_LOCAL);
	MakeNameEx(0X8B81, "atuE", SN_LOCAL);
	MakeNameEx(0X8B84, "atuX", SN_LOCAL);
	MakeFunction    (0X8B8A,0X8B9B);
	SetFunctionFlags(0X8B8A,0);
	MakeNameEx(0X8B9A, "cu10", SN_LOCAL);
	MakeFunction    (0X8B9B,0X8BC3);
	SetFunctionFlags(0X8B9B,0);
	MakeFrame(0X8B9B, 0, 4, 0);
	MakeFunction    (0X8BC3,0X8BDD);
	SetFunctionFlags(0X8BC3,0);
	MakeFrame(0X8BC3, 0, 2, 0);
	MakeNameEx(0X8BD4, "ll10", SN_LOCAL);
	MakeNameEx(0X8BDB, "lly", SN_LOCAL);
	MakeFunction    (0X8BDD,0X8C24);
	SetFunctionFlags(0X8BDD,0);
	MakeFrame(0X8BDD, 0, 8, 0);
	MakeNameEx(0X8C01, "hus10", SN_LOCAL);
	MakeNameEx(0X8C15, "hus20", SN_LOCAL);
	MakeNameEx(0X8C1F, "husX", SN_LOCAL);
	MakeFunction    (0X8C24,0X8C2E);
	SetFunctionFlags(0X8C24,0);
	MakeFrame(0X8C24, 0, 2, 0);
	MakeFunction    (0X8C2E,0X8C48);
	SetFunctionFlags(0X8C2E,0x4000);
	MakeFrame(0X8C2E, 0X4, 0, 0);
	MakeFunction    (0X8C48,0X8C5F);
	SetFunctionFlags(0X8C48,0);
	MakeFrame(0X8C48, 0, 6, 0);
	MakeFunction    (0X8C5F,0X8C6A);
	SetFunctionFlags(0X8C5F,0x4000);
	MakeFunction    (0X8C6A,0X8C7F);
	SetFunctionFlags(0X8C6A,0x4000);
	MakeFunction    (0X8C7F,0X8CAA);
	SetFunctionFlags(0X8C7F,0);
	MakeFrame(0X8C7F, 0, 4, 0);
	MakeNameEx(0X8C86, "hu10", SN_LOCAL);
	MakeNameEx(0X8C93, "hu20", SN_LOCAL);
	MakeNameEx(0X8CA7, "huX", SN_LOCAL);
	MakeFunction    (0X8CAA,0X8CB8);
	SetFunctionFlags(0X8CAA,0);
	MakeFrame(0X8CAA, 0, 4, 0);
	MakeFunction    (0X8CB8,0X8CBF);
	SetFunctionFlags(0X8CB8,0);
	MakeFunction    (0X8CBF,0X8CE3);
	SetFunctionFlags(0X8CBF,0);
	MakeFunction    (0X8CE3,0X8D00);
	SetFunctionFlags(0X8CE3,0);
	MakeFrame(0X8CE3, 0, 2, 0);
	MakeFunction    (0X8D00,0X8D31);
	SetFunctionFlags(0X8D00,0);
	MakeFrame(0X8D00, 0, 6, 0);
	MakeNameEx(0X8D0E, "fu10", SN_LOCAL);
	MakeNameEx(0X8D18, "fu20", SN_LOCAL);
	MakeNameEx(0X8D2C, "fuE", SN_LOCAL);
	MakeNameEx(0X8D2D, "fuX", SN_LOCAL);
	MakeFunction    (0X8D31,0X8D74);
	SetFunctionFlags(0X8D31,0);
	MakeFrame(0X8D31, 0, 4, 0);
	MakeNameEx(0X8D3C, "bf10", SN_LOCAL);
	MakeNameEx(0X8D54, "bf20", SN_LOCAL);
	MakeNameEx(0X8D68, "bf30", SN_LOCAL);
	MakeNameEx(0X8D71, "bfX", SN_LOCAL);
	MakeFunction    (0X8D74,0X8D87);
	SetFunctionFlags(0X8D74,0);
	MakeFrame(0X8D74, 0, 2, 0);
	MakeFunction    (0X8D87,0X8DE4);
	SetFunctionFlags(0X8D87,0);
	MakeFrame(0X8D87, 0, 6, 0);
	MakeNameEx(0X8DDF, "smE", SN_LOCAL);
	MakeNameEx(0X8DE0, "smX", SN_LOCAL);
	MakeFunction    (0X8DE4,0X8E34);
	SetFunctionFlags(0X8DE4,0);
	MakeFrame(0X8DE4, 0, 6, 0);
	MakeNameEx(0X8E0B, "hu?10", SN_LOCAL);
	MakeNameEx(0X8E19, "hu?20", SN_LOCAL);
	MakeNameEx(0X8E22, "hu?30", SN_LOCAL);
	MakeNameEx(0X8E30, "hu?X", SN_LOCAL);
	MakeFunction    (0X8E34,0X8E5C);
	SetFunctionFlags(0X8E34,0x4000);
	MakeFunction    (0X8E5C,0X8E8A);
	SetFunctionFlags(0X8E5C,0);
	MakeFrame(0X8E5C, 0, 2, 0);
	MakeNameEx(0X8E88, "ifmX", SN_LOCAL);
	MakeFunction    (0X8E8A,0X8EAE);
	SetFunctionFlags(0X8E8A,0);
	MakeFunction    (0X8EAE,0X8EEB);
	SetFunctionFlags(0X8EAE,0x4000);
	MakeNameEx(0X8EC0, "fum10", SN_LOCAL);
	MakeNameEx(0X8EC6, "fum20", SN_LOCAL);
	MakeNameEx(0X8ED2, "fum30", SN_LOCAL);
	MakeNameEx(0X8EE6, "fumX", SN_LOCAL);
	MakeFunction    (0X8EEB,0X8EFF);
	SetFunctionFlags(0X8EEB,0);
	MakeFrame(0X8EEB, 0, 8, 0);
	MakeFunction    (0X8EFF,0X8F29);
	SetFunctionFlags(0X8EFF,0);
	MakeFrame(0X8EFF, 0, 6, 0);
	MakeNameEx(0X8F0C, "um10", SN_LOCAL);
	MakeNameEx(0X8F20, "um20", SN_LOCAL);
	MakeFunction    (0X8F29,0X8F4C);
	SetFunctionFlags(0X8F29,0);
	MakeFunction    (0X8F4C,0X8F64);
	SetFunctionFlags(0X8F4C,0x2);
	MakeNameEx(0X8F61, "LhErr", SN_LOCAL);
	MakeFunction    (0X8F64,0X8F8E);
	SetFunctionFlags(0X8F64,0);
	MakeNameEx(0X8F7D, "plc10", SN_LOCAL);
	MakeNameEx(0X8F88, "plc20", SN_LOCAL);
	MakeNameEx(0X8F8A, "plcC", SN_LOCAL);
	MakeFunction    (0X8F8E,0X8FCB);
	SetFunctionFlags(0X8F8E,0);
	MakeNameEx(0X8F94, "lhcpfn1", SN_LOCAL);
	MakeNameEx(0X8FB7, "lhcpfn2", SN_LOCAL);
	MakeNameEx(0X8FC1, "lhfilerr", SN_LOCAL);
	MakeNameEx(0X8FC6, "lhmissing", SN_LOCAL);
	MakeFunction    (0X8FCB,0X8FE4);
	SetFunctionFlags(0X8FCB,0);
	MakeNameEx(0X8FD2, "SetCmdL1", SN_LOCAL);
	MakeNameEx(0X8FDE, "SetCmdL2", SN_LOCAL);
	MakeFunction    (0X8FE4,0X8FF0);
	SetFunctionFlags(0X8FE4,0);
	MakeFunction    (0X8FF0,0X903D);
	SetFunctionFlags(0X8FF0,0);
	MakeNameEx(0X9005, "argloop", SN_LOCAL);
	MakeNameEx(0X9022, "argdone", SN_LOCAL);
	MakeNameEx(0X9030, "no_exec_bat", SN_LOCAL);
	MakeNameEx(0X9035, "no_exec_file", SN_LOCAL);
	MakeNameEx(0X903B, "lhsp_errret", SN_LOCAL);
	MakeFunction    (0XBC90,0XBC9B);
	SetFunctionFlags(0XBC90,0);
	MakeFrame(0XBC90, 0, 2, 0);
	MakeFunction    (0XBCF3,0XBCFD);
	SetFunctionFlags(0XBCF3,0);
	MakeFrame(0XBCF3, 0, 2, 0);
	MakeFunction    (0XBD14,0XBD1E);
	SetFunctionFlags(0XBD14,0);
	MakeFrame(0XBD14, 0, 2, 0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	SetRegEx(0X100,"es",0XFFFFFFFF,3);
	SetRegEx(0X100,"ss",0XFFFFFFFF,3);
	SetRegEx(0X100,"ds",0,3);
	SetRegEx(0X100,"fs",0XFFFFFFFF,3);
	SetRegEx(0X100,"gs",0XFFFFFFFF,3);
	SetRegEx(0X268,"es",0XFFFFFFFF,3);
	SetRegEx(0X283,"es",0XFFFFFFFF,3);
	SetRegEx(0X2E0,"es",0XFFFFFFFF,3);
	SetRegEx(0X2F8,"ss",0,3);
	SetRegEx(0X2FE,"ds",0,3);
	SetRegEx(0X434,"es",0,3);
	SetRegEx(0X451,"es",0XFFFFFFFF,3);
	SetRegEx(0X456,"es",0XFFFFFFFF,3);
	SetRegEx(0X473,"es",0X4801,3);
	SetRegEx(0X47C,"ds",0,3);
	SetRegEx(0X486,"ds",0,3);
	SetRegEx(0X48C,"es",0XFFFFFFFF,3);
	SetRegEx(0X4B0,"es",0X4801,3);
	SetRegEx(0X4B3,"ds",0,3);
	SetRegEx(0X4BB,"ds",0,3);
	SetRegEx(0X4C4,"es",0XFFFFFFFF,3);
	SetRegEx(0X501,"es",0XFFFFFFFF,3);
	SetRegEx(0X50E,"es",0XFFFFFFFF,3);
	SetRegEx(0X519,"es",0XFFFFFFFF,3);
	SetRegEx(0X51A,"ds",0,3);
	SetRegEx(0XE3F,"ds",0,3);
	SetRegEx(0XE4E,"ds",0,3);
	SetRegEx(0XE52,"ds",0,3);
	SetRegEx(0XE64,"ds",0,3);
	SetRegEx(0XE9C,"es",0XFFFFFFFF,3);
	SetRegEx(0XEAB,"es",0XFFFFFFFF,3);
	SetRegEx(0XEB0,"es",0XFFFFFFFF,3);
	SetRegEx(0XF5F,"es",0XFFFFFFFF,3);
	SetRegEx(0XF81,"ds",0,3);
	SetRegEx(0XF8F,"es",0,3);
	SetRegEx(0XF91,"ds",0,3);
	SetRegEx(0XFA6,"ds",0,3);
	SetRegEx(0XFB8,"ds",0,3);
	SetRegEx(0X1039,"es",0XFFFFFFFF,3);
	SetRegEx(0X103D,"ds",0,3);
	SetRegEx(0X1041,"es",0XFFFFFFFF,3);
	SetRegEx(0X1042,"ds",0,3);
	SetRegEx(0X104A,"ss",0,3);
	SetRegEx(0X10A4,"es",0XFFFFFFFF,3);
	SetRegEx(0X10B7,"ds",0,3);
	SetRegEx(0X10D6,"ds",0,3);
	SetRegEx(0X113A,"ds",0,3);
	SetRegEx(0X113E,"ds",0,3);
	SetRegEx(0X1141,"es",0XFFFFFFFF,3);
	SetRegEx(0X114F,"ds",0,3);
	SetRegEx(0X1150,"es",0XFFFFFFFF,3);
	SetRegEx(0X1166,"ds",0,3);
	SetRegEx(0X116A,"ds",0,3);
	SetRegEx(0X116F,"ds",0,3);
	SetRegEx(0X11E9,"ds",0,3);
	SetRegEx(0X11F1,"ds",0,3);
	SetRegEx(0X120C,"ds",0,3);
	SetRegEx(0X122D,"ds",0,3);
	SetRegEx(0X1233,"ds",0,3);
	SetRegEx(0X123A,"ds",0,3);
	SetRegEx(0X124C,"es",0,3);
	SetRegEx(0X1271,"es",0XFFFFFFFF,3);
	SetRegEx(0X1278,"es",0,3);
	SetRegEx(0X1281,"es",0XFFFFFFFF,3);
	SetRegEx(0X1283,"ds",0,3);
	SetRegEx(0X12A6,"ds",0,3);
	SetRegEx(0X12B3,"es",0,3);
	SetRegEx(0X12B5,"ds",0,3);
	SetRegEx(0X12CE,"ds",0,3);
	SetRegEx(0X130F,"es",0XFFFFFFFF,3);
	SetRegEx(0X1352,"ds",0,3);
	SetRegEx(0X1369,"ds",0,3);
	SetRegEx(0X13C7,"es",0,3);
	SetRegEx(0X13CB,"ds",0,3);
	SetRegEx(0X13D8,"ds",0,3);
	SetRegEx(0X14E4,"es",0XFFFFFFFF,3);
	SetRegEx(0X14E8,"ds",0,3);
	SetRegEx(0X15A4,"ds",0,3);
	SetRegEx(0X15C1,"ds",0,3);
	SetRegEx(0X15C3,"ds",0,3);
	SetRegEx(0X15E8,"ds",0,3);
	SetRegEx(0X1602,"es",0XFFFFFFFF,3);
	SetRegEx(0X1604,"ds",0,3);
	SetRegEx(0X1606,"ds",0,3);
	SetRegEx(0X160D,"es",0,3);
	SetRegEx(0X167D,"ds",0,3);
	SetRegEx(0X1732,"ds",0,3);
	SetRegEx(0X174D,"ds",0,3);
	SetRegEx(0X17E2,"es",0XFFFFFFFF,3);
	SetRegEx(0X180F,"ds",0,3);
	SetRegEx(0X181D,"ds",0,3);
	SetRegEx(0X182B,"ds",0,3);
	SetRegEx(0X182C,"es",0XFFFFFFFF,3);
	SetRegEx(0X1A00,"ds",0,3);
	SetRegEx(0X1A53,"ds",0,3);
	SetRegEx(0X1A5D,"ds",0,3);
	SetRegEx(0X1A7B,"es",0XFFFFFFFF,3);
	SetRegEx(0X1AB1,"ds",0,3);
	SetRegEx(0X1AB6,"ds",0,3);
	SetRegEx(0X1AC3,"ds",0,3);
	SetRegEx(0X1AD6,"ds",0,3);
	SetRegEx(0X1ADA,"ds",0,3);
	SetRegEx(0X1AE7,"ds",0,3);
	SetRegEx(0X1B06,"ds",0,3);
	SetRegEx(0X1B0C,"ds",0,3);
	SetRegEx(0X1B17,"ds",0,3);
	SetRegEx(0X1B19,"es",0,3);
	SetRegEx(0X1B3F,"es",0XFFFFFFFF,3);
	SetRegEx(0X1B4D,"es",0,3);
	SetRegEx(0X1B74,"es",0XFFFFFFFF,3);
	SetRegEx(0X1BA0,"ds",0,3);
	SetRegEx(0X1BA2,"es",0,3);
	SetRegEx(0X1BA6,"ds",0,3);
	SetRegEx(0X1BB2,"ds",0,3);
	SetRegEx(0X1BB4,"es",0XFFFFFFFF,3);
	SetRegEx(0X1BBF,"ds",0,3);
	SetRegEx(0X1BF5,"ds",0,3);
	SetRegEx(0X1C33,"ds",0,3);
	SetRegEx(0X1C55,"ds",0,3);
	SetRegEx(0X1C5A,"ds",0,3);
	SetRegEx(0X1C6A,"ds",0,3);
	SetRegEx(0X1CA6,"es",0XFFFFFFFF,3);
	SetRegEx(0X1D08,"es",0XFFFFFFFF,3);
	SetRegEx(0X1D45,"ds",0,3);
	SetRegEx(0X1D4F,"ds",0,3);
	SetRegEx(0X1D5A,"es",0,3);
	SetRegEx(0X1D62,"ds",0,3);
	SetRegEx(0X1D89,"ds",0,3);
	SetRegEx(0X1D8A,"es",0XFFFFFFFF,3);
	SetRegEx(0X1DFC,"es",0X4803,3);
	SetRegEx(0X1E0B,"ds",0,3);
	SetRegEx(0X1E13,"ds",0,3);
	SetRegEx(0X1E1C,"es",0X4802,3);
	SetRegEx(0X1E8D,"es",0XFFFFFFFF,3);
	SetRegEx(0X1EC7,"es",0,3);
	SetRegEx(0X1EF2,"ds",0,3);
	SetRegEx(0X1EF8,"ds",0,3);
	SetRegEx(0X1F20,"ds",0,3);
	SetRegEx(0X1F22,"es",0,3);
	SetRegEx(0X1F38,"es",0XFFFFFFFF,3);
	SetRegEx(0X1F4B,"ds",0X1,3);
	SetRegEx(0X1F51,"ds",0,3);
	SetRegEx(0X1F76,"es",0XFFFFFFFF,3);
	SetRegEx(0X1F77,"ds",0,3);
	SetRegEx(0X1FC4,"ds",0,3);
	SetRegEx(0X2007,"ds",0,3);
	SetRegEx(0X2014,"ds",0,3);
	SetRegEx(0X2020,"es",0,3);
	SetRegEx(0X206C,"es",0XFFFFFFFF,3);
	SetRegEx(0X206D,"ds",0,3);
	SetRegEx(0X2074,"ds",0,3);
	SetRegEx(0X2093,"es",0XFFFFFFFF,3);
	SetRegEx(0X20E3,"ds",0,3);
	SetRegEx(0X20E9,"ds",0,3);
	SetRegEx(0X2107,"es",0X4800,3);
	SetRegEx(0X2111,"ds",0,3);
	SetRegEx(0X211A,"ds",0,3);
	SetRegEx(0X2146,"ds",0X4800,3);
	SetRegEx(0X2151,"ds",0,3);
	SetRegEx(0X2172,"ds",0X4800,3);
	SetRegEx(0X2177,"ds",0,3);
	SetRegEx(0X21A4,"es",0XFFFFFFFF,3);
	SetRegEx(0X21A5,"ds",0,3);
	SetRegEx(0X21B9,"es",0,3);
	SetRegEx(0X21C6,"es",0XFFFFFFFF,3);
	SetRegEx(0X21F1,"es",0XFFFFFFFF,3);
	SetRegEx(0X2890,"es",0XFFFFFFFF,3);
	SetRegEx(0X2890,"ss",0XFFFFFFFF,3);
	SetRegEx(0X2890,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2890,"fs",0XFFFFFFFF,3);
	SetRegEx(0X2890,"gs",0XFFFFFFFF,3);
	SetRegEx(0X299B,"ds",0,3);
	SetRegEx(0X29BB,"ds",0X289,3);
	SetRegEx(0X29C4,"ss",0X289,3);
	SetRegEx(0X29CA,"es",0X289,3);
	SetRegEx(0X29CC,"ds",0X289,3);
	SetRegEx(0X29D8,"ds",0,3);
	SetRegEx(0X2A00,"ds",0X289,3);
	SetRegEx(0X2A08,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2A22,"ds",0X289,3);
	SetRegEx(0X2A4D,"ds",0,3);
	SetRegEx(0X2AF0,"es",0XFFFFFFFF,3);
	SetRegEx(0X2AF5,"ds",0X289,3);
	SetRegEx(0X2AFD,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2AFE,"es",0XFFFFFFFF,3);
	SetRegEx(0X2B05,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2B27,"ds",0X289,3);
	SetRegEx(0X2B47,"ds",0X289,3);
	SetRegEx(0X2B5B,"ds",0X289,3);
	SetRegEx(0X2B8E,"ds",0,3);
	SetRegEx(0X2B92,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2BB7,"ds",0X289,3);
	SetRegEx(0X2CAE,"ds",0,3);
	SetRegEx(0X2CD9,"es",0X6570,3);
	SetRegEx(0X2CFB,"es",0XFFFFFFFF,3);
	SetRegEx(0X2D03,"es",0XFFFFFFFF,3);
	SetRegEx(0X2D05,"es",0XFFFFFFFF,3);
	SetRegEx(0X2D27,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2D6A,"es",0XFFFFFFFF,3);
	SetRegEx(0X2D76,"es",0XF000,3);
	SetRegEx(0X2D85,"es",0XFFFFFFFF,3);
	SetRegEx(0X2D8B,"es",0XC000,3);
	SetRegEx(0X2DFA,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2E03,"es",0XFFFFFFFF,3);
	SetRegEx(0X2E04,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2E0B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2E27,"ds",0XFFFFFFFE,3);
	SetRegEx(0X2E2E,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2E3E,"ss",0XFFFFFFFF,3);
	SetRegEx(0X2E51,"es",0XFFFFFFFF,3);
	SetRegEx(0X2E59,"ds",0,3);
	SetRegEx(0X2E6F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2E7E,"ds",0,3);
	SetRegEx(0X2E86,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2EB4,"ds",0X289,3);
	SetRegEx(0X2EBD,"ds",0X289,3);
	SetRegEx(0X2ECD,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2ED4,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2EE1,"ds",0X289,3);
	SetRegEx(0X2EF9,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2F30,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2F36,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2F4F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2F59,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2F7A,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2F83,"ds",0XFFFFFFFF,3);
	SetRegEx(0X2FE7,"ds",0X289,3);
	SetRegEx(0X2FF8,"ds",0X289,3);
	SetRegEx(0X3029,"es",0XFFFFFFFF,3);
	SetRegEx(0X302E,"es",0XFFFFFFFF,3);
	SetRegEx(0X303B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X304E,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3051,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3070,"ds",0X289,3);
	SetRegEx(0X3076,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3088,"ds",0X289,3);
	SetRegEx(0X308F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3091,"es",0X289,3);
	SetRegEx(0X309A,"ds",0XFFFFFFFF,3);
	SetRegEx(0X30B3,"es",0XFFFFFFFF,3);
	SetRegEx(0X30B8,"es",0XFFFFFFFF,3);
	SetRegEx(0X30BE,"es",0XFFFFFFFF,3);
	SetRegEx(0X30C4,"es",0,3);
	SetRegEx(0X3136,"es",0XFFFFFFFF,3);
	SetRegEx(0X313B,"es",0,3);
	SetRegEx(0X3178,"es",0XFFFFFFFF,3);
	SetRegEx(0X317D,"es",0XFFFFFFFF,3);
	SetRegEx(0X31D6,"es",0XFFFFFFFF,3);
	SetRegEx(0X31DD,"es",0XFFFFFFFF,3);
	SetRegEx(0X31F5,"es",0XFFFFFFFF,3);
	SetRegEx(0X3204,"ds",0,3);
	SetRegEx(0X322A,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3286,"es",0XFFFFFFFF,3);
	SetRegEx(0X3288,"ds",0XFFFFFFFF,3);
	SetRegEx(0X32BC,"es",0,3);
	SetRegEx(0X32C1,"ds",0,3);
	SetRegEx(0X32CB,"es",0XFFFFFFFF,3);
	SetRegEx(0X32FD,"es",0XFFFFFFFF,3);
	SetRegEx(0X330D,"ds",0XFFFFFFFF,3);
	SetRegEx(0X330E,"es",0XFFFFFFFF,3);
	SetRegEx(0X3342,"es",0XFFFFFFFF,3);
	SetRegEx(0X335A,"es",0XFFFFFFFF,3);
	SetRegEx(0X335E,"ds",0X289,3);
	SetRegEx(0X3381,"ds",0,3);
	SetRegEx(0X3387,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3398,"ds",0XFFFFFFFF,3);
	SetRegEx(0X33C3,"es",0XFFFFFFFF,3);
	SetRegEx(0X33C8,"es",0XFFFFFFFF,3);
	SetRegEx(0X33EA,"ds",0XFFFFFFFF,3);
	SetRegEx(0X33FC,"es",0XFFFFFFFF,3);
	SetRegEx(0X3401,"es",0XFFFFFFFF,3);
	SetRegEx(0X3404,"es",0XFFFFFFFF,3);
	SetRegEx(0X3434,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3443,"ds",0XFFFFFFFF,3);
	SetRegEx(0X344E,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3555,"ds",0XFFFFFFFF,3);
	SetRegEx(0X355B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3586,"ds",0XFFFFFFFF,3);
	SetRegEx(0X358B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3599,"ds",0XFFFFFFFF,3);
	SetRegEx(0X35A3,"es",0XFFFFFFFF,3);
	SetRegEx(0X35A5,"ds",0XFFFFFFFF,3);
	SetRegEx(0X35FA,"ds",0XFFFFFFFF,3);
	SetRegEx(0X360F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3614,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3623,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3631,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3674,"ds",0X289,3);
	SetRegEx(0X36DB,"es",0XFFFFFFFF,3);
	SetRegEx(0X36E2,"es",0XFFFFFFFF,3);
	SetRegEx(0X3700,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3714,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3734,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3741,"es",0XFFFFFFFF,3);
	SetRegEx(0X374E,"es",0XFFFFFFFF,3);
	SetRegEx(0X3754,"es",0XFFFFFFFF,3);
	SetRegEx(0X3778,"es",0XFFFFFFFF,3);
	SetRegEx(0X377B,"ds",0X289,3);
	SetRegEx(0X377D,"es",0X289,3);
	SetRegEx(0X3785,"ds",0,3);
	SetRegEx(0X37B8,"ds",0XFFFFFFFF,3);
	SetRegEx(0X37BA,"es",0XFFFFFFFF,3);
	SetRegEx(0X385E,"es",0X289,3);
	SetRegEx(0X3895,"ds",0,3);
	SetRegEx(0X38AD,"ds",0X289,3);
	SetRegEx(0X38D2,"ds",0X289,3);
	SetRegEx(0X38E2,"es",0,3);
	SetRegEx(0X39AA,"es",0XFFFFFFFF,3);
	SetRegEx(0X39CA,"es",0XFFFFFFFF,3);
	SetRegEx(0X3A0B,"ds",0,3);
	SetRegEx(0X3A1D,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3A27,"es",0,3);
	SetRegEx(0X3A32,"es",0XFFFFFFFF,3);
	SetRegEx(0X3A37,"es",0XFFFFFFFF,3);
	SetRegEx(0X3A45,"es",0XFFFFFFFF,3);
	SetRegEx(0X3A69,"es",0XFFFFFFFF,3);
	SetRegEx(0X3BD8,"ds",0X40,3);
	SetRegEx(0X3BDC,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3C95,"es",0XFFFFFFFF,3);
	SetRegEx(0X3D7C,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3DAE,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3F15,"es",0XFFFFFFFF,3);
	SetRegEx(0X3F24,"es",0XFFFFFFFF,3);
	SetRegEx(0X3F29,"es",0XFFFFFFFF,3);
	SetRegEx(0X3FBF,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3FC0,"es",0XFFFFFFFF,3);
	SetRegEx(0X3FCD,"ds",0XFFFFFFFF,3);
	SetRegEx(0X3FD1,"es",0XFFFFFFFF,3);
	SetRegEx(0X405C,"es",0XFFFFFFFF,3);
	SetRegEx(0X408C,"es",0XFFFFFFFF,3);
	SetRegEx(0X4201,"ds",0XFFFFFFFF,3);
	SetRegEx(0X420B,"es",0XFFFFFFFF,3);
	SetRegEx(0X423C,"es",0XFFFFFFFF,3);
	SetRegEx(0X4243,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4249,"ds",0XFFFFFFFF,3);
	SetRegEx(0X42A5,"ds",0,3);
	SetRegEx(0X42A7,"es",0,3);
	SetRegEx(0X431C,"es",0XFFFFFFFF,3);
	SetRegEx(0X431D,"ds",0XFFFFFFFF,3);
	SetRegEx(0X437B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4395,"ds",0XFFFFFFFF,3);
	SetRegEx(0X43DC,"es",0XFFFFFFFF,3);
	SetRegEx(0X44EA,"es",0XFFFFFFFF,3);
	SetRegEx(0X4573,"ds",0XFFFFFFFF,3);
	SetRegEx(0X459B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4605,"ds",0X289,3);
	SetRegEx(0X460F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4693,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4708,"ds",0XFFFFFFFF,3);
	SetRegEx(0X471B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X47B7,"ds",0XFFFFFFFF,3);
	SetRegEx(0X47EB,"ds",0X289,3);
	SetRegEx(0X4833,"ds",0,3);
	SetRegEx(0X488C,"es",0,3);
	SetRegEx(0X48A5,"es",0X289,3);
	SetRegEx(0X491B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X492E,"es",0XFFFFFFFF,3);
	SetRegEx(0X492F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X493D,"es",0XFFFFFFFF,3);
	SetRegEx(0X49D0,"ds",0XFFFFFFFF,3);
	SetRegEx(0X49D1,"es",0XFFFFFFFF,3);
	SetRegEx(0X4A55,"ds",0X289,3);
	SetRegEx(0X4A77,"es",0X289,3);
	SetRegEx(0X4ABA,"es",0X289,3);
	SetRegEx(0X4ABF,"es",0XFFFFFFFF,3);
	SetRegEx(0X4AC2,"es",0XFFFFFFFF,3);
	SetRegEx(0X4AC3,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4AD3,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4AD7,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4B16,"es",0XFFFFFFFF,3);
	SetRegEx(0X4B21,"es",0XFFFFFFFF,3);
	SetRegEx(0X4B84,"ds",0X289,3);
	SetRegEx(0X4C16,"es",0X289,3);
	SetRegEx(0X4C18,"ds",0X289,3);
	SetRegEx(0X4C1D,"ds",0X289,3);
	SetRegEx(0X4C2D,"es",0X289,3);
	SetRegEx(0X4C3E,"ds",0X289,3);
	SetRegEx(0X4C97,"ds",0X40,3);
	SetRegEx(0X4CA0,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4CE3,"es",0XFFFFFFFF,3);
	SetRegEx(0X4CFF,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4D79,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4D87,"es",0XFFFFFFFF,3);
	SetRegEx(0X4E0F,"es",0XFFFFFFFF,3);
	SetRegEx(0X4E50,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4E95,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4EA7,"ds",0XFFFFFFFF,3);
	SetRegEx(0X4EAE,"es",0XFFFFFFFF,3);
	SetRegEx(0X4ECB,"es",0XFFFFFFFF,3);
	SetRegEx(0X4ED0,"es",0XFFFFFFFF,3);
	SetRegEx(0X4FAA,"es",0XFFFFFFFF,3);
	SetRegEx(0X5001,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5005,"ds",0XFFFFFFFF,3);
	SetRegEx(0X501B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X501F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5045,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5048,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5062,"es",0XFFFFFFFF,3);
	SetRegEx(0X5067,"es",0XFFFFFFFF,3);
	SetRegEx(0X50A1,"es",0XFFFFFFFF,3);
	SetRegEx(0X50E4,"es",0XFFFFFFFF,3);
	SetRegEx(0X50E9,"es",0XFFFFFFFF,3);
	SetRegEx(0X510A,"ds",0,3);
	SetRegEx(0X510E,"ds",0XFFFFFFFF,3);
	SetRegEx(0X512B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5138,"ds",0XFFFFFFFF,3);
	SetRegEx(0X513C,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5142,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5157,"ds",0XFFFFFFFF,3);
	SetRegEx(0X515B,"es",0XFFFFFFFF,3);
	SetRegEx(0X515C,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5197,"es",0XFFFFFFFF,3);
	SetRegEx(0X519B,"es",0XFFFFFFFF,3);
	SetRegEx(0X51A1,"es",0XFFFFFFFF,3);
	SetRegEx(0X51AE,"es",0XFFFFFFFF,3);
	SetRegEx(0X51B8,"es",0XFFFFFFFE,3);
	SetRegEx(0X51C4,"es",0XFFFFFFFF,3);
	SetRegEx(0X51CA,"ds",0XFFFFFFFF,3);
	SetRegEx(0X51D0,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5213,"ds",0XFFFFFFFF,3);
	SetRegEx(0X52AB,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5319,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5324,"ds",0X289,3);
	SetRegEx(0X532C,"ds",0X289,3);
	SetRegEx(0X5330,"ds",0XFFFFFFFF,3);
	SetRegEx(0X538F,"es",0XFFFFFFFF,3);
	SetRegEx(0X5396,"es",0XFFFFFFFF,3);
	SetRegEx(0X53AC,"ds",0X289,3);
	SetRegEx(0X53B0,"es",0,3);
	SetRegEx(0X55E8,"ds",0X289,3);
	SetRegEx(0X55ED,"ds",0,3);
	SetRegEx(0X55F8,"ds",0XFFFFFFFF,3);
	SetRegEx(0X56C7,"es",0XFFFFFFFF,3);
	SetRegEx(0X56CF,"es",0XFFFFFFFF,3);
	SetRegEx(0X56F5,"ds",0XFFFFFFFF,3);
	SetRegEx(0X570A,"ss",0XFFFFFFFF,3);
	SetRegEx(0X5714,"ds",0X289,3);
	SetRegEx(0X5723,"es",0,3);
	SetRegEx(0X581A,"es",0X289,3);
	SetRegEx(0X584B,"ds",0X289,3);
	SetRegEx(0X5864,"es",0XFFFFFFFF,3);
	SetRegEx(0X589A,"es",0X289,3);
	SetRegEx(0X596B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5984,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5990,"ds",0X289,3);
	SetRegEx(0X599B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X59AA,"ds",0X289,3);
	SetRegEx(0X5A02,"ds",0X289,3);
	SetRegEx(0X5A1C,"ds",0,3);
	SetRegEx(0X5A2F,"ds",0,3);
	SetRegEx(0X5A8B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5A8C,"es",0XFFFFFFFF,3);
	SetRegEx(0X5AB2,"ds",0X289,3);
	SetRegEx(0X5AC4,"ds",0,3);
	SetRegEx(0X5AD2,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5ADA,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5ADE,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5AE6,"ds",0,3);
	SetRegEx(0X5B00,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5B09,"ds",0X289,3);
	SetRegEx(0X5B1A,"ds",0X289,3);
	SetRegEx(0X5B2F,"ds",0,3);
	SetRegEx(0X5B3A,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5B41,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5B46,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5B47,"es",0XFFFFFFFF,3);
	SetRegEx(0X5B51,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5B65,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5B67,"es",0XFFFFFFFF,3);
	SetRegEx(0X5C5D,"ds",0X289,3);
	SetRegEx(0X5C7F,"es",0X289,3);
	SetRegEx(0X5C81,"ds",0X289,3);
	SetRegEx(0X5CA5,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5CA6,"es",0XFFFFFFFF,3);
	SetRegEx(0X5D87,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5D92,"ds",0X289,3);
	SetRegEx(0X5D9A,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5DAA,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5DB3,"es",0X289,3);
	SetRegEx(0X5DC8,"es",0XFFFFFFFF,3);
	SetRegEx(0X5E68,"es",0XFFFFFFFF,3);
	SetRegEx(0X5E6E,"es",0XFFFFFFFF,3);
	SetRegEx(0X5E7C,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5E84,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5EBB,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5EC1,"ds",0XFFFFFFFF,3);
	SetRegEx(0X5FEC,"es",0XFFFFFFFF,3);
	SetRegEx(0X60A9,"es",0XFFFFFFFF,3);
	SetRegEx(0X60EC,"es",0XFFFFFFFF,3);
	SetRegEx(0X60F4,"ds",0XFFFFFFFF,3);
	SetRegEx(0X6107,"ds",0XFFFFFFFF,3);
	SetRegEx(0X610F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X615C,"ds",0XFFFFFFFF,3);
	SetRegEx(0X6178,"ds",0XFFFFFFFF,3);
	SetRegEx(0X630E,"es",0X4800,3);
	SetRegEx(0X6349,"es",0XFFFFFFFF,3);
	SetRegEx(0X6479,"ds",0XFFFFFFFF,3);
	SetRegEx(0X649C,"ds",0XFFFFFFFF,3);
	SetRegEx(0X64A2,"ds",0X289,3);
	SetRegEx(0X6568,"es",0X289,3);
	SetRegEx(0X657D,"es",0XFFFFFFFF,3);
	SetRegEx(0X67F8,"ds",0,3);
	SetRegEx(0X67FE,"ds",0XFFFFFFFF,3);
	SetRegEx(0X6B19,"ds",0XFFFFFFFF,3);
	SetRegEx(0X6B1E,"ds",0XFFFFFFFF,3);
	SetRegEx(0X6B3F,"es",0XFFFFFFFF,3);
	SetRegEx(0X6B42,"es",0XFFFFFFFF,3);
	SetRegEx(0X6B9F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X6BA4,"ds",0XFFFFFFFF,3);
	SetRegEx(0X6D8B,"es",0XFFFFFFFF,3);
	SetRegEx(0X6D98,"es",0XFFFFFFFF,3);
	SetRegEx(0X6DB9,"es",0XFFFFFFFF,3);
	SetRegEx(0X6DBE,"es",0XFFFFFFFF,3);
	SetRegEx(0X6EF5,"ds",0XFFFFFFFF,3);
	SetRegEx(0X6EFA,"ds",0XFFFFFFFF,3);
	SetRegEx(0X706F,"es",0XFFFFFFFF,3);
	SetRegEx(0X7072,"es",0XFFFFFFFF,3);
	SetRegEx(0X73D9,"es",0X289,3);
	SetRegEx(0X73F5,"es",0XFFFFFFFF,3);
	SetRegEx(0X781A,"es",0X289,3);
	SetRegEx(0X782E,"es",0XFFFFFFFF,3);
	SetRegEx(0X7836,"es",0XFFFFFFFF,3);
	SetRegEx(0X7B2F,"ds",0X289,3);
	SetRegEx(0X7B39,"ds",0XFFFFFFFF,3);
	SetRegEx(0X7E9C,"ds",0,3);
	SetRegEx(0X7EA6,"es",0XFFFFFFFF,3);
	SetRegEx(0X7EAB,"ds",0XFFFFFFFF,3);
	SetRegEx(0X7EBD,"ds",0XFFFFFFFF,3);
	SetRegEx(0X7ED6,"ds",0XFFFFFFFF,3);
	SetRegEx(0X7EFE,"es",0XFFFFFFFF,3);
	SetRegEx(0X7F93,"es",0XFFFFFFFF,3);
	SetRegEx(0X7F94,"ds",0XFFFFFFFF,3);
	SetRegEx(0X7F9D,"es",0XFFFFFFFF,3);
	SetRegEx(0X7FAA,"es",0X289,3);
	SetRegEx(0X7FBB,"es",0XFFFFFFFF,3);
	SetRegEx(0X7FD8,"es",0X289,3);
	SetRegEx(0X7FF0,"es",0,3);
	SetRegEx(0X8081,"es",0XFFFFFFFF,3);
	SetRegEx(0X8094,"es",0XFFFFFFFF,3);
	SetRegEx(0X8095,"ds",0XFFFFFFFF,3);
	SetRegEx(0X80B3,"ds",0XFFFFFFFF,3);
	SetRegEx(0X80B7,"ds",0X289,3);
	SetRegEx(0X80BC,"es",0XFFFFFFFF,3);
	SetRegEx(0X80DA,"es",0XFFFFFFFF,3);
	SetRegEx(0X80EC,"es",0XFFFFFFFF,3);
	SetRegEx(0X80F4,"es",0XFFFFFFFF,3);
	SetRegEx(0X8148,"es",0XFFFFFFFF,3);
	SetRegEx(0X81D3,"es",0X289,3);
	SetRegEx(0X8210,"es",0XFFFFFFFF,3);
	SetRegEx(0X8221,"es",0XFFFFFFFF,3);
	SetRegEx(0X8271,"ds",0XFFFFFFFF,3);
	SetRegEx(0X827E,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8286,"ds",0XFFFFFFFF,3);
	SetRegEx(0X82A1,"ds",0XFFFFFFFF,3);
	SetRegEx(0X82AA,"es",0XFFFFFFFF,3);
	SetRegEx(0X82BA,"es",0XFFFFFFFF,3);
	SetRegEx(0X82C6,"ds",0XFFFFFFFF,3);
	SetRegEx(0X82D2,"ds",0XFFFFFFFF,3);
	SetRegEx(0X82DD,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8310,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8326,"es",0XFFFFFFFF,3);
	SetRegEx(0X8337,"es",0XFFFFFFFF,3);
	SetRegEx(0X8354,"es",0XFFFFFFFF,3);
	SetRegEx(0X8468,"es",0XFFFFFFFF,3);
	SetRegEx(0X8482,"es",0XFFFFFFFF,3);
	SetRegEx(0X84A1,"es",0XFFFFFFFF,3);
	SetRegEx(0X85B0,"es",0XFFFFFFFF,3);
	SetRegEx(0X85BF,"es",0XFFFFFFFF,3);
	SetRegEx(0X8845,"ds",0XFFFFFFFF,3);
	SetRegEx(0X884A,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8874,"es",0XFFFFFFFF,3);
	SetRegEx(0X889E,"es",0XFFFFFFFF,3);
	SetRegEx(0X88B1,"es",0XFFFFFFFF,3);
	SetRegEx(0X88CA,"es",0,3);
	SetRegEx(0X88EC,"es",0XFFFFFFFF,3);
	SetRegEx(0X88F4,"es",0XFFFFFFFF,3);
	SetRegEx(0X8903,"es",0XFFFFFFFF,3);
	SetRegEx(0X8908,"es",0XFFFFFFFF,3);
	SetRegEx(0X8918,"ds",0XFFFFFFFF,3);
	SetRegEx(0X891D,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8928,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8946,"es",0XFFFFFFFF,3);
	SetRegEx(0X894D,"es",0XFFFFFFFF,3);
	SetRegEx(0X8965,"es",0XFFFFFFFF,3);
	SetRegEx(0X8966,"ds",0XFFFFFFFF,3);
	SetRegEx(0X89CB,"ds",0XFFFFFFFF,3);
	SetRegEx(0X89CF,"ds",0XFFFFFFFF,3);
	SetRegEx(0X89D6,"es",0XFFFFFFFF,3);
	SetRegEx(0X89DB,"es",0XFFFFFFFF,3);
	SetRegEx(0X89FB,"es",0XFFFFFFFF,3);
	SetRegEx(0X8A13,"es",0XFFFFFFFF,3);
	SetRegEx(0X8A26,"es",0XFFFFFFFF,3);
	SetRegEx(0X8A2A,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8A4A,"es",0XFFFFFFFF,3);
	SetRegEx(0X8A4B,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8A56,"es",0XFFFFFFFF,3);
	SetRegEx(0X8A62,"es",0XFFFFFFFF,3);
	SetRegEx(0X8AEA,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8B2B,"es",0XFFFFFFFF,3);
	SetRegEx(0X8B2C,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8B54,"es",0XFFFFFFFF,3);
	SetRegEx(0X8B74,"es",0XFFFFFFFF,3);
	SetRegEx(0X8B87,"es",0XFFFFFFFF,3);
	SetRegEx(0X8BAA,"es",0XFFFFFFFF,3);
	SetRegEx(0X8BAF,"es",0XFFFFFFFF,3);
	SetRegEx(0X8BC8,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8BDC,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8BF1,"es",0XFFFFFFFF,3);
	SetRegEx(0X8BF8,"es",0XFFFFFFFF,3);
	SetRegEx(0X8C0E,"es",0XFFFFFFFF,3);
	SetRegEx(0X8C20,"es",0XFFFFFFFF,3);
	SetRegEx(0X8C21,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8C29,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8C2D,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8C35,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8C45,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8C4F,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8C5C,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8C64,"es",0XFFFFFFFF,3);
	SetRegEx(0X8C69,"es",0XFFFFFFFF,3);
	SetRegEx(0X8C70,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8C75,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8CA5,"es",0XFFFFFFFF,3);
	SetRegEx(0X8CA8,"es",0XFFFFFFFF,3);
	SetRegEx(0X8CB0,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8CB4,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8D0C,"es",0XFFFFFFFF,3);
	SetRegEx(0X8D2A,"es",0XFFFFFFFF,3);
	SetRegEx(0X8D66,"es",0XFFFFFFFF,3);
	SetRegEx(0X8D6A,"es",0XFFFFFFFF,3);
	SetRegEx(0X8D7E,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8D83,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8DB4,"es",0XFFFFFFFF,3);
	SetRegEx(0X8DE1,"es",0XFFFFFFFF,3);
	SetRegEx(0X8E2D,"es",0XFFFFFFFF,3);
	SetRegEx(0X8E31,"es",0XFFFFFFFF,3);
	SetRegEx(0X8E3D,"es",0XFFFFFFFF,3);
	SetRegEx(0X8E57,"es",0XFFFFFFFF,3);
	SetRegEx(0X8E5A,"es",0XFFFFFFFF,3);
	SetRegEx(0X8EBE,"es",0XFFFFFFFF,3);
	SetRegEx(0X8EE4,"es",0XFFFFFFFF,3);
	SetRegEx(0X8EE7,"es",0XFFFFFFFF,3);
	SetRegEx(0X8EFB,"es",0XFFFFFFFF,3);
	SetRegEx(0X8EFC,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8F0C,"es",0XFFFFFFFF,3);
	SetRegEx(0X8F1E,"es",0XFFFFFFFF,3);
	SetRegEx(0X8F26,"es",0XFFFFFFFF,3);
	SetRegEx(0X8F30,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8F35,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8F41,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8F46,"ds",0XFFFFFFFF,3);
	SetRegEx(0X8F4E,"es",0XFFFFFFFF,3);
	SetRegEx(0X8F6A,"es",0XFFFFFFFF,3);
	SetRegEx(0X8F71,"es",0XFFFFFFFF,3);
	SetRegEx(0X8FFE,"ds",0XFFFFFFFF,3);
	SetRegEx(0X9003,"ds",0XFFFFFFFF,3);
	SetRegEx(0XBC92,"es",0X289,3);
	SetRegEx(0XBCF5,"es",0X289,3);
	SetRegEx(0XBD16,"es",0X289,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
	Bytes_4();
        EndTypeUpdating(UTP_STRUCT);
}

// End of file.
