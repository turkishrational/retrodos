RESGROUP:0100 ;
RESGROUP:0100 ;	+-------------------------------------------------------------------------+
RESGROUP:0100 ;	|   This file has been generated by The	Interactive Disassembler (IDA)	  |
RESGROUP:0100 ;	|	    Copyright (c) 2013 Hex-Rays, <support@hex-rays.com>		  |
RESGROUP:0100 ;	|		       Licensed	to: Freeware version			  |
RESGROUP:0100 ;	+-------------------------------------------------------------------------+
RESGROUP:0100 ;
RESGROUP:0100 ;	Input MD5   : 9C3A8A319D72C3F7B1DD1F821637262A
RESGROUP:0100
RESGROUP:0100 ;	---------------------------------------------------------------------------
RESGROUP:0100 ;	File Name   : C:\Users\Erdoðan\Desktop\COMMAND.COM
RESGROUP:0100 ;	Format	    : MS-DOS COM-file
RESGROUP:0100 ;	Base Address: 0h Range:	100h-D32Ah Loaded length: D22Ah
RESGROUP:0100
RESGROUP:0100		      Ideal
RESGROUP:0100		      p386n
RESGROUP:0100		      model tiny
RESGROUP:0100
RESGROUP:0100 ;	===========================================================================
RESGROUP:0100
RESGROUP:0100 ;	Segment	type: Pure code
RESGROUP:0100 segment	      RESGROUP byte public 'RESGROUP' use16
RESGROUP:0100		      assume cs:RESGROUP
RESGROUP:0100		      ;org 100h
RESGROUP:0100		      assume es:nothing, ss:nothing, ds:RESGROUP, fs:nothing, gs:nothing
RESGROUP:0100
RESGROUP:0100 start:
RESGROUP:0100		      jmp     ConProc
RESGROUP:0100 ;	---------------------------------------------------------------------------
RESGROUP:0103 version	      db 7Ah		      ;	((major_version	AND 0Fh) SHL 4)
RESGROUP:0103					      ;	  OR (minor_version AND	0Fh)
RESGROUP:0104		      dw 0
RESGROUP:0106		      db 0Ch dup(0), 0Dh
RESGROUP:0113 a@Ibm12_01_2003 db '@#IBM:12.01.2003.build_1.32#@ COMMAND.COM(USA)',0
RESGROUP:0142		      db 22h dup(0), 1Ah, 0
RESGROUP:0166 Int2f_Entry     dd MsgInt2fHandler      ;	...
RESGROUP:016A Int2e_Entry     dd Int_2e		      ;	...
RESGROUP:016E Ctrlc_Entry     dd ContC		      ;	...
RESGROUP:0172 CritErr_Entry   dd DSKERR		      ;	...
RESGROUP:0176 Exec_Entry      dd 0		      ;	...
RESGROUP:017A RemCheck_Entry  dd 0		      ;	...
RESGROUP:017E TrnLodCom1_Entry dd 0		      ;	...
RESGROUP:0182 LodCom_Entry    dd 0		      ;	...
RESGROUP:0186 MsgRetrv_Entry  dd 0		      ;	...
RESGROUP:018A HeadFix_Entry   dd 0		      ;	...
RESGROUP:018E UMBOff_Entry    dd 0
RESGROUP:0192 XMMCallAddr     dd 0		      ;	...
RESGROUP:0196 ComInHMA	      db 0		      ;	...
RESGROUP:0197 ;	---------------------------------------------------------------------------
RESGROUP:0197
RESGROUP:0197 Int2f_Trap:			      ;	...
RESGROUP:0197		      sti
RESGROUP:0198		      call    CheckA20
RESGROUP:019B		      push    ds
RESGROUP:019C		      push    cs
RESGROUP:019D		      jmp     [cs:Int2f_Entry]
RESGROUP:01A2 ;	---------------------------------------------------------------------------
RESGROUP:01A2
RESGROUP:01A2 Int2e_Trap:			      ;	...
RESGROUP:01A2		      sti
RESGROUP:01A3		      call    CheckA20
RESGROUP:01A6		      push    ds
RESGROUP:01A7		      push    cs
RESGROUP:01A8		      jmp     [cs:Int2e_Entry]
RESGROUP:01AD ;	---------------------------------------------------------------------------
RESGROUP:01AD
RESGROUP:01AD Ctrlc_Trap:			      ;	...
RESGROUP:01AD		      sti
RESGROUP:01AE		      call    CheckA20
RESGROUP:01B1		      push    ds
RESGROUP:01B2		      push    cs
RESGROUP:01B3		      jmp     [cs:Ctrlc_Entry]
RESGROUP:01B8 ;	---------------------------------------------------------------------------
RESGROUP:01B8
RESGROUP:01B8 CritErr_Trap:			      ;	...
RESGROUP:01B8		      sti
RESGROUP:01B9		      call    CheckA20
RESGROUP:01BC		      push    ds
RESGROUP:01BD		      push    cs
RESGROUP:01BE		      jmp     [cs:CritErr_Entry]
RESGROUP:01C3 ;	---------------------------------------------------------------------------
RESGROUP:01C3
RESGROUP:01C3 Exec_Trap:			      ;	...
RESGROUP:01C3		      call    CheckA20
RESGROUP:01C6		      push    ds
RESGROUP:01C7		      push    cs
RESGROUP:01C8		      jmp     [cs:Exec_Entry]
RESGROUP:01CD ;	---------------------------------------------------------------------------
RESGROUP:01CD
RESGROUP:01CD RemCheck_Trap:			      ;	...
RESGROUP:01CD		      call    CheckA20
RESGROUP:01D0		      push    ds
RESGROUP:01D1		      push    cs
RESGROUP:01D2		      jmp     [cs:RemCheck_Entry]
RESGROUP:01D7 ;	---------------------------------------------------------------------------
RESGROUP:01D7
RESGROUP:01D7 TrnLodCom1_Trap:			      ;	...
RESGROUP:01D7		      call    CheckA20
RESGROUP:01DA		      push    ds
RESGROUP:01DB		      push    cs
RESGROUP:01DC		      jmp     [cs:TrnLodCom1_Entry]
RESGROUP:01E1 ;	---------------------------------------------------------------------------
RESGROUP:01E1
RESGROUP:01E1 LodCom_Trap:			      ;	...
RESGROUP:01E1		      call    CheckA20
RESGROUP:01E4		      push    ds
RESGROUP:01E5		      push    cs
RESGROUP:01E6		      jmp     [cs:LodCom_Entry]
RESGROUP:01EB ;	---------------------------------------------------------------------------
RESGROUP:01EB
RESGROUP:01EB MsgRetrv_Trap:			      ;	...
RESGROUP:01EB		      call    CheckA20
RESGROUP:01EE		      push    ds
RESGROUP:01EF		      push    cs
RESGROUP:01F0		      jmp     [cs:MsgRetrv_Entry]
RESGROUP:01F5 ;	---------------------------------------------------------------------------
RESGROUP:01F5
RESGROUP:01F5 HeadFix_Trap:			      ;	...
RESGROUP:01F5		      call    CheckA20
RESGROUP:01F8		      push    ds
RESGROUP:01F9		      push    cs
RESGROUP:01FA		      jmp     [cs:HeadFix_Entry]
RESGROUP:01FF
RESGROUP:01FF ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:01FF
RESGROUP:01FF
RESGROUP:01FF proc	      CheckA20 near	      ;	...
RESGROUP:01FF		      pushf
RESGROUP:0200		      cmp     [cs:ComInHMA], 0
RESGROUP:0206		      jz      short A20_on
RESGROUP:0208		      push    ax	      ;	QueryA20
RESGROUP:0209		      push    bx
RESGROUP:020A		      mov     ah, 7
RESGROUP:020C		      call    [cs:XMMCallAddr]
RESGROUP:0211		      or      ax, ax
RESGROUP:0213		      jnz     short QA20_ON
RESGROUP:0215		      mov     ah, 5	      ;	EnableA20
RESGROUP:0217		      call    [cs:XMMCallAddr]
RESGROUP:021C		      or      ax, ax
RESGROUP:021E		      jz      short XMMerror
RESGROUP:0220
RESGROUP:0220 QA20_ON:				      ;	...
RESGROUP:0220		      pop     bx
RESGROUP:0221		      pop     ax
RESGROUP:0222
RESGROUP:0222 A20_on:				      ;	...
RESGROUP:0222		      popf
RESGROUP:0223		      retn
RESGROUP:0224 ;	---------------------------------------------------------------------------
RESGROUP:0224
RESGROUP:0224 XMMerror:				      ;	...
RESGROUP:0224		      jmp     short XMMerror
RESGROUP:0224 endp	      CheckA20
RESGROUP:0224
RESGROUP:0224 ;	---------------------------------------------------------------------------
RESGROUP:0226 Carousel_i2f_Hook	db 0EAh		      ;	...
RESGROUP:0226					      ;	far jump opcode
RESGROUP:0227		      dw offset	Int2f_Trap
RESGROUP:0229 int2fh_segm     dw 0		      ;	...
RESGROUP:022B
RESGROUP:022B ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:022B
RESGROUP:022B
RESGROUP:022B proc	      UnHideUMBs near	      ;	...
RESGROUP:022B		      push    ax
RESGROUP:022C		      mov     al, [fInHigh]
RESGROUP:022F		      or      al, al
RESGROUP:0231		      jnz     short uhu10
RESGROUP:0233		      pop     ax
RESGROUP:0234		      stc
RESGROUP:0235		      retn
RESGROUP:0236 ;	---------------------------------------------------------------------------
RESGROUP:0236
RESGROUP:0236 uhu10:				      ;	...
RESGROUP:0236		      call    linkumb
RESGROUP:0239		      call    FreeUMBs
RESGROUP:023C		      mov     [es:fInHigh], 0
RESGROUP:0242		      call    he_unlink
RESGROUP:0245		      pop     ax
RESGROUP:0246		      clc
RESGROUP:0247		      retn
RESGROUP:0247 endp	      UnHideUMBs
RESGROUP:0247
RESGROUP:0248
RESGROUP:0248 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:0248
RESGROUP:0248
RESGROUP:0248 proc	      he_unlink	near	      ;	...
RESGROUP:0248		      xor     bh, bh
RESGROUP:024A		      mov     bl, [fm_umb]
RESGROUP:024E		      mov     ax, 5803h	      ;	DOS_UMBLINK_SET
RESGROUP:0251		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:0251					      ;	AL = function code: (DOS 5beta)	set UMB	link state
RESGROUP:0253		      xor     bh, bh
RESGROUP:0255		      mov     bl, [fm_strat]
RESGROUP:0259		      mov     ax, 5801h	      ;	DOS_STRATEGY_SET
RESGROUP:025C		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:025C					      ;	AL = function code: set	allocation strategy
RESGROUP:025E		      retn
RESGROUP:025E endp	      he_unlink
RESGROUP:025E
RESGROUP:025F
RESGROUP:025F ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:025F
RESGROUP:025F
RESGROUP:025F proc	      FreeUMBs near	      ;	...
RESGROUP:025F		      push    ax
RESGROUP:0260		      push    es
RESGROUP:0261		      call    HeadUmb
RESGROUP:0264		      jb      short fusX
RESGROUP:0266
RESGROUP:0266 fus10:				      ;	...
RESGROUP:0266		      mov     es, ax
RESGROUP:0268		      call    isHideMCB
RESGROUP:026B		      jnz     short fus20
RESGROUP:026D		      call    freeMCB
RESGROUP:0270
RESGROUP:0270 fus20:				      ;	...
RESGROUP:0270		      mov     al, [es:0]      ;	[es:arena_signature]
RESGROUP:0274		      cmp     al, 5Ah ;	'Z'
RESGROUP:0276		      jz      short fusX
RESGROUP:0278		      mov     ax, es
RESGROUP:027A		      add     ax, [es:3]      ;	[es:arena_size]
RESGROUP:027F		      inc     ax
RESGROUP:0280		      jmp     short fus10
RESGROUP:0282 ;	---------------------------------------------------------------------------
RESGROUP:0282
RESGROUP:0282 fusX:				      ;	...
RESGROUP:0282		      pop     es
RESGROUP:0283		      pop     ax
RESGROUP:0284		      retn
RESGROUP:0284 endp	      FreeUMBs
RESGROUP:0284
RESGROUP:0285
RESGROUP:0285 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:0285
RESGROUP:0285
RESGROUP:0285 proc	      isHideMCB	near	      ;	...
RESGROUP:0285		      push    ax
RESGROUP:0286		      cmp     [word ptr	es:1], 8 ; [es:arena_owner],SystemPSPOwner
RESGROUP:028C		      jnz     short ihm_x
RESGROUP:028E		      mov     ax, [es:8]
RESGROUP:0292		      cmp     ax, 4948h	      ;	'HI'
RESGROUP:0295		      jnz     short ihm_x
RESGROUP:0297		      mov     ax, [es:0Ah]
RESGROUP:029B		      cmp     ax, 4444h	      ;	'DD'
RESGROUP:029E		      jnz     short ihm_x
RESGROUP:02A0		      mov     ax, [es:0Ch]
RESGROUP:02A4		      cmp     ax, 4E45h	      ;	'EN'
RESGROUP:02A7		      jnz     short ihm_x
RESGROUP:02A9		      mov     ax, [es:0Eh]
RESGROUP:02AD		      cmp     ax, 2020h	      ;	'  '
RESGROUP:02B0
RESGROUP:02B0 ihm_x:				      ;	...
RESGROUP:02B0		      pop     ax
RESGROUP:02B1		      retn
RESGROUP:02B1 endp	      isHideMCB
RESGROUP:02B1
RESGROUP:02B2
RESGROUP:02B2 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:02B2
RESGROUP:02B2
RESGROUP:02B2 proc	      freeMCB near	      ;	...
RESGROUP:02B2		      mov     [word ptr	es:1], 0 ; [es:arena_owner]
RESGROUP:02B9		      mov     ax, 2020h
RESGROUP:02BC		      mov     [es:8], ax      ;	[es:arena_name+0]
RESGROUP:02C0		      mov     [es:0Ah],	ax
RESGROUP:02C4		      mov     [es:0Ch],	ax
RESGROUP:02C8		      mov     [es:0Eh],	ax    ;	[es:arena_name+6]
RESGROUP:02CC		      retn
RESGROUP:02CC endp	      freeMCB
RESGROUP:02CC
RESGROUP:02CD
RESGROUP:02CD ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:02CD
RESGROUP:02CD
RESGROUP:02CD proc	      HeadUmb near	      ;	...
RESGROUP:02CD		      push    es
RESGROUP:02CE		      mov     ah, 52h
RESGROUP:02D0		      int     21h	      ;	DOS - 2+ internal - GET	LIST OF	LISTS
RESGROUP:02D0					      ;	Return:	ES:BX -> DOS list of lists
RESGROUP:02D2		      mov     ax, [es:8Ch]    ;	[es:UMB_HeadIdx]
RESGROUP:02D6		      cmp     ax, 0FFFFh
RESGROUP:02D9		      jz      short xhu_e
RESGROUP:02DB		      clc
RESGROUP:02DC		      jmp     short xhu_x
RESGROUP:02DE ;	---------------------------------------------------------------------------
RESGROUP:02DE
RESGROUP:02DE xhu_e:				      ;	...
RESGROUP:02DE		      stc
RESGROUP:02DF
RESGROUP:02DF xhu_x:				      ;	...
RESGROUP:02DF		      pop     es
RESGROUP:02E0		      retn
RESGROUP:02E0 endp	      HeadUmb
RESGROUP:02E0
RESGROUP:02E1
RESGROUP:02E1 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:02E1
RESGROUP:02E1
RESGROUP:02E1 proc	      linkumb near	      ;	...
RESGROUP:02E1		      mov     ax, 5802h
RESGROUP:02E4		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:02E4					      ;	AL = function code: (DOS 5beta)	get UMB	link state
RESGROUP:02E6		      or      al, al
RESGROUP:02E8		      jnz     short lumbX
RESGROUP:02EA		      mov     ax, 5803h
RESGROUP:02ED		      mov     bx, 1
RESGROUP:02F0		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:02F0					      ;	AL = function code: (DOS 5beta)	set UMB	link state
RESGROUP:02F2
RESGROUP:02F2 lumbX:				      ;	...
RESGROUP:02F2		      retn
RESGROUP:02F2 endp	      linkumb
RESGROUP:02F2
RESGROUP:02F3 ;	---------------------------------------------------------------------------
RESGROUP:02F3
RESGROUP:02F3 Issue_Exec_Call:			      ;	...
RESGROUP:02F3		      int     21h	      ;	DOS -
RESGROUP:02F5		      cli
RESGROUP:02F6		      push    cs
RESGROUP:02F7		      pop     ss
RESGROUP:02F8		      assume ss:RESGROUP
RESGROUP:02F8		      mov     sp, offset RStack	; RStack
RESGROUP:02FB		      sti
RESGROUP:02FC		      push    cs
RESGROUP:02FD		      pop     ds
RESGROUP:02FE		      pushf
RESGROUP:02FF		      call    UnHideUMBs
RESGROUP:0302		      popf
RESGROUP:0303		      jmp     Exec_Trap
RESGROUP:0303 ;	---------------------------------------------------------------------------
RESGROUP:0306 cox_location    db 'cox'                ; ...
RESGROUP:0309 cox_Y_option    dw 0		      ;	...
RESGROUP:030B BlkDevErrSubst  db 2		      ;	...
RESGROUP:030C BlkDevErrRw     dw 0		      ;	...
RESGROUP:030E BadFatSubst     db 1		      ;	...
RESGROUP:030F		      dw offset	DrvLet
RESGROUP:0311 DrvLet	      db 'A'                  ; ...
RESGROUP:0312 CharDevErrSubst db 2		      ;	...
RESGROUP:0313 CharDevErrRw    dw 0		      ;	...
RESGROUP:0315		      db 2
RESGROUP:0316		      dw offset	DevName
RESGROUP:0318 NeedVolSubst    db 2		      ;	...
RESGROUP:0319		      dw offset	VolName
RESGROUP:031B		      db 3
RESGROUP:031C		      dw offset	VolSer+2
RESGROUP:031E		      db 3
RESGROUP:031F		      dw offset	VolSer
RESGROUP:0321 VolName	      db 3 dup(0)	      ;	...
RESGROUP:0324 DevName	      db 8 dup(0)	      ;	...
RESGROUP:032C		      db 0
RESGROUP:032D VolSer	      dd 0		      ;	...
RESGROUP:0331 CDevAt	      db 0		      ;	...
RESGROUP:0332 PutBackSubst    db 2		      ;	...
RESGROUP:0333 PutBackComSpec  dw 0		      ;	...
RESGROUP:0335		      db 1
RESGROUP:0336		      dw offset	PutBackDrv
RESGROUP:0338 PutBackDrv      db 20h		      ;	...
RESGROUP:0339 ExecErrSubst    db 2		      ;	...
RESGROUP:033A		      dw offset	MsgBuffer     ;	SafePathBuffer
RESGROUP:033C NeedVol	      dd 0		      ;	...
RESGROUP:0340 ErrType	      db 0		      ;	...
RESGROUP:0341 Int_2e_Ret      dd 0		      ;	...
RESGROUP:0345 Save_Pdb	      dw 0		      ;	...
RESGROUP:0347 Parent	      dw 0		      ;	...
RESGROUP:0349 OldTerm	      dd 0		      ;	...
RESGROUP:034D ErrCd_24	      dw 0		      ;	...
RESGROUP:034F Handle01	      dw 0		      ;	...
RESGROUP:0351 Loading	      db 0		      ;	...
RESGROUP:0352 Batch	      dw 0		      ;	...
RESGROUP:0354 ComSpec	      db 64 dup(0)	      ;	0 ; ...
RESGROUP:0394 ComSpec_End     dw 0		      ;	...
RESGROUP:0396 Trans	      dw offset	COMMAND	      ;	...
RESGROUP:0398 TrnSeg	      dw 0		      ;	...
RESGROUP:039A TrnMvFlg	      db 0		      ;	...
RESGROUP:039B In_Batch	      db 0		      ;	...
RESGROUP:039C Batch_Abort     db 0		      ;	...
RESGROUP:039D ComDrv	      db 0		      ;	...
RESGROUP:039E MemSiz	      dw 0		      ;	...
RESGROUP:03A0 Sum	      dw 0		      ;	...
RESGROUP:03A2 ExtCom	      db 1		      ;	...
RESGROUP:03A3 RetCode	      dw 0		      ;	...
RESGROUP:03A5 Crit_Err_Info   db 0		      ;	...
RESGROUP:03A6 EchoFlag	      db 1		      ;	...
RESGROUP:03A7 Suppress	      db 1		      ;	...
RESGROUP:03A8 Io_Save	      dw 0		      ;	...
RESGROUP:03AA RestDir	      db 0		      ;	...
RESGROUP:03AB PermCom	      db 0		      ;	...
RESGROUP:03AC SemiPermCom     dw 0FFFFh		      ;	...
RESGROUP:03AE SingleCom	      dw 0		      ;	...
RESGROUP:03B0 VerVal	      dw 0FFFFh		      ;	...
RESGROUP:03B2 fFail	      db 0		      ;	...
RESGROUP:03B3 IfFlag	      db 0		      ;	...
RESGROUP:03B4 ForFlag	      db 0		      ;	...
RESGROUP:03B5 ForPtr	      dw 0		      ;	...
RESGROUP:03B7 Nest	      dw 0		      ;	...
RESGROUP:03B9 Call_Flag	      db 0		      ;	...
RESGROUP:03BA Call_Batch_Flag db 0		      ;	...
RESGROUP:03BB Next_Batch      dw 0		      ;	...
RESGROUP:03BD NullFlag	      db 0		      ;	...
RESGROUP:03BE FUCase_Addr     db 5 dup(0)	      ;	0 ; ...
RESGROUP:03C3 Dbcs_Vector_Addr dd 0		      ;	...
RESGROUP:03C7 Append_State    dw 0		      ;	...
RESGROUP:03C9 Append_Flag     db 0		      ;	...
RESGROUP:03CA Re_Out_App      db 0		      ;	...
RESGROUP:03CB Re_OutStr	      db 80 dup(0)	      ;	0 ; ...
RESGROUP:041B InitFlag	      db 1		      ;	...
RESGROUP:041C PipeFlag	      db 0		      ;	...
RESGROUP:041D PipeFiles	      db 0		      ;	...
RESGROUP:041E ;	---------------------------------------------------------------------------
RESGROUP:041E
RESGROUP:041E EndInit:				      ;	...
RESGROUP:041E		      push    ds
RESGROUP:041F		      push    es
RESGROUP:0420		      mov     dx, [TrnSize]
RESGROUP:0424		      mov     ax, [OldEnv]
RESGROUP:0427		      mov     bx, [EnvSiz]
RESGROUP:042B		      mov     cx, [UsedEnv]
RESGROUP:042F		      push    ax
RESGROUP:0430		      push    bx
RESGROUP:0431		      push    cx
RESGROUP:0432		      push    ds
RESGROUP:0433		      pop     es
RESGROUP:0434		      assume es:RESGROUP
RESGROUP:0434		      mov     bx, [ResSize]
RESGROUP:0438		      mov     ah, 4Ah	      ;	SETBLOCK
RESGROUP:043A		      cmp     [COMMAND_HIGH], 2
RESGROUP:043F		      jnz     short set_block
RESGROUP:0441		      xor     bx, bx	      ;	low memory first
RESGROUP:0443		      mov     ax, 5801h	      ;	set allocation strategy
RESGROUP:0446		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:0446					      ;	AL = function code: set	allocation strategy
RESGROUP:0448		      mov     cx, ds:7Eh      ;	...
RESGROUP:0448					      ;	environment segment
RESGROUP:044C		      jcxz    short skip_dealloc_env_seg
RESGROUP:044E		      push    es
RESGROUP:044F		      mov     es, cx
RESGROUP:0451		      assume es:nothing
RESGROUP:0451		      mov     ah, 49h
RESGROUP:0453		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:0453					      ;	ES = segment address of	area to	be freed
RESGROUP:0455		      pop     es
RESGROUP:0456
RESGROUP:0456 skip_dealloc_env_seg:		      ;	...
RESGROUP:0456		      mov     ah, 49h	      ;	DEALLOC
RESGROUP:0458
RESGROUP:0458 set_block:			      ;	...
RESGROUP:0458		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:0458					      ;	ES = segment address of	area to	be freed
RESGROUP:045A		      cmp     [PermCom], 1
RESGROUP:045F		      jnz     short adjust_env
RESGROUP:0461		      cmp     [Batch], 0
RESGROUP:0466		      jz      short adjust_env
RESGROUP:0468		      mov     bx, 4	      ;	((BATCHSEGMENT.SIZE)+16+0Fh)/16	; (33+16+15)/16
RESGROUP:046B		      mov     ah, 48h
RESGROUP:046D		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:046D					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:046F		      jb      short adjust_env
RESGROUP:0471		      mov     es, ax
RESGROUP:0473		      assume es:nothing
RESGROUP:0473		      xor     di, di
RESGROUP:0475		      xor     si, si
RESGROUP:0477		      push    ds
RESGROUP:0478		      mov     ds, [Batch]
RESGROUP:047C		      mov     cx, 33	      ;	BATCHSEGMENT.SIZE
RESGROUP:047F		      add     cx, 16	      ;	BATCHSEGMENT.SIZE+16
RESGROUP:0482		      cld
RESGROUP:0483		      rep movsb		      ;	...
RESGROUP:0485		      pop     ds
RESGROUP:0486		      mov     cx, es
RESGROUP:0488		      mov     es, [Batch]
RESGROUP:048C		      assume es:nothing
RESGROUP:048C		      mov     ah, 49h
RESGROUP:048E		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:048E					      ;	ES = segment address of	area to	be freed
RESGROUP:0490		      mov     [cs:Batch], cx  ;	(CS: prefix is not needed!?)
RESGROUP:0495
RESGROUP:0495 adjust_env:			      ;	...
RESGROUP:0495		      mov     bx, 80h	      ;	first fit, try high then low memory
RESGROUP:0498		      mov     ax, 5801h
RESGROUP:049B		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:049B					      ;	AL = function code: set	allocation strategy
RESGROUP:049D		      pop     cx
RESGROUP:049E		      pop     bx
RESGROUP:049F		      pop     bp
RESGROUP:04A0		      mov     ah, 48h
RESGROUP:04A2		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:04A2					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:04A4		      jb      short nomem_err
RESGROUP:04A6		      mov     [cs:EnvirSeg], ax	; (CS: prefix is not needed!?)
RESGROUP:04AA		      mov     [cs:2Ch],	ax    ;	[cs:PDB.ENVIRON]
RESGROUP:04AE		      mov     es, ax
RESGROUP:04B0		      assume es:nothing
RESGROUP:04B0		      push    ds
RESGROUP:04B1		      mov     ds, bp
RESGROUP:04B3		      xor     si, si
RESGROUP:04B5		      mov     di, si
RESGROUP:04B7		      cld
RESGROUP:04B8		      rep movsb
RESGROUP:04BA		      pop     ds
RESGROUP:04BB		      cmp     [AllocedEnv], 0
RESGROUP:04C0		      jz      short no_free
RESGROUP:04C2		      mov     es, bp
RESGROUP:04C4		      assume es:nothing
RESGROUP:04C4		      mov     ah, 49h
RESGROUP:04C6		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:04C6					      ;	ES = segment address of	area to	be freed
RESGROUP:04C8
RESGROUP:04C8 no_free:				      ;	...
RESGROUP:04C8		      xor     bx, bx
RESGROUP:04CA		      mov     ax, 5801h
RESGROUP:04CD		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:04CD					      ;	AL = function code: set	allocation strategy
RESGROUP:04CF		      xor     bx, bx
RESGROUP:04D1		      mov     ax, 5803h
RESGROUP:04D4		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:04D4					      ;	AL = function code: (DOS 5beta)	set UMB	link state
RESGROUP:04D6		      mov     [cs:TrnMvFlg], 1 ; (CS: prefix is	not needed!?)
RESGROUP:04D6					      ;	Indicate that transient	has been moved
RESGROUP:04DC		      push    es
RESGROUP:04DD		      mov     si, 2890h	      ;	TRANSTART
RESGROUP:04E0		      xor     di, di
RESGROUP:04E2		      mov     cx, 0AA9Ah      ;	TRANSPACEEND ; TRANSIENT portion size
RESGROUP:04E5		      mov     bx, 0FFFFh
RESGROUP:04E8		      mov     ah, 48h
RESGROUP:04EA		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:04EA					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:04EC		      cmp     bx, dx
RESGROUP:04EE		      jb      short nomem_err
RESGROUP:04F0		      mov     ah, 48h	      ;	ALLOC
RESGROUP:04F2		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:04F2					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:04F4		      jb      short nomem_err
RESGROUP:04F6		      push    ax
RESGROUP:04F7		      add     ax, bx
RESGROUP:04F9		      sub     ax, dx
RESGROUP:04FB		      mov     [cs:TrnSeg], ax ;	(CS: prefix is not needed!?)
RESGROUP:04FF		      mov     es, ax
RESGROUP:0501		      pop     ax
RESGROUP:0502		      add     si, cx
RESGROUP:0504		      dec     si
RESGROUP:0505		      add     di, cx
RESGROUP:0507		      dec     di
RESGROUP:0508		      std
RESGROUP:0509		      rep movsb
RESGROUP:050B		      cld
RESGROUP:050C		      mov     es, ax
RESGROUP:050E		      mov     ah, 49h	      ;	DEALLOC
RESGROUP:0510		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:0510					      ;	ES = segment address of	area to	be freed
RESGROUP:0512		      mov     [cs:InitFlag], 0 ; (CS: prefix is	not needed!?)
RESGROUP:0518		      pop     es
RESGROUP:0519		      pop     ds
RESGROUP:051A		      jmp     LodCom_Trap
RESGROUP:051D ;	---------------------------------------------------------------------------
RESGROUP:051D
RESGROUP:051D nomem_err:			      ;	...
RESGROUP:051D		      jmp     Alloc_error
RESGROUP:051D ;	---------------------------------------------------------------------------
RESGROUP:0520 COMMAND_HIGH    db 0		      ;	...
RESGROUP:0521 EndCodeInit     db 30 dup(0)	      ;	0
RESGROUP:053F InPipePtr	      dw offset	EndInit	      ;	...
RESGROUP:053F					      ;	dw Pipe1 ; Pipe1 equ offset EndInit
RESGROUP:0541 OutPipePtr      dw 46Dh		      ;	...
RESGROUP:0541					      ;	dw Pipe2 ; Pipe1 + 79
RESGROUP:0543 EnvirSeg	      dw 0		      ;	...
RESGROUP:0545 Com_Ptr	      dw 80h, 0		      ;	0 ; ...
RESGROUP:0549 Com_Fcb1	      dw 5Ch, 0		      ;	0 ; ...
RESGROUP:054D Com_Fcb2	      dw 6Ch, 0		      ;	0 ; ...
RESGROUP:0551 TranVars	      dw offset	HeadFix_Trap  ;	...
RESGROUP:0553 MySeg	      dw 0		      ;	...
RESGROUP:0555 Ltpa	      dw 0		      ;	...
RESGROUP:0557 RSwitChar	      db '/'                  ; ...
RESGROUP:0558 RDirChar	      db '\'                  ; ...
RESGROUP:0559		      dw offset	Issue_Exec_Call
RESGROUP:055B MySeg1	      dw 0		      ;	...
RESGROUP:055D		      dw offset	RemCheck_Trap
RESGROUP:055F MySeg2	      dw 0		      ;	...
RESGROUP:0561 Res_Tpa	      dw 0		      ;	...
RESGROUP:0563 Y_Flag	      dw 0		      ;	...
RESGROUP:0565 OldErrNo	      dw 0		      ;	...
RESGROUP:0565					      ;	TranVarEnd
RESGROUP:0567 MsgBuffer	      db 16 dup(0)	      ;	...
RESGROUP:0567					      ;	db 64+3+13 dup (0)
RESGROUP:0567					      ;	path + 'd:\' 'file.ext' + null
RESGROUP:0577 UmbSize	      dw 32 dup(0)	      ;	...
RESGROUP:05B7 Int2fHandler    dw 2 dup(0)	      ;	...
RESGROUP:05BB ResMsgEnd	      dw 0		      ;	...
RESGROUP:05BD ResSize	      dw 0		      ;	...
RESGROUP:05BF		      db 120 dup(0)	      ;	0
RESGROUP:0637 RStack	      dw 0		      ;	...
RESGROUP:0639 fInHigh	      db 0		      ;	...
RESGROUP:063A fUmbTiny	      db 0		      ;	...
RESGROUP:063B SegLoad	      dw 0		      ;	...
RESGROUP:063D UmbLoad	      db 0		      ;	...
RESGROUP:063E fm_umb	      db 0		      ;	...
RESGROUP:063F fm_strat	      db 0		      ;	...
RESGROUP:0640 fm_argc	      db 0		      ;	...
RESGROUP:0641 ABORT_CHAR      db 'A'                  ; ...
RESGROUP:0642 RETRY_CHAR      db 'R'                  ; ...
RESGROUP:0643 IGNORE_CHAR     db 'I'                  ; ...
RESGROUP:0644 FAIL_CHAR	      db 'F'                  ; ...
RESGROUP:0645 YES_CHAR	      db 'Y'                  ; ...
RESGROUP:0646 NO_CHAR	      db 'N'                  ; ...
RESGROUP:0647 REQ_ABORT	      db 5		      ;	...
RESGROUP:0648		      db 'Abort'
RESGROUP:064D REQ_RETRY	      db 7		      ;	...
RESGROUP:064E		      db ', Retry'
RESGROUP:0655 REQ_IGNORE      db 8		      ;	...
RESGROUP:0656		      db ', Ignore'
RESGROUP:065E REQ_FAIL	      db 6		      ;	...
RESGROUP:065F		      db ', Fail'
RESGROUP:0665 REQ_END	      db 1		      ;	...
RESGROUP:0666		      db '?'
RESGROUP:0667 MREAD	      db 8		      ;	...
RESGROUP:0668		      db 'reading',0
RESGROUP:0670 MWRITE	      db 8		      ;	...
RESGROUP:0671		      db 'writing',0
RESGROUP:0679 MDRIVE	      db 14		      ;	...
RESGROUP:067A		      db ' %1 drive %2',0Dh,0Ah
RESGROUP:0688 MDEVICE	      db 15		      ;	...
RESGROUP:0689		      db ' %1 device %2',0Dh,0Ah
RESGROUP:0698 MVOLSERIAL      db 38		      ;	...
RESGROUP:0699		      db 'Please insert volume %1 serial %2-%3',0Dh,0Ah
RESGROUP:06BF BADFATMSG	      db 37		      ;	...
RESGROUP:06C0		      db 'File allocation table bad, drive %1',0Dh,0Ah
RESGROUP:06E5 COMBAD	      db 21		      ;	...
RESGROUP:06E6		      db 'Invalid COMMAND.COM',0Dh,0Ah
RESGROUP:06FB PUTBACKMSG      db 33		      ;	...
RESGROUP:06FC		      db 'Insert disk with %1 in drive %2',0Dh,0Ah
RESGROUP:071D PROMPT	      db 33		      ;	...
RESGROUP:071E		      db 'Press any key to continue . . .',0Dh,0Ah
RESGROUP:073F ENDBATMES	      db 28		      ;	...
RESGROUP:0740		      db 0Dh,0Ah
RESGROUP:0740		      db 'Terminate batch job (Y/N)?'
RESGROUP:075C EXECEMES	      db 19		      ;	...
RESGROUP:075D		      db 'Cannot execute %1',0Dh,0Ah
RESGROUP:0770 EXEBAD	      db 19		      ;	...
RESGROUP:0771		      db 'Error in EXE file',0Dh,0Ah
RESGROUP:0784 TOOBIG	      db 34		      ;	...
RESGROUP:0785		      db 'Program too big to fit in memory',0Dh,0Ah
RESGROUP:07A7 NOHANDMES	      db 22		      ;	...
RESGROUP:07A8		      db 0Dh,0Ah
RESGROUP:07A8		      db 'No free file handles'
RESGROUP:07BE ACCDEN	      db 0Dh		      ;	...
RESGROUP:07BF		      db 'Access denied'
RESGROUP:07CC BMEMMES	      db 19h		      ;	...
RESGROUP:07CD		      db 0Dh,0Ah
RESGROUP:07CD		      db 'Memory allocation error'
RESGROUP:07E6 HALTMES	      db 26h		      ;	...
RESGROUP:07E7		      db 0Dh,0Ah
RESGROUP:07E7		      db 'Cannot load COMMAND, system halted',0Dh,0Ah
RESGROUP:080D FRETMES	      db 21h		      ;	...
RESGROUP:080E		      db 0Dh,0Ah
RESGROUP:080E		      db 'Cannot start COMMAND, exiting',0Dh,0Ah
RESGROUP:082F NEWLINE	      db 2		      ;	...
RESGROUP:0830		      db 0Dh,0Ah
RESGROUP:0832 MsgPtrLists     dd 10D24h		      ;	...
RESGROUP:0836		      dw offset	PARSMSGPTRS
RESGROUP:0838		      dw 1
RESGROUP:083A		      dw offset	EXTMSGPTRS
RESGROUP:083C		      dw 1
RESGROUP:083E		      dw 0
RESGROUP:0840		      dw 0
RESGROUP:0842		      dw offset	MsgRetrv_Trap
RESGROUP:0844 MySeg3	      dw 0		      ;	...
RESGROUP:0846 CRMSG0	      db 19		      ;	...
RESGROUP:0847		      db 'Write protect error'
RESGROUP:085A CRMSG1	      db 12		      ;	...
RESGROUP:085B		      db 'Invalid unit'
RESGROUP:0867 CRMSG2	      db 9		      ;	...
RESGROUP:0868		      db 'Not ready'
RESGROUP:0871 CRMSG3	      db 22		      ;	...
RESGROUP:0872		      db 'Invalid device request'
RESGROUP:0888 CRMSG4	      db 10		      ;	...
RESGROUP:0889		      db 'Data error'
RESGROUP:0893 CRMSG5	      db 33		      ;	...
RESGROUP:0894		      db 'Invalid device request parameters'
RESGROUP:08B5 CRMSG6	      db 10		      ;	...
RESGROUP:08B6		      db 'Seek error'
RESGROUP:08C0 CRMSG7	      db 18		      ;	...
RESGROUP:08C1		      db 'Invalid media type'
RESGROUP:08D3 CRMSG8	      db 16		      ;	...
RESGROUP:08D4		      db 'Sector not found'
RESGROUP:08E4 CRMSG9	      db 26		      ;	...
RESGROUP:08E5		      db 'Printer out of paper error'
RESGROUP:08FF CRMSG10	      db 17		      ;	...
RESGROUP:0900		      db 'Write fault error'
RESGROUP:0911 CRMSG11	      db 16		      ;	...
RESGROUP:0912		      db 'Read fault error'
RESGROUP:0922 CRMSG12	      db 15		      ;	...
RESGROUP:0923		      db 'General failure'
RESGROUP:0932 CRMSG13	      db 17		      ;	...
RESGROUP:0933		      db 'Sharing violation'
RESGROUP:0944 CRMSG14	      db 14		      ;	...
RESGROUP:0945		      db 'Lock violation'
RESGROUP:0953 CRMSG15	      db 19		      ;	...
RESGROUP:0954		      db 'Invalid disk change'
RESGROUP:0967 CRMSG16	      db 15		      ;	...
RESGROUP:0968		      db 'FCB unavailable'
RESGROUP:0977 CRMSG17	      db 25		      ;	...
RESGROUP:0978		      db 'System resource exhausted'
RESGROUP:0991 CRMSG18	      db 18		      ;	...
RESGROUP:0992		      db 'Code page mismatch'
RESGROUP:09A4 CRMSG19	      db 12		      ;	...
RESGROUP:09A5		      db 'Out of input'
RESGROUP:09B1 CRMSG20	      db 23		      ;	...
RESGROUP:09B2		      db 'Insufficient disk space'
RESGROUP:09C9 CRITMSGPTRS     dw offset	CRMSG0	      ;	...
RESGROUP:09CB		      dw offset	CRMSG1
RESGROUP:09CD		      dw offset	CRMSG2
RESGROUP:09CF		      dw offset	CRMSG3
RESGROUP:09D1		      dw offset	CRMSG4
RESGROUP:09D3		      dw offset	CRMSG5
RESGROUP:09D5		      dw offset	CRMSG6
RESGROUP:09D7		      dw offset	CRMSG7
RESGROUP:09D9		      dw offset	CRMSG8
RESGROUP:09DB		      dw offset	CRMSG9
RESGROUP:09DD		      dw offset	CRMSG10
RESGROUP:09DF		      dw offset	CRMSG11
RESGROUP:09E1		      dw offset	CRMSG12
RESGROUP:09E3		      dw offset	CRMSG13
RESGROUP:09E5		      dw offset	CRMSG14
RESGROUP:09E7		      dw offset	CRMSG15
RESGROUP:09E9		      dw offset	CRMSG16
RESGROUP:09EB		      dw offset	CRMSG17
RESGROUP:09ED		      dw offset	CRMSG18
RESGROUP:09EF		      dw offset	CRMSG19
RESGROUP:09F1		      dw offset	CRMSG20
RESGROUP:09F3 PAERRMSG0	      db 19		      ;	...
RESGROUP:09F4		      db 'Too many parameters'
RESGROUP:0A07 PAERRMSG1	      db 26		      ;	...
RESGROUP:0A08		      db 'Required parameter missing'
RESGROUP:0A22 PAERRMSG2	      db 14		      ;	...
RESGROUP:0A23		      db 'Invalid switch'
RESGROUP:0A31 PAERRMSG3	      db 15		      ;	...
RESGROUP:0A32		      db 'Invalid keyword'
RESGROUP:0A41 PAERRMSG4	      db 1		      ;	...
RESGROUP:0A42		      db 20h
RESGROUP:0A43 PAERRMSG5	      db 36		      ;	...
RESGROUP:0A44		      db 'Parameter value not in allowed range'
RESGROUP:0A68 PAERRMSG6	      db 27		      ;	...
RESGROUP:0A69		      db 'Parameter value not allowed'
RESGROUP:0A84 PAERRMSG8	      db 28		      ;	...
RESGROUP:0A85		      db 'Parameter format not correct'
RESGROUP:0AA1 PAERRMSG9	      db 17		      ;	...
RESGROUP:0AA2		      db 'Invalid parameter'
RESGROUP:0AB3 PAERRMSG10      db 1Dh		      ;	...
RESGROUP:0AB4		      db 'Invalid parameter combination'
RESGROUP:0AD1 PARSMSGPTRS     dw offset	PAERRMSG0     ;	...
RESGROUP:0AD3		      dw offset	PAERRMSG1
RESGROUP:0AD5		      dw offset	PAERRMSG2
RESGROUP:0AD7		      dw offset	PAERRMSG3
RESGROUP:0AD9		      dw offset	PAERRMSG4
RESGROUP:0ADB		      dw offset	PAERRMSG5
RESGROUP:0ADD		      dw offset	PAERRMSG6
RESGROUP:0ADF		      dw offset	PAERRMSG6     ;	PAERRMSG7
RESGROUP:0AE1		      dw offset	PAERRMSG8
RESGROUP:0AE3		      dw offset	PAERRMSG9
RESGROUP:0AE5		      dw offset	PAERRMSG10
RESGROUP:0AE7 INVLFUNCT	      db 10h		      ;	...
RESGROUP:0AE8		      db 'Invalid function'
RESGROUP:0AF8 FNOTFOUND	      db 0Eh		      ;	...
RESGROUP:0AF9		      db 'File not found'
RESGROUP:0B07 PNOTFOUND	      db 0Eh		      ;	...
RESGROUP:0B08		      db 'Path not found'
RESGROUP:0B16 TOOMANYOF	      db 13h		      ;	...
RESGROUP:0B17		      db 'Too many open files'
RESGROUP:0B2A ACCDENIED	      db 0Dh		      ;	...
RESGROUP:0B2B		      db 'Access denied'
RESGROUP:0B38 INVHANDLE	      db 0Eh		      ;	...
RESGROUP:0B39		      db 'Invalid handle'
RESGROUP:0B47 MEMCBDEST	      db 1Fh		      ;	...
RESGROUP:0B48		      db 'Memory control blocks destroyed'
RESGROUP:0B67 INSUFFMEM	      db 13h		      ;	...
RESGROUP:0B68		      db 'Insufficient memory'
RESGROUP:0B7B INVMEMBLA	      db 1Ch		      ;	...
RESGROUP:0B7C		      db 'Invalid memory block address'
RESGROUP:0B98 INVENVIRO	      db 13h		      ;	...
RESGROUP:0B99		      db 'Invalid Environment'
RESGROUP:0BAC INVFORMAT	      db 0Eh		      ;	...
RESGROUP:0BAD		      db 'Invalid format'
RESGROUP:0BBB INVFNPARM	      db 1Ah		      ;	...
RESGROUP:0BBC		      db 'Invalid function parameter'
RESGROUP:0BD6 INVLDDATA	      db 0Ch		      ;	...
RESGROUP:0BD7		      db 'Invalid data'
RESGROUP:0BE3 INVDRVSPC	      db 1Bh		      ;	...
RESGROUP:0BE4		      db 'Invalid drive specification'
RESGROUP:0BFF ATRCURDIR	      db 23h		      ;	...
RESGROUP:0C00		      db 'Attempt to remove current directory'
RESGROUP:0C23 NOTSAMDEV	      db 0Fh		      ;	...
RESGROUP:0C24		      db 'Not same device'
RESGROUP:0C33 NOMOREFIL	      db 0Dh		      ;	...
RESGROUP:0C34		      db 'No more files'
RESGROUP:0C41 FILEXISTS	      db 0Bh		      ;	...
RESGROUP:0C42		      db 'File exists'
RESGROUP:0C4D CANTMKDIR	      db 1Bh		      ;	...
RESGROUP:0C4E		      db 'Cannot make directory entry'
RESGROUP:0C69 FAILINT24	      db 0Eh		      ;	...
RESGROUP:0C6A		      db 'Fail on INT 24'
RESGROUP:0C78 TOOMANYRD	      db 15h		      ;	...
RESGROUP:0C79		      db 'Too many redirections'
RESGROUP:0C8E DUPLREDIR	      db 15h		      ;	...
RESGROUP:0C8F		      db 'Duplicate redirection'
RESGROUP:0CA4 INVPASSWD	      db 10h		      ;	...
RESGROUP:0CA5		      db 'Invalid password'
RESGROUP:0CB5 INVLDPARM	      db 11h		      ;	...
RESGROUP:0CB6		      db 'Invalid parameter'
RESGROUP:0CC7 NETDATFAU	      db 12h		      ;	...
RESGROUP:0CC8		      db 'Network data fault'
RESGROUP:0CDA FNOSUPNET	      db 21h		      ;	...
RESGROUP:0CDB		      db 'Function not supported by network'
RESGROUP:0CFC RSCNOTINS	      db 27h		      ;	...
RESGROUP:0CFD		      db 'Required system component not installed'
RESGROUP:0D24 EXTMSGPTRS      dw offset	INVLFUNCT     ;	...
RESGROUP:0D26		      dw offset	FNOTFOUND
RESGROUP:0D28		      dw offset	PNOTFOUND
RESGROUP:0D2A		      dw offset	TOOMANYOF
RESGROUP:0D2C		      dw offset	ACCDENIED
RESGROUP:0D2E		      dw offset	INVHANDLE
RESGROUP:0D30		      dw offset	MEMCBDEST
RESGROUP:0D32		      dw offset	INSUFFMEM
RESGROUP:0D34		      dw offset	INVMEMBLA
RESGROUP:0D36		      dw offset	INVENVIRO
RESGROUP:0D38		      dw offset	INVFORMAT
RESGROUP:0D3A		      dw offset	INVFNPARM
RESGROUP:0D3C		      dw offset	INVLDDATA
RESGROUP:0D3E		      dw 0
RESGROUP:0D40		      dw offset	INVDRVSPC
RESGROUP:0D42		      dw offset	ATRCURDIR
RESGROUP:0D44		      dw offset	NOTSAMDEV
RESGROUP:0D46		      dw offset	NOMOREFIL
RESGROUP:0D48		      dw offset	CRMSG0
RESGROUP:0D4A		      dw offset	CRMSG1
RESGROUP:0D4C		      dw offset	CRMSG2
RESGROUP:0D4E		      dw offset	CRMSG3
RESGROUP:0D50		      dw offset	CRMSG4
RESGROUP:0D52		      dw offset	CRMSG5
RESGROUP:0D54		      dw offset	CRMSG6
RESGROUP:0D56		      dw offset	CRMSG7
RESGROUP:0D58		      dw offset	CRMSG8
RESGROUP:0D5A		      dw offset	CRMSG9
RESGROUP:0D5C		      dw offset	CRMSG10
RESGROUP:0D5E		      dw offset	CRMSG11
RESGROUP:0D60		      dw offset	CRMSG12
RESGROUP:0D62		      dw offset	CRMSG13
RESGROUP:0D64		      dw offset	CRMSG14
RESGROUP:0D66		      dw offset	CRMSG15
RESGROUP:0D68		      dw offset	CRMSG16
RESGROUP:0D6A		      dw offset	CRMSG17
RESGROUP:0D6C		      dw offset	CRMSG18
RESGROUP:0D6E		      dw offset	CRMSG19
RESGROUP:0D70		      dw offset	CRMSG20
RESGROUP:0D72		      dw 40 dup(0)
RESGROUP:0DC2		      dw offset	FILEXISTS
RESGROUP:0DC4		      dw 0
RESGROUP:0DC6		      dw offset	CANTMKDIR
RESGROUP:0DC8		      dw offset	FAILINT24
RESGROUP:0DCA		      dw offset	TOOMANYRD
RESGROUP:0DCC		      dw offset	DUPLREDIR
RESGROUP:0DCE		      dw offset	INVPASSWD
RESGROUP:0DD0		      dw offset	INVLDPARM
RESGROUP:0DD2		      dw offset	NETDATFAU
RESGROUP:0DD4		      dw offset	FNOSUPNET
RESGROUP:0DD6		      dw offset	RSCNOTINS
RESGROUP:0DD8 PATRICIDE	      db 2Eh		      ;	...
RESGROUP:0DD9		      db 0Dh,0Ah
RESGROUP:0DD9		      db 'Top level process aborted, cannot continue',0Dh,0Ah
RESGROUP:0E07		      db 9 dup(0)
RESGROUP:0E10 ;	---------------------------------------------------------------------------
RESGROUP:0E10
RESGROUP:0E10 Exec_Err:				      ;	...
RESGROUP:0E10		      mov     bx, offset TOOBIG	; RCODE_START
RESGROUP:0E13		      cmp     al, 8	      ;	ERROR_NOT_ENOUGH_MEMORY
RESGROUP:0E15		      jz      short GotExecEMes
RESGROUP:0E17		      mov     bx, offset EXEBAD
RESGROUP:0E1A		      cmp     al, 0Bh
RESGROUP:0E1C		      jz      short GotExecEMes
RESGROUP:0E1E		      mov     bx, offset ACCDEN
RESGROUP:0E21		      cmp     al, 5	      ;	ERROR_ACCESS_DENIED
RESGROUP:0E23		      jz      short GotExecEMes
RESGROUP:0E25		      mov     bx, offset EXECEMES
RESGROUP:0E28		      mov     si, offset ExecErrSubst
RESGROUP:0E2B
RESGROUP:0E2B GotExecEMes:			      ;	...
RESGROUP:0E2B		      mov     dx, bx
RESGROUP:0E2D		      call    RPrint
RESGROUP:0E30		      jmp     short NoExec
RESGROUP:0E32 ;	---------------------------------------------------------------------------
RESGROUP:0E32
RESGROUP:0E32 Ext_Exec:				      ;	Exec_Ret
RESGROUP:0E32		      jb      short Exec_Err
RESGROUP:0E34
RESGROUP:0E34 Exec_Wait:
RESGROUP:0E34		      mov     ah, 4Dh
RESGROUP:0E36		      int     21h	      ;	DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
RESGROUP:0E38		      mov     [RetCode], ax
RESGROUP:0E3B
RESGROUP:0E3B NoExec:				      ;	...
RESGROUP:0E3B		      jmp     LodCom
RESGROUP:0E3E ;	---------------------------------------------------------------------------
RESGROUP:0E3E
RESGROUP:0E3E ContC:				      ;	...
RESGROUP:0E3E		      pop     ds
RESGROUP:0E3F		      test    [InitFlag], 1   ;	INITINIT ; in initialization?
RESGROUP:0E44		      jz      short NotAtInit ;	no
RESGROUP:0E46		      test    [InitFlag], 2   ;	INITSPECIAL ; doing special stuff?
RESGROUP:0E4B		      jz      short CmdIret   ;	no, ignore ^C
RESGROUP:0E4D		      pop     ds
RESGROUP:0E4E		      jmp     init_contc_specialcase
RESGROUP:0E51 ;	---------------------------------------------------------------------------
RESGROUP:0E51
RESGROUP:0E51 CmdIret:				      ;	...
RESGROUP:0E51		      pop     ds
RESGROUP:0E52		      iret
RESGROUP:0E53 ;	---------------------------------------------------------------------------
RESGROUP:0E53
RESGROUP:0E53 NotAtInit:			      ;	...
RESGROUP:0E53		      test    [InitFlag], 4   ;	INITCTRLC ; are	we already in a	^C?
RESGROUP:0E58		      jz      short NotInit   ;	nope too.
RESGROUP:0E5A		      test    ah, ah
RESGROUP:0E5C		      jz      short CmdIret
RESGROUP:0E5E		      cmp     ah, 12
RESGROUP:0E61		      ja      short CmdIret
RESGROUP:0E63		      pop     ds
RESGROUP:0E64		      add     sp, 6
RESGROUP:0E67		      stc
RESGROUP:0E68		      retf    2
RESGROUP:0E6B ;	---------------------------------------------------------------------------
RESGROUP:0E6B
RESGROUP:0E6B NotInit:				      ;	...
RESGROUP:0E6B		      or      [InitFlag], 4   ;	INITCTRLC
RESGROUP:0E70		      sti
RESGROUP:0E71		      pop     ax
RESGROUP:0E72		      mov     ax, [SingleCom]
RESGROUP:0E75		      or      ax, ax
RESGROUP:0E77		      jnz     short NoReset
RESGROUP:0E79		      push    ax
RESGROUP:0E7A		      mov     ah, 0Dh
RESGROUP:0E7C		      int     21h	      ;	DOS - DISK RESET
RESGROUP:0E7E		      pop     ax
RESGROUP:0E7F
RESGROUP:0E7F NoReset:				      ;	...
RESGROUP:0E7F		      test    [Batch], 0FFFFh
RESGROUP:0E85		      jz      short ContCTerm
RESGROUP:0E87		      or      ax, ax
RESGROUP:0E89		      jnz     short ContCTerm
RESGROUP:0E8B		      call    SavHand
RESGROUP:0E8E		      call    AskEnd
RESGROUP:0E91		      jnb     short ContBatch
RESGROUP:0E93		      mov     cl, [EchoFlag]
RESGROUP:0E97		      push    bx
RESGROUP:0E98
RESGROUP:0E98 ClearBatch:			      ;	...
RESGROUP:0E98		      mov     es, [Batch]
RESGROUP:0E9C		      mov     di, 20h	      ;	[BATCHSEGMENT.BatFile]
RESGROUP:0E9F		      mov     bx, [es:5]      ;	[es:BATCHSEGMENT.BatForPtr]
RESGROUP:0EA4		      test    bx, bx
RESGROUP:0EA6		      jz      short No_Bat_For
RESGROUP:0EA8		      push    es
RESGROUP:0EA9		      mov     es, bx
RESGROUP:0EAB		      mov     ah, 49h
RESGROUP:0EAD		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:0EAD					      ;	ES = segment address of	area to	be freed
RESGROUP:0EAF		      pop     es
RESGROUP:0EB0
RESGROUP:0EB0 No_Bat_For:			      ;	...
RESGROUP:0EB0		      mov     cl, [es:1]      ;	[es:BATCHSEGMENT.BatEchoFlag]
RESGROUP:0EB5		      mov     bx, [es:3]      ;	[es:BATCHSEGMENT.BatLast]
RESGROUP:0EBA		      mov     ah, 49h
RESGROUP:0EBC		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:0EBC					      ;	ES = segment address of	area to	be freed
RESGROUP:0EBE		      mov     [Batch], bx
RESGROUP:0EC2		      dec     [Nest]
RESGROUP:0EC6		      jnz     short ClearBatch
RESGROUP:0EC8		      pop     bx
RESGROUP:0EC9		      mov     [EchoFlag], cl
RESGROUP:0ECD		      mov     [PipeFlag], 0
RESGROUP:0ED2
RESGROUP:0ED2 ContBatch:			      ;	...
RESGROUP:0ED2		      call    crlf
RESGROUP:0ED5		      call    RestHand
RESGROUP:0ED8
RESGROUP:0ED8 ContCTerm:			      ;	...
RESGROUP:0ED8		      xor     ax, ax
RESGROUP:0EDA		      mov     bp, ax
RESGROUP:0EDC		      mov     [IfFlag],	al
RESGROUP:0EDF		      mov     [ForFlag], al
RESGROUP:0EE2		      call    ResPipeOff
RESGROUP:0EE5		      cmp     [SingleCom], ax
RESGROUP:0EE9		      jz      short NoSetSing
RESGROUP:0EEB		      mov     [SingleCom], 0FFFFh ; -1
RESGROUP:0EF1
RESGROUP:0EF1 NoSetSing:			      ;	...
RESGROUP:0EF1		      and     [InitFlag], 0FBh ; ~INITCTRLC
RESGROUP:0EF6		      cmp     [ExtCom],	al
RESGROUP:0EFA		      jnz     short DoDAb     ;	internal ^c
RESGROUP:0EFC		      jmp     LodCom1
RESGROUP:0EFF ;	---------------------------------------------------------------------------
RESGROUP:0EFF
RESGROUP:0EFF DoDAb:				      ;	...
RESGROUP:0EFF		      stc
RESGROUP:0F00		      retf
RESGROUP:0F01
RESGROUP:0F01 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:0F01
RESGROUP:0F01
RESGROUP:0F01 proc	      ResPipeOff near	      ;	...
RESGROUP:0F01		      push    ax
RESGROUP:0F02		      xor     ax, ax
RESGROUP:0F04		      xchg    al, [PipeFlag]
RESGROUP:0F08		      or      al, al
RESGROUP:0F0A		      jz      short NoPipePop
RESGROUP:0F0C		      shr     [EchoFlag], 1
RESGROUP:0F10
RESGROUP:0F10 NoPipePop:			      ;	...
RESGROUP:0F10		      pop     ax
RESGROUP:0F11		      retn
RESGROUP:0F11 endp	      ResPipeOff
RESGROUP:0F11
RESGROUP:0F12 ;	---------------------------------------------------------------------------
RESGROUP:0F12 ;	START OF FUNCTION CHUNK	FOR alloc_env
RESGROUP:0F12
RESGROUP:0F12 BadMemErr:			      ;	...
RESGROUP:0F12		      mov     dx, offset BMEMMES
RESGROUP:0F12 ;	END OF FUNCTION	CHUNK FOR alloc_env
RESGROUP:0F15 ;	START OF FUNCTION CHUNK	FOR GetComDsk
RESGROUP:0F15
RESGROUP:0F15 FatalC:				      ;	...
RESGROUP:0F15		      call    RPrint
RESGROUP:0F18		      cmp     [PermCom], 0
RESGROUP:0F1D		      jz      short FatalRet
RESGROUP:0F1F		      cmp     [SingleCom], 0
RESGROUP:0F24		      jnz     short FatalRet
RESGROUP:0F26		      mov     dx, offset HALTMES
RESGROUP:0F29		      call    RPrint
RESGROUP:0F2C		      sti
RESGROUP:0F2D
RESGROUP:0F2D Stall:				      ;	...
RESGROUP:0F2D		      jmp     short Stall
RESGROUP:0F2F ;	---------------------------------------------------------------------------
RESGROUP:0F2F
RESGROUP:0F2F FatalRet:				      ;	...
RESGROUP:0F2F		      mov     dx, offset FRETMES
RESGROUP:0F32		      call    RPrint
RESGROUP:0F35
RESGROUP:0F35 FatalRet2:			      ;	...
RESGROUP:0F35		      cmp     [PermCom], 0
RESGROUP:0F3A		      jnz     short Ret_2e
RESGROUP:0F3C		      mov     ax, [Parent]
RESGROUP:0F3F		      mov     [ds:16h],	ax    ;	[PDB.PARENT_PID]
RESGROUP:0F42		      mov     ax, [word	ptr OldTerm]
RESGROUP:0F45		      mov     [ds:0Ah],	ax    ;	[PDB.EXIT]
RESGROUP:0F48		      mov     ax, [word	ptr OldTerm+2]
RESGROUP:0F4B		      mov     [ds:0Ch],	ax    ;	[PDB.EXIT+2]
RESGROUP:0F4E		      mov     ah, 4Ch
RESGROUP:0F50		      mov     al, [byte	ptr RetCode]
RESGROUP:0F53		      int     21h	      ;	DOS - 2+ - QUIT	WITH EXIT CODE (EXIT)
RESGROUP:0F53					      ;	AL = exit code
RESGROUP:0F55 ;	---------------------------------------------------------------------------
RESGROUP:0F55
RESGROUP:0F55 Ret_2e:				      ;	...
RESGROUP:0F55		      mov     [SingleCom], 0
RESGROUP:0F5B		      mov     es, [Res_Tpa]
RESGROUP:0F5F		      mov     ah, 49h
RESGROUP:0F61		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:0F61					      ;	ES = segment address of	area to	be freed
RESGROUP:0F63		      mov     bx, [Save_Pdb]
RESGROUP:0F67		      mov     ah, 50h
RESGROUP:0F69		      int     21h	      ;	DOS - 2+ internal - SET	PSP SEGMENT
RESGROUP:0F69					      ;	BX = segment address of	new PSP
RESGROUP:0F6B		      mov     ax, [RetCode]
RESGROUP:0F6E		      cmp     [ExtCom],	0
RESGROUP:0F73		      jnz     short GotECode
RESGROUP:0F75		      xor     ax, ax
RESGROUP:0F77
RESGROUP:0F77 GotECode:				      ;	...
RESGROUP:0F77		      mov     [ExtCom],	1
RESGROUP:0F7C		      jmp     [Int_2e_Ret]    ;	jmp far	[Int_2e_Ret]
RESGROUP:0F7C ;	END OF FUNCTION	CHUNK FOR GetComDsk
RESGROUP:0F80 ;	---------------------------------------------------------------------------
RESGROUP:0F80
RESGROUP:0F80 Int_2e:				      ;	...
RESGROUP:0F80		      pop     ds
RESGROUP:0F81		      pop     ax
RESGROUP:0F82		      pop     [word ptr	Int_2e_Ret]
RESGROUP:0F86		      pop     [word ptr	Int_2e_Ret+2]
RESGROUP:0F8A		      add     sp, 2
RESGROUP:0F8D		      push    ds
RESGROUP:0F8E		      pop     es
RESGROUP:0F8F		      assume es:RESGROUP
RESGROUP:0F8F		      mov     ds, ax
RESGROUP:0F91		      mov     di, 80h
RESGROUP:0F94		      mov     cx, 64
RESGROUP:0F97		      rep movsw
RESGROUP:0F99		      mov     ah, 51h
RESGROUP:0F9B		      int     21h	      ;	DOS - 2+ internal - GET	PSP SEGMENT
RESGROUP:0F9B					      ;	Return:	BX = current PSP segment
RESGROUP:0F9D		      mov     [es:Save_Pdb], bx
RESGROUP:0FA2		      mov     ah, 50h
RESGROUP:0FA4		      push    es
RESGROUP:0FA5		      pop     ds
RESGROUP:0FA6		      mov     bx, ds
RESGROUP:0FA8		      int     21h	      ;	DOS - 2+ internal - SET	PSP SEGMENT
RESGROUP:0FA8					      ;	BX = segment address of	new PSP
RESGROUP:0FAA		      mov     [SingleCom], 81h
RESGROUP:0FB0		      mov     [ExtCom],	1
RESGROUP:0FB5		      push    ds
RESGROUP:0FB6		      push    ds
RESGROUP:0FB7
RESGROUP:0FB7 LodCom:				      ;	...
RESGROUP:0FB7		      pop     ds
RESGROUP:0FB8		      add     sp, 2
RESGROUP:0FBB		      cmp     [ExtCom],	0
RESGROUP:0FC0		      jnz     short LodCom0
RESGROUP:0FC2		      jmp     LodCom1
RESGROUP:0FC5 ;	---------------------------------------------------------------------------
RESGROUP:0FC5
RESGROUP:0FC5 LodCom0:				      ;	...
RESGROUP:0FC5		      mov     bx, 0FFFFh
RESGROUP:0FC8		      mov     ah, 48h
RESGROUP:0FCA		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:0FCA					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:0FCC		      call    SetSize
RESGROUP:0FCF		      add     ax, 20h
RESGROUP:0FD2		      cmp     bx, ax
RESGROUP:0FD4		      jnb     short MemOk
RESGROUP:0FD6
RESGROUP:0FD6 BadMemErrJ:			      ;	...
RESGROUP:0FD6		      jmp     BadMemErr
RESGROUP:0FD9
RESGROUP:0FD9 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:0FD9
RESGROUP:0FD9
RESGROUP:0FD9 proc	      SetSize near	      ;	...
RESGROUP:0FD9		      mov     ax, 0AAA9h      ;	TRANSPACEEND+15
RESGROUP:0FDC		      mov     cl, 4
RESGROUP:0FDE		      shr     ax, cl
RESGROUP:0FE0		      retn
RESGROUP:0FE0 endp	      SetSize
RESGROUP:0FE0
RESGROUP:0FE1 ;	---------------------------------------------------------------------------
RESGROUP:0FE1
RESGROUP:0FE1 MemOk:				      ;	...
RESGROUP:0FE1		      mov     ah, 48h
RESGROUP:0FE3		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:0FE3					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:0FE5		      jb      short BadMemErrJ
RESGROUP:0FE7		      mov     [ExtCom],	0
RESGROUP:0FEC		      mov     [Res_Tpa], ax
RESGROUP:0FEF		      and     ax, 0F000h
RESGROUP:0FF2		      add     ax, 1000h
RESGROUP:0FF5		      jb      short Bad_Tpa
RESGROUP:0FF7		      mov     dx, [Res_Tpa]
RESGROUP:0FFB		      add     dx, bx
RESGROUP:0FFD		      cmp     dx, ax
RESGROUP:0FFF		      jbe     short Bad_Tpa
RESGROUP:1001		      sub     dx, ax
RESGROUP:1003		      cmp     dx, 1000h
RESGROUP:1007		      jnb     short LTpaSet
RESGROUP:1009
RESGROUP:1009 Bad_Tpa:				      ;	...
RESGROUP:1009		      mov     ax, [Res_Tpa]
RESGROUP:100C
RESGROUP:100C LTpaSet:				      ;	...
RESGROUP:100C		      mov     [Ltpa], ax
RESGROUP:100F		      mov     ax, [Res_Tpa]
RESGROUP:1012		      add     bx, ax
RESGROUP:1014		      mov     [MemSiz],	bx
RESGROUP:1018		      call    SetSize
RESGROUP:101B		      sub     bx, ax
RESGROUP:101D		      cmp     bx, [TrnSeg]
RESGROUP:1021		      jz      short LodCom1
RESGROUP:1023		      mov     cx, 0AA9Ah
RESGROUP:1026		      ja      short mov_down
RESGROUP:1028		      xor     si, si
RESGROUP:102A		      mov     di, si
RESGROUP:102C		      cld
RESGROUP:102D		      jmp     short copy_trans
RESGROUP:102F ;	---------------------------------------------------------------------------
RESGROUP:102F
RESGROUP:102F mov_down:				      ;	...
RESGROUP:102F		      mov     si, cx
RESGROUP:1031		      dec     si
RESGROUP:1032		      mov     di, si
RESGROUP:1034		      std
RESGROUP:1035
RESGROUP:1035 copy_trans:			      ;	...
RESGROUP:1035		      push    ds
RESGROUP:1036		      push    es
RESGROUP:1037		      mov     es, bx
RESGROUP:1039		      assume es:nothing
RESGROUP:1039		      mov     ds, [TrnSeg]
RESGROUP:103D		      rep movsb
RESGROUP:103F		      cld
RESGROUP:1040		      pop     es
RESGROUP:1041		      pop     ds
RESGROUP:1042		      mov     [TrnSeg],	bx
RESGROUP:1046
RESGROUP:1046 LodCom1:				      ;	...
RESGROUP:1046		      mov     ax, ds
RESGROUP:1048		      mov     ss, ax
RESGROUP:104A		      mov     sp, offset RStack	; offset DATARES:RStack
RESGROUP:104D		      call    HeadFix
RESGROUP:1050		      xor     bp, bp
RESGROUP:1052		      mov     ax, 0FFFFh
RESGROUP:1055		      xchg    ax, [VerVal]
RESGROUP:1059		      cmp     ax, 0FFFFh
RESGROUP:105C		      jz      short NoSetVer
RESGROUP:105E		      mov     ah, 2Eh
RESGROUP:1060		      int     21h	      ;	DOS - SET VERIFY FLAG
RESGROUP:1060					      ;	DL = 00h, AL = 01h VERIFY on / 00h VERIFY off
RESGROUP:1062
RESGROUP:1062 NoSetVer:				      ;	...
RESGROUP:1062		      cmp     [SingleCom], 0FFFFh
RESGROUP:1067		      jnz     short NoSng
RESGROUP:1069		      jmp     FatalRet2
RESGROUP:106C ;	---------------------------------------------------------------------------
RESGROUP:106C
RESGROUP:106C NoSng:				      ;	...
RESGROUP:106C		      call    ChkSum
RESGROUP:106F		      cmp     dx, [Sum]
RESGROUP:1073		      jnz     short Bogus_Com
RESGROUP:1075		      call    chk_transient
RESGROUP:1078		      jz      short HavCom
RESGROUP:107A
RESGROUP:107A Bogus_Com:			      ;	...
RESGROUP:107A		      mov     [Loading], 1    ;	flag DskErr routine
RESGROUP:107F		      call    LoadCom
RESGROUP:1082
RESGROUP:1082 ChkSame:				      ;	...
RESGROUP:1082		      call    ChkSum
RESGROUP:1085		      cmp     dx, [Sum]
RESGROUP:1089		      jnz     short Also_Bogus
RESGROUP:108B		      call    chk_transient   ;	check transient	portion	is valid or not
RESGROUP:108E		      jz      short HavCom
RESGROUP:1090
RESGROUP:1090 Also_Bogus:			      ;	...
RESGROUP:1090		      call    WrongCom
RESGROUP:1093		      jmp     short ChkSame
RESGROUP:1095 ;	---------------------------------------------------------------------------
RESGROUP:1095
RESGROUP:1095 HavCom:				      ;	...
RESGROUP:1095		      mov     [Loading], 0
RESGROUP:109A		      mov     si, offset TranVars
RESGROUP:109D		      mov     di, offset HEADCALL
RESGROUP:10A0		      mov     es, [TrnSeg]
RESGROUP:10A4		      cld
RESGROUP:10A5		      mov     cx, offset OldErrNo ; TranVarEnd
RESGROUP:10A8		      sub     cx, si
RESGROUP:10AA		      rep movsb
RESGROUP:10AC		      mov     ax, [MemSiz]
RESGROUP:10AF		      mov     [ds:2], ax      ;	[PDB.BLOCK_LEN]
RESGROUP:10B2		      jmp     [dword ptr Trans]	; jmp far [Trans]
RESGROUP:10B6 ;	---------------------------------------------------------------------------
RESGROUP:10B6
RESGROUP:10B6 TRemCheck:
RESGROUP:10B6		      pop     ds
RESGROUP:10B7		      add     sp, 2
RESGROUP:10BA		      call    RemCheck
RESGROUP:10BD		      retf
RESGROUP:10BE
RESGROUP:10BE ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:10BE
RESGROUP:10BE
RESGROUP:10BE proc	      RemCheck near	      ;	...
RESGROUP:10BE		      push    ax
RESGROUP:10BF		      push    bx
RESGROUP:10C0		      mov     bx, ax
RESGROUP:10C2		      mov     ax, 4408h	      ;	(IOCTL<<8)+8
RESGROUP:10C5		      int     21h	      ;	DOS - 2+ - IOCTL -
RESGROUP:10C7		      jnb     short rcCont
RESGROUP:10C9		      or      ax, ax
RESGROUP:10CB		      jmp     short ResRegs
RESGROUP:10CD ;	---------------------------------------------------------------------------
RESGROUP:10CD
RESGROUP:10CD rcCont:				      ;	...
RESGROUP:10CD		      and     ax, 1
RESGROUP:10D0		      not     ax
RESGROUP:10D2
RESGROUP:10D2 ResRegs:				      ;	...
RESGROUP:10D2		      pop     bx
RESGROUP:10D3		      pop     ax
RESGROUP:10D4		      retn
RESGROUP:10D4 endp	      RemCheck
RESGROUP:10D4
RESGROUP:10D5 ;	---------------------------------------------------------------------------
RESGROUP:10D5
RESGROUP:10D5 THeadFix:
RESGROUP:10D5		      pop     ds
RESGROUP:10D6		      add     sp, 2
RESGROUP:10D9		      call    HeadFix
RESGROUP:10DC		      retf
RESGROUP:10DD
RESGROUP:10DD ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:10DD
RESGROUP:10DD
RESGROUP:10DD proc	      HeadFix near	      ;	...
RESGROUP:10DD		      call    SetVect
RESGROUP:10E0		      xor     bx, bx	      ;	BX = handle = 0
RESGROUP:10E2		      mov     cx, [Io_Save]   ;	CX = original stdin, stdout
RESGROUP:10E6		      mov     dx, [ds:18h]    ;	[PDB.JFN_TABLE]
RESGROUP:10EA		      cmp     cl, dl	      ;	DX = current stdin, stdout
RESGROUP:10EC		      jz      short Chk1
RESGROUP:10EE		      mov     ah, 3Eh	      ;	CLOSE
RESGROUP:10F0		      call    int21h	      ;	close stdin
RESGROUP:10F3		      mov     [ds:18h],	cl    ;	[PDB.JFN_TABLE]	; restore stdin
RESGROUP:10F7
RESGROUP:10F7 Chk1:				      ;	...
RESGROUP:10F7		      inc     bx
RESGROUP:10F8		      cmp     ch, dh
RESGROUP:10FA		      jz      short ChkOtherHand
RESGROUP:10FC		      mov     ah, 3Eh
RESGROUP:10FE		      call    int21h	      ;	close stdout
RESGROUP:1101		      mov     [ds:19h],	ch    ;	[PDB.JFN_TABLE+1] ; restore stdout
RESGROUP:1105
RESGROUP:1105 ChkOtherHand:			      ;	...
RESGROUP:1105		      add     bx, 4	      ;	skip handles 2,3,4
RESGROUP:1108		      mov     cx, 0Fh	      ;	FILPERPROC-5 ; 15
RESGROUP:110B
RESGROUP:110B CloseLoop:			      ;	...
RESGROUP:110B		      mov     ah, 3Eh
RESGROUP:110D		      cmp     [byte ptr	bx+18h], 0FFh ;	[BX+PDB.JFN_TABLE]
RESGROUP:1111		      jz      short CloseLoopNxt
RESGROUP:1113		      call    int21h
RESGROUP:1116
RESGROUP:1116 CloseLoopNxt:			      ;	...
RESGROUP:1116		      inc     bx
RESGROUP:1117		      loop    CloseLoop
RESGROUP:1119		      cmp     [Append_Flag], 0FFh
RESGROUP:111E		      jnz     short Append_Fix_End
RESGROUP:1120		      mov     ax, 0B707h      ;	AppendSetState
RESGROUP:1123		      mov     bx, [Append_State]
RESGROUP:1127		      int     2Fh	      ;	- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE
RESGROUP:1127					      ;	BX = APPEND state bits
RESGROUP:1129		      mov     [Append_Flag], 0
RESGROUP:112E
RESGROUP:112E Append_Fix_End:			      ;	...
RESGROUP:112E		      retn
RESGROUP:112E endp	      HeadFix
RESGROUP:112E
RESGROUP:112F
RESGROUP:112F ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:112F
RESGROUP:112F
RESGROUP:112F proc	      SavHand near	      ;	...
RESGROUP:112F		      push    bx	      ;	save current program's stdin/out & set to our stderr
RESGROUP:1130		      push    ax
RESGROUP:1131		      push    es
RESGROUP:1132		      push    ds
RESGROUP:1133		      mov     ah, 51h	      ;	GET_CURRENT_PDB
RESGROUP:1135		      call    int21h
RESGROUP:1138		      mov     ds, bx
RESGROUP:113A		      lds     bx, [ds:34h]    ;	[PDB.JFN_Pointer]
RESGROUP:113E		      mov     ax, [bx]
RESGROUP:1140		      pop     es
RESGROUP:1141		      push    es
RESGROUP:1142		      mov     [es:Handle01], ax
RESGROUP:1146		      mov     al, [es:1Ah]    ;	[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr
RESGROUP:114A		      mov     ah, al
RESGROUP:114C		      mov     [bx], ax	      ;	set user's stdin/out to our stderr
RESGROUP:114E		      pop     ds
RESGROUP:114F		      pop     es
RESGROUP:1150		      pop     ax
RESGROUP:1151		      pop     bx
RESGROUP:1152		      retn
RESGROUP:1152 endp	      SavHand
RESGROUP:1152
RESGROUP:1153 ;	---------------------------------------------------------------------------
RESGROUP:1153
RESGROUP:1153 GetComDsk2:			      ;	...
RESGROUP:1153		      call    GetComDsk
RESGROUP:1156		      jmp     LodCom1
RESGROUP:1159
RESGROUP:1159 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1159
RESGROUP:1159
RESGROUP:1159 proc	      RestHand near	      ;	...
RESGROUP:1159		      push    ds	      ;	restore	stdin, stdout to user
RESGROUP:115A		      push    bx
RESGROUP:115B		      push    ax
RESGROUP:115C		      mov     ah, 51h	      ;	GET_CURRENT_PDB
RESGROUP:115E		      call    int21h
RESGROUP:1161		      mov     ax, [Handle01]
RESGROUP:1164		      mov     ds, bx
RESGROUP:1166		      lds     bx, [ds:34h]    ;	[PDB.JFN_Pointer]
RESGROUP:116A		      mov     [bx], ax
RESGROUP:116C		      pop     ax
RESGROUP:116D		      pop     bx
RESGROUP:116E		      pop     ds
RESGROUP:116F		      retn
RESGROUP:116F endp	      RestHand
RESGROUP:116F
RESGROUP:1170 ;	---------------------------------------------------------------------------
RESGROUP:1170 ;	START OF FUNCTION CHUNK	FOR GetComDsk
RESGROUP:1170
RESGROUP:1170 Hopeless:				      ;	...
RESGROUP:1170		      mov     dx, offset COMBAD
RESGROUP:1173		      jmp     FatalC
RESGROUP:1173 ;	END OF FUNCTION	CHUNK FOR GetComDsk
RESGROUP:1176
RESGROUP:1176 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1176
RESGROUP:1176
RESGROUP:1176 proc	      GetComDsk	near	      ;	...
RESGROUP:1176
RESGROUP:1176 ;	FUNCTION CHUNK AT RESGROUP:0F15	SIZE 0000006B BYTES
RESGROUP:1176 ;	FUNCTION CHUNK AT RESGROUP:1170	SIZE 00000006 BYTES
RESGROUP:1176
RESGROUP:1176		      mov     al, [ComDrv]
RESGROUP:1179		      call    RemCheck
RESGROUP:117C		      jnz     short Hopeless  ;	non-removable media
RESGROUP:117E		      cmp     dx, offset COMBAD
RESGROUP:1182		      jnz     short GetComDsk4
RESGROUP:1184		      mov     dx, offset COMBAD
RESGROUP:1187		      call    RPrint
RESGROUP:118A
RESGROUP:118A GetComDsk4:			      ;	...
RESGROUP:118A		      cmp     [PutBackDrv], 0
RESGROUP:118F		      jnz     short Users_Drive
RESGROUP:1191		      mov     ah, 19h	      ;	GET_DEFAULT_DRIVE
RESGROUP:1193		      call    int21h
RESGROUP:1196		      add     al, 41h ;	'A'
RESGROUP:1198		      mov     [PutBackDrv], al
RESGROUP:119B
RESGROUP:119B Users_Drive:			      ;	...
RESGROUP:119B		      mov     dx, offset PUTBACKMSG
RESGROUP:119E		      mov     si, offset PutBackSubst
RESGROUP:11A1		      call    RPrint
RESGROUP:11A4		      mov     dx, offset PROMPT
RESGROUP:11A7		      call    RPrint
RESGROUP:11AA		      call    GetRawFlushedByte
RESGROUP:11AD		      retn
RESGROUP:11AD endp	      GetComDsk
RESGROUP:11AD
RESGROUP:11AE
RESGROUP:11AE ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:11AE
RESGROUP:11AE
RESGROUP:11AE proc	      GetRawFlushedByte	near  ;	...
RESGROUP:11AE		      mov     ax, 0C07h	      ;	(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT
RESGROUP:11B1		      int     21h	      ;	DOS - CLEAR KEYBOARD BUFFER
RESGROUP:11B1					      ;	AL must	be 01h,	06h, 07h, 08h, or 0Ah.
RESGROUP:11B3		      mov     ax, 0C00h	      ;	(STD_CON_INPUT_FLUSH<<8) + 0
RESGROUP:11B6		      int     21h	      ;	DOS - CLEAR KEYBOARD BUFFER
RESGROUP:11B6					      ;	AL must	be 01h,	06h, 07h, 08h, or 0Ah.
RESGROUP:11B8
RESGROUP:11B8 LoadCom_retn:			      ;	...
RESGROUP:11B8		      retn
RESGROUP:11B8 endp	      GetRawFlushedByte
RESGROUP:11B8
RESGROUP:11B9
RESGROUP:11B9 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:11B9
RESGROUP:11B9
RESGROUP:11B9 proc	      LoadCom near	      ;	...
RESGROUP:11B9		      inc     bp
RESGROUP:11BA		      mov     dx, offset ComSpec
RESGROUP:11BD		      mov     ax, 3D20h
RESGROUP:11C0		      int     21h	      ;	DOS - 2+ - OPEN	DISK FILE WITH HANDLE
RESGROUP:11C0					      ;	DS:DX -> ASCIZ filename
RESGROUP:11C0					      ;	AL = access mode
RESGROUP:11C0					      ;	0 - read, 1 - write, 2 - read &	write
RESGROUP:11C2		      jnb     short ReadCom
RESGROUP:11C4		      cmp     al, 4	      ;	ERROR_TOO_MANY_OPEN_FILES
RESGROUP:11C6		      jnz     short TryDoOpen
RESGROUP:11C8		      mov     dx, offset NOHANDMES
RESGROUP:11CB		      jmp     FatalC
RESGROUP:11CE ;	---------------------------------------------------------------------------
RESGROUP:11CE
RESGROUP:11CE TryDoOpen:			      ;	...
RESGROUP:11CE		      call    GetComDsk
RESGROUP:11D1		      jmp     short LoadCom
RESGROUP:11D3 ;	---------------------------------------------------------------------------
RESGROUP:11D3
RESGROUP:11D3 ReadCom:				      ;	...
RESGROUP:11D3		      mov     bx, ax
RESGROUP:11D5		      mov     dx, 2890h	      ;	TRANSTART
RESGROUP:11D8		      xor     cx, cx
RESGROUP:11DA		      mov     ax, 4200h
RESGROUP:11DD		      int     21h	      ;	DOS - 2+ - MOVE	FILE READ/WRITE	POINTER	(LSEEK)
RESGROUP:11DD					      ;	AL = method: offset from beginning of file
RESGROUP:11DF		      jb      short WrongCom1
RESGROUP:11E1		      mov     cx, 0A99Ah
RESGROUP:11E4		      push    ds
RESGROUP:11E5		      mov     ds, [TrnSeg]
RESGROUP:11E9		      mov     dx, 100h
RESGROUP:11EC		      mov     ah, 3Fh
RESGROUP:11EE		      int     21h	      ;	DOS - 2+ - READ	FROM FILE WITH HANDLE
RESGROUP:11EE					      ;	BX = file handle, CX = number of bytes to read
RESGROUP:11EE					      ;	DS:DX -> buffer
RESGROUP:11F0		      pop     ds
RESGROUP:11F1
RESGROUP:11F1 WrongCom1:			      ;	...
RESGROUP:11F1		      pushf
RESGROUP:11F2		      push    ax
RESGROUP:11F3		      mov     ah, 3Eh
RESGROUP:11F5		      int     21h	      ;	DOS - 2+ - CLOSE A FILE	WITH HANDLE
RESGROUP:11F5					      ;	BX = file handle
RESGROUP:11F7		      pop     ax
RESGROUP:11F8		      popf
RESGROUP:11F9		      jb      short WrongCom
RESGROUP:11FB		      cmp     ax, cx
RESGROUP:11FD		      jz      short LoadCom_retn
RESGROUP:11FD endp	      LoadCom
RESGROUP:11FD
RESGROUP:11FF
RESGROUP:11FF ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:11FF
RESGROUP:11FF
RESGROUP:11FF proc	      WrongCom near	      ;	...
RESGROUP:11FF		      mov     dx, offset COMBAD
RESGROUP:1202		      call    GetComDsk
RESGROUP:1205		      jmp     short LoadCom   ;	try again
RESGROUP:1205 endp	      WrongCom
RESGROUP:1205
RESGROUP:1207
RESGROUP:1207 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1207
RESGROUP:1207
RESGROUP:1207 proc	      ChkSum near	      ;	...
RESGROUP:1207		      push    ds
RESGROUP:1208		      mov     ds, [TrnSeg]
RESGROUP:120C		      mov     si, 100h
RESGROUP:120F		      mov     cx, 9B47h	      ;	TRANDATAEND-100h
RESGROUP:1212		      cld
RESGROUP:1213		      shr     cx, 1
RESGROUP:1215		      xor     dx, dx
RESGROUP:1217		      mov     [ds:msg_disp_class], 0FFh
RESGROUP:121C		      mov     [ds:extend_buf_ptr], dx ;	0
RESGROUP:1220		      mov     [ds:extend_buf_sub], dl
RESGROUP:1224
RESGROUP:1224 Chk:				      ;	...
RESGROUP:1224		      lodsw
RESGROUP:1225		      add     dx, ax
RESGROUP:1227		      adc     dx, 0
RESGROUP:122A		      loop    Chk
RESGROUP:122C		      pop     ds
RESGROUP:122D		      retn
RESGROUP:122D endp	      ChkSum
RESGROUP:122D
RESGROUP:122E
RESGROUP:122E ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:122E
RESGROUP:122E
RESGROUP:122E proc	      chk_transient near      ;	...
RESGROUP:122E		      push    ds	      ;	check transient	portion	is valid or not
RESGROUP:122F		      mov     ds, [TrnSeg]
RESGROUP:1233		      cmp     [word ptr	ds:TCOMMAND], 9090h
RESGROUP:1239		      pop     ds
RESGROUP:123A		      retn
RESGROUP:123A endp	      chk_transient
RESGROUP:123A
RESGROUP:123B
RESGROUP:123B ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:123B
RESGROUP:123B
RESGROUP:123B proc	      SetVect near	      ;	...
RESGROUP:123B		      mov     dx, offset LodCom_Trap
RESGROUP:123E		      mov     [ds:0Ah],	dx    ;	[PDB.EXIT]
RESGROUP:1242		      mov     [word ptr	ds:0Ch], ds ; [PDB.EXIT+2]
RESGROUP:1246		      push    es
RESGROUP:1247		      push    bx
RESGROUP:1248		      xor     bx, bx
RESGROUP:124A		      mov     es, bx
RESGROUP:124C		      assume es:RESGROUP
RESGROUP:124C		      mov     bl, 88h	      ;	INT 22h	vector
RESGROUP:124E		      cli
RESGROUP:124F		      mov     [es:bx], dx
RESGROUP:1252		      mov     [word ptr	es:bx+2], ds
RESGROUP:1256		      mov     dx, offset Ctrlc_Trap
RESGROUP:1259		      mov     bl, 8Ch	      ;	INT 23h	vector
RESGROUP:125B		      mov     [es:bx], dx
RESGROUP:125E		      mov     [word ptr	es:bx+2], ds
RESGROUP:1262		      mov     dx, offset CritErr_Trap
RESGROUP:1265		      mov     bl, 90h	      ;	INT 24h	vector
RESGROUP:1267		      mov     [es:bx], dx
RESGROUP:126A		      mov     [word ptr	es:bx+2], ds
RESGROUP:126E		      sti
RESGROUP:126F		      pop     bx
RESGROUP:1270		      pop     es
RESGROUP:1271		      assume es:nothing
RESGROUP:1271		      retn
RESGROUP:1271 endp	      SetVect
RESGROUP:1271
RESGROUP:1272
RESGROUP:1272 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1272
RESGROUP:1272
RESGROUP:1272 proc	      int21h near	      ;	...
RESGROUP:1272		      push    es
RESGROUP:1273		      push    bx
RESGROUP:1274		      xor     bx, bx
RESGROUP:1276		      mov     es, bx	      ;	0
RESGROUP:1278		      assume es:RESGROUP
RESGROUP:1278		      pop     bx
RESGROUP:1279		      pushf		      ;	Int 21h	simulation (ES=0)
RESGROUP:127A		      cli
RESGROUP:127B		      call    [dword ptr es:84h] ; call	far [es:84h]
RESGROUP:127B					      ;	INT 21h	handler
RESGROUP:1280		      pop     es
RESGROUP:1281		      assume es:nothing
RESGROUP:1281		      retn
RESGROUP:1281 endp	      int21h
RESGROUP:1281
RESGROUP:1282 ;	---------------------------------------------------------------------------
RESGROUP:1282		      pop     ds
RESGROUP:1283		      add     sp, 2
RESGROUP:1286		      jmp     LodCom1
RESGROUP:1289
RESGROUP:1289 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1289
RESGROUP:1289
RESGROUP:1289 proc	      AskEnd near	      ;	...
RESGROUP:1289		      mov     dx, offset ENDBATMES
RESGROUP:128C		      call    RPrint
RESGROUP:128F		      mov     ax, 0C01h	      ;	(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT
RESGROUP:1292		      int     21h	      ;	DOS - CLEAR KEYBOARD BUFFER
RESGROUP:1292					      ;	AL must	be 01h,	06h, 07h, 08h, or 0Ah.
RESGROUP:1294		      call    CharToUpper
RESGROUP:1297		      cmp     al, [NO_CHAR]
RESGROUP:129B		      jz      short aeRet
RESGROUP:129D		      cmp     al, [YES_CHAR]
RESGROUP:12A1		      jnz     short AskEnd
RESGROUP:12A3		      stc
RESGROUP:12A4
RESGROUP:12A4 aeRet:				      ;	...
RESGROUP:12A4		      retn
RESGROUP:12A4 endp	      AskEnd
RESGROUP:12A4
RESGROUP:12A5 ;	---------------------------------------------------------------------------
RESGROUP:12A5
RESGROUP:12A5 DSKERR:				      ;	...
RESGROUP:12A5		      pop     ds
RESGROUP:12A6		      pop     [RStack]	      ;	pop word [OldDS]
RESGROUP:12AA		      sti
RESGROUP:12AB		      push    es
RESGROUP:12AC		      push    si
RESGROUP:12AD		      push    cx
RESGROUP:12AE		      push    di
RESGROUP:12AF		      push    cx
RESGROUP:12B0		      push    ax
RESGROUP:12B1		      push    ds
RESGROUP:12B2		      pop     es
RESGROUP:12B3		      assume es:RESGROUP
RESGROUP:12B3		      mov     ds, bp
RESGROUP:12B5		      mov     ax, [si+4]      ;	[si+SYSDEV.ATT]
RESGROUP:12B8		      mov     [es:CDevAt], ah
RESGROUP:12BD		      mov     di, offset DevName
RESGROUP:12C0		      mov     cx, 8
RESGROUP:12C3		      add     si, 10	      ;	SYSDEV.NAME
RESGROUP:12C6		      cld
RESGROUP:12C7		      rep movsb
RESGROUP:12C9		      pop     ax
RESGROUP:12CA		      pop     cx
RESGROUP:12CB		      pop     di
RESGROUP:12CC		      push    es
RESGROUP:12CD		      pop     ds
RESGROUP:12CE		      call    SavHand
RESGROUP:12D1		      push    dx
RESGROUP:12D2		      call    crlf
RESGROUP:12D5		      pop     dx
RESGROUP:12D6		      mov     [Crit_Err_Info], ah
RESGROUP:12DA		      add     al, 41h ;	'A'
RESGROUP:12DC		      mov     [DrvLet],	al
RESGROUP:12DF		      test    ah, 80h
RESGROUP:12E2		      jz      short NoHardE
RESGROUP:12E4		      test    [CDevAt],	80h
RESGROUP:12E9		      jnz     short NoHardE
RESGROUP:12EB		      jmp     FatErr
RESGROUP:12EE ;	---------------------------------------------------------------------------
RESGROUP:12EE
RESGROUP:12EE NoHardE:				      ;	...
RESGROUP:12EE		      mov     si, offset MREAD
RESGROUP:12F1		      test    ah, 1
RESGROUP:12F4		      jz      short SavMes
RESGROUP:12F6		      mov     si, offset MWRITE
RESGROUP:12F9
RESGROUP:12F9 SavMes:				      ;	...
RESGROUP:12F9		      mov     [OldErrNo], di
RESGROUP:12FD		      push    es
RESGROUP:12FE		      push    cx
RESGROUP:12FF		      push    bx
RESGROUP:1300		      mov     ah, 59h
RESGROUP:1302		      int     21h	      ;	DOS - 3+ - GET EXTENDED	ERROR CODE
RESGROUP:1302					      ;	BX = version code (0000h for DOS 3.x)
RESGROUP:1304		      pop     bx
RESGROUP:1305		      pop     cx
RESGROUP:1306		      mov     [word ptr	NeedVol], di
RESGROUP:130A		      mov     [word ptr	NeedVol+2], es
RESGROUP:130E		      pop     es
RESGROUP:130F		      assume es:nothing
RESGROUP:130F		      mov     di, ax
RESGROUP:1311		      sub     di, 13h	      ;	ERROR_WRITE_PROTECT
RESGROUP:1314		      jnb     short HavCod
RESGROUP:1316		      mov     di, 0Ch	      ;	ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT
RESGROUP:1319
RESGROUP:1319 HavCod:				      ;	...
RESGROUP:1319		      mov     [ErrType], 0
RESGROUP:131E		      cmp     di, 10h	      ;	ERROR_FCB_UNAVAILABLE -	ERROR_WRITE_PROTECT
RESGROUP:1321		      jz      short SetStyle
RESGROUP:1323		      cmp     di, 11h	      ;	ERROR_SHARING_BUFFER_EXCEEDED -	ERROR_WRITE_PROTECT
RESGROUP:1326		      jnz     short GotStyle
RESGROUP:1328
RESGROUP:1328 SetStyle:				      ;	...
RESGROUP:1328		      mov     [ErrType], 1
RESGROUP:132D
RESGROUP:132D GotStyle:				      ;	...
RESGROUP:132D		      mov     [ErrCd_24], di
RESGROUP:1331		      cmp     di, 14h	      ;	ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT
RESGROUP:1334		      jbe     short NormalError
RESGROUP:1336		      mov     di, ax
RESGROUP:1338		      mov     ax, 500h	      ;	is the redir there?
RESGROUP:133B		      int     2Fh	      ;	Multiplex - DOS	3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
RESGROUP:133B					      ;	Return:	AL = 00h not installed,	OK to install
RESGROUP:133B					      ;	01h not	installed, can't install
RESGROUP:133B					      ;	FFh installed
RESGROUP:133D		      cmp     al, 0FFh
RESGROUP:133F		      jnz     short NoHandler ;	no, go to NoHandler
RESGROUP:1341		      push    bx
RESGROUP:1342		      mov     bx, di	      ;	get ErrType and	ptr to error msg
RESGROUP:1344		      mov     ax, 501h
RESGROUP:1347		      int     2Fh	      ;	Multiplex - DOS	3+ CRITICAL ERROR HANDLER -
RESGROUP:1349		      pop     bx
RESGROUP:134A		      jb      short NoHandler
RESGROUP:134C		      mov     [ErrType], al
RESGROUP:134F		      push    ds
RESGROUP:1350		      push    es
RESGROUP:1351		      pop     ds
RESGROUP:1352		      mov     dx, di
RESGROUP:1354		      mov     cx, 0FFFFh      ;	find end of msg
RESGROUP:1357		      xor     al, al
RESGROUP:1359		      cld
RESGROUP:135A		      repne scasb
RESGROUP:135C		      mov     [byte ptr	di-1], 24h ; '$'
RESGROUP:1360		      mov     ah, 9	      ;	STD_CON_STRING_OUTPUT ;	print the message
RESGROUP:1362		      int     21h	      ;	DOS - PRINT STRING
RESGROUP:1362					      ;	DS:DX -> string	terminated by "$"
RESGROUP:1364		      mov     [byte ptr	di-1], 0 ; restore terminal byte
RESGROUP:1368		      pop     ds
RESGROUP:1369		      jmp     short CheckErrType
RESGROUP:136B ;	---------------------------------------------------------------------------
RESGROUP:136B
RESGROUP:136B NoHandler:			      ;	...
RESGROUP:136B		      mov     [ErrType], 0
RESGROUP:1370		      mov     di, [OldErrNo]
RESGROUP:1374		      mov     [ErrCd_24], di
RESGROUP:1378
RESGROUP:1378 NormalError:			      ;	...
RESGROUP:1378		      add     di, 13h	      ;	ERROR_WRITE_PROTECT
RESGROUP:137B		      xchg    di, dx
RESGROUP:137D		      call    RPrintCrit
RESGROUP:1380
RESGROUP:1380 CheckErrType:			      ;	...
RESGROUP:1380		      cmp     [ErrType], 0
RESGROUP:1385		      jz      short ContOld
RESGROUP:1387		      call    crlf
RESGROUP:138A		      jmp     short Ask
RESGROUP:138C ;	---------------------------------------------------------------------------
RESGROUP:138C
RESGROUP:138C ContOld:				      ;	...
RESGROUP:138C		      inc     si
RESGROUP:138D		      test    [CDevAt],	80h   ;	DEVTYP>>8
RESGROUP:1392		      jz      short BlkErr
RESGROUP:1394		      mov     dx, offset MDEVICE
RESGROUP:1397		      mov     [CharDevErrRw], si
RESGROUP:139B		      mov     si, offset CharDevErrSubst
RESGROUP:139E		      call    RPrint
RESGROUP:13A1		      jmp     short Ask
RESGROUP:13A3 ;	---------------------------------------------------------------------------
RESGROUP:13A3
RESGROUP:13A3 BlkErr:				      ;	...
RESGROUP:13A3		      mov     dx, offset MDRIVE
RESGROUP:13A6		      mov     [BlkDevErrRw], si
RESGROUP:13AA		      mov     si, offset BlkDevErrSubst
RESGROUP:13AD		      call    RPrint
RESGROUP:13B0		      cmp     [Loading], 0
RESGROUP:13B5		      jz      short Ask
RESGROUP:13B7		      call    RestHand
RESGROUP:13BA		      jmp     GetComDsk2
RESGROUP:13BD ;	---------------------------------------------------------------------------
RESGROUP:13BD
RESGROUP:13BD Ask:				      ;	...
RESGROUP:13BD		      cmp     [ErrCd_24], 0Fh
RESGROUP:13C2		      jnz     short Not15
RESGROUP:13C4		      push    cx
RESGROUP:13C5		      push    ds
RESGROUP:13C6		      pop     es
RESGROUP:13C7		      assume es:RESGROUP
RESGROUP:13C7		      lds     si, [NeedVol]
RESGROUP:13CB		      push    di
RESGROUP:13CC		      mov     di, offset VolName
RESGROUP:13CF		      mov     cx, 16
RESGROUP:13D2		      cld
RESGROUP:13D3		      rep movsb
RESGROUP:13D5		      pop     di
RESGROUP:13D6		      push    es
RESGROUP:13D7		      pop     ds
RESGROUP:13D8		      pop     cx
RESGROUP:13D9		      mov     dx, offset MVOLSERIAL
RESGROUP:13DC		      mov     si, offset NeedVolSubst
RESGROUP:13DF		      call    RPrint
RESGROUP:13E2
RESGROUP:13E2 Not15:				      ;	...
RESGROUP:13E2		      mov     dx, offset REQ_ABORT
RESGROUP:13E5		      call    RPrint
RESGROUP:13E8		      test    [Crit_Err_Info], 10h ; RETRY_ALLOWED
RESGROUP:13ED		      jz      short Try_Ignore
RESGROUP:13EF		      mov     dx, offset REQ_RETRY
RESGROUP:13F2		      call    RPrint
RESGROUP:13F5
RESGROUP:13F5 Try_Ignore:			      ;	...
RESGROUP:13F5		      test    [Crit_Err_Info], 20h ; IGNORE_ALLOWED
RESGROUP:13FA		      jz      short Try_Fail
RESGROUP:13FC		      mov     dx, offset REQ_IGNORE
RESGROUP:13FF		      call    RPrint
RESGROUP:1402
RESGROUP:1402 Try_Fail:				      ;	...
RESGROUP:1402		      test    [Crit_Err_Info], 8 ; FAIL_ALLOWED
RESGROUP:1407		      jz      short Term_Question
RESGROUP:1409		      mov     dx, offset REQ_FAIL
RESGROUP:140C		      call    RPrint
RESGROUP:140F
RESGROUP:140F Term_Question:			      ;	...
RESGROUP:140F		      mov     dx, offset REQ_END
RESGROUP:1412		      call    RPrint
RESGROUP:1415		      test    [fFail], 0FFh   ;	-1
RESGROUP:141A		      jz      short DoPrompt
RESGROUP:141C		      mov     ah, 3
RESGROUP:141E		      jmp     EExit
RESGROUP:1421 ;	---------------------------------------------------------------------------
RESGROUP:1421
RESGROUP:1421 DoPrompt:				      ;	...
RESGROUP:1421		      mov     ax, 0C01h	      ;	(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT
RESGROUP:1424		      int     21h	      ;	DOS - CLEAR KEYBOARD BUFFER
RESGROUP:1424					      ;	AL must	be 01h,	06h, 07h, 08h, or 0Ah.
RESGROUP:1426		      call    ITestKanj
RESGROUP:1429		      jz      short NotKanj
RESGROUP:142B		      mov     ax, 100h
RESGROUP:142E		      int     21h	      ;	DOS - KEYBOARD INPUT
RESGROUP:142E					      ;	Return:	AL = character read
RESGROUP:1430		      call    crlf
RESGROUP:1433		      jmp     short Ask
RESGROUP:1435 ;	---------------------------------------------------------------------------
RESGROUP:1435
RESGROUP:1435 NotKanj:				      ;	...
RESGROUP:1435		      call    crlf
RESGROUP:1438		      call    CharToUpper
RESGROUP:143B		      mov     ah, 0
RESGROUP:143D		      test    [Crit_Err_Info], 20h ; IGNORE_ALLOWED
RESGROUP:1442		      jz      short User_Retry
RESGROUP:1444		      cmp     al, [IGNORE_CHAR]
RESGROUP:1448		      jz      short EExitJ
RESGROUP:144A
RESGROUP:144A User_Retry:			      ;	...
RESGROUP:144A		      inc     ah
RESGROUP:144C		      test    [Crit_Err_Info], 10h ; RETRY_ALLOWED
RESGROUP:1451		      jz      short User_Abort
RESGROUP:1453		      cmp     al, [RETRY_CHAR]
RESGROUP:1457		      jz      short EExitJ
RESGROUP:1459
RESGROUP:1459 User_Abort:			      ;	...
RESGROUP:1459		      inc     ah
RESGROUP:145B		      cmp     al, [ABORT_CHAR]
RESGROUP:145F		      jz      short Abort_Process
RESGROUP:1461		      inc     ah
RESGROUP:1463		      test    [Crit_Err_Info], 8 ; FAIL_ALLOWED
RESGROUP:1468		      jz      short AskJ
RESGROUP:146A		      cmp     al, [FAIL_CHAR]
RESGROUP:146E		      jz      short EExitJ
RESGROUP:1470
RESGROUP:1470 AskJ:				      ;	...
RESGROUP:1470		      jmp     Ask
RESGROUP:1473 ;	---------------------------------------------------------------------------
RESGROUP:1473
RESGROUP:1473 EExitJ:				      ;	...
RESGROUP:1473		      jmp     short EExit
RESGROUP:1475 ;	---------------------------------------------------------------------------
RESGROUP:1475
RESGROUP:1475 Abort_Process:			      ;	...
RESGROUP:1475		      test    [InitFlag], 1   ;	INITINIT
RESGROUP:147A		      jz      short AbortCont
RESGROUP:147C		      cmp     [PermCom], 0
RESGROUP:1481		      jz      short JustExit
RESGROUP:1483		      mov     dx, offset PATRICIDE
RESGROUP:1486		      call    RPrint
RESGROUP:1489
RESGROUP:1489 DeadInTheWater:			      ;	...
RESGROUP:1489		      jmp     short DeadInTheWater
RESGROUP:148B ;	---------------------------------------------------------------------------
RESGROUP:148B
RESGROUP:148B JustExit:				      ;	...
RESGROUP:148B		      mov     ax, [Parent]
RESGROUP:148E		      mov     [ds:16h],	ax    ;	[PDB.PARENT_PID]
RESGROUP:1491		      mov     ax, 4CFFh	      ;	(EXIT<<8) | 255
RESGROUP:1494		      int     21h	      ;	DOS - 2+ - QUIT	WITH EXIT CODE (EXIT)
RESGROUP:1494					      ;	AL = exit code
RESGROUP:1496 ;	---------------------------------------------------------------------------
RESGROUP:1496
RESGROUP:1496 AbortCont:			      ;	...
RESGROUP:1496		      test    [In_Batch], 0FFh ; -1
RESGROUP:149B		      jz      short Not_Batch_Abort
RESGROUP:149D		      mov     [Batch_Abort], 1
RESGROUP:14A2
RESGROUP:14A2 Not_Batch_Abort:			      ;	...
RESGROUP:14A2		      mov     dl, [PipeFlag]
RESGROUP:14A6		      call    ResPipeOff
RESGROUP:14A9		      or      dl, dl
RESGROUP:14AB		      jz      short CheckForA
RESGROUP:14AD		      cmp     [SingleCom], 0  ;	word
RESGROUP:14B2		      jz      short CheckForA
RESGROUP:14B4		      mov     [SingleCom], 0FFFFh ; -1
RESGROUP:14BA
RESGROUP:14BA CheckForA:			      ;	...
RESGROUP:14BA		      cmp     [ErrCd_24], 0   ;	word ; write protect?
RESGROUP:14BF		      jz      short abortfor
RESGROUP:14C1		      cmp     [ErrCd_24], 2   ;	drive not ready?
RESGROUP:14C6		      jnz     short EExit     ;	don't abort the FOR
RESGROUP:14C8
RESGROUP:14C8 abortfor:				      ;	...
RESGROUP:14C8		      mov     [ForFlag], 0    ;	abort a	FOR in progress
RESGROUP:14CD		      cmp     [SingleCom], 0
RESGROUP:14D2		      jz      short EExit
RESGROUP:14D4		      mov     [SingleCom], 0FFFFh ; -1
RESGROUP:14DA
RESGROUP:14DA EExit:				      ;	...
RESGROUP:14DA		      mov     al, ah
RESGROUP:14DC		      mov     dx, di
RESGROUP:14DE
RESGROUP:14DE RestHd:				      ;	...
RESGROUP:14DE		      call    RestHand
RESGROUP:14E1		      pop     cx
RESGROUP:14E2		      pop     si
RESGROUP:14E3		      pop     es
RESGROUP:14E4		      assume es:nothing
RESGROUP:14E4		      mov     ds, [RStack]    ;	mov ds,[OldDS]
RESGROUP:14E8		      iret
RESGROUP:14E9 ;	---------------------------------------------------------------------------
RESGROUP:14E9
RESGROUP:14E9 FatErr:				      ;	...
RESGROUP:14E9		      mov     dx, offset BADFATMSG
RESGROUP:14EC		      mov     si, offset BadFatSubst
RESGROUP:14EF		      call    RPrint
RESGROUP:14F2		      mov     al, 2	      ;	abort
RESGROUP:14F4		      jmp     short RestHd
RESGROUP:14F6
RESGROUP:14F6 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:14F6
RESGROUP:14F6
RESGROUP:14F6 proc	      crlf near		      ;	...
RESGROUP:14F6		      mov     dx, offset NEWLINE
RESGROUP:14F6 endp	      crlf
RESGROUP:14F6
RESGROUP:14F9
RESGROUP:14F9 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:14F9
RESGROUP:14F9
RESGROUP:14F9 proc	      RPrint near	      ;	...
RESGROUP:14F9		      push    si
RESGROUP:14FA		      push    ax
RESGROUP:14FB		      push    bx
RESGROUP:14FC		      push    cx
RESGROUP:14FD		      push    dx
RESGROUP:14FE		      mov     bx, si
RESGROUP:1500		      mov     si, dx
RESGROUP:1502		      lodsb
RESGROUP:1503		      xor     cx, cx
RESGROUP:1505		      mov     cl, al
RESGROUP:1507		      jcxz    short rpRet
RESGROUP:1509		      call    RDispMsg
RESGROUP:150C
RESGROUP:150C rpRet:				      ;	...
RESGROUP:150C		      pop     dx
RESGROUP:150D		      pop     cx
RESGROUP:150E		      pop     bx
RESGROUP:150F		      pop     ax
RESGROUP:1510		      pop     si
RESGROUP:1511		      retn
RESGROUP:1511 endp	      RPrint
RESGROUP:1511
RESGROUP:1512
RESGROUP:1512 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1512
RESGROUP:1512
RESGROUP:1512 proc	      RPrintCrit near	      ;	...
RESGROUP:1512		      push    dx
RESGROUP:1513		      xchg    bx, dx
RESGROUP:1515		      sub     bx, 19
RESGROUP:1518		      shl     bx, 1
RESGROUP:151A		      mov     bx, [CRITMSGPTRS+bx]
RESGROUP:151E		      xchg    bx, dx
RESGROUP:1520		      call    RPrint
RESGROUP:1523		      pop     dx
RESGROUP:1524		      retn
RESGROUP:1524 endp	      RPrintCrit
RESGROUP:1524
RESGROUP:1525
RESGROUP:1525 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1525
RESGROUP:1525
RESGROUP:1525 proc	      RDispMsg near	      ;	...
RESGROUP:1525		      lodsb
RESGROUP:1526		      cmp     al, '%'         ; 25h
RESGROUP:1528		      jnz     short rdOutChar ;	not a substitution
RESGROUP:152A		      mov     dl, [si]
RESGROUP:152C		      sub     dl, '1'
RESGROUP:152F		      cmp     dl, 9
RESGROUP:1532		      jnb     short rdOutChar ;	not a substitution
RESGROUP:1534		      call    SubstMsg
RESGROUP:1537		      inc     si
RESGROUP:1538		      dec     cx
RESGROUP:1539		      jmp     short rdCharDone
RESGROUP:153B ;	---------------------------------------------------------------------------
RESGROUP:153B
RESGROUP:153B rdOutChar:			      ;	...
RESGROUP:153B		      mov     dl, al
RESGROUP:153D		      mov     ah, 2
RESGROUP:153F		      int     21h	      ;	DOS - DISPLAY OUTPUT
RESGROUP:153F					      ;	DL = character to send to standard output
RESGROUP:1541
RESGROUP:1541 rdCharDone:			      ;	...
RESGROUP:1541		      loop    RDispMsg
RESGROUP:1543		      retn
RESGROUP:1543 endp	      RDispMsg
RESGROUP:1543
RESGROUP:1544
RESGROUP:1544 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1544
RESGROUP:1544
RESGROUP:1544 proc	      SubstMsg near	      ;	...
RESGROUP:1544		      push    bx
RESGROUP:1545		      push    cx
RESGROUP:1546		      mov     al, 3
RESGROUP:1548		      mul     dl
RESGROUP:154A		      add     bx, ax
RESGROUP:154C		      mov     al, [bx]	      ;	[bx].SubstType
RESGROUP:154E		      mov     bx, [bx+1]      ;	[bx].SubstPtr
RESGROUP:1551		      dec     al
RESGROUP:1553		      jz      short smChar
RESGROUP:1555		      dec     al
RESGROUP:1557		      jz      short smStr
RESGROUP:1559		      mov     ax, [bx]
RESGROUP:155B		      mov     cx, 4
RESGROUP:155E
RESGROUP:155E smDigit:				      ;	...
RESGROUP:155E		      rol     ax, 1
RESGROUP:1560		      rol     ax, 1
RESGROUP:1562		      rol     ax, 1
RESGROUP:1564		      rol     ax, 1
RESGROUP:1566		      push    ax
RESGROUP:1567		      and     al, 0Fh
RESGROUP:1569		      add     al, 30h ;	'0'
RESGROUP:156B		      cmp     al, 39h ;	'9'
RESGROUP:156D		      jbe     short smDigit09
RESGROUP:156F		      add     al, 7	      ;	('A' - '0') - 10
RESGROUP:1571
RESGROUP:1571 smDigit09:			      ;	...
RESGROUP:1571		      mov     dl, al
RESGROUP:1573		      mov     ah, 2
RESGROUP:1575		      int     21h	      ;	DOS - DISPLAY OUTPUT
RESGROUP:1575					      ;	DL = character to send to standard output
RESGROUP:1577		      pop     ax
RESGROUP:1578		      loop    smDigit
RESGROUP:157A		      jmp     short smRet
RESGROUP:157C ;	---------------------------------------------------------------------------
RESGROUP:157C
RESGROUP:157C smChar:				      ;	...
RESGROUP:157C		      mov     dl, [bx]
RESGROUP:157E		      mov     ah, 2
RESGROUP:1580		      int     21h	      ;	DOS - DISPLAY OUTPUT
RESGROUP:1580					      ;	DL = character to send to standard output
RESGROUP:1582		      jmp     short smRet
RESGROUP:1584 ;	---------------------------------------------------------------------------
RESGROUP:1584
RESGROUP:1584 smStr:				      ;	...
RESGROUP:1584		      mov     dl, [bx]
RESGROUP:1586		      or      dl, dl
RESGROUP:1588		      jz      short smRet
RESGROUP:158A		      mov     ah, 2
RESGROUP:158C		      int     21h	      ;	DOS - DISPLAY OUTPUT
RESGROUP:158C					      ;	DL = character to send to standard output
RESGROUP:158E		      inc     bx
RESGROUP:158F		      jmp     short smStr
RESGROUP:1591 ;	---------------------------------------------------------------------------
RESGROUP:1591
RESGROUP:1591 smRet:				      ;	...
RESGROUP:1591		      pop     cx
RESGROUP:1592		      pop     bx
RESGROUP:1593		      retn
RESGROUP:1593 endp	      SubstMsg
RESGROUP:1593
RESGROUP:1594
RESGROUP:1594 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1594
RESGROUP:1594
RESGROUP:1594 proc	      CharToUpper near	      ;	...
RESGROUP:1594		      push    ax
RESGROUP:1595		      mov     ax, 1213h
RESGROUP:1598		      int     2Fh	      ;	Multiplex - DOS	3+ internal - UPPERCASE	CHARACTER
RESGROUP:1598					      ;	STACK: WORD character to convert to uppercase
RESGROUP:1598					      ;	Return:	AL = uppercase character
RESGROUP:1598					      ;	STACK unchanged
RESGROUP:159A		      inc     sp
RESGROUP:159B		      inc     sp
RESGROUP:159C		      retn
RESGROUP:159C endp	      CharToUpper
RESGROUP:159C
RESGROUP:159D
RESGROUP:159D ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:159D
RESGROUP:159D
RESGROUP:159D proc	      ITestKanj	near	      ;	...
RESGROUP:159D		      push    ds
RESGROUP:159E		      push    si
RESGROUP:159F		      push    ax
RESGROUP:15A0		      lds     si, [Dbcs_Vector_Addr]
RESGROUP:15A4
RESGROUP:15A4 ktLop:				      ;	...
RESGROUP:15A4		      cmp     [word ptr	si], 0
RESGROUP:15A7		      jz      short NotLead
RESGROUP:15A9		      pop     ax
RESGROUP:15AA		      push    ax
RESGROUP:15AB		      cmp     al, [si]
RESGROUP:15AD		      jb      short NotLead
RESGROUP:15AF		      inc     si
RESGROUP:15B0		      cmp     al, [si]
RESGROUP:15B2		      jbe     short IsLead
RESGROUP:15B4		      inc     si
RESGROUP:15B5		      jmp     short ktLop
RESGROUP:15B7 ;	---------------------------------------------------------------------------
RESGROUP:15B7
RESGROUP:15B7 NotLead:				      ;	...
RESGROUP:15B7		      xor     ax, ax
RESGROUP:15B9		      jmp     short ktRet
RESGROUP:15BB ;	---------------------------------------------------------------------------
RESGROUP:15BB
RESGROUP:15BB IsLead:				      ;	...
RESGROUP:15BB		      xor     ax, ax
RESGROUP:15BD		      inc     ax
RESGROUP:15BE
RESGROUP:15BE ktRet:				      ;	...
RESGROUP:15BE		      pop     ax
RESGROUP:15BF		      pop     si
RESGROUP:15C0		      pop     ds
RESGROUP:15C1		      retn
RESGROUP:15C1 endp	      ITestKanj
RESGROUP:15C1
RESGROUP:15C2 ;	---------------------------------------------------------------------------
RESGROUP:15C2
RESGROUP:15C2 MsgInt2fHandler:			      ;	...
RESGROUP:15C2		      pop     ds
RESGROUP:15C3		      cmp     ax, 122Eh	      ;	(MULTDOS<<8)|MESSAGE_2F
RESGROUP:15C6		      jz      short miOurs
RESGROUP:15C8		      cmp     ax, 5500h	      ;	GET_COMMAND_STATE
RESGROUP:15CB		      jz      short fcOurs
RESGROUP:15CD		      push    ax
RESGROUP:15CE		      push    ax
RESGROUP:15CF		      push    bp
RESGROUP:15D0		      push    ax
RESGROUP:15D1		      mov     bp, sp
RESGROUP:15D3		      mov     ax, [bp+8]
RESGROUP:15D6		      mov     [bp+4], ax
RESGROUP:15D9		      mov     ax, [Int2fHandler+2]
RESGROUP:15DC		      mov     [bp+8], ax
RESGROUP:15DF		      mov     ax, [Int2fHandler]
RESGROUP:15E2		      mov     [bp+6], ax
RESGROUP:15E5		      pop     ax
RESGROUP:15E6		      pop     bp
RESGROUP:15E7		      pop     ds
RESGROUP:15E8		      retf
RESGROUP:15E9 ;	---------------------------------------------------------------------------
RESGROUP:15E9
RESGROUP:15E9 fcOurs:				      ;	...
RESGROUP:15E9		      pop     ax
RESGROUP:15EA		      push    ds
RESGROUP:15EB		      mov     si, offset Int2f_Entry
RESGROUP:15EE		      xor     ax, ax
RESGROUP:15F0		      jmp     short miRet
RESGROUP:15F2 ;	---------------------------------------------------------------------------
RESGROUP:15F2
RESGROUP:15F2 miOurs:				      ;	...
RESGROUP:15F2		      test    dl, 1
RESGROUP:15F5		      jnz     short miRet
RESGROUP:15F7		      push    bx
RESGROUP:15F8		      mov     bx, dx
RESGROUP:15FA		      xor     bh, bh
RESGROUP:15FC		      shl     bx, 1
RESGROUP:15FE		      les     di, [MsgPtrLists+bx]
RESGROUP:1602		      pop     bx
RESGROUP:1603
RESGROUP:1603 miRet:				      ;	...
RESGROUP:1603		      pop     ds
RESGROUP:1604		      iret
RESGROUP:1605 ;	---------------------------------------------------------------------------
RESGROUP:1605
RESGROUP:1605 MsgRetriever:
RESGROUP:1605		      pop     ds
RESGROUP:1606		      push    ax
RESGROUP:1607		      push    bx
RESGROUP:1608		      push    cx
RESGROUP:1609		      push    dx
RESGROUP:160A		      push    si
RESGROUP:160B		      push    ds
RESGROUP:160C		      pop     es
RESGROUP:160D		      assume es:RESGROUP
RESGROUP:160D		      mov     bx, 11	      ;	NUMPARSMSGS
RESGROUP:1610		      cmp     di, offset PARSMSGPTRS ; DATARES:ParsMsgPtrs
RESGROUP:1614		      jz      short chkmsgnum
RESGROUP:1616		      mov     bx, 90	      ;	NUMEXTMSGS
RESGROUP:1619
RESGROUP:1619 chkmsgnum:			      ;	...
RESGROUP:1619		      cmp     bx, ax
RESGROUP:161B		      jb      short mrRet
RESGROUP:161D		      dec     ax
RESGROUP:161E		      shl     ax, 1
RESGROUP:1620		      add     di, ax
RESGROUP:1622		      cmp     di, [ResMsgEnd]
RESGROUP:1626		      jb      short mrInMem
RESGROUP:1628		      mov     si, offset ComSpec ; DATARES:ComSpec
RESGROUP:162B		      mov     dx, 1
RESGROUP:162E		      mov     bx, 2000h	      ;	INT_24_ERROR
RESGROUP:1631		      mov     ax, 6C00h	      ;	ExtOpen	shl 8
RESGROUP:1634		      int     21h	      ;	DOS - 4.0 - EXTENDED OPEN/CREATE
RESGROUP:1634					      ;	BL = open mode as in AL	for normal open	(INT 21h/AH=3Dh)
RESGROUP:1634					      ;	BH = flags, CX = create	attribute, DL =	action if file exists/does not exists
RESGROUP:1634					      ;	DH = 00h (reserved), DS:SI -> ASCIZ file name
RESGROUP:1636		      jb      short mrRet
RESGROUP:1638		      mov     bx, ax
RESGROUP:163A		      mov     dx, di
RESGROUP:163C		      xor     si, si
RESGROUP:163E
RESGROUP:163E mrRead:				      ;	...
RESGROUP:163E		      sub     dx, 100h
RESGROUP:1642		      xor     cx, cx
RESGROUP:1644		      mov     ax, 4200h
RESGROUP:1647		      int     21h	      ;	DOS - 2+ - MOVE	FILE READ/WRITE	POINTER	(LSEEK)
RESGROUP:1647					      ;	AL = method: offset from beginning of file
RESGROUP:1649		      jb      short mrCloseFile
RESGROUP:164B		      mov     dx, offset MsgBuffer
RESGROUP:164E		      mov     cx, 64
RESGROUP:1651		      mov     ah, 3Fh	      ;	READ
RESGROUP:1653		      int     21h	      ;	DOS - 2+ - READ	FROM FILE WITH HANDLE
RESGROUP:1653					      ;	BX = file handle, CX = number of bytes to read
RESGROUP:1653					      ;	DS:DX -> buffer
RESGROUP:1655		      jb      short mrCloseFile
RESGROUP:1657		      or      si, si
RESGROUP:1659		      jnz     short mrCloseFile
RESGROUP:165B		      inc     si
RESGROUP:165C		      mov     dx, [word	ptr MsgBuffer]
RESGROUP:1660		      or      dx, dx
RESGROUP:1662		      jnz     short mrRead
RESGROUP:1664		      stc
RESGROUP:1665
RESGROUP:1665 mrCloseFile:			      ;	...
RESGROUP:1665		      pushf
RESGROUP:1666		      mov     ah, 3Eh	      ;	CLOSE
RESGROUP:1668		      int     21h	      ;	DOS - 2+ - CLOSE A FILE	WITH HANDLE
RESGROUP:1668					      ;	BX = file handle
RESGROUP:166A		      popf
RESGROUP:166B		      mov     di, dx
RESGROUP:166D		      jmp     short mrRet
RESGROUP:166F ;	---------------------------------------------------------------------------
RESGROUP:166F
RESGROUP:166F mrInMem:				      ;	...
RESGROUP:166F		      mov     di, [es:di]
RESGROUP:1672		      or      di, di
RESGROUP:1674		      jnz     short mrRet
RESGROUP:1676		      stc
RESGROUP:1677
RESGROUP:1677 mrRet:				      ;	...
RESGROUP:1677		      pop     si
RESGROUP:1678		      pop     dx
RESGROUP:1679		      pop     cx
RESGROUP:167A		      pop     bx
RESGROUP:167B		      pop     ax
RESGROUP:167C		      pop     ds
RESGROUP:167D		      retf
RESGROUP:167E
RESGROUP:167E ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:167E
RESGROUP:167E
RESGROUP:167E proc	      Lh_OffUnlink far
RESGROUP:167E		      mov     ch, al
RESGROUP:1680		      mov     cl, al
RESGROUP:1682		      mov     ax, 5800h	      ;	(ALLOCOPER<<8)
RESGROUP:1685		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:1685					      ;	AL = function code: get	allocation strategy
RESGROUP:1687		      mov     bx, ax
RESGROUP:1689		      ror     cl, 1
RESGROUP:168B		      and     cl, 80h
RESGROUP:168E		      and     bl, 7Fh
RESGROUP:1691		      or      bl, cl
RESGROUP:1693		      mov     ax, 5801h	      ;	(ALLOCOPER<<8)|1
RESGROUP:1696		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:1696					      ;	AL = function code: set	allocation strategy
RESGROUP:1698		      mov     bl, ch
RESGROUP:169A		      shr     bl, 1
RESGROUP:169C		      xor     bh, bh
RESGROUP:169E		      mov     ax, 5803h	      ;	(ALLOCOPER<<8)|3
RESGROUP:16A1		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:16A1					      ;	AL = function code: (DOS 5beta)	set UMB	link state
RESGROUP:16A3		      retf
RESGROUP:16A3 endp	      Lh_OffUnlink
RESGROUP:16A3
RESGROUP:16A3 ;	---------------------------------------------------------------------------
RESGROUP:16A4 CODERES_ends    db 12 dup(0)	      ;	times (((EndCode+15)>>4)<<4)-EndCode db	0
RESGROUP:16B0 ;	---------------------------------------------------------------------------
RESGROUP:16B0
RESGROUP:16B0 ConProc:				      ;	...
RESGROUP:16B0		      mov     sp, offset RStack	; 637h
RESGROUP:16B3		      mov     ah, 50h
RESGROUP:16B5		      mov     bx, es
RESGROUP:16B7		      int     21h	      ;	DOS - 2+ internal - SET	PSP SEGMENT
RESGROUP:16B7					      ;	BX = segment address of	new PSP
RESGROUP:16B9		      mov     ax, 3000h
RESGROUP:16BC		      int     21h	      ;	DOS - GET DOS VERSION
RESGROUP:16BC					      ;	Return:	AL = major version number (00h for DOS 1.x)
RESGROUP:16BE		      cmp     ax, 0A07h	      ;	EXPECTED_VERSION
RESGROUP:16C1		      jz      short okdos
RESGROUP:16C3		      mov     dx, offset BADVERMSG
RESGROUP:16C6		      call    RPrint
RESGROUP:16C9		      mov     ax, es
RESGROUP:16CB		      cmp     [es:16h],	ax    ;	PDB_Parent_Pid
RESGROUP:16D0
RESGROUP:16D0 Here:				      ;	...
RESGROUP:16D0		      jz      short Here
RESGROUP:16D2		      int     20h	      ;	DOS - PROGRAM TERMINATION
RESGROUP:16D2					      ;	returns	to DOS--identical to INT 21/AH=00h
RESGROUP:16D4 ;	---------------------------------------------------------------------------
RESGROUP:16D4
RESGROUP:16D4 okdos:				      ;	...
RESGROUP:16D4		      mov     dx, 289Fh	      ;	TranStart+15
RESGROUP:16D7		      mov     cl, 4
RESGROUP:16D9		      shr     dx, cl
RESGROUP:16DB		      mov     ax, cs
RESGROUP:16DD		      add     ax, dx
RESGROUP:16DF		      mov     [InitEnd], ax
RESGROUP:16E2		      call    CheckHelp
RESGROUP:16E5		      call    patch_segs
RESGROUP:16E8		      mov     ax, 0B700h      ;	APPENDINSTALL
RESGROUP:16EB		      int     2Fh	      ;	- Multiplex - APPEND - INSTALLATION CHECK
RESGROUP:16EB					      ;	Return:	AL = 00h not installed
RESGROUP:16EB					      ;	AL = FFh if installed
RESGROUP:16ED		      cmp     al, 0
RESGROUP:16EF		      jz      short set_msg_addr
RESGROUP:16F1		      mov     ax, 0B702h      ;	APPENDDOS
RESGROUP:16F4		      int     2Fh	      ;	- Multiplex - APPEND - VERSION CHECK
RESGROUP:16F4					      ;	Return:	AX = FFFFh if not DOS 4.0 APPEND
RESGROUP:16F4					      ;	AL = major version number
RESGROUP:16F4					      ;	AH = minor version number, otherwise
RESGROUP:16F6		      cmp     ax, 0FFFFh
RESGROUP:16F9		      jnz     short set_msg_addr
RESGROUP:16FB		      mov     ax, 0B706h      ;	APPENDGETSTATE
RESGROUP:16FE		      int     2Fh	      ;	- Multiplex - DOS 4.0 APPEND - GET APPEND FUNCTION STATE
RESGROUP:16FE					      ;	Return:	BX = APPEND state
RESGROUP:1700		      mov     [Append_State], bx
RESGROUP:1704		      xor     bx, bx
RESGROUP:1706		      mov     ax, 0B707h      ;	APPENDSETSTATE
RESGROUP:1709		      int     2Fh	      ;	- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE
RESGROUP:1709					      ;	BX = APPEND state bits
RESGROUP:170B
RESGROUP:170B set_msg_addr:			      ;	...
RESGROUP:170B		      mov     di, offset PAERRMSG0 ; DataresEnd
RESGROUP:170E		      mov     [ResMsgEnd], di
RESGROUP:1712		      call    get_XMMAddr
RESGROUP:1715		      mov     ax, 5500h	      ;	GET_COMMAND_STATE
RESGROUP:1718		      int     2Fh	      ;	Return:
RESGROUP:1718					      ;	AX = 0000h if an instance of COMMAND.COM is already running
RESGROUP:1718					      ;	DS:SI -> entry point table
RESGROUP:171A		      or      ax, ax
RESGROUP:171C		      jnz     short first_com
RESGROUP:171E		      mov     [word ptr	es:ResJmpTable], si
RESGROUP:1723		      mov     [word ptr	es:ResJmpTable+2], ds
RESGROUP:1728		      jmp     short init_cntry
RESGROUP:172A ;	---------------------------------------------------------------------------
RESGROUP:172A
RESGROUP:172A first_com:			      ;	...
RESGROUP:172A		      mov     [es:FirstCom], 1
RESGROUP:1730
RESGROUP:1730 init_cntry:			      ;	...
RESGROUP:1730		      push    es
RESGROUP:1731		      pop     ds
RESGROUP:1732		      mov     ah, 65h	      ;	GETEXTCNTRY
RESGROUP:1734		      mov     al, 4
RESGROUP:1736		      mov     dx, 0FFFFh
RESGROUP:1739		      mov     bx, 0FFFFh
RESGROUP:173C		      mov     cx, 5
RESGROUP:173F		      mov     di, offset FUCase_Addr
RESGROUP:1742		      int     21h	      ;	DOS - 2+ internal - CREATE PSP
RESGROUP:1742					      ;	DX = segment number at which to	set up PSP
RESGROUP:1742					      ;	SI = (DOS 3+) value to place in	memory size field at DX:[0002h]
RESGROUP:1744		      push    ds
RESGROUP:1745		      mov     ax, 6300h	      ;	(ECS_CALL shl 8) or GETLEADBTBL
RESGROUP:1748		      int     21h	      ;	DOS - 3.2+ only	- GET DOUBLE BYTE CHARACTER SET	LEAD TABLE
RESGROUP:174A		      mov     bx, ds
RESGROUP:174C		      pop     ds
RESGROUP:174D		      mov     [word ptr	Dbcs_Vector_Addr], si
RESGROUP:1751		      mov     [word ptr	Dbcs_Vector_Addr+2], bx
RESGROUP:1755		      mov     ax, [ds:16h]    ;	[PDB.PARENT_PID]
RESGROUP:1758		      mov     [Parent],	ax
RESGROUP:175B		      mov     ax, [ds:0Ah]    ;	[PDB.EXIT]
RESGROUP:175E		      mov     [word ptr	OldTerm], ax
RESGROUP:1761		      mov     ax, [ds:0Ch]    ;	[PDB.EXIT+2]
RESGROUP:1764		      mov     [word ptr	OldTerm+2], ax
RESGROUP:1767		      mov     ax, 16B3h	      ;	ResGroup:EndCode + 15
RESGROUP:176A		      mov     cl, 4
RESGROUP:176C		      shr     ax, cl
RESGROUP:176E		      mov     cx, cs
RESGROUP:1770		      add     ax, cx
RESGROUP:1772		      mov     [Res_Tpa], ax
RESGROUP:1775		      and     ax, 0F000h
RESGROUP:1778		      add     ax, 1000h
RESGROUP:177B		      jnb     short TpaSet
RESGROUP:177D		      mov     ax, [Res_Tpa]
RESGROUP:1780
RESGROUP:1780 TpaSet:				      ;	...
RESGROUP:1780		      mov     [Ltpa], ax
RESGROUP:1783		      mov     ax, [ds:2]      ;	[PDB.BLOCK_LEN]
RESGROUP:1786		      mov     [MySeg1],	ds
RESGROUP:178A		      mov     [MySeg2],	ds
RESGROUP:178E		      mov     [MySeg], ds
RESGROUP:1792		      mov     [MySeg3],	ds
RESGROUP:1796		      mov     [MemSiz],	ax
RESGROUP:1799		      push    ax
RESGROUP:179A		      mov     bx, 2890h	      ;	RESGROUP:TranStart
RESGROUP:179D		      add     bx, 0AA9Ah      ;	TRANGROUP:TranSpaceEnd
RESGROUP:17A1		      add     bx, 0Fh
RESGROUP:17A4		      mov     cl, 4
RESGROUP:17A6		      shr     bx, cl	      ;	(TRANSTART+TRANSPACEEND+15)>>4
RESGROUP:17A8		      mov     ah, 4Ah	      ;	SETBLOCK
RESGROUP:17AA		      int     21h	      ;	DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
RESGROUP:17AA					      ;	ES = segment address of	block to change
RESGROUP:17AA					      ;	BX = new size in paragraphs
RESGROUP:17AC		      pop     ax
RESGROUP:17AD		      mov     [EnvMax],	95    ;	((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1
RESGROUP:17AD					      ;	ZERO equ ConProc
RESGROUP:17AD					      ;	((166+15+)/16)+(1BF5h-16B0h+15)/16)-1 =	95
RESGROUP:17B3		      mov     [EnvSiz],	16
RESGROUP:17B9		      mov     dx, 0AAA9h      ;	(TRANSPACEEND+15)
RESGROUP:17BC		      mov     cl, 4
RESGROUP:17BE		      shr     dx, cl	      ;	(TRANSPACEEND+15)>>4
RESGROUP:17C0		      mov     [TrnSize], dx
RESGROUP:17C4		      sub     ax, dx
RESGROUP:17C6		      mov     [TrnSeg],	ax
RESGROUP:17C9		      mov     ax, [ds:2Ch]    ;	[PDB.ENVIRON]
RESGROUP:17CC		      mov     [EnvirSeg], ax
RESGROUP:17CF		      mov     [ds:7Eh],	ax    ;	environment segment
RESGROUP:17D2		      or      ax, ax
RESGROUP:17D4		      jz      short buildenv
RESGROUP:17D6		      cmp     [FirstCom], 0
RESGROUP:17DB		      jz      short environpassed
RESGROUP:17DD
RESGROUP:17DD buildenv:				      ;	...
RESGROUP:17DD		      call    alloc_env
RESGROUP:17E0
RESGROUP:17E0 environpassed:			      ;	...
RESGROUP:17E0		      mov     es, ax
RESGROUP:17E2		      assume es:nothing
RESGROUP:17E2		      mov     ah, 19h
RESGROUP:17E4		      int     21h	      ;	DOS - GET DEFAULT DISK NUMBER
RESGROUP:17E6		      inc     al
RESGROUP:17E8		      mov     [ComDrv],	al
RESGROUP:17EB		      mov     al, [ds:5Ch]    ;	[FCB]
RESGROUP:17EE		      or      al, al
RESGROUP:17F0		      jz      short nocomdrv
RESGROUP:17F2		      mov     ah, 3Ah ;	':'
RESGROUP:17F4		      mov     [ComDrv],	al
RESGROUP:17F7		      add     al, 40h ;	'@'
RESGROUP:17F9		      std
RESGROUP:17FA		      cmp     [AllocedEnv], 0
RESGROUP:17FF		      jz      short notwidenv
RESGROUP:1801		      mov     di, [ComspOffset]
RESGROUP:1805		      cmp     [byte ptr	es:di+1], 3Ah ;	':'
RESGROUP:180A		      jz      short notwidenv
RESGROUP:180C		      push    ds
RESGROUP:180D		      push    es
RESGROUP:180E		      pop     ds
RESGROUP:180F		      lea     si, [di+143]    ;	[di+MAX_COMSPEC-3]
RESGROUP:1813		      lea     di, [di+145]    ;	[di+MAX_COMSPEC-1]
RESGROUP:1817		      mov     cx, 144	      ;	MAX_COMSPEC-2
RESGROUP:181A		      rep movsb
RESGROUP:181C		      pop     ds
RESGROUP:181D		      mov     [es:di-1], ax
RESGROUP:1821
RESGROUP:1821 notwidenv:			      ;	...
RESGROUP:1821		      cld
RESGROUP:1822		      mov     [word ptr	AUTOBAT], ax
RESGROUP:1825
RESGROUP:1825 nocomdrv:				      ;	...
RESGROUP:1825		      call    SetVect
RESGROUP:1828		      push    cs
RESGROUP:1829		      push    cs
RESGROUP:182A		      pop     ds
RESGROUP:182B		      pop     es
RESGROUP:182C		      mov     si, 80h
RESGROUP:182F		      lodsb
RESGROUP:1830		      mov     di, si
RESGROUP:1832		      xor     ah, ah
RESGROUP:1834		      add     di, ax
RESGROUP:1836		      mov     [byte ptr	di], 0Dh
RESGROUP:1839		      xor     cx, cx
RESGROUP:183B		      mov     [num_positionals], cx
RESGROUP:183F
RESGROUP:183F Parse_command_line:		      ;	...
RESGROUP:183F		      mov     di, offset PARSE_COMMAND
RESGROUP:1842		      mov     cx, [num_positionals]
RESGROUP:1846		      xor     dx, dx
RESGROUP:1848		      mov     [old_parse_ptr], si
RESGROUP:184C		      call    [dword ptr Init_Parse] ; call far	[Init_Parse]
RESGROUP:1850		      mov     [num_positionals], cx
RESGROUP:1854		      cmp     ax, 0FFFFh
RESGROUP:1857		      jnz     short t1
RESGROUP:1859		      jmp     ArgsDone
RESGROUP:185C ;	---------------------------------------------------------------------------
RESGROUP:185C
RESGROUP:185C t1:				      ;	...
RESGROUP:185C		      cmp     ax, 0
RESGROUP:185F		      jz      short parse_cont
RESGROUP:1861
RESGROUP:1861 parse_line_error:			      ;	...
RESGROUP:1861		      push    si
RESGROUP:1862		      push    ax
RESGROUP:1863		      cmp     ax, 3	      ;	BadSwt_Ptr
RESGROUP:1866		      jnz     short parse_line_error_disp
RESGROUP:1868		      mov     di, si
RESGROUP:186A		      mov     si, [old_parse_ptr]
RESGROUP:186E
RESGROUP:186E init_chk_delim:			      ;	...
RESGROUP:186E		      cmp     si, di
RESGROUP:1870		      jz      short parse_line_error_disp
RESGROUP:1872		      lodsb
RESGROUP:1873		      cmp     al, [space_chr]
RESGROUP:1877		      jz      short init_chk_delim
RESGROUP:1879		      cmp     al, 9
RESGROUP:187B		      jz      short init_chk_delim
RESGROUP:187D		      cmp     al, [RSwitChar]
RESGROUP:1881		      jnz     short parse_line_error_disp
RESGROUP:1883		      lodsb
RESGROUP:1884		      call    ITestKanj
RESGROUP:1887		      jnz     short parse_line_error_disp
RESGROUP:1889		      call    iupconv
RESGROUP:188C		      cmp     al, [scswitch]
RESGROUP:1890		      jnz     short check_k_too
RESGROUP:1892		      pop     dx
RESGROUP:1893		      pop     dx
RESGROUP:1894		      jmp     SetSSwitch
RESGROUP:1897 ;	---------------------------------------------------------------------------
RESGROUP:1897
RESGROUP:1897 check_k_too:			      ;	...
RESGROUP:1897		      cmp     al, [skswitch]
RESGROUP:189B		      jnz     short parse_line_error_disp
RESGROUP:189D		      pop     dx
RESGROUP:189E		      pop     dx
RESGROUP:189F		      jmp     SetKSwitch
RESGROUP:18A2 ;	---------------------------------------------------------------------------
RESGROUP:18A2
RESGROUP:18A2 parse_line_error_disp:		      ;	...
RESGROUP:18A2		      pop     ax
RESGROUP:18A3		      pop     si
RESGROUP:18A4		      mov     dx, ax
RESGROUP:18A6		      call    RPrintParse
RESGROUP:18A9		      call    crlf
RESGROUP:18AC		      jmp     short Parse_command_line
RESGROUP:18AE ;	---------------------------------------------------------------------------
RESGROUP:18AE
RESGROUP:18AE parse_cont:			      ;	...
RESGROUP:18AE		      cmp     [COMND1_SYN], offset COMMAND_F_SYN ; "/F"
RESGROUP:18B4		      jz      short SetFSwitch
RESGROUP:18B6		      cmp     [COMND1_SYN], offset COMMAND_P_SYN ; "/P"
RESGROUP:18BC		      jz      short SetPSwitch
RESGROUP:18BE		      cmp     [COMND1_SYN], offset COMMAND_D_SYN ; "/D"
RESGROUP:18C4		      jnz     short parse_cont_1
RESGROUP:18C6		      jmp     SetDSwitch
RESGROUP:18C9 ;	---------------------------------------------------------------------------
RESGROUP:18C9
RESGROUP:18C9 parse_cont_1:			      ;	...
RESGROUP:18C9		      cmp     [COMND1_SYN], offset COMMAND_C_SYN ; "/C"
RESGROUP:18CF		      jnz     short parse_cont_2
RESGROUP:18D1		      jmp     SetSSwitch
RESGROUP:18D4 ;	---------------------------------------------------------------------------
RESGROUP:18D4
RESGROUP:18D4 parse_cont_2:			      ;	...
RESGROUP:18D4		      cmp     [COMND1_SYN], offset COMMAND_K_SYN ; "/K"
RESGROUP:18DA		      jnz     short parse_cont_3
RESGROUP:18DC		      jmp     SetKSwitch
RESGROUP:18DF ;	---------------------------------------------------------------------------
RESGROUP:18DF
RESGROUP:18DF parse_cont_3:			      ;	...
RESGROUP:18DF		      cmp     [COMND1_SYN], offset COMMAND_E_SYN ; "/E"
RESGROUP:18E5		      jnz     short parse_cont_4
RESGROUP:18E7		      jmp     SetESwitch
RESGROUP:18EA ;	---------------------------------------------------------------------------
RESGROUP:18EA
RESGROUP:18EA parse_cont_4:			      ;	...
RESGROUP:18EA		      cmp     [COMND1_SYN], offset COMMAND_Y_SYN ; "/Y"
RESGROUP:18F0		      jnz     short parse_cont_5
RESGROUP:18F2		      jmp     SetYSwitch
RESGROUP:18F5 ;	---------------------------------------------------------------------------
RESGROUP:18F5
RESGROUP:18F5 parse_cont_5:			      ;	...
RESGROUP:18F5		      cmp     [COMND1_SYN], offset COMMAND_M_SYN ; "/MSG"
RESGROUP:18FB		      jz      short SetMSwitchJ
RESGROUP:18FD		      cmp     [COMND1_SYN], offset COMMAND_H_SYN ; "/H"
RESGROUP:1903		      jz      short SetHSwitch
RESGROUP:1905		      cmp     [COMND1_SYN], offset COMMAND_O_SYN ; "/O"
RESGROUP:190B		      jz      short SetOSwitch
RESGROUP:190D		      jmp     ChkOtherArgs
RESGROUP:1910 ;	---------------------------------------------------------------------------
RESGROUP:1910
RESGROUP:1910 SetMSwitchJ:			      ;	...
RESGROUP:1910		      jmp     SetMSwitch
RESGROUP:1913 ;	---------------------------------------------------------------------------
RESGROUP:1913
RESGROUP:1913 SetHSwitch:			      ;	...
RESGROUP:1913		      jmp     load_to_hma_umb
RESGROUP:1916 ;	---------------------------------------------------------------------------
RESGROUP:1916
RESGROUP:1916 SetOSwitch:			      ;	...
RESGROUP:1916		      jmp     disable_overwrite_msg
RESGROUP:1919 ;	---------------------------------------------------------------------------
RESGROUP:1919
RESGROUP:1919 SetFSwitch:			      ;	...
RESGROUP:1919		      cmp     [fFail], 0FFh   ;	-1
RESGROUP:191E		      jnz     short failok
RESGROUP:1920		      mov     ax, 1	      ;	MoreArgs_Ptr
RESGROUP:1923		      jmp     parse_line_error
RESGROUP:1926 ;	---------------------------------------------------------------------------
RESGROUP:1926
RESGROUP:1926 failok:				      ;	...
RESGROUP:1926		      mov     [fFail], 0FFh
RESGROUP:192B		      jmp     Parse_command_line
RESGROUP:192E ;	---------------------------------------------------------------------------
RESGROUP:192E
RESGROUP:192E SetPSwitch:			      ;	...
RESGROUP:192E		      cmp     [PermCom], 0
RESGROUP:1933		      jz      short permcomok
RESGROUP:1935		      mov     ax, 1	      ;	MoreArgs_Ptr
RESGROUP:1938		      jmp     parse_line_error
RESGROUP:193B ;	---------------------------------------------------------------------------
RESGROUP:193B
RESGROUP:193B permcomok:			      ;	...
RESGROUP:193B		      inc     [PermCom]	      ;	byte
RESGROUP:193F		      mov     [word ptr	OldTerm], offset LodCom_Trap
RESGROUP:1945		      mov     [word ptr	OldTerm+2], ds
RESGROUP:1949		      cmp     [PRDATTM], 0FFh ;	-1
RESGROUP:194E		      jnz     short Parse_command_line_jmp
RESGROUP:1950		      mov     [PRDATTM], 0
RESGROUP:1955
RESGROUP:1955 Parse_command_line_jmp:		      ;	...
RESGROUP:1955		      jmp     Parse_command_line
RESGROUP:1958 ;	---------------------------------------------------------------------------
RESGROUP:1958
RESGROUP:1958 SetDSwitch:			      ;	...
RESGROUP:1958		      cmp     [dswitch], 0
RESGROUP:195D		      jz      short setdateok
RESGROUP:195F		      mov     ax, 1
RESGROUP:1962		      jmp     parse_line_error
RESGROUP:1965 ;	---------------------------------------------------------------------------
RESGROUP:1965
RESGROUP:1965 setdateok:			      ;	...
RESGROUP:1965		      inc     [dswitch]	      ;	byte
RESGROUP:1969		      mov     [PRDATTM], 1    ;	byte
RESGROUP:196E		      jmp     Parse_command_line
RESGROUP:1971 ;	---------------------------------------------------------------------------
RESGROUP:1971
RESGROUP:1971 SetKSwitch:			      ;	...
RESGROUP:1971		      mov     [SemiPermCom], 0
RESGROUP:1977		      jmp     short SetSorKSwitch
RESGROUP:1979 ;	---------------------------------------------------------------------------
RESGROUP:1979
RESGROUP:1979 SetSSwitch:			      ;	...
RESGROUP:1979		      mov     [PermCom], 0
RESGROUP:197E
RESGROUP:197E SetSorKSwitch:			      ;	...
RESGROUP:197E		      mov     [SingleCom], si
RESGROUP:1982		      mov     [PRDATTM], 1    ;	byte
RESGROUP:1987		      jmp     ArgsDone
RESGROUP:198A ;	---------------------------------------------------------------------------
RESGROUP:198A
RESGROUP:198A SetESwitch:			      ;	...
RESGROUP:198A		      cmp     [eswitch], 0    ;	byte
RESGROUP:198F		      jz      short eswitchok
RESGROUP:1991		      mov     ax, 1
RESGROUP:1994		      jmp     parse_line_error
RESGROUP:1997 ;	---------------------------------------------------------------------------
RESGROUP:1997
RESGROUP:1997 eswitchok:			      ;	...
RESGROUP:1997		      inc     [eswitch]
RESGROUP:199B		      mov     di, offset COMND1_ADDR
RESGROUP:199E		      mov     bx, [di]
RESGROUP:19A0		      add     bx, 0Fh
RESGROUP:19A3		      mov     cl, 4
RESGROUP:19A5		      shr     bx, cl
RESGROUP:19A7		      mov     [EnvSiz],	bx
RESGROUP:19AB		      jmp     Parse_command_line
RESGROUP:19AE ;	---------------------------------------------------------------------------
RESGROUP:19AE
RESGROUP:19AE SetMSwitch:			      ;	...
RESGROUP:19AE		      cmp     [ext_msg], 1
RESGROUP:19B3		      jnz     short setMswitchok
RESGROUP:19B5		      mov     ax, 1	      ;	MoreArgs_Ptr
RESGROUP:19B8		      jmp     parse_line_error
RESGROUP:19BB ;	---------------------------------------------------------------------------
RESGROUP:19BB
RESGROUP:19BB setMswitchok:			      ;	...
RESGROUP:19BB		      mov     [ext_msg], 1
RESGROUP:19C0		      jmp     Parse_command_line
RESGROUP:19C3 ;	---------------------------------------------------------------------------
RESGROUP:19C3
RESGROUP:19C3 SetYSwitch:			      ;	...
RESGROUP:19C3		      or      [byte ptr	Y_Flag], 10h
RESGROUP:19C8		      jmp     Parse_command_line
RESGROUP:19CB ;	---------------------------------------------------------------------------
RESGROUP:19CB
RESGROUP:19CB load_to_hma_umb:			      ;	...
RESGROUP:19CB		      cmp     [COMMAND_HIGH], 0
RESGROUP:19D0		      jz      short set_command_high_flag
RESGROUP:19D2		      mov     ax, 1	      ;	too many parameters
RESGROUP:19D5		      jmp     parse_line_error
RESGROUP:19D8 ;	---------------------------------------------------------------------------
RESGROUP:19D8
RESGROUP:19D8 set_command_high_flag:		      ;	...
RESGROUP:19D8		      inc     [COMMAND_HIGH]  ;	byte
RESGROUP:19DC		      jmp     Parse_command_line
RESGROUP:19DF ;	---------------------------------------------------------------------------
RESGROUP:19DF
RESGROUP:19DF disable_overwrite_msg:		      ;	...
RESGROUP:19DF		      cmp     [byte ptr	cox_location], 'c' ; "cox"
RESGROUP:19E4		      jz      short change_cox_to_VCB
RESGROUP:19E6		      mov     ax, 1
RESGROUP:19E9		      jmp     parse_line_error
RESGROUP:19EC ;	---------------------------------------------------------------------------
RESGROUP:19EC
RESGROUP:19EC change_cox_to_VCB:		      ;	...
RESGROUP:19EC		      mov     [byte ptr	cox_location], 56h ; 'V'  ; "VCB"
RESGROUP:19F1		      mov     [word ptr	cox_location+1], 4243h ; 'CB'
RESGROUP:19F7		      jmp     Parse_command_line
RESGROUP:19FA ;	---------------------------------------------------------------------------
RESGROUP:19FA
RESGROUP:19FA ChkOtherArgs:			      ;	...
RESGROUP:19FA		      push    ds
RESGROUP:19FB		      push    si
RESGROUP:19FC		      lds     si, [COMND1_ADDR]
RESGROUP:1A00		      mov     dx, si
RESGROUP:1A02		      mov     ax, 3D02h	      ;	(OPEN shl 8) or	2
RESGROUP:1A05		      int     21h	      ;	DOS - 2+ - OPEN	DISK FILE WITH HANDLE
RESGROUP:1A05					      ;	DS:DX -> ASCIZ filename
RESGROUP:1A05					      ;	AL = access mode
RESGROUP:1A05					      ;	2 - read & write
RESGROUP:1A07		      jb      short ChkSrchSpec
RESGROUP:1A09		      mov     bx, ax
RESGROUP:1A0B		      mov     ax, 4400h	      ;	IOCTL shl 8
RESGROUP:1A0E		      int     21h	      ;	DOS - 2+ - IOCTL - GET DEVICE INFORMATION
RESGROUP:1A0E					      ;	BX = file or device handle
RESGROUP:1A10		      test    dl, 80h
RESGROUP:1A13		      jnz     short IsaDevice
RESGROUP:1A15
RESGROUP:1A15 BadSetCon:			      ;	...
RESGROUP:1A15		      mov     ah, 3Eh	      ;	CLOSE
RESGROUP:1A17		      int     21h	      ;	DOS - 2+ - CLOSE A FILE	WITH HANDLE
RESGROUP:1A17					      ;	BX = file handle
RESGROUP:1A19		      jmp     short ChkSrchSpec
RESGROUP:1A1B ;	---------------------------------------------------------------------------
RESGROUP:1A1B
RESGROUP:1A1B IsaDevice:			      ;	...
RESGROUP:1A1B		      xor     dh, dh
RESGROUP:1A1D		      or      dl, 3
RESGROUP:1A20		      mov     ax, 4401h	      ;	(IOCTL shl 8) or 1
RESGROUP:1A23		      int     21h	      ;	DOS - 2+ - IOCTL - SET DEVICE INFORMATION
RESGROUP:1A23					      ;	BX = device handle, DH = 0
RESGROUP:1A23					      ;	DL = device information	to set (bits 0-7 from function 0)
RESGROUP:1A25		      jb      short BadSetCon
RESGROUP:1A27		      mov     dx, bx
RESGROUP:1A29		      cmp     [es:DevFlag], 1
RESGROUP:1A2F		      jz      short DevErr
RESGROUP:1A31		      push    cx
RESGROUP:1A32		      mov     cx, 3
RESGROUP:1A35		      xor     bx, bx
RESGROUP:1A37
RESGROUP:1A37 rcclloop:				      ;	...
RESGROUP:1A37		      mov     ah, 3Eh
RESGROUP:1A39		      int     21h	      ;	DOS - 2+ - CLOSE A FILE	WITH HANDLE
RESGROUP:1A39					      ;	BX = file handle
RESGROUP:1A3B		      inc     bx
RESGROUP:1A3C		      loop    rcclloop
RESGROUP:1A3E		      mov     bx, dx
RESGROUP:1A40		      mov     ah, 45h	      ;	XDUP
RESGROUP:1A42		      int     21h	      ;	DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)
RESGROUP:1A42					      ;	BX = file handle to duplicate
RESGROUP:1A44		      mov     ah, 45h
RESGROUP:1A46		      int     21h	      ;	DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)
RESGROUP:1A46					      ;	BX = file handle to duplicate
RESGROUP:1A48		      mov     ah, 45h
RESGROUP:1A4A		      int     21h	      ;	DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)
RESGROUP:1A4A					      ;	BX = file handle to duplicate
RESGROUP:1A4C		      mov     ah, 3Eh
RESGROUP:1A4E		      int     21h	      ;	DOS - 2+ - CLOSE A FILE	WITH HANDLE
RESGROUP:1A4E					      ;	BX = file handle
RESGROUP:1A50		      pop     cx
RESGROUP:1A51		      pop     si
RESGROUP:1A52		      pop     ds
RESGROUP:1A53		      inc     [es:DevFlag]
RESGROUP:1A58		      jmp     Parse_command_line
RESGROUP:1A5B ;	---------------------------------------------------------------------------
RESGROUP:1A5B
RESGROUP:1A5B DevErr:				      ;	...
RESGROUP:1A5B		      pop     si
RESGROUP:1A5C		      pop     ds
RESGROUP:1A5D		      mov     dx, 1
RESGROUP:1A60		      call    RPrintParse
RESGROUP:1A63		      call    crlf
RESGROUP:1A66		      jmp     Parse_command_line
RESGROUP:1A69 ;	---------------------------------------------------------------------------
RESGROUP:1A69
RESGROUP:1A69 ChkSrchSpec:			      ;	...
RESGROUP:1A69		      cmp     [es:PathFlag], 1
RESGROUP:1A6F		      jz      short DevErr
RESGROUP:1A71		      inc     [es:PathFlag]
RESGROUP:1A76		      call    alloc_env
RESGROUP:1A79		      mov     es, ax
RESGROUP:1A7B		      push    si
RESGROUP:1A7C		      xor     cx, cx
RESGROUP:1A7E
RESGROUP:1A7E countloop:			      ;	...
RESGROUP:1A7E		      lodsb
RESGROUP:1A7F		      inc     cx
RESGROUP:1A80		      cmp     al, 0	      ;	END_OF_LINE_OUT
RESGROUP:1A82		      jnz     short countloop
RESGROUP:1A84		      mov     al, [ss:space_chr]
RESGROUP:1A88		      dec     si
RESGROUP:1A89		      mov     [si], al
RESGROUP:1A8B		      push    cx
RESGROUP:1A8C		      mov     cx, 8000h	      ;	ENVBIG
RESGROUP:1A8F		      mov     di, [ss:ComspOffset]
RESGROUP:1A94		      mov     al, 0
RESGROUP:1A96		      repne scasb
RESGROUP:1A98		      mov     si, di
RESGROUP:1A9A
RESGROUP:1A9A comp_endenv:			      ;	...
RESGROUP:1A9A		      scasb
RESGROUP:1A9B		      jz      short got_endenv
RESGROUP:1A9D		      repne scasb
RESGROUP:1A9F		      jmp     short comp_endenv
RESGROUP:1AA1 ;	---------------------------------------------------------------------------
RESGROUP:1AA1
RESGROUP:1AA1 got_endenv:			      ;	...
RESGROUP:1AA1		      mov     cx, di
RESGROUP:1AA3		      sub     cx, si
RESGROUP:1AA5		      mov     di, [ss:ComspOffset]
RESGROUP:1AAA		      sub     di, 8	      ;	ComspStrLen
RESGROUP:1AAE		      push    ds
RESGROUP:1AAF		      push    es
RESGROUP:1AB0		      pop     ds
RESGROUP:1AB1		      rep movsb
RESGROUP:1AB3		      dec     di
RESGROUP:1AB4		      push    cs
RESGROUP:1AB5		      pop     ds
RESGROUP:1AB6		      mov     si, offset ComspString ; "COMSPEC=\\COMMAND.COM"
RESGROUP:1AB9		      mov     cx, 8	      ;	ComspStrLen
RESGROUP:1ABC		      rep movsb
RESGROUP:1ABE		      mov     [ComspOffset], di
RESGROUP:1AC2		      pop     ds
RESGROUP:1AC3		      pop     cx
RESGROUP:1AC4		      pop     si
RESGROUP:1AC5
RESGROUP:1AC5 ComtrLoop:			      ;	...
RESGROUP:1AC5		      lodsb
RESGROUP:1AC6		      dec     cx
RESGROUP:1AC7		      cmp     al, [ss:space_chr]
RESGROUP:1ACC		      jz      short SetComsr
RESGROUP:1ACE		      stosb
RESGROUP:1ACF		      xor     ah, ah
RESGROUP:1AD1		      jcxz    short SetComsr
RESGROUP:1AD3		      push    ds
RESGROUP:1AD4		      push    cs
RESGROUP:1AD5		      pop     ds
RESGROUP:1AD6		      call    ITestKanj
RESGROUP:1AD9		      pop     ds
RESGROUP:1ADA		      jz      short ComtrLoop
RESGROUP:1ADC		      dec     cx
RESGROUP:1ADD		      movsb
RESGROUP:1ADE		      inc     ah
RESGROUP:1AE0		      jcxz    short SetComsr
RESGROUP:1AE2		      jmp     short ComtrLoop
RESGROUP:1AE4 ;	---------------------------------------------------------------------------
RESGROUP:1AE4
RESGROUP:1AE4 SetComsr:				      ;	...
RESGROUP:1AE4		      push    cx
RESGROUP:1AE5		      push    cs
RESGROUP:1AE6		      pop     ds
RESGROUP:1AE7		      push    ds
RESGROUP:1AE8		      mov     si, offset COMSPECT ; "\\COMMAND.COM"
RESGROUP:1AEB		      mov     cx, 14
RESGROUP:1AEE		      mov     al, [es:di-1]
RESGROUP:1AF2		      or      ah, ah
RESGROUP:1AF4		      jnz     short iNotRoot
RESGROUP:1AF6		      cmp     al, [RDirChar]
RESGROUP:1AFA		      jnz     short iNotRoot
RESGROUP:1AFC		      inc     si
RESGROUP:1AFD		      dec     cx
RESGROUP:1AFE
RESGROUP:1AFE iNotRoot:				      ;	...
RESGROUP:1AFE		      rep movsb
RESGROUP:1B00		      mov     dx, [ComspOffset]
RESGROUP:1B04		      push    es
RESGROUP:1B05		      pop     ds
RESGROUP:1B06		      mov     ax, 3D00h
RESGROUP:1B09		      int     21h	      ;	DOS - 2+ - OPEN	DISK FILE WITH HANDLE
RESGROUP:1B09					      ;	DS:DX -> ASCIZ filename
RESGROUP:1B09					      ;	AL = access mode
RESGROUP:1B09					      ;	0 - read
RESGROUP:1B0B		      pop     ds
RESGROUP:1B0C		      jb      short SetComsrBad
RESGROUP:1B0E		      mov     bx, ax
RESGROUP:1B10		      mov     ah, 3Eh
RESGROUP:1B12		      int     21h	      ;	DOS - 2+ - CLOSE A FILE	WITH HANDLE
RESGROUP:1B12					      ;	BX = file handle
RESGROUP:1B14
RESGROUP:1B14 SetComsrRet:			      ;	...
RESGROUP:1B14		      pop     cx
RESGROUP:1B15		      pop     si
RESGROUP:1B16		      pop     ds
RESGROUP:1B17		      push    cs
RESGROUP:1B18		      pop     es
RESGROUP:1B19		      assume es:RESGROUP
RESGROUP:1B19		      jmp     Parse_command_line
RESGROUP:1B1C ;	---------------------------------------------------------------------------
RESGROUP:1B1C
RESGROUP:1B1C SetComsrBad:			      ;	...
RESGROUP:1B1C		      mov     dx, offset BADCOMLKMES
RESGROUP:1B1F		      call    5A6Ch	      ;	TRIAGEERROR equ	TRANSTART+TriageError
RESGROUP:1B1F					      ;	call TRIAGEERROR ; TRANSTART+31DCh
RESGROUP:1B22		      cmp     ax, 65
RESGROUP:1B25		      jnz     short doprt
RESGROUP:1B27		      mov     dx, offset BADCOMACCMSG
RESGROUP:1B2A
RESGROUP:1B2A doprt:				      ;	...
RESGROUP:1B2A		      call    RPrint
RESGROUP:1B2D		      mov     si, offset COMSPECT ; "\\COMMAND.COM"
RESGROUP:1B30		      mov     di, [ComspOffset]
RESGROUP:1B34		      mov     cx, 14
RESGROUP:1B37		      rep movsb
RESGROUP:1B39		      jmp     short SetComsrRet
RESGROUP:1B3B ;	---------------------------------------------------------------------------
RESGROUP:1B3B
RESGROUP:1B3B ArgsDone:				      ;	...
RESGROUP:1B3B		      mov     es, [EnvirSeg]
RESGROUP:1B3F		      assume es:nothing
RESGROUP:1B3F		      cmp     [PermCom], 0
RESGROUP:1B44		      jz      short ComReturns
RESGROUP:1B46		      push    es
RESGROUP:1B47		      mov     ah, 50h	      ;	SET_CURRENT_PDB
RESGROUP:1B49		      mov     bx, ds
RESGROUP:1B4B		      mov     es, bx
RESGROUP:1B4D		      assume es:RESGROUP
RESGROUP:1B4D		      int     21h	      ;	DOS - 2+ internal - SET	PSP SEGMENT
RESGROUP:1B4D					      ;	BX = segment address of	new PSP
RESGROUP:1B4F		      mov     di, 0Ah	      ;	PDB.EXIT
RESGROUP:1B52		      mov     ax, offset LodCom_Trap
RESGROUP:1B55		      stosw
RESGROUP:1B56		      mov     ax, ds
RESGROUP:1B58		      stosw
RESGROUP:1B59		      mov     ax, offset Ctrlc_Trap
RESGROUP:1B5C		      stosw
RESGROUP:1B5D		      mov     ax, ds
RESGROUP:1B5F		      stosw
RESGROUP:1B60		      mov     ax, offset CritErr_Trap
RESGROUP:1B63		      stosw
RESGROUP:1B64		      mov     ax, ds
RESGROUP:1B66		      stosw
RESGROUP:1B67		      mov     [word ptr	ds:16h], ds ; [PDB.PARENT_PID]
RESGROUP:1B6B		      mov     dx, offset Int2e_Trap
RESGROUP:1B6E		      mov     ax, 252Eh	      ;	(SET_INTERRUPT_VECTOR SHL 8) OR	2Eh
RESGROUP:1B71		      int     21h	      ;	DOS - SET INTERRUPT VECTOR
RESGROUP:1B71					      ;	AL = interrupt number
RESGROUP:1B71					      ;	DS:DX =	new vector to be used for specified interrupt
RESGROUP:1B73		      pop     es
RESGROUP:1B74		      assume es:nothing
RESGROUP:1B74
RESGROUP:1B74 ComReturns:			      ;	...
RESGROUP:1B74		      mov     ax, [ds:16h]    ;	[PDB.PARENT_PID]
RESGROUP:1B77		      mov     [Parent],	ax
RESGROUP:1B7A		      mov     [word ptr	ds:16h], ds ; [PDB.PARENT_PID]
RESGROUP:1B7E		      mov     ax, [ds:18h]    ;	[PDB.JFN_TABLE]
RESGROUP:1B81		      mov     [Io_Save], ax
RESGROUP:1B84		      mov     [Com_Ptr+2], ds
RESGROUP:1B88		      mov     [Com_Fcb1+2], ds
RESGROUP:1B8C		      mov     [Com_Fcb2+2], ds
RESGROUP:1B90		      mov     di, offset ComSpec
RESGROUP:1B93		      mov     si, [ComspOffset]
RESGROUP:1B97		      cmp     [AllocedEnv], 0
RESGROUP:1B9C		      mov     ax, ds
RESGROUP:1B9E		      push    es
RESGROUP:1B9F		      pop     ds
RESGROUP:1BA0		      mov     es, ax
RESGROUP:1BA2		      assume es:RESGROUP
RESGROUP:1BA2		      jnz     short CopyComsp
RESGROUP:1BA4		      push    cs
RESGROUP:1BA5		      pop     ds
RESGROUP:1BA6		      mov     si, offset ComspString ; "COMSPEC=\\COMMAND.COM"
RESGROUP:1BA9		      push    es
RESGROUP:1BAA		      push    di
RESGROUP:1BAB		      call    IfindE
RESGROUP:1BAE		      mov     si, di
RESGROUP:1BB0		      push    es
RESGROUP:1BB1		      pop     ds
RESGROUP:1BB2		      pop     di
RESGROUP:1BB3		      pop     es
RESGROUP:1BB4		      assume es:nothing
RESGROUP:1BB4		      jnb     short CopyComsp
RESGROUP:1BB6		      mov     si, offset ComspString ; "COMSPEC=\\COMMAND.COM"
RESGROUP:1BB9		      add     si, 8	      ;	ComspString+ComspStrLen
RESGROUP:1BBD		      push    cs
RESGROUP:1BBE		      pop     ds
RESGROUP:1BBF
RESGROUP:1BBF CopyComsp:			      ;	...
RESGROUP:1BBF		      mov     [es:PutBackComSpec], di
RESGROUP:1BC4		      cmp     [byte ptr	si+1], ':'
RESGROUP:1BC8		      jnz     short CopyComspLoop
RESGROUP:1BCA		      add     [es:PutBackComSpec], 2
RESGROUP:1BD0
RESGROUP:1BD0 CopyComspLoop:			      ;	...
RESGROUP:1BD0		      lodsb
RESGROUP:1BD1		      stosb
RESGROUP:1BD2		      or      al, al
RESGROUP:1BD4		      jnz     short CopyComspLoop
RESGROUP:1BD6		      mov     [es:ComSpec_End],	di
RESGROUP:1BDB		      dec     [es:ComSpec_End]
RESGROUP:1BE0		      mov     ah, [es:ComDrv]
RESGROUP:1BE5		      add     ah, 40h ;	'@'   ; 'A'-1
RESGROUP:1BE8		      mov     [es:PutBackDrv], ah
RESGROUP:1BED		      call    setup_for_messages
RESGROUP:1BF0		      call    Setup_res_end
RESGROUP:1BF3		      push    cs
RESGROUP:1BF4		      pop     ds
RESGROUP:1BF5
RESGROUP:1BF5 EnvMaximum:			      ;
RESGROUP:1BF5		      mov     si, 2890h	      ;	TRANSTART
RESGROUP:1BF8		      add     si, 100h	      ;	TRANSTART+100h
RESGROUP:1BFC		      mov     cx, 9B47h	      ;	TRANDATAEND-100h
RESGROUP:1BFF		      cld
RESGROUP:1C00		      shr     cx, 1
RESGROUP:1C02		      xor     dx, dx
RESGROUP:1C04
RESGROUP:1C04 Ichksum:				      ;	...
RESGROUP:1C04		      lodsw
RESGROUP:1C05		      add     dx, ax
RESGROUP:1C07		      adc     dx, 0
RESGROUP:1C0A		      loop    Ichksum
RESGROUP:1C0C		      mov     [Sum], dx
RESGROUP:1C10		      cmp     [PRDATTM], 0
RESGROUP:1C15		      jnz     short NoBatchSeg
RESGROUP:1C17		      mov     bx, 4	      ;	((BATCHSEGMENT.SIZE)+16+15)/16
RESGROUP:1C1A		      mov     ah, 48h
RESGROUP:1C1C		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:1C1C					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:1C1E		      jb      short NoBatchSeg
RESGROUP:1C20		      mov     [Batch], ax
RESGROUP:1C23
RESGROUP:1C23 NoBatchSeg:			      ;	...
RESGROUP:1C23		      mov     bx, [EnvirSeg]
RESGROUP:1C27		      mov     [OldEnv],	bx
RESGROUP:1C2B		      mov     [UsedEnv], 0
RESGROUP:1C31		      mov     ds, bx
RESGROUP:1C33		      xor     si, si
RESGROUP:1C35		      mov     di, si
RESGROUP:1C37		      mov     bx, 0FFFh	      ;	4096-1
RESGROUP:1C3A		      mov     [ss:EnvMax], bx
RESGROUP:1C3F		      shl     bx, 1
RESGROUP:1C41		      shl     bx, 1
RESGROUP:1C43		      shl     bx, 1
RESGROUP:1C45		      shl     bx, 1
RESGROUP:1C47		      mov     [ss:EnvMax], bx
RESGROUP:1C4C		      dec     bx
RESGROUP:1C4D		      xor     dx, dx
RESGROUP:1C4F
RESGROUP:1C4F NxtStr:				      ;	...
RESGROUP:1C4F		      call    GetStrLen
RESGROUP:1C52		      push    ds
RESGROUP:1C53		      push    cs
RESGROUP:1C54		      pop     ds
RESGROUP:1C55		      add     [UsedEnv], cx
RESGROUP:1C59		      pop     ds
RESGROUP:1C5A		      cmp     cx, 1
RESGROUP:1C5D		      jz      short EnvExit
RESGROUP:1C5F		      sub     bx, cx
RESGROUP:1C61		      jnb     short OkCpyStr
RESGROUP:1C63		      inc     dx
RESGROUP:1C64		      jmp     short EnvExit
RESGROUP:1C66 ;	---------------------------------------------------------------------------
RESGROUP:1C66
RESGROUP:1C66 OkCpyStr:				      ;	...
RESGROUP:1C66		      jmp     short NxtStr
RESGROUP:1C68 ;	---------------------------------------------------------------------------
RESGROUP:1C68
RESGROUP:1C68 EnvExit:				      ;	...
RESGROUP:1C68		      push    cs
RESGROUP:1C69		      pop     ds
RESGROUP:1C6A		      or      dx, dx
RESGROUP:1C6C		      jz      short EnvNoErr
RESGROUP:1C6E		      mov     dx, offset OUTENVMSG
RESGROUP:1C71		      call    RPrint
RESGROUP:1C74
RESGROUP:1C74 EnvNoErr:				      ;	...
RESGROUP:1C74		      mov     ax, [EnvSiz]
RESGROUP:1C77		      mov     cl, 4
RESGROUP:1C79		      shl     ax, cl
RESGROUP:1C7B		      cmp     ax, [UsedEnv]
RESGROUP:1C7F		      ja      short st_envsize
RESGROUP:1C81		      mov     ax, [UsedEnv]
RESGROUP:1C84		      add     ax, 0Fh
RESGROUP:1C87
RESGROUP:1C87 st_envsize:			      ;	...
RESGROUP:1C87		      shr     ax, cl
RESGROUP:1C89		      mov     [EnvSiz],	ax
RESGROUP:1C8C		      cmp     [Batch], 0
RESGROUP:1C91		      jnz     short DoDate
RESGROUP:1C93		      jmp     NoDttm
RESGROUP:1C96 ;	---------------------------------------------------------------------------
RESGROUP:1C96
RESGROUP:1C96 DoDate:				      ;	...
RESGROUP:1C96		      mov     ax, [Batch]
RESGROUP:1C99		      mov     [EchoFlag], 3
RESGROUP:1C9E		      mov     [Nest], 1
RESGROUP:1CA4		      mov     es, ax
RESGROUP:1CA6		      xor     di, di
RESGROUP:1CA8		      mov     al, 0
RESGROUP:1CAA		      stosb
RESGROUP:1CAB		      mov     al, 1
RESGROUP:1CAD		      stosb
RESGROUP:1CAE		      xor     ax, ax
RESGROUP:1CB0		      stosb
RESGROUP:1CB1		      stosw
RESGROUP:1CB2		      stosw
RESGROUP:1CB3		      stosb
RESGROUP:1CB4		      stosw
RESGROUP:1CB5		      stosw
RESGROUP:1CB6		      mov     ax, 0FFFFh
RESGROUP:1CB9		      mov     cx, 10
RESGROUP:1CBC		      rep stosw
RESGROUP:1CBE		      cmp     [AUTOBAT], 0
RESGROUP:1CC3		      jnz     short NoAutSet
RESGROUP:1CC5		      mov     ah, 19h
RESGROUP:1CC7		      int     21h	      ;	DOS - GET DEFAULT DISK NUMBER
RESGROUP:1CC9		      add     al, [ucasea]
RESGROUP:1CCD		      mov     [AUTOBAT], al
RESGROUP:1CD0
RESGROUP:1CD0 NoAutSet:				      ;	...
RESGROUP:1CD0		      mov     si, offset AUTOBAT
RESGROUP:1CD3		      mov     cx, 8
RESGROUP:1CD6		      rep movsw
RESGROUP:1CD8		      movsb
RESGROUP:1CD9		      mov     dx, offset AUTOBAT
RESGROUP:1CDC		      mov     ax, 3D00h
RESGROUP:1CDF		      int     21h	      ;	DOS - 2+ - OPEN	DISK FILE WITH HANDLE
RESGROUP:1CDF					      ;	DS:DX -> ASCIZ filename
RESGROUP:1CDF					      ;	AL = access mode
RESGROUP:1CDF					      ;	0 - read
RESGROUP:1CE1		      jb      short noabat
RESGROUP:1CE3		      mov     bx, ax
RESGROUP:1CE5		      mov     ah, 3Eh
RESGROUP:1CE7		      int     21h	      ;	DOS - 2+ - CLOSE A FILE	WITH HANDLE
RESGROUP:1CE7					      ;	BX = file handle
RESGROUP:1CE9		      jmp     short Drv0
RESGROUP:1CEB ;	---------------------------------------------------------------------------
RESGROUP:1CEB
RESGROUP:1CEB noabat:				      ;	...
RESGROUP:1CEB		      push    ax
RESGROUP:1CEC		      call    Setup_Seg
RESGROUP:1CEF		      mov     [triage_add_seg],	ax ; [triage_add+2]
RESGROUP:1CF2		      pop     ax
RESGROUP:1CF3		      call    [dword ptr triage_add] ; call far	[triage_add]
RESGROUP:1CF3					      ;	get extended error
RESGROUP:1CF7		      cmp     ax, 65
RESGROUP:1CFA		      jz      short AccDenErr
RESGROUP:1CFC		      jmp     short OpenErr
RESGROUP:1CFE ;	---------------------------------------------------------------------------
RESGROUP:1CFE
RESGROUP:1CFE AccDenErr:			      ;	...
RESGROUP:1CFE		      mov     dx, offset ACCDEN
RESGROUP:1D01		      call    RPrint
RESGROUP:1D04
RESGROUP:1D04 OpenErr:				      ;	...
RESGROUP:1D04		      mov     es, [Batch]
RESGROUP:1D08		      mov     ah, 49h
RESGROUP:1D0A		      int     21h	      ;	DOS - 2+ - FREE	MEMORY
RESGROUP:1D0A					      ;	ES = segment address of	area to	be freed
RESGROUP:1D0C		      mov     [Batch], 0      ;	byte
RESGROUP:1D12		      mov     [EchoFlag], 1   ;	byte
RESGROUP:1D17		      mov     [Nest], 0	      ;	word
RESGROUP:1D1D		      mov     ax, offset DATINIT
RESGROUP:1D20		      mov     [INITADD], ax
RESGROUP:1D23		      mov     ax, 2890h	      ;	TRANSTART
RESGROUP:1D26		      mov     cl, 4	      ;	TRANSTART>>4
RESGROUP:1D28		      shr     ax, cl
RESGROUP:1D2A		      mov     cx, cs
RESGROUP:1D2C		      add     ax, cx
RESGROUP:1D2E		      mov     [INITADD+2], ax
RESGROUP:1D31		      call    [dword ptr INITADD] ; call far [INITADD]
RESGROUP:1D35
RESGROUP:1D35 NoDttm:				      ;	...
RESGROUP:1D35		      cmp     [SingleCom], 0  ;	if IBMVER
RESGROUP:1D3A		      jnz     short Drv0
RESGROUP:1D3C		      mov     dx, offset COPYRIGHTMSG
RESGROUP:1D3F		      call    RPrint	      ;
RESGROUP:1D3F					      ;	endif
RESGROUP:1D42
RESGROUP:1D42 Drv0:				      ;	...
RESGROUP:1D42		      push    ds
RESGROUP:1D43		      push    cs
RESGROUP:1D44		      pop     ds
RESGROUP:1D45		      mov     ax, 0B707h
RESGROUP:1D48		      mov     bx, [Append_State]
RESGROUP:1D4C		      int     2Fh	      ;	- Multiplex - DOS 4.0 APPEND - SET APPEND FUNCTION STATE
RESGROUP:1D4C					      ;	BX = APPEND state bits
RESGROUP:1D4E		      pop     ds
RESGROUP:1D4F		      cmp     [FirstCom], 1
RESGROUP:1D54		      jz      short move_code
RESGROUP:1D56		      push    es
RESGROUP:1D57		      push    ds
RESGROUP:1D58		      push    ds
RESGROUP:1D59		      pop     es
RESGROUP:1D5A		      assume es:RESGROUP
RESGROUP:1D5A		      mov     di, offset Int2f_Entry
RESGROUP:1D5D		      lds     si, [es:ResJmpTable]
RESGROUP:1D62		      mov     cx, 11
RESGROUP:1D65		      shl     cx, 1
RESGROUP:1D67		      shl     cx, 1
RESGROUP:1D69		      cld
RESGROUP:1D6A		      rep movsb
RESGROUP:1D6C		      mov     al, [byte	ptr cox_location] ; "cox"
RESGROUP:1D6F		      mov     [byte ptr	es:cox_location], al ; "cox"
RESGROUP:1D73		      mov     ax, [word	ptr cox_location+1]
RESGROUP:1D76		      mov     [word ptr	es:cox_location+1], ax
RESGROUP:1D7A		      cmp     [word ptr	es:di-2], 0F000h
RESGROUP:1D80		      jb      short res_low
RESGROUP:1D82		      mov     [es:ComInHMA], 1
RESGROUP:1D88
RESGROUP:1D88 res_low:				      ;	...
RESGROUP:1D88		      pop     ds
RESGROUP:1D89		      pop     es
RESGROUP:1D8A		      assume es:nothing
RESGROUP:1D8A		      jmp     short finish_init
RESGROUP:1D8C ;	---------------------------------------------------------------------------
RESGROUP:1D8C
RESGROUP:1D8C move_code:			      ;	...
RESGROUP:1D8C		      call    Move_res_code
RESGROUP:1D8F
RESGROUP:1D8F finish_init:			      ;	...
RESGROUP:1D8F		      cmp     [PermCom], 1
RESGROUP:1D94		      jnz     short finish_init_@
RESGROUP:1D96		      cmp     [COMMAND_HIGH], 1	; COMMAND.COM will be moved to HMA/UMB flag (=1)
RESGROUP:1D9B		      jnz     short finish_init_@
RESGROUP:1D9D		      mov     bx, 40h	      ;	high memory first fit
RESGROUP:1DA0		      mov     ax, 5801h	      ;	set allocation strategy
RESGROUP:1DA3		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:1DA3					      ;	AL = function code: set	allocation strategy
RESGROUP:1DA5		      mov     bx, 1	      ;	add UMBs to DOS	memory chain
RESGROUP:1DA8		      mov     ax, 5803h	      ;	set UMB	link state
RESGROUP:1DAB		      int     21h	      ;	DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
RESGROUP:1DAB					      ;	AL = function code: (DOS 5beta)	set UMB	link state
RESGROUP:1DAD		      jb      short finish_init_@
RESGROUP:1DAF		      mov     bx, [ResSize]
RESGROUP:1DB3		      mov     ah, 48h
RESGROUP:1DB5		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:1DB5					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:1DB7		      jnb     short patch_segments_hma
RESGROUP:1DB9
RESGROUP:1DB9 finish_init_@:			      ;	...
RESGROUP:1DB9		      jmp     EndInit
RESGROUP:1DBC ;	---------------------------------------------------------------------------
RESGROUP:1DBC
RESGROUP:1DBC patch_segments_hma:		      ;	...
RESGROUP:1DBC		      mov     [ds:0Ch],	ax    ;	[PDB.EXIT+2]
RESGROUP:1DBF		      mov     [ds:10h],	ax    ;	[PDB.CTRL_C+2]
RESGROUP:1DC2		      mov     [ds:14h],	ax    ;	[PDB.FATAL_ABORT+2]
RESGROUP:1DC5		      mov     [ds:16h],	ax    ;	[PDB.PARENT_PID]
RESGROUP:1DC8		      mov     [ds:36h],	ax    ;	[PDB.JFN_Pointer+2]
RESGROUP:1DCB		      mov     [Parent],	ax
RESGROUP:1DCE		      mov     [word ptr	OldTerm+2], ax
RESGROUP:1DD1		      mov     [Com_Ptr+2], ax
RESGROUP:1DD4		      mov     [Com_Fcb1+2], ax
RESGROUP:1DD7		      mov     [Com_Fcb2+2], ax
RESGROUP:1DDA		      mov     [MySeg], ax
RESGROUP:1DDD		      mov     [MySeg1],	ax
RESGROUP:1DE0		      mov     [MySeg2],	ax
RESGROUP:1DE3		      mov     [MySeg3],	ax
RESGROUP:1DE6		      mov     [int2fh_segm], ax	; [Carousel_i2f_Hook+3]
RESGROUP:1DE9		      mov     di, (offset Int2f_Entry+2)
RESGROUP:1DEC		      cmp     [word ptr	di], 0FFFFh
RESGROUP:1DEF		      jz      short already_hma
RESGROUP:1DF1		      mov     cl, 11	      ;	NUM_RELOC_ENTRIES
RESGROUP:1DF3
RESGROUP:1DF3 patch_entry_seg:			      ;	...
RESGROUP:1DF3		      mov     [di], ax
RESGROUP:1DF5		      add     di, 4
RESGROUP:1DF8		      loop    patch_entry_seg
RESGROUP:1DFA
RESGROUP:1DFA already_hma:			      ;	...
RESGROUP:1DFA		      mov     es, ax
RESGROUP:1DFC		      assume es:nothing
RESGROUP:1DFC		      xor     si, si
RESGROUP:1DFE		      xor     di, di
RESGROUP:1E00		      mov     cl, 3	      ;	BX = resident part size	in paragraphs
RESGROUP:1E00					      ;	after shifting:	resident part size in words
RESGROUP:1E02		      shl     bx, cl	      ;	move resident part of COMMAND.COM to HMA (UMB)
RESGROUP:1E04		      mov     cx, bx	      ;	number of words
RESGROUP:1E06		      rep movsw
RESGROUP:1E08		      push    ds
RESGROUP:1E09		      mov     ds, cx	      ;	0
RESGROUP:1E0B		      mov     [ds:0BAh], ax   ;	INT 2Eh	segment
RESGROUP:1E0E		      inc     ax
RESGROUP:1E0F		      mov     [ds:0BEh], ax   ;	INT 2Fh	segment
RESGROUP:1E12		      pop     ds
RESGROUP:1E13		      mov     bx, es
RESGROUP:1E15		      mov     ah, 50h
RESGROUP:1E17		      int     21h	      ;	DOS - 2+ internal - SET	PSP SEGMENT
RESGROUP:1E17					      ;	BX = segment address of	new PSP
RESGROUP:1E19		      dec     bx
RESGROUP:1E1A		      mov     es, bx	      ;	memory arena header (segment)
RESGROUP:1E1C		      assume es:nothing
RESGROUP:1E1C		      inc     bx	      ;	PSP (program) address/segment
RESGROUP:1E1D		      mov     [es:1], bx      ;	[ARENA.owner]
RESGROUP:1E22		      mov     [word ptr	es:8], 4F43h ; 'CO' ; [es:arena_name]
RESGROUP:1E29		      mov     [word ptr	es:0Ah], 4D4Dh ; 'MM'
RESGROUP:1E30		      mov     [word ptr	es:0Ch], 4E41h ; 'AN'
RESGROUP:1E37		      mov     [word ptr	es:0Eh], 44h ; 'D' ; 'D'
RESGROUP:1E3E		      inc     [COMMAND_HIGH]  ;	= 2
RESGROUP:1E3E					      ;	Resident portion of COMMAND.COM	is
RESGROUP:1E3E					      ;	in HMA/UMB flag	(=2)
RESGROUP:1E42		      push    bx
RESGROUP:1E43		      mov     ax, offset EndInit
RESGROUP:1E46		      push    ax
RESGROUP:1E47		      retf
RESGROUP:1E48
RESGROUP:1E48 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1E48
RESGROUP:1E48
RESGROUP:1E48 proc	      GetStrLen	near	      ;	...
RESGROUP:1E48		      xor     cx, cx
RESGROUP:1E4A
RESGROUP:1E4A NxtChar:				      ;	...
RESGROUP:1E4A		      lodsb
RESGROUP:1E4B		      inc     cx
RESGROUP:1E4C		      or      al, al
RESGROUP:1E4E		      jnz     short NxtChar
RESGROUP:1E50		      retn
RESGROUP:1E50 endp	      GetStrLen
RESGROUP:1E50
RESGROUP:1E51
RESGROUP:1E51 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1E51
RESGROUP:1E51
RESGROUP:1E51 proc	      Setup_Seg	near	      ;	...
RESGROUP:1E51		      mov     ax, [TrnSeg]
RESGROUP:1E54		      cmp     [TrnMvFlg], 1
RESGROUP:1E59		      jz      short setup_end
RESGROUP:1E5B		      push    bx
RESGROUP:1E5C		      mov     bx, cs
RESGROUP:1E5E		      mov     ax, 2890h	      ;	TRANSTART
RESGROUP:1E61		      shr     ax, 1
RESGROUP:1E63		      shr     ax, 1
RESGROUP:1E65		      shr     ax, 1
RESGROUP:1E67		      shr     ax, 1	      ;	TRANSTART>>4
RESGROUP:1E69		      add     ax, bx
RESGROUP:1E6B		      pop     bx
RESGROUP:1E6C
RESGROUP:1E6C setup_end:			      ;	...
RESGROUP:1E6C		      retn
RESGROUP:1E6C endp	      Setup_Seg
RESGROUP:1E6C
RESGROUP:1E6D
RESGROUP:1E6D ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1E6D
RESGROUP:1E6D
RESGROUP:1E6D proc	      RPrintParse near	      ;	...
RESGROUP:1E6D		      push    dx
RESGROUP:1E6E		      xchg    bx, dx
RESGROUP:1E70		      dec     bx
RESGROUP:1E71		      shl     bx, 1
RESGROUP:1E73		      mov     bx, [PARSMSGPTRS+bx]
RESGROUP:1E77		      xchg    bx, dx
RESGROUP:1E79		      call    RPrint
RESGROUP:1E7C		      pop     dx
RESGROUP:1E7D		      retn
RESGROUP:1E7D endp	      RPrintParse
RESGROUP:1E7D
RESGROUP:1E7E
RESGROUP:1E7E ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1E7E
RESGROUP:1E7E
RESGROUP:1E7E proc	      IfindE near	      ;	...
RESGROUP:1E7E		      call    ifind
RESGROUP:1E81		      jb      short ifind2
RESGROUP:1E83		      jmp     short Iscasb1
RESGROUP:1E83 endp	      IfindE
RESGROUP:1E83
RESGROUP:1E85
RESGROUP:1E85 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1E85
RESGROUP:1E85
RESGROUP:1E85 proc	      ifind near	      ;	...
RESGROUP:1E85		      cld
RESGROUP:1E86		      call    Icount0
RESGROUP:1E89		      mov     es, [EnvirSeg]
RESGROUP:1E8D		      assume es:nothing
RESGROUP:1E8D		      xor     di, di
RESGROUP:1E8F
RESGROUP:1E8F ifind1:				      ;	...
RESGROUP:1E8F		      push    cx
RESGROUP:1E90		      push    si
RESGROUP:1E91		      push    di
RESGROUP:1E92
RESGROUP:1E92 ifind11:				      ;	...
RESGROUP:1E92		      lodsb
RESGROUP:1E93		      call    ITestKanj	      ;	ifdef DBCS
RESGROUP:1E96		      jz      short _NotKanj4
RESGROUP:1E98		      dec     si
RESGROUP:1E99		      lodsw
RESGROUP:1E9A		      inc     di
RESGROUP:1E9B		      inc     di
RESGROUP:1E9C		      cmp     ax, [es:di-2]
RESGROUP:1EA0		      jnz     short ifind12
RESGROUP:1EA2		      dec     cx
RESGROUP:1EA3		      loop    ifind11
RESGROUP:1EA5		      jmp     short ifind12   ;	endif
RESGROUP:1EA7 ;	---------------------------------------------------------------------------
RESGROUP:1EA7
RESGROUP:1EA7 _NotKanj4:			      ;	...
RESGROUP:1EA7		      call    iupconv
RESGROUP:1EAA		      inc     di
RESGROUP:1EAB		      cmp     al, [es:di-1]
RESGROUP:1EAF		      jnz     short ifind12
RESGROUP:1EB1		      loop    ifind11
RESGROUP:1EB3
RESGROUP:1EB3 ifind12:				      ;	...
RESGROUP:1EB3		      pop     di
RESGROUP:1EB4		      pop     si
RESGROUP:1EB5		      pop     cx
RESGROUP:1EB6		      jz      short ifind2
RESGROUP:1EB8		      push    cx
RESGROUP:1EB9		      call    Iscasb2
RESGROUP:1EBC		      pop     cx
RESGROUP:1EBD		      cmp     [byte ptr	es:di],	0
RESGROUP:1EC1		      jnz     short ifind1
RESGROUP:1EC3		      stc
RESGROUP:1EC4
RESGROUP:1EC4 ifind2:				      ;	...
RESGROUP:1EC4		      retn
RESGROUP:1EC4 endp	      ifind
RESGROUP:1EC4
RESGROUP:1EC5
RESGROUP:1EC5 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1EC5
RESGROUP:1EC5
RESGROUP:1EC5 proc	      Icount0 near	      ;	...
RESGROUP:1EC5		      push    ds
RESGROUP:1EC6		      pop     es
RESGROUP:1EC7		      assume es:RESGROUP
RESGROUP:1EC7		      mov     di, si
RESGROUP:1EC9		      push    di
RESGROUP:1ECA		      call    Iscasb1
RESGROUP:1ECD		      jmp     short Icountx
RESGROUP:1ECF ;	---------------------------------------------------------------------------
RESGROUP:1ECF		      push    di
RESGROUP:1ED0		      call    Iscasb2
RESGROUP:1ED3
RESGROUP:1ED3 Icountx:				      ;	...
RESGROUP:1ED3		      pop     cx
RESGROUP:1ED4		      sub     di, cx
RESGROUP:1ED6		      xchg    di, cx
RESGROUP:1ED8		      retn
RESGROUP:1ED8 endp	      Icount0
RESGROUP:1ED8
RESGROUP:1ED9
RESGROUP:1ED9 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1ED9
RESGROUP:1ED9
RESGROUP:1ED9 proc	      Iscasb1 near	      ;	...
RESGROUP:1ED9		      mov     al, [equalsign]
RESGROUP:1EDC		      jmp     short Iscasbx
RESGROUP:1EDC endp	      Iscasb1
RESGROUP:1EDC
RESGROUP:1EDE
RESGROUP:1EDE ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1EDE
RESGROUP:1EDE
RESGROUP:1EDE proc	      Iscasb2 near	      ;	...
RESGROUP:1EDE		      xor     al, al
RESGROUP:1EE0
RESGROUP:1EE0 Iscasbx:				      ;	...
RESGROUP:1EE0		      mov     cx, 256
RESGROUP:1EE3		      repne scasb
RESGROUP:1EE5		      retn
RESGROUP:1EE5 endp	      Iscasb2
RESGROUP:1EE5
RESGROUP:1EE6
RESGROUP:1EE6 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1EE6
RESGROUP:1EE6
RESGROUP:1EE6 proc	      iupconv near	      ;	...
RESGROUP:1EE6		      cmp     al, 80h
RESGROUP:1EE8		      jb      short other_fucase
RESGROUP:1EEA		      sub     al, 80h
RESGROUP:1EEC		      push    ds
RESGROUP:1EED		      push    bx
RESGROUP:1EEE		      lds     bx, [dword ptr FUCase_Addr+1] ; lds bx,[FUCase_Addr+1]
RESGROUP:1EF2		      add     bx, 2
RESGROUP:1EF5		      xlat
RESGROUP:1EF6		      pop     bx
RESGROUP:1EF7		      pop     ds
RESGROUP:1EF8		      jmp     short iupconv_end
RESGROUP:1EFA ;	---------------------------------------------------------------------------
RESGROUP:1EFA
RESGROUP:1EFA other_fucase:			      ;	...
RESGROUP:1EFA		      cmp     al, [lcasea]
RESGROUP:1EFE		      jb      short iupconv_end
RESGROUP:1F00		      cmp     al, [lcasez]
RESGROUP:1F04		      ja      short iupconv_end
RESGROUP:1F06		      sub     al, 20h
RESGROUP:1F08
RESGROUP:1F08 iupconv_end:			      ;	...
RESGROUP:1F08		      retn
RESGROUP:1F08 endp	      iupconv
RESGROUP:1F08
RESGROUP:1F09 ;	---------------------------------------------------------------------------
RESGROUP:1F09
RESGROUP:1F09 init_contc_specialcase:		      ;	...
RESGROUP:1F09		      add     sp, 6
RESGROUP:1F0C		      push    si
RESGROUP:1F0D		      mov     si, dx
RESGROUP:1F0F		      mov     [word ptr	si+1], 0D00h
RESGROUP:1F14		      pop     si
RESGROUP:1F15		      iret
RESGROUP:1F16
RESGROUP:1F16 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1F16
RESGROUP:1F16
RESGROUP:1F16 proc	      setup_for_messages near ;	...
RESGROUP:1F16		      push    bx
RESGROUP:1F17		      push    ds
RESGROUP:1F18		      push    es
RESGROUP:1F19		      push    ax
RESGROUP:1F1A		      push    dx
RESGROUP:1F1B		      push    di
RESGROUP:1F1C		      mov     ax, cs
RESGROUP:1F1E		      mov     ds, ax
RESGROUP:1F20		      mov     es, ax
RESGROUP:1F22		      cmp     [PermCom], 0
RESGROUP:1F27		      jz      short no_permcom
RESGROUP:1F29		      push    es
RESGROUP:1F2A		      mov     ax, 352Fh	      ;	(GET_INTERRUPT_VECTOR shl 8) or	2Fh
RESGROUP:1F2D		      int     21h	      ;	DOS - 2+ - GET INTERRUPT VECTOR
RESGROUP:1F2D					      ;	AL = interrupt number
RESGROUP:1F2D					      ;	Return:	ES:BX =	value of interrupt vector
RESGROUP:1F2F		      mov     [Int2fHandler], bx
RESGROUP:1F33		      mov     [Int2fHandler+2],	es
RESGROUP:1F37		      pop     es
RESGROUP:1F38		      assume es:nothing
RESGROUP:1F38		      cmp     [FirstCom], 0
RESGROUP:1F3D		      jz      short no_msg_hook
RESGROUP:1F3F		      push    ds
RESGROUP:1F40		      mov     dx, offset Carousel_i2f_Hook
RESGROUP:1F43		      sub     dx, 10h
RESGROUP:1F46		      mov     ax, ds
RESGROUP:1F48		      inc     ax
RESGROUP:1F49		      mov     ds, ax
RESGROUP:1F4B		      assume ds:nothing
RESGROUP:1F4B		      mov     ax, 252Fh	      ;	(SET_INTERRUPT_VECTOR shl 8) or	2Fh
RESGROUP:1F4E		      int     21h	      ;	DOS - SET INTERRUPT VECTOR
RESGROUP:1F4E					      ;	AL = interrupt number
RESGROUP:1F4E					      ;	DS:DX =	new vector to be used for specified interrupt
RESGROUP:1F50		      pop     ds
RESGROUP:1F51		      assume ds:RESGROUP
RESGROUP:1F51		      mov     [int2fh_segm], ds	; [Carousel_i2f_Hook+3]
RESGROUP:1F55
RESGROUP:1F55 no_msg_hook:			      ;	...
RESGROUP:1F55		      cmp     [ext_msg], 1    ;	SET_EXTENDED_MSG
RESGROUP:1F5A		      jnz     short permcom_end
RESGROUP:1F5C		      mov     di, offset PATRICIDE ; ExtMsgEnd (at 0DD8h)
RESGROUP:1F5F		      mov     [ResMsgEnd], di
RESGROUP:1F63		      jmp     short permcom_end
RESGROUP:1F65 ;	---------------------------------------------------------------------------
RESGROUP:1F65
RESGROUP:1F65 no_permcom:			      ;	...
RESGROUP:1F65		      cmp     [ext_msg], 1    ;	SET_EXTENDED_MSG
RESGROUP:1F6A		      jnz     short permcom_end
RESGROUP:1F6C		      mov     dx, 2	      ;	LessArgs_Ptr
RESGROUP:1F6F		      call    RPrintParse
RESGROUP:1F72
RESGROUP:1F72 permcom_end:			      ;	...
RESGROUP:1F72		      pop     di
RESGROUP:1F73		      pop     dx
RESGROUP:1F74		      pop     ax
RESGROUP:1F75		      pop     es
RESGROUP:1F76		      pop     ds
RESGROUP:1F77		      pop     bx
RESGROUP:1F78		      retn
RESGROUP:1F78 endp	      setup_for_messages
RESGROUP:1F78
RESGROUP:1F79
RESGROUP:1F79 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1F79
RESGROUP:1F79
RESGROUP:1F79 proc	      CheckHelp	near	      ;	...
RESGROUP:1F79		      mov     si, 81h
RESGROUP:1F7C		      mov     di, offset PARSE_COMMAND
RESGROUP:1F7F		      xor     cx, cx
RESGROUP:1F81		      xor     dx, dx
RESGROUP:1F83
RESGROUP:1F83 chParse:				      ;	...
RESGROUP:1F83		      call    [dword ptr Init_Parse] ; call far	[Init_Parse] ; call system parser
RESGROUP:1F87		      cmp     ax, 0FFFFh
RESGROUP:1F8A		      jz      short chRet
RESGROUP:1F8C		      cmp     ax, 0
RESGROUP:1F8F		      jz      short chWhich
RESGROUP:1F91		      jmp     short chParse
RESGROUP:1F93 ;	---------------------------------------------------------------------------
RESGROUP:1F93
RESGROUP:1F93 chWhich:				      ;	...
RESGROUP:1F93		      cmp     [COMND1_SYN], offset COMMAND_?_SYN ; "/?"
RESGROUP:1F99		      jz      short chHelp
RESGROUP:1F9B		      cmp     [COMND1_SYN], offset COMMAND_C_SYN ; "/C"
RESGROUP:1FA1		      jz      short chRet
RESGROUP:1FA3		      cmp     [COMND1_SYN], offset COMMAND_K_SYN ; "/K"
RESGROUP:1FA9		      jz      short chRet
RESGROUP:1FAB		      jmp     short chParse
RESGROUP:1FAD ;	---------------------------------------------------------------------------
RESGROUP:1FAD
RESGROUP:1FAD chHelp:				      ;	...
RESGROUP:1FAD		      mov     si, offset HelpMsgs
RESGROUP:1FB0
RESGROUP:1FB0 chHelpNext:			      ;	...
RESGROUP:1FB0		      lodsw
RESGROUP:1FB1		      or      ax, ax
RESGROUP:1FB3		      jz      short chHelpDone
RESGROUP:1FB5		      mov     dx, ax
RESGROUP:1FB7		      call    RPrint
RESGROUP:1FBA		      jmp     short chHelpNext
RESGROUP:1FBC ;	---------------------------------------------------------------------------
RESGROUP:1FBC
RESGROUP:1FBC chHelpDone:			      ;	...
RESGROUP:1FBC		      int     20h	      ;	DOS - PROGRAM TERMINATION
RESGROUP:1FBC					      ;	returns	to DOS--identical to INT 21/AH=00h
RESGROUP:1FBE ;	---------------------------------------------------------------------------
RESGROUP:1FBE
RESGROUP:1FBE chRet:				      ;	...
RESGROUP:1FBE		      retn
RESGROUP:1FBE endp	      CheckHelp
RESGROUP:1FBE
RESGROUP:1FBF
RESGROUP:1FBF ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:1FBF
RESGROUP:1FBF
RESGROUP:1FBF proc	      Setup_res_end near      ;	...
RESGROUP:1FBF		      push    ds
RESGROUP:1FC0		      mov     ax, cs
RESGROUP:1FC2		      mov     ds, ax
RESGROUP:1FC4		      mov     cx, [ResMsgEnd]
RESGROUP:1FC8		      cmp     cx, offset PATRICIDE ; ExtMsgEnd
RESGROUP:1FCC		      jnz     short calc_res
RESGROUP:1FCE		      add     cx, 0Fh
RESGROUP:1FD1		      and     cx, 0FFF0h
RESGROUP:1FD4
RESGROUP:1FD4 calc_res:				      ;	...
RESGROUP:1FD4		      xor     ax, ax
RESGROUP:1FD6		      cmp     [FirstCom], 1
RESGROUP:1FDB		      jnz     short not_first
RESGROUP:1FDD		      push    bx
RESGROUP:1FDE		      push    cx
RESGROUP:1FDF		      mov     ax, 3306h	      ;	(Set_CTRL_C_Trapping shl 8)
RESGROUP:1FE2		      int     21h	      ;	DOS - 5+ Get TRUE Version Number
RESGROUP:1FE2					      ;	(BL major, BH minor, DL	revision, DH flags)
RESGROUP:1FE4		      pop     cx
RESGROUP:1FE5		      cmp     bl, 5
RESGROUP:1FE8		      jb      short oldver
RESGROUP:1FEA		      xor     ax, ax
RESGROUP:1FEC		      and     dh, 10h
RESGROUP:1FEF		      pop     bx
RESGROUP:1FF0		      jnz     short not_first
RESGROUP:1FF2		      mov     ax, 894h	      ;	EndCode-RCODE_START
RESGROUP:1FF5
RESGROUP:1FF5 not_first:			      ;	...
RESGROUP:1FF5		      add     cx, ax
RESGROUP:1FF7		      add     cx, 0Fh
RESGROUP:1FFA		      shr     cx, 1
RESGROUP:1FFC		      shr     cx, 1
RESGROUP:1FFE		      shr     cx, 1
RESGROUP:2000		      shr     cx, 1
RESGROUP:2002		      mov     [ResSize], cx
RESGROUP:2006		      pop     ds
RESGROUP:2007		      retn
RESGROUP:2008 ;	---------------------------------------------------------------------------
RESGROUP:2008
RESGROUP:2008 oldver:				      ;	...
RESGROUP:2008		      pop     bx
RESGROUP:2009		      mov     ax, 894h
RESGROUP:200C		      jmp     short not_first
RESGROUP:200C endp	      Setup_res_end
RESGROUP:200C
RESGROUP:200E
RESGROUP:200E ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:200E
RESGROUP:200E
RESGROUP:200E proc	      Move_res_code near      ;	...
RESGROUP:200E		      push    ds
RESGROUP:200F		      push    es
RESGROUP:2010		      mov     ax, cs
RESGROUP:2012		      mov     ds, ax
RESGROUP:2014		      mov     ax, 3306h
RESGROUP:2017		      int     21h	      ;	DOS - 5+ Get TRUE Version Number (BL major, BH minor, DL revision, DH flags)
RESGROUP:2019		      and     dh, 10h
RESGROUP:201C		      jnz     short move_high
RESGROUP:201E
RESGROUP:201E load_low:				      ;	...
RESGROUP:201E		      push    ds
RESGROUP:201F		      pop     es
RESGROUP:2020		      assume es:RESGROUP
RESGROUP:2020		      mov     di, [ResMsgEnd]
RESGROUP:2024		      mov     bx, offset PATRICIDE ; ExtMsgEnd ; (this bx is not used after here!)
RESGROUP:2024					      ;	Erdogan	Tan - 18/07/2024
RESGROUP:2027		      jmp     short setup_move
RESGROUP:2029 ;	---------------------------------------------------------------------------
RESGROUP:2029
RESGROUP:2029 move_high:			      ;	...
RESGROUP:2029		      mov     bx, 894h	      ;	EndCode-RCODE_START
RESGROUP:202C		      mov     di, 0FFFFh
RESGROUP:202F		      mov     ax, 4A02h	      ;	GET_HMA_ADDR
RESGROUP:2032		      int     2Fh
RESGROUP:2034		      cmp     di, 0FFFFh
RESGROUP:2037		      mov     [ComInHMA], 1   ;	byte
RESGROUP:203C		      jnz     short setup_move
RESGROUP:203E		      mov     [ComInHMA], 0
RESGROUP:2043		      mov     cx, [ResMsgEnd]
RESGROUP:2047		      mov     ax, 894h	      ;	EndCode-RCODE_START
RESGROUP:204A		      add     cx, ax
RESGROUP:204C		      add     cx, 0Fh
RESGROUP:204F		      shr     cx, 1
RESGROUP:2051		      shr     cx, 1
RESGROUP:2053		      shr     cx, 1
RESGROUP:2055		      shr     cx, 1
RESGROUP:2057		      mov     [ResSize], cx
RESGROUP:205B		      jmp     short load_low
RESGROUP:205D ;	---------------------------------------------------------------------------
RESGROUP:205D
RESGROUP:205D setup_move:			      ;	...
RESGROUP:205D		      mov     si, offset Exec_Err ; RCODE_START
RESGROUP:2060		      mov     cx, 894h	      ;	EndCode-RCODE_START
RESGROUP:2063		      cld
RESGROUP:2064		      push    di
RESGROUP:2065		      rep movsb
RESGROUP:2067		      pop     di
RESGROUP:2068		      call    patch_stub
RESGROUP:206B		      pop     es
RESGROUP:206C		      assume es:nothing
RESGROUP:206C		      pop     ds
RESGROUP:206D		      retn
RESGROUP:206D endp	      Move_res_code
RESGROUP:206D
RESGROUP:206E
RESGROUP:206E ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:206E
RESGROUP:206E
RESGROUP:206E proc	      alloc_env	near	      ;	...
RESGROUP:206E
RESGROUP:206E ;	FUNCTION CHUNK AT RESGROUP:0F12	SIZE 00000003 BYTES
RESGROUP:206E
RESGROUP:206E		      push    ds
RESGROUP:206F		      push    es
RESGROUP:2070		      push    si
RESGROUP:2071		      push    di
RESGROUP:2072		      push    ss
RESGROUP:2073		      pop     ds
RESGROUP:2074		      mov     ax, [EnvirSeg]
RESGROUP:2077		      cmp     [AllocedEnv], 0
RESGROUP:207C		      jz      short alloc_cont
RESGROUP:207E		      jmp     alloc_done
RESGROUP:2081 ;	---------------------------------------------------------------------------
RESGROUP:2081
RESGROUP:2081 alloc_cont:			      ;	...
RESGROUP:2081		      sub     di, di
RESGROUP:2083		      mov     bx, 166	      ;	ENVIRONSIZ
RESGROUP:2086		      cmp     [FirstCom], 0
RESGROUP:208B		      jz      short alloc_seg
RESGROUP:208D		      or      ax, ax
RESGROUP:208F		      jz      short alloc_new
RESGROUP:2091		      mov     es, ax
RESGROUP:2093		      mov     al, 0
RESGROUP:2095		      sub     di, di
RESGROUP:2097
RESGROUP:2097 comp_path:			      ;	...
RESGROUP:2097		      scasb
RESGROUP:2098		      jz      short find_comspec
RESGROUP:209A		      dec     di
RESGROUP:209B		      mov     cx, 5	      ;	PathStrLen
RESGROUP:209E		      mov     si, offset PathString ; "PATH="
RESGROUP:20A1		      repe cmpsb
RESGROUP:20A3		      jz      short got_path
RESGROUP:20A5		      mov     cx, 256
RESGROUP:20A8		      repne scasb
RESGROUP:20AA		      jmp     short comp_path
RESGROUP:20AC ;	---------------------------------------------------------------------------
RESGROUP:20AC
RESGROUP:20AC got_path:				      ;	...
RESGROUP:20AC		      mov     [byte ptr	PathString], 0 ; "PATH="
RESGROUP:20B1
RESGROUP:20B1 find_comspec:			      ;	...
RESGROUP:20B1		      sub     di, di
RESGROUP:20B3
RESGROUP:20B3 comp_comspec:			      ;	...
RESGROUP:20B3		      scasb
RESGROUP:20B4		      jz      short got_envend
RESGROUP:20B6		      dec     di
RESGROUP:20B7		      mov     cx, 8	      ;	ComspStrLen
RESGROUP:20BA		      mov     si, offset ComspString ; "COMSPEC=\\COMMAND.COM"
RESGROUP:20BD		      repe cmpsb
RESGROUP:20BF		      jz      short got_comspec
RESGROUP:20C1		      mov     cx, 256
RESGROUP:20C4		      repne scasb
RESGROUP:20C6		      jmp     short comp_comspec
RESGROUP:20C8 ;	---------------------------------------------------------------------------
RESGROUP:20C8
RESGROUP:20C8 got_comspec:			      ;	...
RESGROUP:20C8		      mov     [ComspOffset], di
RESGROUP:20CC		      sub     di, di
RESGROUP:20CE		      mov     cx, 32768	      ;	ENVBIG
RESGROUP:20D1
RESGROUP:20D1 comp_envend:			      ;	...
RESGROUP:20D1		      dec     cx
RESGROUP:20D2		      scasb
RESGROUP:20D3		      jz      short got_envend
RESGROUP:20D5		      repne scasb
RESGROUP:20D7		      jmp     short comp_envend
RESGROUP:20D9 ;	---------------------------------------------------------------------------
RESGROUP:20D9
RESGROUP:20D9 got_envend:			      ;	...
RESGROUP:20D9		      dec     di
RESGROUP:20DA		      lea     bx, [di+166]    ;	[DI+ENVIRONSIZ]
RESGROUP:20DE		      push    ds
RESGROUP:20DF		      mov     ds, [word	ptr ds:16h] ; [PDB.PARENT_PID]
RESGROUP:20E3		      cmp     [word ptr	ds:16h], 0 ; [PDB.PARENT_PID]
RESGROUP:20E8		      pop     ds
RESGROUP:20E9		      jnz     short alloc_seg
RESGROUP:20EB
RESGROUP:20EB alloc_new:			      ;	...
RESGROUP:20EB		      inc     [AllocedEnv]    ;	byte
RESGROUP:20EF
RESGROUP:20EF alloc_seg:			      ;	...
RESGROUP:20EF		      mov     cx, bx
RESGROUP:20F1		      add     bx, 0Fh
RESGROUP:20F4		      shr     bx, 1
RESGROUP:20F6		      shr     bx, 1
RESGROUP:20F8		      shr     bx, 1
RESGROUP:20FA		      shr     bx, 1
RESGROUP:20FC		      mov     ah, 48h
RESGROUP:20FE		      int     21h	      ;	DOS - 2+ - ALLOCATE MEMORY
RESGROUP:20FE					      ;	BX = number of 16-byte paragraphs desired
RESGROUP:2100		      jnb     short init_ok
RESGROUP:2102		      jmp     init_nomem
RESGROUP:2105 ;	---------------------------------------------------------------------------
RESGROUP:2105
RESGROUP:2105 init_ok:				      ;	...
RESGROUP:2105		      mov     es, ax
RESGROUP:2107		      assume es:nothing
RESGROUP:2107		      or      di, di
RESGROUP:2109		      jz      short copy_path
RESGROUP:210B		      push    cx
RESGROUP:210C		      push    ds
RESGROUP:210D		      mov     ds, [EnvirSeg]
RESGROUP:2111		      sub     si, si
RESGROUP:2113		      mov     cx, di
RESGROUP:2115		      sub     di, di
RESGROUP:2117		      rep movsb
RESGROUP:2119		      pop     ds
RESGROUP:211A		      pop     cx
RESGROUP:211B		      sub     cx, di
RESGROUP:211D
RESGROUP:211D copy_path:			      ;	...
RESGROUP:211D		      push    di
RESGROUP:211E		      sub     ax, ax
RESGROUP:2120		      rep stosb
RESGROUP:2122		      pop     di
RESGROUP:2123		      mov     si, offset PathString ; "PATH="
RESGROUP:2126		      cmp     [si], al
RESGROUP:2128		      jz      short init_comspec
RESGROUP:212A		      mov     cx, 6	      ;	db "PATH=",0
RESGROUP:212D		      rep movsb
RESGROUP:212F		      cmp     [AllocedEnv], al
RESGROUP:2133		      jz      short init_comspec
RESGROUP:2135		      mov     ah, 19h	      ;	GET_DEFAULT_DRIVE
RESGROUP:2137		      int     21h	      ;	DOS - GET DEFAULT DISK NUMBER
RESGROUP:2139		      add     al, 41h ;	'A'
RESGROUP:213B		      mov     [byte ptr	DefPathString],	al ; "C:\\DOS"
RESGROUP:213E		      mov     [byte ptr	DefPath2String], al ; "C:\\MSDOS"
RESGROUP:2141		      mov     dl, 0
RESGROUP:2143		      push    ds
RESGROUP:2144		      push    es
RESGROUP:2145		      pop     ds
RESGROUP:2146		      assume ds:nothing
RESGROUP:2146		      mov     [byte ptr	di], '\'
RESGROUP:2149		      lea     si, [di+1]
RESGROUP:214C		      mov     ah, 47h	      ;	Current_Dir
RESGROUP:214E		      int     21h	      ;	DOS - 2+ - GET CURRENT DIRECTORY
RESGROUP:214E					      ;	DL = drive (0=default, 1=A, etc.)
RESGROUP:214E					      ;	DS:SI points to	64-byte	buffer area
RESGROUP:2150		      pop     ds
RESGROUP:2151		      assume ds:RESGROUP
RESGROUP:2151		      mov     cx, 7	      ;	DefPathStrLen+1
RESGROUP:2154		      mov     dx, offset DefPathString ; "C:\\DOS"
RESGROUP:2157		      mov     si, dx
RESGROUP:2159		      mov     ah, 3Bh
RESGROUP:215B		      int     21h	      ;	DOS - 2+ - CHANGE THE CURRENT DIRECTORY	(CHDIR)
RESGROUP:215B					      ;	DS:DX -> ASCIZ directory name (may include drive)
RESGROUP:215D		      jnb     short init_setpath
RESGROUP:215F		      mov     cx, 9	      ;	DefPath2StrLen+1
RESGROUP:2162		      mov     dx, offset DefPath2String	; "C:\\MSDOS"
RESGROUP:2165		      mov     si, dx
RESGROUP:2167		      mov     ah, 3Bh
RESGROUP:2169		      int     21h	      ;	DOS - 2+ - CHANGE THE CURRENT DIRECTORY	(CHDIR)
RESGROUP:2169					      ;	DS:DX -> ASCIZ directory name (may include drive)
RESGROUP:216B		      jb      short init_comspec
RESGROUP:216D
RESGROUP:216D init_setpath:			      ;	...
RESGROUP:216D		      mov     dx, di
RESGROUP:216F		      push    ds
RESGROUP:2170		      push    es
RESGROUP:2171		      pop     ds
RESGROUP:2172		      assume ds:nothing
RESGROUP:2172		      mov     ah, 3Bh	      ;	CHDir
RESGROUP:2174		      int     21h	      ;	DOS - 2+ - CHANGE THE CURRENT DIRECTORY	(CHDIR)
RESGROUP:2174					      ;	DS:DX -> ASCIZ directory name (may include drive)
RESGROUP:2176		      pop     ds
RESGROUP:2177		      assume ds:RESGROUP
RESGROUP:2177		      dec     di
RESGROUP:2178		      rep movsb
RESGROUP:217A
RESGROUP:217A init_comspec:			      ;	...
RESGROUP:217A		      push    di
RESGROUP:217B		      sub     ax, ax
RESGROUP:217D		      mov     cx, 64
RESGROUP:2180		      rep stosb
RESGROUP:2182		      pop     di
RESGROUP:2183		      cmp     [ComspOffset], ax
RESGROUP:2187		      jnz     short init_done
RESGROUP:2189		      lea     ax, [di+8]      ;	[di+ComspStrLen]
RESGROUP:218D		      mov     [ComspOffset], ax
RESGROUP:2190		      mov     si, offset ComspString ; "COMSPEC=\\COMMAND.COM"
RESGROUP:2193		      mov     cx, 21	      ;	ComspStrLen2+1 ; db "COMSPEC=\COMMAND.COM",0
RESGROUP:2196		      rep movsb
RESGROUP:2198
RESGROUP:2198 init_done:			      ;	...
RESGROUP:2198		      mov     ax, es
RESGROUP:219A		      mov     [EnvirSeg], ax
RESGROUP:219D		      inc     [AllocedEnv]    ;	byte
RESGROUP:21A1
RESGROUP:21A1 alloc_done:			      ;	...
RESGROUP:21A1		      pop     di
RESGROUP:21A2		      pop     si
RESGROUP:21A3		      pop     es
RESGROUP:21A4		      assume es:nothing
RESGROUP:21A4		      pop     ds
RESGROUP:21A5		      retn
RESGROUP:21A6 ;	---------------------------------------------------------------------------
RESGROUP:21A6
RESGROUP:21A6 init_nomem:			      ;	...
RESGROUP:21A6		      call    $+3	      ;	call Alloc_error
RESGROUP:21A9
RESGROUP:21A9 Alloc_error:			      ;	...
RESGROUP:21A9		      jmp     BadMemErr
RESGROUP:21A9 endp	      alloc_env
RESGROUP:21A9
RESGROUP:21AC
RESGROUP:21AC ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:21AC
RESGROUP:21AC
RESGROUP:21AC proc	      patch_stub near	      ;	...
RESGROUP:21AC		      push    es
RESGROUP:21AD		      mov     bx, es
RESGROUP:21AF		      mov     dx, di
RESGROUP:21B1		      mov     di, offset Int2f_Entry
RESGROUP:21B4		      mov     si, offset Reloc_Table
RESGROUP:21B7		      push    ds
RESGROUP:21B8		      pop     es
RESGROUP:21B9		      assume es:RESGROUP
RESGROUP:21B9		      mov     cx, 11
RESGROUP:21BC
RESGROUP:21BC patchlp:				      ;	...
RESGROUP:21BC		      lodsw
RESGROUP:21BD		      add     ax, dx
RESGROUP:21BF		      stosw
RESGROUP:21C0		      mov     ax, bx
RESGROUP:21C2		      stosw
RESGROUP:21C3		      loop    patchlp
RESGROUP:21C5		      pop     es
RESGROUP:21C6		      assume es:nothing
RESGROUP:21C6		      retn
RESGROUP:21C6 endp	      patch_stub
RESGROUP:21C6
RESGROUP:21C7
RESGROUP:21C7 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:21C7
RESGROUP:21C7
RESGROUP:21C7 proc	      patch_segs near	      ;	...
RESGROUP:21C7		      mov     di, offset Int2f_Entry
RESGROUP:21CA		      mov     cx, 4	      ;	we have	to patch 4 handlers
RESGROUP:21CD		      add     di, 2
RESGROUP:21D0		      mov     ax, es
RESGROUP:21D2
RESGROUP:21D2 pseglp:				      ;	...
RESGROUP:21D2		      stosw
RESGROUP:21D3		      add     di, 2
RESGROUP:21D6		      loop    pseglp
RESGROUP:21D8		      retn
RESGROUP:21D8 endp	      patch_segs
RESGROUP:21D8
RESGROUP:21D9
RESGROUP:21D9 ;	===============	S U B R	O U T I	N E =======================================
RESGROUP:21D9
RESGROUP:21D9
RESGROUP:21D9 proc	      get_XMMAddr near	      ;	...
RESGROUP:21D9		      push    es
RESGROUP:21DA		      mov     ax, 4300h	      ;	XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK
RESGROUP:21DD		      int     2Fh	      ;	- Multiplex - XMS - INSTALLATION CHECK
RESGROUP:21DD					      ;	Return:	AL = 80h XMS driver installed
RESGROUP:21DD					      ;	AL <> 80h no driver
RESGROUP:21DF		      cmp     al, 80h	      ;	Q: installed
RESGROUP:21E1		      jnz     short cXMMexit  ;	N: set error, quit
RESGROUP:21E3		      mov     ax, 4310h	      ;	XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR
RESGROUP:21E6		      int     2Fh	      ;	- Multiplex - XMS - GET	DRIVER ADDRESS
RESGROUP:21E6					      ;	Return:	ES:BX -> driver	entry point
RESGROUP:21E8		      mov     [word ptr	XMMCallAddr], bx
RESGROUP:21EC		      mov     [word ptr	XMMCallAddr+2],	es
RESGROUP:21F0
RESGROUP:21F0 cXMMexit:				      ;	...
RESGROUP:21F0		      pop     es
RESGROUP:21F1		      retn
RESGROUP:21F1 endp	      get_XMMAddr
RESGROUP:21F1
RESGROUP:21F1 ;	---------------------------------------------------------------------------
RESGROUP:21F2		      db 14 dup(0)	      ;	align 16
RESGROUP:2200 ICONDEV	      db '/DEV'
RESGROUP:2204		      db '/CON',0,0,0,0,0,0,0
RESGROUP:220F COMSPECT	      db '\COMMAND.COM',0     ; ...
RESGROUP:221C		      db 0
RESGROUP:221D AUTOBAT	      db 0		      ;	...
RESGROUP:221E		      db ':'
RESGROUP:221F		      db '\AUTOEXEC.BAT',0
RESGROUP:222D		      db 0Dh
RESGROUP:222E PRDATTM	      db 0FFh		      ;	...
RESGROUP:222F INITADD	      dw 2 dup(0)	      ;	0 ; ...
RESGROUP:2233 print_add	      dw offset	Printf_Init
RESGROUP:2235		      dw 0
RESGROUP:2237 triage_add      dw offset	Triage_Init   ;	...
RESGROUP:2239 triage_add_seg  dw 0		      ;	...
RESGROUP:223B AllocedEnv      db 0		      ;	...
RESGROUP:223C PathString      db 'PATH=',0            ; ...
RESGROUP:2242 DefPathString   db 'C:\DOS',0           ; ...
RESGROUP:2249 DefPath2String  db 'C:\MSDOS',0         ; ...
RESGROUP:2252 ComspOffset     dw 0		      ;	...
RESGROUP:2254 ComspString     db 'COMSPEC=\COMMAND.COM',0 ; ...
RESGROUP:2269 equalsign	      db '='                  ; ...
RESGROUP:226A lcasea	      db 'a'                  ; ...
RESGROUP:226B lcasez	      db 'z'                  ; ...
RESGROUP:226C space_chr	      db 20h		      ;	...
RESGROUP:226D scswitch	      db 'C'                  ; ...
RESGROUP:226E skswitch	      db 'K'                  ; ...
RESGROUP:226F ucasea	      db 'A'                  ; ...
RESGROUP:2270 EnvSiz	      dw 0		      ;	...
RESGROUP:2272 EnvMax	      dw 0		      ;	...
RESGROUP:2274 OldEnv	      dw 0		      ;	...
RESGROUP:2276 UsedEnv	      dw 0		      ;	...
RESGROUP:2278 PARS_MSG_OFF    dw 0
RESGROUP:227A PARS_MSG_SEG    dw 0
RESGROUP:227C Init_Parse      dw offset	append_parse  ;	...
RESGROUP:227C					      ;	init_p
RESGROUP:227E InitEnd	      dw 0		      ;	...
RESGROUP:2280 TrnSize	      dw 0		      ;	...
RESGROUP:2282 resetenv	      db 0
RESGROUP:2283 ext_msg	      db 0		      ;	...
RESGROUP:2284 eswitch	      db 0		      ;	...
RESGROUP:2285 dswitch	      db 0		      ;	...
RESGROUP:2286 parsemes_ptr    dw 0
RESGROUP:2288 PARSE_COMMAND   dw offset	COMMAND_PARMS ;	...
RESGROUP:228A		      db 0
RESGROUP:228B COMMAND_PARMS   db 0		      ;	...
RESGROUP:228C		      db 2
RESGROUP:228D		      dw offset	COMMAND_FILE
RESGROUP:228F		      dw offset	COMMAND_FILE
RESGROUP:2291		      db 11
RESGROUP:2292		      dw offset	COMMAND_SWITCH1
RESGROUP:2294		      dw offset	COMMAND_SWITCH2
RESGROUP:2296		      dw offset	COMMAND_SWITCH3
RESGROUP:2298		      dw offset	COMMAND_SWITCH4
RESGROUP:229A		      dw offset	COMMAND_SWITCH5
RESGROUP:229C		      dw offset	COMMAND_SWITCH6
RESGROUP:229E		      dw offset	COMMAND_SWITCH7
RESGROUP:22A0		      dw offset	COMMAND_SWITCH8
RESGROUP:22A2		      dw offset	COMMAND_SWITCH9
RESGROUP:22A4		      dw offset	COMMAND_SWITCH10
RESGROUP:22A6		      dw offset	COMMAND_SWITCH11
RESGROUP:22A8		      db 0
RESGROUP:22A9 COMMAND_FILE    dw 201h		      ;	...
RESGROUP:22AB		      dw 1
RESGROUP:22AD		      dw offset	COMND1_OUTPUT
RESGROUP:22AF		      dw offset	NO_VAL
RESGROUP:22B1		      db 0
RESGROUP:22B2 COMMAND_SWITCH1 dw 0		      ;	...
RESGROUP:22B4		      dw 2
RESGROUP:22B6		      dw offset	COMND1_OUTPUT
RESGROUP:22B8		      dw offset	NO_VAL
RESGROUP:22BA		      db 1
RESGROUP:22BB COMMAND_P_SYN   db '/P',0               ; ...
RESGROUP:22BE COMMAND_SWITCH2 dw 0		      ;	...
RESGROUP:22C0		      dw 2
RESGROUP:22C2		      dw offset	COMND1_OUTPUT
RESGROUP:22C4		      dw offset	NO_VAL
RESGROUP:22C6		      db 1
RESGROUP:22C7 COMMAND_F_SYN   db '/F',0               ; ...
RESGROUP:22CA COMMAND_SWITCH3 dw 0		      ;	...
RESGROUP:22CC		      dw 2
RESGROUP:22CE		      dw offset	COMND1_OUTPUT
RESGROUP:22D0		      dw offset	NO_VAL
RESGROUP:22D2		      db 1
RESGROUP:22D3 COMMAND_D_SYN   db '/D',0               ; ...
RESGROUP:22D6 COMMAND_SWITCH4 dw 8000h		      ;	...
RESGROUP:22D8		      dw 0
RESGROUP:22DA		      dw offset	COMND1_OUTPUT
RESGROUP:22DC		      dw offset	COMMAND_E_VAL
RESGROUP:22DE		      db 1
RESGROUP:22DF COMMAND_E_SYN   db '/E',0               ; ...
RESGROUP:22E2 COMMAND_E_VAL   db 1		      ;	...
RESGROUP:22E3		      db 1
RESGROUP:22E4		      db 1
RESGROUP:22E5		      dd 160
RESGROUP:22E9		      dd 32768
RESGROUP:22ED		      db 0
RESGROUP:22EE		      db 0
RESGROUP:22EF COMMAND_SWITCH5 dw 0		      ;	...
RESGROUP:22F1		      dw 2
RESGROUP:22F3		      dw offset	COMND1_OUTPUT
RESGROUP:22F5		      dw offset	NO_VAL
RESGROUP:22F7		      db 1
RESGROUP:22F8 COMMAND_C_SYN   db '/C',0               ; ...
RESGROUP:22FB COMMAND_SWITCH6 dw 0		      ;	...
RESGROUP:22FD		      dw 2
RESGROUP:22FF		      dw offset	COMND1_OUTPUT
RESGROUP:2301		      dw offset	NO_VAL
RESGROUP:2303		      db 1
RESGROUP:2304 COMMAND_M_SYN   db '/MSG',0             ; ...
RESGROUP:2309 COMMAND_SWITCH7 dw 0		      ;	...
RESGROUP:230B		      dw 2
RESGROUP:230D		      dw offset	COMND1_OUTPUT
RESGROUP:230F		      dw offset	NO_VAL
RESGROUP:2311		      db 1
RESGROUP:2312 COMMAND_?_SYN   db '/?',0               ; ...
RESGROUP:2315 COMMAND_SWITCH8 dw 0		      ;	...
RESGROUP:2317		      dw 2
RESGROUP:2319		      dw offset	COMND1_OUTPUT
RESGROUP:231B		      dw offset	NO_VAL
RESGROUP:231D		      db 1
RESGROUP:231E COMMAND_K_SYN   db '/K',0               ; ...
RESGROUP:2321 COMMAND_SWITCH9 dw 0		      ;	...
RESGROUP:2323		      dw 2
RESGROUP:2325		      dw offset	COMND1_OUTPUT
RESGROUP:2327		      dw offset	NO_VAL
RESGROUP:2329		      db 1
RESGROUP:232A COMMAND_Y_SYN   db '/Y',0               ; ...
RESGROUP:232D COMMAND_SWITCH10 dw 0		      ;	...
RESGROUP:232F		      dw 2
RESGROUP:2331		      dw offset	COMND1_OUTPUT
RESGROUP:2333		      dw offset	NO_VAL
RESGROUP:2335		      db 1
RESGROUP:2336 COMMAND_H_SYN   db '/H',0               ; ...
RESGROUP:2339 COMMAND_SWITCH11 dw 0		      ;	...
RESGROUP:233B		      dw 2
RESGROUP:233D		      dw offset	COMND1_OUTPUT
RESGROUP:233F		      dw offset	NO_VAL
RESGROUP:2341		      db 1
RESGROUP:2342 COMMAND_O_SYN   db '/O',0               ; ...
RESGROUP:2345 COMND1_OUTPUT   db 0		      ;	...
RESGROUP:2345					      ;	COMND1_TYPE
RESGROUP:2346 COMND1_CODE     db 0
RESGROUP:2347 COMND1_SYN      dw 0		      ;	...
RESGROUP:2349 COMND1_ADDR     dd 0		      ;	...
RESGROUP:234D NO_VAL	      db 0		      ;	...
RESGROUP:234E num_positionals dw 0		      ;	...
RESGROUP:2350 old_parse_ptr   dw 0		      ;	...
RESGROUP:2352 BADVERMSG	      db 23		      ;	...
RESGROUP:2353		      db 'Incorrect DOS version',0Dh,0Ah
RESGROUP:236A OUTENVMSG	      db 26		      ;	...
RESGROUP:236B		      db 'Out of environment space',0Dh,0Ah
RESGROUP:2385 COPYRIGHTMSG    db 100		      ;	...
RESGROUP:2386		      db 0Dh,0Ah
RESGROUP:2386		      db 0Dh,0Ah
RESGROUP:2386		      db 'PC DOS Version 7.10',0Dh,0Ah
RESGROUP:2386		      db '             (C)Copyright International Business Machines Corp 19'
RESGROUP:2386		      db '81-2002.',0Dh,0Ah
RESGROUP:23EA BADCOMLKMES     db 40		      ;	...
RESGROUP:23EB		      db 'Specified COMMAND search directory bad',0Dh,0Ah
RESGROUP:2413 BADCOMACCMSG    db 55		      ;	...
RESGROUP:2414		      db 'Specified COMMAND search directory bad, access denied',0Dh,0Ah
RESGROUP:244B HELPMSG1	      db 38h		      ;	...
RESGROUP:244C		      db 'Starts a new copy of the PC DOS Command Interpreter.',0Dh,0Ah
RESGROUP:244C		      db 0Dh,0Ah
RESGROUP:2484 HELPMSG2	      db 38h		      ;	...
RESGROUP:2485		      db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P [/MSG]]',0Dh,0Ah
RESGROUP:24BD HELPMSG3	      db 34h		      ;	...
RESGROUP:24BE		      db '        [/H] [/O] [/Y [/C command | /K command]]',0Dh,0Ah
RESGROUP:24BE		      db 0Dh,0Ah
RESGROUP:24F2 HELPMSG4	      db 48h		      ;	...
RESGROUP:24F3		      db '  [drive:]path    Specifies the directory containing COMMAND.COM '
RESGROUP:24F3		      db 'file.',0Dh,0Ah
RESGROUP:253B HELPMSG5	      db 4Dh		      ;	...
RESGROUP:253C		      db '  device          Specifies the device to use for command input a'
RESGROUP:253C		      db 'nd output.',0Dh,0Ah
RESGROUP:2589 HELPMSG6	      db 45h		      ;	...
RESGROUP:258A		      db '  /E:nnnnn        Sets the initial environment size to nnnnn byte'
RESGROUP:258A		      db 's.',0Dh,0Ah
RESGROUP:25CF HELPMSG7	      db 4Dh		      ;	...
RESGROUP:25D0		      db '  /P              Makes the new Command Interpreter permanent (ca'
RESGROUP:25D0		      db 'n',27h,'t exit).',0Dh,0Ah
RESGROUP:261D HELPMSG8	      db 46h		      ;	...
RESGROUP:261E		      db '  /MSG            Stores all error messages in memory (requires /'
RESGROUP:261E		      db 'P).',0Dh,0Ah
RESGROUP:2664 HELPMSG9	      db 4Ah		      ;	...
RESGROUP:2665		      db '  /H              Loads the Command Interpreter into a UMB if ava'
RESGROUP:2665		      db 'ilable.',0Dh,0Ah
RESGROUP:26AF HELPMSG10	      db 4Eh		      ;	...
RESGROUP:26B0		      db '  /O              Disables overwrite prompt on COPY,XCOPY,and MOV'
RESGROUP:26B0		      db 'E commands.',0Dh,0Ah
RESGROUP:26FE HELPMSG11	      db 4Ah		      ;	...
RESGROUP:26FF		      db '  /Y              Steps through the batch program specified by /C'
RESGROUP:26FF		      db ' or /K.',0Dh,0Ah
RESGROUP:2749 HELPMSG12	      db 3Fh		      ;	...
RESGROUP:274A		      db '  /C command      Executes the specified command and returns.',0Dh,0Ah
RESGROUP:2789 HELPMSG13	      db 4Bh		      ;	...
RESGROUP:278A		      db '  /K command      Executes the specified command and continues ru'
RESGROUP:278A		      db 'nning.',0Dh,0Ah
RESGROUP:278A		      db 0Dh,0Ah
RESGROUP:27D5 HELPMSG14	      db 4Ch		      ;	...
RESGROUP:27D6		      db 'The /P and /MSG switches may be used only when COMMAND is started'
RESGROUP:27D6		      db ' by using',0Dh,0Ah
RESGROUP:2822 HELPMSG15	      db 2Bh		      ;	...
RESGROUP:2823		      db 'the SHELL command in the CONFIG.SYS file.',0Dh,0Ah
RESGROUP:284E HelpMsgs	      dw offset	HELPMSG1      ;	...
RESGROUP:2850		      dw offset	HELPMSG2
RESGROUP:2852		      dw offset	HELPMSG3
RESGROUP:2854		      dw offset	HELPMSG4
RESGROUP:2856		      dw offset	HELPMSG5
RESGROUP:2858		      dw offset	HELPMSG6
RESGROUP:285A		      dw offset	HELPMSG7
RESGROUP:285C		      dw offset	HELPMSG8
RESGROUP:285E		      dw offset	HELPMSG9
RESGROUP:2860		      dw offset	HELPMSG10
RESGROUP:2862		      dw offset	HELPMSG11
RESGROUP:2864		      dw offset	HELPMSG12
RESGROUP:2866		      dw offset	HELPMSG13
RESGROUP:2868		      dw offset	HELPMSG14
RESGROUP:286A		      dw offset	HELPMSG15
RESGROUP:286C		      dw 0
RESGROUP:286E Reloc_Table     dw 7B2h		      ;	...
RESGROUP:286E					      ;	MsgInt2fHandler	- RCODE_START (15C2h-0E10h)
RESGROUP:2870		      dw 170h		      ;	Int_2e - RCODE_START
RESGROUP:2872		      dw 2Eh		      ;	ContC -	RCODE_START
RESGROUP:2874		      dw 495h		      ;	DSKERR - RCODE_START
RESGROUP:2876		      dw 22h		      ;	Exec_Ret - RCODE_START
RESGROUP:2878		      dw 2A6h		      ;	TRemCheck - RCODE_START
RESGROUP:287A		      dw 472h		      ;	TrnLodCom1 - RCODE_START
RESGROUP:287C		      dw 1A7h		      ;	LodCom - RCODE_START
RESGROUP:287E		      dw 7F5h		      ;	MsgRetriever - RCODE_START
RESGROUP:2880		      dw 2C5h		      ;	THeadFix - RCODE_START
RESGROUP:2882		      dw 86Eh		      ;	Lh_OffUnlink - RCODE_START
RESGROUP:2884 ResJmpTable     dd 0		      ;	...
RESGROUP:2888 FirstCom	      db 0		      ;	...
RESGROUP:2889 DevFlag	      db 0		      ;	...
RESGROUP:288A PathFlag	      db 0		      ;	...
RESGROUP:288B		      db 5 dup(0)
RESGROUP:288B ends	      RESGROUP
RESGROUP:288B
TRANGROUP:0000 ; ===========================================================================
TRANGROUP:0000
TRANGROUP:0000 ; Segment type: Regular
TRANGROUP:0000 segment	       TRANGROUP byte public 'TRANGROUP' use16
TRANGROUP:0000		       assume cs:TRANGROUP
TRANGROUP:0000		       assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
TRANGROUP:0000 TRANSIENTSTART  db 256 dup(0)	       ; 0
TRANGROUP:0100 ; ---------------------------------------------------------------------------
TRANGROUP:0100 ; START OF FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:0100
TRANGROUP:0100 SETDRV:				       ; ...
TRANGROUP:0100		       mov     ah, 0Eh
TRANGROUP:0102		       int     21h	       ; DOS - SELECT DISK
TRANGROUP:0102					       ; DL = new default drive	number (0 = A, 1 = B, etc.)
TRANGROUP:0102					       ; Return: AL = number of	logical	drives
TRANGROUP:0104
TRANGROUP:0104 TCOMMAND:			       ; ...
TRANGROUP:0104		       nop
TRANGROUP:0105		       nop
TRANGROUP:0106		       mov     ds, [cs:RESSEG]
TRANGROUP:010B		       assume ds:RESGROUP
TRANGROUP:010B		       mov     ax, 0FFFFh
TRANGROUP:010E		       xchg    ax, [VerVal]
TRANGROUP:0112		       cmp     ax, 0FFFFh
TRANGROUP:0115		       jz      short NOSETVER2
TRANGROUP:0117		       mov     ah, 2Eh
TRANGROUP:0119		       int     21h	       ; DOS - SET VERIFY FLAG
TRANGROUP:0119					       ; DL = 00h, AL =	01h VERIFY on /	00h VERIFY off
TRANGROUP:011B
TRANGROUP:011B NOSETVER2:			       ; ...
TRANGROUP:011B		       call    [dword ptr cs:HEADCALL] ; call far [cs:HEADCALL]
TRANGROUP:0120		       xor     bp, bp
TRANGROUP:0122		       cmp     [SingleCom], 0FFFFh ; -1
TRANGROUP:0127		       jnz     short COMMAND
TRANGROUP:0129
TRANGROUP:0129 _$EXITPREP:			       ; ...
TRANGROUP:0129		       push    cs
TRANGROUP:012A		       pop     ds
TRANGROUP:012B		       assume ds:TRANGROUP
TRANGROUP:012B		       jmp     _$EXIT
TRANGROUP:012E ; ---------------------------------------------------------------------------
TRANGROUP:012E
TRANGROUP:012E COMMAND:				       ; ...
TRANGROUP:012E		       cld
TRANGROUP:012F		       mov     ax, cs
TRANGROUP:0131		       cli
TRANGROUP:0132		       mov     ss, ax
TRANGROUP:0134		       assume ss:TRANGROUP
TRANGROUP:0134		       mov     sp, offset STACK	; 0AA2Dh
TRANGROUP:0137		       sti
TRANGROUP:0138		       mov     es, ax
TRANGROUP:013A		       assume es:TRANGROUP
TRANGROUP:013A		       mov     ds, ax
TRANGROUP:013C		       call    TSYSLOADMSG
TRANGROUP:013F		       mov     [append_exec], 0
TRANGROUP:0144		       mov     ds, [RESSEG]
TRANGROUP:0148		       assume ds:RESGROUP
TRANGROUP:0148		       mov     [ss:UCOMBUF], 128
TRANGROUP:014E		       mov     [ss:COMBUF], 128
TRANGROUP:0154		       or      bp, bp
TRANGROUP:0156		       jz      short TESTRDIR
TRANGROUP:0158		       mov     [word ptr ss:UCOMBUF+1],	0D01h ;	Reset buffer
TRANGROUP:015F		       jmp     short NOSETBUF
TRANGROUP:0161 ; ---------------------------------------------------------------------------
TRANGROUP:0161
TRANGROUP:0161 TESTRDIR:			       ; ...
TRANGROUP:0161		       cmp     [RestDir], 0    ; byte
TRANGROUP:0166		       jz      short NOSETBUF
TRANGROUP:0168		       push    ds
TRANGROUP:0169		       mov     [RestDir], 0
TRANGROUP:016E		       push    cs
TRANGROUP:016F		       pop     ds
TRANGROUP:0170		       assume ds:TRANGROUP
TRANGROUP:0170		       mov     dx, offset USERDIR1
TRANGROUP:0173		       mov     ah, 3Bh
TRANGROUP:0175		       int     21h	       ; DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)
TRANGROUP:0175					       ; DS:DX -> ASCIZ	directory name (may include drive)
TRANGROUP:0177		       pop     ds
TRANGROUP:0178		       assume ds:nothing
TRANGROUP:0178
TRANGROUP:0178 NOSETBUF:			       ; ...
TRANGROUP:0178		       cmp     [ds:PipeFiles], 0
TRANGROUP:017D		       jz      short NOPCLOSE
TRANGROUP:017F		       cmp     [ds:PipeFlag], 0
TRANGROUP:0184		       jnz     short NOPCLOSE
TRANGROUP:0186		       call    PIPEDEL
TRANGROUP:0189
TRANGROUP:0189 NOPCLOSE:			       ; ...
TRANGROUP:0189		       mov     [ds:ExtCom], 0
TRANGROUP:018E		       mov     ax, cs
TRANGROUP:0190		       mov     ds, ax
TRANGROUP:0192		       assume ds:TRANGROUP
TRANGROUP:0192		       push    ax
TRANGROUP:0193		       mov     dx, offset STACK	; INTERNATVARS
TRANGROUP:0196		       mov     ax, 3800h
TRANGROUP:0199		       int     21h	       ; DOS - 2+ - GET	COUNTRY-DEPENDENT INFORMATION
TRANGROUP:0199					       ; get current-country info
TRANGROUP:0199					       ; DS:DX -> buffer for returned info
TRANGROUP:019B		       pop     ax
TRANGROUP:019C		       sub     ax, [TPA]
TRANGROUP:01A0		       push    bx
TRANGROUP:01A1		       mov     bx, 16
TRANGROUP:01A4		       mul     bx
TRANGROUP:01A6		       pop     bx
TRANGROUP:01A7		       or      dx, dx
TRANGROUP:01A9		       jz      short SAVSIZ
TRANGROUP:01AB		       mov     ax, 0FFFFh      ; -1
TRANGROUP:01AE
TRANGROUP:01AE SAVSIZ:				       ; ...
TRANGROUP:01AE		       cmp     ax, 512
TRANGROUP:01B1		       jbe     short GOTSIZE
TRANGROUP:01B3		       and     ax, 0FE00h      ; ~1FFh
TRANGROUP:01B6
TRANGROUP:01B6 GOTSIZE:				       ; ...
TRANGROUP:01B6		       mov     [BYTCNT], ax
TRANGROUP:01B9		       mov     ds, [RESSEG]
TRANGROUP:01BD		       assume ds:RESGROUP
TRANGROUP:01BD		       test    [EchoFlag], 1
TRANGROUP:01C2		       jz      short GETCOM
TRANGROUP:01C4		       call    SINGLETEST
TRANGROUP:01C7		       jb      short GETCOM
TRANGROUP:01C9		       test    [PipeFlag], 0FFh
TRANGROUP:01CE		       jnz     short GETCOM
TRANGROUP:01D0		       test    [ForFlag], 0FFh
TRANGROUP:01D5		       jnz     short GETCOM
TRANGROUP:01D7		       test    [Batch],	0FFFFh
TRANGROUP:01DD		       jnz     short GETCOM
TRANGROUP:01DF		       call    CRLF2
TRANGROUP:01E2
TRANGROUP:01E2 GETCOM:				       ; ...
TRANGROUP:01E2		       cmp     [SingleCom], 0
TRANGROUP:01E7		       jnz     short GETCOM2
TRANGROUP:01E9		       test    [Batch],	0FFFFh
TRANGROUP:01EF		       jnz     short GETCOM2
TRANGROUP:01F1		       and     [byte ptr Y_Flag], 0EFh ; Y/N question overwrite	flag ; ~10h
TRANGROUP:01F6
TRANGROUP:01F6 GETCOM2:				       ; ...
TRANGROUP:01F6		       mov     [Call_Flag], 0
TRANGROUP:01FB		       mov     [Call_Batch_Flag], 0
TRANGROUP:0200		       mov     ah, 19h
TRANGROUP:0202		       int     21h	       ; DOS - GET DEFAULT DISK	NUMBER
TRANGROUP:0204		       mov     [ss:CURDRV], al
TRANGROUP:0208		       test    [PipeFlag], 0FFh	; -1
TRANGROUP:020D		       jz      short NOPIPE
TRANGROUP:020F		       jmp     PIPEPROC
TRANGROUP:0212 ; ---------------------------------------------------------------------------
TRANGROUP:0212
TRANGROUP:0212 NOPIPE:				       ; ...
TRANGROUP:0212		       test    [EchoFlag], 1
TRANGROUP:0217		       jz      short NOPDRV
TRANGROUP:0219		       call    SINGLETEST
TRANGROUP:021C		       jb      short NOPDRV
TRANGROUP:021E		       test    [ForFlag], 0FFh
TRANGROUP:0223		       jnz     short NOPDRV
TRANGROUP:0225		       test    [Batch],	0FFFFh
TRANGROUP:022B		       jnz     short TESTFORBAT
TRANGROUP:022D		       call    PRINT_PROMPT
TRANGROUP:0230
TRANGROUP:0230 NOPDRV:				       ; ...
TRANGROUP:0230		       test    [ForFlag], 0FFh
TRANGROUP:0235		       jz      short TESTFORBAT
TRANGROUP:0237		       jmp     FORPROC	       ; Continue the FOR
TRANGROUP:023A ; ---------------------------------------------------------------------------
TRANGROUP:023A
TRANGROUP:023A TESTFORBAT:			       ; ...
TRANGROUP:023A		       mov     [ss:RE_INSTR], 0
TRANGROUP:0240		       mov     [Re_OutStr], 0
TRANGROUP:0245		       mov     [Re_Out_App], 0
TRANGROUP:024A		       mov     [IfFlag], 0     ; no more ifs...
TRANGROUP:024F		       test    [Batch],	0FFFFh
TRANGROUP:0255		       jz      short ISNOBAT
TRANGROUP:0257		       push    es
TRANGROUP:0258		       push    ds
TRANGROUP:0259		       mov     ax, 1902h
TRANGROUP:025C		       mov     es, [Batch]
TRANGROUP:0260		       assume es:nothing
TRANGROUP:0260		       mov     di, 20h	       ; BATCHSEGMENT.BatFile
TRANGROUP:0263		       push    cs
TRANGROUP:0264		       pop     ds
TRANGROUP:0265		       assume ds:TRANGROUP
TRANGROUP:0265		       mov     dx, offset COMBUF
TRANGROUP:0268		       int     2Fh	       ; - Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE
TRANGROUP:0268					       ; ES:DI -> ASCIZ	full filename of current batch file, with at least the
TRANGROUP:0268					       ; final filename	element	uppercased
TRANGROUP:0268					       ; DS:DX -> buffer for results
TRANGROUP:026A		       cmp     al, 0FFh	       ; shell_action
TRANGROUP:026C		       pop     ds
TRANGROUP:026D		       assume ds:nothing
TRANGROUP:026D		       pop     es
TRANGROUP:026E		       jz      short JDOCOM1
TRANGROUP:0270		       push    ds
TRANGROUP:0271		       call    READBAT
TRANGROUP:0274		       pop     ds
TRANGROUP:0275		       mov     [ds:NullFlag], 0	; reset	no command flag
TRANGROUP:027A		       test    [ds:Batch], 0FFFFh
TRANGROUP:0280		       jnz     short JDOCOM1   ; if batch still	in progress continue
TRANGROUP:0282		       mov     bx, [ds:Next_Batch]
TRANGROUP:0286		       cmp     bx, 0
TRANGROUP:0289		       jz      short JDOCOM1
TRANGROUP:028B		       mov     [ds:Batch], bx  ; get segment of	next batch file
TRANGROUP:028F		       mov     [ds:Next_Batch],	0 ; reset next batch
TRANGROUP:0295
TRANGROUP:0295 JDOCOM1:				       ; ...
TRANGROUP:0295		       push    cs
TRANGROUP:0296		       pop     ds
TRANGROUP:0297		       assume ds:TRANGROUP
TRANGROUP:0297		       jmp     short DOCOM0
TRANGROUP:0299 ; ---------------------------------------------------------------------------
TRANGROUP:0299
TRANGROUP:0299 ISNOBAT:				       ; ...
TRANGROUP:0299		       cmp     [ds:SingleCom], 0
TRANGROUP:029E		       jz      short REGCOM
TRANGROUP:02A0		       mov     si, [ds:SemiPermCom]
TRANGROUP:02A4		       xchg    si, [ds:SingleCom]
TRANGROUP:02A8		       mov     di, (offset COMBUF+2)
TRANGROUP:02AB		       xor     cx, cx
TRANGROUP:02AD
TRANGROUP:02AD SINGLELOOP:			       ; ...
TRANGROUP:02AD		       lodsb
TRANGROUP:02AE		       stosb
TRANGROUP:02AF		       inc     cx
TRANGROUP:02B0		       cmp     al, 0Dh
TRANGROUP:02B2		       jnz     short SINGLELOOP
TRANGROUP:02B4		       dec     cx
TRANGROUP:02B5		       push    cs
TRANGROUP:02B6		       pop     ds
TRANGROUP:02B7		       mov     [COMBUF+1], cl
TRANGROUP:02BB		       jmp     short DOCOM0
TRANGROUP:02BD ; ---------------------------------------------------------------------------
TRANGROUP:02BD
TRANGROUP:02BD REGCOM:				       ; ...
TRANGROUP:02BD		       mov     ax, 5D09h
TRANGROUP:02C0		       int     21h	       ; DOS - 3.1+ internal - FLUSH REDIRECTED	PRINTER	OUTPUT
TRANGROUP:02C2		       mov     ax, 5D08h
TRANGROUP:02C5		       mov     dl, 1
TRANGROUP:02C7		       int     21h	       ; DOS - 3.1+ internal - SET REDIRECTED PRINTER MODE
TRANGROUP:02C7					       ; DL = 00h redirected output is combined
TRANGROUP:02C7					       ;      01h redirected output placed in separate jobs
TRANGROUP:02C7					       ; start new print job now
TRANGROUP:02C9		       push    cs
TRANGROUP:02CA		       pop     ds
TRANGROUP:02CB		       mov     dx, offset UCOMBUF
TRANGROUP:02CE		       mov     ax, 4810h       ; DOSKey	Read Line function
TRANGROUP:02D1		       int     2Fh
TRANGROUP:02D3		       or      ax, ax
TRANGROUP:02D5		       jz      short GOTCOM    ; DOSKey	gave us	a command line
TRANGROUP:02D7		       mov     ah, 0Ah
TRANGROUP:02D9		       int     21h	       ; DOS - BUFFERED	KEYBOARD INPUT
TRANGROUP:02D9					       ; DS:DX -> buffer
TRANGROUP:02DB
TRANGROUP:02DB GOTCOM:				       ; ...
TRANGROUP:02DB		       mov     cl, [UCOMBUF]
TRANGROUP:02DF		       xor     ch, ch
TRANGROUP:02E1		       add     cx, 3
TRANGROUP:02E4		       mov     si, offset UCOMBUF
TRANGROUP:02E7		       mov     di, offset COMBUF
TRANGROUP:02EA		       rep movsb
TRANGROUP:02EC		       call    CRLF2
TRANGROUP:02EF		       xor     ax, ax
TRANGROUP:02F1		       jmp     short DOCOM2
TRANGROUP:02F3 ; ---------------------------------------------------------------------------
TRANGROUP:02F3
TRANGROUP:02F3 DOCOM:				       ; ...
TRANGROUP:02F3		       call    CRLF2
TRANGROUP:02F6
TRANGROUP:02F6 DOCOM0:				       ; ...
TRANGROUP:02F6		       mov     ax, 1
TRANGROUP:02F9
TRANGROUP:02F9 DOCOM2:				       ; ...
TRANGROUP:02F9		       push    ds
TRANGROUP:02FA		       mov     ds, [RESSEG]
TRANGROUP:02FE		       assume ds:RESGROUP
TRANGROUP:02FE		       mov     [cox_Y_option], ax
TRANGROUP:0301		       pop     ds
TRANGROUP:0302		       assume ds:nothing
TRANGROUP:0302		       mov     si, offset COMBUF
TRANGROUP:0305		       mov     cl, [si+1]
TRANGROUP:0308		       xor     ch, ch
TRANGROUP:030A		       add     si, 2
TRANGROUP:030D		       call    get_cox_y_n_opt
TRANGROUP:0310		       jnb     short DOCOM1
TRANGROUP:0312		       jmp     NULLCOM
TRANGROUP:0315 ; ---------------------------------------------------------------------------
TRANGROUP:0315
TRANGROUP:0315 DOCOM1:				       ; ...
TRANGROUP:0315		       call    PRESCAN
TRANGROUP:0318		       jz      short NOPIPEPROC
TRANGROUP:031A		       jmp     PIPEPROCSTRT
TRANGROUP:031D ; ---------------------------------------------------------------------------
TRANGROUP:031D
TRANGROUP:031D NULLCOMJ:			       ; ...
TRANGROUP:031D		       jmp     NULLCOM
TRANGROUP:0320 ; ---------------------------------------------------------------------------
TRANGROUP:0320
TRANGROUP:0320 NOPIPEPROC:			       ; ...
TRANGROUP:0320		       call    PARSELINE
TRANGROUP:0323		       jnb     short OKPARSE
TRANGROUP:0325
TRANGROUP:0325 BADPARSE:			       ; ...
TRANGROUP:0325		       push    cs
TRANGROUP:0326		       pop     ds
TRANGROUP:0327		       assume ds:TRANGROUP
TRANGROUP:0327		       mov     dx, offset BADNAM_PTR
TRANGROUP:032A		       call    std_eprintf
TRANGROUP:032D		       jmp     TCOMMAND
TRANGROUP:0330 ; ---------------------------------------------------------------------------
TRANGROUP:0330
TRANGROUP:0330 OKPARSE:				       ; ...
TRANGROUP:0330		       test    [ARGV0_ARG_FLAGS], 2 ; byte [ARG+ARGV_ELE.argflags]
TRANGROUP:0335		       jnz     short BADPARSE
TRANGROUP:0337		       cmp     [ARG_ARGVCNT], 0	; word [ARG+ARG_UNIT.argvcnt]
TRANGROUP:033C		       jz      short NULLCOMJ
TRANGROUP:033E		       cmp     [ARGV0_ARGLEN], 0 ; word	[ARG+ARGV_ELE.arglen]
TRANGROUP:0343		       jz      short NULLCOMJ
TRANGROUP:0345		       mov     si, (offset COMBUF+2)
TRANGROUP:0348		       mov     di, offset IDLEN
TRANGROUP:034B		       mov     ax, 2901h       ; (Parse_File_Descriptor<<8)|01h
TRANGROUP:034E		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:034E					       ; DS:SI -> string to parse
TRANGROUP:034E					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:034E					       ; AL = bit mask to control parsing
TRANGROUP:0350		       mov     bx, [ARG_ARGV]  ; [ARG+ARG_UNIT.argv]
TRANGROUP:0354		       cmp     [byte ptr bx+1],	':'
TRANGROUP:0358		       jnz     short DRVGD
TRANGROUP:035A		       mov     dl, [bx]	       ; [bx+ARGV_ELE.argpointer]
TRANGROUP:035C		       and     dl, 0DFh	       ; ~20h ;	uppercase
TRANGROUP:035F		       sub     dl, 41h ; 'A'   ; CAPITAL_A
TRANGROUP:0362		       cmp     al, 0FFh	       ; -1
TRANGROUP:0364		       jz      short DRVBADJ
TRANGROUP:0366		       mov     di, [ARGV0_ARGSTARTEL] ;	[ARG+ARGV_ELE.argstartel]
TRANGROUP:036A		       cmp     [byte ptr di], 0
TRANGROUP:036D		       jnz     short DRVGD
TRANGROUP:036F		       jmp     SETDRV
TRANGROUP:0372 ; ---------------------------------------------------------------------------
TRANGROUP:0372
TRANGROUP:0372 DRVBADJ:				       ; ...
TRANGROUP:0372		       jmp     DRVBAD
TRANGROUP:0375 ; ---------------------------------------------------------------------------
TRANGROUP:0375
TRANGROUP:0375 DRVGD:				       ; ...
TRANGROUP:0375		       mov     al, [di]
TRANGROUP:0377		       mov     [SPECDRV], al
TRANGROUP:037A		       mov     al, 20h ; ' '
TRANGROUP:037C		       mov     cx, 9
TRANGROUP:037F		       inc     di
TRANGROUP:0380		       repne scasb	       ; Count number of letters in command name
TRANGROUP:0382		       mov     al, 8
TRANGROUP:0384		       sub     al, cl
TRANGROUP:0386		       mov     [IDLEN],	al     ; IDLEN is truly	the length
TRANGROUP:0389		       mov     di, 81h
TRANGROUP:038C		       push    si
TRANGROUP:038D		       mov     si, (offset COMBUF+2)
TRANGROUP:0390		       call    scanoff
TRANGROUP:0393		       inc     si
TRANGROUP:0394
TRANGROUP:0394 DO_SKIPCOM:			       ; ...
TRANGROUP:0394		       lodsb
TRANGROUP:0395		       call    DELIM
TRANGROUP:0398		       jz      short DO_SKIPPED
TRANGROUP:039A		       cmp     al, 0Dh
TRANGROUP:039C		       jz      short DO_SKIPPED
TRANGROUP:039E		       cmp     al, [SWITCHAR]
TRANGROUP:03A2		       jnz     short DO_SKIPCOM
TRANGROUP:03A4
TRANGROUP:03A4 DO_SKIPPED:			       ; ...
TRANGROUP:03A4		       dec     si
TRANGROUP:03A5		       xor     cx, cx
TRANGROUP:03A7
TRANGROUP:03A7 COMTAIL:				       ; ...
TRANGROUP:03A7		       lodsb
TRANGROUP:03A8		       stosb
TRANGROUP:03A9		       cmp     al, 0Dh
TRANGROUP:03A9 ; END OF	FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:03AB		       loopne  COMTAIL
TRANGROUP:03AD		       dec     di
TRANGROUP:03AE		       mov     bp, di
TRANGROUP:03B0		       not     cl
TRANGROUP:03B2		       mov     ds:80h, cl
TRANGROUP:03B6		       pop     si
TRANGROUP:03B7		       mov     di, [ARGV0_ARGSW_WORD] ;	[ARG+ARGV_ELE.argsw_word]
TRANGROUP:03BB		       mov     [COMSW],	di
TRANGROUP:03BF		       mov     si, [ARGV1_ARGPOINTER] ;	[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]
TRANGROUP:03C3		       or      si, si
TRANGROUP:03C5		       jnz     short DOPARSE
TRANGROUP:03C7		       mov     si, bp
TRANGROUP:03C9
TRANGROUP:03C9 DOPARSE:				       ; ...
TRANGROUP:03C9		       mov     di, 5Ch	       ; FCB
TRANGROUP:03CC		       mov     ax, 2901h
TRANGROUP:03CF		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:03CF					       ; DS:SI -> string to parse
TRANGROUP:03CF					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:03CF					       ; AL = bit mask to control parsing
TRANGROUP:03D1		       mov     [PARM1],	al
TRANGROUP:03D4		       mov     di, [ARGV1_ARGSW_WORD] ;	[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]
TRANGROUP:03D8		       mov     [ARG1S],	di
TRANGROUP:03DC		       mov     si, [ARGV2_ARGPOINTER]
TRANGROUP:03E0		       or      si, si
TRANGROUP:03E2		       jnz     short DOPARSE2
TRANGROUP:03E4		       mov     si, bp
TRANGROUP:03E6
TRANGROUP:03E6 DOPARSE2:			       ; ...
TRANGROUP:03E6		       mov     di, 6Ch	       ; FCB+10h
TRANGROUP:03E9		       mov     ax, 2901h
TRANGROUP:03EC		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:03EC					       ; DS:SI -> string to parse
TRANGROUP:03EC					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:03EC					       ; AL = bit mask to control parsing
TRANGROUP:03EE		       mov     [PARM2],	al
TRANGROUP:03F1		       mov     di, [ARGV2_ARGSW_WORD] ;	[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]
TRANGROUP:03F5		       mov     [DestSwitch], di
TRANGROUP:03F9		       mov     di, [ARGV0_ARGSW_WORD] ;	[ARG+ARGV_ELE.argsw_word]
TRANGROUP:03FD		       not     di
TRANGROUP:03FF		       and     di, [ARG_ARGSWINFO] ; [ARG+ARG_UNIT.argswinfo]
TRANGROUP:0403		       mov     [ARGTS],	di
TRANGROUP:0407		       mov     al, [IDLEN]
TRANGROUP:040A		       mov     dl, [SPECDRV]
TRANGROUP:040E		       or      dl, dl
TRANGROUP:0410		       jnz     short EXTERNALJ1
TRANGROUP:0412		       dec     al
TRANGROUP:0414		       jmp     FNDCOM
TRANGROUP:0417 ; ---------------------------------------------------------------------------
TRANGROUP:0417
TRANGROUP:0417 EXTERNALJ1:			       ; ...
TRANGROUP:0417		       jmp     EXTERNAL
TRANGROUP:041A ; ---------------------------------------------------------------------------
TRANGROUP:041A ; START OF FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:041A
TRANGROUP:041A NULLCOM:				       ; ...
TRANGROUP:041A		       mov     ds, [RESSEG]
TRANGROUP:041E		       assume ds:RESGROUP
TRANGROUP:041E		       test    [Batch],	0FFFFh ; -1
TRANGROUP:0424		       jz      short NOSETFLAG
TRANGROUP:0426		       mov     [NullFlag], 1   ; only set flag if in batch
TRANGROUP:042B
TRANGROUP:042B NOSETFLAG:			       ; ...
TRANGROUP:042B		       cmp     [SingleCom], 0FFFFh
TRANGROUP:0430		       jz      short EXITJ
TRANGROUP:0432		       jmp     GETCOM
TRANGROUP:0435 ; ---------------------------------------------------------------------------
TRANGROUP:0435
TRANGROUP:0435 EXITJ:				       ; ...
TRANGROUP:0435		       jmp     _$EXITPREP
TRANGROUP:0435 ; END OF	FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:0438
TRANGROUP:0438 ; =============== S U B R O U T I N E =======================================
TRANGROUP:0438
TRANGROUP:0438
TRANGROUP:0438 proc	       get_cox_y_n_opt near    ; ...
TRANGROUP:0438		       jcxz    short ccydp4
TRANGROUP:043A		       cmp     [byte ptr si], 0Dh
TRANGROUP:043D		       jz      short ccydp4
TRANGROUP:043F		       cmp     [byte ptr si], 0Ah
TRANGROUP:0442		       jz      short ccydp4
TRANGROUP:0444		       push    es
TRANGROUP:0445		       mov     es, [word ptr ds:0A084h]
TRANGROUP:0449		       assume es:nothing
TRANGROUP:0449		       mov     al, [byte ptr es:Y_Flag]
TRANGROUP:044D		       test    al, 10h	       ;  bit 1	= 1 -> Y/N answer is needed
TRANGROUP:044F		       jz      short ccydp3
TRANGROUP:0451		       cmp     [es:Call_Batch_Flag], 1 ; (in) Batch file ?
TRANGROUP:0457		       jz      short ccydp3    ; yes, don't check for ESCAPE
TRANGROUP:0459		       test    al, 40h	       ; ESCAPE	status
TRANGROUP:045B		       jz      short ccydp5    ; (bit 4	is zero	if Y/N is escaped)
TRANGROUP:045D
TRANGROUP:045D ccydp1:				       ; ...
TRANGROUP:045D		       test    [es:Batch], 0FFFFh
TRANGROUP:0464		       jz      short ccydp2
TRANGROUP:0466		       mov     es, [es:Batch]
TRANGROUP:046B		       assume es:nothing
TRANGROUP:046B		       mov     [byte ptr es:2],	1 ; [es:BATCHSEGMENT.BatchEOF]
TRANGROUP:0471
TRANGROUP:0471 ccydp2:				       ; ...
TRANGROUP:0471		       stc
TRANGROUP:0472		       pop     es
TRANGROUP:0473		       retn
TRANGROUP:0474 ; ---------------------------------------------------------------------------
TRANGROUP:0474
TRANGROUP:0474 ccydp3:				       ; ...
TRANGROUP:0474		       pop     es
TRANGROUP:0475
TRANGROUP:0475 ccydp4:				       ; ...
TRANGROUP:0475		       clc
TRANGROUP:0476		       retn
TRANGROUP:0477 ; ---------------------------------------------------------------------------
TRANGROUP:0477
TRANGROUP:0477 ccydp5:				       ; ...
TRANGROUP:0477		       mov     dx, si
TRANGROUP:0479		       mov     bx, 2
TRANGROUP:047C		       mov     ah, 40h
TRANGROUP:047E		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:047E					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:0480		       mov     dx, offset cox_Y_quest_ptr ; msg	number pointer of ' [Y/N]?'
TRANGROUP:0480					       ; (is 1082)
TRANGROUP:0483		       call    std_eprintf
TRANGROUP:0486		       push    ds
TRANGROUP:0487		       mov     ax, 1083	       ; cox_Y_answer number (overwrite	Y/N answer letter)
TRANGROUP:048A		       mov     dh, 0FFh	       ; utility_msg_class
TRANGROUP:048C		       call    TSYSGETMSG
TRANGROUP:048F		       mov     cx, 4E59h       ; 'YN' Yes/No (CL=Y)
TRANGROUP:048F					       ; (NASM syntax: 'YN', MASM syntax: 'NY')
TRANGROUP:0492		       jb      short ccydp6
TRANGROUP:0494		       mov     cx, [si]
TRANGROUP:0496
TRANGROUP:0496 ccydp6:				       ; ...
TRANGROUP:0496		       pop     ds
TRANGROUP:0497		       assume ds:nothing
TRANGROUP:0497
TRANGROUP:0497 ccydp7:				       ; ...
TRANGROUP:0497		       mov     ah, 8
TRANGROUP:0499		       int     21h	       ; DOS - KEYBOARD	INPUT, NO ECHO
TRANGROUP:0499					       ; Return: AL = character
TRANGROUP:049B		       test    al, al
TRANGROUP:049D		       jnz     short ccydp8
TRANGROUP:049F		       mov     ah, 8
TRANGROUP:04A1		       int     21h	       ; DOS - KEYBOARD	INPUT, NO ECHO
TRANGROUP:04A1					       ; Return: AL = character
TRANGROUP:04A3		       cmp     al, '?'
TRANGROUP:04A5		       jnz     short ccydp7
TRANGROUP:04A7		       or      [byte ptr es:Y_Flag], 40h ; bit 4, question flag
TRANGROUP:04AD		       jmp     short ccydp1
TRANGROUP:04AF ; ---------------------------------------------------------------------------
TRANGROUP:04AF
TRANGROUP:04AF ccydp8:				       ; ...
TRANGROUP:04AF		       cmp     al, 1Bh	       ; ESCAPE	?
TRANGROUP:04B1		       jnz     short ccydp9
TRANGROUP:04B3		       and     [byte ptr es:Y_Flag], 0EFh ; (ESCAPE) Clear bit 4 ; ~10h
TRANGROUP:04B9		       jmp     short ccydp12
TRANGROUP:04BB ; ---------------------------------------------------------------------------
TRANGROUP:04BB
TRANGROUP:04BB ccydp9:				       ; ...
TRANGROUP:04BB		       cmp     al, 41h ; 'A'
TRANGROUP:04BD		       jb      short ccydp13
TRANGROUP:04BF		       and     al, 0DFh
TRANGROUP:04C1
TRANGROUP:04C1 ccydp13:				       ; ...
TRANGROUP:04C1		       cmp     al, ch
TRANGROUP:04C3		       jnz     short ccydp10
TRANGROUP:04C5		       stc
TRANGROUP:04C6		       jmp     short ccydp11   ; cf = 1	-> overwrite NO	answer
TRANGROUP:04C8 ; ---------------------------------------------------------------------------
TRANGROUP:04C8
TRANGROUP:04C8 ccydp10:				       ; ...
TRANGROUP:04C8		       cmp     al, cl
TRANGROUP:04CA		       jnz     short ccydp7
TRANGROUP:04CC
TRANGROUP:04CC ccydp11:				       ; ...
TRANGROUP:04CC		       pushf
TRANGROUP:04CD		       mov     dl, al
TRANGROUP:04CF		       mov     ah, 2
TRANGROUP:04D1		       int     21h	       ; DOS - DISPLAY OUTPUT
TRANGROUP:04D1					       ; DL = character	to send	to standard output
TRANGROUP:04D3		       popf
TRANGROUP:04D4
TRANGROUP:04D4 ccydp12:				       ; ...
TRANGROUP:04D4		       pushf		       ; cf = 0	-> overwrite YES answer
TRANGROUP:04D5		       call    CRLF2
TRANGROUP:04D8		       popf
TRANGROUP:04D9		       pop     es
TRANGROUP:04DA		       retn
TRANGROUP:04DA endp	       get_cox_y_n_opt
TRANGROUP:04DA
TRANGROUP:04DB
TRANGROUP:04DB ; =============== S U B R O U T I N E =======================================
TRANGROUP:04DB
TRANGROUP:04DB
TRANGROUP:04DB proc	       ROM_SCAN	near	       ; ...
TRANGROUP:04DB		       push    es
TRANGROUP:04DC		       push    si
TRANGROUP:04DD		       push    di
TRANGROUP:04DE		       push    cx
TRANGROUP:04DF		       push    ax
TRANGROUP:04E0		       push    bx
TRANGROUP:04E1		       mov     ax, 0F000h
TRANGROUP:04E4		       mov     es, ax
TRANGROUP:04E6		       assume es:nothing
TRANGROUP:04E6		       cmp     [byte ptr es:0FFFEh], 0FDh ; check for PC Jr signature in rom
TRANGROUP:04EC		       jz      short SCAN_IT
TRANGROUP:04EE
TRANGROUP:04EE NO_ROM:				       ; ...
TRANGROUP:04EE		       clc
TRANGROUP:04EF
TRANGROUP:04EF ROM_RET:				       ; ...
TRANGROUP:04EF		       pop     bx
TRANGROUP:04F0		       pop     ax
TRANGROUP:04F1		       pop     cx
TRANGROUP:04F2		       pop     di
TRANGROUP:04F3		       pop     si
TRANGROUP:04F4		       pop     es
TRANGROUP:04F5		       assume es:nothing
TRANGROUP:04F5		       retn
TRANGROUP:04F6 ; ---------------------------------------------------------------------------
TRANGROUP:04F6
TRANGROUP:04F6 SCAN_IT:				       ; ...
TRANGROUP:04F6		       mov     ax, 0C000h
TRANGROUP:04F9
TRANGROUP:04F9 SCAN_ONE:			       ; ...
TRANGROUP:04F9		       mov     es, ax
TRANGROUP:04FB		       assume es:nothing
TRANGROUP:04FB		       xor     di, di
TRANGROUP:04FD		       cmp     [word ptr es:di], 0AA55h
TRANGROUP:0502		       jz      short SCAN_LIST
TRANGROUP:0504		       add     ax, 80h
TRANGROUP:0507
TRANGROUP:0507 SCAN_END:			       ; ...
TRANGROUP:0507		       cmp     ax, 0F000h
TRANGROUP:050A		       jb      short SCAN_ONE
TRANGROUP:050C		       jmp     short NO_ROM
TRANGROUP:050E ; ---------------------------------------------------------------------------
TRANGROUP:050E
TRANGROUP:050E SCAN_LIST:			       ; ...
TRANGROUP:050E		       mov     bl, [es:di+2]   ; [es:di+ROM_HEADER.rom_length]
TRANGROUP:0512		       xor     bh, bh
TRANGROUP:0514		       shl     bx, 1
TRANGROUP:0516		       shl     bx, 1
TRANGROUP:0518		       add     bx, 7Fh
TRANGROUP:051B		       and     bx, 0FF80h      ; round to 2k
TRANGROUP:051E		       mov     di, 6	       ; ROM_HEADER.name_list
TRANGROUP:0521
TRANGROUP:0521 SCAN_NAME:			       ; ...
TRANGROUP:0521		       mov     cl, [es:di]     ; length	of name
TRANGROUP:0524		       inc     di	       ; point to name
TRANGROUP:0525		       xor     ch, ch
TRANGROUP:0527		       or      cx, cx
TRANGROUP:0529		       jnz     short SCAN_TEST
TRANGROUP:052B		       add     ax, bx
TRANGROUP:052D		       jmp     short SCAN_END
TRANGROUP:052F ; ---------------------------------------------------------------------------
TRANGROUP:052F
TRANGROUP:052F SCAN_TEST:			       ; ...
TRANGROUP:052F		       mov     si, dx
TRANGROUP:0531		       inc     si
TRANGROUP:0532		       repe cmpsb	       ; compare name
TRANGROUP:0534		       jz      short SCAN_FOUND	; success!
TRANGROUP:0536
TRANGROUP:0536 SCAN_NEXT:			       ; ...
TRANGROUP:0536		       add     di, cx
TRANGROUP:0538		       add     di, 3
TRANGROUP:053B		       jmp     short SCAN_NAME
TRANGROUP:053D ; ---------------------------------------------------------------------------
TRANGROUP:053D
TRANGROUP:053D SCAN_FOUND:			       ; ...
TRANGROUP:053D		       cmp     [byte ptr si], '?'
TRANGROUP:0540		       jz      short SCAN_SAVE
TRANGROUP:0542		       cmp     [byte ptr si], 20h ; ' '
TRANGROUP:0545		       jnz     short SCAN_NEXT
TRANGROUP:0547
TRANGROUP:0547 SCAN_SAVE:			       ; ...
TRANGROUP:0547		       mov     [cs:ROM_CS], es
TRANGROUP:054C		       mov     [cs:ROM_IP], di
TRANGROUP:0551		       stc
TRANGROUP:0552		       jmp     short ROM_RET
TRANGROUP:0552 endp	       ROM_SCAN
TRANGROUP:0552
TRANGROUP:0554 ; ---------------------------------------------------------------------------
TRANGROUP:0554 ; START OF FUNCTION CHUNK FOR LoadHigh
TRANGROUP:0554
TRANGROUP:0554 ROM_EXEC:			       ; ...
TRANGROUP:0554		       mov     bx, 0FFFFh
TRANGROUP:0557		       mov     ah, 48h
TRANGROUP:0559		       int     21h	       ; DOS - 2+ - ALLOCATE MEMORY
TRANGROUP:0559					       ; BX = number of	16-byte	paragraphs desired
TRANGROUP:055B		       mov     ah, 48h
TRANGROUP:055D		       int     21h	       ; DOS - 2+ - ALLOCATE MEMORY
TRANGROUP:055D					       ; BX = number of	16-byte	paragraphs desired
TRANGROUP:055F		       push    bx
TRANGROUP:0560		       push    ax
TRANGROUP:0561		       mov     ax, 2522h       ; (SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE
TRANGROUP:0564		       push    ds
TRANGROUP:0565		       mov     ds, [cs:RESSEG]
TRANGROUP:056A		       mov     dx, 0E34h
TRANGROUP:056D		       int     21h	       ; DOS - SET INTERRUPT VECTOR
TRANGROUP:056D					       ; AL = interrupt	number
TRANGROUP:056D					       ; DS:DX = new vector to be used for specified interrupt
TRANGROUP:056F		       mov     dx, ds
TRANGROUP:0571		       mov     es, dx
TRANGROUP:0573		       assume es:nothing
TRANGROUP:0573		       pop     ds
TRANGROUP:0574		       pop     dx
TRANGROUP:0575		       mov     ah, 55h
TRANGROUP:0577		       int     21h	       ; DOS - 2+ internal - CREATE PSP
TRANGROUP:0577					       ; DX = segment number at	which to set up	PSP
TRANGROUP:0577					       ; SI = (DOS 3+) value to	place in memory	size field at DX:[0002h]
TRANGROUP:0579		       mov     ds, dx
TRANGROUP:057B		       mov     dx, 80h
TRANGROUP:057E		       mov     ah, 1Ah
TRANGROUP:0580		       int     21h	       ; DOS - SET DISK	TRANSFER AREA ADDRESS
TRANGROUP:0580					       ; DS:DX -> disk transfer	buffer
TRANGROUP:0582		       mov     ax, [es:543h]
TRANGROUP:0586		       mov     [ds:2Ch], ax    ; [PDB.ENVIRON]
TRANGROUP:0589		       pop     bx
TRANGROUP:058A		       mov     dx, ds
TRANGROUP:058C		       add     dx, bx
TRANGROUP:058E		       mov     [ds:2], dx      ; [PDB.BLOCK_LEN]
TRANGROUP:0592		       mov     dx, ds
TRANGROUP:0594		       dec     dx
TRANGROUP:0595		       mov     ds, dx
TRANGROUP:0597		       assume ds:nothing
TRANGROUP:0597		       inc     dx
TRANGROUP:0598		       mov     [ds:1], dx      ; [ARENA.owner]
TRANGROUP:059C		       mov     ds, dx
TRANGROUP:059E		       assume ds:nothing
TRANGROUP:059E		       cmp     bx, 1000h
TRANGROUP:05A2		       jb      short GOT_STACK
TRANGROUP:05A4		       xor     bx, bx
TRANGROUP:05A6
TRANGROUP:05A6 GOT_STACK:			       ; ...
TRANGROUP:05A6		       mov     cl, 4
TRANGROUP:05A8		       shl     bx, cl
TRANGROUP:05AA		       mov     dx, ds
TRANGROUP:05AC		       mov     ss, dx
TRANGROUP:05AE		       assume ss:nothing
TRANGROUP:05AE		       mov     sp, bx
TRANGROUP:05B0		       xor     ax, ax
TRANGROUP:05B2		       push    ax
TRANGROUP:05B3		       not     ax
TRANGROUP:05B5		       push    [cs:ROM_CS]
TRANGROUP:05BA		       push    [cs:ROM_IP]
TRANGROUP:05BF		       mov     es, dx
TRANGROUP:05C1		       retf
TRANGROUP:05C1 ; END OF	FUNCTION CHUNK FOR LoadHigh
TRANGROUP:05C2
TRANGROUP:05C2 ; =============== S U B R O U T I N E =======================================
TRANGROUP:05C2
TRANGROUP:05C2
TRANGROUP:05C2 proc	       int_21h_indirect	near   ; ...
TRANGROUP:05C2		       push    ds	       ; (*)
TRANGROUP:05C3		       pushf		       ; (**)
TRANGROUP:05C4		       push    bx
TRANGROUP:05C5		       xor     bx, bx
TRANGROUP:05C7		       mov     ds, bx	       ; 0
TRANGROUP:05C9		       assume ds:RESGROUP
TRANGROUP:05C9		       pop     bx
TRANGROUP:05CA		       push    cs	       ; simulate INT 21h
TRANGROUP:05CA					       ; stack:	ip, cs,	flags (**)
TRANGROUP:05CB		       call    near ptr	INT21h_fcall ; call INT21h_fcall
TRANGROUP:05CE		       retn    2	       ; discard ds (*)	on top of stack
TRANGROUP:05CE endp	       int_21h_indirect
TRANGROUP:05CE
TRANGROUP:05D1
TRANGROUP:05D1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:05D1
TRANGROUP:05D1
TRANGROUP:05D1 proc	       INT21h_fcall far	       ; ...
TRANGROUP:05D1		       push    [word ptr ds:86h] ; INT 21h segment
TRANGROUP:05D5		       push    [word ptr ds:84h] ; INT 21h offset
TRANGROUP:05D9		       push    bp
TRANGROUP:05DA		       mov     bp, sp
TRANGROUP:05DC		       mov     ds, [word ptr bp+12] ; DS (*) in	stack
TRANGROUP:05DF		       assume ds:nothing
TRANGROUP:05DF		       push    [word ptr bp+14]	; return addr of the caller of INT21h_fcall
TRANGROUP:05E2		       pop     [word ptr bp+12]	; return address from INT 21h
TRANGROUP:05E5		       pop     bp
TRANGROUP:05E6		       cli
TRANGROUP:05E7		       retf
TRANGROUP:05E7 endp	       INT21h_fcall
TRANGROUP:05E7
TRANGROUP:05E8
TRANGROUP:05E8 ; =============== S U B R O U T I N E =======================================
TRANGROUP:05E8
TRANGROUP:05E8
TRANGROUP:05E8 proc	       int_2Fh_indirect	near   ; ...
TRANGROUP:05E8		       push    ds
TRANGROUP:05E9		       push    bx
TRANGROUP:05EA		       xor     bx, bx
TRANGROUP:05EC		       mov     ds, bx
TRANGROUP:05EE		       assume ds:RESGROUP
TRANGROUP:05EE		       pop     bx
TRANGROUP:05EF		       pushf
TRANGROUP:05F0		       cli
TRANGROUP:05F1		       call    [dword ptr ds:0BCh] ; call far [4*2Fh] ;	INT 2Fh	handler
TRANGROUP:05F5		       pop     ds
TRANGROUP:05F6		       assume ds:nothing
TRANGROUP:05F6		       retn
TRANGROUP:05F6 endp	       int_2Fh_indirect
TRANGROUP:05F6
TRANGROUP:05F7
TRANGROUP:05F7 ; =============== S U B R O U T I N E =======================================
TRANGROUP:05F7
TRANGROUP:05F7
TRANGROUP:05F7 proc	       PROMPTBAT near	       ; ...
TRANGROUP:05F7
TRANGROUP:05F7 ; FUNCTION CHUNK	AT TRANGROUP:0100 SIZE 000002AB	BYTES
TRANGROUP:05F7 ; FUNCTION CHUNK	AT TRANGROUP:041A SIZE 0000001E	BYTES
TRANGROUP:05F7 ; FUNCTION CHUNK	AT TRANGROUP:0EE9 SIZE 0000015C	BYTES
TRANGROUP:05F7 ; FUNCTION CHUNK	AT TRANGROUP:2600 SIZE 00000048	BYTES
TRANGROUP:05F7 ; FUNCTION CHUNK	AT TRANGROUP:2C7B SIZE 00000006	BYTES
TRANGROUP:05F7 ; FUNCTION CHUNK	AT TRANGROUP:3271 SIZE 00000173	BYTES
TRANGROUP:05F7
TRANGROUP:05F7		       call    BATOPEN
TRANGROUP:05FA		       jb      short PROMPTBAT1
TRANGROUP:05FC		       retn
TRANGROUP:05FD ; ---------------------------------------------------------------------------
TRANGROUP:05FD
TRANGROUP:05FD PROMPTBAT1:			       ; ...
TRANGROUP:05FD		       cmp     dx, 2	       ; ERROR_FILE_NOT_FOUND
TRANGROUP:0600		       jz      short BAT_REMCHECK
TRANGROUP:0602		       cmp     dx, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:0605		       jz      short BAT_REMCHECK
TRANGROUP:0607		       call    output_batch_name
TRANGROUP:060A		       jmp     short BATDIE
TRANGROUP:060C ; ---------------------------------------------------------------------------
TRANGROUP:060C
TRANGROUP:060C BAT_REMCHECK:			       ; ...
TRANGROUP:060C		       call    [cs:RCH_ADDR]   ; call far [cs:RCH_ADDR]
TRANGROUP:0611		       jz      short ASKFORBAT
TRANGROUP:0613		       call    FOROFF
TRANGROUP:0616		       call    PipeOff
TRANGROUP:0619		       mov     [ds:IfFlag], al
TRANGROUP:061C		       mov     dx, offset BADBAT_PTR
TRANGROUP:061F
TRANGROUP:061F BATDIE:				       ; ...
TRANGROUP:061F		       call    BATCHOFF
TRANGROUP:0622		       push    cs
TRANGROUP:0623		       pop     ds
TRANGROUP:0624		       assume ds:TRANGROUP
TRANGROUP:0624		       call    std_eprintf
TRANGROUP:0627		       jmp     TCOMMAND
TRANGROUP:062A ; ---------------------------------------------------------------------------
TRANGROUP:062A
TRANGROUP:062A ASKFORBAT:			       ; ...
TRANGROUP:062A		       push    ds
TRANGROUP:062B		       push    cs
TRANGROUP:062C		       pop     ds
TRANGROUP:062D		       mov     dx, offset NEEDBAT_PTR
TRANGROUP:0630		       call    std_eprintf
TRANGROUP:0633		       mov     dx, offset PAUSEMES_PTR
TRANGROUP:0636		       call    std_eprintf
TRANGROUP:0639
TRANGROUP:0639 loc_2EC9:			       ; get a keystroke and flush queue
TRANGROUP:0639		       call    GETKEYSTROKE
TRANGROUP:063C		       pop     ds
TRANGROUP:063D		       assume ds:nothing
TRANGROUP:063D
TRANGROUP:063D loc_2ECD:
TRANGROUP:063D		       jmp     short PROMPTBAT
TRANGROUP:063D endp	       PROMPTBAT
TRANGROUP:063D
TRANGROUP:063F
TRANGROUP:063F ; =============== S U B R O U T I N E =======================================
TRANGROUP:063F
TRANGROUP:063F
TRANGROUP:063F proc	       output_batch_name near  ; ...
TRANGROUP:063F		       push    ds
TRANGROUP:0640
TRANGROUP:0640 loc_2ED0:
TRANGROUP:0640		       mov     ds, [ds:Batch]
TRANGROUP:0644		       mov     si, 20h	       ; BATCHSEGMENT.BatFile
TRANGROUP:0647		       call    dstrlen
TRANGROUP:064A		       mov     di, offset BWDBUF
TRANGROUP:064D		       rep movsb
TRANGROUP:064F		       push    cs
TRANGROUP:0650		       pop     ds
TRANGROUP:0651		       assume ds:TRANGROUP
TRANGROUP:0651		       mov     [extend_buf_ptr], dx
TRANGROUP:0655		       mov     [msg_disp_class], 1 ; ext_msg_class
TRANGROUP:065A		       mov     dx, offset extend_buf_ptr
TRANGROUP:065D		       mov     [string_ptr_2], offset BWDBUF
TRANGROUP:0663		       mov     [extend_buf_sub], 1 ; one_subst
TRANGROUP:0668		       pop     ds
TRANGROUP:0669		       assume ds:nothing
TRANGROUP:0669		       retn
TRANGROUP:0669 endp	       output_batch_name
TRANGROUP:0669
TRANGROUP:066A
TRANGROUP:066A ; =============== S U B R O U T I N E =======================================
TRANGROUP:066A
TRANGROUP:066A
TRANGROUP:066A proc	       GETKEYSTROKE near       ; ...
TRANGROUP:066A		       push    dx
TRANGROUP:066B		       mov     ax, 6302h       ; (ECS_call SHL 8) OR GetInterimMode
TRANGROUP:066E		       int     21h	       ; DOS - 3.2+ only - GET KOREAN (HONGEUL)	INPUT MODE
TRANGROUP:0670		       push    dx
TRANGROUP:0671		       mov     ax, 6301h       ; (ECS_call SHL 8) OR SetInterimMode
TRANGROUP:0674		       mov     dl, 1
TRANGROUP:0676		       int     21h	       ; DOS - 3.2+ only - SET KOREAN (HONGEUL)	INPUT MODE
TRANGROUP:0676					       ; DL = new mode
TRANGROUP:0676					       ; 00h return only full characters on DOS	keyboard input functions
TRANGROUP:0676					       ; 01h return partially-formed characters	also
TRANGROUP:0678		       mov     ax, 0C08h       ; (STD_CON_INPUT_FLUSH SHL 8) OR	STD_CON_INPUT_no_echo
TRANGROUP:067B		       int     21h	       ; DOS - CLEAR KEYBOARD BUFFER
TRANGROUP:067B					       ; AL must be 01h, 06h, 07h, 08h,	or 0Ah.
TRANGROUP:067D		       mov     ax, 0C00h       ; (STD_CON_INPUT_FLUSH SHL 8) + 0
TRANGROUP:0680		       int     21h	       ; DOS - CLEAR KEYBOARD BUFFER
TRANGROUP:0680					       ; AL must be 01h, 06h, 07h, 08h,	or 0Ah.
TRANGROUP:0682		       mov     ax, 6301h       ; (ECS_call SHL 8) OR SetInterimMode
TRANGROUP:0685		       pop     dx
TRANGROUP:0686		       int     21h	       ; DOS - 3.2+ only - SET KOREAN (HONGEUL)	INPUT MODE
TRANGROUP:0686					       ; DL = new mode
TRANGROUP:0686					       ; 00h return only full characters on DOS	keyboard input functions
TRANGROUP:0686					       ; 01h return partially-formed characters	also
TRANGROUP:0688		       pop     dx
TRANGROUP:0689		       retn
TRANGROUP:0689 endp	       GETKEYSTROKE
TRANGROUP:0689
TRANGROUP:068A
TRANGROUP:068A ; =============== S U B R O U T I N E =======================================
TRANGROUP:068A
TRANGROUP:068A
TRANGROUP:068A proc	       READBAT near	       ; ...
TRANGROUP:068A		       mov     [ds:Suppress], 1	; YES_ECHO
TRANGROUP:068F		       test    [ds:Batch_Abort], 0FFh
TRANGROUP:0694		       jnz     short TRYING_TO_ABORT
TRANGROUP:0696		       mov     [ds:In_Batch], 1	; set flag to indicate batch job
TRANGROUP:069B		       push    ds
TRANGROUP:069C		       mov     ds, [ds:Batch]
TRANGROUP:06A0		       cmp     [byte ptr ds:2],	0 ; [BATCHSEGMENT.BatchEOF]
TRANGROUP:06A5		       pop     ds
TRANGROUP:06A6		       jz      short CONTBAT
TRANGROUP:06A8		       call    GETBATBYT
TRANGROUP:06AB		       mov     [es:COMBUF+2], al
TRANGROUP:06AF		       call    CRLF2
TRANGROUP:06B2		       retn
TRANGROUP:06B3 ; ---------------------------------------------------------------------------
TRANGROUP:06B3
TRANGROUP:06B3 CONTBAT:				       ; ...
TRANGROUP:06B3		       call    PROMPTBAT
TRANGROUP:06B6
TRANGROUP:06B6 TRYING_TO_ABORT:			       ; ...
TRANGROUP:06B6		       mov     di, (offset COMBUF+2)
TRANGROUP:06B9
TRANGROUP:06B9 TESTNOP:				       ; ...
TRANGROUP:06B9		       mov     ax, ds
TRANGROUP:06BB		       mov     ds, [ds:Batch]
TRANGROUP:06BF		       push    [word ptr ds:8] ; [BATCHSEGMENT.BatSeek]
TRANGROUP:06C3		       push    [word ptr ds:0Ah] ; [BATCHSEGMENT.BatSeek+2]
TRANGROUP:06C7		       mov     ds, ax
TRANGROUP:06C9		       call    SKIPDELIM
TRANGROUP:06CC		       cmp     al, 3Ah ; ':'
TRANGROUP:06CE		       pop     cx
TRANGROUP:06CF		       pop     dx
TRANGROUP:06D0		       jz      short NOPLINE
TRANGROUP:06D2		       test    [ds:Batch], 0FFFFh
TRANGROUP:06D8		       jz      short RDBAT
TRANGROUP:06DA		       cmp     al, 40h ; '@'   ; No_Echo_Char
TRANGROUP:06DC		       jnz     short SET_BAT_POS
TRANGROUP:06DE		       mov     [ds:Suppress], 0	; NO_ECHO
TRANGROUP:06E3		       jmp     short RDBAT
TRANGROUP:06E5 ; ---------------------------------------------------------------------------
TRANGROUP:06E5
TRANGROUP:06E5 SET_BAT_POS:			       ; ...
TRANGROUP:06E5		       push    ds
TRANGROUP:06E6		       mov     ds, [ds:Batch]
TRANGROUP:06EA		       mov     [ds:8], dx      ; [BATCHSEGMENT.BatSeek]
TRANGROUP:06EE		       mov     [ds:0Ah], cx    ; [BATCHSEGMENT.BatSeek+2]
TRANGROUP:06F2		       pop     ds
TRANGROUP:06F3		       mov     ax, 4200h       ; (LSEEK*256) ; seek back
TRANGROUP:06F6		       call    int_21h_indirect
TRANGROUP:06F9		       mov     [es:BATBUFPOS], 0FFFFh ;	-1
TRANGROUP:0700		       xor     cx, cx
TRANGROUP:0702		       jmp     short RDBAT
TRANGROUP:0704 ; ---------------------------------------------------------------------------
TRANGROUP:0704
TRANGROUP:0704 NOPLINE:				       ; ...
TRANGROUP:0704		       call    SKIPTOEOL
TRANGROUP:0707		       call    GETBATBYT
TRANGROUP:070A		       test    [ds:Batch], 0FFFFh
TRANGROUP:0710		       jnz     short TESTNOP
TRANGROUP:0712
TRANGROUP:0712 READBAT_RETN:			       ; ...
TRANGROUP:0712		       retn
TRANGROUP:0713 ; ---------------------------------------------------------------------------
TRANGROUP:0713
TRANGROUP:0713 RDBAT:				       ; ...
TRANGROUP:0713		       call    GETBATBYT
TRANGROUP:0716		       inc     cx
TRANGROUP:0717		       call    testkanj
TRANGROUP:071A		       jz      short RDBAT1
TRANGROUP:071C		       cmp     cx, 127	       ; COMBUFLEN-1
TRANGROUP:071F		       jnb     short TOOLONG
TRANGROUP:0721		       stosb
TRANGROUP:0722		       call    GETBATBYT
TRANGROUP:0725		       inc     cx
TRANGROUP:0726		       jmp     short SAVBATBYT
TRANGROUP:0728 ; ---------------------------------------------------------------------------
TRANGROUP:0728
TRANGROUP:0728 RDBAT1:				       ; ...
TRANGROUP:0728		       cmp     cx, 128	       ; COMBUFLEN
TRANGROUP:072C		       jnb     short TOOLONG
TRANGROUP:072E		       cmp     al, 25h ; '%'
TRANGROUP:0730		       jz      short NEEDPARM
TRANGROUP:0732
TRANGROUP:0732 SAVBATBYT:			       ; ...
TRANGROUP:0732		       stosb
TRANGROUP:0733		       cmp     al, 0Dh
TRANGROUP:0735		       jnz     short RDBAT
TRANGROUP:0737
TRANGROUP:0737 FOUND_EOL:			       ; ...
TRANGROUP:0737		       sub     di, (offset COMBUF+3)
TRANGROUP:073B		       mov     ax, di
TRANGROUP:073D		       mov     [es:COMBUF+1], al ; Set length of line
TRANGROUP:0741		       call    GETBATBYT       ; Eat linefeed
TRANGROUP:0744		       call    BATCLOSE
TRANGROUP:0747		       cmp     [ds:Suppress], 0	; NO_ECHO
TRANGROUP:074C		       jz      short RESET
TRANGROUP:074E		       test    [ds:EchoFlag], 1
TRANGROUP:0753		       jnz     short TRY_NEXTFLAG
TRANGROUP:0755
TRANGROUP:0755 RESET:				       ; ...
TRANGROUP:0755		       push    cs
TRANGROUP:0756		       pop     ds
TRANGROUP:0757		       assume ds:TRANGROUP
TRANGROUP:0757		       jz      short READBAT_RETN
TRANGROUP:0759
TRANGROUP:0759 TRY_NEXTFLAG:			       ; ...
TRANGROUP:0759		       cmp     [ds:NullFlag], 1	; nullcommand
TRANGROUP:075E		       jz      short NO_CRLF_PRINT
TRANGROUP:0760		       call    CRLF2
TRANGROUP:0763
TRANGROUP:0763 NO_CRLF_PRINT:			       ; ...
TRANGROUP:0763		       call    PRINT_PROMPT
TRANGROUP:0766		       push    cs
TRANGROUP:0767		       pop     ds
TRANGROUP:0768		       mov     dx, (offset COMBUF+2)
TRANGROUP:076B		       call    CRPRINT
TRANGROUP:076E		       call    CRLF2
TRANGROUP:0771		       retn
TRANGROUP:0772 ; ---------------------------------------------------------------------------
TRANGROUP:0772
TRANGROUP:0772 TOOLONG:				       ; ...
TRANGROUP:0772		       cmp     al, 0Dh
TRANGROUP:0774		       jz      short LTLCONT
TRANGROUP:0776		       call    SKIPTOEOL
TRANGROUP:0779
TRANGROUP:0779 LTLCONT:				       ; ...
TRANGROUP:0779		       stosb
TRANGROUP:077A		       jmp     short FOUND_EOL
TRANGROUP:077C ; ---------------------------------------------------------------------------
TRANGROUP:077C
TRANGROUP:077C NEEDPARM:			       ; ...
TRANGROUP:077C		       call    GETBATBYT
TRANGROUP:077F		       cmp     al, 25h ; '%'
TRANGROUP:0781		       jz      short SAVBATBYT
TRANGROUP:0783		       cmp     al, 0Dh
TRANGROUP:0785		       jz      short SAVBATBYT
TRANGROUP:0787		       sub     al, 30h ; '0'
TRANGROUP:0789		       jb      short NEEDENV
TRANGROUP:078B		       cmp     al, 9
TRANGROUP:078D		       ja      short NEEDENV
TRANGROUP:078F		       cbw
TRANGROUP:0790		       mov     bx, ax
TRANGROUP:0792		       shl     bx, 1
TRANGROUP:0794		       push    es
TRANGROUP:0795		       mov     es, [ds:Batch]
TRANGROUP:0799		       mov     si, [es:bx+0Ch] ; [es:bx+BATCHSEGMENT.BatParm]
TRANGROUP:079D		       pop     es
TRANGROUP:079E		       cmp     si, 0FFFFh
TRANGROUP:07A1		       jnz     short YES_THERE_IS
TRANGROUP:07A3		       jmp     RDBAT
TRANGROUP:07A6 ; ---------------------------------------------------------------------------
TRANGROUP:07A6
TRANGROUP:07A6 YES_THERE_IS:			       ; ...
TRANGROUP:07A6		       push    ds
TRANGROUP:07A7		       mov     ds, [ds:Batch]
TRANGROUP:07AB		       assume ds:nothing
TRANGROUP:07AB		       dec     cx
TRANGROUP:07AC
TRANGROUP:07AC COPYPARM:			       ; ...
TRANGROUP:07AC		       lodsb
TRANGROUP:07AD		       cmp     al, 0Dh
TRANGROUP:07AF		       jz      short ENDPARAM
TRANGROUP:07B1		       inc     cx
TRANGROUP:07B2		       cmp     cx, 128	       ; COMBUFLEN
TRANGROUP:07B6		       jnb     short LINETOOL
TRANGROUP:07B8		       stosb
TRANGROUP:07B9		       jmp     short COPYPARM
TRANGROUP:07BB ; ---------------------------------------------------------------------------
TRANGROUP:07BB
TRANGROUP:07BB LINETOOL:			       ; ...
TRANGROUP:07BB		       xor     al, al
TRANGROUP:07BD		       pop     ds
TRANGROUP:07BE		       jmp     short TOOLONG
TRANGROUP:07C0 ; ---------------------------------------------------------------------------
TRANGROUP:07C0
TRANGROUP:07C0 ENDPARAM:			       ; ...
TRANGROUP:07C0		       pop     ds
TRANGROUP:07C1		       jmp     RDBAT
TRANGROUP:07C4 ; ---------------------------------------------------------------------------
TRANGROUP:07C4
TRANGROUP:07C4 NEEDENV:				       ; ...
TRANGROUP:07C4		       dec     cx
TRANGROUP:07C5		       push    ds
TRANGROUP:07C6		       push    di
TRANGROUP:07C7		       mov     di, offset ID
TRANGROUP:07CA		       add     al, '0'
TRANGROUP:07CC		       stosb
TRANGROUP:07CD
TRANGROUP:07CD GETENV1:				       ; ...
TRANGROUP:07CD		       call    GETBATBYT
TRANGROUP:07D0		       stosb
TRANGROUP:07D1		       cmp     al, 0Dh
TRANGROUP:07D3		       jnz     short GETENV15
TRANGROUP:07D5		       mov     [byte ptr es:di-1], 0
TRANGROUP:07DA		       mov     si, offset ID
TRANGROUP:07DD		       pop     di
TRANGROUP:07DE		       push    cs
TRANGROUP:07DF		       pop     ds
TRANGROUP:07E0		       assume ds:TRANGROUP
TRANGROUP:07E0		       call    STRCPY
TRANGROUP:07E3		       jb      short LINETOOL
TRANGROUP:07E5		       pop     ds
TRANGROUP:07E6		       assume ds:nothing
TRANGROUP:07E6		       jmp     SAVBATBYT
TRANGROUP:07E9 ; ---------------------------------------------------------------------------
TRANGROUP:07E9
TRANGROUP:07E9 GETENV15:			       ; ...
TRANGROUP:07E9		       cmp     al, 25h ; '%'
TRANGROUP:07EB		       jnz     short GETENV1
TRANGROUP:07ED		       mov     al, 3Dh ; '='
TRANGROUP:07EF		       mov     [es:di-1], al
TRANGROUP:07F3		       mov     si, offset ID
TRANGROUP:07F6		       push    cs
TRANGROUP:07F7		       pop     ds
TRANGROUP:07F8		       assume ds:TRANGROUP
TRANGROUP:07F8		       push    cx
TRANGROUP:07F9		       call    find_name_in_environment
TRANGROUP:07FC		       pop     cx
TRANGROUP:07FD		       push    es
TRANGROUP:07FE		       pop     ds
TRANGROUP:07FF		       assume ds:nothing
TRANGROUP:07FF		       push    cs
TRANGROUP:0800		       pop     es
TRANGROUP:0801		       assume es:TRANGROUP
TRANGROUP:0801		       mov     si, di
TRANGROUP:0803		       pop     di
TRANGROUP:0804		       jb      short GETENV6
TRANGROUP:0806		       call    STRCPY
TRANGROUP:0809
TRANGROUP:0809 GETENV6:				       ; ...
TRANGROUP:0809		       pop     ds
TRANGROUP:080A		       jmp     RDBAT
TRANGROUP:080A endp	       READBAT
TRANGROUP:080A
TRANGROUP:080D
TRANGROUP:080D ; =============== S U B R O U T I N E =======================================
TRANGROUP:080D
TRANGROUP:080D
TRANGROUP:080D proc	       SKIPTOEOL near	       ; ...
TRANGROUP:080D		       test    [ds:Batch], 0FFFFh ; read from batch file until end of line
TRANGROUP:0813		       jnz     short SKIPTOEOL1
TRANGROUP:0815		       retn
TRANGROUP:0816 ; ---------------------------------------------------------------------------
TRANGROUP:0816
TRANGROUP:0816 SKIPTOEOL1:			       ; ...
TRANGROUP:0816		       call    GETBATBYT
TRANGROUP:0819		       cmp     al, 0Dh
TRANGROUP:081B		       jnz     short SKIPTOEOL
TRANGROUP:081D		       retn
TRANGROUP:081D endp	       SKIPTOEOL
TRANGROUP:081D
TRANGROUP:081E
TRANGROUP:081E ; =============== S U B R O U T I N E =======================================
TRANGROUP:081E
TRANGROUP:081E
TRANGROUP:081E proc	       FREE_TPA	near	       ; ...
TRANGROUP:081E		       push    es
TRANGROUP:081F		       mov     es, [ds:RESSEG]
TRANGROUP:0823		       assume es:nothing
TRANGROUP:0823		       mov     es, [es:Res_Tpa]
TRANGROUP:0828		       mov     ah, 49h	       ; DEALLOC
TRANGROUP:082A		       call    int_21h_indirect
TRANGROUP:082D		       pop     es
TRANGROUP:082E		       retn
TRANGROUP:082E endp	       FREE_TPA
TRANGROUP:082E
TRANGROUP:082F
TRANGROUP:082F ; =============== S U B R O U T I N E =======================================
TRANGROUP:082F
TRANGROUP:082F
TRANGROUP:082F proc	       ALLOC_TPA near	       ; ...
TRANGROUP:082F		       push    es
TRANGROUP:0830		       mov     es, [ds:RESSEG]
TRANGROUP:0834		       assume es:RESGROUP
TRANGROUP:0834		       mov     bx, 0FFFFh
TRANGROUP:0837		       mov     ah, 48h	       ; ALLOC
TRANGROUP:0839		       call    int_21h_indirect	; indirect call	to INT 21h handler
TRANGROUP:0839					       ; (by simulating	INT 21h	interrupt)
TRANGROUP:083C		       push    bx
TRANGROUP:083D		       mov     ah, 48h
TRANGROUP:083F		       call    int_21h_indirect
TRANGROUP:0842		       pop     bx
TRANGROUP:0843		       mov     [es:Res_Tpa], ax
TRANGROUP:0847		       mov     [ds:TRAN_TPA], ax
TRANGROUP:084A		       mov     dx, ax
TRANGROUP:084C		       and     ax, 0FFFh
TRANGROUP:084F		       jnz     short CALC_TPA
TRANGROUP:0851		       mov     ax, dx
TRANGROUP:0853		       and     ax, 0F000h
TRANGROUP:0856		       jnz     short NOROUND
TRANGROUP:0858
TRANGROUP:0858 CALC_TPA:			       ; ...
TRANGROUP:0858		       mov     ax, dx
TRANGROUP:085A		       and     ax, 0F000h
TRANGROUP:085D		       add     ax, 1000h
TRANGROUP:0860		       jb      short NOROUND
TRANGROUP:0862		       mov     dx, [es:Res_Tpa]
TRANGROUP:0867		       add     dx, bx
TRANGROUP:0869		       cmp     dx, ax
TRANGROUP:086B		       jb      short NOROUND
TRANGROUP:086D		       mov     bx, cs
TRANGROUP:086F		       cmp     bx, ax
TRANGROUP:0871		       jb      short NOROUND
TRANGROUP:0873		       sub     bx, ax
TRANGROUP:0875		       cmp     bx, 1000h
TRANGROUP:0879		       jnb     short ROUNDDONE
TRANGROUP:087B
TRANGROUP:087B NOROUND:				       ; ...
TRANGROUP:087B		       mov     ax, [es:Res_Tpa]
TRANGROUP:087F
TRANGROUP:087F ROUNDDONE:			       ; ...
TRANGROUP:087F		       mov     [es:Ltpa], ax
TRANGROUP:0883		       mov     [ds:TPA], ax
TRANGROUP:0886		       mov     bx, ax
TRANGROUP:0888		       mov     ax, cs
TRANGROUP:088A		       sub     ax, bx
TRANGROUP:088C		       push    bx
TRANGROUP:088D		       mov     bx, 16
TRANGROUP:0890		       mul     bx
TRANGROUP:0892		       pop     bx
TRANGROUP:0893		       or      dx, dx
TRANGROUP:0895		       jz      short SAVSIZ2
TRANGROUP:0897		       mov     ax, 0FFFFh      ; -1
TRANGROUP:089A
TRANGROUP:089A SAVSIZ2:				       ; ...
TRANGROUP:089A		       cmp     ax, 512
TRANGROUP:089D		       jbe     short GOTSIZE2
TRANGROUP:089F		       and     ax, 0FE00h      ; ~1FFh ; NOT 511
TRANGROUP:08A2
TRANGROUP:08A2 GOTSIZE2:			       ; ...
TRANGROUP:08A2		       mov     [ds:BYTCNT], ax
TRANGROUP:08A5		       pop     es
TRANGROUP:08A6		       assume es:nothing
TRANGROUP:08A6		       retn
TRANGROUP:08A6 endp	       ALLOC_TPA
TRANGROUP:08A6
TRANGROUP:08A7 ; ---------------------------------------------------------------------------
TRANGROUP:08A7
TRANGROUP:08A7 BATCOM:				       ; ...
TRANGROUP:08A7		       mov     es, [ds:RESSEG]
TRANGROUP:08AB		       assume es:RESGROUP
TRANGROUP:08AB		       cmp     [es:Call_Batch_Flag], 1 ; call_in_progress
TRANGROUP:08B1		       jz      short skip_ioset
TRANGROUP:08B3		       call    IOSET
TRANGROUP:08B6
TRANGROUP:08B6 skip_ioset:			       ; ...
TRANGROUP:08B6		       call    FREE_TPA
TRANGROUP:08B9		       cmp     [es:Call_Batch_Flag], 1
TRANGROUP:08BF		       jz      short GETECHO
TRANGROUP:08C1		       call    FOROFF
TRANGROUP:08C4
TRANGROUP:08C4 GETECHO:				       ; ...
TRANGROUP:08C4		       call    PipeOff
TRANGROUP:08C7		       mov     al, [es:EchoFlag]
TRANGROUP:08CB		       and     al, 1
TRANGROUP:08CD		       push    ax
TRANGROUP:08CE		       xor     ax, ax
TRANGROUP:08D0		       test    [es:Batch], 0FFFFh
TRANGROUP:08D7		       jz      short LEAVEBAT
TRANGROUP:08D9		       mov     ax, [es:Batch]
TRANGROUP:08DD		       cmp     [es:Call_Batch_Flag], 1 ; call_in_progress
TRANGROUP:08E3		       jz      short LEAVEBAT
TRANGROUP:08E5		       push    es
TRANGROUP:08E6		       mov     es, ax
TRANGROUP:08E8		       assume es:nothing
TRANGROUP:08E8		       mov     ax, [es:3]      ; [es:BATCHSEGMENT.BatLast]
TRANGROUP:08EC		       pop     es
TRANGROUP:08ED
TRANGROUP:08ED LEAVEBAT:			       ; ...
TRANGROUP:08ED		       push    ax
TRANGROUP:08EE		       cmp     [es:Call_Batch_Flag], 1
TRANGROUP:08F4		       jz      short STARTBAT
TRANGROUP:08F6		       call    BATCHOFF
TRANGROUP:08F9
TRANGROUP:08F9 STARTBAT:			       ; ...
TRANGROUP:08F9		       mov     [es:Call_Batch_Flag], 0
TRANGROUP:08FF		       mov     si, offset EXECPATH
TRANGROUP:0902		       mov     ax, 0B711h      ; AppendTruename
TRANGROUP:0905		       int     2Fh	       ; - Multiplex - DOS 4.0 APPEND -	SET RETURN FOUND NAME STATE
TRANGROUP:0907		       mov     ah, 4Eh	       ; Find_First
TRANGROUP:0909		       mov     dx, si
TRANGROUP:090B		       mov     cx, 13h	       ; search_attr
TRANGROUP:090E		       call    int_21h_indirect
TRANGROUP:0911		       call    dstrlen
TRANGROUP:0914		       mov     bx, cx
TRANGROUP:0916		       add     bx, 191	       ; 15+BATCHSEGMENT.SIZE+COMBUFLEN+15
TRANGROUP:091A		       push    cx
TRANGROUP:091B		       mov     cl, 4
TRANGROUP:091D		       shr     bx, cl
TRANGROUP:091F		       push    bx
TRANGROUP:0920		       mov     ah, 48h	       ; ALLOC
TRANGROUP:0922		       call    int_21h_indirect
TRANGROUP:0925		       pop     bx
TRANGROUP:0926		       jb      short MEM_ERROR
TRANGROUP:0928		       push    ax
TRANGROUP:0929		       add     ax, bx
TRANGROUP:092B		       add     ax, 20h
TRANGROUP:092E		       mov     bx, cs
TRANGROUP:0930		       mov     dx, 0AA9Ah      ; TRANSPACEEND
TRANGROUP:0933		       add     dx, 0Fh	       ; TRANSPACEEND+15
TRANGROUP:0936		       shr     dx, cl
TRANGROUP:0938		       add     dx, bx
TRANGROUP:093A		       cmp     ax, bx
TRANGROUP:093C		       jb      short ENOUGH_MEM
TRANGROUP:093E		       cmp     ax, dx
TRANGROUP:0940		       ja      short ENOUGH_MEM
TRANGROUP:0942		       pop     ax
TRANGROUP:0943		       push    es
TRANGROUP:0944		       mov     es, ax
TRANGROUP:0946		       mov     ax, 4900h       ; DEALLOC*256
TRANGROUP:0946					       ; deallocate the	batch segment
TRANGROUP:0949		       call    int_21h_indirect
TRANGROUP:094C		       pop     es
TRANGROUP:094D
TRANGROUP:094D MEM_ERROR:			       ; ...
TRANGROUP:094D		       jmp     NO_MEMORY
TRANGROUP:0950 ; ---------------------------------------------------------------------------
TRANGROUP:0950
TRANGROUP:0950 ENOUGH_MEM:			       ; ...
TRANGROUP:0950		       pop     ax
TRANGROUP:0951		       mov     [es:Batch], ax
TRANGROUP:0955		       call    ALLOC_TPA
TRANGROUP:0958		       pop     dx
TRANGROUP:0959		       pop     ax
TRANGROUP:095A		       inc     [es:Nest]
TRANGROUP:095F		       push    es
TRANGROUP:0960		       mov     es, [es:Batch]
TRANGROUP:0965		       mov     [byte ptr es:0],	0 ; [es:BATCHSEGMENT.BatType],BATCHTYPE
TRANGROUP:096B		       mov     [es:3], ax      ; [es:BATCHSEGMENT.BatLast]
TRANGROUP:096F		       push    ds
TRANGROUP:0970		       mov     ds, [ds:RESSEG]
TRANGROUP:0974		       assume ds:RESGROUP
TRANGROUP:0974		       xor     ax, ax
TRANGROUP:0976		       mov     bl, [ForFlag]
TRANGROUP:097A		       mov     [es:7], bl      ; [es:BATCHSEGMENT.BatForFlag]
TRANGROUP:097F		       test    bl, 0FFh
TRANGROUP:0982		       jz      short FOR_NOT_ON
TRANGROUP:0984		       mov     ax, [ForPtr]
TRANGROUP:0987		       mov     [ForFlag], 0    ; byte
TRANGROUP:098C
TRANGROUP:098C FOR_NOT_ON:			       ; ...
TRANGROUP:098C		       mov     [es:5], ax      ; [es:BATCHSEGMENT.BatForPtr]
TRANGROUP:0990		       xor     ax, ax
TRANGROUP:0992		       mov     [ForPtr], ax
TRANGROUP:0995		       mov     bl, [EchoFlag]
TRANGROUP:0999		       pop     ds
TRANGROUP:099A		       assume ds:nothing
TRANGROUP:099A		       mov     [es:1], bl      ; [es:BATCHSEGMENT.BatEchoFlag]
TRANGROUP:099F		       mov     [byte ptr es:2],	0 ; [es:BATCHSEGMENT.BatchEOF]
TRANGROUP:09A5		       mov     [es:8], ax      ; [es:BATCHSEGMENT.BatSeek]
TRANGROUP:09A9		       mov     [es:0Ah], ax    ; [es:BATCHSEGMENT.BatSeek+2]
TRANGROUP:09AD		       dec     ax
TRANGROUP:09AE		       mov     di, 12	       ; BATCHSEGMENT.BatParm
TRANGROUP:09B1		       mov     bx, di
TRANGROUP:09B3		       mov     cx, 10
TRANGROUP:09B6		       rep stosw
TRANGROUP:09B8		       mov     cx, dx
TRANGROUP:09BA		       rep movsb
TRANGROUP:09BC		       mov     si, (offset COMBUF+2)
TRANGROUP:09BF		       mov     cx, 10
TRANGROUP:09C2
TRANGROUP:09C2 EACHPARM:			       ; ...
TRANGROUP:09C2		       call    scanoff
TRANGROUP:09C5		       cmp     al, 0Dh
TRANGROUP:09C7		       jz      short HAVPARM
TRANGROUP:09C9		       jcxz    short MOVPARM
TRANGROUP:09CB		       mov     [es:bx],	di
TRANGROUP:09CE		       add     bx, 2
TRANGROUP:09D1
TRANGROUP:09D1 MOVPARM:				       ; ...
TRANGROUP:09D1		       lodsb
TRANGROUP:09D2		       call    DELIM
TRANGROUP:09D5		       jz      short ENDPARM
TRANGROUP:09D7		       stosb
TRANGROUP:09D8		       cmp     al, 0Dh
TRANGROUP:09DA		       jz      short HAVPARM
TRANGROUP:09DC		       jmp     short MOVPARM
TRANGROUP:09DE ; ---------------------------------------------------------------------------
TRANGROUP:09DE
TRANGROUP:09DE ENDPARM:				       ; ...
TRANGROUP:09DE		       mov     al, 0Dh
TRANGROUP:09E0		       stosb
TRANGROUP:09E1		       jcxz    short EACHPARM
TRANGROUP:09E3		       dec     cx
TRANGROUP:09E4		       jmp     short EACHPARM
TRANGROUP:09E6 ; ---------------------------------------------------------------------------
TRANGROUP:09E6
TRANGROUP:09E6 HAVPARM:				       ; ...
TRANGROUP:09E6		       xor     al, al
TRANGROUP:09E8		       stosb
TRANGROUP:09E9		       lea     bx, [di+15]
TRANGROUP:09EC		       mov     cl, 4
TRANGROUP:09EE		       shr     bx, cl
TRANGROUP:09F0		       mov     ah, 4Ah	       ; SETBLOCK
TRANGROUP:09F2		       call    int_21h_indirect	; ADJUST MEMORY	BLOCK SIZE (SETBLOCK)
TRANGROUP:09F2					       ; ES = segment address of block to change
TRANGROUP:09F2					       ; BX = new size in paragraphs
TRANGROUP:09F5		       pop     es
TRANGROUP:09F6		       push    es
TRANGROUP:09F7		       pop     ds
TRANGROUP:09F8		       cmp     [ds:SingleCom], 0FFFFh
TRANGROUP:09FD		       jnz     short NOBATSING
TRANGROUP:09FF		       mov     [ds:SingleCom], 0FFF0h ;	Flag single command BATCH job
TRANGROUP:0A05
TRANGROUP:0A05 NOBATSING:			       ; ...
TRANGROUP:0A05		       pop     ax
TRANGROUP:0A06		       mov     [ds:EchoFlag], al
TRANGROUP:0A09		       jmp     TCOMMAND
TRANGROUP:0A0C ; ---------------------------------------------------------------------------
TRANGROUP:0A0C
TRANGROUP:0A0C NO_MEMORY:			       ; ...
TRANGROUP:0A0C		       pop     dx
TRANGROUP:0A0D		       pop     ax
TRANGROUP:0A0E		       pop     ax
TRANGROUP:0A0F		       call    ALLOC_TPA
TRANGROUP:0A12		       mov     [ds:msg_disp_class], 1 ;	ext_msg_class
TRANGROUP:0A17		       mov     dx, offset extend_buf_ptr
TRANGROUP:0A1A		       mov     [ds:extend_buf_ptr], 8 ;	ERROR_NOT_ENOUGH_MEMORY
TRANGROUP:0A20		       jmp     cerror
TRANGROUP:0A23
TRANGROUP:0A23 ; =============== S U B R O U T I N E =======================================
TRANGROUP:0A23
TRANGROUP:0A23
TRANGROUP:0A23 proc	       BATCHOFF	near	       ; ...
TRANGROUP:0A23		       push    ax
TRANGROUP:0A24		       push    es
TRANGROUP:0A25		       push    ds
TRANGROUP:0A26		       push    bx
TRANGROUP:0A27		       mov     es, [cs:RESSEG]
TRANGROUP:0A2C		       assume es:RESGROUP
TRANGROUP:0A2C		       mov     ds, [cs:RESSEG]
TRANGROUP:0A31		       assume ds:RESGROUP
TRANGROUP:0A31		       mov     ax, [Batch]
TRANGROUP:0A34		       or      ax, ax
TRANGROUP:0A36		       jz      short NOTFREE
TRANGROUP:0A38		       push    es
TRANGROUP:0A39		       mov     es, ax
TRANGROUP:0A3B		       assume es:nothing
TRANGROUP:0A3B		       test    [EchoFlag], 1
TRANGROUP:0A40		       jnz     short ECHO_LAST_LINE
TRANGROUP:0A42		       mov     [Suppress], 0   ; NO_ECHO
TRANGROUP:0A47
TRANGROUP:0A47 ECHO_LAST_LINE:			       ; ...
TRANGROUP:0A47		       mov     bl, [es:1]      ; [es:BATCHSEGMENT.BatEchoFlag]
TRANGROUP:0A4C		       mov     [EchoFlag], bl
TRANGROUP:0A50		       mov     bx, [es:5]      ; [es:BATCHSEGMENT.BatForPtr]
TRANGROUP:0A55		       mov     [ForPtr], bx
TRANGROUP:0A59		       mov     bl, [es:7]      ; [es:BATCHSEGMENT.BatForFlag]
TRANGROUP:0A5E		       mov     [ForFlag], bl
TRANGROUP:0A62		       mov     bx, [es:3]      ; [es:BATCHSEGMENT.BatLast]
TRANGROUP:0A67		       mov     ah, 49h	       ; DEALLOC
TRANGROUP:0A69		       call    int_21h_indirect	; FREE MEMORY
TRANGROUP:0A69					       ; ES = segment address of area to be freed
TRANGROUP:0A6C		       pop     es
TRANGROUP:0A6D		       mov     [Next_Batch], bx
TRANGROUP:0A71		       dec     [es:Nest]
TRANGROUP:0A76		       xor     ax, ax
TRANGROUP:0A78		       mov     [Batch],	ax
TRANGROUP:0A7B
TRANGROUP:0A7B NOTFREE:				       ; ...
TRANGROUP:0A7B		       pop     bx
TRANGROUP:0A7C		       pop     ds
TRANGROUP:0A7D		       assume ds:nothing
TRANGROUP:0A7D		       pop     es
TRANGROUP:0A7E		       pop     ax
TRANGROUP:0A7F		       retn
TRANGROUP:0A7F endp	       BATCHOFF
TRANGROUP:0A7F
TRANGROUP:0A80
TRANGROUP:0A80 ; =============== S U B R O U T I N E =======================================
TRANGROUP:0A80
TRANGROUP:0A80
TRANGROUP:0A80 proc	       STRCPY near	       ; ...
TRANGROUP:0A80		       push    ax
TRANGROUP:0A81
TRANGROUP:0A81 ccycle:				       ; ...
TRANGROUP:0A81		       lodsb
TRANGROUP:0A82		       inc     cx
TRANGROUP:0A83		       cmp     cx, 128	       ; COMBUFLEN
TRANGROUP:0A87		       jb      short ccopy
TRANGROUP:0A89		       stc
TRANGROUP:0A8A		       jmp     short ccend
TRANGROUP:0A8C ; ---------------------------------------------------------------------------
TRANGROUP:0A8C
TRANGROUP:0A8C ccopy:				       ; ...
TRANGROUP:0A8C		       stosb
TRANGROUP:0A8D		       or      al, al
TRANGROUP:0A8F		       jnz     short ccycle
TRANGROUP:0A91
TRANGROUP:0A91 ccend:				       ; ...
TRANGROUP:0A91		       dec     cx
TRANGROUP:0A92		       dec     di
TRANGROUP:0A93		       pop     ax
TRANGROUP:0A94		       retn
TRANGROUP:0A94 endp	       STRCPY
TRANGROUP:0A94
TRANGROUP:0A95
TRANGROUP:0A95 ; =============== S U B R O U T I N E =======================================
TRANGROUP:0A95
TRANGROUP:0A95
TRANGROUP:0A95 proc	       GETBATBYT near	       ; ...
TRANGROUP:0A95		       push    bx
TRANGROUP:0A96		       push    cx
TRANGROUP:0A97		       push    ds
TRANGROUP:0A98		       test    [ds:Batch_Abort], 0FFh
TRANGROUP:0A9D		       jz      short getbatbyt1
TRANGROUP:0A9F		       jmp     BATEOF
TRANGROUP:0AA2 ; ---------------------------------------------------------------------------
TRANGROUP:0AA2
TRANGROUP:0AA2 getbatbyt1:			       ; ...
TRANGROUP:0AA2		       test    [ds:Batch], 0FFFFh
TRANGROUP:0AA8		       jnz     short getbatbyt2
TRANGROUP:0AAA		       jmp     BATEOF
TRANGROUP:0AAD ; ---------------------------------------------------------------------------
TRANGROUP:0AAD
TRANGROUP:0AAD getbatbyt2:			       ; ...
TRANGROUP:0AAD		       push    es
TRANGROUP:0AAE		       mov     es, [ds:Batch]
TRANGROUP:0AB2		       cmp     [byte ptr es:2],	0 ; [es:BATCHSEGMENT.BatchEOF]
TRANGROUP:0AB8		       jz      short not_eof
TRANGROUP:0ABA		       jmp     At_EOF
TRANGROUP:0ABD ; ---------------------------------------------------------------------------
TRANGROUP:0ABD
TRANGROUP:0ABD not_eof:				       ; ...
TRANGROUP:0ABD		       add     [word ptr es:8],	1 ; [es:BATCHSEGMENT.BatSeek]
TRANGROUP:0AC3		       adc     [word ptr es:0Ah], 0 ; [es:BATCHSEGMENT.BatSeek+2]
TRANGROUP:0AC9		       pop     es
TRANGROUP:0ACA		       mov     ax, cs
TRANGROUP:0ACC		       mov     ds, ax
TRANGROUP:0ACE		       assume ds:TRANGROUP
TRANGROUP:0ACE		       mov     bx, [BATBUFPOS]
TRANGROUP:0AD2		       cmp     bx, 0FFFFh
TRANGROUP:0AD5		       jnz     short UNBUF
TRANGROUP:0AD7		       mov     dx, offset BATBUF
TRANGROUP:0ADA		       mov     cx, [BATBUFLEN]
TRANGROUP:0ADE		       mov     bx, [BATHAND]
TRANGROUP:0AE2		       mov     ah, 3Fh	       ; READ
TRANGROUP:0AE4		       call    int_21h_indirect
TRANGROUP:0AE7		       jnb     short bat_read_ok
TRANGROUP:0AE9		       call    get_ext_error_number
TRANGROUP:0AEC		       push    ds
TRANGROUP:0AED		       mov     ds, [RESSEG]
TRANGROUP:0AF1		       assume ds:RESGROUP
TRANGROUP:0AF1		       mov     dx, ax
TRANGROUP:0AF3		       call    output_batch_name
TRANGROUP:0AF6		       pop     ds
TRANGROUP:0AF7		       assume ds:nothing
TRANGROUP:0AF7		       call    std_eprintf
TRANGROUP:0AFA		       mov     [ds:COMBUF+2], 0Dh ; END_OF_LINE_IN
TRANGROUP:0AFF		       mov     [ds:COMBUF+3], 0	; END_OF_LINE_OUT
TRANGROUP:0B04		       mov     ds, [ds:RESSEG]
TRANGROUP:0B08		       jmp     short BATEOF
TRANGROUP:0B0A ; ---------------------------------------------------------------------------
TRANGROUP:0B0A
TRANGROUP:0B0A bat_read_ok:			       ; ...
TRANGROUP:0B0A		       mov     cx, ax
TRANGROUP:0B0C		       jcxz    short BATEOFDS
TRANGROUP:0B0E		       mov     [ds:BATBUFEND], cx
TRANGROUP:0B12		       xor     bx, bx
TRANGROUP:0B14		       mov     [ds:BATBUFPOS], bx
TRANGROUP:0B18
TRANGROUP:0B18 UNBUF:				       ; ...
TRANGROUP:0B18		       mov     al, [ds:BATBUF+bx]
TRANGROUP:0B1C		       inc     bx
TRANGROUP:0B1D		       cmp     bx, [ds:BATBUFEND] ; beyond end of buffer?
TRANGROUP:0B21		       jb      short SETBUFPOS
TRANGROUP:0B23		       mov     bx, 0FFFFh      ; -1
TRANGROUP:0B26
TRANGROUP:0B26 SETBUFPOS:			       ; ...
TRANGROUP:0B26		       mov     [ds:BATBUFPOS], bx
TRANGROUP:0B2A		       cmp     al, 1Ah	       ; ^Z for	termination
TRANGROUP:0B2C		       jnz     short GETBYTEDONE
TRANGROUP:0B2E
TRANGROUP:0B2E BATEOFDS:			       ; ...
TRANGROUP:0B2E		       push    es
TRANGROUP:0B2F		       mov     es, [ds:RESSEG]
TRANGROUP:0B33		       mov     es, [es:Batch]
TRANGROUP:0B38		       cmp     [byte ptr es:2],	0 ; [es:BATCHSEGMENT.BatchEOF]
TRANGROUP:0B3E		       jnz     short crpresent
TRANGROUP:0B40		       inc     [byte ptr es:2] ; [es:BATCHSEGMENT.BatchEOF]
TRANGROUP:0B45		       mov     bx, [ds:0AA78h]
TRANGROUP:0B49		       cmp     [byte ptr ds:(BATBUFPOS+1)+bx], 0Ah ; [bx+BATBUF-1],0Ah
TRANGROUP:0B49					       ; was a LF present?
TRANGROUP:0B4E		       jz      short crpresent ; yes, no need to fake it
TRANGROUP:0B50		       add     [byte ptr es:2],	3 ; add	byte [es:BATCHSEGMENT.BatchEOF],3
TRANGROUP:0B50					       ; BatchEOF == 4 to fake CR-LF
TRANGROUP:0B56
TRANGROUP:0B56 crpresent:			       ; ...
TRANGROUP:0B56		       mov     ds, [ds:RESSEG]
TRANGROUP:0B5A
TRANGROUP:0B5A At_EOF:				       ; ...
TRANGROUP:0B5A		       shr     [byte ptr es:2],	1 ; [es:BATCHSEGMENT.BatchEOF]
TRANGROUP:0B5F		       jz      short turn_off  ; zero,turn batch off
TRANGROUP:0B61		       cmp     [byte ptr es:2],	1 ; [es:BATCHSEGMENT.BatchEOF]
TRANGROUP:0B61					       ; BatchEOF was 2, return	LF
TRANGROUP:0B67		       jz      short ret_lf
TRANGROUP:0B69		       mov     al, 0Dh	       ; return	fake CR
TRANGROUP:0B6B		       pop     es
TRANGROUP:0B6C		       jmp     short GETBYTEDONE
TRANGROUP:0B6E ; ---------------------------------------------------------------------------
TRANGROUP:0B6E
TRANGROUP:0B6E ret_lf:				       ; ...
TRANGROUP:0B6E		       mov     al, 0Ah	       ; return	fake LF
TRANGROUP:0B70		       pop     es
TRANGROUP:0B71		       jmp     short GETBYTEDONE
TRANGROUP:0B73 ; ---------------------------------------------------------------------------
TRANGROUP:0B73
TRANGROUP:0B73 turn_off:			       ; ...
TRANGROUP:0B73		       pop     es
TRANGROUP:0B74
TRANGROUP:0B74 BATEOF:				       ; ...
TRANGROUP:0B74		       call    BATCHOFF
TRANGROUP:0B77		       call    BATCLOSE
TRANGROUP:0B7A		       mov     al, 0Dh	       ; If end-of-file, then end of line
TRANGROUP:0B7C		       test    [ds:Batch_Abort], 0FFh
TRANGROUP:0B81		       mov     [ds:Batch_Abort], 0
TRANGROUP:0B86		       jz      short CONT_GET_BYT
TRANGROUP:0B88		       mov     di, (offset COMBUF+2)
TRANGROUP:0B8B		       xor     cx, cx
TRANGROUP:0B8D		       jmp     short GETBYTEDONE
TRANGROUP:0B8F ; ---------------------------------------------------------------------------
TRANGROUP:0B8F
TRANGROUP:0B8F CONT_GET_BYT:			       ; ...
TRANGROUP:0B8F		       cmp     [ds:SingleCom], 0FFF0h
TRANGROUP:0B94		       jnz     short GETBYTEDONE
TRANGROUP:0B96		       cmp     [ds:Nest], 0
TRANGROUP:0B9B		       jnz     short GETBYTEDONE
TRANGROUP:0B9D		       mov     [ds:SingleCom], 0FFFFh
TRANGROUP:0BA3
TRANGROUP:0BA3 GETBYTEDONE:			       ; ...
TRANGROUP:0BA3		       pop     ds
TRANGROUP:0BA4		       pop     cx
TRANGROUP:0BA5		       pop     bx
TRANGROUP:0BA6		       retn
TRANGROUP:0BA6 endp	       GETBATBYT
TRANGROUP:0BA6
TRANGROUP:0BA7 ; ---------------------------------------------------------------------------
TRANGROUP:0BA7 ; START OF FUNCTION CHUNK FOR _$IF
TRANGROUP:0BA7
TRANGROUP:0BA7 IFERRORP:			       ; ...
TRANGROUP:0BA7		       pop     ax
TRANGROUP:0BA8
TRANGROUP:0BA8 IFERROR:				       ; ...
TRANGROUP:0BA8		       mov     dx, offset SYNTMES_PTR
TRANGROUP:0BAB		       jmp     cerror
TRANGROUP:0BAB ; END OF	FUNCTION CHUNK FOR _$IF
TRANGROUP:0BAE
TRANGROUP:0BAE ; =============== S U B R O U T I N E =======================================
TRANGROUP:0BAE
TRANGROUP:0BAE
TRANGROUP:0BAE proc	       _$IF near	       ; ...
TRANGROUP:0BAE
TRANGROUP:0BAE ; FUNCTION CHUNK	AT TRANGROUP:0BA7 SIZE 00000007	BYTES
TRANGROUP:0BAE
TRANGROUP:0BAE		       push    ds
TRANGROUP:0BAF		       mov     ds, [ds:RESSEG]
TRANGROUP:0BB3		       cmp     [ds:PipeFiles], 0
TRANGROUP:0BB8		       jz      short IFNoPipe
TRANGROUP:0BBA		       call    PIPEDEL
TRANGROUP:0BBD
TRANGROUP:0BBD IFNoPipe:			       ; ...
TRANGROUP:0BBD		       pop     ds
TRANGROUP:0BBE		       mov     [ds:IFNOTFLAG], 0
TRANGROUP:0BC3		       mov     [ds:IF_NOT_COUNT], 0
TRANGROUP:0BC9		       mov     si, 81h
TRANGROUP:0BCC
TRANGROUP:0BCC IFREENT:				       ; ...
TRANGROUP:0BCC		       call    scanoff
TRANGROUP:0BCF		       cmp     al, 0Dh
TRANGROUP:0BD1		       jz      short IFERROR
TRANGROUP:0BD3		       mov     bp, si
TRANGROUP:0BD5		       mov     di, offset IFTAB	; "\x03NOT"
TRANGROUP:0BD8		       mov     ch, 0
TRANGROUP:0BDA
TRANGROUP:0BDA IFINDCOM:			       ; ...
TRANGROUP:0BDA		       mov     si, bp
TRANGROUP:0BDC		       mov     cl, [di]
TRANGROUP:0BDE		       inc     di
TRANGROUP:0BDF		       jcxz    short IFSTRING
TRANGROUP:0BE1		       jmp     short FIRSTCOMP
TRANGROUP:0BE3 ; ---------------------------------------------------------------------------
TRANGROUP:0BE3
TRANGROUP:0BE3 IFCOMP:				       ; ...
TRANGROUP:0BE3		       jnz     short IF_DIF
TRANGROUP:0BE5
TRANGROUP:0BE5 FIRSTCOMP:			       ; ...
TRANGROUP:0BE5		       lodsb
TRANGROUP:0BE6		       mov     ah, [es:di]
TRANGROUP:0BE9		       inc     di
TRANGROUP:0BEA		       cmp     al, ah
TRANGROUP:0BEC		       jz      short IFLP
TRANGROUP:0BEE		       or      ah, 20h
TRANGROUP:0BF1		       cmp     al, ah
TRANGROUP:0BF3
TRANGROUP:0BF3 IFLP:				       ; ...
TRANGROUP:0BF3		       loop    IFCOMP
TRANGROUP:0BF5
TRANGROUP:0BF5 IF_DIF:				       ; ...
TRANGROUP:0BF5		       lahf
TRANGROUP:0BF6		       add     di, cx
TRANGROUP:0BF8		       mov     bx, [di]
TRANGROUP:0BFA		       inc     di
TRANGROUP:0BFB		       inc     di
TRANGROUP:0BFC		       sahf
TRANGROUP:0BFD		       jnz     short IFINDCOM
TRANGROUP:0BFF		       lodsb
TRANGROUP:0C00		       cmp     al, 0Dh
TRANGROUP:0C02
TRANGROUP:0C02 IFERRJ:				       ; ...
TRANGROUP:0C02		       jz      short IFERROR
TRANGROUP:0C04		       call    DELIM
TRANGROUP:0C07		       jnz     short IFINDCOM
TRANGROUP:0C09		       call    scanoff
TRANGROUP:0C0C		       jmp     bx
TRANGROUP:0C0E ; ---------------------------------------------------------------------------
TRANGROUP:0C0E
TRANGROUP:0C0E IFNOT:				       ; ...
TRANGROUP:0C0E		       not     [ds:IFNOTFLAG]  ; byte
TRANGROUP:0C12		       inc     [ds:IF_NOT_COUNT] ; word
TRANGROUP:0C16		       jmp     short IFREENT
TRANGROUP:0C18 ; ---------------------------------------------------------------------------
TRANGROUP:0C18
TRANGROUP:0C18 IFSTRING:			       ; ...
TRANGROUP:0C18		       push    si
TRANGROUP:0C19		       xor     cx, cx
TRANGROUP:0C1B
TRANGROUP:0C1B FIRST_STRING:			       ; ...
TRANGROUP:0C1B		       lodsb
TRANGROUP:0C1C		       cmp     al, 0Dh
TRANGROUP:0C1E		       jz      short IFERRORP
TRANGROUP:0C20		       call    DELIM
TRANGROUP:0C23		       jz      short EQUAL_CHECK
TRANGROUP:0C25		       inc     cx
TRANGROUP:0C26		       jmp     short FIRST_STRING
TRANGROUP:0C28 ; ---------------------------------------------------------------------------
TRANGROUP:0C28
TRANGROUP:0C28 EQUAL_CHECK:			       ; ...
TRANGROUP:0C28		       cmp     al, 3Dh ; '='
TRANGROUP:0C2A		       jz      short EQUAL_CHECK2
TRANGROUP:0C2C		       cmp     al, 0Dh
TRANGROUP:0C2E		       jz      short IFERRPJ
TRANGROUP:0C30		       lodsb
TRANGROUP:0C31		       jmp     short EQUAL_CHECK
TRANGROUP:0C33 ; ---------------------------------------------------------------------------
TRANGROUP:0C33
TRANGROUP:0C33 EQUAL_CHECK2:			       ; ...
TRANGROUP:0C33		       lodsb
TRANGROUP:0C34		       cmp     al, 3Dh ; '='
TRANGROUP:0C36		       jnz     short IFERRPJ
TRANGROUP:0C38		       call    scanoff
TRANGROUP:0C3B		       cmp     al, 0Dh
TRANGROUP:0C3D		       jz      short IFERRPJ
TRANGROUP:0C3F		       pop     di
TRANGROUP:0C40		       repe cmpsb
TRANGROUP:0C42		       jz      short MATCH
TRANGROUP:0C44		       dec     si
TRANGROUP:0C45		       cmp     [byte ptr si], 0Dh
TRANGROUP:0C48		       jz      short IFERRJ
TRANGROUP:0C4A
TRANGROUP:0C4A SKIPSTRINGEND:			       ; ...
TRANGROUP:0C4A		       lodsb
TRANGROUP:0C4B
TRANGROUP:0C4B NOTMATCH:			       ; ...
TRANGROUP:0C4B		       cmp     al, 0Dh
TRANGROUP:0C4D
TRANGROUP:0C4D IFERRORJ2:			       ; ...
TRANGROUP:0C4D		       jz      short IFERRJ
TRANGROUP:0C4F		       call    DELIM
TRANGROUP:0C52		       jnz     short SKIPSTRINGEND
TRANGROUP:0C54		       mov     al, 0FFh	       ; -1
TRANGROUP:0C56		       jmp     short IFRET
TRANGROUP:0C58 ; ---------------------------------------------------------------------------
TRANGROUP:0C58
TRANGROUP:0C58 IFERRPJ:				       ; ...
TRANGROUP:0C58		       jmp     IFERRORP
TRANGROUP:0C5B ; ---------------------------------------------------------------------------
TRANGROUP:0C5B
TRANGROUP:0C5B MATCH:				       ; ...
TRANGROUP:0C5B		       lodsb
TRANGROUP:0C5C		       call    DELIM
TRANGROUP:0C5F		       jnz     short NOTMATCH
TRANGROUP:0C61		       xor     al, al
TRANGROUP:0C63		       jmp     short IFRET
TRANGROUP:0C65 ; ---------------------------------------------------------------------------
TRANGROUP:0C65
TRANGROUP:0C65 IFEXISTS:			       ; ...
TRANGROUP:0C65		       lodsb
TRANGROUP:0C66		       call    DELIM
TRANGROUP:0C69		       jnz     short IFEXISTS
TRANGROUP:0C6B		       mov     dx, offset BWDBUF ; DIRBUF
TRANGROUP:0C6E		       mov     ax, 1A00h
TRANGROUP:0C71		       int     21h	       ; DOS - SET DISK	TRANSFER AREA ADDRESS
TRANGROUP:0C71					       ; DS:DX -> disk transfer	buffer
TRANGROUP:0C73		       mov     bx, 2
TRANGROUP:0C76		       add     bx, [ds:IF_NOT_COUNT]
TRANGROUP:0C7A		       mov     ax, offset ARG_ARGV ; ARG+ARG_UNIT.argv ; ARG
TRANGROUP:0C7D		       call    argv_calc
TRANGROUP:0C80		       mov     dx, [bx]
TRANGROUP:0C82		       mov     cx, 6	       ; IFEXIST_ATTR
TRANGROUP:0C85		       mov     ax, 4E00h
TRANGROUP:0C88		       int     21h	       ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
TRANGROUP:0C88					       ; CX = search attributes
TRANGROUP:0C88					       ; DS:DX -> ASCIZ	filespec
TRANGROUP:0C88					       ; (drive, path, and wildcards allowed)
TRANGROUP:0C8A		       jb      short IF_EX_C
TRANGROUP:0C8C		       xor     al, al
TRANGROUP:0C8E		       jmp     short IFRET
TRANGROUP:0C90 ; ---------------------------------------------------------------------------
TRANGROUP:0C90
TRANGROUP:0C90 IF_EX_C:				       ; ...
TRANGROUP:0C90		       mov     al, 0FFh
TRANGROUP:0C92
TRANGROUP:0C92 IFRET:				       ; ...
TRANGROUP:0C92		       test    [ds:IFNOTFLAG], 0FFh
TRANGROUP:0C97		       jz      short REALTEST
TRANGROUP:0C99		       not     al
TRANGROUP:0C9B
TRANGROUP:0C9B REALTEST:			       ; ...
TRANGROUP:0C9B		       or      al, al
TRANGROUP:0C9D		       jz      short IFTRUE
TRANGROUP:0C9F		       jmp     TCOMMAND
TRANGROUP:0CA2 ; ---------------------------------------------------------------------------
TRANGROUP:0CA2
TRANGROUP:0CA2 IFTRUE:				       ; ...
TRANGROUP:0CA2		       call    scanoff
TRANGROUP:0CA5		       mov     cx, si
TRANGROUP:0CA7		       sub     cx, 81h
TRANGROUP:0CAB		       sub     [ds:80h], cl
TRANGROUP:0CAF		       mov     cl, [ds:80h]
TRANGROUP:0CB3		       mov     [ds:COMBUF+1], cl
TRANGROUP:0CB7		       mov     di, (offset COMBUF+2)
TRANGROUP:0CBA		       cld
TRANGROUP:0CBB		       rep movsb
TRANGROUP:0CBD		       mov     al, 0Dh
TRANGROUP:0CBF		       stosb
TRANGROUP:0CC0		       push    ds
TRANGROUP:0CC1		       mov     ds, [ds:RESSEG]
TRANGROUP:0CC5		       mov     [ds:IfFlag], 0FFh ; -1
TRANGROUP:0CCA		       pop     ds
TRANGROUP:0CCB		       jmp     DOCOM0
TRANGROUP:0CCB endp	       _$IF
TRANGROUP:0CCB
TRANGROUP:0CCE ; ---------------------------------------------------------------------------
TRANGROUP:0CCE
TRANGROUP:0CCE IFERRORJ3:			       ; ...
TRANGROUP:0CCE		       jmp     IFERRORJ2
TRANGROUP:0CD1 ; ---------------------------------------------------------------------------
TRANGROUP:0CD1
TRANGROUP:0CD1 IFERLEV:				       ; ...
TRANGROUP:0CD1		       cmp     [byte ptr si], 0F2h
TRANGROUP:0CD4		       jnz     short IFERLEV_@
TRANGROUP:0CD6		       inc     si
TRANGROUP:0CD7
TRANGROUP:0CD7 IFERLEV_@:			       ; ...
TRANGROUP:0CD7		       mov     bh, 10
TRANGROUP:0CD9		       xor     bl, bl
TRANGROUP:0CDB
TRANGROUP:0CDB GETNUMLP:			       ; ...
TRANGROUP:0CDB		       lodsb
TRANGROUP:0CDC		       cmp     al, 0Dh
TRANGROUP:0CDE		       jz      short IFERRORJ3
TRANGROUP:0CE0		       call    DELIM
TRANGROUP:0CE3		       jz      short GOTNUM
TRANGROUP:0CE5		       sub     al, 30h ; '0'
TRANGROUP:0CE7		       xchg    al, bl
TRANGROUP:0CE9		       mul     bh
TRANGROUP:0CEB		       add     al, bl
TRANGROUP:0CED		       xchg    al, bl
TRANGROUP:0CEF		       jmp     short GETNUMLP
TRANGROUP:0CF1 ; ---------------------------------------------------------------------------
TRANGROUP:0CF1
TRANGROUP:0CF1 GOTNUM:				       ; ...
TRANGROUP:0CF1		       push    ds
TRANGROUP:0CF2		       mov     ds, [ds:RESSEG]
TRANGROUP:0CF6		       mov     ah, [byte ptr ds:RetCode]
TRANGROUP:0CFA		       pop     ds
TRANGROUP:0CFB		       xor     al, al
TRANGROUP:0CFD		       cmp     ah, bl
TRANGROUP:0CFF		       jnb     short IFRET
TRANGROUP:0D01		       dec     al
TRANGROUP:0D03		       jmp     short IFRET
TRANGROUP:0D05 ; ---------------------------------------------------------------------------
TRANGROUP:0D05
TRANGROUP:0D05 _SHIFT:				       ; ...
TRANGROUP:0D05		       mov     ds, [ds:RESSEG]
TRANGROUP:0D09		       mov     ax, [ds:Batch]
TRANGROUP:0D0C		       or      ax, ax
TRANGROUP:0D0E		       jnz     short SHIFT1
TRANGROUP:0D10
TRANGROUP:0D10 SHIFT_RETN:			       ; ...
TRANGROUP:0D10		       retn
TRANGROUP:0D11 ; ---------------------------------------------------------------------------
TRANGROUP:0D11
TRANGROUP:0D11 SHIFT1:				       ; ...
TRANGROUP:0D11		       mov     es, ax
TRANGROUP:0D13		       mov     ds, ax
TRANGROUP:0D15		       mov     di, 0Ch	       ; BATCHSEGMENT.BatParm
TRANGROUP:0D18		       lea     si, [di+2]
TRANGROUP:0D1B		       mov     cx, 9
TRANGROUP:0D1E		       rep movsw
TRANGROUP:0D20		       cmp     [word ptr di], 0FFFFh
TRANGROUP:0D23		       jz      short SHIFT_RETN
TRANGROUP:0D25		       mov     si, [di]
TRANGROUP:0D27		       mov     [word ptr di], 0FFFFh
TRANGROUP:0D2B
TRANGROUP:0D2B SKIPCRLP:			       ; ...
TRANGROUP:0D2B		       lodsb
TRANGROUP:0D2C		       cmp     al, 0Dh
TRANGROUP:0D2E		       jnz     short SKIPCRLP
TRANGROUP:0D30		       cmp     [byte ptr si], 0
TRANGROUP:0D33		       jz      short SHIFT_RETN
TRANGROUP:0D35		       mov     [di], si
TRANGROUP:0D37		       retn
TRANGROUP:0D38
TRANGROUP:0D38 ; =============== S U B R O U T I N E =======================================
TRANGROUP:0D38
TRANGROUP:0D38
TRANGROUP:0D38 proc	       SKIPDELIM near	       ; ...
TRANGROUP:0D38		       test    [ds:Batch], 0FFFFh
TRANGROUP:0D3E		       jz      short SKIPERR
TRANGROUP:0D40		       call    GETBATBYT
TRANGROUP:0D43		       call    DELIM
TRANGROUP:0D46		       jz      short SKIPDELIM
TRANGROUP:0D48		       clc
TRANGROUP:0D49		       retn
TRANGROUP:0D4A ; ---------------------------------------------------------------------------
TRANGROUP:0D4A
TRANGROUP:0D4A SKIPERR:				       ; ...
TRANGROUP:0D4A		       stc
TRANGROUP:0D4B
TRANGROUP:0D4B GOTO_RETN:			       ; ...
TRANGROUP:0D4B		       retn
TRANGROUP:0D4B endp	       SKIPDELIM
TRANGROUP:0D4B
TRANGROUP:0D4C ; ---------------------------------------------------------------------------
TRANGROUP:0D4C
TRANGROUP:0D4C _$CALL:				       ; ...
TRANGROUP:0D4C		       push    si
TRANGROUP:0D4D		       push    di
TRANGROUP:0D4E		       push    ax
TRANGROUP:0D4F		       push    cx
TRANGROUP:0D50		       mov     si, (offset COMBUF+2)
TRANGROUP:0D53		       call    scanoff
TRANGROUP:0D56		       add     si, 4
TRANGROUP:0D59		       mov     di, (offset COMBUF+2)
TRANGROUP:0D5C		       mov     cx, 124	       ; COMBUFLEN-length_call
TRANGROUP:0D5F		       rep movsb
TRANGROUP:0D61		       pop     cx
TRANGROUP:0D62		       pop     ax
TRANGROUP:0D63		       pop     di
TRANGROUP:0D64		       pop     si
TRANGROUP:0D65		       push    ds
TRANGROUP:0D66		       mov     ds, [ds:RESSEG]
TRANGROUP:0D6A		       mov     [ds:Call_Flag], 1 ; call_in_progress
TRANGROUP:0D6F		       mov     [ds:Call_Batch_Flag], 1 ; call_in_progress
TRANGROUP:0D74		       cmp     [ds:PipeFiles], 0
TRANGROUP:0D79		       jz      short _NOPIPE
TRANGROUP:0D7B		       call    PIPEDEL
TRANGROUP:0D7E
TRANGROUP:0D7E _NOPIPE:				       ; ...
TRANGROUP:0D7E		       pop     ds
TRANGROUP:0D7F		       retn
TRANGROUP:0D80 ; ---------------------------------------------------------------------------
TRANGROUP:0D80
TRANGROUP:0D80 _GOTO:				       ; ...
TRANGROUP:0D80		       mov     ds, [ds:RESSEG]
TRANGROUP:0D84		       test    [ds:Batch], 0FFFFh
TRANGROUP:0D8A		       jz      short GOTO_RETN
TRANGROUP:0D8C		       xor     dx, dx
TRANGROUP:0D8E		       push    ds
TRANGROUP:0D8F		       mov     ds, [ds:Batch]
TRANGROUP:0D93		       mov     [ds:8], dx      ; [BATCHSEGMENT.BatSeek]
TRANGROUP:0D97		       mov     [ds:0Ah], dx    ; [BATCHSEGMENT.BatSeek+2]
TRANGROUP:0D9B		       mov     [byte ptr ds:2],	0 ; [BATCHSEGMENT.BatchEOF]
TRANGROUP:0DA0		       pop     ds
TRANGROUP:0DA1		       call    PROMPTBAT
TRANGROUP:0DA4		       mov     di, 5Dh	       ; FCB+1
TRANGROUP:0DA7		       mov     cx, 11
TRANGROUP:0DAA		       mov     al, 20h	       ; space
TRANGROUP:0DAC		       repne scasb
TRANGROUP:0DAE		       jnz     short NOINC
TRANGROUP:0DB0		       inc     cx
TRANGROUP:0DB1
TRANGROUP:0DB1 NOINC:				       ; ...
TRANGROUP:0DB1		       sub     cx, 11
TRANGROUP:0DB4		       neg     cx
TRANGROUP:0DB6		       mov     [word ptr es:BWDBUF], cx	; word [es:GOTOLEN]
TRANGROUP:0DBB		       call    SKIPDELIM
TRANGROUP:0DBE		       jb      short BADGOTO
TRANGROUP:0DC0		       cmp     al, ':'
TRANGROUP:0DC2		       jz      short CHKLABEL
TRANGROUP:0DC4
TRANGROUP:0DC4 LABLKLP:				       ; ...
TRANGROUP:0DC4		       call    GETBATBYT
TRANGROUP:0DC7		       cmp     al, 0Ah
TRANGROUP:0DC9		       jnz     short LABLKTST
TRANGROUP:0DCB		       call    SKIPDELIM
TRANGROUP:0DCE		       jb      short BADGOTO
TRANGROUP:0DD0		       cmp     al, 3Ah ; ':'
TRANGROUP:0DD2		       jz      short CHKLABEL
TRANGROUP:0DD4
TRANGROUP:0DD4 LABLKTST:			       ; ...
TRANGROUP:0DD4		       test    [ds:Batch], 0FFFFh
TRANGROUP:0DDA		       jnz     short LABLKLP
TRANGROUP:0DDC
TRANGROUP:0DDC BADGOTO:				       ; ...
TRANGROUP:0DDC		       call    BATCLOSE
TRANGROUP:0DDF		       call    free_batch
TRANGROUP:0DE2		       push    cs
TRANGROUP:0DE3		       pop     ds
TRANGROUP:0DE4		       assume ds:TRANGROUP
TRANGROUP:0DE4		       mov     dx, offset BADLAB_PTR
TRANGROUP:0DE7		       jmp     cerror
TRANGROUP:0DEA ; ---------------------------------------------------------------------------
TRANGROUP:0DEA
TRANGROUP:0DEA CHKLABEL:			       ; ...
TRANGROUP:0DEA		       call    SKIPDELIM
TRANGROUP:0DED		       jb      short BADGOTO
TRANGROUP:0DEF		       mov     di, 5Dh	       ; FCB+1
TRANGROUP:0DF2		       mov     cx, [word ptr es:BWDBUF]	; [es:GOTOLEN]
TRANGROUP:0DF7		       jmp     short GOTBYTE
TRANGROUP:0DF9 ; ---------------------------------------------------------------------------
TRANGROUP:0DF9
TRANGROUP:0DF9 NEXTCHRLP:			       ; ...
TRANGROUP:0DF9		       push    cx
TRANGROUP:0DFA		       call    GETBATBYT
TRANGROUP:0DFD		       pop     cx
TRANGROUP:0DFE
TRANGROUP:0DFE GOTBYTE:				       ; ...
TRANGROUP:0DFE		       call    testkanj
TRANGROUP:0E01		       jz      short NOTKANJ1
TRANGROUP:0E03		       cmp     al, [es:di]
TRANGROUP:0E06		       jnz     short LABLKTST
TRANGROUP:0E08		       inc     di
TRANGROUP:0E09		       dec     cx
TRANGROUP:0E0A		       jcxz    short LABLKTST
TRANGROUP:0E0C		       push    cx
TRANGROUP:0E0D		       call    GETBATBYT
TRANGROUP:0E10		       pop     cx
TRANGROUP:0E11		       cmp     al, [es:di]
TRANGROUP:0E14		       jmp     short KNEXTLABCHR
TRANGROUP:0E16 ; ---------------------------------------------------------------------------
TRANGROUP:0E16
TRANGROUP:0E16 NOTKANJ1:			       ; ...
TRANGROUP:0E16		       or      al, 20h
TRANGROUP:0E18		       cmp     al, [es:di]
TRANGROUP:0E1B		       jnz     short TRYUPPER
TRANGROUP:0E1D		       jmp     short NEXTLABCHR
TRANGROUP:0E1F ; ---------------------------------------------------------------------------
TRANGROUP:0E1F
TRANGROUP:0E1F TRYUPPER:			       ; ...
TRANGROUP:0E1F		       sub     al, 20h
TRANGROUP:0E21		       cmp     al, [es:di]
TRANGROUP:0E24
TRANGROUP:0E24 KNEXTLABCHR:			       ; ...
TRANGROUP:0E24		       jnz     short LABLKTST
TRANGROUP:0E26
TRANGROUP:0E26 NEXTLABCHR:			       ; ...
TRANGROUP:0E26		       inc     di
TRANGROUP:0E27		       loop    NEXTCHRLP
TRANGROUP:0E29		       call    GETBATBYT
TRANGROUP:0E2C		       cmp     [word ptr es:BWDBUF], 8 ; [es:GOTOLEN]
TRANGROUP:0E32		       jge     short GOTOCONT
TRANGROUP:0E34		       cmp     al, 20h ; ' '
TRANGROUP:0E36		       ja      short LABLKTST
TRANGROUP:0E38
TRANGROUP:0E38 GOTOCONT:			       ; ...
TRANGROUP:0E38		       cmp     al, 0Dh
TRANGROUP:0E3A		       jz      short SKIPLFEED
TRANGROUP:0E3C
TRANGROUP:0E3C TONEXTBATLIN:			       ; ...
TRANGROUP:0E3C		       call    GETBATBYT
TRANGROUP:0E3F		       cmp     al, 0Dh
TRANGROUP:0E41		       jnz     short TONEXTBATLIN
TRANGROUP:0E43
TRANGROUP:0E43 SKIPLFEED:			       ; ...
TRANGROUP:0E43		       call    GETBATBYT
TRANGROUP:0E46		       push    es
TRANGROUP:0E47		       mov     es, [ds:Batch]
TRANGROUP:0E4B		       mov     [byte ptr es:2],	0 ; [es:BATCHSEGMENT.BatchEOF]
TRANGROUP:0E51		       pop     es
TRANGROUP:0E52		       call    BATCLOSE
TRANGROUP:0E55		       retn
TRANGROUP:0E56
TRANGROUP:0E56 ; =============== S U B R O U T I N E =======================================
TRANGROUP:0E56
TRANGROUP:0E56
TRANGROUP:0E56 proc	       BATCLOSE	near	       ; ...
TRANGROUP:0E56		       mov     bx, [cs:BATHAND]
TRANGROUP:0E5B		       cmp     bx, 5
TRANGROUP:0E5E		       jb      short CLOSERETURN
TRANGROUP:0E60		       mov     ah, 3Eh	       ; CLOSE
TRANGROUP:0E62		       call    int_21h_indirect
TRANGROUP:0E65
TRANGROUP:0E65 CLOSERETURN:			       ; ...
TRANGROUP:0E65		       mov     [ds:In_Batch], 0
TRANGROUP:0E6A		       retn
TRANGROUP:0E6A endp	       BATCLOSE
TRANGROUP:0E6A
TRANGROUP:0E6B
TRANGROUP:0E6B ; =============== S U B R O U T I N E =======================================
TRANGROUP:0E6B
TRANGROUP:0E6B
TRANGROUP:0E6B proc	       BATOPEN near	       ; ...
TRANGROUP:0E6B		       push    ds
TRANGROUP:0E6C		       mov     ds, [ds:Batch]
TRANGROUP:0E70		       assume ds:nothing
TRANGROUP:0E70		       mov     dx, 20h ; ' '   ; BATCHSEGMENT.BatFile
TRANGROUP:0E73		       mov     ax, 3D20h
TRANGROUP:0E76		       call    int_21h_indirect
TRANGROUP:0E79		       jb      short SETERRDL
TRANGROUP:0E7B		       mov     dx, [ds:8]      ; [BATCHSEGMENT.BatSeek]
TRANGROUP:0E7F		       mov     cx, [ds:0Ah]    ; [BATCHSEGMENT.BatSeek+2]
TRANGROUP:0E83		       pop     ds
TRANGROUP:0E84		       mov     [es:BATHAND], ax
TRANGROUP:0E88		       mov     bx, ax
TRANGROUP:0E8A		       mov     ax, 4200h       ; (LSEEK<<8)
TRANGROUP:0E8D		       call    int_21h_indirect
TRANGROUP:0E90		       mov     [es:BATBUFPOS], 0FFFFh
TRANGROUP:0E97		       retn
TRANGROUP:0E98 ; ---------------------------------------------------------------------------
TRANGROUP:0E98
TRANGROUP:0E98 SETERRDL:			       ; ...
TRANGROUP:0E98		       mov     bx, dx
TRANGROUP:0E9A		       call    get_ext_error_number
TRANGROUP:0E9D		       mov     dx, ax
TRANGROUP:0E9F		       mov     al, [bx]
TRANGROUP:0EA1		       sub     al, 40h ; '@'   ; A = 1, B = 2 ..
TRANGROUP:0EA3		       pop     ds
TRANGROUP:0EA4		       stc
TRANGROUP:0EA5		       retn
TRANGROUP:0EA5 endp	       BATOPEN
TRANGROUP:0EA5
TRANGROUP:0EA6
TRANGROUP:0EA6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:0EA6
TRANGROUP:0EA6
TRANGROUP:0EA6 proc	       free_batch near	       ; ...
TRANGROUP:0EA6		       push    es
TRANGROUP:0EA7		       mov     bx, [ds:Next_Batch]
TRANGROUP:0EAB		       or      bx, bx
TRANGROUP:0EAD		       jz      short fb_ret
TRANGROUP:0EAF
TRANGROUP:0EAF _ClearBatch:			       ; ...
TRANGROUP:0EAF		       mov     es, bx
TRANGROUP:0EB1		       mov     bx, [es:5]      ; [es:BATCHSEGMENT.BatForPtr]
TRANGROUP:0EB6		       cmp     bx, 0	       ; is a FOR in progress ?
TRANGROUP:0EB9		       jz      short no_bat_for	; no - don't deallocate
TRANGROUP:0EBB		       push    es
TRANGROUP:0EBC		       mov     es, bx
TRANGROUP:0EBE		       mov     ah, 49h	       ; DEALLOC
TRANGROUP:0EC0		       call    int_21h_indirect
TRANGROUP:0EC3		       pop     es
TRANGROUP:0EC4
TRANGROUP:0EC4 no_bat_for:			       ; ...
TRANGROUP:0EC4		       mov     cl, [es:1]      ; [es:BATCHSEGMENT.BatEchoFlag]
TRANGROUP:0EC9		       mov     bx, [es:3]      ; [es:BATCHSEGMENT.BatLast]
TRANGROUP:0ECE		       mov     ah, 49h	       ; DEALLOC
TRANGROUP:0ED0		       call    int_21h_indirect
TRANGROUP:0ED3		       mov     [ds:Batch], bx
TRANGROUP:0ED7		       dec     [ds:Nest]       ; word
TRANGROUP:0EDB		       jnz     short _ClearBatch
TRANGROUP:0EDD		       mov     [ds:EchoFlag], cl
TRANGROUP:0EE1		       mov     [ds:Batch], 0
TRANGROUP:0EE7
TRANGROUP:0EE7 fb_ret:				       ; ...
TRANGROUP:0EE7		       pop     es
TRANGROUP:0EE8		       retn
TRANGROUP:0EE8 endp	       free_batch
TRANGROUP:0EE8
TRANGROUP:0EE9 ; ---------------------------------------------------------------------------
TRANGROUP:0EE9 ; START OF FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:0EE9
TRANGROUP:0EE9 FORTERM:				       ; ...
TRANGROUP:0EE9		       push    cs
TRANGROUP:0EEA		       pop     ds
TRANGROUP:0EEB		       assume ds:TRANGROUP
TRANGROUP:0EEB		       push    cs
TRANGROUP:0EEC		       pop     es
TRANGROUP:0EED		       assume es:TRANGROUP
TRANGROUP:0EED		       call    FOROFF
TRANGROUP:0EF0		       mov     ds, [es:RESSEG]
TRANGROUP:0EF5		       assume ds:RESGROUP
TRANGROUP:0EF5		       cmp     [SingleCom], 0FF00h
TRANGROUP:0EFB		       jnz     short BAT_CRLF
TRANGROUP:0EFD		       cmp     [Nest], 0       ; word
TRANGROUP:0F02		       jnz     short BAT_CRLF
TRANGROUP:0F04		       mov     [SingleCom], 0FFFFh ; -1
TRANGROUP:0F0A		       jmp     short NOFORP2
TRANGROUP:0F0C ; ---------------------------------------------------------------------------
TRANGROUP:0F0C
TRANGROUP:0F0C BAT_CRLF:			       ; ...
TRANGROUP:0F0C		       test    [EchoFlag], 1   ; byte
TRANGROUP:0F11		       jz      short NOFORP2
TRANGROUP:0F13		       test    [Batch],	0FFFFh ; -1
TRANGROUP:0F19		       jz      short NOFORP2
TRANGROUP:0F1B		       call    CRLF2
TRANGROUP:0F1E
TRANGROUP:0F1E NOFORP2:				       ; ...
TRANGROUP:0F1E		       jmp     TCOMMAND
TRANGROUP:0F21 ; ---------------------------------------------------------------------------
TRANGROUP:0F21
TRANGROUP:0F21 _$FOR_EXIT:			       ; ...
TRANGROUP:0F21		       jmp     short FORTERM
TRANGROUP:0F23 ; ---------------------------------------------------------------------------
TRANGROUP:0F23
TRANGROUP:0F23 FORPROC:				       ; ...
TRANGROUP:0F23		       mov     ax, [ForPtr]
TRANGROUP:0F26		       mov     ds, ax
TRANGROUP:0F28		       assume ds:nothing
TRANGROUP:0F28		       mov     es, ax
TRANGROUP:0F2A		       assume es:nothing
TRANGROUP:0F2A		       mov     dx, 4CBh	       ; offset	FOR_INFO.FORDMA
TRANGROUP:0F2D		       mov     ax, 1A00h
TRANGROUP:0F30		       int     21h	       ; DOS - SET DISK	TRANSFER AREA ADDRESS
TRANGROUP:0F30					       ; DS:DX -> disk transfer	buffer
TRANGROUP:0F32
TRANGROUP:0F32 FOR_BEGIN:			       ; ...
TRANGROUP:0F32		       cmp     [word ptr ds:445h], 0 ; [FOR_INFO.FOR_EXPAND]
TRANGROUP:0F37		       jz      short FOR_BEGIN1
TRANGROUP:0F39		       inc     [word ptr ds:447h] ; [FOR_INFO.FOR_MINARG]
TRANGROUP:0F3D
TRANGROUP:0F3D FOR_BEGIN1:			       ; ...
TRANGROUP:0F3D		       mov     bx, [ds:447h]   ; [FOR_INFO.FOR_MINARG]
TRANGROUP:0F41		       cmp     bx, [ds:449h]   ; [FOR_INFO.FOR_MAXARG]
TRANGROUP:0F45		       jg      short _$FOR_EXIT
TRANGROUP:0F47		       mov     ax, 0
TRANGROUP:0F4A		       call    argv_calc
TRANGROUP:0F4D		       mov     cx, [bx+3]      ; [bx+ARGV_ELE.argstartel]
TRANGROUP:0F50		       mov     dx, [bx]
TRANGROUP:0F52		       test    [byte ptr bx+2],	4 ; [bx+ARGV_ELE.argflags],4 ; path_sep
TRANGROUP:0F56		       jnz     short FORSUB
TRANGROUP:0F58		       mov     si, [bx]	       ; [bx+ARGV_ELE.argpointer]
TRANGROUP:0F5A		       mov     al, 28h ; '('
TRANGROUP:0F5C		       cmp     [si-1], al
TRANGROUP:0F5F		       jnz     short FORSUB
TRANGROUP:0F61		       inc     cx
TRANGROUP:0F62		       mov     al, 3Ah ; ':'
TRANGROUP:0F64		       cmp     [si+1], al
TRANGROUP:0F67		       jnz     short FORSUB
TRANGROUP:0F69		       add     cx, 2
TRANGROUP:0F6C
TRANGROUP:0F6C FORSUB:				       ; ...
TRANGROUP:0F6C		       sub     cx, dx
TRANGROUP:0F6E		       cmp     [word ptr ds:445h], 0 ; [FOR_INFO.FOR_EXPAND]
TRANGROUP:0F73		       jz      short FOR_FIND_NEXT
TRANGROUP:0F75		       test    [byte ptr bx+2],	2 ; [bx+ARGV_ELE.argflags],2 ; wildcard
TRANGROUP:0F79		       jnz     short FOR_FIND_FIRST
TRANGROUP:0F7B		       mov     cx, [bx+5]      ; [bx+ARGV_ELE.arglen]
TRANGROUP:0F7E		       jmp     short FOR_SMOOSH
TRANGROUP:0F80 ; ---------------------------------------------------------------------------
TRANGROUP:0F80
TRANGROUP:0F80 FOR_FIND_FIRST:			       ; ...
TRANGROUP:0F80		       push    cx
TRANGROUP:0F81		       xor     cx, cx
TRANGROUP:0F83		       mov     ax, 4E00h
TRANGROUP:0F86		       int     21h	       ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
TRANGROUP:0F86					       ; CX = search attributes
TRANGROUP:0F86					       ; DS:DX -> ASCIZ	filespec
TRANGROUP:0F86					       ; (drive, path, and wildcards allowed)
TRANGROUP:0F88		       pop     cx
TRANGROUP:0F89		       jmp     short FOR_RESULT
TRANGROUP:0F8B ; ---------------------------------------------------------------------------
TRANGROUP:0F8B
TRANGROUP:0F8B FOR_FIND_NEXT:			       ; ...
TRANGROUP:0F8B		       mov     ax, 4F00h
TRANGROUP:0F8E		       int     21h	       ; DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)
TRANGROUP:0F8E					       ; [DTA] = data block from
TRANGROUP:0F8E					       ; last AH = 4Eh/4Fh call
TRANGROUP:0F90
TRANGROUP:0F90 FOR_RESULT:			       ; ...
TRANGROUP:0F90		       mov     ax, 0FFFFh      ; -1
TRANGROUP:0F93		       jb      short FOR_CHECK
TRANGROUP:0F95		       mov     ax, 0
TRANGROUP:0F98
TRANGROUP:0F98 FOR_CHECK:			       ; ...
TRANGROUP:0F98		       mov     [ds:445h], ax   ; [FOR_INFO.FOR_EXPAND]
TRANGROUP:0F9B		       or      ax, ax
TRANGROUP:0F9D		       jnz     short FOR_BEGIN
TRANGROUP:0F9F
TRANGROUP:0F9F FOR_SMOOSH:			       ; ...
TRANGROUP:0F9F		       mov     si, [bx]
TRANGROUP:0FA1		       mov     di, 44Bh	       ; offset	FOR_INFO.FORBUF
TRANGROUP:0FA4		       rep movsb
TRANGROUP:0FA6		       cmp     [word ptr ds:445h], 0 ; [FOR_INFO.FOR_EXPAND]
TRANGROUP:0FAB		       jnz     short FOR_MAKE_COM
TRANGROUP:0FAD		       mov     si, 4E9h	       ; offset	FOR_INFO.FORDMA+FIND_BUF.PNAME
TRANGROUP:0FB0
TRANGROUP:0FB0 FOR_MORE:			       ; ...
TRANGROUP:0FB0		       cmp     [byte ptr si], 0
TRANGROUP:0FB3		       jz      short FOR_MAKE_COM
TRANGROUP:0FB5		       movsb
TRANGROUP:0FB6		       jnz     short FOR_MORE
TRANGROUP:0FB8
TRANGROUP:0FB8 FOR_MAKE_COM:			       ; ...
TRANGROUP:0FB8		       xor     al, al
TRANGROUP:0FBA		       stosb
TRANGROUP:0FBB		       xor     cx, cx
TRANGROUP:0FBD		       not     cx
TRANGROUP:0FBF		       xor     bx, bx
TRANGROUP:0FC1		       mov     di, (offset COMBUF+2)
TRANGROUP:0FC4		       mov     bl, [ds:444h]   ; [FOR_INFO.FOR_COM_START]
TRANGROUP:0FC8		       mov     dh, [ds:54Bh]   ; [FOR_INFO.FOR_VAR]
TRANGROUP:0FCC		       push    cs
TRANGROUP:0FCD		       pop     es
TRANGROUP:0FCE		       assume es:TRANGROUP
TRANGROUP:0FCE		       mov     ax, 0	       ; FOR_INFO.FOR_ARGS
TRANGROUP:0FD1		       call    argv_calc
TRANGROUP:0FD4		       mov     si, [bx+9]      ; [bx+ARGV_ELE.arg_ocomptr]
TRANGROUP:0FD7		       inc     si
TRANGROUP:0FD8
TRANGROUP:0FD8 FOR_MAKE_LOOP:			       ; ...
TRANGROUP:0FD8		       mov     al, [si]
TRANGROUP:0FDA		       inc     si
TRANGROUP:0FDB		       cmp     al, 25h ; '%'
TRANGROUP:0FDD		       jnz     short FOR_STOSB
TRANGROUP:0FDF		       cmp     [si], dh
TRANGROUP:0FE1		       jnz     short FOR_STOSB
TRANGROUP:0FE3		       inc     si
TRANGROUP:0FE4		       push    si
TRANGROUP:0FE5		       mov     si, 44Bh	       ; offset	FOR_INFO.FORBUF
TRANGROUP:0FE8
TRANGROUP:0FE8 SLOOP:				       ; ...
TRANGROUP:0FE8		       lodsb
TRANGROUP:0FE9		       stosb
TRANGROUP:0FEA		       or      al, al
TRANGROUP:0FEC		       loopne  SLOOP
TRANGROUP:0FEE		       dec     di
TRANGROUP:0FEF		       inc     cx
TRANGROUP:0FF0		       pop     si
TRANGROUP:0FF1		       jmp     short FOR_MAKE_LOOP
TRANGROUP:0FF3 ; ---------------------------------------------------------------------------
TRANGROUP:0FF3
TRANGROUP:0FF3 FOR_STOSB:			       ; ...
TRANGROUP:0FF3		       stosb
TRANGROUP:0FF4		       dec     cx
TRANGROUP:0FF5		       cmp     al, 0Dh
TRANGROUP:0FF7		       jnz     short FOR_MAKE_LOOP
TRANGROUP:0FF9		       not     cl
TRANGROUP:0FFB		       mov     [es:COMBUF+1], cl
TRANGROUP:1000		       mov     ds, [es:RESSEG]
TRANGROUP:1005		       assume ds:RESGROUP
TRANGROUP:1005		       test    [EchoFlag], 1   ; byte
TRANGROUP:100A		       jz      short NOECHO3
TRANGROUP:100C		       cmp     [NullFlag], 1   ; cmp byte [NullFlag],nullcommand
TRANGROUP:1011		       jz      short NO_CRLF_PR
TRANGROUP:1013		       call    CRLF2
TRANGROUP:1016
TRANGROUP:1016 NO_CRLF_PR:			       ; ...
TRANGROUP:1016		       mov     [NullFlag], 0   ; byte
TRANGROUP:101B		       push    cs
TRANGROUP:101C		       pop     ds
TRANGROUP:101D		       assume ds:TRANGROUP
TRANGROUP:101D		       push    di
TRANGROUP:101E		       call    PRINT_PROMPT
TRANGROUP:1021		       pop     di
TRANGROUP:1022		       mov     [byte ptr es:di-1], 0
TRANGROUP:1027		       mov     [string_ptr_2], (offset COMBUF+2)
TRANGROUP:102D		       mov     dx, offset string_buf_ptr
TRANGROUP:1030		       call    std_printf
TRANGROUP:1033		       mov     [byte ptr es:di-1], 0Dh
TRANGROUP:1038		       jmp     DOCOM
TRANGROUP:103B ; ---------------------------------------------------------------------------
TRANGROUP:103B
TRANGROUP:103B NOECHO3:				       ; ...
TRANGROUP:103B		       mov     [ds:NullFlag], 0	; byte
TRANGROUP:1040		       push    cs
TRANGROUP:1041		       pop     ds
TRANGROUP:1042		       jmp     DOCOM0
TRANGROUP:1042 ; END OF	FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:1045 ; ---------------------------------------------------------------------------
TRANGROUP:1045
TRANGROUP:1045 FORNESTERRJ:			       ; ...
TRANGROUP:1045		       call    FOROFF
TRANGROUP:1048		       jmp     FORNESTERR
TRANGROUP:104B ; ---------------------------------------------------------------------------
TRANGROUP:104B
TRANGROUP:104B FORERRORJ:			       ; ...
TRANGROUP:104B		       jmp     IFERROR
TRANGROUP:104E ; ---------------------------------------------------------------------------
TRANGROUP:104E
TRANGROUP:104E _$FOR:				       ; ...
TRANGROUP:104E		       mov     es, [RESSEG]
TRANGROUP:1052		       assume es:RESGROUP
TRANGROUP:1052		       cmp     [es:ForFlag], 0 ; byte
TRANGROUP:1058		       jnz     short FORNESTERRJ
TRANGROUP:105A		       cmp     [es:PipeFiles], 0 ; byte
TRANGROUP:1060		       jz      short NO_PIPE
TRANGROUP:1062		       call    PIPEDEL
TRANGROUP:1065
TRANGROUP:1065 NO_PIPE:				       ; ...
TRANGROUP:1065		       xor     dx, dx
TRANGROUP:1067		       call    NEXTARG
TRANGROUP:106A		       jb      short FORERRORJ
TRANGROUP:106C		       cmp     al, 25h ; '%'
TRANGROUP:106E		       jnz     short FORERRORJ
TRANGROUP:1070		       mov     bp, ax
TRANGROUP:1072		       lodsb
TRANGROUP:1073		       or      al, al
TRANGROUP:1075		       jnz     short FORERRORJ
TRANGROUP:1077		       call    NEXTARG
TRANGROUP:107A		       jb      short FORERRORJ
TRANGROUP:107C		       and     ax, 0DFDFh      ; ~2020h	; uppercase letters
TRANGROUP:107F		       cmp     ax, 4E49h       ; 'IN' (NASM syntax)
TRANGROUP:1082		       jnz     short FORERRORJ
TRANGROUP:1084		       lodsb
TRANGROUP:1085		       or      al, al
TRANGROUP:1087		       jnz     short FORERRORJ
TRANGROUP:1089
TRANGROUP:1089 CHECKLPAREN:
TRANGROUP:1089		       call    NEXTARG
TRANGROUP:108C		       jb      short FORERRORJ
TRANGROUP:108E		       cmp     al, 28h ; '('
TRANGROUP:1090		       jnz     short FORERRORJ
TRANGROUP:1092		       cmp     ah, 0
TRANGROUP:1095		       jz      short FOR_PAREN_TOKEN
TRANGROUP:1097		       cmp     ah, 29h ; ')'
TRANGROUP:109A		       jnz     short FOR_LIST_NOT_EMPTY
TRANGROUP:109C		       jmp     FORTERM
TRANGROUP:109F ; ---------------------------------------------------------------------------
TRANGROUP:109F
TRANGROUP:109F FOR_LIST_NOT_EMPTY:		       ; ...
TRANGROUP:109F		       inc     [word ptr bx]   ; [bx+ARGV_ELE.argpointer] ; [bx+0]
TRANGROUP:10A1		       dec     [word ptr bx+5] ; [bx+ARGV_ELE.arglen]
TRANGROUP:10A4		       inc     si
TRANGROUP:10A5		       jmp     short FOR_LIST
TRANGROUP:10A7 ; ---------------------------------------------------------------------------
TRANGROUP:10A7
TRANGROUP:10A7 FOR_PAREN_TOKEN:			       ; ...
TRANGROUP:10A7		       call    NEXTARG
TRANGROUP:10AA		       jb      short FORERRORJ
TRANGROUP:10AC		       cmp     ax, 29h ; ')'
TRANGROUP:10AF		       jnz     short FOR_LIST
TRANGROUP:10B1		       jmp     FORTERM
TRANGROUP:10B4 ; ---------------------------------------------------------------------------
TRANGROUP:10B4
TRANGROUP:10B4 FORERORJJ:			       ; ...
TRANGROUP:10B4		       jmp     IFERROR
TRANGROUP:10B7 ; ---------------------------------------------------------------------------
TRANGROUP:10B7
TRANGROUP:10B7 FOR_LIST:			       ; ...
TRANGROUP:10B7		       mov     cx, dx
TRANGROUP:10B9
TRANGROUP:10B9 SKIP_LIST:			       ; ...
TRANGROUP:10B9		       add     si, [bx+5]      ; [bx+ARGV_ELE.arglen]
TRANGROUP:10BC		       sub     si, 3
TRANGROUP:10BF		       mov     al, 29h ; ')'
TRANGROUP:10C1		       cmp     [si], al
TRANGROUP:10C3		       jz      short FOR_END_LIST
TRANGROUP:10C5		       call    NEXTARG
TRANGROUP:10C8		       jb      short FORERORJJ
TRANGROUP:10CA		       jmp     short SKIP_LIST
TRANGROUP:10CC ; ---------------------------------------------------------------------------
TRANGROUP:10CC
TRANGROUP:10CC FOR_END_LIST:			       ; ...
TRANGROUP:10CC		       mov     di, dx
TRANGROUP:10CE		       mov     [byte ptr si], 0
TRANGROUP:10D1		       cmp     ax, 29h ; ')'   ; db ')',0
TRANGROUP:10D4		       jz      short FOR_DO
TRANGROUP:10D6		       inc     di
TRANGROUP:10D7
TRANGROUP:10D7 FOR_DO:				       ; ...
TRANGROUP:10D7		       call    NEXTARG
TRANGROUP:10DA		       jb      short FORERORJJ
TRANGROUP:10DC		       and     ax, 0DFDFh      ; ~2020h	; uppercase the	letters
TRANGROUP:10DF		       cmp     ax, 4F44h       ; 'DO' (NASM syntax)
TRANGROUP:10E2		       jnz     short FORERORJJ
TRANGROUP:10E4		       lodsb
TRANGROUP:10E5		       or      al, al
TRANGROUP:10E7		       jnz     short FORERORJJ
TRANGROUP:10E9		       call    NEXTARG
TRANGROUP:10EC		       jb      short FORERORJJ
TRANGROUP:10EE		       push    ax
TRANGROUP:10EF		       push    bx
TRANGROUP:10F0		       push    cx
TRANGROUP:10F1		       push    dx
TRANGROUP:10F2		       push    di
TRANGROUP:10F3		       push    si
TRANGROUP:10F4		       push    bp
TRANGROUP:10F5		       call    FREE_TPA
TRANGROUP:10F8		       call    FOROFF
TRANGROUP:10FB		       mov     bx, 264	       ; FOR_INFO.size-ARG_UNIT.SIZE
TRANGROUP:10FE		       call    SAVE_ARGS
TRANGROUP:1101		       pushf
TRANGROUP:1102		       mov     [es:ForPtr], ax
TRANGROUP:1106		       call    ALLOC_TPA
TRANGROUP:1109		       popf
TRANGROUP:110A		       pop     bp
TRANGROUP:110B		       pop     si
TRANGROUP:110C		       pop     di
TRANGROUP:110D		       pop     dx
TRANGROUP:110E		       pop     cx
TRANGROUP:110F		       pop     bx
TRANGROUP:1110		       pop     ax
TRANGROUP:1111		       jb      short FOR_ALLOC_ERR
TRANGROUP:1113		       push    es
TRANGROUP:1114		       push    [es:ForPtr]
TRANGROUP:1119		       pop     es
TRANGROUP:111A		       assume es:nothing
TRANGROUP:111A		       dec     cx
TRANGROUP:111B		       dec     di
TRANGROUP:111C		       mov     [es:447h], cx   ; [es:FOR_INFO.FOR_MINARG]
TRANGROUP:1121		       mov     [es:449h], di   ; [es:FOR_INFO.FOR_MAXARG]
TRANGROUP:1126		       mov     [es:444h], dl   ; [es:FOR_INFO.FOR_COM_START]
TRANGROUP:112B		       mov     [word ptr es:445h], 0FFFFh ; [es:FOR_INFO.FOR_EXPAND],-1
TRANGROUP:1132		       mov     ax, bp
TRANGROUP:1134		       mov     [es:54Bh], ah   ; [es:FOR_INFO.FOR_VAR]
TRANGROUP:1139		       pop     es
TRANGROUP:113A		       inc     [es:ForFlag]    ; byte
TRANGROUP:113F		       cmp     [es:SingleCom], 0FFFFh ;	-1
TRANGROUP:1145		       jnz     short FOR_RET
TRANGROUP:1147		       mov     [es:SingleCom], 0FF00h
TRANGROUP:114E
TRANGROUP:114E FOR_RET:				       ; ...
TRANGROUP:114E		       retn
TRANGROUP:114F ; ---------------------------------------------------------------------------
TRANGROUP:114F
TRANGROUP:114F FOR_ALLOC_ERR:			       ; ...
TRANGROUP:114F		       mov     [msg_disp_class], 1 ; ext_msg_class
TRANGROUP:1154		       mov     dx, offset extend_buf_ptr
TRANGROUP:1157		       mov     [extend_buf_ptr], 8 ; ERROR_NOT_ENOUGH_MEMORY
TRANGROUP:115D		       jmp     cerror
TRANGROUP:1160
TRANGROUP:1160 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1160
TRANGROUP:1160
TRANGROUP:1160 proc	       NEXTARG near	       ; ...
TRANGROUP:1160		       inc     dx
TRANGROUP:1161		       cmp     dx, [ARG_ARGVCNT] ; [ARG+ARG_UNIT.argvcnt]
TRANGROUP:1165		       jge     short NEXTARG_ERR
TRANGROUP:1167		       mov     bx, dx
TRANGROUP:1169		       mov     ax, offset ARG_ARGV
TRANGROUP:116C		       call    argv_calc
TRANGROUP:116F		       mov     si, [bx]	       ; [bx+ARGV_ELE.argpointer] ; mov	si,[bx+0]
TRANGROUP:1171		       lodsw
TRANGROUP:1172		       clc
TRANGROUP:1173		       retn
TRANGROUP:1174 ; ---------------------------------------------------------------------------
TRANGROUP:1174
TRANGROUP:1174 NEXTARG_ERR:			       ; ...
TRANGROUP:1174		       stc
TRANGROUP:1175		       retn
TRANGROUP:1175 endp	       NEXTARG
TRANGROUP:1175
TRANGROUP:1176 ; ---------------------------------------------------------------------------
TRANGROUP:1176
TRANGROUP:1176 FORNESTERR:			       ; ...
TRANGROUP:1176		       push    ds
TRANGROUP:1177		       mov     ds, [RESSEG]
TRANGROUP:117B		       assume ds:RESGROUP
TRANGROUP:117B		       mov     dx, offset FORNESTMES_PTR
TRANGROUP:117E		       cmp     [SingleCom], 0FF00h
TRANGROUP:1184		       jnz     short NOFORP3
TRANGROUP:1186		       mov     [SingleCom], 0FFFFh ; -1
TRANGROUP:118C
TRANGROUP:118C NOFORP3:				       ; ...
TRANGROUP:118C		       pop     ds
TRANGROUP:118D		       assume ds:nothing
TRANGROUP:118D		       jmp     cerror
TRANGROUP:1190
TRANGROUP:1190 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1190
TRANGROUP:1190
TRANGROUP:1190 proc	       FOROFF near	       ; ...
TRANGROUP:1190		       push    ax
TRANGROUP:1191		       push    es
TRANGROUP:1192		       mov     es, [cs:RESSEG]
TRANGROUP:1197		       assume es:RESGROUP
TRANGROUP:1197		       mov     ax, [es:ForPtr]
TRANGROUP:119B		       or      ax, ax
TRANGROUP:119D		       jz      short FREEDONE
TRANGROUP:119F		       push    es
TRANGROUP:11A0		       mov     es, ax
TRANGROUP:11A2		       assume es:nothing
TRANGROUP:11A2		       mov     ah, 49h
TRANGROUP:11A4		       int     21h	       ; DOS - 2+ - FREE MEMORY
TRANGROUP:11A4					       ; ES = segment address of area to be freed
TRANGROUP:11A6		       pop     es
TRANGROUP:11A7
TRANGROUP:11A7 FREEDONE:			       ; ...
TRANGROUP:11A7		       mov     [es:ForPtr], 0  ; word
TRANGROUP:11AE		       mov     [es:ForFlag], 0 ; byte
TRANGROUP:11B4		       pop     es
TRANGROUP:11B5		       pop     ax
TRANGROUP:11B6		       retn
TRANGROUP:11B6 endp	       FOROFF
TRANGROUP:11B6
TRANGROUP:11B7 ; ---------------------------------------------------------------------------
TRANGROUP:11B7
TRANGROUP:11B7 CATALOG:				       ; ...
TRANGROUP:11B7		       mov     [ds:nocommas], 0
TRANGROUP:11BC		       mov     [ds:bfree_not_kilo], 0 ;	use kilobyte if	number of bytes	is very	big
TRANGROUP:11C1		       push    ax
TRANGROUP:11C2		       push    cx
TRANGROUP:11C3		       push    di
TRANGROUP:11C4		       push    si
TRANGROUP:11C5		       push    es
TRANGROUP:11C6		       mov     si, offset no_sep_text ;	NO_SEP=1 ; Removes the commas from numbers
TRANGROUP:11C9		       call    find_name_in_environment
TRANGROUP:11CC		       jb      short catalog0
TRANGROUP:11CE		       mov     [ds:bfree_not_kilo], 0FFh ; no need to kilobyte (short) display
TRANGROUP:11D3		       mov     [ds:nocommas], 0FFh ; do	not use	commas for displaying numbers
TRANGROUP:11D8
TRANGROUP:11D8 catalog0:			       ; ...
TRANGROUP:11D8		       pop     es
TRANGROUP:11D9		       pop     si
TRANGROUP:11DA		       pop     di
TRANGROUP:11DB		       pop     cx
TRANGROUP:11DC		       pop     ax
TRANGROUP:11DD		       call    SetDefaults
TRANGROUP:11E0		       call    ParseEnvironment
TRANGROUP:11E3		       call    ParseCmdLine
TRANGROUP:11E6		       jnb     short catalog1  ; no parse error
TRANGROUP:11E8		       jmp     catErr
TRANGROUP:11EB ; ---------------------------------------------------------------------------
TRANGROUP:11EB
TRANGROUP:11EB catalog1:			       ; ...
TRANGROUP:11EB		       call    SetOptions
TRANGROUP:11EE		       call    SetCollatingTable
TRANGROUP:11F1		       mov     [ds:narrow], 0
TRANGROUP:11F6		       test    [ds:_Bits], 20h ; /Z switch (narrow)
TRANGROUP:11FC		       jz      short catalog1_1
TRANGROUP:11FE		       mov     [ds:narrow], 0FFh
TRANGROUP:1203		       mov     [ds:nocommas], 0FFh
TRANGROUP:1208
TRANGROUP:1208 catalog1_1:			       ; ...
TRANGROUP:1208		       test    [ds:_Bits], 40h ; /4 switch
TRANGROUP:120E		       jz      short catalog1_2
TRANGROUP:1210		       mov     [cs:yeardigit4],	0FFh ; 4 digits	year
TRANGROUP:1216		       jmp     short catalog1_3
TRANGROUP:1218 ; ---------------------------------------------------------------------------
TRANGROUP:1218
TRANGROUP:1218 catalog1_2:			       ; ...
TRANGROUP:1218		       mov     [cs:yeardigit4],	0 ; 2 digits year
TRANGROUP:121E
TRANGROUP:121E catalog1_3:			       ; ...
TRANGROUP:121E		       test    [ds:_Bits], 8   ; mask.bare
TRANGROUP:1224		       jnz     short catalog2
TRANGROUP:1226		       call    OkVolArg
TRANGROUP:1229		       sub     [ds:LeftOnPage],	2
TRANGROUP:122E		       jmp     short catCrunch
TRANGROUP:1230 ; ---------------------------------------------------------------------------
TRANGROUP:1230
TRANGROUP:1230 catalog2:			       ; ...
TRANGROUP:1230		       call    DisAppend
TRANGROUP:1233		       mov     dx, offset BWDBUF ; DIRBUF
TRANGROUP:1236		       mov     ah, 1Ah
TRANGROUP:1238		       int     21h	       ; DOS - SET DISK	TRANSFER AREA ADDRESS
TRANGROUP:1238					       ; DS:DX -> disk transfer	buffer
TRANGROUP:123A		       mov     di, 5Dh	       ; FCB+1
TRANGROUP:123D		       mov     al, 3Fh ; '?'
TRANGROUP:123F		       mov     cx, 11
TRANGROUP:1242		       rep stosb
TRANGROUP:1244
TRANGROUP:1244 catCrunch:			       ; ...
TRANGROUP:1244		       call    CrunchPath
TRANGROUP:1247		       jb      short catRecErr
TRANGROUP:1249		       cmp     [ds:COMSW], 0   ; word
TRANGROUP:124E		       jnz     short catRecErr
TRANGROUP:1250		       call    InstallCtrlC
TRANGROUP:1253		       call    ZeroTotals
TRANGROUP:1256		       call    ListDir
TRANGROUP:1259		       jb      short catExtErr
TRANGROUP:125B		       test    [ds:_Bits], 4   ; mask.subd
TRANGROUP:1261		       jz      short catalog3
TRANGROUP:1263		       call    ListSubds
TRANGROUP:1266		       jb      short catExtErr
TRANGROUP:1268
TRANGROUP:1268 catalog3:			       ; ...
TRANGROUP:1268		       test    [ds:_Bits], 8   ; mask.bare
TRANGROUP:126E		       jnz     short catRet
TRANGROUP:1270		       mov     cx, [ds:FileCntTotal]
TRANGROUP:1274		       or      cx, [ds:FileCntTotal+2]
TRANGROUP:1278		       jcxz    short catNoFiles
TRANGROUP:127A		       call    DisplayTotals
TRANGROUP:127D		       jmp     short catRet
TRANGROUP:127F ; ---------------------------------------------------------------------------
TRANGROUP:127F
TRANGROUP:127F catRecErr:			       ; ...
TRANGROUP:127F		       test    [ds:COMSW], 1   ; mask.dev
TRANGROUP:1285		       jnz     short catNoFiles
TRANGROUP:1287		       test    [ds:COMSW], 2   ; mask.baddir
TRANGROUP:128D		       jz      short catExtErr
TRANGROUP:128F		       mov     dx, offset badcd_ptr
TRANGROUP:1292		       jmp     short catErr
TRANGROUP:1294 ; ---------------------------------------------------------------------------
TRANGROUP:1294
TRANGROUP:1294 catNoFiles:			       ; ...
TRANGROUP:1294		       call    DisplayHeader
TRANGROUP:1297		       mov     ax, 2	       ; ERROR_FILE_NOT_FOUND
TRANGROUP:129A		       mov     [ds:msg_disp_class], 1 ;	ext_msg_class
TRANGROUP:129F		       mov     dx, offset extend_buf_ptr
TRANGROUP:12A2		       mov     [ds:extend_buf_ptr], ax
TRANGROUP:12A5		       jmp     short catErr
TRANGROUP:12A7 ; ---------------------------------------------------------------------------
TRANGROUP:12A7
TRANGROUP:12A7 catExtErr:			       ; ...
TRANGROUP:12A7		       call    Set_Ext_Error_Msg
TRANGROUP:12AA		       cmp     [ds:extend_buf_ptr], 18 ; ERROR_NO_MORE_FILES
TRANGROUP:12AF		       jnz     short catErr
TRANGROUP:12B1		       mov     [ds:extend_buf_ptr], 2 ;	ERROR_FILE_NOT_FOUND
TRANGROUP:12B7
TRANGROUP:12B7 catErr:				       ; ...
TRANGROUP:12B7		       jmp     cerror
TRANGROUP:12BA ; ---------------------------------------------------------------------------
TRANGROUP:12BA
TRANGROUP:12BA catRet:				       ; ...
TRANGROUP:12BA		       retn
TRANGROUP:12BB
TRANGROUP:12BB ; =============== S U B R O U T I N E =======================================
TRANGROUP:12BB
TRANGROUP:12BB
TRANGROUP:12BB proc	       SetDefaults near	       ; ...
TRANGROUP:12BB		       mov     di, offset SrcBuf
TRANGROUP:12BE		       mov     [ds:PathPos], di	; PathPos = ptr	to pathname
TRANGROUP:12C2		       mov     al, 2Ah ; '*'   ; STAR
TRANGROUP:12C4		       stosb
TRANGROUP:12C5		       mov     al, 0Dh	       ; END_OF_LINE_IN
TRANGROUP:12C7		       stosb		       ; SrcBuf	= '*',0Dh
TRANGROUP:12C8		       mov     [ds:PathCnt], 1 ; PathCnt = pathname length
TRANGROUP:12CE		       xor     ax, ax	       ; 0
TRANGROUP:12D0		       mov     [ds:COMSW], ax  ; = no error
TRANGROUP:12D3		       mov     [ds:_Bits], ax  ; = options off
TRANGROUP:12D6		       mov     [ds:DestBuf], al	; = no sort
TRANGROUP:12D9		       mov     [ds:AttrSpecified], 6 ; ATTR_HIDDEN+ATTR_SYSTEM
TRANGROUP:12DE		       mov     [ds:AttrSelect],	al ; exclude hidden, system files
TRANGROUP:12E1		       retn
TRANGROUP:12E1 endp	       SetDefaults
TRANGROUP:12E1
TRANGROUP:12E2
TRANGROUP:12E2 ; =============== S U B R O U T I N E =======================================
TRANGROUP:12E2
TRANGROUP:12E2
TRANGROUP:12E2 proc	       ParseEnvironment	near   ; ...
TRANGROUP:12E2		       call    GetEnvValue
TRANGROUP:12E5		       jb      short peRet
TRANGROUP:12E7		       call    Parse_Line
TRANGROUP:12EA		       cmp     ax, 0FFFFh      ; -1
TRANGROUP:12ED		       jz      short peRet
TRANGROUP:12EF		       call    std_eprintf
TRANGROUP:12F2		       mov     [ds:msg_disp_class], 0FFh ; util_msg_class ; -1
TRANGROUP:12F7		       mov     dx, offset errparsenv_ptr
TRANGROUP:12FA		       call    Printf_Crlf
TRANGROUP:12FD
TRANGROUP:12FD peRet:				       ; ...
TRANGROUP:12FD		       retn
TRANGROUP:12FD endp	       ParseEnvironment
TRANGROUP:12FD
TRANGROUP:12FE
TRANGROUP:12FE ; =============== S U B R O U T I N E =======================================
TRANGROUP:12FE
TRANGROUP:12FE
TRANGROUP:12FE proc	       ParseCmdLine near       ; ...
TRANGROUP:12FE		       mov     si, 81h
TRANGROUP:1301		       call    Parse_Line
TRANGROUP:1304		       cmp     ax, 0FFFFh      ; -1
TRANGROUP:1307		       jz      short pcOk
TRANGROUP:1309		       stc
TRANGROUP:130A		       jmp     short pcRet
TRANGROUP:130C ; ---------------------------------------------------------------------------
TRANGROUP:130C
TRANGROUP:130C pcOk:				       ; ...
TRANGROUP:130C		       clc
TRANGROUP:130D
TRANGROUP:130D pcRet:				       ; ...
TRANGROUP:130D		       retn
TRANGROUP:130D endp	       ParseCmdLine
TRANGROUP:130D
TRANGROUP:130E
TRANGROUP:130E ; =============== S U B R O U T I N E =======================================
TRANGROUP:130E
TRANGROUP:130E
TRANGROUP:130E proc	       SetCollatingTable near  ; ...
TRANGROUP:130E		       mov     dx, offset STACK	; INTERNATVARS
TRANGROUP:1311		       mov     ax, 3800h
TRANGROUP:1314		       int     21h	       ; DOS - 2+ - GET	COUNTRY-DEPENDENT INFORMATION
TRANGROUP:1314					       ; get current-country info
TRANGROUP:1314					       ; DS:DX -> buffer for returned info
TRANGROUP:1316		       jb      short scNoTable
TRANGROUP:1318		       cmp     bx, 1
TRANGROUP:131B		       jz      short scNoTable
TRANGROUP:131D		       mov     ax, 6506h       ; (GETEXTCNTRY shl 8) + SETCOLLATE
TRANGROUP:1320		       mov     bx, 0FFFFh      ; -1
TRANGROUP:1323		       mov     cx, 5
TRANGROUP:1326		       mov     dx, bx
TRANGROUP:1328		       mov     di, offset CountryPtrId ; CountryPtrInfo
TRANGROUP:132B		       int     21h	       ; DOS - 4.x internal - COUNTRY-DEPENDENT	FILENAME CAPITALIZATION
TRANGROUP:132B					       ; AL = function -
TRANGROUP:132D		       jnb     short scRet
TRANGROUP:132F
TRANGROUP:132F scNoTable:			       ; ...
TRANGROUP:132F		       mov     [ds:CountryPtrId], 0
TRANGROUP:1334
TRANGROUP:1334 scRet:				       ; ...
TRANGROUP:1334		       retn
TRANGROUP:1334 endp	       SetCollatingTable
TRANGROUP:1334
TRANGROUP:1335
TRANGROUP:1335 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1335
TRANGROUP:1335
TRANGROUP:1335 proc	       SetOptions near	       ; ...
TRANGROUP:1335		       test    [ds:_Bits], 8   ; mask.bare
TRANGROUP:133B		       jz      short setopts1
TRANGROUP:133D		       and     [ds:_Bits], 0FFFEh ; ~mask.wide
TRANGROUP:1342
TRANGROUP:1342 setopts1:			       ; ...
TRANGROUP:1342		       push    ds
TRANGROUP:1343		       mov     ax, 40h	       ; ROMBIOS_DATA
TRANGROUP:1346		       mov     ds, ax
TRANGROUP:1348		       assume ds:nothing
TRANGROUP:1348		       mov     al, [ds:84h]    ; [CRT_Rows]
TRANGROUP:134B		       pop     ds
TRANGROUP:134C		       assume ds:nothing
TRANGROUP:134C		       or      al, al
TRANGROUP:134E		       jnz     short setopts3
TRANGROUP:1350		       mov     al, 25	       ; LINESPERPAGE
TRANGROUP:1352
TRANGROUP:1352 setopts3:			       ; ...
TRANGROUP:1352		       xor     ah, ah
TRANGROUP:1354		       inc     al
TRANGROUP:1356		       mov     [ds:LinPerPag], ax
TRANGROUP:1359		       mov     ax, 440Ch       ; (IOCTL	shl 8)+GENERIC_IOCTL_HANDLE
TRANGROUP:135C		       mov     bx, 1	       ; STDOUT
TRANGROUP:135F		       mov     ch, 3	       ; IOC_SC
TRANGROUP:1361		       mov     cl, 7Fh	       ; get_generic
TRANGROUP:1363		       mov     dx, offset Display_Ioctl
TRANGROUP:1366		       int     21h	       ; DOS - 2+ - IOCTL -
TRANGROUP:1368		       mov     ax, [ds:LinPerPag]
TRANGROUP:136B		       mov     [ds:LeftOnPage],	ax
TRANGROUP:136E		       mov     [ds:PerLine], 1
TRANGROUP:1373		       test    [ds:_Bits], 1   ; mask.wide
TRANGROUP:1379		       jz      short setopts4
TRANGROUP:137B		       mov     [ds:PerLine], 5 ; WIDEPERLIN
TRANGROUP:1380
TRANGROUP:1380 setopts4:			       ; ...
TRANGROUP:1380		       cmp     [ds:SrcBuf+1], 3Ah ; ':'
TRANGROUP:1385		       jnz     short soRet
TRANGROUP:1387		       mov     al, [ds:SrcBuf]
TRANGROUP:138A		       and     al, 0DFh	       ; not 20h
TRANGROUP:138C		       sub     al, 40h ; '@'
TRANGROUP:138E		       mov     [ds:5Ch], al    ; [FCB]
TRANGROUP:1391
TRANGROUP:1391 soRet:				       ; ...
TRANGROUP:1391		       retn
TRANGROUP:1391 endp	       SetOptions
TRANGROUP:1391
TRANGROUP:1392
TRANGROUP:1392 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1392
TRANGROUP:1392
TRANGROUP:1392 proc	       CrunchPath near	       ; ...
TRANGROUP:1392		       call    FileIsDevice
TRANGROUP:1395		       jnz     short crpath1
TRANGROUP:1397		       or      [ds:COMSW], 1   ; or byte [COMSW],mask.dev
TRANGROUP:139C		       jmp     short cpErr
TRANGROUP:139E ; ---------------------------------------------------------------------------
TRANGROUP:139E
TRANGROUP:139E crpath1:				       ; ...
TRANGROUP:139E		       push    [ds:PathPos]
TRANGROUP:13A2		       mov     [ds:DirFlag], 0FFh ; -1
TRANGROUP:13A7		       call    PathCrunch
TRANGROUP:13AA		       mov     [ds:DirFlag], 0 ; byte
TRANGROUP:13AF		       pop     si
TRANGROUP:13B0		       jb      short cpNoDir
TRANGROUP:13B2		       jz      short cpRet
TRANGROUP:13B4		       mov     si, [ds:DestTail]
TRANGROUP:13B8		       jmp     short cpFile
TRANGROUP:13BA ; ---------------------------------------------------------------------------
TRANGROUP:13BA
TRANGROUP:13BA cpNoDir:				       ; ...
TRANGROUP:13BA		       mov     ax, [ds:Msg_Numb]
TRANGROUP:13BD		       or      ax, ax
TRANGROUP:13BF		       jnz     short cpErr
TRANGROUP:13C1		       cmp     [ds:DestIsDir], 0
TRANGROUP:13C6		       jz      short cpMaybe
TRANGROUP:13C8		       or      [ds:COMSW], 2   ; or byte [COMSW],mask.baddir
TRANGROUP:13CD		       jmp     short cpErr
TRANGROUP:13CF ; ---------------------------------------------------------------------------
TRANGROUP:13CF
TRANGROUP:13CF cpMaybe:				       ; ...
TRANGROUP:13CF		       cmp     [byte ptr si+1],	3Ah ; ':' ; COLON_CHAR
TRANGROUP:13D3		       jnz     short crpath2
TRANGROUP:13D5		       lodsw
TRANGROUP:13D6
TRANGROUP:13D6 crpath2:				       ; ...
TRANGROUP:13D6		       cmp     [word ptr si], 2E2Eh ; ".." ?
TRANGROUP:13DA		       jnz     short cpFile    ; if not	"..", treat as a file
TRANGROUP:13DC		       cmp     [byte ptr si+2],	0
TRANGROUP:13E0		       jnz     short cpFile    ; or if there's more after "..", treat as file
TRANGROUP:13E2		       or      [ds:COMSW], 2   ; or byte [COMSW],mask.baddir
TRANGROUP:13E7		       jmp     short cpErr
TRANGROUP:13E9 ; ---------------------------------------------------------------------------
TRANGROUP:13E9
TRANGROUP:13E9 cpFile:				       ; ...
TRANGROUP:13E9		       mov     di, 5Ch	       ; FCB
TRANGROUP:13EC		       mov     ax, 290Eh       ; (Parse_File_Descriptor<<8)|0Eh
TRANGROUP:13EF		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:13EF					       ; DS:SI -> string to parse
TRANGROUP:13EF					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:13EF					       ; AL = bit mask to control parsing
TRANGROUP:13F1		       clc
TRANGROUP:13F2		       jmp     short cpRet
TRANGROUP:13F4 ; ---------------------------------------------------------------------------
TRANGROUP:13F4
TRANGROUP:13F4 cpErr:				       ; ...
TRANGROUP:13F4		       stc
TRANGROUP:13F5
TRANGROUP:13F5 cpRet:				       ; ...
TRANGROUP:13F5		       retn
TRANGROUP:13F5 endp	       CrunchPath
TRANGROUP:13F5
TRANGROUP:13F6
TRANGROUP:13F6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:13F6
TRANGROUP:13F6
TRANGROUP:13F6 proc	       InstallCtrlC near       ; ...
TRANGROUP:13F6		       push    es
TRANGROUP:13F7		       mov     ax, 3523h
TRANGROUP:13FA		       int     21h	       ; DOS - 2+ - GET	INTERRUPT VECTOR
TRANGROUP:13FA					       ; AL = interrupt	number
TRANGROUP:13FA					       ; Return: ES:BX = value of interrupt vector
TRANGROUP:13FC		       mov     [word ptr ds:OldCtrlCHandler], bx
TRANGROUP:1400		       mov     [word ptr ds:OldCtrlCHandler+2],	es
TRANGROUP:1404		       pop     es
TRANGROUP:1405		       mov     dx, offset CtrlCHandler
TRANGROUP:1408		       mov     ax, 2523h
TRANGROUP:140B		       int     21h	       ; DOS - SET INTERRUPT VECTOR
TRANGROUP:140B					       ; AL = interrupt	number
TRANGROUP:140B					       ; DS:DX = new vector to be used for specified interrupt
TRANGROUP:140D		       retn
TRANGROUP:140D endp	       InstallCtrlC
TRANGROUP:140D
TRANGROUP:140E
TRANGROUP:140E ; =============== S U B R O U T I N E =======================================
TRANGROUP:140E
TRANGROUP:140E
TRANGROUP:140E proc	       ListSubds near	       ; ...
TRANGROUP:140E		       call    SetRest1
TRANGROUP:1411		       mov     bx, offset ScanBuf
TRANGROUP:1414
TRANGROUP:1414 lsNode:				       ; ...
TRANGROUP:1414		       mov     [byte ptr bx], 0
TRANGROUP:1417
TRANGROUP:1417 lsLoop:				       ; ...
TRANGROUP:1417		       call    FindNextChild
TRANGROUP:141A		       jb      short lsErr
TRANGROUP:141C		       mov     dx, bx
TRANGROUP:141E		       call    ChangeDir
TRANGROUP:1421		       jnb     short lstsd1
TRANGROUP:1423		       cmp     ax, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:1426		       jz      short lsLoop
TRANGROUP:1428		       jmp     short lsRet
TRANGROUP:142A ; ---------------------------------------------------------------------------
TRANGROUP:142A
TRANGROUP:142A lstsd1:				       ; ...
TRANGROUP:142A		       push    bx
TRANGROUP:142B		       call    ListDir
TRANGROUP:142E		       pop     bx
TRANGROUP:142F		       mov     di, bx
TRANGROUP:1431		       mov     cx, 13
TRANGROUP:1434		       xor     al, al
TRANGROUP:1436		       repne scasb
TRANGROUP:1438		       push    bx
TRANGROUP:1439		       mov     bx, di
TRANGROUP:143B		       call    lsNode
TRANGROUP:143E		       pop     bx
TRANGROUP:143F		       pushf
TRANGROUP:1440		       mov     ax, 0
TRANGROUP:1443		       push    ax
TRANGROUP:1444		       mov     ax, 2E2Eh       ; ".."
TRANGROUP:1447		       push    ax
TRANGROUP:1448		       mov     dx, sp
TRANGROUP:144A		       call    ChangeDir
TRANGROUP:144D		       pop     ax
TRANGROUP:144E		       pop     ax
TRANGROUP:144F		       popf
TRANGROUP:1450		       jb      short lsRet
TRANGROUP:1452		       jmp     short lsLoop
TRANGROUP:1454 ; ---------------------------------------------------------------------------
TRANGROUP:1454
TRANGROUP:1454 lsErr:				       ; ...
TRANGROUP:1454		       call    get_ext_error_number
TRANGROUP:1457		       cmp     ax, 2	       ; ERROR_FILE_NOT_FOUND
TRANGROUP:145A		       jz      short lsRet
TRANGROUP:145C		       cmp     ax, 18	       ; ERROR_NO_MORE_FILES
TRANGROUP:145F		       jz      short lsRet
TRANGROUP:1461		       stc
TRANGROUP:1462
TRANGROUP:1462 lsRet:				       ; ...
TRANGROUP:1462		       retn
TRANGROUP:1462 endp	       ListSubds
TRANGROUP:1462
TRANGROUP:1463
TRANGROUP:1463 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1463
TRANGROUP:1463
TRANGROUP:1463 proc	       CheckChild near	       ; ...
TRANGROUP:1463		       test    [ds:BWDBUF+15h],	10h ; [DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY
TRANGROUP:1468		       jz      short ccRet
TRANGROUP:146A		       cmp     [ds:BWDBUF+1Eh],	2Eh ; '.' ; [DIRBUF+FIND_BUF.PNAME],'.'
TRANGROUP:146F		       jz      short ccRet
TRANGROUP:1471		       mov     si, (offset BWDBUF+1Eh) ; offset	DIRBUF+FIND_BUF.PNAME
TRANGROUP:1474		       mov     di, bx
TRANGROUP:1476		       call    CmpAscz
TRANGROUP:1479		       jbe     short ccRet
TRANGROUP:147B		       mov     si, (offset BWDBUF+1Eh) ; offset	DIRBUF+FIND_BUF.PNAME
TRANGROUP:147E		       mov     di, bp
TRANGROUP:1480		       call    CmpAscz
TRANGROUP:1483		       jnb     short ccRet
TRANGROUP:1485		       mov     si, (offset BWDBUF+1Eh)
TRANGROUP:1488		       mov     di, bp
TRANGROUP:148A		       mov     cx, 13
TRANGROUP:148D		       rep movsb
TRANGROUP:148F
TRANGROUP:148F ccRet:				       ; ...
TRANGROUP:148F		       retn
TRANGROUP:148F endp	       CheckChild
TRANGROUP:148F
TRANGROUP:1490
TRANGROUP:1490 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1490
TRANGROUP:1490
TRANGROUP:1490 proc	       CmpEntry	near	       ; ...
TRANGROUP:1490		       mov     si, offset DestBuf
TRANGROUP:1493
TRANGROUP:1493 ceLoop:				       ; ...
TRANGROUP:1493		       xor     ax, ax
TRANGROUP:1495		       mov     al, [si]
TRANGROUP:1497		       or      al, al
TRANGROUP:1499		       jz      short ceDone
TRANGROUP:149B		       inc     si
TRANGROUP:149C		       push    si
TRANGROUP:149D		       dec     al
TRANGROUP:149F		       shl     al, 1
TRANGROUP:14A1		       mov     si, ax
TRANGROUP:14A3		       mov     ax, [cs:FieldCmps+si]
TRANGROUP:14A8		       jb      short ceDn
TRANGROUP:14AA		       call    ax
TRANGROUP:14AC		       jmp     short ceNs
TRANGROUP:14AE ; ---------------------------------------------------------------------------
TRANGROUP:14AE
TRANGROUP:14AE ceDn:				       ; ...
TRANGROUP:14AE		       xchg    bx, bp
TRANGROUP:14B0		       call    ax
TRANGROUP:14B2		       xchg    bx, bp
TRANGROUP:14B4
TRANGROUP:14B4 ceNs:				       ; ...
TRANGROUP:14B4		       pop     si
TRANGROUP:14B5		       jz      short ceLoop
TRANGROUP:14B7
TRANGROUP:14B7 ceDone:				       ; ...
TRANGROUP:14B7		       retn
TRANGROUP:14B7 endp	       CmpEntry
TRANGROUP:14B7
TRANGROUP:14B7 ; ---------------------------------------------------------------------------
TRANGROUP:14B8 FieldCmps       dw offset CmpName       ; ...
TRANGROUP:14BA		       dw offset CmpExt
TRANGROUP:14BC		       dw offset CmpTime
TRANGROUP:14BE		       dw offset CmpSize
TRANGROUP:14C0		       dw offset CmpType
TRANGROUP:14C2 ; ---------------------------------------------------------------------------
TRANGROUP:14C2
TRANGROUP:14C2 CmpName:				       ; ...
TRANGROUP:14C2		       mov     si, bx
TRANGROUP:14C4		       mov     di, bp
TRANGROUP:14C6		       add     si, 1
TRANGROUP:14C9		       add     di, 1
TRANGROUP:14CC		       mov     cx, 8
TRANGROUP:14CF		       jmp     short CmpStr
TRANGROUP:14D1 ; ---------------------------------------------------------------------------
TRANGROUP:14D1
TRANGROUP:14D1 CmpExt:				       ; ...
TRANGROUP:14D1		       mov     si, bx
TRANGROUP:14D3		       mov     di, bp
TRANGROUP:14D5		       add     si, 9
TRANGROUP:14D8		       add     di, 9
TRANGROUP:14DB		       mov     cx, 3
TRANGROUP:14DE
TRANGROUP:14DE CmpStr:				       ; ...
TRANGROUP:14DE		       cmp     [ds:CountryPtrId], 6 ; byte
TRANGROUP:14E3		       jnz     short cnNoCollTable
TRANGROUP:14E5		       push    bp
TRANGROUP:14E6		       push    bx
TRANGROUP:14E7		       push    ds
TRANGROUP:14E8		       lds     bx, [ds:CountryPtr]
TRANGROUP:14EC		       mov     bp, [bx]
TRANGROUP:14EE		       inc     bx
TRANGROUP:14EF		       inc     bx
TRANGROUP:14F0		       xor     ax, ax
TRANGROUP:14F2		       xor     dh, dh
TRANGROUP:14F4
TRANGROUP:14F4 cnNextChar:			       ; ...
TRANGROUP:14F4		       mov     al, [es:di]
TRANGROUP:14F7		       inc     di
TRANGROUP:14F8		       test    dh, dh
TRANGROUP:14FA		       jz      short cn1
TRANGROUP:14FC		       xor     dh, dh
TRANGROUP:14FE		       mov     dl, al
TRANGROUP:1500		       lods    [byte ptr es:si]
TRANGROUP:1502		       jmp     short cn4
TRANGROUP:1504 ; ---------------------------------------------------------------------------
TRANGROUP:1504
TRANGROUP:1504 cn1:				       ; ...
TRANGROUP:1504		       call    testkanj
TRANGROUP:1507		       jz      short cn2
TRANGROUP:1509		       mov     dh, 1
TRANGROUP:150B
TRANGROUP:150B cn2:				       ; ...
TRANGROUP:150B		       cmp     ax, bp
TRANGROUP:150D		       jnb     short cn3
TRANGROUP:150F		       xlat
TRANGROUP:1510
TRANGROUP:1510 cn3:				       ; ...
TRANGROUP:1510		       mov     dl, al
TRANGROUP:1512		       lods    [byte ptr es:si]
TRANGROUP:1514		       cmp     ax, bp
TRANGROUP:1516		       jnb     short cn4
TRANGROUP:1518		       xlat
TRANGROUP:1519
TRANGROUP:1519 cn4:				       ; ...
TRANGROUP:1519		       cmp     al, dl
TRANGROUP:151B		       loope   cnNextChar
TRANGROUP:151D		       pop     ds
TRANGROUP:151E		       pop     bx
TRANGROUP:151F		       pop     bp
TRANGROUP:1520		       retn
TRANGROUP:1521 ; ---------------------------------------------------------------------------
TRANGROUP:1521
TRANGROUP:1521 cnNoCollTable:			       ; ...
TRANGROUP:1521		       repe cmps [byte ptr es:si], [byte ptr es:di] ;
TRANGROUP:1521					       ; repe	 ; 0F3h
TRANGROUP:1521					       ; es	 ; 26h
TRANGROUP:1521					       ; cmpsb	 ; 0A6h
TRANGROUP:1521					       ; retn	 ; 0C3h
TRANGROUP:1524		       retn
TRANGROUP:1525 ; ---------------------------------------------------------------------------
TRANGROUP:1525
TRANGROUP:1525 CmpTime:				       ; ...
TRANGROUP:1525		       mov     si, bx
TRANGROUP:1527		       mov     di, bp
TRANGROUP:1529		       add     si, 16
TRANGROUP:152C		       add     di, 16
TRANGROUP:152F		       mov     cx, 4
TRANGROUP:1532		       std
TRANGROUP:1533		       repe cmps [byte ptr es:si], [byte ptr es:di] ;
TRANGROUP:1533					       ; repe  ; 0F3h
TRANGROUP:1533					       ; es    ; 26h
TRANGROUP:1533					       ; cmpsb ; 0A6h
TRANGROUP:1536		       cld
TRANGROUP:1537		       retn
TRANGROUP:1538 ; ---------------------------------------------------------------------------
TRANGROUP:1538
TRANGROUP:1538 CmpSize:				       ; ...
TRANGROUP:1538		       mov     si, bx
TRANGROUP:153A		       mov     di, bp
TRANGROUP:153C		       add     si, 20
TRANGROUP:153F		       add     di, 20
TRANGROUP:1542		       mov     cx, 4
TRANGROUP:1545		       std
TRANGROUP:1546		       repe cmps [byte ptr es:si], [byte ptr es:di]
TRANGROUP:1549		       cld
TRANGROUP:154A		       retn
TRANGROUP:154B ; ---------------------------------------------------------------------------
TRANGROUP:154B
TRANGROUP:154B CmpType:				       ; ...
TRANGROUP:154B		       mov     al, [es:bx+0Ch] ; es:[bx].fileattr
TRANGROUP:154F		       mov     ah, [es:bp+0Ch] ; es:[bp].fileattr
TRANGROUP:1553		       and     ax, 1010h       ; (ATTR_DIRECTORY<<8)+ATTR_DIRECTORY
TRANGROUP:1556		       cmp     ah, al
TRANGROUP:1558		       retn
TRANGROUP:1559
TRANGROUP:1559 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1559
TRANGROUP:1559
TRANGROUP:1559 proc	       DefaultAttr near	       ; ...
TRANGROUP:1559		       mov     [ds:AttrSpecified], 6 ; ATTR_HIDDEN+ATTR_SYSTEM
TRANGROUP:155E		       mov     [ds:AttrSelect],	0 ; H and S must be off
TRANGROUP:1563		       clc
TRANGROUP:1564		       retn
TRANGROUP:1564 endp	       DefaultAttr
TRANGROUP:1564
TRANGROUP:1565
TRANGROUP:1565 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1565
TRANGROUP:1565
TRANGROUP:1565 proc	       DisplayTotals near      ; ...
TRANGROUP:1565		       test    [ds:_Bits], 4   ; mask.subd
TRANGROUP:156B		       jz      short dtFree
TRANGROUP:156D		       call    CRLF2
TRANGROUP:1570		       call    UseLine
TRANGROUP:1573		       mov     dx, offset total_ptr ; MSG_1080
TRANGROUP:1576		       call    std_printf
TRANGROUP:1579		       call    UseLine
TRANGROUP:157C		       mov     ax, [ds:FileCntTotal]
TRANGROUP:157F		       mov     si, offset FileSizTotal
TRANGROUP:1582		       mov     di, offset FileSiz
TRANGROUP:1585		       movsw
TRANGROUP:1586		       movsw
TRANGROUP:1587		       movsw
TRANGROUP:1588		       movsw
TRANGROUP:1589		       mov     dx, [ds:FileCntTotal+2]
TRANGROUP:158D		       call    DisplayCntSiz
TRANGROUP:1590
TRANGROUP:1590 dtFree:				       ; ...
TRANGROUP:1590		       call    GetDriveLtr
TRANGROUP:1593		       mov     [byte ptr ds:efs_drive],	al ; "C:\\"
TRANGROUP:1596		       mov     dx, offset efs_drive ; "C:\\"
TRANGROUP:1599		       mov     di, offset efs_buffer
TRANGROUP:159C		       mov     cx, 44
TRANGROUP:159F		       mov     [es:di],	cx
TRANGROUP:15A2		       mov     [word ptr es:di+2], 0
TRANGROUP:15A8		       mov     ax, 7303h       ; GET EXTENDED FREE SPACE ON DRIVE
TRANGROUP:15A8					       ; DS:DX -> ASCIZ	string for drive ("C:\"	or "\\SERVER\Share")
TRANGROUP:15A8					       ; ES:DI -> buffer for extended free space structure
TRANGROUP:15A8					       ; CX = length of	buffer for extended free space
TRANGROUP:15AB		       int     21h	       ; DOS -
TRANGROUP:15AB					       ;
TRANGROUP:15AB					       ; Return:
TRANGROUP:15AB					       ; CF clear if successful
TRANGROUP:15AB					       ; ES:DI buffer filled
TRANGROUP:15AB					       ; CF set	on error
TRANGROUP:15AB					       ; AX = error code
TRANGROUP:15AB					       ;
TRANGROUP:15AB					       ; Format	of extended free space structure:
TRANGROUP:15AB					       ;
TRANGROUP:15AB					       ; Offset	 Size	 Description
TRANGROUP:15AB					       ; 00h	WORD	(ret) size of returned structure
TRANGROUP:15AB					       ; 02h	WORD	(call) structure version (0000h)
TRANGROUP:15AB					       ;		(ret) actual structure version (0000h)
TRANGROUP:15AB					       ; 04h	DWORD	number of sectors per cluster
TRANGROUP:15AB					       ;		(with adjustment for compression)
TRANGROUP:15AB					       ; 08h	DWORD	number of bytes	per sector
TRANGROUP:15AB					       ; 0Ch	DWORD	number of available clusters
TRANGROUP:15AB					       ; 10h	DWORD	total number of	clusters on the	drive
TRANGROUP:15AB					       ; 14h	DWORD	number of physical sectors available on	the drive,
TRANGROUP:15AB					       ;		without	adjustment for compression
TRANGROUP:15AB					       ; 18h	DWORD	total number of	physical sectors on the	drive,
TRANGROUP:15AB					       ;		without	adjustment for compression
TRANGROUP:15AB					       ; 1Ch	DWORD	number of available allocation units,
TRANGROUP:15AB					       ;		without	adjustment for compression
TRANGROUP:15AB					       ; 20h	DWORD	total allocation units,
TRANGROUP:15AB					       ;		without	adjustment for compression
TRANGROUP:15AB					       ; 24h  8	BYTEs	reserved
TRANGROUP:15AD		       mov     cx, ax	       ; error code (cf=1) or (cf=0) efs structure size	(44)
TRANGROUP:15AF		       mov     bx, [es:di+8]   ; bytes per sector
TRANGROUP:15B3		       mov     ax, [es:di+14h] ; number	of sectors available
TRANGROUP:15B7		       mov     dx, [es:di+16h]
TRANGROUP:15BB		       jb      short get_efs_err
TRANGROUP:15BD		       or      cl, cl
TRANGROUP:15BF		       jnz     short dtFree_1  ; cl = 44 (IBMDOS 7.1 Kernel, INT 21h, AX=7303h return value)
TRANGROUP:15C1
TRANGROUP:15C1 get_efs_err:			       ; ...
TRANGROUP:15C1		       mov     ah, 36h
TRANGROUP:15C3		       mov     dl, [ds:5Ch]    ; [FCB]
TRANGROUP:15C7		       int     21h	       ; DOS - 2+ - GET	DISK SPACE
TRANGROUP:15C7					       ; DL = drive code (0 = default, 1 = A, 2	= B, etc.)
TRANGROUP:15C9		       cmp     ax, 0FFFFh      ; ax = sectors per cluster
TRANGROUP:15CC		       jz      short dtRet     ; invalid drive
TRANGROUP:15CE		       mul     cx	       ; * bytes per sectors
TRANGROUP:15CE					       ; dx:ax = bytes per cluster
TRANGROUP:15CE					       ; bx = free clusters
TRANGROUP:15D0
TRANGROUP:15D0 dtFree_1:			       ; ...
TRANGROUP:15D0		       mov     cx, dx	       ; hw of free sectors
TRANGROUP:15D2		       mul     bx	       ; lw of free sectors * bytes per	sector
TRANGROUP:15D4		       xchg    ax, cx
TRANGROUP:15D5		       xchg    dx, bx
TRANGROUP:15D7		       mul     dx
TRANGROUP:15D9		       add     ax, bx
TRANGROUP:15DB		       adc     dx, 0	       ; dx:ax:cx = free bytes
TRANGROUP:15DE		       or      dx, dx
TRANGROUP:15E0		       jz      short dtFree_2
TRANGROUP:15E2		       mov     cl, ch	       ; prints	free space as kilobytes
TRANGROUP:15E4		       mov     ch, al	       ; save al
TRANGROUP:15E6		       mov     al, ah	       ; / 256
TRANGROUP:15E8		       mov     ah, dl
TRANGROUP:15EA		       ror     dh, 1	       ; / 2 (=	free bytes / 512)
TRANGROUP:15EC		       rcr     ax, 1
TRANGROUP:15EE		       rcr     cx, 1
TRANGROUP:15F0		       ror     dh, 1	       ; / 2 (=	free bytes / 1024)
TRANGROUP:15F2		       rcr     ax, 1
TRANGROUP:15F4		       rcr     cx, 1
TRANGROUP:15F6		       mov     dl, 0FFh	       ; dx > 0
TRANGROUP:15F8
TRANGROUP:15F8 dtFree_2:			       ; ...
TRANGROUP:15F8		       mov     [word ptr ds:Bytes_Free], cx
TRANGROUP:15FC		       mov     [word ptr ds:Bytes_Free+2], ax
TRANGROUP:15FF		       or      dx, dx	       ; is dx > 0 ?
TRANGROUP:1601		       jz      short dtFree_3  ; no
TRANGROUP:1603		       mov     dx, offset kbytesf_ptr ;	MSG_1106 (".. K	bytes free" msg)
TRANGROUP:1603					       ; 30 digits, long binary	do decimal
TRANGROUP:1606		       cmp     [ds:bfree_not_kilo], 0
TRANGROUP:160B		       jz      short dtFree_5
TRANGROUP:160D		       mov     dx, offset kbytesf_n_ptr	; MSG_1106 (narrow)
TRANGROUP:160D					       ; ".. K bytes free" msg,	28 digits
TRANGROUP:1610		       jmp     short dtFree_5
TRANGROUP:1612 ; ---------------------------------------------------------------------------
TRANGROUP:1612
TRANGROUP:1612 dtFree_3:			       ; ...
TRANGROUP:1612		       mov     dx, offset bytmes1_ptr ;	MSG_1020 (".. bytes free" msg)
TRANGROUP:1612					       ; 30 digits, long binary	do decimal
TRANGROUP:1615		       cmp     [ds:narrow], 0  ; narrow	display	area ?
TRANGROUP:161A		       jnz     short dtFree_4  ; yes
TRANGROUP:161C		       mov     dx, offset bytmes2_ptr ;	MSG_1020, 33 digits
TRANGROUP:161F
TRANGROUP:161F dtFree_4:			       ; ...
TRANGROUP:161F		       cmp     [ds:bfree_not_kilo], 0 ;	not kilobyte option
TRANGROUP:1624		       jz      short dtFree_5  ; use kilo bytes	(if number of free bytes is big)
TRANGROUP:1626		       mov     dx, offset bytmes_n_ptr ; narrow	(28 digits), MSG_1020
TRANGROUP:1629
TRANGROUP:1629 dtFree_5:			       ; ...
TRANGROUP:1629		       call    std_printf
TRANGROUP:162C		       call    UseLine
TRANGROUP:162F
TRANGROUP:162F dtRet:				       ; ...
TRANGROUP:162F		       retn
TRANGROUP:162F endp	       DisplayTotals
TRANGROUP:162F
TRANGROUP:1630
TRANGROUP:1630 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1630
TRANGROUP:1630
TRANGROUP:1630 proc	       FileIsDevice near       ; ...
TRANGROUP:1630		       mov     dx, [ds:PathPos]
TRANGROUP:1634		       mov     di, dx
TRANGROUP:1636		       add     di, [ds:PathCnt]
TRANGROUP:163A		       xor     bl, bl
TRANGROUP:163C		       xchg    bl, [di]
TRANGROUP:163E		       xor     cx, cx
TRANGROUP:1640		       mov     ah, 4Eh
TRANGROUP:1642		       int     21h	       ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
TRANGROUP:1642					       ; CX = search attributes
TRANGROUP:1642					       ; DS:DX -> ASCIZ	filespec
TRANGROUP:1642					       ; (drive, path, and wildcards allowed)
TRANGROUP:1644		       xchg    bl, [di]
TRANGROUP:1646		       jb      short piCol
TRANGROUP:1648		       test    [ds:BWDBUF+15h],	40h ; [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
TRANGROUP:164D		       jz      short piCol
TRANGROUP:164F		       xor     cx, cx
TRANGROUP:1651		       jmp     short piRet
TRANGROUP:1653 ; ---------------------------------------------------------------------------
TRANGROUP:1653
TRANGROUP:1653 piCol:				       ; ...
TRANGROUP:1653		       dec     di
TRANGROUP:1654		       mov     al, ':'         ; COLON_CHAR
TRANGROUP:1656		       mov     cx, [ds:PathCnt]
TRANGROUP:165A		       dec     cx
TRANGROUP:165B		       dec     cx
TRANGROUP:165C		       or      cx, cx
TRANGROUP:165E		       js      short piRet
TRANGROUP:1660		       or      di, di
TRANGROUP:1662		       std
TRANGROUP:1663		       repne scasb
TRANGROUP:1665		       cld
TRANGROUP:1666
TRANGROUP:1666 piRet:				       ; ...
TRANGROUP:1666		       retn
TRANGROUP:1666 endp	       FileIsDevice
TRANGROUP:1666
TRANGROUP:1667
TRANGROUP:1667 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1667
TRANGROUP:1667
TRANGROUP:1667 proc	       FindFirst near	       ; ...
TRANGROUP:1667		       mov     ax, offset GetFirst
TRANGROUP:166A		       jmp     short ffFindEntry
TRANGROUP:166A endp	       FindFirst
TRANGROUP:166A
TRANGROUP:166C
TRANGROUP:166C ; =============== S U B R O U T I N E =======================================
TRANGROUP:166C
TRANGROUP:166C
TRANGROUP:166C proc	       FindNext	near	       ; ...
TRANGROUP:166C		       mov     ax, offset GetNext
TRANGROUP:166F
TRANGROUP:166F ffFindEntry:			       ; ...
TRANGROUP:166F		       push    es
TRANGROUP:1670		       test    [ds:_Bits], 80h ; mask.inmem
TRANGROUP:1676		       jz      short ffDisk
TRANGROUP:1678		       call    FindInMem
TRANGROUP:167B		       jmp     short ffRet
TRANGROUP:167D ; ---------------------------------------------------------------------------
TRANGROUP:167D
TRANGROUP:167D ffDisk:				       ; ...
TRANGROUP:167D		       call    ax
TRANGROUP:167F		       jb      short ffGetErr
TRANGROUP:1681		       mov     es, [ds:TPA]
TRANGROUP:1685		       xor     di, di
TRANGROUP:1687		       mov     bx, di
TRANGROUP:1689		       call    LoadEntry
TRANGROUP:168C		       clc
TRANGROUP:168D		       jmp     short ffRet
TRANGROUP:168F ; ---------------------------------------------------------------------------
TRANGROUP:168F
TRANGROUP:168F ffGetErr:			       ; ...
TRANGROUP:168F		       call    get_ext_error_number
TRANGROUP:1692		       stc
TRANGROUP:1693
TRANGROUP:1693 ffRet:				       ; ...
TRANGROUP:1693		       pop     es
TRANGROUP:1694		       retn
TRANGROUP:1694 endp	       FindNext
TRANGROUP:1694
TRANGROUP:1695
TRANGROUP:1695 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1695
TRANGROUP:1695
TRANGROUP:1695 proc	       FindInMem near	       ; ...
TRANGROUP:1695		       mov     es, [ds:TPA]
TRANGROUP:1699		       xor     bx, bx
TRANGROUP:169B		       cld
TRANGROUP:169C		       call    FindOneInMem
TRANGROUP:169F		       jb      short fiNoMore
TRANGROUP:16A1
TRANGROUP:16A1 fiBest:				       ; ...
TRANGROUP:16A1		       mov     bp, bx
TRANGROUP:16A3
TRANGROUP:16A3 fiNext:				       ; ...
TRANGROUP:16A3		       call    FindNextInMem
TRANGROUP:16A6		       jb      short fiFound
TRANGROUP:16A8		       call    CmpEntry
TRANGROUP:16AB		       jnb     short fiNext
TRANGROUP:16AD		       jmp     short fiBest
TRANGROUP:16AF ; ---------------------------------------------------------------------------
TRANGROUP:16AF
TRANGROUP:16AF fiNoMore:			       ; ...
TRANGROUP:16AF		       mov     ax, 18	       ; ERROR_NO_MORE_FILES
TRANGROUP:16B2		       stc
TRANGROUP:16B3		       jmp     short fiRet
TRANGROUP:16B5 ; ---------------------------------------------------------------------------
TRANGROUP:16B5
TRANGROUP:16B5 fiFound:				       ; ...
TRANGROUP:16B5		       mov     bx, bp
TRANGROUP:16B7		       mov     [byte ptr es:bx], 1 ; mark entry	'used'
TRANGROUP:16BB		       clc
TRANGROUP:16BC
TRANGROUP:16BC fiRet:				       ; ...
TRANGROUP:16BC		       retn
TRANGROUP:16BC endp	       FindInMem
TRANGROUP:16BC
TRANGROUP:16BD
TRANGROUP:16BD ; =============== S U B R O U T I N E =======================================
TRANGROUP:16BD
TRANGROUP:16BD
TRANGROUP:16BD proc	       FindNextChild near      ; ...
TRANGROUP:16BD		       sub     sp, 12	       ; make temp filename buf	on stack
TRANGROUP:16C0		       mov     ax, 0FFh
TRANGROUP:16C3		       push    ax
TRANGROUP:16C4		       mov     bp, sp
TRANGROUP:16C6		       mov     ax, 2Ah ; '*'
TRANGROUP:16C9		       push    ax
TRANGROUP:16CA		       mov     ax, 2E2Ah       ; "*." (NASM syntax)
TRANGROUP:16CD		       push    ax
TRANGROUP:16CE		       call    GetDriveLtr
TRANGROUP:16D1		       push    ax	       ; AX = "d:"
TRANGROUP:16D2		       mov     dx, sp	       ; DX = ptr to "d:*.*",0 on stack
TRANGROUP:16D4		       mov     cx, 10h	       ; ATTR_DIRECTORY
TRANGROUP:16D7		       mov     ah, 4Eh
TRANGROUP:16D9		       int     21h	       ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
TRANGROUP:16D9					       ; CX = search attributes
TRANGROUP:16D9					       ; DS:DX -> ASCIZ	filespec
TRANGROUP:16D9					       ; (drive, path, and wildcards allowed)
TRANGROUP:16DB		       jb      short fcRet
TRANGROUP:16DD		       call    CheckChild      ; check child against last, temp
TRANGROUP:16E0
TRANGROUP:16E0 fcNext:				       ; ...
TRANGROUP:16E0		       mov     cx, 10h	       ; ATTR_DIRECTORY
TRANGROUP:16E3		       mov     ah, 4Fh
TRANGROUP:16E5		       int     21h	       ; DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)
TRANGROUP:16E5					       ; [DTA] = data block from
TRANGROUP:16E5					       ; last AH = 4Eh/4Fh call
TRANGROUP:16E7		       jb      short fcErr
TRANGROUP:16E9		       call    CheckChild
TRANGROUP:16EC		       jmp     short fcNext
TRANGROUP:16EE ; ---------------------------------------------------------------------------
TRANGROUP:16EE
TRANGROUP:16EE fcErr:				       ; ...
TRANGROUP:16EE		       call    get_ext_error_number
TRANGROUP:16F1		       cmp     ax, 18	       ; ERROR_NO_MORE_FILES
TRANGROUP:16F4		       jnz     short fcNope
TRANGROUP:16F6		       cmp     [byte ptr bp+0],	0FFh
TRANGROUP:16FA		       jz      short fcNope
TRANGROUP:16FC		       mov     si, bp
TRANGROUP:16FE		       mov     di, bx
TRANGROUP:1700
TRANGROUP:1700 fcMove:				       ; ...
TRANGROUP:1700		       lodsb
TRANGROUP:1701		       stosb
TRANGROUP:1702		       or      al, al
TRANGROUP:1704		       jz      short fcRet
TRANGROUP:1706		       jmp     short fcMove
TRANGROUP:1708 ; ---------------------------------------------------------------------------
TRANGROUP:1708
TRANGROUP:1708 fcNope:				       ; ...
TRANGROUP:1708		       stc
TRANGROUP:1709
TRANGROUP:1709 fcRet:				       ; ...
TRANGROUP:1709		       lahf
TRANGROUP:170A		       add     sp, 20	       ; restore stack
TRANGROUP:170D		       sahf
TRANGROUP:170E		       retn
TRANGROUP:170E endp	       FindNextChild
TRANGROUP:170E
TRANGROUP:170F
TRANGROUP:170F ; =============== S U B R O U T I N E =======================================
TRANGROUP:170F
TRANGROUP:170F
TRANGROUP:170F proc	       FindOneInMem near       ; ...
TRANGROUP:170F
TRANGROUP:170F ; FUNCTION CHUNK	AT TRANGROUP:1721 SIZE 00000002	BYTES
TRANGROUP:170F
TRANGROUP:170F		       mov     al, [es:bx]
TRANGROUP:1712		       cmp     al, 1
TRANGROUP:1714		       jz      short FindNextInMem
TRANGROUP:1716		       cmp     al, 0FFh
TRANGROUP:1718		       jz      short foNoMore
TRANGROUP:171A		       clc
TRANGROUP:171B		       retn
TRANGROUP:171B endp	       FindOneInMem
TRANGROUP:171B
TRANGROUP:171C
TRANGROUP:171C ; =============== S U B R O U T I N E =======================================
TRANGROUP:171C
TRANGROUP:171C
TRANGROUP:171C proc	       FindNextInMem near      ; ...
TRANGROUP:171C		       add     bx, 22	       ; size EntryStruc
TRANGROUP:171F		       jmp     short FindOneInMem
TRANGROUP:171F endp	       FindNextInMem
TRANGROUP:171F
TRANGROUP:1721 ; ---------------------------------------------------------------------------
TRANGROUP:1721 ; START OF FUNCTION CHUNK FOR FindOneInMem
TRANGROUP:1721
TRANGROUP:1721 foNoMore:			       ; ...
TRANGROUP:1721		       stc
TRANGROUP:1722		       retn
TRANGROUP:1722 ; END OF	FUNCTION CHUNK FOR FindOneInMem
TRANGROUP:1723
TRANGROUP:1723 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1723
TRANGROUP:1723
TRANGROUP:1723 proc	       GetEnvValue near	       ; ...
TRANGROUP:1723		       push    es
TRANGROUP:1724		       mov     si, offset DirEnvVar ; "DIRCMD="
TRANGROUP:1727		       call    find_name_in_environment
TRANGROUP:172A		       jb      short geRet
TRANGROUP:172C		       push    ds
TRANGROUP:172D		       push    es
TRANGROUP:172E		       pop     ds
TRANGROUP:172F		       pop     es
TRANGROUP:1730		       mov     si, di
TRANGROUP:1732		       mov     di, offset ScanBuf
TRANGROUP:1735
TRANGROUP:1735 geLoop:				       ; ...
TRANGROUP:1735		       lodsb
TRANGROUP:1736		       or      al, al
TRANGROUP:1738		       stosb
TRANGROUP:1739		       loopne  geLoop
TRANGROUP:173B		       push    es
TRANGROUP:173C		       pop     ds
TRANGROUP:173D		       mov     si, offset ScanBuf
TRANGROUP:1740
TRANGROUP:1740 geRet:				       ; ...
TRANGROUP:1740		       pop     es
TRANGROUP:1741		       retn
TRANGROUP:1741 endp	       GetEnvValue
TRANGROUP:1741
TRANGROUP:1742
TRANGROUP:1742 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1742
TRANGROUP:1742
TRANGROUP:1742 proc	       GetFirst	near	       ; ...
TRANGROUP:1742		       mov     [byte ptr ds:55h], 0FFh ; [FCB-7]
TRANGROUP:1747		       mov     [byte ptr ds:5Bh], 16h ;	[FCB-1],ATTR_ALL
TRANGROUP:174C		       mov     dx, 55h	       ; FCB-7
TRANGROUP:174F		       mov     ah, 11h
TRANGROUP:1751		       int     21h	       ; DOS - SEARCH FIRST USING FCB
TRANGROUP:1751					       ; DS:DX -> FCB
TRANGROUP:1753		       shl     al, 1
TRANGROUP:1755		       jb      short gfRet
TRANGROUP:1757		       jmp     short gfFound
TRANGROUP:1757 endp	       GetFirst
TRANGROUP:1757
TRANGROUP:1759
TRANGROUP:1759 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1759
TRANGROUP:1759
TRANGROUP:1759 proc	       GetNext near	       ; ...
TRANGROUP:1759		       mov     dx, 55h	       ; FCB-7
TRANGROUP:175C		       mov     ah, 12h
TRANGROUP:175E		       int     21h	       ; DOS - SEARCH NEXT USING FCB
TRANGROUP:175E					       ; DS:DX -> FCB
TRANGROUP:175E					       ; Return: AL = status
TRANGROUP:1760		       shl     al, 1
TRANGROUP:1762		       jb      short gfRet
TRANGROUP:1764
TRANGROUP:1764 gfFound:				       ; ...
TRANGROUP:1764		       mov     al, [ds:BWDBUF+13h] ; [DIRBUF+8+DIR_ENTRY.DIR_ATTR]
TRANGROUP:1767		       mov     ah, [ds:AttrSpecified]
TRANGROUP:176B		       and     al, ah
TRANGROUP:176D		       and     ah, [ds:AttrSelect]
TRANGROUP:1771		       cmp     al, ah
TRANGROUP:1773		       jnz     short GetNext
TRANGROUP:1775
TRANGROUP:1775 gfRet:				       ; ...
TRANGROUP:1775		       retn
TRANGROUP:1775 endp	       GetNext
TRANGROUP:1775
TRANGROUP:1776
TRANGROUP:1776 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1776
TRANGROUP:1776
TRANGROUP:1776 proc	       ListDir near	       ; ...
TRANGROUP:1776		       xor     ax, ax	       ; 0
TRANGROUP:1778		       mov     [ds:FileCnt], ax
TRANGROUP:177B		       mov     [ds:FileSiz], ax
TRANGROUP:177E		       mov     [ds:FileSiz+2], ax
TRANGROUP:1781		       mov     [ds:FileSiz+4], ax
TRANGROUP:1784		       mov     [ds:FileSiz+6], ax
TRANGROUP:1787		       cmp     [ds:DestBuf], 0
TRANGROUP:178C		       jz      short ld1
TRANGROUP:178E		       call    LoadEntries
TRANGROUP:1791		       jnb     short ld1
TRANGROUP:1793		       call    get_ext_error_number
TRANGROUP:1796		       stc
TRANGROUP:1797		       jmp     short ldErr
TRANGROUP:1799 ; ---------------------------------------------------------------------------
TRANGROUP:1799
TRANGROUP:1799 ld1:				       ; ...
TRANGROUP:1799		       call    FindFirst
TRANGROUP:179C		       jb      short ldErr
TRANGROUP:179E		       call    DisplayHeader
TRANGROUP:17A1		       call    DisplayFile
TRANGROUP:17A4
TRANGROUP:17A4 ldNext:				       ; ...
TRANGROUP:17A4		       call    FindNext
TRANGROUP:17A7		       jb      short ldErr
TRANGROUP:17A9		       call    DisplayFile
TRANGROUP:17AC		       jmp     short ldNext
TRANGROUP:17AE ; ---------------------------------------------------------------------------
TRANGROUP:17AE
TRANGROUP:17AE ldErr:				       ; ...
TRANGROUP:17AE		       cmp     ax, 2	       ; ERROR_FILE_NOT_FOUND
TRANGROUP:17B1		       jz      short ldDone
TRANGROUP:17B3		       cmp     ax, 18	       ; ERROR_NO_MORE_FILES
TRANGROUP:17B6		       jz      short ldDone
TRANGROUP:17B8		       stc
TRANGROUP:17B9		       jmp     short ldRet
TRANGROUP:17BB ; ---------------------------------------------------------------------------
TRANGROUP:17BB
TRANGROUP:17BB ldDone:				       ; ...
TRANGROUP:17BB		       cmp     [ds:FileCnt], 0 ; word
TRANGROUP:17C0		       jz      short ld2
TRANGROUP:17C2		       call    DisplayTrailer
TRANGROUP:17C5
TRANGROUP:17C5 ld2:				       ; ...
TRANGROUP:17C5		       clc
TRANGROUP:17C6
TRANGROUP:17C6 ldRet:				       ; ...
TRANGROUP:17C6		       retn
TRANGROUP:17C6 endp	       ListDir
TRANGROUP:17C6
TRANGROUP:17C7
TRANGROUP:17C7 ; =============== S U B R O U T I N E =======================================
TRANGROUP:17C7
TRANGROUP:17C7
TRANGROUP:17C7 proc	       LoadEntries near	       ; ...
TRANGROUP:17C7		       push    es
TRANGROUP:17C8		       mov     es, [ds:TPA]
TRANGROUP:17CC		       xor     di, di
TRANGROUP:17CE		       and     [ds:_Bits], 0FF7Fh ; ~mask.inmem
TRANGROUP:17D4		       call    GetFirst
TRANGROUP:17D7		       jb      short leRet
TRANGROUP:17D9		       call    LoadEntry
TRANGROUP:17DC
TRANGROUP:17DC leNext:				       ; ...
TRANGROUP:17DC		       call    GetNext
TRANGROUP:17DF		       jb      short leLoaded
TRANGROUP:17E1		       mov     ax, [ds:BYTCNT]
TRANGROUP:17E4		       sub     ax, di
TRANGROUP:17E6		       cmp     ax, 24
TRANGROUP:17E9		       jb      short leOk
TRANGROUP:17EB		       call    LoadEntry
TRANGROUP:17EE		       jmp     short leNext
TRANGROUP:17F0 ; ---------------------------------------------------------------------------
TRANGROUP:17F0
TRANGROUP:17F0 leLoaded:			       ; ...
TRANGROUP:17F0		       mov     [byte ptr es:di], 0FFh
TRANGROUP:17F4		       or      [ds:_Bits], 80h ; mask.inmem
TRANGROUP:17FA
TRANGROUP:17FA leOk:				       ; ...
TRANGROUP:17FA		       clc
TRANGROUP:17FB
TRANGROUP:17FB leRet:				       ; ...
TRANGROUP:17FB		       pop     es
TRANGROUP:17FC		       retn
TRANGROUP:17FC endp	       LoadEntries
TRANGROUP:17FC
TRANGROUP:17FD
TRANGROUP:17FD ; =============== S U B R O U T I N E =======================================
TRANGROUP:17FD
TRANGROUP:17FD
TRANGROUP:17FD proc	       LoadEntry near	       ; ...
TRANGROUP:17FD		       mov     si, (offset BWDBUF+8) ; DIRBUF+8
TRANGROUP:1800		       xor     al, al
TRANGROUP:1802		       stosb
TRANGROUP:1803		       mov     cx, 11
TRANGROUP:1806		       rep movsb
TRANGROUP:1808		       lodsb
TRANGROUP:1809		       stosb
TRANGROUP:180A		       add     si, 10	       ; (DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1
TRANGROUP:180D		       movsw
TRANGROUP:180E		       movsw
TRANGROUP:180F		       mov     cl, al
TRANGROUP:1811		       lodsw
TRANGROUP:1812		       and     cl, 10h	       ; ATTR_DIRECTORY
TRANGROUP:1815		       jnz     short leSetDirSize
TRANGROUP:1817		       movsw
TRANGROUP:1818		       movsw
TRANGROUP:1819		       xor     ax, ax
TRANGROUP:181B		       stosb
TRANGROUP:181C		       retn
TRANGROUP:181D ; ---------------------------------------------------------------------------
TRANGROUP:181D
TRANGROUP:181D leSetDirSize:			       ; ...
TRANGROUP:181D		       xor     ax, ax
TRANGROUP:181F		       stosw
TRANGROUP:1820		       stosw
TRANGROUP:1821		       dec     al
TRANGROUP:1823		       stosb
TRANGROUP:1824		       retn
TRANGROUP:1824 endp	       LoadEntry
TRANGROUP:1824
TRANGROUP:1825
TRANGROUP:1825 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1825
TRANGROUP:1825
TRANGROUP:1825 proc	       NoOrder near	       ; ...
TRANGROUP:1825		       mov     [ds:DestBuf], 0
TRANGROUP:182A		       clc
TRANGROUP:182B		       retn
TRANGROUP:182B endp	       NoOrder
TRANGROUP:182B
TRANGROUP:182C
TRANGROUP:182C ; =============== S U B R O U T I N E =======================================
TRANGROUP:182C
TRANGROUP:182C
TRANGROUP:182C proc	       OnOffSw near	       ; ...
TRANGROUP:182C		       mov     cx, di
TRANGROUP:182E		       shr     cx, 1
TRANGROUP:1830		       shr     cx, 1
TRANGROUP:1832		       mov     ax, 1
TRANGROUP:1835		       shl     ax, cl
TRANGROUP:1837		       test    di, 2	       ; check if it is	a negated option
TRANGROUP:183B		       jz      short oo1
TRANGROUP:183D		       or      [ds:_Bits], ax
TRANGROUP:1841		       jmp     short ooRet
TRANGROUP:1843 ; ---------------------------------------------------------------------------
TRANGROUP:1843
TRANGROUP:1843 oo1:				       ; ...
TRANGROUP:1843		       not     ax
TRANGROUP:1845		       and     [ds:_Bits], ax
TRANGROUP:1849
TRANGROUP:1849 ooRet:				       ; ...
TRANGROUP:1849		       clc
TRANGROUP:184A		       retn
TRANGROUP:184A endp	       OnOffSw
TRANGROUP:184A
TRANGROUP:184B
TRANGROUP:184B ; =============== S U B R O U T I N E =======================================
TRANGROUP:184B
TRANGROUP:184B
TRANGROUP:184B proc	       ParseAttr near	       ; ...
TRANGROUP:184B		       push    si
TRANGROUP:184C		       mov     [ds:AttrSpecified], 0
TRANGROUP:1851		       mov     si, [bx+4]
TRANGROUP:1854
TRANGROUP:1854 paLoop:				       ; ...
TRANGROUP:1854		       mov     dx, 1
TRANGROUP:1857		       lodsb
TRANGROUP:1858		       or      al, al
TRANGROUP:185A		       jz      short paOk
TRANGROUP:185C		       cmp     al, 2Dh ; '-'
TRANGROUP:185E		       jnz     short pa1
TRANGROUP:1860		       dec     dx
TRANGROUP:1861		       lodsb
TRANGROUP:1862
TRANGROUP:1862 pa1:				       ; ...
TRANGROUP:1862		       mov     di, offset AttrLtrs ; "RHSvDA"
TRANGROUP:1865		       mov     cx, 6	       ; NUM_ATTR_LTRS
TRANGROUP:1868		       repne scasb
TRANGROUP:186A		       jnz     short paErr
TRANGROUP:186C		       not     cx
TRANGROUP:186E		       add     cx, 6	       ; NUM_ATTR_LTRS
TRANGROUP:1871		       mov     al, 1
TRANGROUP:1873		       shl     al, cl
TRANGROUP:1875		       or      [ds:AttrSpecified], al
TRANGROUP:1879		       not     al
TRANGROUP:187B		       and     [ds:AttrSelect],	al
TRANGROUP:187F		       shl     dl, cl
TRANGROUP:1881		       or      [ds:AttrSelect],	dl
TRANGROUP:1885		       jmp     short paLoop
TRANGROUP:1887 ; ---------------------------------------------------------------------------
TRANGROUP:1887
TRANGROUP:1887 paErr:				       ; ...
TRANGROUP:1887		       call    SetupParamError
TRANGROUP:188A		       stc
TRANGROUP:188B		       jmp     short paRet
TRANGROUP:188D ; ---------------------------------------------------------------------------
TRANGROUP:188D
TRANGROUP:188D paOk:				       ; ...
TRANGROUP:188D		       clc
TRANGROUP:188E
TRANGROUP:188E paRet:				       ; ...
TRANGROUP:188E		       pop     si
TRANGROUP:188F		       retn
TRANGROUP:188F endp	       ParseAttr
TRANGROUP:188F
TRANGROUP:1890
TRANGROUP:1890 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1890
TRANGROUP:1890
TRANGROUP:1890 proc	       Parse_Line near	       ; ...
TRANGROUP:1890		       mov     di, offset PARSE_DIR
TRANGROUP:1893		       xor     cx, cx
TRANGROUP:1895
TRANGROUP:1895 plPars:				       ; ...
TRANGROUP:1895		       call    Parse_With_Msg
TRANGROUP:1898		       cmp     ax, 0FFFFh      ; END_OF_LINE ; -1
TRANGROUP:189B		       jz      short plRet
TRANGROUP:189D		       cmp     ax, 0	       ; RESULT_NO_ERROR
TRANGROUP:18A0		       jnz     short plRet
TRANGROUP:18A2		       mov     bx, dx
TRANGROUP:18A4		       cmp     [byte ptr bx], 5	; RESULT_FILESPEC
TRANGROUP:18A7		       jz      short plFil
TRANGROUP:18A9		       call    ParseSwitch
TRANGROUP:18AC		       jb      short plRet
TRANGROUP:18AE		       jmp     short plPars
TRANGROUP:18B0 ; ---------------------------------------------------------------------------
TRANGROUP:18B0
TRANGROUP:18B0 plFil:				       ; ...
TRANGROUP:18B0		       call    CopyPathname
TRANGROUP:18B3		       jmp     short plPars
TRANGROUP:18B5 ; ---------------------------------------------------------------------------
TRANGROUP:18B5
TRANGROUP:18B5 plRet:				       ; ...
TRANGROUP:18B5		       retn
TRANGROUP:18B5 endp	       Parse_Line
TRANGROUP:18B5
TRANGROUP:18B6
TRANGROUP:18B6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:18B6
TRANGROUP:18B6
TRANGROUP:18B6 proc	       ParseOrder near	       ; ...
TRANGROUP:18B6		       push    si
TRANGROUP:18B7		       push    bx
TRANGROUP:18B8		       mov     si, [bx+4]      ; [bx+ResultBuffer.ValuePtr]
TRANGROUP:18BB		       mov     bx, offset DestBuf
TRANGROUP:18BE		       mov     al, [si]
TRANGROUP:18C0		       or      al, al
TRANGROUP:18C2		       jnz     short poLtr
TRANGROUP:18C4		       mov     [byte ptr bx], 5
TRANGROUP:18C7		       inc     bx
TRANGROUP:18C8		       mov     [byte ptr bx], 1
TRANGROUP:18CB		       inc     bx
TRANGROUP:18CC		       mov     [byte ptr bx], 2
TRANGROUP:18CF		       inc     bx
TRANGROUP:18D0		       jmp     short poOk
TRANGROUP:18D2 ; ---------------------------------------------------------------------------
TRANGROUP:18D2
TRANGROUP:18D2 poLtr:				       ; ...
TRANGROUP:18D2		       xor     dl, dl
TRANGROUP:18D4		       lodsb
TRANGROUP:18D5		       or      al, al
TRANGROUP:18D7		       jz      short poOk
TRANGROUP:18D9		       cmp     al, 2Dh ; '-'
TRANGROUP:18DB		       jnz     short po1
TRANGROUP:18DD		       mov     dl, 80h
TRANGROUP:18DF		       lodsb
TRANGROUP:18E0
TRANGROUP:18E0 po1:				       ; ...
TRANGROUP:18E0		       mov     di, offset OrderLtrs ; "NEDSG"
TRANGROUP:18E3		       mov     cx, 5	       ; NUM_ORDER_LTRS
TRANGROUP:18E6		       repne scasb
TRANGROUP:18E8		       jnz     short poErr
TRANGROUP:18EA		       neg     cx
TRANGROUP:18EC		       add     cx, 5	       ; NUM_ORDER_LTRS
TRANGROUP:18EF		       or      cl, dl
TRANGROUP:18F1		       mov     [bx], cl
TRANGROUP:18F3		       inc     bx
TRANGROUP:18F4		       cmp     bx, offset EndDestBuf
TRANGROUP:18F8		       jb      short poLtr
TRANGROUP:18FA
TRANGROUP:18FA poErr:				       ; ...
TRANGROUP:18FA		       pop     bx
TRANGROUP:18FB		       call    SetupParamError
TRANGROUP:18FE		       stc
TRANGROUP:18FF		       jmp     short poRet
TRANGROUP:1901 ; ---------------------------------------------------------------------------
TRANGROUP:1901
TRANGROUP:1901 poOk:				       ; ...
TRANGROUP:1901		       mov     [byte ptr bx], 0
TRANGROUP:1904		       pop     bx
TRANGROUP:1905		       clc
TRANGROUP:1906
TRANGROUP:1906 poRet:				       ; ...
TRANGROUP:1906		       pop     si
TRANGROUP:1907		       retn
TRANGROUP:1907 endp	       ParseOrder
TRANGROUP:1907
TRANGROUP:1908
TRANGROUP:1908 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1908
TRANGROUP:1908
TRANGROUP:1908 proc	       ParseSwitch near	       ; ...
TRANGROUP:1908		       push    cx
TRANGROUP:1909		       push    di
TRANGROUP:190A		       mov     ax, [bx+2]      ; [bx+ResultBuffer.SynPtr]
TRANGROUP:190D		       mov     di, offset Dir_Sw_Ptrs
TRANGROUP:1910		       mov     cx, 18	       ; NUM_DIR_SWS
TRANGROUP:1913		       cld
TRANGROUP:1914		       repne scasw
TRANGROUP:1916		       sub     di, offset Dir_Sw_Ptrs_2	; Dir_Sw_Ptrs+2
TRANGROUP:191A		       call    [cs:SwHandler+di]
TRANGROUP:191F		       pop     di
TRANGROUP:1920		       pop     cx
TRANGROUP:1921		       retn
TRANGROUP:1921 endp	       ParseSwitch
TRANGROUP:1921
TRANGROUP:1921 ; ---------------------------------------------------------------------------
TRANGROUP:1922 SwHandler       dw offset OnOffSw       ; ...
TRANGROUP:1924		       dw offset OnOffSw
TRANGROUP:1926		       dw offset OnOffSw
TRANGROUP:1928		       dw offset OnOffSw
TRANGROUP:192A		       dw offset OnOffSw
TRANGROUP:192C		       dw offset OnOffSw
TRANGROUP:192E		       dw offset OnOffSw
TRANGROUP:1930		       dw offset OnOffSw
TRANGROUP:1932		       dw offset OnOffSw
TRANGROUP:1934		       dw offset OnOffSw
TRANGROUP:1936		       dw offset OnOffSw
TRANGROUP:1938		       dw offset OnOffSw
TRANGROUP:193A		       dw offset OnOffSw
TRANGROUP:193C		       dw offset OnOffSw
TRANGROUP:193E		       dw offset NoOrder
TRANGROUP:1940		       dw offset ParseOrder
TRANGROUP:1942		       dw offset DefaultAttr
TRANGROUP:1944		       dw offset ParseAttr
TRANGROUP:1946
TRANGROUP:1946 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1946
TRANGROUP:1946
TRANGROUP:1946 proc	       ChangeDir near	       ; ...
TRANGROUP:1946		       mov     di, offset BWDBUF ; DIRBUF
TRANGROUP:1949		       call    GetDriveLtr
TRANGROUP:194C		       stosw
TRANGROUP:194D		       mov     si, dx
TRANGROUP:194F
TRANGROUP:194F cdLoop:				       ; ...
TRANGROUP:194F		       lodsb
TRANGROUP:1950		       stosb
TRANGROUP:1951		       or      al, al
TRANGROUP:1953		       jnz     short cdLoop
TRANGROUP:1955		       mov     dx, offset BWDBUF ; DIRBUF
TRANGROUP:1958		       mov     ah, 3Bh
TRANGROUP:195A		       int     21h	       ; DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)
TRANGROUP:195A					       ; DS:DX -> ASCIZ	directory name (may include drive)
TRANGROUP:195C		       retn
TRANGROUP:195C endp	       ChangeDir
TRANGROUP:195C
TRANGROUP:195D
TRANGROUP:195D ; =============== S U B R O U T I N E =======================================
TRANGROUP:195D
TRANGROUP:195D
TRANGROUP:195D proc	       CmpAscz near	       ; ...
TRANGROUP:195D		       push    di
TRANGROUP:195E		       mov     di, si
TRANGROUP:1960		       xor     al, al
TRANGROUP:1962		       mov     cx, 0FFFFh
TRANGROUP:1965		       repne scasb
TRANGROUP:1967		       not     cx
TRANGROUP:1969		       pop     di
TRANGROUP:196A		       repe cmpsb
TRANGROUP:196C		       retn
TRANGROUP:196C endp	       CmpAscz
TRANGROUP:196C
TRANGROUP:196D
TRANGROUP:196D ; =============== S U B R O U T I N E =======================================
TRANGROUP:196D
TRANGROUP:196D
TRANGROUP:196D proc	       CopyPathname near       ; ...
TRANGROUP:196D		       push    si
TRANGROUP:196E		       lds     si, [bx+4]      ; [bx+ResultBuffer.ValuePtr]
TRANGROUP:1971		       call    Move_To_SrcBuf
TRANGROUP:1974		       pop     si
TRANGROUP:1975		       retn
TRANGROUP:1975 endp	       CopyPathname
TRANGROUP:1975
TRANGROUP:1976
TRANGROUP:1976 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1976
TRANGROUP:1976
TRANGROUP:1976 proc	       CountFile near	       ; ...
TRANGROUP:1976		       push    es
TRANGROUP:1977		       mov     es, [ds:TPA]
TRANGROUP:197B		       inc     [ds:FileCnt]    ; word
TRANGROUP:197F		       inc     [ds:FileCntTotal]
TRANGROUP:1983		       jnz     short cntf1
TRANGROUP:1985		       inc     [ds:FileCntTotal+2]
TRANGROUP:1989
TRANGROUP:1989 cntf1:				       ; ...
TRANGROUP:1989		       mov     ax, [es:bx+11h] ; [es:bx+EntryStruc.filesize]
TRANGROUP:198D		       mov     dx, [es:bx+13h] ; [es:bx+EntryStruc.filesize+2]
TRANGROUP:1991		       add     [ds:FileSiz], ax
TRANGROUP:1995		       adc     [ds:FileSiz+2], dx
TRANGROUP:1999		       adc     [ds:FileSiz+4], 0
TRANGROUP:199E		       add     [ds:FileSizTotal], ax
TRANGROUP:19A2		       adc     [ds:FileSizTotal+2], dx
TRANGROUP:19A6		       adc     [ds:FileSizTotal+4], 0
TRANGROUP:19AB		       pop     es
TRANGROUP:19AC		       retn
TRANGROUP:19AC endp	       CountFile
TRANGROUP:19AC
TRANGROUP:19AD
TRANGROUP:19AD ; =============== S U B R O U T I N E =======================================
TRANGROUP:19AD
TRANGROUP:19AD
TRANGROUP:19AD proc	       DisplayBare near	       ; ...
TRANGROUP:19AD		       mov     cx, ds
TRANGROUP:19AF		       mov     ds, [ds:TPA]
TRANGROUP:19B3		       cmp     [byte ptr bx+1],	2Eh ; '.' ; [bx+EntrStruc.filename]
TRANGROUP:19B7		       mov     ds, cx
TRANGROUP:19B9		       jz      short dbRet
TRANGROUP:19BB		       test    [ds:_Bits], 4   ; mask.subd
TRANGROUP:19C1		       jz      short dbNameExt
TRANGROUP:19C3		       call    build_dir_string
TRANGROUP:19C6		       mov     di, offset BWDBUF
TRANGROUP:19C9		       test    [ds:_Bits], 10h ; mask.lcase
TRANGROUP:19CF		       jz      short dbare1
TRANGROUP:19D1		       mov     si, di
TRANGROUP:19D3		       call    LowercaseString
TRANGROUP:19D6
TRANGROUP:19D6 dbare1:				       ; ...
TRANGROUP:19D6		       xor     al, al
TRANGROUP:19D8		       mov     cx, 0FFFFh
TRANGROUP:19DB		       cld
TRANGROUP:19DC		       repne scasb
TRANGROUP:19DE		       dec     di
TRANGROUP:19DF		       push    si
TRANGROUP:19E0		       push    di
TRANGROUP:19E1		       mov     si, offset BWDBUF
TRANGROUP:19E4		       dec     di
TRANGROUP:19E5		       call    CheckDBCSTailByte
TRANGROUP:19E8		       pop     di
TRANGROUP:19E9		       pop     si
TRANGROUP:19EA		       jz      short dbTailByte
TRANGROUP:19EC		       cmp     [byte ptr es:di-1], 5Ch ; '\'
TRANGROUP:19F1		       jz      short dbare2
TRANGROUP:19F3
TRANGROUP:19F3 dbTailByte:			       ; ...
TRANGROUP:19F3		       mov     ax, 5Ch ; '\'
TRANGROUP:19F6		       stosw
TRANGROUP:19F7
TRANGROUP:19F7 dbare2:				       ; ...
TRANGROUP:19F7		       mov     [ds:string_ptr_2], offset BWDBUF
TRANGROUP:19FD		       mov     dx, offset string_buf_ptr
TRANGROUP:1A00		       call    std_printf
TRANGROUP:1A03
TRANGROUP:1A03 dbNameExt:			       ; ...
TRANGROUP:1A03		       call    DisplayDotForm
TRANGROUP:1A06		       call    CRLF2
TRANGROUP:1A09		       call    UseLine
TRANGROUP:1A0C
TRANGROUP:1A0C dbRet:				       ; ...
TRANGROUP:1A0C		       retn
TRANGROUP:1A0C endp	       DisplayBare
TRANGROUP:1A0C
TRANGROUP:1A0D
TRANGROUP:1A0D ; =============== S U B R O U T I N E =======================================
TRANGROUP:1A0D
TRANGROUP:1A0D
TRANGROUP:1A0D proc	       DisplayDotForm near     ; ...
TRANGROUP:1A0D		       push    ds
TRANGROUP:1A0E		       push    es
TRANGROUP:1A0F		       mov     ax, [cs:TPA]
TRANGROUP:1A13		       mov     ds, ax
TRANGROUP:1A15		       assume ds:RESGROUP
TRANGROUP:1A15		       mov     es, ax
TRANGROUP:1A17		       assume es:RESGROUP
TRANGROUP:1A17		       mov     di, bx
TRANGROUP:1A19		       add     di, 8
TRANGROUP:1A1C		       mov     cx, 8
TRANGROUP:1A1F		       mov     al, 20h ; ' '
TRANGROUP:1A21		       std
TRANGROUP:1A22		       repe scasb
TRANGROUP:1A24		       inc     cx
TRANGROUP:1A25		       mov     dx, cx
TRANGROUP:1A27		       mov     si, bx
TRANGROUP:1A29		       add     si, 1
TRANGROUP:1A2C
TRANGROUP:1A2C NextNameChar:			       ; ...
TRANGROUP:1A2C		       cld
TRANGROUP:1A2D		       lodsb
TRANGROUP:1A2E		       call    testkanj
TRANGROUP:1A31		       jz      short ddf3
TRANGROUP:1A33		       call    PRINT_CHAR
TRANGROUP:1A36		       dec     cx
TRANGROUP:1A37		       jz      short ExtChar
TRANGROUP:1A39		       lodsb
TRANGROUP:1A3A		       jmp     short ddf1
TRANGROUP:1A3C ; ---------------------------------------------------------------------------
TRANGROUP:1A3C
TRANGROUP:1A3C ddf3:				       ; ...
TRANGROUP:1A3C		       test    [ss:_Bits], 10h ; mask.lcase
TRANGROUP:1A43		       jz      short ddf1
TRANGROUP:1A45		       call    LowerCase
TRANGROUP:1A48
TRANGROUP:1A48 ddf1:				       ; ...
TRANGROUP:1A48		       call    PRINT_CHAR
TRANGROUP:1A4B		       loop    NextNameChar
TRANGROUP:1A4D
TRANGROUP:1A4D ExtChar:				       ; ...
TRANGROUP:1A4D		       mov     di, bx
TRANGROUP:1A4F		       add     di, 11	       ; fileext + size	fileext	- 1 ; 9+3-1
TRANGROUP:1A52		       mov     cx, 3	       ; size fileext
TRANGROUP:1A55		       mov     al, 20h ; ' '
TRANGROUP:1A57		       std
TRANGROUP:1A58		       repe scasb
TRANGROUP:1A5A		       jz      short ddDone
TRANGROUP:1A5C		       inc     cx
TRANGROUP:1A5D		       add     dx, cx
TRANGROUP:1A5F		       inc     dx
TRANGROUP:1A60		       mov     al, 2Eh ; '.'
TRANGROUP:1A62		       call    PRINT_CHAR
TRANGROUP:1A65		       mov     si, bx
TRANGROUP:1A67		       add     si, 9	       ; fileext
TRANGROUP:1A6A
TRANGROUP:1A6A NextExtChar:			       ; ...
TRANGROUP:1A6A		       cld
TRANGROUP:1A6B		       lodsb
TRANGROUP:1A6C		       call    testkanj
TRANGROUP:1A6F		       jz      short ddf4
TRANGROUP:1A71		       call    PRINT_CHAR
TRANGROUP:1A74		       dec     cx
TRANGROUP:1A75		       jz      short ddDone
TRANGROUP:1A77		       lodsb
TRANGROUP:1A78		       jmp     short ddf2
TRANGROUP:1A7A ; ---------------------------------------------------------------------------
TRANGROUP:1A7A
TRANGROUP:1A7A ddf4:				       ; ...
TRANGROUP:1A7A		       test    [cs:_Bits], 10h ; mask.lcase
TRANGROUP:1A81		       jz      short ddf2
TRANGROUP:1A83		       call    LowerCase
TRANGROUP:1A86
TRANGROUP:1A86 ddf2:				       ; ...
TRANGROUP:1A86		       call    PRINT_CHAR
TRANGROUP:1A89		       loop    NextExtChar
TRANGROUP:1A8B
TRANGROUP:1A8B ddDone:				       ; ...
TRANGROUP:1A8B		       pop     es
TRANGROUP:1A8C		       assume es:nothing
TRANGROUP:1A8C		       pop     ds
TRANGROUP:1A8D		       assume ds:nothing
TRANGROUP:1A8D		       cld
TRANGROUP:1A8E		       retn
TRANGROUP:1A8E endp	       DisplayDotForm
TRANGROUP:1A8E
TRANGROUP:1A8F
TRANGROUP:1A8F ; =============== S U B R O U T I N E =======================================
TRANGROUP:1A8F
TRANGROUP:1A8F
TRANGROUP:1A8F proc	       DisplayFile near	       ; ...
TRANGROUP:1A8F		       test    [ds:_Bits], 8   ; mask.bare
TRANGROUP:1A95		       jz      short dfNorm
TRANGROUP:1A97		       call    DisplayBare
TRANGROUP:1A9A		       jmp     short dhRet
TRANGROUP:1A9C ; ---------------------------------------------------------------------------
TRANGROUP:1A9C
TRANGROUP:1A9C dfNorm:				       ; ...
TRANGROUP:1A9C		       call    DisplayNext
TRANGROUP:1A9F		       test    [ds:_Bits], 1   ; mask.wide
TRANGROUP:1AA5		       jz      short dfFull
TRANGROUP:1AA7		       call    DisplayWide
TRANGROUP:1AAA		       jmp     short dfCnt
TRANGROUP:1AAC ; ---------------------------------------------------------------------------
TRANGROUP:1AAC
TRANGROUP:1AAC dfFull:				       ; ...
TRANGROUP:1AAC		       call    DisplayName
TRANGROUP:1AAF		       call    DisplayTheRest
TRANGROUP:1AB2
TRANGROUP:1AB2 dfCnt:				       ; ...
TRANGROUP:1AB2		       call    CountFile
TRANGROUP:1AB5
TRANGROUP:1AB5 dhRet:				       ; ...
TRANGROUP:1AB5		       retn
TRANGROUP:1AB5 endp	       DisplayFile
TRANGROUP:1AB5
TRANGROUP:1AB6
TRANGROUP:1AB6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1AB6
TRANGROUP:1AB6
TRANGROUP:1AB6 proc	       DisplayHeader near      ; ...
TRANGROUP:1AB6		       test    [ds:_Bits], 8   ; mask.bare
TRANGROUP:1ABC		       jnz     short dhRet
TRANGROUP:1ABE		       test    [ds:_Bits], 4   ; mask.subd
TRANGROUP:1AC4		       jz      short dhNorm
TRANGROUP:1AC6		       call    CRLF2
TRANGROUP:1AC9		       call    UseLine
TRANGROUP:1ACC		       jmp     short dhCom
TRANGROUP:1ACE ; ---------------------------------------------------------------------------
TRANGROUP:1ACE
TRANGROUP:1ACE dhNorm:				       ; ...
TRANGROUP:1ACE		       mov     al, 20h ; ' '
TRANGROUP:1AD0		       call    PRINT_CHAR
TRANGROUP:1AD3
TRANGROUP:1AD3 dhCom:				       ; ...
TRANGROUP:1AD3		       call    build_dir_string
TRANGROUP:1AD6		       mov     dx, offset dirhead_ptr
TRANGROUP:1AD9		       call    std_printf
TRANGROUP:1ADC		       call    UseLine
TRANGROUP:1ADF		       call    CRLF2
TRANGROUP:1AE2		       call    UseLine
TRANGROUP:1AE5
TRANGROUP:1AE5 dhRet:				       ; ...
TRANGROUP:1AE5		       retn
TRANGROUP:1AE5 endp	       DisplayHeader
TRANGROUP:1AE5
TRANGROUP:1AE6
TRANGROUP:1AE6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1AE6
TRANGROUP:1AE6
TRANGROUP:1AE6 proc	       DisplayName near	       ; ...
TRANGROUP:1AE6		       push    ds
TRANGROUP:1AE7		       mov     ds, [ds:TPA]
TRANGROUP:1AEB		       mov     si, bx
TRANGROUP:1AED		       add     si, 1
TRANGROUP:1AF0		       mov     di, offset CHARBUF
TRANGROUP:1AF3		       mov     cx, 8
TRANGROUP:1AF6		       cld
TRANGROUP:1AF7		       rep movsb
TRANGROUP:1AF9		       mov     al, 20h ; ' '
TRANGROUP:1AFB		       stosb
TRANGROUP:1AFC		       mov     cx, 3
TRANGROUP:1AFF		       rep movsb
TRANGROUP:1B01		       xor     al, al
TRANGROUP:1B03		       stosb
TRANGROUP:1B04		       pop     ds
TRANGROUP:1B05		       test    [ds:_Bits], 10h ; mask.lcase
TRANGROUP:1B0B		       jz      short dn1
TRANGROUP:1B0D		       mov     si, offset CHARBUF
TRANGROUP:1B10		       call    LowercaseString
TRANGROUP:1B13
TRANGROUP:1B13 dn1:				       ; ...
TRANGROUP:1B13		       mov     [ds:string_ptr_2], offset CHARBUF
TRANGROUP:1B19		       mov     dx, offset string_buf_ptr
TRANGROUP:1B1C		       call    std_printf
TRANGROUP:1B1F		       retn
TRANGROUP:1B1F endp	       DisplayName
TRANGROUP:1B1F
TRANGROUP:1B20
TRANGROUP:1B20 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1B20
TRANGROUP:1B20
TRANGROUP:1B20 proc	       DisplayNext near	       ; ...
TRANGROUP:1B20		       cmp     [ds:FileCnt], 0
TRANGROUP:1B25		       jz      short dn1st
TRANGROUP:1B27		       cmp     [ds:LeftOnLine],	0
TRANGROUP:1B2C		       jle     short dnEol
TRANGROUP:1B2E		       mov     dx, offset tab_ptr
TRANGROUP:1B31		       call    std_printf
TRANGROUP:1B34		       jmp     short dnDone
TRANGROUP:1B36 ; ---------------------------------------------------------------------------
TRANGROUP:1B36
TRANGROUP:1B36 dnEol:				       ; ...
TRANGROUP:1B36		       call    CRLF2
TRANGROUP:1B39		       call    UseLine
TRANGROUP:1B3C
TRANGROUP:1B3C dn1st:				       ; ...
TRANGROUP:1B3C		       mov     al, [ds:PerLine]
TRANGROUP:1B3F		       mov     [ds:LeftOnLine],	al
TRANGROUP:1B42
TRANGROUP:1B42 dnDone:				       ; ...
TRANGROUP:1B42		       dec     [ds:LeftOnLine]
TRANGROUP:1B46		       retn
TRANGROUP:1B46 endp	       DisplayNext
TRANGROUP:1B46
TRANGROUP:1B47
TRANGROUP:1B47 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1B47
TRANGROUP:1B47
TRANGROUP:1B47 proc	       DisplayTheRest near     ; ...
TRANGROUP:1B47		       push    es
TRANGROUP:1B48		       mov     es, [ds:TPA]
TRANGROUP:1B4C		       mov     bp, bx
TRANGROUP:1B4E		       test    [byte ptr es:bp+0Ch], 10h ; [es:bp+EntryStruc.fileattr],ATTR_DIRECTORY
TRANGROUP:1B53		       jz      short drNonDir
TRANGROUP:1B55		       cmp     [ds:nocommas], 0
TRANGROUP:1B5A		       jnz     short dr_2
TRANGROUP:1B5C		       mov     [ds:string_ptr_2], offset twospacechars ; "  "
TRANGROUP:1B62		       mov     dx, offset string_buf_ptr
TRANGROUP:1B65		       call    std_printf
TRANGROUP:1B68
TRANGROUP:1B68 dr_2:				       ; ...
TRANGROUP:1B68		       mov     dx, offset dmes_ptr ; MSG_1068
TRANGROUP:1B6B		       cmp     [ds:bfree_not_kilo], 0
TRANGROUP:1B70		       jz      short dr_3
TRANGROUP:1B72		       mov     dx, offset space_4_ptr
TRANGROUP:1B75
TRANGROUP:1B75 dr_3:				       ; ...
TRANGROUP:1B75		       call    std_printf
TRANGROUP:1B78		       jmp     short drCom
TRANGROUP:1B7A ; ---------------------------------------------------------------------------
TRANGROUP:1B7A
TRANGROUP:1B7A drNonDir:			       ; ...
TRANGROUP:1B7A		       mov     dx, [es:bp+11h] ; [es:bp+EntryStruc.filesize]
TRANGROUP:1B7E		       mov     [ds:File_Size_Low], dx
TRANGROUP:1B82		       mov     dx, [es:bp+13h] ; [es:bp+EntryStruc.filesize+2]
TRANGROUP:1B86		       mov     [ds:File_Size_High], dx
TRANGROUP:1B8A		       mov     dx, offset disp_file_size_ptr
TRANGROUP:1B8D		       cmp     [ds:narrow], 0
TRANGROUP:1B92		       jnz     short dr_4      ; narrow	display
TRANGROUP:1B94		       mov     dx, offset disp_file_size_w_ptr ; big file (wide)
TRANGROUP:1B97
TRANGROUP:1B97 dr_4:				       ; ...
TRANGROUP:1B97		       cmp     [ds:bfree_not_kilo], 0
TRANGROUP:1B9C		       jz      short dr_5      ; big file
TRANGROUP:1B9E		       mov     dx, offset disp_file_size_n_ptr ; not big file
TRANGROUP:1BA1
TRANGROUP:1BA1 dr_5:				       ; ...
TRANGROUP:1BA1		       call    std_printf
TRANGROUP:1BA4
TRANGROUP:1BA4 drCom:				       ; ...
TRANGROUP:1BA4		       mov     ax, [es:bp+0Fh] ; [es:bp+EntryStruc.filedate]
TRANGROUP:1BA8		       or      ax, ax
TRANGROUP:1BAA		       jnz     short dr_6
TRANGROUP:1BAC		       jmp     drDone
TRANGROUP:1BAF ; ---------------------------------------------------------------------------
TRANGROUP:1BAF
TRANGROUP:1BAF dr_6:				       ; ...
TRANGROUP:1BAF		       mov     bx, ax
TRANGROUP:1BB1		       and     ax, 1Fh	       ; AX = day of month
TRANGROUP:1BB4		       mov     dl, al
TRANGROUP:1BB6		       mov     ax, bx	       ; AX = date word
TRANGROUP:1BB8		       mov     cl, 5
TRANGROUP:1BBA		       shr     ax, cl	       ; shift day out
TRANGROUP:1BBC		       and     al, 0Fh	       ; AL = month
TRANGROUP:1BBE		       mov     dh, al
TRANGROUP:1BC0		       mov     cl, bh
TRANGROUP:1BC2		       shr     cl, 1	       ; CL = year - 1980
TRANGROUP:1BC4		       xor     ch, ch	       ; CX = year - 1980
TRANGROUP:1BC6		       add     cx, 1980	       ; CX = 4-digit year
TRANGROUP:1BCA		       cmp     [ds:yeardigit4],	0
TRANGROUP:1BCF		       jnz     short dr_1
TRANGROUP:1BD1		       sub     cx, 2000	       ; after year 2000
TRANGROUP:1BD5		       jns     short dr_1
TRANGROUP:1BD7		       add     cx, 100	       ; before	year 2000
TRANGROUP:1BDA
TRANGROUP:1BDA dr_1:				       ; ...
TRANGROUP:1BDA		       xchg    dh, dl
TRANGROUP:1BDC		       mov     [ds:DirDat_Yr], cx
TRANGROUP:1BE0		       mov     [ds:DirDat_Mo_Day], dx
TRANGROUP:1BE4		       mov     cx, [es:bp+0Dh] ; [es:bp+EntryStruc.filetime]
TRANGROUP:1BE8		       jcxz    short drPrint   ; no time field - go print
TRANGROUP:1BEA		       shr     cx, 1
TRANGROUP:1BEC		       shr     cx, 1
TRANGROUP:1BEE		       shr     cx, 1	       ; CH = hours
TRANGROUP:1BF0		       shr     cl, 1
TRANGROUP:1BF2		       shr     cl, 1	       ; CL = minutes
TRANGROUP:1BF4		       xchg    ch, cl	       ; CX = hr/min
TRANGROUP:1BF6		       mov     [ds:DirTim_Hr_Min], cx
TRANGROUP:1BFA
TRANGROUP:1BFA drPrint:				       ; ...
TRANGROUP:1BFA		       mov     [ds:dirdattim_ptr], 1077	; MSG_1077 (normal)
TRANGROUP:1C00		       mov     [ds:DirDat_form], 0A4h ;	Right_Align+DATE_MDY_2
TRANGROUP:1C05		       mov     [word ptr ds:DirDat_width], 80Ah	; 10 (max), 8 (min)
TRANGROUP:1C0B		       cmp     [ds:narrow], 0
TRANGROUP:1C10		       jnz     short dr_narrow
TRANGROUP:1C12		       mov     [ds:dirdattim_ptr], 1075	; MSG_1075 (narrow)
TRANGROUP:1C18		       add     [word ptr ds:DirDat_width], 202h	; 12 (max), 10 (min)
TRANGROUP:1C1E
TRANGROUP:1C1E dr_narrow:			       ; ...
TRANGROUP:1C1E		       cmp     [ds:yeardigit4],	0
TRANGROUP:1C23		       jz      short dr_7
TRANGROUP:1C25		       mov     [ds:DirDat_form], 0B4h ;	Right_Align+DATE_MDY_4
TRANGROUP:1C2A		       add     [word ptr ds:DirDat_width], 202h	; 12 (max), 10 (min)
TRANGROUP:1C30
TRANGROUP:1C30 dr_7:				       ; ...
TRANGROUP:1C30		       mov     dx, offset dirdattim_ptr
TRANGROUP:1C33		       call    std_printf
TRANGROUP:1C36		       mov     [ds:dirdattim_ptr], 1077	; MSG_1077
TRANGROUP:1C3C		       mov     [ds:DirDat_form], 0A4h ;	Right_Align+DATE_MDY_2
TRANGROUP:1C41		       mov     [word ptr ds:DirDat_width], 80Ah	; 10 (max), 8 (min)
TRANGROUP:1C47		       mov     [ds:DirDat_Yr], 0 ; word
TRANGROUP:1C4D		       mov     [ds:DirDat_Mo_Day], 0 ; word
TRANGROUP:1C53		       mov     [ds:DirTim_Hr_Min], 0 ; word
TRANGROUP:1C59
TRANGROUP:1C59 drDone:				       ; ...
TRANGROUP:1C59		       pop     es
TRANGROUP:1C5A		       mov     bx, bp
TRANGROUP:1C5C		       retn
TRANGROUP:1C5C endp	       DisplayTheRest
TRANGROUP:1C5C
TRANGROUP:1C5D
TRANGROUP:1C5D ; =============== S U B R O U T I N E =======================================
TRANGROUP:1C5D
TRANGROUP:1C5D
TRANGROUP:1C5D proc	       DisplayTrailer near     ; ...
TRANGROUP:1C5D		       test    [ds:_Bits], 8
TRANGROUP:1C63		       jnz     short dtrRet
TRANGROUP:1C65		       call    CRLF2
TRANGROUP:1C68		       call    UseLine
TRANGROUP:1C6B		       mov     ax, [ds:FileCnt]
TRANGROUP:1C6E		       xor     dx, dx
TRANGROUP:1C6E endp	       DisplayTrailer
TRANGROUP:1C6E
TRANGROUP:1C70
TRANGROUP:1C70 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1C70
TRANGROUP:1C70
TRANGROUP:1C70 proc	       DisplayCntSiz near      ; ...
TRANGROUP:1C70		       mov     [ds:Dir_Num], ax
TRANGROUP:1C73		       mov     [ds:Dir_Num+2], dx
TRANGROUP:1C77		       mov     dx, offset dirmes_ptr
TRANGROUP:1C7A		       cmp     [ds:narrow], 0
TRANGROUP:1C7F		       jnz     short dcs_1
TRANGROUP:1C81		       mov     dx, offset dirmes_w_ptr
TRANGROUP:1C84
TRANGROUP:1C84 dcs_1:				       ; ...
TRANGROUP:1C84		       cmp     [ds:bfree_not_kilo], 0
TRANGROUP:1C89		       jz      short dcs_2
TRANGROUP:1C8B		       mov     dx, offset dirmes2_ptr
TRANGROUP:1C8E
TRANGROUP:1C8E dcs_2:				       ; ...
TRANGROUP:1C8E		       call    std_printf
TRANGROUP:1C91		       mov     cx, [ds:FileSiz+4]
TRANGROUP:1C95		       jcxz    short dcs_3
TRANGROUP:1C97		       mov     dx, [ds:FileSiz+3]
TRANGROUP:1C9B		       mov     ax, [ds:FileSiz+1]
TRANGROUP:1C9E		       ror     ch, 1
TRANGROUP:1CA0		       rcr     dx, 1
TRANGROUP:1CA2		       rcr     ax, 1
TRANGROUP:1CA4		       ror     ch, 1
TRANGROUP:1CA6		       rcr     dx, 1
TRANGROUP:1CA8		       rcr     ax, 1
TRANGROUP:1CAA		       mov     [ds:FileSiz+2], dx
TRANGROUP:1CAE		       mov     [ds:FileSiz], ax
TRANGROUP:1CB1		       mov     dx, offset kbytes_ptr
TRANGROUP:1CB4		       cmp     [ds:bfree_not_kilo], 0
TRANGROUP:1CB9		       jz      short dcs_5
TRANGROUP:1CBB		       mov     dx, offset kybytes_n_ptr
TRANGROUP:1CBE		       jmp     short dcs_5
TRANGROUP:1CC0 ; ---------------------------------------------------------------------------
TRANGROUP:1CC0
TRANGROUP:1CC0 dcs_3:				       ; ...
TRANGROUP:1CC0		       mov     dx, offset bytes_ptr
TRANGROUP:1CC3		       cmp     [ds:narrow], 0
TRANGROUP:1CC8		       jnz     short dcs_4
TRANGROUP:1CCA		       mov     dx, offset bytes_w_tr
TRANGROUP:1CCD
TRANGROUP:1CCD dcs_4:				       ; ...
TRANGROUP:1CCD		       cmp     [ds:bfree_not_kilo], 0
TRANGROUP:1CD2		       jz      short dcs_5
TRANGROUP:1CD4		       mov     dx, offset bytes_n_ptr
TRANGROUP:1CD7
TRANGROUP:1CD7 dcs_5:				       ; ...
TRANGROUP:1CD7		       call    std_printf
TRANGROUP:1CDA		       call    UseLine
TRANGROUP:1CDD
TRANGROUP:1CDD dtrRet:				       ; ...
TRANGROUP:1CDD		       retn
TRANGROUP:1CDD endp	       DisplayCntSiz
TRANGROUP:1CDD
TRANGROUP:1CDE
TRANGROUP:1CDE ; =============== S U B R O U T I N E =======================================
TRANGROUP:1CDE
TRANGROUP:1CDE
TRANGROUP:1CDE proc	       DisplayWide near	       ; ...
TRANGROUP:1CDE		       push    ds
TRANGROUP:1CDF		       mov     ds, [ds:TPA]
TRANGROUP:1CE3		       test    [byte ptr bx+0Ch], 10h ;	[bx+EntryStruc.fileattr],ATTR_DIRECTORY
TRANGROUP:1CE7		       jz      short dw1
TRANGROUP:1CE9		       mov     al, 5Bh ; '['
TRANGROUP:1CEB		       call    PRINT_CHAR
TRANGROUP:1CEE
TRANGROUP:1CEE dw1:				       ; ...
TRANGROUP:1CEE		       call    DisplayDotForm
TRANGROUP:1CF1		       test    [byte ptr bx+0Ch], 10h
TRANGROUP:1CF5		       jz      short dw2
TRANGROUP:1CF7		       mov     al, 5Dh ; ']'
TRANGROUP:1CF9		       call    PRINT_CHAR
TRANGROUP:1CFC
TRANGROUP:1CFC dw2:				       ; ...
TRANGROUP:1CFC		       mov     cx, 12	       ; 8+3+1
TRANGROUP:1CFF		       sub     cx, dx	       ; CX = #	pad char's
TRANGROUP:1D01		       jcxz    short dwDone
TRANGROUP:1D03		       mov     al, 20h ; ' '
TRANGROUP:1D05
TRANGROUP:1D05 dw3:				       ; ...
TRANGROUP:1D05		       call    PRINT_CHAR
TRANGROUP:1D08		       loop    dw3
TRANGROUP:1D0A
TRANGROUP:1D0A dwDone:				       ; ...
TRANGROUP:1D0A		       pop     ds
TRANGROUP:1D0B		       retn
TRANGROUP:1D0B endp	       DisplayWide
TRANGROUP:1D0B
TRANGROUP:1D0C
TRANGROUP:1D0C ; =============== S U B R O U T I N E =======================================
TRANGROUP:1D0C
TRANGROUP:1D0C
TRANGROUP:1D0C proc	       EndPage near	       ; ...
TRANGROUP:1D0C		       test    [ds:_Bits], 2   ; mask.pagd
TRANGROUP:1D12		       jz      short epNew
TRANGROUP:1D14		       push    bx
TRANGROUP:1D15		       push    cx
TRANGROUP:1D16		       call    PAUSE
TRANGROUP:1D19		       call    build_dir_string
TRANGROUP:1D1C		       mov     dx, offset dircont_ptr
TRANGROUP:1D1F		       call    Printf_Crlf
TRANGROUP:1D22		       pop     cx
TRANGROUP:1D23		       pop     bx
TRANGROUP:1D24
TRANGROUP:1D24 epNew:				       ; ...
TRANGROUP:1D24		       mov     ax, [ds:LinPerPag]
TRANGROUP:1D27		       dec     ax
TRANGROUP:1D28		       mov     [ds:LeftOnPage],	ax
TRANGROUP:1D2B		       retn
TRANGROUP:1D2B endp	       EndPage
TRANGROUP:1D2B
TRANGROUP:1D2C
TRANGROUP:1D2C ; =============== S U B R O U T I N E =======================================
TRANGROUP:1D2C
TRANGROUP:1D2C
TRANGROUP:1D2C proc	       GetDriveLtr near	       ; ...
TRANGROUP:1D2C		       mov     al, [ds:5Ch]    ; [FCB]
TRANGROUP:1D2F		       or      al, al
TRANGROUP:1D31		       jnz     short gdl1
TRANGROUP:1D33		       mov     al, [ds:CURDRV]
TRANGROUP:1D36		       inc     al
TRANGROUP:1D38
TRANGROUP:1D38 gdl1:				       ; ...
TRANGROUP:1D38		       add     al, 40h ; '@'   ; 'A'-1
TRANGROUP:1D3A		       mov     ah, 3Ah ; ':'
TRANGROUP:1D3C		       retn
TRANGROUP:1D3C endp	       GetDriveLtr
TRANGROUP:1D3C
TRANGROUP:1D3D
TRANGROUP:1D3D ; =============== S U B R O U T I N E =======================================
TRANGROUP:1D3D
TRANGROUP:1D3D
TRANGROUP:1D3D proc	       SetupParamError near    ; ...
TRANGROUP:1D3D		       mov     ax, 9
TRANGROUP:1D40		       mov     [ds:msg_disp_class], 2 ;	parse_msg_class
TRANGROUP:1D45		       mov     [ds:extend_buf_ptr], ax
TRANGROUP:1D48		       mov     si, [bx+4]      ; [bx+ResultBuffer.ValuePtr]
TRANGROUP:1D4B		       mov     [ds:string_ptr_2], si
TRANGROUP:1D4F		       mov     [ds:extend_buf_sub], 1 ;	one_subst
TRANGROUP:1D54		       mov     dx, offset extend_buf_ptr
TRANGROUP:1D57		       retn
TRANGROUP:1D57 endp	       SetupParamError
TRANGROUP:1D57
TRANGROUP:1D58
TRANGROUP:1D58 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1D58
TRANGROUP:1D58
TRANGROUP:1D58 proc	       UseLine near	       ; ...
TRANGROUP:1D58		       dec     [ds:LeftOnPage] ; word
TRANGROUP:1D5C		       cmp     [ds:LeftOnPage],	2
TRANGROUP:1D61		       ja      short ulRet
TRANGROUP:1D63		       call    EndPage
TRANGROUP:1D66
TRANGROUP:1D66 ulRet:				       ; ...
TRANGROUP:1D66		       retn
TRANGROUP:1D66 endp	       UseLine
TRANGROUP:1D66
TRANGROUP:1D67
TRANGROUP:1D67 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1D67
TRANGROUP:1D67
TRANGROUP:1D67 proc	       ZeroTotals near	       ; ...
TRANGROUP:1D67		       mov     di, offset FileCntTotal
TRANGROUP:1D6A		       mov     cx, 12
TRANGROUP:1D6D		       xor     al, al
TRANGROUP:1D6F		       rep stosb
TRANGROUP:1D71		       retn
TRANGROUP:1D71 endp	       ZeroTotals
TRANGROUP:1D71
TRANGROUP:1D72 ; ---------------------------------------------------------------------------
TRANGROUP:1D72
TRANGROUP:1D72 CtrlCHandler:			       ; ...
TRANGROUP:1D72		       push    ds
TRANGROUP:1D73		       push    cs
TRANGROUP:1D74		       pop     ds
TRANGROUP:1D75		       assume ds:TRANGROUP
TRANGROUP:1D75		       push    ax
TRANGROUP:1D76		       push    bx
TRANGROUP:1D77		       push    dx
TRANGROUP:1D78		       call    RestUDir
TRANGROUP:1D7B		       pop     dx
TRANGROUP:1D7C		       pop     bx
TRANGROUP:1D7D		       pop     ax
TRANGROUP:1D7E		       pop     ds
TRANGROUP:1D7F		       assume ds:nothing
TRANGROUP:1D7F		       jmp     [cs:OldCtrlCHandler]
TRANGROUP:1D84
TRANGROUP:1D84 ; =============== S U B R O U T I N E =======================================
TRANGROUP:1D84
TRANGROUP:1D84
TRANGROUP:1D84 proc	       LowerCase near	       ; ...
TRANGROUP:1D84		       cmp     al, 41h ; 'A'
TRANGROUP:1D86		       jb      short lcRet
TRANGROUP:1D88		       cmp     al, 5Ah ; 'Z'
TRANGROUP:1D8A		       ja      short lcRet
TRANGROUP:1D8C		       or      al, 20h	       ; convert to ASCII lowercase
TRANGROUP:1D8E
TRANGROUP:1D8E lcRet:				       ; ...
TRANGROUP:1D8E		       retn
TRANGROUP:1D8E endp	       LowerCase
TRANGROUP:1D8E
TRANGROUP:1D8F
TRANGROUP:1D8F ; =============== S U B R O U T I N E =======================================
TRANGROUP:1D8F
TRANGROUP:1D8F
TRANGROUP:1D8F proc	       LowercaseString near    ; ...
TRANGROUP:1D8F		       push    di
TRANGROUP:1D90		       mov     di, si
TRANGROUP:1D92		       cld
TRANGROUP:1D93
TRANGROUP:1D93 NextChar:			       ; ...
TRANGROUP:1D93		       lodsb
TRANGROUP:1D94		       or      al, al
TRANGROUP:1D96		       jz      short EndOfString
TRANGROUP:1D98		       call    testkanj
TRANGROUP:1D9B		       jz      short NextChar_@
TRANGROUP:1D9D		       stosb
TRANGROUP:1D9E		       lodsb
TRANGROUP:1D9F		       or      al, al
TRANGROUP:1DA1		       jz      short EndOfString
TRANGROUP:1DA3		       stosb
TRANGROUP:1DA4		       jmp     short NextChar
TRANGROUP:1DA6 ; ---------------------------------------------------------------------------
TRANGROUP:1DA6
TRANGROUP:1DA6 NextChar_@:			       ; ...
TRANGROUP:1DA6		       call    LowerCase
TRANGROUP:1DA9		       stosb
TRANGROUP:1DAA		       jmp     short NextChar
TRANGROUP:1DAC ; ---------------------------------------------------------------------------
TRANGROUP:1DAC
TRANGROUP:1DAC EndOfString:			       ; ...
TRANGROUP:1DAC		       pop     di
TRANGROUP:1DAD		       retn
TRANGROUP:1DAD endp	       LowercaseString
TRANGROUP:1DAD
TRANGROUP:1DAE
TRANGROUP:1DAE ; =============== S U B R O U T I N E =======================================
TRANGROUP:1DAE
TRANGROUP:1DAE
TRANGROUP:1DAE proc	       CheckDBCSTailByte near  ; ...
TRANGROUP:1DAE		       push    ax
TRANGROUP:1DAF		       push    cx
TRANGROUP:1DB0		       push    di
TRANGROUP:1DB1		       mov     cx, di
TRANGROUP:1DB3
TRANGROUP:1DB3 cdtb_check:			       ; ...
TRANGROUP:1DB3		       cmp     di, si
TRANGROUP:1DB5		       jz      short cdtb_next
TRANGROUP:1DB7		       dec     di
TRANGROUP:1DB8		       mov     al, [di]
TRANGROUP:1DBA		       call    testkanj
TRANGROUP:1DBD		       jnz     short cdtb_check	; not Kanji
TRANGROUP:1DBF		       inc     di
TRANGROUP:1DC0
TRANGROUP:1DC0 cdtb_next:			       ; ...
TRANGROUP:1DC0		       sub     cx, di
TRANGROUP:1DC2		       xor     cl, 1
TRANGROUP:1DC5		       test    cl, 1
TRANGROUP:1DC8		       pop     di
TRANGROUP:1DC9		       pop     cx
TRANGROUP:1DCA		       pop     ax
TRANGROUP:1DCB		       retn
TRANGROUP:1DCB endp	       CheckDBCSTailByte
TRANGROUP:1DCB
TRANGROUP:1DCC
TRANGROUP:1DCC ; =============== S U B R O U T I N E =======================================
TRANGROUP:1DCC
TRANGROUP:1DCC
TRANGROUP:1DCC proc	       PAUSE near	       ; ...
TRANGROUP:1DCC		       mov     dx, offset PAUSEMES_PTR
TRANGROUP:1DCF		       call    std_printf
TRANGROUP:1DD2		       call    GETKEYSTROKE
TRANGROUP:1DD5		       call    CRLF2
TRANGROUP:1DD8		       retn
TRANGROUP:1DD8 endp	       PAUSE
TRANGROUP:1DD8
TRANGROUP:1DD9 ; ---------------------------------------------------------------------------
TRANGROUP:1DD9
TRANGROUP:1DD9 ERASE:				       ; ...
TRANGROUP:1DD9		       mov     si, 81h	       ; get command line
TRANGROUP:1DDC		       mov     [ds:COMSW], 0   ; word
TRANGROUP:1DE2		       mov     di, offset PARSE_ERASE
TRANGROUP:1DE5		       xor     cx, cx
TRANGROUP:1DE7
TRANGROUP:1DE7 erase_scan:			       ; ...
TRANGROUP:1DE7		       xor     dx, dx
TRANGROUP:1DE9		       call    Parse_With_Msg
TRANGROUP:1DEC		       cmp     ax, 0FFFFh
TRANGROUP:1DEF		       jz      short good_line
TRANGROUP:1DF1		       cmp     ax, 0
TRANGROUP:1DF4		       jnz     short errj2
TRANGROUP:1DF6		       cmp     [ds:PARSE1_SYN],	offset SLASH_P_SYN ; "/P"
TRANGROUP:1DFC		       jz      short set_erase_prompt
TRANGROUP:1DFE		       push    si
TRANGROUP:1DFF		       lds     si, [ds:PARSE1_ADDR]
TRANGROUP:1E03		       cmp     [byte ptr si+1],	3Ah ; ':'
TRANGROUP:1E07		       jnz     short erase_drive_ok
TRANGROUP:1E09		       cmp     [byte ptr si+2],	0
TRANGROUP:1E0D		       jnz     short erase_drive_ok
TRANGROUP:1E0F		       mov     ax, 2	       ; ERROR_FILE_NOT_FOUND
TRANGROUP:1E12		       jmp     short extend_setup
TRANGROUP:1E14 ; ---------------------------------------------------------------------------
TRANGROUP:1E14
TRANGROUP:1E14 erase_drive_ok:			       ; ...
TRANGROUP:1E14		       call    Move_To_SrcBuf
TRANGROUP:1E17		       pop     si
TRANGROUP:1E18		       jmp     short erase_scan
TRANGROUP:1E1A ; ---------------------------------------------------------------------------
TRANGROUP:1E1A
TRANGROUP:1E1A set_erase_prompt:		       ; ...
TRANGROUP:1E1A		       cmp     [ds:COMSW], 0
TRANGROUP:1E1F		       jz      short ok_to_set_erase_prompt
TRANGROUP:1E21		       mov     ax, 1	       ; MoreArgs_Ptr
TRANGROUP:1E24		       call    setup_parse_error_msg
TRANGROUP:1E27		       jmp     short errj2
TRANGROUP:1E29 ; ---------------------------------------------------------------------------
TRANGROUP:1E29
TRANGROUP:1E29 ok_to_set_erase_prompt:		       ; ...
TRANGROUP:1E29		       inc     [ds:COMSW]      ; word
TRANGROUP:1E2D		       jmp     short erase_scan
TRANGROUP:1E2F ; ---------------------------------------------------------------------------
TRANGROUP:1E2F
TRANGROUP:1E2F good_line:			       ; ...
TRANGROUP:1E2F		       call    PathCrunch
TRANGROUP:1E32		       jnb     short checkdr
TRANGROUP:1E34		       mov     ax, [ds:Msg_Numb]
TRANGROUP:1E37		       cmp     ax, 0
TRANGROUP:1E3A		       jnz     short extend_setup
TRANGROUP:1E3C		       cmp     [ds:DestIsDir], 0
TRANGROUP:1E41		       jnz     short badpath_err
TRANGROUP:1E43
TRANGROUP:1E43 checkdr:				       ; ...
TRANGROUP:1E43		       cmp     [ds:COMSW], 0
TRANGROUP:1E48		       jz      short notest2j
TRANGROUP:1E4A		       jmp     slashp_erase
TRANGROUP:1E4D ; ---------------------------------------------------------------------------
TRANGROUP:1E4D
TRANGROUP:1E4D notest2j:			       ; ...
TRANGROUP:1E4D		       jmp     notest2
TRANGROUP:1E50 ; ---------------------------------------------------------------------------
TRANGROUP:1E50 ; START OF FUNCTION CHUNK FOR BUILDPATH
TRANGROUP:1E50
TRANGROUP:1E50 badpath_err:			       ; ...
TRANGROUP:1E50		       mov     ax, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:1E53
TRANGROUP:1E53 extend_setup:			       ; ...
TRANGROUP:1E53		       mov     [ds:msg_disp_class], 1 ;	ext_msg_class
TRANGROUP:1E58		       mov     dx, offset extend_buf_ptr
TRANGROUP:1E5B		       mov     [ds:extend_buf_ptr], ax
TRANGROUP:1E5E
TRANGROUP:1E5E errj2:				       ; ...
TRANGROUP:1E5E		       jmp     cerror
TRANGROUP:1E5E ; END OF	FUNCTION CHUNK FOR BUILDPATH
TRANGROUP:1E61 ; ---------------------------------------------------------------------------
TRANGROUP:1E61
TRANGROUP:1E61 CRENAME:				       ; ...
TRANGROUP:1E61		       mov     si, 81h
TRANGROUP:1E64		       mov     di, offset PARSE_RENAME
TRANGROUP:1E67		       xor     cx, cx
TRANGROUP:1E69		       xor     dx, dx
TRANGROUP:1E6B		       call    Parse_With_Msg
TRANGROUP:1E6E		       cmp     ax, 0
TRANGROUP:1E71		       jnz     short crename_parse_error
TRANGROUP:1E73		       push    si
TRANGROUP:1E74		       lds     si, [ds:PARSE1_ADDR]
TRANGROUP:1E78		       call    Move_To_SrcBuf
TRANGROUP:1E7B		       pop     si
TRANGROUP:1E7C		       xor     dx, dx
TRANGROUP:1E7E		       call    Parse_With_Msg
TRANGROUP:1E81		       cmp     ax, 0
TRANGROUP:1E84		       jnz     short crename_parse_error
TRANGROUP:1E86		       push    si
TRANGROUP:1E87		       lds     si, [ds:PARSE1_ADDR]
TRANGROUP:1E8B		       mov     al, 3Ah ; ':'
TRANGROUP:1E8D		       cmp     [si+1], al
TRANGROUP:1E90		       jnz     short ren_no_drive
TRANGROUP:1E92		       mov     [ds:msg_disp_class], 2
TRANGROUP:1E97		       mov     dx, offset extend_buf_ptr
TRANGROUP:1E9A		       mov     [ds:extend_buf_ptr], 0Ah	; BadParm_Ptr
TRANGROUP:1EA0		       pop     si
TRANGROUP:1EA1
TRANGROUP:1EA1 crename_parse_error:		       ; ...
TRANGROUP:1EA1		       jmp     short errj
TRANGROUP:1EA3 ; ---------------------------------------------------------------------------
TRANGROUP:1EA3
TRANGROUP:1EA3 ren_no_drive:			       ; ...
TRANGROUP:1EA3		       mov     di, 6Ch	       ; FCB+10h
TRANGROUP:1EA6		       mov     ax, 2901h
TRANGROUP:1EA9		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:1EA9					       ; DS:SI -> string to parse
TRANGROUP:1EA9					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:1EA9					       ; AL = bit mask to control parsing
TRANGROUP:1EAB		       lodsb
TRANGROUP:1EAC		       mov     [ds:One_Char_Val], al
TRANGROUP:1EAF		       pop     si
TRANGROUP:1EB0		       mov     di, offset PARSE_RENAME
TRANGROUP:1EB3		       call    parse_check_eol
TRANGROUP:1EB6		       jnz     short crename_parse_error
TRANGROUP:1EB8		       call    PathCrunch
TRANGROUP:1EBB		       mov     dx, offset BADCPMES_PTR
TRANGROUP:1EBE		       jz      short errj2
TRANGROUP:1EC0		       jnb     short notest3
TRANGROUP:1EC2		       mov     ax, [ds:Msg_Numb]
TRANGROUP:1EC5		       cmp     ax, 0
TRANGROUP:1EC8		       jnz     short extend_setup
TRANGROUP:1ECA		       cmp     [ds:DestIsDir], 0
TRANGROUP:1ECF		       jz      short notest3
TRANGROUP:1ED1		       jmp     badpath_err
TRANGROUP:1ED4 ; ---------------------------------------------------------------------------
TRANGROUP:1ED4
TRANGROUP:1ED4 notest3:				       ; ...
TRANGROUP:1ED4		       mov     al, [ds:One_Char_Val]
TRANGROUP:1ED7		       mov     dx, offset INORNOT_PTR
TRANGROUP:1EDA		       call    pathchrcmp
TRANGROUP:1EDD		       jz      short errj
TRANGROUP:1EDF		       mov     ah, 17h	       ; FCB_Rename
TRANGROUP:1EE1		       mov     dx, 5Ch	       ; FCB
TRANGROUP:1EE4		       call    int_21h_indirect
TRANGROUP:1EE7		       cmp     al, 0FFh
TRANGROUP:1EE9		       jnz     short renameok
TRANGROUP:1EEB		       call    get_ext_error_number
TRANGROUP:1EEE		       push    ax
TRANGROUP:1EEF		       mov     al, 0FFh
TRANGROUP:1EF1
TRANGROUP:1EF1 renameok:			       ; ...
TRANGROUP:1EF1		       push    ax
TRANGROUP:1EF2		       call    RestUDir
TRANGROUP:1EF5		       pop     ax
TRANGROUP:1EF6		       inc     al
TRANGROUP:1EF8		       jz      short rn1
TRANGROUP:1EFA		       retn
TRANGROUP:1EFB ; ---------------------------------------------------------------------------
TRANGROUP:1EFB
TRANGROUP:1EFB rn1:				       ; ...
TRANGROUP:1EFB		       pop     ax
TRANGROUP:1EFC		       cmp     ax, 2	       ; ERROR_FILE_NOT_FOUND
TRANGROUP:1EFF		       jz      short use_renerr
TRANGROUP:1F01		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:1F04		       jz      short use_renerr
TRANGROUP:1F06		       jmp     extend_setup
TRANGROUP:1F09 ; ---------------------------------------------------------------------------
TRANGROUP:1F09
TRANGROUP:1F09 use_renerr:			       ; ...
TRANGROUP:1F09		       mov     dx, offset RENERR_PTR
TRANGROUP:1F0C
TRANGROUP:1F0C errj:				       ; ...
TRANGROUP:1F0C		       jmp     cerror
TRANGROUP:1F0F ; ---------------------------------------------------------------------------
TRANGROUP:1F0F		       retn
TRANGROUP:1F10 ; ---------------------------------------------------------------------------
TRANGROUP:1F10
TRANGROUP:1F10 TYPEFIL:				       ; ...
TRANGROUP:1F10		       mov     si, 81h
TRANGROUP:1F13		       mov     di, offset PARSE_MRDIR
TRANGROUP:1F16		       xor     cx, cx
TRANGROUP:1F18		       xor     dx, dx
TRANGROUP:1F1A		       call    Parse_With_Msg
TRANGROUP:1F1D		       cmp     ax, 0
TRANGROUP:1F20		       jnz     short typefil_parse_error
TRANGROUP:1F22		       push    si
TRANGROUP:1F23		       lds     si, [ds:PARSE1_ADDR]
TRANGROUP:1F27		       call    Move_To_SrcBuf
TRANGROUP:1F2A		       pop     si
TRANGROUP:1F2B		       mov     di, offset PARSE_MRDIR
TRANGROUP:1F2E		       call    parse_check_eol
TRANGROUP:1F31		       jz      short gottarg
TRANGROUP:1F33
TRANGROUP:1F33 typefil_parse_error:		       ; ...
TRANGROUP:1F33		       jmp     cerror
TRANGROUP:1F36 ; ---------------------------------------------------------------------------
TRANGROUP:1F36
TRANGROUP:1F36 gottarg:				       ; ...
TRANGROUP:1F36		       call    SETPATH
TRANGROUP:1F39		       test    [ds:DestInfo], 2
TRANGROUP:1F3E		       jz      short nowilds
TRANGROUP:1F40		       mov     dx, offset INORNOT_PTR
TRANGROUP:1F43		       jmp     cerror
TRANGROUP:1F46 ; ---------------------------------------------------------------------------
TRANGROUP:1F46
TRANGROUP:1F46 nowilds:				       ; ...
TRANGROUP:1F46		       mov     ax, 6C00h       ; ExtOpen SHL 8
TRANGROUP:1F49		       mov     bx, 0	       ; read_open_mode
TRANGROUP:1F4C		       xor     cx, cx	       ; no special files
TRANGROUP:1F4E		       mov     dx, 101h	       ; read_open_flag
TRANGROUP:1F51		       mov     si, offset SrcBuf
TRANGROUP:1F54		       call    int_21h_indirect
TRANGROUP:1F57		       jnb     short typecont
TRANGROUP:1F59
TRANGROUP:1F59 typerr:				       ; ...
TRANGROUP:1F59		       push    cs
TRANGROUP:1F5A		       pop     ds
TRANGROUP:1F5B		       assume ds:TRANGROUP
TRANGROUP:1F5B		       call    Set_Ext_Error_Msg
TRANGROUP:1F5E		       mov     [string_ptr_2], offset SrcBuf
TRANGROUP:1F64		       mov     [extend_buf_sub], 1 ; one_subst
TRANGROUP:1F69		       jmp     cerror
TRANGROUP:1F6C ; ---------------------------------------------------------------------------
TRANGROUP:1F6C
TRANGROUP:1F6C typecont:			       ; ...
TRANGROUP:1F6C		       mov     bx, ax
TRANGROUP:1F6E		       mov     ax, 4400h       ; (IOCTL	shl 8) or 0
TRANGROUP:1F71		       call    int_21h_indirect
TRANGROUP:1F74		       test    dl, 80h
TRANGROUP:1F77		       jz      short not_device
TRANGROUP:1F79		       mov     [File_Size_High], 0FFFFh	; indicate it is a device
TRANGROUP:1F7F		       jmp     short dotype
TRANGROUP:1F81 ; ---------------------------------------------------------------------------
TRANGROUP:1F81
TRANGROUP:1F81 not_device:			       ; ...
TRANGROUP:1F81		       mov     ax, 4202h       ; (LSEEK	shl 8) or 2
TRANGROUP:1F84		       xor     dx, dx
TRANGROUP:1F86		       mov     cx, dx
TRANGROUP:1F88		       call    int_21h_indirect
TRANGROUP:1F8B		       mov     [File_Size_Low],	ax
TRANGROUP:1F8E		       mov     [File_Size_High], dx
TRANGROUP:1F92		       mov     ax, 4200h       ; (LSEEK	shl 8) or 0
TRANGROUP:1F95		       xor     dx, dx
TRANGROUP:1F97		       call    int_21h_indirect
TRANGROUP:1F9A
TRANGROUP:1F9A dotype:				       ; ...
TRANGROUP:1F9A		       mov     [zflag],	0
TRANGROUP:1F9F		       mov     ds, [TPA]
TRANGROUP:1FA3		       assume ds:RESGROUP
TRANGROUP:1FA3		       xor     dx, dx
TRANGROUP:1FA5
TRANGROUP:1FA5 typelp:				       ; ...
TRANGROUP:1FA5		       cmp     [cs:zflag], 0   ; Is the	^Z flag	set?
TRANGROUP:1FAB		       jz      short tf1       ; no
TRANGROUP:1FAD		       retn		       ; yes, return
TRANGROUP:1FAE ; ---------------------------------------------------------------------------
TRANGROUP:1FAE
TRANGROUP:1FAE tf1:				       ; ...
TRANGROUP:1FAE		       mov     cx, [cs:BYTCNT]
TRANGROUP:1FB3		       cmp     [cs:File_Size_High], 0FFFFh ; -1	; is it	a device?
TRANGROUP:1FB9		       jz      short typ_read  ; yes, just read	from it
TRANGROUP:1FBB		       cmp     [cs:File_Size_High], 0 ;	word
TRANGROUP:1FC1		       jz      short lt64k
TRANGROUP:1FC3		       sub     [cs:File_Size_Low], cx
TRANGROUP:1FC8		       sbb     [cs:File_Size_High], 0
TRANGROUP:1FCE		       jmp     short typ_read
TRANGROUP:1FD0 ; ---------------------------------------------------------------------------
TRANGROUP:1FD0
TRANGROUP:1FD0 lt64k:				       ; ...
TRANGROUP:1FD0		       cmp     cx, [cs:File_Size_Low]
TRANGROUP:1FD5		       jbe     short gtbuf
TRANGROUP:1FD7		       mov     cx, [cs:File_Size_Low]
TRANGROUP:1FDC		       jcxz    short typelp_ret
TRANGROUP:1FDE		       mov     [cs:File_Size_Low], 0 ; word
TRANGROUP:1FE5		       jmp     short typ_read
TRANGROUP:1FE7 ; ---------------------------------------------------------------------------
TRANGROUP:1FE7
TRANGROUP:1FE7 gtbuf:				       ; ...
TRANGROUP:1FE7		       sub     [cs:File_Size_Low], cx
TRANGROUP:1FEC
TRANGROUP:1FEC typ_read:			       ; ...
TRANGROUP:1FEC		       mov     ah, 3Fh	       ; read
TRANGROUP:1FEE		       call    int_21h_indirect
TRANGROUP:1FF1		       jnb     short tf2
TRANGROUP:1FF3		       jmp     typerr
TRANGROUP:1FF6 ; ---------------------------------------------------------------------------
TRANGROUP:1FF6
TRANGROUP:1FF6 tf2:				       ; ...
TRANGROUP:1FF6		       mov     cx, ax
TRANGROUP:1FF8		       jcxz    short typelp_ret
TRANGROUP:1FFA		       push    ds
TRANGROUP:1FFB		       pop     es
TRANGROUP:1FFC		       assume es:RESGROUP
TRANGROUP:1FFC		       xor     di, di	       ; Check to see if a ^Z was read.
TRANGROUP:1FFE		       push    ax
TRANGROUP:1FFF		       mov     al, 1Ah
TRANGROUP:2001		       repne scasb
TRANGROUP:2003		       pop     ax
TRANGROUP:2004		       xchg    ax, cx
TRANGROUP:2005		       cmp     ax, 0
TRANGROUP:2008		       jnz     short foundz
TRANGROUP:200A		       cmp     [byte ptr di-1],	1Ah ; double check
TRANGROUP:200E		       jnz     short typecont2 ; No ^Z,	continue
TRANGROUP:2010
TRANGROUP:2010 foundz:				       ; ...
TRANGROUP:2010		       sub     cx, ax
TRANGROUP:2012		       dec     cx
TRANGROUP:2013		       push    cs
TRANGROUP:2014		       pop     es
TRANGROUP:2015		       assume es:TRANGROUP
TRANGROUP:2015		       not     [es:zflag]      ; Turn on ^Z flag so that the routine
TRANGROUP:2015					       ;  will quit after this write.
TRANGROUP:201A
TRANGROUP:201A typecont2:			       ; ...
TRANGROUP:201A		       push    bx
TRANGROUP:201B		       mov     bx, 1
TRANGROUP:201E		       mov     ah, 40h ; '@'   ; Write
TRANGROUP:2020		       call    int_21h_indirect
TRANGROUP:2023		       pop     bx
TRANGROUP:2024		       jb      short Error_outputj
TRANGROUP:2026		       cmp     ax, cx
TRANGROUP:2028		       jnz     short tf3
TRANGROUP:202A		       jmp     typelp
TRANGROUP:202D ; ---------------------------------------------------------------------------
TRANGROUP:202D
TRANGROUP:202D tf3:				       ; ...
TRANGROUP:202D		       dec     cx
TRANGROUP:202E		       cmp     ax, cx
TRANGROUP:2030		       jnz     short Error_outputj
TRANGROUP:2032
TRANGROUP:2032 tf4:				       ; ...
TRANGROUP:2032		       retn
TRANGROUP:2033 ; ---------------------------------------------------------------------------
TRANGROUP:2033
TRANGROUP:2033 Error_outputj:			       ; ...
TRANGROUP:2033		       mov     bx, 1
TRANGROUP:2036		       mov     ax, 4400h       ; IOCTL SHL 8
TRANGROUP:2039		       call    int_21h_indirect
TRANGROUP:203C		       test    dl, 80h
TRANGROUP:203F		       jnz     short tf4
TRANGROUP:2041		       jmp     error_output
TRANGROUP:2044 ; ---------------------------------------------------------------------------
TRANGROUP:2044
TRANGROUP:2044 typelp_ret:			       ; ...
TRANGROUP:2044		       retn
TRANGROUP:2045 ; ---------------------------------------------------------------------------
TRANGROUP:2045
TRANGROUP:2045 VOLUME:				       ; ...
TRANGROUP:2045		       mov     si, 81h
TRANGROUP:2048		       mov     di, offset PARSE_VOL
TRANGROUP:204B		       xor     cx, cx
TRANGROUP:204D		       xor     dx, dx
TRANGROUP:204F		       call    Parse_With_Msg
TRANGROUP:2052		       cmp     ax, 0FFFFh
TRANGROUP:2055		       jz      short OkVolArg
TRANGROUP:2057		       cmp     ax, 0
TRANGROUP:205A		       jnz     short badvolarg
TRANGROUP:205C		       mov     di, offset PARSE_VOL
TRANGROUP:205F		       xor     dx, dx
TRANGROUP:2061		       call    parse_check_eol
TRANGROUP:2064		       jz      short OkVolArg
TRANGROUP:2066
TRANGROUP:2066 badvolarg:			       ; ...
TRANGROUP:2066		       jmp     cerror
TRANGROUP:2069
TRANGROUP:2069 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2069
TRANGROUP:2069
TRANGROUP:2069 proc	       DisAppend near	       ; ...
TRANGROUP:2069		       push    ds
TRANGROUP:206A		       push    es
TRANGROUP:206B		       push    di
TRANGROUP:206C		       mov     ax, 0B700h      ; APPENDINSTALL
TRANGROUP:206F		       call    int_2Fh_indirect
TRANGROUP:2072		       or      al, al
TRANGROUP:2074		       jz      short daRet
TRANGROUP:2076		       mov     ax, 0B702h      ; APPENDDOS
TRANGROUP:2079		       call    int_2Fh_indirect
TRANGROUP:207C		       cmp     ax, 0FFFFh
TRANGROUP:207F		       jnz     short daRet
TRANGROUP:2081		       mov     ax, 0B706h      ; APPENDGETSTATE
TRANGROUP:2084		       call    int_2Fh_indirect
TRANGROUP:2087		       mov     ds, [ds:RESSEG]
TRANGROUP:208B		       assume ds:nothing
TRANGROUP:208B		       mov     [ds:Append_State], bx
TRANGROUP:208F		       mov     [ds:Append_Flag], 0FFh ;	-1
TRANGROUP:2094		       xor     bx, bx
TRANGROUP:2096		       mov     ax, 0B707h      ; APPENDSETSTATE
TRANGROUP:2099		       call    int_2Fh_indirect
TRANGROUP:209C
TRANGROUP:209C daRet:				       ; ...
TRANGROUP:209C		       pop     di
TRANGROUP:209D		       pop     es
TRANGROUP:209E		       assume es:nothing
TRANGROUP:209E		       pop     ds
TRANGROUP:209F		       retn
TRANGROUP:209F endp	       DisAppend
TRANGROUP:209F
TRANGROUP:20A0
TRANGROUP:20A0 ; =============== S U B R O U T I N E =======================================
TRANGROUP:20A0
TRANGROUP:20A0
TRANGROUP:20A0 proc	       OkVolArg	near	       ; ...
TRANGROUP:20A0		       call    DisAppend
TRANGROUP:20A3		       call    CRLF2
TRANGROUP:20A6		       mov     al, 20h ; ' '   ; black (space)
TRANGROUP:20A8		       call    PRINT_CHAR
TRANGROUP:20AB		       push    ds
TRANGROUP:20AC		       pop     es
TRANGROUP:20AD		       mov     di, 55h	       ; FCB-7
TRANGROUP:20B0		       mov     al, 0FFh	       ; -1
TRANGROUP:20B2		       stosb
TRANGROUP:20B3		       xor     ax, ax
TRANGROUP:20B5		       stosw
TRANGROUP:20B6		       stosw
TRANGROUP:20B7		       stosb
TRANGROUP:20B8		       mov     al, 8	       ; ATTR_VOLUME_ID
TRANGROUP:20BA		       stosb
TRANGROUP:20BB		       inc     di
TRANGROUP:20BC		       mov     cx, 11
TRANGROUP:20BF		       mov     al, 3Fh ; '?'
TRANGROUP:20C1		       rep stosb
TRANGROUP:20C3		       mov     dx, offset BWDBUF ; DIRBUF
TRANGROUP:20C6		       mov     ah, 1Ah	       ; Set_DMA
TRANGROUP:20C8		       call    int_21h_indirect
TRANGROUP:20CB		       mov     dx, 55h	       ; FCB-7
TRANGROUP:20CE		       mov     ah, 11h	       ; Dir_Search_First
TRANGROUP:20D0		       call    int_21h_indirect
TRANGROUP:20D3		       push    ax
TRANGROUP:20D4		       mov     al, [ds:5Ch]    ; [FCB]
TRANGROUP:20D7		       add     al, 40h ; '@'
TRANGROUP:20D9		       cmp     al, 40h ; '@'
TRANGROUP:20DB		       jnz     short drvok
TRANGROUP:20DD		       mov     al, [ds:CURDRV]
TRANGROUP:20E0		       add     al, 41h ; 'A'
TRANGROUP:20E2
TRANGROUP:20E2 drvok:				       ; ...
TRANGROUP:20E2		       mov     [ds:vol_drv], al
TRANGROUP:20E5		       pop     ax
TRANGROUP:20E6		       or      al, al
TRANGROUP:20E8		       jz      short Get_vol_name
TRANGROUP:20EA		       mov     dx, offset VolMes_Ptr_2
TRANGROUP:20ED		       jmp     short print_serial
TRANGROUP:20EF ; ---------------------------------------------------------------------------
TRANGROUP:20EF
TRANGROUP:20EF Get_vol_name:			       ; ...
TRANGROUP:20EF		       mov     di, offset CHARBUF
TRANGROUP:20F2		       mov     dx, di
TRANGROUP:20F4		       mov     si, (offset BWDBUF+8) ; offset DIRBUF+8
TRANGROUP:20F7		       mov     cx, 11
TRANGROUP:20FA		       rep movsb
TRANGROUP:20FC		       xor     al, al
TRANGROUP:20FE		       stosb
TRANGROUP:20FF		       mov     dx, offset VolMes_Ptr
TRANGROUP:2102
TRANGROUP:2102 print_serial:			       ; ...
TRANGROUP:2102		       push    dx
TRANGROUP:2103		       mov     ax, 6900h       ; (GetSetMediaID	SHL 8)
TRANGROUP:2106		       mov     bl, [ds:5Ch]    ; [FCB]
TRANGROUP:210A		       mov     dx, offset vol_ioctl_buf
TRANGROUP:210D		       call    int_21h_indirect
TRANGROUP:2110		       pop     dx
TRANGROUP:2111		       jb      short printvol_end
TRANGROUP:2113		       call    std_printf
TRANGROUP:2116		       mov     al, 20h ; ' '   ; blank (space)
TRANGROUP:2118		       call    PRINT_CHAR
TRANGROUP:211B		       mov     dx, offset VolSerMes_Ptr
TRANGROUP:211E
TRANGROUP:211E printvol_end:			       ; ...
TRANGROUP:211E		       jmp     std_printf
TRANGROUP:211E endp	       OkVolArg
TRANGROUP:211E
TRANGROUP:2121
TRANGROUP:2121 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2121
TRANGROUP:2121
TRANGROUP:2121 proc	       Set_Ext_Error_Msg near  ; ...
TRANGROUP:2121		       call    get_ext_error_number
TRANGROUP:2124		       mov     [ds:msg_disp_class], 1 ;	ext_msg_class
TRANGROUP:2129		       mov     dx, offset extend_buf_ptr
TRANGROUP:212C		       mov     [ds:extend_buf_ptr], ax
TRANGROUP:212F		       stc
TRANGROUP:2130		       retn
TRANGROUP:2130 endp	       Set_Ext_Error_Msg
TRANGROUP:2130
TRANGROUP:2131
TRANGROUP:2131 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2131
TRANGROUP:2131
TRANGROUP:2131 proc	       get_ext_error_number near ; ...
TRANGROUP:2131		       push    bx
TRANGROUP:2132		       push    cx
TRANGROUP:2133		       push    dx
TRANGROUP:2134		       push    si
TRANGROUP:2135		       push    di
TRANGROUP:2136		       push    bp
TRANGROUP:2137		       push    es
TRANGROUP:2138		       push    ds
TRANGROUP:2139		       mov     ah, 59h	       ; GetExtendedError
TRANGROUP:213B		       xor     bx, bx
TRANGROUP:213D		       int     21h	       ; DOS - 3+ - GET	EXTENDED ERROR CODE
TRANGROUP:213D					       ; BX = version code (0000h for DOS 3.x)
TRANGROUP:213F		       pop     ds
TRANGROUP:2140		       pop     es
TRANGROUP:2141		       pop     bp
TRANGROUP:2142		       pop     di
TRANGROUP:2143		       pop     si
TRANGROUP:2144		       pop     dx
TRANGROUP:2145		       pop     cx
TRANGROUP:2146		       pop     bx
TRANGROUP:2147		       retn
TRANGROUP:2147 endp	       get_ext_error_number
TRANGROUP:2147
TRANGROUP:2148 ; ---------------------------------------------------------------------------
TRANGROUP:2148
TRANGROUP:2148 VERSION:				       ; ...
TRANGROUP:2148		       mov     si, 81h
TRANGROUP:214B		       mov     di, offset PARSE_VER
TRANGROUP:214E		       xor     cx, cx
TRANGROUP:2150		       call    Parse_With_Msg
TRANGROUP:2153		       mov     bl, 1
TRANGROUP:2155		       cmp     ax, 0
TRANGROUP:2158		       jz      short verPrintVer
TRANGROUP:215A		       dec     bl
TRANGROUP:215C		       cmp     ax, 0FFFFh      ; END_OF_LINE
TRANGROUP:215F		       jz      short verPrintVer
TRANGROUP:2161		       jmp     cerror
TRANGROUP:2164 ; ---------------------------------------------------------------------------
TRANGROUP:2164
TRANGROUP:2164 verPrintVer:			       ; ...
TRANGROUP:2164		       push    bx
TRANGROUP:2165		       call    CRLF2
TRANGROUP:2168		       call    PRINT_VERSION
TRANGROUP:216B		       call    CRLF2
TRANGROUP:216E		       mov     ax, 3306h
TRANGROUP:2171		       int     21h	       ; DOS - 5+ Get TRUE Version Number (BL major, BH	minor, DL revision, DH flags)
TRANGROUP:2173		       mov     al, dl
TRANGROUP:2175		       mov     bh, dh
TRANGROUP:2177		       cmp     al, 25	       ; 'Z'-'A'
TRANGROUP:2179		       jbe     short ver1
TRANGROUP:217B		       mov     al, 0E9h	       ; '*'-'A' ; -23
TRANGROUP:217D
TRANGROUP:217D ver1:				       ; ...
TRANGROUP:217D		       add     al, 30h	       ; '0'
TRANGROUP:217F		       mov     [ds:One_Char_Val], al
TRANGROUP:2182		       mov     dx, offset dosrev_ptr ; MSG_1090
TRANGROUP:2185		       call    std_printf
TRANGROUP:2188		       pop     dx
TRANGROUP:2189		       or      dl, dl
TRANGROUP:218B		       jz      short verDone   ; Revision 0
TRANGROUP:218D		       mov     cl, 4
TRANGROUP:218F		       shr     bh, cl
TRANGROUP:2191		       jb      short verRom
TRANGROUP:2193		       shr     bh, 1
TRANGROUP:2195		       jb      short verHma    ; MSG_1093
TRANGROUP:2197		       mov     dx, offset DosLow_Ptr
TRANGROUP:219A		       jmp     short verPrintLoc
TRANGROUP:219C ; ---------------------------------------------------------------------------
TRANGROUP:219C
TRANGROUP:219C verRom:				       ; ...
TRANGROUP:219C		       mov     dx, offset DosRom_Ptr ; MSG_1091
TRANGROUP:219F		       jmp     short verPrintLoc
TRANGROUP:21A1 ; ---------------------------------------------------------------------------
TRANGROUP:21A1
TRANGROUP:21A1 verHma:				       ; ...
TRANGROUP:21A1		       mov     dx, offset DosHma_Ptr ; MSG_1092
TRANGROUP:21A4
TRANGROUP:21A4 verPrintLoc:			       ; ...
TRANGROUP:21A4		       call    std_printf
TRANGROUP:21A7
TRANGROUP:21A7 verDone:				       ; ...
TRANGROUP:21A7		       jmp     CRLF2
TRANGROUP:21AA
TRANGROUP:21AA ; =============== S U B R O U T I N E =======================================
TRANGROUP:21AA
TRANGROUP:21AA
TRANGROUP:21AA proc	       PRINT_VERSION near      ; ...
TRANGROUP:21AA		       mov     ah, 30h
TRANGROUP:21AC		       int     21h	       ; DOS - GET DOS VERSION
TRANGROUP:21AC					       ; Return: AL = major version number (00h	for DOS	1.x)
TRANGROUP:21AE		       push    ax
TRANGROUP:21AF		       xor     ah, ah
TRANGROUP:21B1		       mov     [ds:Major_Ver_Num], ax
TRANGROUP:21B4		       pop     ax
TRANGROUP:21B5		       xchg    ah, al
TRANGROUP:21B7		       xor     ah, ah
TRANGROUP:21B9		       mov     [ds:Minor_Ver_Num], ax
TRANGROUP:21BC		       mov     dx, offset VerMes_Ptr ; MSG_1040
TRANGROUP:21BF		       jmp     std_printf
TRANGROUP:21BF endp	       PRINT_VERSION
TRANGROUP:21BF
TRANGROUP:21C2
TRANGROUP:21C2 ; =============== S U B R O U T I N E =======================================
TRANGROUP:21C2
TRANGROUP:21C2
TRANGROUP:21C2 proc	       PRINT_PROMPT near       ; ...
TRANGROUP:21C2		       push    ds
TRANGROUP:21C3		       push    cs
TRANGROUP:21C4		       pop     ds
TRANGROUP:21C5		       assume ds:TRANGROUP
TRANGROUP:21C5		       push    es
TRANGROUP:21C6		       pushf
TRANGROUP:21C7
TRANGROUP:21C7 PP0:				       ; ...
TRANGROUP:21C7		       mov     ax, 4A10h       ; SMARTDRV INSTALLATION CHECK (*)
TRANGROUP:21CA		       mov     bx, 0	       ; (*)
TRANGROUP:21CD		       int     2Fh
TRANGROUP:21CF		       cmp     ax, 0BABEh      ; 0BABEh	if installed
TRANGROUP:21D2		       jnz     short PP1
TRANGROUP:21D4		       cmp     cx, 0	       ; number	of dirty cache elements
TRANGROUP:21D7		       jnz     short PP3
TRANGROUP:21D9
TRANGROUP:21D9 PP1:				       ; ...
TRANGROUP:21D9		       popf
TRANGROUP:21DA		       call    find_prompt
TRANGROUP:21DD		       jb      short PP2
TRANGROUP:21DF		       cmp     [byte ptr es:di], 0
TRANGROUP:21E3		       jnz     short PP4
TRANGROUP:21E5
TRANGROUP:21E5 PP2:				       ; ...
TRANGROUP:21E5		       push    ds
TRANGROUP:21E6		       pop     es
TRANGROUP:21E7		       assume es:TRANGROUP
TRANGROUP:21E7		       call    build_dir_for_prompt
TRANGROUP:21EA		       call    PRINT_G
TRANGROUP:21ED		       jmp     short PP8
TRANGROUP:21EF ; ---------------------------------------------------------------------------
TRANGROUP:21EF
TRANGROUP:21EF PP3:				       ; ...
TRANGROUP:21EF		       mov     ax, 4A10h       ; SMARTDRV - FLUSH BUFFERS (**)
TRANGROUP:21F2		       mov     bx, 1	       ; (**)
TRANGROUP:21F5		       int     2Fh
TRANGROUP:21F7		       jmp     short PP0
TRANGROUP:21F9 ; ---------------------------------------------------------------------------
TRANGROUP:21F9
TRANGROUP:21F9 PP4:				       ; ...
TRANGROUP:21F9		       mov     al, [es:di]
TRANGROUP:21FC		       inc     di
TRANGROUP:21FD		       or      al, al
TRANGROUP:21FF		       jz      short PP8
TRANGROUP:2201		       cmp     al, '$'
TRANGROUP:2203		       jz      short PP5
TRANGROUP:2205		       call    PRINT_CHAR
TRANGROUP:2208		       jmp     short PP4
TRANGROUP:220A ; ---------------------------------------------------------------------------
TRANGROUP:220A
TRANGROUP:220A PP5:				       ; ...
TRANGROUP:220A		       mov     al, [es:di]
TRANGROUP:220D		       inc     di
TRANGROUP:220E		       mov     bx, offset PROMPT_TABLE_3 ; PROMPT_TABLE-3
TRANGROUP:2211		       or      al, al
TRANGROUP:2213		       jz      short PP8
TRANGROUP:2215
TRANGROUP:2215 PP6:				       ; ...
TRANGROUP:2215		       add     bx, 3
TRANGROUP:2218		       call    UPCONV
TRANGROUP:221B		       cmp     al, [bx]
TRANGROUP:221D		       jz      short PP7
TRANGROUP:221F		       cmp     [byte ptr bx], 0
TRANGROUP:2222		       jnz     short PP6
TRANGROUP:2224		       jmp     short PP4
TRANGROUP:2226 ; ---------------------------------------------------------------------------
TRANGROUP:2226
TRANGROUP:2226 PP7:				       ; ...
TRANGROUP:2226		       push    es
TRANGROUP:2227		       push    di
TRANGROUP:2228		       push    cs
TRANGROUP:2229		       pop     es
TRANGROUP:222A		       call    [word ptr bx+1]
TRANGROUP:222D		       pop     di
TRANGROUP:222E		       pop     es
TRANGROUP:222F		       assume es:nothing
TRANGROUP:222F		       jmp     short PP4
TRANGROUP:2231 ; ---------------------------------------------------------------------------
TRANGROUP:2231
TRANGROUP:2231 PP8:				       ; ...
TRANGROUP:2231		       pop     es
TRANGROUP:2232		       pop     ds
TRANGROUP:2233		       assume ds:nothing
TRANGROUP:2233		       retn
TRANGROUP:2233 endp	       PRINT_PROMPT
TRANGROUP:2233
TRANGROUP:2234 ; ---------------------------------------------------------------------------
TRANGROUP:2234
TRANGROUP:2234 PRINT_BACK:			       ; ...
TRANGROUP:2234		       mov     dx, offset dback_ptr
TRANGROUP:2237		       jmp     std_printf
TRANGROUP:223A ; ---------------------------------------------------------------------------
TRANGROUP:223A
TRANGROUP:223A PRINT_EQ:			       ; ...
TRANGROUP:223A		       mov     al, 3Dh ; '='
TRANGROUP:223C		       jmp     short PRINT_CHAR
TRANGROUP:223E ; ---------------------------------------------------------------------------
TRANGROUP:223E
TRANGROUP:223E PRINT_R:				       ; ...
TRANGROUP:223E		       push    ds
TRANGROUP:223F		       mov     ds, [ds:RESSEG]
TRANGROUP:2243		       mov     al, [byte ptr ds:RetCode]
TRANGROUP:2246		       pop     ds
TRANGROUP:2247		       xor     ah, ah
TRANGROUP:2249		       mov     dl, 10
TRANGROUP:224B		       mov     si, offset RetCode_str ;	"000"
TRANGROUP:224E		       div     dl
TRANGROUP:2250		       add     ah, 30h ; '0'
TRANGROUP:2253		       mov     [si+2], ah
TRANGROUP:2256		       xor     ah, ah
TRANGROUP:2258		       div     dl
TRANGROUP:225A		       add     ax, 3030h
TRANGROUP:225D		       mov     [si], ax
TRANGROUP:225F		       cmp     al, 30h ; '0'
TRANGROUP:2261		       jnz     short Print_R_@
TRANGROUP:2263		       inc     si
TRANGROUP:2264		       cmp     ah, 30h ; '0'
TRANGROUP:2267		       jnz     short Print_R_@
TRANGROUP:2269		       inc     si
TRANGROUP:226A
TRANGROUP:226A Print_R_@:			       ; ...
TRANGROUP:226A		       mov     [ds:string_ptr_2], si
TRANGROUP:226E		       clc
TRANGROUP:226F		       jmp     short Print_R_@@
TRANGROUP:226F ; ---------------------------------------------------------------------------
TRANGROUP:2271 RetCode_str     db '000',0              ; ...
TRANGROUP:2275 ; ---------------------------------------------------------------------------
TRANGROUP:2275
TRANGROUP:2275 PRINT_ESC:			       ; ...
TRANGROUP:2275		       mov     al, 1Bh
TRANGROUP:2277		       jmp     short PRINT_CHAR
TRANGROUP:2279
TRANGROUP:2279 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2279
TRANGROUP:2279
TRANGROUP:2279 proc	       PRINT_G near	       ; ...
TRANGROUP:2279		       mov     al, 3Eh ; '>'   ; RABRACKET
TRANGROUP:227B		       jmp     short PRINT_CHAR
TRANGROUP:227B endp	       PRINT_G
TRANGROUP:227B
TRANGROUP:227D ; ---------------------------------------------------------------------------
TRANGROUP:227D
TRANGROUP:227D PRINT_L:				       ; ...
TRANGROUP:227D		       mov     al, 3Ch ; '<'   ; LABRACKET
TRANGROUP:227F		       jmp     short PRINT_CHAR
TRANGROUP:2281 ; ---------------------------------------------------------------------------
TRANGROUP:2281
TRANGROUP:2281 Print_B:				       ; ...
TRANGROUP:2281		       mov     al, 7Ch ; '|'   ; VBAR
TRANGROUP:2283
TRANGROUP:2283 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2283
TRANGROUP:2283
TRANGROUP:2283 proc	       PRINT_CHAR near	       ; ...
TRANGROUP:2283		       push    es
TRANGROUP:2284		       push    ds
TRANGROUP:2285		       pop     es
TRANGROUP:2286		       push    di
TRANGROUP:2287		       push    dx
TRANGROUP:2288		       mov     dl, al
TRANGROUP:228A		       mov     ah, 2	       ; STD_CON_OUTPUT
TRANGROUP:228C		       int     21h	       ; DOS - DISPLAY OUTPUT
TRANGROUP:228C					       ; DL = character	to send	to standard output
TRANGROUP:228E		       pop     dx
TRANGROUP:228F		       pop     di
TRANGROUP:2290		       pop     es
TRANGROUP:2291		       retn
TRANGROUP:2291 endp	       PRINT_CHAR
TRANGROUP:2291
TRANGROUP:2292 ; ---------------------------------------------------------------------------
TRANGROUP:2292
TRANGROUP:2292 PRINT_DRIVE:			       ; ...
TRANGROUP:2292		       mov     ah, 19h
TRANGROUP:2294		       int     21h	       ; DOS - GET DEFAULT DISK	NUMBER
TRANGROUP:2296		       add     al, 41h ; 'A'
TRANGROUP:2298		       call    PRINT_CHAR
TRANGROUP:229B		       retn
TRANGROUP:229C
TRANGROUP:229C ; =============== S U B R O U T I N E =======================================
TRANGROUP:229C
TRANGROUP:229C
TRANGROUP:229C proc	       build_dir_for_prompt near ; ...
TRANGROUP:229C		       xor     dl, dl
TRANGROUP:229E		       mov     si, offset BWDBUF
TRANGROUP:22A1		       mov     di, si
TRANGROUP:22A3		       mov     al, [ds:CURDRV]
TRANGROUP:22A6		       add     al, 'A'
TRANGROUP:22A8		       mov     ah, ':'
TRANGROUP:22AA		       stosw
TRANGROUP:22AB		       mov     al, [ds:DIRCHAR]
TRANGROUP:22AE		       stosb
TRANGROUP:22AF		       xchg    si, di
TRANGROUP:22B1		       mov     [ds:string_ptr_2], di
TRANGROUP:22B5		       mov     ah, 47h
TRANGROUP:22B7		       int     21h	       ; DOS - 2+ - GET	CURRENT	DIRECTORY
TRANGROUP:22B7					       ; DL = drive (0=default,	1=A, etc.)
TRANGROUP:22B7					       ; DS:SI points to 64-byte buffer	area
TRANGROUP:22B9
TRANGROUP:22B9 Print_R_@@:			       ; ...
TRANGROUP:22B9		       mov     dx, offset string_buf_ptr
TRANGROUP:22BC		       jnb     short doprint
TRANGROUP:22BE		       mov     dx, offset BADCURDRV
TRANGROUP:22C1
TRANGROUP:22C1 doprint:				       ; ...
TRANGROUP:22C1		       call    std_printf
TRANGROUP:22C4		       retn
TRANGROUP:22C4 endp	       build_dir_for_prompt
TRANGROUP:22C4
TRANGROUP:22C5
TRANGROUP:22C5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:22C5
TRANGROUP:22C5
TRANGROUP:22C5 proc	       build_dir_for_chdir near	; ...
TRANGROUP:22C5		       call    build_dir_string
TRANGROUP:22C8		       mov     dx, offset BWDBUF ; DIRBUF
TRANGROUP:22CB		       mov     [ds:string_ptr_2], dx
TRANGROUP:22CF		       mov     dx, offset string_buf_ptr
TRANGROUP:22D2		       call    std_printf
TRANGROUP:22D5		       retn
TRANGROUP:22D5 endp	       build_dir_for_chdir
TRANGROUP:22D5
TRANGROUP:22D6
TRANGROUP:22D6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:22D6
TRANGROUP:22D6
TRANGROUP:22D6 proc	       build_dir_string	near   ; ...
TRANGROUP:22D6		       mov     dl, [ds:5Ch]    ; FCB
TRANGROUP:22DA		       mov     al, dl
TRANGROUP:22DC		       add     al, 40h ; '@'
TRANGROUP:22DE		       cmp     al, 40h ; '@'
TRANGROUP:22E0		       jnz     short gotdrive
TRANGROUP:22E2		       add     al, [ds:CURDRV]
TRANGROUP:22E6		       inc     al
TRANGROUP:22E8
TRANGROUP:22E8 gotdrive:			       ; ...
TRANGROUP:22E8		       push    ax
TRANGROUP:22E9		       mov     si, (offset BWDBUF+3)
TRANGROUP:22EC		       mov     ah, 47h
TRANGROUP:22EE		       int     21h	       ; DOS - 2+ - GET	CURRENT	DIRECTORY
TRANGROUP:22EE					       ; DL = drive (0=default,	1=A, etc.)
TRANGROUP:22EE					       ; DS:SI points to 64-byte buffer	area
TRANGROUP:22F0		       jnb     short dpbisok
TRANGROUP:22F2		       push    cs
TRANGROUP:22F3		       pop     ds
TRANGROUP:22F4		       assume ds:TRANGROUP
TRANGROUP:22F4		       jmp     DRVBAD
TRANGROUP:22F7 ; ---------------------------------------------------------------------------
TRANGROUP:22F7
TRANGROUP:22F7 dpbisok:				       ; ...
TRANGROUP:22F7		       mov     di, offset BWDBUF
TRANGROUP:22FA		       mov     dx, di
TRANGROUP:22FC		       pop     ax
TRANGROUP:22FD		       mov     ah, ':'
TRANGROUP:22FF		       stosw
TRANGROUP:2300		       mov     al, [DIRCHAR]
TRANGROUP:2303		       stosb
TRANGROUP:2304		       retn
TRANGROUP:2304 endp	       build_dir_string
TRANGROUP:2304
TRANGROUP:2305
TRANGROUP:2305 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2305
TRANGROUP:2305
TRANGROUP:2305 proc	       PATH near	       ; ...
TRANGROUP:2305		       xor     al, al
TRANGROUP:2307		       mov     di, offset SRCXNAME
TRANGROUP:230A		       stosb
TRANGROUP:230B		       dec     di
TRANGROUP:230C		       call    PGETARG
TRANGROUP:230F		       jz      short disppath
TRANGROUP:2311		       cmp     al, 3Bh ; ';'   ; semicolon
TRANGROUP:2313		       jnz     short pathslp
TRANGROUP:2315		       inc     si
TRANGROUP:2316		       jmp     short scan_white
TRANGROUP:2318 ; ---------------------------------------------------------------------------
TRANGROUP:2318
TRANGROUP:2318 pathslp:				       ; ...
TRANGROUP:2318		       lodsb
TRANGROUP:2319		       cmp     al, 0Dh	       ; END_OF_LINE_IN
TRANGROUP:231B		       jz      short path_eol
TRANGROUP:231D		       call    testkanj	       ; See if	DBCS
TRANGROUP:2320		       jz      short notkanj2  ; No - continue
TRANGROUP:2322		       stosb
TRANGROUP:2323		       lodsb
TRANGROUP:2324
TRANGROUP:2324 path_hold:			       ; ...
TRANGROUP:2324		       stosb
TRANGROUP:2325		       jmp     short pathslp
TRANGROUP:2327 ; ---------------------------------------------------------------------------
TRANGROUP:2327
TRANGROUP:2327 notkanj2:			       ; ...
TRANGROUP:2327		       call    UPCONV	       ; upper case the	character
TRANGROUP:232A		       cmp     al, 3Bh ; ';'   ; semicolon
TRANGROUP:232C		       jz      short path_hold
TRANGROUP:232E		       call    DELIM
TRANGROUP:2331		       jnz     short path_hold
TRANGROUP:2333
TRANGROUP:2333 scan_white:			       ; ...
TRANGROUP:2333		       lodsb
TRANGROUP:2334		       cmp     al, 0Dh	       ; END_OF_LINE_IN
TRANGROUP:2336		       jz      short path_eol
TRANGROUP:2338		       cmp     al, 20h ; ' '   ; blank
TRANGROUP:233A		       jz      short scan_white
TRANGROUP:233C		       cmp     al, 9	       ; tab_chr
TRANGROUP:233E		       jz      short scan_white
TRANGROUP:2340		       mov     dx, offset extend_buf_ptr
TRANGROUP:2343		       mov     [extend_buf_ptr], 1 ; MoreArgs_Ptr
TRANGROUP:2349		       mov     [msg_disp_class], 2 ; parse_msg_class
TRANGROUP:234E		       jmp     cerror
TRANGROUP:2351 ; ---------------------------------------------------------------------------
TRANGROUP:2351
TRANGROUP:2351 path_eol:			       ; ...
TRANGROUP:2351		       xor     al, al
TRANGROUP:2353		       stosb
TRANGROUP:2354		       call    find_path
TRANGROUP:2357		       call    delete_path
TRANGROUP:235A		       call    scan_double_null
TRANGROUP:235D		       call    move_name
TRANGROUP:2360		       mov     si, offset SRCXNAME
TRANGROUP:2363
TRANGROUP:2363 store_path:			       ; ...
TRANGROUP:2363		       lodsb
TRANGROUP:2364		       cmp     al, 0
TRANGROUP:2366		       jz      short got_paths
TRANGROUP:2368		       call    store_char
TRANGROUP:236B		       jmp     short store_path
TRANGROUP:236D ; ---------------------------------------------------------------------------
TRANGROUP:236D
TRANGROUP:236D got_paths:			       ; ...
TRANGROUP:236D		       xor     ax, ax
TRANGROUP:236F		       stosw
TRANGROUP:2370		       retn
TRANGROUP:2371 ; ---------------------------------------------------------------------------
TRANGROUP:2371
TRANGROUP:2371 disppath:			       ; ...
TRANGROUP:2371		       call    find_path
TRANGROUP:2374		       call    print_path
TRANGROUP:2377		       call    CRLF2
TRANGROUP:237A		       retn
TRANGROUP:237A endp	       PATH
TRANGROUP:237A
TRANGROUP:237B
TRANGROUP:237B ; =============== S U B R O U T I N E =======================================
TRANGROUP:237B
TRANGROUP:237B
TRANGROUP:237B proc	       print_path near	       ; ...
TRANGROUP:237B		       cmp     [byte ptr es:di], 0
TRANGROUP:237F		       jnz     short path1
TRANGROUP:2381
TRANGROUP:2381 path0:				       ; ...
TRANGROUP:2381		       mov     dx, offset NULLPATH_PTR
TRANGROUP:2384		       push    cs
TRANGROUP:2385		       pop     es
TRANGROUP:2386		       assume es:TRANGROUP
TRANGROUP:2386		       push    cs
TRANGROUP:2387		       pop     ds
TRANGROUP:2388		       jmp     std_printf
TRANGROUP:238B ; ---------------------------------------------------------------------------
TRANGROUP:238B
TRANGROUP:238B path1:				       ; ...
TRANGROUP:238B		       push    es
TRANGROUP:238C		       pop     ds
TRANGROUP:238D		       sub     di, 5
TRANGROUP:2390		       mov     si, di
TRANGROUP:2392		       call    SCASB2	       ; Look for null
TRANGROUP:2395		       cmp     cx, 0FFh
TRANGROUP:2399		       jz      short path0
TRANGROUP:239B		       push    cs
TRANGROUP:239C		       pop     es
TRANGROUP:239D		       mov     di, offset TPBUF	; Arg_Buf ; = TPBUF
TRANGROUP:23A0		       mov     dx, 256
TRANGROUP:23A3		       sub     dx, cx	       ; ch = 0
TRANGROUP:23A5		       xchg    dx, cx	       ; cl = neg cl (256-cl)
TRANGROUP:23A7		       rep movsb
TRANGROUP:23A9		       mov     dx, offset arg_buf_ptr
TRANGROUP:23AC		       push    cs
TRANGROUP:23AD		       pop     ds
TRANGROUP:23AE		       jmp     std_printf
TRANGROUP:23AE endp	       print_path
TRANGROUP:23AE
TRANGROUP:23B1
TRANGROUP:23B1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:23B1
TRANGROUP:23B1
TRANGROUP:23B1 proc	       CLS near		       ; ...
TRANGROUP:23B1		       mov     ah, 1Ah
TRANGROUP:23B3		       mov     al, 0
TRANGROUP:23B5		       int     2Fh	       ; - Multiplex - DOS 4+ ANSI.SYS internal	- INSTALLATION CHECK
TRANGROUP:23B5					       ; Return: AL = FFh if installed
TRANGROUP:23B7		       cmp     al, 0FFh
TRANGROUP:23B9		       jz      short ansicls
TRANGROUP:23BB		       mov     ax, 440Ch       ; (IOCTL	SHL 8) + generic_ioctl_handle
TRANGROUP:23BE		       mov     bx, 1	       ; handle
TRANGROUP:23C1		       mov     ch, 3	       ; CON device
TRANGROUP:23C3		       mov     cl, 7Fh	       ; minor function, get display info
TRANGROUP:23C5		       mov     dx, offset Display_Ioctl
TRANGROUP:23C8		       int     21h	       ; DOS - 2+ - IOCTL -
TRANGROUP:23CA		       jb      short no_variable
TRANGROUP:23CC		       mov     ax, [LinPerPag]
TRANGROUP:23CF		       mov     dh, al
TRANGROUP:23D1		       mov     ax, [display_width]
TRANGROUP:23D4		       mov     dl, al
TRANGROUP:23D6		       jmp     short regcls
TRANGROUP:23D8 ; ---------------------------------------------------------------------------
TRANGROUP:23D8
TRANGROUP:23D8 no_variable:			       ; ...
TRANGROUP:23D8		       mov     bx, 1	       ; stdout
TRANGROUP:23DB		       mov     ax, 4400h
TRANGROUP:23DE		       int     21h	       ; DOS - 2+ - IOCTL - GET	DEVICE INFORMATION
TRANGROUP:23DE					       ; BX = file or device handle
TRANGROUP:23E0		       test    dl, 80h	       ; devid_ISDEV
TRANGROUP:23E3		       jz      short ansicls
TRANGROUP:23E5		       test    dl, 10h	       ; devid_SPECIAL
TRANGROUP:23E8		       jnz     short cls_normal
TRANGROUP:23EA
TRANGROUP:23EA ansicls:				       ; ...
TRANGROUP:23EA		       call    ansi_cls
TRANGROUP:23ED		       jmp     short cls_ret
TRANGROUP:23EF ; ---------------------------------------------------------------------------
TRANGROUP:23EF
TRANGROUP:23EF cls_normal:			       ; ...
TRANGROUP:23EF		       mov     ah, 0Fh
TRANGROUP:23F1		       int     10h	       ; - VIDEO - GET CURRENT VIDEO MODE
TRANGROUP:23F1					       ; Return: AH = number of	columns	on screen
TRANGROUP:23F1					       ; AL = current video mode
TRANGROUP:23F1					       ; BH = current active display page
TRANGROUP:23F3		       cmp     al, 3	       ; video_alpha
TRANGROUP:23F5		       jbe     short DoAlpha
TRANGROUP:23F7		       cmp     al, 7	       ; video_bw
TRANGROUP:23F9		       jz      short DoAlpha
TRANGROUP:23FB		       mov     ah, 0
TRANGROUP:23FD		       int     10h	       ; - VIDEO - SET VIDEO MODE
TRANGROUP:23FD					       ; AL = mode
TRANGROUP:23FF		       jmp     short cls_ret
TRANGROUP:2401 ; ---------------------------------------------------------------------------
TRANGROUP:2401
TRANGROUP:2401 DoAlpha:				       ; ...
TRANGROUP:2401		       push    ds
TRANGROUP:2402		       mov     ax, 40h	       ; ROMBIOS_DATA segment
TRANGROUP:2405		       mov     ds, ax
TRANGROUP:2407		       assume ds:nothing
TRANGROUP:2407		       mov     dx, [ds:4Ah]    ; [CRT_Cols]
TRANGROUP:240B		       mov     dh, [ds:84h]    ; [CRT_Rows]
TRANGROUP:240F		       pop     ds
TRANGROUP:2410		       assume ds:nothing
TRANGROUP:2410		       or      dh, dh
TRANGROUP:2412		       jnz     short regcls
TRANGROUP:2414		       mov     dh, 25	       ; LINESPERPAGE
TRANGROUP:2416
TRANGROUP:2416 regcls:				       ; ...
TRANGROUP:2416		       inc     dh
TRANGROUP:2418		       call    reg_cls
TRANGROUP:241B
TRANGROUP:241B cls_ret:				       ; ...
TRANGROUP:241B		       retn
TRANGROUP:241B endp	       CLS
TRANGROUP:241B
TRANGROUP:241C
TRANGROUP:241C ; =============== S U B R O U T I N E =======================================
TRANGROUP:241C
TRANGROUP:241C
TRANGROUP:241C proc	       reg_cls near	       ; ...
TRANGROUP:241C		       dec     dh	       ; Clear the screen using	INT 10H
TRANGROUP:241E		       dec     dl
TRANGROUP:2420		       push    dx
TRANGROUP:2421		       mov     ah, 0Bh
TRANGROUP:2423
TRANGROUP:2423 loc_4CB3:
TRANGROUP:2423		       xor     bx, bx
TRANGROUP:2425		       int     10h	       ; - VIDEO - SET COLOR PALETTE
TRANGROUP:2425					       ; BH = 00h, BL =	border color
TRANGROUP:2425					       ; BH = 01h, BL =	palette	(0-3)
TRANGROUP:2427		       pop     dx
TRANGROUP:2428		       xor     ax, ax
TRANGROUP:242A		       mov     cx, ax
TRANGROUP:242C		       mov     ah, 6
TRANGROUP:242E		       mov     bh, 7
TRANGROUP:2430		       xor     bl, bl
TRANGROUP:2432		       int     10h	       ; - VIDEO - SCROLL PAGE UP
TRANGROUP:2432					       ; AL = number of	lines to scroll	window (0 = blank whole	window)
TRANGROUP:2432					       ; BH = attributes to be used on blanked lines
TRANGROUP:2432					       ; CH,CL = row,column of upper left corner of window to scroll
TRANGROUP:2432					       ; DH,DL = row,column of lower right corner of window
TRANGROUP:2434		       mov     ah, 0Fh
TRANGROUP:2436		       int     10h	       ; - VIDEO - GET CURRENT VIDEO MODE
TRANGROUP:2436					       ; Return: AH = number of	columns	on screen
TRANGROUP:2436					       ; AL = current video mode
TRANGROUP:2436					       ; BH = current active display page
TRANGROUP:2438		       mov     ah, 2
TRANGROUP:243A		       xor     dx, dx
TRANGROUP:243C		       int     10h	       ; - VIDEO - SET CURSOR POSITION
TRANGROUP:243C					       ; DH,DL = row, column (0,0 = upper left)
TRANGROUP:243C					       ; BH = page number
TRANGROUP:243E		       retn
TRANGROUP:243E endp	       reg_cls
TRANGROUP:243E
TRANGROUP:243F
TRANGROUP:243F ; =============== S U B R O U T I N E =======================================
TRANGROUP:243F
TRANGROUP:243F
TRANGROUP:243F proc	       ansi_cls	near	       ; ...
TRANGROUP:243F		       mov     si, offset CLSSTRING
TRANGROUP:2442		       lodsb
TRANGROUP:2443		       mov     cl, al
TRANGROUP:2445		       xor     ch, ch
TRANGROUP:2447		       mov     ah, 6
TRANGROUP:2449
TRANGROUP:2449 clrloop:				       ; ...
TRANGROUP:2449		       lodsb
TRANGROUP:244A		       mov     dl, al
TRANGROUP:244C		       int     21h	       ; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
TRANGROUP:244C					       ; DL = character	<> FFh
TRANGROUP:244C					       ;  Return: ZF set = no character
TRANGROUP:244C					       ;   ZF clear = character	recieved, AL = character
TRANGROUP:244E		       loop    clrloop
TRANGROUP:2450		       retn
TRANGROUP:2450 endp	       ansi_cls
TRANGROUP:2450
TRANGROUP:2451
TRANGROUP:2451 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2451
TRANGROUP:2451
TRANGROUP:2451 proc	       CTTY far		       ; ...
TRANGROUP:2451		       push    ds
TRANGROUP:2452		       pop     es
TRANGROUP:2453		       assume es:nothing
TRANGROUP:2453		       mov     si, 81h
TRANGROUP:2456		       mov     di, offset PARSE_CTTY
TRANGROUP:2459		       xor     cx, cx
TRANGROUP:245B		       xor     dx, dx
TRANGROUP:245D		       call    cmd_parse
TRANGROUP:2460		       cmp     ax, 0FFFFh
TRANGROUP:2463		       jz      short ctty_error
TRANGROUP:2465		       cmp     ax, 0
TRANGROUP:2468		       jnz     short ctty_error
TRANGROUP:246A		       push    si
TRANGROUP:246B		       lds     si, [ds:PARSE1_ADDR]
TRANGROUP:246F		       mov     di, offset SrcBuf
TRANGROUP:2472
TRANGROUP:2472 ctty_move_filename:		       ; ...
TRANGROUP:2472		       lodsb
TRANGROUP:2473		       stosb
TRANGROUP:2474		       cmp     al, 0
TRANGROUP:2476		       jnz     short ctty_move_filename
TRANGROUP:2478		       pop     si
TRANGROUP:2479		       mov     di, offset PARSE_CTTY
TRANGROUP:247C		       call    parse_check_eol
TRANGROUP:247F		       jz      short nocolon
TRANGROUP:2481
TRANGROUP:2481 ctty_error:			       ; ...
TRANGROUP:2481		       jmp     short isbaddev
TRANGROUP:2483 ; ---------------------------------------------------------------------------
TRANGROUP:2483
TRANGROUP:2483 nocolon:				       ; ...
TRANGROUP:2483		       mov     dx, offset SrcBuf
TRANGROUP:2486		       mov     ax, 3D02h
TRANGROUP:2489		       int     21h	       ; DOS - 2+ - OPEN DISK FILE WITH	HANDLE
TRANGROUP:2489					       ; DS:DX -> ASCIZ	filename
TRANGROUP:2489					       ; AL = access mode
TRANGROUP:2489					       ; 2 - read & write
TRANGROUP:248B		       jb      short isbaddev
TRANGROUP:248D		       mov     bx, ax
TRANGROUP:248F		       mov     ax, 4400h
TRANGROUP:2492		       int     21h	       ; DOS - 2+ - IOCTL - GET	DEVICE INFORMATION
TRANGROUP:2492					       ; BX = file or device handle
TRANGROUP:2494		       test    dl, 80h
TRANGROUP:2497		       jnz     short devisok
TRANGROUP:2499
TRANGROUP:2499 closedev:			       ; ...
TRANGROUP:2499		       mov     ah, 3Eh
TRANGROUP:249B		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:249B					       ; BX = file handle
TRANGROUP:249D
TRANGROUP:249D isbaddev:			       ; ...
TRANGROUP:249D		       mov     dx, offset BADDEV_PTR
TRANGROUP:24A0		       call    std_printf
TRANGROUP:24A3		       jmp     short resret
TRANGROUP:24A5 ; ---------------------------------------------------------------------------
TRANGROUP:24A5
TRANGROUP:24A5 devisok:				       ; ...
TRANGROUP:24A5		       push    dx
TRANGROUP:24A6		       mov     ax, [ds:acrlf_ptr]
TRANGROUP:24A9		       mov     dh, 0FFh	       ; -1
TRANGROUP:24AB		       push    bx
TRANGROUP:24AC		       call    TSYSGETMSG
TRANGROUP:24AF		       mov     dx, si
TRANGROUP:24B1		       mov     ax, 4000h       ; (Write	shl 8)
TRANGROUP:24B4		       mov     cx, 2
TRANGROUP:24B7		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:24B7					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:24B9		       pop     bx
TRANGROUP:24BA		       pop     dx
TRANGROUP:24BB		       jb      short closedev
TRANGROUP:24BD		       xor     dh, dh
TRANGROUP:24BF		       or      dl, 3
TRANGROUP:24C2		       mov     ax, 4401h       ; (IOCTL	SHL 8) OR 1
TRANGROUP:24C5		       int     21h	       ; DOS - 2+ - IOCTL - SET	DEVICE INFORMATION
TRANGROUP:24C5					       ; BX = device handle, DH	= 0
TRANGROUP:24C5					       ; DL = device information to set	(bits 0-7 from function	0)
TRANGROUP:24C7		       push    bx
TRANGROUP:24C8		       mov     cx, 3
TRANGROUP:24CB		       xor     bx, bx
TRANGROUP:24CD
TRANGROUP:24CD iclloop:				       ; ...
TRANGROUP:24CD		       mov     ah, 3Eh
TRANGROUP:24CF		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:24CF					       ; BX = file handle
TRANGROUP:24D1		       inc     bx
TRANGROUP:24D2		       loop    iclloop
TRANGROUP:24D4		       pop     bx
TRANGROUP:24D5		       mov     ah, 45h	       ; XDUP
TRANGROUP:24D7		       int     21h	       ; DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)
TRANGROUP:24D7					       ; BX = file handle to duplicate
TRANGROUP:24D9		       mov     ah, 45h
TRANGROUP:24DB		       int     21h	       ; DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)
TRANGROUP:24DB					       ; BX = file handle to duplicate
TRANGROUP:24DD		       mov     ah, 45h
TRANGROUP:24DF		       int     21h	       ; DOS - 2+ - CREATE DUPLICATE HANDLE (DUP)
TRANGROUP:24DF					       ; BX = file handle to duplicate
TRANGROUP:24E1		       mov     ah, 3Eh	       ; CLOSE
TRANGROUP:24E3		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:24E3					       ; BX = file handle
TRANGROUP:24E5
TRANGROUP:24E5 resret:				       ; ...
TRANGROUP:24E5		       mov     ds, [ds:RESSEG]
TRANGROUP:24E9		       push    ds
TRANGROUP:24EA		       mov     ax, [ds:18h]    ; [PDB.JFN_TABLE]
TRANGROUP:24ED		       mov     [ds:Io_Save], ax
TRANGROUP:24F0		       mov     ax, offset TrnLodCom1_Trap
TRANGROUP:24F3		       push    ax
TRANGROUP:24F4		       retf
TRANGROUP:24F4 endp	       CTTY
TRANGROUP:24F4
TRANGROUP:24F5 ; ---------------------------------------------------------------------------
TRANGROUP:24F5
TRANGROUP:24F5 CHCP:				       ; ...
TRANGROUP:24F5		       push    ds
TRANGROUP:24F6		       pop     es
TRANGROUP:24F7		       mov     si, 81h
TRANGROUP:24FA		       mov     di, offset PARSE_CHCP
TRANGROUP:24FD		       xor     cx, cx
TRANGROUP:24FF		       xor     dx, dx
TRANGROUP:2501		       call    Parse_With_Msg
TRANGROUP:2504		       cmp     ax, 0FFFFh
TRANGROUP:2507		       jz      short getcp
TRANGROUP:2509		       cmp     ax, 0
TRANGROUP:250C		       jnz     short cp_error
TRANGROUP:250E		       push    cx
TRANGROUP:250F		       mov     bx, offset PARSE1_ADDR
TRANGROUP:2512		       mov     cx, [bx]
TRANGROUP:2514		       mov     [ds:system_cpage], cx
TRANGROUP:2518		       pop     cx
TRANGROUP:2519		       mov     di, offset PARSE_CHCP
TRANGROUP:251C		       call    parse_check_eol
TRANGROUP:251F		       jnz     short cp_error
TRANGROUP:2521		       mov     ah, 14h	       ; NLSFUNC
TRANGROUP:2523		       mov     al, 0
TRANGROUP:2525		       int     2Fh	       ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
TRANGROUP:2525					       ; Return: AL = 00h not installed, OK to install
TRANGROUP:2525					       ; 01h not installed, not	OK
TRANGROUP:2525					       ; FFh installed
TRANGROUP:2527		       cmp     al, 0FFh
TRANGROUP:2529		       jz      short got_NLS
TRANGROUP:252B		       mov     dx, offset NLSFUNC_PTR
TRANGROUP:252E		       jmp     short cp_error
TRANGROUP:2530 ; ---------------------------------------------------------------------------
TRANGROUP:2530
TRANGROUP:2530 got_NLS:				       ; ...
TRANGROUP:2530		       mov     bx, [ds:system_cpage]
TRANGROUP:2534		       mov     ah, 66h
TRANGROUP:2536		       mov     al, 2
TRANGROUP:2538		       int     21h	       ; DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE
TRANGROUP:2538					       ; BX = active code page
TRANGROUP:2538					       ; DX = system code page (active page at boot time)
TRANGROUP:253A		       jnb     short chcp_return
TRANGROUP:253C		       cmp     ax, 2	       ; ERROR_FILE_NOT_FOUND
TRANGROUP:253F		       jnz     short chcp_other_error
TRANGROUP:2541		       mov     ah, 59h
TRANGROUP:2543		       xor     bx, bx
TRANGROUP:2545		       int     21h	       ; DOS - 3+ - GET	EXTENDED ERROR CODE
TRANGROUP:2545					       ; BX = version code (0000h for DOS 3.x)
TRANGROUP:2547		       cmp     ax, 0Dh	       ; ERROR_INVALID_DATA
TRANGROUP:254A		       jnz     short no_countrysys
TRANGROUP:254C		       mov     dx, offset INV_CODE_PAGE
TRANGROUP:254F		       jmp     short cp_error
TRANGROUP:2551 ; ---------------------------------------------------------------------------
TRANGROUP:2551
TRANGROUP:2551 no_countrysys:			       ; ...
TRANGROUP:2551		       mov     dx, offset NoCntry_Ptr
TRANGROUP:2554		       jmp     short cp_error
TRANGROUP:2556 ; ---------------------------------------------------------------------------
TRANGROUP:2556
TRANGROUP:2556 chcp_other_error:		       ; ...
TRANGROUP:2556		       mov     ah, 59h
TRANGROUP:2558		       xor     bx, bx
TRANGROUP:255A		       int     21h	       ; DOS - 3+ - GET	EXTENDED ERROR CODE
TRANGROUP:255A					       ; BX = version code (0000h for DOS 3.x)
TRANGROUP:255C		       cmp     ax, 65	       ; was it	access denied?
TRANGROUP:255F		       jnz     short none_set  ; no - assume all failed
TRANGROUP:2561		       mov     dx, offset cp_not_all_ptr
TRANGROUP:2564		       jmp     short cp_error
TRANGROUP:2566 ; ---------------------------------------------------------------------------
TRANGROUP:2566
TRANGROUP:2566 none_set:			       ; ...
TRANGROUP:2566		       mov     dx, offset cp_not_set_ptr
TRANGROUP:2569
TRANGROUP:2569 cp_error:			       ; ...
TRANGROUP:2569		       jmp     cerror
TRANGROUP:256C ; ---------------------------------------------------------------------------
TRANGROUP:256C
TRANGROUP:256C getcp:				       ; ...
TRANGROUP:256C		       mov     ah, 66h
TRANGROUP:256E		       mov     al, 1
TRANGROUP:2570		       int     21h	       ; DOS - 3.3+ - GET GLOBAL CODE PAGE TABLE
TRANGROUP:2572		       mov     [ds:system_cpage], bx
TRANGROUP:2576		       mov     dx, offset cp_active_ptr
TRANGROUP:2579		       call    std_printf
TRANGROUP:257C
TRANGROUP:257C chcp_return:			       ; ...
TRANGROUP:257C		       retn
TRANGROUP:257D ; ---------------------------------------------------------------------------
TRANGROUP:257D
TRANGROUP:257D TRUENAME:			       ; ...
TRANGROUP:257D		       push    ds
TRANGROUP:257E		       pop     es
TRANGROUP:257F		       mov     si, 81h
TRANGROUP:2582		       mov     di, offset PARSE_CHDIR
TRANGROUP:2585		       xor     cx, cx
TRANGROUP:2587		       xor     dx, dx
TRANGROUP:2589		       call    Parse_With_Msg
TRANGROUP:258C		       mov     di, offset SRCXNAME
TRANGROUP:258F		       cmp     ax, 0FFFFh
TRANGROUP:2592		       jz      short tn_eol
TRANGROUP:2594		       cmp     ax, 0
TRANGROUP:2597		       jnz     short tn_parse_error
TRANGROUP:2599		       cmp     [ds:PARSE1_OUTPUT], 6 ; byte [PARSE1_TYPE],result_drive
TRANGROUP:259E		       jz      short tn_drive
TRANGROUP:25A0		       jmp     short tn_filespec
TRANGROUP:25A2 ; ---------------------------------------------------------------------------
TRANGROUP:25A2
TRANGROUP:25A2 tn_eol:				       ; ...
TRANGROUP:25A2		       mov     ah, 0	       ; END_OF_LINE_OUT
TRANGROUP:25A4		       mov     al, 2Eh ; '.'
TRANGROUP:25A6		       stosw
TRANGROUP:25A7		       jmp     short tn_doit
TRANGROUP:25A9 ; ---------------------------------------------------------------------------
TRANGROUP:25A9
TRANGROUP:25A9 tn_drive:			       ; ...
TRANGROUP:25A9		       push    si
TRANGROUP:25AA		       mov     si, offset PARSE1_ADDR
TRANGROUP:25AD		       lodsb
TRANGROUP:25AE		       add     al, 40h ; '@'   ; "A"-1
TRANGROUP:25B0		       stosb
TRANGROUP:25B1		       mov     ax, 2E3Ah       ; ':.' (NASM syntax)
TRANGROUP:25B4		       stosw
TRANGROUP:25B5		       mov     al, 0	       ; END_OF_LINE_OUT
TRANGROUP:25B7		       stosb
TRANGROUP:25B8		       pop     si
TRANGROUP:25B9		       jmp     short tn_check_eol
TRANGROUP:25BB ; ---------------------------------------------------------------------------
TRANGROUP:25BB
TRANGROUP:25BB tn_filespec:			       ; ...
TRANGROUP:25BB		       push    si
TRANGROUP:25BC		       lds     si, [ds:PARSE1_ADDR]
TRANGROUP:25C0
TRANGROUP:25C0 tn_move_filename:		       ; ...
TRANGROUP:25C0		       lodsb
TRANGROUP:25C1		       stosb
TRANGROUP:25C2		       cmp     al, 0
TRANGROUP:25C4		       jnz     short tn_move_filename
TRANGROUP:25C6		       pop     si
TRANGROUP:25C7
TRANGROUP:25C7 tn_check_eol:			       ; ...
TRANGROUP:25C7		       mov     di, offset PARSE_CHDIR
TRANGROUP:25CA		       call    parse_check_eol
TRANGROUP:25CD		       jz      short tn_doit
TRANGROUP:25CF
TRANGROUP:25CF tn_parse_error:			       ; ...
TRANGROUP:25CF		       jmp     cerror
TRANGROUP:25D2 ; ---------------------------------------------------------------------------
TRANGROUP:25D2
TRANGROUP:25D2 tn_doit:				       ; ...
TRANGROUP:25D2		       mov     si, offset SRCXNAME
TRANGROUP:25D5		       mov     di, offset COMBUF
TRANGROUP:25D8		       mov     ax, 6000h       ; ax = (xNameTrans<<8)
TRANGROUP:25DB		       int     21h	       ; DOS - RESOLVE PATH STRING TO CANONICAL	PATH STRING
TRANGROUP:25DB					       ; DS:SI -> ASCIZ	relative path string or	directory name
TRANGROUP:25DB					       ; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
TRANGROUP:25DD		       jnb     short tn_print_xname
TRANGROUP:25DF		       call    Set_Ext_Error_Msg
TRANGROUP:25E2		       mov     [ds:string_ptr_2], offset SRCXNAME
TRANGROUP:25E8		       mov     [ds:extend_buf_sub], 1 ;	one_subst
TRANGROUP:25ED		       jmp     cerror
TRANGROUP:25F0 ; ---------------------------------------------------------------------------
TRANGROUP:25F0
TRANGROUP:25F0 tn_print_xname:			       ; ...
TRANGROUP:25F0		       mov     [ds:string_ptr_2], offset COMBUF
TRANGROUP:25F6		       mov     dx, offset string_buf_ptr
TRANGROUP:25F9		       call    CRLF2
TRANGROUP:25FC		       call    Printf_Crlf
TRANGROUP:25FF		       retn
TRANGROUP:2600 ; ---------------------------------------------------------------------------
TRANGROUP:2600 ; START OF FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:2600
TRANGROUP:2600 _$EXIT:				       ; ...
TRANGROUP:2600		       push    ds
TRANGROUP:2601		       mov     ds, [ds:RESSEG]
TRANGROUP:2605		       cmp     [ds:PermCom], 0 ; byte ;	is this	a permanent COMMAND?
TRANGROUP:260A		       jz      short free_com  ; no - free everything
TRANGROUP:260C		       cmp     [ds:SingleCom], 0FFFFh ;	-1
TRANGROUP:2611		       jz      short free_com  ; exit singlecom
TRANGROUP:2613		       jmp     TCOMMAND	       ; permanent command, recycle
TRANGROUP:2616 ; ---------------------------------------------------------------------------
TRANGROUP:2616
TRANGROUP:2616 free_com:			       ; ...
TRANGROUP:2616		       pop     ds
TRANGROUP:2617		       call    RestUDir1
TRANGROUP:261A		       mov     es, [ds:RESSEG]
TRANGROUP:261E		       mov     ax, [es:Parent]
TRANGROUP:2622		       mov     [es:16h], ax    ; [es:PDB.PARENT_PID]
TRANGROUP:2626		       mov     ax, [word ptr es:OldTerm]
TRANGROUP:262A		       mov     [es:0Ah], ax    ; [es:PDB.EXIT]
TRANGROUP:262E		       mov     ax, [word ptr es:OldTerm+2]
TRANGROUP:2632		       mov     [es:0Ch], ax    ; [es:PDB.EXIT+2]
TRANGROUP:2636		       push    es
TRANGROUP:2637		       mov     es, [ds:TRAN_TPA]
TRANGROUP:263B		       mov     ah, 49h	       ; DEALLOC
TRANGROUP:263D		       int     21h	       ; DOS - 2+ - FREE MEMORY
TRANGROUP:263D					       ; ES = segment address of area to be freed
TRANGROUP:263F		       pop     es
TRANGROUP:2640		       mov     ah, 4Ch	       ; Exit
TRANGROUP:2642		       mov     al, [byte ptr es:RetCode]
TRANGROUP:2646		       int     21h	       ; DOS - 2+ - QUIT WITH EXIT CODE	(EXIT)
TRANGROUP:2646 ; END OF	FUNCTION CHUNK FOR PROMPTBAT   ; AL = exit code
TRANGROUP:2648
TRANGROUP:2648 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2648
TRANGROUP:2648
TRANGROUP:2648 proc	       parse_check_eol near    ; ...
TRANGROUP:2648		       xor     dx, dx
TRANGROUP:264A		       mov     [ds:parse_last],	si
TRANGROUP:264E		       call    cmd_parse
TRANGROUP:2651		       cmp     al, 0FFh
TRANGROUP:2653		       jz      short parse_good_eol
TRANGROUP:2655		       cmp     ax, 0
TRANGROUP:2658		       jnz     short ok_to_setup_pmsg
TRANGROUP:265A		       inc     ax
TRANGROUP:265B
TRANGROUP:265B ok_to_setup_pmsg:		       ; ...
TRANGROUP:265B		       call    setup_parse_error_msg
TRANGROUP:265E
TRANGROUP:265E parse_good_eol:			       ; ...
TRANGROUP:265E		       retn
TRANGROUP:265E endp	       parse_check_eol
TRANGROUP:265E
TRANGROUP:265F
TRANGROUP:265F ; =============== S U B R O U T I N E =======================================
TRANGROUP:265F
TRANGROUP:265F
TRANGROUP:265F proc	       Parse_With_Msg near     ; ...
TRANGROUP:265F		       mov     [ds:parse_last],	si
TRANGROUP:2663		       call    cmd_parse
TRANGROUP:2666		       cmp     al, 0FFh
TRANGROUP:2668		       jz      short parse_msg_good
TRANGROUP:266A		       cmp     ax, 0
TRANGROUP:266D		       jz      short parse_msg_good
TRANGROUP:266F		       call    setup_parse_error_msg
TRANGROUP:2672
TRANGROUP:2672 parse_msg_good:			       ; ...
TRANGROUP:2672		       retn
TRANGROUP:2672 endp	       Parse_With_Msg
TRANGROUP:2672
TRANGROUP:2673
TRANGROUP:2673 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2673
TRANGROUP:2673
TRANGROUP:2673 proc	       setup_parse_error_msg near ; ...
TRANGROUP:2673		       mov     [ds:msg_disp_class], 2 ;	parse_msg_class
TRANGROUP:2678		       mov     dx, offset extend_buf_ptr
TRANGROUP:267B		       mov     [byte ptr si], 0	; END_OF_LINE_OUT
TRANGROUP:267E		       mov     [ds:extend_buf_ptr], ax
TRANGROUP:2681		       cmp     ax, 2	       ; LessArgs_Ptr
TRANGROUP:2684		       jz      short setup_parse_msg_ret
TRANGROUP:2686		       mov     si, [ds:parse_last]
TRANGROUP:268A		       mov     [ds:string_ptr_2], si
TRANGROUP:268E		       mov     [ds:extend_buf_sub], 1 ;	one_subst
TRANGROUP:2693
TRANGROUP:2693 setup_parse_msg_ret:		       ; ...
TRANGROUP:2693		       inc     si
TRANGROUP:2694		       retn
TRANGROUP:2694 endp	       setup_parse_error_msg
TRANGROUP:2694
TRANGROUP:2695 ; ---------------------------------------------------------------------------
TRANGROUP:2695
TRANGROUP:2695 ADD_PROMPT:			       ; ...
TRANGROUP:2695		       call    delete_prompt
TRANGROUP:2698		       call    scan_double_null
TRANGROUP:269B		       push    si
TRANGROUP:269C		       call    GETARG
TRANGROUP:269F		       pop     si
TRANGROUP:26A0		       jnz     short ADD_PROMPT3
TRANGROUP:26A2
TRANGROUP:26A2 ADD_PROMPT_RETN:			       ; ...
TRANGROUP:26A2		       retn
TRANGROUP:26A3 ; ---------------------------------------------------------------------------
TRANGROUP:26A3
TRANGROUP:26A3 ADD_PROMPT3:			       ; ...
TRANGROUP:26A3		       call    move_name
TRANGROUP:26A6		       call    GETARG
TRANGROUP:26A9		       push    si
TRANGROUP:26AA		       jmp     short ADD_NAME
TRANGROUP:26AC ; ---------------------------------------------------------------------------
TRANGROUP:26AC
TRANGROUP:26AC DISP_ENVJ:			       ; ...
TRANGROUP:26AC		       jmp     DISP_ENV
TRANGROUP:26AF ; ---------------------------------------------------------------------------
TRANGROUP:26AF
TRANGROUP:26AF ADD_NAME_TO_ENVIRONMENT:		       ; ...
TRANGROUP:26AF		       call    GETARG
TRANGROUP:26B2		       jz      short DISP_ENVJ
TRANGROUP:26B4		       xor     bx, bx
TRANGROUP:26B6		       push    si
TRANGROUP:26B7
TRANGROUP:26B7 EQLP:				       ; ...
TRANGROUP:26B7		       lodsb
TRANGROUP:26B8		       cmp     al, 0Dh
TRANGROUP:26BA		       jz      short QUEQ
TRANGROUP:26BC		       cmp     al, 3Dh ; '='
TRANGROUP:26BE		       jnz     short EQLP
TRANGROUP:26C0		       inc     bl
TRANGROUP:26C2		       cmp     [byte ptr si], 0Dh
TRANGROUP:26C5		       jnz     short EQLP
TRANGROUP:26C7		       inc     bh
TRANGROUP:26C9		       jmp     short EQLP
TRANGROUP:26CB ; ---------------------------------------------------------------------------
TRANGROUP:26CB
TRANGROUP:26CB QUEQ:				       ; ...
TRANGROUP:26CB		       pop     si
TRANGROUP:26CC		       dec     bl
TRANGROUP:26CE		       jz      short ONEQ
TRANGROUP:26D0		       mov     dx, offset SYNTMES_PTR
TRANGROUP:26D3		       jmp     cerror
TRANGROUP:26D6 ; ---------------------------------------------------------------------------
TRANGROUP:26D6
TRANGROUP:26D6 ONEQ:				       ; ...
TRANGROUP:26D6		       push    bx
TRANGROUP:26D7		       call    delete_name_in_environment
TRANGROUP:26DA		       pop     bx
TRANGROUP:26DB		       dec     bh
TRANGROUP:26DD		       jz      short ADD_PROMPT_RETN
TRANGROUP:26DF		       call    scan_double_null
TRANGROUP:26E2		       mov     bx, di
TRANGROUP:26E4		       call    move_name
TRANGROUP:26E7		       push    si
TRANGROUP:26E8		       xchg    bx, di
TRANGROUP:26EA		       mov     [ds:comspec_flag], 0 ; byte
TRANGROUP:26EF		       mov     si, offset COMSPECSTR ; "COMSPEC="
TRANGROUP:26F2		       mov     cx, 4
TRANGROUP:26F5		       repe cmpsw
TRANGROUP:26F7		       jnz     short NOT_COMSPEC
TRANGROUP:26F9		       inc     [ds:comspec_flag] ; byte
TRANGROUP:26FD
TRANGROUP:26FD NOT_COMSPEC:			       ; ...
TRANGROUP:26FD		       mov     di, bx
TRANGROUP:26FF
TRANGROUP:26FF ADD_NAME:			       ; ...
TRANGROUP:26FF		       pop     si
TRANGROUP:2700		       push    si
TRANGROUP:2701
TRANGROUP:2701 ADD_NAME1:			       ; ...
TRANGROUP:2701		       lodsb
TRANGROUP:2702		       cmp     al, 0Dh	       ; 13
TRANGROUP:2704		       jz      short ADD_NAME_RET
TRANGROUP:2706		       call    store_char
TRANGROUP:2709		       jmp     short ADD_NAME1
TRANGROUP:270B ; ---------------------------------------------------------------------------
TRANGROUP:270B
TRANGROUP:270B ADD_NAME_RET:			       ; ...
TRANGROUP:270B		       pop     si
TRANGROUP:270C		       cmp     [ds:comspec_flag], 0 ; byte
TRANGROUP:2711
TRANGROUP:2711 ADD_NAME_JZ_RET:			       ; ...
TRANGROUP:2711		       jz      short ADD_PROMPT_RETN
TRANGROUP:2713		       call    scanoff
TRANGROUP:2716		       mov     es, [ds:RESSEG]
TRANGROUP:271A		       mov     di, offset ComSpec
TRANGROUP:271D		       mov     bx, di
TRANGROUP:271F		       xor     ax, ax
TRANGROUP:2721		       mov     [es:ComDrv], al
TRANGROUP:2725		       push    ax
TRANGROUP:2726		       mov     al, [si]
TRANGROUP:2728		       call    testkanj
TRANGROUP:272B		       pop     ax
TRANGROUP:272C		       jnz     short _GOTDRIVE
TRANGROUP:272E		       cmp     [byte ptr si+1],	':'
TRANGROUP:2732		       jnz     short _GOTDRIVE
TRANGROUP:2734		       mov     al, [si]
TRANGROUP:2736		       call    UPCONV
TRANGROUP:2739		       sub     al, 'A'
TRANGROUP:273B		       add     di, 2
TRANGROUP:273E		       inc     al
TRANGROUP:2740		       mov     [es:ComDrv], al
TRANGROUP:2744		       add     al, 40h ; '@'   ; 'A'-1
TRANGROUP:2746
TRANGROUP:2746 _GOTDRIVE:			       ; ...
TRANGROUP:2746		       mov     [es:PutBackComSpec], di
TRANGROUP:274B		       mov     [es:PutBackDrv],	al
TRANGROUP:274F		       mov     di, bx
TRANGROUP:2751
TRANGROUP:2751 COPY_COMSPEC:			       ; ...
TRANGROUP:2751		       lodsb
TRANGROUP:2752		       call    DELIM
TRANGROUP:2755		       jz      short COPYDONE
TRANGROUP:2757		       cmp     al, 0Dh	       ; 13
TRANGROUP:2759		       jz      short COPYDONE
TRANGROUP:275B		       stosb
TRANGROUP:275C		       jmp     short COPY_COMSPEC
TRANGROUP:275E ; ---------------------------------------------------------------------------
TRANGROUP:275E
TRANGROUP:275E COPYDONE:			       ; ...
TRANGROUP:275E		       xor     al, al
TRANGROUP:2760		       stosb
TRANGROUP:2761		       mov     [ds:comspec_flag], 0 ; byte
TRANGROUP:2766		       dec     di
TRANGROUP:2767		       mov     [es:ComSpec_End], di
TRANGROUP:276C		       retn
TRANGROUP:276D ; ---------------------------------------------------------------------------
TRANGROUP:276D
TRANGROUP:276D DISP_ENV:			       ; ...
TRANGROUP:276D		       mov     ds, [ds:RESSEG]
TRANGROUP:2771		       mov     ds, [ds:EnvirSeg]
TRANGROUP:2775		       xor     si, si
TRANGROUP:2777
TRANGROUP:2777 PENVLP:				       ; ...
TRANGROUP:2777		       cmp     [byte ptr si], 0
TRANGROUP:277A		       jz      short ADD_NAME_JZ_RET
TRANGROUP:277C		       mov     di, offset TPBUF	; Arg_Buf
TRANGROUP:277F
TRANGROUP:277F PENVLP2:				       ; ...
TRANGROUP:277F		       lodsb
TRANGROUP:2780		       stosb
TRANGROUP:2781		       or      al, al
TRANGROUP:2783		       jnz     short PENVLP2
TRANGROUP:2785		       mov     dx, offset arg_buf_ptr
TRANGROUP:2788		       push    ds
TRANGROUP:2789		       push    es
TRANGROUP:278A		       pop     ds
TRANGROUP:278B		       call    Printf_Crlf
TRANGROUP:278E		       pop     ds
TRANGROUP:278F		       jmp     short PENVLP
TRANGROUP:2791
TRANGROUP:2791 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2791
TRANGROUP:2791
TRANGROUP:2791 proc	       delete_path near	       ; ...
TRANGROUP:2791		       mov     si, offset PATH_TEXT ; "PATH="
TRANGROUP:2794		       jmp     short delete_name_in_environment
TRANGROUP:2796 ; ---------------------------------------------------------------------------
TRANGROUP:2796
TRANGROUP:2796 delete_prompt:			       ; ...
TRANGROUP:2796		       mov     si, offset PROMPT_TEXT ;	"PROMPT="
TRANGROUP:2799
TRANGROUP:2799 delete_name_in_environment:	       ; ...
TRANGROUP:2799		       push    si
TRANGROUP:279A		       push    ds
TRANGROUP:279B		       call    FIND
TRANGROUP:279E		       jb      short del1
TRANGROUP:27A0		       mov     si, di
TRANGROUP:27A2		       call    SCASB2
TRANGROUP:27A5		       xchg    si, di
TRANGROUP:27A7		       cmp     [byte ptr es:si], 0
TRANGROUP:27AB		       jnz     short not_dnull
TRANGROUP:27AD		       dec     si
TRANGROUP:27AE
TRANGROUP:27AE not_dnull:			       ; ...
TRANGROUP:27AE		       call    GETENVSIZ
TRANGROUP:27B1		       sub     cx, si
TRANGROUP:27B3		       push    es
TRANGROUP:27B4		       pop     ds
TRANGROUP:27B5		       rep movsb
TRANGROUP:27B7
TRANGROUP:27B7 del1:				       ; ...
TRANGROUP:27B7		       pop     ds
TRANGROUP:27B8		       pop     si
TRANGROUP:27B8 endp	       delete_path
TRANGROUP:27B8
TRANGROUP:27B9
TRANGROUP:27B9 find_retn:			       ; ...
TRANGROUP:27B9		       retn
TRANGROUP:27BA
TRANGROUP:27BA ; =============== S U B R O U T I N E =======================================
TRANGROUP:27BA
TRANGROUP:27BA
TRANGROUP:27BA proc	       find_path near	       ; ...
TRANGROUP:27BA		       mov     si, offset PATH_TEXT ; "PATH="
TRANGROUP:27BD		       jmp     short find_name_in_environment
TRANGROUP:27BD endp	       find_path
TRANGROUP:27BD
TRANGROUP:27BF
TRANGROUP:27BF ; =============== S U B R O U T I N E =======================================
TRANGROUP:27BF
TRANGROUP:27BF
TRANGROUP:27BF proc	       find_prompt near	       ; ...
TRANGROUP:27BF		       mov     si, offset PROMPT_TEXT ;	"PROMPT="
TRANGROUP:27BF endp	       find_prompt
TRANGROUP:27BF
TRANGROUP:27C2
TRANGROUP:27C2 ; =============== S U B R O U T I N E =======================================
TRANGROUP:27C2
TRANGROUP:27C2
TRANGROUP:27C2 proc	       find_name_in_environment	near ; ...
TRANGROUP:27C2		       call    FIND
TRANGROUP:27C5		       jb      short find_retn
TRANGROUP:27C7		       jmp     SCASB1
TRANGROUP:27C7 endp	       find_name_in_environment
TRANGROUP:27C7
TRANGROUP:27CA
TRANGROUP:27CA ; =============== S U B R O U T I N E =======================================
TRANGROUP:27CA
TRANGROUP:27CA
TRANGROUP:27CA proc	       FIND near	       ; ...
TRANGROUP:27CA		       cld
TRANGROUP:27CB		       call    COUNT0
TRANGROUP:27CE		       mov     es, [ds:RESSEG]
TRANGROUP:27D2		       mov     es, [es:EnvirSeg]
TRANGROUP:27D7		       xor     di, di
TRANGROUP:27D9
TRANGROUP:27D9 find1:				       ; ...
TRANGROUP:27D9		       push    cx
TRANGROUP:27DA		       push    si
TRANGROUP:27DB		       push    di
TRANGROUP:27DC
TRANGROUP:27DC find11:				       ; ...
TRANGROUP:27DC		       lodsb
TRANGROUP:27DD		       call    testkanj
TRANGROUP:27E0		       jz      short notkanj3
TRANGROUP:27E2		       dec     si
TRANGROUP:27E3		       lodsw
TRANGROUP:27E4		       inc     di
TRANGROUP:27E5		       inc     di
TRANGROUP:27E6		       cmp     ax, [es:di-2]
TRANGROUP:27EA		       jnz     short find12
TRANGROUP:27EC		       dec     cx
TRANGROUP:27ED		       loop    find11
TRANGROUP:27EF		       jmp     short find12
TRANGROUP:27F1 ; ---------------------------------------------------------------------------
TRANGROUP:27F1
TRANGROUP:27F1 notkanj3:			       ; ...
TRANGROUP:27F1		       call    UPCONV
TRANGROUP:27F4		       inc     di
TRANGROUP:27F5		       cmp     al, [es:di-1]
TRANGROUP:27F9		       jnz     short find12
TRANGROUP:27FB		       loop    find11
TRANGROUP:27FD
TRANGROUP:27FD find12:				       ; ...
TRANGROUP:27FD		       pop     di
TRANGROUP:27FE		       pop     si
TRANGROUP:27FF		       pop     cx
TRANGROUP:2800		       jz      short find_retn
TRANGROUP:2802		       push    cx
TRANGROUP:2803		       call    SCASB2
TRANGROUP:2806		       pop     cx
TRANGROUP:2807		       cmp     [byte ptr es:di], 0
TRANGROUP:280B		       jnz     short find1
TRANGROUP:280D		       stc
TRANGROUP:280E		       retn
TRANGROUP:280E endp	       FIND
TRANGROUP:280E
TRANGROUP:280F
TRANGROUP:280F ; =============== S U B R O U T I N E =======================================
TRANGROUP:280F
TRANGROUP:280F
TRANGROUP:280F proc	       COUNT0 near	       ; ...
TRANGROUP:280F		       push    ds
TRANGROUP:2810		       pop     es
TRANGROUP:2811		       mov     di, si
TRANGROUP:2813		       push    di
TRANGROUP:2814		       call    SCASB1
TRANGROUP:2817		       jmp     short COUNTX
TRANGROUP:2819 ; ---------------------------------------------------------------------------
TRANGROUP:2819		       push    di
TRANGROUP:281A		       call    SCASB2
TRANGROUP:281D
TRANGROUP:281D COUNTX:				       ; ...
TRANGROUP:281D		       pop     cx
TRANGROUP:281E		       sub     di, cx
TRANGROUP:2820		       xchg    di, cx
TRANGROUP:2822
TRANGROUP:2822 move_name_retn:			       ; ...
TRANGROUP:2822		       retn
TRANGROUP:2822 endp	       COUNT0
TRANGROUP:2822
TRANGROUP:2823
TRANGROUP:2823 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2823
TRANGROUP:2823
TRANGROUP:2823 proc	       move_name near	       ; ...
TRANGROUP:2823		       cmp     [byte ptr si], 0Dh
TRANGROUP:2826		       jz      short move_name_retn
TRANGROUP:2828		       lodsb
TRANGROUP:2829		       call    testkanj
TRANGROUP:282C		       jz      short notkanj1
TRANGROUP:282E		       call    store_char
TRANGROUP:2831		       lodsb
TRANGROUP:2832		       call    store_char
TRANGROUP:2835		       jmp     short move_name
TRANGROUP:2837 ; ---------------------------------------------------------------------------
TRANGROUP:2837
TRANGROUP:2837 notkanj1:			       ; ...
TRANGROUP:2837		       call    UPCONV
TRANGROUP:283A		       call    store_char
TRANGROUP:283D		       cmp     al, 3Dh ; '='
TRANGROUP:283F		       jnz     short move_name
TRANGROUP:2841
TRANGROUP:2841 getarg_retn:			       ; ...
TRANGROUP:2841		       retn
TRANGROUP:2841 endp	       move_name
TRANGROUP:2841
TRANGROUP:2842
TRANGROUP:2842 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2842
TRANGROUP:2842
TRANGROUP:2842 proc	       GETARG near	       ; ...
TRANGROUP:2842		       mov     si, 80h
TRANGROUP:2845		       lodsb
TRANGROUP:2846		       or      al, al
TRANGROUP:2848		       jz      short getarg_retn
TRANGROUP:284A		       call    scanoff
TRANGROUP:284D		       cmp     al, 0Dh	       ; 13
TRANGROUP:284F
TRANGROUP:284F sdn_retn:			       ; ...
TRANGROUP:284F		       retn
TRANGROUP:284F endp	       GETARG
TRANGROUP:284F
TRANGROUP:2850
TRANGROUP:2850 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2850
TRANGROUP:2850
TRANGROUP:2850 proc	       scan_double_null	near   ; ...
TRANGROUP:2850		       mov     es, [ds:RESSEG]
TRANGROUP:2854		       mov     es, [es:EnvirSeg]
TRANGROUP:2859		       xor     di, di
TRANGROUP:285B
TRANGROUP:285B sdn1:				       ; ...
TRANGROUP:285B		       cmp     [byte ptr es:di], 0
TRANGROUP:285F		       jz      short sdn_retn
TRANGROUP:2861		       call    SCASB2
TRANGROUP:2864		       jmp     short sdn1
TRANGROUP:2864 endp	       scan_double_null
TRANGROUP:2864
TRANGROUP:2866
TRANGROUP:2866 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2866
TRANGROUP:2866
TRANGROUP:2866 proc	       SCASB1 near	       ; ...
TRANGROUP:2866		       mov     al, 3Dh ; '='
TRANGROUP:2868		       jmp     short SCASBX
TRANGROUP:2868 endp	       SCASB1
TRANGROUP:2868
TRANGROUP:286A
TRANGROUP:286A ; =============== S U B R O U T I N E =======================================
TRANGROUP:286A
TRANGROUP:286A
TRANGROUP:286A proc	       SCASB2 near	       ; ...
TRANGROUP:286A		       xor     al, al
TRANGROUP:286C
TRANGROUP:286C SCASBX:				       ; ...
TRANGROUP:286C		       mov     cx, 256
TRANGROUP:286F		       repne scasb
TRANGROUP:2871		       retn
TRANGROUP:2871 endp	       SCASB2
TRANGROUP:2871
TRANGROUP:2872
TRANGROUP:2872 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2872
TRANGROUP:2872
TRANGROUP:2872 proc	       testkanj	near	       ; ...
TRANGROUP:2872		       push    ds
TRANGROUP:2873		       push    si
TRANGROUP:2874		       push    ax
TRANGROUP:2875		       mov     ds, [cs:RESSEG]
TRANGROUP:287A		       assume ds:RESGROUP
TRANGROUP:287A		       lds     si, [Dbcs_Vector_Addr]
TRANGROUP:287E		       assume ds:nothing
TRANGROUP:287E
TRANGROUP:287E ktlop:				       ; ...
TRANGROUP:287E		       cmp     [word ptr si], 0
TRANGROUP:2881		       jz      short notlead
TRANGROUP:2883		       pop     ax
TRANGROUP:2884		       push    ax
TRANGROUP:2885		       cmp     al, [si]
TRANGROUP:2887		       jb      short notlead
TRANGROUP:2889		       inc     si
TRANGROUP:288A		       cmp     al, [si]
TRANGROUP:288C		       jbe     short islead
TRANGROUP:288E		       inc     si
TRANGROUP:288F		       jmp     short ktlop
TRANGROUP:2891 ; ---------------------------------------------------------------------------
TRANGROUP:2891
TRANGROUP:2891 notlead:				       ; ...
TRANGROUP:2891		       xor     ax, ax
TRANGROUP:2893		       jmp     short ktret
TRANGROUP:2895 ; ---------------------------------------------------------------------------
TRANGROUP:2895
TRANGROUP:2895 islead:				       ; ...
TRANGROUP:2895		       xor     ax, ax
TRANGROUP:2897		       inc     ax
TRANGROUP:2898
TRANGROUP:2898 ktret:				       ; ...
TRANGROUP:2898		       pop     ax
TRANGROUP:2899		       pop     si
TRANGROUP:289A		       pop     ds
TRANGROUP:289B		       retn
TRANGROUP:289B endp	       testkanj
TRANGROUP:289B
TRANGROUP:289C
TRANGROUP:289C ; =============== S U B R O U T I N E =======================================
TRANGROUP:289C
TRANGROUP:289C
TRANGROUP:289C proc	       UPCONV near	       ; ...
TRANGROUP:289C		       cmp     al, 80h	       ; see if	char is	> ascii	128
TRANGROUP:289E		       jb      short oth_fucase	; no - upper case math
TRANGROUP:28A0		       sub     al, 80h	       ; only upper 128	chars in table
TRANGROUP:28A2		       push    ds
TRANGROUP:28A3		       push    bx
TRANGROUP:28A4		       mov     ds, [ds:RESSEG]
TRANGROUP:28A8		       lds     bx, [dword ptr ds:FUCase_Addr+1]	; get table address
TRANGROUP:28AC		       add     bx, 2	       ; skip over first word
TRANGROUP:28AF		       xlat
TRANGROUP:28B0		       pop     bx
TRANGROUP:28B1		       pop     ds
TRANGROUP:28B2		       jmp     short upconv_end
TRANGROUP:28B4 ; ---------------------------------------------------------------------------
TRANGROUP:28B4
TRANGROUP:28B4 oth_fucase:			       ; ...
TRANGROUP:28B4		       cmp     al, 61h ; 'a'
TRANGROUP:28B6		       jb      short upconv_end
TRANGROUP:28B8		       cmp     al, 7Ah ; 'z'
TRANGROUP:28BA		       ja      short upconv_end
TRANGROUP:28BC		       sub     al, 20h ; ' '   ; Change lower-case to upper
TRANGROUP:28BE
TRANGROUP:28BE upconv_end:			       ; ...
TRANGROUP:28BE		       retn
TRANGROUP:28BE endp	       UPCONV
TRANGROUP:28BE
TRANGROUP:28BF
TRANGROUP:28BF ; =============== S U B R O U T I N E =======================================
TRANGROUP:28BF
TRANGROUP:28BF
TRANGROUP:28BF proc	       store_char near	       ; ...
TRANGROUP:28BF		       push    cx
TRANGROUP:28C0		       push    bx
TRANGROUP:28C1		       push    es
TRANGROUP:28C2		       push    ds
TRANGROUP:28C3		       mov     ds, [ds:RESSEG]
TRANGROUP:28C7		       mov     es, [ds:EnvirSeg]
TRANGROUP:28CB		       pop     ds
TRANGROUP:28CC		       call    GETENVSIZ
TRANGROUP:28CF		       mov     bx, cx
TRANGROUP:28D1		       sub     bx, 2
TRANGROUP:28D4		       cmp     di, bx
TRANGROUP:28D6		       jb      short store1
TRANGROUP:28D8		       push    ax
TRANGROUP:28D9		       push    cx
TRANGROUP:28DA		       push    bx
TRANGROUP:28DB		       call    FREE_TPA
TRANGROUP:28DE		       pop     bx
TRANGROUP:28DF		       add     bx, 2
TRANGROUP:28E2		       cmp     bx, 8000h
TRANGROUP:28E6		       jb      short envsiz_ok
TRANGROUP:28E8
TRANGROUP:28E8 bad_env_size:			       ; ...
TRANGROUP:28E8		       stc
TRANGROUP:28E9		       jmp     short envnoset
TRANGROUP:28EB ; ---------------------------------------------------------------------------
TRANGROUP:28EB
TRANGROUP:28EB envsiz_ok:			       ; ...
TRANGROUP:28EB		       mov     cl, 4
TRANGROUP:28ED		       shr     bx, cl
TRANGROUP:28EF		       inc     bx
TRANGROUP:28F0		       mov     cx, es
TRANGROUP:28F2		       add     cx, bx
TRANGROUP:28F4		       add     cx, 20h ; ' '
TRANGROUP:28F7		       mov     ax, cs
TRANGROUP:28F9		       cmp     cx, ax
TRANGROUP:28FB		       jnb     short bad_env_size
TRANGROUP:28FD		       mov     ah, 4Ah
TRANGROUP:28FF		       int     21h	       ; DOS - 2+ - ADJUST MEMORY BLOCK	SIZE (SETBLOCK)
TRANGROUP:28FF					       ; ES = segment address of block to change
TRANGROUP:28FF					       ; BX = new size in paragraphs
TRANGROUP:2901
TRANGROUP:2901 envnoset:			       ; ...
TRANGROUP:2901		       pushf
TRANGROUP:2902		       push    es
TRANGROUP:2903		       mov     es, [ds:RESSEG]
TRANGROUP:2907		       call    ALLOC_TPA
TRANGROUP:290A		       pop     es
TRANGROUP:290B		       popf
TRANGROUP:290C		       pop     cx
TRANGROUP:290D		       pop     ax
TRANGROUP:290E		       jnb     short store1
TRANGROUP:2910		       pop     es
TRANGROUP:2911		       mov     dx, offset ENVERR_PTR
TRANGROUP:2914		       jmp     cerror
TRANGROUP:2917 ; ---------------------------------------------------------------------------
TRANGROUP:2917
TRANGROUP:2917 store1:				       ; ...
TRANGROUP:2917		       stosb
TRANGROUP:2918		       mov     [word ptr es:di], 0
TRANGROUP:291D		       pop     es
TRANGROUP:291E		       pop     bx
TRANGROUP:291F		       pop     cx
TRANGROUP:2920		       retn
TRANGROUP:2920 endp	       store_char
TRANGROUP:2920
TRANGROUP:2921
TRANGROUP:2921 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2921
TRANGROUP:2921
TRANGROUP:2921 proc	       GETENVSIZ near	       ; ...
TRANGROUP:2921		       push    es
TRANGROUP:2922		       push    ax
TRANGROUP:2923		       mov     ax, es
TRANGROUP:2925		       dec     ax
TRANGROUP:2926		       mov     es, ax
TRANGROUP:2928		       assume es:nothing
TRANGROUP:2928		       mov     ax, [es:3]      ; [es:ARENA.size]
TRANGROUP:292C		       mov     cl, 4
TRANGROUP:292E		       shl     ax, cl	       ; Convert to bytes
TRANGROUP:2930		       mov     cx, ax
TRANGROUP:2932		       pop     ax
TRANGROUP:2933		       pop     es
TRANGROUP:2934		       assume es:nothing
TRANGROUP:2934
TRANGROUP:2934 getenvsiz_retn:			       ; ...
TRANGROUP:2934		       retn
TRANGROUP:2934 endp	       GETENVSIZ
TRANGROUP:2934
TRANGROUP:2935
TRANGROUP:2935 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2935
TRANGROUP:2935
TRANGROUP:2935 proc	       RestUDir1 near	       ; ...
TRANGROUP:2935		       push    ds
TRANGROUP:2936		       mov     ds, [ds:RESSEG]
TRANGROUP:293A		       cmp     [ds:RestDir], 0 ; byte
TRANGROUP:293F		       pop     ds
TRANGROUP:2940		       jz      short getenvsiz_retn
TRANGROUP:2942
TRANGROUP:2942 RestUDir:			       ; ...
TRANGROUP:2942		       mov     dx, offset USERDIR1
TRANGROUP:2945		       mov     ah, 3Bh
TRANGROUP:2947		       int     21h	       ; DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)
TRANGROUP:2947					       ; DS:DX -> ASCIZ	directory name (may include drive)
TRANGROUP:2949		       xor     al, al	       ; 0
TRANGROUP:294B		       call    SETREST
TRANGROUP:294E		       retn
TRANGROUP:294E endp	       RestUDir1
TRANGROUP:294E
TRANGROUP:294F
TRANGROUP:294F ; =============== S U B R O U T I N E =======================================
TRANGROUP:294F
TRANGROUP:294F
TRANGROUP:294F proc	       _$CHDIR near	       ; ...
TRANGROUP:294F		       mov     si, 81h
TRANGROUP:2952		       mov     di, offset PARSE_CHDIR
TRANGROUP:2955		       xor     cx, cx
TRANGROUP:2957		       xor     dx, dx
TRANGROUP:2959		       call    Parse_With_Msg
TRANGROUP:295C		       cmp     ax, 0FFFFh
TRANGROUP:295F		       jz      short bwdj
TRANGROUP:2961		       cmp     ax, 0
TRANGROUP:2964		       jnz     short ChDirErr
TRANGROUP:2966		       cmp     [ds:PARSE1_OUTPUT], 6 ; byte [PARSE1_TYPE],result_drive
TRANGROUP:296B		       jnz     short REALCD
TRANGROUP:296D		       mov     di, offset PARSE_CHDIR
TRANGROUP:2970		       xor     dx, dx
TRANGROUP:2972		       call    parse_check_eol
TRANGROUP:2975		       jnz     short ChDirErr
TRANGROUP:2977
TRANGROUP:2977 bwdj:				       ; ...
TRANGROUP:2977		       call    build_dir_for_chdir
TRANGROUP:297A		       call    CRLF2
TRANGROUP:297D
TRANGROUP:297D chdir_retn:			       ; ...
TRANGROUP:297D		       retn
TRANGROUP:297E ; ---------------------------------------------------------------------------
TRANGROUP:297E
TRANGROUP:297E REALCD:				       ; ...
TRANGROUP:297E		       push    si
TRANGROUP:297F		       lds     si, [ds:PARSE1_ADDR]
TRANGROUP:2983		       call    Move_To_SrcBuf
TRANGROUP:2986		       pop     si
TRANGROUP:2987		       mov     di, offset PARSE_CHDIR
TRANGROUP:298A		       xor     dx, dx
TRANGROUP:298C		       call    parse_check_eol
TRANGROUP:298F		       jnz     short ChDirErr
TRANGROUP:2991		       call    SETPATH
TRANGROUP:2994		       test    [ds:DestInfo], 2
TRANGROUP:2999		       jnz     short BadChDir
TRANGROUP:299B		       mov     ah, 3Bh	       ; CHDir
TRANGROUP:299D		       call    int_21h_indirect
TRANGROUP:29A0		       jnb     short chdir_retn
TRANGROUP:29A2		       call    get_ext_error_number
TRANGROUP:29A5		       cmp     ax, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:29A8		       jz      short BadChDir
TRANGROUP:29AA		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:29AD		       jz      short BadChDir
TRANGROUP:29AF		       call    set_ext_error_subst
TRANGROUP:29B2		       jmp     short ChDirErr
TRANGROUP:29B4 ; ---------------------------------------------------------------------------
TRANGROUP:29B4
TRANGROUP:29B4 BadChDir:			       ; ...
TRANGROUP:29B4		       mov     dx, offset badcd_ptr
TRANGROUP:29B7
TRANGROUP:29B7 ChDirErr:			       ; ...
TRANGROUP:29B7		       call    std_eprintf
TRANGROUP:29BA
TRANGROUP:29BA mkdir_retn:			       ; ...
TRANGROUP:29BA		       retn
TRANGROUP:29BA endp	       _$CHDIR
TRANGROUP:29BA
TRANGROUP:29BB
TRANGROUP:29BB ; =============== S U B R O U T I N E =======================================
TRANGROUP:29BB
TRANGROUP:29BB
TRANGROUP:29BB proc	       _$MKDIR near	       ; ...
TRANGROUP:29BB		       call    SETRMMK
TRANGROUP:29BE		       jb      short MkDirErr
TRANGROUP:29C0		       mov     ah, 39h	       ; MKDIR
TRANGROUP:29C2		       call    int_21h_indirect
TRANGROUP:29C5		       jnb     short mkdir_retn
TRANGROUP:29C7		       call    get_ext_error_number
TRANGROUP:29CA		       cmp     ax, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:29CD		       jz      short MD_other_err
TRANGROUP:29CF		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:29D2		       jz      short badmderr
TRANGROUP:29D4		       call    set_ext_error_subst
TRANGROUP:29D7		       jmp     short MkDirErr
TRANGROUP:29D9 ; ---------------------------------------------------------------------------
TRANGROUP:29D9
TRANGROUP:29D9 badmderr:			       ; ...
TRANGROUP:29D9		       mov     dx, offset SRCXNAME
TRANGROUP:29DC		       mov     ah, 1Ah	       ; Set_DMA
TRANGROUP:29DE		       call    int_21h_indirect
TRANGROUP:29E1		       mov     ah, 4Eh ; 'N'   ; Find_First
TRANGROUP:29E3		       mov     cx, 10h	       ; ATTR_DIRECTORY
TRANGROUP:29E6		       call    int_21h_indirect
TRANGROUP:29E9		       jb      short MD_other_err
TRANGROUP:29EB		       mov     dl, [ds:SRCXNAME+15h] ; [SRCXNAME+FIND_BUF.ATTR]	; [SRCXNAME+21]
TRANGROUP:29EF		       test    dl, 10h	       ; ATTR_DIRECTORY
TRANGROUP:29F2		       jz      short MD_other_err
TRANGROUP:29F4		       mov     dx, offset MD_EXISTS_PTR
TRANGROUP:29F7		       jmp     short MkDirErr
TRANGROUP:29F9 ; ---------------------------------------------------------------------------
TRANGROUP:29F9
TRANGROUP:29F9 MD_other_err:			       ; ...
TRANGROUP:29F9		       mov     dx, offset badmkd_ptr
TRANGROUP:29FC
TRANGROUP:29FC MkDirErr:			       ; ...
TRANGROUP:29FC		       call    std_eprintf
TRANGROUP:29FF
TRANGROUP:29FF rmdir_retn:			       ; ...
TRANGROUP:29FF		       retn
TRANGROUP:29FF endp	       _$MKDIR
TRANGROUP:29FF
TRANGROUP:2A00
TRANGROUP:2A00 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2A00
TRANGROUP:2A00
TRANGROUP:2A00 proc	       SETRMMK near	       ; ...
TRANGROUP:2A00		       mov     si, 81h
TRANGROUP:2A03		       mov     di, offset PARSE_MRDIR
TRANGROUP:2A06		       xor     cx, cx
TRANGROUP:2A08		       xor     dx, dx
TRANGROUP:2A0A		       call    Parse_With_Msg
TRANGROUP:2A0D		       cmp     ax, 0
TRANGROUP:2A10		       jnz     short noargerr
TRANGROUP:2A12		       mov     di, offset SRCXNAME
TRANGROUP:2A15		       push    di
TRANGROUP:2A16		       push    si
TRANGROUP:2A17		       lds     si, [ds:PARSE1_ADDR]
TRANGROUP:2A1B
TRANGROUP:2A1B mrdir_move_filename:		       ; ...
TRANGROUP:2A1B		       lodsb
TRANGROUP:2A1C		       stosb
TRANGROUP:2A1D		       cmp     al, 0
TRANGROUP:2A1F		       jnz     short mrdir_move_filename
TRANGROUP:2A21		       pop     si
TRANGROUP:2A22		       mov     di, offset PARSE_MRDIR
TRANGROUP:2A25		       call    parse_check_eol
TRANGROUP:2A28		       pop     dx
TRANGROUP:2A29		       jz      short rmdir_retn
TRANGROUP:2A2B
TRANGROUP:2A2B noargerr:			       ; ...
TRANGROUP:2A2B		       mov     dx, offset extend_buf_ptr
TRANGROUP:2A2E		       xor     ax, ax
TRANGROUP:2A30		       stc
TRANGROUP:2A31
TRANGROUP:2A31 setrmmk_retn:			       ; ...
TRANGROUP:2A31		       retn
TRANGROUP:2A31 endp	       SETRMMK
TRANGROUP:2A31
TRANGROUP:2A32
TRANGROUP:2A32 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2A32
TRANGROUP:2A32
TRANGROUP:2A32 proc	       _$RMDIR near	       ; ...
TRANGROUP:2A32		       call    SETRMMK
TRANGROUP:2A35		       jb      short RmDirErr
TRANGROUP:2A37		       jnz     short badrderr
TRANGROUP:2A39		       mov     ah, 3Ah	       ; RMDIR
TRANGROUP:2A3B		       call    int_21h_indirect
TRANGROUP:2A3E		       jnb     short setrmmk_retn
TRANGROUP:2A40		       call    get_ext_error_number
TRANGROUP:2A43		       cmp     ax, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:2A46		       jz      short badrderr
TRANGROUP:2A48		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:2A4B		       jz      short badrderr
TRANGROUP:2A4D		       call    set_ext_error_subst
TRANGROUP:2A50		       jmp     short RmDirErr
TRANGROUP:2A52 ; ---------------------------------------------------------------------------
TRANGROUP:2A52
TRANGROUP:2A52 badrderr:			       ; ...
TRANGROUP:2A52		       mov     dx, offset badrmd_ptr
TRANGROUP:2A55
TRANGROUP:2A55 RmDirErr:			       ; ...
TRANGROUP:2A55		       call    std_eprintf
TRANGROUP:2A58
TRANGROUP:2A58 savudir_err_retn:		       ; ...
TRANGROUP:2A58		       retn
TRANGROUP:2A58 endp	       _$RMDIR
TRANGROUP:2A58
TRANGROUP:2A59
TRANGROUP:2A59 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2A59
TRANGROUP:2A59
TRANGROUP:2A59 proc	       set_ext_error_subst near	; ...
TRANGROUP:2A59		       mov     [ds:msg_disp_class], 1 ;	ext_msg_class
TRANGROUP:2A5E		       mov     [ds:string_ptr_2], dx
TRANGROUP:2A62		       mov     [ds:extend_buf_sub], 1 ;	one_subst
TRANGROUP:2A67		       mov     dx, offset extend_buf_ptr
TRANGROUP:2A6A		       mov     [ds:extend_buf_ptr], ax
TRANGROUP:2A6D		       retn
TRANGROUP:2A6D endp	       set_ext_error_subst
TRANGROUP:2A6D
TRANGROUP:2A6E
TRANGROUP:2A6E ; =============== S U B R O U T I N E =======================================
TRANGROUP:2A6E
TRANGROUP:2A6E
TRANGROUP:2A6E proc	       SAVUDIR near	       ; ...
TRANGROUP:2A6E		       mov     di, offset USERDIR1
TRANGROUP:2A71
TRANGROUP:2A71 SAVUDIR1:			       ; ...
TRANGROUP:2A71		       mov     al, dl
TRANGROUP:2A73		       add     al, 40h ; '@'
TRANGROUP:2A75		       cmp     al, 40h ; '@'
TRANGROUP:2A77		       jnz     short GOTUDRV
TRANGROUP:2A79		       add     al, [ds:CURDRV]
TRANGROUP:2A7D		       inc     al	       ; A = 1
TRANGROUP:2A7F
TRANGROUP:2A7F GOTUDRV:				       ; ...
TRANGROUP:2A7F		       stosb
TRANGROUP:2A80		       mov     ah, [ds:DIRCHAR]
TRANGROUP:2A84		       mov     al, 3Ah ; ':'
TRANGROUP:2A86		       stosw
TRANGROUP:2A87		       push    es
TRANGROUP:2A88		       pop     ds
TRANGROUP:2A89		       mov     si, di
TRANGROUP:2A8B		       mov     ah, 47h	       ; CURRENT_DIR
TRANGROUP:2A8D		       call    int_21h_indirect
TRANGROUP:2A90		       jb      short savudir_err_retn
TRANGROUP:2A92		       push    cs
TRANGROUP:2A93		       pop     ds
TRANGROUP:2A94		       assume ds:TRANGROUP
TRANGROUP:2A94		       retn
TRANGROUP:2A94 endp	       SAVUDIR
TRANGROUP:2A94
TRANGROUP:2A95
TRANGROUP:2A95 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2A95
TRANGROUP:2A95
TRANGROUP:2A95 proc	       CRLF2 near	       ; ...
TRANGROUP:2A95		       push    dx
TRANGROUP:2A96		       mov     dx, offset acrlf_ptr
TRANGROUP:2A99		       push    ds
TRANGROUP:2A9A		       push    cs
TRANGROUP:2A9B		       pop     ds
TRANGROUP:2A9C		       call    std_printf
TRANGROUP:2A9F		       pop     ds
TRANGROUP:2AA0		       assume ds:nothing
TRANGROUP:2AA0		       pop     dx
TRANGROUP:2AA1		       retn
TRANGROUP:2AA1 endp	       CRLF2
TRANGROUP:2AA1
TRANGROUP:2AA2
TRANGROUP:2AA2 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2AA2
TRANGROUP:2AA2
TRANGROUP:2AA2 proc	       scanoff near	       ; ...
TRANGROUP:2AA2		       lodsb
TRANGROUP:2AA3		       call    DELIM
TRANGROUP:2AA6		       jz      short scanoff
TRANGROUP:2AA8		       dec     si
TRANGROUP:2AA9
TRANGROUP:2AA9 scanoff_retn:			       ; ...
TRANGROUP:2AA9		       retn
TRANGROUP:2AA9 endp	       scanoff
TRANGROUP:2AA9
TRANGROUP:2AAA
TRANGROUP:2AAA ; =============== S U B R O U T I N E =======================================
TRANGROUP:2AAA
TRANGROUP:2AAA
TRANGROUP:2AAA proc	       DELIM near	       ; ...
TRANGROUP:2AAA		       cmp     al, 20h ; ' '
TRANGROUP:2AAC		       jz      short scanoff_retn
TRANGROUP:2AAE		       cmp     al, 3Dh ; '='
TRANGROUP:2AB0		       jz      short scanoff_retn
TRANGROUP:2AB2		       cmp     al, 2Ch ; ','
TRANGROUP:2AB4		       jz      short scanoff_retn
TRANGROUP:2AB6		       cmp     al, 3Bh ; ';'
TRANGROUP:2AB8		       jz      short scanoff_retn
TRANGROUP:2ABA		       cmp     al, 9
TRANGROUP:2ABC		       jz      short scanoff_retn
TRANGROUP:2ABE		       cmp     al, 0Ah
TRANGROUP:2AC0		       retn
TRANGROUP:2AC0 endp	       DELIM
TRANGROUP:2AC0
TRANGROUP:2AC1
TRANGROUP:2AC1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2AC1
TRANGROUP:2AC1
TRANGROUP:2AC1 proc	       FCB_TO_ASCZ near	       ; ...
TRANGROUP:2AC1		       mov     cx, 8
TRANGROUP:2AC4
TRANGROUP:2AC4 MAINNAME:			       ; ...
TRANGROUP:2AC4		       lodsb
TRANGROUP:2AC5		       cmp     al, 20h ; ' '
TRANGROUP:2AC7		       jz      short SKIPSPC
TRANGROUP:2AC9		       stosb
TRANGROUP:2ACA
TRANGROUP:2ACA SKIPSPC:				       ; ...
TRANGROUP:2ACA		       loop    MAINNAME
TRANGROUP:2ACC		       lodsb
TRANGROUP:2ACD		       cmp     al, 20h ; ' '
TRANGROUP:2ACF		       jz      short GOTNAME
TRANGROUP:2AD1		       mov     ah, al
TRANGROUP:2AD3		       mov     al, 2Eh ; '.'
TRANGROUP:2AD5		       stosb
TRANGROUP:2AD6		       xchg    al, ah
TRANGROUP:2AD8		       stosb
TRANGROUP:2AD9		       mov     cl, 2
TRANGROUP:2ADB
TRANGROUP:2ADB EXTNAME:				       ; ...
TRANGROUP:2ADB		       lodsb
TRANGROUP:2ADC		       cmp     al, 20h ; ' '
TRANGROUP:2ADE		       jz      short GOTNAME
TRANGROUP:2AE0		       stosb
TRANGROUP:2AE1		       loop    EXTNAME
TRANGROUP:2AE3
TRANGROUP:2AE3 GOTNAME:				       ; ...
TRANGROUP:2AE3		       xor     al, al
TRANGROUP:2AE5		       stosb
TRANGROUP:2AE6
TRANGROUP:2AE6 STRCOMP_RETN:			       ; ...
TRANGROUP:2AE6		       retn
TRANGROUP:2AE6 endp	       FCB_TO_ASCZ
TRANGROUP:2AE6
TRANGROUP:2AE7
TRANGROUP:2AE7 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2AE7
TRANGROUP:2AE7
TRANGROUP:2AE7 proc	       STRCOMP near	       ; ...
TRANGROUP:2AE7		       cmpsb
TRANGROUP:2AE8		       jnz     short STRCOMP_RETN ; Strings not	equal
TRANGROUP:2AEA		       cmp     [byte ptr si-1],	0 ; Hit	NUL terminator?
TRANGROUP:2AEE		       jz      short STRCOMP_RETN ; Yes, strings equal
TRANGROUP:2AF0		       jmp     short STRCOMP
TRANGROUP:2AF0 endp	       STRCOMP
TRANGROUP:2AF0
TRANGROUP:2AF2
TRANGROUP:2AF2 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2AF2
TRANGROUP:2AF2
TRANGROUP:2AF2 proc	       CRPRINT near	       ; ...
TRANGROUP:2AF2		       push    ax
TRANGROUP:2AF3		       mov     al, 0Dh	       ; 13
TRANGROUP:2AF5		       push    cx
TRANGROUP:2AF6		       push    di
TRANGROUP:2AF7		       mov     di, dx
TRANGROUP:2AF9		       mov     cx, 0FFFFh      ; 65535
TRANGROUP:2AFC		       push    es
TRANGROUP:2AFD		       push    ds
TRANGROUP:2AFE		       pop     es
TRANGROUP:2AFF		       repne scasb
TRANGROUP:2B01		       mov     [byte ptr di-1],	0 ; nul	terminate the string
TRANGROUP:2B05		       pop     es
TRANGROUP:2B06		       mov     [ds:string_ptr_2], dx
TRANGROUP:2B0A		       mov     dx, offset string_buf_ptr
TRANGROUP:2B0D		       call    std_printf
TRANGROUP:2B10		       mov     [byte ptr di-1],	0Dh ; put the CR back
TRANGROUP:2B14		       jb      short error_output
TRANGROUP:2B16		       pop     di
TRANGROUP:2B17		       pop     cx
TRANGROUP:2B18		       pop     ax
TRANGROUP:2B19		       retn
TRANGROUP:2B1A ; ---------------------------------------------------------------------------
TRANGROUP:2B1A
TRANGROUP:2B1A error_output:			       ; ...
TRANGROUP:2B1A		       push    cs
TRANGROUP:2B1B		       pop     ds
TRANGROUP:2B1C		       assume ds:TRANGROUP
TRANGROUP:2B1C		       mov     es, [RESSEG]
TRANGROUP:2B20		       assume es:RESGROUP
TRANGROUP:2B20		       mov     dx, offset NOSPACE_PTR
TRANGROUP:2B23		       cmp     [es:PipeFlag], 0	; byte
TRANGROUP:2B29		       jz      short go_to_error
TRANGROUP:2B2B		       call    PipeOff
TRANGROUP:2B2E		       mov     dx, offset PIPEEMES_PTR
TRANGROUP:2B31
TRANGROUP:2B31 go_to_error:			       ; ...
TRANGROUP:2B31		       jmp     cerror
TRANGROUP:2B31 endp	       CRPRINT
TRANGROUP:2B31
TRANGROUP:2B34
TRANGROUP:2B34 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2B34
TRANGROUP:2B34
TRANGROUP:2B34 proc	       pathchrcmp near	       ; ...
TRANGROUP:2B34		       push    ax
TRANGROUP:2B35		       mov     ah, 2Fh ; '/'
TRANGROUP:2B37		       cmp     [SWITCHAR], ah
TRANGROUP:2B3B		       jz      short noslasht
TRANGROUP:2B3D		       cmp     al, 2Fh ; '/'
TRANGROUP:2B3F		       jz      short pccont
TRANGROUP:2B41
TRANGROUP:2B41 noslasht:			       ; ...
TRANGROUP:2B41		       cmp     al, 5Ch ; '\'
TRANGROUP:2B43
TRANGROUP:2B43 pccont:				       ; ...
TRANGROUP:2B43		       pop     ax
TRANGROUP:2B44		       retn
TRANGROUP:2B44 endp	       pathchrcmp
TRANGROUP:2B44
TRANGROUP:2B45
TRANGROUP:2B45 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2B45
TRANGROUP:2B45
TRANGROUP:2B45 proc	       PathCrunch near	       ; ...
TRANGROUP:2B45		       mov     [Msg_Numb], 0
TRANGROUP:2B4B		       mov     dl, [5Ch]       ; [FCB]
TRANGROUP:2B4F		       call    SAVUDIR
TRANGROUP:2B52		       jb      short pcrunch_cderrj
TRANGROUP:2B54		       call    SETPATH
TRANGROUP:2B57		       test    [DestInfo], 2   ; test if wildcards (? or *) seen
TRANGROUP:2B5C		       jnz     short trypeel   ; wildcard seen,	peel filename
TRANGROUP:2B5E		       mov     ah, 3Bh
TRANGROUP:2B60		       int     21h	       ; DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)
TRANGROUP:2B60					       ; DS:DX -> ASCIZ	directory name (may include drive)
TRANGROUP:2B62		       jnb     short chdir_worked
TRANGROUP:2B64		       call    get_ext_error_number
TRANGROUP:2B67		       cmp     ax, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:2B6A		       jz      short trypeel
TRANGROUP:2B6C		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:2B6F		       jz      short trypeel
TRANGROUP:2B71		       mov     [Msg_Numb], ax
TRANGROUP:2B74		       jmp     peelfail
TRANGROUP:2B77 ; ---------------------------------------------------------------------------
TRANGROUP:2B77
TRANGROUP:2B77 chdir_worked:			       ; ...
TRANGROUP:2B77		       call    SetRest1
TRANGROUP:2B7A		       mov     al, '?'
TRANGROUP:2B7C		       mov     di, 5Dh	       ; FCB+1
TRANGROUP:2B7F		       mov     cx, 11
TRANGROUP:2B82		       rep stosb
TRANGROUP:2B84		       xor     al, al
TRANGROUP:2B86		       retn
TRANGROUP:2B87 ; ---------------------------------------------------------------------------
TRANGROUP:2B87
TRANGROUP:2B87 pcrunch_cderrj:			       ; ...
TRANGROUP:2B87		       jmp     pcrunch_cderr
TRANGROUP:2B8A ; ---------------------------------------------------------------------------
TRANGROUP:2B8A
TRANGROUP:2B8A trypeel:				       ; ...
TRANGROUP:2B8A		       mov     si, [PathPos]
TRANGROUP:2B8E		       dec     si
TRANGROUP:2B8F		       mov     al, [si-1]
TRANGROUP:2B92		       cmp     [KPARSE], 0
TRANGROUP:2B97		       jnz     short delstrt
TRANGROUP:2B99		       call    pathchrcmp
TRANGROUP:2B9C		       jz      short peelfail
TRANGROUP:2B9E
TRANGROUP:2B9E delstrt:				       ; ...
TRANGROUP:2B9E		       mov     cx, si
TRANGROUP:2BA0		       mov     si, dx
TRANGROUP:2BA2		       push    dx
TRANGROUP:2BA3
TRANGROUP:2BA3 delloop:				       ; ...
TRANGROUP:2BA3		       cmp     si, cx
TRANGROUP:2BA5		       jz      short gotdele
TRANGROUP:2BA7		       lodsb
TRANGROUP:2BA8		       call    testkanj
TRANGROUP:2BAB		       jz      short notkanj8
TRANGROUP:2BAD		       inc     si
TRANGROUP:2BAE		       jmp     short delloop
TRANGROUP:2BB0 ; ---------------------------------------------------------------------------
TRANGROUP:2BB0
TRANGROUP:2BB0 notkanj8:			       ; ...
TRANGROUP:2BB0		       call    pathchrcmp
TRANGROUP:2BB3		       jnz     short delloop
TRANGROUP:2BB5		       mov     dx, si
TRANGROUP:2BB7		       dec     dx
TRANGROUP:2BB8		       jmp     short delloop
TRANGROUP:2BBA ; ---------------------------------------------------------------------------
TRANGROUP:2BBA
TRANGROUP:2BBA gotdele:				       ; ...
TRANGROUP:2BBA		       mov     si, dx
TRANGROUP:2BBC		       pop     dx
TRANGROUP:2BBD		       cmp     si, dx
TRANGROUP:2BBF		       jz      short badret
TRANGROUP:2BC1		       mov     cx, si
TRANGROUP:2BC3		       mov     si, dx
TRANGROUP:2BC5
TRANGROUP:2BC5 delloop2:			       ; ...
TRANGROUP:2BC5		       cmp     si, cx
TRANGROUP:2BC7		       jz      short trycd
TRANGROUP:2BC9		       mov     [KPARSE], 0     ; byte
TRANGROUP:2BCE		       lodsb
TRANGROUP:2BCF		       call    testkanj
TRANGROUP:2BD2		       jz      short delloop2
TRANGROUP:2BD4		       inc     si
TRANGROUP:2BD5		       inc     [KPARSE]	       ; byte
TRANGROUP:2BD9		       jmp     short delloop2
TRANGROUP:2BDB ; ---------------------------------------------------------------------------
TRANGROUP:2BDB
TRANGROUP:2BDB trycd:				       ; ...
TRANGROUP:2BDB		       push    ax
TRANGROUP:2BDC		       mov     al, 2Eh ; '.'
TRANGROUP:2BDE		       cmp     [si+1], al
TRANGROUP:2BE1		       jnz     short trycd1
TRANGROUP:2BE3		       cmp     [si+2], al
TRANGROUP:2BE6		       jz      short trycd1
TRANGROUP:2BE8		       cmp     [byte ptr si+2],	0
TRANGROUP:2BEC
TRANGROUP:2BEC trycd1:				       ; ...
TRANGROUP:2BEC		       pop     ax
TRANGROUP:2BED		       jz      short peelfail
TRANGROUP:2BEF		       mov     al, [si-1]
TRANGROUP:2BF2		       cmp     al, 3Ah ; ':'
TRANGROUP:2BF4		       jz      short badret
TRANGROUP:2BF6		       cmp     [KPARSE], 0     ; byte
TRANGROUP:2BFB		       jnz     short notdoublesl
TRANGROUP:2BFD		       call    pathchrcmp
TRANGROUP:2C00		       jnz     short notdoublesl
TRANGROUP:2C02
TRANGROUP:2C02 peelfail:			       ; ...
TRANGROUP:2C02		       stc
TRANGROUP:2C03		       retn
TRANGROUP:2C04 ; ---------------------------------------------------------------------------
TRANGROUP:2C04
TRANGROUP:2C04 notdoublesl:			       ; ...
TRANGROUP:2C04		       mov     [byte ptr si], 0
TRANGROUP:2C07		       mov     ah, 3Bh
TRANGROUP:2C09		       call    int_21h_indirect
TRANGROUP:2C0C		       jnb     short cdsucc
TRANGROUP:2C0E
TRANGROUP:2C0E pcrunch_cderr:			       ; ...
TRANGROUP:2C0E		       call    get_ext_error_number
TRANGROUP:2C11		       mov     [Msg_Numb], ax
TRANGROUP:2C14		       or      si, si
TRANGROUP:2C16		       stc
TRANGROUP:2C17
TRANGROUP:2C17 pcrunch_retn:			       ; ...
TRANGROUP:2C17		       retn
TRANGROUP:2C18 ; ---------------------------------------------------------------------------
TRANGROUP:2C18
TRANGROUP:2C18 badret:				       ; ...
TRANGROUP:2C18		       mov     al, [si]
TRANGROUP:2C1A		       call    pathchrcmp
TRANGROUP:2C1D		       stc
TRANGROUP:2C1E		       jnz     short pcrunch_retn
TRANGROUP:2C20		       xor     bl, bl
TRANGROUP:2C22		       xchg    bl, [si+1]
TRANGROUP:2C25		       mov     ah, 3Bh ; ';'
TRANGROUP:2C27		       call    int_21h_indirect
TRANGROUP:2C2A		       jb      short pcrunch_cderr
TRANGROUP:2C2C		       mov     [si+1], bl
TRANGROUP:2C2F
TRANGROUP:2C2F cdsucc:				       ; ...
TRANGROUP:2C2F		       call    SetRest1
TRANGROUP:2C32		       inc     si
TRANGROUP:2C33		       mov     [DestTail], si
TRANGROUP:2C37		       pushf
TRANGROUP:2C38		       cmp     [DirFlag], 0FFh ; -1
TRANGROUP:2C3D		       jz      short pcrunch_end
TRANGROUP:2C3F		       mov     di, 5Ch	       ; FCB
TRANGROUP:2C42		       mov     ax, 2902h
TRANGROUP:2C45		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:2C45					       ; DS:SI -> string to parse
TRANGROUP:2C45					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:2C45					       ; AL = bit mask to control parsing
TRANGROUP:2C47
TRANGROUP:2C47 pcrunch_end:			       ; ...
TRANGROUP:2C47		       popf
TRANGROUP:2C48		       retn
TRANGROUP:2C48 endp	       PathCrunch
TRANGROUP:2C48
TRANGROUP:2C49 ; ---------------------------------------------------------------------------
TRANGROUP:2C49 ; START OF FUNCTION CHUNK FOR SWITCH
TRANGROUP:2C49
TRANGROUP:2C49 RETSW:				       ; ...
TRANGROUP:2C49		       xchg    ax, bx
TRANGROUP:2C4A		       retn
TRANGROUP:2C4A ; END OF	FUNCTION CHUNK FOR SWITCH
TRANGROUP:2C4B
TRANGROUP:2C4B ; =============== S U B R O U T I N E =======================================
TRANGROUP:2C4B
TRANGROUP:2C4B
TRANGROUP:2C4B proc	       SWITCH near	       ; ...
TRANGROUP:2C4B
TRANGROUP:2C4B ; FUNCTION CHUNK	AT TRANGROUP:2C49 SIZE 00000002	BYTES
TRANGROUP:2C4B
TRANGROUP:2C4B		       xor     bx, bx
TRANGROUP:2C4D
TRANGROUP:2C4D SWLOOP:				       ; ...
TRANGROUP:2C4D		       call    scanoff
TRANGROUP:2C50		       cmp     al, [SWITCHAR]
TRANGROUP:2C54		       jnz     short RETSW
TRANGROUP:2C56		       or      bx, 8000h       ; FSWITCH
TRANGROUP:2C5A		       inc     si
TRANGROUP:2C5B		       call    scanoff
TRANGROUP:2C5E		       cmp     al, 0Dh
TRANGROUP:2C60		       jz      short RETSW
TRANGROUP:2C62		       inc     si
TRANGROUP:2C63		       call    UPCONV
TRANGROUP:2C66		       mov     di, offset switch_list ;	"-Y?VBAPW"
TRANGROUP:2C69		       mov     cx, 8
TRANGROUP:2C6C		       repne scasb
TRANGROUP:2C6E		       jnz     short BADSW
TRANGROUP:2C70		       mov     ax, 1
TRANGROUP:2C73		       shl     ax, cl
TRANGROUP:2C75		       or      bx, ax
TRANGROUP:2C77		       jmp     short SWLOOP
TRANGROUP:2C79 ; ---------------------------------------------------------------------------
TRANGROUP:2C79
TRANGROUP:2C79 BADSW:				       ; ...
TRANGROUP:2C79		       jmp     short SWLOOP
TRANGROUP:2C79 endp	       SWITCH
TRANGROUP:2C79
TRANGROUP:2C7B ; ---------------------------------------------------------------------------
TRANGROUP:2C7B ; START OF FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:2C7B
TRANGROUP:2C7B DRVBAD:				       ; ...
TRANGROUP:2C7B		       mov     dx, offset baddrv_ptr
TRANGROUP:2C7E		       jmp     cerror
TRANGROUP:2C7E ; END OF	FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:2C81 ; ---------------------------------------------------------------------------
TRANGROUP:2C81
TRANGROUP:2C81 EXTERNALJ:			       ; ...
TRANGROUP:2C81		       jmp     EXTERNAL
TRANGROUP:2C84 ; ---------------------------------------------------------------------------
TRANGROUP:2C84
TRANGROUP:2C84 FNDCOM:				       ; ...
TRANGROUP:2C84		       or      al, al
TRANGROUP:2C86		       jz      short EXTERNALJ
TRANGROUP:2C88		       call    test_append
TRANGROUP:2C8B		       jz      short CONTCOM
TRANGROUP:2C8D
TRANGROUP:2C8D APPEND_INTERNAL:			       ; ...
TRANGROUP:2C8D		       mov     cl, [IDLEN]
TRANGROUP:2C91		       mov     ch, 0
TRANGROUP:2C93		       mov     [PathPos], cx
TRANGROUP:2C97		       inc     [append_exec]   ; byte
TRANGROUP:2C9B		       call    IOSET
TRANGROUP:2C9E		       mov     si, offset IDLEN
TRANGROUP:2CA1		       mov     dx, 0FFFFh
TRANGROUP:2CA4		       mov     di, offset append_parse
TRANGROUP:2CA7		       mov     ax, 0AE01h
TRANGROUP:2CAA		       int     2Fh	       ; - Multiplex - DOS 3.3+	internal - INSTALLABLE COMMAND - EXECUTE
TRANGROUP:2CAA					       ; DX = FFFFh, DS:SI -> buffer
TRANGROUP:2CAA					       ; Return: buffer	at DS:SI filled	with a length byte followed by the uppercase
TRANGROUP:2CAA					       ; internal command to execute (if length	not 0)
TRANGROUP:2CAC		       cmp     [IDLEN],	0
TRANGROUP:2CB1		       jnz     short CONTCOM
TRANGROUP:2CB3		       jmp     CMD_DONE
TRANGROUP:2CB6 ; ---------------------------------------------------------------------------
TRANGROUP:2CB6
TRANGROUP:2CB6 CONTCOM:				       ; ...
TRANGROUP:2CB6		       mov     di, offset COMTAB ; "\x03DIR"
TRANGROUP:2CB9		       xor     cx, cx
TRANGROUP:2CBB
TRANGROUP:2CBB FINDCOM:				       ; ...
TRANGROUP:2CBB		       mov     si, offset ID
TRANGROUP:2CBE		       mov     cl, [di]
TRANGROUP:2CC0		       inc     di
TRANGROUP:2CC1		       jcxz    short EXTERNALJ
TRANGROUP:2CC3		       cmp     cl, [IDLEN]
TRANGROUP:2CC7		       jnz     short ABCD
TRANGROUP:2CC9		       mov     [PathPos], cx
TRANGROUP:2CCD		       repe cmpsb
TRANGROUP:2CCF
TRANGROUP:2CCF ABCD:				       ; ...
TRANGROUP:2CCF		       lahf
TRANGROUP:2CD0		       add     di, cx
TRANGROUP:2CD2		       mov     al, [di]
TRANGROUP:2CD4		       mov     [CHKDRV], al
TRANGROUP:2CD7		       inc     di
TRANGROUP:2CD8		       mov     bx, [di]
TRANGROUP:2CDA		       inc     di
TRANGROUP:2CDB		       inc     di
TRANGROUP:2CDC		       mov     dx, [di]
TRANGROUP:2CDE		       inc     di
TRANGROUP:2CDF		       inc     di
TRANGROUP:2CE0		       sahf
TRANGROUP:2CE1		       jnz     short FINDCOM
TRANGROUP:2CE3		       cmp     [append_exec], 0	; byte
TRANGROUP:2CE8		       jnz     short DONT_SET_IO
TRANGROUP:2CEA		       call    IOSET
TRANGROUP:2CED
TRANGROUP:2CED DONT_SET_IO:			       ; ...
TRANGROUP:2CED		       mov     ax, [COMSW]
TRANGROUP:2CF0		       or      ax, [ARGTS]     ; [AllSwitch]
TRANGROUP:2CF4		       and     ax, 20h	       ; SwitchQues
TRANGROUP:2CF7		       jz      short DRIVE_CHECK
TRANGROUP:2CF9		       test    [CHKDRV], 4     ; byte [CHKDRV],fLimitHelp
TRANGROUP:2CFE		       jz      short DO_HELP
TRANGROUP:2D00		       cmp     [ARG_ARGVCNT], 2	; [ARG+ARG_UNIT.argvcnt]
TRANGROUP:2D05		       jnz     short DRIVE_CHECK
TRANGROUP:2D07
TRANGROUP:2D07 DO_HELP:				       ; ...
TRANGROUP:2D07		       mov     si, dx
TRANGROUP:2D09		       mov     ax, 0
TRANGROUP:2D0C		       push    ax
TRANGROUP:2D0D
TRANGROUP:2D0D NEXT_HELP_MSG:			       ; ...
TRANGROUP:2D0D		       lodsw
TRANGROUP:2D0E		       or      ax, ax
TRANGROUP:2D10		       jz      short HELP_DONE
TRANGROUP:2D12		       push    ax
TRANGROUP:2D13		       mov     dx, sp
TRANGROUP:2D15		       call    std_printf
TRANGROUP:2D18		       pop     ax
TRANGROUP:2D19		       jmp     short NEXT_HELP_MSG
TRANGROUP:2D1B ; ---------------------------------------------------------------------------
TRANGROUP:2D1B
TRANGROUP:2D1B HELP_DONE:			       ; ...
TRANGROUP:2D1B		       pop     ax
TRANGROUP:2D1C		       jmp     TCOMMAND
TRANGROUP:2D1F ; ---------------------------------------------------------------------------
TRANGROUP:2D1F
TRANGROUP:2D1F DRIVE_CHECK:			       ; ...
TRANGROUP:2D1F		       test    [CHKDRV], 1     ; byte [CHKDRV],FCHECKDRIVE
TRANGROUP:2D24		       jz      short NOCHECK
TRANGROUP:2D26		       mov     al, [PARM1]
TRANGROUP:2D29		       or      al, [PARM2]
TRANGROUP:2D2D		       cmp     al, 0FFh	       ; -1
TRANGROUP:2D2F		       jnz     short NOCHECK
TRANGROUP:2D31		       jmp     DRVBAD
TRANGROUP:2D34 ; ---------------------------------------------------------------------------
TRANGROUP:2D34
TRANGROUP:2D34 NOCHECK:				       ; ...
TRANGROUP:2D34		       call    cmd_copy
TRANGROUP:2D37		       test    [CHKDRV], 2     ; byte [CHKDRV],fSwitchAllowed
TRANGROUP:2D3C		       jnz     short REALWORK
TRANGROUP:2D3E		       call    noswit
TRANGROUP:2D41		       jnz     short REALWORK
TRANGROUP:2D43		       mov     [msg_disp_class], 2 ; parse_msg_class
TRANGROUP:2D48		       mov     dx, offset extend_buf_ptr
TRANGROUP:2D4B		       mov     [extend_buf_ptr], 3 ; BadSwt_Ptr
TRANGROUP:2D51		       jmp     cerror
TRANGROUP:2D54 ; ---------------------------------------------------------------------------
TRANGROUP:2D54
TRANGROUP:2D54 REALWORK:			       ; ...
TRANGROUP:2D54		       call    bx
TRANGROUP:2D56
TRANGROUP:2D56 CMD_DONE:			       ; ...
TRANGROUP:2D56		       push    cs
TRANGROUP:2D57		       pop     ds
TRANGROUP:2D58		       push    ds
TRANGROUP:2D59		       mov     ds, [RESSEG]
TRANGROUP:2D5D		       assume ds:RESGROUP
TRANGROUP:2D5D		       cmp     [Call_Flag], 1  ; call_in_progress
TRANGROUP:2D62		       mov     [Call_Flag], 0
TRANGROUP:2D67		       pop     ds
TRANGROUP:2D68		       assume ds:nothing
TRANGROUP:2D68		       jz      short INCALL
TRANGROUP:2D6A		       jmp     TCOMMAND
TRANGROUP:2D6D ; ---------------------------------------------------------------------------
TRANGROUP:2D6D
TRANGROUP:2D6D INCALL:				       ; ...
TRANGROUP:2D6D		       jmp     DOCOM0
TRANGROUP:2D70
TRANGROUP:2D70 ; =============== S U B R O U T I N E =======================================
TRANGROUP:2D70
TRANGROUP:2D70
TRANGROUP:2D70 proc	       noswit near	       ; ...
TRANGROUP:2D70		       push    di
TRANGROUP:2D71		       mov     di, 81h
TRANGROUP:2D74		       mov     si, 80h
TRANGROUP:2D77		       lodsb
TRANGROUP:2D78		       mov     cl, al
TRANGROUP:2D7A		       xor     ch, ch
TRANGROUP:2D7C		       mov     al, [cs:SWITCHAR]
TRANGROUP:2D80		       cmp     al, 0
TRANGROUP:2D82		       repne scasb
TRANGROUP:2D84		       pop     di
TRANGROUP:2D85		       retn
TRANGROUP:2D85 endp	       noswit
TRANGROUP:2D85
TRANGROUP:2D86 ; ---------------------------------------------------------------------------
TRANGROUP:2D86
TRANGROUP:2D86 EXTERNAL:			       ; ...
TRANGROUP:2D86		       call    test_append
TRANGROUP:2D89		       jz      short NOT_BARRYF
TRANGROUP:2D8B		       jmp     APPEND_INTERNAL
TRANGROUP:2D8E ; ---------------------------------------------------------------------------
TRANGROUP:2D8E
TRANGROUP:2D8E NOT_BARRYF:			       ; ...
TRANGROUP:2D8E		       mov     [cs:IFNOTFLAG], 0 ; byte	[cs:FILTYP],0
TRANGROUP:2D94		       mov     dl, [cs:SPECDRV]
TRANGROUP:2D99		       mov     [cs:IDLEN], dl
TRANGROUP:2D9E		       mov     [cs:ROM_CALL], 0	; byte
TRANGROUP:2DA4		       push    dx
TRANGROUP:2DA5		       mov     dx, offset IDLEN
TRANGROUP:2DA8		       call    ROM_SCAN
TRANGROUP:2DAB		       pop     dx
TRANGROUP:2DAC		       jnb     short DO_SCAN
TRANGROUP:2DAE		       inc     [cs:ROM_CALL]   ; byte
TRANGROUP:2DB3		       jmp     short $+2
TRANGROUP:2DB5
TRANGROUP:2DB5 DO_SCAN:				       ; ...
TRANGROUP:2DB5		       mov     di, offset EXECPATH
TRANGROUP:2DB8		       mov     [byte ptr di], 0
TRANGROUP:2DBB		       cmp     [cs:ROM_CALL], 0	; byte
TRANGROUP:2DC1		       jnz     short NEOEXECUTE
TRANGROUP:2DC3		       call    path_search
TRANGROUP:2DC6		       or      ax, ax
TRANGROUP:2DC8		       jz      short BADCOMJ45
TRANGROUP:2DCA		       cmp     ax, 4
TRANGROUP:2DCD		       jge     short NEOEXECUTE	; jge short EXECUTE
TRANGROUP:2DCD					       ; ... .BAT file ...
TRANGROUP:2DCF		       mov     dx, offset EXECPATH
TRANGROUP:2DD2		       mov     ax, 3D00h
TRANGROUP:2DD5		       int     21h	       ; DOS - 2+ - OPEN DISK FILE WITH	HANDLE
TRANGROUP:2DD5					       ; DS:DX -> ASCIZ	filename
TRANGROUP:2DD5					       ; AL = access mode
TRANGROUP:2DD5					       ; 0 - read
TRANGROUP:2DD7		       jb      short BATCOMJ
TRANGROUP:2DD9		       and     [word ptr ds:TPBUF], 0 ;	clear 1st two bytes of the buffer
TRANGROUP:2DDE		       mov     dx, offset TPBUF
TRANGROUP:2DE1		       mov     cx, 2
TRANGROUP:2DE4		       mov     bx, ax
TRANGROUP:2DE6		       mov     ah, 3Fh
TRANGROUP:2DE8		       int     21h	       ; DOS - 2+ - READ FROM FILE WITH	HANDLE
TRANGROUP:2DE8					       ; BX = file handle, CX =	number of bytes	to read
TRANGROUP:2DE8					       ; DS:DX -> buffer
TRANGROUP:2DEA		       mov     ah, 3Eh
TRANGROUP:2DEC		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:2DEC					       ; BX = file handle
TRANGROUP:2DEE		       cmp     [word ptr ds:TPBUF], 2A2Fh ; '/*' (NASM syntax)
TRANGROUP:2DF4		       jnz     short BATCOMJ
TRANGROUP:2DF6		       mov     ax, offset REXX_EXE ; "REXX.EXE"
TRANGROUP:2DF9		       mov     [ds:ARG_ARGV], ax ; [ARG+ARGV_ELE.argpointer]
TRANGROUP:2DFC		       mov     [ds:ARGV0_ARG_FLAGS], 0 ; [ARG+ARGV_ELE.argflags]
TRANGROUP:2E01		       mov     [ds:ARGV0_ARGSTARTEL], ax ; [ARG+ARGV_ELE.argstartel]
TRANGROUP:2E04		       mov     [ds:ARGV0_ARGLEN], 8 ; [ARG+ARGV_ELE.arglen]
TRANGROUP:2E0A		       mov     [ds:ARGV0_ARGSW_WORD], 0	; [ARG+ARGV_ELE.argsw_word]
TRANGROUP:2E10		       mov     [ds:ARGV0_OCOMPTR], ax ;	[ARG+ARGV_ELE.arg_ocomptr]
TRANGROUP:2E10					       ; pointer into original command string
TRANGROUP:2E13		       call    path_search
TRANGROUP:2E16		       test    ax, ax
TRANGROUP:2E18		       jz      short rexx_nf_err
TRANGROUP:2E1A		       mov     si, (offset COMBUF+1)
TRANGROUP:2E1D		       mov     di, 80h	       ; PSP command tail (arguments)
TRANGROUP:2E20		       mov     cx, di	       ; 128
TRANGROUP:2E22		       rep movsb
TRANGROUP:2E24		       jmp     short NEOEXECUTE
TRANGROUP:2E26 ; ---------------------------------------------------------------------------
TRANGROUP:2E26
TRANGROUP:2E26 rexx_nf_err:			       ; ...
TRANGROUP:2E26		       mov     dx, offset REXXNOTF_PTR ; MSG_1012 ; REXX.EXE not found
TRANGROUP:2E29		       jmp     short cerror
TRANGROUP:2E2B ; ---------------------------------------------------------------------------
TRANGROUP:2E2B
TRANGROUP:2E2B BATCOMJ:				       ; ...
TRANGROUP:2E2B		       jmp     BATCOM
TRANGROUP:2E2E ; ---------------------------------------------------------------------------
TRANGROUP:2E2E
TRANGROUP:2E2E BADCOMJ45:			       ; ...
TRANGROUP:2E2E		       jmp     short BADCOM
TRANGROUP:2E30 ; ---------------------------------------------------------------------------
TRANGROUP:2E30
TRANGROUP:2E30 NEOEXECUTE:			       ; ...
TRANGROUP:2E30		       call    IOSET	       ; offset	EXECUTE	= offset NEOEXECUTE
TRANGROUP:2E33 ; START OF FUNCTION CHUNK FOR LoadHigh
TRANGROUP:2E33
TRANGROUP:2E33 LH_EXECUTE:			       ; ...
TRANGROUP:2E33		       mov     es, [ds:TRAN_TPA]
TRANGROUP:2E37		       assume es:nothing
TRANGROUP:2E37		       mov     ah, 49h	       ; DEALLOC
TRANGROUP:2E39		       int     21h	       ; DOS - 2+ - FREE MEMORY
TRANGROUP:2E39					       ; ES = segment address of area to be freed
TRANGROUP:2E3B		       mov     es, [ds:RESSEG]
TRANGROUP:2E3F		       inc     [es:ExtCom]     ; byte
TRANGROUP:2E44		       mov     [es:RestDir], 0 ; byte
TRANGROUP:2E4A		       mov     si, offset EXECPATH ; TRANGROUP:EXECPATH
TRANGROUP:2E4D		       mov     di, offset MsgBuffer ; RESGROUP:SafePathBuffer
TRANGROUP:2E50		       mov     cx, 80
TRANGROUP:2E53		       cld
TRANGROUP:2E54		       rep movsb
TRANGROUP:2E56		       mov     di, 5Ch	       ; FCB
TRANGROUP:2E59		       mov     si, di
TRANGROUP:2E5B		       mov     cx, 82
TRANGROUP:2E5E		       rep movsw
TRANGROUP:2E60		       mov     dx, offset MsgBuffer ; SafePathBuffer
TRANGROUP:2E63		       push    es
TRANGROUP:2E64		       pop     ds
TRANGROUP:2E65		       mov     bx, offset EnvirSeg ; Exec_Block	= offset EnvirSeg
TRANGROUP:2E68		       mov     ax, 4B00h       ; EXEC*256
TRANGROUP:2E6B		       test    [cs:ROM_CALL], 0FFh ; byte
TRANGROUP:2E71		       jz      short OK_EXEC
TRANGROUP:2E73		       jmp     ROM_EXEC
TRANGROUP:2E76 ; ---------------------------------------------------------------------------
TRANGROUP:2E76
TRANGROUP:2E76 OK_EXEC:				       ; ...
TRANGROUP:2E76		       mov     cx, es
TRANGROUP:2E78		       mov     ss, cx
TRANGROUP:2E7A		       mov     sp, offset RStack
TRANGROUP:2E7D		       jmp     [cs:EXEC_ADDR]  ; jmp far [cs:EXEC_ADDR]
TRANGROUP:2E7D ; END OF	FUNCTION CHUNK FOR LoadHigh
TRANGROUP:2E82 ; ---------------------------------------------------------------------------
TRANGROUP:2E82
TRANGROUP:2E82 BADCOM:				       ; ...
TRANGROUP:2E82		       push    cs
TRANGROUP:2E83		       pop     ds
TRANGROUP:2E84		       assume ds:TRANGROUP
TRANGROUP:2E84		       mov     dx, offset BADNAM_PTR
TRANGROUP:2E87 ; START OF FUNCTION CHUNK FOR TESTDOREIN
TRANGROUP:2E87
TRANGROUP:2E87 cerror:				       ; ...
TRANGROUP:2E87		       call    std_eprintf
TRANGROUP:2E8A		       jmp     TCOMMAND
TRANGROUP:2E8A ; END OF	FUNCTION CHUNK FOR TESTDOREIN
TRANGROUP:2E8D
TRANGROUP:2E8D ; =============== S U B R O U T I N E =======================================
TRANGROUP:2E8D
TRANGROUP:2E8D
TRANGROUP:2E8D proc	       PRESCAN near	       ; ...
TRANGROUP:2E8D		       xor     cx, cx
TRANGROUP:2E8F		       mov     es, [RESSEG]
TRANGROUP:2E93		       assume es:RESGROUP
TRANGROUP:2E93		       mov     si, (offset COMBUF+2)
TRANGROUP:2E96		       mov     di, si
TRANGROUP:2E98
TRANGROUP:2E98 COUNTQUOTES:			       ; ...
TRANGROUP:2E98		       lodsb
TRANGROUP:2E99		       cmp     al, 22h ; '"'
TRANGROUP:2E9B		       jnz     short COUNTEND
TRANGROUP:2E9D		       inc     ch
TRANGROUP:2E9F		       jmp     short COUNTQUOTES
TRANGROUP:2EA1 ; ---------------------------------------------------------------------------
TRANGROUP:2EA1
TRANGROUP:2EA1 COUNTEND:			       ; ...
TRANGROUP:2EA1		       cmp     al, 0Dh
TRANGROUP:2EA3		       jnz     short COUNTQUOTES
TRANGROUP:2EA5		       push    cx
TRANGROUP:2EA6		       mov     si, di
TRANGROUP:2EA8
TRANGROUP:2EA8 KanjiScan:			       ; ...
TRANGROUP:2EA8		       lodsb
TRANGROUP:2EA9		       call    testkanj
TRANGROUP:2EAC		       jz      short KanjiQuote
TRANGROUP:2EAE		       mov     ah, al
TRANGROUP:2EB0		       lodsb
TRANGROUP:2EB1		       cmp     ax, 2020h       ; DB_SPACE
TRANGROUP:2EB4		       jnz     short KanjiScan
TRANGROUP:2EB6		       mov     [word ptr si-2],	2020h
TRANGROUP:2EBB		       jmp     short KanjiScan
TRANGROUP:2EBD ; ---------------------------------------------------------------------------
TRANGROUP:2EBD
TRANGROUP:2EBD KanjiQuote:			       ; ...
TRANGROUP:2EBD		       cmp     al, 22h ; '"'
TRANGROUP:2EBF		       jnz     short KanjiEnd
TRANGROUP:2EC1		       dec     ch
TRANGROUP:2EC3		       jz      short KanjiScan
TRANGROUP:2EC5
TRANGROUP:2EC5 KanjiQuoteLoop:			       ; ...
TRANGROUP:2EC5		       lodsb
TRANGROUP:2EC6		       cmp     al, 22h ; '"'
TRANGROUP:2EC8		       jnz     short KanjiQuoteLoop
TRANGROUP:2ECA		       dec     ch
TRANGROUP:2ECC		       jmp     short KanjiScan
TRANGROUP:2ECE ; ---------------------------------------------------------------------------
TRANGROUP:2ECE
TRANGROUP:2ECE KanjiEnd:			       ; ...
TRANGROUP:2ECE		       cmp     al, 0Dh
TRANGROUP:2ED0		       jnz     short KanjiScan
TRANGROUP:2ED2		       pop     cx
TRANGROUP:2ED3		       mov     si, di
TRANGROUP:2ED5
TRANGROUP:2ED5 PRESCANLP:			       ; ...
TRANGROUP:2ED5		       lodsb
TRANGROUP:2ED6		       call    testkanj
TRANGROUP:2ED9		       jz      short NOTKANJ6
TRANGROUP:2EDB		       mov     [di], al
TRANGROUP:2EDD		       inc     di
TRANGROUP:2EDE		       lodsb
TRANGROUP:2EDF		       mov     [di], al
TRANGROUP:2EE1		       inc     di
TRANGROUP:2EE2		       inc     cl
TRANGROUP:2EE4		       inc     cl
TRANGROUP:2EE6		       jmp     short PRESCANLP
TRANGROUP:2EE8 ; ---------------------------------------------------------------------------
TRANGROUP:2EE8
TRANGROUP:2EE8 NOTKANJ6:			       ; ...
TRANGROUP:2EE8		       cmp     al, 22h ; '"'
TRANGROUP:2EEA		       jnz     short TRYGREATER
TRANGROUP:2EEC		       dec     ch
TRANGROUP:2EEE		       jz      short TRYGREATER
TRANGROUP:2EF0
TRANGROUP:2EF0 QLOOP:				       ; ...
TRANGROUP:2EF0		       mov     [di], al
TRANGROUP:2EF2		       inc     di
TRANGROUP:2EF3		       inc     cl
TRANGROUP:2EF5		       lodsb
TRANGROUP:2EF6		       cmp     al, 22h ; '"'
TRANGROUP:2EF8		       jnz     short QLOOP
TRANGROUP:2EFA		       dec     ch
TRANGROUP:2EFC
TRANGROUP:2EFC TRYGREATER:			       ; ...
TRANGROUP:2EFC		       cmp     al, 3Eh ; '>'   ; rabracket
TRANGROUP:2EFE		       jnz     short NOOUT
TRANGROUP:2F00		       cmp     [si], al
TRANGROUP:2F02		       jnz     short NOAPPND
TRANGROUP:2F04		       lodsb
TRANGROUP:2F05		       inc     [es:Re_Out_App] ; byte ;	Flag >>
TRANGROUP:2F0A
TRANGROUP:2F0A NOAPPND:				       ; ...
TRANGROUP:2F0A		       call    scanoff
TRANGROUP:2F0D		       cmp     al, 3Ch ; '<'   ; labracket
TRANGROUP:2F0F		       jz      short REOUT_ERRSET
TRANGROUP:2F11		       cmp     al, 0Dh
TRANGROUP:2F13		       jnz     short GOTREOFIL
TRANGROUP:2F15
TRANGROUP:2F15 REOUT_ERRSET:			       ; ...
TRANGROUP:2F15		       mov     [byte ptr di], 0Dh
TRANGROUP:2F18		       mov     [word ptr es:Re_OutStr],	9 ; word
TRANGROUP:2F1F		       jmp     PRESCANEND
TRANGROUP:2F22 ; ---------------------------------------------------------------------------
TRANGROUP:2F22
TRANGROUP:2F22 GOTREOFIL:			       ; ...
TRANGROUP:2F22		       push    di
TRANGROUP:2F23		       mov     di, offset Re_OutStr
TRANGROUP:2F26		       mov     bx, di
TRANGROUP:2F28		       push    es
TRANGROUP:2F29
TRANGROUP:2F29 SETREOUTSTR:			       ; ...
TRANGROUP:2F29		       push    cx
TRANGROUP:2F2A		       mov     cx, 77	       ; 64+13 ; CX = max string length
TRANGROUP:2F2D
TRANGROUP:2F2D SETREOUTSTR_LOOP:		       ; ...
TRANGROUP:2F2D		       lodsb
TRANGROUP:2F2E		       cmp     al, 0Dh
TRANGROUP:2F30		       jz      short GOTRESTR_J
TRANGROUP:2F32		       call    DELIM
TRANGROUP:2F35		       jz      short GOTRESTR_J
TRANGROUP:2F37		       cmp     al, [SWITCHAR]
TRANGROUP:2F3B		       jz      short GOTRESTR_J
TRANGROUP:2F3D		       cmp     al, 22h ; '"'
TRANGROUP:2F3F		       jz      short PIPEERRSYNJ5_J
TRANGROUP:2F41		       cmp     al, 3Ch ; '<'
TRANGROUP:2F43		       jz      short ABRACKET_TERM
TRANGROUP:2F45		       cmp     al, 3Eh ; '>'
TRANGROUP:2F47		       jnz     short NO_ABRACKET
TRANGROUP:2F49
TRANGROUP:2F49 ABRACKET_TERM:			       ; ...
TRANGROUP:2F49		       dec     si
TRANGROUP:2F4A		       mov     al, 20h ; ' '
TRANGROUP:2F4C
TRANGROUP:2F4C GOTRESTR_J:			       ; ...
TRANGROUP:2F4C		       pop     cx
TRANGROUP:2F4D		       jmp     short GOTRESTR
TRANGROUP:2F4F ; ---------------------------------------------------------------------------
TRANGROUP:2F4F
TRANGROUP:2F4F NO_ABRACKET:			       ; ...
TRANGROUP:2F4F		       stosb
TRANGROUP:2F50		       call    testkanj
TRANGROUP:2F53		       jz      short NO_ABRACKET_@
TRANGROUP:2F55		       jcxz    short GOTRESTR_J
TRANGROUP:2F57		       lodsb
TRANGROUP:2F58		       cmp     al, 0Dh
TRANGROUP:2F5A		       jz      short GOTRESTR_J
TRANGROUP:2F5C		       stosb
TRANGROUP:2F5D		       dec     cx
TRANGROUP:2F5E
TRANGROUP:2F5E NO_ABRACKET_@:			       ; ...
TRANGROUP:2F5E		       loop    SETREOUTSTR_LOOP
TRANGROUP:2F60		       jmp     short GOTRESTR_J
TRANGROUP:2F62 ; ---------------------------------------------------------------------------
TRANGROUP:2F62
TRANGROUP:2F62 PIPEERRSYNJ5_J:			       ; ...
TRANGROUP:2F62		       pop     cx
TRANGROUP:2F63		       jmp     short PIPEERRSYNJ5
TRANGROUP:2F65 ; ---------------------------------------------------------------------------
TRANGROUP:2F65
TRANGROUP:2F65 NOOUT:				       ; ...
TRANGROUP:2F65		       cmp     al, 3Ch ; '<'
TRANGROUP:2F67		       jnz     short CHKPIPE
TRANGROUP:2F69		       mov     bx, si
TRANGROUP:2F6B		       call    scanoff
TRANGROUP:2F6E		       cmp     al, 3Eh ; '>'
TRANGROUP:2F70		       jz      short REIN_ERRSET
TRANGROUP:2F72		       cmp     al, 0Dh
TRANGROUP:2F74		       jnz     short GOTREIFIL
TRANGROUP:2F76
TRANGROUP:2F76 REIN_ERRSET:			       ; ...
TRANGROUP:2F76		       mov     [byte ptr di], 0Dh
TRANGROUP:2F79		       mov     [word ptr RE_INSTR], 9
TRANGROUP:2F7F		       jmp     short PRESCANEND
TRANGROUP:2F81 ; ---------------------------------------------------------------------------
TRANGROUP:2F81
TRANGROUP:2F81 GOTREIFIL:			       ; ...
TRANGROUP:2F81		       push    di
TRANGROUP:2F82		       mov     di, offset RE_INSTR
TRANGROUP:2F85		       mov     bx, di
TRANGROUP:2F87		       push    es
TRANGROUP:2F88		       push    cs
TRANGROUP:2F89		       pop     es
TRANGROUP:2F8A		       assume es:TRANGROUP
TRANGROUP:2F8A		       jmp     short SETREOUTSTR
TRANGROUP:2F8C ; ---------------------------------------------------------------------------
TRANGROUP:2F8C
TRANGROUP:2F8C CHKPIPE:				       ; ...
TRANGROUP:2F8C		       mov     ah, al
TRANGROUP:2F8E		       cmp     ah, 7Ch ; '|'   ; ALTPIPECHR
TRANGROUP:2F91		       jz      short ISPIPE3
TRANGROUP:2F93		       cmp     ah, 7Ch ; '|'   ; VBAR
TRANGROUP:2F96		       jnz     short CONTPRESCAN
TRANGROUP:2F98
TRANGROUP:2F98 ISPIPE3:				       ; ...
TRANGROUP:2F98		       cmp     [es:PipeFlag], 0
TRANGROUP:2F9E		       jnz     short NOECHOPUSH
TRANGROUP:2FA0		       shl     [es:EchoFlag], 1
TRANGROUP:2FA5
TRANGROUP:2FA5 NOECHOPUSH:			       ; ...
TRANGROUP:2FA5		       inc     [es:PipeFlag]   ; byte
TRANGROUP:2FAA		       call    scanoff
TRANGROUP:2FAD		       cmp     al, 0Dh
TRANGROUP:2FAF		       jz      short PIPEERRSYNJ5
TRANGROUP:2FB1		       cmp     al, 7Ch ; '|'   ; ALTPIPECHR
TRANGROUP:2FB3		       jz      short PIPEERRSYNJ5
TRANGROUP:2FB5		       cmp     al, 7Ch ; '|'   ; VBAR
TRANGROUP:2FB7		       jnz     short CONTPRESCAN
TRANGROUP:2FB9
TRANGROUP:2FB9 PIPEERRSYNJ5:			       ; ...
TRANGROUP:2FB9		       push    es
TRANGROUP:2FBA		       pop     ds
TRANGROUP:2FBB		       jmp     PIPEERRSYN
TRANGROUP:2FBE ; ---------------------------------------------------------------------------
TRANGROUP:2FBE
TRANGROUP:2FBE GOTRESTR:			       ; ...
TRANGROUP:2FBE		       xchg    ah, al
TRANGROUP:2FC0		       mov     al, 3Ah ; ':'
TRANGROUP:2FC2		       sub     bx, di
TRANGROUP:2FC4		       cmp     bx, 0FFFFh      ; -1
TRANGROUP:2FC7		       jz      short NOTRAILCOL
TRANGROUP:2FC9		       cmp     [es:di-1], al
TRANGROUP:2FCD		       jnz     short NOTRAILCOL
TRANGROUP:2FCF		       dec     di
TRANGROUP:2FD0
TRANGROUP:2FD0 NOTRAILCOL:			       ; ...
TRANGROUP:2FD0		       xor     al, al	       ; 0
TRANGROUP:2FD2		       stosb
TRANGROUP:2FD3		       pop     es
TRANGROUP:2FD4		       assume es:nothing
TRANGROUP:2FD4		       pop     di
TRANGROUP:2FD5
TRANGROUP:2FD5 CONTPRESCAN:			       ; ...
TRANGROUP:2FD5		       mov     [di], ah
TRANGROUP:2FD7		       inc     di
TRANGROUP:2FD8		       cmp     ah, 0Dh
TRANGROUP:2FDB		       jz      short PRESCANEND
TRANGROUP:2FDD		       inc     cl
TRANGROUP:2FDF		       jmp     PRESCANLP
TRANGROUP:2FE2 ; ---------------------------------------------------------------------------
TRANGROUP:2FE2
TRANGROUP:2FE2 PRESCANEND:			       ; ...
TRANGROUP:2FE2		       cmp     [es:PipeFlag], 0
TRANGROUP:2FE8		       jz      short ISNOPIPE
TRANGROUP:2FEA		       mov     di, 4BEh	       ; PipeStr ; RESGROUP:EndInit+160
TRANGROUP:2FEA					       ; ENDINIT is at offset 41Eh
TRANGROUP:2FED		       mov     [es:4BCh], di   ; mov [es:PipePtr],di
TRANGROUP:2FED					       ; (RESGROUP:EndInit+158)
TRANGROUP:2FF2		       mov     si, (offset COMBUF+2)
TRANGROUP:2FF5		       call    scanoff
TRANGROUP:2FF8
TRANGROUP:2FF8 PIPESETLP:			       ; ...
TRANGROUP:2FF8		       lodsb
TRANGROUP:2FF9		       stosb
TRANGROUP:2FFA		       cmp     al, 0Dh
TRANGROUP:2FFC		       jnz     short PIPESETLP
TRANGROUP:2FFE
TRANGROUP:2FFE ISNOPIPE:			       ; ...
TRANGROUP:2FFE		       mov     [COMBUF+1], cl
TRANGROUP:3002		       cmp     [es:PipeFlag], 0	; [es::41Ch]
TRANGROUP:3008		       push    cs
TRANGROUP:3009		       pop     es
TRANGROUP:300A		       assume es:TRANGROUP
TRANGROUP:300A		       retn
TRANGROUP:300A endp	       PRESCAN
TRANGROUP:300A
TRANGROUP:300B
TRANGROUP:300B ; =============== S U B R O U T I N E =======================================
TRANGROUP:300B
TRANGROUP:300B
TRANGROUP:300B proc	       cmd_copy	near	       ; ...
TRANGROUP:300B		       mov     si, (offset COMBUF+2)
TRANGROUP:300E		       call    scanoff
TRANGROUP:3011		       add     si, [PathPos]
TRANGROUP:3015		       mov     di, 81h
TRANGROUP:3018		       xor     cx, cx
TRANGROUP:301A
TRANGROUP:301A cmdcopy:				       ; ...
TRANGROUP:301A		       lodsb
TRANGROUP:301B		       stosb
TRANGROUP:301C		       cmp     al, 0Dh
TRANGROUP:301E		       jz      short copy_done
TRANGROUP:3020		       inc     cx
TRANGROUP:3021		       jmp     short cmdcopy
TRANGROUP:3023 ; ---------------------------------------------------------------------------
TRANGROUP:3023
TRANGROUP:3023 copy_done:			       ; ...
TRANGROUP:3023		       mov     [80h], cl
TRANGROUP:3027		       retn
TRANGROUP:3027 endp	       cmd_copy
TRANGROUP:3027
TRANGROUP:3028
TRANGROUP:3028 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3028
TRANGROUP:3028
TRANGROUP:3028 proc	       test_append near	       ; ...
TRANGROUP:3028		       mov     bx, offset COMBUF
TRANGROUP:302B		       mov     si, offset IDLEN
TRANGROUP:302E		       mov     dx, 0FFFFh
TRANGROUP:3031		       mov     ax, 0AE00h
TRANGROUP:3034		       int     2Fh	       ; - Multiplex - DOS 3.3+	internal - INSTALLABLE COMMAND - INSTALL CHECK
TRANGROUP:3034					       ; DX = FFFFh, DS:BX -> command line
TRANGROUP:3034					       ; Return: AL = FFh if this command is a TSR extension to	COMMAND.COM
TRANGROUP:3034					       ; AL = 00h if the command should	be executed as usual
TRANGROUP:3036		       cmp     al, 0
TRANGROUP:3038		       retn
TRANGROUP:3038 endp	       test_append
TRANGROUP:3038
TRANGROUP:3039
TRANGROUP:3039 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3039
TRANGROUP:3039
TRANGROUP:3039 proc	       SETPATH near	       ; ...
TRANGROUP:3039		       mov     ax, [PathCnt]
TRANGROUP:303C		       mov     si, [PathPos]
TRANGROUP:3040		       mov     [DestInfo], 0   ; byte
TRANGROUP:3045		       mov     [DestIsDir], 0  ; byte
TRANGROUP:304A		       mov     si, [PathPos]
TRANGROUP:304E		       mov     cx, [PathCnt]
TRANGROUP:3052		       mov     dx, si
TRANGROUP:3054		       jcxz    short PATHDONE
TRANGROUP:3056		       push    cx
TRANGROUP:3057		       push    si
TRANGROUP:3058		       call    SWITCH
TRANGROUP:305B		       mov     [PathSw], ax
TRANGROUP:305E		       pop     bx
TRANGROUP:305F		       sub     bx, si
TRANGROUP:3061		       pop     cx
TRANGROUP:3062		       add     cx, bx
TRANGROUP:3064		       mov     dx, si
TRANGROUP:3066
TRANGROUP:3066 SKIPPATH:			       ; ...
TRANGROUP:3066		       mov     [KPARSE], 0     ; byte
TRANGROUP:306B
TRANGROUP:306B SKIPPATH2:			       ; ...
TRANGROUP:306B		       jcxz    short PATHDONE
TRANGROUP:306D		       dec     cx
TRANGROUP:306E		       lodsb
TRANGROUP:306F		       call    testkanj
TRANGROUP:3072		       jz      short TESTPPSEP
TRANGROUP:3074		       dec     cx
TRANGROUP:3075		       inc     si
TRANGROUP:3076		       inc     [KPARSE]	       ; byte
TRANGROUP:307A		       jmp     short SKIPPATH2
TRANGROUP:307C ; ---------------------------------------------------------------------------
TRANGROUP:307C
TRANGROUP:307C TESTPPSEP:			       ; ...
TRANGROUP:307C		       call    pathchrcmp
TRANGROUP:307F		       jnz     short TESTPMETA
TRANGROUP:3081		       inc     [DestIsDir]     ; byte
TRANGROUP:3085
TRANGROUP:3085 TESTPMETA:			       ; ...
TRANGROUP:3085		       cmp     al, 3Fh ; '?'
TRANGROUP:3087		       jnz     short TESTPSTAR
TRANGROUP:3089		       or      [DestInfo], 2   ; byte
TRANGROUP:308E
TRANGROUP:308E TESTPSTAR:			       ; ...
TRANGROUP:308E		       cmp     al, 2Ah ; '*'
TRANGROUP:3090		       jnz     short TESTPDELIM
TRANGROUP:3092		       or      [DestInfo], 2
TRANGROUP:3097
TRANGROUP:3097 TESTPDELIM:			       ; ...
TRANGROUP:3097		       call    DELIM
TRANGROUP:309A		       jz      short PATHDONEDEC
TRANGROUP:309C		       cmp     al, [SWITCHAR]
TRANGROUP:30A0		       jnz     short SKIPPATH
TRANGROUP:30A2
TRANGROUP:30A2 PATHDONEDEC:			       ; ...
TRANGROUP:30A2		       dec     si
TRANGROUP:30A3
TRANGROUP:30A3 PATHDONE:			       ; ...
TRANGROUP:30A3		       xor     al, al
TRANGROUP:30A5		       xchg    al, [si]
TRANGROUP:30A7		       inc     si
TRANGROUP:30A8		       cmp     al, 0Dh
TRANGROUP:30AA		       jnz     short NOPSTORE
TRANGROUP:30AC		       mov     [si], al
TRANGROUP:30AE
TRANGROUP:30AE NOPSTORE:			       ; ...
TRANGROUP:30AE		       mov     [PathPos], si
TRANGROUP:30B2		       mov     [PathCnt], cx
TRANGROUP:30B6
TRANGROUP:30B6 SETPATH_RETN:			       ; ...
TRANGROUP:30B6		       retn
TRANGROUP:30B6 endp	       SETPATH
TRANGROUP:30B6
TRANGROUP:30B7
TRANGROUP:30B7 ; =============== S U B R O U T I N E =======================================
TRANGROUP:30B7
TRANGROUP:30B7
TRANGROUP:30B7 proc	       PGETARG near	       ; ...
TRANGROUP:30B7		       mov     si, 80h
TRANGROUP:30BA		       lodsb
TRANGROUP:30BB		       or      al, al
TRANGROUP:30BD		       jz      short SETPATH_RETN
TRANGROUP:30BF		       call    PSCANOFF
TRANGROUP:30C2		       cmp     al, 0Dh
TRANGROUP:30C4		       retn
TRANGROUP:30C4 endp	       PGETARG
TRANGROUP:30C4
TRANGROUP:30C5
TRANGROUP:30C5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:30C5
TRANGROUP:30C5
TRANGROUP:30C5 proc	       PSCANOFF	near	       ; ...
TRANGROUP:30C5		       lodsb
TRANGROUP:30C6		       call    DELIM
TRANGROUP:30C9		       jnz     short PSCANOFFD
TRANGROUP:30CB		       cmp     al, 3Bh ; ';'
TRANGROUP:30CD		       jnz     short PSCANOFF
TRANGROUP:30CF
TRANGROUP:30CF PSCANOFFD:			       ; ...
TRANGROUP:30CF		       dec     si
TRANGROUP:30D0		       retn
TRANGROUP:30D0 endp	       PSCANOFF
TRANGROUP:30D0
TRANGROUP:30D1
TRANGROUP:30D1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:30D1
TRANGROUP:30D1
TRANGROUP:30D1 proc	       IOSET near	       ; ...
TRANGROUP:30D1		       push    ds
TRANGROUP:30D2		       push    dx
TRANGROUP:30D3		       push    ax
TRANGROUP:30D4		       push    bx
TRANGROUP:30D5		       push    cx
TRANGROUP:30D6		       mov     ds, [cs:RESSEG]
TRANGROUP:30DB		       assume ds:nothing
TRANGROUP:30DB		       cmp     [ds:PipeFlag], 0	; byte
TRANGROUP:30E0		       jnz     short NOREDIR
TRANGROUP:30E2		       test    [ds:IfFlag], 0FFh
TRANGROUP:30E7		       jnz     short NOREDIR
TRANGROUP:30E9		       call    TESTDOREIN
TRANGROUP:30EC		       call    TESTDOREOUT
TRANGROUP:30EF
TRANGROUP:30EF NOREDIR:				       ; ...
TRANGROUP:30EF		       pop     cx
TRANGROUP:30F0		       pop     bx
TRANGROUP:30F1		       pop     ax
TRANGROUP:30F2		       pop     dx
TRANGROUP:30F3		       pop     ds
TRANGROUP:30F4
TRANGROUP:30F4 IOSET_RETN:			       ; ...
TRANGROUP:30F4		       retn
TRANGROUP:30F4 endp	       IOSET
TRANGROUP:30F4
TRANGROUP:30F5
TRANGROUP:30F5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:30F5
TRANGROUP:30F5
TRANGROUP:30F5 proc	       TESTDOREIN near	       ; ...
TRANGROUP:30F5
TRANGROUP:30F5 ; FUNCTION CHUNK	AT TRANGROUP:2E87 SIZE 00000006	BYTES
TRANGROUP:30F5
TRANGROUP:30F5		       cmp     [cs:RE_INSTR], 0
TRANGROUP:30FB		       jz      short IOSET_RETN
TRANGROUP:30FD		       push    ds
TRANGROUP:30FE		       push    cs
TRANGROUP:30FF		       pop     ds
TRANGROUP:3100		       assume ds:TRANGROUP
TRANGROUP:3100		       mov     dx, offset RE_INSTR
TRANGROUP:3103		       mov     ax, 3D40h       ; mov ax,(OPEN*256)+SHARING_DENY_NONE
TRANGROUP:3106		       mov     bx, ax
TRANGROUP:3108		       int     21h	       ; DOS - 2+ - OPEN DISK FILE WITH	HANDLE
TRANGROUP:3108					       ; DS:DX -> ASCIZ	filename
TRANGROUP:3108					       ; AL = access mode
TRANGROUP:3108					       ; 0 - read, 1 - write, 2	- read & write
TRANGROUP:310A		       pop     ds
TRANGROUP:310B		       assume ds:nothing
TRANGROUP:310B		       jb      short REDIRERR
TRANGROUP:310D		       mov     bx, ax
TRANGROUP:310F		       mov     al, 0FFh
TRANGROUP:3111		       xchg    al, [bx+18h]    ; [bx+PDB.JFN_TABLE]
TRANGROUP:3114		       mov     [ds:18h], al    ; [PDB.JFN_TABLE]
TRANGROUP:3117		       retn
TRANGROUP:3118 ; ---------------------------------------------------------------------------
TRANGROUP:3118
TRANGROUP:3118 REDIRERR:			       ; ...
TRANGROUP:3118		       push    cs
TRANGROUP:3119		       pop     ds
TRANGROUP:311A		       assume ds:TRANGROUP
TRANGROUP:311A		       call    TriageError
TRANGROUP:311D		       cmp     ax, 65	       ; network access	denied
TRANGROUP:3120		       jz      short _CERRORJ
TRANGROUP:3122		       cmp     bh, 3Dh	       ; OPEN
TRANGROUP:3125		       jz      short OpenError
TRANGROUP:3127		       mov     dx, offset FULLDIR_PTR
TRANGROUP:312A
TRANGROUP:312A _CERRORJ:			       ; ...
TRANGROUP:312A		       jmp     cerror
TRANGROUP:312D ; ---------------------------------------------------------------------------
TRANGROUP:312D
TRANGROUP:312D OpenError:			       ; ...
TRANGROUP:312D		       mov     [cs:msg_disp_class], 1
TRANGROUP:3133		       mov     dx, offset extend_buf_ptr
TRANGROUP:3136		       mov     [cs:extend_buf_ptr], ax
TRANGROUP:313A		       jmp     cerror
TRANGROUP:313A endp	       TESTDOREIN
TRANGROUP:313A
TRANGROUP:313D
TRANGROUP:313D ; =============== S U B R O U T I N E =======================================
TRANGROUP:313D
TRANGROUP:313D
TRANGROUP:313D proc	       TESTDOREOUT near	       ; ...
TRANGROUP:313D		       cmp     [ds:Re_OutStr], 0 ; byte
TRANGROUP:3142		       jnz     short REOUTEXISTS
TRANGROUP:3144		       jmp     NOREOUT
TRANGROUP:3147 ; ---------------------------------------------------------------------------
TRANGROUP:3147
TRANGROUP:3147 REOUTEXISTS:			       ; ...
TRANGROUP:3147		       cmp     [ds:Re_Out_App],	0 ; byte
TRANGROUP:314C		       jz      short REOUTCRT
TRANGROUP:314E		       mov     dx, offset Re_OutStr
TRANGROUP:3151		       mov     ax, 3D02h       ; (OPEN SHL 8) OR 2
TRANGROUP:3154		       push    ax
TRANGROUP:3155		       int     21h	       ; DOS - 2+ - OPEN DISK FILE WITH	HANDLE
TRANGROUP:3155					       ; DS:DX -> ASCIZ	filename
TRANGROUP:3155					       ; AL = access mode
TRANGROUP:3155					       ; 2 - read & write
TRANGROUP:3157		       pop     bx
TRANGROUP:3158		       jb      short OpenWriteError
TRANGROUP:315A		       mov     bx, ax
TRANGROUP:315C		       mov     ax, 4400h       ; IOCTL<<8
TRANGROUP:315F		       int     21h	       ; DOS - 2+ - IOCTL - GET	DEVICE INFORMATION
TRANGROUP:315F					       ; BX = file or device handle
TRANGROUP:3161		       test    dl, 80h
TRANGROUP:3164		       jnz     short SET_REOUT
TRANGROUP:3166		       mov     ax, 4202h       ; (LSEEK	SHL 8) OR 2
TRANGROUP:3169		       mov     cx, 0FFFFh
TRANGROUP:316C		       mov     dx, cx
TRANGROUP:316E		       int     21h	       ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
TRANGROUP:316E					       ; AL = method: offset from end of file
TRANGROUP:3170		       push    cs
TRANGROUP:3171		       pop     ds
TRANGROUP:3172		       mov     ax, 3F00h       ; (READ SHL 8)
TRANGROUP:3175		       mov     cx, 1
TRANGROUP:3178		       mov     dx, offset One_Char_Val
TRANGROUP:317B		       int     21h	       ; DOS - 2+ - READ FROM FILE WITH	HANDLE
TRANGROUP:317B					       ; BX = file handle, CX =	number of bytes	to read
TRANGROUP:317B					       ; DS:DX -> buffer
TRANGROUP:317D		       jb      short OpenWriteError
TRANGROUP:317F		       cmp     ax, cx
TRANGROUP:3181		       jnz     short reout_0_length
TRANGROUP:3183		       cmp     [One_Char_Val], 1Ah ; Was char an eof mark?
TRANGROUP:3188		       mov     ds, [RESSEG]
TRANGROUP:318C		       assume ds:RESGROUP
TRANGROUP:318C		       jnz     short SET_REOUT ; No, just continue
TRANGROUP:318E		       mov     ax, 4201h       ; (LSEEK<<8)|1
TRANGROUP:3191		       mov     cx, 0FFFFh      ; -1 ; LSEEK back one byte
TRANGROUP:3194		       mov     dx, cx
TRANGROUP:3196		       int     21h	       ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
TRANGROUP:3196					       ; AL = method: offset from present location
TRANGROUP:3198		       jmp     short SET_REOUT
TRANGROUP:319A ; ---------------------------------------------------------------------------
TRANGROUP:319A
TRANGROUP:319A reout_0_length:			       ; ...
TRANGROUP:319A		       mov     ds, [cs:RESSEG]
TRANGROUP:319F		       mov     ax, 4200h       ; (LSEEK	SHL 8)
TRANGROUP:31A2		       xor     cx, cx	       ; Offset	is 0 ; Move to beginning of file
TRANGROUP:31A4		       mov     dx, cx
TRANGROUP:31A6		       int     21h	       ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
TRANGROUP:31A6					       ; AL = method: offset from beginning of file
TRANGROUP:31A8		       jmp     short SET_REOUT
TRANGROUP:31AA ; ---------------------------------------------------------------------------
TRANGROUP:31AA
TRANGROUP:31AA OpenWriteError:			       ; ...
TRANGROUP:31AA		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:31AD		       stc
TRANGROUP:31AE		       jnz     short REOUTCRT
TRANGROUP:31B0		       jmp     REDIRERR
TRANGROUP:31B3 ; ---------------------------------------------------------------------------
TRANGROUP:31B3
TRANGROUP:31B3 REOUTCRT:			       ; ...
TRANGROUP:31B3		       mov     dx, offset Re_OutStr
TRANGROUP:31B6		       xor     cx, cx
TRANGROUP:31B8		       mov     ah, 3Ch	       ; CREAT
TRANGROUP:31BA		       push    ax
TRANGROUP:31BB		       int     21h	       ; DOS - 2+ - CREATE A FILE WITH HANDLE (CREAT)
TRANGROUP:31BB					       ; CX = attributes for file
TRANGROUP:31BB					       ; DS:DX -> ASCIZ	filename (may include drive and	path)
TRANGROUP:31BD		       pop     bx
TRANGROUP:31BE		       jnb     short NOREDIRERR
TRANGROUP:31C0		       jmp     REDIRERR
TRANGROUP:31C3 ; ---------------------------------------------------------------------------
TRANGROUP:31C3
TRANGROUP:31C3 NOREDIRERR:			       ; ...
TRANGROUP:31C3		       mov     bx, ax
TRANGROUP:31C5
TRANGROUP:31C5 SET_REOUT:			       ; ...
TRANGROUP:31C5		       mov     al, 0FFh
TRANGROUP:31C7		       xchg    al, [bx+18h]    ; [bx+PDB.JFN_TABLE]
TRANGROUP:31CA		       mov     [ds:19h], al    ; [PDB.JFN_TABLE+1]
TRANGROUP:31CD
TRANGROUP:31CD NOREOUT:				       ; ...
TRANGROUP:31CD		       retn
TRANGROUP:31CD endp	       TESTDOREOUT
TRANGROUP:31CD
TRANGROUP:31CE
TRANGROUP:31CE ; =============== S U B R O U T I N E =======================================
TRANGROUP:31CE
TRANGROUP:31CE
TRANGROUP:31CE proc	       dstrlen near	       ; ...
TRANGROUP:31CE		       push    ax
TRANGROUP:31CF		       xor     cx, cx
TRANGROUP:31D1		       cld
TRANGROUP:31D2
TRANGROUP:31D2 dloop:				       ; ...
TRANGROUP:31D2		       lodsb
TRANGROUP:31D3		       inc     cx
TRANGROUP:31D4		       or      al, al
TRANGROUP:31D6		       jnz     short dloop
TRANGROUP:31D8		       sub     si, cx
TRANGROUP:31DA		       pop     ax
TRANGROUP:31DB
TRANGROUP:31DB TRIAGEERR_RETN:			       ; ...
TRANGROUP:31DB		       retn
TRANGROUP:31DB endp	       dstrlen
TRANGROUP:31DB
TRANGROUP:31DC
TRANGROUP:31DC ; =============== S U B R O U T I N E =======================================
TRANGROUP:31DC
TRANGROUP:31DC
TRANGROUP:31DC proc	       TriageError near	       ; ...
TRANGROUP:31DC		       jnb     short TRIAGEERR_RETN ; GET_EXT_ERR_NUMBER
TRANGROUP:31DE		       pushf
TRANGROUP:31DF		       push    bx
TRANGROUP:31E0		       push    cx
TRANGROUP:31E1		       push    si
TRANGROUP:31E2		       push    di
TRANGROUP:31E3		       push    bp
TRANGROUP:31E4		       push    es
TRANGROUP:31E5		       push    ds
TRANGROUP:31E6		       push    ax
TRANGROUP:31E7		       push    dx
TRANGROUP:31E8		       mov     ah, 59h
TRANGROUP:31EA		       int     21h	       ; DOS - 3+ - GET	EXTENDED ERROR CODE
TRANGROUP:31EA					       ; BX = version code (0000h for DOS 3.x)
TRANGROUP:31EC		       pop     cx
TRANGROUP:31ED		       pop     bx
TRANGROUP:31EE		       mov     dx, offset ACCDEN_PTR
TRANGROUP:31F1		       cmp     ax, 65	       ; network access	denied?
TRANGROUP:31F4		       jz      short NoMove    ; Yes, return it.
TRANGROUP:31F6		       mov     ax, bx
TRANGROUP:31F8		       mov     dx, cx
TRANGROUP:31FA
TRANGROUP:31FA NoMove:				       ; ...
TRANGROUP:31FA		       pop     ds
TRANGROUP:31FB		       assume ds:nothing
TRANGROUP:31FB		       pop     es
TRANGROUP:31FC		       assume es:nothing
TRANGROUP:31FC		       pop     bp
TRANGROUP:31FD		       pop     di
TRANGROUP:31FE		       pop     si
TRANGROUP:31FF		       pop     cx
TRANGROUP:3200		       pop     bx
TRANGROUP:3201		       popf
TRANGROUP:3202		       retn
TRANGROUP:3202 endp	       TriageError
TRANGROUP:3202
TRANGROUP:3203 ; ---------------------------------------------------------------------------
TRANGROUP:3203
TRANGROUP:3203 Triage_Init:			       ; ...
TRANGROUP:3203		       call    TriageError
TRANGROUP:3206		       retf
TRANGROUP:3207
TRANGROUP:3207 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3207
TRANGROUP:3207
TRANGROUP:3207 proc	       Move_To_SrcBuf near     ; ...
TRANGROUP:3207		       push    si
TRANGROUP:3208		       push    di
TRANGROUP:3209		       push    cx
TRANGROUP:320A		       mov     di, offset SrcBuf
TRANGROUP:320D		       xor     cx, cx
TRANGROUP:320F		       mov     ax, cx
TRANGROUP:3211		       push    di
TRANGROUP:3212		       lodsb
TRANGROUP:3213
TRANGROUP:3213 mts_get_chars:			       ; ...
TRANGROUP:3213		       cmp     al, 0
TRANGROUP:3215		       jz      short mts_end_string
TRANGROUP:3217		       stosb
TRANGROUP:3218		       inc     cx
TRANGROUP:3219		       lodsb
TRANGROUP:321A		       jmp     short mts_get_chars
TRANGROUP:321C ; ---------------------------------------------------------------------------
TRANGROUP:321C
TRANGROUP:321C mts_end_string:			       ; ...
TRANGROUP:321C		       mov     al, 0Dh	       ; END_OF_LINE_IN
TRANGROUP:321E		       stosb
TRANGROUP:321F		       pop     di
TRANGROUP:3220		       push    cs
TRANGROUP:3221		       pop     ds
TRANGROUP:3222		       assume ds:TRANGROUP
TRANGROUP:3222		       mov     [PathCnt], cx
TRANGROUP:3226		       mov     [PathPos], di
TRANGROUP:322A		       pop     cx
TRANGROUP:322B		       pop     di
TRANGROUP:322C		       pop     si
TRANGROUP:322D		       retn
TRANGROUP:322D endp	       Move_To_SrcBuf
TRANGROUP:322D
TRANGROUP:322E
TRANGROUP:322E ; =============== S U B R O U T I N E =======================================
TRANGROUP:322E
TRANGROUP:322E
TRANGROUP:322E proc	       SINGLETEST near	       ; ...
TRANGROUP:322E		       push    ds
TRANGROUP:322F		       mov     ds, [cs:RESSEG]
TRANGROUP:3234		       assume ds:RESGROUP
TRANGROUP:3234		       cmp     [SingleCom], 0  ; word
TRANGROUP:3239		       jz      short TESTDONE
TRANGROUP:323B		       cmp     [SingleCom], 0EFFFh
TRANGROUP:3241
TRANGROUP:3241 TESTDONE:			       ; ...
TRANGROUP:3241		       pop     ds
TRANGROUP:3242		       assume ds:nothing
TRANGROUP:3242		       retn
TRANGROUP:3242 endp	       SINGLETEST
TRANGROUP:3242
TRANGROUP:3243
TRANGROUP:3243 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3243
TRANGROUP:3243
TRANGROUP:3243 proc	       SetRest1	near	       ; ...
TRANGROUP:3243		       mov     al, 1
TRANGROUP:3243 endp	       SetRest1
TRANGROUP:3243
TRANGROUP:3245
TRANGROUP:3245 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3245
TRANGROUP:3245
TRANGROUP:3245 proc	       SETREST near	       ; ...
TRANGROUP:3245		       push    ds
TRANGROUP:3246		       mov     ds, [ds:RESSEG]
TRANGROUP:324A		       mov     [ds:RestDir], al
TRANGROUP:324D		       pop     ds
TRANGROUP:324E		       retn
TRANGROUP:324E endp	       SETREST
TRANGROUP:324E
TRANGROUP:324F
TRANGROUP:324F ; =============== S U B R O U T I N E =======================================
TRANGROUP:324F
TRANGROUP:324F
TRANGROUP:324F proc	       PIPEDEL near	       ; ...
TRANGROUP:324F		       push    ds
TRANGROUP:3250		       push    dx
TRANGROUP:3251		       mov     ds, [cs:RESSEG]
TRANGROUP:3256		       assume ds:RESGROUP
TRANGROUP:3256		       mov     dx, 41Eh	       ; Pipe1 = offset	RESGROUP:EndInit
TRANGROUP:3259		       mov     ah, 41h	       ; Unlink
TRANGROUP:325B		       call    int_21h_indirect
TRANGROUP:325E		       mov     dx, 46Dh	       ; Pipe2 = offset	RESGROUP:EndInit+79
TRANGROUP:3261		       mov     ah, 41h	       ; Unlink
TRANGROUP:3263		       call    int_21h_indirect
TRANGROUP:3266		       pop     dx
TRANGROUP:3267		       call    PipeOff
TRANGROUP:326A		       mov     [PipeFiles], 0  ; byte
TRANGROUP:326F		       pop     ds
TRANGROUP:3270		       assume ds:nothing
TRANGROUP:3270		       retn
TRANGROUP:3270 endp	       PIPEDEL
TRANGROUP:3270
TRANGROUP:3271 ; ---------------------------------------------------------------------------
TRANGROUP:3271 ; START OF FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:3271
TRANGROUP:3271 PIPEERRSYN:			       ; ...
TRANGROUP:3271		       mov     dx, offset SYNTMES_PTR ;	MSG_1030
TRANGROUP:3274		       call    PIPEDEL
TRANGROUP:3277		       push    cs
TRANGROUP:3278		       pop     ds
TRANGROUP:3279		       assume ds:TRANGROUP
TRANGROUP:3279		       jmp     cerror
TRANGROUP:327C ; ---------------------------------------------------------------------------
TRANGROUP:327C
TRANGROUP:327C PIPERR:				       ; ...
TRANGROUP:327C		       pushf
TRANGROUP:327D		       call    TriageError
TRANGROUP:3280		       push    ax
TRANGROUP:3281		       push    dx
TRANGROUP:3282		       mov     dx, offset PIPEEMES_PTR
TRANGROUP:3285		       call    PIPEDEL
TRANGROUP:3288		       push    cs
TRANGROUP:3289		       pop     ds
TRANGROUP:328A		       call    std_eprintf
TRANGROUP:328D		       pop     dx
TRANGROUP:328E		       pop     ax
TRANGROUP:328F		       popf
TRANGROUP:3290		       cmp     ax, 65	       ; network access	denied
TRANGROUP:3293		       jnz     short TCOMMANDJ
TRANGROUP:3295		       jmp     cerror
TRANGROUP:3298 ; ---------------------------------------------------------------------------
TRANGROUP:3298
TRANGROUP:3298 TCOMMANDJ:			       ; ...
TRANGROUP:3298		       jmp     TCOMMAND
TRANGROUP:329B ; ---------------------------------------------------------------------------
TRANGROUP:329B
TRANGROUP:329B PIPEPROCSTRT:			       ; ...
TRANGROUP:329B		       mov     ds, [RESSEG]
TRANGROUP:329F		       assume ds:RESGROUP
TRANGROUP:329F		       inc     [PipeFiles]     ; byte
TRANGROUP:32A3		       push    es
TRANGROUP:32A4		       push    di
TRANGROUP:32A5		       push    ds
TRANGROUP:32A6		       push    si
TRANGROUP:32A7		       push    ds
TRANGROUP:32A8		       push    es
TRANGROUP:32A9		       pop     ds
TRANGROUP:32AA		       assume ds:nothing
TRANGROUP:32AA		       mov     si, offset TempVarName ;	"TEMP="
TRANGROUP:32AD		       call    find_name_in_environment
TRANGROUP:32B0		       pop     ds
TRANGROUP:32B1		       jb      short no_temp_path
TRANGROUP:32B3		       push    ds
TRANGROUP:32B4		       push    es
TRANGROUP:32B5		       pop     ds
TRANGROUP:32B6		       pop     es
TRANGROUP:32B7		       mov     si, di
TRANGROUP:32B9		       call    skip_white      ; skip white space chars
TRANGROUP:32BC		       call    copy_pipe_path
TRANGROUP:32BF		       push    es
TRANGROUP:32C0		       pop     ds
TRANGROUP:32C1		       mov     dx, offset EndInit ; 41Eh
TRANGROUP:32C4		       mov     ax, 4300h       ; (CHMOD	shl 8) or 0
TRANGROUP:32C7		       call    int_21h_indirect
TRANGROUP:32CA		       jb      short no_temp_path
TRANGROUP:32CC		       test    cx, 10h	       ; is it a directory?
TRANGROUP:32D0		       jnz     short no_temp_path ; yes, continue
TRANGROUP:32D2		       stc		       ; no, indicate fail
TRANGROUP:32D3
TRANGROUP:32D3 no_temp_path:			       ; ...
TRANGROUP:32D3		       pop     si
TRANGROUP:32D4		       pop     ds
TRANGROUP:32D5		       pop     di
TRANGROUP:32D6		       pop     es
TRANGROUP:32D7		       jnb     short crt_temp
TRANGROUP:32D9		       mov     ah, 2Eh ; '.'
TRANGROUP:32DB		       mov     [ds:41Eh], ah   ; mov [Pipe1],ah
TRANGROUP:32DF		       mov     [ds:46Dh], ah   ; mov [Pipe2],ah
TRANGROUP:32E3		       xor     ah, ah
TRANGROUP:32E5		       mov     [ds:41Fh], ah   ; mov [Pipe1+1],ah
TRANGROUP:32E9		       mov     [ds:46Eh], ah   ; mov [Pipe2+1],ah
TRANGROUP:32ED
TRANGROUP:32ED crt_temp:			       ; ...
TRANGROUP:32ED		       mov     dx, 41Eh	       ; mov dx,Pipe1
TRANGROUP:32F0		       xor     cx, cx
TRANGROUP:32F2		       mov     ah, 5Ah	       ; CREATETEMPFILE
TRANGROUP:32F4		       call    int_21h_indirect
TRANGROUP:32F7		       jnb     short pps0
TRANGROUP:32F9		       jmp     short PIPERR
TRANGROUP:32FB ; ---------------------------------------------------------------------------
TRANGROUP:32FB
TRANGROUP:32FB pps0:				       ; ...
TRANGROUP:32FB		       mov     bx, ax
TRANGROUP:32FD		       mov     ah, 3Eh	       ; CLOSE
TRANGROUP:32FF		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:32FF					       ; BX = file handle
TRANGROUP:3301		       mov     dx, 46Dh	       ; mov dx,Pipe2
TRANGROUP:3304		       mov     ah, 5Ah	       ; CREATETEMPFILE
TRANGROUP:3306		       call    int_21h_indirect
TRANGROUP:3309		       jnb     short pps1
TRANGROUP:330B		       jmp     PIPERR
TRANGROUP:330E ; ---------------------------------------------------------------------------
TRANGROUP:330E
TRANGROUP:330E pps1:				       ; ...
TRANGROUP:330E		       mov     bx, ax
TRANGROUP:3310		       mov     ah, 3Eh	       ; CLOSE
TRANGROUP:3312		       call    int_21h_indirect
TRANGROUP:3315		       call    TESTDOREIN
TRANGROUP:3318		       mov     si, [ds:4BCh]   ; [PipePtr] ; offset RESGROUP:EndInit+158
TRANGROUP:331C		       cmp     [ds:SingleCom], 0FFFFh ;	-1
TRANGROUP:3321		       jnz     short NOSINGP
TRANGROUP:3323		       mov     [ds:SingleCom], 0F000h ;	Flag single command pipe
TRANGROUP:3329
TRANGROUP:3329 NOSINGP:				       ; ...
TRANGROUP:3329		       jmp     short FIRSTPIPE
TRANGROUP:332B ; ---------------------------------------------------------------------------
TRANGROUP:332B
TRANGROUP:332B PIPEPROC:			       ; ...
TRANGROUP:332B		       and     [ds:EchoFlag], 0FEh
TRANGROUP:3330		       mov     si, [ds:4BCh]   ; [PipePtr] ; offset RESGROUP:EndInit+158
TRANGROUP:3334		       lodsb
TRANGROUP:3335		       cmp     al, 7Ch ; '|'   ; ALTPIPECHR
TRANGROUP:3337		       jz      short ISPIPE1
TRANGROUP:3339		       cmp     al, 7Ch ; '|'   ; VBAR
TRANGROUP:333B		       jz      short ISPIPE1
TRANGROUP:333D		       jmp     PIPEEND
TRANGROUP:3340 ; ---------------------------------------------------------------------------
TRANGROUP:3340
TRANGROUP:3340 ISPIPE1:				       ; ...
TRANGROUP:3340		       mov     dx, [ds:InPipePtr]
TRANGROUP:3344		       mov     ax, 3D00h       ; OPEN*256
TRANGROUP:3347		       call    int_21h_indirect
TRANGROUP:334A
TRANGROUP:334A PIPEERRJ:			       ; ...
TRANGROUP:334A		       jnb     short NO_PIPEERR
TRANGROUP:334C		       jmp     PIPERR
TRANGROUP:334F ; ---------------------------------------------------------------------------
TRANGROUP:334F
TRANGROUP:334F NO_PIPEERR:			       ; ...
TRANGROUP:334F		       mov     bx, ax
TRANGROUP:3351		       mov     al, 0FFh
TRANGROUP:3353		       xchg    al, [bx+18h]    ; [bx+PDB.JFN_TABLE]
TRANGROUP:3356		       mov     [ds:18h], al    ; [PDB.JFN_TABLE]
TRANGROUP:3359
TRANGROUP:3359 FIRSTPIPE:			       ; ...
TRANGROUP:3359		       mov     di, (offset COMBUF+2)
TRANGROUP:335C		       xor     cx, cx
TRANGROUP:335E		       cmp     [byte ptr si], 0Dh ; ; '|<CR>'
TRANGROUP:3361		       jnz     short PIPEOK1
TRANGROUP:3363
TRANGROUP:3363 PIPEERRSYNJ:			       ; ...
TRANGROUP:3363		       jmp     PIPEERRSYN
TRANGROUP:3366 ; ---------------------------------------------------------------------------
TRANGROUP:3366
TRANGROUP:3366 PIPEOK1:				       ; ...
TRANGROUP:3366		       mov     al, 7Ch ; '|'   ; VBAR
TRANGROUP:3368		       cmp     [si], al	       ; '||' ?
TRANGROUP:336A		       jz      short PIPEERRSYNJ ; error
TRANGROUP:336C		       cmp     [byte ptr si], 7Ch ; '|' ; ALTPIPECHR
TRANGROUP:336F		       jz      short PIPEERRSYNJ
TRANGROUP:3371
TRANGROUP:3371 PIPECOMLP:			       ; ...
TRANGROUP:3371		       lodsb
TRANGROUP:3372		       stosb
TRANGROUP:3373		       call    testkanj
TRANGROUP:3376		       jz      short NOTKANJ5
TRANGROUP:3378		       movsb
TRANGROUP:3379		       inc     cx
TRANGROUP:337A		       inc     cx
TRANGROUP:337B		       jmp     short PIPECOMLP
TRANGROUP:337D ; ---------------------------------------------------------------------------
TRANGROUP:337D
TRANGROUP:337D NOTKANJ5:			       ; ...
TRANGROUP:337D		       cmp     al, 0Dh
TRANGROUP:337F		       jz      short LASTPIPE
TRANGROUP:3381		       inc     cx
TRANGROUP:3382		       cmp     al, 7Ch ; '|'   ; ALTPIPECHR
TRANGROUP:3384		       jz      short ISPIPE2
TRANGROUP:3386		       cmp     al, 7Ch ; '|'   ; VBAR
TRANGROUP:3388		       jnz     short PIPECOMLP
TRANGROUP:338A
TRANGROUP:338A ISPIPE2:				       ; ...
TRANGROUP:338A		       mov     [byte ptr es:di-1], 0Dh
TRANGROUP:338F		       dec     cx
TRANGROUP:3390		       mov     [es:COMBUF+1], cl
TRANGROUP:3395		       dec     si
TRANGROUP:3396		       mov     [ds:4BCh], si   ; ; [PipePtr] = [EndInit+158]
TRANGROUP:339A		       mov     dx, [ds:OutPipePtr]
TRANGROUP:339E		       push    cx
TRANGROUP:339F		       xor     cx, cx
TRANGROUP:33A1		       mov     ax, 3C00h       ; CREAT*256
TRANGROUP:33A4		       call    int_21h_indirect
TRANGROUP:33A7		       pop     cx
TRANGROUP:33A8		       jb      short PIPEERRJ
TRANGROUP:33AA		       mov     bx, ax
TRANGROUP:33AC		       mov     al, 0FFh
TRANGROUP:33AE		       xchg    al, [bx+18h]    ; [bx+PDB.JFN_TABLE]
TRANGROUP:33B1		       mov     [ds:19h], al    ; [PDB.JFN_TABLE+1]
TRANGROUP:33B4		       xchg    dx, [ds:InPipePtr]
TRANGROUP:33B8		       mov     [ds:OutPipePtr],	dx
TRANGROUP:33BC		       jmp     short PIPECOM
TRANGROUP:33BE ; ---------------------------------------------------------------------------
TRANGROUP:33BE
TRANGROUP:33BE LASTPIPE:			       ; ...
TRANGROUP:33BE		       mov     [es:COMBUF+1], cl
TRANGROUP:33C3		       dec     si
TRANGROUP:33C4		       mov     [ds:4BCh], si   ; mov [PipePtr],si
TRANGROUP:33C8		       call    TESTDOREOUT
TRANGROUP:33CB
TRANGROUP:33CB PIPECOM:				       ; ...
TRANGROUP:33CB		       push    cs
TRANGROUP:33CC		       pop     ds
TRANGROUP:33CD		       assume ds:TRANGROUP
TRANGROUP:33CD		       jmp     NOPIPEPROC
TRANGROUP:33D0 ; ---------------------------------------------------------------------------
TRANGROUP:33D0
TRANGROUP:33D0 PIPEEND:				       ; ...
TRANGROUP:33D0		       call    PIPEDEL
TRANGROUP:33D3		       cmp     [ds:SingleCom], 0F000h
TRANGROUP:33D9		       jnz     short NOSINGP2
TRANGROUP:33DB		       mov     [ds:SingleCom], 0FFFFh ;	-1
TRANGROUP:33E1
TRANGROUP:33E1 NOSINGP2:			       ; ...
TRANGROUP:33E1		       jmp     TCOMMAND
TRANGROUP:33E1 ; END OF	FUNCTION CHUNK FOR PROMPTBAT
TRANGROUP:33E4
TRANGROUP:33E4 ; =============== S U B R O U T I N E =======================================
TRANGROUP:33E4
TRANGROUP:33E4
TRANGROUP:33E4 proc	       DATINIT far	       ; ...
TRANGROUP:33E4		       mov     [cs:RESSEG], ds
TRANGROUP:33E9		       push    es
TRANGROUP:33EA		       push    ds
TRANGROUP:33EB		       mov     ax, cs
TRANGROUP:33ED		       mov     es, ax
TRANGROUP:33EF		       assume es:TRANGROUP
TRANGROUP:33EF		       mov     ds, ax
TRANGROUP:33F1		       call    TSYSLOADMSG     ; preload messages
TRANGROUP:33F4		       mov     dx, offset STACK	; INTERNATVARS
TRANGROUP:33F7		       mov     ax, 3800h       ; INTERNATIONAL*256
TRANGROUP:33FA		       call    int_21h_indirect
TRANGROUP:33FD		       mov     word ptr	ds:81h,	0Dh
TRANGROUP:3403		       mov     [COMBUF], 128
TRANGROUP:3408		       mov     [word ptr COMBUF+1], 0D01h
TRANGROUP:340E		       call    DATE
TRANGROUP:3411		       call    CTIME
TRANGROUP:3414		       pop     ds
TRANGROUP:3415		       assume ds:nothing
TRANGROUP:3415		       pop     es
TRANGROUP:3416		       assume es:nothing
TRANGROUP:3416		       retf
TRANGROUP:3416 endp	       DATINIT
TRANGROUP:3416
TRANGROUP:3417
TRANGROUP:3417 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3417
TRANGROUP:3417
TRANGROUP:3417 proc	       DATE near	       ; ...
TRANGROUP:3417		       mov     si, 81h
TRANGROUP:341A		       mov     di, offset PARSE_DATE
TRANGROUP:341D		       xor     cx, cx
TRANGROUP:341F		       xor     dx, dx
TRANGROUP:3421		       call    cmd_parse
TRANGROUP:3424		       cmp     ax, 0FFFFh
TRANGROUP:3427		       jz      short PRMTDAT
TRANGROUP:3429		       cmp     ax, 0
TRANGROUP:342C		       jnz     short DATERR
TRANGROUP:342E		       jmp     short COMDAT
TRANGROUP:3430 ; ---------------------------------------------------------------------------
TRANGROUP:3430
TRANGROUP:3430 PRMTDAT:				       ; ...
TRANGROUP:3430		       call    GetDate
TRANGROUP:3433		       xchg    dh, dl
TRANGROUP:3435		       mov     [ds:CurDat_yr], cx
TRANGROUP:3439		       mov     [ds:CurDat_mo_day], dx
TRANGROUP:343D		       mov     dx, offset CurDat_Ptr
TRANGROUP:3440		       call    std_printf
TRANGROUP:3443
TRANGROUP:3443 GET_NEW_DATE:			       ; ...
TRANGROUP:3443		       call    GETDAT
TRANGROUP:3446		       cmp     ax, 0FFFFh      ; -1
TRANGROUP:3449		       jz      short date_end
TRANGROUP:344B		       cmp     ax, 0
TRANGROUP:344E		       jnz     short DATERR
TRANGROUP:3450
TRANGROUP:3450 COMDAT:				       ; ...
TRANGROUP:3450		       mov     cx, [ds:DATE_YEAR]
TRANGROUP:3454		       mov     dh, [ds:DATE_MONTH]
TRANGROUP:3458		       mov     dl, [ds:DATE_DAY]
TRANGROUP:345C		       push    cx
TRANGROUP:345D		       push    dx
TRANGROUP:345E		       mov     cx, 1	       ; set 1 positional entered
TRANGROUP:3461		       xor     dx, dx
TRANGROUP:3463		       call    cmd_parse
TRANGROUP:3466		       cmp     al, 0FFh
TRANGROUP:3468		       pop     dx
TRANGROUP:3469		       pop     cx
TRANGROUP:346A		       jnz     short DATERR
TRANGROUP:346C		       mov     ah, 2Bh	       ; SET_DATE
TRANGROUP:346E		       call    int_21h_indirect
TRANGROUP:3471		       or      al, al
TRANGROUP:3473		       jnz     short DATERR
TRANGROUP:3475
TRANGROUP:3475 date_end:			       ; ...
TRANGROUP:3475		       retn
TRANGROUP:3476 ; ---------------------------------------------------------------------------
TRANGROUP:3476
TRANGROUP:3476 DATERR:				       ; ...
TRANGROUP:3476		       call    CRLF2
TRANGROUP:3479		       mov     dx, offset BADDAT_PTR
TRANGROUP:347C		       call    std_printf
TRANGROUP:347F		       jmp     short GET_NEW_DATE
TRANGROUP:347F endp	       DATE
TRANGROUP:347F
TRANGROUP:3481
TRANGROUP:3481 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3481
TRANGROUP:3481
TRANGROUP:3481 proc	       CTIME near	       ; ...
TRANGROUP:3481		       mov     si, 81h
TRANGROUP:3484		       mov     di, offset PARSE_TIME
TRANGROUP:3487		       xor     cx, cx
TRANGROUP:3489		       xor     dx, dx
TRANGROUP:348B		       call    cmd_parse
TRANGROUP:348E		       cmp     ax, 0FFFFh
TRANGROUP:3491		       jz      short PRMTTIM
TRANGROUP:3493		       cmp     ax, 0
TRANGROUP:3496		       jnz     short TIMERR
TRANGROUP:3498		       jmp     short COMTIM
TRANGROUP:349A ; ---------------------------------------------------------------------------
TRANGROUP:349A
TRANGROUP:349A PRMTTIM:				       ; ...
TRANGROUP:349A		       mov     ah, 2Ch	       ; Get_Time
TRANGROUP:349C		       call    int_21h_indirect
TRANGROUP:349F		       xchg    ch, cl
TRANGROUP:34A1		       xchg    dh, dl
TRANGROUP:34A3		       mov     [ds:CurTim_hr_min], cx
TRANGROUP:34A7		       mov     [ds:CurTim_Sec_hn], dx
TRANGROUP:34AB		       mov     dx, offset CurTim_Ptr
TRANGROUP:34AE		       call    std_printf
TRANGROUP:34B1
TRANGROUP:34B1 GET_NEW_TIME:			       ; ...
TRANGROUP:34B1		       call    GETTIM
TRANGROUP:34B4		       cmp     ax, 0FFFFh
TRANGROUP:34B7		       jz      short time_end
TRANGROUP:34B9		       cmp     ax, 0
TRANGROUP:34BC		       jnz     short TIMERR
TRANGROUP:34BE
TRANGROUP:34BE COMTIM:				       ; ...
TRANGROUP:34BE		       mov     ch, [ds:TIME_HOUR]
TRANGROUP:34C2		       mov     cl, [ds:TIME_MINUTES]
TRANGROUP:34C6		       mov     dh, [ds:TIME_SECONDS]
TRANGROUP:34CA		       mov     dl, [ds:TIME_FRACTION]
TRANGROUP:34CE		       push    cx
TRANGROUP:34CF		       push    dx
TRANGROUP:34D0		       mov     cx, 1
TRANGROUP:34D3		       xor     dx, dx
TRANGROUP:34D5		       call    cmd_parse
TRANGROUP:34D8		       cmp     al, 0FFh
TRANGROUP:34DA		       pop     dx
TRANGROUP:34DB		       pop     cx
TRANGROUP:34DC		       jnz     short TIMERR
TRANGROUP:34DE		       mov     ah, 2Dh	       ; SET_TIME
TRANGROUP:34E0		       call    int_21h_indirect
TRANGROUP:34E3		       or      al, al
TRANGROUP:34E5		       jnz     short TIMERR
TRANGROUP:34E7
TRANGROUP:34E7 time_end:			       ; ...
TRANGROUP:34E7		       retn
TRANGROUP:34E8 ; ---------------------------------------------------------------------------
TRANGROUP:34E8
TRANGROUP:34E8 TIMERR:				       ; ...
TRANGROUP:34E8		       call    CRLF2
TRANGROUP:34EB		       mov     dx, offset BadTim_Ptr
TRANGROUP:34EE		       call    std_printf
TRANGROUP:34F1		       jmp     short GET_NEW_TIME
TRANGROUP:34F1 endp	       CTIME
TRANGROUP:34F1
TRANGROUP:34F3
TRANGROUP:34F3 ; =============== S U B R O U T I N E =======================================
TRANGROUP:34F3
TRANGROUP:34F3
TRANGROUP:34F3 proc	       SetInitFlag near	       ; ...
TRANGROUP:34F3		       mov     ds, [ds:RESSEG]
TRANGROUP:34F7		       and     [ds:InitFlag], 0FDh
TRANGROUP:34FC		       or      [ds:InitFlag], cl
TRANGROUP:3500		       push    cs
TRANGROUP:3501		       pop     ds
TRANGROUP:3502		       assume ds:TRANGROUP
TRANGROUP:3502		       retn
TRANGROUP:3502 endp	       SetInitFlag
TRANGROUP:3502
TRANGROUP:3503
TRANGROUP:3503 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3503
TRANGROUP:3503
TRANGROUP:3503 proc	       PipeOff near	       ; ...
TRANGROUP:3503		       push    ds
TRANGROUP:3504		       push    ax
TRANGROUP:3505		       mov     ds, [cs:RESSEG]
TRANGROUP:350A		       assume ds:nothing
TRANGROUP:350A		       xor     al, al
TRANGROUP:350C		       xchg    al, [ds:PipeFlag]
TRANGROUP:3510		       or      al, al
TRANGROUP:3512		       jz      short PipeOffDone
TRANGROUP:3514		       shr     [ds:EchoFlag], 1
TRANGROUP:3518
TRANGROUP:3518 PipeOffDone:			       ; ...
TRANGROUP:3518		       pop     ax
TRANGROUP:3519		       pop     ds
TRANGROUP:351A		       retn
TRANGROUP:351A endp	       PipeOff
TRANGROUP:351A
TRANGROUP:351B ; ---------------------------------------------------------------------------
TRANGROUP:351B
TRANGROUP:351B PRINT_TIME:			       ; ...
TRANGROUP:351B		       mov     ah, 2Ch
TRANGROUP:351D		       call    int_21h_indirect
TRANGROUP:3520		       push    es
TRANGROUP:3521		       push    cs
TRANGROUP:3522		       pop     es
TRANGROUP:3523		       assume es:TRANGROUP
TRANGROUP:3523		       xchg    ch, cl
TRANGROUP:3525		       xchg    dh, dl
TRANGROUP:3527		       mov     [cs:PromTim_hr_min], cx
TRANGROUP:352C		       mov     [cs:PromTim_Sec_hn], dx
TRANGROUP:3531		       mov     dx, offset promtim_ptr
TRANGROUP:3534		       call    std_printf
TRANGROUP:3537		       pop     es
TRANGROUP:3538		       assume es:nothing
TRANGROUP:3538		       retn
TRANGROUP:3539
TRANGROUP:3539 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3539
TRANGROUP:3539
TRANGROUP:3539 proc	       GETDAT near	       ; ...
TRANGROUP:3539		       mov     ax, 3800h       ; (International	SHL 8)
TRANGROUP:353C		       mov     dx, 5Ch ; '\'
TRANGROUP:353F		       call    int_21h_indirect
TRANGROUP:3542		       mov     si, dx
TRANGROUP:3544		       lodsw
TRANGROUP:3545		       mov     dx, [cs:usadat_ptr]
TRANGROUP:354A		       dec     ax
TRANGROUP:354B		       js      short printformat
TRANGROUP:354D		       mov     dx, [cs:eurdat_ptr]
TRANGROUP:3552		       jz      short printformat
TRANGROUP:3554		       mov     dx, [cs:japdat_ptr]
TRANGROUP:3559
TRANGROUP:3559 printformat:			       ; ...
TRANGROUP:3559		       mov     ax, dx
TRANGROUP:355B		       mov     dh, 0FFh	       ; util_msg_class
TRANGROUP:355D		       call    TSYSGETMSG
TRANGROUP:3560		       mov     [cs:NewDat_Format], si
TRANGROUP:3565		       mov     dx, offset NewDat_Ptr
TRANGROUP:3568		       call    std_printf
TRANGROUP:356B		       mov     [cs:NewDat_Format], 0
TRANGROUP:3572		       mov     ah, 0Ah	       ; Std_Con_String_Input
TRANGROUP:3574		       mov     dx, offset COMBUF
TRANGROUP:3577		       mov     cx, 2	       ; INITSPECIAL
TRANGROUP:357A		       call    SetInitFlag
TRANGROUP:357D		       call    int_21h_indirect
TRANGROUP:3580		       xor     cx, cx
TRANGROUP:3582		       call    SetInitFlag
TRANGROUP:3585		       call    CRLF2
TRANGROUP:3588		       mov     si, (offset COMBUF+2)
TRANGROUP:358B		       mov     di, offset PARSE_DATE
TRANGROUP:358E		       xor     cx, cx
TRANGROUP:3590		       xor     dx, dx
TRANGROUP:3592		       call    cmd_parse
TRANGROUP:3595		       retn
TRANGROUP:3595 endp	       GETDAT
TRANGROUP:3595
TRANGROUP:3596
TRANGROUP:3596 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3596
TRANGROUP:3596
TRANGROUP:3596 proc	       GETTIM near	       ; ...
TRANGROUP:3596		       xor     cx, cx
TRANGROUP:3598		       mov     dx, offset NewTim_Ptr
TRANGROUP:359B		       call    std_printf
TRANGROUP:359E		       mov     ah, 0Ah	       ; Std_Con_String_Input
TRANGROUP:35A0		       mov     dx, offset COMBUF
TRANGROUP:35A3		       mov     cx, 2
TRANGROUP:35A6		       call    SetInitFlag
TRANGROUP:35A9		       call    int_21h_indirect
TRANGROUP:35AC		       xor     cx, cx
TRANGROUP:35AE		       call    SetInitFlag
TRANGROUP:35B1		       call    CRLF2
TRANGROUP:35B4		       mov     si, (offset COMBUF+2)
TRANGROUP:35B7		       mov     di, offset PARSE_TIME
TRANGROUP:35BA		       xor     cx, cx
TRANGROUP:35BC		       xor     dx, dx
TRANGROUP:35BE		       call    cmd_parse
TRANGROUP:35C1		       retn
TRANGROUP:35C1 endp	       GETTIM
TRANGROUP:35C1
TRANGROUP:35C2
TRANGROUP:35C2 ; =============== S U B R O U T I N E =======================================
TRANGROUP:35C2
TRANGROUP:35C2
TRANGROUP:35C2 proc	       skip_white near	       ; ...
TRANGROUP:35C2		       cld
TRANGROUP:35C3
TRANGROUP:35C3 skw_lp:				       ; ...
TRANGROUP:35C3		       lodsb
TRANGROUP:35C4		       cmp     al, 20h ; ' '
TRANGROUP:35C6		       jz      short skw_lp
TRANGROUP:35C8		       cmp     al, 9
TRANGROUP:35CA		       jz      short skw_lp
TRANGROUP:35CC		       dec     si
TRANGROUP:35CD		       retn
TRANGROUP:35CD endp	       skip_white
TRANGROUP:35CD
TRANGROUP:35CE
TRANGROUP:35CE ; =============== S U B R O U T I N E =======================================
TRANGROUP:35CE
TRANGROUP:35CE
TRANGROUP:35CE proc	       copy_pipe_path near     ; ...
TRANGROUP:35CE		       mov     cx, 0FFFFh
TRANGROUP:35D1		       xor     al, al
TRANGROUP:35D3		       mov     di, si
TRANGROUP:35D5		       push    es
TRANGROUP:35D6		       push    ds
TRANGROUP:35D7		       pop     es
TRANGROUP:35D8		       cld
TRANGROUP:35D9		       push    di
TRANGROUP:35DA		       repne scasb
TRANGROUP:35DC		       pop     di
TRANGROUP:35DD		       pop     es
TRANGROUP:35DE		       not     cx
TRANGROUP:35E0		       mov     di, 41Eh	       ; Pipe1 ; (offset RESGROUP:EndInit)
TRANGROUP:35E3		       push    di
TRANGROUP:35E4		       push    cx
TRANGROUP:35E5		       rep movsb
TRANGROUP:35E7		       pop     cx
TRANGROUP:35E8		       pop     di
TRANGROUP:35E9		       push    ds
TRANGROUP:35EA		       push    es
TRANGROUP:35EB		       pop     ds
TRANGROUP:35EC		       mov     si, di
TRANGROUP:35EE		       mov     di, 46Dh	       ; Pipe2 ; (offset RESGROUP:EndInit+79)
TRANGROUP:35F1		       rep movsb
TRANGROUP:35F3		       pop     ds
TRANGROUP:35F4		       retn
TRANGROUP:35F4 endp	       copy_pipe_path
TRANGROUP:35F4
TRANGROUP:35F5
TRANGROUP:35F5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:35F5
TRANGROUP:35F5
TRANGROUP:35F5 proc	       PARSELINE near	       ; ...
TRANGROUP:35F5		       push    ax
TRANGROUP:35F6		       push    bx
TRANGROUP:35F7		       push    cx
TRANGROUP:35F8		       push    dx
TRANGROUP:35F9		       push    di
TRANGROUP:35FA		       push    si
TRANGROUP:35FB		       pushf
TRANGROUP:35FC		       mov     [ds:cpyflag], 0
TRANGROUP:3601		       mov     [ds:LASTARG], 0FFFFh
TRANGROUP:3607		       xor     ax, ax
TRANGROUP:3609		       mov     cx, 1092	       ; ARG_UNIT.SIZE
TRANGROUP:360C		       mov     di, offset ARG_ARGV ; offset ARG
TRANGROUP:360F		       rep stosb
TRANGROUP:3611		       mov     [ds:ARGBUF_PTR],	offset ARG_ARGBUF ; ARG+ARG_UNIT.argbuf
TRANGROUP:3617		       mov     [ds:ARG_ARGSWINFO], 0 ; [ARG+ARG_UNIT.argswinfo]
TRANGROUP:361D		       mov     [ds:ARG_ARGVCNT], 0 ; [ARG+ARG_UNIT.argvcnt]
TRANGROUP:3623		       mov     si, (offset COMBUF+2)
TRANGROUP:3626		       push    ds
TRANGROUP:3627		       mov     ds, [ds:RESSEG]
TRANGROUP:362B		       cmp     [ds:ForFlag], 0
TRANGROUP:3630		       pop     ds
TRANGROUP:3631		       jnz     short PCONT
TRANGROUP:3633		       mov     di, offset ARG_ARGFORCOMBUF ; ARG+ARG_UNIT.argforcombuf
TRANGROUP:3636		       xor     ch, ch
TRANGROUP:3638		       mov     cl, [ds:COMBUF+1]
TRANGROUP:363C		       inc     cl
TRANGROUP:363E		       rep movsb
TRANGROUP:3640		       mov     si, offset ARG_ARGFORCOMBUF ; ARG+ARG_UNIT.argforcombuf
TRANGROUP:3643
TRANGROUP:3643 PCONT:				       ; ...
TRANGROUP:3643		       mov     di, offset TPBUF	; destination is temporary token buffer
TRANGROUP:3646		       mov     bl, 20h ; ' '
TRANGROUP:3648
TRANGROUP:3648 PARSELOOP:			       ; ...
TRANGROUP:3648		       mov     [ds:COMPTR], si ; save ptr into original	command	buffer
TRANGROUP:364C		       xor     bp, bp
TRANGROUP:364E		       mov     [ds:expand_star], 0 ; byte ; don't expand *'s to ?'s
TRANGROUP:3653		       call    scanoff	       ; skip leading blanks
TRANGROUP:3656		       call    cparse	       ; byte off a token (args	in SI, DI, BL)
TRANGROUP:3659		       jnb     short MORE_PRSE
TRANGROUP:365B		       or      bp, bp
TRANGROUP:365D		       jz      short PARSEDONE
TRANGROUP:365F		       call    newarg
TRANGROUP:3662		       jmp     short PARSEDONE
TRANGROUP:3664 ; ---------------------------------------------------------------------------
TRANGROUP:3664
TRANGROUP:3664 MORE_PRSE:			       ; ...
TRANGROUP:3664		       mov     [ds:cpyflag], 2 ; tell CPARSE that 1st token is done
TRANGROUP:3669		       call    newarg	       ; add to	argv array (CX has char	count)
TRANGROUP:366C		       jnb     short PARSELOOP
TRANGROUP:366E		       jmp     short PARSE_ERROR
TRANGROUP:3670 ; ---------------------------------------------------------------------------
TRANGROUP:3670
TRANGROUP:3670 PARSEDONE:			       ; ...
TRANGROUP:3670		       popf
TRANGROUP:3671		       clc
TRANGROUP:3672		       jmp     short PARSE_EXIT
TRANGROUP:3674 ; ---------------------------------------------------------------------------
TRANGROUP:3674
TRANGROUP:3674 PARSE_ERROR:			       ; ...
TRANGROUP:3674		       popf
TRANGROUP:3675		       stc
TRANGROUP:3676
TRANGROUP:3676 PARSE_EXIT:			       ; ...
TRANGROUP:3676		       pop     si
TRANGROUP:3677		       pop     di
TRANGROUP:3678		       pop     dx
TRANGROUP:3679		       pop     cx
TRANGROUP:367A		       pop     bx
TRANGROUP:367B		       pop     ax
TRANGROUP:367C		       retn
TRANGROUP:367C endp	       PARSELINE
TRANGROUP:367C
TRANGROUP:367D
TRANGROUP:367D ; =============== S U B R O U T I N E =======================================
TRANGROUP:367D
TRANGROUP:367D
TRANGROUP:367D proc	       newarg near	       ; ...
TRANGROUP:367D		       push    bx
TRANGROUP:367E		       push    cx
TRANGROUP:367F		       push    dx
TRANGROUP:3680		       push    di
TRANGROUP:3681		       push    si
TRANGROUP:3682		       pushf
TRANGROUP:3683		       call    arg_switch
TRANGROUP:3686		       cmp     [ds:ARG_ARGVCNT], 64 ; [ARG+ARG_UNIT.argvcnt],ARGMAX
TRANGROUP:368B		       jge     short to_many_args
TRANGROUP:368D		       mov     dh, bh
TRANGROUP:368F		       mov     bx, [ds:ARG_ARGVCNT]
TRANGROUP:3693		       inc     [ds:ARG_ARGVCNT]	; inc word [ARG+ARG_UNIT.argvcnt]
TRANGROUP:3697		       mov     ax, offset ARG_ARGV ; ARG+ARG_UNIT.argv
TRANGROUP:369A		       call    argv_calc
TRANGROUP:369D		       mov     [word ptr bx+7],	0 ; [bx+ARGV_ELE.argsw_word]
TRANGROUP:36A2		       mov     [bx+5], cx      ; [bx+ARGV_ELE.arglen]
TRANGROUP:36A5		       mov     [bx+2], dh      ; [bx+ARGV_ELE.argflags]
TRANGROUP:36A8		       mov     si, [ds:ARGBUF_PTR]
TRANGROUP:36AC		       mov     [bx], si	       ; [bx+ARGV_ELE.argpointer]
TRANGROUP:36AE		       add     si, [ds:STARTEL]
TRANGROUP:36B2		       sub     si, di
TRANGROUP:36B4		       mov     [bx+3], si      ; [bx+ARGV_ELE.argstartel]
TRANGROUP:36B7		       mov     si, [ds:COMPTR]
TRANGROUP:36BB		       mov     [bx+9], si      ; [bx+ARGV_ELE.arg_ocomptr]
TRANGROUP:36BE		       mov     si, di
TRANGROUP:36C0		       mov     di, [ds:ARGBUF_PTR]
TRANGROUP:36C4		       add     di, cx
TRANGROUP:36C6		       cmp     di, (offset ARG_ARGBUF+7Fh) ; ARG+ARG_UNIT.argbuf+ARGBLEN-1
TRANGROUP:36CA		       jge     short buf_oflow
TRANGROUP:36CC		       sub     di, cx
TRANGROUP:36CE
TRANGROUP:36CE newarg_@:			       ; ...
TRANGROUP:36CE		       cld
TRANGROUP:36CF		       rep movsb
TRANGROUP:36D1		       mov     al, 0
TRANGROUP:36D3		       stosb
TRANGROUP:36D4		       mov     [ds:ARGBUF_PTR],	di
TRANGROUP:36D8		       popf
TRANGROUP:36D9		       clc
TRANGROUP:36DA		       jmp     short newarg_exit
TRANGROUP:36DC ; ---------------------------------------------------------------------------
TRANGROUP:36DC
TRANGROUP:36DC buf_oflow:			       ; ...
TRANGROUP:36DC		       sub     di, cx
TRANGROUP:36DE		       mov     cx, (offset ARG_ARGBUF+7Fh) ; ARG+ARG_UNIT.argbuf+ARGBLEN-1
TRANGROUP:36E1		       sub     cx, di
TRANGROUP:36E3		       jmp     short newarg_@
TRANGROUP:36E5 ; ---------------------------------------------------------------------------
TRANGROUP:36E5
TRANGROUP:36E5 to_many_args:			       ; ...
TRANGROUP:36E5		       mov     ax, 1
TRANGROUP:36E8		       popf
TRANGROUP:36E9		       stc
TRANGROUP:36EA
TRANGROUP:36EA newarg_exit:			       ; ...
TRANGROUP:36EA		       pop     si
TRANGROUP:36EB		       pop     di
TRANGROUP:36EC		       pop     dx
TRANGROUP:36ED		       pop     cx
TRANGROUP:36EE		       pop     bx
TRANGROUP:36EF		       retn
TRANGROUP:36EF endp	       newarg
TRANGROUP:36EF
TRANGROUP:36F0
TRANGROUP:36F0 ; =============== S U B R O U T I N E =======================================
TRANGROUP:36F0
TRANGROUP:36F0
TRANGROUP:36F0 proc	       arg_switch near	       ; ...
TRANGROUP:36F0		       push    ax
TRANGROUP:36F1		       push    bx
TRANGROUP:36F2		       push    cx
TRANGROUP:36F3		       push    di
TRANGROUP:36F4		       pushf
TRANGROUP:36F5		       test    bh, 1	       ; sw_flag
TRANGROUP:36F8		       jz      short no_switch0
TRANGROUP:36FA		       cmp     [ds:LASTARG], 0FFFFh ; -1
TRANGROUP:36FF		       jz      short arg_no_switch1
TRANGROUP:3701		       mov     bx, [ds:LASTARG]
TRANGROUP:3705		       mov     ax, offset ARG_ARGV ; ARG+ARG_UNIT.argv ; ARG+0
TRANGROUP:3708		       call    argv_calc
TRANGROUP:370B		       or      [bx+7], bp      ; or [bx+ARGV_ELE.argsw_word],bp
TRANGROUP:370E		       or      [ds:ARG_ARGSWINFO], bp ;	or [ARG+ARG_UNIT.argswinfo],bp
TRANGROUP:3712		       popf
TRANGROUP:3713		       stc
TRANGROUP:3714		       jmp     short arg_switch_exit
TRANGROUP:3716 ; ---------------------------------------------------------------------------
TRANGROUP:3716
TRANGROUP:3716 no_switch0:			       ; ...
TRANGROUP:3716		       mov     ax, [ds:ARG_ARGVCNT] ; [ARG+ARG_UNIT.argvcnt]
TRANGROUP:3719		       mov     [ds:LASTARG], ax
TRANGROUP:371C
TRANGROUP:371C arg_no_switch1:			       ; ...
TRANGROUP:371C		       popf
TRANGROUP:371D		       clc
TRANGROUP:371E
TRANGROUP:371E arg_switch_exit:			       ; ...
TRANGROUP:371E		       pop     di
TRANGROUP:371F		       pop     cx
TRANGROUP:3720		       pop     bx
TRANGROUP:3721		       pop     ax
TRANGROUP:3722		       retn
TRANGROUP:3722 endp	       arg_switch
TRANGROUP:3722
TRANGROUP:3723
TRANGROUP:3723 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3723
TRANGROUP:3723
TRANGROUP:3723 proc	       argv_calc near	       ; ...
TRANGROUP:3723		       push    ax
TRANGROUP:3724		       mov     al, bl
TRANGROUP:3726		       mov     bl, 11	       ; ARGV_ELE.SIZE
TRANGROUP:3728		       mul     bl
TRANGROUP:372A		       pop     bx
TRANGROUP:372B		       add     ax, bx
TRANGROUP:372D		       xchg    ax, bx
TRANGROUP:372E		       retn
TRANGROUP:372E endp	       argv_calc
TRANGROUP:372E
TRANGROUP:372F
TRANGROUP:372F ; =============== S U B R O U T I N E =======================================
TRANGROUP:372F
TRANGROUP:372F
TRANGROUP:372F proc	       path_search near	       ; ...
TRANGROUP:372F		       push    bx
TRANGROUP:3730		       push    cx
TRANGROUP:3731		       push    dx
TRANGROUP:3732		       push    si
TRANGROUP:3733		       push    di
TRANGROUP:3734		       push    bp
TRANGROUP:3735		       pushf
TRANGROUP:3736		       test    [ds:ARGV0_ARG_FLAGS], 3 ; [ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag
TRANGROUP:373B		       jz      short path_search_ok
TRANGROUP:373D
TRANGROUP:373D path_failure_jmp:		       ; ...
TRANGROUP:373D		       jmp     path_failure
TRANGROUP:3740 ; ---------------------------------------------------------------------------
TRANGROUP:3740
TRANGROUP:3740 path_search_ok:			       ; ...
TRANGROUP:3740		       call    STORE_PCHAR     ; figure	out the	pathname separator
TRANGROUP:3743		       mov     dx, offset FBUF
TRANGROUP:3746		       mov     ax, 1A00h
TRANGROUP:3749		       int     21h	       ; DOS - SET DISK	TRANSFER AREA ADDRESS
TRANGROUP:3749					       ; DS:DX -> disk transfer	buffer
TRANGROUP:374B		       push    es
TRANGROUP:374C		       call    find_path       ; get a handle (ES:DI) on user path
TRANGROUP:374F		       mov     [ds:pathinfo], es
TRANGROUP:3753		       mov     [ds:pathinfo+2],	di ; "old" pathstring pointer
TRANGROUP:3757		       mov     [ds:pathinfo+4],	di ; "new" pathstring pointer
TRANGROUP:375B		       pop     es
TRANGROUP:375C		       mov     bx, 256	       ; PBUFLEN
TRANGROUP:375C					       ; copy/format argv[0] into temp buffer
TRANGROUP:375F		       mov     si, offset EXECPATH
TRANGROUP:3762		       call    STRIP
TRANGROUP:3765		       jb      short path_failure_jmp
TRANGROUP:3767		       mov     dx, si
TRANGROUP:3769		       mov     [ds:search_error], offset baddrv_ptr
TRANGROUP:376F		       call    PSEARCH
TRANGROUP:3772		       or      ax, ax
TRANGROUP:3774		       jz      short path_noinit
TRANGROUP:3776		       mov     bp, ax
TRANGROUP:3778		       mov     di, offset EXECPATH
TRANGROUP:377B		       mov     si, [ds:ARG_ARGV] ; [ARG+ARGV_ELE.argpointer]
TRANGROUP:377B					       ; mov si,ds:arg.argv[0].argpointer
TRANGROUP:377F		       mov     cx, [ds:ARGV0_ARGSTARTEL] ; [ARG+ARGV_ELE.argstartel]
TRANGROUP:377F					       ; mov cx,ds:arg.argv[0].argstartel
TRANGROUP:3783		       sub     cx, si	       ; compute prefix	bytes to copy
TRANGROUP:3785		       mov     ah, ':'
TRANGROUP:3787		       cmp     cx, 2	       ; room for drive	letter?
TRANGROUP:378A		       jb      short adddrive  ; no, stick it in
TRANGROUP:378C		       cmp     [si+1], ah      ; colon present?
TRANGROUP:378F		       jz      short movedrive ; yes, just move	it
TRANGROUP:3791
TRANGROUP:3791 adddrive:			       ; ...
TRANGROUP:3791		       mov     al, [ds:CURDRV] ; get current drive
TRANGROUP:3794		       add     al, 41h ; 'A'   ; convert to uppercase letter
TRANGROUP:3796		       stosw		       ; store d:
TRANGROUP:3797		       jmp     short checkpath
TRANGROUP:3799 ; ---------------------------------------------------------------------------
TRANGROUP:3799
TRANGROUP:3799 movedrive:			       ; ...
TRANGROUP:3799		       lodsw
TRANGROUP:379A		       stosw
TRANGROUP:379B		       sub     cx, 2	       ; 2 bytes less to move
TRANGROUP:379E
TRANGROUP:379E checkpath:			       ; ...
TRANGROUP:379E		       or      al, 20h
TRANGROUP:37A0		       mov     dl, al
TRANGROUP:37A2		       sub     dl, 60h	       ; 'a'-1
TRANGROUP:37A5		       mov     al, [ds:psep_char]
TRANGROUP:37A8		       stosb
TRANGROUP:37A9		       cmp     cx, 1	       ; is there room for path	char?
TRANGROUP:37AC		       jb      short addpath   ; no, go	add path
TRANGROUP:37AE		       lodsb
TRANGROUP:37AF		       dec     cx
TRANGROUP:37B0		       cmp     al, [ds:psep_char] ; is there a path separator?
TRANGROUP:37B4		       jz      short movepath  ; yes, go move remainder	of path
TRANGROUP:37B6		       inc     cx
TRANGROUP:37B7		       dec     si	       ; undo the lodsb
TRANGROUP:37B8
TRANGROUP:37B8 addpath:				       ; ...
TRANGROUP:37B8		       push    si
TRANGROUP:37B9		       mov     si, di	       ; remainder of buffer
TRANGROUP:37BB		       mov     ax, 4700h
TRANGROUP:37BE		       int     21h	       ; DOS - 2+ - GET	CURRENT	DIRECTORY
TRANGROUP:37BE					       ; DL = drive (0=default,	1=A, etc.)
TRANGROUP:37BE					       ; DS:SI points to 64-byte buffer	area
TRANGROUP:37C0		       mov     di, si
TRANGROUP:37C2		       pop     si
TRANGROUP:37C3		       mov     al, [ds:psep_char]
TRANGROUP:37C6		       cmp     [byte ptr di], 0	; root (empty dir string)?
TRANGROUP:37C9		       jz      short movepath  ; yes, no need for path char
TRANGROUP:37CB
TRANGROUP:37CB scanend:				       ; ...
TRANGROUP:37CB		       cmp     [byte ptr di], 0
TRANGROUP:37CE		       jz      short foundend
TRANGROUP:37D0		       inc     di
TRANGROUP:37D1		       jmp     short scanend
TRANGROUP:37D3 ; ---------------------------------------------------------------------------
TRANGROUP:37D3
TRANGROUP:37D3 foundend:			       ; ...
TRANGROUP:37D3		       stosb
TRANGROUP:37D4
TRANGROUP:37D4 movepath:			       ; ...
TRANGROUP:37D4		       cmp     [si], al	       ; first char a path char?
TRANGROUP:37D6		       jnz     short copypath  ; no
TRANGROUP:37D8		       inc     si	       ; move past leading char
TRANGROUP:37D9		       dec     cx	       ; drop from count
TRANGROUP:37DA
TRANGROUP:37DA copypath:			       ; ...
TRANGROUP:37DA		       jcxz    short _copydone ; no chars to move!
TRANGROUP:37DC		       rep movsb
TRANGROUP:37DE
TRANGROUP:37DE _copydone:			       ; ...
TRANGROUP:37DE		       jmp     path_success
TRANGROUP:37E1 ; ---------------------------------------------------------------------------
TRANGROUP:37E1
TRANGROUP:37E1 path_noinit:			       ; ...
TRANGROUP:37E1		       test    [ds:ARGV0_ARG_FLAGS], 4 ; [ARG+ARGV_ELE.argflags],4 ; path_sep
TRANGROUP:37E1					       ; test ds:arg.argv[0].argflags, MASK path_sep
TRANGROUP:37E6		       jnz     short path_failure
TRANGROUP:37E8		       mov     bh, ';'         ; PATH_SEP_CHAR
TRANGROUP:37EA		       mov     dx, [ds:ARGV0_ARGSTARTEL] ; [ARG+ARGV_ELE.argstartel]
TRANGROUP:37EA					       ; mov dx,ds:arg.argv[0].argstartel
TRANGROUP:37EE		       sub     dx, [ds:ARG_ARGV]
TRANGROUP:37F2		       add     dx, offset EXECPATH
TRANGROUP:37F6
TRANGROUP:37F6 path_loop:			       ; ...
TRANGROUP:37F6		       call    path_crunch     ; pcrunch (EXECPATH, pathinfo)
TRANGROUP:37F9		       mov     bp, ax	       ; save filetype code
TRANGROUP:37FB		       lahf
TRANGROUP:37FC		       or      bp, bp	       ; did path_crunch find anything?
TRANGROUP:37FE		       jnz     short path_found
TRANGROUP:3800		       sahf
TRANGROUP:3801		       jnb     short path_loop ; is there anything left	to the path?
TRANGROUP:3803
TRANGROUP:3803 path_failure:			       ; ...
TRANGROUP:3803		       xor     ax, ax
TRANGROUP:3805		       jmp     path_exit
TRANGROUP:3808 ; ---------------------------------------------------------------------------
TRANGROUP:3808
TRANGROUP:3808 path_found:			       ; ...
TRANGROUP:3808		       mov     di, offset EXECPATH
TRANGROUP:380B		       mov     cx, [ds:pathinfo+4] ; "new" pointer -- end of string
TRANGROUP:380F		       mov     si, [ds:pathinfo+2] ; "old" pointer -- beginning	of string
TRANGROUP:3813		       push    es
TRANGROUP:3814		       push    [ds:pathinfo]   ; push word [pathinfo+0]
TRANGROUP:3818		       pop     es
TRANGROUP:3819		       cmp     [byte ptr es:si+2], '.' ; Look for Current dir at start of path
TRANGROUP:381E		       jnz     short path_cpy
TRANGROUP:3820		       cmp     [byte ptr es:si+1], ':' ; does path have drive letter?
TRANGROUP:3825		       jnz     short path_cpy  ; no, copy the path string
TRANGROUP:3827		       push    cx	       ; Save pointer to end of	string
TRANGROUP:3828		       mov     al, [es:si]     ; Copy drive letter, :, and root	char to	EXECPATH
TRANGROUP:382B		       mov     [di], al
TRANGROUP:382D		       mov     al, [es:si+1]
TRANGROUP:3831		       mov     [di+1], al
TRANGROUP:3834		       mov     al, [ds:psep_char]
TRANGROUP:3837		       mov     [di+2], al
TRANGROUP:383A		       push    si
TRANGROUP:383B		       mov     dl, [es:si]     ; Convert device	letter for cur dir
TRANGROUP:383E		       or      dl, 20h
TRANGROUP:3841		       sub     dl, 60h	       ; 'a'-1
TRANGROUP:3844		       mov     si, di
TRANGROUP:3846		       add     si, 3	       ; Don't wipe out drive and root info
TRANGROUP:3849		       mov     ax, 4700h
TRANGROUP:384C		       int     21h	       ; DOS - 2+ - GET	CURRENT	DIRECTORY
TRANGROUP:384C					       ; DL = drive (0=default,	1=A, etc.)
TRANGROUP:384C					       ; DS:SI points to 64-byte buffer	area
TRANGROUP:384E		       call    dstrlen
TRANGROUP:3851		       add     si, cx	       ; Don't copy over drive and root info
TRANGROUP:3853		       dec     si
TRANGROUP:3854		       mov     di, si
TRANGROUP:3856		       pop     si	       ; Restore pointer to begining of	string
TRANGROUP:3857		       add     si, 3	       ; Point past drive letter, :, .
TRANGROUP:385A		       pop     cx	       ; Restore pointer to end	of string
TRANGROUP:385B
TRANGROUP:385B path_cpy:			       ; ...
TRANGROUP:385B		       pop     es
TRANGROUP:385C		       sub     cx, si
TRANGROUP:385E		       push    ds
TRANGROUP:385F		       push    [ds:pathinfo]   ; push word [pathinfo+0]
TRANGROUP:3863		       pop     ds
TRANGROUP:3864		       cld
TRANGROUP:3865
TRANGROUP:3865 kloop:				       ; ...
TRANGROUP:3865		       lodsb
TRANGROUP:3866		       stosb
TRANGROUP:3867		       call    testkanj
TRANGROUP:386A		       jz      short _notkanj1
TRANGROUP:386C		       dec     cx
TRANGROUP:386D		       jcxz    short popdone
TRANGROUP:386F		       movsb
TRANGROUP:3870		       dec     cx
TRANGROUP:3871		       cmp     cx, 1
TRANGROUP:3874		       ja      short kloop
TRANGROUP:3876
TRANGROUP:3876 popdone:				       ; ...
TRANGROUP:3876		       pop     ds
TRANGROUP:3877		       mov     al, [ds:psep_char]
TRANGROUP:387A		       jmp     short path_store
TRANGROUP:387C ; ---------------------------------------------------------------------------
TRANGROUP:387C
TRANGROUP:387C _notkanj1:			       ; ...
TRANGROUP:387C		       loop    kloop
TRANGROUP:387E		       pop     ds
TRANGROUP:387F		       dec     di	       ; overwrite terminator
TRANGROUP:3880		       mov     al, [ds:psep_char] ; with a pathname separator
TRANGROUP:3883		       cmp     al, [di-1]
TRANGROUP:3886		       jz      short path_success
TRANGROUP:3888
TRANGROUP:3888 path_store:			       ; ...
TRANGROUP:3888		       stosb
TRANGROUP:3889
TRANGROUP:3889 path_success:			       ; ...
TRANGROUP:3889		       mov     si, offset search_best_buf
TRANGROUP:388C		       xor     cx, cx
TRANGROUP:388E
TRANGROUP:388E path_succ_loop:			       ; ...
TRANGROUP:388E		       lodsb		       ; append	winning	filename to path
TRANGROUP:388F		       stosb		       ; (including terminating	null)
TRANGROUP:3890		       or      al, al
TRANGROUP:3892		       jnz     short path_succ_loop
TRANGROUP:3894		       mov     ax, bp
TRANGROUP:3896
TRANGROUP:3896 path_exit:			       ; ...
TRANGROUP:3896		       popf
TRANGROUP:3897		       pop     bp
TRANGROUP:3898		       pop     di
TRANGROUP:3899		       pop     si
TRANGROUP:389A		       pop     dx
TRANGROUP:389B		       pop     cx
TRANGROUP:389C		       pop     bx
TRANGROUP:389D		       retn
TRANGROUP:389D endp	       path_search
TRANGROUP:389D
TRANGROUP:389E
TRANGROUP:389E ; =============== S U B R O U T I N E =======================================
TRANGROUP:389E
TRANGROUP:389E
TRANGROUP:389E proc	       STORE_PCHAR near	       ; ...
TRANGROUP:389E		       push    ax
TRANGROUP:389F		       mov     al, 2Fh ; '/'
TRANGROUP:38A1		       call    pathchrcmp
TRANGROUP:38A4		       jz      short STORE_SLASH
TRANGROUP:38A6		       mov     al, 5Ch ; '\'
TRANGROUP:38A8		       mov     [ds:psep_char], al
TRANGROUP:38AB		       pop     ax
TRANGROUP:38AC		       retn
TRANGROUP:38AD ; ---------------------------------------------------------------------------
TRANGROUP:38AD
TRANGROUP:38AD STORE_SLASH:			       ; ...
TRANGROUP:38AD		       mov     [ds:psep_char], al
TRANGROUP:38B0		       pop     ax
TRANGROUP:38B1		       retn
TRANGROUP:38B1 endp	       STORE_PCHAR
TRANGROUP:38B1
TRANGROUP:38B2
TRANGROUP:38B2 ; =============== S U B R O U T I N E =======================================
TRANGROUP:38B2
TRANGROUP:38B2
TRANGROUP:38B2 proc	       path_crunch near	       ; ...
TRANGROUP:38B2		       push    bx	       ; BH = additional terminator character
TRANGROUP:38B3		       push    cx
TRANGROUP:38B4		       push    dx	       ; pointer to stripped filename
TRANGROUP:38B5		       push    di
TRANGROUP:38B6		       push    si	       ; pointer into pathstring to be dissected
TRANGROUP:38B7		       pushf
TRANGROUP:38B8		       call    STORE_PCHAR     ; figure	out pathname separator
TRANGROUP:38BB		       mov     di, offset TPBUF	; destination of concatenated string
TRANGROUP:38BE		       mov     si, [ds:pathinfo+4] ; "new" pointer to start with
TRANGROUP:38C2		       mov     [ds:pathinfo+2],	si ; becomes "old" pointer
TRANGROUP:38C6		       push    ds	       ; save old segment pointer
TRANGROUP:38C7		       push    [ds:pathinfo]   ; push word [pathinfo+0]
TRANGROUP:38CB		       pop     ds	       ; replace with pointer to userpath's segment
TRANGROUP:38CC		       xor     cl, cl	       ; clear flag for	later use
TRANGROUP:38CE
TRANGROUP:38CE path_cr_copy:			       ; ...
TRANGROUP:38CE		       lodsb		       ; get a pathname	byte
TRANGROUP:38CF		       or      al, al
TRANGROUP:38D1		       jz      short path_seg  ; null terminates segment & pathstring
TRANGROUP:38D3		       cmp     al, bh
TRANGROUP:38D5		       jz      short path_seg  ; BH terminates a pathstring segment
TRANGROUP:38D7		       call    testkanj
TRANGROUP:38DA		       jz      short _notkanj2
TRANGROUP:38DC		       stosb
TRANGROUP:38DD		       movsb
TRANGROUP:38DE		       mov     cl, 1	       ; CL=1 means latest stored char is DBCS
TRANGROUP:38E0		       jmp     short path_cr_copy
TRANGROUP:38E2 ; ---------------------------------------------------------------------------
TRANGROUP:38E2
TRANGROUP:38E2 _notkanj2:			       ; ...
TRANGROUP:38E2		       xor     cl, cl	       ; CL=0 means latest stored char is SBCS
TRANGROUP:38E4		       stosb
TRANGROUP:38E5		       jmp     short path_cr_copy
TRANGROUP:38E7 ; ---------------------------------------------------------------------------
TRANGROUP:38E7
TRANGROUP:38E7 path_seg:			       ; ...
TRANGROUP:38E7		       pop     ds
TRANGROUP:38E8		       mov     [ds:pathinfo+4],	si ; save "new"	pointer	for next time
TRANGROUP:38EC		       mov     bl, al
TRANGROUP:38EE		       xor     ax, ax
TRANGROUP:38F0		       cmp     di, offset TPBUF	; was there really anything in pathstr?
TRANGROUP:38F4		       jz      short path_cr_leave
TRANGROUP:38F6		       mov     al, [ds:psep_char]
TRANGROUP:38F9		       or      cl, cl
TRANGROUP:38FB		       jnz     short path_cr_store ; this is a trailing	byte of	ECS code
TRANGROUP:38FD		       cmp     al, [di-1]      ; add pathname separator	for suffix
TRANGROUP:3900		       jz      short path_cr_l1
TRANGROUP:3902
TRANGROUP:3902 path_cr_store:			       ; ...
TRANGROUP:3902		       stosb
TRANGROUP:3903
TRANGROUP:3903 path_cr_l1:			       ; ...
TRANGROUP:3903		       mov     si, dx
TRANGROUP:3905
TRANGROUP:3905 path_cr_l2:			       ; ...
TRANGROUP:3905		       lodsb		       ; tack the stripped filename onto
TRANGROUP:3905					       ; the end of the	path, up to and
TRANGROUP:3906		       stosb
TRANGROUP:3907		       or      al, al	       ; including the terminating null
TRANGROUP:3909		       jnz     short path_cr_l2
TRANGROUP:390B		       mov     dx, offset TPBUF	; and look for an appropriate file
TRANGROUP:390E		       mov     [ds:search_error], offset BADPMES_PTR
TRANGROUP:3914		       call    PSEARCH	       ; results are in	AX & search_best_buf
TRANGROUP:3917
TRANGROUP:3917 path_cr_leave:			       ; ...
TRANGROUP:3917		       or      bl, bl
TRANGROUP:3919		       jz      short path_cr_empty ; null in BL	means all gone
TRANGROUP:391B		       popf
TRANGROUP:391C		       clc
TRANGROUP:391D		       jmp     short path_cr_exit
TRANGROUP:391F ; ---------------------------------------------------------------------------
TRANGROUP:391F
TRANGROUP:391F path_cr_empty:			       ; ...
TRANGROUP:391F		       popf
TRANGROUP:3920		       stc
TRANGROUP:3921
TRANGROUP:3921 path_cr_exit:			       ; ...
TRANGROUP:3921		       pop     si
TRANGROUP:3922		       pop     di
TRANGROUP:3923		       pop     dx
TRANGROUP:3924		       pop     cx
TRANGROUP:3925		       pop     bx
TRANGROUP:3926		       retn		       ; AX = non-zero (file type), zero (nothing found)
TRANGROUP:3926 endp	       path_crunch
TRANGROUP:3926
TRANGROUP:3927
TRANGROUP:3927 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3927
TRANGROUP:3927
TRANGROUP:3927 proc	       PSEARCH near	       ; ...
TRANGROUP:3927		       push    cx
TRANGROUP:3928		       push    dx
TRANGROUP:3929		       push    di
TRANGROUP:392A		       push    si
TRANGROUP:392B		       pushf
TRANGROUP:392C		       push    dx
TRANGROUP:392D		       mov     di, dx
TRANGROUP:392F		       mov     si, offset search_curdir_buf
TRANGROUP:3932		       xor     dx, dx
TRANGROUP:3934		       cmp     [byte ptr di+1],	':' ; is there a drive spec?
TRANGROUP:3938		       jnz     short SEARCH_DIR_CHECK ;	no
TRANGROUP:393A		       mov     dl, [di]
TRANGROUP:393C		       and     dl, 0DFh	       ; uppercase the drive letter
TRANGROUP:393F		       sub     dl, 40h ; '@'   ; and convert to drive number
TRANGROUP:3942
TRANGROUP:3942 SEARCH_DIR_CHECK:		       ; ...
TRANGROUP:3942		       mov     ax, 4700h
TRANGROUP:3945		       int     21h	       ; DOS - 2+ - GET	CURRENT	DIRECTORY
TRANGROUP:3945					       ; DL = drive (0=default,	1=A, etc.)
TRANGROUP:3945					       ; DS:SI points to 64-byte buffer	area
TRANGROUP:3947		       pop     dx
TRANGROUP:3948		       jb      short SEARCH_INVALID_DRIVE
TRANGROUP:394A		       mov     cx, 13h
TRANGROUP:394D		       mov     ax, 4E00h
TRANGROUP:3950		       int     21h	       ; DOS - 2+ - FIND FIRST ASCIZ (FINDFIRST)
TRANGROUP:3950					       ; CX = search attributes
TRANGROUP:3950					       ; DS:DX -> ASCIZ	filespec
TRANGROUP:3950					       ; (drive, path, and wildcards allowed)
TRANGROUP:3952		       jb      short SEARCH_NO_FILE
TRANGROUP:3954		       mov     [ds:search_best], 0 ; SEARCH_FILE_NOT_FOUND ; 0
TRANGROUP:3959		       mov     [ds:search_best_buf], 0
TRANGROUP:395E
TRANGROUP:395E SEARCH_LOOP:			       ; ...
TRANGROUP:395E		       call    SEARCH_FTYPE    ; determine if .com, &c...
TRANGROUP:3961		       cmp     al, [ds:search_best] ; better than what we've found so far?
TRANGROUP:3965		       jle     short SEARCH_NEXT
TRANGROUP:3967		       mov     [ds:search_best], al
TRANGROUP:396A		       mov     si, (offset FBUF+1Eh) ; FBUF+FIND_BUF.PNAME ; FBUF+30
TRANGROUP:396D		       mov     di, offset search_best_buf
TRANGROUP:3970		       mov     cx, 13	       ; FNAME_MAX_LEN
TRANGROUP:3973		       cld
TRANGROUP:3974		       rep movsb	       ; save complete pathname	representation
TRANGROUP:3976		       cmp     al, 8	       ; SEARCH_COM ; have we found the	best of	all?
TRANGROUP:3978		       jz      short SEARCH_DONE ; yes
TRANGROUP:397A
TRANGROUP:397A SEARCH_NEXT:			       ; ...
TRANGROUP:397A		       mov     cx, 13h	       ; search_attr
TRANGROUP:397D		       mov     ax, 4F00h
TRANGROUP:3980		       int     21h	       ; DOS - 2+ - FIND NEXT ASCIZ (FINDNEXT)
TRANGROUP:3980					       ; [DTA] = data block from
TRANGROUP:3980					       ; last AH = 4Eh/4Fh call
TRANGROUP:3982		       jnb     short SEARCH_LOOP
TRANGROUP:3984
TRANGROUP:3984 SEARCH_DONE:			       ; ...
TRANGROUP:3984		       mov     al, [ds:search_best] ; pick best	to return with
TRANGROUP:3987		       cmp     [ds:ext_entered], 1 ; byte ; Did	user request a specific	ext?
TRANGROUP:398C		       jz      short SEARCH_EXIT ; no -	exit
TRANGROUP:398E		       mov     al, [ds:ext_entered] ; yes - get	the real file type back
TRANGROUP:3991		       mov     [ds:search_best], al ; save the real file type
TRANGROUP:3994		       jmp     short SEARCH_EXIT
TRANGROUP:3996 ; ---------------------------------------------------------------------------
TRANGROUP:3996
TRANGROUP:3996 SEARCH_INVALID_DRIVE:		       ; ...
TRANGROUP:3996		       mov     dx, [ds:search_error]
TRANGROUP:399A		       call    std_printf
TRANGROUP:399D
TRANGROUP:399D SEARCH_NO_FILE:			       ; ...
TRANGROUP:399D		       mov     ax, 0	       ; SEARCH_FILE_NOT_FOUND ; = 0
TRANGROUP:39A0
TRANGROUP:39A0 SEARCH_EXIT:			       ; ...
TRANGROUP:39A0		       popf
TRANGROUP:39A1		       pop     si
TRANGROUP:39A2		       pop     di
TRANGROUP:39A3		       pop     dx
TRANGROUP:39A4		       pop     cx
TRANGROUP:39A5		       retn
TRANGROUP:39A5 endp	       PSEARCH
TRANGROUP:39A5
TRANGROUP:39A6
TRANGROUP:39A6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:39A6
TRANGROUP:39A6
TRANGROUP:39A6 proc	       SEARCH_FTYPE near       ; ...
TRANGROUP:39A6		       push    di
TRANGROUP:39A7		       push    si
TRANGROUP:39A8		       mov     ax, 0
TRANGROUP:39AB		       mov     di, (offset FBUF+1Eh) ; FBUF+FIND_BUF.PNAME ; FBUF+30
TRANGROUP:39AE		       mov     cx, 13
TRANGROUP:39B1		       cld
TRANGROUP:39B2		       repne scasb	       ; search	for the	terminating null
TRANGROUP:39B4		       jnz     short FTYPE_EXIT	; weird... no null byte	at end
TRANGROUP:39B6		       sub     di, 5	       ; . + E + X + T + NULL
TRANGROUP:39B9		       mov     si, offset comext ; ".COM"
TRANGROUP:39BC		       mov     ax, di
TRANGROUP:39BE		       cmpsw
TRANGROUP:39BF		       jnz     short FTYPE_EXE
TRANGROUP:39C1		       cmpsw
TRANGROUP:39C2		       jnz     short FTYPE_EXE
TRANGROUP:39C4		       mov     ax, 8	       ; SEARCH_COM ; success!
TRANGROUP:39C7		       jmp     short FTYPE_EXIT
TRANGROUP:39C9 ; ---------------------------------------------------------------------------
TRANGROUP:39C9
TRANGROUP:39C9 FTYPE_EXE:			       ; ...
TRANGROUP:39C9		       mov     di, ax
TRANGROUP:39CB		       mov     si, offset exeext ; ".EXE"
TRANGROUP:39CE		       cmpsw
TRANGROUP:39CF		       jnz     short FTYPE_BAT
TRANGROUP:39D1		       cmpsw
TRANGROUP:39D2		       jnz     short FTYPE_BAT
TRANGROUP:39D4		       mov     ax, 4	       ; SEARCH_EXE ; success!
TRANGROUP:39D7		       jmp     short FTYPE_EXIT
TRANGROUP:39D9 ; ---------------------------------------------------------------------------
TRANGROUP:39D9
TRANGROUP:39D9 FTYPE_BAT:			       ; ...
TRANGROUP:39D9		       mov     di, ax
TRANGROUP:39DB		       mov     si, offset batext ; ".BAT"
TRANGROUP:39DE		       cmpsw
TRANGROUP:39DF		       jnz     short FTYPE_FAIL
TRANGROUP:39E1		       cmpsw
TRANGROUP:39E2		       jnz     short FTYPE_FAIL
TRANGROUP:39E4		       mov     ax, 2	       ; SEARCH_BAT ; success!
TRANGROUP:39E7		       jmp     short FTYPE_EXIT
TRANGROUP:39E9 ; ---------------------------------------------------------------------------
TRANGROUP:39E9
TRANGROUP:39E9 FTYPE_FAIL:			       ; ...
TRANGROUP:39E9		       mov     ax, 0	       ; ANULL
TRANGROUP:39EC
TRANGROUP:39EC FTYPE_EXIT:			       ; ...
TRANGROUP:39EC		       cmp     [ds:ext_entered], 1
TRANGROUP:39F1		       jz      short FTYPE_DONE
TRANGROUP:39F3		       cmp     ax, 0	       ; ANULL
TRANGROUP:39F6		       jz      short FTYPE_DONE
TRANGROUP:39F8		       mov     [ds:ext_entered], al
TRANGROUP:39FB		       mov     ax, 8
TRANGROUP:39FE
TRANGROUP:39FE FTYPE_DONE:			       ; ...
TRANGROUP:39FE		       pop     si
TRANGROUP:39FF		       pop     di
TRANGROUP:3A00		       retn
TRANGROUP:3A00 endp	       SEARCH_FTYPE
TRANGROUP:3A00
TRANGROUP:3A01
TRANGROUP:3A01 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3A01
TRANGROUP:3A01
TRANGROUP:3A01 proc	       STRIP near	       ; ...
TRANGROUP:3A01		       push    ax
TRANGROUP:3A02		       push    bx
TRANGROUP:3A03		       push    cx
TRANGROUP:3A04		       push    dx
TRANGROUP:3A05		       push    di
TRANGROUP:3A06		       push    si
TRANGROUP:3A07		       pushf
TRANGROUP:3A08		       mov     [ds:ext_entered], 1
TRANGROUP:3A0D		       mov     dx, [ds:ARG_ARGV] ; [ARG+ARGV_ELE.argpointer]
TRANGROUP:3A11		       mov     di, [ds:ARGV0_ARGSTARTEL] ; [ARG+ARGV_ELE.argstartel]
TRANGROUP:3A15		       cmp     [byte ptr di], 0
TRANGROUP:3A18		       jz      short STRIP_ERROR
TRANGROUP:3A1A		       mov     cx, dx
TRANGROUP:3A1C		       add     cx, [ds:ARGV0_ARGLEN] ; [ARG+ARGV_ELE.arglen]
TRANGROUP:3A20		       sub     cx, di
TRANGROUP:3A22		       inc     cx
TRANGROUP:3A23		       mov     al, 2Eh ; '.'
TRANGROUP:3A25		       cld
TRANGROUP:3A26		       repne scasb
TRANGROUP:3A28		       jcxz    short PROCESS_EXT
TRANGROUP:3A2A		       mov     [ds:ext_entered], 0
TRANGROUP:3A2F		       mov     al, 0
TRANGROUP:3A31		       repne scasb
TRANGROUP:3A33
TRANGROUP:3A33 PROCESS_EXT:			       ; ...
TRANGROUP:3A33		       mov     cx, di
TRANGROUP:3A35		       sub     cx, dx
TRANGROUP:3A37		       sub     bx, 4
TRANGROUP:3A3A		       cmp     cx, bx
TRANGROUP:3A3C		       jg      short STRIP_ERROR
TRANGROUP:3A3E		       mov     di, si
TRANGROUP:3A40		       mov     si, dx
TRANGROUP:3A42		       cld
TRANGROUP:3A43		       rep movsb
TRANGROUP:3A45		       cmp     [ds:ext_entered], 1
TRANGROUP:3A4A		       jnz     short SKIP_WILDS
TRANGROUP:3A4C		       dec     di
TRANGROUP:3A4D		       stosb
TRANGROUP:3A4E		       mov     al, 3Fh ; '?'   ; WILDCHAR
TRANGROUP:3A50		       stosb
TRANGROUP:3A51		       stosb
TRANGROUP:3A52		       stosb
TRANGROUP:3A53		       mov     al, 0	       ; ANULL
TRANGROUP:3A55		       stosb
TRANGROUP:3A56
TRANGROUP:3A56 SKIP_WILDS:			       ; ...
TRANGROUP:3A56		       popf
TRANGROUP:3A57		       clc
TRANGROUP:3A58		       jmp     short STRIP_EXIT
TRANGROUP:3A5A ; ---------------------------------------------------------------------------
TRANGROUP:3A5A
TRANGROUP:3A5A STRIP_ERROR:			       ; ...
TRANGROUP:3A5A		       popf
TRANGROUP:3A5B		       stc
TRANGROUP:3A5C
TRANGROUP:3A5C STRIP_EXIT:			       ; ...
TRANGROUP:3A5C		       pop     si
TRANGROUP:3A5D		       pop     di
TRANGROUP:3A5E		       pop     dx
TRANGROUP:3A5F		       pop     cx
TRANGROUP:3A60		       pop     bx
TRANGROUP:3A61		       pop     ax
TRANGROUP:3A62		       retn
TRANGROUP:3A62 endp	       STRIP
TRANGROUP:3A62
TRANGROUP:3A63
TRANGROUP:3A63 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3A63
TRANGROUP:3A63
TRANGROUP:3A63 proc	       SAVE_ARGS near	       ; ...
TRANGROUP:3A63		       push    bx
TRANGROUP:3A64		       push    cx
TRANGROUP:3A65		       push    dx
TRANGROUP:3A66		       push    di
TRANGROUP:3A67		       push    si
TRANGROUP:3A68		       push    bp
TRANGROUP:3A69		       pushf
TRANGROUP:3A6A		       add     bx, 1107	       ; ARG_UNIT.SIZE+15 ; 1092+15 = 1107
TRANGROUP:3A6E		       mov     cl, 4
TRANGROUP:3A70		       shr     bx, cl
TRANGROUP:3A72		       mov     ax, 4800h
TRANGROUP:3A75		       int     21h	       ; DOS - 2+ - ALLOCATE MEMORY
TRANGROUP:3A75					       ; BX = number of	16-byte	paragraphs desired
TRANGROUP:3A77		       jb      short SAVE_ERROR
TRANGROUP:3A79		       mov     bp, ax
TRANGROUP:3A7B		       push    es
TRANGROUP:3A7C		       mov     es, ax
TRANGROUP:3A7E		       assume es:nothing
TRANGROUP:3A7E		       mov     cx, 1092
TRANGROUP:3A81		       xor     di, di
TRANGROUP:3A83		       mov     si, offset ARG_ARGV ; ARG
TRANGROUP:3A86		       rep movsb
TRANGROUP:3A88		       mov     cx, [ds:ARG_ARGVCNT] ; [ARG+ARG_UNIT.argvcnt]
TRANGROUP:3A8C		       xor     ax, ax
TRANGROUP:3A8E		       mov     si, offset ARG_ARGV ; ARG
TRANGROUP:3A91
TRANGROUP:3A91 SAVE_PTR_LOOP:			       ; ...
TRANGROUP:3A91		       dec     cx
TRANGROUP:3A92		       jl      short SAVE_DONE
TRANGROUP:3A94		       mov     bx, cx
TRANGROUP:3A96		       call    argv_calc
TRANGROUP:3A99		       mov     dx, [ds:ARG_ARGV+bx] ; [ARG+ARGV_ELE.argpointer+bx]
TRANGROUP:3A9D		       sub     dx, si
TRANGROUP:3A9F		       mov     [es:bx],	dx
TRANGROUP:3AA2		       mov     dx, [ds:ARGV0_ARGSTARTEL+bx] ; [ARG+ARGV_ELE.argstartel+bx]
TRANGROUP:3AA6		       sub     dx, si
TRANGROUP:3AA8		       mov     [es:bx+3], dx   ; [es:bx+ARGV_ELE.argstartel]
TRANGROUP:3AAC		       mov     dx, [ds:ARGV0_OCOMPTR+bx] ; [ARG+ARGV_ELE.arg_ocomptr+bx]
TRANGROUP:3AB0		       sub     dx, si
TRANGROUP:3AB2		       mov     [es:bx+9], dx   ; [es:bx+ARGV_ELE.arg_ocomptr]
TRANGROUP:3AB6		       jmp     short SAVE_PTR_LOOP
TRANGROUP:3AB8 ; ---------------------------------------------------------------------------
TRANGROUP:3AB8
TRANGROUP:3AB8 SAVE_DONE:			       ; ...
TRANGROUP:3AB8		       pop     es
TRANGROUP:3AB9		       assume es:nothing
TRANGROUP:3AB9		       mov     ax, bp
TRANGROUP:3ABB		       jmp     short SAVE_OK
TRANGROUP:3ABD ; ---------------------------------------------------------------------------
TRANGROUP:3ABD
TRANGROUP:3ABD SAVE_ERROR:			       ; ...
TRANGROUP:3ABD		       popf
TRANGROUP:3ABE		       stc
TRANGROUP:3ABF		       jmp     short SAVE_EXIT
TRANGROUP:3AC1 ; ---------------------------------------------------------------------------
TRANGROUP:3AC1
TRANGROUP:3AC1 SAVE_OK:				       ; ...
TRANGROUP:3AC1		       popf
TRANGROUP:3AC2		       clc
TRANGROUP:3AC3
TRANGROUP:3AC3 SAVE_EXIT:			       ; ...
TRANGROUP:3AC3		       pop     bp
TRANGROUP:3AC4		       pop     si
TRANGROUP:3AC5		       pop     di
TRANGROUP:3AC6		       pop     dx
TRANGROUP:3AC7		       pop     cx
TRANGROUP:3AC8		       pop     bx
TRANGROUP:3AC9		       retn
TRANGROUP:3AC9 endp	       SAVE_ARGS
TRANGROUP:3AC9
TRANGROUP:3ACA ; ---------------------------------------------------------------------------
TRANGROUP:3ACA
TRANGROUP:3ACA notest2:				       ; ...
TRANGROUP:3ACA		       mov     cx, 11
TRANGROUP:3ACD		       mov     si, 5Dh	       ; FCB+1
TRANGROUP:3AD0
TRANGROUP:3AD0 ambspec:				       ; ...
TRANGROUP:3AD0		       lodsb
TRANGROUP:3AD1		       cmp     al, 3Fh ; '?'
TRANGROUP:3AD3		       jnz     short allfil
TRANGROUP:3AD5		       loop    ambspec
TRANGROUP:3AD7
TRANGROUP:3AD7 allfil:				       ; ...
TRANGROUP:3AD7		       cmp     cx, 0
TRANGROUP:3ADA		       jnz     short noprmpt
TRANGROUP:3ADC
TRANGROUP:3ADC askagn:				       ; ...
TRANGROUP:3ADC		       mov     dx, offset SureMes_Ptr
TRANGROUP:3ADF		       call    std_printf
TRANGROUP:3AE2		       mov     si, 80h
TRANGROUP:3AE5		       mov     dx, si
TRANGROUP:3AE7		       mov     [word ptr si], 120
TRANGROUP:3AEB		       mov     ax, 0C0Ah
TRANGROUP:3AEE		       int     21h	       ; DOS - CLEAR KEYBOARD BUFFER
TRANGROUP:3AEE					       ; AL must be 01h, 06h, 07h, 08h,	or 0Ah.
TRANGROUP:3AF0		       lodsw
TRANGROUP:3AF1		       or      ah, ah
TRANGROUP:3AF3		       jz      short askagn
TRANGROUP:3AF5		       call    scanoff
TRANGROUP:3AF8		       call    char_in_xlat
TRANGROUP:3AFB		       jnb     short check_yn
TRANGROUP:3AFD
TRANGROUP:3AFD answ_no:				       ; ...
TRANGROUP:3AFD		       retn
TRANGROUP:3AFE ; ---------------------------------------------------------------------------
TRANGROUP:3AFE
TRANGROUP:3AFE check_yn:			       ; ...
TRANGROUP:3AFE		       cmp     al, 0
TRANGROUP:3B00		       jz      short answ_no
TRANGROUP:3B02		       cmp     al, 1
TRANGROUP:3B04		       pushf
TRANGROUP:3B05		       call    CRLF2
TRANGROUP:3B08		       popf
TRANGROUP:3B09		       jnz     short askagn
TRANGROUP:3B0B
TRANGROUP:3B0B noprmpt:				       ; ...
TRANGROUP:3B0B		       mov     ah, 13h	       ; FCB_Delete
TRANGROUP:3B0D		       mov     dx, 5Ch	       ; FCB
TRANGROUP:3B10		       int     21h	       ; DOS - DELETE FILE via FCB
TRANGROUP:3B10					       ; DS:DX -> FCB with filename field filled with
TRANGROUP:3B10					       ; template for  deletion	('?' wildcard allowed, but not '*')
TRANGROUP:3B10					       ; Return: AL = 00h file found, FFh file not found
TRANGROUP:3B12		       inc     al
TRANGROUP:3B14		       jz      short eraerr
TRANGROUP:3B16		       call    RestUDir
TRANGROUP:3B19		       retn
TRANGROUP:3B1A ; ---------------------------------------------------------------------------
TRANGROUP:3B1A
TRANGROUP:3B1A eraerr:				       ; ...
TRANGROUP:3B1A		       call    Set_Ext_Error_Msg
TRANGROUP:3B1D		       push    dx
TRANGROUP:3B1E		       call    RestUDir
TRANGROUP:3B21		       pop     dx
TRANGROUP:3B22		       cmp     [ds:extend_buf_ptr], 18 ; ERROR_NO_MORE_FILES
TRANGROUP:3B27		       jnz     short cerrorj2
TRANGROUP:3B29		       mov     [ds:extend_buf_ptr], 2 ;	ERROR_FILE_NOT_FOUND
TRANGROUP:3B2F
TRANGROUP:3B2F cerrorj2:			       ; ...
TRANGROUP:3B2F		       jmp     cerror
TRANGROUP:3B32 ; ---------------------------------------------------------------------------
TRANGROUP:3B32
TRANGROUP:3B32 slashp_erase:			       ; ...
TRANGROUP:3B32		       call    build_dir_string
TRANGROUP:3B35		       mov     ah, 1Ah	       ; Set_DMA
TRANGROUP:3B37		       mov     dx, offset DESTDIR
TRANGROUP:3B3A		       int     21h	       ; DOS - SET DISK	TRANSFER AREA ADDRESS
TRANGROUP:3B3A					       ; DS:DX -> disk transfer	buffer
TRANGROUP:3B3C		       mov     ah, 11h	       ; Dir_Search_First
TRANGROUP:3B3E		       mov     dx, 5Ch	       ; FCB
TRANGROUP:3B41		       int     21h	       ; DOS - SEARCH FIRST USING FCB
TRANGROUP:3B41					       ; DS:DX -> FCB
TRANGROUP:3B43		       inc     al
TRANGROUP:3B45		       jz      short eraerr
TRANGROUP:3B47
TRANGROUP:3B47 delete_prompt_loop:		       ; ...
TRANGROUP:3B47		       mov     si, (offset DESTDIR+1)
TRANGROUP:3B4A		       mov     di, offset DEST
TRANGROUP:3B4D		       mov     al, [ds:DIRCHAR]
TRANGROUP:3B50		       stosb
TRANGROUP:3B51		       call    FCB_TO_ASCZ
TRANGROUP:3B54
TRANGROUP:3B54 slashp_askagn:			       ; ...
TRANGROUP:3B54		       call    CRLF2
TRANGROUP:3B57		       mov     dx, offset BWDBUF
TRANGROUP:3B5A		       mov     bx, dx
TRANGROUP:3B5C		       cmp     [byte ptr bx+3],	0 ; END_OF_LINE_OUT
TRANGROUP:3B60		       jnz     short not_del_root
TRANGROUP:3B62		       mov     [byte ptr bx+2],	0
TRANGROUP:3B66
TRANGROUP:3B66 not_del_root:			       ; ...
TRANGROUP:3B66		       mov     [ds:string_ptr_2], dx
TRANGROUP:3B6A		       mov     dx, offset string_buf_ptr
TRANGROUP:3B6D		       call    std_printf
TRANGROUP:3B70		       mov     dx, offset DEST
TRANGROUP:3B73		       mov     [ds:string_ptr_2], dx
TRANGROUP:3B77		       mov     dx, offset string_buf_ptr
TRANGROUP:3B7A		       call    std_printf
TRANGROUP:3B7D		       mov     dx, offset Del_Y_N_Ptr
TRANGROUP:3B80		       call    std_printf
TRANGROUP:3B83		       mov     ax, 0C01h       ; (STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT
TRANGROUP:3B86		       int     21h	       ; DOS - CLEAR KEYBOARD BUFFER
TRANGROUP:3B86					       ; AL must be 01h, 06h, 07h, 08h,	or 0Ah.
TRANGROUP:3B88		       call    char_in_xlat
TRANGROUP:3B8B		       jnb     short slashp_check_yn
TRANGROUP:3B8D		       retn
TRANGROUP:3B8E ; ---------------------------------------------------------------------------
TRANGROUP:3B8E
TRANGROUP:3B8E slashp_check_yn:			       ; ...
TRANGROUP:3B8E		       cmp     al, 0
TRANGROUP:3B90		       jz      short next_del_file
TRANGROUP:3B92		       cmp     al, 1
TRANGROUP:3B94		       jz      short delete_this_file
TRANGROUP:3B96		       jmp     short slashp_askagn
TRANGROUP:3B98 ; ---------------------------------------------------------------------------
TRANGROUP:3B98
TRANGROUP:3B98 delete_this_file:		       ; ...
TRANGROUP:3B98		       mov     ah, 13h	       ; FCB_Delete
TRANGROUP:3B9A		       mov     dx, offset DESTDIR
TRANGROUP:3B9D		       int     21h	       ; DOS - DELETE FILE via FCB
TRANGROUP:3B9D					       ; DS:DX -> FCB with filename field filled with
TRANGROUP:3B9D					       ; template for  deletion	('?' wildcard allowed, but not '*')
TRANGROUP:3B9D					       ; Return: AL = 00h file found, FFh file not found
TRANGROUP:3B9F		       inc     al
TRANGROUP:3BA1		       jnz     short next_del_file
TRANGROUP:3BA3		       call    get_ext_error_number
TRANGROUP:3BA6		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:3BA9		       jnz     short stop_del
TRANGROUP:3BAB		       call    CRLF2
TRANGROUP:3BAE		       call    Set_Ext_Error_Msg
TRANGROUP:3BB1		       call    std_eprintf
TRANGROUP:3BB4		       jmp     short next_del_file
TRANGROUP:3BB6 ; ---------------------------------------------------------------------------
TRANGROUP:3BB6
TRANGROUP:3BB6 stop_del:			       ; ...
TRANGROUP:3BB6		       jmp     eraerr
TRANGROUP:3BB9 ; ---------------------------------------------------------------------------
TRANGROUP:3BB9
TRANGROUP:3BB9 next_del_file:			       ; ...
TRANGROUP:3BB9		       mov     ah, 1Ah
TRANGROUP:3BBB		       mov     dx, offset DESTDIR
TRANGROUP:3BBE		       int     21h	       ; DOS - SET DISK	TRANSFER AREA ADDRESS
TRANGROUP:3BBE					       ; DS:DX -> disk transfer	buffer
TRANGROUP:3BC0		       mov     ah, 12h
TRANGROUP:3BC2		       mov     dx, 5Ch
TRANGROUP:3BC5		       int     21h	       ; DOS - SEARCH NEXT USING FCB
TRANGROUP:3BC5					       ; DS:DX -> FCB
TRANGROUP:3BC5					       ; Return: AL = status
TRANGROUP:3BC7		       inc     al
TRANGROUP:3BC9		       jz      short slash_p_exit
TRANGROUP:3BCB		       jmp     delete_prompt_loop
TRANGROUP:3BCE ; ---------------------------------------------------------------------------
TRANGROUP:3BCE
TRANGROUP:3BCE slash_p_exit:			       ; ...
TRANGROUP:3BCE		       call    get_ext_error_number
TRANGROUP:3BD1		       cmp     ax, 18	       ; ERROR_NO_MORE_FILES
TRANGROUP:3BD4		       jz      short good_erase_exit
TRANGROUP:3BD6		       jmp     extend_setup
TRANGROUP:3BD9 ; ---------------------------------------------------------------------------
TRANGROUP:3BD9
TRANGROUP:3BD9 good_erase_exit:			       ; ...
TRANGROUP:3BD9		       call    RestUDir
TRANGROUP:3BDC		       call    CRLF2
TRANGROUP:3BDF		       retn
TRANGROUP:3BE0 ; ---------------------------------------------------------------------------
TRANGROUP:3BE0
TRANGROUP:3BE0 _ECHO:				       ; ...
TRANGROUP:3BE0		       call    ON_OFF
TRANGROUP:3BE3		       jb      short DOEMES
TRANGROUP:3BE5		       mov     ds, [ds:RESSEG]
TRANGROUP:3BE9		       jnz     short ECH_OFF
TRANGROUP:3BEB		       or      [ds:EchoFlag], 1
TRANGROUP:3BF0		       retn
TRANGROUP:3BF1 ; ---------------------------------------------------------------------------
TRANGROUP:3BF1
TRANGROUP:3BF1 ECH_OFF:				       ; ...
TRANGROUP:3BF1		       and     [ds:EchoFlag], 0FEh
TRANGROUP:3BF6		       retn
TRANGROUP:3BF7 ; ---------------------------------------------------------------------------
TRANGROUP:3BF7
TRANGROUP:3BF7 CERRORJ:				       ; ...
TRANGROUP:3BF7		       jmp     cerror
TRANGROUP:3BFA ; ---------------------------------------------------------------------------
TRANGROUP:3BFA
TRANGROUP:3BFA DOEMES:				       ; ...
TRANGROUP:3BFA		       cmp     cl, 0
TRANGROUP:3BFD		       jz      short PECHO
TRANGROUP:3BFF		       mov     dx, 82h
TRANGROUP:3C02		       call    CRPRINT
TRANGROUP:3C05		       jmp     CRLF2
TRANGROUP:3C08 ; ---------------------------------------------------------------------------
TRANGROUP:3C08
TRANGROUP:3C08 PECHO:				       ; ...
TRANGROUP:3C08		       mov     ds, [ds:RESSEG]
TRANGROUP:3C0C		       mov     bl, [ds:EchoFlag]
TRANGROUP:3C10		       push    cs
TRANGROUP:3C11		       pop     ds
TRANGROUP:3C12		       assume ds:TRANGROUP
TRANGROUP:3C12		       and     bl, 1
TRANGROUP:3C15		       mov     dx, offset EchoMes_Ptr
TRANGROUP:3C18		       jmp     short PYN
TRANGROUP:3C1A ; ---------------------------------------------------------------------------
TRANGROUP:3C1A
TRANGROUP:3C1A CNTRLC:				       ; ...
TRANGROUP:3C1A		       call    ON_OFF
TRANGROUP:3C1D		       mov     ax, 3301h       ; (Set_CTRL_C_Trapping<<8)|1
TRANGROUP:3C20		       jb      short PCNTRLC
TRANGROUP:3C22		       jnz     short CNTRLC_OFF
TRANGROUP:3C24		       mov     dl, 1
TRANGROUP:3C26		       int     21h	       ; DOS - EXTENDED	CONTROL-BREAK CHECKING
TRANGROUP:3C26					       ; AL = 00h get state / 01h set state / 02h set AND get
TRANGROUP:3C26					       ; DL = 00h for OFF or 01h for ON
TRANGROUP:3C28		       retn
TRANGROUP:3C29 ; ---------------------------------------------------------------------------
TRANGROUP:3C29
TRANGROUP:3C29 CNTRLC_OFF:			       ; ...
TRANGROUP:3C29		       xor     dl, dl
TRANGROUP:3C2B		       int     21h	       ; DOS -
TRANGROUP:3C2D		       retn
TRANGROUP:3C2E ; ---------------------------------------------------------------------------
TRANGROUP:3C2E
TRANGROUP:3C2E PCNTRLC:				       ; ...
TRANGROUP:3C2E		       cmp     cl, 0
TRANGROUP:3C31		       jnz     short CERRORJ
TRANGROUP:3C33		       xor     al, al
TRANGROUP:3C35		       int     21h	       ; DOS -
TRANGROUP:3C37		       mov     bl, dl
TRANGROUP:3C39		       mov     dx, offset CtrlcMes_Ptr
TRANGROUP:3C3C
TRANGROUP:3C3C PYN:				       ; ...
TRANGROUP:3C3C		       mov     si, offset ONMES_PTR
TRANGROUP:3C3F		       or      bl, bl
TRANGROUP:3C41		       jnz     short PRINTVAL
TRANGROUP:3C43		       mov     si, offset OFFMES_PTR
TRANGROUP:3C46
TRANGROUP:3C46 PRINTVAL:			       ; ...
TRANGROUP:3C46		       push    dx
TRANGROUP:3C47		       mov     bx, dx
TRANGROUP:3C49		       lodsw
TRANGROUP:3C4A		       mov     dh, 0FFh	       ; util_msg_class
TRANGROUP:3C4C		       call    TSYSGETMSG
TRANGROUP:3C4F		       add     bx, 5	       ; Ptr_off_pos
TRANGROUP:3C52		       mov     [bx], si
TRANGROUP:3C54		       pop     dx
TRANGROUP:3C55		       call    std_printf
TRANGROUP:3C58		       mov     [word ptr bx], 0
TRANGROUP:3C5C		       retn
TRANGROUP:3C5D ; ---------------------------------------------------------------------------
TRANGROUP:3C5D
TRANGROUP:3C5D VERIFY:				       ; ...
TRANGROUP:3C5D		       call    ON_OFF
TRANGROUP:3C60		       mov     ax, 2E01h       ; (SET_VERIFY_ON_WRITE<<8)|1
TRANGROUP:3C63		       jb      short PVERIFY
TRANGROUP:3C65		       jnz     short VER_OFF
TRANGROUP:3C67		       int     21h	       ; DOS - SET VERIFY FLAG
TRANGROUP:3C67					       ; DL = 00h, AL =	01h VERIFY on /	00h VERIFY off
TRANGROUP:3C69		       retn
TRANGROUP:3C6A ; ---------------------------------------------------------------------------
TRANGROUP:3C6A
TRANGROUP:3C6A VER_OFF:				       ; ...
TRANGROUP:3C6A		       dec     al
TRANGROUP:3C6C		       int     21h	       ; DOS -
TRANGROUP:3C6E		       retn
TRANGROUP:3C6F ; ---------------------------------------------------------------------------
TRANGROUP:3C6F
TRANGROUP:3C6F PVERIFY:				       ; ...
TRANGROUP:3C6F		       cmp     cl, 0
TRANGROUP:3C72		       jnz     short CERRORJ
TRANGROUP:3C74		       mov     ah, 54h
TRANGROUP:3C76		       int     21h	       ; DOS - 2+ - GET	VERIFY FLAG
TRANGROUP:3C76					       ; Return: AL = 00h if flag OFF
TRANGROUP:3C76					       ; AL = 01h if flag ON
TRANGROUP:3C78		       mov     bl, al
TRANGROUP:3C7A		       mov     dx, offset VeriMes_Ptr
TRANGROUP:3C7D		       jmp     short PYN
TRANGROUP:3C7F
TRANGROUP:3C7F ; =============== S U B R O U T I N E =======================================
TRANGROUP:3C7F
TRANGROUP:3C7F
TRANGROUP:3C7F proc	       ON_OFF near	       ; ...
TRANGROUP:3C7F		       mov     si, 81h
TRANGROUP:3C82
TRANGROUP:3C82 scan_on_off:			       ; ...
TRANGROUP:3C82		       lodsb
TRANGROUP:3C83		       cmp     al, 20h ; ' '
TRANGROUP:3C85		       jz      short scan_on_off
TRANGROUP:3C87		       cmp     al, 9
TRANGROUP:3C89		       jz      short scan_on_off
TRANGROUP:3C8B		       cmp     al, 3Dh ; '='
TRANGROUP:3C8D		       jz      short parse_on_off
TRANGROUP:3C8F		       dec     si
TRANGROUP:3C90
TRANGROUP:3C90 parse_on_off:			       ; ...
TRANGROUP:3C90		       mov     di, offset PARSE_BREAK
TRANGROUP:3C93		       xor     cx, cx
TRANGROUP:3C95		       xor     dx, dx
TRANGROUP:3C97		       call    cmd_parse
TRANGROUP:3C9A		       cmp     ax, 0FFFFh      ; END_OF_LINE
TRANGROUP:3C9D		       jz      short BADONF
TRANGROUP:3C9F		       cmp     ax, 0
TRANGROUP:3CA2		       jz      short on_off_there
TRANGROUP:3CA4		       mov     cx, ax
TRANGROUP:3CA6		       jmp     short BADONF
TRANGROUP:3CA8 ; ---------------------------------------------------------------------------
TRANGROUP:3CA8
TRANGROUP:3CA8 on_off_there:			       ; ...
TRANGROUP:3CA8		       cmp     [PARSE1_CODE], 0FFh
TRANGROUP:3CAD		       jnz     short good_on_off
TRANGROUP:3CAF		       mov     cx, 0Ah	       ; BadParm_Ptr
TRANGROUP:3CB2		       jmp     short BADONF
TRANGROUP:3CB4 ; ---------------------------------------------------------------------------
TRANGROUP:3CB4
TRANGROUP:3CB4 good_on_off:			       ; ...
TRANGROUP:3CB4		       xor     ax, ax
TRANGROUP:3CB6		       or      al, [PARSE1_CODE]
TRANGROUP:3CBA		       pushf
TRANGROUP:3CBB		       mov     di, offset PARSE_BREAK
TRANGROUP:3CBE		       xor     dx, dx
TRANGROUP:3CC0		       call    cmd_parse
TRANGROUP:3CC3		       cmp     ax, 0FFFFh      ; END_OF_LINE
TRANGROUP:3CC6		       jnz     short BADONF_flags
TRANGROUP:3CC8		       popf
TRANGROUP:3CC9		       clc
TRANGROUP:3CCA		       jmp     short on_off_end
TRANGROUP:3CCC ; ---------------------------------------------------------------------------
TRANGROUP:3CCC
TRANGROUP:3CCC BADONF_flags:			       ; ...
TRANGROUP:3CCC		       mov     cx, ax
TRANGROUP:3CCE		       popf
TRANGROUP:3CCF
TRANGROUP:3CCF BADONF:				       ; ...
TRANGROUP:3CCF		       mov     dx, offset bad_on_off_ptr
TRANGROUP:3CD2		       stc
TRANGROUP:3CD3
TRANGROUP:3CD3 on_off_end:			       ; ...
TRANGROUP:3CD3		       retn
TRANGROUP:3CD3 endp	       ON_OFF
TRANGROUP:3CD3
TRANGROUP:3CD4 ; ---------------------------------------------------------------------------
TRANGROUP:3CD4
TRANGROUP:3CD4 PRINT_DATE:			       ; ...
TRANGROUP:3CD4		       push    es
TRANGROUP:3CD5		       push    di
TRANGROUP:3CD6		       push    cs
TRANGROUP:3CD7		       pop     es
TRANGROUP:3CD8		       assume es:TRANGROUP
TRANGROUP:3CD8		       call    GetDate
TRANGROUP:3CDB		       xchg    dh, dl
TRANGROUP:3CDD		       mov     [promptDat_yr], cx
TRANGROUP:3CE1		       mov     [promptDat_moday], dx
TRANGROUP:3CE5		       mov     dx, offset promptdat_ptr
TRANGROUP:3CE8		       call    std_printf
TRANGROUP:3CEB		       pop     di
TRANGROUP:3CEC		       pop     es
TRANGROUP:3CED		       assume es:nothing
TRANGROUP:3CED		       retn
TRANGROUP:3CEE
TRANGROUP:3CEE ; =============== S U B R O U T I N E =======================================
TRANGROUP:3CEE
TRANGROUP:3CEE
TRANGROUP:3CEE proc	       GetDate near	       ; ...
TRANGROUP:3CEE		       mov     di, offset TPBUF	; Arg_Buf
TRANGROUP:3CF1		       mov     ah, 2Ah
TRANGROUP:3CF3		       int     21h	       ; DOS - GET CURRENT DATE
TRANGROUP:3CF3					       ; Return: DL = day, DH =	month, CX = year
TRANGROUP:3CF3					       ; AL = day of the week (0=Sunday, 1=Monday, etc.)
TRANGROUP:3CF5		       cbw
TRANGROUP:3CF6		       push    cx
TRANGROUP:3CF7		       push    dx
TRANGROUP:3CF8		       mov     si, ax
TRANGROUP:3CFA		       shl     si, 1
TRANGROUP:3CFC		       add     si, ax
TRANGROUP:3CFE		       mov     cx, si
TRANGROUP:3D00		       mov     ax, [WeekTab]
TRANGROUP:3D03		       mov     dh, 0FFh	       ; util_msg_class
TRANGROUP:3D05		       push    di
TRANGROUP:3D06		       call    TSYSGETMSG
TRANGROUP:3D09		       pop     di
TRANGROUP:3D0A		       add     si, cx
TRANGROUP:3D0C		       rep movsb
TRANGROUP:3D0E		       mov     al, 0	       ; END_OF_LINE_OUT
TRANGROUP:3D10		       stosb
TRANGROUP:3D11		       pop     dx
TRANGROUP:3D12		       pop     cx
TRANGROUP:3D13		       retn
TRANGROUP:3D13 endp	       GetDate
TRANGROUP:3D13
TRANGROUP:3D14
TRANGROUP:3D14 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3D14
TRANGROUP:3D14
TRANGROUP:3D14 proc	       char_in_xlat near       ; ...
TRANGROUP:3D14		       mov     dl, al
TRANGROUP:3D16		       xor     dh, dh
TRANGROUP:3D18		       mov     ax, 6523h       ; (GetExtCntry<<8)+23h
TRANGROUP:3D1B		       int     21h	       ; DOS - 4.x internal - COUNTRY-DEPENDENT	FILENAME CAPITALIZATION
TRANGROUP:3D1B					       ; AL = function -
TRANGROUP:3D1D		       retn
TRANGROUP:3D1D endp	       char_in_xlat
TRANGROUP:3D1D
TRANGROUP:3D1E ; ---------------------------------------------------------------------------
TRANGROUP:3D1E
TRANGROUP:3D1E COPY:				       ; ...
TRANGROUP:3D1E		       xor     ax, ax	       ; 0
TRANGROUP:3D20		       mov     [Copy_num], ax
TRANGROUP:3D23		       mov     [SRCPT],	ax
TRANGROUP:3D26		       mov     [SrcTail], ax
TRANGROUP:3D29		       mov     [CFLAG],	al
TRANGROUP:3D2C		       mov     [NXTADD], ax
TRANGROUP:3D2F		       mov     [DestSwitch], ax
TRANGROUP:3D32		       mov     [STARTEL], ax
TRANGROUP:3D35		       mov     [DestTail], ax
TRANGROUP:3D38		       mov     [SPECDRV], al   ; DestClosed
TRANGROUP:3D3B		       mov     [DestSiz], al
TRANGROUP:3D3E		       mov     [SrcSiz], al
TRANGROUP:3D41		       mov     [DestInfo], al
TRANGROUP:3D44		       mov     [SrcInfo], al
TRANGROUP:3D47		       mov     [INEXACT], al
TRANGROUP:3D4A		       mov     [DestIsDir], al ; DestVars
TRANGROUP:3D4D		       mov     [SrcIsDir], al  ; SrcVars
TRANGROUP:3D50		       mov     [USERDIR1], al
TRANGROUP:3D53		       mov     [NOWRITE], al
TRANGROUP:3D56		       mov     [IFNOTFLAG], al ; RDEOF
TRANGROUP:3D59		       mov     [SRCHAND], ax
TRANGROUP:3D5C		       mov     [CPDATE], ax
TRANGROUP:3D5F		       mov     [CPTIME], ax
TRANGROUP:3D62		       mov     [SRCISDEV], al
TRANGROUP:3D65		       mov     [zflag],	al     ; OCtrlZ
TRANGROUP:3D68		       mov     [OFilePtr_Lo], ax
TRANGROUP:3D6B		       mov     [OFilePtr_Hi], ax
TRANGROUP:3D6E		       mov     [TERMREAD], al
TRANGROUP:3D71		       mov     [comma],	al
TRANGROUP:3D74		       mov     [plus_comma], al
TRANGROUP:3D77		       mov     [msg_flag], al
TRANGROUP:3D7A		       mov     [ARGTS],	ax     ; AllSwitch
TRANGROUP:3D7D		       mov     [PARM2],	al     ; ArgC
TRANGROUP:3D80		       mov     [PLUS], al
TRANGROUP:3D83		       mov     [BINARY], al
TRANGROUP:3D86		       mov     [ASCII],	al
TRANGROUP:3D89		       mov     [FileCnt], ax
TRANGROUP:3D8C		       mov     [WRITTEN], ax
TRANGROUP:3D8F		       mov     [PARM1],	al     ; Concat
TRANGROUP:3D92		       mov     [MELCOPY], al
TRANGROUP:3D95		       mov     [MELSTART], ax
TRANGROUP:3D98		       mov     [cox_dest_file],	al
TRANGROUP:3D9B		       mov     [cox_src_file], al
TRANGROUP:3D9E		       mov     [word ptr ScanBuf], ax
TRANGROUP:3DA1		       mov     [word ptr DestBuf], ax
TRANGROUP:3DA4		       mov     [word ptr SrcBuf], ax
TRANGROUP:3DA7		       mov     [word ptr SDIRBUF], ax
TRANGROUP:3DAA		       mov     [word ptr BWDBUF], ax ; DIRBUF
TRANGROUP:3DAD		       mov     [word ptr DESTDIR], ax ;	DestFcb
TRANGROUP:3DB0		       mov     [objcnt], al
TRANGROUP:3DB3		       dec     ax
TRANGROUP:3DB4		       mov     [EndDestBuf], ax	; DESTHAND
TRANGROUP:3DB7		       mov     [FRSTSRCH], al
TRANGROUP:3DBA		       mov     [FIRSTDEST], al
TRANGROUP:3DBD		       mov     [DestIsDir], al
TRANGROUP:3DC0		       call    init_copycmd_option
TRANGROUP:3DC3		       mov     si, 81h
TRANGROUP:3DC6		       mov     bl, 2Bh ; '+'   ; PLUS_CHR
TRANGROUP:3DC8		       inc     [expand_star]   ; byte ;	CParse 'expand * to ?s' = true
TRANGROUP:3DCC		       mov     [cpyflag], 1    ; CParse	'called from COPY' = true
TRANGROUP:3DD1
TRANGROUP:3DD1 DESTSCAN:			       ; ...
TRANGROUP:3DD1		       xor     bp, bp
TRANGROUP:3DD3		       mov     di, offset ScanBuf
TRANGROUP:3DD6		       mov     [parse_last], si
TRANGROUP:3DDA		       call    cparse
TRANGROUP:3DDD		       pushf		       ;  (*) ;	save CParse flags
TRANGROUP:3DDE		       inc     [objcnt]	       ; byte
TRANGROUP:3DE2		       test    bh, 80h
TRANGROUP:3DE5		       jz      short NOCOPY    ; no "+"	delimiter
TRANGROUP:3DE7		       mov     [PLUS], 1       ; "+" delimiter occurred
TRANGROUP:3DEC
TRANGROUP:3DEC NOCOPY:				       ; ...
TRANGROUP:3DEC		       test    bh, 1
TRANGROUP:3DEF		       jnz     short CHK_CP_SWITCH
TRANGROUP:3DF1		       jmp     TESTP2
TRANGROUP:3DF4 ; ---------------------------------------------------------------------------
TRANGROUP:3DF4
TRANGROUP:3DF4 CHK_CP_SWITCH:			       ; ...
TRANGROUP:3DF4		       test    bp, 10h	       ; Verify	requested?
TRANGROUP:3DF8		       jz      short NOT_SLASHV	; No
TRANGROUP:3DFA		       test    [ARGTS],	10h    ; test word [AllSwitch],10h
TRANGROUP:3E00		       jz      short NOT_SLASHV
TRANGROUP:3E02		       or      bp, 4000h       ; FBadSwitch
TRANGROUP:3E06
TRANGROUP:3E06 NOT_SLASHV:			       ; ...
TRANGROUP:3E06		       test    bp, 40h	       ; negative Y (-Y) switch	flag
TRANGROUP:3E0A		       jz      short CHK_SLASHY0
TRANGROUP:3E0C		       test    [ARGTS],	40h    ; [AllSwitch] ; negative	(-Y) flag
TRANGROUP:3E12		       jnz     short NOT_SLASHY1
TRANGROUP:3E14		       test    [ARGTS],	80h    ; [AllSwitch] ; SwitchY (Y) flag
TRANGROUP:3E1A		       jz      short NOT_SLASHY2
TRANGROUP:3E1C
TRANGROUP:3E1C NOT_SLASHY1:			       ; ...
TRANGROUP:3E1C		       or      bp, 4000h       ; FBadSwitch (Repetitive)
TRANGROUP:3E20
TRANGROUP:3E20 NOT_SLASHY2:			       ; ...
TRANGROUP:3E20		       mov     [cox_y_override], 0 ; cox_y setting will	be used
TRANGROUP:3E25
TRANGROUP:3E25 CHK_SLASHY0:			       ; ...
TRANGROUP:3E25		       test    bp, 80h
TRANGROUP:3E29		       jz      short CHK_SLASHY4
TRANGROUP:3E2B		       mov     al, [si]
TRANGROUP:3E2D		       cmp     al, 'y'
TRANGROUP:3E2F		       jz      short CHK_SLASHY1
TRANGROUP:3E31		       cmp     al, 'Y'
TRANGROUP:3E33		       jz      short CHK_SLASHY1
TRANGROUP:3E35		       or      bp, 4000h       ; FBadSwitch
TRANGROUP:3E39		       jmp     short CHK_SLASHY4
TRANGROUP:3E3B ; ---------------------------------------------------------------------------
TRANGROUP:3E3B
TRANGROUP:3E3B CHK_SLASHY1:			       ; ...
TRANGROUP:3E3B		       mov     [byte ptr si], 20h ; ' '
TRANGROUP:3E3E		       inc     si
TRANGROUP:3E3F		       test    [ARGTS],	40h    ; [AllSwitch] ; negative	(-Y) flag
TRANGROUP:3E45		       jnz     short CHK_SLASHY2 ; N flag
TRANGROUP:3E47		       test    [ARGTS],	80h    ; [AllSwitch] ; SwitchY (Y) flag
TRANGROUP:3E4D		       jz      short CHK_SLASHY3
TRANGROUP:3E4F
TRANGROUP:3E4F CHK_SLASHY2:			       ; ...
TRANGROUP:3E4F		       or      bp, 4000h       ; FBadSwitch (Repetitive)
TRANGROUP:3E53
TRANGROUP:3E53 CHK_SLASHY3:			       ; ...
TRANGROUP:3E53		       mov     [cox_y_override], 1
TRANGROUP:3E58
TRANGROUP:3E58 CHK_SLASHY4:			       ; ...
TRANGROUP:3E58		       or      [DestSwitch], bp	; set [DestSwitch] SwitchY flag	to 1
TRANGROUP:3E5C		       or      [ARGTS],	bp     ; set [AllSwitch] SwitchY flag to 1
TRANGROUP:3E60		       test    bp, 7F23h       ; ~SwitchCopy  ;	Bad switch?
TRANGROUP:3E64		       jz      short NOT_BAD_SWITCH
TRANGROUP:3E66		       popf		       ; (*) ; fix up stack
TRANGROUP:3E67		       mov     ax, 3	       ; BadSwt_Ptr
TRANGROUP:3E67					       ; get "Invalid switch" message number
TRANGROUP:3E6A		       call    setup_parse_error_msg
TRANGROUP:3E6D		       jmp     cerror
TRANGROUP:3E70 ; ---------------------------------------------------------------------------
TRANGROUP:3E70
TRANGROUP:3E70 NOT_BAD_SWITCH:			       ; ...
TRANGROUP:3E70		       popf
TRANGROUP:3E71		       jb      short CHECKDONE
TRANGROUP:3E73		       jmp     DESTSCAN
TRANGROUP:3E76 ; ---------------------------------------------------------------------------
TRANGROUP:3E76
TRANGROUP:3E76 TESTP2:				       ; ...
TRANGROUP:3E76		       popf		       ; (*) ; restore CParse flags
TRANGROUP:3E77		       jb      short CHECKDONE
TRANGROUP:3E79		       test    bh, 80h
TRANGROUP:3E7C		       jnz     short GOTPLUS   ; found a "+pathname" argument
TRANGROUP:3E7E		       inc     [PARM2]	       ; inc byte [ArgC]
TRANGROUP:3E82
TRANGROUP:3E82 GOTPLUS:				       ; ...
TRANGROUP:3E82		       push    si
TRANGROUP:3E83		       mov     ax, [STARTEL]
TRANGROUP:3E86		       mov     si, offset ScanBuf
TRANGROUP:3E89		       sub     ax, si
TRANGROUP:3E8B		       mov     di, offset DestBuf
TRANGROUP:3E8E		       add     ax, di
TRANGROUP:3E90		       mov     [DestTail], ax
TRANGROUP:3E93		       mov     [DestSiz], cl
TRANGROUP:3E97		       inc     cx
TRANGROUP:3E98		       rep movsb
TRANGROUP:3E9A		       mov     [DestInfo], bh
TRANGROUP:3E9E		       mov     [DestSwitch], 0 ; word
TRANGROUP:3EA4		       pop     si
TRANGROUP:3EA5		       jmp     DESTSCAN
TRANGROUP:3EA8 ; ---------------------------------------------------------------------------
TRANGROUP:3EA8
TRANGROUP:3EA8 CHECKDONE:			       ; ...
TRANGROUP:3EA8		       cmp     [PLUS], 1       ; "+" with
TRANGROUP:3EAD		       jnz     short CDCONT
TRANGROUP:3EAF		       cmp     [PARM2],	1      ; cmp byte [ArgC],1 ; one arg,
TRANGROUP:3EB4		       jnz     short CDCONT
TRANGROUP:3EB6		       cmp     [objcnt], 2     ; two objects..
TRANGROUP:3EBB		       jnz     short CDCONT
TRANGROUP:3EBD		       mov     dx, offset OVERWR_PTR
TRANGROUP:3EC0		       jmp     COPYERR
TRANGROUP:3EC3 ; ---------------------------------------------------------------------------
TRANGROUP:3EC3
TRANGROUP:3EC3 CDCONT:				       ; ...
TRANGROUP:3EC3		       mov     al, [PLUS]
TRANGROUP:3EC6		       mov     [PARM1],	al     ; mov [Concat],al
TRANGROUP:3EC6					       ; if "+"	occurred, we're concatenating
TRANGROUP:3EC9		       shl     al, 1
TRANGROUP:3ECB		       shl     al, 1
TRANGROUP:3ECD		       mov     [INEXACT], al   ; therefore making an inexact copy
TRANGROUP:3ED0		       mov     al, [PARM2]     ; [ArgC]	; AL = # independent arguments
TRANGROUP:3ED3		       or      al, al
TRANGROUP:3ED5		       jnz     short TRY_TOO_MANY
TRANGROUP:3ED7		       mov     dx, offset extend_buf_ptr
TRANGROUP:3EDA		       mov     [extend_buf_ptr], 2 ; LessArgs_Ptr ; set	msg # "param missing"
TRANGROUP:3EE0		       jmp     short CERROR_PARSEJ
TRANGROUP:3EE2 ; ---------------------------------------------------------------------------
TRANGROUP:3EE2
TRANGROUP:3EE2 TRY_TOO_MANY:			       ; ...
TRANGROUP:3EE2		       cmp     al, 2
TRANGROUP:3EE4		       jbe     short ACOUNTOK  ; <= 2 arguments	- ok
TRANGROUP:3EE6		       mov     dx, offset extend_buf_ptr
TRANGROUP:3EE9		       mov     [extend_buf_ptr], 1 ; MoreArgs_Ptr ; set	msg # "too many	params"
TRANGROUP:3EEF
TRANGROUP:3EEF CERROR_PARSEJ:			       ; ...
TRANGROUP:3EEF		       mov     [msg_disp_class], 2 ; parse_msg_class ; parse error message
TRANGROUP:3EF4
TRANGROUP:3EF4 CERROR4J:			       ; ...
TRANGROUP:3EF4		       jmp     cerror
TRANGROUP:3EF7 ; ---------------------------------------------------------------------------
TRANGROUP:3EF7
TRANGROUP:3EF7 ACOUNTOK:			       ; ...
TRANGROUP:3EF7		       mov     bp, offset DestIsDir ; DestVars ; BP = base of dest variables
TRANGROUP:3EFA		       cmp     al, 1
TRANGROUP:3EFC		       jnz     short GOT2ARGS
TRANGROUP:3EFE		       mov     al, [CURDRV]
TRANGROUP:3F01		       add     al, 'A'
TRANGROUP:3F03		       mov     ah, ':'
TRANGROUP:3F05		       mov     [byte ptr bp+1],	2 ; [bp+VARSTRUC.SIZ],2	; pathname length = 2
TRANGROUP:3F09		       mov     di, offset DestBuf
TRANGROUP:3F0C		       stosw
TRANGROUP:3F0D		       mov     [DestSwitch], 0 ; word
TRANGROUP:3F13		       mov     [byte ptr bp+4],	2 ; [bp+VARSTRUC.INFO] ; 'wildcard present'
TRANGROUP:3F17		       mov     [byte ptr bp+0],	0 ; [bp+VARSTRUC.ISDIR]	; 'not a directory'
TRANGROUP:3F1B		       call    SETSTARS
TRANGROUP:3F1E
TRANGROUP:3F1E GOT2ARGS:			       ; ...
TRANGROUP:3F1E		       cmp     [byte ptr bp+1],	2 ; [bp+VARSTRUC.SIZ],2
TRANGROUP:3F22		       jnz     short NOTSHORTDEST ; not	two chars, can't be "d:"
TRANGROUP:3F24		       mov     al, ':'
TRANGROUP:3F26		       cmp     [DestBuf+1], al
TRANGROUP:3F2A		       jnz     short NOTSHORTDEST ; it's just a 2-character filename
TRANGROUP:3F2C		       or      [byte ptr bp+4],	2 ; [bp+VARSTRUC.INFO] ; 'wildcard present'
TRANGROUP:3F30		       mov     di, (offset DestBuf+2) ;	ES:DI =	ptr after "d:"
TRANGROUP:3F33		       mov     [byte ptr bp+0],	0 ; [bp+VARSTRUC.ISDIR]	; 'not a directory'
TRANGROUP:3F37		       call    SETSTARS	       ; add wildcards
TRANGROUP:3F3A
TRANGROUP:3F3A NOTSHORTDEST:			       ; ...
TRANGROUP:3F3A		       mov     di, [bp+2]      ; [bp+VARSTRUC.TTAIL]
TRANGROUP:3F3D		       cmp     [byte ptr di], 0
TRANGROUP:3F40		       jnz     short CHKSWTCHES	; not a	null, so last char not "\"
TRANGROUP:3F42		       mov     dx, offset badcd_ptr
TRANGROUP:3F45		       mov     al, ':'
TRANGROUP:3F47		       cmp     [di-2], al
TRANGROUP:3F4A		       jnz     short CERROR4J  ; it's not "d:\", exit with error msg
TRANGROUP:3F4C		       mov     [byte ptr bp+0],	2 ; [bp+VARSTRUC.ISDIR],2
TRANGROUP:3F4C					       ; destination 'is a directory'
TRANGROUP:3F50		       or      [byte ptr bp+4],	6 ; [bp+VARSTRUC.INFO],6
TRANGROUP:3F50					       ; destination wildcarded	and contains path character
TRANGROUP:3F54		       call    SETSTARS
TRANGROUP:3F57
TRANGROUP:3F57 CHKSWTCHES:			       ; ...
TRANGROUP:3F57		       mov     ax, [ARGTS]     ; [AllSwitch]  ;	AX = all switch	flags
TRANGROUP:3F5A		       test    ax, 10h	       ; SwitchV
TRANGROUP:3F5D		       jz      short NOVERIF   ; no /v,	no verify
TRANGROUP:3F5F		       mov     ah, 54h	       ; Get_Verify_On_Write
TRANGROUP:3F61		       int     21h	       ; DOS - 2+ - GET	VERIFY FLAG
TRANGROUP:3F61					       ; Return: AL = 00h if flag OFF
TRANGROUP:3F61					       ; AL = 01h if flag ON
TRANGROUP:3F63		       push    ds
TRANGROUP:3F64		       mov     ds, [RESSEG]
TRANGROUP:3F68		       assume ds:RESGROUP
TRANGROUP:3F68		       xor     ah, ah
TRANGROUP:3F6A		       mov     [VerVal], ax    ; save current verify flag
TRANGROUP:3F6D		       pop     ds
TRANGROUP:3F6E		       assume ds:nothing
TRANGROUP:3F6E		       mov     ax, 2E01h       ; (SET_VERIFY_ON_WRITE<<8)|1
TRANGROUP:3F71		       int     21h	       ; DOS - SET VERIFY FLAG
TRANGROUP:3F71					       ; DL = 00h, AL =	01h VERIFY on /	00h VERIFY off
TRANGROUP:3F73
TRANGROUP:3F73 NOVERIF:				       ; ...
TRANGROUP:3F73		       xor     bp, bp	       ; BP = switch flags accumulator
TRANGROUP:3F75		       mov     si, 81h	       ; SI = ptr into command line
TRANGROUP:3F78		       mov     bl, 2Bh ; '+'   ; BL = special CParse delimiter = "+"
TRANGROUP:3F7A
TRANGROUP:3F7A SCANFSRC:			       ; ...
TRANGROUP:3F7A		       mov     di, offset ScanBuf ; DI = ptr to	pathname buf
TRANGROUP:3F7D		       call    cparse	       ; parse first source pathname
TRANGROUP:3F80		       test    bh, 1	       ; switch?
TRANGROUP:3F83		       jnz     short SCANFSRC  ; yes, try again
TRANGROUP:3F85		       or      [ds:DestSwitch],	bp ; include copy-wide switches	on dest
TRANGROUP:3F89		       test    bp, 8	       ; SWITCHB
TRANGROUP:3F8D		       jnz     short NOSETCASC ; /b - explicit binary copy
TRANGROUP:3F8F		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:3F94		       jz      short NOSETCASC ; we're not concatenating
TRANGROUP:3F96		       mov     [ds:ASCII], 4   ; SWITCHA ; set ascii copy
TRANGROUP:3F9B
TRANGROUP:3F9B NOSETCASC:			       ; ...
TRANGROUP:3F9B		       call    SOURCE_SET      ; set source variables
TRANGROUP:3F9E		       call    FRSTSRC	       ; set up	first source copy
TRANGROUP:3FA1		       jmp     FIRSTENT	       ; jump into the copy loop
TRANGROUP:3FA4 ; ---------------------------------------------------------------------------
TRANGROUP:3FA4 ; START OF FUNCTION CHUNK FOR DOCOPY
TRANGROUP:3FA4
TRANGROUP:3FA4 ENDCOPY:				       ; ...
TRANGROUP:3FA4		       call    CLOSEDEST       ; Close destination
TRANGROUP:3FA7
TRANGROUP:3FA7 ENDCOPY2:			       ; ...
TRANGROUP:3FA7		       mov     dx, offset copied_ptr ; display # (destination) files copied
TRANGROUP:3FAA		       mov     si, [ds:FileCnt]
TRANGROUP:3FAE		       mov     [ds:Copy_num], si
TRANGROUP:3FB2		       call    std_printf
TRANGROUP:3FB5		       jmp     TCOMMAND	       ; stack could be	messed up
TRANGROUP:3FB5 ; END OF	FUNCTION CHUNK FOR DOCOPY
TRANGROUP:3FB8 ; ---------------------------------------------------------------------------
TRANGROUP:3FB8
TRANGROUP:3FB8 SRCNONEXIST:			       ; ...
TRANGROUP:3FB8		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:3FBD		       jnz     short NEXTSRC   ; concatenating - go on to next source
TRANGROUP:3FBF		       mov     [ds:msg_disp_class], 1 ;	ext_msg_class ;	extended error msg
TRANGROUP:3FC4		       mov     dx, offset extend_buf_ptr
TRANGROUP:3FC7		       mov     [ds:extend_buf_ptr], 2 ;	ERROR_FILE_NOT_FOUND
TRANGROUP:3FCD		       mov     [ds:string_ptr_2], offset SrcBuf	; point	at bad pathname
TRANGROUP:3FD3		       mov     [ds:extend_buf_sub], 1 ;	one_subst ; 1 substitution
TRANGROUP:3FD8		       jmp     COPYERR	       ; print msg and clean up
TRANGROUP:3FDB
TRANGROUP:3FDB ; =============== S U B R O U T I N E =======================================
TRANGROUP:3FDB
TRANGROUP:3FDB
TRANGROUP:3FDB proc	       SOURCEPROC near	       ; ...
TRANGROUP:3FDB		       call    SOURCE_SET
TRANGROUP:3FDE		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:3FE3		       jnz     short LEAVECFLAG
TRANGROUP:3FE3 endp	       SOURCEPROC
TRANGROUP:3FE3
TRANGROUP:3FE5
TRANGROUP:3FE5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:3FE5
TRANGROUP:3FE5
TRANGROUP:3FE5 proc	       FRSTSRC near	       ; ...
TRANGROUP:3FE5		       xor     ax, ax	       ; 0
TRANGROUP:3FE7		       mov     [ds:CFLAG], al
TRANGROUP:3FEA		       mov     [ds:NXTADD], ax
TRANGROUP:3FED		       mov     [ds:SPECDRV], al
TRANGROUP:3FF0
TRANGROUP:3FF0 LEAVECFLAG:			       ; ...
TRANGROUP:3FF0		       mov     [ds:SRCPT], si
TRANGROUP:3FF4		       mov     di, offset USERDIR1
TRANGROUP:3FF7		       mov     bp, offset SrcIsDir ; SrcVars
TRANGROUP:3FFA		       mov     bx, 40h	       ; deny_none|read_open_mode
TRANGROUP:3FFD		       call    BUILDPATH
TRANGROUP:4000		       mov     si, [ds:SrcTail]
TRANGROUP:4004		       retn
TRANGROUP:4004 endp	       FRSTSRC
TRANGROUP:4004
TRANGROUP:4005 ; ---------------------------------------------------------------------------
TRANGROUP:4005
TRANGROUP:4005 NEXTSRC:				       ; ...
TRANGROUP:4005		       cmp     [ds:PLUS], 0    ; byte
TRANGROUP:400A		       jnz     short MORECP
TRANGROUP:400C
TRANGROUP:400C ENDCOPYJ2:			       ; ...
TRANGROUP:400C		       jmp     short ENDCOPY
TRANGROUP:400E ; ---------------------------------------------------------------------------
TRANGROUP:400E
TRANGROUP:400E MORECP:				       ; ...
TRANGROUP:400E		       xor     bp, bp
TRANGROUP:4010		       mov     si, [ds:SRCPT]
TRANGROUP:4014		       mov     bl, 2Bh ; '+'   ; PLUS_CHR
TRANGROUP:4016
TRANGROUP:4016 SCANSRC:				       ; ...
TRANGROUP:4016		       mov     di, offset ScanBuf
TRANGROUP:4019		       call    cparse
TRANGROUP:401C		       jb      short ENDCOPYJ2
TRANGROUP:401E		       test    bh, 80h
TRANGROUP:4021		       jz      short ENDCOPYJ2 ; no "+"	delimiter - we're done
TRANGROUP:4023		       test    bh, 1
TRANGROUP:4026		       jnz     short SCANSRC   ; switch	found -	keep looking
TRANGROUP:4028		       call    SOURCEPROC
TRANGROUP:402B		       cmp     [ds:comma], 1   ; was +,, found last time?
TRANGROUP:4030		       jnz     short NOSTAMP   ; no - try for a	file
TRANGROUP:4032		       mov     [ds:plus_comma],	1 ; yes	- set flag
TRANGROUP:4037		       jmp     SRCNONEXIST     ; we know we won't find it
TRANGROUP:403A ; ---------------------------------------------------------------------------
TRANGROUP:403A
TRANGROUP:403A NOSTAMP:				       ; ...
TRANGROUP:403A		       mov     [ds:plus_comma],	0 ; reset +,, flag
TRANGROUP:403F
TRANGROUP:403F FIRSTENT:			       ; ...
TRANGROUP:403F		       mov     di, 5Ch	       ; FCB
TRANGROUP:4042		       mov     ax, 2900h
TRANGROUP:4045		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:4045					       ; DS:SI -> string to parse
TRANGROUP:4045					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:4045					       ; AL = bit mask to control parsing
TRANGROUP:4047		       cmp     [byte ptr si], 0	; did we parse the whole thing?
TRANGROUP:404A		       jnz     short SRCHDONE  ; no, error, simulate 'not found'
TRANGROUP:404C		       mov     ax, [word ptr ds:SrcBuf]
TRANGROUP:404F		       cmp     ah, ':'
TRANGROUP:4052		       jz      short DRVSPEC1
TRANGROUP:4054		       mov     al, 40h ; '@'   ; AL = drive 'letter' for current drive
TRANGROUP:4056
TRANGROUP:4056 DRVSPEC1:			       ; ...
TRANGROUP:4056		       or      al, 20h	       ; AL = lowercase	drive letter
TRANGROUP:4058		       sub     al, 60h
TRANGROUP:405A		       mov     [ds:5Ch], al    ; mov [FCB],al ;	AL = drive id (0=current,1=A,..)
TRANGROUP:405D		       mov     ah, 11h	       ; Dir_Search_First
TRANGROUP:405D					       ; AH = 'Find First File'
TRANGROUP:405F		       call    SEARCH
TRANGROUP:4062
TRANGROUP:4062 SRCHDONE:			       ; ...
TRANGROUP:4062		       pushf
TRANGROUP:4063		       call    RestUDir1       ; restore users current directory
TRANGROUP:4066		       popf
TRANGROUP:4067		       jz      short NEXTAMBIG0
TRANGROUP:4069		       jmp     SRCNONEXIST
TRANGROUP:406C ; ---------------------------------------------------------------------------
TRANGROUP:406C
TRANGROUP:406C NEXTAMBIG0:			       ; ...
TRANGROUP:406C		       xor     al, al
TRANGROUP:406E		       xchg    al, [ds:FRSTSRCH]
TRANGROUP:4072		       or      al, al
TRANGROUP:4074		       jz      short NEXTAMBIG
TRANGROUP:4076
TRANGROUP:4076 SETNMEL:				       ; ...
TRANGROUP:4076		       mov     cx, 12
TRANGROUP:4079		       mov     di, offset SDIRBUF
TRANGROUP:407C		       mov     si, offset BWDBUF ; DIRBUF
TRANGROUP:407F		       rep movsb
TRANGROUP:4081
TRANGROUP:4081 NEXTAMBIG:			       ; ...
TRANGROUP:4081		       xor     al, al
TRANGROUP:4083		       mov     [ds:NOWRITE], al
TRANGROUP:4086		       mov     di, [ds:SrcTail]
TRANGROUP:408A		       mov     si, (offset BWDBUF+1) ; offset DIRBUF+1
TRANGROUP:408D		       call    FCB_TO_ASCZ
TRANGROUP:4090
TRANGROUP:4090 MELDO0:				       ; ...
TRANGROUP:4090		       cmp     [ds:cox_y_override], 0 ;	/Y switch override (question) enabled ?
TRANGROUP:4095		       jz      short MELDO     ; no
TRANGROUP:4097		       call    BUILDDEST
TRANGROUP:409A		       mov     si, offset SrcBuf
TRANGROUP:409D		       mov     di, offset SRCXNAME
TRANGROUP:40A0		       mov     ax, 6000h
TRANGROUP:40A3		       int     21h	       ; DOS - RESOLVE PATH STRING TO CANONICAL	PATH STRING
TRANGROUP:40A3					       ; DS:SI -> ASCIZ	relative path string or	directory name
TRANGROUP:40A3					       ; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
TRANGROUP:40A5		       call    COMPNAME
TRANGROUP:40A8		       jnz     short MELDO1    ; different file	names
TRANGROUP:40AA		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:40AF		       jnz     short MELDO1    ; concatenating
TRANGROUP:40B1		       mov     dx, offset file_name_ptr
TRANGROUP:40B4		       call    std_printf
TRANGROUP:40B7		       call    CRLF2
TRANGROUP:40BA		       mov     dx, offset OVERWR_PTR ; "File cannot be copied onto itself"
TRANGROUP:40BD		       jmp     COPYERR
TRANGROUP:40C0 ; ---------------------------------------------------------------------------
TRANGROUP:40C0
TRANGROUP:40C0 MELDO1:				       ; ...
TRANGROUP:40C0		       cmp     [ds:CFLAG], 0   ; destination file created flag
TRANGROUP:40C5		       jnz     short MELDO     ; yes, new (created) file
TRANGROUP:40C7		       call    get_answer_YNA
TRANGROUP:40CA		       jb      short MELDO2    ; answer	is no
TRANGROUP:40CC		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:40D1		       jnz     short MELDO
TRANGROUP:40D3		       cmp     [ds:cox_dest_file], 0 ; is there	a (valid) target file ?
TRANGROUP:40D8		       jnz     short DOREAD    ; yes
TRANGROUP:40DA		       jmp     short MELDO     ; no, destination/target	file does not exist
TRANGROUP:40DC ; ---------------------------------------------------------------------------
TRANGROUP:40DC
TRANGROUP:40DC MELDO2:				       ; ...
TRANGROUP:40DC		       cmp     [ds:MELCOPY], 0 ; is 'Mel Hallerman copy' false ?
TRANGROUP:40E1		       jnz     short MELDO3    ; no (, it is true)
TRANGROUP:40E3		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:40E8		       jz      short MELDO4
TRANGROUP:40EA
TRANGROUP:40EA MELDO3:				       ; ...
TRANGROUP:40EA		       mov     [ds:SPECDRV], 1 ; mov byte [DestClosed],1
TRANGROUP:40EF		       jmp     ENDCOPY
TRANGROUP:40F2 ; ---------------------------------------------------------------------------
TRANGROUP:40F2
TRANGROUP:40F2 MELDO4:				       ; ...
TRANGROUP:40F2		       call    SEARCHNEXT
TRANGROUP:40F5		       jz      short NEXTAMBIG
TRANGROUP:40F7		       cmp     [ds:cox_src_file], 0
TRANGROUP:40FC		       jz      short MELDO5
TRANGROUP:40FE		       jmp     NEXTSRC
TRANGROUP:4101 ; ---------------------------------------------------------------------------
TRANGROUP:4101
TRANGROUP:4101 MELDO5:				       ; ...
TRANGROUP:4101		       mov     [ds:SPECDRV], 1 ; mov byte [DestClosed],1
TRANGROUP:4106		       jmp     NEXTSRC
TRANGROUP:4109 ; ---------------------------------------------------------------------------
TRANGROUP:4109
TRANGROUP:4109 MELDO:				       ; ...
TRANGROUP:4109		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:410E		       jnz     short SHOWCPNAM ; concatenating - show name
TRANGROUP:4110		       test    [ds:SrcInfo], 2 ; wildcard - show name
TRANGROUP:4115		       jz      short DOREAD
TRANGROUP:4117
TRANGROUP:4117 SHOWCPNAM:			       ; ...
TRANGROUP:4117		       mov     dx, offset file_name_ptr
TRANGROUP:411A		       call    std_printf
TRANGROUP:411D		       call    CRLF2
TRANGROUP:4120
TRANGROUP:4120 DOREAD:				       ; ...
TRANGROUP:4120		       call    DOCOPY
TRANGROUP:4123		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:4128		       jnz     short NODCLOSE
TRANGROUP:412A		       call    CLOSEDEST
TRANGROUP:412D		       jb      short NODCLOSE
TRANGROUP:412F		       mov     [ds:CFLAG], 0
TRANGROUP:4134
TRANGROUP:4134 NODCLOSE:			       ; ...
TRANGROUP:4134		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:4139		       jz      short NOFLUSH
TRANGROUP:413B		       call    FlshFil
TRANGROUP:413E		       test    [ds:MELCOPY], 0FFh
TRANGROUP:4143		       jnz     short DOMELCOPY
TRANGROUP:4145
TRANGROUP:4145 NOFLUSH:				       ; ...
TRANGROUP:4145		       call    SEARCHNEXT
TRANGROUP:4148		       jnz     short NEXTSRCJ
TRANGROUP:414A		       mov     [ds:SPECDRV], 0 ; mov byte [DestClosed],0
TRANGROUP:414F		       jmp     NEXTAMBIG
TRANGROUP:4152 ; ---------------------------------------------------------------------------
TRANGROUP:4152
TRANGROUP:4152 DOMELCOPY:			       ; ...
TRANGROUP:4152		       cmp     [ds:MELCOPY], 0FFh
TRANGROUP:4157		       jz      short CONTMEL
TRANGROUP:4159		       mov     si, [ds:SRCPT]
TRANGROUP:415D		       mov     [ds:MELSTART], si
TRANGROUP:4161		       mov     [ds:MELCOPY], 0FFh
TRANGROUP:4166
TRANGROUP:4166 CONTMEL:				       ; ...
TRANGROUP:4166		       xor     bp, bp
TRANGROUP:4168		       mov     si, [ds:SRCPT]
TRANGROUP:416C		       mov     bl, 2Bh ; '+'   ; PLUS_CHR
TRANGROUP:416E
TRANGROUP:416E SCANSRC2:			       ; ...
TRANGROUP:416E		       mov     di, offset ScanBuf
TRANGROUP:4171		       call    cparse
TRANGROUP:4174		       test    bh, 80h
TRANGROUP:4177		       jz      short NEXTMEL
TRANGROUP:4179		       test    bh, 1
TRANGROUP:417C		       jnz     short SCANSRC2
TRANGROUP:417E		       call    SOURCEPROC
TRANGROUP:4181		       call    RestUDir1
TRANGROUP:4184		       mov     di, offset IDLEN	; DESTFCB2
TRANGROUP:4187		       mov     ax, 2900h       ; Parse_File_Descriptor*256
TRANGROUP:418A		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:418A					       ; DS:SI -> string to parse
TRANGROUP:418A					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:418A					       ; AL = bit mask to control parsing
TRANGROUP:418C		       mov     bx, (offset SDIRBUF+1)
TRANGROUP:418F		       mov     si, offset ID   ; DESTFCB2+1
TRANGROUP:4192		       mov     di, [ds:SrcTail]
TRANGROUP:4196		       call    BUILDNAME
TRANGROUP:4199		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:419E		       jz      short MELDOJ
TRANGROUP:41A0		       mov     [ds:NOWRITE], 0
TRANGROUP:41A5
TRANGROUP:41A5 MELDOJ:				       ; ...
TRANGROUP:41A5		       jmp     MELDO0
TRANGROUP:41A8 ; ---------------------------------------------------------------------------
TRANGROUP:41A8
TRANGROUP:41A8 NEXTSRCJ:			       ; ...
TRANGROUP:41A8		       jmp     NEXTSRC
TRANGROUP:41AB ; ---------------------------------------------------------------------------
TRANGROUP:41AB
TRANGROUP:41AB NEXTMEL:				       ; ...
TRANGROUP:41AB		       call    CLOSEDEST
TRANGROUP:41AE		       xor     ax, ax	       ; 0
TRANGROUP:41B0		       mov     [ds:CFLAG], al
TRANGROUP:41B3		       mov     [ds:NXTADD], ax
TRANGROUP:41B6		       mov     [ds:SPECDRV], al
TRANGROUP:41B9		       mov     si, [ds:MELSTART]
TRANGROUP:41BD		       mov     [ds:SRCPT], si
TRANGROUP:41C1		       call    SEARCHNEXT
TRANGROUP:41C4		       jz      short SETNMELJ
TRANGROUP:41C6		       jmp     ENDCOPY2
TRANGROUP:41C9 ; ---------------------------------------------------------------------------
TRANGROUP:41C9
TRANGROUP:41C9 SETNMELJ:			       ; ...
TRANGROUP:41C9		       jmp     SETNMEL
TRANGROUP:41CC
TRANGROUP:41CC ; =============== S U B R O U T I N E =======================================
TRANGROUP:41CC
TRANGROUP:41CC
TRANGROUP:41CC proc	       SEARCHNEXT near	       ; ...
TRANGROUP:41CC		       mov     ah, 12h	       ; Dir_Search_Next
TRANGROUP:41CE		       test    [ds:SrcInfo], 2
TRANGROUP:41D3		       jnz     short SEARCH    ; do search-next	if ambig
TRANGROUP:41D5		       or      ah, ah	       ; reset zero flag
TRANGROUP:41D7		       retn
TRANGROUP:41D7 endp	       SEARCHNEXT
TRANGROUP:41D7
TRANGROUP:41D8
TRANGROUP:41D8 ; =============== S U B R O U T I N E =======================================
TRANGROUP:41D8
TRANGROUP:41D8
TRANGROUP:41D8 proc	       SEARCH near	       ; ...
TRANGROUP:41D8		       push    ax
TRANGROUP:41D9		       mov     ah, 1Ah	       ; Set_DMA
TRANGROUP:41DB		       mov     dx, offset BWDBUF ; offset DIRBUF
TRANGROUP:41DE		       int     21h	       ; DOS - SET DISK	TRANSFER AREA ADDRESS
TRANGROUP:41DE					       ; DS:DX -> disk transfer	buffer
TRANGROUP:41E0		       pop     ax
TRANGROUP:41E1		       mov     dx, 5Ch	       ; FCB
TRANGROUP:41E4		       int     21h	       ; Do the	search
TRANGROUP:41E6		       or      al, al
TRANGROUP:41E8		       retn
TRANGROUP:41E8 endp	       SEARCH
TRANGROUP:41E8
TRANGROUP:41E9
TRANGROUP:41E9 ; =============== S U B R O U T I N E =======================================
TRANGROUP:41E9
TRANGROUP:41E9
TRANGROUP:41E9 proc	       DOCOPY near	       ; ...
TRANGROUP:41E9
TRANGROUP:41E9 ; FUNCTION CHUNK	AT TRANGROUP:3FA4 SIZE 00000014	BYTES
TRANGROUP:41E9
TRANGROUP:41E9		       mov     si, offset SrcBuf
TRANGROUP:41EC		       mov     di, offset SRCXNAME
TRANGROUP:41EF		       mov     ax, 6000h       ; xNameTrans*256
TRANGROUP:41F2		       int     21h	       ; DOS - RESOLVE PATH STRING TO CANONICAL	PATH STRING
TRANGROUP:41F2					       ; DS:SI -> ASCIZ	relative path string or	directory name
TRANGROUP:41F2					       ; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
TRANGROUP:41F4		       mov     [ds:IFNOTFLAG], 0 ; mov byte [RDEOF],0
TRANGROUP:41F9		       mov     ax, 6C00h       ; ExtOpen shl 8
TRANGROUP:41FC		       mov     bx, 40h	       ; deny_none|read_open_mode
TRANGROUP:41FF		       xor     cx, cx
TRANGROUP:4201		       mov     dx, 101h	       ; read_open_flag
TRANGROUP:4204		       int     21h	       ; DOS - 4.0 - EXTENDED OPEN/CREATE
TRANGROUP:4204					       ; BL = open mode	as in AL for normal open (INT 21h/AH=3Dh)
TRANGROUP:4204					       ; BH = flags, CX	= create attribute, DL = action	if file	exists/does not	exists
TRANGROUP:4204					       ; DH = 00h (reserved), DS:SI -> ASCIZ file name
TRANGROUP:4206		       jb      short Error_On_Source
TRANGROUP:4208		       mov     bx, ax
TRANGROUP:420A		       mov     [ds:SRCHAND], bx
TRANGROUP:420E		       mov     ax, 5700h       ; File_Times*256
TRANGROUP:4211		       int     21h	       ; DOS - 2+ - GET	FILE'S DATE/TIME
TRANGROUP:4211					       ; BX = file handle
TRANGROUP:4213		       jb      short Error_On_Source
TRANGROUP:4215		       mov     [ds:CPDATE], dx
TRANGROUP:4219		       mov     [ds:CPTIME], cx
TRANGROUP:421D		       jmp     short No_Copy_Xa
TRANGROUP:421F ; ---------------------------------------------------------------------------
TRANGROUP:421F
TRANGROUP:421F Error_On_Source:			       ; ...
TRANGROUP:421F		       call    Set_Ext_Error_Msg
TRANGROUP:4222		       mov     [ds:string_ptr_2], offset SrcBuf
TRANGROUP:4228		       mov     [ds:extend_buf_sub], 1 ;	one_subst
TRANGROUP:422D		       call    std_eprintf
TRANGROUP:4230		       cmp     [ds:SRCHAND], 0 ; did we	open the file?
TRANGROUP:4235		       jz      short No_Close_Src ; no - don't close
TRANGROUP:4237		       call    CLOSESRC
TRANGROUP:423A
TRANGROUP:423A No_Close_Src:			       ; ...
TRANGROUP:423A		       cmp     [ds:CFLAG], 0   ; was destination created?
TRANGROUP:423F		       jz      short EndCopyJ3 ; no - just cleanup and exit
TRANGROUP:4241		       jmp     ENDCOPY	       ; clean up concatenation	and exit
TRANGROUP:4244 ; ---------------------------------------------------------------------------
TRANGROUP:4244
TRANGROUP:4244 EndCopyJ3:			       ; ...
TRANGROUP:4244		       jmp     ENDCOPY2
TRANGROUP:4247 ; ---------------------------------------------------------------------------
TRANGROUP:4247
TRANGROUP:4247 No_Copy_Xa:			       ; ...
TRANGROUP:4247		       mov     bx, [ds:SRCHAND]
TRANGROUP:424B		       mov     ax, 4400h
TRANGROUP:424E		       int     21h	       ; DOS - 2+ - IOCTL - GET	DEVICE INFORMATION
TRANGROUP:424E					       ; BX = file or device handle
TRANGROUP:4250		       and     dl, 80h	       ; devid_ISDEV
TRANGROUP:4253		       mov     [ds:SRCISDEV], dl
TRANGROUP:4257		       jz      short COPYLP    ; source	not a device
TRANGROUP:4259		       cmp     [ds:BINARY], 0
TRANGROUP:425E		       jz      short COPYLP    ; ascii device ok
TRANGROUP:4260		       mov     dx, offset INBDEV_PTR ; cannot do binary	input
TRANGROUP:4263		       jmp     COPYERR
TRANGROUP:4266 ; ---------------------------------------------------------------------------
TRANGROUP:4266
TRANGROUP:4266 COPYLP:				       ; ...
TRANGROUP:4266		       mov     bx, [ds:SRCHAND]
TRANGROUP:426A		       mov     cx, [ds:BYTCNT]
TRANGROUP:426E		       mov     dx, [ds:NXTADD]
TRANGROUP:4272		       sub     cx, dx	       ; compute available space
TRANGROUP:4274		       jnz     short GOTROOM
TRANGROUP:4276		       call    FlshFil
TRANGROUP:4279		       cmp     [ds:TERMREAD], 0
TRANGROUP:427E		       jnz     short CLOSESRC
TRANGROUP:4280		       mov     cx, [ds:BYTCNT]
TRANGROUP:4284
TRANGROUP:4284 GOTROOM:				       ; ...
TRANGROUP:4284		       push    ds
TRANGROUP:4285		       mov     ds, [ds:TPA]
TRANGROUP:4289		       mov     ah, 3Fh
TRANGROUP:428B		       int     21h	       ; DOS - 2+ - READ FROM FILE WITH	HANDLE
TRANGROUP:428B					       ; BX = file handle, CX =	number of bytes	to read
TRANGROUP:428B					       ; DS:DX -> buffer
TRANGROUP:428D		       pop     ds
TRANGROUP:428E		       jb      short Error_On_Source
TRANGROUP:4290		       mov     cx, ax	       ; get count
TRANGROUP:4292		       jcxz    short CLOSESRC  ; no more to read
TRANGROUP:4294		       cmp     [ds:SRCISDEV], 0
TRANGROUP:4299		       jnz     short NOTESTA   ; is a device, ascii mode
TRANGROUP:429B		       cmp     [ds:ASCII], 0
TRANGROUP:42A0		       jz      short BINREAD
TRANGROUP:42A2
TRANGROUP:42A2 NOTESTA:				       ; ...
TRANGROUP:42A2		       mov     dx, cx
TRANGROUP:42A4		       mov     di, [ds:NXTADD]
TRANGROUP:42A8		       mov     al, 1Ah
TRANGROUP:42AA		       push    es
TRANGROUP:42AB		       mov     es, [ds:TPA]    ; scan for EOF
TRANGROUP:42AF		       repne scasb
TRANGROUP:42B1		       pop     es
TRANGROUP:42B2		       jnz     short USEALL
TRANGROUP:42B4		       inc     [ds:IFNOTFLAG]  ; inc byte [RDEOF]
TRANGROUP:42B8		       inc     cx
TRANGROUP:42B9
TRANGROUP:42B9 USEALL:				       ; ...
TRANGROUP:42B9		       sub     dx, cx
TRANGROUP:42BB		       mov     cx, dx
TRANGROUP:42BD
TRANGROUP:42BD BINREAD:				       ; ...
TRANGROUP:42BD		       add     cx, [ds:NXTADD]
TRANGROUP:42C1		       mov     [ds:NXTADD], cx
TRANGROUP:42C5		       cmp     cx, [ds:BYTCNT]
TRANGROUP:42C9		       jb      short TESTDEV
TRANGROUP:42CB		       call    FlshFil
TRANGROUP:42CE		       cmp     [ds:TERMREAD], 0
TRANGROUP:42D3		       jnz     short CLOSESRC
TRANGROUP:42D5		       jmp     short COPYLP
TRANGROUP:42D7 ; ---------------------------------------------------------------------------
TRANGROUP:42D7
TRANGROUP:42D7 TESTDEV:				       ; ...
TRANGROUP:42D7		       cmp     [ds:SRCISDEV], 0	; if file then EOF
TRANGROUP:42DC		       jz      short CLOSESRC
TRANGROUP:42DE		       cmp     [ds:IFNOTFLAG], 0 ; cmp byte [RDEOF],0
TRANGROUP:42E3		       jz      short COPYLP    ; on device, go till ^Z
TRANGROUP:42E3 endp	       DOCOPY
TRANGROUP:42E3
TRANGROUP:42E5
TRANGROUP:42E5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:42E5
TRANGROUP:42E5
TRANGROUP:42E5 proc	       CLOSESRC	near	       ; ...
TRANGROUP:42E5		       mov     bx, [ds:SRCHAND]
TRANGROUP:42E9		       mov     ah, 3Eh
TRANGROUP:42EB		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:42EB					       ; BX = file handle
TRANGROUP:42ED
TRANGROUP:42ED CLOSESRCDEST_RETN:		       ; ...
TRANGROUP:42ED		       retn
TRANGROUP:42ED endp	       CLOSESRC
TRANGROUP:42ED
TRANGROUP:42EE
TRANGROUP:42EE ; =============== S U B R O U T I N E =======================================
TRANGROUP:42EE
TRANGROUP:42EE
TRANGROUP:42EE proc	       CLOSEDEST near	       ; ...
TRANGROUP:42EE
TRANGROUP:42EE ; FUNCTION CHUNK	AT TRANGROUP:43C4 SIZE 00000012	BYTES
TRANGROUP:42EE
TRANGROUP:42EE		       cmp     [ds:SPECDRV], 0 ; cmp byte [DestClosed],0
TRANGROUP:42F3		       jnz     short CLOSESRCDEST_RETN
TRANGROUP:42F5		       mov     al, [byte ptr ds:DestSwitch]
TRANGROUP:42F8		       call    SETASC	       ; check for b or	a switch on destination
TRANGROUP:42FB		       jz      short BINCLOS
TRANGROUP:42FD		       mov     bx, [ds:NXTADD]
TRANGROUP:4301		       call    TRYFLUSH
TRANGROUP:4304		       jz      short NOCONC
TRANGROUP:4306
TRANGROUP:4306 CONCHNG:				       ; ...
TRANGROUP:4306		       stc
TRANGROUP:4307		       retn
TRANGROUP:4308 ; ---------------------------------------------------------------------------
TRANGROUP:4308
TRANGROUP:4308 NOCONC:				       ; ...
TRANGROUP:4308		       xor     bx, bx
TRANGROUP:430A		       push    ds
TRANGROUP:430B		       mov     ds, [ds:TPA]
TRANGROUP:430F		       mov     [word ptr bx], 1Ah ; add	EOF mark (ctrl-Z)
TRANGROUP:4313		       pop     ds
TRANGROUP:4314		       inc     [ds:NXTADD]     ; inc word [NXTADD] ; make sure our ^z gets written
TRANGROUP:4318		       mov     [ds:NOWRITE], 0 ; byte
TRANGROUP:431D		       mov     ax, [ds:WRITTEN]
TRANGROUP:4320		       add     ax, [ds:NXTADD]
TRANGROUP:4324		       jb      short BINCLOS   ; > 1
TRANGROUP:4326		       cmp     ax, 1
TRANGROUP:4329		       jz      short FORGETITJ ; Written = 0 NxtAdd = 1	(the ^Z)
TRANGROUP:432B
TRANGROUP:432B BINCLOS:				       ; ...
TRANGROUP:432B		       call    TRYFLUSH
TRANGROUP:432E		       jnz     short CONCHNG
TRANGROUP:4330		       cmp     [ds:WRITTEN], 0
TRANGROUP:4335
TRANGROUP:4335 FORGETITJ:			       ; ...
TRANGROUP:4335		       jnz     short NO_FORGET ; wrote something
TRANGROUP:4337		       jmp     FORGETIT	       ; never wrote nothing
TRANGROUP:433A ; ---------------------------------------------------------------------------
TRANGROUP:433A
TRANGROUP:433A NO_FORGET:			       ; ...
TRANGROUP:433A		       mov     bx, [ds:EndDestBuf] ; [DESTHAND]
TRANGROUP:433E		       mov     cx, [ds:CPTIME]
TRANGROUP:4342		       mov     dx, [ds:CPDATE]
TRANGROUP:4346		       cmp     [ds:INEXACT], 0 ; copy not exact?
TRANGROUP:434B		       jz      short DODCLOSE  ; if no,	copy date & time
TRANGROUP:434D		       mov     ah, 2Ch
TRANGROUP:434F		       int     21h	       ; DOS - GET CURRENT TIME
TRANGROUP:434F					       ; Return: CH = hours, CL	= minutes, DH =	seconds
TRANGROUP:434F					       ; DL = hundredths of seconds
TRANGROUP:4351		       shl     cl, 1
TRANGROUP:4353		       shl     cl, 1	       ; left justify min in cl
TRANGROUP:4355		       shl     cx, 1
TRANGROUP:4357		       shl     cx, 1
TRANGROUP:4359		       shl     cx, 1	       ; hours to high 5 bits, min to 5-10
TRANGROUP:435B		       shr     dh, 1	       ; divide	seconds	by 2 (now 5 bits)
TRANGROUP:435D		       or      cl, dh	       ; and stick into	low 5 bits of cx
TRANGROUP:435F		       push    cx
TRANGROUP:4360		       mov     ah, 2Ah
TRANGROUP:4362		       int     21h	       ; DOS - GET CURRENT DATE
TRANGROUP:4362					       ; Return: DL = day, DH =	month, CX = year
TRANGROUP:4362					       ; AL = day of the week (0=Sunday, 1=Monday, etc.)
TRANGROUP:4364		       sub     cx, 1980
TRANGROUP:4368		       xchg    ch, cl
TRANGROUP:436A		       shl     cx, 1	       ; year to high 7	bits
TRANGROUP:436C		       shl     dh, 1	       ; month to high 3 bits
TRANGROUP:436E		       shl     dh, 1
TRANGROUP:4370		       shl     dh, 1
TRANGROUP:4372		       shl     dh, 1
TRANGROUP:4374		       shl     dh, 1	       ; most sig bit of month in carry
TRANGROUP:4376		       adc     ch, 0	       ; put that bit next to year
TRANGROUP:4379		       or      dl, dh	       ; or low	three of month into day
TRANGROUP:437B		       mov     dh, ch	       ; get year and high bit of month
TRANGROUP:437D		       pop     cx
TRANGROUP:437D endp	       CLOSEDEST
TRANGROUP:437D
TRANGROUP:437E
TRANGROUP:437E ; =============== S U B R O U T I N E =======================================
TRANGROUP:437E
TRANGROUP:437E
TRANGROUP:437E proc	       DODCLOSE	near	       ; ...
TRANGROUP:437E		       cmp     bx, 0
TRANGROUP:4381		       jle     short CLOSEDONE
TRANGROUP:4383		       mov     ax, 5701h
TRANGROUP:4386		       int     21h	       ; DOS - 2+ - SET	FILE'S DATE/TIME
TRANGROUP:4386					       ; BX = file handle, CX =	time to	be set
TRANGROUP:4386					       ; DX = date to be set
TRANGROUP:4388		       jb      short Cleanup_Err
TRANGROUP:438A		       mov     ax, 4202h       ; (LSEEK<<8)+2 ;	seek to	EOF
TRANGROUP:438D		       xor     dx, dx	       ; 0
TRANGROUP:438F		       mov     cx, dx
TRANGROUP:4391		       int     21h	       ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
TRANGROUP:4391					       ; AL = method: offset from end of file
TRANGROUP:4393		       or      dx, ax	       ; DX:AX is file size
TRANGROUP:4395		       pushf
TRANGROUP:4396		       mov     ax, 4400h
TRANGROUP:4399		       int     21h	       ; DOS - 2+ - IOCTL - GET	DEVICE INFORMATION
TRANGROUP:4399					       ; BX = file or device handle
TRANGROUP:439B		       push    dx
TRANGROUP:439C		       mov     ah, 3Eh
TRANGROUP:439E		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:439E					       ; BX = file handle
TRANGROUP:43A0		       pop     dx
TRANGROUP:43A1		       jnb     short Close_Cont
TRANGROUP:43A3		       popf
TRANGROUP:43A4
TRANGROUP:43A4 Cleanup_Err:			       ; ...
TRANGROUP:43A4		       call    CleanUpErr
TRANGROUP:43A7		       call    DestDelete
TRANGROUP:43AA		       jmp     short FILECLOSED
TRANGROUP:43AC ; ---------------------------------------------------------------------------
TRANGROUP:43AC
TRANGROUP:43AC Close_Cont:			       ; ...
TRANGROUP:43AC		       popf
TRANGROUP:43AD		       jnz     short CLOSEDONE
TRANGROUP:43AF		       test    dx, 80h	       ; is the	destination a device?
TRANGROUP:43B3		       jnz     short CLOSEDONE ; yes, copy succeeded
TRANGROUP:43B5		       call    DestDelete
TRANGROUP:43B8		       jmp     short FILECLOSED
TRANGROUP:43BA ; ---------------------------------------------------------------------------
TRANGROUP:43BA
TRANGROUP:43BA CLOSEDONE:			       ; ...
TRANGROUP:43BA		       inc     [ds:FileCnt]    ; inc word [FileCnt]
TRANGROUP:43BE
TRANGROUP:43BE FILECLOSED:			       ; ...
TRANGROUP:43BE		       inc     [ds:SPECDRV]    ; inc byte [DestClosed]
TRANGROUP:43C2
TRANGROUP:43C2 RET50:				       ; ...
TRANGROUP:43C2		       clc
TRANGROUP:43C3		       retn
TRANGROUP:43C3 endp	       DODCLOSE
TRANGROUP:43C3
TRANGROUP:43C4 ; ---------------------------------------------------------------------------
TRANGROUP:43C4 ; START OF FUNCTION CHUNK FOR CLOSEDEST
TRANGROUP:43C4
TRANGROUP:43C4 FORGETIT:			       ; ...
TRANGROUP:43C4		       mov     bx, [ds:EndDestBuf] ; [DESTHAND]
TRANGROUP:43C8		       call    DODCLOSE	       ; close the dest
TRANGROUP:43CB		       call    DestDelete
TRANGROUP:43CE		       mov     [ds:FileCnt], 0 ; no files transferred
TRANGROUP:43D4		       jmp     short RET50
TRANGROUP:43D4 ; END OF	FUNCTION CHUNK FOR CLOSEDEST
TRANGROUP:43D6
TRANGROUP:43D6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:43D6
TRANGROUP:43D6
TRANGROUP:43D6 proc	       DestDelete near	       ; ...
TRANGROUP:43D6		       cmp     [ds:notzerofile], 1 ; destination file size > 0
TRANGROUP:43DB		       jz      short RET50     ; yes, do not delete
TRANGROUP:43DD		       mov     dx, offset DestBuf
TRANGROUP:43E0		       mov     ah, 41h	       ; Unlink
TRANGROUP:43E2		       int     21h	       ; DOS - 2+ - DELETE A FILE (UNLINK)
TRANGROUP:43E2					       ; DS:DX -> ASCIZ	pathname of file to delete (no wildcards allowed)
TRANGROUP:43E4		       retn
TRANGROUP:43E4 endp	       DestDelete
TRANGROUP:43E4
TRANGROUP:43E5
TRANGROUP:43E5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:43E5
TRANGROUP:43E5
TRANGROUP:43E5 proc	       SOURCE_SET near	       ; ...
TRANGROUP:43E5		       push    si
TRANGROUP:43E6		       mov     ax, [ds:STARTEL]
TRANGROUP:43E9		       mov     si, offset ScanBuf ; adjust to copy
TRANGROUP:43EC		       sub     ax, si
TRANGROUP:43EE		       mov     di, offset SrcBuf
TRANGROUP:43F1		       add     ax, di
TRANGROUP:43F3		       mov     [ds:SrcTail], ax
TRANGROUP:43F6		       mov     [ds:SrcSiz], cl
TRANGROUP:43FA		       inc     cx
TRANGROUP:43FB		       rep movsb
TRANGROUP:43FD		       mov     [ds:SrcInfo], bh
TRANGROUP:4401		       pop     si
TRANGROUP:4402		       mov     ax, bp
TRANGROUP:4404		       call    SETASC	       ; set a,b switches accordingly
TRANGROUP:4407		       call    SWITCH	       ; get any more switches on this arg
TRANGROUP:440A		       call    SETASC
TRANGROUP:440D		       retn
TRANGROUP:440D endp	       SOURCE_SET
TRANGROUP:440D
TRANGROUP:440E
TRANGROUP:440E ; =============== S U B R O U T I N E =======================================
TRANGROUP:440E
TRANGROUP:440E
TRANGROUP:440E proc	       CleanUpErr near	       ; ...
TRANGROUP:440E		       cmp     [ds:msg_flag], 0	; have we already issued a message?
TRANGROUP:4413		       jnz     short CleanupErr_Cont ; yes - don't issue duplicate error
TRANGROUP:4415		       call    Set_Ext_Error_Msg
TRANGROUP:4418		       mov     [ds:string_ptr_2], offset DestBuf
TRANGROUP:441E		       mov     [ds:extend_buf_sub], 1 ;	one_subst
TRANGROUP:4423		       call    std_eprintf
TRANGROUP:4426
TRANGROUP:4426 CleanupErr_Cont:			       ; ...
TRANGROUP:4426		       retn
TRANGROUP:4426 endp	       CleanUpErr
TRANGROUP:4426
TRANGROUP:4427
TRANGROUP:4427 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4427
TRANGROUP:4427
TRANGROUP:4427 proc	       get_answer_YNA near     ; ...
TRANGROUP:4427		       mov     [ds:cox_dest_file], 0
TRANGROUP:442C		       mov     ax, 4300h
TRANGROUP:442F		       mov     dx, offset DestBuf
TRANGROUP:4432		       int     21h	       ; DOS - 2+ - GET	FILE ATTRIBUTES
TRANGROUP:4432					       ; DS:DX -> ASCIZ	file name or directory
TRANGROUP:4432					       ; name without trailing slash
TRANGROUP:4434		       jnb     short getansw_1
TRANGROUP:4436		       jmp     getansw_5
TRANGROUP:4439 ; ---------------------------------------------------------------------------
TRANGROUP:4439
TRANGROUP:4439 getansw_1:			       ; ...
TRANGROUP:4439		       inc     [ds:cox_dest_file] ; byte ; valid destination file
TRANGROUP:443D		       lea     si, [cox_sublist_buff]
TRANGROUP:4441		       mov     [word ptr si], 11 ; sublist size, 11 bytes
TRANGROUP:4445		       mov     [word ptr si+2],	offset DestBuf ; sublist value (pointer)
TRANGROUP:444A		       mov     [word ptr si+4],	ds ; sublist segment
TRANGROUP:444D		       mov     [byte ptr si+6],	1 ; sub	id (N of %N)
TRANGROUP:4451		       mov     [byte ptr si+7],	10h ; data type	flags ;	ASCII
TRANGROUP:4455		       mov     [byte ptr si+8],	0 ; maximum length (chars)
TRANGROUP:4459		       mov     [byte ptr si+9],	0 ; minimum length (chars)
TRANGROUP:445D		       mov     [byte ptr si+0Ah], 0 ; pad field	character (0)
TRANGROUP:4461		       lea     si, [cox_sublist_buff]
TRANGROUP:4465		       mov     ax, 1103	       ; message number
TRANGROUP:4465					       ; 'Overwrite %1 (Yes/No/All)?'
TRANGROUP:4468		       mov     bx, 2	       ; std error (file handle	= 2)
TRANGROUP:446B		       mov     cx, 1	       ; byte count
TRANGROUP:446E		       mov     dh, 0FFh	       ; message class (utility)
TRANGROUP:4470		       xor     dl, dl	       ; control flag =	0
TRANGROUP:4472		       call    SYSDISPMSG
TRANGROUP:4475		       xor     bx, bx
TRANGROUP:4477
TRANGROUP:4477 getansw_2:			       ; ...
TRANGROUP:4477		       mov     ax, 0C08h
TRANGROUP:447A		       int     21h	       ; DOS - CLEAR KEYBOARD BUFFER
TRANGROUP:447A					       ; AL must be 01h, 06h, 07h, 08h,	or 0Ah.
TRANGROUP:447C		       cmp     al, 0
TRANGROUP:447E		       jz      short getansw_2
TRANGROUP:4480		       cmp     al, 0Dh
TRANGROUP:4482		       jz      short getansw_4
TRANGROUP:4484		       mov     bl, al
TRANGROUP:4486		       mov     dl, al
TRANGROUP:4488		       mov     ax, 6520h
TRANGROUP:448B		       int     21h	       ; DOS - 4.x internal - COUNTRY-DEPENDENT	FILENAME CAPITALIZATION
TRANGROUP:448B					       ; AL = function -
TRANGROUP:448D		       cmp     dl, [ds:_Y_es]  ; 'Y'
TRANGROUP:4491		       jz      short getansw_3
TRANGROUP:4493		       cmp     dl, [ds:_N_o]   ; 'N'
TRANGROUP:4497		       jz      short getansw_3
TRANGROUP:4499		       cmp     dl, [ds:_A_ll]  ; 'A'
TRANGROUP:449D		       jnz     short getansw_2
TRANGROUP:449F
TRANGROUP:449F getansw_3:			       ; ...
TRANGROUP:449F		       mov     bh, bl
TRANGROUP:44A1		       push    bx
TRANGROUP:44A2		       mov     [ds:MSG_1104], bl
TRANGROUP:44A6		       mov     ah, 40h
TRANGROUP:44A8		       mov     bx, 2	       ; std error (file handle	= 2)
TRANGROUP:44AB		       mov     cx, 1	       ; byte count
TRANGROUP:44AE		       mov     dx, offset MSG_1104
TRANGROUP:44B1		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:44B1					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:44B3		       mov     ah, 40h
TRANGROUP:44B5		       mov     [ds:MSG_1104], 8
TRANGROUP:44BA		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:44BA					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:44BC		       pop     bx
TRANGROUP:44BD		       jmp     short getansw_2
TRANGROUP:44BF ; ---------------------------------------------------------------------------
TRANGROUP:44BF
TRANGROUP:44BF getansw_4:			       ; ...
TRANGROUP:44BF		       cmp     bh, 0
TRANGROUP:44C2		       jz      short getansw_2
TRANGROUP:44C4		       mov     dl, bh
TRANGROUP:44C6		       mov     ax, 6520h
TRANGROUP:44C9		       int     21h	       ; DOS - 4.x internal - COUNTRY-DEPENDENT	FILENAME CAPITALIZATION
TRANGROUP:44C9					       ; AL = function -
TRANGROUP:44CB		       push    dx
TRANGROUP:44CC		       mov     ax, 1070	       ; message number
TRANGROUP:44CF		       mov     bx, 2	       ; std error (file handle	= 2)
TRANGROUP:44D2		       xor     cx, cx
TRANGROUP:44D4		       mov     dh, 0FFh	       ; message class (utility)
TRANGROUP:44D6		       xor     dl, dl
TRANGROUP:44D8		       call    SYSDISPMSG
TRANGROUP:44DB		       pop     dx
TRANGROUP:44DC		       cmp     dl, [ds:_Y_es]
TRANGROUP:44E0		       jz      short getansw_5
TRANGROUP:44E2		       cmp     dl, [ds:_N_o]
TRANGROUP:44E6		       jz      short getansw_6
TRANGROUP:44E8		       mov     [ds:cox_y_override], 0
TRANGROUP:44ED
TRANGROUP:44ED getansw_5:			       ; ...
TRANGROUP:44ED		       clc
TRANGROUP:44EE		       retn
TRANGROUP:44EF ; ---------------------------------------------------------------------------
TRANGROUP:44EF
TRANGROUP:44EF getansw_6:			       ; ...
TRANGROUP:44EF		       stc
TRANGROUP:44F0		       retn
TRANGROUP:44F0 endp	       get_answer_YNA
TRANGROUP:44F0
TRANGROUP:44F1
TRANGROUP:44F1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:44F1
TRANGROUP:44F1
TRANGROUP:44F1 proc	       init_copycmd_option near	; ...
TRANGROUP:44F1		       mov     [ds:cox_y_override], 1 ;	suppress copy overwrite	confirmation
TRANGROUP:44F6		       push    es
TRANGROUP:44F7		       mov     es, [ds:RESSEG]
TRANGROUP:44FB		       cmp     [byte ptr es:cox_location], 'c' ; "cox"
TRANGROUP:4501		       jnz     short icpcmd_1
TRANGROUP:4503		       mov     es, [es:EnvirSeg]
TRANGROUP:4508		       lea     si, [copycmd]   ; "COPYCMD="
TRANGROUP:450C		       mov     cx, 8
TRANGROUP:450F		       call    getenv_copycmd
TRANGROUP:4512		       jb      short icpcmd_3
TRANGROUP:4514		       call    get_copycmd_option ; copycmd=/Y or copycmd=/-Y
TRANGROUP:4517		       jb      short icpcmd_2
TRANGROUP:4519		       inc     di	       ; skip '/'
TRANGROUP:451A		       mov     al, [es:di]
TRANGROUP:451D		       and     al, 0DFh	       ; convert to uppercase
TRANGROUP:451F		       cmp     al, 'Y'
TRANGROUP:4521		       jnz     short icpcmd_2
TRANGROUP:4523
TRANGROUP:4523 icpcmd_1:			       ; ...
TRANGROUP:4523		       mov     [ds:cox_y_override], 0 ;	clear copy overwrite question/confirmation
TRANGROUP:4523					       ; (don't suppress)
TRANGROUP:4528
TRANGROUP:4528 icpcmd_2:			       ; ...
TRANGROUP:4528		       pop     es
TRANGROUP:4529		       retn
TRANGROUP:452A ; ---------------------------------------------------------------------------
TRANGROUP:452A
TRANGROUP:452A icpcmd_3:			       ; ...
TRANGROUP:452A		       mov     es, [ds:RESSEG]
TRANGROUP:452E		       cmp     [es:cox_Y_option], 0 ; default (/Y) switch option (1 = enabled)
TRANGROUP:4534		       jz      short icpcmd_2
TRANGROUP:4536		       jmp     short icpcmd_1
TRANGROUP:4536 endp	       init_copycmd_option
TRANGROUP:4536
TRANGROUP:4538
TRANGROUP:4538 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4538
TRANGROUP:4538
TRANGROUP:4538 proc	       get_copycmd_option near ; ...
TRANGROUP:4538		       cmp     [byte ptr es:di], 0
TRANGROUP:453C		       jz      short gcpcmdo_2
TRANGROUP:453E		       cmp     [byte ptr es:di], 2Fh ; '/'
TRANGROUP:4542		       jz      short gcpcmdo_1
TRANGROUP:4544		       inc     di
TRANGROUP:4545		       jmp     short get_copycmd_option
TRANGROUP:4547 ; ---------------------------------------------------------------------------
TRANGROUP:4547
TRANGROUP:4547 gcpcmdo_1:			       ; ...
TRANGROUP:4547		       clc
TRANGROUP:4548		       retn
TRANGROUP:4549 ; ---------------------------------------------------------------------------
TRANGROUP:4549
TRANGROUP:4549 gcpcmdo_2:			       ; ...
TRANGROUP:4549		       stc
TRANGROUP:454A		       retn
TRANGROUP:454A endp	       get_copycmd_option
TRANGROUP:454A
TRANGROUP:454B
TRANGROUP:454B ; =============== S U B R O U T I N E =======================================
TRANGROUP:454B
TRANGROUP:454B
TRANGROUP:454B proc	       getenv_copycmd near     ; ...
TRANGROUP:454B		       xor     di, di
TRANGROUP:454D		       xor     al, al
TRANGROUP:454F
TRANGROUP:454F gecpcmd_1:			       ; ...
TRANGROUP:454F		       cmp     [byte ptr es:di], 0
TRANGROUP:4553		       jz      short gecpcmd_3
TRANGROUP:4555		       push    cx
TRANGROUP:4556		       push    si
TRANGROUP:4557		       repe cmpsb
TRANGROUP:4559		       pop     si
TRANGROUP:455A		       pop     cx
TRANGROUP:455B		       jz      short gecpcmd_2 ; cf = 0
TRANGROUP:455D		       push    cx
TRANGROUP:455E		       mov     cx, 32768
TRANGROUP:4561		       repne scasb	       ; al = 0
TRANGROUP:4563		       pop     cx
TRANGROUP:4564		       jmp     short gecpcmd_1
TRANGROUP:4566 ; ---------------------------------------------------------------------------
TRANGROUP:4566
TRANGROUP:4566 gecpcmd_2:			       ; ...
TRANGROUP:4566		       clc
TRANGROUP:4567		       retn
TRANGROUP:4568 ; ---------------------------------------------------------------------------
TRANGROUP:4568
TRANGROUP:4568 gecpcmd_3:			       ; ...
TRANGROUP:4568		       stc
TRANGROUP:4569		       retn
TRANGROUP:4569 endp	       getenv_copycmd
TRANGROUP:4569
TRANGROUP:456A
TRANGROUP:456A ; =============== S U B R O U T I N E =======================================
TRANGROUP:456A
TRANGROUP:456A
TRANGROUP:456A proc	       TRYFLUSH	near	       ; ...
TRANGROUP:456A		       mov     al, [ds:PARM1]  ; mov al,[Concat]
TRANGROUP:456D		       push    ax
TRANGROUP:456E		       call    FlshFil
TRANGROUP:4571		       pop     ax
TRANGROUP:4572		       cmp     al, [ds:PARM1]  ; cmp al,[Concat]
TRANGROUP:4576		       retn
TRANGROUP:4576 endp	       TRYFLUSH
TRANGROUP:4576
TRANGROUP:4577
TRANGROUP:4577 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4577
TRANGROUP:4577
TRANGROUP:4577 proc	       FlshFil near	       ; ...
TRANGROUP:4577		       mov     [ds:TERMREAD], 0
TRANGROUP:457C		       cmp     [ds:CFLAG], 0
TRANGROUP:4581		       jz      short NotExists
TRANGROUP:4583		       jmp     Exists
TRANGROUP:4586 ; ---------------------------------------------------------------------------
TRANGROUP:4586
TRANGROUP:4586 NotExists:			       ; ...
TRANGROUP:4586		       call    BUILDDEST       ; find out all about the	destination
TRANGROUP:4589		       call    COMPNAME	       ; source	and dest. the same?
TRANGROUP:458C		       jnz     short ProcDest  ; if not, go ahead
TRANGROUP:458E		       cmp     [ds:SRCISDEV], 0
TRANGROUP:4593		       jnz     short ProcDest  ; same name on device ok
TRANGROUP:4595		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:459A		       mov     dx, offset OVERWR_PTR
TRANGROUP:459D		       jnz     short No_Concat_Err
TRANGROUP:459F		       jmp     COPYERR	       ; not concatenating - overwrite error
TRANGROUP:45A2 ; ---------------------------------------------------------------------------
TRANGROUP:45A2
TRANGROUP:45A2 No_Concat_Err:			       ; ...
TRANGROUP:45A2		       mov     [ds:NOWRITE], 1 ; flag not writing (just	seeking)
TRANGROUP:45A7
TRANGROUP:45A7 ProcDest:			       ; ...
TRANGROUP:45A7		       mov     ax, 6C00h
TRANGROUP:45AA		       mov     si, offset DestBuf
TRANGROUP:45AD		       mov     bx, 21h	       ; get open mode for copy
TRANGROUP:45B0		       xor     cx, cx
TRANGROUP:45B2		       mov     dx, 101h	       ; write_open_flag
TRANGROUP:45B5		       cmp     [ds:NOWRITE], 0
TRANGROUP:45BA		       jnz     short DoDestOpen	; don't actually create if nowrite set
TRANGROUP:45BC		       mov     dx, 112h	       ; creat_open_flag
TRANGROUP:45BF
TRANGROUP:45BF DoDestOpen:			       ; ...
TRANGROUP:45BF		       int     21h	       ; DOS - 4.0 - EXTENDED OPEN/CREATE
TRANGROUP:45BF					       ; BL = open mode	as in AL for normal open (INT 21h/AH=3Dh)
TRANGROUP:45BF					       ; BH = flags, CX	= create attribute, DL = action	if file	exists/does not	exists
TRANGROUP:45BF					       ; DH = 00h (reserved), DS:SI -> ASCIZ file name
TRANGROUP:45C1		       jnb     short Dest_Open_Okay
TRANGROUP:45C3
TRANGROUP:45C3 Xa_Set_Error:			       ; ...
TRANGROUP:45C3		       call    Set_Ext_Error_Msg
TRANGROUP:45C6		       mov     [ds:string_ptr_2], offset DestBuf
TRANGROUP:45CC		       mov     [ds:extend_buf_sub], 1 ;	one_subst
TRANGROUP:45D1		       jmp     COPYERR
TRANGROUP:45D4 ; ---------------------------------------------------------------------------
TRANGROUP:45D4
TRANGROUP:45D4 Dest_Open_Okay:			       ; ...
TRANGROUP:45D4		       mov     [ds:EndDestBuf],	ax ; mov [DESTHAND],ax ; save handle
TRANGROUP:45D7		       mov     [ds:CFLAG], 1   ; destination now exists
TRANGROUP:45DC		       mov     bx, ax
TRANGROUP:45DE		       mov     ax, 4400h
TRANGROUP:45E1		       int     21h	       ; DOS - 2+ - IOCTL - GET	DEVICE INFORMATION
TRANGROUP:45E1					       ; BX = file or device handle
TRANGROUP:45E3		       mov     [ds:DESTISDEV], dl ; set	dest info
TRANGROUP:45E7		       test    dl, 80h
TRANGROUP:45EA		       jz      short Exists    ; Dest not a device
TRANGROUP:45EC		       mov     al, [byte ptr ds:DestSwitch]
TRANGROUP:45EF		       and     al, 0Ch	       ; SWITCHA+SWITCHB ; 4+8
TRANGROUP:45F1		       jnz     short TestBoth
TRANGROUP:45F3		       mov     al, [ds:ASCII]  ; neither set, use current setting
TRANGROUP:45F6		       or      al, [ds:BINARY]
TRANGROUP:45FA		       jz      short ExSetA    ; neither set, default to ascii
TRANGROUP:45FC
TRANGROUP:45FC TestBoth:			       ; ...
TRANGROUP:45FC		       jp      short Exists    ; jpe ; both are	set, ignore
TRANGROUP:45FE		       test    al, 8
TRANGROUP:4600		       jz      short Exists
TRANGROUP:4602		       mov     ax, 4401h       ; (IOCTL<<8)|1
TRANGROUP:4605		       xor     dh, dh
TRANGROUP:4607		       or      dl, 20h	       ; devid_RAW
TRANGROUP:460A		       mov     [ds:DESTISDEV], dl
TRANGROUP:460E		       int     21h	       ; DOS - 2+ - IOCTL - SET	DEVICE INFORMATION
TRANGROUP:460E					       ; BX = device handle, DH	= 0
TRANGROUP:460E					       ; DL = device information to set	(bits 0-7 from function	0)
TRANGROUP:4610		       jmp     short Exists
TRANGROUP:4612 ; ---------------------------------------------------------------------------
TRANGROUP:4612
TRANGROUP:4612 ExSetA:				       ; ...
TRANGROUP:4612		       mov     [ds:ASCII], 4   ; SWITCHA ; set ascii mode
TRANGROUP:4617		       or      [ds:INEXACT], 4 ; ascii -> inexact
TRANGROUP:461C
TRANGROUP:461C Exists:				       ; ...
TRANGROUP:461C		       cmp     [ds:NOWRITE], 0
TRANGROUP:4621		       jnz     short NoChecking	; if nowrite don't bother with name check
TRANGROUP:4623		       cmp     [ds:plus_comma],	1 ; don't check if just doing +,,
TRANGROUP:4628		       jz      short NoChecking
TRANGROUP:462A		       call    COMPNAME	       ; source	and dest. the same?
TRANGROUP:462D		       jnz     short NoChecking	; if not, go ahead
TRANGROUP:462F		       cmp     [ds:SRCISDEV], 0
TRANGROUP:4634		       jnz     short NoChecking	; same name on device ok
TRANGROUP:4636		       mov     dx, offset LOSTERR_PTR ;	tell him he's not going to get it
TRANGROUP:4639		       call    std_eprintf
TRANGROUP:463C		       mov     [ds:NXTADD], 0  ; word
TRANGROUP:4642		       inc     [ds:TERMREAD]   ; byte
TRANGROUP:4646
TRANGROUP:4646 Ret60:				       ; ...
TRANGROUP:4646		       retn
TRANGROUP:4647 ; ---------------------------------------------------------------------------
TRANGROUP:4647
TRANGROUP:4647 NoChecking:			       ; ...
TRANGROUP:4647		       mov     bx, [ds:EndDestBuf] ; [DESTHAND]
TRANGROUP:464B		       xor     cx, cx	       ; 0
TRANGROUP:464D		       xchg    cx, [ds:NXTADD]
TRANGROUP:4651		       jcxz    short Ret60     ; if nothing to write, forget it
TRANGROUP:4653		       inc     [ds:WRITTEN]    ; word ;	flag that we wrote something
TRANGROUP:4657		       cmp     [ds:NOWRITE], 0 ; if nowrite set, just seek cx bytes
TRANGROUP:465C		       jnz     short SeekEnd
TRANGROUP:465E		       xor     dx, dx
TRANGROUP:4660		       push    ds
TRANGROUP:4661		       mov     ds, [ds:TPA]
TRANGROUP:4665		       mov     ah, 40h
TRANGROUP:4667		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:4667					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:4669		       pop     ds
TRANGROUP:466A		       mov     dx, offset NOSPACE_PTR
TRANGROUP:466D		       jnb     short NoChecking2
TRANGROUP:466F
TRANGROUP:466F Xa_Set_Error_Jmp:		       ; ...
TRANGROUP:466F		       jmp     Xa_Set_Error    ; failure
TRANGROUP:4672 ; ---------------------------------------------------------------------------
TRANGROUP:4672
TRANGROUP:4672 NoChecking2:			       ; ...
TRANGROUP:4672		       sub     cx, ax
TRANGROUP:4674		       jz      short Ret60
TRANGROUP:4676		       test    [ds:DESTISDEV], 80h ; devid_ISDEV
TRANGROUP:467B		       jz      short COPYERR   ; is a file, error
TRANGROUP:467D		       test    [ds:DESTISDEV], 20h ; devid_RAW
TRANGROUP:4682		       jnz     short DevWrtErr ; is a raw device, error
TRANGROUP:4684		       cmp     [ds:INEXACT], 0
TRANGROUP:4689		       jnz     short Ret60     ; inexact so ok
TRANGROUP:468B		       dec     cx
TRANGROUP:468C		       jz      short Ret60     ; wrote one byte	less (the ^z)
TRANGROUP:468E
TRANGROUP:468E DevWrtErr:			       ; ...
TRANGROUP:468E		       mov     dx, offset DEVWMES_PTR
TRANGROUP:4691		       jmp     short COPYERR
TRANGROUP:4693 ; ---------------------------------------------------------------------------
TRANGROUP:4693
TRANGROUP:4693 SeekEnd:				       ; ...
TRANGROUP:4693		       xor     dx, dx
TRANGROUP:4695		       xchg    dx, cx	       ; cx = 0
TRANGROUP:4695					       ; cx:dx = (signed) offset from origin of	new file position
TRANGROUP:4697		       mov     ax, 4201h       ; (LSEEK<<8)|1
TRANGROUP:469A		       int     21h	       ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
TRANGROUP:469A					       ; AL = method: offset from present location
TRANGROUP:469C		       mov     [ds:notzerofile], 1 ; (existing)	destination file size is not zero
TRANGROUP:46A1		       test    ax, ax
TRANGROUP:46A3		       jnz     short SeekEnd_@
TRANGROUP:46A5		       test    dx, dx
TRANGROUP:46A7		       jnz     short SeekEnd_@
TRANGROUP:46A9		       mov     [ds:notzerofile], 0 ; (existing)	destination file size is zero
TRANGROUP:46AE
TRANGROUP:46AE SeekEnd_@:			       ; ...
TRANGROUP:46AE		       mov     [ds:OFilePtr_Lo], ax
TRANGROUP:46B1		       mov     [ds:OFilePtr_Hi], dx
TRANGROUP:46B5		       cmp     [ds:IFNOTFLAG], 0 ; cmp byte [RDEOF],0
TRANGROUP:46BA		       jz      short Ret60
TRANGROUP:46BC		       mov     ah, 40h	       ; cx = 0	; file is truncated to the current position
TRANGROUP:46BE		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:46BE					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:46C0		       jb      short Xa_Set_Error_Jmp
TRANGROUP:46C2		       mov     [ds:zflag], 1Ah ; mov byte [OCtrlZ],1Ah
TRANGROUP:46C7		       retn
TRANGROUP:46C8 ; ---------------------------------------------------------------------------
TRANGROUP:46C8
TRANGROUP:46C8 COPYERR:				       ; ...
TRANGROUP:46C8		       call    std_eprintf
TRANGROUP:46CB		       inc     [ds:SPECDRV]    ; inc byte [DestClosed]
TRANGROUP:46CF		       cmp     [ds:CFLAG], 0
TRANGROUP:46D4		       jz      short EndCopyJ  ; never actually	got it open
TRANGROUP:46D6		       mov     bx, [ds:EndDestBuf] ; [DESTHAND]
TRANGROUP:46DA		       cmp     bx, 0
TRANGROUP:46DD		       jle     short NoClose
TRANGROUP:46DF		       mov     cx, [ds:OFilePtr_Hi] ; CX = hi word of original file ptr
TRANGROUP:46E3		       mov     dx, [ds:OFilePtr_Lo] ; DX = lo word of original file ptr
TRANGROUP:46E7		       mov     ax, cx
TRANGROUP:46E9		       or      ax, dx
TRANGROUP:46EB		       jz      short ceClose   ; null file ptr means nothing to	save
TRANGROUP:46ED		       mov     ax, 4200h
TRANGROUP:46F0		       int     21h	       ; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
TRANGROUP:46F0					       ; AL = method: offset from beginning of file
TRANGROUP:46F2		       xor     cx, cx	       ; 0
TRANGROUP:46F4		       mov     ah, 40h
TRANGROUP:46F6		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:46F6					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:46F8		       cmp     [ds:zflag], 0   ; cmp byte [OCtrlZ],0
TRANGROUP:46FD		       jz      short ceClose0
TRANGROUP:46FF		       inc     cx	       ; 1
TRANGROUP:4700		       mov     dx, offset zflag	; offset OCtrlZ
TRANGROUP:4703		       mov     ah, 40h
TRANGROUP:4705		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:4705					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:4707
TRANGROUP:4707 ceClose0:			       ; ...
TRANGROUP:4707		       mov     ah, 3Eh
TRANGROUP:4709		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:4709					       ; BX = file handle
TRANGROUP:470B		       jmp     short EndCopyJ
TRANGROUP:470D ; ---------------------------------------------------------------------------
TRANGROUP:470D
TRANGROUP:470D ceClose:				       ; ...
TRANGROUP:470D		       mov     ah, 3Eh
TRANGROUP:470F		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:470F					       ; BX = file handle
TRANGROUP:4711
TRANGROUP:4711 NoClose:				       ; ...
TRANGROUP:4711		       mov     dx, offset DestBuf
TRANGROUP:4714		       mov     ah, 41h
TRANGROUP:4716		       int     21h	       ; DOS - 2+ - DELETE A FILE (UNLINK)
TRANGROUP:4716					       ; DS:DX -> ASCIZ	pathname of file to delete (no wildcards allowed)
TRANGROUP:4718		       mov     [ds:CFLAG], 0
TRANGROUP:471D
TRANGROUP:471D EndCopyJ:			       ; ...
TRANGROUP:471D		       jmp     ENDCOPY
TRANGROUP:471D endp	       FlshFil
TRANGROUP:471D
TRANGROUP:4720
TRANGROUP:4720 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4720
TRANGROUP:4720
TRANGROUP:4720 proc	       SETASC near	       ; ...
TRANGROUP:4720		       and     al, 0Ch	       ; SWITCHA+SWITCHB ; AL =	/a, /b flags
TRANGROUP:4722		       jp      short LOADSW    ; jpe ; even parity - both or neither
TRANGROUP:4724		       push    ax
TRANGROUP:4725		       and     al, 8	       ; SWITCHB
TRANGROUP:4727		       mov     [ds:BINARY], al
TRANGROUP:472A		       pop     ax
TRANGROUP:472B		       and     al, 4	       ; SWITCHA
TRANGROUP:472D		       mov     [ds:ASCII], al
TRANGROUP:4730		       or      [ds:INEXACT], al
TRANGROUP:4734
TRANGROUP:4734 LOADSW:				       ; ...
TRANGROUP:4734		       mov     al, [ds:ASCII]
TRANGROUP:4737		       or      al, al
TRANGROUP:4739		       retn
TRANGROUP:4739 endp	       SETASC
TRANGROUP:4739
TRANGROUP:473A
TRANGROUP:473A ; =============== S U B R O U T I N E =======================================
TRANGROUP:473A
TRANGROUP:473A
TRANGROUP:473A proc	       BUILDDEST near	       ; ...
TRANGROUP:473A		       cmp     [ds:DestIsDir], 0FFh ; -1
TRANGROUP:473F		       jnz     short KNOWABOUTDEST
TRANGROUP:4741		       mov     di, offset USERDIR1
TRANGROUP:4744		       mov     bp, offset DestIsDir ; offset DestVars
TRANGROUP:4747		       mov     bx, 41h	       ; deny_none|write_open_mode
TRANGROUP:474A		       call    BUILDPATH
TRANGROUP:474D		       call    RestUDir1
TRANGROUP:4750
TRANGROUP:4750 KNOWABOUTDEST:			       ; ...
TRANGROUP:4750		       xor     al, al
TRANGROUP:4752		       xchg    al, [ds:FIRSTDEST]
TRANGROUP:4756		       or      al, al
TRANGROUP:4758		       jnz     short FIRSTDST
TRANGROUP:475A		       jmp     NOFIRSTDEST
TRANGROUP:475D ; ---------------------------------------------------------------------------
TRANGROUP:475D
TRANGROUP:475D FIRSTDST:			       ; ...
TRANGROUP:475D		       mov     si, [ds:DestTail]
TRANGROUP:4761		       mov     di, offset DESTDIR ; offset DestFcb
TRANGROUP:4764		       mov     ax, 2900h       ; Parse_File_Descriptor*256
TRANGROUP:4767		       int     21h	       ; DOS - PARSE FILENAME
TRANGROUP:4767					       ; DS:SI -> string to parse
TRANGROUP:4767					       ; ES:DI -> buffer to fill with unopened FCB
TRANGROUP:4767					       ; AL = bit mask to control parsing
TRANGROUP:4769		       cmp     [byte ptr si], 0
TRANGROUP:476C		       jz      short GOODPARSE
TRANGROUP:476E		       mov     dx, offset FULLDIR_PTR ;	issue "file creation error"
TRANGROUP:4771		       jmp     COPYERR
TRANGROUP:4774 ; ---------------------------------------------------------------------------
TRANGROUP:4774
TRANGROUP:4774 GOODPARSE:			       ; ...
TRANGROUP:4774		       mov     ax, [word ptr ds:DestBuf] ; AX =	possible "d:"
TRANGROUP:4777		       cmp     ah, ':'
TRANGROUP:477A		       jz      short DRVSPEC4
TRANGROUP:477C		       mov     al, 40h ; '@'
TRANGROUP:477E
TRANGROUP:477E DRVSPEC4:			       ; ...
TRANGROUP:477E		       mov     cl, [ds:ASCII]  ; CL = saved Ascii flag
TRANGROUP:4782		       or      al, 20h
TRANGROUP:4784		       sub     al, 60h
TRANGROUP:4786		       mov     [ds:DESTDIR], al	; [DestFcb] ; store drive # in FCB
TRANGROUP:4789		       mov     al, [ds:DestInfo] ; AL =	destination CParse flags
TRANGROUP:478C		       mov     ah, [ds:SrcInfo]	; AH = source CParse flags
TRANGROUP:4790		       and     ax, 202h
TRANGROUP:4793		       or      al, al
TRANGROUP:4795		       jz      short NOTMELCOPY
TRANGROUP:4797		       cmp     al, ah
TRANGROUP:4799		       jnz     short NOTMELCOPY
TRANGROUP:479B		       cmp     [ds:PLUS], 0    ; Destination is	wildcarded.
TRANGROUP:47A0		       jz      short NOTMELCOPY	; no +'s in source
TRANGROUP:47A2		       inc     [ds:MELCOPY]    ; byte ;	'Mel copy' = true
TRANGROUP:47A6		       xor     al, al
TRANGROUP:47A8		       jmp     short SETCONC
TRANGROUP:47AA ; ---------------------------------------------------------------------------
TRANGROUP:47AA
TRANGROUP:47AA NOTMELCOPY:			       ; ...
TRANGROUP:47AA		       xor     al, 2	       ; AL=0 -> ambiguous destination,	2 otherwise
TRANGROUP:47AC		       and     al, ah
TRANGROUP:47AE		       shr     al, 1	       ; AL=1 -> ambiguous source, unambiguous dest
TRANGROUP:47AE					       ; (implies concatenation)
TRANGROUP:47B0
TRANGROUP:47B0 SETCONC:				       ; ...
TRANGROUP:47B0		       or      al, [ds:PLUS]   ; "+" always infers concatenation
TRANGROUP:47B4		       mov     [ds:PARM1], al  ; mov [Concat],al ; AL =	1 if concatenating, 0 if not.
TRANGROUP:47B7		       shl     al, 1
TRANGROUP:47B9		       shl     al, 1
TRANGROUP:47BB		       mov     [ds:INEXACT], al	; concatenation	-> inexact copy
TRANGROUP:47BE		       cmp     [ds:BINARY], 0
TRANGROUP:47C3		       jnz     short NOFIRSTDEST ; explicit binary copy
TRANGROUP:47C5		       mov     [ds:ASCII], al
TRANGROUP:47C8		       or      cl, cl
TRANGROUP:47CA		       jnz     short NOFIRSTDEST ; Ascii flag set before, data read correctly
TRANGROUP:47CC		       or      al, al
TRANGROUP:47CE		       jz      short NOFIRSTDEST ; Ascii flag did not change state
TRANGROUP:47D0		       mov     cx, [ds:NXTADD]
TRANGROUP:47D4		       jcxz    short NOFIRSTDEST ; no data, everything ok
TRANGROUP:47D6		       mov     al, 1Ah
TRANGROUP:47D8		       push    es
TRANGROUP:47D9		       xor     di, di
TRANGROUP:47DB		       mov     es, [ds:TPA]
TRANGROUP:47DF		       repne scasb	       ; scan for EOF
TRANGROUP:47E1		       pop     es
TRANGROUP:47E2		       jnz     short NOFIRSTDEST ; no ^z in buffer, everything ok
TRANGROUP:47E4		       dec     di	       ; point at ^z
TRANGROUP:47E5		       mov     [ds:NXTADD], di ; new buffer length
TRANGROUP:47E9
TRANGROUP:47E9 NOFIRSTDEST:			       ; ...
TRANGROUP:47E9		       mov     bx, (offset BWDBUF+1) ; offset DIRBUF+1
TRANGROUP:47EC		       cmp     [ds:PARM1], 0   ; cmp byte [Concat],0
TRANGROUP:47F1		       jz      short GOTCHRSRC ; Not a concat
TRANGROUP:47F3		       mov     bx, (offset SDIRBUF+1) ;	Source of replacement chars
TRANGROUP:47F6
TRANGROUP:47F6 GOTCHRSRC:			       ; ...
TRANGROUP:47F6		       mov     si, (offset DESTDIR+1) ;	offset DestFcb+1
TRANGROUP:47F9		       mov     di, [ds:DestTail]
TRANGROUP:47F9 endp	       BUILDDEST
TRANGROUP:47F9
TRANGROUP:47FD
TRANGROUP:47FD ; =============== S U B R O U T I N E =======================================
TRANGROUP:47FD
TRANGROUP:47FD
TRANGROUP:47FD proc	       BUILDNAME near	       ; ...
TRANGROUP:47FD		       mov     cx, 8
TRANGROUP:4800
TRANGROUP:4800 BUILDMAIN:			       ; ...
TRANGROUP:4800		       lodsb
TRANGROUP:4801		       cmp     al, 3Fh ; '?'
TRANGROUP:4803		       jnz     short NOTAMBIG
TRANGROUP:4805		       mov     al, [bx]
TRANGROUP:4807
TRANGROUP:4807 NOTAMBIG:			       ; ...
TRANGROUP:4807		       cmp     al, 20h ; ' '
TRANGROUP:4809		       jz      short NOSTORE
TRANGROUP:480B		       stosb
TRANGROUP:480C
TRANGROUP:480C NOSTORE:				       ; ...
TRANGROUP:480C		       inc     bx
TRANGROUP:480D		       loop    BUILDMAIN
TRANGROUP:480F		       mov     cl, 3
TRANGROUP:4811		       mov     al, 20h ; ' '
TRANGROUP:4813		       cmp     [si], al
TRANGROUP:4815		       jz      short ENDDEST   ; No extension
TRANGROUP:4817		       mov     al, 2Eh ; '.'
TRANGROUP:4819		       stosb
TRANGROUP:481A
TRANGROUP:481A BUILDEXT:			       ; ...
TRANGROUP:481A		       lodsb
TRANGROUP:481B		       cmp     al, 3Fh ; '?'
TRANGROUP:481D		       jnz     short NOTAMBIGE
TRANGROUP:481F		       mov     al, [bx]
TRANGROUP:4821
TRANGROUP:4821 NOTAMBIGE:			       ; ...
TRANGROUP:4821		       cmp     al, 20h ; ' '
TRANGROUP:4823		       jz      short NOSTOREE
TRANGROUP:4825		       stosb
TRANGROUP:4826
TRANGROUP:4826 NOSTOREE:			       ; ...
TRANGROUP:4826		       inc     bx
TRANGROUP:4827		       loop    BUILDEXT
TRANGROUP:4829
TRANGROUP:4829 ENDDEST:				       ; ...
TRANGROUP:4829		       xor     al, al
TRANGROUP:482B		       stosb		       ; NUL terminate
TRANGROUP:482C		       retn
TRANGROUP:482C endp	       BUILDNAME
TRANGROUP:482C
TRANGROUP:482D
TRANGROUP:482D ; =============== S U B R O U T I N E =======================================
TRANGROUP:482D
TRANGROUP:482D
TRANGROUP:482D proc	       BUILDPATH near	       ; ...
TRANGROUP:482D
TRANGROUP:482D ; FUNCTION CHUNK	AT TRANGROUP:1E50 SIZE 00000011	BYTES
TRANGROUP:482D
TRANGROUP:482D		       test    [byte ptr bp+4],	2 ; [bp+VARSTRUC.INFO]
TRANGROUP:4831		       jnz     short NOTPFILE
TRANGROUP:4833		       mov     dx, bp
TRANGROUP:4835		       add     dx, 5	       ; VARSTRUC.BUF
TRANGROUP:4838		       push    di
TRANGROUP:4839		       mov     ax, 6C00h       ; (ExtOpen<<8)
TRANGROUP:483C		       xor     cx, cx
TRANGROUP:483E		       mov     si, dx
TRANGROUP:4840		       mov     dx, 101h
TRANGROUP:4843		       int     21h	       ; DOS - 4.0 - EXTENDED OPEN/CREATE
TRANGROUP:4843					       ; BL = open mode	as in AL for normal open (INT 21h/AH=3Dh)
TRANGROUP:4843					       ; BH = flags, CX	= create attribute, DL = action	if file	exists/does not	exists
TRANGROUP:4843					       ; DH = 00h (reserved), DS:SI -> ASCIZ file name
TRANGROUP:4845		       pop     di
TRANGROUP:4846		       jnb     short PURE_FILE
TRANGROUP:4848		       call    get_ext_error_number
TRANGROUP:484B		       cmp     ax, 2	       ; ERROR_FILE_NOT_FOUND
TRANGROUP:484E		       jz      short NOTPFILE
TRANGROUP:4850		       cmp     ax, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:4853		       jz      short NOTPFILE
TRANGROUP:4855		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:4858		       jz      short NOTPFILE
TRANGROUP:485A		       jmp     extend_setup
TRANGROUP:485D ; ---------------------------------------------------------------------------
TRANGROUP:485D
TRANGROUP:485D PURE_FILE:			       ; ...
TRANGROUP:485D		       mov     bx, ax
TRANGROUP:485F		       mov     ax, 4400h
TRANGROUP:4862		       int     21h	       ; DOS - 2+ - IOCTL - GET	DEVICE INFORMATION
TRANGROUP:4862					       ; BX = file or device handle
TRANGROUP:4864		       mov     ah, 3Eh
TRANGROUP:4866		       int     21h	       ; DOS - 2+ - CLOSE A FILE WITH HANDLE
TRANGROUP:4866					       ; BX = file handle
TRANGROUP:4868		       test    dl, 80h	       ; devid_ISDEV
TRANGROUP:486B		       jnz     short ISADEV
TRANGROUP:486D		       test    [byte ptr bp+4],	4 ; [bp+VARSTRUC.INFO]
TRANGROUP:4871		       jz      short ISADEV
TRANGROUP:4873
TRANGROUP:4873 NOTPFILE:			       ; ...
TRANGROUP:4873		       mov     dx, [bp+5]      ; [bp+VARSTRUC.BUF]
TRANGROUP:4876		       cmp     dl, 0	       ; If no drive specified,	get default drive dir
TRANGROUP:4879		       jz      short SET_DRIVE_SPEC
TRANGROUP:487B		       cmp     dh, ':'
TRANGROUP:487E		       jz      short DRVSPEC5
TRANGROUP:4880
TRANGROUP:4880 SET_DRIVE_SPEC:			       ; ...
TRANGROUP:4880		       mov     dl, 40h ; '@'
TRANGROUP:4882
TRANGROUP:4882 DRVSPEC5:			       ; ...
TRANGROUP:4882		       or      dl, 20h
TRANGROUP:4885		       sub     dl, 60h
TRANGROUP:4888		       call    SAVUDIR1
TRANGROUP:488B		       jnb     short CURDIR_OK
TRANGROUP:488D		       call    get_ext_error_number
TRANGROUP:4890		       jmp     extend_setup
TRANGROUP:4893 ; ---------------------------------------------------------------------------
TRANGROUP:4893
TRANGROUP:4893 CURDIR_OK:			       ; ...
TRANGROUP:4893		       mov     dx, bp
TRANGROUP:4895		       add     dx, 5	       ; VARSTRUC.BUF ;	Set DX for upcomming CHDIRs
TRANGROUP:4898		       mov     bh, [bp+4]      ; [bp+VARSTRUC.INFO]
TRANGROUP:489B		       and     bh, 6
TRANGROUP:489E		       cmp     bh, 6	       ; Ambig and path	?
TRANGROUP:48A1		       jnz     short CHECKAMB  ; jmp if	no
TRANGROUP:48A3		       mov     si, [bp+2]      ; [bp+VARSTRUC.TTAIL]
TRANGROUP:48A6		       mov     bl, ':'
TRANGROUP:48A8		       cmp     [si-2], bl
TRANGROUP:48AB		       jnz     short KNOWNOTSPEC
TRANGROUP:48AD		       mov     [byte ptr bp+0],	2 ; [bp+VARSTRUC.ISDIR],2 ; Know is d:/file
TRANGROUP:48B1		       jmp     short DOPCDJ
TRANGROUP:48B3 ; ---------------------------------------------------------------------------
TRANGROUP:48B3
TRANGROUP:48B3 KNOWNOTSPEC:			       ; ...
TRANGROUP:48B3		       mov     [byte ptr bp+0],	1 ; [bp+VARSTRUC.ISDIR],1 ; Know is path/file
TRANGROUP:48B7		       dec     si
TRANGROUP:48B8
TRANGROUP:48B8 DOPCDJ:				       ; ...
TRANGROUP:48B8		       jmp     DOPCD
TRANGROUP:48BB ; ---------------------------------------------------------------------------
TRANGROUP:48BB
TRANGROUP:48BB CHECKAMB:			       ; ...
TRANGROUP:48BB		       cmp     bh, 2
TRANGROUP:48BE		       jnz     short CHECKCD
TRANGROUP:48C0
TRANGROUP:48C0 ISADEV:				       ; ...
TRANGROUP:48C0		       mov     [byte ptr bp+0],	0 ; [bp+VARSTRUC.ISDIR]
TRANGROUP:48C4		       retn
TRANGROUP:48C5 ; ---------------------------------------------------------------------------
TRANGROUP:48C5
TRANGROUP:48C5 CHECKCD:				       ; ...
TRANGROUP:48C5		       call    SetRest1
TRANGROUP:48C8		       mov     ah, 3Bh
TRANGROUP:48CA		       int     21h	       ; DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)
TRANGROUP:48CA					       ; DS:DX -> ASCIZ	directory name (may include drive)
TRANGROUP:48CC		       jb      short NOTPDIR
TRANGROUP:48CE		       mov     di, dx
TRANGROUP:48D0		       xor     ax, ax
TRANGROUP:48D2		       mov     cx, ax
TRANGROUP:48D4		       dec     cx
TRANGROUP:48D5
TRANGROUP:48D5 Kloop:				       ; ...
TRANGROUP:48D5		       mov     al, [es:di]
TRANGROUP:48D8		       inc     di
TRANGROUP:48D9		       or      al, al
TRANGROUP:48DB		       jz      short DONE
TRANGROUP:48DD		       xor     ah, ah
TRANGROUP:48DF		       call    testkanj
TRANGROUP:48E2		       jz      short Kloop
TRANGROUP:48E4		       inc     di
TRANGROUP:48E5		       inc     ah
TRANGROUP:48E7		       jmp     short Kloop
TRANGROUP:48E9 ; ---------------------------------------------------------------------------
TRANGROUP:48E9
TRANGROUP:48E9 DONE:				       ; ...
TRANGROUP:48E9		       dec     di
TRANGROUP:48EA		       mov     al, [ds:DIRCHAR]
TRANGROUP:48ED		       mov     [byte ptr bp+0],	2 ; [bp+VARSTRUC.ISDIR],2 ; assume d:/file
TRANGROUP:48F1		       or      ah, ah
TRANGROUP:48F3		       jnz     short _STORE_PCHAR ; his	is the trailing	byte of	ECS code
TRANGROUP:48F5		       cmp     al, [di-1]
TRANGROUP:48F8		       jz      short GOTSRCSLSH
TRANGROUP:48FA
TRANGROUP:48FA _STORE_PCHAR:			       ; ...
TRANGROUP:48FA		       stosb
TRANGROUP:48FB		       mov     [byte ptr bp+0],	1 ; [bp+VARSTRUC.ISDIR],1 ; know path/file
TRANGROUP:48FF
TRANGROUP:48FF GOTSRCSLSH:			       ; ...
TRANGROUP:48FF		       or      [byte ptr bp+4],	6 ; [bp+VARSTRUC.INFO]
TRANGROUP:4903		       call    SETSTARS
TRANGROUP:4906
TRANGROUP:4906 NOTPDIR_RETN:			       ; ...
TRANGROUP:4906		       retn
TRANGROUP:4907 ; ---------------------------------------------------------------------------
TRANGROUP:4907
TRANGROUP:4907 NOTPDIR:				       ; ...
TRANGROUP:4907		       call    get_ext_error_number
TRANGROUP:490A		       cmp     ax, 3	       ; ERROR_PATH_NOT_FOUND
TRANGROUP:490D		       jz      short NOTPDIR_TRY
TRANGROUP:490F		       cmp     ax, 5	       ; ERROR_ACCESS_DENIED
TRANGROUP:4912		       jnz     short EXTEND_SETUPJ
TRANGROUP:4914
TRANGROUP:4914 NOTPDIR_TRY:			       ; ...
TRANGROUP:4914		       mov     [byte ptr bp+0],	0 ; [bp+VARSTRUC.ISDIR]
TRANGROUP:4918		       mov     bh, [bp+4]      ; [bp+VARSTRUC.INFO]
TRANGROUP:491B		       test    bh, 4
TRANGROUP:491E		       jz      short NOTPDIR_RETN ; Know pure file, no path seps
TRANGROUP:4920		       mov     [byte ptr bp+0],	2 ; [bp+VARSTRUC.ISDIR],2 ; assume d:/file
TRANGROUP:4924		       mov     si, [bp+2]      ; [bp+VARSTRUC.TTAIL]
TRANGROUP:4927		       cmp     [byte ptr si], 0
TRANGROUP:492A		       jz      short BADCDERRJ2	; Trailing '/'
TRANGROUP:492C		       mov     bl, 2Eh ; '.'
TRANGROUP:492E		       cmp     [si], bl
TRANGROUP:4930		       jz      short BADCDERRJ2	; If . or .. pure cd should have worked
TRANGROUP:4932		       mov     bl, 3Ah ; ':'
TRANGROUP:4934		       cmp     [si-2], bl
TRANGROUP:4937		       jz      short DOPCD     ; Know d:/file
TRANGROUP:4939		       mov     [byte ptr bp+0],	1 ; [bp+VARSTRUC.ISDIR],1 ; Know path/file
TRANGROUP:493D		       dec     si	       ; Point at last '/'
TRANGROUP:493E
TRANGROUP:493E DOPCD:				       ; ...
TRANGROUP:493E		       xor     bl, bl
TRANGROUP:4940		       xchg    bl, [si]	       ; Stick in a NUL
TRANGROUP:4942		       call    SetRest1
TRANGROUP:4945		       cmp     dx, si
TRANGROUP:4947		       jnb     short LookBack
TRANGROUP:4949		       push    si
TRANGROUP:494A		       push    cx
TRANGROUP:494B		       mov     cx, si
TRANGROUP:494D		       mov     si, dx
TRANGROUP:494F
TRANGROUP:494F Kloop2:				       ; ...
TRANGROUP:494F		       lodsb
TRANGROUP:4950		       call    testkanj
TRANGROUP:4953		       jz      short NotKanj4
TRANGROUP:4955		       lodsb
TRANGROUP:4956		       cmp     si, cx
TRANGROUP:4958		       jb      short Kloop2
TRANGROUP:495A		       pop     cx
TRANGROUP:495B		       pop     si
TRANGROUP:495C		       jmp     short DoCdr     ; Last char is ECS code,
TRANGROUP:495C					       ; don't check for trailing path sep
TRANGROUP:495E ; ---------------------------------------------------------------------------
TRANGROUP:495E
TRANGROUP:495E NotKanj4:			       ; ...
TRANGROUP:495E		       cmp     si, cx
TRANGROUP:4960		       jb      short Kloop2
TRANGROUP:4962		       pop     cx
TRANGROUP:4963		       pop     si
TRANGROUP:4964
TRANGROUP:4964 LookBack:			       ; ...
TRANGROUP:4964		       cmp     bl, [si-1]      ; if double slash, then complain
TRANGROUP:4967		       jz      short BADCDERRJ2
TRANGROUP:4969
TRANGROUP:4969 DoCdr:				       ; ...
TRANGROUP:4969		       mov     ah, 3Bh
TRANGROUP:496B		       int     21h	       ; DOS - 2+ - CHANGE THE CURRENT DIRECTORY (CHDIR)
TRANGROUP:496B					       ; DS:DX -> ASCIZ	directory name (may include drive)
TRANGROUP:496D		       xchg    bl, [si]
TRANGROUP:496F		       jnb     short NOTPDIR_RETN
TRANGROUP:4971		       call    get_ext_error_number
TRANGROUP:4974
TRANGROUP:4974 EXTEND_SETUPJ:			       ; ...
TRANGROUP:4974		       jmp     extend_setup
TRANGROUP:4977 ; ---------------------------------------------------------------------------
TRANGROUP:4977
TRANGROUP:4977 BADCDERRJ2:			       ; ...
TRANGROUP:4977		       jmp     badpath_err
TRANGROUP:4977 endp	       BUILDPATH
TRANGROUP:4977
TRANGROUP:497A
TRANGROUP:497A ; =============== S U B R O U T I N E =======================================
TRANGROUP:497A
TRANGROUP:497A
TRANGROUP:497A proc	       SETSTARS	near	       ; ...
TRANGROUP:497A		       mov     [bp+2], di      ; [bp+VARSTRUC.TTAIL]
TRANGROUP:497D		       add     [byte ptr bp+1],	12 ; [bp+VARSTRUC.SIZ]
TRANGROUP:4981		       mov     ax, 2E3Fh       ; DOT_QMARK ; '?.' (NASM syntax)
TRANGROUP:4984		       mov     cx, 8
TRANGROUP:4987		       rep stosb
TRANGROUP:4989		       xchg    al, ah
TRANGROUP:498B		       stosb
TRANGROUP:498C		       xchg    al, ah
TRANGROUP:498E		       mov     cl, 3
TRANGROUP:4990		       rep stosb
TRANGROUP:4992		       xor     al, al
TRANGROUP:4994		       stosb
TRANGROUP:4995		       retn
TRANGROUP:4995 endp	       SETSTARS
TRANGROUP:4995
TRANGROUP:4996
TRANGROUP:4996 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4996
TRANGROUP:4996
TRANGROUP:4996 proc	       COMPNAME	near	       ; ...
TRANGROUP:4996		       mov     si, offset DestBuf
TRANGROUP:4999		       mov     di, offset TRGXNAME
TRANGROUP:499C		       mov     ax, 6000h       ; (xNameTrans*256)
TRANGROUP:499F		       int     21h	       ; DOS - RESOLVE PATH STRING TO CANONICAL	PATH STRING
TRANGROUP:499F					       ; DS:SI -> ASCIZ	relative path string or	directory name
TRANGROUP:499F					       ; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
TRANGROUP:49A1		       mov     si, offset SRCXNAME
TRANGROUP:49A4		       mov     di, offset TRGXNAME
TRANGROUP:49A7		       call    STRCOMP
TRANGROUP:49AA		       retn
TRANGROUP:49AA endp	       COMPNAME
TRANGROUP:49AA
TRANGROUP:49AB
TRANGROUP:49AB ; =============== S U B R O U T I N E =======================================
TRANGROUP:49AB
TRANGROUP:49AB
TRANGROUP:49AB proc	       cparse near	       ; ...
TRANGROUP:49AB		       xor     ax, ax	       ; DS:SI	 Points	input buffer
TRANGROUP:49AB					       ; ES:DI	 Points	to the token buffer
TRANGROUP:49AB					       ; BL  Special delimiter for this	call
TRANGROUP:49AD		       mov     [ds:STARTEL], di	; No path element
TRANGROUP:49B1		       mov     [ds:ELPOS], al  ; Start in 8 char prefix
TRANGROUP:49B4		       mov     [ds:SKPDEL], al ; No skip delimiter yet
TRANGROUP:49B7		       mov     bh, al	       ; Init nothing
TRANGROUP:49B9		       pushf
TRANGROUP:49BA		       push    di
TRANGROUP:49BB		       xor     cx, cx
TRANGROUP:49BD		       mov     [ds:comma], cl  ; reset comma flag
TRANGROUP:49C1
TRANGROUP:49C1 moredelim:			       ; ...
TRANGROUP:49C1		       lodsb
TRANGROUP:49C2		       call    DELIM
TRANGROUP:49C5		       jnz     short SCANCDONE
TRANGROUP:49C7		       cmp     al, 20h ; ' '
TRANGROUP:49C9		       jz      short moredelim
TRANGROUP:49CB		       cmp     al, 9
TRANGROUP:49CD		       jz      short moredelim
TRANGROUP:49CF		       xchg    al, [ds:SKPDEL]
TRANGROUP:49D3		       or      al, al
TRANGROUP:49D5		       jz      short moredelim ; One non space/tab delimiter allowed
TRANGROUP:49D7		       test    bh, 80h	       ; has a special char been found?
TRANGROUP:49DA		       jz      short no_comma  ; no - just exit
TRANGROUP:49DC		       mov     [ds:comma], 1   ; set comma flag
TRANGROUP:49E1
TRANGROUP:49E1 no_comma:			       ; ...
TRANGROUP:49E1		       jmp     x_done
TRANGROUP:49E4 ; ---------------------------------------------------------------------------
TRANGROUP:49E4
TRANGROUP:49E4 SCANCDONE:			       ; ...
TRANGROUP:49E4		       cmp     al, bl	       ; Special delimiter?
TRANGROUP:49E6		       jnz     short nospec
TRANGROUP:49E8		       or      bh, 80h
TRANGROUP:49EB		       jmp     short moredelim
TRANGROUP:49ED ; ---------------------------------------------------------------------------
TRANGROUP:49ED
TRANGROUP:49ED nospec:				       ; ...
TRANGROUP:49ED		       cmp     al, 0Dh	       ; a CR?
TRANGROUP:49EF		       jnz     short ncperror
TRANGROUP:49F1		       jmp     cperror
TRANGROUP:49F4 ; ---------------------------------------------------------------------------
TRANGROUP:49F4
TRANGROUP:49F4 ncperror:			       ; ...
TRANGROUP:49F4		       cmp     al, [ds:SWITCHAR] ; is the char the switch char?
TRANGROUP:49F8		       jnz     short na_switch
TRANGROUP:49FA		       jmp     a_switch	       ; yes, process...
TRANGROUP:49FD ; ---------------------------------------------------------------------------
TRANGROUP:49FD
TRANGROUP:49FD na_switch:			       ; ...
TRANGROUP:49FD		       mov     dl, ':'
TRANGROUP:49FF		       cmp     [si], dl
TRANGROUP:4A01		       jnz     short anum_chard	; Drive	not specified
TRANGROUP:4A03		       cmp     [ds:cpyflag], 1
TRANGROUP:4A08		       jnz     short cpcont2
TRANGROUP:4A0A		       call    UPCONV
TRANGROUP:4A0D
TRANGROUP:4A0D cpcont2:				       ; ...
TRANGROUP:4A0D		       call    move_char
TRANGROUP:4A10		       lodsb		       ; Get the ':'
TRANGROUP:4A11		       call    move_char
TRANGROUP:4A14		       mov     [ds:STARTEL], di
TRANGROUP:4A18		       mov     [ds:ELCNT], 0
TRANGROUP:4A1D		       jmp     anum_test
TRANGROUP:4A20 ; ---------------------------------------------------------------------------
TRANGROUP:4A20
TRANGROUP:4A20 anum_chard:			       ; ...
TRANGROUP:4A20		       mov     [ds:STARTEL], di
TRANGROUP:4A24		       mov     [ds:ELCNT], 0   ; Store of this char sets it to one
TRANGROUP:4A29		       cmp     [ds:cpyflag], 1 ; Was CPARSE called from	COPY?
TRANGROUP:4A2E		       jnz     short anum_char ; No, don't add drive spec.
TRANGROUP:4A30		       call    pathchrcmp      ; Starts	with a pathchar?
TRANGROUP:4A33		       jnz     short anum_char ; no
TRANGROUP:4A35		       push    ax
TRANGROUP:4A36		       mov     al, [ds:CURDRV] ; Insert	drive spec
TRANGROUP:4A39		       add     al, 41h ; 'A'
TRANGROUP:4A3B		       call    move_char
TRANGROUP:4A3E		       mov     al, 3Ah ; ':'
TRANGROUP:4A40		       call    move_char
TRANGROUP:4A43		       pop     ax
TRANGROUP:4A44		       mov     [ds:STARTEL], di
TRANGROUP:4A48		       mov     [ds:ELCNT], 0   ; byte
TRANGROUP:4A4D
TRANGROUP:4A4D anum_char:			       ; ...
TRANGROUP:4A4D		       call    testkanj
TRANGROUP:4A50		       jz      short NOTKANJ
TRANGROUP:4A52		       call    move_char
TRANGROUP:4A55		       lodsb
TRANGROUP:4A56		       jmp     short notspecial
TRANGROUP:4A58 ; ---------------------------------------------------------------------------
TRANGROUP:4A58
TRANGROUP:4A58 NOTKANJ:				       ; ...
TRANGROUP:4A58		       cmp     [ds:cpyflag], 1 ; and if	we're in COPY
TRANGROUP:4A5D		       jnz     short TESTDOT
TRANGROUP:4A5F		       call    UPCONV	       ; upper case the	char
TRANGROUP:4A62
TRANGROUP:4A62 TESTDOT:				       ; ...
TRANGROUP:4A62		       cmp     al, 2Eh ; '.'
TRANGROUP:4A64		       jnz     short testquest
TRANGROUP:4A66		       inc     [ds:ELPOS]      ; byte ;	flag in	extension
TRANGROUP:4A6A		       mov     [ds:ELCNT], 0FFh	; Store	of the '.' resets it to 0
TRANGROUP:4A6F
TRANGROUP:4A6F testquest:			       ; ...
TRANGROUP:4A6F		       cmp     al, 3Fh ; '?'
TRANGROUP:4A71		       jnz     short testsplat
TRANGROUP:4A73		       or      bh, 2
TRANGROUP:4A76
TRANGROUP:4A76 testsplat:			       ; ...
TRANGROUP:4A76		       cmp     al, 2Ah ; '*'
TRANGROUP:4A78		       jnz     short testpath
TRANGROUP:4A7A		       or      bh, 2
TRANGROUP:4A7D		       cmp     [ds:expand_star], 0
TRANGROUP:4A82		       jnz     short expand_filename
TRANGROUP:4A84		       jmp     short testpath
TRANGROUP:4A86 ; ---------------------------------------------------------------------------
TRANGROUP:4A86
TRANGROUP:4A86 BADPERR2J:			       ; ...
TRANGROUP:4A86		       jmp     short BADPERR2
TRANGROUP:4A88 ; ---------------------------------------------------------------------------
TRANGROUP:4A88
TRANGROUP:4A88 expand_filename:			       ; ...
TRANGROUP:4A88		       mov     ah, 7
TRANGROUP:4A8A		       cmp     [ds:ELPOS], 0
TRANGROUP:4A8F		       jz      short gotelcnt
TRANGROUP:4A91		       mov     ah, 2
TRANGROUP:4A93
TRANGROUP:4A93 gotelcnt:			       ; ...
TRANGROUP:4A93		       mov     al, 3Fh ; '?'
TRANGROUP:4A95		       sub     ah, [ds:ELCNT]
TRANGROUP:4A99		       jb      short BADPERR2J
TRANGROUP:4A9B		       xchg    ah, cl
TRANGROUP:4A9D		       jcxz    short testpathx
TRANGROUP:4A9F
TRANGROUP:4A9F qmove:				       ; ...
TRANGROUP:4A9F		       xchg    ah, cl
TRANGROUP:4AA1		       call    move_char
TRANGROUP:4AA4		       xchg    ah, cl
TRANGROUP:4AA6		       loop    qmove
TRANGROUP:4AA8
TRANGROUP:4AA8 testpathx:			       ; ...
TRANGROUP:4AA8		       xchg    ah, cl
TRANGROUP:4AAA
TRANGROUP:4AAA testpath:			       ; ...
TRANGROUP:4AAA		       call    pathchrcmp
TRANGROUP:4AAD		       jnz     short notspecial
TRANGROUP:4AAF		       or      bh, 4
TRANGROUP:4AB2		       cmp     [ds:expand_star], 0
TRANGROUP:4AB7		       jz      short no_err_check
TRANGROUP:4AB9		       test    bh, 2	       ; If just hit a '/', cannot have ? or * yet
TRANGROUP:4ABC		       jnz     short BADPERR
TRANGROUP:4ABE
TRANGROUP:4ABE no_err_check:			       ; ...
TRANGROUP:4ABE		       mov     [ds:STARTEL], di	; New element
TRANGROUP:4AC2		       inc     [ds:STARTEL]    ; word ;	Point to char after /
TRANGROUP:4AC6		       mov     [ds:ELCNT], 0FFh	; Store	of '/' sets it to 0
TRANGROUP:4ACB		       mov     [ds:ELPOS], 0   ; byte
TRANGROUP:4AD0
TRANGROUP:4AD0 notspecial:			       ; ...
TRANGROUP:4AD0		       call    move_char       ; just an alphanum string
TRANGROUP:4AD3
TRANGROUP:4AD3 anum_test:			       ; ...
TRANGROUP:4AD3		       lodsb
TRANGROUP:4AD4		       call    DELIM
TRANGROUP:4AD7		       jz      short x_done
TRANGROUP:4AD9		       cmp     al, 0Dh
TRANGROUP:4ADB		       jz      short x_done
TRANGROUP:4ADD		       cmp     al, [ds:SWITCHAR]
TRANGROUP:4AE1		       jz      short x_done
TRANGROUP:4AE3		       cmp     al, bl
TRANGROUP:4AE5		       jz      short x_done
TRANGROUP:4AE7		       cmp     al, ':'         ; ':' allowed as trailer because of devices
TRANGROUP:4AE9		       jz      short FOO15
TRANGROUP:4AEB		       jmp     anum_char
TRANGROUP:4AEE ; ---------------------------------------------------------------------------
TRANGROUP:4AEE
TRANGROUP:4AEE FOO15:				       ; ...
TRANGROUP:4AEE		       cmp     [ds:cpyflag], 2
TRANGROUP:4AF3		       jnz     short cpcont4
TRANGROUP:4AF5		       call    move_char
TRANGROUP:4AF8		       jmp     short anum_test
TRANGROUP:4AFA ; ---------------------------------------------------------------------------
TRANGROUP:4AFA
TRANGROUP:4AFA cpcont4:				       ; ...
TRANGROUP:4AFA		       inc     si	       ; Skip the ':'
TRANGROUP:4AFB		       jmp     short x_done
TRANGROUP:4AFD ; ---------------------------------------------------------------------------
TRANGROUP:4AFD		       jmp     anum_char
TRANGROUP:4B00 ; ---------------------------------------------------------------------------
TRANGROUP:4B00
TRANGROUP:4B00 BADPERR2:			       ; ...
TRANGROUP:4B00		       mov     dx, offset BADCPMES_PTR ; Issue "Invalid	Directory" message
TRANGROUP:4B03		       jmp     cerror
TRANGROUP:4B06 ; ---------------------------------------------------------------------------
TRANGROUP:4B06
TRANGROUP:4B06 BADPERR:				       ; ...
TRANGROUP:4B06		       mov     dx, offset badcd_ptr
TRANGROUP:4B09		       jmp     cerror
TRANGROUP:4B0C ; ---------------------------------------------------------------------------
TRANGROUP:4B0C
TRANGROUP:4B0C cperror:				       ; ...
TRANGROUP:4B0C		       dec     si	       ; adjust	the pointer
TRANGROUP:4B0D		       pop     di	       ; retrive token buffer address
TRANGROUP:4B0E		       popf		       ; restore flags
TRANGROUP:4B0F		       stc		       ; set the carry bit
TRANGROUP:4B10		       retn
TRANGROUP:4B11 ; ---------------------------------------------------------------------------
TRANGROUP:4B11
TRANGROUP:4B11 x_done:				       ; ...
TRANGROUP:4B11		       dec     si	       ; adjust	for next round
TRANGROUP:4B12		       jmp     short out_token
TRANGROUP:4B14 ; ---------------------------------------------------------------------------
TRANGROUP:4B14
TRANGROUP:4B14 a_switch:			       ; ...
TRANGROUP:4B14		       or      bh, 1	       ; Indicate switch
TRANGROUP:4B17		       or      bp, 8000h       ; FSWITCH
TRANGROUP:4B1B		       call    scanoff
TRANGROUP:4B1E		       inc     si
TRANGROUP:4B1F		       call    testkanj
TRANGROUP:4B22		       jz      short a_switch_notkanj
TRANGROUP:4B24		       call    move_char
TRANGROUP:4B27		       lodsb
TRANGROUP:4B28		       call    move_char
TRANGROUP:4B2B		       or      bp, 4000h       ; FBADSWITCH
TRANGROUP:4B2F		       jmp     short out_token
TRANGROUP:4B31 ; ---------------------------------------------------------------------------
TRANGROUP:4B31
TRANGROUP:4B31 a_switch_notkanj:		       ; ...
TRANGROUP:4B31		       cmp     al, 0Dh
TRANGROUP:4B33		       jnz     short Store_swt
TRANGROUP:4B35		       mov     al, 0
TRANGROUP:4B37		       stosb
TRANGROUP:4B38		       or      bp, 4000h       ; FBADSWITCH
TRANGROUP:4B3C		       jmp     short cperror   ; Trailing switch character error
TRANGROUP:4B3C					       ; BP = fSwitch but no switch bit	is set
TRANGROUP:4B3C					       ; (unknown switch)
TRANGROUP:4B3E ; ---------------------------------------------------------------------------
TRANGROUP:4B3E
TRANGROUP:4B3E Store_swt:			       ; ...
TRANGROUP:4B3E		       call    move_char       ; store the character
TRANGROUP:4B41		       call    UPCONV
TRANGROUP:4B44		       push    es
TRANGROUP:4B45		       push    di
TRANGROUP:4B46		       push    cx
TRANGROUP:4B47		       push    cs
TRANGROUP:4B48		       pop     es
TRANGROUP:4B49		       assume es:TRANGROUP
TRANGROUP:4B49		       mov     di, offset switch_list ;	"-Y?VBAPW"
TRANGROUP:4B4C		       mov     cx, 8	       ; SWCOUNT = 8
TRANGROUP:4B4F		       or      bp, 4000h
TRANGROUP:4B53		       repne scasb
TRANGROUP:4B55		       jnz     short out_tokenp
TRANGROUP:4B57		       and     bp, 0BFFFh      ; ~FBADSWITCH
TRANGROUP:4B5B		       mov     ax, 1
TRANGROUP:4B5E		       shl     ax, cl
TRANGROUP:4B60		       or      bp, ax
TRANGROUP:4B62
TRANGROUP:4B62 out_tokenp:			       ; ...
TRANGROUP:4B62		       pop     cx
TRANGROUP:4B63		       pop     di
TRANGROUP:4B64		       pop     es
TRANGROUP:4B65		       assume es:nothing
TRANGROUP:4B65
TRANGROUP:4B65 out_token:			       ; ...
TRANGROUP:4B65		       mov     al, 0
TRANGROUP:4B67		       stosb
TRANGROUP:4B68		       pop     di
TRANGROUP:4B69		       popf
TRANGROUP:4B6A		       clc
TRANGROUP:4B6B		       retn
TRANGROUP:4B6B endp	       cparse
TRANGROUP:4B6B
TRANGROUP:4B6C
TRANGROUP:4B6C ; =============== S U B R O U T I N E =======================================
TRANGROUP:4B6C
TRANGROUP:4B6C
TRANGROUP:4B6C proc	       move_char near	       ; ...
TRANGROUP:4B6C		       stosb		       ; store char in token buffer
TRANGROUP:4B6D		       inc     cx	       ; increment char	count
TRANGROUP:4B6E		       inc     [ds:ELCNT]      ; byte ;	increment element count	for * substi
TRANGROUP:4B72		       retn
TRANGROUP:4B72 endp	       move_char
TRANGROUP:4B72
TRANGROUP:4B73
TRANGROUP:4B73 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4B73
TRANGROUP:4B73
TRANGROUP:4B73 proc	       sysparse	near	       ; ...
TRANGROUP:4B73
TRANGROUP:4B73 ; FUNCTION CHUNK	AT TRANGROUP:4C8C SIZE 00000069	BYTES
TRANGROUP:4B73
TRANGROUP:4B73		       mov     [word ptr cs:$P_Flags], 0
TRANGROUP:4B7A		       mov     [cs:$P_ORIG_ORD], cx
TRANGROUP:4B7F		       mov     [cs:$P_ORIG_STACK], sp
TRANGROUP:4B84		       mov     [cs:$P_ORIG_SI],	si
TRANGROUP:4B89
TRANGROUP:4B89 $P_Redo_Time:			       ; ...
TRANGROUP:4B89		       cld
TRANGROUP:4B8A		       mov     [cs:$P_ORDINAL],	cx
TRANGROUP:4B8F		       mov     [cs:$P_RC], 0   ; word ;	$P_No_Error
TRANGROUP:4B96		       mov     [cs:$P_Found_SYNONYM], 0
TRANGROUP:4B9D		       mov     [cs:$P_DX], 0
TRANGROUP:4BA4		       mov     [word ptr cs:$P_FileSp_Char], '][' ; "[]|<>+=;\""
TRANGROUP:4BAB		       mov     [word ptr cs:$P_FileSp_Char+2], '<|'
TRANGROUP:4BB2		       mov     [word ptr cs:$P_FileSp_Char+4], '+>'
TRANGROUP:4BB9		       mov     [word ptr cs:$P_FileSp_Char+6], ';='
TRANGROUP:4BC0		       call    $P_Skip_Delim
TRANGROUP:4BC3		       jnb     short $P_Start
TRANGROUP:4BC5		       mov     ax, 0FFFFh      ; $P_RC_EOL
TRANGROUP:4BC8		       push    bx
TRANGROUP:4BC9		       mov     bx, [es:di]     ; [es:di+$P_PARMS_BLK.$P_PARMSX_Address]
TRANGROUP:4BCC		       cmp     cl, [es:bx]     ; [es:bx+$P_PARMSX_BLK.$P_MinP]
TRANGROUP:4BCC					       ; check ORDINAL to see if the minimum
TRANGROUP:4BCF		       jnb     short $P_Fin    ; positional found.
TRANGROUP:4BD1		       mov     ax, 2	       ; $P_Op_Missing
TRANGROUP:4BD4
TRANGROUP:4BD4 $P_Fin:				       ; ...
TRANGROUP:4BD4		       pop     bx
TRANGROUP:4BD5		       jmp     $P_Single_Exit
TRANGROUP:4BD8 ; ---------------------------------------------------------------------------
TRANGROUP:4BD8
TRANGROUP:4BD8 $P_Start:			       ; ...
TRANGROUP:4BD8		       mov     [cs:$P_SaveSI_Cmpx], si
TRANGROUP:4BDD		       push    bx
TRANGROUP:4BDE		       push    di
TRANGROUP:4BDF		       push    bp
TRANGROUP:4BE0		       lea     bx, [$P_STRING_BUF]
TRANGROUP:4BE4		       test    [cs:$P_Flags2], 20h ; $P_Extra
TRANGROUP:4BEA		       jnz     short $P_Pack_End
TRANGROUP:4BEC
TRANGROUP:4BEC $P_Pack_Loop:			       ; ...
TRANGROUP:4BEC		       lodsb
TRANGROUP:4BED		       call    $P_Chk_Switch   ; Check switch character
TRANGROUP:4BF0		       jb      short $P_Pack_End_BY_EOL	; if carry set found delimiter type slash,
TRANGROUP:4BF0					       ; need backup si, else continue
TRANGROUP:4BF2		       call    $P_Chk_EOL      ; Check EOL character
TRANGROUP:4BF5		       jz      short $P_Pack_End_BY_EOL
TRANGROUP:4BF7		       call    $P_Chk_Delim    ; Check delimiter
TRANGROUP:4BFA		       jnz     short $P_PL01   ; If no,	process	next byte
TRANGROUP:4BFC		       test    [cs:$P_Flags2], 20h ; $P_Extra
TRANGROUP:4C02		       jnz     short $P_Pack_End_backup_si
TRANGROUP:4C04		       call    $P_Skip_Delim   ; skip subsequent white space,too
TRANGROUP:4C07		       jmp     short $P_Pack_End ; finish copy by placing NUL at end
TRANGROUP:4C09 ; ---------------------------------------------------------------------------
TRANGROUP:4C09
TRANGROUP:4C09 $P_Pack_End_backup_si:		       ; ...
TRANGROUP:4C09		       test    [cs:$P_Flags2], 41h ; $P_SW+$P_equ
TRANGROUP:4C0F		       jz      short $P_Pack_End
TRANGROUP:4C11		       dec     si
TRANGROUP:4C12		       jmp     short $P_Pack_End
TRANGROUP:4C14 ; ---------------------------------------------------------------------------
TRANGROUP:4C14
TRANGROUP:4C14 $P_PL01:				       ; ...
TRANGROUP:4C14		       mov     [cs:bx],	al
TRANGROUP:4C17		       cmp     al, 3Dh ; '='   ; $P_Keyword
TRANGROUP:4C19		       jnz     short $P_PL00
TRANGROUP:4C1B		       or      [cs:$P_Flags2], 1 ; $P_equ
TRANGROUP:4C21
TRANGROUP:4C21 $P_PL00:				       ; ...
TRANGROUP:4C21		       inc     bx	       ; ready to see next byte
TRANGROUP:4C22		       call    $P_Chk_DBCS     ; was it	1st byte of DBCS ?
TRANGROUP:4C25		       jnb     short $P_Pack_Loop ; if no, process to next byte
TRANGROUP:4C27		       lodsb		       ; if yes, store 2nd byte	of DBCS
TRANGROUP:4C28		       mov     [cs:bx],	al
TRANGROUP:4C2B		       inc     bx	       ; update	pointer
TRANGROUP:4C2C		       jmp     short $P_Pack_Loop ; process to next byte
TRANGROUP:4C2E ; ---------------------------------------------------------------------------
TRANGROUP:4C2E
TRANGROUP:4C2E $P_Pack_End_BY_EOL:		       ; ...
TRANGROUP:4C2E		       dec     si	       ; backup	si pointer
TRANGROUP:4C2F
TRANGROUP:4C2F $P_Pack_End:			       ; ...
TRANGROUP:4C2F		       mov     [cs:$P_SI_Save],	si ; save next pointer
TRANGROUP:4C34		       mov     [byte ptr cs:bx], 0 ; $P_NULL ; put nul at the end
TRANGROUP:4C38		       mov     [cs:$P_Save_EOB], bx ; keep the addr for	later use of complex
TRANGROUP:4C3D		       mov     bx, [es:di]     ; get PARMSX address
TRANGROUP:4C40		       lea     si, [$P_STRING_BUF]
TRANGROUP:4C44		       cmp     [byte ptr cs:si], 2Fh ; '/' ; $P_Switch
TRANGROUP:4C48		       jz      short $P_SW_Manager ; if	yes, process as	switch
TRANGROUP:4C4A		       cmp     [byte ptr cs:si], 22h ; '"' ; $P_DQuote
TRANGROUP:4C4E		       jz      short $P_Positional_Manager ; if	so, process as one!
TRANGROUP:4C50		       test    [cs:$P_Flags2], 1 ; $P_equ
TRANGROUP:4C50					       ; is the	operand	includes equal char ?
TRANGROUP:4C56		       jnz     short $P_Key_Manager ; if yes, process as keyword
TRANGROUP:4C58
TRANGROUP:4C58 $P_Positional_Manager:		       ; ...
TRANGROUP:4C58		       mov     al, [es:bx+1]   ; [es:bx+$P_PARMSX_BLK.$P_MaxP]
TRANGROUP:4C5C		       xor     ah, ah	       ; ax = maxp
TRANGROUP:4C5E		       cmp     [cs:$P_ORDINAL],	ax ; too many positional ?
TRANGROUP:4C63		       jnb     short $P_Too_Many_Error ; if yes, set exit code to too many
TRANGROUP:4C65		       mov     ax, [cs:$P_ORDINAL] ; see what the current ordinal
TRANGROUP:4C69		       shl     ax, 1	       ; ax = ax*2
TRANGROUP:4C6B		       inc     bx	       ; add 2 to bx
TRANGROUP:4C6C		       inc     bx	       ; now bx	points to 1st CONTROL
TRANGROUP:4C6D		       add     bx, ax	       ; now bx	points to specified CONTROL address
TRANGROUP:4C6F		       mov     bx, [es:bx]     ; now bx	points to specified CONTROL itself
TRANGROUP:4C72		       call    $P_Chk_Pos_Control ; Do process for positional
TRANGROUP:4C75		       jmp     short $P_Return_to_Caller
TRANGROUP:4C77 ; ---------------------------------------------------------------------------
TRANGROUP:4C77
TRANGROUP:4C77 $P_Too_Many_Error:		       ; ...
TRANGROUP:4C77		       mov     [cs:$P_RC], 1   ; $P_Too_Many ; set exit	code
TRANGROUP:4C7E		       jmp     short $P_Return_to_Caller
TRANGROUP:4C7E endp	       sysparse
TRANGROUP:4C7E
TRANGROUP:4C80
TRANGROUP:4C80 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4C80
TRANGROUP:4C80
TRANGROUP:4C80 proc	       $P_get_max_ptr near     ; ...
TRANGROUP:4C80		       mov     al, [es:bx+1]   ; [es:bx+$P_PARMSX_BLK.$P_MaxP] ; get maxp
TRANGROUP:4C84		       xor     ah, ah	       ; ax = maxp
TRANGROUP:4C86		       inc     ax
TRANGROUP:4C87		       shl     ax, 1	       ; ax = (ax+1)*2
TRANGROUP:4C89		       add     bx, ax	       ; now bx	points to maxs
TRANGROUP:4C8B		       retn
TRANGROUP:4C8B endp	       $P_get_max_ptr
TRANGROUP:4C8B
TRANGROUP:4C8C ; ---------------------------------------------------------------------------
TRANGROUP:4C8C ; START OF FUNCTION CHUNK FOR sysparse
TRANGROUP:4C8C
TRANGROUP:4C8C $P_SW_Manager:			       ; ...
TRANGROUP:4C8C		       call    $P_get_max_ptr
TRANGROUP:4C8F		       mov     cl, [es:bx]
TRANGROUP:4C92		       xor     ch, ch
TRANGROUP:4C94		       jcxz    short $P_SW_Not_Found
TRANGROUP:4C96		       inc     bx
TRANGROUP:4C97
TRANGROUP:4C97 $P_SW_Mgr_Loop:			       ; ...
TRANGROUP:4C97		       push    bx
TRANGROUP:4C98		       mov     bx, [es:bx]     ; bx points to Switch CONTROL itself
TRANGROUP:4C9B		       call    $P_Chk_SW_Control
TRANGROUP:4C9E		       pop     bx
TRANGROUP:4C9F		       jnb     short $P_Return_to_Caller ;
TRANGROUP:4C9F					       ; if the	CONTROL	is for the switch, exit
TRANGROUP:4CA1		       inc     bx
TRANGROUP:4CA2		       inc     bx	       ; bx points to the next CONTROL
TRANGROUP:4CA3		       loop    $P_SW_Mgr_Loop  ; loop
TRANGROUP:4CA5
TRANGROUP:4CA5 $P_SW_Not_Found:			       ; ...
TRANGROUP:4CA5		       mov     [cs:$P_RC], 3   ; $P_Not_In_SW
TRANGROUP:4CAC		       jmp     short $P_Return_to_Caller
TRANGROUP:4CAE ; ---------------------------------------------------------------------------
TRANGROUP:4CAE
TRANGROUP:4CAE $P_Key_Manager:			       ; ...
TRANGROUP:4CAE		       call    $P_get_max_ptr
TRANGROUP:4CB1		       mov     al, [es:bx]
TRANGROUP:4CB4		       xor     ah, ah
TRANGROUP:4CB6		       shl     ax, 1
TRANGROUP:4CB8		       inc     ax
TRANGROUP:4CB9		       add     bx, ax
TRANGROUP:4CBB		       mov     cl, [es:bx]
TRANGROUP:4CBE		       xor     ch, ch
TRANGROUP:4CC0		       jcxz    short $P_Key_Not_Found
TRANGROUP:4CC2		       inc     bx
TRANGROUP:4CC3
TRANGROUP:4CC3 $P_Key_Mgr_Loop:			       ; ...
TRANGROUP:4CC3		       push    bx
TRANGROUP:4CC4		       mov     bx, [es:bx]
TRANGROUP:4CC7		       call    $P_Chk_Key_Control
TRANGROUP:4CCA		       pop     bx
TRANGROUP:4CCB		       jnb     short $P_Return_to_Caller
TRANGROUP:4CCD		       inc     bx
TRANGROUP:4CCE		       inc     bx
TRANGROUP:4CCF		       loop    $P_Key_Mgr_Loop
TRANGROUP:4CD1
TRANGROUP:4CD1 $P_Key_Not_Found:		       ; ...
TRANGROUP:4CD1		       mov     [cs:$P_RC], 4   ; $P_Not_In_Key
TRANGROUP:4CD8
TRANGROUP:4CD8 $P_Return_to_Caller:		       ; ...
TRANGROUP:4CD8		       pop     bp
TRANGROUP:4CD9		       pop     di
TRANGROUP:4CDA		       pop     bx
TRANGROUP:4CDB		       mov     cx, [cs:$P_ORDINAL] ; return next ordinal
TRANGROUP:4CE0		       mov     ax, [cs:$P_RC]  ; return	exit code
TRANGROUP:4CE4		       mov     si, [cs:$P_SI_Save] ; return next operand pointer
TRANGROUP:4CE9		       mov     dx, [cs:$P_DX]  ; return	result buffer address
TRANGROUP:4CEE		       mov     bl, [cs:$P_Terminator] ;	return delimiter code found
TRANGROUP:4CF3
TRANGROUP:4CF3 $P_Single_Exit:			       ; ...
TRANGROUP:4CF3		       clc
TRANGROUP:4CF4		       retn
TRANGROUP:4CF4 ; END OF	FUNCTION CHUNK FOR sysparse
TRANGROUP:4CF5
TRANGROUP:4CF5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4CF5
TRANGROUP:4CF5
TRANGROUP:4CF5 proc	       $P_Chk_Pos_Control near ; ...
TRANGROUP:4CF5		       push    ax
TRANGROUP:4CF6		       mov     ax, [es:bx]     ; [es:bx+$P_CONTROL_BLK.$P_Match_Flag]
TRANGROUP:4CF9		       test    ax, 2	       ; $P_Repeat ; repeat allowed ?
TRANGROUP:4CFC		       jnz     short $P_CPC00  ; then do not increment ORDINAL
TRANGROUP:4CFE		       inc     [cs:$P_ORDINAL] ; inc word [cs:$P_ORDINAL]
TRANGROUP:4D03
TRANGROUP:4D03 $P_CPC00:			       ; ...
TRANGROUP:4D03		       cmp     [byte ptr cs:si], 0 ; $P_NULL ; no data ?
TRANGROUP:4D07		       jnz     short $P_CPC01
TRANGROUP:4D09		       test    ax, 1	       ; $P_Optional
TRANGROUP:4D0C		       jnz     short $P_CPC02  ; optional
TRANGROUP:4D0E		       mov     [cs:$P_RC], 2   ; $P_Op_Missing ; no, then error
TRANGROUP:4D15		       jmp     short $P_CPC_Exit
TRANGROUP:4D17 ; ---------------------------------------------------------------------------
TRANGROUP:4D17
TRANGROUP:4D17 $P_CPC02:			       ; ...
TRANGROUP:4D17		       push    ax	       ; if it is optional return NULL
TRANGROUP:4D18		       mov     ax, 0FF03h      ; ($P_No_Tag<<8)+$P_String
TRANGROUP:4D1B		       call    $P_Fill_Result
TRANGROUP:4D1E		       pop     ax
TRANGROUP:4D1F		       jmp     short $P_CPC_Exit
TRANGROUP:4D21 ; ---------------------------------------------------------------------------
TRANGROUP:4D21
TRANGROUP:4D21 $P_CPC01:			       ; ...
TRANGROUP:4D21		       call    $P_Check_Match_Flags
TRANGROUP:4D24
TRANGROUP:4D24 $P_CPC_Exit:			       ; ...
TRANGROUP:4D24		       pop     ax
TRANGROUP:4D25		       retn
TRANGROUP:4D25 endp	       $P_Chk_Pos_Control
TRANGROUP:4D25
TRANGROUP:4D26
TRANGROUP:4D26 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4D26
TRANGROUP:4D26
TRANGROUP:4D26 proc	       $P_Chk_Key_Control near ; ...
TRANGROUP:4D26		       stc
TRANGROUP:4D27		       retn
TRANGROUP:4D27 endp	       $P_Chk_Key_Control
TRANGROUP:4D27
TRANGROUP:4D28
TRANGROUP:4D28 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4D28
TRANGROUP:4D28
TRANGROUP:4D28 proc	       $P_Search_KEYorSW near  ; ...
TRANGROUP:4D28		       push    bp
TRANGROUP:4D29		       push    cx
TRANGROUP:4D2A		       mov     cl, [es:bx+8]   ; [es:bx+$P_CONTROL_BLK.$P_nid]
TRANGROUP:4D2E		       xor     ch, ch
TRANGROUP:4D30		       jcxz    short $P_KEYorSW_Not_Found
TRANGROUP:4D32		       lea     bp, [bx+9]      ; [es:bx+$P_CONTROL_BLK.$P_KEYorSW]
TRANGROUP:4D35
TRANGROUP:4D35 $P_KEYorSW_Loop:			       ; ...
TRANGROUP:4D35		       call    $P_String_Comp  ; compare string	in buffer with the synonym
TRANGROUP:4D38		       jnb     short $P_KEYorSW_Found ;	If match, set it to synonym pointer
TRANGROUP:4D3A		       call    $P_MoveBP_NUL   ; else, bp points to the	next string
TRANGROUP:4D3D		       loop    $P_KEYorSW_Loop
TRANGROUP:4D3F
TRANGROUP:4D3F $P_KEYorSW_Not_Found:		       ; ...
TRANGROUP:4D3F		       stc
TRANGROUP:4D40		       jmp     short $P_KEYorSW_Exit
TRANGROUP:4D42 ; ---------------------------------------------------------------------------
TRANGROUP:4D42
TRANGROUP:4D42 $P_KEYorSW_Found:		       ; ...
TRANGROUP:4D42		       mov     [cs:$P_Found_SYNONYM], bp ; set synonym pointer
TRANGROUP:4D47		       clc
TRANGROUP:4D48
TRANGROUP:4D48 $P_KEYorSW_Exit:			       ; ...
TRANGROUP:4D48		       pop     cx
TRANGROUP:4D49		       pop     bp
TRANGROUP:4D4A		       retn
TRANGROUP:4D4A endp	       $P_Search_KEYorSW
TRANGROUP:4D4A
TRANGROUP:4D4B
TRANGROUP:4D4B ; =============== S U B R O U T I N E =======================================
TRANGROUP:4D4B
TRANGROUP:4D4B
TRANGROUP:4D4B proc	       $P_MoveBP_NUL near      ; ...
TRANGROUP:4D4B		       cmp     [byte ptr es:bp+0], 0 ; $P_NULL
TRANGROUP:4D50		       jz      short $P_MBP_Exit
TRANGROUP:4D52		       inc     bp
TRANGROUP:4D53		       jmp     short $P_MoveBP_NUL
TRANGROUP:4D55 ; ---------------------------------------------------------------------------
TRANGROUP:4D55
TRANGROUP:4D55 $P_MBP_Exit:			       ; ...
TRANGROUP:4D55		       inc     bp
TRANGROUP:4D56		       retn
TRANGROUP:4D56 endp	       $P_MoveBP_NUL
TRANGROUP:4D56
TRANGROUP:4D57
TRANGROUP:4D57 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4D57
TRANGROUP:4D57
TRANGROUP:4D57 proc	       $P_Chk_SW_Control near  ; ...
TRANGROUP:4D57		       or      [cs:$P_Flags2], 10h ; $P_SW_Cmp
TRANGROUP:4D5D		       call    $P_Search_KEYorSW
TRANGROUP:4D60		       jb      short $P_Chk_SW_Err0
TRANGROUP:4D62		       and     [cs:$P_Flags2], 0EFh ; 0FFh-$P_SW_Cmp
TRANGROUP:4D68		       push    ax
TRANGROUP:4D69		       mov     ax, [cs:$P_KEYorSW_Ptr]
TRANGROUP:4D6D		       sub     ax, si
TRANGROUP:4D6F		       add     [cs:$P_SaveSI_Cmpx], ax
TRANGROUP:4D74		       pop     ax
TRANGROUP:4D75		       mov     si, [cs:$P_KEYorSW_Ptr]
TRANGROUP:4D7A		       cmp     [byte ptr cs:si], 0 ; $P_NULL
TRANGROUP:4D7E		       jnz     short $P_CSW00
TRANGROUP:4D80		       cmp     [byte ptr cs:si-1], 3Ah ; ':' ; $P_Colon
TRANGROUP:4D85		       jnz     short $P_Chk_if_data_required
TRANGROUP:4D87		       mov     [cs:$P_RC], 9   ; $P_Syntax
TRANGROUP:4D8E		       jmp     short $P_Chk_SW_Exit
TRANGROUP:4D90 ; ---------------------------------------------------------------------------
TRANGROUP:4D90
TRANGROUP:4D90 $P_Chk_if_data_required:		       ; ...
TRANGROUP:4D90		       cmp     [word ptr es:bx], 0
TRANGROUP:4D94		       jz      short $P_Chk_SW_Exit
TRANGROUP:4D96		       test    [word ptr es:bx], 1 ; [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
TRANGROUP:4D9B		       jnz     short $P_Chk_SW_Exit
TRANGROUP:4D9D		       mov     [cs:$P_RC], 2   ; [cs:$P_RC],$P_Op_Missing
TRANGROUP:4DA4		       jmp     short $P_Chk_SW_Exit
TRANGROUP:4DA6 ; ---------------------------------------------------------------------------
TRANGROUP:4DA6
TRANGROUP:4DA6 $P_CSW00:			       ; ...
TRANGROUP:4DA6		       call    $P_Check_Match_Flags
TRANGROUP:4DA9		       clc
TRANGROUP:4DAA		       jmp     short $P_Chk_SW_Single_Exit
TRANGROUP:4DAC ; ---------------------------------------------------------------------------
TRANGROUP:4DAC
TRANGROUP:4DAC $P_Chk_SW_Err0:			       ; ...
TRANGROUP:4DAC		       stc
TRANGROUP:4DAD		       retn
TRANGROUP:4DAE ; ---------------------------------------------------------------------------
TRANGROUP:4DAE
TRANGROUP:4DAE $P_Chk_SW_Exit:			       ; ...
TRANGROUP:4DAE		       push    ax
TRANGROUP:4DAF		       mov     ax, 0FF03h      ; ($P_No_Tag<<8)+$P_String
TRANGROUP:4DB2		       call    $P_Fill_Result
TRANGROUP:4DB5		       pop     ax
TRANGROUP:4DB6		       clc
TRANGROUP:4DB7
TRANGROUP:4DB7 $P_Chk_SW_Single_Exit:		       ; ...
TRANGROUP:4DB7		       retn
TRANGROUP:4DB7 endp	       $P_Chk_SW_Control
TRANGROUP:4DB7
TRANGROUP:4DB8
TRANGROUP:4DB8 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4DB8
TRANGROUP:4DB8
TRANGROUP:4DB8 proc	       $P_Fill_Result near     ; ...
TRANGROUP:4DB8		       push    di
TRANGROUP:4DB9		       mov     di, [es:bx+4]   ; [es:bx+$P_CONTROL_BLK.$P_Result_Buf]
TRANGROUP:4DBD		       mov     [cs:$P_DX], di
TRANGROUP:4DC2		       mov     [es:di],	al     ; [es:di+$P_RESULT_BLK.$P_Type]
TRANGROUP:4DC5		       mov     [es:di+1], ah   ; [es:di+$P_RESULT_BLK.$P_Item_Tag]
TRANGROUP:4DC9		       push    ax
TRANGROUP:4DCA		       mov     ax, [cs:$P_Found_SYNONYM]
TRANGROUP:4DCE		       mov     [es:di+2], ax   ; [es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr]
TRANGROUP:4DD2		       pop     ax
TRANGROUP:4DD3		       cmp     al, 1	       ; $P_Number
TRANGROUP:4DD5		       jnz     short $P_RLT00
TRANGROUP:4DD7
TRANGROUP:4DD7 $P_RLT02:			       ; ...
TRANGROUP:4DD7		       mov     [es:di+4], dx   ; [es:di+$P_RESULT_BLK.$P_Picked_Val]
TRANGROUP:4DDB		       mov     [es:di+6], cx   ; [es:di+2+$P_RESULT_BLK.$P_Picked_Val]
TRANGROUP:4DDF		       jmp     short $P_RLT_Exit
TRANGROUP:4DE1 ; ---------------------------------------------------------------------------
TRANGROUP:4DE1
TRANGROUP:4DE1 $P_RLT00:			       ; ...
TRANGROUP:4DE1		       cmp     al, 2	       ; $P_List_Idx
TRANGROUP:4DE3		       jnz     short $P_RLT01
TRANGROUP:4DE5		       mov     [es:di+4], dx   ; [es:di+$P_RESULT_BLK.$P_Picked_Val]
TRANGROUP:4DE9		       jmp     short $P_RLT_Exit
TRANGROUP:4DEB ; ---------------------------------------------------------------------------
TRANGROUP:4DEB
TRANGROUP:4DEB $P_RLT01:			       ; ...
TRANGROUP:4DEB		       cmp     al, 7	       ; $P_Date_F
TRANGROUP:4DED		       jz      short $P_RLT02
TRANGROUP:4DEF		       cmp     al, 8	       ; $P_Time_F
TRANGROUP:4DF1		       jz      short $P_RLT02
TRANGROUP:4DF3		       cmp     al, 6	       ; $P_Drive
TRANGROUP:4DF5		       jnz     short $P_RLT03
TRANGROUP:4DF7		       mov     [es:di+4], dl   ; [es:di+$P_RESULT_BLK.$P_Picked_Val]
TRANGROUP:4DFB		       jmp     short $P_RLT_Exit
TRANGROUP:4DFD ; ---------------------------------------------------------------------------
TRANGROUP:4DFD
TRANGROUP:4DFD $P_RLT03:			       ; ...
TRANGROUP:4DFD		       cmp     al, 4	       ; $P_Complex
TRANGROUP:4DFF		       jnz     short $P_RLT05
TRANGROUP:4E01		       mov     ax, [cs:$P_SaveSI_Cmpx]
TRANGROUP:4E05		       inc     ax
TRANGROUP:4E06		       mov     [es:di+4], ax   ; [es:di+$P_RESULT_BLK.$P_Picked_Val]
TRANGROUP:4E0A		       mov     [word ptr es:di+6], ds ;	[es:di+2+$P_RESULT_BLK.$P_Picked_Val]
TRANGROUP:4E0E		       jmp     short $P_RLT_Exit
TRANGROUP:4E10 ; ---------------------------------------------------------------------------
TRANGROUP:4E10
TRANGROUP:4E10 $P_RLT05:			       ; ...
TRANGROUP:4E10		       mov     [es:di+4], si   ; [es:di+$P_RESULT_BLK.$P_Picked_Val]
TRANGROUP:4E14		       mov     [word ptr es:di+6], cs ;	[es:di+2+$P_RESULT_BLK.$P_Picked_Val]
TRANGROUP:4E18		       push    ax
TRANGROUP:4E19		       test    [byte ptr es:bx+2], 1 ; [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File
TRANGROUP:4E1E		       jz      short $P_RLT_CAP00
TRANGROUP:4E20		       mov     al, 4	       ; $P_DOSTBL_File
TRANGROUP:4E22		       jmp     short $P_RLT_CAP02
TRANGROUP:4E24 ; ---------------------------------------------------------------------------
TRANGROUP:4E24
TRANGROUP:4E24 $P_RLT_CAP00:			       ; ...
TRANGROUP:4E24		       test    [byte ptr es:bx+2], 2 ; [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char
TRANGROUP:4E29		       jz      short $P_RLT_CAP01
TRANGROUP:4E2B		       mov     al, 2	       ; $P_DOSTBL_Char
TRANGROUP:4E2D
TRANGROUP:4E2D $P_RLT_CAP02:			       ; ...
TRANGROUP:4E2D		       call    $P_Do_CAPS_String ; process CAPS	along the table
TRANGROUP:4E30
TRANGROUP:4E30 $P_RLT_CAP01:			       ; ...
TRANGROUP:4E30		       pop     ax
TRANGROUP:4E31		       test    [byte ptr es:bx+2], 10h ; [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon
TRANGROUP:4E36		       jz      short $P_RLT_Exit
TRANGROUP:4E38		       call    $P_Remove_Colon
TRANGROUP:4E3B
TRANGROUP:4E3B $P_RLT_Exit:			       ; ...
TRANGROUP:4E3B		       pop     di
TRANGROUP:4E3C		       retn
TRANGROUP:4E3C endp	       $P_Fill_Result
TRANGROUP:4E3C
TRANGROUP:4E3D
TRANGROUP:4E3D ; =============== S U B R O U T I N E =======================================
TRANGROUP:4E3D
TRANGROUP:4E3D
TRANGROUP:4E3D proc	       $P_Check_Match_Flags near ; ...
TRANGROUP:4E3D		       mov     [cs:$P_err_flag], 0 ; $P_NULL
TRANGROUP:4E43		       push    ax
TRANGROUP:4E44		       mov     ax, [es:bx]     ; [es:bx+$P_CONTROL_BLK.$P_Match_Flag]
TRANGROUP:4E47		       or      ax, ax
TRANGROUP:4E49		       jnz     short $P_Mat
TRANGROUP:4E4B		       push    ax
TRANGROUP:4E4C		       push    bx
TRANGROUP:4E4D		       push    dx
TRANGROUP:4E4E		       push    di
TRANGROUP:4E4F		       mov     [cs:$P_RC], 9   ; $P_Syntax
TRANGROUP:4E56		       mov     ax, 0FF03h      ; ($P_No_Tag<<8)+$P_String
TRANGROUP:4E59		       call    $P_Fill_Result
TRANGROUP:4E5C		       pop     di
TRANGROUP:4E5D		       pop     dx
TRANGROUP:4E5E		       pop     bx
TRANGROUP:4E5F		       pop     ax
TRANGROUP:4E60		       jmp     short $P_Bridge
TRANGROUP:4E62 ; ---------------------------------------------------------------------------
TRANGROUP:4E62
TRANGROUP:4E62 $P_Mat:				       ; ...
TRANGROUP:4E62		       test    ax, 1000h       ; $P_Date_S
TRANGROUP:4E65		       jz      short $P_Match02
TRANGROUP:4E67		       mov     [cs:$P_RC], 0   ; $P_No_Error
TRANGROUP:4E6E		       call    $P_Date_Format
TRANGROUP:4E71		       cmp     [cs:$P_RC], 9   ; $P_Syntax
TRANGROUP:4E77		       jnz     short $P_Bridge
TRANGROUP:4E79
TRANGROUP:4E79 $P_Match02:			       ; ...
TRANGROUP:4E79		       test    ax, 800h	       ; $P_Time_S
TRANGROUP:4E7C		       jz      short $P_Match03
TRANGROUP:4E7E		       mov     [cs:$P_RC], 0
TRANGROUP:4E85		       call    $P_Time_Format
TRANGROUP:4E88		       cmp     [cs:$P_RC], 9
TRANGROUP:4E8E		       jnz     short $P_Bridge
TRANGROUP:4E90		       jmp     short $P_Match03
TRANGROUP:4E92 ; ---------------------------------------------------------------------------
TRANGROUP:4E92
TRANGROUP:4E92 $P_Bridge:			       ; ...
TRANGROUP:4E92		       jmp     short $P_Match_Exit
TRANGROUP:4E94 ; ---------------------------------------------------------------------------
TRANGROUP:4E94		       nop
TRANGROUP:4E95
TRANGROUP:4E95 $P_Match03:			       ; ...
TRANGROUP:4E95		       test    ax, 8000h       ; $P_Num_Val
TRANGROUP:4E98		       jz      short $P_Match04
TRANGROUP:4E9A		       mov     [cs:$P_RC], 0
TRANGROUP:4EA1		       call    $P_Value
TRANGROUP:4EA4		       cmp     [cs:$P_RC], 9
TRANGROUP:4EAA		       jnz     short $P_Match_Exit
TRANGROUP:4EAC
TRANGROUP:4EAC $P_Match04:			       ; ...
TRANGROUP:4EAC		       test    ax, 4000h       ; $P_SNum_Val
TRANGROUP:4EAF		       jz      short $P_Match05
TRANGROUP:4EB1		       mov     [cs:$P_RC], 0
TRANGROUP:4EB8		       call    $P_SValue
TRANGROUP:4EBB		       cmp     [cs:$P_RC], 9
TRANGROUP:4EC1		       jnz     short $P_Match_Exit
TRANGROUP:4EC3
TRANGROUP:4EC3 $P_Match05:			       ; ...
TRANGROUP:4EC3		       test    ax, 100h	       ; $P_Drv_Only
TRANGROUP:4EC6		       jz      short $P_Match06
TRANGROUP:4EC8		       mov     [cs:$P_RC], 0
TRANGROUP:4ECF		       call    $P_File_Format
TRANGROUP:4ED2		       call    $P_Drive_Format
TRANGROUP:4ED5		       cmp     [cs:$P_RC], 9
TRANGROUP:4EDB		       jnz     short $P_Match_Exit
TRANGROUP:4EDD
TRANGROUP:4EDD $P_Match06:			       ; ...
TRANGROUP:4EDD		       test    ax, 200h	       ; $P_File_Spc
TRANGROUP:4EE0		       jz      short $P_Match07
TRANGROUP:4EE2		       mov     [cs:$P_RC], 0
TRANGROUP:4EE9		       call    $P_File_Format
TRANGROUP:4EEC		       cmp     [cs:$P_RC], 9
TRANGROUP:4EF2		       jnz     short $P_Match_Exit
TRANGROUP:4EF4
TRANGROUP:4EF4 $P_Match07:			       ; ...
TRANGROUP:4EF4		       test    ax, 2000h       ; $P_Simple_S
TRANGROUP:4EF7		       jz      short $P_Match_Exit
TRANGROUP:4EF9		       mov     [cs:$P_RC], 0   ; $P_No_Error
TRANGROUP:4F00		       call    $P_Simple_String
TRANGROUP:4F03
TRANGROUP:4F03 $P_Match_Exit:			       ; ...
TRANGROUP:4F03		       cmp     [cs:$P_err_flag], 1 ; $P_error_filespec
TRANGROUP:4F09		       jnz     short $P_Match2_Exit
TRANGROUP:4F0B		       cmp     [cs:$P_RC], 0   ; $P_No_Error
TRANGROUP:4F11		       jnz     short $P_Match2_Exit
TRANGROUP:4F13		       mov     [cs:$P_RC], 9   ; $P_Syntax
TRANGROUP:4F1A
TRANGROUP:4F1A $P_Match2_Exit:			       ; ...
TRANGROUP:4F1A		       pop     ax
TRANGROUP:4F1B		       retn
TRANGROUP:4F1B endp	       $P_Check_Match_Flags
TRANGROUP:4F1B
TRANGROUP:4F1C
TRANGROUP:4F1C ; =============== S U B R O U T I N E =======================================
TRANGROUP:4F1C
TRANGROUP:4F1C
TRANGROUP:4F1C proc	       $P_Remove_Colon near    ; ...
TRANGROUP:4F1C		       push    ax
TRANGROUP:4F1D		       push    si
TRANGROUP:4F1E
TRANGROUP:4F1E $P_RCOL_Loop:			       ; ...
TRANGROUP:4F1E		       mov     al, [cs:si]
TRANGROUP:4F21		       or      al, al
TRANGROUP:4F23		       jz      short $P_RCOL_Exit
TRANGROUP:4F25		       cmp     al, 3Ah ; ':'   ; $P_Colon
TRANGROUP:4F27		       jnz     short $P_RCOL00
TRANGROUP:4F29		       cmp     [byte ptr cs:si+1], 0 ; $P_NULL
TRANGROUP:4F2E		       jnz     short $P_RCOL00
TRANGROUP:4F30		       mov     [byte ptr cs:si], 0
TRANGROUP:4F34		       jmp     short $P_RCOL_Exit
TRANGROUP:4F36 ; ---------------------------------------------------------------------------
TRANGROUP:4F36
TRANGROUP:4F36 $P_RCOL00:			       ; ...
TRANGROUP:4F36		       call    $P_Chk_DBCS
TRANGROUP:4F39		       jnb     short $P_RCOL01
TRANGROUP:4F3B		       inc     si
TRANGROUP:4F3C
TRANGROUP:4F3C $P_RCOL01:			       ; ...
TRANGROUP:4F3C		       inc     si
TRANGROUP:4F3D		       jmp     short $P_RCOL_Loop
TRANGROUP:4F3F ; ---------------------------------------------------------------------------
TRANGROUP:4F3F
TRANGROUP:4F3F $P_RCOL_Exit:			       ; ...
TRANGROUP:4F3F		       pop     si
TRANGROUP:4F40		       pop     ax
TRANGROUP:4F41		       retn
TRANGROUP:4F41 endp	       $P_Remove_Colon
TRANGROUP:4F41
TRANGROUP:4F42
TRANGROUP:4F42 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4F42
TRANGROUP:4F42
TRANGROUP:4F42 proc	       $P_Do_CAPS_String near  ; ...
TRANGROUP:4F42		       push    si
TRANGROUP:4F43		       push    dx
TRANGROUP:4F44		       mov     dl, al
TRANGROUP:4F46
TRANGROUP:4F46 $P_DCS_Loop:			       ; ...
TRANGROUP:4F46		       mov     al, [cs:si]
TRANGROUP:4F49		       call    $P_Chk_DBCS
TRANGROUP:4F4C		       jb      short $P_DCS00
TRANGROUP:4F4E		       or      al, al
TRANGROUP:4F50		       jz      short $P_DCS_Exit
TRANGROUP:4F52		       call    $P_Do_CAPS_Char
TRANGROUP:4F55		       mov     [cs:si],	al
TRANGROUP:4F58		       jmp     short $P_DCS01
TRANGROUP:4F5A ; ---------------------------------------------------------------------------
TRANGROUP:4F5A
TRANGROUP:4F5A $P_DCS00:			       ; ...
TRANGROUP:4F5A		       inc     si
TRANGROUP:4F5B
TRANGROUP:4F5B $P_DCS01:			       ; ...
TRANGROUP:4F5B		       inc     si
TRANGROUP:4F5C		       jmp     short $P_DCS_Loop
TRANGROUP:4F5E ; ---------------------------------------------------------------------------
TRANGROUP:4F5E
TRANGROUP:4F5E $P_DCS_Exit:			       ; ...
TRANGROUP:4F5E		       pop     dx
TRANGROUP:4F5F		       pop     si
TRANGROUP:4F60		       retn
TRANGROUP:4F60 endp	       $P_Do_CAPS_String
TRANGROUP:4F60
TRANGROUP:4F61
TRANGROUP:4F61 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4F61
TRANGROUP:4F61
TRANGROUP:4F61 proc	       $P_Do_CAPS_Char near    ; ...
TRANGROUP:4F61		       cmp     al, 80h	       ; $P_ASCII80
TRANGROUP:4F63		       jnb     short $P_DCC_Go
TRANGROUP:4F65		       cmp     al, 'a'
TRANGROUP:4F67		       jb      short $P_CAPS_Ret
TRANGROUP:4F69		       cmp     al, 'z'
TRANGROUP:4F6B		       ja      short $P_CAPS_Ret
TRANGROUP:4F6D		       and     al, 0DFh	       ; $P_Make_Upper
TRANGROUP:4F6F		       retn
TRANGROUP:4F70 ; ---------------------------------------------------------------------------
TRANGROUP:4F70
TRANGROUP:4F70 $P_DCC_Go:			       ; ...
TRANGROUP:4F70		       push    bx
TRANGROUP:4F71		       push    es
TRANGROUP:4F72		       push    di
TRANGROUP:4F73		       lea     di, [$P_File_CAP_Ptr]
TRANGROUP:4F77		       cmp     dl, 4	       ; $P_DOSTBL_File
TRANGROUP:4F7A		       jz      short $P_DCC00
TRANGROUP:4F7C		       lea     di, [$P_Char_CAP_Ptr]
TRANGROUP:4F80
TRANGROUP:4F80 $P_DCC00:			       ; ...
TRANGROUP:4F80		       cmp     [cs:di],	dl
TRANGROUP:4F83		       jz      short $P_DCC01
TRANGROUP:4F85		       push    ax
TRANGROUP:4F86		       push    cx
TRANGROUP:4F87		       push    dx
TRANGROUP:4F88		       push    cs
TRANGROUP:4F89		       pop     es
TRANGROUP:4F8A		       assume es:TRANGROUP
TRANGROUP:4F8A		       xchg    ax, dx
TRANGROUP:4F8B		       mov     ah, 65h	       ; $P_DOS_Get_TBL
TRANGROUP:4F8D		       mov     bx, 0FFFFh      ; -1 ; $P_DOSTBL_Def
TRANGROUP:4F90		       mov     cx, 5	       ; $P_DOSTBL_BL
TRANGROUP:4F93		       mov     dx, bx	       ; $P_DOSTBL_Def
TRANGROUP:4F95		       int     21h	       ; DOS - 4.x internal - COUNTRY-DEPENDENT	FILENAME CAPITALIZATION
TRANGROUP:4F95					       ; AL = function -
TRANGROUP:4F97		       pop     dx
TRANGROUP:4F98		       pop     cx
TRANGROUP:4F99		       pop     ax
TRANGROUP:4F9A
TRANGROUP:4F9A $P_DCC01:			       ; ...
TRANGROUP:4F9A		       les     bx, [cs:di+1]
TRANGROUP:4F9E		       assume es:nothing
TRANGROUP:4F9E		       inc     bx
TRANGROUP:4F9F		       inc     bx
TRANGROUP:4FA0		       sub     al, 80h	       ; $P_ASCII80
TRANGROUP:4FA2		       xlat    [byte ptr es:bx]
TRANGROUP:4FA4		       pop     di
TRANGROUP:4FA5		       pop     es
TRANGROUP:4FA6		       pop     bx
TRANGROUP:4FA7
TRANGROUP:4FA7 $P_CAPS_Ret:			       ; ...
TRANGROUP:4FA7		       retn
TRANGROUP:4FA7 endp	       $P_Do_CAPS_Char
TRANGROUP:4FA7
TRANGROUP:4FA8
TRANGROUP:4FA8 ; =============== S U B R O U T I N E =======================================
TRANGROUP:4FA8
TRANGROUP:4FA8
TRANGROUP:4FA8 proc	       $P_SValue near	       ; ...
TRANGROUP:4FA8		       push    ax
TRANGROUP:4FA9		       or      [cs:$P_Flags2], 80h ; $P_Signed
TRANGROUP:4FAF		       and     [cs:$P_Flags2], 0FDh ; 0FFh-$P_Neg
TRANGROUP:4FB5		       mov     al, [cs:si]
TRANGROUP:4FB8		       cmp     al, '+'         ; $P_Plus
TRANGROUP:4FBA		       jz      short $P_SVal00
TRANGROUP:4FBC		       cmp     al, '-'         ; $P_Plus
TRANGROUP:4FBE		       jnz     short $P_Sval01
TRANGROUP:4FC0		       or      [cs:$P_Flags2], 2 ; $P_Neg
TRANGROUP:4FC6
TRANGROUP:4FC6 $P_SVal00:			       ; ...
TRANGROUP:4FC6		       inc     si
TRANGROUP:4FC7
TRANGROUP:4FC7 $P_Sval01:			       ; ...
TRANGROUP:4FC7		       call    $P_Value
TRANGROUP:4FCA		       pop     ax
TRANGROUP:4FCB		       retn
TRANGROUP:4FCB endp	       $P_SValue
TRANGROUP:4FCB
TRANGROUP:4FCC
TRANGROUP:4FCC ; =============== S U B R O U T I N E =======================================
TRANGROUP:4FCC
TRANGROUP:4FCC
TRANGROUP:4FCC proc	       $P_Value	near	       ; ...
TRANGROUP:4FCC		       push    ax
TRANGROUP:4FCD		       push    cx
TRANGROUP:4FCE		       push    dx
TRANGROUP:4FCF		       push    si
TRANGROUP:4FD0		       xor     cx, cx
TRANGROUP:4FD2		       xor     dx, dx
TRANGROUP:4FD4		       push    bx
TRANGROUP:4FD5
TRANGROUP:4FD5 $P_Value_Loop:			       ; ...
TRANGROUP:4FD5		       mov     al, [cs:si]
TRANGROUP:4FD8		       or      al, al
TRANGROUP:4FDA		       jz      short $P_Value00
TRANGROUP:4FDC		       call    $P_0099
TRANGROUP:4FDF		       jb      short $P_Value_Err0
TRANGROUP:4FE1		       xor     ah, ah
TRANGROUP:4FE3		       mov     bp, ax
TRANGROUP:4FE5		       call    $P_Check_OVF_shl32
TRANGROUP:4FE8		       mov     bx, dx
TRANGROUP:4FEA		       mov     ax, cx
TRANGROUP:4FEC		       call    $P_Check_OVF_shl32
TRANGROUP:4FEF		       call    $P_Check_OVF_shl32
TRANGROUP:4FF2		       add     dx, bx
TRANGROUP:4FF4		       adc     cx, ax
TRANGROUP:4FF6		       call    $P_Check_OVF_@
TRANGROUP:4FF9		       add     dx, bp
TRANGROUP:4FFB		       adc     cx, 0
TRANGROUP:4FFE		       call    $P_Check_OVF_@
TRANGROUP:5001		       inc     si
TRANGROUP:5002		       jmp     short $P_Value_Loop
TRANGROUP:5002 endp	       $P_Value
TRANGROUP:5002
TRANGROUP:5004 ; ---------------------------------------------------------------------------
TRANGROUP:5004
TRANGROUP:5004 $P_Check_OVF_shl32:		       ; ...
TRANGROUP:5004		       shl     dx, 1
TRANGROUP:5006		       rcl     cx, 1
TRANGROUP:5008
TRANGROUP:5008 $P_Check_OVF_@:			       ; ...
TRANGROUP:5008		       call    $P_Check_OVF
TRANGROUP:500B		       jb      short $P_Value_Err0_@
TRANGROUP:500D		       retn
TRANGROUP:500E ; ---------------------------------------------------------------------------
TRANGROUP:500E
TRANGROUP:500E $P_Value_Err0_@:			       ; ...
TRANGROUP:500E		       inc     sp
TRANGROUP:500F		       inc     sp
TRANGROUP:5010
TRANGROUP:5010 $P_Value_Err0:			       ; ...
TRANGROUP:5010		       pop     bx
TRANGROUP:5011		       jmp     $P_Value_Err
TRANGROUP:5014 ; ---------------------------------------------------------------------------
TRANGROUP:5014
TRANGROUP:5014 $P_Value00:			       ; ...
TRANGROUP:5014		       pop     bx
TRANGROUP:5015		       test    [cs:$P_Flags2], 2 ; $P_Neg
TRANGROUP:501B		       jz      short $P_Value01
TRANGROUP:501D		       not     cx
TRANGROUP:501F		       not     dx
TRANGROUP:5021		       add     dx, 1
TRANGROUP:5024		       adc     cx, 0
TRANGROUP:5027
TRANGROUP:5027 $P_Value01:			       ; ...
TRANGROUP:5027		       mov     si, [es:bx+6]   ; [es:bx+$P_CONTROL_BLK.$P_Value_List]
TRANGROUP:502B		       mov     al, [es:si]
TRANGROUP:502E		       cmp     al, 0	       ; $P_nval_None
TRANGROUP:5030		       jnz     short $P_Value02
TRANGROUP:5032		       mov     ax, 0FF01h      ; ($P_No_Tag<<8)+$P_Number
TRANGROUP:5035		       jmp     short $P_Value_Exit
TRANGROUP:5037 ; ---------------------------------------------------------------------------
TRANGROUP:5037		       nop
TRANGROUP:5038
TRANGROUP:5038 $P_Value02:			       ; ...
TRANGROUP:5038		       inc     si
TRANGROUP:5039		       mov     al, [es:si]
TRANGROUP:503C		       cmp     al, 0	       ; $P_No_nrng
TRANGROUP:503E		       jz      short $P_Value_Err
TRANGROUP:5040		       inc     si
TRANGROUP:5041
TRANGROUP:5041 $P_Val02_Loop:			       ; ...
TRANGROUP:5041		       test    [cs:$P_Flags2], 80h ; $P_Signed
TRANGROUP:5047		       jnz     short $P_Val02_Sign
TRANGROUP:5049		       cmp     cx, [es:si+3]   ; [es:si+$P_VAL_LIST.$P_Val_XH]
TRANGROUP:504D		       jb      short $P_Val02_Next
TRANGROUP:504F		       ja      short $P_Val_In
TRANGROUP:5051		       cmp     dx, [es:si+1]   ; [es:si+$P_VAL_LIST.$P_Val_XL]
TRANGROUP:5055		       jb      short $P_Val02_Next
TRANGROUP:5057
TRANGROUP:5057 $P_Val_In:			       ; ...
TRANGROUP:5057		       cmp     cx, [es:si+7]   ; [es:si+$P_VAL_LIST.$P_Val_YH]
TRANGROUP:505B		       ja      short $P_Val02_Next
TRANGROUP:505D		       jb      short $P_Val_Found
TRANGROUP:505F		       cmp     dx, [es:si+5]   ; [es:si+$P_VAL_LIST.$P_Val_YL]
TRANGROUP:5063		       ja      short $P_Val02_Next
TRANGROUP:5065		       jmp     short $P_Val_Found
TRANGROUP:5067 ; ---------------------------------------------------------------------------
TRANGROUP:5067
TRANGROUP:5067 $P_Val02_Sign:			       ; ...
TRANGROUP:5067		       cmp     cx, [es:si+3]   ; [es:si+$P_VAL_LIST.$P_Val_XH]
TRANGROUP:506B		       jl      short $P_Val02_Next
TRANGROUP:506D		       jg      short $P_SVal_In
TRANGROUP:506F		       cmp     dx, [es:si+1]   ; [es:si+$P_VAL_LIST.$P_Val_XL]
TRANGROUP:5073		       jl      short $P_Val02_Next
TRANGROUP:5075
TRANGROUP:5075 $P_SVal_In:			       ; ...
TRANGROUP:5075		       cmp     cx, [es:si+7]   ; [es:si+$P_VAL_LIST.$P_Val_YH]
TRANGROUP:5079		       jg      short $P_Val02_Next
TRANGROUP:507B		       jl      short $P_Val_Found
TRANGROUP:507D		       cmp     dx, [es:si+5]   ; [es:si+$P_VAL_LIST.$P_Val_YL]
TRANGROUP:5081		       jg      short $P_Val02_Next
TRANGROUP:5083		       jmp     short $P_Val_Found
TRANGROUP:5085 ; ---------------------------------------------------------------------------
TRANGROUP:5085
TRANGROUP:5085 $P_Val02_Next:			       ; ...
TRANGROUP:5085		       add     si, 9	       ; $P_Len_Range
TRANGROUP:5088		       dec     al
TRANGROUP:508A		       jnz     short $P_Val02_Loop
TRANGROUP:508C		       mov     [cs:$P_RC], 6   ; $P_Out_Of_Range
TRANGROUP:5093		       mov     ax, 0FF01h      ; ($P_No_Tag<<8)+$P_Number
TRANGROUP:5096		       jmp     short $P_Value_Exit
TRANGROUP:5098 ; ---------------------------------------------------------------------------
TRANGROUP:5098
TRANGROUP:5098 $P_Val_Found:			       ; ...
TRANGROUP:5098		       mov     al, 1	       ; $P_Number
TRANGROUP:509A		       mov     ah, [es:si]
TRANGROUP:509D		       jmp     short $P_Value_Exit
TRANGROUP:509F ; ---------------------------------------------------------------------------
TRANGROUP:509F
TRANGROUP:509F $P_Value_Err:			       ; ...
TRANGROUP:509F		       mov     [cs:$P_RC], 9   ; $P_Syntax
TRANGROUP:50A6		       mov     ax, 0FF03h      ; ($P_No_Tag<<8)+$P_String
TRANGROUP:50A9
TRANGROUP:50A9 $P_Value_Exit:			       ; ...
TRANGROUP:50A9		       call    $P_Fill_Result
TRANGROUP:50AC		       pop     si
TRANGROUP:50AD		       pop     dx
TRANGROUP:50AE		       pop     cx
TRANGROUP:50AF		       pop     ax
TRANGROUP:50B0		       retn
TRANGROUP:50B1
TRANGROUP:50B1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:50B1
TRANGROUP:50B1
TRANGROUP:50B1 proc	       $P_Check_OVF near       ; ...
TRANGROUP:50B1		       pushf
TRANGROUP:50B2		       test    [cs:$P_Flags2], 2 ; $P_Neg ; is it negative value ?
TRANGROUP:50B8		       jnz     short $P_COVF   ; if no,	check overflow
TRANGROUP:50BA		       popf
TRANGROUP:50BB		       retn
TRANGROUP:50BC ; ---------------------------------------------------------------------------
TRANGROUP:50BC
TRANGROUP:50BC $P_COVF:				       ; ...
TRANGROUP:50BC		       popf
TRANGROUP:50BD		       jo      short $P_COVF00 ; CY=1 means overflow
TRANGROUP:50BF		       clc		       ; CY=0 means no overflow
TRANGROUP:50C0		       retn
TRANGROUP:50C1 ; ---------------------------------------------------------------------------
TRANGROUP:50C1
TRANGROUP:50C1 $P_COVF00:			       ; ...
TRANGROUP:50C1		       stc		       ; CY=1 means overflow
TRANGROUP:50C2		       retn
TRANGROUP:50C2 endp	       $P_Check_OVF
TRANGROUP:50C2
TRANGROUP:50C3
TRANGROUP:50C3 ; =============== S U B R O U T I N E =======================================
TRANGROUP:50C3
TRANGROUP:50C3
TRANGROUP:50C3 proc	       $P_0099 near	       ; ...
TRANGROUP:50C3		       cmp     al, 30h ; '0'   ; Make ASCII 0-9 to Binary 0-9
TRANGROUP:50C5		       jb      short $P_0099Err
TRANGROUP:50C7		       cmp     al, 39h ; '9'
TRANGROUP:50C9		       ja      short $P_0099Err
TRANGROUP:50CB		       sub     al, 30h ; '0'
TRANGROUP:50CD		       clc
TRANGROUP:50CE		       retn
TRANGROUP:50CF ; ---------------------------------------------------------------------------
TRANGROUP:50CF
TRANGROUP:50CF $P_0099Err:			       ; ...
TRANGROUP:50CF		       stc
TRANGROUP:50D0		       retn
TRANGROUP:50D0 endp	       $P_0099
TRANGROUP:50D0
TRANGROUP:50D1
TRANGROUP:50D1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:50D1
TRANGROUP:50D1
TRANGROUP:50D1 proc	       $P_Simple_String	near   ; ...
TRANGROUP:50D1		       push    ax
TRANGROUP:50D2		       push    bx
TRANGROUP:50D3		       push    dx
TRANGROUP:50D4		       push    di
TRANGROUP:50D5		       mov     di, [es:bx+6]   ; [es:bx+$P_CONTROL_BLK.$P_Value_List]
TRANGROUP:50D9		       mov     al, [es:di]     ; get nval
TRANGROUP:50DC		       or      al, al
TRANGROUP:50DE		       jnz     short $P_Sim00
TRANGROUP:50E0		       mov     ah, 0FFh	       ; $P_No_Tag
TRANGROUP:50E2		       jmp     short $P_Sim_Exit
TRANGROUP:50E4 ; ---------------------------------------------------------------------------
TRANGROUP:50E4
TRANGROUP:50E4 $P_Sim00:			       ; ...
TRANGROUP:50E4		       cmp     al, 3	       ; $P_nval_String
TRANGROUP:50E6		       jnz     short $P_Sim01
TRANGROUP:50E8		       inc     di
TRANGROUP:50E9		       mov     al, [es:di]
TRANGROUP:50EC		       mov     ah, 9	       ; $P_Len_Range
TRANGROUP:50EE		       mul     ah	       ; Skip nrng field
TRANGROUP:50F0		       inc     ax	       ; ax = (nrng*9)+1
TRANGROUP:50F1		       add     di, ax
TRANGROUP:50F3		       mov     al, [es:di]     ; get nnval
TRANGROUP:50F6		       mov     ah, 5	       ; $P_Len_Value
TRANGROUP:50F8		       mul     ah	       ; Skip nnval field
TRANGROUP:50FA		       inc     ax	       ; ax = (nnval*5)+1
TRANGROUP:50FB		       add     di, ax
TRANGROUP:50FD		       mov     al, [es:di]     ; get nstrval
TRANGROUP:5100		       inc     di
TRANGROUP:5101		       inc     di	       ; di points to 1st string in list
TRANGROUP:5102
TRANGROUP:5102 $P_Sim_Loop:			       ; ...
TRANGROUP:5102		       mov     bp, [es:di]
TRANGROUP:5105		       call    $P_String_Comp
TRANGROUP:5108		       jnb     short $P_Sim_Found
TRANGROUP:510A		       add     di, 3	       ; $P_Len_String
TRANGROUP:510D		       dec     al	       ; loop nstval times in AL
TRANGROUP:510F		       jnz     short $P_Sim_Loop
TRANGROUP:5111		       mov     [cs:$P_RC], 8   ; $P_Not_In_Str
TRANGROUP:5118		       mov     ah, 0FFh	       ; $P_No_Tag
TRANGROUP:511A		       jmp     short $P_Sim_Exit
TRANGROUP:511C ; ---------------------------------------------------------------------------
TRANGROUP:511C
TRANGROUP:511C $P_Sim_Found:			       ; ...
TRANGROUP:511C		       mov     ah, [es:di-1]   ; set item_tag
TRANGROUP:5120		       mov     al, 2	       ; $P_List_Idx
TRANGROUP:5122		       mov     dx, [es:di]
TRANGROUP:5125		       jmp     short $P_Sim_Exit0
TRANGROUP:5127 ; ---------------------------------------------------------------------------
TRANGROUP:5127
TRANGROUP:5127 $P_Sim01:			       ; ...
TRANGROUP:5127		       mov     [cs:$P_RC], 9   ; $P_Syntax
TRANGROUP:512E		       mov     ah, 0FFh	       ; $P_No_Tag
TRANGROUP:5130
TRANGROUP:5130 $P_Sim_Exit:			       ; ...
TRANGROUP:5130		       mov     al, 3	       ; $P_String
TRANGROUP:5132
TRANGROUP:5132 $P_Sim_Exit0:			       ; ...
TRANGROUP:5132		       call    $P_Fill_Result
TRANGROUP:5135		       pop     di
TRANGROUP:5136		       pop     dx
TRANGROUP:5137		       pop     bx
TRANGROUP:5138		       pop     ax
TRANGROUP:5139		       retn
TRANGROUP:5139 endp	       $P_Simple_String
TRANGROUP:5139
TRANGROUP:513A
TRANGROUP:513A ; =============== S U B R O U T I N E =======================================
TRANGROUP:513A
TRANGROUP:513A
TRANGROUP:513A proc	       $P_String_Comp near     ; ...
TRANGROUP:513A		       push    ax
TRANGROUP:513B		       push    bp
TRANGROUP:513C		       push    dx
TRANGROUP:513D		       push    si
TRANGROUP:513E		       mov     dl, 2	       ; $P_DOSTBL_Char
TRANGROUP:5140
TRANGROUP:5140 $P_SCOM_Loop:			       ; ...
TRANGROUP:5140		       mov     al, [cs:si]
TRANGROUP:5143		       call    $P_Chk_DBCS
TRANGROUP:5146		       jb      short $P_SCOM00
TRANGROUP:5148		       call    $P_Do_CAPS_Char
TRANGROUP:514B		       test    [cs:$P_Flags2], 8
TRANGROUP:5151		       jz      short $P_SCOM04
TRANGROUP:5153		       cmp     al, 3Dh ; '='   ; $P_Keyword
TRANGROUP:5155		       jnz     short $P_SCOM03
TRANGROUP:5157		       cmp     [byte ptr es:bp+1], 0 ; $P_NULL
TRANGROUP:515C		       jnz     short $P_SCOM_Differ
TRANGROUP:515E		       jmp     short $P_SCOM05
TRANGROUP:5160 ; ---------------------------------------------------------------------------
TRANGROUP:5160
TRANGROUP:5160 $P_SCOM04:			       ; ...
TRANGROUP:5160		       test    [cs:$P_Flags2], 10h ; $P_SW_Cmp
TRANGROUP:5166		       jz      short $P_SCOM03
TRANGROUP:5168		       cmp     al, 3Ah ; ':'
TRANGROUP:516A		       jnz     short $P_SCOM03
TRANGROUP:516C		       cmp     [byte ptr es:bp+0], 0
TRANGROUP:5171		       jnz     short $P_SCOM_Differ
TRANGROUP:5173
TRANGROUP:5173 $P_SCOM05:			       ; ...
TRANGROUP:5173		       inc     si
TRANGROUP:5174		       jmp     short $P_SCOM_Same
TRANGROUP:5176 ; ---------------------------------------------------------------------------
TRANGROUP:5176
TRANGROUP:5176 $P_SCOM03:			       ; ...
TRANGROUP:5176		       cmp     al, [es:bp+0]
TRANGROUP:517A		       jnz     short $P_SCOM_Differ0
TRANGROUP:517C		       or      al, al
TRANGROUP:517E		       jz      short $P_SCOM_Same
TRANGROUP:5180		       inc     si
TRANGROUP:5181		       inc     bp
TRANGROUP:5182		       jmp     short $P_SCOM01
TRANGROUP:5184 ; ---------------------------------------------------------------------------
TRANGROUP:5184
TRANGROUP:5184 $P_SCOM00:			       ; ...
TRANGROUP:5184		       cmp     al, [es:bp+0]
TRANGROUP:5188		       jnz     short $P_SCOM_Differ
TRANGROUP:518A		       inc     si
TRANGROUP:518B		       mov     al, [cs:si]
TRANGROUP:518E		       inc     bp
TRANGROUP:518F		       cmp     al, [es:bp+0]
TRANGROUP:5193		       jnz     short $P_SCOM_Differ
TRANGROUP:5195		       inc     si
TRANGROUP:5196		       inc     bp
TRANGROUP:5197
TRANGROUP:5197 $P_SCOM01:			       ; ...
TRANGROUP:5197		       jmp     short $P_SCOM_Loop
TRANGROUP:5199 ; ---------------------------------------------------------------------------
TRANGROUP:5199
TRANGROUP:5199 $P_SCOM_Differ0:			       ; ...
TRANGROUP:5199		       test    [cs:$P_Flags2], 40h ; $P_SW
TRANGROUP:519F		       jz      short $P_not_applicable
TRANGROUP:51A1		       test    [word ptr es:bx+2], 20h ; [es:bx+$P_CONTROL_BLK.$P_Function_Flag],
TRANGROUP:51A1					       ; $P_colon_is_not_necessary
TRANGROUP:51A7		       jz      short $P_not_applicable
TRANGROUP:51A9		       cmp     [byte ptr es:bp+0], 0 ; $P_NULL
TRANGROUP:51AE		       jz      short $P_SCOM_Same
TRANGROUP:51B0
TRANGROUP:51B0 $P_not_applicable:		       ; ...
TRANGROUP:51B0		       test    [word ptr es:bx], 10h ; [es:bx+$P_CONTROL_BLK.$P_Match_Flag],
TRANGROUP:51B0					       ; $P_Ig_Colon
TRANGROUP:51B5		       jz      short $P_SCOM_Differ
TRANGROUP:51B7		       cmp     al, 3Ah ; ':'   ; $P_Colon
TRANGROUP:51B9		       jnz     short $P_SCOM02
TRANGROUP:51BB		       cmp     [byte ptr es:bp+0], 0 ; $P_NULL
TRANGROUP:51C0		       jnz     short $P_SCOM_Differ
TRANGROUP:51C2		       jmp     short $P_SCOM_Same
TRANGROUP:51C4 ; ---------------------------------------------------------------------------
TRANGROUP:51C4
TRANGROUP:51C4 $P_SCOM02:			       ; ...
TRANGROUP:51C4		       cmp     al, 0	       ; $P_NULL
TRANGROUP:51C6		       jnz     short $P_SCOM_Differ
TRANGROUP:51C8		       cmp     [byte ptr es:bp+0], 3Ah ; ':' ; $P_Colon
TRANGROUP:51CD		       jz      short $P_SCOM_Same
TRANGROUP:51CF
TRANGROUP:51CF $P_SCOM_Differ:			       ; ...
TRANGROUP:51CF		       stc
TRANGROUP:51D0		       jmp     short $P_SCOM_Exit
TRANGROUP:51D2 ; ---------------------------------------------------------------------------
TRANGROUP:51D2
TRANGROUP:51D2 $P_SCOM_Same:			       ; ...
TRANGROUP:51D2		       mov     [cs:$P_KEYorSW_Ptr], si
TRANGROUP:51D7		       clc
TRANGROUP:51D8
TRANGROUP:51D8 $P_SCOM_Exit:			       ; ...
TRANGROUP:51D8		       pop     si
TRANGROUP:51D9		       pop     dx
TRANGROUP:51DA		       pop     bp
TRANGROUP:51DB		       pop     ax
TRANGROUP:51DC		       retn
TRANGROUP:51DC endp	       $P_String_Comp
TRANGROUP:51DC
TRANGROUP:51DD
TRANGROUP:51DD ; =============== S U B R O U T I N E =======================================
TRANGROUP:51DD
TRANGROUP:51DD
TRANGROUP:51DD proc	       $P_Date_Format near     ; ...
TRANGROUP:51DD		       push    ax
TRANGROUP:51DE		       push    cx
TRANGROUP:51DF		       push    dx
TRANGROUP:51E0		       push    si
TRANGROUP:51E1		       push    bx
TRANGROUP:51E2		       push    si
TRANGROUP:51E3		       call    $P_Set_CDI      ; set country dependent information before process
TRANGROUP:51E6		       pop     si
TRANGROUP:51E7		       mov     ax, 0FFFFh
TRANGROUP:51EA		       mov     [cs:$P_1st_Val],	ax
TRANGROUP:51EE		       mov     [cs:$P_2nd_Val],	ax
TRANGROUP:51F2		       mov     [cs:$P_3rd_Val],	ax
TRANGROUP:51F6		       call    $P_Get_DecNum
TRANGROUP:51F9		       jb      short $P_DateF_Err0
TRANGROUP:51FB		       mov     [cs:$P_1st_Val],	ax
TRANGROUP:51FF		       or      bl, bl	       ; end of	line ?
TRANGROUP:5201		       jz      short $P_DateF_YMD ; yes
TRANGROUP:5203		       call    $P_Get_DecNum
TRANGROUP:5206		       jb      short $P_DateF_Error
TRANGROUP:5208		       mov     [cs:$P_2nd_Val],	ax
TRANGROUP:520C		       or      bl, bl
TRANGROUP:520E		       jz      short $P_DateF_YMD
TRANGROUP:5210		       call    $P_Get_DecNum
TRANGROUP:5213
TRANGROUP:5213 $P_DateF_Err0:			       ; ...
TRANGROUP:5213		       jb      short $P_DateF_Error
TRANGROUP:5215		       mov     [cs:$P_3rd_Val],	ax
TRANGROUP:5219		       or      bl, bl	       ; end of	line ?
TRANGROUP:521B		       jnz     short $P_DateF_Error ; no, error
TRANGROUP:521D
TRANGROUP:521D $P_DateF_YMD:			       ; ...
TRANGROUP:521D		       mov     bx, [cs:$P_Country_Info]	; [cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]
TRANGROUP:5222		       cmp     bx, 2	       ; $P_Date_YMD
TRANGROUP:5225		       jz      short $P_DateF00
TRANGROUP:5227		       mov     ax, [cs:$P_1st_Val]
TRANGROUP:522B		       or      ah, ah
TRANGROUP:522D		       jnz     short $P_DateF_Error
TRANGROUP:522F		       mov     cl, al
TRANGROUP:5231		       mov     ax, [cs:$P_2nd_Val]
TRANGROUP:5235		       or      ah, ah
TRANGROUP:5237		       jnz     short $P_DateF_Error
TRANGROUP:5239		       mov     ch, al
TRANGROUP:523B		       mov     dx, [cs:$P_3rd_Val]
TRANGROUP:5240		       cmp     bx, 1	       ; $P_Date_DMY
TRANGROUP:5243		       jnz     short $P_DateF01
TRANGROUP:5245		       xchg    ch, cl
TRANGROUP:5247
TRANGROUP:5247 $P_DateF01:			       ; ...
TRANGROUP:5247		       jmp     short $P_DateF02
TRANGROUP:5249 ; ---------------------------------------------------------------------------
TRANGROUP:5249
TRANGROUP:5249 $P_DateF00:			       ; ...
TRANGROUP:5249		       mov     dx, [cs:$P_1st_Val] ; set year
TRANGROUP:524E		       mov     ax, [cs:$P_2nd_Val]
TRANGROUP:5252		       or      ah, ah	       ; if overflow, error
TRANGROUP:5254		       jnz     short $P_DateF_Error
TRANGROUP:5256		       mov     cl, al	       ; set month
TRANGROUP:5258		       mov     ax, [cs:$P_3rd_Val]
TRANGROUP:525C		       or      ah, ah	       ; if overflow, error
TRANGROUP:525E		       jnz     short $P_DateF_Error
TRANGROUP:5260		       mov     ch, al	       ; set date
TRANGROUP:5262
TRANGROUP:5262 $P_DateF02:			       ; ...
TRANGROUP:5262		       cmp     dx, 100
TRANGROUP:5265		       jnb     short $P_DateF03
TRANGROUP:5267		       cmp     dx, 80
TRANGROUP:526A		       jnb     short $P_DateF02_@
TRANGROUP:526C		       add     dx, 100
TRANGROUP:526F
TRANGROUP:526F $P_DateF02_@:			       ; ...
TRANGROUP:526F		       add     dx, 1900
TRANGROUP:5273
TRANGROUP:5273 $P_DateF03:			       ; ...
TRANGROUP:5273		       pop     bx
TRANGROUP:5274		       pop     si
TRANGROUP:5275		       mov     ax, 0FF07h      ; ($P_No_Tag<<8)+$P_Date_F
TRANGROUP:5278		       call    $P_Fill_Result
TRANGROUP:527B		       jmp     short $P_Date_Format_Exit
TRANGROUP:527D ; ---------------------------------------------------------------------------
TRANGROUP:527D
TRANGROUP:527D $P_DateF_Error:			       ; ...
TRANGROUP:527D		       pop     bx
TRANGROUP:527E		       pop     si
TRANGROUP:527F		       mov     ax, 0FF03h      ; ($P_No_Tag<<8)+$P_String
TRANGROUP:5282		       call    $P_Fill_Result
TRANGROUP:5285		       mov     [cs:$P_RC], 9   ; $P_Syntax ; indicate syntax error
TRANGROUP:528C
TRANGROUP:528C $P_Date_Format_Exit:		       ; ...
TRANGROUP:528C		       pop     dx
TRANGROUP:528D		       pop     cx
TRANGROUP:528E		       pop     ax
TRANGROUP:528F		       retn
TRANGROUP:528F endp	       $P_Date_Format
TRANGROUP:528F
TRANGROUP:5290
TRANGROUP:5290 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5290
TRANGROUP:5290
TRANGROUP:5290 proc	       $P_Set_CDI near	       ; ...
TRANGROUP:5290		       lea     si, [$P_Country_Info]
TRANGROUP:5294		       cmp     [word ptr cs:si], 0FFFFh	; -1 ; $P_NeedToBeRead
TRANGROUP:5298		       jnz     short $P_Set_CDI_Exit
TRANGROUP:529A		       push    ds
TRANGROUP:529B		       push    dx
TRANGROUP:529C		       push    ax
TRANGROUP:529D		       push    cs
TRANGROUP:529E		       pop     ds
TRANGROUP:529F		       assume ds:TRANGROUP
TRANGROUP:529F		       mov     ax, 3800h       ; $P_DOS_Get_CDI
TRANGROUP:52A2		       mov     dx, si
TRANGROUP:52A4		       int     21h	       ; DOS - 2+ - GET	COUNTRY-DEPENDENT INFORMATION
TRANGROUP:52A4					       ; get current-country info
TRANGROUP:52A4					       ; DS:DX -> buffer for returned info
TRANGROUP:52A6		       pop     ax
TRANGROUP:52A7		       pop     dx
TRANGROUP:52A8		       pop     ds
TRANGROUP:52A9		       assume ds:nothing
TRANGROUP:52A9
TRANGROUP:52A9 $P_Set_CDI_Exit:			       ; ...
TRANGROUP:52A9		       retn
TRANGROUP:52A9 endp	       $P_Set_CDI
TRANGROUP:52A9
TRANGROUP:52AA
TRANGROUP:52AA ; =============== S U B R O U T I N E =======================================
TRANGROUP:52AA
TRANGROUP:52AA
TRANGROUP:52AA proc	       $P_Get_DecNum near      ; ...
TRANGROUP:52AA		       push    cx	       ; Read a	character code from psdata_seg:SI
TRANGROUP:52AA					       ; until specified delimiter or NULL encountered.
TRANGROUP:52AA					       ; And make a decimal number.
TRANGROUP:52AB		       push    dx
TRANGROUP:52AC		       xor     cx, cx
TRANGROUP:52AE
TRANGROUP:52AE $P_GetNum_Loop:			       ; ...
TRANGROUP:52AE		       mov     al, [cs:si]
TRANGROUP:52B1		       or      al, al
TRANGROUP:52B3		       jz      short $P_GetNum00
TRANGROUP:52B5		       cmp     [cs:$P_Got_Time], 0
TRANGROUP:52BB		       jz      short $P_Do_Date_Delims
TRANGROUP:52BD		       cmp     bl, 1
TRANGROUP:52C0		       jnz     short $P_Do_Time_Delim1
TRANGROUP:52C2		       cmp     al, ':'         ; $P_Colon
TRANGROUP:52C4		       jz      short $P_GetNum01
TRANGROUP:52C6
TRANGROUP:52C6 $P_Do_Time_Delim1:		       ; ...
TRANGROUP:52C6		       cmp     al, '.'         ; $P_Period
TRANGROUP:52C8		       jz      short $P_GetNum01
TRANGROUP:52CA		       jmp     short $P_Neither_Delims
TRANGROUP:52CC ; ---------------------------------------------------------------------------
TRANGROUP:52CC
TRANGROUP:52CC $P_Do_Date_Delims:		       ; ...
TRANGROUP:52CC		       cmp     al, '-'         ; $P_Minus
TRANGROUP:52CE		       jz      short $P_GetNum01
TRANGROUP:52D0		       cmp     al, '/'         ; $P_Slash
TRANGROUP:52D2		       jz      short $P_GetNum01
TRANGROUP:52D4		       cmp     al, '.'         ; $P_Period
TRANGROUP:52D6		       jz      short $P_GetNum01
TRANGROUP:52D8
TRANGROUP:52D8 $P_Neither_Delims:		       ; ...
TRANGROUP:52D8		       call    $P_0099
TRANGROUP:52DB		       jb      short $P_GetNum_Exit
TRANGROUP:52DD		       mov     ah, 0
TRANGROUP:52DF		       xchg    ax, cx
TRANGROUP:52E0		       mov     dx, 10
TRANGROUP:52E3		       mul     dx	       ; ax = ax * 10
TRANGROUP:52E5		       or      dx, dx
TRANGROUP:52E7		       jnz     short $P_GetNum02
TRANGROUP:52E9		       add     ax, cx
TRANGROUP:52EB		       jb      short $P_GetNum_Exit
TRANGROUP:52ED		       xchg    ax, cx
TRANGROUP:52EE		       inc     si
TRANGROUP:52EF		       jmp     short $P_GetNum_Loop
TRANGROUP:52F1 ; ---------------------------------------------------------------------------
TRANGROUP:52F1
TRANGROUP:52F1 $P_GetNum00:			       ; ...
TRANGROUP:52F1		       mov     bl, al
TRANGROUP:52F3
TRANGROUP:52F3 $P_GetNum_Exit_clc:		       ; ...
TRANGROUP:52F3		       clc
TRANGROUP:52F4		       jmp     short $P_GetNum_Exit
TRANGROUP:52F6 ; ---------------------------------------------------------------------------
TRANGROUP:52F6
TRANGROUP:52F6 $P_GetNum01:			       ; ...
TRANGROUP:52F6		       inc     si
TRANGROUP:52F7		       jmp     short $P_GetNum_Exit_clc
TRANGROUP:52F9 ; ---------------------------------------------------------------------------
TRANGROUP:52F9
TRANGROUP:52F9 $P_GetNum02:			       ; ...
TRANGROUP:52F9		       stc
TRANGROUP:52FA
TRANGROUP:52FA $P_GetNum_Exit:			       ; ...
TRANGROUP:52FA		       xchg    ax, cx
TRANGROUP:52FB		       pop     dx
TRANGROUP:52FC		       pop     cx
TRANGROUP:52FD		       retn
TRANGROUP:52FD endp	       $P_Get_DecNum
TRANGROUP:52FD
TRANGROUP:52FE
TRANGROUP:52FE ; =============== S U B R O U T I N E =======================================
TRANGROUP:52FE
TRANGROUP:52FE
TRANGROUP:52FE proc	       $P_Time_Format near     ; ...
TRANGROUP:52FE		       push    ax
TRANGROUP:52FF		       push    cx
TRANGROUP:5300		       push    dx
TRANGROUP:5301		       push    si
TRANGROUP:5302		       push    bx
TRANGROUP:5303		       push    si
TRANGROUP:5304		       call    $P_Set_CDI
TRANGROUP:5307		       test    [byte ptr cs:si+11h], 1 ; [cs:si+$P_CDI.$P_CDI_TimeF],1 ; 24 hour system	?
TRANGROUP:530C		       pop     si
TRANGROUP:530D		       jnz     short $P_TimeF00	; yes
TRANGROUP:530F		       call    $P_Time_2412    ; this routine handle "am" "pm"
TRANGROUP:5312
TRANGROUP:5312 $P_TimeF00:			       ; ...
TRANGROUP:5312		       xor     ax, ax
TRANGROUP:5314		       mov     [cs:$P_1st_Val],	ax
TRANGROUP:5318		       mov     [cs:$P_2nd_Val],	ax
TRANGROUP:531C		       mov     [cs:$P_3rd_Val],	ax
TRANGROUP:5320		       mov     [cs:$P_4th_Val],	ax
TRANGROUP:5324		       mov     [cs:$P_Got_Time], 1
TRANGROUP:532A		       mov     bl, 1	       ; $P_colon_period ; flag, indicates use of delimiters
TRANGROUP:532A					       ; between hours,	minutes,seconds
TRANGROUP:532C		       call    $P_Get_DecNum
TRANGROUP:532F		       jb      short $P_TimeF_Err0
TRANGROUP:5331		       mov     [cs:$P_1st_Val],	ax
TRANGROUP:5335		       or      bl, bl
TRANGROUP:5337		       jz      short $P_TimeF_Rlt
TRANGROUP:5339		       call    $P_Get_DecNum
TRANGROUP:533C		       jb      short $P_TimeF_Err0
TRANGROUP:533E		       mov     [cs:$P_2nd_Val],	ax
TRANGROUP:5342		       or      bl, bl	       ; end of	line ?
TRANGROUP:5344		       jz      short $P_TimeF_Rlt ; yes
TRANGROUP:5346		       mov     bl, 2	       ; $P_period_only	; flag,	which to decimal separator
TRANGROUP:5348		       call    $P_Get_DecNum
TRANGROUP:534B		       jb      short $P_TimeF_Err0
TRANGROUP:534D		       mov     [cs:$P_3rd_Val],	ax
TRANGROUP:5351		       or      bl, bl	       ; end of	line ?
TRANGROUP:5353		       jnz     short $P_Time_4 ; no
TRANGROUP:5355		       test    [cs:$P_Flags], 2	; $P_Time_Again	; has time parse been repeated?
TRANGROUP:535B		       jnz     short $P_TimeF_Rlt ; yes, this is really	the end	of line
TRANGROUP:535D		       mov     si, [cs:$P_SI_Save] ; get where parser quit in command line
TRANGROUP:5362		       cmp     [byte ptr si-1],	',' ; $P_Comma
TRANGROUP:5366		       jnz     short $P_TimeF_Rlt
TRANGROUP:5368		       mov     [byte ptr si-1],	'.' ; $P_Period
TRANGROUP:536C		       mov     [word ptr cs:$P_Flags], 0 ; clear all internal flags
TRANGROUP:5373		       or      [cs:$P_Flags], 2	; $P_Time_Again	; indicate TIME
TRANGROUP:5379		       mov     cx, [cs:$P_ORIG_ORD] ; original ordinal from cx
TRANGROUP:537E		       mov     sp, [cs:$P_ORIG_STACK] ;	original value of stack	from sp
TRANGROUP:5383		       mov     si, [cs:$P_ORIG_SI] ; original start parse pointer from si
TRANGROUP:5388		       jmp     $P_Redo_Time    ; go try	TIME again
TRANGROUP:538B ; ---------------------------------------------------------------------------
TRANGROUP:538B
TRANGROUP:538B $P_Time_4:			       ; ...
TRANGROUP:538B		       call    $P_Get_DecNum
TRANGROUP:538E
TRANGROUP:538E $P_TimeF_Err0:			       ; ...
TRANGROUP:538E		       jb      short $P_TimeF_Error
TRANGROUP:5390		       mov     [cs:$P_4th_Val],	ax
TRANGROUP:5394		       or      bl, bl	       ; After hundredth, no data allowed
TRANGROUP:5396		       jnz     short $P_TimeF_Error ; if some, then error
TRANGROUP:5398
TRANGROUP:5398 $P_TimeF_Rlt:			       ; ...
TRANGROUP:5398		       mov     ax, [cs:$P_1st_Val]
TRANGROUP:539C		       or      ah, ah	       ; if overflow then error
TRANGROUP:539E		       jnz     short $P_TimeF_Error
TRANGROUP:53A0		       test    [cs:$P_Flags], 1	; if "am" specified
TRANGROUP:53A6		       jz      short $P_Time_notAM ; skip if no	"AM" specified
TRANGROUP:53A8		       cmp     al, 12
TRANGROUP:53AA		       ja      short $P_TimeF_Error ; error if "AM" on more than noon
TRANGROUP:53AC		       jnz     short $P_Time_notAM
TRANGROUP:53AE		       xor     al, al	       ; for noon exactly, set hour to zero
TRANGROUP:53B0
TRANGROUP:53B0 $P_Time_notAM:			       ; ...
TRANGROUP:53B0		       test    [cs:$P_Flags2], 4 ; $P_Time12 ; if 12 hour system and "PM" is specified
TRANGROUP:53B6		       jz      short $P_TimeSkip00 ; then
TRANGROUP:53B8		       cmp     al, 12	       ; if 12:00 o'clock already
TRANGROUP:53BA		       jz      short $P_TimeSkip00
TRANGROUP:53BC		       add     al, 12	       ; add 12	hours to make it afternoon
TRANGROUP:53BE		       jb      short $P_TimeF_Error
TRANGROUP:53C0		       cmp     al, 24	       ; after adding 12, now cannot be	>24
TRANGROUP:53C2		       ja      short $P_TimeF_Error ; if too big, error
TRANGROUP:53C4
TRANGROUP:53C4 $P_TimeSkip00:			       ; ...
TRANGROUP:53C4		       mov     dl, al	       ; set hour
TRANGROUP:53C6		       mov     ax, [cs:$P_2nd_Val]
TRANGROUP:53CA		       or      ah, ah	       ; if overflow then error
TRANGROUP:53CC		       jnz     short $P_TimeF_Error
TRANGROUP:53CE		       mov     dh, al	       ; set minute
TRANGROUP:53D0		       mov     ax, [cs:$P_3rd_Val]
TRANGROUP:53D4		       or      ah, ah
TRANGROUP:53D6		       jnz     short $P_TimeF_Error
TRANGROUP:53D8		       mov     cl, al	       ; set second
TRANGROUP:53DA		       mov     ax, [cs:$P_4th_Val]
TRANGROUP:53DE		       or      ah, ah
TRANGROUP:53E0		       jnz     short $P_TimeF_Error
TRANGROUP:53E2		       mov     ch, al	       ; set hundredth
TRANGROUP:53E4		       pop     bx
TRANGROUP:53E5		       pop     si
TRANGROUP:53E6		       mov     ax, 0FF08h      ; ($P_No_Tag<<8)+$P_Time_F
TRANGROUP:53E9		       call    $P_Fill_Result
TRANGROUP:53EC		       jmp     short $P_Time_Format_Exit
TRANGROUP:53EE ; ---------------------------------------------------------------------------
TRANGROUP:53EE
TRANGROUP:53EE $P_TimeF_Error:			       ; ...
TRANGROUP:53EE		       pop     bx
TRANGROUP:53EF		       pop     si
TRANGROUP:53F0		       mov     ax, 0FF03h      ; ($P_No_Tag<<8)+$P_String
TRANGROUP:53F3		       call    $P_Fill_Result
TRANGROUP:53F6		       mov     [cs:$P_RC], 9   ; $P_Syntax
TRANGROUP:53FD
TRANGROUP:53FD $P_Time_Format_Exit:		       ; ...
TRANGROUP:53FD		       mov     [cs:$P_Got_Time], 0
TRANGROUP:5403		       pop     dx
TRANGROUP:5404		       pop     cx
TRANGROUP:5405		       pop     ax
TRANGROUP:5406		       retn
TRANGROUP:5406 endp	       $P_Time_Format
TRANGROUP:5406
TRANGROUP:5407
TRANGROUP:5407 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5407
TRANGROUP:5407
TRANGROUP:5407 proc	       $P_Time_2412 near       ; ...
TRANGROUP:5407		       push    ax
TRANGROUP:5408		       push    si
TRANGROUP:5409
TRANGROUP:5409 $P_T12_Loop:			       ; ...
TRANGROUP:5409		       mov     al, [cs:si]
TRANGROUP:540C		       inc     si
TRANGROUP:540D		       or      al, al
TRANGROUP:540F		       jnz     short $P_T12_Loop
TRANGROUP:5411		       mov     al, [cs:si-2]
TRANGROUP:5415		       or      al, 20h	       ; $P_Make_Lower
TRANGROUP:5417		       cmp     al, 'p'         ; only "p" of "pm" ?
TRANGROUP:5419		       jz      short $P_T1200  ; yes
TRANGROUP:541B		       cmp     al, 'a'         ; only "a" of "am" ?
TRANGROUP:541D		       jz      short $P_T1201  ; yes
TRANGROUP:541F		       cmp     al, 'm'         ; "m" of "am" or "pm"
TRANGROUP:5421		       jnz     short $P_T12_Exit
TRANGROUP:5423		       dec     si
TRANGROUP:5424		       mov     al, [cs:si-2]
TRANGROUP:5428		       or      al, 20h	       ; $P_Make_Lower
TRANGROUP:542A		       cmp     al, 'p'         ; "p" of "pm" ?
TRANGROUP:542C		       jz      short $P_T1200  ; yes
TRANGROUP:542E		       cmp     al, 'a'         ; "a" of "am" ?
TRANGROUP:5430		       jz      short $P_T1201  ; yes
TRANGROUP:5432		       jmp     short $P_T12_Exit
TRANGROUP:5434 ; ---------------------------------------------------------------------------
TRANGROUP:5434
TRANGROUP:5434 $P_T1200:			       ; ...
TRANGROUP:5434		       or      [cs:$P_Flags2], 4 ; $P_Time12 ; flag "PM" found
TRANGROUP:543A		       jmp     short $P_Tclr_chr
TRANGROUP:543C ; ---------------------------------------------------------------------------
TRANGROUP:543C
TRANGROUP:543C $P_T1201:			       ; ...
TRANGROUP:543C		       or      [cs:$P_Flags], 1	; $P_Time12AM ;	flag "AM" found
TRANGROUP:5442
TRANGROUP:5442 $P_Tclr_chr:			       ; ...
TRANGROUP:5442		       mov     [byte ptr cs:si-2], 0 ; $P_NULL ; null out special char
TRANGROUP:5447
TRANGROUP:5447 $P_T12_Exit:			       ; ...
TRANGROUP:5447		       pop     si
TRANGROUP:5448		       pop     ax
TRANGROUP:5449		       retn
TRANGROUP:5449 endp	       $P_Time_2412
TRANGROUP:5449
TRANGROUP:544A
TRANGROUP:544A ; =============== S U B R O U T I N E =======================================
TRANGROUP:544A
TRANGROUP:544A
TRANGROUP:544A proc	       $P_File_Format near     ; ...
TRANGROUP:544A		       push    ax
TRANGROUP:544B		       push    di
TRANGROUP:544C		       push    si
TRANGROUP:544D		       mov     di, [cs:$P_SaveSI_Cmpx] ; get user buffer address
TRANGROUP:5452		       mov     al, [cs:si]     ; load character
TRANGROUP:5455		       or      al, al	       ; end of	line ?
TRANGROUP:5457		       jz      short $P_FileF_Err ; if yes, error exit
TRANGROUP:5459		       call    $P_FileSp_Chk   ; else, check if	file special character
TRANGROUP:545C		       jnz     short $P_FileF03	; if yes
TRANGROUP:545E		       mov     [cs:$P_err_flag], 1 ; $P_error_filespec ; bad char.
TRANGROUP:5464		       pop     si
TRANGROUP:5465		       mov     [byte ptr cs:si], 0 ; $P_NULL
TRANGROUP:5469		       pop     di
TRANGROUP:546A		       jmp     short $P_FileF02
TRANGROUP:546C ; ---------------------------------------------------------------------------
TRANGROUP:546C
TRANGROUP:546C $P_FileF_Err:			       ; ...
TRANGROUP:546C		       pop     si
TRANGROUP:546D		       mov     [byte ptr cs:si], 0 ; $P_NULL
TRANGROUP:5471		       pop     di
TRANGROUP:5472		       test    [word ptr es:bx], 1 ; [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
TRANGROUP:5477		       jnz     short $P_FileF02	; optional
TRANGROUP:5479		       mov     [cs:$P_RC], 2   ; $P_Op_Missing
TRANGROUP:5480		       jmp     short $P_FileF02
TRANGROUP:5482 ; ---------------------------------------------------------------------------
TRANGROUP:5482
TRANGROUP:5482 $P_FileF03:			       ; ...
TRANGROUP:5482		       pop     ax	       ; discard save si
TRANGROUP:5483		       push    si	       ; save new si
TRANGROUP:5484
TRANGROUP:5484 $P_FileF_Loop1:			       ; ...
TRANGROUP:5484		       mov     al, [cs:si]     ; load character	(not special char)
TRANGROUP:5487		       or      al, al	       ; end of	line ?
TRANGROUP:5489		       jz      short $P_FileF_RLT ; yes
TRANGROUP:548B		       call    $P_FileSp_Chk   ; File special character	?
TRANGROUP:548E		       jz      short $P_FileF00
TRANGROUP:5490		       call    $P_Chk_DBCS     ; no, then DBCS ?
TRANGROUP:5493		       jnb     short $P_FileF01
TRANGROUP:5495		       inc     di	       ; if yes, skip next byte
TRANGROUP:5496		       inc     si
TRANGROUP:5497
TRANGROUP:5497 $P_FileF01:			       ; ...
TRANGROUP:5497		       inc     di
TRANGROUP:5498		       inc     si
TRANGROUP:5499		       jmp     short $P_FileF_Loop1
TRANGROUP:549B ; ---------------------------------------------------------------------------
TRANGROUP:549B
TRANGROUP:549B $P_FileF00:			       ; ...
TRANGROUP:549B		       mov     [cs:$P_Terminator], al
TRANGROUP:549F		       mov     [byte ptr cs:si], 0 ; $P_NULL ; update end of string
TRANGROUP:54A3		       inc     di
TRANGROUP:54A4		       mov     [cs:$P_SI_Save],	di ; update next pointer in command line
TRANGROUP:54A9
TRANGROUP:54A9 $P_FileF_RLT:			       ; ...
TRANGROUP:54A9		       pop     si
TRANGROUP:54AA		       pop     di
TRANGROUP:54AB
TRANGROUP:54AB $P_FileF02:			       ; ...
TRANGROUP:54AB		       pop     ax
TRANGROUP:54AC		       test    ax, 200h	       ; $P_File_Spc
TRANGROUP:54AF		       jz      short $P_Drv_Only_Exit
TRANGROUP:54B1		       push    ax
TRANGROUP:54B2		       mov     ax, 0FF05h      ; ($P_No_Tag<<8)+$P_File_Spec
TRANGROUP:54B5		       call    $P_Fill_Result
TRANGROUP:54B8		       pop     ax
TRANGROUP:54B9
TRANGROUP:54B9 $P_Drv_Only_Exit:		       ; ...
TRANGROUP:54B9		       retn
TRANGROUP:54B9 endp	       $P_File_Format
TRANGROUP:54B9
TRANGROUP:54BA
TRANGROUP:54BA ; =============== S U B R O U T I N E =======================================
TRANGROUP:54BA
TRANGROUP:54BA
TRANGROUP:54BA proc	       $P_FileSp_Chk near      ; ...
TRANGROUP:54BA		       push    bx
TRANGROUP:54BB		       push    cx
TRANGROUP:54BC		       lea     bx, [$P_FileSp_Char] ; "[]|<>+=;\""
TRANGROUP:54C0		       mov     cx, 9	       ; $P_FileSp_Len
TRANGROUP:54C3
TRANGROUP:54C3 $P_FileSp_Loop:			       ; ...
TRANGROUP:54C3		       cmp     al, [cs:bx]
TRANGROUP:54C6		       jz      short $P_FileSp_Exit
TRANGROUP:54C8		       inc     bx
TRANGROUP:54C9		       loop    $P_FileSp_Loop
TRANGROUP:54CB		       inc     cx
TRANGROUP:54CC
TRANGROUP:54CC $P_FileSp_Exit:			       ; ...
TRANGROUP:54CC		       pop     cx
TRANGROUP:54CD		       pop     bx
TRANGROUP:54CE		       retn
TRANGROUP:54CE endp	       $P_FileSp_Chk
TRANGROUP:54CE
TRANGROUP:54CF
TRANGROUP:54CF ; =============== S U B R O U T I N E =======================================
TRANGROUP:54CF
TRANGROUP:54CF
TRANGROUP:54CF proc	       $P_Drive_Format near    ; ...
TRANGROUP:54CF		       push    ax
TRANGROUP:54D0		       push    dx
TRANGROUP:54D1		       mov     al, [cs:si]
TRANGROUP:54D4		       or      al, al
TRANGROUP:54D6		       jz      short $P_Drv_Exit
TRANGROUP:54D8		       call    $P_Chk_DBCS
TRANGROUP:54DB		       jb      short $P_Drv_Err
TRANGROUP:54DD		       cmp     [word ptr cs:si+1], ':' ; $P_Colon
TRANGROUP:54E2		       jz      short $P_DrvF00
TRANGROUP:54E4		       test    [word ptr es:bx], 10h ; $P_Ig_Colon
TRANGROUP:54E9		       jz      short $P_Drv_Err
TRANGROUP:54EB		       cmp     [byte ptr cs:si+1], 0 ; $P_NULL
TRANGROUP:54F0		       jnz     short $P_Drv_Err
TRANGROUP:54F2
TRANGROUP:54F2 $P_DrvF00:			       ; ...
TRANGROUP:54F2		       or      al, 20h	       ; $P_Make_Lower
TRANGROUP:54F4		       cmp     al, 61h ; 'a'
TRANGROUP:54F6		       jb      short $P_Drv_Err
TRANGROUP:54F8		       cmp     al, 7Ah ; 'z'
TRANGROUP:54FA		       ja      short $P_Drv_Err
TRANGROUP:54FC		       sub     al, 60h ; '`'   ; "a"-1
TRANGROUP:54FE		       mov     dl, al
TRANGROUP:5500		       mov     ah, 0FFh	       ; $P_No_Tag
TRANGROUP:5502		       mov     al, 6	       ; $P_Drive
TRANGROUP:5504		       call    $P_Fill_Result
TRANGROUP:5507		       jmp     short $P_Drv_Exit
TRANGROUP:5509 ; ---------------------------------------------------------------------------
TRANGROUP:5509
TRANGROUP:5509 $P_Drv_Err:			       ; ...
TRANGROUP:5509		       mov     [cs:$P_RC], 9   ; $P_Syntax
TRANGROUP:5510
TRANGROUP:5510 $P_Drv_Exit:			       ; ...
TRANGROUP:5510		       pop     dx
TRANGROUP:5511		       pop     ax
TRANGROUP:5512		       retn
TRANGROUP:5512 endp	       $P_Drive_Format
TRANGROUP:5512
TRANGROUP:5513
TRANGROUP:5513 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5513
TRANGROUP:5513
TRANGROUP:5513 proc	       $P_Skip_Delim near      ; ...
TRANGROUP:5513		       lodsb
TRANGROUP:5514		       call    $P_Chk_EOL
TRANGROUP:5517		       jz      short $P_Skip_Delim_CY
TRANGROUP:5519		       call    $P_Chk_Delim
TRANGROUP:551C		       jnz     short $P_Skip_Delim_NCY
TRANGROUP:551E		       test    [cs:$P_Flags2], 20h ; $P_Extra
TRANGROUP:5524		       jz      short $P_Skip_Delim
TRANGROUP:5526		       test    [cs:$P_Flags2], 41h ; $P_SW+$P_equ
TRANGROUP:552C		       jz      short $P_Exit_At_Extra
TRANGROUP:552E		       dec     si
TRANGROUP:552F		       jmp     short $P_Exit_At_Extra
TRANGROUP:5531 ; ---------------------------------------------------------------------------
TRANGROUP:5531
TRANGROUP:5531 $P_Skip_Delim_CY:		       ; ...
TRANGROUP:5531		       stc		       ; indicate EOL
TRANGROUP:5532		       jmp     short $P_Skip_Delim_Exit
TRANGROUP:5534 ; ---------------------------------------------------------------------------
TRANGROUP:5534
TRANGROUP:5534 $P_Skip_Delim_NCY:		       ; ...
TRANGROUP:5534		       clc		       ; indicate non delim
TRANGROUP:5535
TRANGROUP:5535 $P_Skip_Delim_Exit:		       ; ...
TRANGROUP:5535		       dec     si
TRANGROUP:5536		       retn
TRANGROUP:5537 ; ---------------------------------------------------------------------------
TRANGROUP:5537
TRANGROUP:5537 $P_Exit_At_Extra:		       ; ...
TRANGROUP:5537		       clc		       ; indicate extra	delim
TRANGROUP:5538		       retn
TRANGROUP:5538 endp	       $P_Skip_Delim
TRANGROUP:5538
TRANGROUP:5539
TRANGROUP:5539 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5539
TRANGROUP:5539
TRANGROUP:5539 proc	       $P_Chk_EOL near	       ; ...
TRANGROUP:5539		       push    bx
TRANGROUP:553A		       push    cx
TRANGROUP:553B		       cmp     al, 0Dh	       ; $P_CR
TRANGROUP:553D		       jz      short $P_Chk_EOL_Exit
TRANGROUP:553F		       cmp     al, 0	       ; $P_NULL
TRANGROUP:5541		       jz      short $P_Chk_EOL_Exit
TRANGROUP:5543		       cmp     [byte ptr es:di+2], 2 ; [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL
TRANGROUP:5548		       jb      short $P_Chk_EOL_Exit
TRANGROUP:554A		       xor     bx, bx
TRANGROUP:554C		       mov     bl, [es:di+3]   ; [es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
TRANGROUP:5550		       add     bx, 4	       ; $P_Len_PARMS
TRANGROUP:5553		       cmp     [byte ptr es:bx+di], 0 ;	$P_I_Use_Default
TRANGROUP:5557		       jz      short $P_Chk_EOL_NZ
TRANGROUP:5559		       xor     cx, cx
TRANGROUP:555B		       mov     cl, [es:bx+di]
TRANGROUP:555E
TRANGROUP:555E $P_Chk_EOL_Loop:			       ; ...
TRANGROUP:555E		       inc     bx
TRANGROUP:555F		       cmp     al, [es:bx+di]
TRANGROUP:5562		       jz      short $P_Chk_EOL_Exit
TRANGROUP:5564		       loop    $P_Chk_EOL_Loop
TRANGROUP:5566
TRANGROUP:5566 $P_Chk_EOL_NZ:			       ; ...
TRANGROUP:5566		       cmp     al, 0Dh	       ; $P_CR
TRANGROUP:5568
TRANGROUP:5568 $P_Chk_EOL_Exit:			       ; ...
TRANGROUP:5568		       pop     cx
TRANGROUP:5569		       pop     bx
TRANGROUP:556A		       retn
TRANGROUP:556A endp	       $P_Chk_EOL
TRANGROUP:556A
TRANGROUP:556B
TRANGROUP:556B ; =============== S U B R O U T I N E =======================================
TRANGROUP:556B
TRANGROUP:556B
TRANGROUP:556B proc	       $P_Chk_Delim near       ; ...
TRANGROUP:556B		       push    bx
TRANGROUP:556C		       push    cx
TRANGROUP:556D		       mov     [cs:$P_Terminator], 20h ; ' ' ; $P_Space
TRANGROUP:5573		       and     [cs:$P_Flags2], 0DFh ; 0FFh-$P_Extra
TRANGROUP:5579		       cmp     al, 20h ; ' '   ; $P_Space
TRANGROUP:557B		       jz      short $P_Chk_Delim_Exit
TRANGROUP:557D		       cmp     al, 9	       ; $P_TAB
TRANGROUP:557F		       jz      short $P_Chk_Delim_Exit
TRANGROUP:5581		       cmp     al, 2Ch ; ','   ; $P_Comma
TRANGROUP:5583		       jz      short $P_Chk_Delim_Exit0
TRANGROUP:5585		       cmp     al, 20h ; ' '   ; $P_DBSP1
TRANGROUP:5587		       jnz     short $P_Chk_Delim01
TRANGROUP:5589		       cmp     [byte ptr si], 20h ; ' ' ; $P_DBSP2
TRANGROUP:558C		       jnz     short $P_Chk_Delim01
TRANGROUP:558E		       mov     al, 20h ; ' '   ; $P_Space
TRANGROUP:5590		       inc     si
TRANGROUP:5591		       cmp     al, al
TRANGROUP:5593		       jmp     short $P_Chk_Delim_Exit
TRANGROUP:5595 ; ---------------------------------------------------------------------------
TRANGROUP:5595
TRANGROUP:5595 $P_Chk_Delim01:			       ; ...
TRANGROUP:5595		       cmp     [byte ptr es:di+2], 1 ; [es:di+$P_PARMS_BLK.$P_Num_Extra],
TRANGROUP:5595					       ; $P_I_Have_Delim
TRANGROUP:559A		       jb      short $P_Chk_Delim_Exit
TRANGROUP:559C		       xor     cx, cx
TRANGROUP:559E		       mov     cl, [es:di+3]   ; [es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
TRANGROUP:55A2		       jcxz    short $P_Chk_Delim_NZ
TRANGROUP:55A4		       mov     bx, 3
TRANGROUP:55A7
TRANGROUP:55A7 $P_Chk_Delim_Loop:		       ; ...
TRANGROUP:55A7		       inc     bx
TRANGROUP:55A8		       cmp     al, [es:bx+di]
TRANGROUP:55AB		       jz      short $P_Chk_Delim_Exit0
TRANGROUP:55AD		       loop    $P_Chk_Delim_Loop
TRANGROUP:55AF
TRANGROUP:55AF $P_Chk_Delim_NZ:			       ; ...
TRANGROUP:55AF		       cmp     al, 20h ; ' '   ; $P_Space
TRANGROUP:55B1
TRANGROUP:55B1 $P_Chk_Delim_Exit:		       ; ...
TRANGROUP:55B1		       pop     cx
TRANGROUP:55B2		       pop     bx
TRANGROUP:55B3		       retn
TRANGROUP:55B4 ; ---------------------------------------------------------------------------
TRANGROUP:55B4
TRANGROUP:55B4 $P_Chk_Delim_Exit0:		       ; ...
TRANGROUP:55B4		       mov     [cs:$P_Terminator], al
TRANGROUP:55B8		       test    [cs:$P_Flags2], 1 ; $P_equ ; if terminating a key=
TRANGROUP:55BE		       jnz     short $P_No_Set_Extra ; then do not set the EXTRA bit
TRANGROUP:55C0		       or      [cs:$P_Flags2], 20h ; $P_Extra
TRANGROUP:55C0					       ; flag terminated extra delimiter or comma
TRANGROUP:55C6
TRANGROUP:55C6 $P_No_Set_Extra:			       ; ...
TRANGROUP:55C6		       cmp     al, al
TRANGROUP:55C8		       jmp     short $P_Chk_Delim_Exit
TRANGROUP:55C8 endp	       $P_Chk_Delim
TRANGROUP:55C8
TRANGROUP:55CA
TRANGROUP:55CA ; =============== S U B R O U T I N E =======================================
TRANGROUP:55CA
TRANGROUP:55CA
TRANGROUP:55CA proc	       $P_Chk_Switch near      ; ...
TRANGROUP:55CA		       lea     bp, [$P_STRING_BUF] ; AL	= character code
TRANGROUP:55CA					       ; BX = current pointer within $P_String_Buf
TRANGROUP:55CA					       ; SI = next char	on command line	(following the one in AL)
TRANGROUP:55CE		       cmp     bx, bp
TRANGROUP:55D0		       jz      short $P_STRUC_L2
TRANGROUP:55D2		       cmp     al, 2Fh ; '/'   ; $P_Switch
TRANGROUP:55D4		       jnz     short $P_STRUC_L5
TRANGROUP:55D6		       stc
TRANGROUP:55D7		       push    ax
TRANGROUP:55D8		       mov     al, [cs:bx-1]   ; AL=char before	the current char
TRANGROUP:55DC		       call    $P_0099	       ; return	carry set if not numeric
TRANGROUP:55DF		       jb      short $P_STRUC_L7
TRANGROUP:55E1		       mov     al, [si]	       ; AL=char after the current char
TRANGROUP:55E3		       call    $P_0099
TRANGROUP:55E6
TRANGROUP:55E6 $P_STRUC_L7:			       ; ...
TRANGROUP:55E6		       pop     ax
TRANGROUP:55E7		       retn
TRANGROUP:55E8 ; ---------------------------------------------------------------------------
TRANGROUP:55E8
TRANGROUP:55E8 $P_STRUC_L5:			       ; ...
TRANGROUP:55E8		       clc
TRANGROUP:55E9		       retn
TRANGROUP:55EA ; ---------------------------------------------------------------------------
TRANGROUP:55EA
TRANGROUP:55EA $P_STRUC_L2:			       ; ...
TRANGROUP:55EA		       cmp     al, 2Fh ; '/'   ; $P_Switch
TRANGROUP:55EC		       jnz     short $P_STRUC_L12
TRANGROUP:55EE		       or      [cs:$P_Flags2], 40h ; $P_SW
TRANGROUP:55EE					       ; could be valid	switch,	first char and is slash
TRANGROUP:55F4
TRANGROUP:55F4 $P_STRUC_L12:			       ; ...
TRANGROUP:55F4		       clc
TRANGROUP:55F5		       retn
TRANGROUP:55F5 endp	       $P_Chk_Switch
TRANGROUP:55F5
TRANGROUP:55F6
TRANGROUP:55F6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:55F6
TRANGROUP:55F6
TRANGROUP:55F6 proc	       $P_Chk_DBCS near	       ; ...
TRANGROUP:55F6		       push    ds	       ; AL = Code to be examined
TRANGROUP:55F7		       push    si
TRANGROUP:55F8		       push    bx
TRANGROUP:55F9		       cmp     [cs:$P_DBCSEV_SEG], 0
TRANGROUP:55FF		       jnz     short $P_DBCS00 ; ALREADY SET
TRANGROUP:5601		       push    ax
TRANGROUP:5602		       push    ds
TRANGROUP:5603		       push    cx
TRANGROUP:5604		       push    dx
TRANGROUP:5605		       push    di
TRANGROUP:5606		       push    bp
TRANGROUP:5607		       push    es
TRANGROUP:5608		       xor     si, si
TRANGROUP:560A		       mov     ds, si
TRANGROUP:560C		       assume ds:RESGROUP
TRANGROUP:560C		       mov     ax, 6300h
TRANGROUP:560F		       int     21h	       ; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
TRANGROUP:5611		       mov     bx, ds
TRANGROUP:5613		       or      bx, bx
TRANGROUP:5615		       pop     es
TRANGROUP:5616		       pop     bp
TRANGROUP:5617		       pop     di
TRANGROUP:5618		       pop     dx
TRANGROUP:5619		       pop     cx
TRANGROUP:561A		       pop     ds
TRANGROUP:561B		       assume ds:nothing
TRANGROUP:561B		       pop     ax
TRANGROUP:561C		       jz      short $P_NON_DBCS
TRANGROUP:561E		       mov     [cs:$P_DBCSEV_OFF], si
TRANGROUP:5623		       mov     [cs:$P_DBCSEV_SEG], bx
TRANGROUP:5628
TRANGROUP:5628 $P_DBCS00:			       ; ...
TRANGROUP:5628		       lds     si, [dword ptr cs:$P_DBCSEV_OFF]
TRANGROUP:562D
TRANGROUP:562D $P_DBCS_LOOP:			       ; ...
TRANGROUP:562D		       cmp     [word ptr si], 0
TRANGROUP:5630		       jz      short $P_NON_DBCS
TRANGROUP:5632		       cmp     al, [si]
TRANGROUP:5634		       jb      short $P_DBCS01
TRANGROUP:5636		       cmp     al, [si+1]
TRANGROUP:5639		       ja      short $P_DBCS01
TRANGROUP:563B		       stc		       ; indicate DBCS
TRANGROUP:563C		       jmp     short $P_DBCS_EXIT
TRANGROUP:563E ; ---------------------------------------------------------------------------
TRANGROUP:563E
TRANGROUP:563E $P_DBCS01:			       ; ...
TRANGROUP:563E		       inc     si
TRANGROUP:563F		       inc     si
TRANGROUP:5640		       jmp     short $P_DBCS_LOOP
TRANGROUP:5642 ; ---------------------------------------------------------------------------
TRANGROUP:5642
TRANGROUP:5642 $P_NON_DBCS:			       ; ...
TRANGROUP:5642		       clc		       ; indicate SBCS
TRANGROUP:5643
TRANGROUP:5643 $P_DBCS_EXIT:			       ; ...
TRANGROUP:5643		       pop     bx
TRANGROUP:5644		       pop     si
TRANGROUP:5645		       pop     ds
TRANGROUP:5646		       retn
TRANGROUP:5646 endp	       $P_Chk_DBCS
TRANGROUP:5646
TRANGROUP:5647
TRANGROUP:5647 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5647
TRANGROUP:5647
TRANGROUP:5647 proc	       cmd_parse near	       ; ...
TRANGROUP:5647		       call    sysparse
TRANGROUP:564A		       retn
TRANGROUP:564A endp	       cmd_parse
TRANGROUP:564A
TRANGROUP:564B ; ---------------------------------------------------------------------------
TRANGROUP:564B
TRANGROUP:564B append_parse:			       ; ...
TRANGROUP:564B		       call    sysparse
TRANGROUP:564E		       retf
TRANGROUP:564F ; ---------------------------------------------------------------------------
TRANGROUP:564F
TRANGROUP:564F Printf_Init:			       ; ...
TRANGROUP:564F		       call    std_printf
TRANGROUP:5652		       retf
TRANGROUP:5653
TRANGROUP:5653 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5653
TRANGROUP:5653
TRANGROUP:5653 proc	       Printf_Crlf near	       ; ...
TRANGROUP:5653		       call    std_printf
TRANGROUP:5656		       call    CRLF2
TRANGROUP:5659		       retn
TRANGROUP:5659 endp	       Printf_Crlf
TRANGROUP:5659
TRANGROUP:565A
TRANGROUP:565A ; =============== S U B R O U T I N E =======================================
TRANGROUP:565A
TRANGROUP:565A
TRANGROUP:565A proc	       std_eprintf near	       ; ...
TRANGROUP:565A		       mov     [ds:PRINTF_HANDLE], 2
TRANGROUP:5660		       jmp     short new_printf
TRANGROUP:5660 endp	       std_eprintf
TRANGROUP:5660
TRANGROUP:5662
TRANGROUP:5662 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5662
TRANGROUP:5662
TRANGROUP:5662 proc	       std_printf near	       ; ...
TRANGROUP:5662		       mov     [ds:PRINTF_HANDLE], 1 ; Print to	STDOUT
TRANGROUP:5668
TRANGROUP:5668 new_printf:			       ; ...
TRANGROUP:5668		       push    ax
TRANGROUP:5669		       push    bx
TRANGROUP:566A		       push    cx
TRANGROUP:566B		       push    es
TRANGROUP:566C		       push    ds
TRANGROUP:566D		       pop     es
TRANGROUP:566E		       push    di
TRANGROUP:566F		       push    si
TRANGROUP:5670		       push    dx
TRANGROUP:5671		       mov     [ds:print_err_flag], 0 ;	word [print_err_flag]
TRANGROUP:5677		       mov     si, dx
TRANGROUP:5679		       lodsw
TRANGROUP:567A		       push    ax
TRANGROUP:567B		       lodsb
TRANGROUP:567C		       mov     cl, al
TRANGROUP:567E		       xor     ch, ch
TRANGROUP:5680		       pop     ax
TRANGROUP:5681		       cmp     cx, 0
TRANGROUP:5684		       jz      short ready_to_print
TRANGROUP:5686		       mov     di, offset subst_buffer
TRANGROUP:5689		       push    di
TRANGROUP:568A		       push    cx
TRANGROUP:568B
TRANGROUP:568B move_subst:			       ; ...
TRANGROUP:568B		       push    cx
TRANGROUP:568C		       mov     bx, si
TRANGROUP:568E		       mov     cx, 11	       ; parm_block_size
TRANGROUP:5691		       rep movsb
TRANGROUP:5693		       test    [byte ptr bx+7],	4 ; [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
TRANGROUP:5697		       jz      short move_subst_cont
TRANGROUP:5699		       mov     [word ptr bx+2],	0 ; [bx+$M_SUBLIST_STRUC.$M_S_VALUE]
TRANGROUP:569E		       mov     [word ptr bx+4],	0 ; [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2]
TRANGROUP:56A3
TRANGROUP:56A3 move_subst_cont:			       ; ...
TRANGROUP:56A3		       pop     cx
TRANGROUP:56A4		       loop    move_subst
TRANGROUP:56A6		       pop     cx
TRANGROUP:56A7		       push    ax
TRANGROUP:56A8		       cmp     [ds:msg_disp_class], 0FFh ; util_msg_class
TRANGROUP:56AD		       jz      short check_fix
TRANGROUP:56AF		       mov     [ds:msg_flag], 1
TRANGROUP:56B4		       mov     di, offset extend_buf_ptr
TRANGROUP:56B7		       xor     ax, ax
TRANGROUP:56B9		       stosw
TRANGROUP:56BA		       stosb
TRANGROUP:56BB
TRANGROUP:56BB check_fix:			       ; ...
TRANGROUP:56BB		       pop     ax
TRANGROUP:56BC		       pop     di
TRANGROUP:56BD		       mov     si, di
TRANGROUP:56BF		       mov     bx, si
TRANGROUP:56C1		       push    cx
TRANGROUP:56C2
TRANGROUP:56C2 set_subst:			       ; ...
TRANGROUP:56C2		       cmp     [word ptr bx+4],	0 ; [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2]
TRANGROUP:56C6		       jnz     short subst_seg_set
TRANGROUP:56C8		       test    [byte ptr bx+7],	4 ; [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
TRANGROUP:56CC		       jnz     short subst_seg_set
TRANGROUP:56CE		       mov     [word ptr bx+4],	cs
TRANGROUP:56D1
TRANGROUP:56D1 subst_seg_set:			       ; ...
TRANGROUP:56D1		       add     bx, 11	       ; parm_block_size
TRANGROUP:56D4		       loop    set_subst
TRANGROUP:56D6		       pop     cx
TRANGROUP:56D7		       mov     bx, si
TRANGROUP:56D9		       cmp     [word ptr bx+2],	offset string_ptr_2 ;
TRANGROUP:56D9					       ; [bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2
TRANGROUP:56DE		       jnz     short ready_to_print
TRANGROUP:56E0		       mov     dx, [ds:string_ptr_2]
TRANGROUP:56E4		       mov     [bx+2], dx
TRANGROUP:56E7
TRANGROUP:56E7 ready_to_print:			       ; ...
TRANGROUP:56E7		       mov     bx, [ds:PRINTF_HANDLE] ;	get print handle
TRANGROUP:56EB		       mov     dl, [ds:msg_cont_flag] ;	set up control flag
TRANGROUP:56EF		       mov     dh, [ds:msg_disp_class] ; set up	display	class
TRANGROUP:56F3		       mov     [ds:msg_cont_flag], 0 ; no_cont_flag ; reset flags to avoid
TRANGROUP:56F8		       mov     [ds:msg_disp_class], 0FFh ; util_msg_class
TRANGROUP:56FD		       push    ds
TRANGROUP:56FE		       push    es
TRANGROUP:56FF		       call    SYSDISPMSG
TRANGROUP:5702		       pop     es
TRANGROUP:5703		       pop     ds
TRANGROUP:5704		       jnb     short print_success
TRANGROUP:5706		       mov     [ds:print_err_flag], ax
TRANGROUP:5709
TRANGROUP:5709 print_success:			       ; ...
TRANGROUP:5709		       pop     dx
TRANGROUP:570A		       pop     si
TRANGROUP:570B		       pop     di
TRANGROUP:570C		       pop     es
TRANGROUP:570D		       pop     cx
TRANGROUP:570E		       pop     bx
TRANGROUP:570F		       pop     ax
TRANGROUP:5710		       cmp     [ds:print_err_flag], 0 ;	if an error occurred
TRANGROUP:5715		       jnz     short print_err ; handle	it
TRANGROUP:5717		       retn
TRANGROUP:5718 ; ---------------------------------------------------------------------------
TRANGROUP:5718
TRANGROUP:5718 print_err:			       ; ...
TRANGROUP:5718		       push    cs
TRANGROUP:5719		       pop     es
TRANGROUP:571A		       assume es:TRANGROUP
TRANGROUP:571A		       cmp     [ds:PRINTF_HANDLE], 2 ; Print to	STDERR?
TRANGROUP:571F		       jnz     short not_stderr	; no - continue
TRANGROUP:5721		       jmp     TCOMMAND	       ; Yes - hopless - just exit
TRANGROUP:5724 ; ---------------------------------------------------------------------------
TRANGROUP:5724
TRANGROUP:5724 not_stderr:			       ; ...
TRANGROUP:5724		       mov     ax, [ds:print_err_flag]
TRANGROUP:5727		       mov     es, [ds:RESSEG]
TRANGROUP:572B		       assume es:nothing
TRANGROUP:572B		       test    [es:PipeFlag], 0FFh ; -1
TRANGROUP:5731		       jz      short _go_to_error
TRANGROUP:5733		       call    PipeOff
TRANGROUP:5736		       mov     dx, offset PIPEEMES_PTR
TRANGROUP:5739		       jmp     short print_err_exit
TRANGROUP:573B ; ---------------------------------------------------------------------------
TRANGROUP:573B
TRANGROUP:573B _go_to_error:			       ; ...
TRANGROUP:573B		       mov     [ds:msg_disp_class], 1 ;	ext_msg_class
TRANGROUP:5740		       mov     dx, offset extend_buf_ptr
TRANGROUP:5743		       mov     [ds:extend_buf_ptr], ax ; get msg num in	control	block
TRANGROUP:5746
TRANGROUP:5746 print_err_exit:			       ; ...
TRANGROUP:5746		       push    cs
TRANGROUP:5747		       pop     es
TRANGROUP:5748		       assume es:TRANGROUP
TRANGROUP:5748		       jmp     cerror
TRANGROUP:5748 endp	       std_printf
TRANGROUP:5748
TRANGROUP:574B
TRANGROUP:574B ; =============== S U B R O U T I N E =======================================
TRANGROUP:574B
TRANGROUP:574B
TRANGROUP:574B proc	       TSYSLOADMSG near	       ; ...
TRANGROUP:574B		       push    bx
TRANGROUP:574C		       call    SYSLOADMSG
TRANGROUP:574F		       pop     bx
TRANGROUP:5750		       retn
TRANGROUP:5750 endp	       TSYSLOADMSG
TRANGROUP:5750
TRANGROUP:5751
TRANGROUP:5751 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5751
TRANGROUP:5751
TRANGROUP:5751 proc	       TSYSGETMSG near	       ; ...
TRANGROUP:5751		       push    cx
TRANGROUP:5752		       call    SYSGETMSG
TRANGROUP:5755		       pop     cx
TRANGROUP:5756		       retn
TRANGROUP:5756 endp	       TSYSGETMSG
TRANGROUP:5756
TRANGROUP:5757
TRANGROUP:5757 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5757
TRANGROUP:5757
TRANGROUP:5757 proc	       SYSLOADMSG near	       ; ...
TRANGROUP:5757		       push    ax
TRANGROUP:5758		       push    bx
TRANGROUP:5759		       push    dx
TRANGROUP:575A		       push    es
TRANGROUP:575B		       push    di
TRANGROUP:575C		       xor     cx, cx
TRANGROUP:575E		       mov     es, cx
TRANGROUP:5760		       assume es:RESGROUP
TRANGROUP:5760		       xor     di, di
TRANGROUP:5762		       mov     ax, 122Eh       ; DOS_GET_EXT_PARSE_ADD
TRANGROUP:5765		       mov     dl, 0	       ; DOS_GET_EXTENDED
TRANGROUP:5767		       int     2Fh	       ; Multiplex - DOS 3+ internal - GET OR SET ERROR	TABLE ADDRESSES
TRANGROUP:5767					       ; DL = subfunction - get	standard DOS error table (errors 00h-12h,50h-5Bh)
TRANGROUP:5767					       ; Return: ES:DI -> error	table
TRANGROUP:5769		       mov     [ds:$M_RT_$M_EXT_COMMAND+2], es ; [$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2]
TRANGROUP:576D		       mov     [ds:$M_RT_$M_EXT_COMMAND], di
TRANGROUP:5771		       mov     ax, 122Eh
TRANGROUP:5774		       mov     dl, 2	       ; DOS_GET_PARSE
TRANGROUP:5776		       int     2Fh	       ; Multiplex - DOS 3+ internal - GET OR SET ERROR	TABLE ADDRESSES
TRANGROUP:5776					       ; DL = subfunction - get	parameter error	table (errors 00h-0Ah)
TRANGROUP:5776					       ; ES:DI -> error	table
TRANGROUP:5778		       mov     [ds:$M_RT_$M_PARSE_COMMAND+2], es ; [$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2]
TRANGROUP:577C		       mov     [ds:$M_RT_$M_PARSE_COMMAND], di
TRANGROUP:5780		       mov     ax, 122Eh
TRANGROUP:5783		       mov     dl, 4	       ; DOS_GET_CRITICAL
TRANGROUP:5785		       int     2Fh	       ; Multiplex - DOS 3+ internal - GET OR SET ERROR	TABLE ADDRESSES
TRANGROUP:5785					       ; DL = subfunction - get	critical/SHARE error table (errors 13h-2Bh)
TRANGROUP:5785					       ; ES:DI -> error	table
TRANGROUP:5787		       mov     [ds:$M_RT_$M_CRIT_COMMAND+2], es	; [$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2]
TRANGROUP:578B		       mov     [ds:$M_RT_$M_CRIT_COMMAND], di
TRANGROUP:578F		       mov     ax, 122Eh
TRANGROUP:5792		       mov     dl, 6	       ; DOS_GET_FILE
TRANGROUP:5794		       int     2Fh	       ; Multiplex - DOS 3+ internal - GET OR SET ERROR	TABLE ADDRESSES
TRANGROUP:5794					       ; DL = subfunction - get	??? error table
TRANGROUP:5794					       ; ES:DI -> error	table
TRANGROUP:5796		       mov     [ds:$M_RT_$M_EXT_FILE+2], es ; [$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2]
TRANGROUP:579A		       mov     [ds:$M_RT_$M_EXT_FILE], di
TRANGROUP:579E		       call    $M_MSGSERV_1    ; Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)
TRANGROUP:57A1		       mov     [ds:$M_RT_$M_EXT_ERR_ADDRS+2], es ; [$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2]
TRANGROUP:57A5		       mov     [ds:$M_RT_$M_EXT_ERR_ADDRS], di
TRANGROUP:57A9		       mov     [ds:$M_RT_$M_CRIT_ADDRS+2], es ;	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2]
TRANGROUP:57AD		       mov     [ds:$M_RT_$M_CRIT_ADDRS], di
TRANGROUP:57B1		       call    $M_MSGSERV_2    ; Get addressibility to MSGSERV CLASS 2 (PARSE Errors)
TRANGROUP:57B4		       mov     [ds:$M_RT_$M_PARSE_ADDRS+2], es ; [$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2]
TRANGROUP:57B8		       mov     [ds:$M_RT_$M_PARSE_ADDRS], di
TRANGROUP:57BC		       mov     ax, 122Eh
TRANGROUP:57BF		       mov     dl, 8	       ; DOS_GET_ADDR
TRANGROUP:57C1		       int     2Fh	       ; Multiplex - DOS 3+ internal - GET OR SET ERROR	TABLE ADDRESSES
TRANGROUP:57C1					       ; DL = subfunction - get	??? error table
TRANGROUP:57C1					       ; Return: ES:DI -> error	table
TRANGROUP:57C3		       mov     [word ptr ds:$M_RT_$M_DISK_PROC_ADDR+2],	es ; [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2]
TRANGROUP:57C7		       mov     [word ptr ds:$M_RT_$M_DISK_PROC_ADDR], di
TRANGROUP:57CB		       mov     [word ptr ds:$M_RT_$M_CRLF], 0A0Dh ; [$M_RT+$M_RES_ADDRS.$M_CRLF]
TRANGROUP:57D1		       mov     [ds:$M_RT_$M_BUF_TERM], 24h ; '$' ; [$M_RT+$M_RES_ADDRS.$M_BUF_TERM]
TRANGROUP:57D6		       mov     [ds:$M_RT_$M_MSG_NUM], 0	; [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],$M_NULL
TRANGROUP:57DC		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10
TRANGROUP:57E2		       call    $M_CLS_3	       ; Get addressibility to class F ; Build all utility classes
TRANGROUP:57E5		       mov     [word ptr ds:$M_RT_$M_CLASS_ADDRS], di ;	[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
TRANGROUP:57E9		       call    $M_GET_DBCS_VEC
TRANGROUP:57EC		       clc
TRANGROUP:57ED		       jb      short $MIF20
TRANGROUP:57EF		       pop     di
TRANGROUP:57F0		       pop     es
TRANGROUP:57F1		       assume es:nothing
TRANGROUP:57F1		       pop     dx
TRANGROUP:57F2		       pop     bx
TRANGROUP:57F3		       pop     ax
TRANGROUP:57F4		       retn
TRANGROUP:57F5 ; ---------------------------------------------------------------------------
TRANGROUP:57F5
TRANGROUP:57F5 $MIF20:				       ; ...
TRANGROUP:57F5		       add     sp, 10
TRANGROUP:57F8		       stc
TRANGROUP:57F9		       retn
TRANGROUP:57F9 endp	       SYSLOADMSG
TRANGROUP:57F9
TRANGROUP:57FA
TRANGROUP:57FA ; =============== S U B R O U T I N E =======================================
TRANGROUP:57FA
TRANGROUP:57FA
TRANGROUP:57FA proc	       $M_GET_DBCS_VEC near    ; ...
TRANGROUP:57FA		       push    ax
TRANGROUP:57FB		       push    si
TRANGROUP:57FC		       push    ds
TRANGROUP:57FD		       mov     ax, 6300h       ; DOS_GET_DBCS_INFO
TRANGROUP:5800		       int     21h	       ; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
TRANGROUP:5802		       push    ds
TRANGROUP:5803		       pop     es
TRANGROUP:5804		       pop     ds
TRANGROUP:5805		       jb      short $MIF23
TRANGROUP:5807		       mov     [ds:$M_RT_$M_DBCS_VEC], si ; [$M_RT+60]
TRANGROUP:580B		       mov     [ds:$M_RT_$M_DBCS_VEC+2], es ; [$M_RT+62]
TRANGROUP:580F
TRANGROUP:580F $MIF23:				       ; ...
TRANGROUP:580F		       pop     si
TRANGROUP:5810		       pop     ax
TRANGROUP:5811		       retn
TRANGROUP:5811 endp	       $M_GET_DBCS_VEC
TRANGROUP:5811
TRANGROUP:5812
TRANGROUP:5812 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5812
TRANGROUP:5812
TRANGROUP:5812 proc	       SYSGETMSG near	       ; ...
TRANGROUP:5812		       push    ax
TRANGROUP:5813		       push    es
TRANGROUP:5814		       push    di
TRANGROUP:5815		       push    bp
TRANGROUP:5816		       call    $M_GET_MSG_ADDRESS
TRANGROUP:5819		       jb      short $MIF31
TRANGROUP:581B		       cmp     dh, 0FFh	       ; utility_msg_class
TRANGROUP:581E		       clc
TRANGROUP:581F		       jz      short $MIF32
TRANGROUP:5821		       push    es
TRANGROUP:5822		       pop     ds
TRANGROUP:5823		       jmp     short $MEN32
TRANGROUP:5825 ; ---------------------------------------------------------------------------
TRANGROUP:5825
TRANGROUP:5825 $MIF32:				       ; ...
TRANGROUP:5825		       push    cs
TRANGROUP:5826		       pop     ds
TRANGROUP:5827		       assume ds:TRANGROUP
TRANGROUP:5827
TRANGROUP:5827 $MEN32:				       ; ...
TRANGROUP:5827		       mov     si, di
TRANGROUP:5829
TRANGROUP:5829 $MIF31:				       ; ...
TRANGROUP:5829		       pop     bp
TRANGROUP:582A		       pop     di
TRANGROUP:582B		       pop     es
TRANGROUP:582C		       pop     ax
TRANGROUP:582D		       retn
TRANGROUP:582D endp	       SYSGETMSG
TRANGROUP:582D
TRANGROUP:582E
TRANGROUP:582E ; =============== S U B R O U T I N E =======================================
TRANGROUP:582E
TRANGROUP:582E
TRANGROUP:582E proc	       $M_GET_MSG_ADDRESS near ; ...
TRANGROUP:582E
TRANGROUP:582E ; FUNCTION CHUNK	AT TRANGROUP:58C6 SIZE 00000007	BYTES
TRANGROUP:582E
TRANGROUP:582E		       push    si
TRANGROUP:582F		       push    bx
TRANGROUP:5830		       xor     si, si
TRANGROUP:5832		       xor     cx, cx
TRANGROUP:5834
TRANGROUP:5834 $MDO36:				       ; ...
TRANGROUP:5834		       cmp     dh, 0FFh	       ; utility_msg_class
TRANGROUP:5837		       jnz     short $MIF37
TRANGROUP:5839		       mov     di, [word ptr $M_RT_$M_CLASS_ADDRS+si] ;
TRANGROUP:5839					       ; [si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
TRANGROUP:583D		       mov     bx, di
TRANGROUP:583F		       jmp     short $MEN37
TRANGROUP:5841 ; ---------------------------------------------------------------------------
TRANGROUP:5841
TRANGROUP:5841 $MIF37:				       ; ...
TRANGROUP:5841		       test    dh, 2	       ; parse_err_class
TRANGROUP:5844		       jz      short $MIF39
TRANGROUP:5846		       les     di, [dword ptr $M_RT_$M_PARSE_COMMAND+si] ;
TRANGROUP:5846					       ; [si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]
TRANGROUP:584A		       mov     bx, es
TRANGROUP:584C		       jmp     short $MEN37
TRANGROUP:584E ; ---------------------------------------------------------------------------
TRANGROUP:584E
TRANGROUP:584E $MIF39:				       ; ...
TRANGROUP:584E		       cmp     ax, 19	       ; $M_CRIT_LO
TRANGROUP:5851		       jb      short $MIF41
TRANGROUP:5853		       cmp     ax, 39	       ; $M_CRIT_HI
TRANGROUP:5856		       ja      short $MIF41
TRANGROUP:5858		       les     di, [dword ptr $M_RT_$M_CRIT_ADDRS+si] ;
TRANGROUP:5858					       ; [si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]
TRANGROUP:585C		       mov     bx, es
TRANGROUP:585E		       jmp     short $MEN37
TRANGROUP:5860 ; ---------------------------------------------------------------------------
TRANGROUP:5860
TRANGROUP:5860 $MIF41:				       ; ...
TRANGROUP:5860		       les     di, [dword ptr $M_RT_$M_EXT_ERR_ADDRS+si] ;
TRANGROUP:5860					       ; [si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]
TRANGROUP:5864		       mov     bx, es
TRANGROUP:5866
TRANGROUP:5866 $MEN37:				       ; ...
TRANGROUP:5866		       cmp     bx, 0FFFFh      ; -1 ; $M_TERMINATING_FLAG
TRANGROUP:5869		       jnz     short $MIF46
TRANGROUP:586B		       cmp     dh, 0FFh	       ; utility_msg_class
TRANGROUP:586E		       jnz     short $MIF47
TRANGROUP:5870		       stc
TRANGROUP:5871		       jmp     short $MEN47
TRANGROUP:5873 ; ---------------------------------------------------------------------------
TRANGROUP:5873
TRANGROUP:5873 $MIF47:				       ; ...
TRANGROUP:5873		       mov     [$M_RT_$M_MSG_NUM], ax ;	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
TRANGROUP:5876		       mov     ax, 0FFFFh      ; $M_SPECIAL_MSG_NUM
TRANGROUP:5879		       mov     bp, 1	       ; $M_ONE_REPLACE
TRANGROUP:587C		       xor     si, si
TRANGROUP:587E		       clc
TRANGROUP:587F
TRANGROUP:587F $MEN47:				       ; ...
TRANGROUP:587F		       jmp     short $MEN46
TRANGROUP:5881 ; ---------------------------------------------------------------------------
TRANGROUP:5881
TRANGROUP:5881 $MIF46:				       ; ...
TRANGROUP:5881		       cmp     bx, 0	       ; $M_CLASS_NOT_EXIST
TRANGROUP:5884		       jz      short $MIF51
TRANGROUP:5886		       call    $M_FIND_SPECIFIED_MSG
TRANGROUP:5889
TRANGROUP:5889 $MIF51:				       ; ...
TRANGROUP:5889		       add     si, 4	       ; $M_ADDR_SZ_FAR
TRANGROUP:588C		       clc
TRANGROUP:588D
TRANGROUP:588D $MEN46:				       ; ...
TRANGROUP:588D		       jb      short $MEN36
TRANGROUP:588F		       or      cx, cx
TRANGROUP:5891		       jnz     short $MEN36
TRANGROUP:5893		       jmp     short $MDO36
TRANGROUP:5895 ; ---------------------------------------------------------------------------
TRANGROUP:5895
TRANGROUP:5895 $MEN36:				       ; ...
TRANGROUP:5895		       pushf
TRANGROUP:5896		       cmp     dh, 1	       ; EXT_ERR_CLASS
TRANGROUP:5899		       jnz     short $MIF56
TRANGROUP:589B		       push    dx
TRANGROUP:589C		       push    bp
TRANGROUP:589D		       push    cx
TRANGROUP:589E		       push    es
TRANGROUP:589F		       push    di
TRANGROUP:58A0		       push    ax
TRANGROUP:58A1		       mov     ax, 500h	       ; IFSFUNC_INSTALL_CHECK
TRANGROUP:58A4		       int     2Fh	       ; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
TRANGROUP:58A4					       ; Return: AL = 00h not installed, OK to install
TRANGROUP:58A4					       ; 01h not installed, can't install
TRANGROUP:58A4					       ; FFh installed
TRANGROUP:58A6		       cmp     al, 0FFh	       ; IFSFUNC_INSTALLED
TRANGROUP:58A8		       pop     ax
TRANGROUP:58A9		       jnz     short $MIF57
TRANGROUP:58AB		       xchg    ax, bx
TRANGROUP:58AC		       mov     ax, 502h	       ; IFS_GET_ERR_TEXT
TRANGROUP:58AF		       int     2Fh	       ; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
TRANGROUP:58B1		       jmp     short $MEN57
TRANGROUP:58B3 ; ---------------------------------------------------------------------------
TRANGROUP:58B3
TRANGROUP:58B3 $MIF57:				       ; ...
TRANGROUP:58B3		       stc
TRANGROUP:58B4
TRANGROUP:58B4 $MEN57:				       ; ...
TRANGROUP:58B4		       jnb     short $MIF60
TRANGROUP:58B6		       pop     di
TRANGROUP:58B7		       pop     es
TRANGROUP:58B8		       pop     cx
TRANGROUP:58B9		       jmp     short $MEN60
TRANGROUP:58BB ; ---------------------------------------------------------------------------
TRANGROUP:58BB
TRANGROUP:58BB $MIF60:				       ; ...
TRANGROUP:58BB		       add     sp, 6
TRANGROUP:58BE		       call    $M_SET_LEN_IN_CX
TRANGROUP:58C1
TRANGROUP:58C1 $MEN60:				       ; ...
TRANGROUP:58C1		       pop     bp
TRANGROUP:58C2		       pop     dx
TRANGROUP:58C3
TRANGROUP:58C3 $MIF56:				       ; ...
TRANGROUP:58C3		       jmp     short $M_MYRET
TRANGROUP:58C3 endp	       $M_GET_MSG_ADDRESS
TRANGROUP:58C3
TRANGROUP:58C5
TRANGROUP:58C5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:58C5
TRANGROUP:58C5
TRANGROUP:58C5 proc	       m_popf_iret far	       ; ...
TRANGROUP:58C5		       iret
TRANGROUP:58C5 endp	       m_popf_iret
TRANGROUP:58C5
TRANGROUP:58C6 ; ---------------------------------------------------------------------------
TRANGROUP:58C6 ; START OF FUNCTION CHUNK FOR $M_GET_MSG_ADDRESS
TRANGROUP:58C6
TRANGROUP:58C6 $M_MYRET:			       ; ...
TRANGROUP:58C6		       push    cs
TRANGROUP:58C7		       call    near ptr	m_popf_iret
TRANGROUP:58CA		       pop     bx
TRANGROUP:58CB		       pop     si
TRANGROUP:58CC		       retn
TRANGROUP:58CC ; END OF	FUNCTION CHUNK FOR $M_GET_MSG_ADDRESS
TRANGROUP:58CD
TRANGROUP:58CD ; =============== S U B R O U T I N E =======================================
TRANGROUP:58CD
TRANGROUP:58CD
TRANGROUP:58CD proc	       $M_SET_LEN_IN_CX	near   ; ...
TRANGROUP:58CD		       push    di
TRANGROUP:58CE		       push    ax
TRANGROUP:58CF		       mov     cx, 0FFFFh
TRANGROUP:58D2		       xor     al, al
TRANGROUP:58D4		       repne scasb
TRANGROUP:58D6		       not     cx
TRANGROUP:58D8		       dec     cx
TRANGROUP:58D9		       pop     ax
TRANGROUP:58DA		       pop     di
TRANGROUP:58DB		       retn
TRANGROUP:58DB endp	       $M_SET_LEN_IN_CX
TRANGROUP:58DB
TRANGROUP:58DC
TRANGROUP:58DC ; =============== S U B R O U T I N E =======================================
TRANGROUP:58DC
TRANGROUP:58DC
TRANGROUP:58DC proc	       $M_FIND_SPECIFIED_MSG near ; ...
TRANGROUP:58DC		       cmp     bx, 1
TRANGROUP:58DF		       jnz     short $MIF64
TRANGROUP:58E1		       cmp     [word ptr $M_RT_$M_DISK_PROC_ADDR], 0FFFFh ;
TRANGROUP:58E1					       ; [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1
TRANGROUP:58E6		       jz      short $MIF64
TRANGROUP:58E8		       cmp     ax, 0FFFFh      ; -1
TRANGROUP:58EB		       jnz     short $MIF65
TRANGROUP:58ED		       push    ax
TRANGROUP:58EE		       mov     ax, [$M_RT_$M_MSG_NUM] ;	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
TRANGROUP:58F1		       call    [$M_RT_$M_DISK_PROC_ADDR] ;
TRANGROUP:58F1					       ; call far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
TRANGROUP:58F5		       pop     ax
TRANGROUP:58F6		       jmp     short $MEN65
TRANGROUP:58F8 ; ---------------------------------------------------------------------------
TRANGROUP:58F8
TRANGROUP:58F8 $MIF65:				       ; ...
TRANGROUP:58F8		       call    [$M_RT_$M_DISK_PROC_ADDR] ;
TRANGROUP:58F8					       ; call far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
TRANGROUP:58FC
TRANGROUP:58FC $MEN65:				       ; ...
TRANGROUP:58FC		       jmp     short $MEN64
TRANGROUP:58FE ; ---------------------------------------------------------------------------
TRANGROUP:58FE
TRANGROUP:58FE $MIF64:				       ; ...
TRANGROUP:58FE		       xor     cx, cx
TRANGROUP:5900		       cmp     dh, 0FFh	       ; utility_msg_class ; -1
TRANGROUP:5903		       jz      short $MIF69
TRANGROUP:5905		       mov     cl, [es:di+3]   ; [es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
TRANGROUP:5909		       jmp     short $MEN69
TRANGROUP:590B ; ---------------------------------------------------------------------------
TRANGROUP:590B
TRANGROUP:590B $MIF69:				       ; ...
TRANGROUP:590B		       cmp     [cs:di],	dh     ; [cs:di+$M_CLASS_ID.$M_CLS_ID]
TRANGROUP:590E		       jnz     short $MEN69
TRANGROUP:5910		       mov     cl, [cs:di+3]   ; [cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
TRANGROUP:5914
TRANGROUP:5914 $MEN69:				       ; ...
TRANGROUP:5914		       add     di, 4	       ; $M_CLASS_ID_SZ
TRANGROUP:5917		       stc
TRANGROUP:5918
TRANGROUP:5918 $MEN64:				       ; ...
TRANGROUP:5918		       jnb     short $MIF75
TRANGROUP:591A		       clc
TRANGROUP:591B
TRANGROUP:591B $MDO76:				       ; ...
TRANGROUP:591B		       or      cx, cx
TRANGROUP:591D		       jz      short $MEN76
TRANGROUP:591F		       cmp     dh, 0FFh	       ; utility_msg_class
TRANGROUP:5922		       jz      short $MIF78
TRANGROUP:5924		       cmp     ax, [es:di]     ; [es:di+$M_ID.$M_NUM]
TRANGROUP:5927		       jmp     short $MEN78
TRANGROUP:5929 ; ---------------------------------------------------------------------------
TRANGROUP:5929
TRANGROUP:5929 $MIF78:				       ; ...
TRANGROUP:5929		       cmp     ax, [cs:di]     ; [cs:di+$M_ID.$M_NUM]
TRANGROUP:592C
TRANGROUP:592C $MEN78:				       ; ...
TRANGROUP:592C		       jnz     short $MIF76
TRANGROUP:592E		       jmp     short $MSR76
TRANGROUP:5930 ; ---------------------------------------------------------------------------
TRANGROUP:5930
TRANGROUP:5930 $MIF76:				       ; ...
TRANGROUP:5930		       dec     cx
TRANGROUP:5931		       jz      short $MEN76
TRANGROUP:5933		       add     di, 4	       ; $M_ID_SZ
TRANGROUP:5936		       jmp     short $MDO76
TRANGROUP:5938 ; ---------------------------------------------------------------------------
TRANGROUP:5938
TRANGROUP:5938 $MEN76:				       ; ...
TRANGROUP:5938		       stc
TRANGROUP:5939
TRANGROUP:5939 $MSR76:				       ; ...
TRANGROUP:5939		       jb      short $MIF75
TRANGROUP:593B		       cmp     dh, 0FFh	       ; utility_msg_class
TRANGROUP:593E		       clc
TRANGROUP:593F		       jnz     short $MIF87
TRANGROUP:5941		       push    cs
TRANGROUP:5942		       pop     es
TRANGROUP:5943		       assume es:TRANGROUP
TRANGROUP:5943
TRANGROUP:5943 $MIF87:				       ; ...
TRANGROUP:5943		       add     di, [es:di+2]   ; [es:di+$M_ID.$M_TXT_PTR]
TRANGROUP:5947
TRANGROUP:5947 $MIF75:				       ; ...
TRANGROUP:5947		       jb      short $MIF91
TRANGROUP:5949		       xor     ch, ch
TRANGROUP:594B		       mov     cl, [es:di]
TRANGROUP:594E		       inc     di
TRANGROUP:594F
TRANGROUP:594F $MIF91:				       ; ...
TRANGROUP:594F		       mov     [$M_RT_$M_SIZE],	0 ; [$M_RT+$M_RES_ADDRS.$M_SIZE]
TRANGROUP:5954		       retn
TRANGROUP:5954 endp	       $M_FIND_SPECIFIED_MSG
TRANGROUP:5954
TRANGROUP:5955
TRANGROUP:5955 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5955
TRANGROUP:5955
TRANGROUP:5955 proc	       SYSDISPMSG near	       ; ...
TRANGROUP:5955		       push    ax
TRANGROUP:5956		       push    bx
TRANGROUP:5957		       push    cx
TRANGROUP:5958		       push    bp
TRANGROUP:5959		       push    di
TRANGROUP:595A		       push    es
TRANGROUP:595B		       push    dx
TRANGROUP:595C		       mov     bp, cx
TRANGROUP:595E		       mov     [$M_RT_$M_HANDLE], bx ; [$M_RT+$M_RES_ADDRS.$M_HANDLE]
TRANGROUP:5962		       mov     [$M_RT_$M_CLASS], dh ; [$M_RT+$M_RES_ADDRS.$M_CLASS]
TRANGROUP:5966		       call    $M_GET_MSG_ADDRESS
TRANGROUP:5969		       or      cx, cx
TRANGROUP:596B		       jz      short $MIF93
TRANGROUP:596D		       or      bp, bp
TRANGROUP:596F		       jnz     short $MIF94
TRANGROUP:5971		       call    $M_DISPLAY_STRING
TRANGROUP:5974		       jmp     short $MEN94
TRANGROUP:5976 ; ---------------------------------------------------------------------------
TRANGROUP:5976
TRANGROUP:5976 $MIF94:				       ; ...
TRANGROUP:5976		       call    $M_DISPLAY_MESSAGE
TRANGROUP:5979
TRANGROUP:5979 $MEN94:				       ; ...
TRANGROUP:5979		       jb      short $MIF97
TRANGROUP:597B		       pop     dx
TRANGROUP:597C		       call    $M_ADD_CRLF
TRANGROUP:597F		       pop     es
TRANGROUP:5980		       assume es:nothing
TRANGROUP:5980		       pop     di
TRANGROUP:5981		       or      dl, dl
TRANGROUP:5983		       jz      short $MIF98
TRANGROUP:5985		       call    $M_WAIT_FOR_INPUT
TRANGROUP:5988
TRANGROUP:5988 $MIF98:				       ; ...
TRANGROUP:5988		       jmp     short $MEN97
TRANGROUP:598A ; ---------------------------------------------------------------------------
TRANGROUP:598A
TRANGROUP:598A $MIF97:				       ; ...
TRANGROUP:598A		       add     sp, 6
TRANGROUP:598D		       stc
TRANGROUP:598E
TRANGROUP:598E $MEN97:				       ; ...
TRANGROUP:598E		       jmp     short $MEN93
TRANGROUP:5990 ; ---------------------------------------------------------------------------
TRANGROUP:5990
TRANGROUP:5990 $MIF93:				       ; ...
TRANGROUP:5990		       pop     es
TRANGROUP:5991		       pop     di
TRANGROUP:5992		       pop     dx
TRANGROUP:5993		       stc
TRANGROUP:5994
TRANGROUP:5994 $MEN93:				       ; ...
TRANGROUP:5994		       jb      short $MIF104
TRANGROUP:5996		       pop     bp
TRANGROUP:5997		       pop     cx
TRANGROUP:5998		       pop     bx
TRANGROUP:5999		       add     sp, 2
TRANGROUP:599C		       jmp     short $MEN104
TRANGROUP:599E ; ---------------------------------------------------------------------------
TRANGROUP:599E
TRANGROUP:599E $MIF104:				       ; ...
TRANGROUP:599E		       add     sp, 8
TRANGROUP:59A1		       stc
TRANGROUP:59A2
TRANGROUP:59A2 $MEN104:				       ; ...
TRANGROUP:59A2		       retn
TRANGROUP:59A2 endp	       SYSDISPMSG
TRANGROUP:59A2
TRANGROUP:59A3
TRANGROUP:59A3 ; =============== S U B R O U T I N E =======================================
TRANGROUP:59A3
TRANGROUP:59A3
TRANGROUP:59A3 proc	       $M_DISPLAY_STRING near  ; ...
TRANGROUP:59A3		       push    ax
TRANGROUP:59A4		       push    bx
TRANGROUP:59A5		       push    dx
TRANGROUP:59A6		       mov     bx, [$M_RT_$M_HANDLE] ; [$M_RT+$M_RES_ADDRS.$M_HANDLE]
TRANGROUP:59AA		       cmp     bx, 0FFFFh      ; $M_NO_HANDLE
TRANGROUP:59AD		       jnz     short $MIF107
TRANGROUP:59AF		       call    $M_DISPLAY_$_STRING
TRANGROUP:59B2		       jmp     short $MEN107
TRANGROUP:59B4 ; ---------------------------------------------------------------------------
TRANGROUP:59B4
TRANGROUP:59B4 $MIF107:				       ; ...
TRANGROUP:59B4		       call    $M_DISPLAY_H_STRING
TRANGROUP:59B7
TRANGROUP:59B7 $MEN107:				       ; ...
TRANGROUP:59B7		       jnb     short $MIF110
TRANGROUP:59B9		       mov     ah, 59h	       ; DOS_GET_EXT_ERROR
TRANGROUP:59BB		       mov     bx, 0
TRANGROUP:59BE		       int     21h	       ; DOS - 3+ - GET	EXTENDED ERROR CODE
TRANGROUP:59BE					       ; BX = version code (0000h for DOS 3.x)
TRANGROUP:59C0		       xor     ah, ah
TRANGROUP:59C2		       add     sp, 6
TRANGROUP:59C5		       stc
TRANGROUP:59C6		       jmp     short $MEN110
TRANGROUP:59C8 ; ---------------------------------------------------------------------------
TRANGROUP:59C8
TRANGROUP:59C8 $MIF110:				       ; ...
TRANGROUP:59C8		       cmp     bx, 0FFFFh      ; $M_NO_HANDLE
TRANGROUP:59CB		       jz      short $MEN110
TRANGROUP:59CD		       cmp     ax, cx
TRANGROUP:59CF		       jz      short $MEN110
TRANGROUP:59D1		       call    $M_GET_EXT_ERR_39
TRANGROUP:59D4		       add     sp, 6
TRANGROUP:59D7		       stc
TRANGROUP:59D8
TRANGROUP:59D8 $MEN110:				       ; ...
TRANGROUP:59D8		       jb      short $MIF117
TRANGROUP:59DA		       pop     dx
TRANGROUP:59DB		       pop     bx
TRANGROUP:59DC		       pop     ax
TRANGROUP:59DD
TRANGROUP:59DD $MIF117:				       ; ...
TRANGROUP:59DD		       retn
TRANGROUP:59DD endp	       $M_DISPLAY_STRING
TRANGROUP:59DD
TRANGROUP:59DE
TRANGROUP:59DE ; =============== S U B R O U T I N E =======================================
TRANGROUP:59DE
TRANGROUP:59DE
TRANGROUP:59DE proc	       $M_DISPLAY_$_STRING near	; ...
TRANGROUP:59DE		       push    ds
TRANGROUP:59DF		       push    es
TRANGROUP:59E0		       pop     ds
TRANGROUP:59E1		       assume ds:nothing
TRANGROUP:59E1		       cmp     cx, 1	       ; $M_SINGLE_CHAR
TRANGROUP:59E4		       jnz     short $MIF119
TRANGROUP:59E6		       mov     ah, 2	       ; DOS_DISP_CHAR
TRANGROUP:59E8		       mov     dl, [es:di]
TRANGROUP:59EB		       int     21h	       ; DOS - DISPLAY OUTPUT
TRANGROUP:59EB					       ; DL = character	to send	to standard output
TRANGROUP:59ED		       pop     ds
TRANGROUP:59EE		       mov     al, dl
TRANGROUP:59F0		       call    $M_IS_IT_DBCS
TRANGROUP:59F3		       push    ds
TRANGROUP:59F4		       push    es
TRANGROUP:59F5		       pop     ds
TRANGROUP:59F6		       jnb     short $MIF120
TRANGROUP:59F8		       mov     dl, [es:di+1]
TRANGROUP:59FC		       int     21h	       ; DOS -
TRANGROUP:59FE		       clc
TRANGROUP:59FF
TRANGROUP:59FF $MIF120:				       ; ...
TRANGROUP:59FF		       jmp     short $MEN119
TRANGROUP:5A01 ; ---------------------------------------------------------------------------
TRANGROUP:5A01
TRANGROUP:5A01 $MIF119:				       ; ...
TRANGROUP:5A01		       mov     ah, 2	       ; DOS_DISP_CHAR
TRANGROUP:5A03
TRANGROUP:5A03 $MDO123:				       ; ...
TRANGROUP:5A03		       or      cx, cx
TRANGROUP:5A05		       jz      short $MEN119
TRANGROUP:5A07		       mov     dl, [es:di]
TRANGROUP:5A0A		       int     21h	       ; DOS - DISPLAY OUTPUT
TRANGROUP:5A0A					       ; DL = character	to send	to standard output
TRANGROUP:5A0C		       inc     di
TRANGROUP:5A0D		       loop    $MDO123
TRANGROUP:5A0F
TRANGROUP:5A0F $MEN119:				       ; ...
TRANGROUP:5A0F		       clc
TRANGROUP:5A10		       pop     ds
TRANGROUP:5A11		       retn
TRANGROUP:5A11 endp	       $M_DISPLAY_$_STRING
TRANGROUP:5A11
TRANGROUP:5A12
TRANGROUP:5A12 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5A12
TRANGROUP:5A12
TRANGROUP:5A12 proc	       scan_ctrlz near	       ; ...
TRANGROUP:5A12		       push    di
TRANGROUP:5A13		       push    ax
TRANGROUP:5A14		       push    es
TRANGROUP:5A15		       push    bx
TRANGROUP:5A16		       mov     di, dx
TRANGROUP:5A18		       push    ds
TRANGROUP:5A19		       pop     es
TRANGROUP:5A1A		       mov     bx, cx
TRANGROUP:5A1C		       mov     al, 1Ah	       ; Ctrl-Z
TRANGROUP:5A1E		       cld
TRANGROUP:5A1F		       repne scasb
TRANGROUP:5A21		       jnz     short noCtrlZ
TRANGROUP:5A23		       sub     bx, cx
TRANGROUP:5A25		       dec     bx
TRANGROUP:5A26
TRANGROUP:5A26 noCtrlZ:				       ; ...
TRANGROUP:5A26		       mov     cx, bx
TRANGROUP:5A28		       pop     bx
TRANGROUP:5A29		       pop     es
TRANGROUP:5A2A		       pop     ax
TRANGROUP:5A2B		       pop     di
TRANGROUP:5A2C		       retn
TRANGROUP:5A2C endp	       scan_ctrlz
TRANGROUP:5A2C
TRANGROUP:5A2D
TRANGROUP:5A2D ; =============== S U B R O U T I N E =======================================
TRANGROUP:5A2D
TRANGROUP:5A2D
TRANGROUP:5A2D proc	       $M_DISPLAY_H_STRING near	; ...
TRANGROUP:5A2D
TRANGROUP:5A2D ; FUNCTION CHUNK	AT TRANGROUP:5A61 SIZE 00000006	BYTES
TRANGROUP:5A2D
TRANGROUP:5A2D		       xor     ax, ax
TRANGROUP:5A2F		       or      cx, cx
TRANGROUP:5A31		       jz      short $MIF127
TRANGROUP:5A33		       push    ds
TRANGROUP:5A34		       push    es
TRANGROUP:5A35		       pop     ds
TRANGROUP:5A36		       mov     ah, 40h	       ; DOS_WRITE_HANDLE
TRANGROUP:5A38		       mov     dx, di
TRANGROUP:5A3A		       cmp     cx, 1	       ; $M_SINGLE_CHAR
TRANGROUP:5A3D		       jnz     short $MIF128
TRANGROUP:5A3F		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:5A3F					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:5A41		       pop     ds
TRANGROUP:5A42		       push    ax
TRANGROUP:5A43		       mov     al, [es:di]
TRANGROUP:5A46		       call    $M_IS_IT_DBCS
TRANGROUP:5A49		       pop     ax
TRANGROUP:5A4A		       push    ds
TRANGROUP:5A4B		       push    es
TRANGROUP:5A4C		       pop     ds
TRANGROUP:5A4D		       jnb     short $MIF129
TRANGROUP:5A4F		       clc
TRANGROUP:5A50		       mov     ah, 40h
TRANGROUP:5A52		       inc     dx
TRANGROUP:5A53		       int     21h	       ; DOS - 2+ - WRITE TO FILE WITH HANDLE
TRANGROUP:5A53					       ; BX = file handle, CX =	number of bytes	to write, DS:DX	-> buffer
TRANGROUP:5A55
TRANGROUP:5A55 $MIF129:				       ; ...
TRANGROUP:5A55		       pushf
TRANGROUP:5A56		       cmp     [byte ptr es:di], 1Ah ; is char a Ctrl-Z?
TRANGROUP:5A5A		       jnz     short m_popf_j  ; no, continue
TRANGROUP:5A5C		       mov     ax, cx
TRANGROUP:5A5E
TRANGROUP:5A5E m_popf_j:			       ; ...
TRANGROUP:5A5E		       jmp     short m_popf
TRANGROUP:5A5E endp	       $M_DISPLAY_H_STRING
TRANGROUP:5A5E
TRANGROUP:5A60
TRANGROUP:5A60 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5A60
TRANGROUP:5A60
TRANGROUP:5A60 proc	       intret far	       ; ...
TRANGROUP:5A60		       iret
TRANGROUP:5A60 endp	       intret
TRANGROUP:5A60
TRANGROUP:5A61 ; ---------------------------------------------------------------------------
TRANGROUP:5A61 ; START OF FUNCTION CHUNK FOR $M_DISPLAY_H_STRING
TRANGROUP:5A61
TRANGROUP:5A61 m_popf:				       ; ...
TRANGROUP:5A61		       push    cs
TRANGROUP:5A62		       call    near ptr	intret
TRANGROUP:5A65		       jmp     short $MEN128
TRANGROUP:5A65 ; END OF	FUNCTION CHUNK FOR $M_DISPLAY_H_STRING
TRANGROUP:5A67 ; ---------------------------------------------------------------------------
TRANGROUP:5A67
TRANGROUP:5A67 $MIF128:				       ; ...
TRANGROUP:5A67		       push    bp
TRANGROUP:5A68		       push    cx
TRANGROUP:5A69		       call    scan_ctrlz
TRANGROUP:5A6C		       mov     bp, cx
TRANGROUP:5A6E		       pop     cx
TRANGROUP:5A6F		       int     21h	       ; DOS -
TRANGROUP:5A71		       jb      short m_cnt_ok
TRANGROUP:5A73		       cmp     cx, ax
TRANGROUP:5A75		       jz      short m_cnt_ok
TRANGROUP:5A77		       cmp     bp, ax
TRANGROUP:5A79		       clc
TRANGROUP:5A7A		       jnz     short m_cnt_ok
TRANGROUP:5A7C		       mov     ax, cx
TRANGROUP:5A7E
TRANGROUP:5A7E m_cnt_ok:			       ; ...
TRANGROUP:5A7E		       pop     bp
TRANGROUP:5A7F
TRANGROUP:5A7F $MEN128:				       ; ...
TRANGROUP:5A7F		       pop     ds
TRANGROUP:5A80
TRANGROUP:5A80 $MIF127:				       ; ...
TRANGROUP:5A80		       retn
TRANGROUP:5A81
TRANGROUP:5A81 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5A81
TRANGROUP:5A81
TRANGROUP:5A81 proc	       $M_GET_EXT_ERR_39 near  ; ...
TRANGROUP:5A81		       mov     ax, 27h	       ; EXT_ERR_39
TRANGROUP:5A84		       mov     bx, 4
TRANGROUP:5A87		       mov     ch, 1
TRANGROUP:5A89		       retn
TRANGROUP:5A89 endp	       $M_GET_EXT_ERR_39
TRANGROUP:5A89
TRANGROUP:5A8A
TRANGROUP:5A8A ; =============== S U B R O U T I N E =======================================
TRANGROUP:5A8A
TRANGROUP:5A8A
TRANGROUP:5A8A proc	       $M_ADD_CRLF near	       ; ...
TRANGROUP:5A8A		       cmp     dh, 0FFh	       ; utility_msg_class
TRANGROUP:5A8D		       jz      short $MIF134
TRANGROUP:5A8F		       test    dh, 80h	       ; $M_NO_CRLF_MASK
TRANGROUP:5A92		       jnz     short $MIF134
TRANGROUP:5A94		       push    ds
TRANGROUP:5A95		       pop     es
TRANGROUP:5A96		       lea     di, [$M_RT_$M_CRLF] ; [$M_RT+$M_RES_ADDRS.$M_CRLF]
TRANGROUP:5A9A		       mov     cx, 2	       ; $M_CRLF_SIZE
TRANGROUP:5A9D		       call    $M_DISPLAY_STRING
TRANGROUP:5AA0
TRANGROUP:5AA0 $MIF134:				       ; ...
TRANGROUP:5AA0		       retn
TRANGROUP:5AA0 endp	       $M_ADD_CRLF
TRANGROUP:5AA0
TRANGROUP:5AA1
TRANGROUP:5AA1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5AA1
TRANGROUP:5AA1
TRANGROUP:5AA1 proc	       $M_IS_IT_DBCS near      ; ...
TRANGROUP:5AA1		       push    es
TRANGROUP:5AA2		       push    di
TRANGROUP:5AA3		       les     di, [dword ptr ds:$M_RT_$M_DBCS_VEC] ;
TRANGROUP:5AA3					       ; [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]
TRANGROUP:5AA7		       or      di, di
TRANGROUP:5AA9		       jz      short $MIF138
TRANGROUP:5AAB
TRANGROUP:5AAB $MDO139:				       ; ...
TRANGROUP:5AAB		       cmp     [word ptr es:di], 0 ; $M_DBCS_TERM
TRANGROUP:5AAF		       clc
TRANGROUP:5AB0		       jz      short $MIF138
TRANGROUP:5AB2		       cmp     al, [es:di]
TRANGROUP:5AB5		       jb      short $MIF141
TRANGROUP:5AB7		       cmp     al, [es:di+1]
TRANGROUP:5ABB		       ja      short $MIF141
TRANGROUP:5ABD		       stc
TRANGROUP:5ABE
TRANGROUP:5ABE $MIF141:				       ; ...
TRANGROUP:5ABE		       inc     di
TRANGROUP:5ABF		       inc     di
TRANGROUP:5AC0		       jmp     short $MDO139
TRANGROUP:5AC2 ; ---------------------------------------------------------------------------
TRANGROUP:5AC2
TRANGROUP:5AC2 $MIF138:				       ; ...
TRANGROUP:5AC2		       pop     di
TRANGROUP:5AC3		       pop     es
TRANGROUP:5AC4		       retn
TRANGROUP:5AC4 endp	       $M_IS_IT_DBCS
TRANGROUP:5AC4
TRANGROUP:5AC5
TRANGROUP:5AC5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5AC5
TRANGROUP:5AC5
TRANGROUP:5AC5 proc	       $M_CONVERT2ASC near     ; ...
TRANGROUP:5AC5		       pop     [ds:$M_RT_$M_RETURN_ADDR] ; [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
TRANGROUP:5AC5					       ; Save Return Address
TRANGROUP:5AC9		       xor     bx, bx
TRANGROUP:5ACB		       xchg    ax, bx
TRANGROUP:5ACC		       xchg    ax, dx
TRANGROUP:5ACD
TRANGROUP:5ACD $MDO145:				       ; ...
TRANGROUP:5ACD		       div     [ds:$M_RT_$M_DIVISOR] ; word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
TRANGROUP:5AD1		       xchg    ax, bx
TRANGROUP:5AD2		       div     [ds:$M_RT_$M_DIVISOR]
TRANGROUP:5AD6		       cmp     dx, 9
TRANGROUP:5AD9		       jbe     short $MIF146
TRANGROUP:5ADB		       add     dl, 55
TRANGROUP:5ADE		       jmp     short $MEN146
TRANGROUP:5AE0 ; ---------------------------------------------------------------------------
TRANGROUP:5AE0
TRANGROUP:5AE0 $MIF146:				       ; ...
TRANGROUP:5AE0		       add     dl, '0'
TRANGROUP:5AE3
TRANGROUP:5AE3 $MEN146:				       ; ...
TRANGROUP:5AE3		       push    dx
TRANGROUP:5AE4		       inc     cx
TRANGROUP:5AE5		       or      ax, ax
TRANGROUP:5AE7		       jnz     short $MLL149
TRANGROUP:5AE9		       or      bx, bx
TRANGROUP:5AEB		       jz      short $MEN145
TRANGROUP:5AED
TRANGROUP:5AED $MLL149:				       ; ...
TRANGROUP:5AED		       cmp     cx, 3	       ; $M_FIRST_THOU
TRANGROUP:5AF0		       jnz     short $MIF150
TRANGROUP:5AF2		       cmp     [byte ptr si+0Ah], 2Ch ;	',' ;
TRANGROUP:5AF2					       ; [si+$M_SUBLIST_STRUC.$M_S_PAD],','
TRANGROUP:5AF6		       jnz     short $MIF151
TRANGROUP:5AF8		       push    [ds:$M_RT_$M_THOU_SEPARA] ; [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
TRANGROUP:5AFC		       inc     cx
TRANGROUP:5AFD
TRANGROUP:5AFD $MIF151:				       ; ...
TRANGROUP:5AFD		       jmp     short $MEN150
TRANGROUP:5AFF ; ---------------------------------------------------------------------------
TRANGROUP:5AFF
TRANGROUP:5AFF $MIF150:				       ; ...
TRANGROUP:5AFF		       cmp     cx, 7	       ; $M_SECOND_THOU
TRANGROUP:5B02		       jnz     short $MIF153
TRANGROUP:5B04		       cmp     [byte ptr si+0Ah], 2Ch ;	',' ; [si+$M_SUBLIST_STRUC.$M_S_PAD],','
TRANGROUP:5B08		       jnz     short $MIF155
TRANGROUP:5B0A		       push    [ds:$M_RT_$M_THOU_SEPARA] ; [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
TRANGROUP:5B0E		       inc     cx
TRANGROUP:5B0F
TRANGROUP:5B0F $MIF155:				       ; ...
TRANGROUP:5B0F		       jmp     short $MEN150
TRANGROUP:5B11 ; ---------------------------------------------------------------------------
TRANGROUP:5B11
TRANGROUP:5B11 $MIF153:				       ; ...
TRANGROUP:5B11		       cmp     cx, 11	       ; $M_THIRD_THOU
TRANGROUP:5B14		       jnz     short $MEN150
TRANGROUP:5B16		       cmp     [byte ptr si+0Ah], 2Ch ;	',' ;
TRANGROUP:5B16					       ; [si+$M_SUBLIST_STRUC.$M_S_PAD],','
TRANGROUP:5B1A		       jnz     short $MEN150
TRANGROUP:5B1C		       push    [ds:$M_RT_$M_THOU_SEPARA] ; [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
TRANGROUP:5B20		       inc     cx
TRANGROUP:5B21
TRANGROUP:5B21 $MEN150:				       ; ...
TRANGROUP:5B21		       xchg    ax, bx
TRANGROUP:5B22		       xor     dx, dx
TRANGROUP:5B24		       jmp     short $MDO145
TRANGROUP:5B26 ; ---------------------------------------------------------------------------
TRANGROUP:5B26
TRANGROUP:5B26 $MEN145:				       ; ...
TRANGROUP:5B26		       xor     ax, ax
TRANGROUP:5B28		       cwd
TRANGROUP:5B29		       push    [ds:$M_RT_$M_RETURN_ADDR] ; [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
TRANGROUP:5B29					       ; Restore Return	Address
TRANGROUP:5B2D		       retn
TRANGROUP:5B2D endp	       $M_CONVERT2ASC
TRANGROUP:5B2D
TRANGROUP:5B2E
TRANGROUP:5B2E ; =============== S U B R O U T I N E =======================================
TRANGROUP:5B2E
TRANGROUP:5B2E
TRANGROUP:5B2E proc	       $M_DISPLAY_MESSAGE near ; ...
TRANGROUP:5B2E		       xor     dx, dx
TRANGROUP:5B30		       or      cx, cx
TRANGROUP:5B32		       jz      short $MEN167
TRANGROUP:5B34		       mov     ax, 2500h       ; mov ah,"%" ; mov al,0
TRANGROUP:5B37
TRANGROUP:5B37 $MDO167:				       ; ...
TRANGROUP:5B37		       cmp     [es:di],	ah
TRANGROUP:5B3A		       jnz     short $MLL168
TRANGROUP:5B3C		       cmp     [es:di+1], ah
TRANGROUP:5B40		       jz      short $MLL168
TRANGROUP:5B42		       cmp     al, ah
TRANGROUP:5B44		       jnz     short $MEN167
TRANGROUP:5B46
TRANGROUP:5B46 $MLL168:				       ; ...
TRANGROUP:5B46		       mov     al, [es:di]
TRANGROUP:5B49		       call    $M_IS_IT_DBCS
TRANGROUP:5B4C		       jnb     short $MIF169
TRANGROUP:5B4E		       inc     di
TRANGROUP:5B4F
TRANGROUP:5B4F $MIF169:				       ; ...
TRANGROUP:5B4F		       inc     di
TRANGROUP:5B50		       inc     dx
TRANGROUP:5B51		       loop    $MDO167
TRANGROUP:5B53
TRANGROUP:5B53 $MEN167:				       ; ...
TRANGROUP:5B53		       push    si
TRANGROUP:5B54		       xchg    cx, dx
TRANGROUP:5B56		       or      bp, bp
TRANGROUP:5B58		       jz      short $MIF173
TRANGROUP:5B5A		       dec     bp
TRANGROUP:5B5B		       cmp     [ds:$M_RT_$M_MSG_NUM], 0	; [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],$M_NULL
TRANGROUP:5B60		       jnz     short $MIF173
TRANGROUP:5B62
TRANGROUP:5B62 $MDO175:				       ; ...
TRANGROUP:5B62		       mov     al, [si+6]      ; [si+$M_SUBLIST_STRUC.$M_S_ID]
TRANGROUP:5B65		       add     al, 30h ; '0'
TRANGROUP:5B67		       cmp     al, [es:di+1]
TRANGROUP:5B6B		       jnz     short $MSR175
TRANGROUP:5B6D		       jmp     short $MIF173
TRANGROUP:5B6F ; ---------------------------------------------------------------------------
TRANGROUP:5B6F
TRANGROUP:5B6F $MSR175:				       ; ...
TRANGROUP:5B6F		       cmp     al, 30h ; '0'   ; $M_SPECIAL_CASE
TRANGROUP:5B71		       jnz     short $MLL178
TRANGROUP:5B73		       or      dx, dx
TRANGROUP:5B75		       jz      short $MEN175
TRANGROUP:5B77
TRANGROUP:5B77 $MLL178:				       ; ...
TRANGROUP:5B77		       add     si, [si]
TRANGROUP:5B79		       jmp     short $MDO175
TRANGROUP:5B7B ; ---------------------------------------------------------------------------
TRANGROUP:5B7B
TRANGROUP:5B7B $MEN175:				       ; ...
TRANGROUP:5B7B		       cmp     [ds:$M_RT_$M_CLASS], 0FFh ; [$M_RT+$M_RES_ADDRS.$M_CLASS],
TRANGROUP:5B7B					       ; utility_msg_class
TRANGROUP:5B80		       jnz     short $MIF180
TRANGROUP:5B82		       inc     dx
TRANGROUP:5B83		       inc     dx
TRANGROUP:5B84		       dec     cx
TRANGROUP:5B85		       dec     cx
TRANGROUP:5B86		       dec     di
TRANGROUP:5B87		       dec     di
TRANGROUP:5B88		       jmp     short $MIF173
TRANGROUP:5B8A ; ---------------------------------------------------------------------------
TRANGROUP:5B8A
TRANGROUP:5B8A $MIF180:				       ; ...
TRANGROUP:5B8A		       mov     dx, 0FFFFh      ; -1
TRANGROUP:5B8D
TRANGROUP:5B8D $MIF173:				       ; ...
TRANGROUP:5B8D		       push    di
TRANGROUP:5B8E		       sub     di, cx
TRANGROUP:5B90		       call    $M_DISPLAY_STRING
TRANGROUP:5B93		       pop     di
TRANGROUP:5B94		       pop     cx
TRANGROUP:5B95		       jnb     short $MXL3
TRANGROUP:5B97		       jmp     $MEN165
TRANGROUP:5B9A ; ---------------------------------------------------------------------------
TRANGROUP:5B9A
TRANGROUP:5B9A $MXL3:				       ; ...
TRANGROUP:5B9A		       push    cx
TRANGROUP:5B9B		       mov     cx, dx
TRANGROUP:5B9D		       cmp     [byte ptr si+6],	0 ; [si+$M_SUBLIST_STRUC.$M_S_ID],
TRANGROUP:5B9D					       ; $M_SPECIAL_CASE-30h
TRANGROUP:5BA1		       jz      short $MIF187
TRANGROUP:5BA3		       or      cx, cx
TRANGROUP:5BA5		       jz      short $MIF188
TRANGROUP:5BA7		       dec     cx
TRANGROUP:5BA8		       dec     cx
TRANGROUP:5BA9		       inc     di
TRANGROUP:5BAA		       inc     di
TRANGROUP:5BAB		       jmp     short $MEN188
TRANGROUP:5BAD ; ---------------------------------------------------------------------------
TRANGROUP:5BAD
TRANGROUP:5BAD $MIF188:				       ; ...
TRANGROUP:5BAD		       pop     si
TRANGROUP:5BAE
TRANGROUP:5BAE $MEN188:				       ; ...
TRANGROUP:5BAE		       jmp     short $MEN187
TRANGROUP:5BB0 ; ---------------------------------------------------------------------------
TRANGROUP:5BB0
TRANGROUP:5BB0 $MIF187:				       ; ...
TRANGROUP:5BB0		       or      cx, cx
TRANGROUP:5BB2		       jnz     short $MIF192
TRANGROUP:5BB4		       pop     si
TRANGROUP:5BB5		       jmp     short $MEN187
TRANGROUP:5BB7 ; ---------------------------------------------------------------------------
TRANGROUP:5BB7
TRANGROUP:5BB7 $MIF192:				       ; ...
TRANGROUP:5BB7		       cmp     cx, 0FFFFh      ; -1
TRANGROUP:5BBA		       jnz     short $MIF194
TRANGROUP:5BBC		       xor     cx, cx
TRANGROUP:5BBE
TRANGROUP:5BBE $MIF194:				       ; ...
TRANGROUP:5BBE		       or      di, di
TRANGROUP:5BC0
TRANGROUP:5BC0 $MEN187:				       ; ...
TRANGROUP:5BC0		       jz      short $MEN165
TRANGROUP:5BC2		       push    bp
TRANGROUP:5BC3		       push    di
TRANGROUP:5BC4		       push    es
TRANGROUP:5BC5		       push    cx
TRANGROUP:5BC6		       xor     cx, cx
TRANGROUP:5BC8		       cmp     [ds:$M_RT_$M_MSG_NUM], 0	; [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],$M_NULL
TRANGROUP:5BCD		       jnz     short $MIF199
TRANGROUP:5BCF		       test    [byte ptr si+7],	0Fh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG]
TRANGROUP:5BD3		       jnz     short $MIF200
TRANGROUP:5BD5		       les     di, [si+2]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE]
TRANGROUP:5BD8		       call    $M_CHAR_REPLACE
TRANGROUP:5BDB		       jmp     short $MEN202
TRANGROUP:5BDD ; ---------------------------------------------------------------------------
TRANGROUP:5BDD
TRANGROUP:5BDD $MIF200:				       ; ...
TRANGROUP:5BDD		       test    [byte ptr si+7],	0Dh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG]
TRANGROUP:5BDD					       ; not Sgn_Bin_Type and $M_TYPE_MASK
TRANGROUP:5BE1		       jz      short $MLL202
TRANGROUP:5BE3		       test    [byte ptr si+7],	0Eh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5BE3					       ; NOT Unsgn_Bin_Type AND	$M_TYPE_MASK
TRANGROUP:5BE7		       jz      short $MLL202
TRANGROUP:5BE9		       test    [byte ptr si+7],	0Ch ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5BE9					       ; not Bin_Hex_Type and $M_TYPE_MASK
TRANGROUP:5BED		       jnz     short $MIF202
TRANGROUP:5BEF
TRANGROUP:5BEF $MLL202:				       ; ...
TRANGROUP:5BEF		       les     di, [si+2]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE]
TRANGROUP:5BF2		       call    $M_BIN2ASC_REPLACE
TRANGROUP:5BF5		       jmp     short $MEN202
TRANGROUP:5BF7 ; ---------------------------------------------------------------------------
TRANGROUP:5BF7
TRANGROUP:5BF7 $MIF202:				       ; ...
TRANGROUP:5BF7		       test    [byte ptr si+7],	0Bh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5BF7					       ; not Date_Type and $M_TYPE_MASK
TRANGROUP:5BFB		       jnz     short $MIF204
TRANGROUP:5BFD		       call    $M_DATE_REPLACE
TRANGROUP:5C00		       jmp     short $MEN202
TRANGROUP:5C02 ; ---------------------------------------------------------------------------
TRANGROUP:5C02
TRANGROUP:5C02 $MIF204:				       ; ...
TRANGROUP:5C02		       call    $M_TIME_REPLACE
TRANGROUP:5C05
TRANGROUP:5C05 $MEN202:				       ; ...
TRANGROUP:5C05		       call    $M_DISPLAY_REPLACE
TRANGROUP:5C08		       jmp     short $MEN199
TRANGROUP:5C0A ; ---------------------------------------------------------------------------
TRANGROUP:5C0A
TRANGROUP:5C0A $MIF199:				       ; ...
TRANGROUP:5C0A		       call    $M_EXT_PAR_REPLACE
TRANGROUP:5C0D
TRANGROUP:5C0D $MEN199:				       ; ...
TRANGROUP:5C0D		       jb      short $MIF211
TRANGROUP:5C0F		       pop     cx
TRANGROUP:5C10		       pop     es
TRANGROUP:5C11		       pop     di
TRANGROUP:5C12		       pop     bp
TRANGROUP:5C13		       pop     si
TRANGROUP:5C14		       jmp     short $MEN211
TRANGROUP:5C16 ; ---------------------------------------------------------------------------
TRANGROUP:5C16
TRANGROUP:5C16 $MIF211:				       ; ...
TRANGROUP:5C16		       add     sp, 10
TRANGROUP:5C19		       stc
TRANGROUP:5C1A		       jmp     short $MEN165
TRANGROUP:5C1C ; ---------------------------------------------------------------------------
TRANGROUP:5C1C
TRANGROUP:5C1C $MEN211:				       ; ...
TRANGROUP:5C1C		       cmp     [ds:$M_RT_$M_MSG_NUM], 0	; [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],$M_NULL
TRANGROUP:5C21		       jnz     short $MEN165
TRANGROUP:5C23		       jb      short $MEN165
TRANGROUP:5C25		       jmp     $M_DISPLAY_MESSAGE
TRANGROUP:5C28 ; ---------------------------------------------------------------------------
TRANGROUP:5C28
TRANGROUP:5C28 $MEN165:				       ; ...
TRANGROUP:5C28		       mov     [ds:$M_RT_$M_MSG_NUM], 0	; [$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
TRANGROUP:5C2E		       retn
TRANGROUP:5C2E endp	       $M_DISPLAY_MESSAGE
TRANGROUP:5C2E
TRANGROUP:5C2F
TRANGROUP:5C2F ; =============== S U B R O U T I N E =======================================
TRANGROUP:5C2F
TRANGROUP:5C2F
TRANGROUP:5C2F proc	       $M_EXT_PAR_REPLACE near ; ...
TRANGROUP:5C2F		       xor     dx, dx
TRANGROUP:5C31		       mov     ax, [ds:$M_RT_$M_MSG_NUM] ; [$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
TRANGROUP:5C34		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10
TRANGROUP:5C3A		       call    $M_CONVERT2ASC
TRANGROUP:5C3D
TRANGROUP:5C3D $MDO215:				       ; ...
TRANGROUP:5C3D		       pop     ax
TRANGROUP:5C3E		       mov     [byte ptr ds:$M_RT_$M_TEMP_BUF+bx], al ;
TRANGROUP:5C3E					       ; [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5C42		       inc     bx
TRANGROUP:5C43		       cmp     bx, 64	       ; $M_TEMP_BUF_SZ
TRANGROUP:5C46		       jnz     short $MIF216
TRANGROUP:5C48		       call    $M_FLUSH_BUF
TRANGROUP:5C4B
TRANGROUP:5C4B $MIF216:				       ; ...
TRANGROUP:5C4B		       dec     cl
TRANGROUP:5C4D		       jnz     short $MDO215
TRANGROUP:5C4F		       mov     ax, 0A0Dh       ; $M_CR_LF
TRANGROUP:5C52		       mov     [ds:$M_RT_$M_TEMP_BUF+bx], ax ;
TRANGROUP:5C52					       ; [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5C56		       inc     bx
TRANGROUP:5C57		       inc     bx
TRANGROUP:5C58		       call    $M_FLUSH_BUF
TRANGROUP:5C5B		       retn
TRANGROUP:5C5B endp	       $M_EXT_PAR_REPLACE
TRANGROUP:5C5B
TRANGROUP:5C5C
TRANGROUP:5C5C ; =============== S U B R O U T I N E =======================================
TRANGROUP:5C5C
TRANGROUP:5C5C
TRANGROUP:5C5C proc	       $M_DISPLAY_REPLACE near ; ...
TRANGROUP:5C5C		       xor     bx, bx
TRANGROUP:5C5E		       cmp     [byte ptr si+6],	0 ; [si+$M_SUBLIST_STRUC.$M_S_ID]
TRANGROUP:5C62		       jnz     short $MIF276
TRANGROUP:5C64		       mov     [ds:$M_RT_$M_TEMP_BUF+bx], 2D20h	;
TRANGROUP:5C64					       ; [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],$M_SPACE_HYP
TRANGROUP:5C6A		       inc     bx
TRANGROUP:5C6B		       inc     bx
TRANGROUP:5C6C		       mov     [byte ptr ds:$M_RT_$M_TEMP_BUF+bx], 20h ; ' ' ;
TRANGROUP:5C6C					       ; [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],$M_SPACE
TRANGROUP:5C71		       inc     bx
TRANGROUP:5C72		       call    $M_FLUSH_BUF
TRANGROUP:5C75
TRANGROUP:5C75 $MIF276:				       ; ...
TRANGROUP:5C75		       pop     bp
TRANGROUP:5C76		       xor     bx, bx
TRANGROUP:5C78		       xor     dx, dx
TRANGROUP:5C7A		       mov     [ds:$M_RT_$M_SIZE], cl ;	[$M_RT+$M_RES_ADDRS.$M_SIZE]
TRANGROUP:5C7E		       mov     al, [si+9]      ; [si+$M_SUBLIST_STRUC.$M_S_MINW]
TRANGROUP:5C81		       cmp     al, cl
TRANGROUP:5C83		       jbe     short $MIF278
TRANGROUP:5C85		       sub     al, cl
TRANGROUP:5C87		       mov     dh, al
TRANGROUP:5C89		       test    [byte ptr si+7],	80h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG]
TRANGROUP:5C8D		       jz      short $MIF278
TRANGROUP:5C8F
TRANGROUP:5C8F $MDO280:				       ; ...
TRANGROUP:5C8F		       mov     al, [si+0Ah]    ; [si+$M_SUBLIST_STRUC.$M_S_PAD]
TRANGROUP:5C92		       mov     [byte ptr ds:$M_RT_$M_TEMP_BUF+bx], al ;
TRANGROUP:5C92					       ; [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5C96		       inc     bx
TRANGROUP:5C97		       cmp     bx, 64	       ; $M_TEMP_BUF_SZ
TRANGROUP:5C9A		       jnz     short $MIF281
TRANGROUP:5C9C		       call    $M_FLUSH_BUF
TRANGROUP:5C9F
TRANGROUP:5C9F $MIF281:				       ; ...
TRANGROUP:5C9F		       dec     dh
TRANGROUP:5CA1		       jnz     short $MDO280
TRANGROUP:5CA3
TRANGROUP:5CA3 $MIF278:				       ; ...
TRANGROUP:5CA3		       cmp     [byte ptr si+8],	0 ; [si+$M_SUBLIST_STRUC.$M_S_MAXW],$M_UNLIM_W
TRANGROUP:5CA7		       jz      short $MIF286
TRANGROUP:5CA9		       cmp     [si+8], cl      ; [si+$M_SUBLIST_STRUC.$M_S_MAXW]
TRANGROUP:5CAC		       jnb     short $MIF286
TRANGROUP:5CAE		       sub     cl, [si+8]
TRANGROUP:5CB1		       mov     dl, cl
TRANGROUP:5CB3		       mov     cl, [si+8]
TRANGROUP:5CB6
TRANGROUP:5CB6 $MIF286:				       ; ...
TRANGROUP:5CB6		       or      cx, cx
TRANGROUP:5CB8		       jz      short $MIF290
TRANGROUP:5CBA
TRANGROUP:5CBA $MDO291:				       ; ...
TRANGROUP:5CBA		       test    [byte ptr si+7],	0Fh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5CBA					       ; not Char_Type not $M_TYPE_MASK
TRANGROUP:5CBE		       jnz     short $MIF292
TRANGROUP:5CC0		       test    [byte ptr si+7],	10h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5CC0					       ; Char_field_ASCIIZ and $M_SIZE_MASK
TRANGROUP:5CC4		       jz      short $MIF292
TRANGROUP:5CC6		       mov     al, [es:di]
TRANGROUP:5CC9		       inc     di
TRANGROUP:5CCA		       jmp     short $MEN292
TRANGROUP:5CCC ; ---------------------------------------------------------------------------
TRANGROUP:5CCC
TRANGROUP:5CCC $MIF292:				       ; ...
TRANGROUP:5CCC		       pop     ax
TRANGROUP:5CCD
TRANGROUP:5CCD $MEN292:				       ; ...
TRANGROUP:5CCD		       mov     [byte ptr ds:$M_RT_$M_TEMP_BUF+bx], al ;
TRANGROUP:5CCD					       ; [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5CD1		       inc     bx
TRANGROUP:5CD2		       cmp     bx, 64	       ; $M_TEMP_BUF_SZ
TRANGROUP:5CD5		       jnz     short $MIF295
TRANGROUP:5CD7		       call    $M_FLUSH_BUF
TRANGROUP:5CDA
TRANGROUP:5CDA $MIF295:				       ; ...
TRANGROUP:5CDA		       dec     cl
TRANGROUP:5CDC		       jnz     short $MDO291
TRANGROUP:5CDE
TRANGROUP:5CDE $MIF290:				       ; ...
TRANGROUP:5CDE		       test    [byte ptr si+7],	80h ;
TRANGROUP:5CDE					       ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],Right_Align
TRANGROUP:5CE2		       jnz     short $MIF299
TRANGROUP:5CE4		       or      dh, dh
TRANGROUP:5CE6		       jz      short $MIF299
TRANGROUP:5CE8
TRANGROUP:5CE8 $MDO301:				       ; ...
TRANGROUP:5CE8		       mov     al, [si+0Ah]    ; [si+$M_SUBLIST_STRUC.$M_S_PAD]
TRANGROUP:5CEB		       mov     [byte ptr ds:$M_RT_$M_TEMP_BUF+bx], al ;
TRANGROUP:5CEB					       ; [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5CEF		       inc     bx
TRANGROUP:5CF0		       cmp     bx, 64	       ; $M_TEMP_BUF_SZ
TRANGROUP:5CF3		       jnz     short $MIF302
TRANGROUP:5CF5		       call    $M_FLUSH_BUF
TRANGROUP:5CF8
TRANGROUP:5CF8 $MIF302:				       ; ...
TRANGROUP:5CF8		       dec     dh
TRANGROUP:5CFA		       jnz     short $MDO301
TRANGROUP:5CFC
TRANGROUP:5CFC $MIF299:				       ; ...
TRANGROUP:5CFC		       test    [byte ptr si+7],	0Fh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5CFC					       ; not Char_Type and $M_TYPE_MASK
TRANGROUP:5D00		       jnz     short $MIF307
TRANGROUP:5D02		       test    [byte ptr si+7],	10h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5D02					       ; Char_field_ASCIIZ and $M_SIZE_MASK
TRANGROUP:5D06		       jz      short $MIF307
TRANGROUP:5D08		       jmp     short $MEN307
TRANGROUP:5D0A ; ---------------------------------------------------------------------------
TRANGROUP:5D0A
TRANGROUP:5D0A $MIF307:				       ; ...
TRANGROUP:5D0A		       or      dl, dl
TRANGROUP:5D0C		       jz      short $MEN307
TRANGROUP:5D0E
TRANGROUP:5D0E $MDO310:				       ; ...
TRANGROUP:5D0E		       pop     [ds:$M_RT_$M_RETURN_ADDR] ;
TRANGROUP:5D0E					       ; [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
TRANGROUP:5D12		       dec     dl
TRANGROUP:5D14		       jnz     short $MDO310
TRANGROUP:5D16
TRANGROUP:5D16 $MEN307:				       ; ...
TRANGROUP:5D16		       call    $M_FLUSH_BUF
TRANGROUP:5D19		       push    bp
TRANGROUP:5D1A		       retn
TRANGROUP:5D1A endp	       $M_DISPLAY_REPLACE
TRANGROUP:5D1A
TRANGROUP:5D1B
TRANGROUP:5D1B ; =============== S U B R O U T I N E =======================================
TRANGROUP:5D1B
TRANGROUP:5D1B
TRANGROUP:5D1B proc	       $M_FLUSH_BUF near       ; ...
TRANGROUP:5D1B		       push    cx
TRANGROUP:5D1C		       push    es
TRANGROUP:5D1D		       push    di
TRANGROUP:5D1E		       push    ds
TRANGROUP:5D1F		       pop     es
TRANGROUP:5D20		       mov     cx, bx
TRANGROUP:5D22		       xor     bx, bx
TRANGROUP:5D24		       lea     di, [$M_RT_$M_TEMP_BUF] ; [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5D28		       call    $M_DISPLAY_STRING
TRANGROUP:5D2B		       jb      short $MIF314
TRANGROUP:5D2D		       pop     di
TRANGROUP:5D2E		       pop     es
TRANGROUP:5D2F		       pop     cx
TRANGROUP:5D30		       retn
TRANGROUP:5D31 ; ---------------------------------------------------------------------------
TRANGROUP:5D31
TRANGROUP:5D31 $MIF314:				       ; ...
TRANGROUP:5D31		       add     sp, 6
TRANGROUP:5D34		       stc
TRANGROUP:5D35		       retn
TRANGROUP:5D35 endp	       $M_FLUSH_BUF
TRANGROUP:5D35
TRANGROUP:5D36
TRANGROUP:5D36 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5D36
TRANGROUP:5D36
TRANGROUP:5D36 proc	       $M_CHAR_REPLACE near    ; ...
TRANGROUP:5D36		       pop     bp
TRANGROUP:5D37		       test    [byte ptr si+7],	30h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5D37					       ; not Char_Field_Char and $M_SIZE_MASK
TRANGROUP:5D3B		       jnz     short $MIF317
TRANGROUP:5D3D		       mov     al, [es:di]
TRANGROUP:5D40		       push    ax
TRANGROUP:5D41		       inc     cx
TRANGROUP:5D42		       call    $M_IS_IT_DBCS
TRANGROUP:5D45		       jnb     short $MIF318
TRANGROUP:5D47		       mov     al, [es:di+1]
TRANGROUP:5D4B		       push    ax
TRANGROUP:5D4C		       clc
TRANGROUP:5D4D
TRANGROUP:5D4D $MIF318:				       ; ...
TRANGROUP:5D4D		       jmp     short $MEN317
TRANGROUP:5D4F ; ---------------------------------------------------------------------------
TRANGROUP:5D4F
TRANGROUP:5D4F $MIF317:				       ; ...
TRANGROUP:5D4F		       mov     al, [es:di]
TRANGROUP:5D52		       or      al, al
TRANGROUP:5D54		       jz      short $MEN321
TRANGROUP:5D56		       inc     di
TRANGROUP:5D57		       inc     cx
TRANGROUP:5D58		       jmp     short $MIF317
TRANGROUP:5D5A ; ---------------------------------------------------------------------------
TRANGROUP:5D5A
TRANGROUP:5D5A $MEN321:				       ; ...
TRANGROUP:5D5A		       sub     di, cx
TRANGROUP:5D5C
TRANGROUP:5D5C $MEN317:				       ; ...
TRANGROUP:5D5C		       push    bp
TRANGROUP:5D5D		       retn
TRANGROUP:5D5D endp	       $M_CHAR_REPLACE
TRANGROUP:5D5D
TRANGROUP:5D5E
TRANGROUP:5D5E ; =============== S U B R O U T I N E =======================================
TRANGROUP:5D5E
TRANGROUP:5D5E
TRANGROUP:5D5E proc	       $M_BIN2ASC_REPLACE near ; ...
TRANGROUP:5D5E		       pop     bp
TRANGROUP:5D5F		       xor     ax, ax
TRANGROUP:5D61		       cwd
TRANGROUP:5D62		       mov     [ds:$M_RT_$M_DIVISOR], 16 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],
TRANGROUP:5D62					       ; $M_BASE16
TRANGROUP:5D68		       xor     bx, bx
TRANGROUP:5D6A		       test    [byte ptr si+7],	20h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5D6A					       ; not $M_BYTE and $M_SIZE_MASK
TRANGROUP:5D6E		       jnz     short $MIF325
TRANGROUP:5D70		       mov     al, [es:di]
TRANGROUP:5D73		       test    [byte ptr si+7],	0Dh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5D73					       ; not Sgn_Bin_Type and $M_TYPE_MASK
TRANGROUP:5D77		       jnz     short $MIF326
TRANGROUP:5D79		       test    al, 80h	       ; Is this number	negative?
TRANGROUP:5D7B		       jz      short $MIF327   ; No
TRANGROUP:5D7D		       inc     bx
TRANGROUP:5D7E		       and     al, 7Fh	       ; Make it positive
TRANGROUP:5D80
TRANGROUP:5D80 $MIF327:				       ; ...
TRANGROUP:5D80		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],
TRANGROUP:5D80					       ; $M_BASE10
TRANGROUP:5D86
TRANGROUP:5D86 $MIF326:				       ; ...
TRANGROUP:5D86		       test    [byte ptr si+7],	0Eh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5D86					       ; not Unsgn_Bin_Type and	$M_TYPE_MASK
TRANGROUP:5D8A		       jnz     short $MIF330
TRANGROUP:5D8C		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],
TRANGROUP:5D8C					       ; $M_BASE10
TRANGROUP:5D92
TRANGROUP:5D92 $MIF330:				       ; ...
TRANGROUP:5D92		       jmp     short $MEN333
TRANGROUP:5D94 ; ---------------------------------------------------------------------------
TRANGROUP:5D94
TRANGROUP:5D94 $MIF325:				       ; ...
TRANGROUP:5D94		       test    [byte ptr si+7],	10h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5D94					       ; not $M_WORD and $M_SIZE_MASK
TRANGROUP:5D98		       jnz     short $MIF333
TRANGROUP:5D9A		       mov     ax, [es:di]
TRANGROUP:5D9D		       test    [byte ptr si+7],	0Dh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5D9D					       ; not Sgn_Bin_Type and $M_TYPE_MASK
TRANGROUP:5DA1		       jnz     short $MIF334
TRANGROUP:5DA3		       test    ah, 80h	       ; Is this number	negative?
TRANGROUP:5DA6		       jz      short $MIF335   ; No
TRANGROUP:5DA8		       inc     bx
TRANGROUP:5DA9		       and     ah, 7Fh	       ; Make it positive
TRANGROUP:5DAC
TRANGROUP:5DAC $MIF335:				       ; ...
TRANGROUP:5DAC		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10
TRANGROUP:5DB2
TRANGROUP:5DB2 $MIF334:				       ; ...
TRANGROUP:5DB2		       test    [byte ptr si+7],	0Eh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5DB2					       ; not Unsgn_Bin_Type and	$M_TYPE_MASK
TRANGROUP:5DB6		       jnz     short $MIF338
TRANGROUP:5DB8		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10
TRANGROUP:5DBE
TRANGROUP:5DBE $MIF338:				       ; ...
TRANGROUP:5DBE		       jmp     short $MEN333
TRANGROUP:5DC0 ; ---------------------------------------------------------------------------
TRANGROUP:5DC0
TRANGROUP:5DC0 $MIF333:				       ; ...
TRANGROUP:5DC0		       mov     ax, [es:di]
TRANGROUP:5DC3		       mov     dx, [es:di+2]
TRANGROUP:5DC7		       test    [byte ptr si+7],	0Dh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5DC7					       ; not Sgn_Bin_Type and $M_TYPE_MASK
TRANGROUP:5DCB		       jnz     short $MIF341
TRANGROUP:5DCD		       test    dh, 80h	       ; Is this number	negative?
TRANGROUP:5DD0		       jz      short $MIF342   ; No
TRANGROUP:5DD2		       inc     bx
TRANGROUP:5DD3		       and     dh, 7Fh	       ; Make it positive
TRANGROUP:5DD6
TRANGROUP:5DD6 $MIF342:				       ; ...
TRANGROUP:5DD6		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10
TRANGROUP:5DDC
TRANGROUP:5DDC $MIF341:				       ; ...
TRANGROUP:5DDC		       test    [byte ptr si+7],	0Eh ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5DDC					       ; not Unsgn_Bin_Type and	$M_TYPE_MASK
TRANGROUP:5DE0		       jnz     short $MEN333
TRANGROUP:5DE2		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],$M_BASE10
TRANGROUP:5DE8
TRANGROUP:5DE8 $MEN333:				       ; ...
TRANGROUP:5DE8		       test    [byte ptr si+7],	40h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG]
TRANGROUP:5DE8					       ; (Custom/International flag for	thousand separator)
TRANGROUP:5DEC		       jz      short $MEN325
TRANGROUP:5DEE		       push    ax
TRANGROUP:5DEF		       push    dx
TRANGROUP:5DF0		       mov     ah, 38h
TRANGROUP:5DF2		       xor     al, al
TRANGROUP:5DF4		       lea     dx, [$M_RT_$M_TEMP_BUF] ; lea dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5DF8		       int     21h	       ; DOS - 2+ - GET	COUNTRY-DEPENDENT INFORMATION
TRANGROUP:5DF8					       ; get current-country info
TRANGROUP:5DF8					       ; DS:DX -> buffer for returned info
TRANGROUP:5DFA		       jnb     short $MEN341
TRANGROUP:5DFC		       mov     [byte ptr ds:$M_RT_$M_THOU_SEPARA], 2Ch ; ',' ;
TRANGROUP:5DFC					       ; [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA],','
TRANGROUP:5E01
TRANGROUP:5E01 $MEN341:				       ; ...
TRANGROUP:5E01		       mov     al, [si+0Ah]    ; [si+$M_SUBLIST_STRUC.$M_S_PAD]
TRANGROUP:5E04		       mov     di, ax
TRANGROUP:5E06		       pop     dx
TRANGROUP:5E07		       pop     ax
TRANGROUP:5E08		       mov     [byte ptr si+0Ah], 2Ch ;	',' ; [si+$M_SUBLIST_STRUC.$M_S_PAD],','
TRANGROUP:5E0C		       call    $M_CONVERT2ASC
TRANGROUP:5E0F		       mov     ax, di
TRANGROUP:5E11		       mov     [si+0Ah], al    ; [si+$M_SUBLIST_STRUC.$M_S_PAD],al
TRANGROUP:5E14		       jmp     short $MEN345
TRANGROUP:5E16 ; ---------------------------------------------------------------------------
TRANGROUP:5E16
TRANGROUP:5E16 $MEN325:				       ; ...
TRANGROUP:5E16		       call    $M_CONVERT2ASC
TRANGROUP:5E19
TRANGROUP:5E19 $MEN345:				       ; ...
TRANGROUP:5E19		       or      bx, bx
TRANGROUP:5E1B		       jz      short $MIF349
TRANGROUP:5E1D		       mov     dx, '-'         ; $M_NEG_SIGN
TRANGROUP:5E20		       push    dx
TRANGROUP:5E21
TRANGROUP:5E21 $MIF349:				       ; ...
TRANGROUP:5E21		       push    bp
TRANGROUP:5E22		       retn
TRANGROUP:5E22 endp	       $M_BIN2ASC_REPLACE
TRANGROUP:5E22
TRANGROUP:5E23
TRANGROUP:5E23 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5E23
TRANGROUP:5E23
TRANGROUP:5E23 proc	       $M_DATE_REPLACE near    ; ...
TRANGROUP:5E23		       pop     bp
TRANGROUP:5E24		       mov     [ds:$M_RT_$M_DIVISOR], 10
TRANGROUP:5E2A		       call    $M_GET_DATE
TRANGROUP:5E2D		       xor     ax, ax
TRANGROUP:5E2F		       cwd
TRANGROUP:5E30		       cmp     [ds:$M_RT_$M_TEMP_BUF], 0 ; [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]
TRANGROUP:5E35		       jnz     short $MIF351
TRANGROUP:5E37		       call    $M_YEAR
TRANGROUP:5E3A		       call    $M_CONVERTDATE
TRANGROUP:5E3D		       push    [ds:$M_RT_$M_DATE_SEPARA]
TRANGROUP:5E41		       inc     cx
TRANGROUP:5E42		       xor     ax, ax
TRANGROUP:5E44		       mov     al, [si+5]
TRANGROUP:5E47		       call    $M_CONVERTDATE
TRANGROUP:5E4A		       push    [ds:$M_RT_$M_DATE_SEPARA]
TRANGROUP:5E4E		       inc     cx
TRANGROUP:5E4F		       mov     al, [si+4]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
TRANGROUP:5E52		       call    $M_CONVERTDATE
TRANGROUP:5E55
TRANGROUP:5E55 $MIF351:				       ; ...
TRANGROUP:5E55		       cmp     [ds:$M_RT_$M_TEMP_BUF], 1 ; [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]
TRANGROUP:5E5A		       jnz     short $MIF353
TRANGROUP:5E5C		       call    $M_YEAR
TRANGROUP:5E5F		       call    $M_CONVERTDATE
TRANGROUP:5E62		       push    [ds:$M_RT_$M_DATE_SEPARA]
TRANGROUP:5E66		       inc     cx
TRANGROUP:5E67		       xor     ax, ax
TRANGROUP:5E69		       mov     al, [si+4]
TRANGROUP:5E6C		       call    $M_CONVERTDATE
TRANGROUP:5E6F		       push    [ds:$M_RT_$M_DATE_SEPARA]
TRANGROUP:5E73		       inc     cx
TRANGROUP:5E74		       mov     al, [si+5]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
TRANGROUP:5E77		       call    $M_CONVERTDATE
TRANGROUP:5E7A
TRANGROUP:5E7A $MIF353:				       ; ...
TRANGROUP:5E7A		       cmp     [ds:$M_RT_$M_TEMP_BUF], 2 ; [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]
TRANGROUP:5E7F		       jnz     short $MIF355
TRANGROUP:5E81		       mov     al, [si+5]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
TRANGROUP:5E84		       call    $M_CONVERTDATE
TRANGROUP:5E87		       push    [ds:$M_RT_$M_DATE_SEPARA]
TRANGROUP:5E8B		       inc     cx
TRANGROUP:5E8C		       mov     al, [si+4]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
TRANGROUP:5E8F		       call    $M_CONVERTDATE
TRANGROUP:5E92		       push    [ds:$M_RT_$M_DATE_SEPARA] ;
TRANGROUP:5E92					       ; [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
TRANGROUP:5E96		       inc     cx
TRANGROUP:5E97		       call    $M_YEAR
TRANGROUP:5E9A		       call    $M_CONVERTDATE
TRANGROUP:5E9D
TRANGROUP:5E9D $MIF355:				       ; ...
TRANGROUP:5E9D		       push    bp
TRANGROUP:5E9E		       retn
TRANGROUP:5E9E endp	       $M_DATE_REPLACE
TRANGROUP:5E9E
TRANGROUP:5E9F
TRANGROUP:5E9F ; =============== S U B R O U T I N E =======================================
TRANGROUP:5E9F
TRANGROUP:5E9F
TRANGROUP:5E9F proc	       $M_GET_DATE near	       ; ...
TRANGROUP:5E9F		       mov     ax, 3800h       ; DOS_GET_COUNTRY*256
TRANGROUP:5EA2		       lea     dx, [$M_RT_$M_TEMP_BUF] ; [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5EA6		       int     21h	       ; DOS - 2+ - GET	COUNTRY-DEPENDENT INFORMATION
TRANGROUP:5EA6					       ; get current-country info
TRANGROUP:5EA6					       ; DS:DX -> buffer for returned info
TRANGROUP:5EA8		       jnb     short $MIF357
TRANGROUP:5EAA		       mov     [ds:$M_RT_$M_TEMP_BUF], 0 ; [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0
TRANGROUP:5EB0		       mov     [byte ptr ds:$M_RT_$M_DATE_SEPARA], 2Dh ; '-' ;
TRANGROUP:5EB0					       ; [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-'
TRANGROUP:5EB5
TRANGROUP:5EB5 $MIF357:				       ; ...
TRANGROUP:5EB5		       retn
TRANGROUP:5EB5 endp	       $M_GET_DATE
TRANGROUP:5EB5
TRANGROUP:5EB6
TRANGROUP:5EB6 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5EB6
TRANGROUP:5EB6
TRANGROUP:5EB6 proc	       $M_YEAR near	       ; ...
TRANGROUP:5EB6		       mov     ax, [si+2]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE]
TRANGROUP:5EB9		       test    [byte ptr si+7],	10h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5EB9					       ; Date_MDY_4 and	$M_DATE_MASK
TRANGROUP:5EBD		       jnz     short $MIF359   ; not 2 digits year
TRANGROUP:5EBF		       cmp     ax, 99
TRANGROUP:5EC2		       jbe     short $MIF359
TRANGROUP:5EC4		       mov     ax, 99
TRANGROUP:5EC7
TRANGROUP:5EC7 $MIF359:				       ; ...
TRANGROUP:5EC7		       retn
TRANGROUP:5EC7 endp	       $M_YEAR
TRANGROUP:5EC7
TRANGROUP:5EC8
TRANGROUP:5EC8 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5EC8
TRANGROUP:5EC8
TRANGROUP:5EC8 proc	       $M_CONVERTDATE near     ; ...
TRANGROUP:5EC8		       pop     [ds:$M_RT_$M_TEMP_BUF] ;	[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5EC8					       ; Save return address
TRANGROUP:5ECC		       mov     [ds:$M_RT_$M_SIZE], cl
TRANGROUP:5ED0		       call    $M_CONVERT2ASC
TRANGROUP:5ED3		       dec     cx
TRANGROUP:5ED4		       cmp     cl, [ds:$M_RT_$M_SIZE] ;	[$M_RT+$M_RES_ADDRS.$M_SIZE]
TRANGROUP:5ED8		       jnz     short $MIF363
TRANGROUP:5EDA		       mov     ax, 30h ; '0'   ; $M_TIMEDATE_PAD
TRANGROUP:5EDD		       push    ax	       ; Save pad character
TRANGROUP:5EDE		       inc     cx	       ; Count it
TRANGROUP:5EDF
TRANGROUP:5EDF $MIF363:				       ; ...
TRANGROUP:5EDF		       inc     cx
TRANGROUP:5EE0		       push    [ds:$M_RT_$M_TEMP_BUF] ;	[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5EE0					       ; Restore return	address
TRANGROUP:5EE4		       retn
TRANGROUP:5EE4 endp	       $M_CONVERTDATE
TRANGROUP:5EE4
TRANGROUP:5EE5
TRANGROUP:5EE5 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5EE5
TRANGROUP:5EE5
TRANGROUP:5EE5 proc	       $M_TIME_REPLACE near    ; ...
TRANGROUP:5EE5		       pop     bp
TRANGROUP:5EE6		       mov     [ds:$M_RT_$M_DIVISOR], 10 ; [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ;	$M_BASE10
TRANGROUP:5EEC		       call    $M_GET_TIME
TRANGROUP:5EEF		       test    [byte ptr si+7],	1 ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5EEF					       ; Time_Cty_Type and $M_TIME_MASK
TRANGROUP:5EF3		       jz      short $MIF365
TRANGROUP:5EF5		       cmp     [byte ptr ds:$M_RT_$M_TIME_FORMAT], 0 ; byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT]
TRANGROUP:5EFA		       jnz     short $MIF365   ; 24 hours time format
TRANGROUP:5EFC		       mov     al, [si+2]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE]
TRANGROUP:5EFF		       cmp     al, 12
TRANGROUP:5F01		       jl      short $MLL367
TRANGROUP:5F03		       cmp     al, 23
TRANGROUP:5F05		       jle     short $MIF367
TRANGROUP:5F07
TRANGROUP:5F07 $MLL367:				       ; ...
TRANGROUP:5F07		       mov     al, 'a'         ; $M_AM
TRANGROUP:5F09		       push    ax
TRANGROUP:5F0A		       inc     cx
TRANGROUP:5F0B		       jmp     short $MIF365
TRANGROUP:5F0D ; ---------------------------------------------------------------------------
TRANGROUP:5F0D
TRANGROUP:5F0D $MIF367:				       ; ...
TRANGROUP:5F0D		       mov     al, 'p'         ; $M_PM
TRANGROUP:5F0F		       push    ax
TRANGROUP:5F10		       inc     cx
TRANGROUP:5F11
TRANGROUP:5F11 $MIF365:				       ; ...
TRANGROUP:5F11		       xor     ax, ax
TRANGROUP:5F13		       cwd		       ; dx = 0
TRANGROUP:5F14		       test    [byte ptr si+7],	20h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5F14					       ; Time_HHMMSSHH_Cty and $M_SIZE_MASK
TRANGROUP:5F18		       jz      short $MIF372
TRANGROUP:5F1A		       mov     al, [si+5]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
TRANGROUP:5F1D		       call    $M_CONVERTTIME
TRANGROUP:5F20		       push    [ds:$M_RT_$M_DECI_SEPARA] ; [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]
TRANGROUP:5F24		       inc     cx
TRANGROUP:5F25
TRANGROUP:5F25 $MIF372:				       ; ...
TRANGROUP:5F25		       test    [byte ptr si+7],	20h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5F25					       ; Time_HHMMSSHH_Cty and $M_SIZE_MASK
TRANGROUP:5F29		       jnz     short $MLL374
TRANGROUP:5F2B		       test    [byte ptr si+7],	10h ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5F2B					       ; Time_HHMMSS_Cty AND $M_SIZE_MASK
TRANGROUP:5F2F		       jz      short $MIF374
TRANGROUP:5F31
TRANGROUP:5F31 $MLL374:				       ; ...
TRANGROUP:5F31		       mov     al, [si+4]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
TRANGROUP:5F34		       call    $M_CONVERTTIME
TRANGROUP:5F37		       push    [ds:$M_RT_$M_TIME_SEPARA] ; [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
TRANGROUP:5F3B		       inc     cx
TRANGROUP:5F3C
TRANGROUP:5F3C $MIF374:				       ; ...
TRANGROUP:5F3C		       mov     al, [si+3]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE+1]
TRANGROUP:5F3F		       call    $M_CONVERTTIME
TRANGROUP:5F42		       push    [ds:$M_RT_$M_TIME_SEPARA] ; [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
TRANGROUP:5F46		       inc     cx
TRANGROUP:5F47		       mov     al, [si+2]      ; [si+$M_SUBLIST_STRUC.$M_S_VALUE]
TRANGROUP:5F4A		       test    [byte ptr si+7],	1 ; [si+$M_SUBLIST_STRUC.$M_S_FLAG],
TRANGROUP:5F4A					       ; Time_Cty_Type and $M_TIME_MASK
TRANGROUP:5F4E		       jz      short $MIF376
TRANGROUP:5F50		       cmp     [byte ptr ds:$M_RT_$M_TIME_FORMAT], 0 ; [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT]
TRANGROUP:5F55		       jnz     short $MIF376
TRANGROUP:5F57		       cmp     al, 13	       ; Is hour less than 12?
TRANGROUP:5F59		       jl      short $MIF378   ; no
TRANGROUP:5F5B		       sub     al, 12	       ; Set to	a 12 hour value
TRANGROUP:5F5D
TRANGROUP:5F5D $MIF378:				       ; ...
TRANGROUP:5F5D		       cmp     al, 0
TRANGROUP:5F5F		       jnz     short $MIF376
TRANGROUP:5F61		       mov     al, 12	       ; Set to	a 12 hour value
TRANGROUP:5F63
TRANGROUP:5F63 $MIF376:				       ; ...
TRANGROUP:5F63		       call    $M_CONVERT2ASC
TRANGROUP:5F66		       push    bp
TRANGROUP:5F67		       retn
TRANGROUP:5F67 endp	       $M_TIME_REPLACE
TRANGROUP:5F67
TRANGROUP:5F68
TRANGROUP:5F68 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5F68
TRANGROUP:5F68
TRANGROUP:5F68 proc	       $M_GET_TIME near	       ; ...
TRANGROUP:5F68		       mov     ax, 3800h       ; DOS_GET_COUNTRY*256
TRANGROUP:5F6B		       lea     dx, [$M_RT_$M_TEMP_BUF] ; lea dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5F6F		       int     21h	       ; DOS - 2+ - GET	COUNTRY-DEPENDENT INFORMATION
TRANGROUP:5F6F					       ; get current-country info
TRANGROUP:5F6F					       ; DS:DX -> buffer for returned info
TRANGROUP:5F71		       jnb     short $MIF384
TRANGROUP:5F73		       mov     [ds:$M_RT_$M_TIME_FORMAT], 1 ; [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],
TRANGROUP:5F73					       ; $M_DEF_TIME_FORM
TRANGROUP:5F79		       mov     [byte ptr ds:$M_RT_$M_TIME_SEPARA], 3Ah ; ':' ;
TRANGROUP:5F79					       ; [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],
TRANGROUP:5F79					       ; $M_DEF_TIME_SEP
TRANGROUP:5F7E		       mov     [byte ptr ds:$M_RT_$M_DECI_SEPARA], 2Eh ; '.' ;
TRANGROUP:5F7E					       ; [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],
TRANGROUP:5F7E					       ; $M_DEF_DECI_SEP
TRANGROUP:5F83
TRANGROUP:5F83 $MIF384:				       ; ...
TRANGROUP:5F83		       retn
TRANGROUP:5F83 endp	       $M_GET_TIME
TRANGROUP:5F83
TRANGROUP:5F84
TRANGROUP:5F84 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5F84
TRANGROUP:5F84
TRANGROUP:5F84 proc	       $M_CONVERTTIME near     ; ...
TRANGROUP:5F84		       pop     [ds:$M_RT_$M_TEMP_BUF] ;	[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5F84					       ; Save return address
TRANGROUP:5F88		       mov     [ds:$M_RT_$M_SIZE], cl
TRANGROUP:5F8C		       call    $M_CONVERT2ASC
TRANGROUP:5F8F		       dec     cx
TRANGROUP:5F90		       cmp     cl, [ds:$M_RT_$M_SIZE] ;	[$M_RT+$M_RES_ADDRS.$M_SIZE]
TRANGROUP:5F94		       jnz     short $MIF386
TRANGROUP:5F96		       mov     ax, 30h ; '0'
TRANGROUP:5F99		       push    ax	       ; Save pas character
TRANGROUP:5F9A		       inc     cx
TRANGROUP:5F9B
TRANGROUP:5F9B $MIF386:				       ; ...
TRANGROUP:5F9B		       inc     cx
TRANGROUP:5F9C		       push    [ds:$M_RT_$M_TEMP_BUF] ;	[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
TRANGROUP:5F9C					       ; Restore return	address
TRANGROUP:5FA0		       retn
TRANGROUP:5FA0 endp	       $M_CONVERTTIME
TRANGROUP:5FA0
TRANGROUP:5FA1
TRANGROUP:5FA1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:5FA1
TRANGROUP:5FA1
TRANGROUP:5FA1 proc	       $M_WAIT_FOR_INPUT near  ; ...
TRANGROUP:5FA1		       push    cx
TRANGROUP:5FA2		       push    dx
TRANGROUP:5FA3		       push    ds
TRANGROUP:5FA4		       cmp     dl, 0C0h	       ; DOS_CLR_KEYB_BUF_MASK
TRANGROUP:5FA7		       jbe     short $MIF388
TRANGROUP:5FA9		       mov     al, dl
TRANGROUP:5FAB		       and     al, 0Fh	       ; LOW_NIB_MASK
TRANGROUP:5FAD		       mov     ah, 0Ch	       ; DOS_CLR_KEYB_BUF
TRANGROUP:5FAF		       jmp     short $MEN388
TRANGROUP:5FB1 ; ---------------------------------------------------------------------------
TRANGROUP:5FB1
TRANGROUP:5FB1 $MIF388:				       ; ...
TRANGROUP:5FB1		       mov     ah, dl
TRANGROUP:5FB3
TRANGROUP:5FB3 $MEN388:				       ; ...
TRANGROUP:5FB3		       push    es
TRANGROUP:5FB4		       pop     ds
TRANGROUP:5FB5		       mov     dx, di
TRANGROUP:5FB7		       int     21h	       ; DOS -
TRANGROUP:5FB9		       pop     ds
TRANGROUP:5FBA		       cmp     dl, 0Ah	       ; DOS_BUF_KEYB_INP
TRANGROUP:5FBD		       clc
TRANGROUP:5FBE		       jz      short $MIF391
TRANGROUP:5FC0		       call    $M_IS_IT_DBCS   ; Is this character DBCS?
TRANGROUP:5FC3		       jnb     short $MIF392   ; no
TRANGROUP:5FC5		       mov     cl, al
TRANGROUP:5FC7		       mov     ah, dl
TRANGROUP:5FC9		       int     21h	       ; DOS -
TRANGROUP:5FCB		       mov     ah, cl	       ; Retrieve first	character  AX =	xxxx
TRANGROUP:5FCD		       clc
TRANGROUP:5FCE		       jmp     short $MIF391
TRANGROUP:5FD0 ; ---------------------------------------------------------------------------
TRANGROUP:5FD0
TRANGROUP:5FD0 $MIF392:				       ; ...
TRANGROUP:5FD0		       mov     ah, 0	       ; AX = 00xx where xx is SBCS
TRANGROUP:5FD2
TRANGROUP:5FD2 $MIF391:				       ; ...
TRANGROUP:5FD2		       jb      short $MIF396
TRANGROUP:5FD4		       pop     dx
TRANGROUP:5FD5		       pop     cx
TRANGROUP:5FD6		       retn
TRANGROUP:5FD7 ; ---------------------------------------------------------------------------
TRANGROUP:5FD7
TRANGROUP:5FD7 $MIF396:				       ; ...
TRANGROUP:5FD7		       add     sp, 4
TRANGROUP:5FDA		       stc
TRANGROUP:5FDB		       retn
TRANGROUP:5FDB endp	       $M_WAIT_FOR_INPUT
TRANGROUP:5FDB
TRANGROUP:5FDC
TRANGROUP:5FDC ; =============== S U B R O U T I N E =======================================
TRANGROUP:5FDC
TRANGROUP:5FDC
TRANGROUP:5FDC proc	       InitVar near	       ; ...
TRANGROUP:5FDC		       push    ax	       ; initializes all the variables used in ParseVar
TRANGROUP:5FDC					       ; and HideUMBs
TRANGROUP:5FDD		       push    cx
TRANGROUP:5FDE		       push    di
TRANGROUP:5FDF		       push    es
TRANGROUP:5FE0		       mov     es, [ds:RESSEG]
TRANGROUP:5FE4		       xor     ax, ax
TRANGROUP:5FE6		       mov     [es:fUmbTiny], al
TRANGROUP:5FEA		       mov     [es:fInHigh], al
TRANGROUP:5FEE		       mov     [es:SegLoad], ax
TRANGROUP:5FF2		       mov     [es:UmbLoad], 0FFh
TRANGROUP:5FF8		       mov     [es:fm_argc], al
TRANGROUP:5FFC		       cld
TRANGROUP:5FFD		       mov     cx, 16
TRANGROUP:6000		       mov     di, offset MsgBuffer ; UmbUsed
TRANGROUP:6003		       rep stosb
TRANGROUP:6005		       mov     cx, 16	       ; MAXUMB
TRANGROUP:6008		       mov     di, offset UmbSize
TRANGROUP:600B		       rep stosw
TRANGROUP:600D		       pop     es
TRANGROUP:600E		       pop     di
TRANGROUP:600F		       pop     cx
TRANGROUP:6010		       pop     ax
TRANGROUP:6011		       retn
TRANGROUP:6011 endp	       InitVar
TRANGROUP:6011
TRANGROUP:6012
TRANGROUP:6012 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6012
TRANGROUP:6012
TRANGROUP:6012 proc	       FixMem near	       ; ...
TRANGROUP:6012		       push    ax	       ; scans the upper memory	chain
TRANGROUP:6012					       ; and concatenates adjacent free	MCBs
TRANGROUP:6013		       push    bx
TRANGROUP:6014		       push    cx
TRANGROUP:6015		       push    dx
TRANGROUP:6016		       push    es
TRANGROUP:6017		       call    fm_link
TRANGROUP:601A		       call    UmbHead
TRANGROUP:601D		       jb      short fmX
TRANGROUP:601F		       mov     es, ax
TRANGROUP:6021		       xor     dx, dx
TRANGROUP:6023		       mov     cx, dx
TRANGROUP:6025		       inc     dx
TRANGROUP:6026
TRANGROUP:6026 fm10:				       ; ...
TRANGROUP:6026		       mov     al, [es:0]      ; [es:arena_signature]
TRANGROUP:602A		       mov     bx, [es:1]      ; [es:arena_owner]
TRANGROUP:602F		       or      bx, dx	       ; dx was	owner of previous MCB
TRANGROUP:6031		       jnz     short fm30      ; If not	both zero, don't cat.
TRANGROUP:6033		       mov     bx, [es:3]      ; [es:arena_size]
TRANGROUP:6038		       mov     es, cx	       ; Go back to prev MCB's address
TRANGROUP:603A		       assume es:RESGROUP
TRANGROUP:603A		       mov     [es:0], al      ; & move	the SECOND sig here
TRANGROUP:603E		       add     bx, [es:3]      ; Size += first MCB's size
TRANGROUP:6043		       add     bx, 1	       ; And add one for the header
TRANGROUP:6046		       mov     [es:3], bx      ; Write the size
TRANGROUP:604B
TRANGROUP:604B fm30:				       ; ...
TRANGROUP:604B		       mov     cx, es
TRANGROUP:604D		       mov     dx, [es:1]
TRANGROUP:6052		       mov     bx, es
TRANGROUP:6054		       add     bx, [es:3]
TRANGROUP:6059		       inc     bx
TRANGROUP:605A		       mov     es, bx
TRANGROUP:605C		       assume es:nothing
TRANGROUP:605C		       cmp     al, 5Ah ; 'Z'   ; arena_signature_end
TRANGROUP:605E		       jnz     short fm10
TRANGROUP:6060
TRANGROUP:6060 fmX:				       ; ...
TRANGROUP:6060		       call    fm_unlink
TRANGROUP:6063		       pop     es
TRANGROUP:6064		       pop     dx
TRANGROUP:6065		       pop     cx
TRANGROUP:6066		       pop     bx
TRANGROUP:6067		       pop     ax
TRANGROUP:6068		       retn
TRANGROUP:6068 endp	       FixMem
TRANGROUP:6068
TRANGROUP:6069
TRANGROUP:6069 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6069
TRANGROUP:6069
TRANGROUP:6069 proc	       fm_link near	       ; ...
TRANGROUP:6069		       mov     ax, 5802h       ; links UMBs not	already	linked in
TRANGROUP:606C		       int     21h	       ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
TRANGROUP:606C					       ; AL = function code: (DOS 5beta) get UMB link state
TRANGROUP:606E		       push    es
TRANGROUP:606F		       mov     es, [ds:RESSEG]
TRANGROUP:6073		       mov     [es:fm_umb], al
TRANGROUP:6077		       pop     es
TRANGROUP:6078		       mov     ax, 5803h
TRANGROUP:607B		       mov     bx, 1
TRANGROUP:607E		       int     21h	       ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
TRANGROUP:607E					       ; AL = function code: (DOS 5beta) set UMB link state
TRANGROUP:6080		       retn
TRANGROUP:6080 endp	       fm_link
TRANGROUP:6080
TRANGROUP:6081
TRANGROUP:6081 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6081
TRANGROUP:6081
TRANGROUP:6081 proc	       fm_unlink near	       ; ...
TRANGROUP:6081		       xor     bx, bx	       ; unlinks UMBs if fm_umb	is set to 0
TRANGROUP:6083		       push    ds
TRANGROUP:6084		       mov     ds, [ds:RESSEG]
TRANGROUP:6088		       mov     bl, [ds:fm_umb]
TRANGROUP:608C		       pop     ds
TRANGROUP:608D		       mov     ax, 5803h
TRANGROUP:6090		       int     21h	       ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
TRANGROUP:6090					       ; AL = function code: (DOS 5beta) set UMB link state
TRANGROUP:6092		       retn
TRANGROUP:6092 endp	       fm_unlink
TRANGROUP:6092
TRANGROUP:6093
TRANGROUP:6093 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6093
TRANGROUP:6093
TRANGROUP:6093 proc	       ParseVar	near	       ; ...
TRANGROUP:6093		       push    di
TRANGROUP:6094		       push    ds
TRANGROUP:6095		       push    es
TRANGROUP:6096		       push    es
TRANGROUP:6097		       pop     ds
TRANGROUP:6098		       cld
TRANGROUP:6099
TRANGROUP:6099 pv10:				       ; ...
TRANGROUP:6099		       lodsb
TRANGROUP:609A		       call    isWhite
TRANGROUP:609D		       jz      short pv10      ; ES:SI==" /L..."--keep eating.
TRANGROUP:609F		       cmp     al, '/'
TRANGROUP:60A1		       jz      short pv20      ; ES:SI=="/L..."--go process a switch
TRANGROUP:60A3		       dec     si
TRANGROUP:60A4		       clc
TRANGROUP:60A5		       jmp     short pvX
TRANGROUP:60A7 ; ---------------------------------------------------------------------------
TRANGROUP:60A7
TRANGROUP:60A7 pv20:				       ; ...
TRANGROUP:60A7		       lodsb
TRANGROUP:60A8		       and     al, 0DFh	       ; make it uppercase
TRANGROUP:60AA		       cmp     al, 'S'
TRANGROUP:60AC		       jnz     short pv30
TRANGROUP:60AE		       call    incArgc	       ; If it's /S, it's another arg for LH to skip.
TRANGROUP:60B1		       push    es
TRANGROUP:60B2		       mov     es, [ds:RESSEG]
TRANGROUP:60B6		       mov     [es:fUmbTiny], 1	; /S, so ES:SI=="  /L..." or " module opts", or
TRANGROUP:60BC		       pop     es
TRANGROUP:60BD		       jmp     short pv10
TRANGROUP:60BF ; ---------------------------------------------------------------------------
TRANGROUP:60BF
TRANGROUP:60BF pv30:				       ; ...
TRANGROUP:60BF		       cmp     al, 'L'         ; If it's not 'L' either, then it's a bad switch!
TRANGROUP:60C1		       jnz     short pvE1
TRANGROUP:60C3		       call    incArgc
TRANGROUP:60C6		       call    parseL
TRANGROUP:60C9		       jnb     short pv10      ; If no carry, go back and look for more
TRANGROUP:60CB		       dec     si
TRANGROUP:60CC		       jmp     short pvErr     ; AX has	already	been set by parseL
TRANGROUP:60CE ; ---------------------------------------------------------------------------
TRANGROUP:60CE
TRANGROUP:60CE pvE1:				       ; ...
TRANGROUP:60CE		       mov     ax, 3	       ; PV_InvSwt
TRANGROUP:60D1
TRANGROUP:60D1 pvErr:				       ; ...
TRANGROUP:60D1		       dec     si
TRANGROUP:60D2		       dec     si
TRANGROUP:60D3		       stc
TRANGROUP:60D4
TRANGROUP:60D4 pvX:				       ; ...
TRANGROUP:60D4		       pop     es
TRANGROUP:60D5		       pop     ds
TRANGROUP:60D6		       pop     di
TRANGROUP:60D7		       retn
TRANGROUP:60D7 endp	       ParseVar
TRANGROUP:60D7
TRANGROUP:60D8
TRANGROUP:60D8 ; =============== S U B R O U T I N E =======================================
TRANGROUP:60D8
TRANGROUP:60D8
TRANGROUP:60D8 proc	       parseL near	       ; ...
TRANGROUP:60D8		       lodsb		       ; parses	":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
TRANGROUP:60D9		       cmp     al, ':'
TRANGROUP:60DB		       jnz     short plE1
TRANGROUP:60DD
TRANGROUP:60DD pl10:				       ; ...
TRANGROUP:60DD		       call    GetXNum	       ; After this, 'tis ",size" or ";umb" or " mod"
TRANGROUP:60E0		       jb      short plE2
TRANGROUP:60E2		       call    convUMB	       ; Convert any address to	a UMB number
TRANGROUP:60E5		       mov     cl, al
TRANGROUP:60E7		       call    stowUMB	       ; Mark this UMB # as used
TRANGROUP:60EA		       jb      short plE2
TRANGROUP:60EC		       call    incArgc	       ; Each UMB number is another arg	for LH to skip
TRANGROUP:60EF		       lodsb
TRANGROUP:60F0		       cmp     al, ';'         ; Did "umb;" ?
TRANGROUP:60F2		       jz      short pl10      ; Yep: go back and get another UMB.
TRANGROUP:60F4		       call    isWhite	       ; Did "umb " ?
TRANGROUP:60F7		       jz      short plX       ; Yep: return (it'll go back to whitespace)
TRANGROUP:60F9		       call    isEOL	       ; Did "umb" ?
TRANGROUP:60FC		       jz      short plSwX     ; If so,	backup and exit	like everything's ok
TRANGROUP:60FE		       cmp     al, '/'         ; Did "umb/" ? (as in, "/L:1,100;2/S")
TRANGROUP:6100		       jz      short plSwX     ; If so,	back up	ES:SI one character and	return
TRANGROUP:6102		       cmp     al, ','         ;  Did "umb," ?
TRANGROUP:6104		       jnz     short plE1      ; Just what the heck DID	they do? Return	error.
TRANGROUP:6106		       call    GetXNum	       ; Stop on "size;" or "size " or anything	else
TRANGROUP:6109		       jb      short plE1      ; And error if it's a bad size.
TRANGROUP:610B		       call    toPara	       ; Convert from bytes to paragraphs
TRANGROUP:610E		       call    stowSiz	       ; CL still has the UMB number for this routine
TRANGROUP:6111		       call    incArgc	       ; Each UMB size is another arg for LH to	skip
TRANGROUP:6114		       lodsb
TRANGROUP:6115		       cmp     al, ';'         ; They did "umb,size;", so get another UMB.
TRANGROUP:6117		       jz      short pl10
TRANGROUP:6119		       call    isWhite	       ; Did it	end with whitespace?
TRANGROUP:611C		       jz      short plX       ; If so,	we're done here--go back.
TRANGROUP:611E		       call    isEOL	       ; Did they do "umb,size"	and end??? (stupid)
TRANGROUP:6121		       jz      short plSwX     ; If so,	backup and exit	like everything's ok
TRANGROUP:6123		       cmp     al, '/'         ; Did they do "umb,size/" ?
TRANGROUP:6125		       jz      short plSwX     ; If so,	again, we're done here.
TRANGROUP:6127
TRANGROUP:6127 plE1:				       ; ...
TRANGROUP:6127		       mov     ax, 1	       ; PV_InvArg
TRANGROUP:612A		       dec     si
TRANGROUP:612B		       stc
TRANGROUP:612C		       retn
TRANGROUP:612D ; ---------------------------------------------------------------------------
TRANGROUP:612D
TRANGROUP:612D plE2:				       ; ...
TRANGROUP:612D		       mov     ax, 2	       ; PV_BadUMB
TRANGROUP:6130		       stc
TRANGROUP:6131		       retn
TRANGROUP:6132 ; ---------------------------------------------------------------------------
TRANGROUP:6132
TRANGROUP:6132 plSwX:				       ; ...
TRANGROUP:6132		       dec     si
TRANGROUP:6133
TRANGROUP:6133 plX:				       ; ...
TRANGROUP:6133		       clc
TRANGROUP:6134		       retn
TRANGROUP:6134 endp	       parseL
TRANGROUP:6134
TRANGROUP:6135
TRANGROUP:6135 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6135
TRANGROUP:6135
TRANGROUP:6135 proc	       incArgc near	       ; ...
TRANGROUP:6135		       push    ax
TRANGROUP:6136		       push    ds
TRANGROUP:6137		       mov     ds, [ds:RESSEG]
TRANGROUP:613B		       mov     al, [ds:fm_argc]
TRANGROUP:613E		       pop     ds
TRANGROUP:613F		       inc     al
TRANGROUP:6141		       push    es
TRANGROUP:6142		       mov     es, [ds:RESSEG]
TRANGROUP:6146		       mov     [es:fm_argc], al
TRANGROUP:614A		       pop     es
TRANGROUP:614B		       pop     ax
TRANGROUP:614C		       retn
TRANGROUP:614C endp	       incArgc
TRANGROUP:614C
TRANGROUP:614D
TRANGROUP:614D ; =============== S U B R O U T I N E =======================================
TRANGROUP:614D
TRANGROUP:614D
TRANGROUP:614D proc	       isEOL near	       ; ...
TRANGROUP:614D		       cmp     al, 0
TRANGROUP:614F		       jz      short ieX
TRANGROUP:6151		       cmp     al, 0Dh	       ; CR
TRANGROUP:6153		       jz      short ieX
TRANGROUP:6155		       cmp     al, 0Ah	       ; LF
TRANGROUP:6157
TRANGROUP:6157 ieX:				       ; ...
TRANGROUP:6157		       retn
TRANGROUP:6157 endp	       isEOL
TRANGROUP:6157
TRANGROUP:6158
TRANGROUP:6158 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6158
TRANGROUP:6158
TRANGROUP:6158 proc	       isWhite near	       ; ...
TRANGROUP:6158		       cmp     al, 20h ; ' '
TRANGROUP:615A		       jz      short iwX
TRANGROUP:615C		       cmp     al, 3Dh ; '='
TRANGROUP:615E		       jz      short iwX
TRANGROUP:6160		       cmp     al, 9	       ; TAB
TRANGROUP:6162
TRANGROUP:6162 iwX:				       ; ...
TRANGROUP:6162		       retn
TRANGROUP:6162 endp	       isWhite
TRANGROUP:6162
TRANGROUP:6163
TRANGROUP:6163 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6163
TRANGROUP:6163
TRANGROUP:6163 proc	       unMarkUMB near	       ; ...
TRANGROUP:6163		       push    ax
TRANGROUP:6164		       push    bx
TRANGROUP:6165		       push    di
TRANGROUP:6166		       push    es
TRANGROUP:6167		       mov     es, [ds:RESSEG]
TRANGROUP:616B		       xor     ah, ah
TRANGROUP:616D		       mov     bx, ax
TRANGROUP:616F		       mov     [es:MsgBuffer+bx], 0 ; [es:bx+UmbUsed] =	[es:bx+MsgBuffer]
TRANGROUP:6175		       cmp     [es:UmbLoad], al
TRANGROUP:617A		       jnz     short umu10
TRANGROUP:617C		       mov     [es:UmbLoad], 0
TRANGROUP:6182
TRANGROUP:6182 umu10:				       ; ...
TRANGROUP:6182		       pop     es
TRANGROUP:6183		       pop     di
TRANGROUP:6184		       pop     bx
TRANGROUP:6185		       pop     ax
TRANGROUP:6186		       retn
TRANGROUP:6186 endp	       unMarkUMB
TRANGROUP:6186
TRANGROUP:6187
TRANGROUP:6187 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6187
TRANGROUP:6187
TRANGROUP:6187 proc	       stowUMB near	       ; ...
TRANGROUP:6187		       cmp     al, 16	       ; MAXUMB
TRANGROUP:6189		       jb      short su10
TRANGROUP:618B		       stc
TRANGROUP:618C		       retn
TRANGROUP:618D ; ---------------------------------------------------------------------------
TRANGROUP:618D
TRANGROUP:618D su10:				       ; ...
TRANGROUP:618D		       push    bx
TRANGROUP:618E		       push    di
TRANGROUP:618F		       push    si
TRANGROUP:6190		       push    ds
TRANGROUP:6191		       push    es
TRANGROUP:6192		       mov     es, [ds:RESSEG]
TRANGROUP:6196		       mov     ds, [ds:RESSEG]
TRANGROUP:619A		       cmp     [ds:UmbLoad], 0FFh ; UNSPECIFIED
TRANGROUP:619F		       jnz     short su20
TRANGROUP:61A1		       mov     [ds:UmbLoad], al
TRANGROUP:61A4
TRANGROUP:61A4 su20:				       ; ...
TRANGROUP:61A4		       or      al, al
TRANGROUP:61A6		       jz      short su30
TRANGROUP:61A8		       mov     bl, al
TRANGROUP:61AA		       xor     bh, bh
TRANGROUP:61AC		       mov     ax, 1
TRANGROUP:61AF		       xchg    al, [es:MsgBuffer+bx] ; [es:bx+UmbUsed] = [es:bx+MsgBuffer]
TRANGROUP:61B4		       or      al, al
TRANGROUP:61B6		       jz      short su30
TRANGROUP:61B8		       stc
TRANGROUP:61B9
TRANGROUP:61B9 su30:				       ; ...
TRANGROUP:61B9		       pop     es
TRANGROUP:61BA		       pop     ds
TRANGROUP:61BB		       pop     si
TRANGROUP:61BC		       pop     di
TRANGROUP:61BD		       pop     bx
TRANGROUP:61BE		       retn
TRANGROUP:61BE endp	       stowUMB
TRANGROUP:61BE
TRANGROUP:61BF
TRANGROUP:61BF ; =============== S U B R O U T I N E =======================================
TRANGROUP:61BF
TRANGROUP:61BF
TRANGROUP:61BF proc	       stowSiz near	       ; ...
TRANGROUP:61BF		       push    bx
TRANGROUP:61C0		       push    di
TRANGROUP:61C1		       push    es
TRANGROUP:61C2		       mov     es, [ds:RESSEG]
TRANGROUP:61C6		       mov     bl, cl
TRANGROUP:61C8		       mov     bh, 0
TRANGROUP:61CA		       shl     bl, 1
TRANGROUP:61CC		       mov     [es:UmbSize+bx],	ax
TRANGROUP:61D1		       pop     es
TRANGROUP:61D2		       pop     di
TRANGROUP:61D3		       pop     bx
TRANGROUP:61D4		       retn
TRANGROUP:61D4 endp	       stowSiz
TRANGROUP:61D4
TRANGROUP:61D4 ; ---------------------------------------------------------------------------
TRANGROUP:61D5 gnradix	       dw 0		       ; ...
TRANGROUP:61D7
TRANGROUP:61D7 ; =============== S U B R O U T I N E =======================================
TRANGROUP:61D7
TRANGROUP:61D7
TRANGROUP:61D7 proc	       toDigit near	       ; ...
TRANGROUP:61D7		       cmp     [ds:gnradix], 16
TRANGROUP:61DC		       jnz     short td20
TRANGROUP:61DE		       cmp     cl, 'a'
TRANGROUP:61E1		       jb      short td10
TRANGROUP:61E3		       cmp     cl, 'f'
TRANGROUP:61E6		       ja      short tdE
TRANGROUP:61E8		       sub     cl, 57h	       ; 'a'-10
TRANGROUP:61EB		       retn
TRANGROUP:61EC ; ---------------------------------------------------------------------------
TRANGROUP:61EC
TRANGROUP:61EC td10:				       ; ...
TRANGROUP:61EC		       cmp     cl, 'A'
TRANGROUP:61EF		       jb      short td20
TRANGROUP:61F1		       cmp     cl, 'F'
TRANGROUP:61F4		       ja      short tdE
TRANGROUP:61F6		       sub     cl, 37h	       ; 'A'-10
TRANGROUP:61F9		       retn
TRANGROUP:61FA ; ---------------------------------------------------------------------------
TRANGROUP:61FA
TRANGROUP:61FA td20:				       ; ...
TRANGROUP:61FA		       cmp     cl, '0'
TRANGROUP:61FD		       jb      short tdE
TRANGROUP:61FF		       cmp     cl, '9'
TRANGROUP:6202		       ja      short tdE
TRANGROUP:6204		       sub     cl, 30h	       ; '0'
TRANGROUP:6207		       retn
TRANGROUP:6208 ; ---------------------------------------------------------------------------
TRANGROUP:6208
TRANGROUP:6208 tdE:				       ; ...
TRANGROUP:6208		       stc
TRANGROUP:6209		       retn
TRANGROUP:6209 endp	       toDigit
TRANGROUP:6209
TRANGROUP:620A
TRANGROUP:620A ; =============== S U B R O U T I N E =======================================
TRANGROUP:620A
TRANGROUP:620A
TRANGROUP:620A proc	       GetXNum near	       ; ...
TRANGROUP:620A		       push    bx
TRANGROUP:620B		       push    cx
TRANGROUP:620C		       push    ds
TRANGROUP:620D		       cld
TRANGROUP:620E		       xor     ax, ax
TRANGROUP:6210		       xor     bx, bx
TRANGROUP:6212		       xor     cx, cx
TRANGROUP:6214		       xor     dx, dx
TRANGROUP:6216		       mov     [ds:gnradix], 10
TRANGROUP:621C		       mov     cl, [es:si]
TRANGROUP:621F		       call    toDigit
TRANGROUP:6222		       jb      short gxnE
TRANGROUP:6224		       or      cl, cl
TRANGROUP:6226		       jnz     short gxn20
TRANGROUP:6228		       mov     cl, [es:si+1]
TRANGROUP:622C		       cmp     cl, 'x'
TRANGROUP:622F		       jz      short gxn10
TRANGROUP:6231		       cmp     cl, 'X'
TRANGROUP:6234		       jnz     short gxn20
TRANGROUP:6236
TRANGROUP:6236 gxn10:				       ; ...
TRANGROUP:6236		       mov     [ds:gnradix], 16
TRANGROUP:623C		       inc     si
TRANGROUP:623D		       inc     si
TRANGROUP:623E
TRANGROUP:623E gxn20:				       ; ...
TRANGROUP:623E		       mov     cl, [es:si]
TRANGROUP:6241		       inc     si
TRANGROUP:6242		       call    toDigit
TRANGROUP:6245		       jb      short gxnQ
TRANGROUP:6247		       call    mul32
TRANGROUP:624A		       jb      short gxnX
TRANGROUP:624C		       add     ax, cx
TRANGROUP:624E		       adc     dx, bx
TRANGROUP:6250		       jb      short gxnX
TRANGROUP:6252		       jmp     short gxn20
TRANGROUP:6254 ; ---------------------------------------------------------------------------
TRANGROUP:6254
TRANGROUP:6254 gxnE:				       ; ...
TRANGROUP:6254		       stc
TRANGROUP:6255		       jmp     short gxnX
TRANGROUP:6257 ; ---------------------------------------------------------------------------
TRANGROUP:6257
TRANGROUP:6257 gxnQ:				       ; ...
TRANGROUP:6257		       dec     si
TRANGROUP:6258		       clc
TRANGROUP:6259
TRANGROUP:6259 gxnX:				       ; ...
TRANGROUP:6259		       pop     ds
TRANGROUP:625A		       pop     cx
TRANGROUP:625B		       pop     bx
TRANGROUP:625C		       retn
TRANGROUP:625C endp	       GetXNum
TRANGROUP:625C
TRANGROUP:625D
TRANGROUP:625D ; =============== S U B R O U T I N E =======================================
TRANGROUP:625D
TRANGROUP:625D
TRANGROUP:625D proc	       mul32 near	       ; ...
TRANGROUP:625D		       push    ax
TRANGROUP:625E		       mov     ax, dx
TRANGROUP:6260		       mul     [ds:gnradix]
TRANGROUP:6264		       jb      short m32E
TRANGROUP:6266		       mov     dx, ax
TRANGROUP:6268		       pop     ax
TRANGROUP:6269		       xchg    dx, bx
TRANGROUP:626B		       mul     [ds:gnradix]
TRANGROUP:626F		       xchg    dx, bx
TRANGROUP:6271		       add     dx, bx
TRANGROUP:6273		       xor     bx, bx
TRANGROUP:6275		       retn
TRANGROUP:6276 ; ---------------------------------------------------------------------------
TRANGROUP:6276
TRANGROUP:6276 m32E:				       ; ...
TRANGROUP:6276		       pop     ax
TRANGROUP:6277		       retn
TRANGROUP:6277 endp	       mul32
TRANGROUP:6277
TRANGROUP:6278
TRANGROUP:6278 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6278
TRANGROUP:6278
TRANGROUP:6278 proc	       toPara near	       ; ...
TRANGROUP:6278		       push    cx
TRANGROUP:6279		       mov     cl, 4
TRANGROUP:627B		       shr     ax, cl
TRANGROUP:627D		       xchg    ax, dx
TRANGROUP:627E		       mov     cl, 12
TRANGROUP:6280		       shl     ax, cl
TRANGROUP:6282		       or      ax, dx
TRANGROUP:6284		       pop     cx
TRANGROUP:6285		       retn
TRANGROUP:6285 endp	       toPara
TRANGROUP:6285
TRANGROUP:6286
TRANGROUP:6286 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6286
TRANGROUP:6286
TRANGROUP:6286 proc	       UmbHead near	       ; ...
TRANGROUP:6286		       push    si
TRANGROUP:6287		       push    ds
TRANGROUP:6288		       push    es
TRANGROUP:6289		       mov     ah, 52h
TRANGROUP:628B		       int     21h	       ; DOS - 2+ internal - GET LIST OF LISTS
TRANGROUP:628B					       ; Return: ES:BX -> DOS list of lists
TRANGROUP:628D		       mov     ax, [es:8Ch]    ; [es:DOS_UMB_HEAD]
TRANGROUP:6291		       cmp     ax, 0FFFFh
TRANGROUP:6294		       jz      short uhE
TRANGROUP:6296		       clc
TRANGROUP:6297		       jmp     short uhX
TRANGROUP:6299 ; ---------------------------------------------------------------------------
TRANGROUP:6299
TRANGROUP:6299 uhE:				       ; ...
TRANGROUP:6299		       stc
TRANGROUP:629A
TRANGROUP:629A uhX:				       ; ...
TRANGROUP:629A		       pop     es
TRANGROUP:629B		       pop     ds
TRANGROUP:629C		       pop     si
TRANGROUP:629D		       retn
TRANGROUP:629D endp	       UmbHead
TRANGROUP:629D
TRANGROUP:629E
TRANGROUP:629E ; =============== S U B R O U T I N E =======================================
TRANGROUP:629E
TRANGROUP:629E
TRANGROUP:629E proc	       isSysMCB	near	       ; ...
TRANGROUP:629E		       push    ax
TRANGROUP:629F		       mov     ax, [es:1]      ; [es:arena_owner]
TRANGROUP:62A3		       cmp     ax, 8
TRANGROUP:62A6		       jz      short ism10
TRANGROUP:62A8		       cmp     ax, 9
TRANGROUP:62AB		       jz      short ism10
TRANGROUP:62AD		       jmp     short ismX
TRANGROUP:62AF ; ---------------------------------------------------------------------------
TRANGROUP:62AF
TRANGROUP:62AF ism10:				       ; ...
TRANGROUP:62AF		       mov     ax, [es:8]      ; [es:arena_name]
TRANGROUP:62B3		       cmp     ax, 4353h       ; 'SC' (NASM syntax)
TRANGROUP:62B6
TRANGROUP:62B6 ismX:				       ; ...
TRANGROUP:62B6		       pop     ax
TRANGROUP:62B7		       retn
TRANGROUP:62B7 endp	       isSysMCB
TRANGROUP:62B7
TRANGROUP:62B8
TRANGROUP:62B8 ; =============== S U B R O U T I N E =======================================
TRANGROUP:62B8
TRANGROUP:62B8
TRANGROUP:62B8 proc	       AddrToUmb near	       ; ...
TRANGROUP:62B8		       push    cx	       ; convert segment addr to UMB number
TRANGROUP:62B9		       push    dx
TRANGROUP:62BA		       push    es
TRANGROUP:62BB		       mov     dx, ax
TRANGROUP:62BD		       call    UmbHead
TRANGROUP:62C0		       jb      short atuE
TRANGROUP:62C2		       mov     es, ax
TRANGROUP:62C4		       xor     cx, cx
TRANGROUP:62C6
TRANGROUP:62C6 atu10:				       ; ...
TRANGROUP:62C6		       mov     ax, es
TRANGROUP:62C8		       cmp     ax, dx
TRANGROUP:62CA		       jnb     short atuX
TRANGROUP:62CC		       call    isSysMCB
TRANGROUP:62CF		       jnz     short atu20
TRANGROUP:62D1		       inc     cx
TRANGROUP:62D2
TRANGROUP:62D2 atu20:				       ; ...
TRANGROUP:62D2		       mov     al, [es:0]      ; [es:arena_signature]
TRANGROUP:62D6		       cmp     al, 5Ah ; 'Z'   ; arena_signature_end
TRANGROUP:62D8		       jz      short atu30
TRANGROUP:62DA		       mov     ax, es
TRANGROUP:62DC		       add     ax, [es:3]      ; [es:arena_size]
TRANGROUP:62E1		       inc     ax
TRANGROUP:62E2		       mov     es, ax
TRANGROUP:62E4		       jmp     short atu10
TRANGROUP:62E6 ; ---------------------------------------------------------------------------
TRANGROUP:62E6
TRANGROUP:62E6 atu30:				       ; ...
TRANGROUP:62E6		       mov     ax, es
TRANGROUP:62E8		       add     ax, [es:3]      ; [es:arena_size]
TRANGROUP:62ED		       cmp     ax, dx
TRANGROUP:62EF		       jnb     short atuX
TRANGROUP:62F1
TRANGROUP:62F1 atuE:				       ; ...
TRANGROUP:62F1		       xor     cx, cx
TRANGROUP:62F3		       dec     cx
TRANGROUP:62F4
TRANGROUP:62F4 atuX:				       ; ...
TRANGROUP:62F4		       mov     ax, cx
TRANGROUP:62F6		       pop     es
TRANGROUP:62F7		       pop     dx
TRANGROUP:62F8		       pop     cx
TRANGROUP:62F9		       retn
TRANGROUP:62F9 endp	       AddrToUmb
TRANGROUP:62F9
TRANGROUP:62FA
TRANGROUP:62FA ; =============== S U B R O U T I N E =======================================
TRANGROUP:62FA
TRANGROUP:62FA
TRANGROUP:62FA proc	       convUMB near	       ; ...
TRANGROUP:62FA		       cmp     [ds:gnradix], 16
TRANGROUP:62FF		       jnz     short cu10
TRANGROUP:6301		       call    AddrToUmb
TRANGROUP:6304		       cmp     ax, 0FFFFh
TRANGROUP:6307		       jnz     short cu10
TRANGROUP:6309		       inc     ax
TRANGROUP:630A
TRANGROUP:630A cu10:				       ; ...
TRANGROUP:630A		       retn
TRANGROUP:630A endp	       convUMB
TRANGROUP:630A
TRANGROUP:630B
TRANGROUP:630B ; =============== S U B R O U T I N E =======================================
TRANGROUP:630B
TRANGROUP:630B
TRANGROUP:630B proc	       setUMBs near	       ; ...
TRANGROUP:630B		       push    ax
TRANGROUP:630C		       push    bx
TRANGROUP:630D		       call    fm_link
TRANGROUP:6310		       mov     ax, 5800h
TRANGROUP:6313		       int     21h	       ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
TRANGROUP:6313					       ; AL = function code: get allocation strategy
TRANGROUP:6315		       push    es
TRANGROUP:6316		       mov     es, [ds:RESSEG]
TRANGROUP:631A		       mov     [es:fm_strat], al
TRANGROUP:631E		       pop     es
TRANGROUP:631F		       and     ax, 7Fh
TRANGROUP:6322		       push    ax
TRANGROUP:6323		       call    loadLow
TRANGROUP:6326		       ror     al, 1
TRANGROUP:6328		       pop     bx
TRANGROUP:6329		       or      bl, al
TRANGROUP:632B		       mov     ax, 5801h
TRANGROUP:632E		       int     21h	       ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
TRANGROUP:632E					       ; AL = function code: set allocation strategy
TRANGROUP:6330		       pop     bx
TRANGROUP:6331		       pop     ax
TRANGROUP:6332		       retn
TRANGROUP:6332 endp	       setUMBs
TRANGROUP:6332
TRANGROUP:6333
TRANGROUP:6333 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6333
TRANGROUP:6333
TRANGROUP:6333 proc	       loadLow near	       ; ...
TRANGROUP:6333		       push    ds
TRANGROUP:6334		       mov     ds, [ds:RESSEG]
TRANGROUP:6338		       mov     al, [ds:UmbLoad]
TRANGROUP:633B		       cmp     al, 0FFh
TRANGROUP:633D		       jnz     short ll10
TRANGROUP:633F		       mov     al, 1
TRANGROUP:6341		       stc
TRANGROUP:6342		       jmp     short lly
TRANGROUP:6344 ; ---------------------------------------------------------------------------
TRANGROUP:6344
TRANGROUP:6344 ll10:				       ; ...
TRANGROUP:6344		       or      al, al
TRANGROUP:6346		       jz      short lly
TRANGROUP:6348		       mov     al, 1
TRANGROUP:634A		       clc
TRANGROUP:634B
TRANGROUP:634B lly:				       ; ...
TRANGROUP:634B		       pop     ds
TRANGROUP:634C		       retn
TRANGROUP:634C endp	       loadLow
TRANGROUP:634C
TRANGROUP:634D
TRANGROUP:634D ; =============== S U B R O U T I N E =======================================
TRANGROUP:634D
TRANGROUP:634D
TRANGROUP:634D proc	       HideUMBs	near	       ; ...
TRANGROUP:634D		       push    ax	       ; links UMBs and	hides upper-memory as appropriate
TRANGROUP:634E		       push    cx
TRANGROUP:634F		       push    ds
TRANGROUP:6350		       push    es
TRANGROUP:6351		       call    UmbTest
TRANGROUP:6354		       jb      short husX
TRANGROUP:6356		       call    FixMem
TRANGROUP:6359		       call    setUMBs
TRANGROUP:635C		       push    es
TRANGROUP:635D		       mov     es, [ds:RESSEG]
TRANGROUP:6361		       mov     [es:fInHigh], 1
TRANGROUP:6367		       pop     es
TRANGROUP:6368		       call    GetLoadUMB
TRANGROUP:636B		       cmp     al, 0FFh
TRANGROUP:636D		       jz      short husX
TRANGROUP:636F		       xor     cx, cx
TRANGROUP:6371
TRANGROUP:6371 hus10:				       ; ...
TRANGROUP:6371		       inc     cx
TRANGROUP:6372		       cmp     cx, 16	       ; MAXUMB
TRANGROUP:6375		       jnb     short hus20
TRANGROUP:6377		       mov     al, cl
TRANGROUP:6379		       push    es
TRANGROUP:637A		       call    findumb
TRANGROUP:637D		       pop     es
TRANGROUP:637E		       jb      short hus20
TRANGROUP:6380		       call    hideUMB?
TRANGROUP:6383		       jmp     short hus10
TRANGROUP:6385 ; ---------------------------------------------------------------------------
TRANGROUP:6385
TRANGROUP:6385 hus20:				       ; ...
TRANGROUP:6385		       call    GetLoadUMB
TRANGROUP:6388		       or      al, al
TRANGROUP:638A		       jnz     short husX
TRANGROUP:638C		       call    hl_unlink
TRANGROUP:638F
TRANGROUP:638F husX:				       ; ...
TRANGROUP:638F		       pop     es
TRANGROUP:6390		       pop     ds
TRANGROUP:6391		       pop     cx
TRANGROUP:6392		       pop     ax
TRANGROUP:6393		       retn
TRANGROUP:6393 endp	       HideUMBs
TRANGROUP:6393
TRANGROUP:6394
TRANGROUP:6394 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6394
TRANGROUP:6394
TRANGROUP:6394 proc	       GetLoadUMB near	       ; ...
TRANGROUP:6394		       push    ds
TRANGROUP:6395		       mov     ds, [ds:RESSEG]
TRANGROUP:6399		       mov     al, [ds:UmbLoad]
TRANGROUP:639C		       pop     ds
TRANGROUP:639D		       retn
TRANGROUP:639D endp	       GetLoadUMB
TRANGROUP:639D
TRANGROUP:639E
TRANGROUP:639E ; =============== S U B R O U T I N E =======================================
TRANGROUP:639E
TRANGROUP:639E
TRANGROUP:639E proc	       GetLoadSize near
TRANGROUP:639E		       push    bx
TRANGROUP:639F		       push    si
TRANGROUP:63A0		       push    ds
TRANGROUP:63A1		       mov     ds, [ds:RESSEG]
TRANGROUP:63A5		       mov     al, [ds:UmbLoad]
TRANGROUP:63A8		       xor     ah, ah
TRANGROUP:63AA		       mov     bx, offset UmbSize
TRANGROUP:63AD		       shl     al, 1
TRANGROUP:63AF		       add     ax, bx
TRANGROUP:63B1		       mov     si, ax
TRANGROUP:63B3		       lodsw
TRANGROUP:63B4		       pop     ds
TRANGROUP:63B5		       pop     si
TRANGROUP:63B6		       pop     bx
TRANGROUP:63B7		       retn
TRANGROUP:63B7 endp	       GetLoadSize
TRANGROUP:63B7
TRANGROUP:63B8
TRANGROUP:63B8 ; =============== S U B R O U T I N E =======================================
TRANGROUP:63B8
TRANGROUP:63B8
TRANGROUP:63B8 proc	       GetSize near	       ; ...
TRANGROUP:63B8		       push    bx
TRANGROUP:63B9		       push    si
TRANGROUP:63BA		       push    ds
TRANGROUP:63BB		       mov     ds, [ds:RESSEG]
TRANGROUP:63BF		       xor     ah, ah
TRANGROUP:63C1		       mov     bx, offset UmbSize
TRANGROUP:63C4		       shl     al, 1
TRANGROUP:63C6		       add     ax, bx
TRANGROUP:63C8		       mov     si, ax
TRANGROUP:63CA		       lodsw
TRANGROUP:63CB		       pop     ds
TRANGROUP:63CC		       pop     si
TRANGROUP:63CD		       pop     bx
TRANGROUP:63CE		       retn
TRANGROUP:63CE endp	       GetSize
TRANGROUP:63CE
TRANGROUP:63CF
TRANGROUP:63CF ; =============== S U B R O U T I N E =======================================
TRANGROUP:63CF
TRANGROUP:63CF
TRANGROUP:63CF proc	       StoLoadUMB near
TRANGROUP:63CF		       push    es
TRANGROUP:63D0		       mov     es, [ds:RESSEG]
TRANGROUP:63D4		       mov     [es:UmbLoad], al
TRANGROUP:63D8		       pop     es
TRANGROUP:63D9		       retn
TRANGROUP:63D9 endp	       StoLoadUMB
TRANGROUP:63D9
TRANGROUP:63DA
TRANGROUP:63DA ; =============== S U B R O U T I N E =======================================
TRANGROUP:63DA
TRANGROUP:63DA
TRANGROUP:63DA proc	       StoLoadSize near
TRANGROUP:63DA		       push    dx
TRANGROUP:63DB		       push    ds
TRANGROUP:63DC		       mov     ds, [ds:RESSEG]
TRANGROUP:63E0		       mov     dl, [ds:UmbLoad]
TRANGROUP:63E4		       pop     ds
TRANGROUP:63E5		       cmp     dl, 0FFh
TRANGROUP:63E8		       jz      short sls10
TRANGROUP:63EA		       call    stowSiz
TRANGROUP:63ED
TRANGROUP:63ED sls10:				       ; ...
TRANGROUP:63ED		       pop     dx
TRANGROUP:63EE		       retn
TRANGROUP:63EE endp	       StoLoadSize
TRANGROUP:63EE
TRANGROUP:63EF
TRANGROUP:63EF ; =============== S U B R O U T I N E =======================================
TRANGROUP:63EF
TRANGROUP:63EF
TRANGROUP:63EF proc	       hideUMB near	       ; ...
TRANGROUP:63EF		       push    ax	       ; marks as HIDDEN all FREE elements
TRANGROUP:63EF					       ; in UMB	passed as AL
TRANGROUP:63F0		       push    es
TRANGROUP:63F1		       call    findumb
TRANGROUP:63F4		       jb      short huX
TRANGROUP:63F6
TRANGROUP:63F6 hu10:				       ; ...
TRANGROUP:63F6		       call    isSysMCB
TRANGROUP:63F9		       jz      short huX
TRANGROUP:63FB		       call    isFreeMCB
TRANGROUP:63FE		       jnz     short hu20
TRANGROUP:6400		       call    hideMCB
TRANGROUP:6403
TRANGROUP:6403 hu20:				       ; ...
TRANGROUP:6403		       mov     al, [es:0]      ; [es:arena_signature]
TRANGROUP:6407		       cmp     al, 5Ah ; 'Z'   ; arena_signature_end
TRANGROUP:6409		       jz      short huX
TRANGROUP:640B		       mov     ax, es
TRANGROUP:640D		       add     ax, [es:3]      ; [es:arena_size]
TRANGROUP:6412		       inc     ax
TRANGROUP:6413		       mov     es, ax
TRANGROUP:6415		       jmp     short hu10
TRANGROUP:6417 ; ---------------------------------------------------------------------------
TRANGROUP:6417
TRANGROUP:6417 huX:				       ; ...
TRANGROUP:6417		       pop     es
TRANGROUP:6418		       pop     ax
TRANGROUP:6419		       retn
TRANGROUP:6419 endp	       hideUMB
TRANGROUP:6419
TRANGROUP:641A
TRANGROUP:641A ; =============== S U B R O U T I N E =======================================
TRANGROUP:641A
TRANGROUP:641A
TRANGROUP:641A proc	       isTiny near	       ; ...
TRANGROUP:641A		       push    ax	       ; returns with ZF set if
TRANGROUP:641A					       ; user didn't specify /S
TRANGROUP:641B		       push    ds
TRANGROUP:641C		       mov     ds, [ds:RESSEG]
TRANGROUP:6420		       mov     al, [ds:fUmbTiny]
TRANGROUP:6423		       pop     ds
TRANGROUP:6424		       or      al, al
TRANGROUP:6426		       pop     ax
TRANGROUP:6427		       retn
TRANGROUP:6427 endp	       isTiny
TRANGROUP:6427
TRANGROUP:6428
TRANGROUP:6428 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6428
TRANGROUP:6428
TRANGROUP:6428 proc	       isFreeMCB near	       ; ...
TRANGROUP:6428		       or      [word ptr es:1],	0 ; [es:arena_owner]
TRANGROUP:642E		       retn
TRANGROUP:642E endp	       isFreeMCB
TRANGROUP:642E
TRANGROUP:642F
TRANGROUP:642F ; =============== S U B R O U T I N E =======================================
TRANGROUP:642F
TRANGROUP:642F
TRANGROUP:642F proc	       hideMCB near	       ; ...
TRANGROUP:642F		       mov     [word ptr es:1],	8 ; [es:arena_owner],SystemPSPOwner
TRANGROUP:6436		       mov     [word ptr es:8],	4948h ;	'HIDDEN  '
TRANGROUP:6436					       ; [es:arena_name+0], 'HI'
TRANGROUP:643D		       mov     [word ptr es:0Ah], 4444h	; [es:arena_name+2], 'DD
TRANGROUP:6444		       mov     [word ptr es:0Ch], 4E45h	; [es:arena_name+4], 'EN'
TRANGROUP:644B		       mov     [word ptr es:0Eh], 2020h	; [es:arena_name+6], '  '
TRANGROUP:6452		       retn
TRANGROUP:6452 endp	       hideMCB
TRANGROUP:6452
TRANGROUP:6453
TRANGROUP:6453 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6453
TRANGROUP:6453
TRANGROUP:6453 proc	       unHideMCB near	       ; ...
TRANGROUP:6453		       push    ax
TRANGROUP:6454		       mov     [word ptr es:1],	0 ; [es:arena_owner],FreePSPOwner
TRANGROUP:645B		       mov     ax, 2020h       ; '  '
TRANGROUP:645E		       mov     [es:8], ax      ; [es:arena_name+0]
TRANGROUP:6462		       mov     [es:10],	ax     ; [es:arena_name+2]
TRANGROUP:6466		       mov     [es:12],	ax     ; [es:arena_name+4]
TRANGROUP:646A		       mov     [es:14],	ax     ; [es:arena_name+6]
TRANGROUP:646E		       pop     ax
TRANGROUP:646F		       retn
TRANGROUP:646F endp	       unHideMCB
TRANGROUP:646F
TRANGROUP:6470
TRANGROUP:6470 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6470
TRANGROUP:6470
TRANGROUP:6470 proc	       findumb near	       ; ...
TRANGROUP:6470		       push    ax
TRANGROUP:6471		       push    cx
TRANGROUP:6472		       push    dx
TRANGROUP:6473		       xor     ah, ah
TRANGROUP:6475		       mov     dx, ax
TRANGROUP:6477		       call    UmbHead
TRANGROUP:647A		       mov     es, ax
TRANGROUP:647C		       xor     cx, cx
TRANGROUP:647E
TRANGROUP:647E fu10:				       ; ...
TRANGROUP:647E		       cmp     cx, dx
TRANGROUP:6480		       jz      short fuX
TRANGROUP:6482		       call    isSysMCB
TRANGROUP:6485		       jnz     short fu20
TRANGROUP:6487		       inc     cx
TRANGROUP:6488
TRANGROUP:6488 fu20:				       ; ...
TRANGROUP:6488		       mov     al, [es:0]      ; [es:arena_signature]
TRANGROUP:648C		       cmp     al, 5Ah ; 'Z'   ; arena_signature_end
TRANGROUP:648E		       jz      short fuE
TRANGROUP:6490		       mov     ax, es
TRANGROUP:6492		       add     ax, [es:3]      ; [es:arena_size]
TRANGROUP:6497		       inc     ax
TRANGROUP:6498		       mov     es, ax
TRANGROUP:649A		       jmp     short fu10
TRANGROUP:649C ; ---------------------------------------------------------------------------
TRANGROUP:649C
TRANGROUP:649C fuE:				       ; ...
TRANGROUP:649C		       stc
TRANGROUP:649D
TRANGROUP:649D fuX:				       ; ...
TRANGROUP:649D		       pop     dx
TRANGROUP:649E		       pop     cx
TRANGROUP:649F		       pop     ax
TRANGROUP:64A0		       retn
TRANGROUP:64A0 endp	       findumb
TRANGROUP:64A0
TRANGROUP:64A1
TRANGROUP:64A1 ; =============== S U B R O U T I N E =======================================
TRANGROUP:64A1
TRANGROUP:64A1
TRANGROUP:64A1 proc	       BigFree near	       ; ...
TRANGROUP:64A1		       push    bx
TRANGROUP:64A2		       push    cx
TRANGROUP:64A3		       call    findumb
TRANGROUP:64A6		       jb      short bfX
TRANGROUP:64A8		       xor     bx, bx
TRANGROUP:64AA		       xor     cx, cx
TRANGROUP:64AC
TRANGROUP:64AC bf10:				       ; ...
TRANGROUP:64AC		       call    isSysMCB
TRANGROUP:64AF		       jz      short bf30
TRANGROUP:64B1		       call    isFreeMCB
TRANGROUP:64B4		       jnz     short bf20
TRANGROUP:64B6		       cmp     cx, [es:3]      ; [es:arena_size]
TRANGROUP:64BB		       jg      short bf20
TRANGROUP:64BD		       mov     bx, es
TRANGROUP:64BF		       mov     cx, [es:3]
TRANGROUP:64C4
TRANGROUP:64C4 bf20:				       ; ...
TRANGROUP:64C4		       mov     al, [es:0]      ; [es:arena_signature]
TRANGROUP:64C8		       cmp     al, 5Ah ; 'Z'   ; arena_signature_end
TRANGROUP:64CA		       jz      short bf30
TRANGROUP:64CC		       mov     ax, es
TRANGROUP:64CE		       add     ax, [es:3]
TRANGROUP:64D3		       inc     ax
TRANGROUP:64D4		       mov     es, ax
TRANGROUP:64D6		       jmp     short bf10
TRANGROUP:64D8 ; ---------------------------------------------------------------------------
TRANGROUP:64D8
TRANGROUP:64D8 bf30:				       ; ...
TRANGROUP:64D8		       mov     es, bx
TRANGROUP:64DA		       mov     ax, cx
TRANGROUP:64DC		       or      bx, bx
TRANGROUP:64DE		       jnz     short bfX
TRANGROUP:64E0		       stc
TRANGROUP:64E1
TRANGROUP:64E1 bfX:				       ; ...
TRANGROUP:64E1		       pop     cx
TRANGROUP:64E2		       pop     bx
TRANGROUP:64E3		       retn
TRANGROUP:64E3 endp	       BigFree
TRANGROUP:64E3
TRANGROUP:64E4
TRANGROUP:64E4 ; =============== S U B R O U T I N E =======================================
TRANGROUP:64E4
TRANGROUP:64E4
TRANGROUP:64E4 proc	       isSpecified near	       ; ...
TRANGROUP:64E4		       push    ax	       ; sets ZF if UMB	in AL wasn't specified
TRANGROUP:64E4					       ; in DH/LH line
TRANGROUP:64E5		       xor     bh, bh
TRANGROUP:64E7		       mov     bl, al
TRANGROUP:64E9		       push    ds
TRANGROUP:64EA		       mov     ds, [ds:RESSEG]
TRANGROUP:64EE		       mov     al, [ds:MsgBuffer+bx] ; [bx+UmbUsed] = [bx+MsgBuffer]
TRANGROUP:64F2		       pop     ds
TRANGROUP:64F3		       or      al, al
TRANGROUP:64F5		       pop     ax
TRANGROUP:64F6		       retn
TRANGROUP:64F6 endp	       isSpecified
TRANGROUP:64F6
TRANGROUP:64F7
TRANGROUP:64F7 ; =============== S U B R O U T I N E =======================================
TRANGROUP:64F7
TRANGROUP:64F7
TRANGROUP:64F7 proc	       shrinkMCB near	       ; ...
TRANGROUP:64F7		       push    bx
TRANGROUP:64F8		       push    cx
TRANGROUP:64F9		       push    es
TRANGROUP:64FA		       mov     bx, ax
TRANGROUP:64FC		       mov     ax, es
TRANGROUP:64FE		       mov     cx, [es:3]      ; [es:arena_size]
TRANGROUP:6503		       sub     cx, 32	       ; MIN_SPLIT_SIZE
TRANGROUP:6506		       cmp     bx, cx
TRANGROUP:6508		       ja      short smE
TRANGROUP:650A		       mov     dl, [es:0]      ; [es:arena_signature]
TRANGROUP:650F		       mov     cx, [es:3]      ; [es:arena_size]
TRANGROUP:6514		       mov     [es:3], bx
TRANGROUP:6519		       mov     [byte ptr es:0],	'M' ; [es:arena_signature]
TRANGROUP:651F		       add     ax, bx
TRANGROUP:6521		       inc     ax
TRANGROUP:6522		       mov     es, ax
TRANGROUP:6524		       mov     ax, cx
TRANGROUP:6526		       sub     ax, bx
TRANGROUP:6528		       dec     ax
TRANGROUP:6529		       mov     [es:0], dl      ; [es:arena_signature]
TRANGROUP:652E		       mov     [word ptr es:1],	0 ; [es:arena_owner]
TRANGROUP:6535		       mov     [es:3], ax      ; [es:arena_size]
TRANGROUP:6539		       mov     ax, 2020h       ; '  '
TRANGROUP:653C		       mov     [es:8], ax      ; [es:arena_name+0]
TRANGROUP:6540		       mov     [es:0Ah], ax    ; [es:arena_name+2]
TRANGROUP:6544		       mov     [es:0Ch], ax    ; [es:arena_name+4]
TRANGROUP:6548		       mov     [es:0Eh], ax    ; [es:arena_name+6]
TRANGROUP:654C		       clc
TRANGROUP:654D		       jmp     short smX
TRANGROUP:654F ; ---------------------------------------------------------------------------
TRANGROUP:654F
TRANGROUP:654F smE:				       ; ...
TRANGROUP:654F		       stc
TRANGROUP:6550
TRANGROUP:6550 smX:				       ; ...
TRANGROUP:6550		       pop     es
TRANGROUP:6551		       pop     cx
TRANGROUP:6552		       pop     bx
TRANGROUP:6553		       retn
TRANGROUP:6553 endp	       shrinkMCB
TRANGROUP:6553
TRANGROUP:6554
TRANGROUP:6554 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6554
TRANGROUP:6554
TRANGROUP:6554 proc	       hideUMB?	near	       ; ...
TRANGROUP:6554		       push    bx
TRANGROUP:6555		       push    dx
TRANGROUP:6556		       push    es
TRANGROUP:6557		       mov     al, cl
TRANGROUP:6559		       call    isSpecified
TRANGROUP:655C		       jz      short hu?20
TRANGROUP:655E		       mov     al, cl
TRANGROUP:6560		       call    BigFree
TRANGROUP:6563		       jb      short hu?20
TRANGROUP:6565		       push    ax
TRANGROUP:6566		       mov     al, cl
TRANGROUP:6568		       call    GetSize
TRANGROUP:656B		       pop     bx
TRANGROUP:656C		       or      ax, ax
TRANGROUP:656E		       jz      short hu?20
TRANGROUP:6570		       cmp     ax, bx
TRANGROUP:6572		       jbe     short hu?10
TRANGROUP:6574		       mov     al, cl
TRANGROUP:6576		       call    unMarkUMB
TRANGROUP:6579		       jmp     short hu?20
TRANGROUP:657B ; ---------------------------------------------------------------------------
TRANGROUP:657B
TRANGROUP:657B hu?10:				       ; ...
TRANGROUP:657B		       call    isTiny
TRANGROUP:657E		       jz      short hu?20
TRANGROUP:6580		       call    shrinkMCB
TRANGROUP:6583		       jb      short hu?20
TRANGROUP:6585		       mov     dx, es
TRANGROUP:6587		       jmp     short hu?30
TRANGROUP:6589 ; ---------------------------------------------------------------------------
TRANGROUP:6589
TRANGROUP:6589 hu?20:				       ; ...
TRANGROUP:6589		       mov     ax, cx
TRANGROUP:658B		       call    isSpecified
TRANGROUP:658E		       jnz     short hu?X
TRANGROUP:6590		       xor     dx, dx
TRANGROUP:6592
TRANGROUP:6592 hu?30:				       ; ...
TRANGROUP:6592		       mov     al, cl
TRANGROUP:6594		       call    hideUMB
TRANGROUP:6597		       or      dx, dx
TRANGROUP:6599		       jz      short hu?X
TRANGROUP:659B		       mov     es, dx
TRANGROUP:659D		       call    unHideMCB
TRANGROUP:65A0
TRANGROUP:65A0 hu?X:				       ; ...
TRANGROUP:65A0		       pop     es
TRANGROUP:65A1		       pop     dx
TRANGROUP:65A2		       pop     bx
TRANGROUP:65A3		       retn
TRANGROUP:65A3 endp	       hideUMB?
TRANGROUP:65A3
TRANGROUP:65A4
TRANGROUP:65A4 ; =============== S U B R O U T I N E =======================================
TRANGROUP:65A4
TRANGROUP:65A4
TRANGROUP:65A4 proc	       UnFreeze	near
TRANGROUP:65A4		       push    ax
TRANGROUP:65A5		       push    es
TRANGROUP:65A6		       call    UmbHead
TRANGROUP:65A9		       jb      short ufX
TRANGROUP:65AB		       mov     es, ax
TRANGROUP:65AD
TRANGROUP:65AD uf10:				       ; ...
TRANGROUP:65AD		       call    isFrozMCB
TRANGROUP:65B0		       jnz     short uf20
TRANGROUP:65B2		       call    unHideMCB
TRANGROUP:65B5
TRANGROUP:65B5 uf20:				       ; ...
TRANGROUP:65B5		       mov     al, [es:0]      ; [es:arena_signature]
TRANGROUP:65B9		       cmp     al, 5Ah ; 'Z'   ; arena_signature_end
TRANGROUP:65BB		       jz      short ufX
TRANGROUP:65BD		       mov     ax, es
TRANGROUP:65BF		       add     ax, [es:3]
TRANGROUP:65C4		       inc     ax
TRANGROUP:65C5		       mov     es, ax
TRANGROUP:65C7		       jmp     short uf10
TRANGROUP:65C9 ; ---------------------------------------------------------------------------
TRANGROUP:65C9
TRANGROUP:65C9 ufX:				       ; ...
TRANGROUP:65C9		       pop     es
TRANGROUP:65CA		       pop     ax
TRANGROUP:65CB		       retn
TRANGROUP:65CB endp	       UnFreeze
TRANGROUP:65CB
TRANGROUP:65CC
TRANGROUP:65CC ; =============== S U B R O U T I N E =======================================
TRANGROUP:65CC
TRANGROUP:65CC
TRANGROUP:65CC proc	       isFrozMCB near	       ; ...
TRANGROUP:65CC		       push    ax
TRANGROUP:65CD		       mov     ax, [es:1]      ; [es:arena_owner]
TRANGROUP:65D1		       cmp     ax, 8
TRANGROUP:65D4		       jnz     short ifmX
TRANGROUP:65D6		       mov     ax, [es:8]      ; [es:arena_name]
TRANGROUP:65DA		       cmp     ax, 5246h       ; 'FR'
TRANGROUP:65DD		       jnz     short ifmX
TRANGROUP:65DF		       mov     ax, [es:10]     ; [es:arena_name+2]
TRANGROUP:65E3		       cmp     ax, 5A4Fh       ; 'OZ'
TRANGROUP:65E6		       jnz     short ifmX
TRANGROUP:65E8		       mov     ax, [es:0Ch]    ; [es:arena_name+4]
TRANGROUP:65EC		       cmp     ax, 4E45h       ; 'EN'
TRANGROUP:65EF		       jnz     short ifmX
TRANGROUP:65F1		       mov     ax, [es:0Eh]    ; [es:arena_name+6]
TRANGROUP:65F5		       cmp     ax, 2020h       ; '  '
TRANGROUP:65F8
TRANGROUP:65F8 ifmX:				       ; ...
TRANGROUP:65F8		       pop     ax
TRANGROUP:65F9		       retn
TRANGROUP:65F9 endp	       isFrozMCB
TRANGROUP:65F9
TRANGROUP:65FA
TRANGROUP:65FA ; =============== S U B R O U T I N E =======================================
TRANGROUP:65FA
TRANGROUP:65FA
TRANGROUP:65FA proc	       frezMCB near	       ; ...
TRANGROUP:65FA		       mov     [word ptr es:1],	8 ; [es:arena_owner],SystemPSPOwner
TRANGROUP:6601		       mov     [word ptr es:8],	5246h ;	[es:arena_name+0],'FR'
TRANGROUP:6608		       mov     [word ptr es:0Ah], 5A4Fh	; [es:arena_name+2],'OZ'
TRANGROUP:660F		       mov     [word ptr es:0Ch], 4E45h	; [es:arena_name+4],'EN'
TRANGROUP:6616		       mov     [word ptr es:0Eh], 2020h	; [es:arena_name+6],'  '
TRANGROUP:661D		       retn
TRANGROUP:661D endp	       frezMCB
TRANGROUP:661D
TRANGROUP:661E
TRANGROUP:661E ; =============== S U B R O U T I N E =======================================
TRANGROUP:661E
TRANGROUP:661E
TRANGROUP:661E proc	       FreezeUM	near
TRANGROUP:661E		       push    ax
TRANGROUP:661F		       push    cx
TRANGROUP:6620		       push    dx
TRANGROUP:6621		       push    es
TRANGROUP:6622		       call    GetLoadUMB
TRANGROUP:6625		       xor     ah, ah
TRANGROUP:6627		       mov     dx, ax
TRANGROUP:6629		       call    UmbHead
TRANGROUP:662C		       mov     es, ax
TRANGROUP:662E		       xor     cx, cx
TRANGROUP:6630
TRANGROUP:6630 fum10:				       ; ...
TRANGROUP:6630		       call    isSysMCB
TRANGROUP:6633		       jnz     short fum20
TRANGROUP:6635		       inc     cx
TRANGROUP:6636
TRANGROUP:6636 fum20:				       ; ...
TRANGROUP:6636		       cmp     cx, dx
TRANGROUP:6638		       jz      short fum30
TRANGROUP:663A		       call    isFreeMCB
TRANGROUP:663D		       jnz     short fum30
TRANGROUP:663F		       call    frezMCB
TRANGROUP:6642
TRANGROUP:6642 fum30:				       ; ...
TRANGROUP:6642		       mov     al, [es:0]
TRANGROUP:6646		       cmp     al, 5Ah ; 'Z'
TRANGROUP:6648		       jz      short fumX
TRANGROUP:664A		       mov     ax, es
TRANGROUP:664C		       add     ax, [es:3]
TRANGROUP:6651		       inc     ax
TRANGROUP:6652		       mov     es, ax
TRANGROUP:6654		       jmp     short fum10
TRANGROUP:6656 ; ---------------------------------------------------------------------------
TRANGROUP:6656
TRANGROUP:6656 fumX:				       ; ...
TRANGROUP:6656		       pop     es
TRANGROUP:6657		       pop     dx
TRANGROUP:6658		       pop     cx
TRANGROUP:6659		       pop     ax
TRANGROUP:665A		       retn
TRANGROUP:665A endp	       FreezeUM
TRANGROUP:665A
TRANGROUP:665B
TRANGROUP:665B ; =============== S U B R O U T I N E =======================================
TRANGROUP:665B
TRANGROUP:665B
TRANGROUP:665B proc	       UmbTest near	       ; ...
TRANGROUP:665B		       push    ax
TRANGROUP:665C		       push    bx
TRANGROUP:665D		       push    ds
TRANGROUP:665E		       push    es
TRANGROUP:665F		       call    fm_link
TRANGROUP:6662		       call    WalkMem
TRANGROUP:6665		       pushf
TRANGROUP:6666		       call    fm_unlink
TRANGROUP:6669		       popf
TRANGROUP:666A		       pop     es
TRANGROUP:666B		       pop     ds
TRANGROUP:666C		       pop     bx
TRANGROUP:666D		       pop     ax
TRANGROUP:666E		       retn
TRANGROUP:666E endp	       UmbTest
TRANGROUP:666E
TRANGROUP:666F
TRANGROUP:666F ; =============== S U B R O U T I N E =======================================
TRANGROUP:666F
TRANGROUP:666F
TRANGROUP:666F proc	       WalkMem near	       ; ...
TRANGROUP:666F		       push    ax	       ; travels memory	chain and returns carry	clear
TRANGROUP:666F					       ; if UMBs are linked
TRANGROUP:6670		       push    bx
TRANGROUP:6671		       push    es
TRANGROUP:6672		       mov     ah, 52h	       ; DOS_GET_DOS_LISTS
TRANGROUP:6674		       int     21h	       ; DOS -
TRANGROUP:6676		       mov     ax, [es:bx-2]
TRANGROUP:667A		       mov     es, ax
TRANGROUP:667C
TRANGROUP:667C um10:				       ; ...
TRANGROUP:667C		       mov     al, [es:0]      ; [es:arena_signature]
TRANGROUP:6680		       cmp     al, 5Ah ; 'Z'   ; arena_signature_end
TRANGROUP:6682		       jz      short um20
TRANGROUP:6684		       mov     bx, es
TRANGROUP:6686		       add     bx, [es:3]      ; [es:arena_size]
TRANGROUP:668B		       inc     bx
TRANGROUP:668C		       mov     es, bx
TRANGROUP:668E		       jmp     short um10
TRANGROUP:6690 ; ---------------------------------------------------------------------------
TRANGROUP:6690
TRANGROUP:6690 um20:				       ; ...
TRANGROUP:6690		       mov     ax, es
TRANGROUP:6692		       cmp     ax, 9FFFh
TRANGROUP:6695		       pop     es
TRANGROUP:6696		       pop     bx
TRANGROUP:6697		       pop     ax
TRANGROUP:6698		       retn
TRANGROUP:6698 endp	       WalkMem
TRANGROUP:6698
TRANGROUP:6699
TRANGROUP:6699 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6699
TRANGROUP:6699
TRANGROUP:6699 proc	       hl_unlink near	       ; ...
TRANGROUP:6699		       xor     bh, bh
TRANGROUP:669B		       push    ds
TRANGROUP:669C		       mov     ds, [ds:RESSEG]
TRANGROUP:66A0		       mov     bl, [ds:fm_umb]
TRANGROUP:66A4		       pop     ds
TRANGROUP:66A5		       mov     ax, 5803h
TRANGROUP:66A8		       int     21h	       ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
TRANGROUP:66A8					       ; AL = function code: (DOS 5beta) set UMB link state
TRANGROUP:66AA		       xor     bh, bh
TRANGROUP:66AC		       push    ds
TRANGROUP:66AD		       mov     ds, [ds:RESSEG]
TRANGROUP:66B1		       mov     bl, [ds:fm_strat]
TRANGROUP:66B5		       pop     ds
TRANGROUP:66B6		       mov     ax, 5801h
TRANGROUP:66B9		       int     21h	       ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
TRANGROUP:66B9					       ; AL = function code: set allocation strategy
TRANGROUP:66BB		       retn
TRANGROUP:66BB endp	       hl_unlink
TRANGROUP:66BB
TRANGROUP:66BC
TRANGROUP:66BC ; =============== S U B R O U T I N E =======================================
TRANGROUP:66BC
TRANGROUP:66BC
TRANGROUP:66BC proc	       LoadHigh	far	       ; ...
TRANGROUP:66BC
TRANGROUP:66BC ; FUNCTION CHUNK	AT TRANGROUP:0554 SIZE 0000006E	BYTES
TRANGROUP:66BC ; FUNCTION CHUNK	AT TRANGROUP:2E33 SIZE 0000004F	BYTES
TRANGROUP:66BC
TRANGROUP:66BC		       push    ds
TRANGROUP:66BD		       pop     es
TRANGROUP:66BE		       call    ParseLhCmd
TRANGROUP:66C1		       jb      short LhErr
TRANGROUP:66C3		       call    SetupCmdLine    ; setup pgm's command line
TRANGROUP:66C6		       call    SetupPath       ; setup path for	file
TRANGROUP:66C9		       jb      short LhErr
TRANGROUP:66CB		       call    HideUMBs
TRANGROUP:66CE		       jmp     LH_EXECUTE
TRANGROUP:66D1 ; ---------------------------------------------------------------------------
TRANGROUP:66D1
TRANGROUP:66D1 LhErr:				       ; ...
TRANGROUP:66D1		       jmp     cerror
TRANGROUP:66D1 endp	       LoadHigh
TRANGROUP:66D1
TRANGROUP:66D4
TRANGROUP:66D4 ; =============== S U B R O U T I N E =======================================
TRANGROUP:66D4
TRANGROUP:66D4
TRANGROUP:66D4 proc	       ParseLhCmd near	       ; ...
TRANGROUP:66D4		       mov     si, 81h	       ; iCmdLine
TRANGROUP:66D7		       push    es
TRANGROUP:66D8		       push    ds
TRANGROUP:66D9		       pop     es
TRANGROUP:66DA		       call    InitVar
TRANGROUP:66DD		       call    ParseVar
TRANGROUP:66E0		       pop     es
TRANGROUP:66E1		       jnb     short plcC
TRANGROUP:66E3		       cmp     ax, 2	       ; PV_BadUMB
TRANGROUP:66E6		       jnz     short plc10
TRANGROUP:66E8		       mov     dx, offset LhBadUMB_Ptr
TRANGROUP:66EB		       stc
TRANGROUP:66EC		       retn
TRANGROUP:66ED ; ---------------------------------------------------------------------------
TRANGROUP:66ED
TRANGROUP:66ED plc10:				       ; ...
TRANGROUP:66ED		       mov     dx, offset LhInvSwt_Ptr
TRANGROUP:66F0		       cmp     ax, 3	       ; PV_InvSwt ; Unrecognized switch passed?
TRANGROUP:66F3		       jz      short plc20
TRANGROUP:66F5		       mov     dx, offset LhInvArg_Ptr
TRANGROUP:66F8
TRANGROUP:66F8 plc20:				       ; ...
TRANGROUP:66F8		       stc
TRANGROUP:66F9		       retn
TRANGROUP:66FA ; ---------------------------------------------------------------------------
TRANGROUP:66FA
TRANGROUP:66FA plcC:				       ; ...
TRANGROUP:66FA		       call    LhCopyFilename  ; copy filename into our	buffer
TRANGROUP:66FD		       retn
TRANGROUP:66FD endp	       ParseLhCmd
TRANGROUP:66FD
TRANGROUP:66FE
TRANGROUP:66FE ; =============== S U B R O U T I N E =======================================
TRANGROUP:66FE
TRANGROUP:66FE
TRANGROUP:66FE proc	       LhCopyFilename near     ; ...
TRANGROUP:66FE		       mov     di, offset EXECPATH
TRANGROUP:6701		       mov     cx, 0
TRANGROUP:6704
TRANGROUP:6704 lhcpfn1:				       ; ...
TRANGROUP:6704		       lodsb
TRANGROUP:6705		       cmp     al, 2Ah ; '*'
TRANGROUP:6707		       jz      short lhfilerr
TRANGROUP:6709		       cmp     al, 3Fh ; '?'
TRANGROUP:670B		       jz      short lhfilerr
TRANGROUP:670D		       cmp     al, 0Dh
TRANGROUP:670F		       jz      short lhcpfn2
TRANGROUP:6711		       cmp     al, [ds:SWITCHAR]
TRANGROUP:6715		       jz      short lhcpfn2
TRANGROUP:6717		       or      al, al
TRANGROUP:6719		       jz      short lhcpfn2
TRANGROUP:671B		       cmp     al, 20h ; ' '
TRANGROUP:671D		       jz      short lhcpfn2
TRANGROUP:671F		       or      al, al
TRANGROUP:6721		       jz      short lhcpfn2
TRANGROUP:6723		       stosb
TRANGROUP:6724		       inc     cx
TRANGROUP:6725		       jmp     short lhcpfn1
TRANGROUP:6727 ; ---------------------------------------------------------------------------
TRANGROUP:6727
TRANGROUP:6727 lhcpfn2:				       ; ...
TRANGROUP:6727		       xor     al, al
TRANGROUP:6729		       stosb
TRANGROUP:672A		       or      cx, cx
TRANGROUP:672C		       jz      short lhmissing
TRANGROUP:672E		       dec     si
TRANGROUP:672F		       clc
TRANGROUP:6730		       retn
TRANGROUP:6731 ; ---------------------------------------------------------------------------
TRANGROUP:6731
TRANGROUP:6731 lhfilerr:			       ; ...
TRANGROUP:6731		       mov     dx, offset LhInvFil_Ptr
TRANGROUP:6734		       stc
TRANGROUP:6735		       retn
TRANGROUP:6736 ; ---------------------------------------------------------------------------
TRANGROUP:6736
TRANGROUP:6736 lhmissing:			       ; ...
TRANGROUP:6736		       mov     dx, offset ReqParmMiss
TRANGROUP:6739		       stc
TRANGROUP:673A		       retn
TRANGROUP:673A endp	       LhCopyFilename
TRANGROUP:673A
TRANGROUP:673B
TRANGROUP:673B ; =============== S U B R O U T I N E =======================================
TRANGROUP:673B
TRANGROUP:673B
TRANGROUP:673B proc	       SetupCmdLine near       ; ...
TRANGROUP:673B		       mov     di, 81h	       ; iCmdLine
TRANGROUP:673E		       xor     cl, cl
TRANGROUP:6740		       dec     cl	       ; just CR means count = 0
TRANGROUP:6742
TRANGROUP:6742 SetCmdL1:			       ; ...
TRANGROUP:6742		       lodsb
TRANGROUP:6743		       stosb
TRANGROUP:6744		       inc     cl	       ; update	count
TRANGROUP:6746		       or      al, al
TRANGROUP:6748		       jz      short SetCmdL2
TRANGROUP:674A		       cmp     al, 0Dh	       ; carriage return?
TRANGROUP:674C		       jnz     short SetCmdL1  ; no, continue storing
TRANGROUP:674E
TRANGROUP:674E SetCmdL2:			       ; ...
TRANGROUP:674E		       mov     [es:80h], cl    ; store new cmd line length
TRANGROUP:6753		       retn
TRANGROUP:6753 endp	       SetupCmdLine
TRANGROUP:6753
TRANGROUP:6754
TRANGROUP:6754 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6754
TRANGROUP:6754
TRANGROUP:6754 proc	       LhSetupErrMsg near      ; ...
TRANGROUP:6754		       mov     [ds:msg_disp_class], 1 ;	[msg_disp_class],ext_msg_class
TRANGROUP:6759		       mov     dx, offset extend_buf_ptr
TRANGROUP:675C		       mov     [ds:extend_buf_ptr], ax
TRANGROUP:675F		       retn
TRANGROUP:675F endp	       LhSetupErrMsg
TRANGROUP:675F
TRANGROUP:6760
TRANGROUP:6760 ; =============== S U B R O U T I N E =======================================
TRANGROUP:6760
TRANGROUP:6760
TRANGROUP:6760 proc	       SetupPath near	       ; ...
TRANGROUP:6760		       mov     ax, [ds:ARG_ARGVCNT] ; [ARG+ARG_UNIT.argvcnt]
TRANGROUP:6763		       dec     ax
TRANGROUP:6764		       mov     bx, 11	       ; ARGV_ELE.SIZE
TRANGROUP:6767		       mul     bx
TRANGROUP:6769		       push    ds
TRANGROUP:676A		       mov     ds, [ds:RESSEG]
TRANGROUP:676E		       mov     cl, [ds:fm_argc]
TRANGROUP:6772		       pop     ds
TRANGROUP:6773		       inc     cl
TRANGROUP:6775
TRANGROUP:6775 argloop:				       ; ...
TRANGROUP:6775		       jcxz    short argdone
TRANGROUP:6777		       dec     cx
TRANGROUP:6778		       push    ax
TRANGROUP:6779		       push    cx
TRANGROUP:677A		       mov     cx, ax
TRANGROUP:677C		       mov     di, offset ARG_ARGV ; mov di,[ARG+ARG_UNIT.argv]	; mov di,[ARG]
TRANGROUP:677F		       mov     si, di
TRANGROUP:6781		       add     si, 11	       ; ARGV_ELE.SIZE
TRANGROUP:6784		       cld
TRANGROUP:6785		       rep movsb
TRANGROUP:6787		       dec     [ds:ARG_ARGVCNT]	; [ARG+ARG_UNIT.argvcnt]
TRANGROUP:678B		       sub     ax, 11	       ; ARGV_ELE.SIZE
TRANGROUP:678E		       pop     cx
TRANGROUP:678F		       pop     ax
TRANGROUP:6790		       jmp     short argloop
TRANGROUP:6792 ; ---------------------------------------------------------------------------
TRANGROUP:6792
TRANGROUP:6792 argdone:				       ; ...
TRANGROUP:6792		       call    path_search
TRANGROUP:6795		       or      ax, ax
TRANGROUP:6797		       jz      short no_exec_file
TRANGROUP:6799		       cmp     ax, 4	       ; executable file?
TRANGROUP:679C		       jl      short no_exec_bat ; no, indicate	fail
TRANGROUP:679E		       clc
TRANGROUP:679F		       retn
TRANGROUP:67A0 ; ---------------------------------------------------------------------------
TRANGROUP:67A0
TRANGROUP:67A0 no_exec_bat:			       ; ...
TRANGROUP:67A0		       mov     dx, offset NoExecBat_Ptr	; offset TRANGROUP:NoExecBat_Ptr
TRANGROUP:67A3		       jmp     short lhsp_errret
TRANGROUP:67A5 ; ---------------------------------------------------------------------------
TRANGROUP:67A5
TRANGROUP:67A5 no_exec_file:			       ; ...
TRANGROUP:67A5		       mov     ax, 2	       ; setup error message
TRANGROUP:67A8		       call    LhSetupErrMsg
TRANGROUP:67AB
TRANGROUP:67AB lhsp_errret:			       ; ...
TRANGROUP:67AB		       stc
TRANGROUP:67AC		       retn
TRANGROUP:67AC endp	       SetupPath
TRANGROUP:67AC
TRANGROUP:67AC ; ---------------------------------------------------------------------------
TRANGROUP:67AD $M_CLASS_3_STRUC	db 0FFh		       ; ...
TRANGROUP:67AE		       dw 0A07h		       ; $M_COMMAND_VER	(COMMAND.COM version)
TRANGROUP:67B0		       db 183
TRANGROUP:67B1 $M_ID_3_1       dw 1020
TRANGROUP:67B3		       dw 732
TRANGROUP:67B5 $M_ID_3_2       dw 1015
TRANGROUP:67B7		       dw 744
TRANGROUP:67B9 $M_ID_3_3       dw 1004,	776,1026, 798,1031, 814,1035, 825,1062,	836
TRANGROUP:67B9		       dw 1028,	847,1045, 877,1041, 902,1042, 932,1043,	955
TRANGROUP:67B9		       dw 1002,	983,1003,1019,1007,1043,1008,1066,1009,1084
TRANGROUP:67B9		       dw 1010,1101,1011,1129,1012,1152,1014,1177,1016,1190
TRANGROUP:67B9		       dw 1017,1228,1018,1261,1019,1277,1021,1285,1022,1311
TRANGROUP:67B9		       dw 1023,1346,1024,1386,1025,1405,1027,1425,1029,1454
TRANGROUP:67B9		       dw 1030,1468,1032,1479,1033,1499,1034,1517,1036,1535
TRANGROUP:67B9		       dw 1037,1552,1038,1565,1039,1580,1040,1637,1044,1652
TRANGROUP:67B9		       dw 1046,1668,1047,1719,1048,1740,1049,1754,1050,1760
TRANGROUP:67B9		       dw 1051,1787,1052,1800,1053,1819,1054,1853,1055,1888
TRANGROUP:67B9		       dw 1056,1898,1057,1909,1059,1918,1060,1919,1061,1919
TRANGROUP:67B9		       dw 1063,1941,1064,1940,1065,1939,1066,1938,1067,1937
TRANGROUP:67B9		       dw 1068,1935,1069,1944,1070,1944,1071,1943,1072,1942
TRANGROUP:67B9		       dw 1073,1948,1074,1954,1075,1960,1076,1962,1077,1961
TRANGROUP:67B9		       dw 1078,1965,1079,1988,1080,1995,1081,2013,1082,2052
TRANGROUP:67B9		       dw 1083,2060,1084,2059,1090,2071,1091,2081,1092,2091
TRANGROUP:67B9		       dw 1093,2101,1094,2118,1095,2143,1096,2168,1097,2213
TRANGROUP:67B9		       dw 1098,2238,1099,2263,1100,2281,1103,2315,1104,2338
TRANGROUP:67B9		       dw 1105,2338,1106,2345,1200,2359,1300,2356,1320,2487
TRANGROUP:67B9		       dw 1321,2547,1340,2656,1341,2744,1342,2839,1360,2981
TRANGROUP:67B9		       dw 1400,3005,1401,3158,1402,3259,1403,3374,1404,3434
TRANGROUP:67B9		       dw 1405,3547,1406,3658,1407,3721,1420,3853,1440,3988
TRANGROUP:67B9		       dw 1441,4023,1460,4151,1461,4248,1462,4376,1480,4452
TRANGROUP:67B9		       dw 1481,4608,1482,4682,1483,4770,1484,4893,1485,5014
TRANGROUP:67B9		       dw 1486,5160,1487,5300,1488,5391,1489,5534,1500,5611
TRANGROUP:67B9		       dw 1520,5670,1540,5728,1541,5818,1542,5922,1560,5978
TRANGROUP:67B9		       dw 1561,6030,1562,6151,1563,6195,1564,6234,1565,6292
TRANGROUP:67B9		       dw 1566,6341,1567,6382,1568,6500,1580,6573,1600,6641
TRANGROUP:67B9		       dw 1601,6666,1602,6746,1620,6903,1621,6987,1622,7113
TRANGROUP:67B9		       dw 1640,7185,1641,7234,1660,7362,1680,7429,1700,7463
TRANGROUP:67B9		       dw 1720,7637,1740,7716,1741,7804,1760,7915,1780,7988
TRANGROUP:67B9		       dw 1800,8092,1801,8166,1820,8250,1821,8318,1840,8453
TRANGROUP:67B9		       dw 1860,8524,1861,8611,1862,8678,1863,8800,1864,8959
TRANGROUP:67B9		       dw 1865,9058,1866,9161,1880,9261,1881,9377,1882,9499
TRANGROUP:67B9		       dw 1883,9582,1900,9741,1920,9810,1921,9854,1922,10003
TRANGROUP:67B9		       dw 1923,10182,1924,10312,1925,10432,1926,10431,1927,10515
TRANGROUP:6A89 $M_ID_3_183     dw 1107
TRANGROUP:6A8B		       dw 10602
TRANGROUP:6A8D MSG_1020	       db 15
TRANGROUP:6A8E		       db '%1 bytes free',0Dh,0Ah
TRANGROUP:6A9D MSG_1015	       db 35
TRANGROUP:6A9E		       db 'File cannot be copied onto itself',0Dh,0Ah
TRANGROUP:6AC1 MSG_1004	       db 25
TRANGROUP:6AC2		       db 'Insufficient disk space',0Dh,0Ah
TRANGROUP:6ADB MSG_1026	       db 19
TRANGROUP:6ADC		       db 'Invalid code page',0Dh,0Ah
TRANGROUP:6AEF MSG_1031	       db 14
TRANGROUP:6AF0		       db 'Invalid date',0Dh,0Ah
TRANGROUP:6AFE MSG_1035	       db 14
TRANGROUP:6AFF		       db 'Invalid time',0Dh,0Ah
TRANGROUP:6B0D MSG_1062	       db 14
TRANGROUP:6B0E		       db 'Invalid path',0Dh,0Ah
TRANGROUP:6B1C MSG_1028	       db 33
TRANGROUP:6B1D		       db 'Press any key to continue . . .',0Dh,0Ah
TRANGROUP:6B3E MSG_1045	       db 28
TRANGROUP:6B3F		       db 'Unable to create directory',0Dh,0Ah
TRANGROUP:6B5B MSG_1041	       db 33
TRANGROUP:6B5C		       db 'Volume in drive %1 has no label',0Dh,0Ah
TRANGROUP:6B7D MSG_1042	       db 26
TRANGROUP:6B7E		       db 'Volume in drive %1 is %2',0Dh,0Ah
TRANGROUP:6B98 MSG_1043	       db 31
TRANGROUP:6B99		       db 'Volume Serial Number is %1-%2',0Dh,0Ah
TRANGROUP:6BB8 MSG_1002	       db 39
TRANGROUP:6BB9		       db 'Duplicate file name or file not found',0Dh,0Ah
TRANGROUP:6BE0 MSG_1003	       db 27
TRANGROUP:6BE1		       db 'Invalid path or file name',0Dh,0Ah
TRANGROUP:6BFC MSG_1007	       db 26
TRANGROUP:6BFD		       db 'Out of environment space',0Dh,0Ah
TRANGROUP:6C17 MSG_1008	       db 21
TRANGROUP:6C18		       db 'File creation error',0Dh,0Ah
TRANGROUP:6C2D MSG_1009	       db 20
TRANGROUP:6C2E		       db 'Batch file missing',0Dh,0Ah
TRANGROUP:6C42 MSG_1010	       db 31
TRANGROUP:6C43		       db 0Dh,0Ah
TRANGROUP:6C43		       db 'Insert disk with batch file',0Dh,0Ah
TRANGROUP:6C62 MSG_1011	       db 26
TRANGROUP:6C63		       db 'Bad command or file name',0Dh,0Ah
TRANGROUP:6C7D MSG_1012	       db 28
TRANGROUP:6C7E		       db 'REXX interpreter not found',0Dh,0Ah
TRANGROUP:6C9A MSG_1014	       db 16
TRANGROUP:6C9B		       db 'Access denied ',0Dh,0Ah
TRANGROUP:6CAB MSG_1016	       db 41
TRANGROUP:6CAC		       db 'Content of destination lost before copy',0Dh,0Ah
TRANGROUP:6CD5 MSG_1017	       db 36
TRANGROUP:6CD6		       db 'Invalid filename or file not found',0Dh,0Ah
TRANGROUP:6CFA		       db 19
TRANGROUP:6CFB		       db '%1 file(s) copied',0Dh,0Ah
TRANGROUP:6D0E		       db 11
TRANGROUP:6D0F		       db '%1 file(s) '
TRANGROUP:6D1A		       db 29
TRANGROUP:6D1B		       db 'Invalid drive specification',0Dh,0Ah
TRANGROUP:6D38		       db 38
TRANGROUP:6D39		       db 'Code page %1 not prepared for system',0Dh,0Ah
TRANGROUP:6D5F		       db 43
TRANGROUP:6D60		       db 'Code page %1 not prepared for all devices',0Dh,0Ah
TRANGROUP:6D8B		       db 22
TRANGROUP:6D8C		       db 'Active code page: %1',0Dh,0Ah
TRANGROUP:6DA2		       db 23
TRANGROUP:6DA3		       db 'NLSFUNC not installed',0Dh,0Ah
TRANGROUP:6DBA		       db 32
TRANGROUP:6DBB		       db 'Current drive is no longer valid'
TRANGROUP:6DDB		       db 17
TRANGROUP:6DDC		       db 'Label not found',0Dh,0Ah
TRANGROUP:6DED		       db 14
TRANGROUP:6DEE		       db 'Syntax error',0Dh,0Ah
TRANGROUP:6DFC		       db 23
TRANGROUP:6DFD		       db 'Current date is %1 %2',0Dh,0Ah
TRANGROUP:6E14		       db 21
TRANGROUP:6E15		       db 'SunMonTueWedThuFriSat'
TRANGROUP:6E2A		       db 21
TRANGROUP:6E2B		       db 'Enter new date (%1): '
TRANGROUP:6E40		       db 20
TRANGROUP:6E41		       db 'Current time is %1',0Dh,0Ah
TRANGROUP:6E55		       db 16
TRANGROUP:6E56		       db 'Enter new time: '
TRANGROUP:6E66		       db 18
TRANGROUP:6E67		       db ',    Delete (Y/N)?'
TRANGROUP:6E79		       db 60
TRANGROUP:6E7A		       db 'All files in directory will be deleted!',0Dh,0Ah
TRANGROUP:6E7A		       db 'Are you sure (Y/N)?'
TRANGROUP:6EB6 MSG_1040	       db 18
TRANGROUP:6EB7		       db 'PC DOS Version 7.1'
TRANGROUP:6EC9		       db 19
TRANGROUP:6ECA		       db 'Invalid directory',0Dh,0Ah
TRANGROUP:6EDD		       db 54
TRANGROUP:6EDE		       db 'Invalid path, not directory,',0Dh,0Ah
TRANGROUP:6EDE		       db 'or directory not empty',0Dh,0Ah
TRANGROUP:6F14		       db 24
TRANGROUP:6F15		       db 'Must specify ON or OFF',0Dh,0Ah
TRANGROUP:6F2D		       db 17
TRANGROUP:6F2E		       db 'Directory of %1',0Dh,0Ah
TRANGROUP:6F3F		       db 9
TRANGROUP:6F40		       db 'No Path',0Dh,0Ah
TRANGROUP:6F49		       db 30
TRANGROUP:6F4A		       db 'Invalid drive in search path',0Dh,0Ah
TRANGROUP:6F68		       db 16
TRANGROUP:6F69		       db 'Invalid device',0Dh,0Ah
TRANGROUP:6F79		       db 22
TRANGROUP:6F7A		       db 'FOR cannot be nested',0Dh,0Ah
TRANGROUP:6F90		       db 37
TRANGROUP:6F91		       db 'Intermediate file error during pipe',0Dh,0Ah
TRANGROUP:6FB6		       db 38
TRANGROUP:6FB7		       db 'Cannot do binary reads from a device',0Dh,0Ah
TRANGROUP:6FDD MSG_1055	       db 13
TRANGROUP:6FDE		       db 'BREAK is %1',0Dh,0Ah
TRANGROUP:6FEB		       db 14
TRANGROUP:6FEC		       db 'VERIFY is %1',0Dh,0Ah
TRANGROUP:6FFA		       db 12
TRANGROUP:6FFB		       db 'ECHO is %1',0Dh,0Ah
TRANGROUP:7007		       db 4
TRANGROUP:7008		       db 'off',0
TRANGROUP:700C		       db 3
TRANGROUP:700D		       db 'on',0
TRANGROUP:7010 MSG_1061	       db 25
TRANGROUP:7011		       db 'Error writing to device',0Dh,0Ah
TRANGROUP:702A		       db 2
TRANGROUP:702B MSG_1063	       db '%1'
TRANGROUP:702D		       db 2
TRANGROUP:702E		       db '%1'
TRANGROUP:7030		       db 2
TRANGROUP:7031		       db '%1'
TRANGROUP:7033		       db 2
TRANGROUP:7034		       db '%1'
TRANGROUP:7036 MSG_1067	       db 1
TRANGROUP:7037		       db 9
TRANGROUP:7038 MSG_1068	       db 12
TRANGROUP:7039		       db ' <DIR>      '
TRANGROUP:7045		       db 3
TRANGROUP:7046		       db 8, 20h, 8
TRANGROUP:7049 MSG_1070	       db 2
TRANGROUP:704A		       db 0Dh,0Ah
TRANGROUP:704C		       db 2
TRANGROUP:704D		       db '%1'
TRANGROUP:704F MSG_1072	       db 9
TRANGROUP:7050		       db 'mm-dd-yy',0
TRANGROUP:7059 MSG_1073	       db 9
TRANGROUP:705A		       db 'dd-mm-yy',0
TRANGROUP:7063 MSG_1074	       db 9
TRANGROUP:7064		       db 'yy-mm-dd',0
TRANGROUP:706D MSG_1075	       db 5
TRANGROUP:706E		       db '%1 %2'
TRANGROUP:7073		       db 2
TRANGROUP:7074		       db '%1'
TRANGROUP:7076		       db 7
TRANGROUP:7077		       db ' %1  %2'
TRANGROUP:707E MSG_1078	       db 26
TRANGROUP:707F		       db 'Directory already exists',0Dh,0Ah
TRANGROUP:7099 MSG_1079	       db 10
TRANGROUP:709A		       db '%1 bytes',0Dh,0Ah
TRANGROUP:70A4 MSG_1080	       db 21
TRANGROUP:70A5		       db 'Total files listed:',0Dh,0Ah
TRANGROUP:70BA		       db 42
TRANGROUP:70BB		       db '(Error occurred in environment variable)',0Dh,0Ah
TRANGROUP:70E5 MSG_1082	       db 11
TRANGROUP:70E6		       db ' [Y,N,ESC]?'
TRANGROUP:70F1 MSG_1083	       db 2
TRANGROUP:70F2		       db 'YN'
TRANGROUP:70F4 MSG_1084	       db 15
TRANGROUP:70F5		       db '(continuing %1)'
TRANGROUP:7104		       db 13
TRANGROUP:7105		       db 'Revision %1',0Dh,0Ah
TRANGROUP:7112		       db 13
TRANGROUP:7113		       db 'DOS is in ROM'
TRANGROUP:7120		       db 13
TRANGROUP:7121		       db 'DOS is in HMA'
TRANGROUP:712E		       db 20
TRANGROUP:712F		       db 'DOS is in low memory'
TRANGROUP:7143		       db 28
TRANGROUP:7144		       db 'Cannot Loadhigh batch file',0Dh,0Ah
TRANGROUP:7160 MSG_1095	       db 28
TRANGROUP:7161		       db 'LOADHIGH: Invalid filename',0Dh,0Ah
TRANGROUP:717D		       db 48
TRANGROUP:717E		       db 'Cannot open specified country information file',0Dh,0Ah
TRANGROUP:71AE MSG_1097	       db 28
TRANGROUP:71AF		       db 'LoadHigh: Invalid argument',0Dh,0Ah
TRANGROUP:71CB MSG_1098	       db 28
TRANGROUP:71CC		       db 'Required parameter missing',0Dh,0Ah
TRANGROUP:71E8		       db 21
TRANGROUP:71E9		       db 'Unrecognized switch',0Dh,0Ah
TRANGROUP:71FE		       db 37
TRANGROUP:71FF		       db 'A bad UMB number has been specified',0Dh,0Ah
TRANGROUP:7224 MSG_1103	       db 26
TRANGROUP:7225		       db 'Overwrite %1 (Yes/No/All)?'
TRANGROUP:723F MSG_1104	       db 3		       ; ...
TRANGROUP:7240 _Y_es	       db 'Y'                  ; ...
TRANGROUP:7241 _N_o	       db 'N'                  ; ...
TRANGROUP:7242 _A_ll	       db 'A'                  ; ...
TRANGROUP:7243 MSG_1105	       db 10
TRANGROUP:7244		       db ' <DIR>    '
TRANGROUP:724E MSG_1106	       db 17
TRANGROUP:724F		       db '%1 K bytes free',0Dh,0Ah
TRANGROUP:7260 MSG_1200	       db 0
TRANGROUP:7261 MSG_1300	       db 134
TRANGROUP:7262		       db 'Sets or clears extended CTRL+C checking.',0Dh,0Ah
TRANGROUP:7262		       db 0Dh,0Ah
TRANGROUP:7262		       db 'BREAK [ON | OFF]',0Dh,0Ah
TRANGROUP:7262		       db 0Dh,0Ah
TRANGROUP:7262		       db 'Type BREAK without a parameter to display the current BREAK setti'
TRANGROUP:7262		       db 'ng.',0Dh,0Ah
TRANGROUP:72E8 MSG_1320	       db 63
TRANGROUP:72E9		       db 'Displays or sets the active code page number.',0Dh,0Ah
TRANGROUP:7318		       db 0Dh,0Ah
TRANGROUP:731A		       db 'CHCP [nnn]',0Dh,0Ah
TRANGROUP:7326		       db 0Dh,0Ah
TRANGROUP:7328		       db 112
TRANGROUP:7329		       db '  nnn   Specifies a code page number.',0Dh,0Ah
TRANGROUP:7350		       db 0Dh,0Ah
TRANGROUP:7352		       db 'Type CHCP without a parameter to display the active code page num'
TRANGROUP:7352		       db 'ber.',0Dh,0Ah
TRANGROUP:7399 MSG_1340	       db 91
TRANGROUP:739A		       db 'Displays the name of or changes the current directory.',0Dh,0Ah
TRANGROUP:73D2		       db 0Dh,0Ah
TRANGROUP:73D4		       db 'CHDIR [drive:][path]',0Dh,0Ah
TRANGROUP:73D4		       db 'CHDIR[..]',0Dh,0Ah
TRANGROUP:73F5		       db 98
TRANGROUP:73F6		       db 'CD [drive:][path]',0Dh,0Ah
TRANGROUP:73F6		       db 'CD[..]',0Dh,0Ah
TRANGROUP:7411		       db 0Dh,0Ah
TRANGROUP:7413		       db '  ..   Specifies that you want to change to the parent directory.'
TRANGROUP:7413		       db 0Dh,0Ah
TRANGROUP:7456		       db 0Dh,0Ah
TRANGROUP:7458		       db 145
TRANGROUP:7459		       db 'Type CD drive: to display the current directory in the specified '
TRANGROUP:7459		       db 'drive.',0Dh,0Ah
TRANGROUP:7459		       db 'Type CD without parameters to display the current drive and direc'
TRANGROUP:7459		       db 'tory.',0Dh,0Ah
TRANGROUP:74EA MSG_1360	       db 27
TRANGROUP:74EB		       db 'Clears the screen.',0Dh,0Ah
TRANGROUP:74FF		       db 0Dh,0Ah
TRANGROUP:7501		       db 'CLS',0Dh,0Ah
TRANGROUP:7506 MSG_1400	       db 156
TRANGROUP:7507		       db 'Copies one or more files to another location.',0Dh,0Ah
TRANGROUP:7536		       db 0Dh,0Ah
TRANGROUP:7538		       db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [des'
TRANGROUP:7538		       db 'tination',0Dh,0Ah
TRANGROUP:7583		       db '  [/A | /B]] [/V] [/Y | /-Y]',0Dh,0Ah
TRANGROUP:75A1		       db 0Dh,0Ah
TRANGROUP:75A3		       db 104
TRANGROUP:75A4		       db '  source       Specifies the file or files to be copied.',0Dh,0Ah
TRANGROUP:75A4		       db '  /A           Indicates an ASCII text file.',0Dh,0Ah
TRANGROUP:760C		       db 118
TRANGROUP:760D		       db '  /B           Indicates a binary file.',0Dh,0Ah
TRANGROUP:760D		       db '  destination  Specifies the directory and/or filename for the ne'
TRANGROUP:760D		       db 'w file(s).',0Dh,0Ah
TRANGROUP:7683 MSG_1403	       db 63
TRANGROUP:7684		       db '  /V           Verifies that new files are written correctly.',0Dh,0Ah
TRANGROUP:76C3 MSG_1404	       db 116
TRANGROUP:76C4		       db '  /Y           Suppresses prompting to confirm you want to overwr'
TRANGROUP:76C4		       db 'ite an',0Dh,0Ah
TRANGROUP:76C4		       db '               existing destination file.',0Dh,0Ah
TRANGROUP:7738 MSG_1405	       db 114
TRANGROUP:7739		       db '  /-Y          Causes prompting to confirm you want to overwrite '
TRANGROUP:7739		       db 'an',0Dh,0Ah
TRANGROUP:7739		       db '               existing destination file.',0Dh,0Ah
TRANGROUP:7739		       db 0Dh,0Ah
TRANGROUP:77AB MSG_1406	       db 66
TRANGROUP:77AC		       db 'The switch /Y may be preset in the COPYCMD environment variable.',0Dh
TRANGROUP:77AC		       db 0Ah
TRANGROUP:77EE MSG_1407	       db 135
TRANGROUP:77EF		       db 'To append files, specify a single file for destination, but multi' ; ...
TRANGROUP:77EF		       db 'ple files',0Dh,0Ah
TRANGROUP:77EF		       db 'for source (using wildcards or file1+file2+file3 format).',0Dh,0Ah
TRANGROUP:7876 MSG_1420	       db 138
TRANGROUP:7877		       db 'Changes the terminal device used to control your system.',0Dh,0Ah
TRANGROUP:78B1		       db 0Dh,0Ah
TRANGROUP:78B3		       db 'CTTY device',0Dh,0Ah
TRANGROUP:78C0		       db 0Dh,0Ah
TRANGROUP:78C2		       db '  device   The terminal device you want to use, such as COM1.',0Dh,0Ah
TRANGROUP:7901 MSG_1440	       db 38
TRANGROUP:7902		       db 'Displays or sets the date.',0Dh,0Ah
TRANGROUP:7902		       db 0Dh,0Ah
TRANGROUP:7902		       db 'DATE',0Dh,0Ah
TRANGROUP:7926		       db 0Dh,0Ah
TRANGROUP:7928		       db 131
TRANGROUP:7929		       db 'Type DATE without parameters to display the current date setting '
TRANGROUP:7929		       db 'and',0Dh,0Ah
TRANGROUP:7929		       db 'a prompt for a new one.  Press ENTER to keep the same date.',0Dh,0Ah
TRANGROUP:79AC MSG_1460	       db 100
TRANGROUP:79AD		       db 'Deletes one or more files.',0Dh,0Ah
TRANGROUP:79AD		       db 0Dh,0Ah
TRANGROUP:79AD		       db 'DEL [drive:][path]filename [/P]',0Dh,0Ah
TRANGROUP:79AD		       db 'ERASE [drive:][path]filename [/P]',0Dh,0Ah
TRANGROUP:7A0F		       db 0Dh,0Ah
TRANGROUP:7A11		       db 131
TRANGROUP:7A12		       db '  [drive:][path]filename  Specifies the file(s) to delete.  Speci'
TRANGROUP:7A12		       db 'fy multiple',0Dh,0Ah
TRANGROUP:7A12		       db '                          files by using wildcards.',0Dh,0Ah
TRANGROUP:7A95		       db 79
TRANGROUP:7A96		       db '  /P                      Prompts for confirmation before deletin'
TRANGROUP:7A96		       db 'g each file.',0Dh,0Ah
TRANGROUP:7AE5 MSG_1480	       db 159
TRANGROUP:7AE6		       db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
TRANGROUP:7AE6		       db 0Dh,0Ah
TRANGROUP:7AE6		       db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attribs]] [/O[[:]so'
TRANGROUP:7AE6		       db 'rtord]]',0Dh,0Ah
TRANGROUP:7AE6		       db '    [/S] [/B] [/L]',0Dh,0Ah
TRANGROUP:7AE6		       db 0Dh,0Ah
TRANGROUP:7B85 MSG_1481	       db 77
TRANGROUP:7B86		       db '  [drive:][path][filename]   Specifies drive, directory, and file'
TRANGROUP:7B86		       db 's to list.',0Dh,0Ah
TRANGROUP:7BD3		       db 91
TRANGROUP:7BD4		       db '  /P      Pauses after each full screen of information.',0Dh,0Ah
TRANGROUP:7BD4		       db '  /W      Uses wide list format.',0Dh,0Ah
TRANGROUP:7C2F MSG_1483	       db 126
TRANGROUP:7C30		       db '  /A      Displays files with specified attributes.',0Dh,0Ah
TRANGROUP:7C30		       db '  attribs   '
TRANGROUP:7C71		       db 'D  Directories   R  Read-only files         H  Hidden files',0Dh,0Ah
TRANGROUP:7CAE		       db 124
TRANGROUP:7CAF		       db '            S  System files  A  Files ready to archive  -  Prefix'
TRANGROUP:7CAF		       db ' meaning "not"',0Dh,0Ah
TRANGROUP:7CAF		       db '  /O      Lists by files in sorted order.',0Dh,0Ah
TRANGROUP:7D2B MSG_1485	       db 149
TRANGROUP:7D2C		       db '  sortord   N  By name (alphabetic)       S  By size (smallest fi'
TRANGROUP:7D2C		       db 'rst)',0Dh,0Ah
TRANGROUP:7D2C		       db '            E  By extension (alphabetic)  D  By date & time (earl'
TRANGROUP:7D2C		       db 'iest first)',0Dh,0Ah
TRANGROUP:7DC1 MSG_1486	       db 143
TRANGROUP:7DC2		       db '            G  Group directories first    -  Prefix to reverse or'
TRANGROUP:7DC2		       db 'der',0Dh,0Ah
TRANGROUP:7DC2		       db '  /S      Displays files in specified directory and all subdirect'
TRANGROUP:7DC2		       db 'ories.',0Dh,0Ah
TRANGROUP:7E51 MSG_1487	       db 94
TRANGROUP:7E52		       db '  /B      Uses bare format (no heading information or summary).',0Dh
TRANGROUP:7E52		       db 0Ah
TRANGROUP:7E52		       db '  /L      Uses lowercase.',0Dh,0Ah
TRANGROUP:7E52		       db 0Dh,0Ah
TRANGROUP:7EB0 MSG_1488	       db 146
TRANGROUP:7EB1		       db 'Switches may be preset in the DIRCMD environment variable.  Overr'
TRANGROUP:7EB1		       db 'ide',0Dh,0Ah
TRANGROUP:7EB1		       db 'preset switches by prefixing any switch with - (hyphen)--for exam'
TRANGROUP:7EB1		       db 'ple, /-W.',0Dh,0Ah
TRANGROUP:7F43 MSG_1489	       db 80
TRANGROUP:7F44		       db 'To remove the commas from the DIR output, use the NO_SEP environm'
TRANGROUP:7F44		       db 'ent variable.',0Dh,0Ah
TRANGROUP:7F94 MSG_1500	       db 62
TRANGROUP:7F95		       db 'Quits the COMMAND.COM program (command interpreter).',0Dh,0Ah
TRANGROUP:7F95		       db 0Dh,0Ah
TRANGROUP:7F95		       db 'EXIT',0Dh,0Ah
TRANGROUP:7FD3 MSG_1520	       db 61
TRANGROUP:7FD4		       db 'Creates a directory.',0Dh,0Ah
TRANGROUP:7FD4		       db 0Dh,0Ah
TRANGROUP:7FD4		       db 'MKDIR [drive:]path',0Dh,0Ah
TRANGROUP:7FD4		       db 'MD [drive:]path',0Dh,0Ah
TRANGROUP:8011 MSG_1540	       db 93
TRANGROUP:8012		       db 'Displays or sets a search path for executable files.',0Dh,0Ah
TRANGROUP:8012		       db 0Dh,0Ah
TRANGROUP:8012		       db 'PATH [[drive:]path[;...]]',0Dh,0Ah
TRANGROUP:8012		       db 'PATH ;',0Dh,0Ah
TRANGROUP:8012		       db 0Dh,0Ah
TRANGROUP:806F		       db 107
TRANGROUP:8070		       db 'Type PATH ; to clear all search-path settings and direct PC DOS t'
TRANGROUP:8070		       db 'o search',0Dh,0Ah
TRANGROUP:8070		       db 'only in the current directory.',0Dh,0Ah
TRANGROUP:80DB		       db 59
TRANGROUP:80DC		       db 'Type PATH without parameters to display the current path.',0Dh,0Ah
TRANGROUP:8117 MSG_1560	       db 55
TRANGROUP:8118		       db 'Changes the PC DOS command prompt.',0Dh,0Ah
TRANGROUP:8118		       db 0Dh,0Ah
TRANGROUP:813E		       db 'PROMPT [text]',0Dh,0Ah
TRANGROUP:813E		       db 0Dh,0Ah
TRANGROUP:814F MSG_1561	       db 124
TRANGROUP:8150		       db '  text    Specifies a new command prompt.',0Dh,0Ah
TRANGROUP:8150		       db 0Dh,0Ah
TRANGROUP:8150		       db 'Prompt can be made up of normal characters and the following spec'
TRANGROUP:8150		       db 'ial codes:',0Dh,0Ah
TRANGROUP:8150		       db 0Dh,0Ah
TRANGROUP:81CC MSG_1562	       db 47
TRANGROUP:81CD		       db '  $Q   = (equal sign)',0Dh,0Ah
TRANGROUP:81CD		       db '  $$   $ (dollar sign)',0Dh,0Ah
TRANGROUP:81FC MSG_1563	       db 42
TRANGROUP:81FD		       db '  $T   Current time',0Dh,0Ah
TRANGROUP:81FD		       db '  $D   Current date',0Dh,0Ah
TRANGROUP:8227 MSG_1564	       db 61
TRANGROUP:8228		       db '  $P   Current drive and path',0Dh,0Ah
TRANGROUP:8228		       db '  $V   PC DOS version number',0Dh,0Ah
TRANGROUP:8265 MSG_1565	       db 52
TRANGROUP:8266		       db '  $N   Current drive',0Dh,0Ah
TRANGROUP:8266		       db '  $G   > (greater-than sign)',0Dh,0Ah
TRANGROUP:829A MSG_1566	       db 44
TRANGROUP:829B		       db '  $L   < (less-than sign)',0Dh,0Ah
TRANGROUP:829B		       db '  $B   | (pipe)',0Dh,0Ah
TRANGROUP:82C7 MSG_1567	       db 121
TRANGROUP:82C8		       db '  $H   Backspace (erases previous character)',0Dh,0Ah
TRANGROUP:82C8		       db '  $E   Escape code (ASCII code 27)',0Dh,0Ah
TRANGROUP:82C8		       db '  $_   Carriage return and linefeed',0Dh,0Ah
TRANGROUP:82C8		       db 0Dh,0Ah
TRANGROUP:8341		       db 76
TRANGROUP:8342		       db 'Type PROMPT without parameters to reset the prompt to the default'
TRANGROUP:8342		       db ' setting.',0Dh,0Ah
TRANGROUP:838E MSG_1580	       db 71
TRANGROUP:838F		       db 'Removes (deletes) a directory.',0Dh,0Ah
TRANGROUP:838F		       db 0Dh,0Ah
TRANGROUP:838F		       db 'RMDIR [drive:]path',0Dh,0Ah
TRANGROUP:838F		       db 'RD [drive:]path',0Dh,0Ah
TRANGROUP:83D6 MSG_1600	       db 28
TRANGROUP:83D7		       db 'Renames a file or files.',0Dh,0Ah
TRANGROUP:83D7		       db 0Dh,0Ah
TRANGROUP:83F3		       db 83
TRANGROUP:83F4		       db 'RENAME [drive:][path]filename1 filename2',0Dh,0Ah
TRANGROUP:83F4		       db 'REN [drive:][path]filename1 filename2',0Dh,0Ah
TRANGROUP:83F4		       db 0Dh,0Ah
TRANGROUP:8447 MSG_1602	       db 160
TRANGROUP:8448		       db 'Note that you cannot specify a new drive or path for your destina'
TRANGROUP:8448		       db 'tion file.',0Dh,0Ah
TRANGROUP:8448		       db 0Dh,0Ah
TRANGROUP:8448		       db 'Use MOVE to move files from one directory to another, or to renam'
TRANGROUP:8448		       db 'e a directory.',0Dh,0Ah
TRANGROUP:84E8 MSG_1620	       db 87
TRANGROUP:84E9		       db 'Displays, sets, or removes PC DOS environment variables.',0Dh,0Ah
TRANGROUP:84E9		       db 0Dh,0Ah
TRANGROUP:84E9		       db 'SET [variable=[string]]',0Dh,0Ah
TRANGROUP:84E9		       db 0Dh,0Ah
TRANGROUP:8540		       db 129
TRANGROUP:8541		       db '  variable  Specifies the environment-variable name.',0Dh,0Ah
TRANGROUP:8541		       db '  string    Specifies a series of characters to assign to the var'
TRANGROUP:8541		       db 'iable.',0Dh,0Ah
TRANGROUP:8541		       db 0Dh,0Ah
TRANGROUP:85C2 MSG_1622	       db 75
TRANGROUP:85C3		       db 'Type SET without parameters to display the current environment va'
TRANGROUP:85C3		       db 'riables.',0Dh,0Ah
TRANGROUP:860E MSG_1640	       db 52
TRANGROUP:860F		       db 'Displays or sets the system time.',0Dh,0Ah
TRANGROUP:860F		       db 0Dh,0Ah
TRANGROUP:860F		       db 'TIME [time]',0Dh,0Ah
TRANGROUP:860F		       db 0Dh,0Ah
TRANGROUP:8643		       db 131
TRANGROUP:8644		       db 'Type TIME with no parameters to display the current time setting '
TRANGROUP:8644		       db 'and a prompt',0Dh,0Ah
TRANGROUP:8644		       db 'for a new one.  Press ENTER to keep the same time.',0Dh,0Ah
TRANGROUP:86C7 MSG_1660	       db 70
TRANGROUP:86C8		       db 'Displays the contents of a text file.',0Dh,0Ah
TRANGROUP:86C8		       db 0Dh,0Ah
TRANGROUP:86C8		       db 'TYPE [drive:][path]filename',0Dh,0Ah
TRANGROUP:870E MSG_1680	       db 37
TRANGROUP:870F		       db 'Displays the PC DOS Version.',0Dh,0Ah
TRANGROUP:870F		       db 0Dh,0Ah
TRANGROUP:872F		       db 'VER',0Dh,0Ah
TRANGROUP:8734 MSG_1700	       db 177
TRANGROUP:8735		       db 'Tells PC DOS whether to verify that your files are written correc'
TRANGROUP:8735		       db 'tly to a',0Dh,0Ah
TRANGROUP:8735		       db 'disk.',0Dh,0Ah
TRANGROUP:8735		       db 0Dh,0Ah
TRANGROUP:8735		       db 'VERIFY [ON | OFF]',0Dh,0Ah
TRANGROUP:8735		       db 0Dh,0Ah
TRANGROUP:8735		       db 'Type VERIFY without a parameter to display the current VERIFY set'
TRANGROUP:8735		       db 'ting.',0Dh,0Ah
TRANGROUP:87E6 MSG_1720	       db 82
TRANGROUP:87E7		       db 'Displays the disk volume label and serial number, if they exist.',0Dh
TRANGROUP:87E7		       db 0Ah
TRANGROUP:87E7		       db 0Dh,0Ah
TRANGROUP:87E7		       db 'VOL [drive:]',0Dh,0Ah
TRANGROUP:8839 MSG_1740	       db 91
TRANGROUP:883A		       db 'Calls one batch program from another.',0Dh,0Ah
TRANGROUP:883A		       db 0Dh,0Ah
TRANGROUP:883A		       db 'CALL [drive:][path]filename [batch-parameters]',0Dh,0Ah
TRANGROUP:883A		       db 0Dh,0Ah
TRANGROUP:8895 MSG_1741	       db 114
TRANGROUP:8896		       db '  batch-parameters   Specifies any command-line information requi'
TRANGROUP:8896		       db 'red by the',0Dh,0Ah
TRANGROUP:8896		       db '                     batch program.',0Dh,0Ah
TRANGROUP:8908 MSG_1760	       db 76
TRANGROUP:8909		       db 'Records comments (remarks) in a batch file or CONFIG.SYS.',0Dh,0Ah
TRANGROUP:8909		       db 0Dh,0Ah
TRANGROUP:8909		       db 'REM [comment]',0Dh,0Ah
TRANGROUP:8955 MSG_1780	       db 107
TRANGROUP:8956		       db 'Suspends processing of a batch program and displays the message "'
TRANGROUP:8956		       db 'Press any',0Dh,0Ah
TRANGROUP:8956		       db 'key to continue...."',0Dh,0Ah
TRANGROUP:8956		       db 0Dh,0Ah
TRANGROUP:8956		       db 'PAUSE',0Dh,0Ah
TRANGROUP:89C1 MSG_1800	       db 77
TRANGROUP:89C2		       db 'Displays messages, or turns command-echoing on or off.',0Dh,0Ah
TRANGROUP:89C2		       db 0Dh,0Ah
TRANGROUP:89C2		       db '  ECHO [ON | OFF]',0Dh,0Ah
TRANGROUP:8A0F MSG_1801	       db 87
TRANGROUP:8A10		       db '  ECHO [message]',0Dh,0Ah
TRANGROUP:8A10		       db 0Dh,0Ah
TRANGROUP:8A10		       db 'Type ECHO without parameters to display the current echo setting.'
TRANGROUP:8A10		       db 0Dh,0Ah
TRANGROUP:8A67 MSG_1820	       db 71
TRANGROUP:8A68		       db 'Directs PC DOS to a labelled line in a batch program.',0Dh,0Ah
TRANGROUP:8A68		       db 0Dh,0Ah
TRANGROUP:8A68		       db 'GOTO label',0Dh,0Ah
TRANGROUP:8A68		       db 0Dh,0Ah
TRANGROUP:8AAF		       db 138
TRANGROUP:8AB0		       db '  label   Specifies a text string used in the batch program as a '
TRANGROUP:8AB0		       db 'label.',0Dh,0Ah
TRANGROUP:8AB0		       db 0Dh,0Ah
TRANGROUP:8AB0		       db 'You type a label on a line by itself, beginning with a colon.',0Dh,0Ah
TRANGROUP:8B3A MSG_1840	       db 74
TRANGROUP:8B3B		       db 'Changes the position of replaceable parameters in a batch file.',0Dh
TRANGROUP:8B3B		       db 0Ah
TRANGROUP:8B3B		       db 0Dh,0Ah
TRANGROUP:8B3B		       db 'SHIFT',0Dh,0Ah
TRANGROUP:8B85 MSG_1860	       db 90
TRANGROUP:8B86		       db 'Performs conditional processing in batch programs.',0Dh,0Ah
TRANGROUP:8B86		       db 0Dh,0Ah
TRANGROUP:8B86		       db 'IF [NOT] ERRORLEVEL number command',0Dh,0Ah
TRANGROUP:8BE0		       db 70
TRANGROUP:8BE1		       db 'IF [NOT] string1==string2 command',0Dh,0Ah
TRANGROUP:8BE1		       db 'IF [NOT] EXIST filename command',0Dh,0Ah
TRANGROUP:8BE1		       db 0Dh,0Ah
TRANGROUP:8C27		       db 125
TRANGROUP:8C28		       db '  NOT               Specifies that PC DOS should carry out the co'
TRANGROUP:8C28		       db 'mmand only',0Dh,0Ah
TRANGROUP:8C28		       db '                    if the condition is false.',0Dh,0Ah
TRANGROUP:8CA5 MSG_1863	       db 162
TRANGROUP:8CA6		       db '  ERRORLEVEL number Specifies a true condition if the last progra'
TRANGROUP:8CA6		       db 'm run returned',0Dh,0Ah
TRANGROUP:8CA6		       db '                    an exit code equal to or greater than the num'
TRANGROUP:8CA6		       db 'ber specified.',0Dh,0Ah
TRANGROUP:8D48		       db 102
TRANGROUP:8D49		       db '  command           Specifies the command to carry out if the con'
TRANGROUP:8D49		       db 'dition is',0Dh,0Ah
TRANGROUP:8D49		       db '                    met.',0Dh,0Ah
TRANGROUP:8DAF		       db 106
TRANGROUP:8DB0		       db '  string1==string2  Specifies a true condition if the specified t'
TRANGROUP:8DB0		       db 'ext strings',0Dh,0Ah
TRANGROUP:8DB0		       db '                    match.',0Dh,0Ah
TRANGROUP:8E1A		       db 103
TRANGROUP:8E1B		       db '  EXIST filename    Specifies a true condition if the specified f'
TRANGROUP:8E1B		       db 'ilename',0Dh,0Ah
TRANGROUP:8E1B		       db '                    exists.',0Dh,0Ah
TRANGROUP:8E82 MSG_1880	       db 119
TRANGROUP:8E83		       db 'Runs a specified command for each file in a set of files.',0Dh,0Ah
TRANGROUP:8E83		       db 0Dh,0Ah
TRANGROUP:8E83		       db 'FOR %variable IN (set) DO command [command-parameters]',0Dh,0Ah
TRANGROUP:8E83		       db 0Dh,0Ah
TRANGROUP:8EFA		       db 125
TRANGROUP:8EFB		       db '  %variable  Specifies a replaceable parameter.',0Dh,0Ah
TRANGROUP:8EFB		       db '  (set)      Specifies a set of one or more files.  Wildcards may'
TRANGROUP:8EFB		       db ' be used.',0Dh,0Ah
TRANGROUP:8F78		       db 86
TRANGROUP:8F79		       db '  command    Specifies the command to carry out for each file.',0Dh,0Ah
TRANGROUP:8F79		       db '  command-parameters',0Dh,0Ah
TRANGROUP:8FCF MSG_1883	       db 162
TRANGROUP:8FD0		       db '             Specifies parameters or switches for the specified c'
TRANGROUP:8FD0		       db 'ommand.',0Dh,0Ah
TRANGROUP:8FD0		       db 0Dh,0Ah
TRANGROUP:8FD0		       db 'To use the FOR command in a batch program, specify %%variable ins'
TRANGROUP:8FD0		       db 'tead of',0Dh,0Ah
TRANGROUP:8FD0		       db '%variable.',0Dh,0Ah
TRANGROUP:9072 MSG_1900	       db 72
TRANGROUP:9073		       db 'Returns a fully qualified filename.',0Dh,0Ah
TRANGROUP:9073		       db 0Dh,0Ah
TRANGROUP:9073		       db 'TRUENAME [drive:][path]filename',0Dh,0Ah
TRANGROUP:90BB MSG_1920	       db 47
TRANGROUP:90BC		       db 'Loads a program into the upper memory area.',0Dh,0Ah
TRANGROUP:90BC		       db 0Dh,0Ah
TRANGROUP:90EB MSG_1921	       db 152
TRANGROUP:90EC		       db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
TRANGROUP:90EC		       db 'LOADHIGH [/L:region1[,minsize1][;region2[,minsize2]...]]',0Dh,0Ah
TRANGROUP:90EC		       db '         [drive:][path]filename [parameters]',0Dh,0Ah
TRANGROUP:90EC		       db 0Dh,0Ah
TRANGROUP:9184 MSG_1922	       db 182
TRANGROUP:9185		       db '/L:region1[,minsize1][;region2[,minsize2]]...',0Dh,0Ah
TRANGROUP:9185		       db '            Specifies the region(s) of memory into which to load',0Dh
TRANGROUP:9185		       db 0Ah
TRANGROUP:9185		       db '            the program.  Region1 specifies the number of the fir'
TRANGROUP:9185		       db 'st',0Dh,0Ah
TRANGROUP:923B MSG_1923	       db 133
TRANGROUP:923C		       db '            memory region; minsize1 specifies the minimum size, i'
TRANGROUP:923C		       db 'f',0Dh,0Ah
TRANGROUP:923C		       db '            any, for region1.  Region2 and minsize2 specify the',0Dh
TRANGROUP:923C		       db 0Ah
TRANGROUP:92C1 MSG_1924	       db 123
TRANGROUP:92C2		       db '            number and minimum size of the second region, if any.'
TRANGROUP:92C2		       db 0Dh,0Ah
TRANGROUP:92C2		       db '            You can specify as many regions as you want.'
TRANGROUP:933D MSG_1925	       db 2
TRANGROUP:933E		       db 0Dh,0Ah
TRANGROUP:9340 MSG_1926	       db 87
TRANGROUP:9341		       db '[drive:][path]filename',0Dh,0Ah
TRANGROUP:9341		       db '            Specifies the location and name of the program.',0Dh,0Ah
TRANGROUP:9341		       db 0Dh,0Ah
TRANGROUP:9398 MSG_1927	       db 90
TRANGROUP:9399		       db 'parameters  Specifies any command-line information required by',0Dh,0Ah
TRANGROUP:9399		       db '            the program.',0Dh,0Ah
TRANGROUP:93F3 MSG_1107	       db 12
TRANGROUP:93F4		       db '%1 K bytes',0Dh,0Ah
TRANGROUP:9400
TRANGROUP:9400 ; =============== S U B R O U T I N E =======================================
TRANGROUP:9400
TRANGROUP:9400
TRANGROUP:9400 proc	       $M_CLS_3	near	       ; ...
TRANGROUP:9400		       push    cs
TRANGROUP:9401		       pop     es
TRANGROUP:9402		       assume es:TRANGROUP
TRANGROUP:9402		       lea     di, [$M_CLASS_3_STRUC]
TRANGROUP:9406		       add     cx, 11353       ; ADD CX,$-$M_CLASS_3_STRUC
TRANGROUP:940A		       retn
TRANGROUP:940A endp	       $M_CLS_3
TRANGROUP:940A
TRANGROUP:940A ; ---------------------------------------------------------------------------
TRANGROUP:940B $M_CLASS_1_STRUC	db 1		       ; ...
TRANGROUP:940B					       ; $M_CLASS_ID
TRANGROUP:940C		       dw 0A07h		       ; EXPECTED_VERSION (COMMAND.COM version)
TRANGROUP:940E		       db 4		       ; Class_1_MessageCount
TRANGROUP:940F $M_ID_1_1       dw 2		       ; Message Number	= 2
TRANGROUP:9411		       dw 10h		       ; Message offset	from message number
TRANGROUP:9413 $M_ID_1_2       dw 3		       ; Message Number	= 3
TRANGROUP:9415		       dw 1Bh		       ; Message offset	from message number
TRANGROUP:9417 $M_ID_1_3       dw 8		       ; Message Number	= 8
TRANGROUP:9419		       dw 26h		       ; Message offset	from message number
TRANGROUP:941B $M_ID_1_4       dw 0FFFFh	       ; Message Number	= -1
TRANGROUP:941D		       dw 36h		       ; Message offset	from message number
TRANGROUP:941F EXTEND2	       db 14
TRANGROUP:9420		       db 'File not found'
TRANGROUP:942E EXTEND3	       db 14
TRANGROUP:942F		       db 'Path not found'
TRANGROUP:943D EXTEND8	       db 19
TRANGROUP:943E		       db 'Insufficient memory'
TRANGROUP:9451 EXTEND999       db 17
TRANGROUP:9452		       db 'Extended Error %1'
TRANGROUP:9463
TRANGROUP:9463 ; =============== S U B R O U T I N E =======================================
TRANGROUP:9463
TRANGROUP:9463
TRANGROUP:9463 proc	       $M_MSGSERV_1 near       ; ...
TRANGROUP:9463		       push    cs
TRANGROUP:9464		       pop     es
TRANGROUP:9465		       lea     di, [$M_CLASS_1_STRUC]
TRANGROUP:9469		       add     cx, 94	       ; $-$M_CLASS_1_STRUC
TRANGROUP:946C		       retn
TRANGROUP:946C endp	       $M_MSGSERV_1
TRANGROUP:946C
TRANGROUP:946C ; ---------------------------------------------------------------------------
TRANGROUP:946D $M_CLASS_2_STRUC	db 2		       ; ...
TRANGROUP:946D					       ; $M_CLASS_ID
TRANGROUP:946E		       dw 0A07h		       ; EXPECTED_VERSION (COMMAND.COM version)
TRANGROUP:9470		       db 1		       ; Class_2_MessageCount
TRANGROUP:9471 $M_ID_2_1       dw 0FFFFh	       ; Message Number	= -1
TRANGROUP:9473		       dw 4		       ; Message offset	from message number
TRANGROUP:9475 PARSE999	       db 14
TRANGROUP:9476		       db 'Parse Error %1'
TRANGROUP:9484
TRANGROUP:9484 ; =============== S U B R O U T I N E =======================================
TRANGROUP:9484
TRANGROUP:9484
TRANGROUP:9484 proc	       $M_MSGSERV_2 near       ; ...
TRANGROUP:9484		       push    cs
TRANGROUP:9485		       pop     es
TRANGROUP:9486		       lea     di, [$M_CLASS_2_STRUC]
TRANGROUP:948A		       add     cx, 29
TRANGROUP:948D		       retn
TRANGROUP:948D endp	       $M_MSGSERV_2
TRANGROUP:948D
TRANGROUP:948D ; ---------------------------------------------------------------------------
TRANGROUP:948E msg_disp_class  db 0FFh		       ; ...
TRANGROUP:948F msg_cont_flag   db 0		       ; ...
TRANGROUP:9490 extend_buf_ptr  dw 0		       ; ...
TRANGROUP:9492 extend_buf_sub  db 0		       ; ...
TRANGROUP:9493		       db 11
TRANGROUP:9494		       db 0
TRANGROUP:9495 extend_buf_off  dw offset string_ptr_2
TRANGROUP:9497 extend_buf_seg  dw 0
TRANGROUP:9499		       db 0
TRANGROUP:949A		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:949B		       db 128
TRANGROUP:949C		       db 0
TRANGROUP:949D		       db 20h		       ; blank
TRANGROUP:949E RENERR_PTR      dw 1002		       ; ...
TRANGROUP:94A0		       db 0
TRANGROUP:94A1 BADCPMES_PTR    dw 1003		       ; ...
TRANGROUP:94A3		       db 0
TRANGROUP:94A4 NOSPACE_PTR     dw 1004		       ; ...
TRANGROUP:94A6		       db 0
TRANGROUP:94A7 ENVERR_PTR      dw 1007		       ; ...
TRANGROUP:94A9		       db 0
TRANGROUP:94AA FULLDIR_PTR     dw 1008		       ; ...
TRANGROUP:94AC		       db 0
TRANGROUP:94AD BADBAT_PTR      dw 1009		       ; ...
TRANGROUP:94AF		       db 0
TRANGROUP:94B0 NEEDBAT_PTR     dw 1010		       ; ...
TRANGROUP:94B2		       db 0
TRANGROUP:94B3 BADNAM_PTR      dw 1011		       ; ...
TRANGROUP:94B5		       db 0
TRANGROUP:94B6 REXXNOTF_PTR    dw 1012		       ; ...
TRANGROUP:94B8		       db 0
TRANGROUP:94B9 ACCDEN_PTR      dw 1014		       ; ...
TRANGROUP:94BB		       db 0
TRANGROUP:94BC OVERWR_PTR      dw 1015		       ; ...
TRANGROUP:94BE		       db 0
TRANGROUP:94BF LOSTERR_PTR     dw 1016		       ; ...
TRANGROUP:94C1		       db 0
TRANGROUP:94C2 INORNOT_PTR     dw 1017		       ; ...
TRANGROUP:94C4		       db 0
TRANGROUP:94C5 copied_ptr      dw 1018		       ; ...
TRANGROUP:94C7		       db 1
TRANGROUP:94C8		       db 11		       ; parm_block_size
TRANGROUP:94C9		       db 0
TRANGROUP:94CA		       dw offset Copy_num
TRANGROUP:94CC		       dw 0
TRANGROUP:94CE		       db 1
TRANGROUP:94CF		       db 0A1h		       ; Right_Align+Unsgn_Bin_Word
TRANGROUP:94D0		       db 9		       ; maximum width
TRANGROUP:94D1		       db 9		       ; minimum width
TRANGROUP:94D2		       db 20h		       ; pad character
TRANGROUP:94D3 dirmes_ptr      dw 1019		       ; ...
TRANGROUP:94D5		       db 1
TRANGROUP:94D6		       db 11
TRANGROUP:94D7		       db 0
TRANGROUP:94D8		       dw offset Dir_Num
TRANGROUP:94DA		       dw 0
TRANGROUP:94DC		       db 1
TRANGROUP:94DD		       db 0E1h		       ; Right_Align+Unsgn_Bin_Word
TRANGROUP:94DE		       db 9
TRANGROUP:94DF		       db 9
TRANGROUP:94E0		       db 20h
TRANGROUP:94E1 dirmes_w_ptr    dw 1019		       ; ...
TRANGROUP:94E3		       db 1
TRANGROUP:94E4		       db 11
TRANGROUP:94E5		       db 0
TRANGROUP:94E6		       dw offset Dir_Num
TRANGROUP:94E8		       dw 0
TRANGROUP:94EA		       db 1
TRANGROUP:94EB		       db 0F1h		       ; long binary to	decimal
TRANGROUP:94EC		       db 10
TRANGROUP:94ED		       db 10
TRANGROUP:94EE		       db 20h
TRANGROUP:94EF dirmes2_ptr     dw 1019		       ; ...
TRANGROUP:94F1		       db 1
TRANGROUP:94F2		       db 11
TRANGROUP:94F3		       db 0
TRANGROUP:94F4		       dw offset Dir_Num
TRANGROUP:94F6		       dw 0
TRANGROUP:94F8		       db 1
TRANGROUP:94F9		       db 0B1h		       ; Right_Align+Unsgn_Bin_DWord
TRANGROUP:94FA		       db 9
TRANGROUP:94FB		       db 9
TRANGROUP:94FC		       db 20h
TRANGROUP:94FD bytmes1_ptr     dw 1020		       ; ...
TRANGROUP:94FF		       db 1
TRANGROUP:9500		       db 11
TRANGROUP:9501		       db 0
TRANGROUP:9502		       dw offset Bytes_Free
TRANGROUP:9504		       dw 0
TRANGROUP:9506		       db 1
TRANGROUP:9507		       db 0F1h		       ; long binary to	decimal
TRANGROUP:9508		       db 30		       ; maximum width
TRANGROUP:9509		       db 30		       ; minimum width
TRANGROUP:950A		       db 20h		       ; blank
TRANGROUP:950B bytmes2_ptr     dw 1020		       ; ...
TRANGROUP:950D		       db 1
TRANGROUP:950E		       db 11
TRANGROUP:950F		       db 0
TRANGROUP:9510		       dw offset Bytes_Free
TRANGROUP:9512		       dw 0
TRANGROUP:9514		       db 1
TRANGROUP:9515		       db 0F1h		       ; long binary to	decimal
TRANGROUP:9516		       db 33		       ; maximum width
TRANGROUP:9517		       db 33		       ; minimum width
TRANGROUP:9518		       db 20h		       ; pad
TRANGROUP:9519 bytmes_n_ptr    dw 1020		       ; ...
TRANGROUP:951B		       db 1
TRANGROUP:951C		       db 11		       ; parm_block_size
TRANGROUP:951D		       db 0
TRANGROUP:951E		       dw offset Bytes_Free
TRANGROUP:9520		       dw 0
TRANGROUP:9522		       db 1
TRANGROUP:9523		       db 0B1h		       ; Right_Align+Unsgn_Bin_DWord
TRANGROUP:9524		       db 28
TRANGROUP:9525		       db 28
TRANGROUP:9526		       db 20h
TRANGROUP:9527 baddrv_ptr      dw 1021		       ; ...
TRANGROUP:9529		       db 0
TRANGROUP:952A cp_not_set_ptr  dw 1022		       ; ...
TRANGROUP:952C		       db 1
TRANGROUP:952D		       db 11
TRANGROUP:952E		       db 0
TRANGROUP:952F		       dw offset system_cpage
TRANGROUP:9531		       dw 0
TRANGROUP:9533		       db 1
TRANGROUP:9534		       db 0A1h
TRANGROUP:9535		       db 5
TRANGROUP:9536		       db 1
TRANGROUP:9537		       db 20h
TRANGROUP:9538 cp_not_all_ptr  dw 1023		       ; ...
TRANGROUP:953A		       db 1
TRANGROUP:953B		       db 11
TRANGROUP:953C		       db 0
TRANGROUP:953D		       dw offset system_cpage
TRANGROUP:953F		       dw 0
TRANGROUP:9541		       db 1
TRANGROUP:9542		       db 0A1h		       ; Right_Align+Unsgn_Bin_Word
TRANGROUP:9543		       db 5
TRANGROUP:9544		       db 1
TRANGROUP:9545		       db 20h
TRANGROUP:9546 cp_active_ptr   dw 1024		       ; ...
TRANGROUP:9548		       db 1
TRANGROUP:9549		       db 11
TRANGROUP:954A		       db 0
TRANGROUP:954B		       dw offset system_cpage
TRANGROUP:954D		       dw 0
TRANGROUP:954F		       db 1
TRANGROUP:9550		       db 0A1h
TRANGROUP:9551		       db 5
TRANGROUP:9552		       db 1
TRANGROUP:9553		       db 20h
TRANGROUP:9554 NLSFUNC_PTR     dw 1025		       ; ...
TRANGROUP:9556		       db 0
TRANGROUP:9557 INV_CODE_PAGE   dw 1026		       ; ...
TRANGROUP:9559		       db 0
TRANGROUP:955A BADCURDRV       dw 1027		       ; ...
TRANGROUP:955C		       db 0
TRANGROUP:955D PAUSEMES_PTR    dw 1028		       ; ...
TRANGROUP:955F		       db 0
TRANGROUP:9560 BADLAB_PTR      dw 1029		       ; ...
TRANGROUP:9562		       db 0
TRANGROUP:9563 SYNTMES_PTR     dw 1030		       ; ...
TRANGROUP:9565		       db 0
TRANGROUP:9566 BADDAT_PTR      dw 1031		       ; ...
TRANGROUP:9568		       db 0
TRANGROUP:9569 CurDat_Ptr      dw 1032		       ; ...
TRANGROUP:956B		       db 2
TRANGROUP:956C		       db 11
TRANGROUP:956D		       db 0
TRANGROUP:956E		       dw offset TPBUF	       ; Arg_Buf
TRANGROUP:9570		       dw 0
TRANGROUP:9572		       db 1
TRANGROUP:9573		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:9574		       db 3
TRANGROUP:9575		       db 3
TRANGROUP:9576		       db 20h
TRANGROUP:9577		       db 11
TRANGROUP:9578		       db 0
TRANGROUP:9579 CurDat_yr       dw 0		       ; ...
TRANGROUP:957B CurDat_mo_day   dw 0		       ; ...
TRANGROUP:957D		       db 2
TRANGROUP:957E		       db 34h		       ; DATE_MDY_4
TRANGROUP:957F		       db 10
TRANGROUP:9580		       db 10
TRANGROUP:9581		       db 20h
TRANGROUP:9582 WeekTab	       dw 1033		       ; ...
TRANGROUP:9584		       db 0
TRANGROUP:9585 NewDat_Ptr      dw 1034		       ; ...
TRANGROUP:9587		       db 1
TRANGROUP:9588		       db 11
TRANGROUP:9589		       db 0
TRANGROUP:958A NewDat_Format   dw 0		       ; ...
TRANGROUP:958C		       dw 0
TRANGROUP:958E		       db 1
TRANGROUP:958F		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:9590		       db 8
TRANGROUP:9591		       db 8
TRANGROUP:9592		       db 20h
TRANGROUP:9593 BadTim_Ptr      dw 1035		       ; ...
TRANGROUP:9595		       db 0
TRANGROUP:9596 CurTim_Ptr      dw 1036		       ; ...
TRANGROUP:9598		       db 1
TRANGROUP:9599		       db 11
TRANGROUP:959A		       db 0
TRANGROUP:959B CurTim_hr_min   dw 0		       ; ...
TRANGROUP:959D CurTim_Sec_hn   dw 0		       ; ...
TRANGROUP:959F		       db 1
TRANGROUP:95A0		       db 0A5h		       ; Right_Align+TIME_HHMMSSHH_Cty
TRANGROUP:95A1		       db 12
TRANGROUP:95A2		       db 12
TRANGROUP:95A3		       db 20h
TRANGROUP:95A4 NewTim_Ptr      dw 1037		       ; ...
TRANGROUP:95A6		       db 0
TRANGROUP:95A7 Del_Y_N_Ptr     dw 1038		       ; ...
TRANGROUP:95A9		       db 0
TRANGROUP:95AA SureMes_Ptr     dw 1039		       ; ...
TRANGROUP:95AC		       db 0
TRANGROUP:95AD VerMes_Ptr      dw 1040		       ; ...
TRANGROUP:95AF		       db 0		       ; number	of subst
TRANGROUP:95B0		       db 11
TRANGROUP:95B1		       db 0
TRANGROUP:95B2		       dw offset Major_Ver_Num
TRANGROUP:95B4		       dw 0
TRANGROUP:95B6		       db 1
TRANGROUP:95B7		       db 0A1h		       ; Right_Align+Unsgn_Bin_Word
TRANGROUP:95B8		       db 1
TRANGROUP:95B9		       db 1
TRANGROUP:95BA		       db 20h
TRANGROUP:95BB		       db 11
TRANGROUP:95BC		       db 0
TRANGROUP:95BD		       dw offset Minor_Ver_Num
TRANGROUP:95BF		       dw 0
TRANGROUP:95C1		       db 2
TRANGROUP:95C2		       db 0A1h		       ; Right_Align+Unsgn_Bin_Word
TRANGROUP:95C3		       db 2
TRANGROUP:95C4		       db 2
TRANGROUP:95C5		       db '0'                  ; 30h ; pad character
TRANGROUP:95C6 VolMes_Ptr_2    dw 1041		       ; ...
TRANGROUP:95C8		       db 1
TRANGROUP:95C9		       db 11
TRANGROUP:95CA		       db 0
TRANGROUP:95CB		       dw offset vol_drv
TRANGROUP:95CD		       dw 0
TRANGROUP:95CF		       db 1
TRANGROUP:95D0		       db 0		       ; Char_field_Char
TRANGROUP:95D1		       db 128
TRANGROUP:95D2		       db 1
TRANGROUP:95D3		       db 20h
TRANGROUP:95D4 VolMes_Ptr      dw 1042		       ; ...
TRANGROUP:95D6		       db 2
TRANGROUP:95D7		       db 11
TRANGROUP:95D8		       db 0
TRANGROUP:95D9		       dw offset vol_drv
TRANGROUP:95DB		       dw 0
TRANGROUP:95DD		       db 1
TRANGROUP:95DE		       db 0		       ; character
TRANGROUP:95DF		       db 128
TRANGROUP:95E0		       db 1
TRANGROUP:95E1		       db 20h		       ; blank (space)
TRANGROUP:95E2		       db 11
TRANGROUP:95E3		       db 0
TRANGROUP:95E4		       dw offset CHARBUF
TRANGROUP:95E6		       dw 0
TRANGROUP:95E8		       db 2
TRANGROUP:95E9		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:95EA		       db 128
TRANGROUP:95EB		       db 1
TRANGROUP:95EC		       db 20h
TRANGROUP:95ED VolSerMes_Ptr   dw 1043		       ; ...
TRANGROUP:95EF		       db 2
TRANGROUP:95F0		       db 11
TRANGROUP:95F1		       db 0
TRANGROUP:95F2		       dw offset vol_serial+2
TRANGROUP:95F4		       dw 0
TRANGROUP:95F6		       db 1		       ; first subst
TRANGROUP:95F7		       db 0A3h		       ; Right_Align+Bin_Hex_Word
TRANGROUP:95F8		       db 4
TRANGROUP:95F9		       db 4
TRANGROUP:95FA		       db 30h		       ; '0'
TRANGROUP:95FB		       db 11
TRANGROUP:95FC		       db 0
TRANGROUP:95FD		       dw offset vol_serial
TRANGROUP:95FF		       dw 0
TRANGROUP:9601		       db 2		       ; second	subst
TRANGROUP:9602		       db 0A3h		       ; Right_Align+Bin_Hex_Word
TRANGROUP:9603		       db 4
TRANGROUP:9604		       db 4
TRANGROUP:9605		       db 30h
TRANGROUP:9606 badcd_ptr       dw 1044		       ; ...
TRANGROUP:9608		       db 0
TRANGROUP:9609 badmkd_ptr      dw 1045		       ; ...
TRANGROUP:960B		       db 0
TRANGROUP:960C badrmd_ptr      dw 1046		       ; ...
TRANGROUP:960E		       db 0
TRANGROUP:960F bad_on_off_ptr  dw 1047		       ; ...
TRANGROUP:9611		       db 0
TRANGROUP:9612 dirhead_ptr     dw 1048		       ; ...
TRANGROUP:9614		       db 1
TRANGROUP:9615		       db 11
TRANGROUP:9616		       db 0
TRANGROUP:9617		       dw offset BWDBUF
TRANGROUP:9619		       dw 0
TRANGROUP:961B		       db 1
TRANGROUP:961C		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:961D		       db 128
TRANGROUP:961E		       db 0
TRANGROUP:961F		       db 20h
TRANGROUP:9620 NULLPATH_PTR    dw 1049		       ; ...
TRANGROUP:9622		       db 0
TRANGROUP:9623 BADPMES_PTR     dw 1050		       ; ...
TRANGROUP:9625		       db 0
TRANGROUP:9626 BADDEV_PTR      dw 1051		       ; ...
TRANGROUP:9628		       db 0
TRANGROUP:9629 FORNESTMES_PTR  dw 1052		       ; ...
TRANGROUP:962B		       db 0
TRANGROUP:962C PIPEEMES_PTR    dw 1053		       ; ...
TRANGROUP:962E		       db 0
TRANGROUP:962F INBDEV_PTR      dw 1054		       ; ...
TRANGROUP:9631		       db 0
TRANGROUP:9632 CtrlcMes_Ptr    dw 1055		       ; ...
TRANGROUP:9634		       db 1
TRANGROUP:9635		       db 11
TRANGROUP:9636		       db 0
TRANGROUP:9637		       dw 0
TRANGROUP:9639		       dw 0
TRANGROUP:963B		       db 1
TRANGROUP:963C		       db 10h
TRANGROUP:963D		       db 128
TRANGROUP:963E		       db 1
TRANGROUP:963F		       db 20h
TRANGROUP:9640 VeriMes_Ptr     dw 1056		       ; ...
TRANGROUP:9642		       db 1
TRANGROUP:9643		       db 11
TRANGROUP:9644		       db 0
TRANGROUP:9645		       dw 0
TRANGROUP:9647		       dw 0
TRANGROUP:9649		       db 1
TRANGROUP:964A		       db 10h
TRANGROUP:964B		       db 128
TRANGROUP:964C		       db 1
TRANGROUP:964D		       db 20h
TRANGROUP:964E EchoMes_Ptr     dw 1057		       ; ...
TRANGROUP:9650		       db 1
TRANGROUP:9651		       db 11
TRANGROUP:9652		       db 0
TRANGROUP:9653		       dw 0
TRANGROUP:9655		       dw 0
TRANGROUP:9657		       db 1
TRANGROUP:9658		       db 10h
TRANGROUP:9659		       db 128
TRANGROUP:965A		       db 1
TRANGROUP:965B		       db 20h
TRANGROUP:965C OFFMES_PTR      dw 1059		       ; ...
TRANGROUP:965E		       db 0
TRANGROUP:965F ONMES_PTR       dw 1060		       ; ...
TRANGROUP:9661		       db 0
TRANGROUP:9662 DEVWMES_PTR     dw 1061		       ; ...
TRANGROUP:9664		       db 0
TRANGROUP:9665 INVAL_PATH_PTR  dw 1062
TRANGROUP:9667		       db 0
TRANGROUP:9668 arg_buf_ptr     dw 1063		       ; ...
TRANGROUP:966A		       db 1
TRANGROUP:966B		       db 11
TRANGROUP:966C		       db 0
TRANGROUP:966D		       dw offset TPBUF	       ; Arg_Buf
TRANGROUP:966F		       dw 0
TRANGROUP:9671		       db 1
TRANGROUP:9672		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:9673		       db 128
TRANGROUP:9674		       db 0
TRANGROUP:9675		       db 20h
TRANGROUP:9676 file_name_ptr   dw 1064		       ; ...
TRANGROUP:9678		       db 1
TRANGROUP:9679		       db 11
TRANGROUP:967A		       db 0
TRANGROUP:967B		       dw offset SrcBuf
TRANGROUP:967D		       dw 0
TRANGROUP:967F		       db 1
TRANGROUP:9680		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:9681		       db 128
TRANGROUP:9682		       db 0
TRANGROUP:9683		       db 20h
TRANGROUP:9684 disp_file_size_ptr dw 1065	       ; ...
TRANGROUP:9686		       db 1
TRANGROUP:9687		       db 11
TRANGROUP:9688		       db 0
TRANGROUP:9689		       dw offset File_Size_Low
TRANGROUP:968B		       dw 0
TRANGROUP:968D		       db 1
TRANGROUP:968E		       db 0F1h
TRANGROUP:968F		       db 12
TRANGROUP:9690		       db 12
TRANGROUP:9691		       db 20h
TRANGROUP:9692 disp_file_size_w_ptr dw 1065	       ; ...
TRANGROUP:9694		       db 1
TRANGROUP:9695		       db 11
TRANGROUP:9696		       db 0
TRANGROUP:9697		       dw offset File_Size_Low
TRANGROUP:9699		       dw 0
TRANGROUP:969B		       db 1
TRANGROUP:969C		       db 0F1h		       ; long binary to	decimal
TRANGROUP:969D		       db 14
TRANGROUP:969E		       db 14
TRANGROUP:969F		       db 20h
TRANGROUP:96A0 disp_file_size_n_ptr dw 1065	       ; ...
TRANGROUP:96A2		       db 1
TRANGROUP:96A3		       db 11
TRANGROUP:96A4		       db 0
TRANGROUP:96A5		       dw offset File_Size_Low
TRANGROUP:96A7		       dw 0
TRANGROUP:96A9		       db 1
TRANGROUP:96AA		       db 0B1h		       ; Right_Align+Unsgn_Bin_DWord
TRANGROUP:96AB		       db 10
TRANGROUP:96AC		       db 10
TRANGROUP:96AD		       db 20h
TRANGROUP:96AE string_buf_ptr  dw 1066		       ; ...
TRANGROUP:96B0		       db 1
TRANGROUP:96B1		       db 11
TRANGROUP:96B2		       db 0
TRANGROUP:96B3		       dw offset string_ptr_2
TRANGROUP:96B5		       dw 0
TRANGROUP:96B7		       db 1
TRANGROUP:96B8		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:96B9		       db 128
TRANGROUP:96BA		       db 0
TRANGROUP:96BB		       db 20h
TRANGROUP:96BC		       db 0
TRANGROUP:96BD tab_ptr	       dw 1067		       ; ...
TRANGROUP:96BF		       db 0
TRANGROUP:96C0 dmes_ptr	       dw 1068		       ; ...
TRANGROUP:96C2		       db 0
TRANGROUP:96C3 space_4_ptr     dw 1105		       ; ...
TRANGROUP:96C5		       db 0
TRANGROUP:96C6 dback_ptr       dw 1069		       ; ...
TRANGROUP:96C8		       db 0
TRANGROUP:96C9 acrlf_ptr       dw 1070		       ; ...
TRANGROUP:96CB		       db 0
TRANGROUP:96CC usadat_ptr      dw 1072		       ; ...
TRANGROUP:96CE		       db 0
TRANGROUP:96CF eurdat_ptr      dw 1073		       ; ...
TRANGROUP:96D1		       db 0
TRANGROUP:96D2 japdat_ptr      dw 1074		       ; ...
TRANGROUP:96D4		       db 0
TRANGROUP:96D5 promptdat_ptr   dw 1075		       ; ...
TRANGROUP:96D7		       db 2
TRANGROUP:96D8		       db 11
TRANGROUP:96D9		       db 0
TRANGROUP:96DA		       dw offset TPBUF	       ; Arg_Buf
TRANGROUP:96DC		       dw 0
TRANGROUP:96DE		       db 1
TRANGROUP:96DF		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:96E0		       db 3
TRANGROUP:96E1		       db 3
TRANGROUP:96E2		       db 20h
TRANGROUP:96E3		       db 11
TRANGROUP:96E4		       db 0
TRANGROUP:96E5 promptDat_yr    dw 0		       ; ...
TRANGROUP:96E7 promptDat_moday dw 0		       ; ...
TRANGROUP:96E9		       db 2
TRANGROUP:96EA		       db 34h		       ; DATE_MDY_4
TRANGROUP:96EB		       db 10
TRANGROUP:96EC		       db 8
TRANGROUP:96ED		       db 20h
TRANGROUP:96EE promtim_ptr     dw 1076		       ; ...
TRANGROUP:96F0		       db 1
TRANGROUP:96F1		       db 11
TRANGROUP:96F2		       db 0
TRANGROUP:96F3 PromTim_hr_min  dw 0		       ; ...
TRANGROUP:96F5 PromTim_Sec_hn  dw 0		       ; ...
TRANGROUP:96F7		       db 1
TRANGROUP:96F8		       db 0A6h		       ; Right_Align+TIME_HHMMSSHH_24
TRANGROUP:96F9		       db 11
TRANGROUP:96FA		       db 11
TRANGROUP:96FB		       db 20h
TRANGROUP:96FC dirdattim_ptr   dw 1077		       ; ...
TRANGROUP:96FE		       db 2
TRANGROUP:96FF		       db 11
TRANGROUP:9700		       db 0
TRANGROUP:9701 DirDat_Yr       dw 0		       ; ...
TRANGROUP:9703 DirDat_Mo_Day   dw 0		       ; ...
TRANGROUP:9705		       db 1
TRANGROUP:9706 DirDat_form     db 0A4h		       ; ...
TRANGROUP:9706					       ; Right_Align+DATE_MDY_2
TRANGROUP:9707 DirDat_width    db 10		       ; ...
TRANGROUP:9708		       db 8		       ; minimum width
TRANGROUP:9709		       db 20h
TRANGROUP:970A		       db 11
TRANGROUP:970B		       db 0
TRANGROUP:970C DirTim_Hr_Min   dw 0		       ; ...
TRANGROUP:970E DirTim_Sec_hn   dw 0
TRANGROUP:9710		       db 2
TRANGROUP:9711		       db 85h		       ; Right_align+TIME_HHMM_Cty
TRANGROUP:9712		       db 6
TRANGROUP:9713		       db 6
TRANGROUP:9714		       db 20h
TRANGROUP:9715 MD_EXISTS_PTR   dw 1078		       ; ...
TRANGROUP:9717		       db 0
TRANGROUP:9718 bytes_ptr       dw 1079		       ; ...
TRANGROUP:971A		       db 1
TRANGROUP:971B		       db 11
TRANGROUP:971C		       db 0
TRANGROUP:971D		       dw offset FileSiz
TRANGROUP:971F		       dw 0
TRANGROUP:9721		       db 1
TRANGROUP:9722		       db 0F1h
TRANGROUP:9723		       db 12
TRANGROUP:9724		       db 12
TRANGROUP:9725		       db 20h
TRANGROUP:9726 bytes_w_tr      dw 1079		       ; ...
TRANGROUP:9728		       db 1
TRANGROUP:9729		       db 11
TRANGROUP:972A		       db 0
TRANGROUP:972B		       dw offset FileSiz
TRANGROUP:972D		       dw 0
TRANGROUP:972F		       db 1
TRANGROUP:9730		       db 0F1h
TRANGROUP:9731		       db 14
TRANGROUP:9732		       db 14
TRANGROUP:9733		       db 20h
TRANGROUP:9734 bytes_n_ptr     dw 1079		       ; ...
TRANGROUP:9736		       db 1
TRANGROUP:9737		       db 11
TRANGROUP:9738		       db 0
TRANGROUP:9739		       db 0B1h
TRANGROUP:973A		       db 160
TRANGROUP:973B		       db 0
TRANGROUP:973C		       db 0
TRANGROUP:973D		       db 1
TRANGROUP:973E		       db 0B1h
TRANGROUP:973F		       db 10
TRANGROUP:9740		       db 10
TRANGROUP:9741		       db 20h
TRANGROUP:9742 kbytes_ptr      dw 1107		       ; ...
TRANGROUP:9744		       db 1
TRANGROUP:9745		       db 11
TRANGROUP:9746		       db 0
TRANGROUP:9747		       db 0B1h
TRANGROUP:9748		       db 160
TRANGROUP:9749		       db 0
TRANGROUP:974A		       db 0
TRANGROUP:974B		       db 1
TRANGROUP:974C		       db 0F1h
TRANGROUP:974D		       db 14
TRANGROUP:974E		       db 14
TRANGROUP:974F		       db 20h
TRANGROUP:9750 kybytes_n_ptr   dw 1107		       ; ...
TRANGROUP:9752		       db 1
TRANGROUP:9753		       db 11
TRANGROUP:9754		       db 0
TRANGROUP:9755		       dw offset FileSiz
TRANGROUP:9757		       dw 0
TRANGROUP:9759		       db 1
TRANGROUP:975A		       db 0B1h
TRANGROUP:975B		       db 10
TRANGROUP:975C		       db 10
TRANGROUP:975D		       db 20h
TRANGROUP:975E total_ptr       dw 1080		       ; ...
TRANGROUP:9760		       db 0
TRANGROUP:9761 errparsenv_ptr  dw 1081		       ; ...
TRANGROUP:9763		       db 0
TRANGROUP:9764 cox_Y_quest_ptr dw 1082		       ; ...
TRANGROUP:9766		       db 0		       ; no_subst
TRANGROUP:9767 cox_Y_answ_ptr  dw 1083
TRANGROUP:9769		       db 0
TRANGROUP:976A dircont_ptr     dw 1084		       ; ...
TRANGROUP:976C		       db 1		       ; number	of subst
TRANGROUP:976D		       db 11		       ; parm_block_size ; size	of sublist
TRANGROUP:976E		       db 0		       ; reserved
TRANGROUP:976F		       dw offset BWDBUF	       ; offset	of arg
TRANGROUP:9771		       dw 0		       ; segment of arg
TRANGROUP:9773		       db 1		       ; first subst
TRANGROUP:9774		       db 10h		       ; Char_field_ASCIIZ
TRANGROUP:9775		       db 128		       ; maximum width
TRANGROUP:9776		       db 0		       ; minimum width
TRANGROUP:9777		       db 20h		       ; blank ; pad character
TRANGROUP:9778 dosrev_ptr      dw 1090		       ; ...
TRANGROUP:977A		       db 1
TRANGROUP:977B		       db 11
TRANGROUP:977C		       db 0
TRANGROUP:977D		       dw offset One_Char_Val
TRANGROUP:977F		       dw 0
TRANGROUP:9781		       db 1
TRANGROUP:9782		       db 0		       ; CHAR_FIELD_CHAR
TRANGROUP:9783		       db 1
TRANGROUP:9784		       db 1
TRANGROUP:9785		       db 20h
TRANGROUP:9786 DosRom_Ptr      dw 1091		       ; ...
TRANGROUP:9788		       db 0
TRANGROUP:9789 DosHma_Ptr      dw 1092		       ; ...
TRANGROUP:978B		       db 0
TRANGROUP:978C DosLow_Ptr      dw 1093		       ; ...
TRANGROUP:978E		       db 0
TRANGROUP:978F NoExecBat_Ptr   dw 1094		       ; ...
TRANGROUP:9791		       db 0
TRANGROUP:9792 LhInvFil_Ptr    dw 1095		       ; ...
TRANGROUP:9794		       db 0
TRANGROUP:9795 NoCntry_Ptr     dw 1096		       ; ...
TRANGROUP:9797		       db 0
TRANGROUP:9798 LhInvArg_Ptr    dw 1097		       ; ...
TRANGROUP:979A		       db 0
TRANGROUP:979B ReqParmMiss     dw 1098		       ; ...
TRANGROUP:979D		       db 0
TRANGROUP:979E LhInvSwt_Ptr    dw 1099		       ; ...
TRANGROUP:97A0		       db 0
TRANGROUP:97A1 LhBadUMB_Ptr    dw 1100		       ; ...
TRANGROUP:97A3		       db 0
TRANGROUP:97A4 kbytesf_ptr     dw 1106		       ; ...
TRANGROUP:97A6		       db 1
TRANGROUP:97A7		       db 11
TRANGROUP:97A8		       db 0
TRANGROUP:97A9		       dw offset Bytes_Free
TRANGROUP:97AB		       dw 0
TRANGROUP:97AD		       db 1
TRANGROUP:97AE		       db 0F1h		       ; long binary to	decimal
TRANGROUP:97AF		       db 30
TRANGROUP:97B0		       db 30
TRANGROUP:97B1		       db 20h
TRANGROUP:97B2 kbytesf_n_ptr   dw 1106		       ; ...
TRANGROUP:97B4		       db 1
TRANGROUP:97B5		       db 11
TRANGROUP:97B6		       db 0
TRANGROUP:97B7		       dw offset Bytes_Free
TRANGROUP:97B9		       dw 0
TRANGROUP:97BB		       db 1
TRANGROUP:97BC		       db 0B1h		       ; Right_Align+Unsgn_Bin_DWord
TRANGROUP:97BD		       db 28
TRANGROUP:97BE		       db 28
TRANGROUP:97BF		       db 20h
TRANGROUP:97C0 PATH_TEXT       db 'PATH='              ; ...
TRANGROUP:97C5 PROMPT_TEXT     db 'PROMPT='            ; ...
TRANGROUP:97CC COMSPECSTR      db 'COMSPEC='           ; ...
TRANGROUP:97D4 DirEnvVar       db 'DIRCMD='            ; ...
TRANGROUP:97DB no_sep_text     db 'NO_SEP='            ; ...
TRANGROUP:97E2 BreakHelpMsgs   dw 1300		       ; ...
TRANGROUP:97E4		       dw 0
TRANGROUP:97E6 ChcpHelpMsgs    dw 1320		       ; ...
TRANGROUP:97E8		       dw 1321
TRANGROUP:97EA		       dw 0
TRANGROUP:97EC CdHelpMsgs      dw 1340		       ; ...
TRANGROUP:97EE		       dw 1341
TRANGROUP:97F0		       dw 1342
TRANGROUP:97F2		       dw 0
TRANGROUP:97F4 ClsHelpMsgs     dw 1360		       ; ...
TRANGROUP:97F6		       dw 0
TRANGROUP:97F8 CopyHelpMsgs    dw 1400		       ; ...
TRANGROUP:97FA		       dw 1401
TRANGROUP:97FC		       dw 1402
TRANGROUP:97FE		       dw 1403
TRANGROUP:9800		       dw 1404
TRANGROUP:9802		       dw 1405
TRANGROUP:9804		       dw 1406
TRANGROUP:9806		       dw 1407
TRANGROUP:9808		       dw 0
TRANGROUP:980A CttyHelpMsgs    dw 1420		       ; ...
TRANGROUP:980C		       dw 0
TRANGROUP:980E DateHelpMsgs    dw 1440		       ; ...
TRANGROUP:9810		       dw 1441
TRANGROUP:9812		       dw 0
TRANGROUP:9814 DelHelpMsgs     dw 1460		       ; ...
TRANGROUP:9816		       dw 1461
TRANGROUP:9818		       dw 1462
TRANGROUP:981A		       dw 0
TRANGROUP:981C DirHelpMsgs     dw 1480		       ; ...
TRANGROUP:981E		       dw 1481
TRANGROUP:9820		       dw 1482
TRANGROUP:9822		       dw 1483
TRANGROUP:9824		       dw 1484
TRANGROUP:9826		       dw 1485
TRANGROUP:9828		       dw 1486
TRANGROUP:982A		       dw 1487
TRANGROUP:982C		       dw 1488
TRANGROUP:982E		       dw 1489
TRANGROUP:9830		       dw 0
TRANGROUP:9832 ExitHelpMsgs    dw 1500		       ; ...
TRANGROUP:9834		       dw 0
TRANGROUP:9836 MdHelpMsgs      dw 1520		       ; ...
TRANGROUP:9838		       dw 0
TRANGROUP:983A PathHelpMsgs    dw 1540		       ; ...
TRANGROUP:983C		       dw 1541
TRANGROUP:983E		       dw 1542
TRANGROUP:9840		       dw 0
TRANGROUP:9842 PromptHelpMsgs  dw 1560		       ; ...
TRANGROUP:9844		       dw 1561
TRANGROUP:9846		       dw 1562
TRANGROUP:9848		       dw 1563
TRANGROUP:984A		       dw 1564
TRANGROUP:984C		       dw 1565
TRANGROUP:984E		       dw 1566
TRANGROUP:9850		       dw 1567
TRANGROUP:9852		       dw 1568
TRANGROUP:9854		       dw 0
TRANGROUP:9856 RdHelpMsgs      dw 1580		       ; ...
TRANGROUP:9858		       dw 0
TRANGROUP:985A RenHelpMsgs     dw 1600		       ; ...
TRANGROUP:985C		       dw 1601
TRANGROUP:985E		       dw 1602
TRANGROUP:9860		       dw 0
TRANGROUP:9862 SetHelpMsgs     dw 1620		       ; ...
TRANGROUP:9864		       dw 1621
TRANGROUP:9866		       dw 1622
TRANGROUP:9868		       dw 0
TRANGROUP:986A TimeHelpMsgs    dw 1640		       ; ...
TRANGROUP:986C		       dw 1641
TRANGROUP:986E		       dw 0
TRANGROUP:9870 TypeHelpMsgs    dw 1660		       ; ...
TRANGROUP:9872		       dw 0
TRANGROUP:9874 VerHelpMsgs     dw 1680		       ; ...
TRANGROUP:9876		       dw 0
TRANGROUP:9878 VerifyHelpMsgs  dw 1700		       ; ...
TRANGROUP:987A		       dw 0
TRANGROUP:987C VolHelpMsgs     dw 1720		       ; ...
TRANGROUP:987E		       dw 0
TRANGROUP:9880 CallHelpMsgs    dw 1740		       ; ...
TRANGROUP:9882		       dw 1741
TRANGROUP:9884		       dw 0
TRANGROUP:9886 RemHelpMsgs     dw 1760		       ; ...
TRANGROUP:9888		       dw 0
TRANGROUP:988A PauseHelpMsgs   dw 1780		       ; ...
TRANGROUP:988C		       dw 0
TRANGROUP:988E EchoHelpMsgs    dw 1800		       ; ...
TRANGROUP:9890		       dw 1801
TRANGROUP:9892		       dw 0
TRANGROUP:9894 GotoHelpMsgs    dw 1820		       ; ...
TRANGROUP:9896		       dw 1821
TRANGROUP:9898		       dw 0
TRANGROUP:989A ShiftHelpMsgs   dw 1840		       ; ...
TRANGROUP:989C		       dw 0
TRANGROUP:989E IfHelpMsg       dw 1860		       ; ...
TRANGROUP:98A0		       dw 1861
TRANGROUP:98A2		       dw 1862
TRANGROUP:98A4		       dw 1863
TRANGROUP:98A6		       dw 1864
TRANGROUP:98A8		       dw 1865
TRANGROUP:98AA		       dw 1866
TRANGROUP:98AC		       dw 0
TRANGROUP:98AE ForHelpMsgs     dw 1880		       ; ...
TRANGROUP:98B0		       dw 1881
TRANGROUP:98B2		       dw 1882
TRANGROUP:98B4		       dw 1883
TRANGROUP:98B6		       dw 0
TRANGROUP:98B8 TruenameHelpMsgs	dw 1900		       ; ...
TRANGROUP:98BA		       dw 0
TRANGROUP:98BC LoadhighHelpMsgs	dw 1920		       ; ...
TRANGROUP:98BE		       dw 1921
TRANGROUP:98C0		       dw 1922
TRANGROUP:98C2		       dw 1923
TRANGROUP:98C4		       dw 1924
TRANGROUP:98C6		       dw 1925
TRANGROUP:98C8		       dw 1926
TRANGROUP:98CA		       dw 1927
TRANGROUP:98CC		       dw 0
TRANGROUP:98CE twospacechars   db '  ',0               ; ...
TRANGROUP:98D1 CLSSTRING       db 4		       ; ...
TRANGROUP:98D2		       db 1Bh
TRANGROUP:98D3 PROMPT_TABLE_3  db '[2J'                ; ...
TRANGROUP:98D6 PROMPT_TABLE    db 'B'
TRANGROUP:98D7		       dw offset Print_B
TRANGROUP:98D9		       db 'D'
TRANGROUP:98DA		       dw offset PRINT_DATE
TRANGROUP:98DC		       db 'E'
TRANGROUP:98DD		       dw offset PRINT_ESC
TRANGROUP:98DF		       db 'G'
TRANGROUP:98E0		       dw offset PRINT_G
TRANGROUP:98E2		       db 'H'
TRANGROUP:98E3		       dw offset PRINT_BACK
TRANGROUP:98E5		       db 'L'
TRANGROUP:98E6		       dw offset PRINT_L
TRANGROUP:98E8		       db 'N'
TRANGROUP:98E9		       dw offset PRINT_DRIVE
TRANGROUP:98EB		       db 'P'
TRANGROUP:98EC		       dw offset build_dir_for_prompt
TRANGROUP:98EE		       db 'Q'
TRANGROUP:98EF		       dw offset PRINT_EQ
TRANGROUP:98F1		       db 'R'
TRANGROUP:98F2		       dw offset PRINT_R       ; PRINT Return code, [Retcode]
TRANGROUP:98F4		       db 'T'
TRANGROUP:98F5		       dw offset PRINT_TIME
TRANGROUP:98F7		       db 'V'
TRANGROUP:98F8		       dw offset PRINT_VERSION
TRANGROUP:98FA		       db '_'
TRANGROUP:98FB		       dw offset CRLF2
TRANGROUP:98FD		       db '$'
TRANGROUP:98FE		       dw offset PRINT_CHAR
TRANGROUP:9900		       db 0
TRANGROUP:9901 IFTAB	       db 3,'NOT'              ; ...
TRANGROUP:9905		       dw offset IFNOT
TRANGROUP:9907		       db 10
TRANGROUP:9908		       db 'ERRORLEVEL'
TRANGROUP:9912		       dw offset IFERLEV
TRANGROUP:9914		       db 5
TRANGROUP:9915		       db 'EXIST'
TRANGROUP:991A		       dw offset IFEXISTS
TRANGROUP:991C		       db 0
TRANGROUP:991D COMTAB	       db 3,'DIR'              ; ...
TRANGROUP:9921		       db 3
TRANGROUP:9922		       dw offset CATALOG
TRANGROUP:9924		       dw offset DirHelpMsgs
TRANGROUP:9926		       db 4
TRANGROUP:9927		       db 'CALL'
TRANGROUP:992B		       db 2
TRANGROUP:992C		       dw offset _$CALL
TRANGROUP:992E		       dw offset CallHelpMsgs
TRANGROUP:9930		       db 4
TRANGROUP:9931		       db 'CHCP'
TRANGROUP:9935		       db 2
TRANGROUP:9936		       dw offset CHCP
TRANGROUP:9938		       dw offset ChcpHelpMsgs
TRANGROUP:993A		       db 6
TRANGROUP:993B		       db 'RENAME'
TRANGROUP:9941		       db 3
TRANGROUP:9942		       dw offset CRENAME
TRANGROUP:9944		       dw offset RenHelpMsgs
TRANGROUP:9946		       db 3
TRANGROUP:9947		       db 'REN'
TRANGROUP:994A		       db 3
TRANGROUP:994B		       dw offset CRENAME
TRANGROUP:994D		       dw offset RenHelpMsgs
TRANGROUP:994F		       db 5
TRANGROUP:9950		       db 'ERASE'
TRANGROUP:9955		       db 3
TRANGROUP:9956		       dw offset ERASE
TRANGROUP:9958		       dw offset DelHelpMsgs
TRANGROUP:995A		       db 3
TRANGROUP:995B		       db 'DEL'
TRANGROUP:995E		       db 3
TRANGROUP:995F		       dw offset ERASE
TRANGROUP:9961		       dw offset DelHelpMsgs
TRANGROUP:9963		       db 4
TRANGROUP:9964		       db 'TYPE'
TRANGROUP:9968		       db 3
TRANGROUP:9969		       dw offset TYPEFIL
TRANGROUP:996B		       dw offset TypeHelpMsgs
TRANGROUP:996D		       db 3
TRANGROUP:996E		       db 'REM'
TRANGROUP:9971		       db 6
TRANGROUP:9972		       dw offset TCOMMAND
TRANGROUP:9974		       dw offset RemHelpMsgs
TRANGROUP:9976		       db 4
TRANGROUP:9977		       db 'COPY'
TRANGROUP:997B		       db 3
TRANGROUP:997C		       dw offset COPY
TRANGROUP:997E		       dw offset CopyHelpMsgs
TRANGROUP:9980		       db 5
TRANGROUP:9981		       db 'PAUSE'
TRANGROUP:9986		       db 6
TRANGROUP:9987		       dw offset PAUSE
TRANGROUP:9989		       dw offset PauseHelpMsgs
TRANGROUP:998B		       db 4
TRANGROUP:998C		       db 'DATE'
TRANGROUP:9990		       db 2
TRANGROUP:9991		       dw offset DATE
TRANGROUP:9993		       dw offset DateHelpMsgs
TRANGROUP:9995		       db 4
TRANGROUP:9996		       db 'TIME'
TRANGROUP:999A		       db 2
TRANGROUP:999B		       dw offset CTIME
TRANGROUP:999D		       dw offset TimeHelpMsgs
TRANGROUP:999F		       db 3
TRANGROUP:99A0		       db 'VER'
TRANGROUP:99A3		       db 2
TRANGROUP:99A4		       dw offset VERSION
TRANGROUP:99A6		       dw offset VerHelpMsgs
TRANGROUP:99A8		       db 3
TRANGROUP:99A9		       db 'VOL'
TRANGROUP:99AC		       db 3
TRANGROUP:99AD		       dw offset VOLUME
TRANGROUP:99AF		       dw offset VolHelpMsgs
TRANGROUP:99B1		       db 2,'CD'
TRANGROUP:99B4		       db 3
TRANGROUP:99B5		       dw offset _$CHDIR
TRANGROUP:99B7		       dw offset CdHelpMsgs
TRANGROUP:99B9		       db 5
TRANGROUP:99BA		       db 'CHDIR'
TRANGROUP:99BF		       db 3
TRANGROUP:99C0		       dw offset _$CHDIR
TRANGROUP:99C2		       dw offset CdHelpMsgs
TRANGROUP:99C4		       db 2,'MD'
TRANGROUP:99C7		       db 3
TRANGROUP:99C8		       dw offset _$MKDIR
TRANGROUP:99CA		       dw offset MdHelpMsgs
TRANGROUP:99CC		       db 5
TRANGROUP:99CD		       db 'MKDIR'
TRANGROUP:99D2		       db 3
TRANGROUP:99D3		       dw offset _$MKDIR
TRANGROUP:99D5		       dw offset MdHelpMsgs
TRANGROUP:99D7		       db 2,'RD'
TRANGROUP:99DA		       db 3
TRANGROUP:99DB		       dw offset _$RMDIR
TRANGROUP:99DD		       dw offset RdHelpMsgs
TRANGROUP:99DF		       db 5
TRANGROUP:99E0		       db 'RMDIR'
TRANGROUP:99E5		       db 3
TRANGROUP:99E6		       dw offset _$RMDIR
TRANGROUP:99E8		       dw offset RdHelpMsgs
TRANGROUP:99EA		       db 5
TRANGROUP:99EB		       db 'BREAK'
TRANGROUP:99F0		       db 2
TRANGROUP:99F1		       dw offset CNTRLC
TRANGROUP:99F3		       dw offset BreakHelpMsgs
TRANGROUP:99F5		       db 6
TRANGROUP:99F6		       db 'VERIFY'
TRANGROUP:99FC		       db 2
TRANGROUP:99FD		       dw offset VERIFY
TRANGROUP:99FF		       dw offset VerifyHelpMsgs
TRANGROUP:9A01		       db 3
TRANGROUP:9A02		       db 'SET'
TRANGROUP:9A05		       db 6
TRANGROUP:9A06		       dw offset ADD_NAME_TO_ENVIRONMENT
TRANGROUP:9A08		       dw offset SetHelpMsgs
TRANGROUP:9A0A		       db 6
TRANGROUP:9A0B		       db 'PROMPT'
TRANGROUP:9A11		       db 6
TRANGROUP:9A12		       dw offset ADD_PROMPT
TRANGROUP:9A14		       dw offset PromptHelpMsgs
TRANGROUP:9A16		       db 4
TRANGROUP:9A17		       db 'PATH'
TRANGROUP:9A1B		       db 2
TRANGROUP:9A1C		       dw offset PATH
TRANGROUP:9A1E		       dw offset PathHelpMsgs
TRANGROUP:9A20		       db 4
TRANGROUP:9A21		       db 'EXIT'
TRANGROUP:9A25		       db 0
TRANGROUP:9A26		       dw offset _$EXIT
TRANGROUP:9A28		       dw offset ExitHelpMsgs
TRANGROUP:9A2A		       db 4
TRANGROUP:9A2B		       db 'CTTY'
TRANGROUP:9A2F		       db 3
TRANGROUP:9A30		       dw offset CTTY
TRANGROUP:9A32		       dw offset CttyHelpMsgs
TRANGROUP:9A34		       db 4
TRANGROUP:9A35		       db 'ECHO'
TRANGROUP:9A39		       db 6
TRANGROUP:9A3A		       dw offset _ECHO
TRANGROUP:9A3C		       dw offset EchoHelpMsgs
TRANGROUP:9A3E		       db 4
TRANGROUP:9A3F		       db 'GOTO'
TRANGROUP:9A43		       db 6
TRANGROUP:9A44		       dw offset _GOTO
TRANGROUP:9A46		       dw offset GotoHelpMsgs
TRANGROUP:9A48		       db 5
TRANGROUP:9A49		       db 'SHIFT'
TRANGROUP:9A4E		       db 2
TRANGROUP:9A4F		       dw offset _SHIFT
TRANGROUP:9A51		       dw offset ShiftHelpMsgs
TRANGROUP:9A53		       db 2
TRANGROUP:9A54		       db 'IF'
TRANGROUP:9A56		       db 6
TRANGROUP:9A57		       dw offset _$IF
TRANGROUP:9A59		       dw offset IfHelpMsg
TRANGROUP:9A5B		       db 3
TRANGROUP:9A5C		       db 'FOR'
TRANGROUP:9A5F		       db 6
TRANGROUP:9A60		       dw offset _$FOR
TRANGROUP:9A62		       dw offset ForHelpMsgs
TRANGROUP:9A64		       db 3
TRANGROUP:9A65		       db 'CLS'
TRANGROUP:9A68		       db 0
TRANGROUP:9A69		       dw offset CLS
TRANGROUP:9A6B		       dw offset ClsHelpMsgs
TRANGROUP:9A6D		       db 8
TRANGROUP:9A6E		       db 'TRUENAME'
TRANGROUP:9A76		       db 3
TRANGROUP:9A77		       dw offset TRUENAME
TRANGROUP:9A79		       dw offset TruenameHelpMsgs
TRANGROUP:9A7B		       db 8
TRANGROUP:9A7C		       db 'LOADHIGH'
TRANGROUP:9A84		       db 2
TRANGROUP:9A85		       dw offset LoadHigh
TRANGROUP:9A87		       dw offset LoadhighHelpMsgs
TRANGROUP:9A89		       db 2
TRANGROUP:9A8A		       db 'LH'
TRANGROUP:9A8C		       db 2
TRANGROUP:9A8D		       dw offset LoadHigh
TRANGROUP:9A8F		       dw offset LoadhighHelpMsgs
TRANGROUP:9A91		       db 0
TRANGROUP:9A92 comext	       db '.COM'               ; ...
TRANGROUP:9A96 exeext	       db '.EXE'               ; ...
TRANGROUP:9A9A batext	       db '.BAT'               ; ...
TRANGROUP:9A9E switch_list     db '-Y?VBAPW'           ; ...
TRANGROUP:9AA6 AttrLtrs	       db 'RHSvDA'             ; ...
TRANGROUP:9AAC OrderLtrs       db 'NEDSG'              ; ...
TRANGROUP:9AB1 comspec_flag    db 0		       ; ...
TRANGROUP:9AB2 BATBUFLEN       dw 20h		       ; ...
TRANGROUP:9AB4 NO_VALUES       dw 0		       ; ...
TRANGROUP:9AB6 NULL_VALUE_LIST db 0		       ; ...
TRANGROUP:9AB7 FILE_REQUIRED   dw 200h		       ; ...
TRANGROUP:9AB9		       dw 1
TRANGROUP:9ABB		       dw offset PARSE1_OUTPUT
TRANGROUP:9ABD		       dw offset NO_VALUES
TRANGROUP:9ABF		       db 0
TRANGROUP:9AC0 FILE_OPTIONAL   dw 301h		       ; ...
TRANGROUP:9AC2		       dw 1
TRANGROUP:9AC4		       dw offset PARSE1_OUTPUT
TRANGROUP:9AC6		       dw offset NO_VALUES
TRANGROUP:9AC8		       db 0
TRANGROUP:9AC9 FILE_OPTIONAL2  dw 201h		       ; ...
TRANGROUP:9ACB		       dw 1
TRANGROUP:9ACD		       dw offset PARSE1_OUTPUT
TRANGROUP:9ACF		       dw offset NO_VALUES
TRANGROUP:9AD1		       db 0
TRANGROUP:9AD2 SLASH_P_SWITCH  dw 0		       ; ...
TRANGROUP:9AD4		       dw 2
TRANGROUP:9AD6		       dw offset PARSE1_OUTPUT
TRANGROUP:9AD8		       dw offset NO_VALUES
TRANGROUP:9ADA		       db 1
TRANGROUP:9ADB SLASH_P_SYN     db '/P',0               ; ...
TRANGROUP:9ADE PARSE_BREAK     dw offset BREAK_PARMS   ; ...
TRANGROUP:9AE0		       db 0
TRANGROUP:9AE1 BREAK_PARMS     db 0, 1		       ; 0 ; ...
TRANGROUP:9AE3		       dw offset BREAK_CONTROL1
TRANGROUP:9AE5		       db 0
TRANGROUP:9AE6		       db 0
TRANGROUP:9AE7 BREAK_CONTROL1  dw 2001h		       ; ...
TRANGROUP:9AE9		       dw 2
TRANGROUP:9AEB		       dw offset PARSE1_OUTPUT
TRANGROUP:9AED		       dw offset BREAK_VALUES
TRANGROUP:9AEF		       db 0
TRANGROUP:9AF0 BREAK_VALUES    db 3		       ; ...
TRANGROUP:9AF1		       db 0
TRANGROUP:9AF2		       db 0
TRANGROUP:9AF3		       db 2
TRANGROUP:9AF4		       db 0
TRANGROUP:9AF5		       dw offset BREAK_ON      ; "ON"
TRANGROUP:9AF7		       db 'f'
TRANGROUP:9AF8		       dw offset BREAK_OFF     ; "OFF"
TRANGROUP:9AFA BREAK_ON	       db 'ON',0               ; ...
TRANGROUP:9AFD BREAK_OFF       db 'OFF',0              ; ...
TRANGROUP:9B01 PARSE_CHCP      dw offset CHCP_PARMS    ; ...
TRANGROUP:9B01					       ; "\x01"
TRANGROUP:9B03		       db 0
TRANGROUP:9B04 CHCP_PARMS      db 0,1		       ; ...
TRANGROUP:9B06		       dw offset CHCP_CONTROL1
TRANGROUP:9B08		       db 0
TRANGROUP:9B09		       db 0
TRANGROUP:9B0A CHCP_CONTROL1   dw 8001h		       ; ...
TRANGROUP:9B0C		       dw 0
TRANGROUP:9B0E		       dw offset PARSE1_OUTPUT
TRANGROUP:9B10		       dw offset CHCP_VALUES
TRANGROUP:9B12		       db 0
TRANGROUP:9B13 CHCP_VALUES     db 1		       ; ...
TRANGROUP:9B14		       db 1
TRANGROUP:9B15		       db 1
TRANGROUP:9B16		       dd 100		       ; CHCP_MINVAL
TRANGROUP:9B1A		       dd 999		       ; CHCP_MAXVAL
TRANGROUP:9B1E		       db 0
TRANGROUP:9B1F		       db 0
TRANGROUP:9B20 PARSE_DATE      dw offset DATE_PARMS    ; ...
TRANGROUP:9B20					       ; "\x01"
TRANGROUP:9B22		       db 0
TRANGROUP:9B23 DATE_PARMS      db 0,1		       ; ...
TRANGROUP:9B25		       dw offset DATE_CONTROL1
TRANGROUP:9B27		       db 0
TRANGROUP:9B28		       db 0
TRANGROUP:9B29 DATE_CONTROL1   dw 1001h		       ; ...
TRANGROUP:9B2B		       dw 0
TRANGROUP:9B2D		       dw offset DATE_OUTPUT
TRANGROUP:9B2F		       dw offset NO_VALUES
TRANGROUP:9B31		       db 0
TRANGROUP:9B32 PARSE_TIME      dw offset TIME_PARMS    ; ...
TRANGROUP:9B34		       db 0
TRANGROUP:9B35 TIME_PARMS      db 0, 1		       ; 0 ; ...
TRANGROUP:9B37		       dw offset TIME_CONTROL1
TRANGROUP:9B39		       db 0
TRANGROUP:9B3A		       db 0
TRANGROUP:9B3B TIME_CONTROL1   dw 801h		       ; ...
TRANGROUP:9B3D		       dw 0
TRANGROUP:9B3F		       dw offset TIME_OUTPUT
TRANGROUP:9B41		       dw offset NO_VALUES
TRANGROUP:9B43		       db 0
TRANGROUP:9B44 PARSE_VOL       dw offset VOL_PARMS     ; ...
TRANGROUP:9B44					       ; "\x01"
TRANGROUP:9B46		       db 0
TRANGROUP:9B47 VOL_PARMS       db 0,1		       ; ...
TRANGROUP:9B49		       dw offset DRIVE_CONTROL1
TRANGROUP:9B4B		       db 0
TRANGROUP:9B4C		       db 0
TRANGROUP:9B4D DRIVE_CONTROL1  dw 101h		       ; ...
TRANGROUP:9B4F		       dw 1
TRANGROUP:9B51		       dw offset DRIVE_OUTPUT
TRANGROUP:9B53		       dw offset NO_VALUES
TRANGROUP:9B55		       db 0
TRANGROUP:9B56 PARSE_MRDIR     dw offset MRDIR_PARMS   ; ...
TRANGROUP:9B56					       ; "\x01\x01"
TRANGROUP:9B58		       db 0
TRANGROUP:9B59 MRDIR_PARMS     db 1,1		       ; ...
TRANGROUP:9B5B		       dw offset FILE_REQUIRED
TRANGROUP:9B5D		       db 0
TRANGROUP:9B5E		       db 0
TRANGROUP:9B5F PARSE_CHDIR     dw offset CHDIR_PARMS   ; ...
TRANGROUP:9B5F					       ; "\x01"
TRANGROUP:9B61		       db 0
TRANGROUP:9B62 CHDIR_PARMS     db 0,1		       ; ...
TRANGROUP:9B64		       dw offset FILE_OPTIONAL
TRANGROUP:9B66		       db 0
TRANGROUP:9B67		       db 0
TRANGROUP:9B68 PARSE_ERASE     dw offset ERASE_PARMS   ; ...
TRANGROUP:9B68					       ; "\x01\x01"
TRANGROUP:9B6A		       db 0
TRANGROUP:9B6B ERASE_PARMS     db 1,1		       ; ...
TRANGROUP:9B6D		       dw offset FILE_REQUIRED
TRANGROUP:9B6F		       db 1
TRANGROUP:9B70		       dw offset SLASH_P_SWITCH
TRANGROUP:9B72		       db 0
TRANGROUP:9B73 PARSE_DIR       dw offset DIR_PARMS     ; ...
TRANGROUP:9B75		       db 0
TRANGROUP:9B76 DIR_PARMS       db 0, 1		       ; 0 ; ...
TRANGROUP:9B78		       dw offset FILE_OPTIONAL2
TRANGROUP:9B7A		       db 2
TRANGROUP:9B7B		       dw offset DIR_SW_VALUED
TRANGROUP:9B7D		       dw offset DIR_SW_UNVALUED
TRANGROUP:9B7F		       db 0
TRANGROUP:9B80 DIR_SW_VALUED   dw 2001h		       ; ...
TRANGROUP:9B82		       dw 21h
TRANGROUP:9B84		       dw offset PARSE1_OUTPUT
TRANGROUP:9B86		       dw offset NULL_VALUE_LIST
TRANGROUP:9B88		       db 2
TRANGROUP:9B89 DIR_SW_A	       db '/A',0               ; ...
TRANGROUP:9B8C DIR_SW_O	       db '/O',0               ; ...
TRANGROUP:9B8F DIR_SW_UNVALUED dw 0		       ; ...
TRANGROUP:9B91		       dw 0
TRANGROUP:9B93		       dw offset PARSE1_OUTPUT
TRANGROUP:9B95		       dw offset NO_VALUES
TRANGROUP:9B97		       db 16
TRANGROUP:9B98 DIR_SW_NEG_A    db '/-A',0              ; ...
TRANGROUP:9B9C DIR_SW_NEG_O    db '/-O',0              ; ...
TRANGROUP:9BA0 DIR_SW_S	       db '/S',0               ; ...
TRANGROUP:9BA3 DIR_SW_NEG_S    db '/-S',0              ; ...
TRANGROUP:9BA7 DIR_SW_B	       db '/B',0               ; ...
TRANGROUP:9BAA DIR_SW_NEG_B    db '/-B',0              ; ...
TRANGROUP:9BAE DIR_SW_W	       db '/W',0               ; ...
TRANGROUP:9BB1 DIR_SW_NEG_W    db '/-W',0              ; ...
TRANGROUP:9BB5 DIR_SW_P	       db '/P',0               ; ...
TRANGROUP:9BB8 DIR_SW_NEG_P    db '/-P',0              ; ...
TRANGROUP:9BBC DIR_SW_L	       db '/L',0               ; ...
TRANGROUP:9BBF DIR_SW_NEG_L    db '/-L',0              ; ...
TRANGROUP:9BC3 DIR_SW_Z	       db '/Z',0               ; ...
TRANGROUP:9BC6 DIR_SW_NEG_Z    db '/-Z',0              ; ...
TRANGROUP:9BCA DIR_SW_4	       db '/4',0               ; ...
TRANGROUP:9BCD DIR_SW_NEG_4    db '/-4',0              ; ...
TRANGROUP:9BD1 Dir_Sw_Ptrs     dw offset DIR_SW_NEG_W  ; ...
TRANGROUP:9BD1					       ; "/-W"
TRANGROUP:9BD3 Dir_Sw_Ptrs_2   dw offset DIR_SW_W      ; ...
TRANGROUP:9BD3					       ; "/W"
TRANGROUP:9BD5		       dw offset DIR_SW_NEG_P  ; "/-P"
TRANGROUP:9BD7		       dw offset DIR_SW_P      ; "/P"
TRANGROUP:9BD9		       dw offset DIR_SW_NEG_S  ; "/-S"
TRANGROUP:9BDB		       dw offset DIR_SW_S      ; "/S"
TRANGROUP:9BDD		       dw offset DIR_SW_NEG_B  ; "/-B"
TRANGROUP:9BDF		       dw offset DIR_SW_B      ; "/B"
TRANGROUP:9BE1		       dw offset DIR_SW_NEG_L  ; "/-L"
TRANGROUP:9BE3		       dw offset DIR_SW_L      ; "/L"
TRANGROUP:9BE5		       dw offset DIR_SW_NEG_Z  ; "/-Z"
TRANGROUP:9BE7		       dw offset DIR_SW_Z      ; "/Z"
TRANGROUP:9BE9		       dw offset DIR_SW_NEG_4  ; "/-4"
TRANGROUP:9BEB		       dw offset DIR_SW_4      ; "/4"
TRANGROUP:9BED		       dw offset DIR_SW_NEG_O  ; "/-O"
TRANGROUP:9BEF		       dw offset DIR_SW_O      ; "/O"
TRANGROUP:9BF1		       dw offset DIR_SW_NEG_A  ; "/-A"
TRANGROUP:9BF3		       dw offset DIR_SW_A      ; "/A"
TRANGROUP:9BF5 PARSE_RENAME    dw offset RENAME_PARMS  ; ...
TRANGROUP:9BF7		       db 0
TRANGROUP:9BF8 RENAME_PARMS    db 2, 2		       ; 0 ; ...
TRANGROUP:9BFA		       dw offset FILE_REQUIRED
TRANGROUP:9BFC		       dw offset FILE_REQUIRED
TRANGROUP:9BFE		       db 0
TRANGROUP:9BFF		       db 0
TRANGROUP:9C00 PARSE_CTTY      dw offset CTTY_PARMS    ; ...
TRANGROUP:9C02		       db 0
TRANGROUP:9C03 CTTY_PARMS      db 1, 1		       ; 0 ; ...
TRANGROUP:9C05		       dw offset CTTY_CONTROL1
TRANGROUP:9C07		       db 0
TRANGROUP:9C08		       db 0
TRANGROUP:9C09 CTTY_CONTROL1   dw 2000h		       ; ...
TRANGROUP:9C0B		       dw 11h
TRANGROUP:9C0D		       dw offset PARSE1_OUTPUT
TRANGROUP:9C0F		       dw offset NO_VALUES
TRANGROUP:9C11		       db 0
TRANGROUP:9C12 PARSE_VER       dw offset VER_PARMS     ; ...
TRANGROUP:9C14		       db 0
TRANGROUP:9C15 VER_PARMS       db 0, 0		       ; 0 ; ...
TRANGROUP:9C17		       db 1
TRANGROUP:9C18		       dw offset SLASH_R
TRANGROUP:9C1A		       db 0
TRANGROUP:9C1B SLASH_R	       dw 0		       ; ...
TRANGROUP:9C1D		       dw 2
TRANGROUP:9C1F		       dw offset PARSE1_OUTPUT
TRANGROUP:9C21		       dw offset NO_VALUES
TRANGROUP:9C23		       db 1
TRANGROUP:9C24		       db '/R',0
TRANGROUP:9C27 Parse_LoadHi    dw offset LoadHi_Parms
TRANGROUP:9C29		       db 0
TRANGROUP:9C2A LoadHi_Parms    db 1		       ; ...
TRANGROUP:9C2B		       db 1
TRANGROUP:9C2C		       dw offset FILE_REQUIRED
TRANGROUP:9C2E		       db 0
TRANGROUP:9C2F		       db 0
TRANGROUP:9C30 TempVarName     db 'TEMP=',0            ; ...
TRANGROUP:9C36 copycmd	       db 'COPYCMD='           ; ...
TRANGROUP:9C3E REXX_EXE	       db 'REXX.EXE',0         ; ...
TRANGROUP:9C47 $P_ORDINAL      dw 0		       ; ...
TRANGROUP:9C49 $P_RC	       dw 0		       ; ...
TRANGROUP:9C4B $P_SI_Save      dw 0		       ; ...
TRANGROUP:9C4D $P_DX	       dw 0		       ; ...
TRANGROUP:9C4F $P_Terminator   db 0		       ; ...
TRANGROUP:9C50 $P_DBCSEV_OFF   dw 0		       ; ...
TRANGROUP:9C52 $P_DBCSEV_SEG   dw 0		       ; ...
TRANGROUP:9C54 $P_Flags	       db 0		       ; ...
TRANGROUP:9C55 $P_Flags2       db 0		       ; ...
TRANGROUP:9C56 $P_SaveSI_Cmpx  dw 0		       ; ...
TRANGROUP:9C58 $P_KEYorSW_Ptr  dw 0		       ; ...
TRANGROUP:9C5A $P_Save_EOB     dw 0		       ; ...
TRANGROUP:9C5C $P_Found_SYNONYM	dw 0		       ; ...
TRANGROUP:9C5E $P_STRING_BUF   db 128 dup(0)	       ; 0 ; ...
TRANGROUP:9CDE $P_ORIG_ORD     dw 0		       ; ...
TRANGROUP:9CE0 $P_ORIG_STACK   dw 0		       ; ...
TRANGROUP:9CE2 $P_ORIG_SI      dw 0		       ; ...
TRANGROUP:9CE4 $P_Got_Time     db 0		       ; ...
TRANGROUP:9CE5 $P_Country_Info dw 0FFFFh	       ; ...
TRANGROUP:9CE7		       db 32 dup(0)	       ; 0
TRANGROUP:9D07 $P_1st_Val      dw 0		       ; ...
TRANGROUP:9D09 $P_2nd_Val      dw 0		       ; ...
TRANGROUP:9D0B $P_3rd_Val      dw 0		       ; ...
TRANGROUP:9D0D $P_4th_Val      dw 0		       ; ...
TRANGROUP:9D0F $P_Char_CAP_Ptr db 0FFh		       ; ...
TRANGROUP:9D10		       dw 0
TRANGROUP:9D12		       dw 0
TRANGROUP:9D14 $P_File_CAP_Ptr db 0FFh		       ; ...
TRANGROUP:9D15		       dw 0
TRANGROUP:9D17		       dw 0
TRANGROUP:9D19 $P_FileSp_Char  db '[]|<>+=;"'          ; ...
TRANGROUP:9D22 $P_err_flag     db 0		       ; ...
TRANGROUP:9D23 $M_RT_$M_EXT_ERR_ADDRS dw 2 dup(0)	      ;	0 ; ...
TRANGROUP:9D27 $M_RT_$M_EXT_FILE dw 2 dup(0)		 ; 0 ; ...
TRANGROUP:9D2B $M_RT_$M_EXT_COMMAND dw 2 dup(0)		    ; 0	; ...
TRANGROUP:9D2F		       dd 0FFFFFFFFh
TRANGROUP:9D33 $M_RT_$M_PARSE_COMMAND dw 2 dup(0)	      ;	0 ; ...
TRANGROUP:9D37 $M_RT_$M_PARSE_ADDRS dw 2 dup(0)		    ; 0	; ...
TRANGROUP:9D3B		       dd 0FFFFFFFFh
TRANGROUP:9D3F $M_RT_$M_CRIT_ADDRS dw 2	dup(0)		   ; 0 ; ...
TRANGROUP:9D43 $M_RT_$M_CRIT_COMMAND dw	2 dup(0)	     ; 0 ; ...
TRANGROUP:9D47		       dd 0FFFFFFFFh
TRANGROUP:9D4B $M_RT_$M_DISK_PROC_ADDR dd 0FFFFFFFFh   ; ...
TRANGROUP:9D4F $M_RT_$M_CLASS_ADDRS dd 0	       ; ...
TRANGROUP:9D53		       dd 0
TRANGROUP:9D57		       dd 0
TRANGROUP:9D5B		       dd 0FFFFFFFFh
TRANGROUP:9D5F $M_RT_$M_DBCS_VEC dw 2 dup(0)		 ; 0 ; ...
TRANGROUP:9D63 $M_RT_$M_HANDLE dw 0		       ; ...
TRANGROUP:9D65 $M_RT_$M_SIZE   db 0		       ; ...
TRANGROUP:9D66 $M_RT_$M_CRLF   db 0Dh,0Ah	       ; ...
TRANGROUP:9D68 $M_RT_$M_CLASS  db 0		       ; ...
TRANGROUP:9D69 $M_RT_$M_RETURN_ADDR dw 0	       ; ...
TRANGROUP:9D6B $M_RT_$M_MSG_NUM	dw 0		       ; ...
TRANGROUP:9D6D $M_RT_$M_DIVISOR	dw 10		       ; ...
TRANGROUP:9D6F $M_RT_$M_TEMP_BUF dw 2424h	       ; ...
TRANGROUP:9D71		       db 5 dup(24h)	       ; 0
TRANGROUP:9D76 $M_RT_$M_THOU_SEPARA dw 2424h	       ; ...
TRANGROUP:9D78 $M_RT_$M_DECI_SEPARA dw 2424h	       ; ...
TRANGROUP:9D7A $M_RT_$M_DATE_SEPARA dw 2424h	       ; ...
TRANGROUP:9D7C $M_RT_$M_TIME_SEPARA dw 2424h	       ; ...
TRANGROUP:9D7E		       db 2 dup(24h)	       ; 0
TRANGROUP:9D80 $M_RT_$M_TIME_FORMAT dw 2424h	       ; ...
TRANGROUP:9D82		       db 2Dh dup(24h)	       ; 0
TRANGROUP:9DAF $M_RT_$M_BUF_TERM db 24h		       ; ...
TRANGROUP:9DB0 PRINTF_HANDLE   dw 0		       ; ...
TRANGROUP:9DB2 SRCXNAME	       db 87 dup(0)	       ; 0 ; ...
TRANGROUP:9E09 TRGXNAME	       db 87 dup(0)	       ; 0 ; ...
TRANGROUP:9E60 UCOMBUF	       db 131 dup(0)	       ; 0 ; ...
TRANGROUP:9EE3 COMBUF	       db 131 dup(0)	       ; 0 ; ...
TRANGROUP:9F66 USERDIR1	       db 70 dup(0)	       ; 0 ; ...
TRANGROUP:9FAC EXECPATH	       db 131 dup(0)	       ; 0 ; ...
TRANGROUP:A02F RE_INSTR	       db 83 dup(0)	       ; 0 ; ...
TRANGROUP:A082 HEADCALL	       dw 0		       ; ...
TRANGROUP:A084 RESSEG	       dw 0		       ; ...
TRANGROUP:A086 TPA	       dw 0		       ; ...
TRANGROUP:A088 SWITCHAR	       db 0		       ; ...
TRANGROUP:A089 DIRCHAR	       db 0		       ; ...
TRANGROUP:A08A EXEC_ADDR       dd 0		       ; ...
TRANGROUP:A08E RCH_ADDR	       dd 0		       ; ...
TRANGROUP:A092 TRAN_TPA	       dw 0		       ; ...
TRANGROUP:A094 CHKDRV	       db 0		       ; ...
TRANGROUP:A095 IFNOTFLAG       db 0		       ; ...
TRANGROUP:A096 CURDRV	       db 0		       ; ...
TRANGROUP:A097 PARM1	       db 0		       ; ...
TRANGROUP:A098 notzerofile     db 0		       ; ...
TRANGROUP:A099 PARM2	       db 0		       ; ...
TRANGROUP:A09A COMSW	       dw 0		       ; ...
TRANGROUP:A09C ARG1S	       dw 0		       ; ...
TRANGROUP:A09E DestSwitch      dw 0		       ; ...
TRANGROUP:A0A0 ARGTS	       dw 0		       ; ...
TRANGROUP:A0A2 CFLAG	       db 0		       ; ...
TRANGROUP:A0A3 SPECDRV	       db 0		       ; ...
TRANGROUP:A0A4 BYTCNT	       dw 0		       ; ...
TRANGROUP:A0A6		       dw 0
TRANGROUP:A0A8 NXTADD	       dw 0		       ; ...
TRANGROUP:A0AA FRSTSRCH	       db 0		       ; ...
TRANGROUP:A0AB LeftOnLine      db 0		       ; ...
TRANGROUP:A0AC PerLine	       db 0		       ; ...
TRANGROUP:A0AD LeftOnPage      dw 0		       ; ...
TRANGROUP:A0AF FileCnt	       dw 0		       ; ...
TRANGROUP:A0B1 FileSiz	       dw 4 dup(0)	       ; 0 ; ...
TRANGROUP:A0B9 narrow	       db 0		       ; ...
TRANGROUP:A0BA nocommas	       db 0		       ; ...
TRANGROUP:A0BB yeardigit4      db 0		       ; ...
TRANGROUP:A0BC bfree_not_kilo  db 0		       ; ...
TRANGROUP:A0BD efs_buffer      db 44 dup(0)	       ; 0 ; ...
TRANGROUP:A0E9 efs_drive       db 'C:\',0              ; ...
TRANGROUP:A0ED FileCntTotal    dw 2 dup(0)	       ; 0 ; ...
TRANGROUP:A0F1 FileSizTotal    dw 4 dup(0)	       ; 0 ; ...
TRANGROUP:A0F9 CHARBUF	       db 80 dup(0)	       ; 0 ; ...
TRANGROUP:A149 IDLEN	       db 0		       ; ...
TRANGROUP:A14A ID	       db 8 dup(0)	       ; 0 ; ...
TRANGROUP:A152 COM	       db 3 dup(0)	       ; 0
TRANGROUP:A155 DEST	       db 37 dup(0)	       ; 0 ; ...
TRANGROUP:A17A DESTNAME	       db 11 dup(0)	       ; 0
TRANGROUP:A185 DESTDIR	       db 67 dup(0)	       ; 0 ; ...
TRANGROUP:A1C8 BWDBUF	       db 70 dup(0)	       ; 0 ; ...
TRANGROUP:A20E SDIRBUF	       db 12 dup(0)	       ; 0 ; ...
TRANGROUP:A21A _Bits	       dw 0		       ; ...
TRANGROUP:A21C PathCnt	       dw 0		       ; ...
TRANGROUP:A21E PathPos	       dw 0		       ; ...
TRANGROUP:A220 PathSw	       dw 0		       ; ...
TRANGROUP:A222 AttrSpecified   db 0		       ; ...
TRANGROUP:A223 AttrSelect      db 0		       ; ...
TRANGROUP:A224 comma	       db 0		       ; ...
TRANGROUP:A225 plus_comma      db 0		       ; ...
TRANGROUP:A226 DirFlag	       db 0		       ; ...
TRANGROUP:A227 parse_last      dw 0		       ; ...
TRANGROUP:A229 system_cpage    dw 0		       ; ...
TRANGROUP:A22B File_Size_Low   dw 0		       ; ...
TRANGROUP:A22D File_Size_High  dw 0		       ; ...
TRANGROUP:A22F string_ptr_2    dw 0		       ; ...
TRANGROUP:A231 Copy_num	       dw 0		       ; ...
TRANGROUP:A233 cpyflag	       db 0		       ; ...
TRANGROUP:A234 Dir_Num	       dw 2 dup(0)	       ; 0 ; ...
TRANGROUP:A238 Bytes_Free      dd 0		       ; ...
TRANGROUP:A23C Major_Ver_Num   dw 0		       ; ...
TRANGROUP:A23E Minor_Ver_Num   dw 0		       ; ...
TRANGROUP:A240 One_Char_Val    db 0		       ; ...
TRANGROUP:A241		       db 0
TRANGROUP:A242 vol_drv	       db 0		       ; ...
TRANGROUP:A243 ROM_CALL	       db 0		       ; ...
TRANGROUP:A244 ROM_IP	       dw 0		       ; ...
TRANGROUP:A246 ROM_CS	       dw 0		       ; ...
TRANGROUP:A248 DestIsDir       db 0		       ; ...
TRANGROUP:A249 DestSiz	       db 0		       ; ...
TRANGROUP:A24A DestTail	       dw 0		       ; ...
TRANGROUP:A24C DestInfo	       db 0		       ; ...
TRANGROUP:A24D DestBuf	       db 87 dup(0)	       ; 0 ; ...
TRANGROUP:A2A4 EndDestBuf      dw 0		       ; ...
TRANGROUP:A2A6 DESTISDEV       db 0		       ; ...
TRANGROUP:A2A7 FIRSTDEST       db 0		       ; ...
TRANGROUP:A2A8 MELCOPY	       db 0		       ; ...
TRANGROUP:A2A9 MELSTART	       dw 0		       ; ...
TRANGROUP:A2AB SrcIsDir	       db 0		       ; ...
TRANGROUP:A2AC SrcSiz	       db 0		       ; ...
TRANGROUP:A2AD SrcTail	       dw 0		       ; ...
TRANGROUP:A2AF SrcInfo	       db 0		       ; ...
TRANGROUP:A2B0 SrcBuf	       db 87 dup(0)	       ; 0 ; ...
TRANGROUP:A307 SRCHAND	       dw 0		       ; ...
TRANGROUP:A309 SRCISDEV	       db 0		       ; ...
TRANGROUP:A30A ScanBuf	       db 87 dup(0)	       ; 0 ; ...
TRANGROUP:A361 SRCPT	       dw 0		       ; ...
TRANGROUP:A363 INEXACT	       db 0		       ; ...
TRANGROUP:A364 NOWRITE	       db 0		       ; ...
TRANGROUP:A365 BINARY	       db 0		       ; ...
TRANGROUP:A366 WRITTEN	       dw 0		       ; ...
TRANGROUP:A368 TERMREAD	       db 0		       ; ...
TRANGROUP:A369 ASCII	       db 0		       ; ...
TRANGROUP:A36A PLUS	       db 0		       ; ...
TRANGROUP:A36B objcnt	       db 0		       ; ...
TRANGROUP:A36C CPDATE	       dw 0		       ; ...
TRANGROUP:A36E CPTIME	       dw 0		       ; ...
TRANGROUP:A370 OFilePtr_Lo     dw 0		       ; ...
TRANGROUP:A372 OFilePtr_Hi     dw 0		       ; ...
TRANGROUP:A374 zflag	       db 0		       ; ...
TRANGROUP:A375 cox_sublist_buff	db 11 dup(0)		; 0 ; ...
TRANGROUP:A380 cox_y_override  db 0		       ; ...
TRANGROUP:A381 cox_dest_file   db 0		       ; ...
TRANGROUP:A382 cox_src_file    db 0		       ; ...
TRANGROUP:A383 BATHAND	       dw 0		       ; ...
TRANGROUP:A385 STARTEL	       dw 0		       ; ...
TRANGROUP:A387 ELCNT	       db 0		       ; ...
TRANGROUP:A388 ELPOS	       db 0		       ; ...
TRANGROUP:A389 SKPDEL	       db 0		       ; ...
TRANGROUP:A38A SOURCE	       db 11 dup(0)	       ; 0
TRANGROUP:A395 ext_entered     db 0		       ; ...
TRANGROUP:A396 Display_Ioctl   db 0		       ; ...
TRANGROUP:A397		       db 0
TRANGROUP:A398		       dw 14		       ; crt_ioctl_ln
TRANGROUP:A39A		       dw 0
TRANGROUP:A39C display_mode    db 0
TRANGROUP:A39D		       db 0
TRANGROUP:A39E		       dw 0
TRANGROUP:A3A0		       dw 0
TRANGROUP:A3A2		       dw 0
TRANGROUP:A3A4 display_width   dw 0		       ; ...
TRANGROUP:A3A6 LinPerPag       dw 25		       ; ...
TRANGROUP:A3A8 vol_ioctl_buf   dw 0		       ; ...
TRANGROUP:A3AA vol_serial      dd 0		       ; ...
TRANGROUP:A3AE vol_label       db 0Bh dup(20h)	       ; 0
TRANGROUP:A3B9		       db 8 dup(20h)	       ; 0
TRANGROUP:A3C1 expand_star     db 0		       ; ...
TRANGROUP:A3C2 msg_flag	       db 0		       ; ...
TRANGROUP:A3C3 Msg_Numb	       dw 0		       ; ...
TRANGROUP:A3C5 append_exec     db 0		       ; ...
TRANGROUP:A3C6 print_err_flag  dw 0		       ; ...
TRANGROUP:A3C8 subst_buffer    db 22 dup(0)	       ; 0 ; ...
TRANGROUP:A3DE KPARSE	       db 0		       ; ...
TRANGROUP:A3DF ARG_ARGV	       dw 0		       ; ...
TRANGROUP:A3E1 ARGV0_ARG_FLAGS db 0		       ; ...
TRANGROUP:A3E2 ARGV0_ARGSTARTEL	dw 0		       ; ...
TRANGROUP:A3E4 ARGV0_ARGLEN    dw 0		       ; ...
TRANGROUP:A3E6 ARGV0_ARGSW_WORD	dw 0		       ; ...
TRANGROUP:A3E8 ARGV0_OCOMPTR   dw 0		       ; ...
TRANGROUP:A3EA ARGV1_ARGPOINTER	dw 0		       ; ...
TRANGROUP:A3EC		       dw 0
TRANGROUP:A3EE		       dw 0
TRANGROUP:A3F0		       db 0
TRANGROUP:A3F1 ARGV1_ARGSW_WORD	dw 0		       ; ...
TRANGROUP:A3F3		       dw 0
TRANGROUP:A3F5 ARGV2_ARGPOINTER	dw 0		       ; ...
TRANGROUP:A3F7		       dw 0
TRANGROUP:A3F9		       dw 0
TRANGROUP:A3FB		       db 0
TRANGROUP:A3FC ARGV2_ARGSW_WORD	dw 0		       ; ...
TRANGROUP:A3FE		       dw 0
TRANGROUP:A400		       db 671 dup(0)	       ; 0 ; ARGV[3] to	ARGV[63]
TRANGROUP:A69F ARG_ARGVCNT     dw 0		       ; ...
TRANGROUP:A6A1 ARG_ARGSWINFO   dw 0		       ; ...
TRANGROUP:A6A3 ARG_ARGBUF      dw 128 dup(0)	       ; 0 ; ...
TRANGROUP:A6A3					       ; times ARGBLEN dw 0
TRANGROUP:A7A3 ARG_ARGFORCOMBUF	db 128 dup(0)		; 0 ; ...
TRANGROUP:A823 ARGBUF_PTR      dw 0		       ; ...
TRANGROUP:A825 TPBUF	       db 128 dup(0)	       ; 0 ; ...
TRANGROUP:A8A5 LASTARG	       dw 0		       ; ...
TRANGROUP:A8A7 COMPTR	       dw 0		       ; ...
TRANGROUP:A8A9 FBUF	       db 43 dup(0)	       ; 0 ; ...
TRANGROUP:A8A9					       ; times FINDBUFLEN db 0
TRANGROUP:A8D4 pathinfo	       dw 0, 0,	0	       ; 0 ; ...
TRANGROUP:A8DA psep_char       db 0		       ; ...
TRANGROUP:A8DB search_best     db 0		       ; ...
TRANGROUP:A8DC search_best_buf db 13 dup(0)	       ; 0 ; ...
TRANGROUP:A8DC					       ; times FNAME_MAX_LEN db	0
TRANGROUP:A8E9 search_curdir_buf db 64 dup(0)		 ; 0 ; ...
TRANGROUP:A929 search_error    dw 0		       ; ...
TRANGROUP:A92B IF_NOT_COUNT    dw 0		       ; ...
TRANGROUP:A92D		       db 256 dup(0)	       ; 0
TRANGROUP:AA2D STACK	       dw 0		       ; ...
TRANGROUP:AA2F CURRENCY_SYM    db 5 dup(0)	       ; 0
TRANGROUP:AA34 THOUS_SEP       db 2 dup(0)	       ; 0
TRANGROUP:AA36 DECIMAL_SEP     db 2 dup(0)	       ; 0
TRANGROUP:AA38 DATE_SEP	       db 2 dup(0)	       ; 0
TRANGROUP:AA3A TIME_SEP	       db 2 dup(0)	       ; 0
TRANGROUP:AA3C BIT_FIELD       db 0
TRANGROUP:AA3D CURRENCY_CENTS  db 0
TRANGROUP:AA3E TIME_24	       db 0
TRANGROUP:AA3F MAP_CALL	       dd 0
TRANGROUP:AA43 DATA_SEP	       db 2 dup(0)	       ; 0
TRANGROUP:AA45		       db 8 dup(0)	       ; 0
TRANGROUP:AA4D CountryPtrId    db 0		       ; ...
TRANGROUP:AA4E CountryPtr      dd 0		       ; ...
TRANGROUP:AA52 OldCtrlCHandler dd 0		       ; ...
TRANGROUP:AA56 BATBUFPOS       dw 0		       ; ...
TRANGROUP:AA58 BATBUF	       db 32 dup(0)	       ; 0 ; ...
TRANGROUP:AA78 BATBUFEND       dw 0		       ; ...
TRANGROUP:AA7A PARSE1_OUTPUT   db 0		       ; ...
TRANGROUP:AA7B PARSE1_CODE     db 0		       ; ...
TRANGROUP:AA7C PARSE1_SYN      dw 0		       ; ...
TRANGROUP:AA7E PARSE1_ADDR     dd 0		       ; ...
TRANGROUP:AA82 DATE_OUTPUT     db 0		       ; ...
TRANGROUP:AA83		       db 0
TRANGROUP:AA84		       dw 0
TRANGROUP:AA86 DATE_YEAR       dw 0		       ; ...
TRANGROUP:AA88 DATE_MONTH      db 0		       ; ...
TRANGROUP:AA89 DATE_DAY	       db 0		       ; ...
TRANGROUP:AA8A TIME_OUTPUT     db 0		       ; ...
TRANGROUP:AA8B		       db 0
TRANGROUP:AA8C		       dw 0
TRANGROUP:AA8E TIME_HOUR       db 0		       ; ...
TRANGROUP:AA8F TIME_MINUTES    db 0		       ; ...
TRANGROUP:AA90 TIME_SECONDS    db 0		       ; ...
TRANGROUP:AA91 TIME_FRACTION   db 0		       ; ...
TRANGROUP:AA92 DRIVE_OUTPUT    db 0		       ; ...
TRANGROUP:AA93 DRIVE_VALUE     db 0
TRANGROUP:AA94		       dw 0
TRANGROUP:AA96 DRIVE_NUMBER    db 0
TRANGROUP:AA97		       db 3 dup(0)	       ; 0
TRANGROUP:AA97 ends	       TRANGROUP
TRANGROUP:AA97
TRANGROUP:AA97
TRANGROUP:AA97		       end start
